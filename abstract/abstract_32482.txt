BACKGROUND
tiling microarrays are becoming an essential technology in the functional genomics toolbox. they have been applied to the tasks of novel transcript identification, elucidation of transcription factor binding sites, detection of methylated dna and several other applications in several model organisms. these experiments are being conducted at increasingly finer resolutions as the microarray technology enjoys increasingly greater feature densities. the increased densities naturally lead to increased data analysis requirements. specifically, the most widely employed algorithm for tiling array analysis involves smoothing observed signals by computing pseudomedians within sliding windows, a o calculation in each window. this poor time complexity is an issue for tiling array analysis and could prove to be a real bottleneck as tiling microarray experiments become grander in scope and finer in resolution.


RESULTS
we therefore implemented monahan's hlqest algorithm that reduces the runtime complexity for computing the pseudomedian of n numbers to o from o. for a representative tiling microarray dataset, this modification reduced the smoothing procedure's runtime by nearly 90%. we then leveraged the fact that elements within sliding windows remain largely unchanged in overlapping windows  to further reduce computation by an additional 43%. this was achieved by the application of skip lists to maintaining a sorted list of values from window to window. this sorted list could be maintained with simple o inserts and deletes. we illustrate the favorable scaling properties of our algorithms with both time complexity analysis and benchmarking on synthetic datasets.


CONCLUSIONS
tiling microarray analyses that rely upon a sliding window pseudomedian calculation can require many hours of computation. we have eased this requirement significantly by implementing efficient algorithms that scale well with genomic feature density. this result not only speeds the current standard analyses, but also makes possible ones where many iterations of the filter may be required, such as might be required in a bootstrap or parameter estimation setting.  source code and executables are available at .

