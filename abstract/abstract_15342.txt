BACKGROUND
roche  <dig> pyrosequencing has become a method of choice for generating transcriptome data from non-model organisms. once the tens to hundreds of thousands of short  reads have been produced, it is important to correctly assemble these to estimate the sequence of all the transcripts. most transcriptome assembly projects use only one program for assembling  <dig> pyrosequencing reads, but there is no evidence that the programs used to date are optimal. we have carried out a systematic comparison of five assemblers  to establish best practices for transcriptome assemblies, using a new dataset from the parasitic nematode litomosoides sigmodontis.


RESULTS
although no single assembler performed best on all our criteria, newbler  <dig>  gave longer contigs, better alignments to some reference sequences, and was fast and easy to use. seqman assemblies performed best on the criterion of recapitulating known transcripts, and had more novel sequence than the other assemblers, but generated an excess of small, redundant contigs. the remaining assemblers all performed almost as well, with the exception of newbler  <dig>  , which generated assemblies that had significantly lower total length. as different assemblers use different underlying algorithms to generate contigs, we also explored merging of assemblies and found that the merged datasets not only aligned better to reference sequences than individual assemblies, but were also more consistent in the number and size of contigs.


CONCLUSIONS
transcriptome assemblies are smaller than genome assemblies and thus should be more computationally tractable, but are often harder because individual contigs can have highly variable read coverage. comparing single assemblers, newbler  <dig>  performed best on our trial data set, but other assemblers were closely comparable. combining differently optimal assemblies from different programs however gave a more credible final product, and this strategy is recommended.

