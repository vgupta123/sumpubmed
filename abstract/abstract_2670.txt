BACKGROUND
the baum-welch learning procedure for hidden markov models  provides a powerful tool for tailoring hmm topologies to data for use in knowledge discovery and clustering. a linear memory procedure recently proposed by mikl√≥s, i. and meyer, i.m. describes a memory sparse version of the baum-welch algorithm with modifications to the original probabilistic table topologies to make memory use independent of sequence length . the original description of the technique has some errors that we amend. we then compare the corrected implementation on a variety of data sets with conventional and checkpointing implementations.


RESULTS
we provide a correct recurrence relation for the emission parameter estimate and extend it to parameter estimates of the normal distribution. to accelerate estimation of the prior state probabilities, and decrease memory use, we reverse the originally proposed forward sweep. we describe different scaling strategies necessary in all real implementations of the algorithm to prevent underflow. in this paper we also describe our approach to a linear memory implementation of the viterbi decoding algorithm . we demonstrate the use of the linear memory implementation on an extended duration hidden markov model  and on an hmm with a spike detection topology. comparing the various implementations of the baum-welch procedure we find that the checkpointing algorithm produces the best overall tradeoff between memory use and speed. in cases where sequence length is very large , or state number is very large , the linear memory methods outlined may offer some utility.


CONCLUSIONS
our performance-optimized java implementations of baum-welch algorithm are available at . the described method and implementations will aid sequence alignment, gene structure prediction, hmm profile training, nanopore ionic flow blockades analysis and many other domains that require efficient hmm training with em.

