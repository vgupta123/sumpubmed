BACKGROUND
the proliferation of data repositories in bioinformatics has resulted in the development of numerous interfaces that allow scientists to browse, search and analyse the data that they contain. interfaces typically support repository access by means of web pages, but other means are also used, such as desktop applications and command line tools. interfaces often duplicate functionality amongst each other, and this implies that associated development activities are repeated in different laboratories. interfaces developed by public laboratories are often created with limited developer resources. in such environments, reducing the time spent on creating user interfaces allows for a better deployment of resources for specialised tasks, such as data integration or analysis. laboratories maintaining data resources are challenged to reconcile requirements for software that is reliable, functional and flexible with limitations on software development resources.


RESULTS
this paper proposes a model-driven approach for the partial generation of user interfaces for searching and browsing bioinformatics data repositories. inspired by the model driven architecture  of the object management group , we have developed a system that generates interfaces designed for use with bioinformatics resources. this approach helps laboratory domain experts decrease the amount of time they have to spend dealing with the repetitive aspects of user interface development. as a result, the amount of time they can spend on gathering requirements and helping develop specialised features increases. the resulting system is known as pierre, and has been validated through its application to use cases in the life sciences, including the pedrodb proteomics database and the e-fungi data warehouse.


CONCLUSIONS
mdas focus on generating software from models that describe aspects of service capabilities, and can be applied to support rapid development of repository interfaces in bioinformatics. the pierre mda is capable of supporting common database access requirements with a variety of auto-generated interfaces and across a variety of repositories. with pierre, four kinds of interfaces are generated: web, stand-alone application, text-menu, and command line. the kinds of repositories with which pierre interfaces have been used are relational, xml and object databases.

