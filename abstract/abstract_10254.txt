BACKGROUND
processing of reads from high throughput sequencing is often done in terms of edges in the de bruijn graph representing all k-mers from the reads. the memory requirements for storing all k-mers in a lookup table can be demanding, even after removal of read errors, but can be alleviated by using a memory efficient data structure.


RESULTS
the fm-index, which is based on the burrows–wheeler transform, provides an efficient data structure providing a searchable index of all substrings from a set of strings, and is used to compactly represent full genomes for use in mapping reads to a genome: the memory required to store this is in the same order of magnitude as the strings themselves. however, reads from high throughput sequences mostly have high coverage and so contain the same substrings multiple times from different reads. i here present a modification of the fm-index, which i call the kfm-index, for indexing the set of k-mers from the reads. for dna sequences, this requires  <dig> bit of information for each vertex of the corresponding de bruijn subgraph, i.e. for each different k−1-mer, plus some additional overhead, typically  <dig>  to  <dig> bit per vertex, for storing the equivalent of the fm-index for walking the underlying de bruijn graph and reproducing the actual k-mers efficiently.


CONCLUSIONS
the kfm-index could replace more memory demanding data structures for storing the de bruijn k-mer graph representation of sequence reads. a java implementation with additional technical documentation is provided which demonstrates the applicability of the data structure .

