an alternative framework of growing interest is the assembly string graph, not necessitating a division of the reads into k-mers, but requiring fast algorithms for the computation of suffix-prefix matches among all pairs of reads.
transitive edges are recognized and eliminated early in the process and the graph is efficiently constructed including irreducible edges only.
our approach employs suffix sorting and scanning methods to compute suffix-prefix matches.
most recent sequence assemblers are based on the construction of a de bruijn graph.
here we present efficient methods for the construction of a string graph from a set of sequencing reads.
our suffix-prefix match determination and string graph construction algorithms have been implemented in the software package readjoiner.
comparison with existing string graph-based assemblers shows that readjoiner is faster and more space efficient.
