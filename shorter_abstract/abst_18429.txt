the second idea is to use a fast algorithm for computing the rspr distance of two given phylognetic trees to cut more branches of the search tree in the exhaustive-search stage of the algorithm.
for both biological datasets and simulated datasets, our experimental results show that fasthn runs substantially faster than hybridnet and dendroscope  <dig>  the superiority of fasthn in speed over the previous tools becomes more significant as the hybridization number becomes larger.
due to hybridization events in evolution, studying two different genes of a set of species may yield two related but different phylogenetic trees for the set of species.
in this case, we want to combine the two phylogenetic trees into a hybridization network with the fewest hybridization events.
this leads to three computational problems, namely, the problem of computing the minimum size of a hybridization network, the problem of constructing one minimum hybridization network, and the problem of enumerating a representative set of minimum hybridization networks.
indeed, when the minimum size of a hybridization network of two given trees is larger than  <dig> and the problem for the trees cannot be reduced to relatively smaller independent subproblems, then hybridnet almost always takes longer than  <dig> day and dendroscope  <dig> often fails to complete.
we develop a software tool in ansi c, named fasthn, for the following problems: computing the minimum size of a hybridization network, constructing one minimum hybridization network, and enumerating a representative set of minimum hybridization networks.
indeed, fasthn can finish within  <dig> minutes  desktop pc with i7- <dig> cpu) even if the minimum size of a hybridization network of two given trees is about  <dig>  the trees each have  <dig> leaves, and the problem for the input trees cannot be reduced to two or more independent subproblems via cluster reductions.
the first idea is to preprocess the input trees so that the trees become smaller or the problem becomes to solve two or more relatively smaller independent subproblems.
executables of fasthn for windows xp , windows  <dig> , linux, and mac os are available .
the previously best software tools for these problems  run very slowly for large instances that cannot be reduced to relatively small instances.
thus, a faster software tool for the problems is in need.
despite this disadvantage, our experimental data shows that fasthn runs substantially faster than the multi-threaded dendroscope  <dig> on a pc with multiple cores.
the third idea is that during the exhaustive-search stage of the algorithm, we find two sibling leaves in one of the two forests  such that they are as far as possible in the other forest.
