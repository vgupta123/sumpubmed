BACKGROUND
cloud computing has revolutionized availability and access to computing and storage resources. it has made it possible to provision a large computational infrastructure with several mouse clicks inside a web browser. such availability has allowed anyone, particularly individual researchers and small labs, to gain access to the necessary compute infrastructure and apply it toward a desired domain. coupled with the ability to provision the resources for the duration of a task, this opens new avenues of feasible research for the large data sciences.

previously, we have developed cloudman  <cit> , a cloud manager that orchestrates all of the steps required to provision and control a complete data analysis environment on a cloud infrastructure, all through a web browser. cloudman is primarily used in the context of galaxy cloud  <cit>  and cloudbiolinux  <cit>  and, along with the infrastructure, ensures a complete next generation sequencing  analysis toolset is instantly available. a broad range of ngs tools is preinstalled on the provided deployment, configured with a large number of reference genomes, and integrated with the galaxy application  <cit> . this makes it possible for any researcher to, for a modest cost, gain access to a personal infrastructure in a matter of minutes without any manual setup or configuration. cloudman provides a high level, researcher-oriented, interface to this infrastructure.

irrespective of how extensive the pool of tools made available through cloudman and galaxy is, users will inevitably develop their own tools or have needs for additional tools and data. additionally, with the continued increase in data production , a centralized model for data analysis environments, like the public galaxy site, is fundamentally not scalable. to overcome these issues, there is a need to shift to a decentralized model for service access. such a model should allow individual researchers to easily utilize and reuse available tools and resources without manual configuration. thus far, there has been a tendency to provide a custom solution for individual tools that adapts a given tool to its decentralized execution. for example, tools such as crossbow  <cit> , myrna  <cit> , and cloudburst  <cit>  each provide a tailored solution for a specific problem. such solutions not only require considerable effort to be adapted for different tools but, more importantly, make complex analyses that are composed of multiple steps by various tools difficult.

alternatively, there are general-purpose infrastructure configuration management tools such as lcfg, cfengine, bcfg <dig>  puppet or chef. these enable a systematic and mostly reproducible approach to configuring a set of machine images. however, besides needing to write the low-level deployment details, these tools do not provide infrastructure management options but focus on machine configuration. tools such as starcluster or cloudinit.d from nimbus enable a set of underlying cloud resources to be managed as a unit. however, these tools require individual images to be manually and explicitly configured for use in life sciences, require use of command line tools, and work on only a single type of a cloud. table  <dig> provides a more detailed overview of each of these projects and how those relate or differ from the topics described in this paper.

the goal of this work is to enable reuse of the general-purpose infrastructure management and integrated tools provided by cloudman. we have made it possible to customize each instance of cloudman and, if desired, preserve those customizations. such functionality makes it possible for a researcher to add their own tool to an instance and utilize it in conjunction with other existing tools. similarly, a researcher can add or customize the data  initially available on their instance. once the customizations are done, it is possible to persist those changes and thus make them automatically available the next time a given cluster is started. as a result, custom and open-ended analyses can be composed with ease while utilizing the infrastructure management capabilities provided by cloudman. previously, it was possible to customize an instance of cloudman but it was not possible to persist those customizations.

instance customization allows an existing and field tested solution like cloudman to be utilized for an individual researcher’s novel analysis. however, customized instances must either be kept alive and accessible for others wishing to use those same tools or the effort of instance customization needs to be replicated by each researcher that would like to use the same tool or data. either of these approaches may be prohibitively expensive in financial or human effort terms, limiting the potential impact of any given customization.

to foster a fully collaborative environment, cloudman provides support for instance sharing. each cloudman instance can be shared as a point in time configuration  with individuals or made public. once shared, a user can start their own instance of the shared cloudman instance and all of the customizations performed on the shared instance will be automatically available on the derived instance. in addition to sharing instances whose tools have been customized, researchers can share instances that have had data uploaded and analyzed. this makes it possible to share partial or complete analysis environments, allowing multiple analysis directions to be considered in parallel as well as making published analysis methods and results fully accessible. in conjunction with the galaxy application, this ensures complete reproducibility of an analysis. it is now possible to encapsulate the compute and data storage infrastructure, the tools, and configurations into a single, independent, and shareable unit.

with the described features, cloudman can be utilized as a platform for tool, data, and analysis distribution. this alleviates researchers from having to install or configure their analysis environment before utilizing it; instead, tool owners can install and configure their tools, provide sample data, and share the customizations, allowing domain researchers to test and utilize their tools with zero system-level prerequisites. by combining the strengths of cloudman, galaxy and cloudbiolinux, this enables a new model of decentralized research focused on scalability and reproducibility.

implementation
the cloudman platform is currently available for instantiation on the amazon web services  cloud infrastructure as part of the cloud galaxy application  <cit>  and with cloudbiolinux. support for private and academic clouds based on openstack and opennebula middleware exists and requires custom deployment . an example of such a deployment is available on australia’s national cloud, nectar, which is based on the openstack middleware. cloudman itself is written in python as a standalone web application and is open source licensed under the mit license. the instructions on how to use all of the features of cloudman and galaxy cloud are available at http://usecloudman.org while the source code is available at http://bitbucket.org/galaxy/cloudman. overall, features of cloudman that make instance customization and sharing possible are rooted in the fact that each cloudman instance is self-contained and a complete deployment is realized at runtime; figure  <dig> depicts these concepts.

instance customization
each cloudman deployment is characterized by a set of interconnected components that work in unison. at the infrastructure level, each instance is composed of a machine image, a configuration repository, and one or more persistent storage units <cit> .

the machine image represents a common denominator across all instances and contains all of the core software and libraries. next, each instance has its own configuration repository that includes the source code for cloudman itself, a boot-time contextualization script, references to the persistent storage resources , and any application-specific configuration files. through such a model, each instance is self-contained and customizable since it can be reestablished without external dependences. in the context of aws, simple storage service  is used as the configuration repository and comparable object storage services for other cloud middleware.

lastly, each instance is associated with persistent storage resources that store both data and applications available to the instance. persistent storage resources are realized as a combination of data volumes and snapshots. in the context of aws, these are the elastic block store  volumes. in the context of openstack, these are nova volumes. tools that are used but not modified at runtime are stored on the snapshots. at instance runtime, those snapshots are used to create temporary volumes, which are attached to instances and used in read-only mode. these snapshots can be modified to include any desired tool. such modifications are performed at the file system level and the process of adding a tool is the same as installing a tool on any other comparable system. once modified, a new ebs volume is created and the instance configuration in the persistent configuration repository simply needs to point to the new snapshot and the instance will use it as part of its deployment. the process of persisting the custom cluster configuration has been integrated into cloudman’s web interface, thus simplifying and automating this process.

similar to the tools, the reference data associated with an instance can be modified. an instance can be modified to include custom reference datasets or sample data to run a tool. once stored on a volume, via the cloudman interface, a snapshot of the volume is created and the instance configuration modified to reflect the customization, making it available for future invocations.

instance sharing
instance sharing leverages the fact that each instance is self-contained and makes all of its configurations and data available for derived instances. cloudman automates this process by creating a copy of the instance’s configuration and adjusting permissions on shared objects like volume snapshots. sharing is realized as a point-in-time snapshot of the configuration and data allowing an instance to be shared multiple times at different time points. furthermore, each shared instance may have different access permissions set. a subtle but useful observation is that an instance can be shared with oneself, allowing exploratory customization or multiple data analysis paths to be undertaken while allowing simple reversal to a known instance state.

once an instance is shared, it is assigned a time-point share string. the string is based on the cluster’s bucket name and a time stamp when the share was created. when a derived instance is desired, researchers provide the share string during the initial cluster configuration of a new cloudman instance. cloudman will then create a new repository based on the shared configuration, starting all of the services that were configured on the shared instance. all of the data and customizations that were performed on the shared instance will be immediately available on the derived instance. however, the two instances are separate and no data is shared between those after instantiation.

the described instance sharing is currently functional on the aws cloud. instance sharing on other cloud middleware solutions that the cloudman platform is compatible with , is technically not yet possible due to the currently available cloud middleware functionality. the conceptual architecture enabling instance sharing is sufficiently versatile and compatible with the general cloud concepts to operate in these different cloud models so it is primarily a matter of time before the functionality is added. lastly, due to the many technical details , and issues with compatibility between multiple cloud providers , instance sharing between isolated clouds is not currently supported but is planned.

RESULTS
to demonstrate the reproducible and collaborative nature of cloudman, we prepared a shared instance containing a full exome sequencing pipeline for ngs data that is available on the aws cloud. this instance demonstrates a fully automated pipeline which processes fastq formatted files directly off a sequencer and produces quality filtered variant calls, alignment files and summary metrics for sequencing, hybrid selection and variant calling.

the curated and shared cloudman instance consists of two components: preinstalled software on the utilized machine image, and the analysis data on an amazon ebs snapshot. the machine image consists of the preinstalled tools required to complete the pipeline and an automated analysis pipeline, written in the python programming language. the cloudbiolinux distribution contains the necessary bioinformatics software: bwa for alignment, picard  <cit>  for bam format file manipulation and analysis, fastqc  <cit>  for sequencing quality assessment, gatk  <cit>  for alignment post-processing plus variant calling, and snpeff  <cit>  for variant effect assessment.

the data volume attached to the cloudman instance contains two fastq files that demonstrate the entire analysis process. the files are from an exome-targeted hybrid selection experiment, kindly provided by v. mootha and s. calvo . the processing pipeline performs alignment and variant calling, uploading resulting bam alignments, vcf variant calls, and pdf summary files into a galaxy cloud instance for additional analysis.

the analysis pipeline  <cit>  coordinates the running of this software across a parallel sge environment setup by cloudman. coupled with the ability to control the number of running instances using the cloudman console, this allows researchers to readily scale up the analysis to handle large numbers of samples.

configuration files allow customization of the entire pipeline and analysis process. so in addition to providing a framework for learning cloudman's sharing capabilities, the image allows researchers to directly run their exome sequencing analysis starting with just fastq files. this ability to both share our analysis and also directly enable re-running or custom large-scale processing is a uniquely powerful feature of the cloudman framework. the cloudman wiki  <cit>  contains the instance id for the latest version of this pipeline. this is a community-curated site that will serve as a central repository for publicly available cloudman instances.

discussion
the proliferation of ngs technologies greatly increases individual researcher’s ability to access vast volume of sequence data. cloud computing, cloudman, and galaxy have made considerable strides in enabling researchers to perform large-scale custom analyses. cloud computing provides on-demand access to compute and storage resources. cloudman bridges the low-level infrastructure components offered by cloud providers and the high-level services desired by researchers with wizard-guided compute cluster setup, automation of machine configuration, dynamic persistent storage, elastic resource scaling, and customizable, sharable instances. an instantly accessible cloud version of galaxy eliminates many of the setup and resource obstacles to establishing a web-based analysis platform.

in the rest of this section, we describe two scenarios that highlight the benefits of cloudman's customization and sharing functionality.

a platform for experimentation
with the ability to customize one’s cloudman instance, cloudman has developed into a platform that allows reuse and promotes faster development of exploratory science. it reduces the entry level for cloud computing by combining community-developed tools with the ability to share customized analyses. installing and configuring a tool on the cloudman platform corresponds to that of installing a tool on any other  machine. however, once installed, the extent in which the given tool can be utilized differs substantially: it is trivial to gain access to multiple compute nodes and execute the tool across those. furthermore, the researcher does not need to be limited by the size and availability of the local system but can instead exploit parallel tools on multiple compute nodes. unlike a locally available infrastructure, a cloud infrastructure boasts the option to utilize architecturally different types of worker nodes  – simply start an instance of the cluster and choose a different machine type – cloudman ensures all of the data and configurations are preserved. it is thus possible to empirically test the behavior and requirements of a tool while avoiding any complicated or repeated tool and environment setup. overall, the ability to customize cloudman instances eliminates the requirement for tool developers and users to own and maintain compute infrastructure while allowing full utilization of all the features cloud computing has made possible.

a platform for collaboration
cloudman’s ability to share individual instances shifts the availability of a fully functional and accessible analysis solution from having to be provided by tool developers and system administrators to being within reach of individual researchers. for example, it allows for the following three sample scenarios to take place:

• a user installs and configures a tool, making it available in galaxy once this instance is shared, others may instantiate the exact configuration of the cluster, allowing them to utilize the added tool in a matter of minutes with no configuration or installation steps required. moreover, depending on the researcher’s needs, the size and type of the underlying infrastructure can simply be adjusted to match their current needs.

• a technician uploads some data, optionally performs initial analysis steps, and shares the instance. bioinformaticians and bench scientists may now build on the existing data and analysis steps without having to upload the data again or perform the same initial steps, thus enabling and speeding up the data analysis process. in addition, multiple copies of the same instance may simultaneously be created, allowing different analysis steps to be undertaken in parallel.

• a researcher performs a complete analysis and, adds software and reference genome data. once this instance is shared, its share string can be published as part of the analysis report, allowing others to instantiate the exact and complete version of the instance, including all of the customizations and the analysis data. as a result, without having to provision the resources or transfer the configuration environment to an accessible location, the analysis can be reproduced in its entirety.

CONCLUSIONS
as technologies such as cloud computing mature, it is essential to provide easy-to-use solutions that make them accessible to researchers. with the growth in accessibility, there is also a need to minimize the amount of repeated effort required to establish custom analysis platforms. cloudman ensures all of the low-level infrastructure management details are automated and abstracted from the user while making the underlying framework accessible for reuse. with cloudman, a broad range of tools and reference datasets required for ngs analysis are made instantly accessible and available through galaxy. additional tools or data can then easily be added to individual instances while reusing all of the existing features. once customized, a given instance can easily be shared with individual users or made public. derived instances contain all the data and customizations that were performed on the shared instance while being independent of each other. this allows researchers to make tools, data, and analyses available and instantly accessible.

availability and requirements
• project name: cloudman

• project home page:http://usecloudman.org

• operating system: *nix

• programming language: python

• other requirements: cloud infrastructure account 

• license: mit

• any restrictions to use by non-academics: none

abbreviations
aws: amazon web services; ebs: elastic block storage; lcfg: large scale unix configuration system; ngs: next generation sequencing; s3: simple storage service; sge: sun grid engine.

competing interests
authors have no competing interests in this project.

authors’ contributions
ea, bc and jt conceived the project, structured the conceptual plans, implemented the software, validated the functionality, and wrote the manuscript. all authors have read and approved the final version of the manuscript.

