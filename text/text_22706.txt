BACKGROUND
the comparison of the 3d structures of protein molecules is a challenging problem. the search for effective solution techniques is required because such tools aid scientists in the development of procedures for drug design, in the identification of new types of protein architecture, in the organization of the known universe of protein structures and could assist in the discovery of unexpected evolutionary and functional inter-relations among them.

moreover, good protein structures comparison techniques could be also used in the evaluation of ab-initio, threading or homology modeling structure predictions. it is claimed that the comparison of proteins' structures, and subsequent classification  is a fundamental aspect of today's research in important fields of modern structural genomics and proteomics  <cit> .

several types of strategies and methodologies are applied for protein structure comparison and it is out of the scope of this work to perform an exhaustive review. as a showcase, we may cite the use of dynamic programming  <cit> , comparisons of distance matrices  <cit> , graph theory  <cit> , geometrical hashing  <cit> , principle component correlation analysis  <cit> , local and global alignment  <cit> , consensus shapes  <cit> , consensus structures  <cit> , kolmogorov complexity  <cit> , fuzzy contact map overlap  <cit> , and comparing proteins as paths in 3d  <cit> . the interested reader in the field of structural bioinformatics may refer to  <cit>  for updated information.

the maximum contact map overlap problem  is a mathematical model that allows to compare the similarity of two protein structures. this model represents each protein as a contact map where spatially close elements of interest are indicated in a matrix. then, the objective is to construct an alignment that maximizes certain cost. an alignment indicates a correspondence between the elements  of both proteins.

in these last years, exact algorithms for solving max-cmo have been developed. among them, we should cite the initial work of  <cit>  and then extended in  <cit> . more recently,  <cit>  presented another strategy for optimally solving max-cmo. however, we may find several reasons to justify the application of approximate algorithms for max-cmo:

• the problem of maximizing the overlap between two contact maps is np-hard  <cit> , existing particular problem instances, i.e. particular pairs of contact maps, where the exact algorithms may fail to return a solution in reasonable time.

• exact algorithms are expensive and hard to code. for example, they may involve  the usage of a local search strategy or even a genetic algorithm for obtaining lower bounds , or a linear programming solver for obtaining upper bounds. moreover, if a running time limit is established, they may finish without any solution at all.

• the availability of exact methods is limited. to the best of our knowledge, just the algorithm presented in  <cit>  is available trough internet  <cit> , although there is a limitation on the size of submitted problems  and the cpu time given for solving it .

• max-cmo aims to maximize a purely geometrical relation between graphs so a set of suboptimal solutions may also provide insights in terms of the biological meaning of the alignment.

• due to potential errors in the 3d coordinates determination, we may argue against the usefulness of having exact solutions for protein pairs coming from  erroneous contact maps. as stated in  <cit> , the experimental errors in the determination of the atomic cartesian coordinates by x-ray crystallography or nmr may range from  <dig>  to  <dig> Å which is close to the value of some covalent bonds.

in this work, we pursue two objectives: firstly, we propose a variable neighborhood search  strategy for solving max-cmo and we show that this strategy allows to obtain near optimal results using reduced computational resources and time.

secondly, the role of max-cmo for doing clustering and classification has only been done at the scop's family level  and we propose to assess if the  overlap values returned by our strategy offers a proper ranking of structural similarity at other different structural levels.

RESULTS
the validation of the proposed method is done through two different computational experiments: we compare the vns approach against the exact algorithm from xie and sahinidis  <cit>  in pure optimization terms; then we verify if our vns is able to obtain a proper ranking among a set of proteins at different levels of structural similarity.

 <dig>  is vns beneficial from an optimization point of view?
in the first computational experiment we compare our vns implementation against the results from  <cit> . as test bed for comparison, we use two datasets described in  <cit>  : a) skolnick, with  <dig> proteins and  <dig> optimally solved pairs, and b) lancia, with  <dig> proteins and  <dig> optimally solved pairs.

we use the contact map data files provided in  <cit>  for a fair comparison and reproducibility purposes. the maps are based on cα and the optimal overlap values were kindly provided by the authors of ref.  <cit> .

we limited the experiment is limited to those cases  where the exact algorithm was able to find the optimum within the time of ten days  <cit> .

experiments on  <cit> , were conducted on three workstations with a  <dig>  ghz cpu and  <dig>  gb of ram each while our experiments were run on just one workstation with a  <dig>  ghz cpu  and 1gb of ram. xie and sahinidis have recently improved the results from  <cit>  in terms of computing resources needed  <cit> .

we define three versions of our multistart vns , corresponding to different parameter settings for one of the neighborhood structures :

• msvns1: one neighborhood of type neighborhoodmove and  <dig> neighborhoods of type neighborhoodadd, having window sizes of 5%, 10% and 15% respectively.

• msvns2: one neighborhood of type neighborhoodmove and  <dig> neighborhoods of type neighborhoodadd having window sizes of 10%, 20% and 30% respectively.

• msvns3: one neighborhood of type neighborhoodmove and  <dig> neighborhoods of type neighborhoodadd having window sizes of 10%, 30% and 50% respectively.

the strategy has a parameter that controls the number of internal "restarts": i.e. when no improvement can be done from the incumbent solution, the search is restarted from a new randomly generated one. this value is fixed in  <dig>  at the end of the execution, we measure the error with respect to the optimum value. the results are shown in tables  <dig> and  <dig> 

the main thing to notice from both tables is that as the windows sizes increases, the average error decreases. the best alternative is msvns <dig> with windows sizes of 10–30– <dig> leading to an average error below  <dig> % for lancia's dataset with  <dig> pairs, and below  <dig> % for the skolnick's one. as the median values are much lower than the average, tables also show the number of pairs that were optimally solved and those where the optimum was not reached. for lancia's dataset, up to 60% of the pairs can be optimally solved, while in skolnick, the percentage of optimum was around 40%. again, the percentages of non-solved pairs diminishes as the windows' sizes increases.

it is also interesting to analyze the subset of pairs that were not optimally solved. figure  <dig> shows the distribution of such pairs on the lancia's dataset over five different ranges of percentage of error, for each of the three vns versions. figure  <dig> shows the same graph for skolnick's dataset.

it can be seen that the quality of the results increases as the vns version goes from msvns <dig> to msvns <dig> where both, the number of non-optimally solved solutions and the corresponding error are the smallest. the error is below 11% for more than half of the pairs in all cases for lancia's dateset. when using msvns <dig> the errors get as low as having 87% of the non-optimal pairs solved with less than 17% of error. for skolnick, msvns <dig> obtains an error lower than 5% for the 87% of non optimally solved pairs.

regards to computational effort needed to achieve these results, table  <dig> reflects the total wall clock time for every variant of msvns. the bigger the window sizes, the longer the times. this is because as these sizes increase, the number of potential pairings becomes larger, leading to an expected increase of execution time. however, we consider the tradeoff between solutions quality and computational effort as highly reasonable.

these results confirm that the proposed strategy is a useful tool for solving near optimality max-cmo for almost all the evaluated protein pairs.

 <dig>  is vns able to rank properly protein similarity ?
although the analysis from an optimization point of view is relevant, it is also interesting to check the quality of vns as a protein structure classifier. in other words, we want to assess if it is really necessary to solve max-cmo exactly to perform structure classification.

moreover, overlap values are not adequate per se for classification purposes because such values depend on the size of the proteins being compared. indeed a normalization scheme should be applied and we illustrate that this may play a crucial role in protein classification.

there is no general agreement on how to do normalization, but at least, three alternatives are available.

 <dig>  norm <dig> = overlap/min

 <dig>  norm <dig> =  <dig> * overlap/

 <dig>  norm3={0if the contacts difference is greater than 75%norm1otherwise

first and second alternatives were proposed in  <cit>  and  <cit>  respectively. here, we propose the third alternative to avoid the comparison of two structures whit completely different sizes.

we perform three computational experiments to analyze our proposal. firstly, we made an all against all comparison in skolnick's dataset to check wether a clustering can discriminate among  <dig> scop families. secondly, we test the performance of the strategy to detect similarity at scop's fold level, using fischer's dataset  <cit> . for this experiments, comparison with dalilite is also performed. finally, we made a set of queries over the nh3d database  <cit>  to evaluate the capability of a nearest neighbor classification to detect similarity at cath's architecture level. comparisons are then made against dalilite and matalign.

 <dig> . <dig> experiments with skolnick's dataset
for this experiment we use again skolnick's dataset from  <cit> , which includes a "cluster" label for every protein corresponding to different families in scop database  <cit> . we perform an all against all comparison among the proteins using the best  and worst  versions of our strategy . then we constructed a similarity matrix for each msvns configuration using the overlap values normalized with norm <dig>  norm <dig>  norm <dig>  finally, we apply single and average linkage hierarchical clustering as implemented in r software package  <cit>  with the final objective of evaluating if the original grouping can be recovered from the overlap values or not.

both, msvns <dig> and msvns <dig>  are able to perfectly recover the original grouping independently of the normalization and clustering algorithms. figure  <dig> shows particular examples, where single and average linkage clustering are applied over the similarity matrix normalized with norm <dig>  for visualization purposes, the class number is displayed at the right of the protein name.

the study performed in this dataset shows that our strategy can replicate the results obtained using exact methods but with less computational effort and a simple strategy. moreover, this experiment confirms that correct classification may be performed using non-exact max-cmo values. both elements are important results per se.

 <dig> . <dig> experiments on fischer's dataset
we perform a second experiment using fischer's dataset  composed by  <dig> proteins and comprising several classes and folds. table  <dig> provides information about protein sizes.

an all-against-all comparison was performed using msvns <dig> and dalilite  <cit>  with default parameters. in this case, the objective is to analyze the ability of the methods to recognize structural similarities at  fold level.

 under the nonparametric assumption

 null hypothesis: true area =  <dig> 

moreover, when we discriminate the results in terms of the class of the first protein in the pair, we obtain again some interesting results that are shown in fig.  <dig>  table  <dig> shows the corresponding area under curve . dalilite obtained the highest auc value in just two  out of  <dig> classes. in the other cases, the highest value is obtained by some of the normalizations based on the overlap returned by msvns. for a total of  <dig> ×  <dig> =  <dig> pairwise comparison, dalilite detected no similarity for  <dig> pairs . if we consider those pairs with z-score <  <dig>  then the value grew to  <dig> .

 under the nonparametric assumption

 null hypothesis: true area =  <dig> 

 <dig> . <dig> experiments on nh3d database
the last test is done using the nh3d v <dig>  dataset  <cit>  of structurally dissimilar proteins. this dataset has been compiled by selecting well resolved representatives from the topology level of cath database. these have been been pruned to remove domains that may contain homologous elements, internal duplications and regions with high b-factor.

our aim is to check if msvns <dig> can properly classify structures at cath's architecture level. the database has  <dig> topology representatives belonging to  <dig> architectures. table  <dig> provides information about protein sizes.

for each architecture  we select the smallest, biggest and average structure in terms of residues and number of contacts, plus another one randomly selected. after removing duplicates, we obtained a set of  <dig> structures that constitutes the query set . each query is then compared against every structure in the database. comparisons are also performed with dalilite  <cit>  and a recently proposed method based as well on distance matrices, matalign, claimed to be better than dalilite and ce  <cit>  in certain cases  <cit> . for the former, we use the z-score as similarity measure, while the raw score is used for the later. for msvns <dig>  we made the analysis using the three normalization schemes proposed above. the number of internal restarts for msvns <dig> was fixed to  <dig> to constraint the execution time up the computation.

 under the nonparametric assumption

 null hypothesis: true area =  <dig> 

if we trace different curves in terms of the architecture of the query, we may find several interesting behaviors. some examples of roc curves are displayed in figure  <dig> where clear differences arise among methods as a function of the query's architecture.

it should be noted that, from a total of  <dig> ×  <dig> =  <dig> pairwise comparisons, dalilite detected no similarity for  <dig> pairs , leading to several false negatives. as an example, for two out of seven queries belonging to architecture  <dig> , dalilite failed to return these queries as the most similar structures in the database. when the process is repeated with msvns, the query itself is given the highest value of similarity in the seven cases.

discussion and 
CONCLUSIONS
in this work we tested a straight and simple implementation of vns for the max-cmo problem which obtains encouraging results.

¿from an optimization point of view, msvns obtained overlap values that were very close to the optimal ones, using a simpler strategy and less computational effort than exact algorithms.

we can mention at least, three ways to obtain further improvements to our method: a) by trying more specialized neighborhood structures, b) by better tuning the parameters' values chosen c) by starting the search from heuristically generated solutions. we also plan to add a preprocessing step to avoid making comparisons between structures that are very different, as dalilite does. moreover, due to its speed and simplicity, vns may be also considered for obtaining lower bounds in the context of exact algorithms. an important element in several bioinformatics problems is the relation between the optimum value of the objective function and the biological relevance of the corresponding solution. in protein structure comparison we should remember that we are dealing with a mathematical model that captures some aspects of the biological problem, being possible to measure protein structure similarity in several ways. for example, up to  <dig> measures are reviewed in  <cit> . moreover, besides obtaining the highest overlap values, it is also critical to develop strategies able to obtain a proper similarity ranking of proteins.

our experiments showed that in terms of scop's family and cath's architecture levels, the  overlap values seemed to be good enough to capture the similarity. at the level of scop's fold, several points should be consider. although dalilite outperformed msvns <dig>  it does not imply that our method did badly. more research should be done, specially in the area of normalization, because, as we mentioned the use of different normalization schemes may lead to stronger or weaker strengths to detect particular kinds of folds. we should also recall that all of the experiments were done using contact maps with a fixed threshold and it may be the case that for detecting similarity at fold level, a different value would be needed. wether the performance of dalilite for detecting similarity at fold level can be achieved or not with a strategy based on the contact maps model remains open.

just to conclude, we should mention that the method was accepted to be incorporated on the procksi-server  <cit> . procksi is a decision support system for protein  comparison, knowledge, similarity and information that computes structure similarities using information theory measures. procksi links to a variety of other sources and uses additional methods to rectify and augment its similarity findings. our msvns was chosen as the method to solve max-cmo due to its speed and accuracy.

