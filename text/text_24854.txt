BACKGROUND
microarray time series gene expression experiments are widely used to study a range of biological processes such as the cell cycle  <cit> , development  <cit> , and immune response  <cit> . based on an analysis of the gene expression omnibus  <cit> , approximately a third of all microarray studies involve time series experiments with three or more time points, and of these time series experiments over 80% contain no more than eight time points . in many cases experimental costs prevent data from more time points from being collected. in some studies, particularly clinical studies, the availability of biological material can limit the number of time points collected. thus, even if the price of microarray experiments were to go down short time series expression experiments would remain prevalent.

in this paper we introduce the short time-series expression miner , the first software application designed specifically for the analysis of short time series gene expression datasets . data from short time series gene expression experiments poses unique challenges. in these experiments thousands of genes are being profiled simultaneously while the number of time points is few. in such cases many genes will have the same expression pattern just by random chance. furthermore as with any time series experiment, there are usually few, if any, full time series repeats from which to gain statistical power. stem uses a method of analysis that takes advantage of the number of genes being large and the number of time points being few to identify statistically significant temporal expression profiles and the genes associated with these profiles  <cit> . stem also supports gene ontology   <cit>  enrichment analyses for sets of genes having the same temporal expression pattern providing the means for an efficient and statistically rigorous biological interpretation of significant temporal expression patterns. the integration of stem with go is bidirectional. stem can easily determine and visualize the behavior of genes belonging to a given go category, identifying which temporal expression profiles were enriched for genes in that category. finally, stem also supports the ability to compare temporal responses of genes across experimental conditions.

the novel clustering algorithm which stem implements for short time series expression data is briefly reviewed in the implementation section. for a detailed discussion of the clustering algorithm including experimental results on simulated data and a comparison with the k-means clustering algorithm on real biological data using go we refer the reader to  <cit> . the main focus of this paper is on stem's integration with go, its support for comparing data sets across experimental conditions, its visualization capabilities, and a comparison with related software.

to date, researchers analyzing short time series expression data relied mainly on two types of software. the first is general gene expression analysis software implementing methods which do not take advantage of the sequential information in time series data. the second is gene expression time series analysis software implementing methods primarily designed for longer time series. general methods for gene expression analysis that are frequently applied to time series expression data include popular clustering methods such as hierarchical clustering  <cit> , k-means clustering  <cit> , and self-organizing maps  <cit> . these standard clustering methods ignore the temporal dependency among successive time points. specifically, if we were to randomly permute the order of time points, the results of these methods would not change. two software packages available for clustering time series gene expression that implement methods that take advantage of the temporal dependency of time points are the graphical query language   <cit>  and the cluster analysis of gene expression dynamics   <cit> . gql implements a clustering algorithm based on a mixture of hidden markov models. caged implements a clustering algorithm based on autoregressive equations. unlike stem these methods generally require the estimation of many parameters and are thus less appropriate for short time series data. also unlike stem, both standard clustering methods and previously suggested temporal analysis methods do not differentiate between real and random patterns. this is a particular problem for short time series expression data since, as mentioned above, many genes may have the same expression pattern by random chance. a detailed comparison of stem with the software implementing methods of analysis primarily designed for longer time series appears in the discussion section of this paper.

stem is freely available for download at  <cit>  for non-commercial research purposes. a comprehensive and detailed manual is also available at  <cit>  and as additional file  <dig> to this paper.

implementation
stem is implemented entirely in java and will work with any operating system supporting java  <dig>  or later. portions of the interface of stem are implemented using a third party library, the java piccolo toolkit from the university of maryland  <cit> . stem also makes use of external gene ontology and gene annotation files. stem can download these files directly from the websites of the gene ontology  <cit>  or european bioinformatics institutes  <cit> .

a user of stem first specifies a tab delimited gene expression data file as input to stem. next, the user specifies a gene annotation source, and may adjust default parameters through the input interface shown in figure  <dig>  following the input phase, the stem clustering algorithm executes and a new window will appear displaying the clustering results . from this new window, a user will have the option to specify a comparison data set.

the novel clustering algorithm that stem implements takes advantage of there being only a few time points in a dataset. the clustering algorithm first selects a set of distinct and representative temporal expression profiles . these model profiles are selected independent of the data. the procedure for selecting the model profiles, and theoretical guarantees that the models profiles selected are representative and distinct appear in  <cit> . see figure  <dig> for an example of a set of model profiles. the clustering algorithm then assigns each gene passing the filtering criteria  to the model profile that most closely matches the gene's expression profile as determined by the correlation coefficient. since the model profiles were selected independent of the data, the algorithm can then determine which profiles have a statistically significant higher number of genes assigned using a permutation test. this test determines an assignments of genes to model profiles using a large number of permutations of the time points . it then uses standard hypothesis testing to determine which model profiles have significantly more genes assigned under the true ordering of time points compared to the average number assigned to the model profile in the permutation runs. significant model profiles can either be analyzed independently, or grouped together based on similarity to form clusters of significant profiles.

based on a reviewer's suggestion, stem now also provides an implementation of the k-means clustering algorithm. a user thus has the option to compare directly within stem, results of stem's novel clustering method with those produced using k-means. a user that still prefers the k-means clustering methodology for clustering short time series data, or is interested in using k-means to cluster other types of data for which the stem clustering method does not apply, may still be interested in using stem's implementation of k-means in order to leverage stem's visualization capabilities and integration with go. the results and discussion of stem in this paper are presented using stem's novel clustering method. for details on using the k-means clustering algorithm with stem see additional file  <dig> 

RESULTS
model profiles overview interface
a screenshot of the main interface window of stem appears in figure  <dig>  in this window each box corresponds to one of the model temporal expression profiles. clicking on a profile box displays a new window, described in the next subsection, with detailed information about the profile. the colored profiles have a statistically significant number of genes assigned. colored profiles which have the same color are all similar to each other . these profiles are grouped together to form a cluster of significant profiles. by default profiles on the main window are ordered such that significant profiles appear before non-significant profiles, and among significant profiles those profiles of the same color appear next to each other. the profiles can be reordered based on the number of genes assigned, the number of genes expected, or their significance p-value. additionally as we discuss below, the profiles can also be reordered based on their relevance to a given go category , a user defined gene set, or profile from a comparison experiment. when the profiles are reordered relevant information appears in the profile boxes.

the model overview screen is designed such that by default a user can visualize all profiles simultaneously, but as a result each profile box needs to be relatively small. at times however, a user will be interested in focusing on a small subset of neighboring profiles. the interface of stem supports zooming and panning on any portion of the model profiles overview screen. the ability to zoom and pan is powered by the open source java libraries of piccolo  <cit> .

model profile detailed information interface
clicking on a profile box on the model profiles overview interface displays a window with detailed information about the profile. examples of such windows appear in figure  <dig>  the window contains a graph of the expression patterns for all the genes assigned to the profile, a count of the number of genes assigned, a count of the number of genes expected based on the permutation test, and the profile's p-value. the window also gives the option to display a table with all genes assigned to the profile, or to display a table for a go enrichment analysis of the set of genes assigned to the profile . if the profile is a part of a non-singleton cluster of significant profiles, then there is also the option to display a table with a go enrichment analysis for all cluster genes.

integration with the gene ontology
the gene ontology  is a structured vocabulary for describing biological processes, cellular components, and molecular functions of gene products  <cit> . the ontology is a hierarchy of terms organized as a directed acyclic graph. go term annotations of gene products is available for many organisms. a popular approach to gain biological insights from a set of identified genes of interest is to determine which go terms annotations are overrepresented among the genes in the set. a number of software packages are available which can determine go term enrichments in a set of genes . stem's integration with go allows a user to conduct gene enrichment analyses directly in stem, avoiding the need for a user to export into a separate file each set of genes of interest and then import them into an external go software. additionally, stem implements an expected size enrichment analysis not available in other software . also unique to stem is its ability to allow a user with a go category of interest to easily identify the significant temporal response patterns associated with this category.

the integration with go is designed to be simple for the user, comprehensive, and current. a user can select from a drop down menu on the main interface any of  <dig> gene annotation sources available from the gene ontology  <cit>  or european bioinformatics institutes websites  <cit> . stem also accepts any user provided annotation file in the official  <dig> column gene annotation format, or a simpler two column annotation format. in fact there is no restriction that annotations be go terms. the set of go annotations used can be filtered based on evidence code, and restricted to specific subset of annotations . new versions of annotations and the ontology are frequently released, but stem makes it easy for a user to keep these files up to date by simply having the user check an appropriate field when they want stem to download the latest annotations or ontology.

actual and expected size gene set enrichments
stem implements two types of gene enrichments for a set of genes assigned to the same model temporal expression profile r. the default enrichment in stem and the method used in other software is actual size based enrichment, in which the enrichment is computed using the hypergeometric distribution based on the number of genes in the set of interest. formally denote by n the total number of unique genes on the microarray. denote by m the total number of genes that are in the go category of interest. denote by sa the number of gene's assigned to profile r. based on the hypergeometric distribution the p-value of seeing v or more genes in the intersection of the category of interest and profile r can be computed as:

∑i=vmin⁡
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaamaalaaabawaaewaaeaafaqabegabaaabagaemyba0gabagaemyaakgaaagaayjkaiaawmcaamaabmaabaqbaeqabiqaaaqaaiabd6eaojabgkhitiabd2gatbqaaiabdohaznaabaaaleaacqwghbqyaeqaaogaeyoei0iaemyaakgaaagaayjkaiaawmcaaaqaamaabmaabaqbaeqabiqaaaqaaiabd6eaobqaaiabdohaznaabaaaleaacqwghbqyaeqaaaaaaogaayjkaiaawmcaaaaaasqaaiabdmgapjabg2da9iabdaha2bqaaigbc2gatjabcmgapjabc6gaunaabmaabagaemyba0maeiilawiaem4cam3aasbaawqaaiabdggahbqabaaaliaawicacaglpaaaa0gaeyyeiuoaaaa@51f6@

an advantage of the actual size enrichment is that it provides a means to externally validate a clustering algorithm, since the enrichment calculation makes no assumptions about how a set of genes was produced. such a biological validation for the stem clustering algorithm appears in  <cit> .

unlike other clustering algorithms, stem's clustering algorithm also computes the expected number of genes matching a specific model profile. this leads to a new go category enrichment p-value based on a profile's expected size. formally, denote by se the expected size of profile r. then the p-value of seeing more than v genes belonging to both the category and profile r can be computed using the binomial distribution with parameters m and sen
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdohaznaabaaaleaacqwglbqzaeqaaagcbagaemota4eaaaaa@30d9@ as:

∑i=vmin−i
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaamaabmaabaqbaeqabiqaaaqaagqaciab=1gatbqaaiab=lgapbaaaiaawicacaglpaaaasqaaiabdmgapjabg2da9iabdaha2bqaaiabd2gatbqdcqghris5aowaaewaaeaadawcaaqaaiabdohaznaabaaaleaacqwglbqzaeqaaagcbagaemota4eaaagaayjkaiaawmcaamaacaaaleqabagaemyaakgaaowaaewaaeaacqaixaqmcqghsisldawcaaqaaiabdohaznaabaaaleaacqwglbqzaeqaaagcbagaemota4eaaagaayjkaiaawmcaamaacaaaleqabagaemota4kaeyoei0iaemyaakgaaaaa@4afd@

an advantage of expected size enrichment occurs in the case in which the genes of multiple independent processes happen to have the same temporal expression pattern. in this case a temporal expression pattern could be very significant in terms of the number of genes assigned versus expected, but no go category will appear enriched under an actual size enrichment test. however under an expected size enrichment test the go categories could correctly be identified as being enriched. expected size based enrichment is also useful for ordering temporal expression profiles to determine which are most relevant to a given go category .

as many go categories are being tested simultaneously, it is necessary to correct p-values using a multiple hypothesis correction. stem can correct p-values using the bonferonni correction, or in the case of actual size enrichment also by using a randomization test.

bidirectional integration
stem's integration with go is bidirectional. in addition to allowing a user to determine for a given model profile what go terms are significantly enriched, stem can also determine for a given go category what model profiles were most enriched for genes in that category. given a go category, stem ranks the profiles based on their p-value enrichment for that category. the profiles on the main interface can be reordered based on either the actual or expected size enrichment. figure  <dig> shows an image of the profiles of figure  <dig> reordered by actual size based enrichment for the go category dna metabolism. in the bottom left hand corner of each profile box is the number of profile genes that belong to that go category and the enrichment p-value. when the profiles are reordered by a go category, upon opening the window with detailed information about the profile there is the option to plot just the subset of genes belonging to that go category. stem can also determine which cluster of significant profiles were most enriched for a go category, and reorder the cluster of profiles according to the selected category.

comparing data sets across experimental conditions
many microarray studies include a comparison of the temporal response of genes between experimental conditions. for example, researchers have compared the temporal response of genes infected with a wildtype pathogen to those infected with a knockout mutant version of the pathogen  <cit>  or the response of genes when exposed to a certain chemical substance to their response when not exposed  <cit> . stem supports the ability to compare expression data sets across experimental conditions even when only few time points are sampled . stem allows a user to investigate questions such as: "for a set of genes which had temporal response x in experiment a, what significant responses did they have in experiment b?". stem uses the hypergeometric distribution to compute the significance of overlap between gene sets of model profiles of two experiments. since the model profiles are defined independent of the data, the boundaries in expression space that they induce will remain the same between experiments. in contrast, cluster boundaries from traditional, data driven, clustering algorithms will change between experiments. stem is thus able to detect significant sets of genes with the same expression profiles across experiments that might otherwise be missed if the clusters were defined differently across experiments. furthermore since the model profiles in stem are also selected to be distinct and representative of all expression profiles, stem will determine for all pairs of distinct expression patterns if there is a significant gene set intersection. if the clusters had been formed with a data driven clustering algorithm no such guarantee is possible.

discussion
a number of software packages implementing general methods for the analysis of gene expression data from multiple experiments have been used to analyze time series data. these include cluster  <cit> , expander  <cit> , the multiexperiment viewer  <cit> , and the high-throughput miner  <cit>  among many others. software packages using methods of analysis specifically designed for time series gene expression data are less common. limited analysis functions designed for time series are available as a part of some broader software packages and also as stand alone scripts. for instance, detecting differentially expressed genes in time series data is available in significance analysis of microarrays   <cit>  and extraction of differential gene expression   <cit> , and detecting periodically expressed genes is a function in the genets script  <cit> . timesearcher is an entire software application for visualizing time series data and has been applied to gene expression time series data  <cit> , but it does not offer any automated analysis functions such as a clustering algorithm. the gene time expression warper  <cit>  has support for aligning time series and also some visualization capabilities. oriogen  <cit>  implements a clustering algorithm designed for time series data when several full repeats are available, though having several full length time series repeats is not common. the two software packages most similar to stem in the sense that they both support time series clustering and visualization without requiring repeats are the cluster analysis of gene expression dynamics   <cit>  and the graphical query language   <cit> . the clustering algorithm in caged is based on autoregressive equations, while the clustering algorithm in gql is based on hidden markov models  <cit> . these methods either require estimating many parameters or using an over simplified model, and thus while useful for long time series are less appropriate for short time series data  <cit> .

unlike stem, caged and gql do not support comparing time series data sets. caged does not offer any go analysis features, though it does have an automated report generation feature not available in stem or gql. gql does provide support for determining go enrichments for a cluster of genes. however, unlike stem the support is not bidirectional, that is, there is no support for directly determining the temporal response of genes belonging to a go category of interest. in terms of running time, stem was the fastest when compared on the same real biological data. table  <dig> summarizes the differences between stem and caged and gql.

CONCLUSIONS
we have introduced, stem, a new software package for analyzing short time series expression data. the software can find statistically significant patterns from short time series microarray experiments and can compare data sets across experiments. stem presents its analysis of the data in a highly visual and interactive manner, and the integration with go allows for efficient biological interpretations of the data. through an analysis of the gene expression omnibus we have estimated that short time series expression data is represented in about a quarter of all microarray studies. while stem was designed with time series data in mind, it only makes the assumption that experiments can naturally be sequentially ordered. thus, stem could also be used for other types of sequential experiments such as dose response and temperature response experiments. the unique automated analysis capabilities of stem combined with its visualization capabilities and integration with go, should merit stem to be a software of choice to analyze data from a significant portion of all microarray studies.

availability and requirements
project name: stem: short time-series expression miner

project home page: 

operating system: platform independent

programming language: java

other requirements: java  <dig>  or higher

license: non-commercial research use license

any restrictions to use by non-academics: license needed for commercial use

abbreviations
cluster analysis of gene expression dynamics 

extraction of differential gene expression 

gene ontology 

graphical query language 

short time-series expression miner 

significance analysis of microarrays 

authors' contributions
je and zbj both contributed to the design of stem. je implemented stem. both je and zbj participated in the drafting and revising of the manuscript, and read and approved the final manuscript.

supplementary material
additional file 1
stem user manual. manual.pdf is a comprehensive user manual for stem in pdf format.

click here for file

 acknowledgements
the authors would like to thank raymond cheong, nilesh dave, naftali kaminski, gerard nau, and raquel norel for their useful feedback on the software during its development. research supported in part by nih grant no <dig> ai- <dig> and by nsf career award  <dig> to zbj.

figures and tables
