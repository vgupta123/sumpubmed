BACKGROUND
the advent of chromatin immunoprecipitation combined with sequencing  has revolutionized research in gene regulation. a basic chip-seq experiment is schematized in fig. 1a. in essence, the technology allows mapping of in vivo dna-protein interactions at very high resolution on a genome-wide scale and at low cost  <cit> . thanks to chip-seq, the tissue-specific chromatin state of gene regulatory regions has become visible and transcription factor  binding events leading to expression changes of target genes can directly be observed. unsurprisingly therefore, this technique has become a standard assay for genomics research in very short time. a wealth of data has been released over the last years, which is of potential interest to any biologist working on gene regulation. noteworthy in this context are the reference data sets released by the large international consortia encode  <cit>  and roadmap epigenomics  <cit>  providing detailed epigenetic characterization for a large number of tissues and cell types from human and mouse.fig.  <dig> chip-seq assay and data representation. a schematic representation of a chip-seq experiment. chromatin is first crosslinked and cut into small pieces. dna fragments bound by a specific protein are isolated with an antibody and sequenced from the ends using a short-read sequencing technology. the reads are then computationally mapped to the genome. note that the reads mapping to the plus + and – strand of the genome, respectively, are expected to form clusters upstream and downstream of the protein binding site. b chip-seq data representation in sga format. sga is the working format of the chip-seq tools. each line contains five obligatory fields: sequence identifier , feature name , sequence position, strand and read count. note that only the genomic position corresponding to the 5′end of the mapped sequence read is recorded in an sga file




being low cost and high-throughput, the true bottleneck of a chip-seq experiment is data analysis. although the bioinformatics community has reacted quickly to this new challenge by developing a wealth of specialized software tools, we believe that chip-seq data are still largely under-analyzed. lots of new insights into gene regulatory mechanisms could be gained by simply analyzing existing data under new angles. likewise, such data should be used to corroborate or refute biological hypotheses put forward in papers. consequently there is a need for bioinformatics resources providing easy access to public chip-seq data to a wider research community and offering efficient software tools for integrative analysis of large data sets.

reviews on chip-seq data analysis can be found in  <cit> . a typical analysis pipeline starts with the mapping of sequence reads to the genome of the corresponding species followed by peak finding, peak annotation and dna motif analysis. the publicly available resources for carrying out these tasks have been implemented in different ways:  as stand-alone unix command-like tools, e.g. bowtie  <cit>  for read alignment and macs  <cit>  for peak finding,  as r packages, e.g. rolexa  <cit>  and metagene  <cit> ,  as wrapper shell scripts executing a comprehensive analysis pipeline by calling multiple external programs in a cascade  <cit> ,  as integrated software platforms with a graphical interface requiring local installation, e.g. homer  <cit> , cisgenome  <cit>  and seqminer  <cit> , and  as web-servers, e.g. cistrome  <cit> .

here we present the chip-seq tools, a collection of programs implementing a variety of chip-seq data analysis algorithms downstream of read mapping. we initially developed these programs for our own research, see  <cit>  for an early application. encouraged by positive feedback from our collaborators, we later invested considerable efforts to make our tools available to a wider community.

the chip-seq tools are made available in two forms serving different user communities: as an open source collection of unix command-line programs and as an interactive web interface. the latter is tightly integrated with other web-based resources maintained by our group, including the eukaryotic promoter database epd  <cit> , and the signal search analysis  server  <cit> . we believe that the chip-seq tools fill an important niche in computational genomics due to their original design and unique capabilities. more than any competing program package we know of, our tools are streamlined for memory efficiency and speed, enabling researchers to process high volumes of data on modest computer hardware. with the ongoing data explosion resulting from the fact that sequencing costs are going down faster than data processing costs, this aspect may even become appealing to large sequencing centers. the chip-seq web server offers access to a large database of uniformly formatted chip-seq and other types of genomics data, covering a broad range of organisms from yeast to human, making it an interesting web resource for bioinformaticians involved in large-scale comparative studies of epigenetic profiling data from different species and tissues. biologists primarily interested in analyzing their own samples have the possibility to compare their data with analogous data from other studies and to complement their analyses with data covering other aspects of chromatin structure and function.

the remainder of the paper is organized as follows. the implementation section explains the design principles of the chip-seq command line tools and briefly introduces the most important programs. it further includes a description of the database of public genomics data sets installed at the backend of the web server. the results section presents the web interface to the chip-seq tools, including a brief description of connected web resources developed by our group. the capabilities of the chip-seq server are illustrated on typical examples in a tutorial style fashion.  the results section concludes with a comparison of the chip-seq tools to similar resources. the conclusions section briefly recapitulates the hallmarks and highlights of our resource and ends with an outlook on future developments.

implementation
design principles of the chip-seq command-line tools
the chip-seq command-line tools package is a collection of stand-alone programs written in c and perl. the package is of highly modular design. each program reads from standard input, writes to standard output, and carries out a well-defined elementary operation. standard chip-seq data analysis tasks such as peak finding are often accomplished by sequentially running multiple program units in a unix pipe.

the logical design of the chip-seq tools is based on a standard input-output format called sga . sga stands for “simple genome annotation”. all chip-seq programs take input in sga format and many produce output in sga format as well. sga is a tab-delimited text format with five obligatory fields per line: chromosome  identifier, feature, position, strand, and counts. additional fields may follow but are not essential and thus ignored by most chip-seq tools programs.

sga, unlike bed or gff, is a single position format that assigns positive integer values  to selected bases of the genome. the format can represent any type of experimental data or genome annotations compatible with these restrictions. in the case of chip-seq data, the position and strand fields refer to the base that corresponds to the 5′-end of a mapped sequence read, and the count field indicates how many reads were mapped to this same position. other data types that can be represented by sga and processed with chip-seq tools programs include mapped sequence reads from dnase-seq or mnase-seq assays, cage tags, transcription start sites from genome annotation databases  or snps from the  <dig> genomes project  <cit> .

there are other specificities of the sga format which are worthwhile mentioning. the strand field may be set to zero  to indicate that the genomic feature is intrinsically unoriented. the feature field serves to distinguish lines from different data sources or representing different genomic features, which is necessary because many chip-seq tools programs require two features as input while physically accepting only one input file. perhaps the truly mission-critical requirement of the sga format is that lines must be sorted by chromosome, position and strand. once sorted, the data can be processed using fast algorithms that produce results by one pass through the genome. as a consequence, all chip-seq tools programs have time complexity o, n being the number of lines in the input file. the sorting also enables programs to read in and process data for only one chromosome at a time, resulting in a gain in memory efficiency.

the chip-seq package currently comprises  <dig> stand-alone programs , many of them performing mere reformatting or preprocessing tasks. in the following, only the programs addressing area-specific non-trivial tasks such as peak finding will be described in more detail. algorithms requiring substantial computations are implemented in c, others are currently offered as perl scripts. in the long run, we plan to replace all perl scripts by c programs. the major algorithms are given as pseudo-code in additional file 1: text s <dig> 

feature correlation tools
the hallmark of this class of programs is that they take two types of genomic features as input and generate numerical data suitable for graphical display or follow-up analysis by stats packages such as r. the two features are supplied in a single sga file, typically generated on the fly via a sort-merge operation and then passed to the program via standard input.


chipcor is the prototype feature correlation tool. to describe how it works, let’s call the two features “reference” and “target”. chipcor then computes a profile  indicating the average abundance of the target feature at various distances upstream and downstream of the reference feature. the user has to specify the distance range around the reference feature and size of the bins in which target features are to be counted. the output of chipcor is a tab-delimited text file which can be visualized as so-called aggregation plot   <cit> .


chipcor is used for two main purposes: generation of cross-correlation plots and genomic context analysis. in the former case, tags mapped to the + and – strands from the same chip-seq experiment are supplied as reference and target features respectively. the resulting profile reveals the average length of the pulled-down fragments and is essentially equivalent to the cross correlation plot recommended by the encode consortium  <cit>  for quality control purposes.

genomic context analysis serves to visualize positional correlations between features of different type. the reference feature typically consists of a relatively small set of genomic positions originating from manual annotation efforts  or automatic processing of primary experimental data . the target feature may be of any kind including high density features such as mapped sequence reads from chip-seq experiments. many examples of feature correlation plots can be found in the results section further below.

there are two other programs taking two feature types as input and performing similar operations as chipcor. the first one, chipextract, extracts target feature counts in binned genomic regions for each reference feature individually. the output is an integer matrix which can be visualized as a heat map. the second program is chipscore that counts target features within a user-defined region around the reference features . the output is an extended sga file composed of the reference feature lines of the input file and an additional field presenting the target features counts in the specified regions. the program can also be used as a feature selection tool by specifying a non-zero tag threshold via a command line option. unlike most other chip-seq tools programs, chipscore reads all optional fields from reference feature lines and transfers them to the output, which makes it possible to annotate the same reference feature set with tag counts from multiple experiments.

peak finders and segmentation tools
the chip-seq tools include two programs to search chip-seq data for signal-enriched regions. chippeak is a classical peak finder appropriate for finding transcription factor binding sites. chippart is a segmentation tool or “broad peak” finder that partitions the genome into signal-enriched and depleted regions. chippart is typically used for processing histone modification profiles. in terms of input-output behavior, the main difference between the two programs is that chippeak returns a single genomic position corresponding to the peak center whereas chippart returns the start and end positions of genomic regions.


chippeak is a basic peak finder. the current version takes a single feature type as input and thus cannot make use of a control experiment for local background correction. conceptually, chippeak uses a sliding window approach to identify signal enriched regions. the numbers of tags are counted in a window of fixed size along the genome and peaks correspond to local maxima in terms of tag coverage. the peak-calling process is primarily controlled by three parameters: the window width, the tag threshold, i.e. the minimal number of tags a window must contain in order to qualify as a peak, and the vicinity range, i.e. the size of the region within which the window must be a local maximum. speed is gained by restricting the search to positions hit by at least one chip-seq tag. the original position corresponding to a mapped sequence tag can optionally be replaced by a “weighted average position” computed from the tag distribution within the corresponding window. chippeak is at least  <dig> times faster than any other chip-seq peak finder we have tested . in spite of its simplicity, it generally performs well, sometimes even better than competing programs using a more elaborate statistical model to assess the significance of a peak  <cit> .


chippart partitions the genome into an alternating series of signal-enriched and signal-depleted regions. signal strength is defined as counts per base-pairs. the output is a so-called “regions” sga file, a special type of sga file where each line marks a segment boundary. lines with a “+” sign in the strand filed mark the beginning, those with a “−” sign mark the end of an enriched segment. the total number of counts in an enriched region is returned in the fifth field. the optimal segmentation of a chromosome is found by means of an efficient dynamic programing algorithm maximizing a global segmentation score . this score critically depends on two parameters, the count density threshold which defines the border between enriched and depleted, and the transition penalty which controls the extent of fragmentation of the genome .

preprocessing programs and command line options

chipcenter is used for centering mapped sequence tags from a chip-seq experiment, a preprocessing step that is also referred to as tag shifting  <cit> . in essence, the tags assigned to the “+” strand of the genome are shifted by a user-defined distance downstream, those assigned to the “−” strand are shifted by the same distance upstream. the output is a centered sga file with the strand field set to zero on all lines. centering is motivated by the expected distribution of sequence tags around chip-seq targets  and increases the positional resolution of the chip-seq signal.

the program counts_filter eliminates lines from an input sga file which fall within “blacklisted” genomic regions. input is a composite sga file containing two types of genomic features, one that is subject to filtering and will be transferred to output, the other one defining the start and end points of the blacklisted regions. this program is often used to eliminate chip-seq tags of peaks that fall within annotated repeat regions.

each chip-seq program is controlled by a number of command line options. two of these options are common to many programs and thus deserve brief mentioning. option –c  specifies the maximal number of counts accepted at a single genomic position. if set to one, it has the same effect as eliminating duplicates at the read mapping step. option –o  controls the interpretation of the strand field. for programs like chipcor, which take two feature types as input, it has the effect that the target features are processed in “reverse-complementary” manner for reference features assigned to the “–” strand. reverse-complementary means that a target feature assigned to the “+” strand and located 100 bp upstream of the reference feature would be treated like a target feature assigned to the “−” strand and located 100 bp downstream. for chippeak, the oriented mode has the effect that peak finding is carried out separately for the “+” and “–” strand of the genome. this behavior is useful, for instance, for finding clusters of tsss in cage data.

the mass genome annotation  repository
the abbreviation mga has been introduced by the ddbj and embl nucleotide sequence data libraries and stands for “mass sequences of genome annotation”  <cit> . we have adopted this term to designate the data repository harboring all public data that can be accessed and analyzed through our web servers. the mga repository is also accessible via anonymous ftp. though not maintained by a database management software, the mga repository is highly structured and respects rigorous formatting standards. all data sets are presented in sga format. chromosomes and contigs are invariantly identified by versioned refseq  <cit>  accession numbers . this eliminates the risk of producing wrong results by comparing sequence positions relating to different versions of the same chromosome.

the mga repository is hierarchically split into subdirectories. there is one root-level subdirectory for each supported genome assembly. data sets from the same study are organized as series, as in geo  <cit> . all data files pertaining to the same series are kept in the same leaf-level subdirectory together with a manually edited documentation file in html format. each series contains two additional machine-readable text files, one providing information about the series as a whole, the other one about individual samples. these files are primarily used by software components of the web server. for instance, the data access menus of the program input forms are automatically generated in this way. the series documentation files are web-accessible via a hierarchically organized table with expandable subsections.

the mga repository currently contains more than 10’ <dig> data samples, about half of them from chip-seq and other chromatin profiling assays such as mnase-seq  <cit>  and dnase-seq  <cit> . high priority is also given to tss mapping data such as cage  <cit>  which constitute the source data for epdnew  <cit> , the automatically compiled part of the eukaryotic promoter database epd. more than  <dig> tissue and cell-type specific tss libraries from ten different species are available. an overview of the current contents of the mga repository is shown in additional file 1: table s <dig> 

unlike other bioinformatics resources which harbor large public next generation sequencing  data collections such as cistrome, the mga repository also provides a large variety of non-experimental, computationally derived or manually generated data sets. examples are transcription start and end site  collections from ensembl  <cit> , lists of repeated elements from repbase  <cit> , single nucleotide polymorphisms from dbsnp  <cit>  and cross-genome conservation scores from the ucsc genome browser database  <cit> . computationally derived features include published chip-seq peak lists, which we offer in addition to the read mapping data if available. some genomic feature lists are provided in extended sga format with an optional sixth field containing a gene name , or a statistical significance score .

the majority of the ngs data were downloaded from geo, arrayexpress  <cit>  or the ucsc genome browser database. a few  data sets were directly downloaded from the author’s institutional websites. if available, we used libraries of already mapped sequence tags in bam or bed format as source data. a technical description of the conversion procedure from bam or bed to sga is given in additional file 1: text s <dig>  otherwise, we carried out the tag-to-genome mapping ourselves, usually starting from fastq files and using bowtie  <cit>  for read alignment. the conversion procedures and the urls for the source data are given in the corresponding documentation files for each series.

some data sets in the mga repository have undergone substantial modifications relative to the original file, either to reduce the size or to make the representation compatible with an integer-based single-position format. as mentioned before, the repeat libraries used for repeat masking are provided as regions sga files. for genomic conservation analysis, the mga offers compacted versions of the phastcons  <cit>  and phylop  <cit>  tracks from the ucsc genome browser database to speed up the analysis at the expense of some precision. as a general rule, we try to keep the size of sga files below  <dig> million lines.

the machine-readable series description file contains the complete path to the data directory, a descriptive title, a literature or database reference in textual form plus geo, arrayexpress and/or pubmed ids, if available. the chip-seq web server transfers these fields to output pages in order to give appropriate credit to the authors of the data and to generate hyperlinks to external resources.

the sample description file provided for each series is a tab-delimited table with lines corresponding to samples. it contains essential information for the chip-seq server as well as command-line users. the first field of each line contains the name of the corresponding sga file and is followed by fields containing a sample description and the feature name used in the sga file. the fourth field assigs each sample to a so-called “data type.” examples of data types are “chip-seq”, “chip-seq-peak” or “genome annotations”. note that a series may contain samples belonging to different data types. additional fields indicate whether the feature is “oriented” and whether the sample is provided in fps format . geo or arrayexpress ids are also included if applicable.

an sga file is called “oriented” if the strand field is occupied by + and – signs; “unoriented” sga files have the strand field invariantly filled with zeros. small data sets comprising less than 100’ <dig> genomic positions  are usually provided in both sga and fps format. as a consequence, these files are also accessible through the input server menus of the ssa server.

the mga repository currently contains ngs data for ten species, all mapped to a single, so-called primary assembly of the corresponding species, except for human where the data are split over the assemblies hg <dig> and hg <dig> . in addition, basic support files  are provided for additional assemblies of the same species. these files offer users who have data mapped to a non-primary assembly an easy way to carry out a certain number of standard analysis tasks, such as repeat masking, analyzing histone marks in promoter regions, or generating sequence conservation profiles for chip-seq peaks. using the data from the main assembly would require remapping of the genomic coordinates in the original file . command line users can remap sga files with the aid of the sga-to-bed conversion utilities from the chip-seq command-line tools and the liftover utility from the ucsc genome browser  <cit> . the chip-seq web interface allows remapping of genomic coordinates upon data upload.

RESULTS
general characteristics of the chip-seq web server
the chip-seq server is a web interface to the chip-seq tools and the mga repository. any result that can be produced over the web interface can also be produced from the command line with data files downloaded from the mga repository. for the sake of transparency and reproducibility, the unix shell scripts executed by the server are posted on all results pages. these scripts may also serve as templates to command-line users who would like to integrate the web-based applications into a data analysis workflow running on a local computer.

note that throughout this manuscript, web interfaces to command tools will be spelled with a dash in the middle followed by the capitalized tool name, e.g. chip-cor is the web interface of chipcor.


like the stand-alone programs, the individual web services are designed to be modules that can be used sequentially. the output from one application can be transferred to the next application via direct navigation buttons. however, there is no one-to-one correspondence between command-line programs and web applications. a web application typically fulfils a more complex task requiring the execution of several programs and scripts by the server. for instance, the chip-peak web application allows users to do tag centering with chipcenter, repeat-masking with counts_filter, peak finding with chippeak and conversion of the output sga file into bed format in a single run. analogous web applications exist for the major chip-seq programs chipcor, chipextract and chippart. chipscore is offered via a follow-up menu displayed on the chip-cor results page. the application chip-convert serves as a hub for data input, format conversion, and data export to other applications.

input forms
the input forms have a standard design, with three parts: one for data access, one for specifying preprocessing options, and one for entering the analysis parameters of a particular application .fig.  <dig> web interface of chip-peak. a input form. the inputs correspond to the example presented in this paper. a server-resident chip-seq sample from the mga repository has been selected through the data access menu. alternately, users could upload their own data by clicking on the “upload custom data” radio button. b output page. the peak list can be downloaded in various formats. hyperlinks are provided for sending the peak list directly to external servers for peak annotation. the “sequence extraction option” enables users to extract sequences around the peak centers in fasta format. direct navigation buttons enable downstream analysis with other tools from the chip-seq and ssa servers




the input data can be specified or uploaded in three ways:  through a hierarchical menu that provides access to the mga repository,  by specifying the name of a server resident file and  by uploading a data file from a local computer or via url.

the menu-driven access to the mga repository has four hierarchical levels. at the first level, the user can choose one of the supported genome assemblies. the second level is organized by data type . large data collections from international consortium projects are provided as separate data types. the two lower levels correspond to series and samples. note that the server menu is not a perfect mirror of the mga directory structure. a mga series may contain samples of different data types, in which case the series name appears multiple times under different data types in the server menus.

data access via filenames allows developers and informed collaborators to access server-resident files via a local filename and directory path. this mechanism is further used for transferring data between web applications. if a user clicks on a direct navigation button, the name of the temporary file generated by the previous application will appear in the input form of the next application.

external files can be uploaded in various genome annotation formats, either from a local data directory or via a url. large files can be transferred in compressed form . in principle, the server accepts any kind of sequence identifier relating to any species. however, if the identifiers do not correspond to a supported genome assembly, many useful features will not be available. for instance, it will not be possible to analyze the uploaded data jointly with data from the mga repository. direct navigation buttons to the motif analysis programs from the ssa server will also be suppressed. if data correspond to a supported genome assembly, ucsc-style chromosome names or contig identifiers have to be used and the corresponding assembly needs to be specified on the input form. alternatively, chromosomes can be identified by versioned refseq accession numbers. refseq identifiers are always used internally by the server.

for reasons of efficiency, we recommend uploading data in sga format. however, all major applications support the following other input formats: bed, bam, gff and fps. there is a dedicated application named chip-convert for importing and converting external data formats into compressed sga. once converted, an uploaded data set will be accessible via url or a temporary name for at least one hour. for repeated use over a certain period of time, we recommend reformatting voluminous data files into compressed sga via chip-convert, rather than repeatedly using conversion options provided by program-specific input forms. chip-convert also provides more specific conversion schemes such as proper conversion of the bed-like narrowpeak format used by encode.

all input forms are pre-loaded with reasonable default parameters. importantly, in the case of the peak-finding applications chip-peak and chip-part, the critical threshold parameter is expressed as a fold-change over the average count density of the input sample, resulting in robust and reproducible behavior across data sets.

results pages and interoperability with other tools
the output pages generated by the chip-seq server are also standardized . for programs that produce sga output, the results are provided in bed and fps format as well if the input relates to a supported genome assembly. if this is the case, a number of additional action buttons will be displayed on the output pages, including a link for viewing the results in a ucsc genome browser window, a menu that enables the user to extract sequences within a specified range around the genomic positions, and several buttons that will directly upload the results  to other chip-seq server applications or external web services. for web applications that produce numerical output, the results consist of a graphical representation plus a download button for saving the numbers in text file format. for scientific articles, it is often desirable to combine results from several web jobs in a single figure . this can be achieved by saving the numerical results files to disk and re-importing them into the user’s preferred graphics program.

the chip-seq server is tightly interconnected with other resources developed by our group, including the eukaryotic promoter database , the signal search analysis  server and the recently introduced pwmtools. of particular relevance to chip-seq data analysis is the ssa server, a suite of programs for the discovery and characterization of dna sequence motifs that occur in the vicinity of a functional genomic site  <cit> . these programs were developed during the eighties primarily for the purpose of analyzing eukaryotic promoters. with the advent of chip-seq, the ssa programs have become useful in a new context, namely for the analysis of dna motifs that are enriched near peak center positions. the most relevant tools are oprof  and findm .

oprof takes as input a list of genome positions plus a dna motif definition, and returns a “motif occurrence profile”. a dna motif can be entered as a iupac consensus sequence, as a position weight matrix  or, alternatively, taken from a public pwm collection via a pull-down menu. currently, more than  <dig> tf binding specificity matrices are offered to the user. oprof is analogous to chip-cor, the main difference being that the target features, i.e. the motif matches, are computed on the fly by the program rather than read from an input file.

findm takes the same input as oprof but produces a different kind of output, namely a new list of genome positions. the program may be used to select genomic positions from an input file which are  flanked by a given motif within a certain distance range. alternatively, it can be forced to return the positions of flanking motifs. in chip-seq data analysis, findm is sometimes used to realign computationally identified peaks on the exact base positions of the cognate tf binding motifs.

the pwmtools server provides access to more recently developed pwm-oriented software that uses sga as working format. two applications, which are potentially useful for chip-seq data analysis, will be described briefly. pwmscan enables users to scan a whole genome with a pwm and returns a complete list of pwm matches in various formats. such a list could then be uploaded to chip-cor in order to extract those matches that are not occupied by the corresponding tf in vivo according to a chip-seq experiment. genomic context analysis could be employed to find an explanation why these sites are not occupied in vivo.


pwmeval is a tool to assess the quality of a pwm based on its ability to distinguish in vivo tf binding sites from random genomic sequences. it takes as input a pwm plus a ranked chip-seq peak list and returns a roc area under the curve  value as a performance measure. the affinity of a peak region to the pwm is computed as described in  <cit> . note that the performance indicated by pwmeval depends equally on the good quality of the pwm and the chip-seq peak list. the tool can thus vice-versa be used for peak list quality assessment.

interoperability between the chip-seq server and external bioinformatics servers is assured through the bed format. direct navigation buttons allow forwarding of bed output to the ucsc genome browser and optionally to the great server  <cit>  if the output file contains less than 20’ <dig> lines. for peak annotation on a galaxy-based platform such as nebula  <cit> , the output from chip-peak can be transferred by right-clicking on the bed download button and using “copy link location” to paste the url into the file upload page of the galaxy interface. the same mechanism can be used in the opposite direction. for instance, some researchers may prefer to do peak finding with macs on a galaxy server and then use chip-cor to explore the genomic context of the peak regions on our servers. for motif finding with an external tool, e.g. meme-chip  <cit> , sequences can be extracted in fasta format from all applications that produce genomic position lists as output.

an example illustrating the use of the chip-seq server
in the following, we are going to illustrate the capabilities of the chip-seq server using data from an early landmark paper reporting the genome-wide mapping of stat <dig> binding sites in interferon-γ stimulated hela cells  <cit> . the data set, which comprises about  <dig> million mapped sequence tags, is available from the chip-seq server menu . we will also use a control data set from a chip-seq experiment done with unstimulated hela cells, were the stat <dig> protein is supposed to reside in the cytoplasm and thus unable to bind to its target sites in the genome. the example we present is partly based on a tutorial presented elsewhere  <cit> .

here we will focus on the biological motivation for the different types of analyses and on the interpretation of the results. detailed step-by-step instructions on how to reproduce the results shown in figs.  <dig>   <dig>   <dig>   <dig> and  <dig> via the web server can be found in additional file 1: text s <dig>  note further that the graphics shown in this paper are not screenshots of the server output pages. they typically combine results from different program runs and were generated by downloading the results in text format and subsequently processing them with the r software.fig.  <dig> 5′-3′end correlation and autocorrelation plots. a 5′-3′ end correlation plot for stat <dig> chip-seq tags from interferon-γ stimulated and unstimulated hela cells. the horizontal position of the peak maximum suggests an average fragment size of about 150 bp. b autocorrelation plot of 75 bp-centered stat <dig> chip-seq tags from stimulated cells


fig.  <dig> stat <dig> peak annotation with external tools. a go term enrichment analysis with great. b peak location statistics with nebula


fig.  <dig> motif enrichment analysis. a stat <dig> consensus sequence  enrichment in peak lists obtained at various tag thresholds. b comparisons of peak lists derived with chip-peak from data published in  <cit>  versus peak lists published by encode. here, consensus sequence enrichment serves as a proxy for enrichment in true binding sites. note that a fair comparison is only possible between peak lists of similar size. c comparative evaluation of three alternative stat <dig> binding motif descriptions:  consensus sequence ttcnnngaa,  pwm from jaspar and  meme-chip-derived pwm from the peak regions identified by chip-peak 


fig.  <dig> histone modifications around stat <dig> peaks. a distribution of three histone marks around stat <dig> peaks from interferon-γ stimulated hela cells. note that the histone marks have been assayed in non-stimulated hela cells where stat <dig> is not supposed to bind to any of its genomic target sites. b h3k27ac marks around stat <dig> peaks in hela and other cell types


fig.  <dig> high resolution aggregation plots for in vivo occupied stat <dig> sites. a single-base resolution phylop profile around stat <dig> motifs aligned with the sequence logo of the jaspar stat <dig> matrix. note the reduced conservation at the weakly conserved central base of the near-palindromic stat <dig> motif. b occurrence and distance preference of a second stat <dig> motif downstream of an in vivo bound motif. the control set consists of motif matches outside stat <dig> peak regions. the meme-chip derived pwm was used for this analysis




5′-3′ end correlation analysis
we start by generating a 5′-3′ strand correlation plot using chip-cor on the stat <dig> data set mentioned above. we use the 5′  tags as reference feature and compute the frequencies of 3′ tags as a function of the distance from the reference feature . chip-cor offers several options for scaling the abundance of the target feature. here, we choose “count density”, which is defined as the number of target feature tags per base pair. we note a gaussian peak with a maximum at about position + <dig>  suggesting that the average length of an immunoprecipitated fragment is about 150 bp. in all subsequent analyses, we will therefore use half of this value  as centering distance for combining the 5′ and 3′ tags from this experiment. repeating the same analysis with the control sample produces an essentially flat profile , consistent with the assumption that virtually all tags from this experiment represent background noise.

next, we generate a so-called autocorrelation plot for centered stat <dig> tags against themselves . we see again a gaussian peak this time with a maximum at  <dig> . the chip-cor server automatically attempts to fit the correlation histogram to a gaussian curve. if successful, the results of the fit can be accessed via a hyperlink on the output page. results are provided in graphical and textual form. the text output file contains recommended parameters for the subsequent peak finding step .

peak detection
the gaussian fit to the auto-correlation plot suggests a window size of 286 bp and a threshold value of  <dig> tags for peak finding. we round the window to  <dig>  running then chip-peak with the recommended parameters returns 55’ <dig> peaks. we have to be aware that  <dig> is a minimal threshold intended to maximize sensitivity. for many types of downstream analysis more stringently selected peak lists are preferable. we therefore repeat chip-peak with higher thresholds of  <dig>   <dig> and  <dig> tags and obtain 16’ <dig>  4’ <dig> and 1’ <dig> peaks, respectively.

chip-peak returns peak lists in three formats, sga, fps, and bed. it is recommended to save them in all three formats for further analysis. moreover, the output page contains an action button allowing for remapping of the chromosomal coordinates to other genome assemblies.

some of the identified stat <dig> peaks fall into repetitive elements of the human genome. these peaks may cause problems for certain types of downstream analysis, in particular dna motif discovery. since all chip-seq server input forms allow users to filter out tags falling into repeat regions, we rerun chip-peak once more with the repeatmasker checkbox activated.

peak analysis with external tools
the output page of chip-peak contains links to other web resources . the link to the ucsc genome browser enables the user to view individual stat <dig> peaks in the context of other genomic features. the hyperlink to the great server serves for go term enrichment analysis of the genes in the neighborhood of peaks . we note that the majority of terms relate to cytokine mediated signaling consistent with the reported biological function of stat <dig> 

another topic of interest is the location of tf binding peaks relative to protein coding genes. one web-based resource performing such an analysis is nebula. it returns graphics showing the abundance of peaks within promoter regions, gene bodies, intergenic regions, and components of genes . nebula also returns a peak annotation table, indicating for each peak the nearest gene and its relative location to that gene.

motif studies in peak regions
stat <dig> is known to bind to a dna motif approximately described by the consensus sequence ttcnnngaa. if the peaks found by chip-peak are indeed real binding sites, one would expect this motif to be over-represented near the peak center positions. in fact, motif enrichment analysis is commonly used for benchmarking the performance of chip-seq peak finders  <cit> . the oprof program of the ssa server can be used for this purpose. it returns a graph showing the percentage of sequences containing a motif in a sliding window along genomic sequences aligned on a reference position, in this case the peak center. figure 5a shows the motif occurrence profiles for ttcnnngaa for the four different stat <dig> peak lists obtained with different tag thresholds. with all peak lists, we see a clear enrichment of stat <dig> motifs near position zero . as expected, the peak height is inversely correlated to the number of peaks. note however that in absolute terms, the number of motif-containing peaks is highest in the peak list obtained at the lowest tag threshold 12:  <dig> % of  <dig>  =  <dig> as compared to  <dig> % of  <dig>  =  <dig> for tag threshold  <dig> 

the oprof server provides access to a large number of chip-seq peak lists, including two stat <dig> peak lists from the encode consortium. figure 5b shows the consensus sequence enrichment profiles for the encode peak lists together with the two high-threshold peak lists generated with the chip-seq server. we note that our peak lists compare favorably to encode peak lists with similar peak numbers, both in terms of enrichment  and positional resolution .

for most tfs, a consensus sequence can only provide an approximation of the true binding motif. position weight matrices  are generally considered superior tools for describing the binding specificity. the oprof server provides menu-driven access to pwms from several public resources, including a stat <dig> matrix from the jaspar database  <cit> . we may wonder whether an even better matrix could be obtained by applying a de novo motif discovery program to chip-seq peak regions. to test this, we extract sequences from position − <dig> to + <dig> relative to the peak center positions from the repeat-masked peak list obtained with tag threshold  <dig>  the sequences can be transferred via copy-paste to the meme-chip server. since we expect the stat <dig> binding motif to be palindromic, we restrict the search to palindromic motifs. the resulting pwm is shown in additional file 1: text s <dig> 

figure 5c shows motif enrichment profiles for the stat <dig> consensus sequence, the jaspar matrix, and the de novo generated matrix. all motifs were searched at an equal random discovery rate, which is a condition for fair comparison. among the two pwm-based motifs, we note a slightly better performance of the jaspar matrix suggesting that this pwm is near-optimal.

exploring the genomic context of stat <dig> peaks
chip-cor enables the user to generate aggregation plots  for peak lists with a great variety of target features. we first investigate whether the stat <dig> binding sites are associated with active or repressive histone marks. since the stat <dig> binding experiment was carried out in hela cells, we choose histone modification data from the same cell type generated by the encode consortium. specifically, we are going to test an active promoter mark , an active enhancer mark  and a repressive chromatin mark . remember in this context, that stat <dig> peaks were discovered in hela cells that were stimulated with interferon-γ. on the other hand, the histone modification maps from encode were obtained from non-stimulated cells, in which stat <dig> is not supposed to bind to any genomic target sites. the results are shown in fig. 6a. we see that stat <dig> peaks fall into regions of about  <dig> base-pairs which are 15-fold enriched in h3k27ac and 7-fold in h3k4me <dig> compared to the background level. conversely, no enrichment is seen for h3k27me <dig> in the vicinity of stat <dig> peaks. these results suggest that stat <dig> binds primarily to regions that are already in an active chromatin state before interferon-γ induction. note further the bimodal distribution of the active histone marks with maxima symmetrically positioned on either side of the peak center. this may indicate that stat <dig> preferentially binds to target sites that are nucleosome-free in unstimulated cells.

we may wonder whether genomic regions bound by stat <dig> in hela cells are also in an active state and nucleosome-free in other cell types. to answer this question, we generate aps for h3k27ac in the embryonic stem cell line h1-hesc and the leukemia-derived cell line k <dig> . we see an approximately two-fold higher enrichment in hela cells over k <dig> and an almost flat h3k27ac profile in h1-hesc, suggesting a substantial degree of tissue-specificity of the regulatory regions that are bona fide accessible to stat <dig> by virtue of their chromatin state.

in addition, we may explore dnase i hypersensitivity, sequence conservation, and population variation data near stat <dig> sites . the results of such an analysis can be summarized as follows: stat <dig> peaks occur preferentially within dnase hypersensitive regions of up to 500 bp. increased cross-species conservation is observed in a slightly narrower region of about 300 bp. consistent with this finding, we see depletion of indel variation in the same region. however, contrary to expectation, there appears to be no depletion of common snps.

high resolution aggregation plots for bound pwm matches
according to the motif occurrence analysis , our peak lists have a positional precision of ±50 bp. aggregation plots of potentially higher resolution could be obtained by using the stat <dig> motifs found in peak regions as anchor points. we use the ssa program findm to generate a genomic coordinate list of stat <dig> motifs  that occur within 75 bp from the stat <dig> peak center position. to generate a random control set, we also collect pwm matches from genomic regions far downstream of the peak regions . the size of the control regions has been chosen such as to generate a stat <dig> motif list of approximately the same size.

figure 7a shows single base resolution plots for sequence conservation using phylop scores from the ucsc genome browser database. also included in the figure is the sequence logo of the stat <dig> matrix aligned with the motif location on the horizontal axis. we see increased sequence conservation within the 9 bp regions that make up the stat <dig> core motif. as expected, the center position, which is essentially unconstrained, is not more conserved than the flanking regions. note further that the random control sites, most of which are presumably not bound by stat <dig>  show a much lower degree of sequence conservation which furthermore does not correlate with the column heights in the sequence logo.

lists of exact motif coordinates rather than fuzzy peak center positions are also useful to investigate interactions between sequence motifs. here we ask the question whether in vivo stat <dig> binding motifs preferentially occur as pairs separated by a characteristic distance from each other. figure 7b shows a stat <dig> motif autocorrelation plot, i.e. a single-base resolution occurrence profile of stat <dig> pwm matches downstream of in vivo occupied stat <dig> motifs. we see a narrow peak  centered 21 bp downstream of the in vivo bound motifs which is absent in a plot generated with the control set. this previously observed preferential occurrence of stat <dig> binding site pairs at a center-to-center distance of two helical turns  <cit>  could be explained by a tetrameric binding mode experimentally documented for some members of the stat <dig> family.

comparison of the chip-seq server with other resources
a comprehensive survey of all currently available software resources for chip-seq data would be beyond the scope of this article. we therefore deliberately restrict our comparison to similar resources meeting two criteria:  being available over a web interface  and including applications that accept a read alignment file in bed or bam format as input. this excludes software packages which require a local installation , web-based resources supporting only downstream analysis after peak finding, e.g. epiexplorer  <cit>  or chipseek  <cit> . a comparison of the features and services offered by the remaining resources is given in additional file 1: table s <dig> 

the galaxy-based cistrome platform comes perhaps the closest to our resources. like the chip-seq server, it provides access to a large server-resident collection of public data. for transcription factors, chip-seq data are only offered as peak lists, not as files containing the coordinates of mapped sequence tags. cistrome offers additional statistical analysis tools and further supports rna-seq data analysis. the other three galaxy servers, galaxy main  <cit> , nebula and galaxeast offer read mapping as an additional service and thus enable users to start with raw sequence files. nebula is our preferred resource for peak annotation. in addition, it serves as a web interface for a number of more advanced in-house developed programs by the nebula team.

among the non-galaxy based resources, geneprof  <cit>  and htstation  <cit>  offer the most comprehensive chip-seq data analysis services. geneprof provides access to a large database of experiments and precomputed results. workflows are displayed through an intuitive graphical interface enabling users to download the input files, intermediate data and final results via clickable icons. htstation offers a completely automatized chip-seq data analysis pipeline in batch mode, including quality control, peak finding and dna motif discovery with meme-chip. coloweb  <cit>  is a more specialized resource primarily designed to make aps with server-resident histone modification data and tsss or chip-seq peaks as anchor points. w-chipeaks  <cit>  is essentially a web-based peak finder.

compared to the chip-seq web server design, the galaxy platform offers a number of generally useful functionalities such as the possibility to store private data on the server side, and to save workflows for later use with new data. consistent with the guiding principles of the chip-seq command line tools, we have chosen a lighter design. the main goal is to offer users the opportunity to explore a large number of public data sets rapidly and in a highly interactive manner. the direct navigation buttons, which connect web server output pages to input forms, allow users to carry out complex analysis tasks with a minimal number of mouse clicks. for instance, after importing an alignment file in bam or bed format via the chip-convert page, it takes less than one minute  to extract peaks and to make a motif enrichment plot of the kind shown in fig.  <dig> 

CONCLUSIONS
we have presented in some detail the chip-seq web server, the command-line programs behind the server, and the data back-end called mga repository. the three resources are designed to function together. nevertheless, the command-line tools and mga repository can be viewed as independent resources distributed via different channels and potentially useful to different researchers. the command line tools may fill gaps in the software repertoire of a computational genomics group. the mga repository is to our knowledge the largest chip-seq data collection made available in a completely standardized format, and for this reason may also be appreciated by computational biologists. the web server is probably appealing to a more diverse user community, ranging from bench biologists primarily interested in analyzing their own data, to pure in silico biologists investigating the principles of gene regulation by exploring large public data sets.

by providing access to a rich public data collection, the chip-seq server is also ideally suited as an educational tool. teachers can illustrate technical characteristics of chip-seq data as well as biological phenomena revealed by this technology with a great variety of real data examples. students and prospective users of chip-seq assays have the opportunity to get a feeling for the data and learn about analysis methods by re-analyzing data and reproducing results from landmark papers.

unlike most other resources, the chip-seq server is an open system designed to be used in conjunction with other web servers or locally installed software packages. the creation of a comprehensive public data analysis platform has never been our objective. neither will it be our policy in the future to add functionalities that are offered elsewhere. rather we will continue to promote interoperability with other resources by supporting new data exchange formats as they become available. support of reproducible computational research is another guiding principle of our development efforts. we will take any measures to make sure that the methods behind our web servers are transparent and that any result returned can be reproduced from the unix command line with data files that can be downloaded from the mga repository and publicly available open source software.

the extension and curation of the public data collection at the back-end of the server will be a high priority in future development efforts. while it is clear that we will not have the resources to comprehensively mirror all future public data sets, we will try to offer a balanced mixture of data sets from high impact papers and large consortium efforts responding to the demand of a diverse user community. specifically, we plan to expand the hitherto somewhat neglected data collections for invertebrate and plant species. as a second priority, we intend to enhance the usability of our resources by organizing hands-on courses for prospective users at least once a year, and by extending the collection of tutorials and other e-learning tools posted on our website. briefly, our mission continues to be making chip-seq data more usable and more widely used.

additional file

additional file 1: supplementary material: texts s1–s <dig>  figures s1–s <dig>  tables s1–s <dig>  

 


abbreviations
apaggregation plot

chipchromatin immuno-precipitation

chip-seqchip combined with high-throughput sequencing

fpsfunctional position set 

gogene ontology

mgamass sequences of genome annotation

ngsnext-generation sequencing

pwmposition weight matrix

ssasignal search analysis 

tftranscription factor

tsstranscription start site

