BACKGROUND
characterizing the deregulation of signaling networks is a crucial component of understanding a variety of diseases, including diabetes  <cit>  developmental disorders  <cit> , and cancer  <cit> . for instance, cellular signaling networks may be damaged via mutations or changes in the activation levels of constituent components, which may lead to abnormal cell behavior  <cit> . a specific example is the mutation of the transforming growth factor  receptor protein that leads to unregulated cell growth  <cit> .

signaling networks are one class of complex systems: i.e., collections of interacting components that, on a holistic level, display behavior that cannot be predicted from analysis of the system's components in isolation. complex systems exist in diverse biological, social, and physical contexts. network science has developed as an effective framework with which to study complex systems. biologists use network representations of intra- and inter- cellular signaling to study diverse phenomena, including pathogen-immune system interactions  <cit> , cancer progression  <cit> , and regulatory behavior in the face of changing environmental conditions  <cit> . on a larger biological scale, networks have been used to model ecological interactions, including predator–prey food webs  <cit>  and mutualistic interactions between, for instance, plants and their pollinators  <cit> . networks have also been used to effectively model human social interactions, especially in the context of the spread of disease  <cit> , opinions  <cit> , and information  <cit>  through a population. network theory has elucidated the emergent properties of technological systems, including the world wide web and internet, and is used to model power grids and roads  <cit> .

a network, in its most basic form, consists of nodes  and edges between nodes . the structure of a network, quantified by network measures such as the degree distribution, clustering coefficient or distance  <cit> , can be information-rich. for example, the topology of a social friendship network can be used to determine friendship cliques and key social mediators  <cit> . however, the topology alone frequently provides an incomplete view of the system. the propagation of a signal through an intra-cellular network, for instance, must be represented by assigning a dynamic activation level to each node of the network and quantifying the regulatory relationships between nodes.

the boolean framework has become a standard methodology for modeling dynamical processes on networks, especially in biological contexts  <cit>  ). in a boolean model of a network, nodes are assumed to be either active or inactive . the nodes are inter-related such that the dynamics of an arbitrary node x
i
 obeys x
i
 = f
i
, …, x
n
), where for simplicity each node’s state  is denoted by the node name x
i
 and τ
i
 is the time delay  of node x
i
. depending on the system being modeled, the regulatory relationships  may be represented by logical functions  <cit> , threshold rules  <cit> , or truth tables  <cit> , which give the next state of a regulated node for every combination of its regulators’ current states. for example, the logical function f
a
 =  or d indicates the relationship between the future state of node a and the current states of its regulators, nodes b, c and d. specifically, node a will be on in the future if either b and c are on simultaneously, or d is on. the dynamic updating process  used in boolean models is often done in discrete time: node states are recalculated either synchronously , wherein τ
i
 =  <dig> for any i or asynchronously, wherein node-dependent time delays are used or, equivalently, node states are updated in a prescribed or random sequence. time discretization is clearly an abstraction of the real system being modeled, where interactions occur in continuous time and over differing time scales. in situations where these time scales are not known and therefore cannot be integrated into discrete dynamic network models, as is often the case in biological systems  <cit> , stochastic asynchronous models offer a method of sampling all possible time scales. in this way, these models capture a broad range of possible dynamical behavior; while such predictions are necessarily imprecise, dynamic boolean models are attractive in that they do not require extensive parameterization . indeed, these models have been shown to effectively capture the qualitative behavior of a variety of real systems .

in a boolean framework, the state of a network with n nodes at any time step may be represented by a boolean vector of length n; each bit represents the state of a node ). the procession between the 2
n
 states may be mapped in the so-called state transition network, whose nodes are the states of the system and whose directed edges indicate state transitions that are allowed by the model. after sufficient applications of the network update rules, the network enters into a state or a closed set of states from which it cannot escape, called an attractor. an attractor can be a steady state , or a limit cycle . the attractors of a network represent the stable dynamical configurations of the system. the states that can reach a specified attractor through a path of successive state transitions form the basin of attraction of the attractor. in the context of a cellular signal transduction network, the attractors may, for instance, represent cell fates such as death or unregulated growth  <cit> . as such, determining the attractors of a network, and characterizing their behavior in the face of system perturbations , are major foci of dynamic boolean network analysis. significant effort has been devoted to characterizing the effects of damage on a network's attractors . while the perturbation of a node can, in some cases, have no effect on any other nodes , often the perturbation leads to a cascading failure and finally the system stabilizes in a different attractor.

not all system perturbations, however, necessarily represent damage to the system. a natural counterpart to the study of network damage is the study of network control: network manipulations brought about by human intervention to influence the behavior of the network. in general, network control involves driving the state of a network from an initial state to a final target state. for example, liu et al. have shown that networks with linear dynamics are fully controllable  if the state of roughly 80% of the nodes are externally manipulated  <cit> . one can also envision more specific intervention strategies whose objective is to drive the system from an initial undesirable state  to a more desirable target state . this type of mitigating intervention is expected to involve the control of fewer nodes than full controllability and thus it should be more practical.

while the most obvious mitigating intervention in response to network damage is the direct reversal of the damage, this may be impractical to implement in the system under study . moreover, the initial damage may have cascading effects that cannot be undone by only reversing the initial damage. for example, the loss of a species in a food web can lead to a catastrophic collapse in the local ecosystem  <cit> , at which point the re-introduction of the originally lost species will likely not suffice for the restoration of the original food web.

an alternative approach to the direct reversal of the initial damage involves fixing the state of one or more nodes that are not part of the original damage . these compensatory perturbations aim to move the system to the basin of attraction of a desirable attractor which is as close as possible to the attractor of the undamaged network. here, we consider a complementary approach, wherein we modify network edges  rather than node states; this approach has received comparatively little attention in dynamical networks . moreover, the control problem we are considering is not of changing the state of the system, but of changing the stability of the state that the system enters as a direct result of the damage.

our goal is to identify interventions that can be used preemptively to mitigate the cascading effects of network damage. the method of selecting these interventions is based on developing an understanding of the first deviations caused by the damage: in a regulatory chain a - > b - > c wherein node a is damaged, we wish to modify the regulatory relationships such that node b is not deregulated as an effect of the damage. if this goal is accomplished, the stability of node c is assured. for example, by developing an understanding of the first effects of overactive tgfβ signaling, the identified interventions would prevent them from happening and thus prevent unregulated cell growth. an important caveat of this approach is that in an empirical system a deregulatory cascade occurs dynamically in real time; the application of the regulatory intervention must therefore occur immediately after or even before detecting the initial damage.

specifically, in this article we consider boolean networks with logical update rules. we express network damage in the form of a sustained on or off state of a node, regardless of the state of the node’s regulators. this type of abnormal state is often encountered as an effect of gene mutations that render the encoded protein not expressed or nonfunctional or, conversely, constitutively expressed or over-active. we develop an algorithm that identifies simple modifications to node interactions that allow the damage-modified attractor to remain an attractor in the damaged network. we apply the algorithm to random boolean networks with a synchronous update scheme in order to show its general effectiveness and limitations. we then apply the approach to two biological case studies. we first show that the methodology identifies numerous potential interaction modifications to restore abscisic acid signaling in plants in response to the loss of key regulatory components. we then show that the methodology may be readily extended to remove an undesired  attractor in a network model of t cell large granular lymphocyte leukemia.

methods
network properties
the state of an n node boolean network is described by a boolean vector of length n: [x <dig>  …, x
n
], where x
i
 ∈ { <dig>  1}. each node x
i
 has an update function x
i
 = f
i
, …, x
n
) that determines its dynamics; here we express these update functions as logical update rules. consider the four-node network shown in figure  <dig>  under synchronous dynamics, where all nodes are updated at multiples of a common time step, and thus τ
i
 =  <dig> for all i, the network has two steady states and two limit cycle attractors ). asynchronous dynamics are commonly generated via the random order asynchronous  update scheme or the general asynchronous  update scheme. in the roa method the time delays are randomly selected such that every sequential update of the nodes has an equal chance. in other words, a random permutation of the nodes is generated, the state of each node is updated using the most recent states of its regulators, then a different permutation is selected randomly, and so on. in the ga method, a node is randomly selected to be updated at every time step; unlike in the roa update scheme, a node in the ga update scheme may be updated twice before every node is updated once. a key observation is that the steady states of a boolean network are independent of the value of the time delays or of the order of update; i.e., independent of the choice of synchronous, roa, ga, or other update scheme  <cit> . in contrast, limit cycle attractors encountered for synchronous update may not be preserved when switching to asynchronous update  <cit> . we apply the roa update scheme to the network of figure  <dig>  and show ) that it has two steady state attractors that coincide with the steady states under synchronous update ).

we consider network damage in the form of node knockout or constitutive expression; i.e., the update function for a damaged node x
i
 becomes x
i
 =  <dig> or x
i
 =  <dig>  this alters the dynamical behavior of the nodes regulated by node x
i
, which leads to a modified state transition network. for example, if node c is knocked out, in both dynamical schemes the network's only attractor becomes the "all off"  steady state ).

we wish to modify the node update rules to restore a specific attractor of the original network, given that the damage may not be directly reversed . consider a
s
, a steady state attractor of the original network. the network damage sends the state of the network from a
s
 to a
d
: a state identical to a
s
 other than for the state of the damaged node. for example, considering the "all on"  steady state in the example of figure  <dig>  after knocking node c out the state becomes a
d
 = 1101; the goal is then to make this state a steady state. the state a
d
 is not in general a steady state of the damaged network, and so we modify the update rules such that it becomes one, i.e. ad→asd.

similarly, in the case of a set of limit cycle states a <dig>  …, a
n
 , we wish to ensure that the parallel damaged states a1d,…,and constitute a limit cycle of the damaged network. we note that some states in a limit cycle may collapse due to network damage . in these cases we choose as the target of our mitigation strategy the largest attractor that can be formed from the a1d,…,and states. this reduces the length of the attractor but ensures that no ambiguity arises as a result of the reduction in the size of the state space. for instance, the network shown in figure  <dig> has a six-state synchronous limit cycle ). knocking out node c results in the formation of a four-state synchronous limit cycle ). when considering the damage-modified version of the attractor states, two are identical to the original attractor  and three translate unambiguously to a new state . the sixth state,  <dig>  translates to a pre-existing state of the attractor,  <dig>  thus, the desired repaired limit cycle contains five states, rather than the original six. the blue edges with open tips indicate the transitions that must be enacted through network repair to force this set of five states to be an attractor of the repaired network.

form of interaction modifications
we provide an overview of the network repair algorithm in table  <dig>  however, before discussing it in depth, we first address the general form of the interaction modifications considered in this article . we separately consider interaction modifications that involve changing a node from updating to on to updating to off and vice versa . we here restrict ourselves to relatively minor functional modifications, in an effort to generate practically implementable predictions. we consider update functions as logical rules, and choose to scaffold upon the original update function by adding terms, rather than by removing pre-existing terms. in all cases, we add an interaction to the update rule for node x with a node that previously played no part in its update function. in some cases, we additionally add a secondary dependency upon a single node with which node x originally interacted; this weakens the relative role of the new node in regulating node x. essentially, this choice of methodology reflects the introduction of biological agents  that facilitate novel interactions that can drive system behavior in place of, or in conjunction with, the pre-existing interactions. while such an introduction, strictly speaking, increases the number of regulatory components in the system, we here choose to represent the agent only through its effect of modifying or creating an interaction between two pre-existing components of the system; this is a logical simplification because the introduced agent is designed explicitly to have no other effect on the system.

n
i
 for every state of the attractor of interest, a
s
d
d
d
d
i
 in every state s in a
d
i
i
i
 in every state s in a
d
i
i
i
] = the intersection of the viable  pairs across all states in a
d
i
i
] when omitting states in a
d
 where node x
i
i
the algorithm used to determine interaction modifications that stabilize a network attractor in response to node damage is presented in a concise pseudo-code format. a user-friendly implementation is provided as an extension to the python software package booleannet  <cit> .

f
x
 = … and a
new
x
 = … or p
new
f
x
 = … and not p
new
x
 = … or not a
new
f
x
x
f
x
x
f
x
x
f
x
x
the rule modifications considered for a node x. initial dots are placeholders for the original rule for the node, which could be, e.g., f
x
 = y. p indicates an arbitrary node that is present  in the current state of the network, a indicates an arbitrary node that is absent  in the current state of the network. subscripts indicate whether the node in question is a new regulator for this node  or existed as an original regulator. the top two rules in either column are the simplest, but place the greatest regulatory weight on the new interaction.

as we shall show, in networks where no node is regulated by every undamaged node, this methodology and choice of interaction rule modifications can unambiguously fix any state to be a steady state of the network, including time-averaged representations of multi-state attractors. however, this approach is in general not sufficient to fix a selection of states to be a limit cycle of the network. when repairing a limit cycle, a single rule modification must accommodate all state transitions for each node; furthermore, such a modification must be found for all nodes that require repair at any transition in the limit cycle. failures of this approach fall into three categories.

in the first category, a node requires both an on to off correction and an off to on correction within a limit cycle; this is uncorrectable while scaffolding on the existing update rule. we show one such example in figure 2). the two-state synchronous limit cycle shown with grey-bordered edges and grey arrows in figure  <dig> translates to the pair of states targeted by the dashed edges when node c is knocked out; the desired repaired attractor is shown by the blue arrows with unfilled tips. however, forcing these states to form a limit cycle entails forcing node a to update to  <dig>  when it normally updates to  <dig>  and vice versa .

in the second failure category, a node requires multiple corrections of a single type within a limit cycle, but no single rule modification suffices to make the repair in all cases. we show an example of this failure case in figure  <dig>  figure  <dig> is similar to figure  <dig>  but here the desired repair is for node e to transition to  <dig> when it normally updates to  <dig> at both states of the desired limit cycle. because node e's only regulator is the damaged node, we are restricted to the rules in the top two rows of table  <dig>  however, the potential new regulators for node e  oscillate in the two desired states , and therefore cannot bring about the desired transition for node e in both states when considering only modifications of the form listed in table  <dig> 

in the third category of limit cycle repair failure, a repair exists for all necessary corrections, but none preserve an original state transition that requires no modifications. in the example of figure  <dig>  the original attractor  translates into the desired pair of states  when node b is knocked out. however, in the damaged and unrepaired network, both node a and c fail to transition as desired from the state  <dig>  node a is regulated by every node other than node e; node e must therefore fill the role of the new regulator of node a that takes it from the off to on state. each of the possible repairs, listed in rows  <dig>   <dig> and  <dig> of column  <dig> in table  <dig>  forces node a to update to  <dig> from the  <dig> state; however, none of them ensures that a becomes inactive when updating from the  <dig> state, and therefore the overall limit cycle repair is not possible.

more thorough interaction reformatting can, in general, alleviate these issues and allow for the repair of limit cycles. in addition, in cases where the dynamic fluctuations represented by a limit cycle are not requisite components of proper system function, the methodology presented here may be used to achieve an alternative stabilized network dynamics. we define the superset of a limit cycle as a single state wherein every node that is at least transiently active in the limit cycle is active, and all other nodes are inactive. for example, both limit cycles in figure  <dig> have a superset of "1111", as all nodes are at least transiently active, the superset of the original limit cycle on figure  <dig> is  <dig>  and the superset of the damaged limit cycle of figure  <dig> is  <dig>  as discussed above, the network may be modified to ensure that the superset is a steady state, to preserve the original limit cycle's time-insensitive activation levels.

this choice of superset definition explicitly incorporates all nodes that are active to any extent in a time-averaged assessment of attractor dynamics. in some contexts, alternative definitions may be more appropriate; for instance, only nodes that are on for a specified fraction of the limit cycle's states may be considered on in the superset. notably, the details of the process by which the states of a limit cycle are collapsed to a single representative state do not influence the ability of the methodology proposed here to fix that state to be a steady state of the modified network.

network repair
we now treat in detail the algorithm of table  <dig>  whose most complex step scales as o with n equivalent to the number of nodes in the network. a user-friendly implementation is also provided as an extension to the python software package booleannet  <cit> . the first step  is to determine the attractor a
d
 , and, if desired, to collapse it to a single representative state , as discussed in the previous section. the second step  is to identify the nodes that are deregulated within the attractor as a direct result of the network damage. consider an arbitrary attractor composed of states a <dig>  …, a
n
 . by definition, a node x
i
 that is not impacted by damage to node x
j
 will not change its state  or usual progression of states  as a direct result, i.e.

 fix1t,…,xj−1t, <dig> xj+1t,…,xnt=fix1t,…,xj−1t, <dig> xj+1t,…,xnt 

for all a
k
, k =  <dig> …,n. that is, a node is robust to the network damage if the damage is not sufficient  to cause it to change its state from any of the attractor states, and is otherwise sensitive to the damage. sensitive nodes must have their update function f
i
 modified to become robust. consider for example the desired attractor of figure  <dig> : only node a is sensitive; it is regulated only by node c, the knockout of which is considered in figure  <dig> 

importantly, because modifications to the node update functions are applied simultaneously to the damaged state a1d,…,and, the stability of every node may be individually considered under the assumption that all other nodes are stable. moreover, only the regulatory targets of the damaged node need to be considered, as only they may suffer an immediate deregulation due to the network damage. therefore, the computational complexity of this task scales as the product of the number of states in a
d
 and the number of regulatory targets of the damaged node; these are generally both quite small.

limit cycle failures of the first type may be assessed at this point by recording all transitions  among the sensitive nodes . if no such failures are identified, the next task is to determine all viable interaction modifications that bring about node robustness. this consists of iteratively considering every sensitive node x
i
 in every state of the target attractor a
d
 . for every such combination, all other nodes are either on or off and are either a regulator of x
i
 or not; these properties determine which nodes can be used with which rules in table  <dig> to ensure the desired next state of node x
i
. as some of these rules consider node pairs as potential regulators, the complexity of this task scales as o.

steady state and limit cycle superset repair terminates at this point; the nodes and the viable node and rule combinations are returned. in the case of limit cycles, however, only the approaches that are applicable to all states in a
d
, for a given sensitive node, suffice . if there are no node and rule combinations that exist in all state transitions for one or more sensitive nodes, the method fails. additional analysis may then be applied ) to differentiate between the above-discussed classes of failure . we apply this methodology to the example of figure 1; one viable modification to the update rule for node a in response to the damage shown in figure  <dig> is shown in figure  <dig>  and the resulting state transition networks for synchronous and asynchronous dynamic schemes are shown in figure  <dig> 

simulations to test the success of the method
we first consider random boolean networks with n nodes and k randomly assigned input nodes for every node . the future state of a node for each of the 2
k
 possible combinations of inputs is randomly assigned, without bias for either outcome. for every combination of n and k shown in figures  <dig> and  <dig>  we generated  <dig>  networks. we then use a synchronous updating scheme to find an attractor of the network, and simulate damage by forcing a randomly selected node to be in its opposite state; that is, a transiently or permanently active node is forced to always be off, or a permanently inactive node is forced to always be on.

in the case of steady states, if the damage-modified steady state is an attractor, the steady state is considered to be stable with respect to the damage. for limit cycles, if the damage-modified states of the limit cycle still constitute a limit cycle, or if they contain a smaller limit cycle , the limit cycle is considered to be stable with respect to the damage. for example, on figure  <dig> state  <dig> of the original limit cycle merges with state  <dig> of the original limit cycle when node c is knocked out. thus a limit cycle of five states would be considered stable with respect to the damage. however, the damaged limit cycle of four states on figure  <dig> is not sufficient and needs repair. if the limit cycle is not stable sensitive nodes  are identified.

for both the random boolean networks and the biological case studies, all possible rule modifications  are considered; in the case of random boolean networks one rule is chosen at random for each sensitive node in each attractor. once an update rule modification has been applied to all sensitive nodes, the stability of the attractor of the repaired network is evaluated. in cases where a limit cycle is unable to be repaired, the category of failure  is recorded.

the biological case studies involve straightforward application of the network repair methodology discussed here. dynamics in the t-lgl case study are performed with the general asynchronous updating scheme wherein a randomly selected node is updated at each step. the update process in this scheme is a markov chain; its attractors may be found by summarizing all possible state transitions in the transition matrix t, where t
i,j
 is the probability of state i updating to state j in a single update. entries in every row of t sum to 1; rows with a single nonzero entry t
i,i
 correspond to steady state attractors. complex attractors may be determined from t by determining the terminal strongly connected components of the corresponding transition graph.

alternatively, because the probability of a state i updating to state j after m steps is given by ti,jm <cit> , evaluating ti,jm for sufficiently large m reveals the relative probability of reaching every attractor from all possible source states. specifically, any nonzero column j corresponds to a state that exists in an attractor, and the column entries indicate the relative frequency with which the system will be in the given terminal state j when initialized from source state i. the complexity of this procedure is o, with x =  <dig>  for the standard coppersmith-winograd algorithm for multiplication of two n × n matrices  <cit> . here, the transition matrices were computed through exhaustive simulation of all possible transitions from every network state. the attractors were then determined by computing the nonzero values  with m >  <dig> 

RESULTS
the methodology outlined above may be applied to any boolean network with logical update rules. we first show the analytical result that the methodology outlined here may be used to stabilize any single steady state or limit cycle superset of a wide class of networks. we then apply the methodology to  random boolean networks and  two biological cases studies. in case , we show the ability of the method to repairing both steady states and synchronous limit cycles for a robust range of network parameters, and in case  we show that the method is able to quickly provide insight into possible methods for intervention in real networks.

stabilization of a single state
theorem
any state σ of a discrete time boolean network may be modified to be a steady state of the network through application of the rule modifications listed in table  <dig> if no node is regulated by every undamaged node in the network and if the future state of every node depends only on the current state of other nodes.

proof
consider the network to be in state σ at time t. then all nodes x
i
 that obey x
i
 ≠ x
i
 are candidates for modification according to table  <dig>  for every such node x
i
, consider an arbitrary node x
j
 that does not regulate node x
i
 . the four modifications listed in the top two rows of table  <dig> indicate a sufficient rule modification by adding x
j
 as a new regulator for each of the four combinations of states of nodes x
i
 and x
j
 at time t. the remaining modifications listed on table  <dig> involve x
j
 in combination with existing regulators of x
i
.

in this article, the state σ may be viewed as a damaged steady state; the nodes that require interaction modification are those that are sensitive to the network damage. the ability for this approach to stabilize limit cycle supersets follows directly from the fact that the methodology is sufficient to stabilize any single state.

random boolean networks
the density of connections in random boolean networks has a strong influence on the frequency with which both steady state and limit cycle attractors are resilient to network damage . specifically, on average 81%, 70%, and 63% steady state attractors are resilient to damage for k =  <dig>   <dig>  and  <dig>  respectively ) and on average 78%, 54%, and 27% of limit cycles are resilient to damage for k =  <dig>   <dig>  and 3; see figure  <dig>  of the steady state attractors that are not robust to damage, all  were stabilized after application of the update rule modifications as described in the methods section, i.e., by simultaneously modifying the update rules for all sensitive nodes, we unambiguously ensure that the damaged state becomes a steady state in the repaired network .

the rule modifications considered in this article are not able to always restore the complete dynamics of the damage-modified limit cycle  cf. figure 3). most failures are categorized as case  discussed above: update rule modifications that correct undesirable transitions cannot also preserve desirable node state transitions within a limit cycle . most of the remaining cases of failure fall under case  discussed above: a node requires both types of correction and may not be corrected with the rule modifications considered here. however, collapsing the limit cycle to its superset  reduces the problem to that of a steady state of the network, and is therefore always successful.

the average number of edge modifications necessary to repair the network does not vary based on network size, for both steady state and limit cycle attractors . furthermore, the average number of modifications required increases only slightly as the nodal in-degree increases. the upper bound on the number of edge modifications that are required in response to the deregulation of a single node is equal to the node's out-degree. the out-degree distribution of random boolean networks is centered around the average out-degree value, which equals the fixed in-degree of each node. nonetheless, the average number of edge manipulations necessary for network repair was well below the average out-degree of the networks for the k =  <dig>  cases: steady states required an average of  <dig>  and  <dig>  edge modifications across all simulations, respectively, while repairable limit cycles required an average of  <dig>  and  <dig> , respectively. this suggests that in the context of sparse random networks, when network repair of a destabilized attractor is possible, it may be achieved through a minimal intervention, regardless of network size or edge density.

the number of interventions necessary for the superset-based repair of damaged limit cycles does depend on the size of the network. in a bias free random boolean network, the probability of a node changing its state based on any input is p = . <dig>  the number of nodes that change their state in a single step from a randomly selected state in a random boolean network of size n is therefore pn, regardless of edge density. since the state that corresponds to the superset of a limit cycle, with one node additionally damaged, may be as far away from a steady state as a randomly selected state, the expected number of required edge modifications is pn. however, limit cycles in real biological systems may be largely stable in that few nodes change their state over the period of the limit cycle  <cit> . this implies greater superset stability than in random networks; as such, the stabilization of limit cycle supersets in biological systems may require fewer interaction modifications than in the case of random networks.

aba induced closure of plant guard cells
most plants regulate their uptake of carbon dioxide through stomata: microscopic pores that coat much of the epidermis of the plant. the aperture size of a stoma is regulated by a pair of guard cells, which contract or relax in response to environmental cues. while stomatal opening is required for the uptake of carbon dioxide, open stomata facilitate evaporative loss of water from the plant . in drought conditions, plants therefore close their stomata, a process which is induced by the plant hormone abscisic acid  and involves protein-protein interactions, biochemical reactions and ion transport.

we consider the aba signal transduction network constructed by li et al.  <cit> , and further studied in  <cit> . this network has a single attractor in the persistent presence of aba, a steady state  in which the node closure is in the on state. all initial conditions that include the presence  of aba converge to this closure steady state. in  <cit> , the authors found that single knockouts of  <dig> of the  <dig> nodes of the network significantly impaired stomatal closure, as measured by the frequency with which closure stabilized in the on state when sampling the space of all initial configurations of the non-source and non-sink nodes. in  <dig> of these cases  closure was completely inhibited, while in the remaining  <dig> , closure was partially inhibited. all other single-node knockouts affected at most the number of time steps required to achieve closure.

we therefore consider repairing this network in response to the knockout of the  <dig> key regulatory nodes. in  <cit> , dynamics are simulated on the network via the random order asynchronous  scheme . we find that the repair methodology introduced in this article successfully repairs damage applied to the closure = on steady state attractor of the aba network. in this procedure, we begin from the damaged steady state wherein a particular node is fixed in its opposite state and identify rule modifications that prevent the propagation of the damage. interestingly, the knockout of kout  does not otherwise alter the stability of the healthy attractor of the network and therefore requires no network modification. in  <cit> , the authors found that after knocking out kout and randomly sampling all possible initial conditions, closure = on states were found with decreased frequency. taken together with the result of this analysis, we find that the original attractor survives a kout knockout, although it becomes difficult to reach from other states. this is in contrast to the other considered cases of network damage, which lead to the further collapse of the original attractor unless network modification occurs. indeed, all other knockouts required modifying the update rules for  <dig>   <dig>  or  <dig> nodes; the search algorithm identified roughly between  <dig> and  <dig> possible rule modifications for each of these nodes.

we consider in detail damage to heterotrimeric g protein α subunit  <dig> , and determine that 16% of the possible repairs introduce one or more undesired secondary attractors wherein closure is off. this demonstrates the point that analysis of alternate attractors is an important consideration when characterizing network repairs that, in themselves, ensure only the stability of an attractor, and not the extent to which it is reachable.

we also consider a 7-node reduced version of the aba induced closure network obtained in  <cit>  . the sole attractor of this network in the synchronous updating scheme is a 5-state limit cycle ; asynchronous schemes yield a large complex attractor  <cit> . we iteratively knock out each of the  <dig> nodes of the reduced model. in the case of two nodes, cis and closure, the surviving portion of the limit cycle is stable . for the remaining five knockouts, the network repair methodology succeeds in repairing the limit cycle in two cases , or fails under the second  or third classification , as discussed in the methods. as is always the case, the methodology proposed here is able to collapse the limit cycle into its superset, the steady state wherein all undamaged nodes transiently present in the undamaged limit cycle are present. we highlight in particular the successful repair of the limit cycle when caim is knocked out. as shown in figure  <dig>  caim regulates ca2+c, which depends critically upon caim for  <dig> of the  <dig> state transitions in the limit cycle. kout is off in both of the relevant states, but on in all others; appending "or not kout" to the update rule for ca2+c therefore successfully preserves its affected state transitions without influencing any others . as in the full model, we consider the effects of the repair on the topology of the state transition network. this repair introduces no alternative attractors; i.e., the system will always dynamically evolve to the repaired attractor.

f
cis
f
ca2+atpase
f
ca2+c
 and 
) or not kout
f
depolar
f
caim
f
kout
f
closure
the aba model is shown in figure  <dig>  bold, italicized text represents a possible rule modification that preserves the network's limit cycle in response to the constitutive knockout of caim. node abbreviations are given in the caption to figure  <dig> 

2+

c
2+
critical
critical
the aba model is shown in figure  <dig>  the states labeled as critical in bold, italic text are those where deregulation of caim will lead to the deregulation of ca2+c in the following time step . kout has one state during these critical time steps, and the other state in all other cases, indicating that it can compensate for the loss of caim through the rule modification to ca2+c shown in table  <dig>  without deregulating ca2+c in other time steps.

t-lgl leukemia
t cell large granular lymphocyte  leukemia is characterized by unregulated proliferation of cytotoxic t cells  <cit> ; this expansion continues unchecked due to the deregulation  of the natural process of activation induced cell death   <cit> . no curative therapy exists for t-lgl leukemia; understanding the signaling pathways that deregulate apoptosis is a prerequisite to the development of therapeutic treatments that restore the natural process of cell death.

we consider an asynchronous boolean network model of t cell survival signaling in the context of t-lgl leukemia  <cit> . in  <cit> , network reduction techniques were applied to the full  <dig> node network to reduce it to a  <dig> node network that captures the salient behavior of the network . this model employs a general asynchronous update  scheme; because the ga scheme is not deterministic, the same initial condition may lead to multiple attractors depending on the specific order of state transitions. indeed, the authors found that of the  <dig> dynamic states of the 6-node reduced network,  <dig> evolve to either a healthy  fixed state or to a t-lgl  fixed point, depending on the trajectory of the asynchronous update process.  <dig> states exclusively lead to the t-lgl fixed point, while the remaining  <dig> exclusively lead to the apoptosis steady state.

as in the case of the roa update scheme discussed in the previous case study, the edge modification methodology presented in this article may be applied directly to a ga update scheme. indeed, the ga scheme is identical to the roa scheme with the exception of that the ga scheme does not require every node to be updated m times before any node is updated m +  <dig> times; as steady states are consistent across all dynamic update schemes, this nuance does not alter the effect of edge modifications in the context of preserving steady states.

aside from the trivial case of forcing apoptosis itself to be off, the existence of the apoptosis = on steady state is robust to all single node perturbations, because apoptosis self-regulates once active . rather than investigating the preservation of the apoptosis = on steady state, therefore, we choose to investigate the elimination of the diseased state; i.e., instead of adjusting network update rules to preserve a network attractor, we adjust the update rules to remove an attractor.

apoptosis is initially activated by disc; we choose to modify its update rule in such a way as to allow its activation when the system is in the t-lgl state . to account for the fact that the node rules in this network are designed to reflect the deactivation of all signaling components upon cell death, we consider rule modifications within the context of an overarching off signal from apoptosis. a rule modification that obeys the criteria outlined in this article is an additional dependency on s1p, such that the update rule for disc changes from f
disc
 = ) and not apoptosis to f
disc
 = 
)
or s1p)
and not apoptosis . s1p acts as an inhibitor of fas and ceramide, which contribute to the activation of disc in the original network; bypassing this cascade and setting s1p to directly activate disc ensures that disc will always be activated in an otherwise unperturbed network.

f
s1p
f
flip
f
fas
f
ceramide
f
disc
) 
or s1p)
f
apoptosis
the t-lgl model is shown in figure  <dig>  bold, italicized text represents a possible rule modification that eliminates the network's t-lgl  steady state. node abbreviations are given in the caption to figure  <dig> 

indeed, we find that the network modified in this way has only one attractor, identical to the apoptosis = on attractor of the original network; the entire state space is in the basin of attraction for this attractor. we note that this modification has a similar effect as the knockout of s1p, which also removes the t-lgl steady state  <cit> . while the outcomes are similar, this alternate approach highlights a different avenue for the development of curative therapies.

discussion
the deregulation of signal transduction networks, which can be brought about by the over- or under-expression of regulatory components, can lead to abnormal outcomes and ultimately to disease. when investigating network vulnerability, most studies identify nodes whose destabilization leads to drastically altered topological features or dynamical behavior in the network. the question of mitigating the effect of network damage, however, has received less attention.

from a dynamical systems perspective, the solution is clear: if two attractors are present, one desirable and the other not , modifying the expression levels of regulatory components to match the desirable attractor or a state in its basin of attraction suffices  <cit> . alternatively, when considering damage in the form of node over- or under-expression, reversing the damage and returning the network to its original state clearly obviates the need for additional repair.

however, these approaches are often unrealistic in a practical sense. one alternative approach involves compensating for network damage by fixing the state of one or more initially unaffected nodes; this is possible in signal transduction networks, e.g. through gene manipulations, constitutive activation, or pharmacological interventions . however, these modifications have an effect on every signaling component with which the targeted component interacts; in many cases, the deleterious effects of an intervention supersedes the intended benefit. an alternative approach, considered here, is modification not of node expression levels but rather of node interactions. the secondary effects are minimized, as only the chosen node  is directly affected. the empirical implementation of such a modification is highly dependent on context; for instance, in some cases synthetic signaling proteins could facilitate deliberate rewiring of signaling networks  <cit> .

clearly, directly inducing widespread modifications to expression levels of many regulatory components, or of the interactions between many such components, can be problematic. minimization techniques are therefore of considerable interest. a strength of the approach introduced here is that it mitigates the effect of network damage at its source, in that it identifies a minimal set of network interaction modifications that preserves the stability of a network attractor . we consider modifications to the update rules for only those nodes that initially deviate from a desired attractor, and in so doing stymie the failure cascade that can otherwise send the system to a drastically different attractor. while many complex rule modifications are conceivable, we here focus on additions to the existing update rules , using a novel regulator for the target node, and in some cases an existing regulator in an auxiliary role.

we explore the limits of this methodology, as related to network complexity  in the context of synchronously updated random boolean networks. we confirm our analytical result that the method ensures that the damage-modified steady states remain steady states with 100% frequency. a key factor here is the relative timing of system interactions; our methodology may be applied in a straightforward way to various deterministic  <cit>  and stochastic  <cit>  timing schemes. where the method breaks down in the case of limit cycles, we note that  more substantial modifications to update rules may suffice to repair the damaged network and  the superset equivalent of a limit cycle  may be modified to be a steady state using the methodology outlined for steady states; clearly, however, this destroys the dynamics of a limit cycle and is not an appropriate strategy in situations where cyclic dynamics are an important property of the attractor. indeed, network modifications must be considered in the context of the entire system in which the network is embedded, not only in the interests of practicality of implementation but also in order to understand the potential ramifications of manipulating the network. indeed, we stress that the method, as presented here, considers the preservation of a single attractor. when the stabilization of multiple attractors is of interest, each may be considered separately and joint solutions may be identified from the set intersection of the individual solutions. furthermore, while this methodology effectively identifies avenues for network repair, it does not explicitly consider the impacts of the repair on the state transition network: proposed repairs must be carefully filtered for the possible introduction of undesired attractors or other undesired effects on the system's dynamics.

the utility of this approach has been demonstrated in two biological case studies. in the case of drought-induced signaling in plants, we identify regulatory modifications that stand to protect the signaling network of the plants against the deregulation of key nodes. resilient signaling in response to drought is an important consideration for agriculture; moreover, these insights provide testable hypotheses that may lead to further insight into the functioning of this complex regulatory network. in the t-lgl leukemia case study, we demonstrate alternative approaches for the elimination of the diseased t-lgl cell state; such an approach may lead to therapies for the removal of t-lgl cells in vivo.

CONCLUSIONS
we have shown that in the context of random boolean networks, successful network repair can be achieved with few edge modifications, with minimal dependence on the size or interaction density of the network. the upper bound on the number of edge modifications that are required in response to the deregulation of a single node is equal to the node's out-degree. in contrast to the peaked out-degree distribution of random boolean networks, large-scale biological networks have long-tailed out-degree distributions  <cit> . clearly, the loss of a high-degree node may require many compensatory edge modifications. nonetheless, given the low average out-degree of many intracellular signaling and regulatory networks  <cit> , it seems that network engineering via interaction manipulations may, in many cases, require few manipulations to mitigate network damage -- in addition to the aforementioned benefit of increased specificity relative to modifications to node expression levels.

we have considered two case studies of signal transduction networks, and have shown that our methods are successful in both cases and for a variety of dynamic update schemes. while limit cycles are dependent upon the choice of updating scheme, steady state attractors are uniform across dynamic schemes; their stabilization, therefore, requires comparatively less information concerning system dynamics. indeed, the methodology introduced in this article is well-suited for any system modeled by boolean networks with logical update rules. we provide an implementation of the analytical tools described in this article as an extension to the freely available software package booleannet  <cit> .

the approach outlined in this article represents a first consideration of the modification of regulatory interactions with the intent of network control. further theoretical work is necessary to facilitate meaningful advances in vitro and in vivo, as a number of caveats apply to the methodology discussed here. an important consideration when examining modifications to regulatory interactions is their impact on the state transition network : many biological systems respond dynamically to exterior stimuli, and are characterized in part by the ability to transition between dynamic attractors. in such instances, not only must the stability of an attractor be maintained, but the ability of the system to properly interpret exterior stimuli must also be considered. in addition, further minimization of the number of intervention targets should be possible. nodes that are deregulated by network damage may not have a critical impact on other nodes , or may only regulate other nodes that are also immediately deregulated by the initial network damage. depending on the goal of network influence, therefore, not all deregulated nodes are necessarily targets for intervention. effective prioritization of node intervention will enhance the utility of the methodology outlined in this article. in addition, the preemptive network modification considered here is clearly not practical in all cases; adaptation of the methodology to the control of networks that have already experienced first deviations will facilitate the analysis of network control in broader contexts. finally, computational optimization may be necessary for very large networks; one such approach may be to identify viable interacting partners based on limit cycle synchrony  prior to the combinatorial evaluation of node pairs for the complex rule modifications given in table  <dig>  approaches that take these considerations into account may be compared to the approach outlined here, and in this sense this work will serve as an effective benchmark for future studies that consider modifications to regulatory interactions.

competing interests
the authors declare that they have no competing interests.

authors' contributions
cc designed the study, created the software, performed the analysis, and drafted the manuscript. ra designed the study and drafted the manuscript. both authors read and approved the final manuscript.

