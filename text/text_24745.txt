BACKGROUND
in the post-genomic era the analysis of biological networks plays a crucial role in computational and systems biology. consequently, biological network databases, tools for biological graph modeling and approaches for the management and standardization of the large amount of generated data are under continuous evolution. as an example, the pathguide  <cit>  repository lists four different xml standards for biological networks, modeled as graphs , and over  <dig> biological pathway related resources, including databases of protein-protein interactions, metabolic and signaling pathways, gene regulatory and interaction networks. generally speaking, in these databases, different molecular species are represented as nodes, while edges indicate a plethora of relationships existing among such molecules .

due to the increasing availability of biological graph databases, the problem of developing efficient and flexible subgraph matching methods arises in a number of applications. the main goal of biological graph matching is to detect the template-subgraphs that share similarity with noisy pathways built from the analysis of experimental data or built by collecting various sources of information. the goals are numerous and span over a large amount of topics: inference of metabolic pathways  <cit> , prediction of protein-protein interactions   <cit>  or complex interactions by joining together various sources of information  <cit> . in the frame of the quickly evolving translational and evidence-based medicine it is crucial to give biological support to any novel claim, emerging from statistically relevant clinical evidence. in this sense, from the identification of shared pathways among maladies  <cit> , to the elucidation of common targets for different drugs  <cit> , and potential side effects, it is crucial to provide biological bases on any novel finding. challenges involve both computational bottlenecks , and biological limitations, due to noisy/incomplete information.

in the last ten years, several approaches to perform approximate graph matching have been proposed  <cit> . however, few of them are specific for biological graph comparisons. the most notable examples are netalign  <cit> , rahnuma  <cit> , pathaligner  <cit> , pathblast  <cit> , networkblast  <cit> , and saga  <cit> . to compare ppi, netalign  <cit>  models pathways as undirected graphs, allowing mismatches up to a certain blast e-value and gaps by clustering smaller subnetworks . pathblast  <cit>  and its extension networkblast  <cit>  allow node mismatches and gap-node management for very short pathways. for the modeling of metabolic network rahnuma  <cit>  uses directed hypergraphs, with large flexibility in terms of gaps and mismatches . however, the approach does not rely on any standard. pathaligner  <cit>  can only process linear pathways, therefore excluding tree-like structures. saga  <cit>  permits both node gaps and mismatches and implements a very computationally efficient subgraph indexing procedure, which, however, affects its sensitivity  and does not allow the management of purely linear pathways . besides, the input is saga-specific. overall, the above described approaches rely on simplified graphs topologies  and have consequently limited flexibility or reduced matching capabilities.

our contribution, mimo  is characterized by three main properties that guarantee the suppleness needed to properly handle the biological graph matching problem. first, our algorithm relies directly on the graph topology described in sbml documents, which defines a reaction as a set of interacting entities  placed in specific compartments. this takes into account the biological environment and the complexity of a 3-ways interaction, crucial to preserve the largest possible information in noisy biological network models. importantly, no intermediate format conversion is needed, avoiding possible losses of information and additional error-prone processing steps. second, our matching procedure naturally allows node mismatches and gap-nodes introduction. although computationally intractable, the matching procedure implemented in mimo is fast enough to allow multiple queries on biological graph databases. third, in order to deal with the possibility to match distinct elements with similar biological role , or conversely not to match distinct entities encoded as the same element , mimo allows the user to specify a set of allowed/forbidden mappings between entities in two sbml documents. this list is preprocessed to define a similarity function that extends the matching capabilities of the procedure, when the user has a priori knowledge about the biological processes to be compared.

implementation
sbml format and graph model
the systems biology markup language   <cit>  is a free xml-based format for representing molecular interaction networks. in the following, we only describe those components of an sbml document that are used in our comparison algorithm .

an sbml document specifies a set of entities, generally denoted with the term species, that take part in reactions. an sbml species has two mandatory attributes: the id attribute, which uniquely identifies the species in the document, and the compartment attribute, the physical location where the reacting species are placed. a species has also an optional name attribute of type string. distinct species  are allowed to share the same name . a reaction component is a statement that links one or more species. a reaction is defined in terms of the participating species and it consists of a set of  reactants, products and modifiers, along with an additional boolean reversibility attribute. just like species, reactions are identified by a mandatory id attribute and an optional name attribute. a reaction can be seen as a directed edge connecting a set of reactants to a set of products. the set of modifiers can be seen as an attribute of the edge. the reversibility attribute, when true, implicitly asserts that the role of reactants and products in the reaction can be reversed. a single species in an sbml document can participate in one or more reactions as reactant, product or modifier. sbml specifications allow the definition of species that do not take part in any reaction and reactions that have empty sets of reactants, products and modifiers.

thus, the topology of an sbml map can be described by a labeled multidigraph , where a single sbml reaction is spliced into a set of directed edges, connecting every single reactant with every single product in the reaction. the modifiers are treated as edges’ attributes and the compartments are treated as vertices’ attributes. in our model incomplete reactions  and isolated species are ignored.

mimo graph comparison procedure
the algorithmic procedure implemented in mimo computes the overlap between two multidigraphs by detecting the largest possible consistent set of matches between shortest paths in the two graph structures. a matching is consistent if it induces a one-to-one mapping between subsets of reaction pathways, entities  and compartments. two user-defined parameters are required in order to constrain the overlap:  <dig>  maximum length n: specifies the maximum-length for the computation of the shortest paths;  <dig>  list of allowed/forbidden matches between nodes and reaction pathways: this list is used in step  below to define the sets of equivalences between species and reaction pathways.

a short introductory description of the main points characterizing the algorithm is given below . 

i) simple paths computation. the algorithm computes and stores the set of simple paths of the two input graphs. a simple path is a valid path of maximum lengthn connecting two species. moreover, a simple path is non-overlapping, i.e. it identifies a non-overlapping chain of sbml reactions ids. finally, a simple path between two species is required to be minimal, i.e. all simple paths are shortest paths. in short, a simple path between two species is defined as the shortest chain of reactions connecting the two species. given a pair of species, there can be distinct reaction chains of minimal length connecting the pair .

ii) simple paths matching. two simple paths are considered equivalent, if they can be matched at the extremes, i.e. if they have equivalent initial and terminal species. by default, two species are considered equivalent if they have the same name attribute. even when two paths are equivalent at the extremes, they are not matched if: a) the matching between the corresponding reaction pathways or species is explicitly forbidden by the user ; b) there are matchable subpaths, i.e. if there are two equivalent intermediate species in the two paths; c) the matching does not induce a one-to-one mapping between species and compartments. for example, a simple path starting and ending at the same species  cannot be matched with a simple path connecting two distinct species . the simple paths matching procedure naturally induces gaps and mismatches between two linear paths.

iii) maximal sets of compatible simple path pairs. a subset of equivalent path pairs is consistent if it induces a one-to-one mapping between species, compartments and reaction pathways and it is maximal if it is not a proper subset of any other consistent set. this issue is recoded  as the computation of the maximal clique of the compatibility graph on the full set of equivalent path pairs, computed with the standard bron-kerbosh version  <dig>  algorithm  <cit> .

in detail, the compatibility graph is an undirected graph  that describes the compatibility between pairs of matched paths. by construction each vertex of the compatibility graph corresponds to one pair of matched paths and an edge between two vertices indicates that two pairs of paths are compatible. two pairs of matched paths are compatible if the induced mapping between reaction pathways is one-to-one, i.e. a chain of reaction ids in one graph can be matched at most with a unique chain of reactions ids in the other graph, and, in particular, every single reaction id is required to belong at most to a unique path of reaction ids or to its reversed chain. moreover, two pairs of matched paths are compatible if the induced mapping between vertices and compartments is one-to-one. a subset of equivalent path pairs respecting these rules is consistent, in the sense that it induces a one-to-one mapping between species, compartments and reaction id pathways.

the maximal clique detection is computationally intractable. in order to make this phase more efficient, the clique computation is iteratively performed in n steps, where, at each step i= <dig> …,n only the subset of path pairs of maximum length i is considered. this heuristic approach has the advantage of speeding up the computation, while giving more importance to the matches between the shortest biological pathways in the two maps. intuitively, the procedure iteratively builds a solution by detecting first the safest similarities among the two graphs. after the computation of the maximal compatible subset, the procedure sets-up the mapping between the modifiers that appear in the selected pathways.

iv) overlap score. a consistent subset e of equivalent path pairs detects a subgraph matching between the two input graphs, g <dig> and g <dig>  the comparison scores associated to the subgraph matching e is defined as

  s=∑r∈r1w|r1|, 

where r <dig> is the set of reaction identifiers in g <dig> and w is a weight associated to the reaction r, computed as

  w=|re|+|pe|+|me||r|+|p|+|m|, 

where r,p,m denote the set of reactants, products, modifiers of reaction r, respectively, and re,pe,me denote the set of reactants, products, modifiers of reaction r contained in e, respectively. as a result w= <dig> if r has no match in g <dig> and w= <dig> if all reactants, products and modifiers of r have a match in g <dig> with respect to e. the score for g <dig> is computed equivalently by s . note that, since the score s is normalized with respect to the size of the graph, it is in general not symmetric, i.e. in general s≠s. this scoring function provides a value in  <cit>  and roughly measures how much of the graph g <dig> is contained in g <dig> according to e .

implementation details
our software has been implemented in c language by using the libsbml  <cit>  interface library version  <dig> . <dig>  the libsbml library provides routines for reading, writing, manipulating and validating sbml documents.

our implementation takes as input two valid sbml documents  and provides also the possibility to obtain as output, additionally to the comparison score, the computed overlap in sbml format. in particular, if requested by the user, the executable saves three sbml files related to the highest-scoring solution found. two of these documents correspond to the sbml documents in which the non-matched reactions have been removed. in these files the matched reactions are saved in their full definition, i.e. all reactants, products and modifiers of the reaction are saved, even if they have not been matched in the computed overlap. the third sbml file contains the computed overlap between the two molecular interaction maps. in this file, every matched pair of reaction pathways is saved as a unique reaction. only those reactants, products and modifiers that have been matched are saved into the document. in addition, in order to simplify the inspection of the output sbml documents, a text file listing the mappings between species, reactions and compartments is also saved.

the running time of our algorithm is bound by the running time of the bkv <dig> procedure  <cit> , used in step  for the computation of all maximal cliques of the compatibility graph. the bkv <dig> algorithm is efficient in practice  <cit>  but, even with clever pivoting strategies, its running time depends also on the number of possible maximal cliques in a graph, which can be exponential in the number of nodes  <cit> . in order to provide some control on the running time of the algorithm in the most complex cases, the implementation allows the user to bound the running time by specifying a maximum number of solutions and/or a maximum amount of time for the execution of the bkv <dig> procedure. this feature can be useful to allow fast queries on large databases.

RESULTS
we present the performances of mimo in detecting functional relationships among the  <dig> human pathways of the manually-curated reactome  <cit>  database version  <dig>  <cit>  . we performed a leave-one-out test on the whole ensemble of maps, where every single pathway is used as a query graph and it is compared against all the other pathways in the dataset; the detected top scoring pathways  are considered as related to the query.

we compared the performances of mimo with those of saga  <cit> , which has been explicitly designed for efficient graph-database querying and which is, to date, the only publicly available tool closely related to our work. we converted the sbml documents into the saga graph format. we remark that in the saga graph format it is not possible to encode the information related to modifiers, compartments and direction of the reactions. in saga  the isolated entities in the sbml maps are not encoded during format. we ran saga with the default parameters for the graph database creation  with the exception of the d_max parameter, which is, by default, set to  <dig> and in our test has been set to  <dig>  the reason is that, with the default value the algorithm returns almost no match. additionally, we performed the query phase with saga by allowing  <dig>  as percentage of non-gap nodes . for performance comparison, we ran mimo with maximum path length equal to  <dig>  and with a maximum running time equal to  <dig> minute for the bkv <dig> procedure. no relevant improvement in terms of quality/size of the overlaps was observed when testing larger time-bounds for the bkv <dig> procedure . this is due to the fact that, for most of the complex cases , an upper bound of 1h for the bkv <dig> procedure is still not sufficient to explore the entire space of the possible solutions. larger time-bounds are impractical, requiring weeks of computation.

to warrant the comparisons to be as informative as possible, we performed two different kinds of experiments on two disjoint subsets of the  <dig> pathways in reactome. the first set consists of the  <dig> human pathways in reactome that share a non-empty subset of reactions with at least one of the other maps in the dataset. since reactions in reactome sbml maps are uniquely identified by their id attribute, the a priori amount of overlap between two maps can be assessed by simply counting the fraction of common reactions . this set of  <dig> maps is used to assess the performances of mimo and saga in detecting similarities between biological pathways . the second set consists of the remaining  <dig> human pathways for which no trivial relationships can be inferred by using the reaction id attribute; that is to say that these pathways, if analyzed by the same overlap principle, share no common set of reactions with other maps in reactome. therefore such pathways are used to infer possible novel functional similarities between human pathways . mimo appears to be able to identify the largest of such non trivial solutions. a validation and an inference example are discussed in details in the final part of each section.

validation test. the reactome score  denotes the fraction of reactions in the query map contained in the target map . mimo’s score  has been defined in step  of mimo’s procedure. saga’s score  denotes the level of dissimilarity between two maps: the lower the score, the higher the similarity . the auc values have been computed by using as gold standard the reactome reaction overlap scores: a reactome score greater than  <dig> between two maps means related and a score equal to zero not-related.

inference test. mimo’s score  has been defined in step  of mimo procedure. saga’s score  denotes the level of dissimilarity between two maps: the lower the score, the higher the similarity .

from a computational point of view, both mimo and saga are extremely efficient , with a time ratio between mimo and saga of ∼ <dig> when the necessary format conversion time  is included and ∼ <dig> when excluded. this, however, comes at a cost in terms of the quality of the overlaps identified, including a number that is totally or partially missed by saga .

validation test
the results of the biological validation test are summarized in table  <dig>  for visualization purposes, we show only the top-scoring hit for each query pathway. multiple hits are shown only when the comparison score is exactly the same. the full list of comparisons is available as supplementary data . overlaps for which saga does not return any hits , are due to:  the quality filtering used  and  the fragment procedure which forbids the match between linear pathways in two graphs. as a consequence, non-trivial overlaps  such as the ones related to the pairs ,  and  are lost . in general, from a qualitative point of view saga always identifies overlaps smaller than the ones identified by mimo. one notable example is the query r <dig> which is a subgraph of map r <dig>  and for which saga is able to detect a mapping for only  <dig> out of  <dig> nodes. from a quantitative point of view, mimo is able to correctly detect the best hits for  <dig> out of  <dig> queries against  <dig> out of  <dig> identified by saga. moreover, when -due to the time-bound constraints imposed to the algorithm- the optimal solution is not the top ranking, mimo always identifies it in the top four positions . finally, performance comparison in terms of areas under the roc curves  for each single query  and on the entire set of  <dig> maps  confirms that the classification performance of mimo is superior to that of saga.

when querying map r <dig>  mimo detects a non-trivial overlap with r <dig> . for mimo, the similarity of r <dig> with r <dig> is higher than with r <dig> . interestingly, this overlap detects a non-trivial relationship between r <dig> and r <dig> which cannot be directly inferred from reactome, as in fact, such maps have no common reactions .

the citric acid  cycle and respiratory electron transport  vs metabolism of amino acids and derivatives 
the matched subgraph of these two pathways is shown in figure  <dig>  the overlap involves entities located into the “mitochondrial matrix” and “cytosol” compartments. the most interesting biological relationship regards the set of matched reactions in the “mitochondrial matrix” and the role of the “alpha-ketoglutarate dehydrogenase complex”, which is an enzyme complex involved in lysine degradation and tryptophan metabolism.

the junction between the two original maps in the “mitochondrial matrix” derived from a chain of events that link the two reactions. the citric acid cycle  comprises a series of enzyme-catalysed chemical reactions of central importance in all living cells that use oxygen as part of cellular respiration. in eukaryotic cells, the citric acid cycle occurs in the matrix of the mitochondrion  <cit>  and starts with acetyl-coa. in particular, pyruvate is derived primarily from glucose 6-phosphate, alanine, and lactate and is converted into acetyl-coa, the main input for the citric acid cycle. in a separate process, protein catabolism , proteins are broken down by proteases into their constituent amino acids, in a complex process due to the large number of enzymes and metabolites involved. following the metabolic fate of carbon atoms in the amino acids, it is possible to trace all the major metabolic intermediates because of the close interaction of amino acid metabolism with the citric acid cycle. in fact, carbon backbones of amino acids become a source of energy once they are converted to acetyl-coa, either directly  or indirectly via degradation to pyruvate  and enter into the citric acid cycle  <cit> . acetyl-coa is then the junction between the citric acid cycle and the metabolism of amino acids. as it is visible from the overlap of these two pathways, most of the species and reactions are located in the mitochondrion and the main reaction: alpha-ketoglutarate dehydrogenase complex + nad + coa + succinyl coa + co <dig> + nadh was successfully identified by mimo. clearly, the overlap between these two pathways shows how amino acids enter the citric acid cycle and follow the different steps of the citric acid cycle. interestingly, this could not be inferred in saga, the reason being that two very important species, alpha-ketoglutarate dehydrogenase complex and coa, were not highlighted in this overlap .

inference test
the results of the biological inference test are summarized in table  <dig>  for visualization purposes, as for table  <dig>  only the top-scoring hit for each query pathway are shown. the full list of comparisons is available as supplementary data .

from table  <dig>  saga detects some similarities only for three out of  <dig> queries in the dataset, compared to  <dig> of mimo. this suggests that mimo is more sensitive than saga in detecting similarities among biological graphs. however, most of such overlaps, though effective from a computational point of view, do not highlight functional markers, but are, in most of the cases, confined to very common molecules . the impact of such common molecules in the computational analyses of biological networks can represent indeed an issue as it distorts the evaluation of topological network parameters such as centrality or pathway length <cit> . however, the biological interest of such overlaps may not be discarded a priori, and since non-interesting overlaps can be easily detected by visual inspection of the outputs we here chose to maintain them , and give the end-user the option to keep or remove them. nevertheless, in this inference test at least in one case, namely for maps r <dig> and r <dig>  mimo identifies a non-trivial overlap, which is not identified by saga . this example is discussed in detail below.

signaling by wnt  vs cell cycle, mitotic 
the matched subgraph of these two pathways is shown in figure  <dig>  the overlap involves entities located into the “cytosol” and it is related to the role of the “scf- β-trcp <dig> complex” and the “26s proteasome”.

the wnt signaling pathway  is critically involved in the early development of complex, multi-cellular organisms controlling early axis formation, limb patterning and organogenesis  <cit> . abnormal wnt signaling is often related to severe human diseases, including cancer, osteoporosis and other degenerative disorders  <cit> . the replication of the genome and the subsequent segregation of chromosomes into daughter cells  are controlled by a series of events collectively known as the cell cycle. in particular, a family of protein  known as the cyclin-dependent kinases  controls the progression through the cell cycle  <cit> . recent work has implicated wnt components in regulating mitotic events, suggesting that cell cycle and wnt signaling are directly linked  <cit> . interestingly, mimo can highlight this connection and additionally it can also provide details regarding the molecules involved. in fact, by reading the output file, it is possible to argue that this happens via the activity of scf- β-trcp <dig> complex  whose substrates can be divided into two main groups: direct regulators of cdks, regulators of gene transcription or both. β-catenin is the substrate of scf- β-trcp <dig> in the wnt signaling pathway  <cit>  where it plays a key role. in particular, phosphorylated β-catenin is recognized and ubiquitinated by the scf- β trcp ubiquitin ligase complex and is subsequently degraded by the proteasome  <cit> . similarly, some of the cdks, such as cdc <dig>  are also the substrate of scf- β trcp in the cell cycle. from there, once they have been identified by scf- β trcp, all substrates enter the process of proteasomal degradation, the identified common process.

CONCLUSIONS
mimo  is a tool for biological graph matching. the main features of mimo are:  easy-to-use: mimo takes as input biological networks encoded with the systems biology markup language  standard. the sbml standard is widely adopted for biological network modeling and is flexible enough to allow the encoding of quite complex molecular interactions. most importantly, the choice to adopt a standard format as input avoids the pre-processing phase needed to convert molecular interaction maps in a non-standard format removing all the consequent burden.  flexibility: mimo implements a flexible procedure for sub-graph matching, which naturally allows the introduction of gaps and mismatches and permits  supervised queries incorporating a priori biological information.  computational efficiency: while the subgraph matching problem is computationally intractable, mimo implementation is fast enough to allow multiple queries on graph databases.

the capabilities of mimo have been highlighted by performing a one-to-one comparison on all human pathways in the reactome database. the experimental tests prove that mimo is flexible and efficient enough to make it a suitable tool for biological pathway comparisons.

availability and requirements
project name: molecular interaction map overlap;project home page: http://www.picb.ac.cn/clinicalgeno micntw/software.htm;operating system: linux, mac os x;programming language: c;other requirements: libsbml;licence: gpl3;any restrictions to use by non-academics: no.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
pdl and cn designed the project and wrote the manuscript. pdl designed and implemented the algorithmic procedure, and carried out all computational experiments. gw interpreted the biological results. all the authors read and approved the final manuscript.

supplementary material
additional file 1
detailed description of the algorithmic procedure.

click here for file

 additional file 2: table s1
list of reactome’s biological pathways in human.

click here for file

 additional file 3: table s2
full list of comparison scores.

click here for file

 acknowledgements
pietro di lena took part of the official exchange between the university of bologna and picb. this work is funded by the national science foundation of china , grant n.  <dig> 
