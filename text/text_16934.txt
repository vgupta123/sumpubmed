BACKGROUND
network representations are widely used and vital in many areas of science and engineering. they serve both as an endpoint for users to structure, visualize and handle large amounts of data and as a starting point for various algorithms that use networks for automated hypothesis generation. in systems biology, one of the long-standing challenges is the reverse engineering of the cell’s transcriptome in the form of gene regulatory networks . this has proven to be a daunting task, as the amount of genes in the network vastly exceeds the amount of available measurements. as a result, many computational methods have been developed  which try to overcome this challenge using various strategies. these methods differ not only in their accuracy to infer the network but also strike a different balance between scalability and complexity  <cit> . in a recent community-wide effort, a large blind assessment of unsupervised inference methods using microarray gene expression data was conducted  <cit> . this study concluded that no single inference method performs best across all data sets but that in contrast, the integration of several techniques to form an ensemble ‘community’ prediction led to a robust and top performance. in a collaborative effort between the dream organizers, the genepattern team  <cit>  and individual contributors, a web service gp-dream was set up to run and combine current state-of-the-art methods. to date, five methods are offered: anoverence  <cit> , clr  <cit> , genie <dig>  <cit> , the inferelator  <cit>  and tigress  <cit> .

common inference strategies of grn inference algorithms include the calculation of local pairwise measures between genes or the transformation of the problem into independent regression subproblems to derive connections between genes. it is clear that using these schemes, the algorithm is unaware that the goal is to infer an actual network topology. therefore, the global network structure cannot influence the inference process. for example, relevance networks  <cit>  are created by calculating the mutual information between each possible gene interaction pair. a high mutual information score between a gene pair is then considered as putative evidence of a regulatory interaction. it is well known that this technique predicts a large amount of false positive interactions due to indirect effects. two widely-used methods, clr  <cit>  and aracne  <cit>  acknowledge this weakness and implement strategies to mitigate this problem by incorporating a more global network context. aracne uses the data processing inequality on every triplet of genes to filter out the weakest connection. clr builds a background model for each pair of interacting genes and will transform the mutual information score to its likelihood within the network context. wgcna  <cit>  also incorporates a global network context in the network reconstruction step of the algorithm. pairwise correlations are raised to the optimal power to maximally fit a scale-free topology property of the constructed network. in a more general context, network deconvolution  <cit>  was proposed as a post-processing technique to infer direct effects from an observed correlation matrix containing both direct and indirect effects. similarly, a post-processing method named silencer  <cit>  uses a matrix transformation to turn the correlation matrix into a highly discriminative ’silenced’ matrix, which enhances only the terms associated with direct causal links. however, in general and as to date, almost none of the state-of-the-art algorithms make use of general or specific structural knowledge of gene regulatory networks to guide the inference progress. in contrast, such structural properties of grn and biological networks in general have been studied extensively in literature  <cit> , introducing concepts such as modularity, hub-nodes and scale-free biological networks. the topology of a specific grn is highly dependent on the experimental conditions and the type of cell  <cit>  although general topological properties have been reported. it has been described that both prokaryotic and eukaryotic transcription networks exhibit an approximately scale-free out-degree distribution, while the in-degree distribution follows a restricted exponential function  <cit> . furthermore, the concept of relatively isolated sets of co-expressed genes under specific conditions, called modules, has been introduced, as discussed in  <cit> . topological analyses of grn have also revealed the existence of network motifs  <cit> , recurrent subgraphs in the larger network which appear more frequent than would be expected in randomized networks. the existence of such network motifs and their frequency of occurrence inevitably has an impact on the global network structure. finally, prior knowledge about the topology of the specific grn of the cell at hand can be available, in the simplest scenario in the form of already known regulatory links extracted from literature. we believe that the current non-inclusion of such known structural properties in the inference process leads to predictions that do not achieve their full potential. furthermore, they are often characterized by different graph-invariant measures than networks found in literature. although it is hard to completely transform these predictions into more realistic networks, it is clear that the inclusion of structural knowledge is desirable and will be beneficial to the prediction accuracy. however, including such complex and diverse topological information directly in the inference process of existing algorithms is non-trivial and offers little room for modifiability.

instead in this work, we propose and validate a post-processing approach that aims to be easily modifiable and extendable. the resulting algorithm, named netter, uses as input any ranking of regulatory links sorted by decreasing confidence obtained by a network inference algorithm of choice. it then re-ranks the links based on graph-invariant properties, effectively penalizing regulatory links which are less likely to be true in the inferred network structure and boosting others. it is not the goal of this work to put forth structural properties of grn, instead we wish to offer a flexible system in which the end user can decide which structural properties are to be included or emphasized. expert users can easily design and include novel structural properties and consequently tune netter to a specific use case. however, to validate our approach, we also introduce and motivate three simple structural properties and default settings which can be used in a more general setting in which specific knowledge of the grn is unavailable. using these proposed structural properties and settings, we demonstrate that netter improves the predictions of six state-of-the-art inference methods on a wide array of synthetic and real gene expression datasets including the dream <dig> and dream <dig> benchmarks. netter also slightly improves the dream <dig> community prediction of the e.coli. network inferred from real expression data. we compare and discuss the performance of netter with other techniques that aim to incorporate the global network or post-process grn predictions. next, we further investigate and discuss the characteristics of improvement of netter. lastly, we show that the performance gain of netter is robust with regard to its parameter settings and the exact definition of its structural properties.

methodsfig.  <dig> overview of the re-ranking approach of netter. a ranking of regulatory links sorted by decreasing confidence is assumed. this prediction can be obtained by an inference method of choice using any data source. in a first step, the top x links of the ranking are extracted. netter will assign these links a new position, whereas the other links maintain their original ranks. the extracted ranking is awarded a cost and using simulated annealing the cost function is minimized several times, obtaining re-ranked lists in the progress which are then averaged to obtain the final output ranking. the cost function strikes a balance between modifying the original ranking to have better structural properties while remaining true to the original ranking



input, problem definition and output
most grn inference methods return an absolute ranking of all possible edges, sorted by decreasing confidence that this link is a true regulatory interaction. this ranking is then later transformed into a network representation by selecting a threshold determined by the algorithm or end-user. netter uses as input such an absolute ranking of potential gene regulatory links. this ranking can be incomplete, however no regulatory links will be added as netter is strictly a re-ranking approach. no further assumptions are made about which algorithms or data sources were used. although we focus here on unsupervised network inference methods which use microarray expression data to infer network topologies, netter is generally applicable to any method producing a ranking from omics data. in practice, it only makes sense to re-rank the top of the ranking noting that networks consisting of  <dig> genes already produce a complete ranking of  <dig> potential regulatory links . therefore, in the first step of the algorithm , the top x most confident links of the prediction are extracted, where x is a user-chosen value. the algorithm will work on these links only, assigning them a new rank, whereas the remaining links maintain their original ranks and cannot influence the decision process.

formulation as an optimization problem
using the extracted top x links, an optimization procedure is started which is performed several times and can be executed in parallel . each optimization procedure outputs a new ranking, after which the final ranking of netter is obtained by averaging rank-wise over all output rankings . averaging over multiple output rankings is a crucial step in netter. it guarantees robustness and performance gain as the total cost function which is optimized is non-convex with many local optima. we will further discuss this in the results and discussion section. a single optimization procedure tries to find a ranking l∈l, the set of all possible rankings, which minimizes a total cost function f assigning a positive value to any ranking in l.
 minl∈lf,withf:l→r+ 

this total cost function is defined as the weighted sum of two cost functions s and Δ with the same domain as f:
 f=s+α.Δ 

here α is a global balance factor, s is a structural cost function giving a score to a ranking based on structural properties and Δ is a divergence function quantifying how much a ranking is different from the original ranking. intuitively, f strikes a balance between modifying the original ranking to have better structural properties while remaining true to the original ranking .

simulated annealing optimization
this optimization problem is then solved by following a simulated annealing approach to the problem. in a single step of the optimization process, we create a new ranking l′ by randomly moving γ links up or down the ranking by θ positions. γ is sampled uniform from  in each step, while θ is sampled uniform for each link from . Θ, Γ being user-set integer values. in practice, this way the optimization process will explore both minor as substantial changes to the ranking. the newly generated ranking l′ is accepted as the new ranking if f<f or with a probability of e−−f)/t otherwise, with t being the current temperature of the annealing process, as proposed by  <cit> . we use a traditional exponential cooling schedule in which the temperature is repeatedly lowered by a constant factor μ after each iteration. to avoid manual tuning of the annealing parameters for each network, netter will automatically adjust the parameters and restart if the acceptance ratio of bad mutations during a starting window  is not within user-defined limits.

assigning a structural cost function and a divergence cost function to a ranking
in netter, the structural cost function s assigns a score to a ranking l based on topological properties. we adopt the following procedure  to transform a ranking into network representations of which structural properties can be calculated. in a first step, a subnetwork g <dig>  containing n links, is created by using the top n links of the ranking. next, a subnetwork g <dig> is created, containing the first 2n links of the ranking. this process is repeated until a subnetwork g is created, containing all but the last n links of the ranking. summarizing, subnetworks g <dig>  g <dig>  …, gi, g of increasing size are created from the ranking l, consisting of n, 2n, …, i.n, x-n links respectively. we can then calculate a score for each of these subnetworks by using a structural property function sstruct which depends on some structural properties. s is then defined as the weighted sum of the structural scores of the individual subnetworks gi created from the ranking l.
 s=∑iπi.sstruct 

the coefficients πi, each associated with a subnetwork, are set to decrease according to the network size. smaller subnetworks, corresponding to the top of the ranking are in this way more influential in the total structural cost of the ranking. intuitively, this way the optimization procedure will make the top of the ranking correspond more to structurally realistic networks by moving links to the top of the ranking which structurally improve the network and move down others which seem odd to be present. as the size of the search space of possible rankings allows for an almost infinite amount of rankings which effectively minimize the structural cost function close to its lowest possible value, the divergence function Δ needs to be included in the total cost function f. this function thus acts as a regularization term and is defined as:
 Δ=∑link−new_rank|2) 

structural property functions
the structural property function s is defined as the weighted sum of individual structural penalty functions sstruct which each have a user defined weighting coefficient. the amount of structural properties which one could associate with a typical grn are plenty and are much subject to debate. furthermore, some structural properties are highly dependent on the cell at hand or the experimental conditions. therefore, netter is designed to allow for the easy inclusion and exclusion of new or existing structural properties. expert users or researchers which have prior knowledge can tune netter to specific use cases. for example, a custom penalty could be defined which penalizes the non-inclusion of known interactions. it is not the main focus of this work to develop or suggest  structural penalty functions. however, to validate our re-ranking approach, we introduce several general structural properties based on graph-invariant properties and graphlets. in this article, we restrict these functions to be a simple v-shaped mapping of a certain structural property of the network y to a cost value, although netter can include any function that maps a network to a positive value. the v-shaped function is defined as follows:
 sstruct:=∥ay+b∥ 

here, the parameters a and b can be specific for each of the sstruct and the default values can be found in additional files 1– <dig>  in the results section we discuss how changes in the relative weighing coefficients and the exact shape of the individual structural penalty functions  influence the performance of netter.

graphlet-based structural penalty
graphlets have been introduced as small connected non-isomorphic induced subgraphs of a larger network  <cit> . they differ from the concept of network motifs by the fact that an induced subgraph needs to contain all the edges between its nodes which are present in the parent network. since the original study, several other graphlet-based network properties have been derived and successfully applied in various applications  <cit> . if we focus on 4-node graphlets, it is clear that hub-like structures in the network will promote the occurrence of g <dig>  graphlets. we postulate that the relative frequency of g <dig> graphlets as compared to all other 4-node graphlets could be used as an optimization criterion to create networks which are more modular. the need for increased modularity can be motivated by the fact that in the inferred networks, the network topology resembles a full-mesh structure as opposed to a scale-free, modular topology that is generally associated with a grn. to be precise, we created a graphlet-based penalty function which defines y as the relative percentage of g <dig> graphlets compared to all other 4-node graphlets. next, a and b are set in the v-shaped cost function such that a lower cost corresponds to networks with a high relative percentage of g <dig> graphlets. including this penalty does not eliminate the possibility of other valid biological structures to appear in the network , as strong signals will always be retained due to the divergence cost penalty or other included penalties. this penalty will merely discourage the occurence of weak signals connected to stronger signals  that would result in less modular networks. in practice, penalties based on other graphlets can  to be included in netter to further refine the desired network shape. one can also include penalties based on subgraph counts in a directed network context . however, for demonstration purposes, we will only include the g4-graphlet relative frequency as optimization criterion as we believe it is the most simple and intuitive criteria. in the results section and in additional file  <dig> we discuss the default mapping  and the stability of this penalty.
fig.  <dig> all 3-node and 4-node connected network graphlets. figure adapted from  <cit> 



regulatory gene limiting penalty
in the case a list of known regulatory genes is not available, as in the dream <dig> benchmark, predictions tend to favor the presence of outgoing links originating from almost every node in the inferred network. this is due to indirect effects, if for example a gene a regulates both genes b and c in the same process, most algorithms will also predict a regulatory link between b and c. furthermore, in the absence of interventional or time-series data, the direction of a regulatory link is hard to predict resulting in a large amount of bi-directional links as both directed edges will usually be close to each other in the ranking. in reality, it is improbable that every gene in the network has an outgoing link in the network, as this would suggest that the gene has a regulatory function. although the graphlet-based structural penalty partially addresses these problems, a simple regulatory gene limiting penalty was created which defines y as the amount of nodes in the network with at least one outgoing link relative to the total amount of genes in the network. parameters a and b were set such that a high cost was associated with networks containing a high percentual number of nodes that have outgoing links. additional file  <dig> describes the exact default mapping and a more detailed performance stability analysis.

anti-dominating penalty
in some cases after re-ranking, we noticed that a regulatory gene and its target genes would completely dominate the top of the prediction list, leaving no room for other modules. this behavior is unwanted, as one wants to discover different areas of the network. this penalty counters this problem by penalizing a percentual large amount of links originating from the same gene in the network. the anti-dominating penalty defines y as the ratio between the maximum amount of links originating from a same gene in the network and the total amount of links in the network. additional file  <dig> describes the default mapping and a stability analysis of this penalty.

computational aspects of netter
the large search space of possible rankings results in the necessity of performing many steps to minimize the optimization function. therefore, it is critical that a single step is performed as efficient as possible. two computationally expensive processes can be distinguished in a single iteration. first, the new candidate ranking l′ created from l, needs to be transformed into new subnetworks gi. second, structural penalties need to be calculated using the newly created subnetworks of which some, e.g. the graphlet count, can be computationally expensive. executing both processes from scratch would result in an unacceptable runtime. however, because the new ranking l′ is similar to the current ranking l an incremental approach to the problem can be used. therefore, netter uses an incremental update scheme to keep track of the subnetworks and can efficiently revert back in case the new ranking is rejected. all penalty functions, including the graphlet enumerator have been defined and developed to work in an incremental way and new structural penalties should also be implemented in this setting. each optimization procedure in netter is ’embarrassingly parallel’. therefore, netter will assign new optimization runs to each idle, available core. to give an estimate of the execution time of netter: a typical set-up as described further including  <dig> independent optimization runs, took  <dig> single core hours on a intel i <dig> cpu m <dig> clocked at  <dig>  ghz,  <dig>  gb of ram and a 64-bit os. however, the running time is highly dependent on the parameter settings and the list of included penalties. furthermore, the amount of independent runs  is conservative and can be further lowered if computing power is an issue. we discuss this in more detail in the results and discussion subsection.

selected network inference methods
in order to test netter we performed a large number of experiments using a variety of network inference methods. we selected six network inference methods in total with varying complexity and performance. in addition, in case of the dream <dig> networks, the community prediction networks as created and published in  <cit>  were added. of the six selected network inference methods, three are based on mutual information scores: clr  <cit> , aracne  <cit>  and bc3net  <cit> . three other methods use machine learning techniques to infer the network genie <dig>  <cit> , nimefi  <cit>  and tigress  <cit> .

selected data sets and evaluation measures
netter’s performance was evaluated using the five expression datasets from the dream <dig> in silico  <dig> multifactorial  <cit>  challenge and the two expression compendia from the dream <dig> network inference challenge  <cit> . furthermore, to avoid overfitting specific structural properties of these benchmarks, we created an additional  <dig> networks of different dimensions and associated expression compendia using two different synthetic gene expression data generators syntren  <cit>  and genenetweaver  <cit> . table  <dig> provides an overview of the dimensions and properties of the datasets. using all of these datasets, we inferred the network topology using the algorithms described in the next subsection. next, we chose a cutoff value x and re-ranked the resulting prediction using netter. as evaluation measure, we consider both the area under the receiver operating characteristic curve  and the area under the precision-recall  curve, only taking into account the true edges present in the first x predicted links of the original ranking. gold edges which are not present in this original ranking are removed from the gold standard prior to calculating the scores. this allows for a fair comparison between the original ranking and the re-ranked list as netter is strictly a re-ranking algorithm and cannot add any edges outside the selected x edges. furthermore, it allows a more clear comparison between networks of different dimensions. as a result, the auroc and aupr scores in this article depend on the original predicted ranking and cannot be compared between different methods. for some of the additional tests, a reduced dataset of  <dig> networks was used instead of the full dataset to ease the computational demands. this networks in this dataset were randomly selected from the full dataset and contain only genie <dig> predictions. for each test, we will clearly indicate if the full or reduced dataset was used.
dream <dig> e. coli.


RESULTS
to interpret the performance results of netter, it is important to note that from a theoretical point of view, a post-processing approach can never improve every network prediction it is applied on. if this would be the case, repeatedly applying this algorithm on the outcome of a previous re-ranking would eventually result in the perfect ranking. an analogy can be found in lossless compression, where one also tries to find general properties to obtain a good compression ratio for a large set of probable items sampled from the population. in the specific case of netter, each consecutive re-ranking will result in less information of the original prediction being used to guide the re-ranking process and therefore should be avoided. furthermore, for a specific network it is hard to explain why a loss in prediction accuracy occurred. a possible reason is that the initial prediction was of insufficient quality to guide to optimization process in the right direction. it is known that these network inference algorithms achieve low accuracy and that algorithms can produce different rankings even with those obtaining similar performance metric scores  <cit> . further on in this section, we will briefly discuss the performance gain of netter with regard to the initial prediction accuracy. also in the following subsections, we present the results of performance tests, compare netter to other similar technique, discuss the effect of successive applications of netter and comprehensively investigate the influence of the various parameters settings and choice of the structural cost function definitions.

performance tests
we ran netter on all networks and all method predictions using the following settings. the cutoff value x was set to the first  <dig> links or the amount of non-zero links in the case less edges received a non-zero score. the mutation parameters Θ and Γ were set to  <dig> links and  <dig> positions respectively. the subnetwork size parameter n was set to  <dig> and the associated coefficients πi were set to  <dig> i, for i= . the annealing scheme allowed an acceptance ratio of bad mutations of approximately  <dig> % after the first  <dig> of  <dig>  iterations. the optimization process was performed  <dig> times for each prediction before averaging and all penalty functions discussed in the previous section were included. the relative weighing parameter was set to  <dig> for the graphlet penalty,  <dig> for the gene regulatory penalty and  <dig> for the anti-dominating penalty, α was set to 10− <dig>  the influence of the individual penalty cost function shape, the relative weighing coefficients and other parameters on the performance is discussed in the next section. each re-ranking experiment was repeated three times and, due to the ensemble approach of netter, the rankings were almost identical.
fig.  <dig> change in auroc and aupr scores after applying netter. change in auroc and aupr scores after applying netter on all datasets except dream- <dig> which are shown in table  <dig>  the different bars represent the network inference algorithm used to create the initial network. each dot on the figure is a different re-ranked network and is the result of a single netter re-ranking procedure consisting of  <dig> averaged independent optimization runs



to give a more intuitive view on the accuracy gain, we take a closer look at a network  on which a substantial improvement was achieved. figure  <dig> shows a network comparison view between the original genie <dig> ranking and the re-ranked list in which the first  <dig> links are plotted. the true positive links are shown as black solid lines, whereas grey curved lines indicate false positives. the resulting networks have  <dig> out of  <dig> of their predicted links in common. in the original, there were  <dig> true positive links, while the re-ranked prediction contains  <dig>  of the  <dig> true positives in the original prediction,  <dig> are still in the re-ranked network while  <dig> of the  <dig> new links entering the network are true positives. further analysis shows that especially the top of the ranking is improved . indeed, for this example the first false positive is encountered at position  <dig> for the re-ranked list and at position  <dig> for the original. the fact that the improvement occurs at the top of the ranking is a desirable feature in practice.
fig.  <dig> network comparison view of a genie <dig> prediction before and after the re-ranking procedure of netter. the first  <dig> links of each ranking are plotted. true positive links are shown as black solid lines, whereas grey curved lines indicated false positives

fig.  <dig> the difference in the amount of true links discovered at various thresholds for a re-ranking. at every possible threshold of the ranking, the amount of true positive links discovered by the original ranking is subtracted from the amount of true positive links discovered by the re-ranked network. the network is the same as the one plotted in fig. 4




focusing on dream <dig>  table  <dig> shows an overview of the aupr of genie <dig>  nimefi, tigress and the community network. we did not re-rank the predictions of the mutual information methods, as these methods were outperformed by the former in the dream <dig> challenge. the table shows that the original aupr score on the artificial network is already quite high and netter is unable to further improve the prediction. however, on the e. coli. network inferred using real expression data, netter substantially improves the predictions of genie <dig> and nimefi while the tigress performance decreases. netter is also able to slightly improve the community network as produced by the dream <dig> challenge.

comparing netter to similar techniques
in this subsection, we will compare netter with other post-processing approaches for grn inference predictions and other algorithms that incorporate global network information in their inference process. we are not aware of any other methods that use structural properties of the output network to guide the inference prediction on a large scale. however, as discussed in the introduction, both clr and aracne can be considered as extensions of relevance networks which correct the mutual information  scores using a more global network context. network deconvolution and the silencer on the other hand are post-processing techniques that attempt to separate direct causal effects from indirect effects and have been applied for grn inference. as mentioned in the introduction, wgcna raises a pairwise correlation matrix to a certain power to maximally fit the scale-free topology measure. although, the idea is similar to netter, both methods cannot be compared directly. wcgna only changes the edge weight values but does not change the ranking of edges. as baseline for our comparison, we infer networks by calculating mi scores for each pair of genes. next, we also infer the networks using aracne and clr. for each network, we post-process these three predictions using netter, network deconvolution and the silencer. this results in twelve different predictions for each network. we use the same full dataset as in the performance tests. again we use the auroc and aupr scores as evaluation metrics, however we do not adopt the pre-processing procedure described in the ‘selected data sets and evaluation measures’ subsection, as we are interested in comparing between methods as opposed to relative gains in this test.
fig.  <dig> performance comparison of netter to similar  algorithms. , allowing no new links to enter the prediction. applying network deconvolution results in a decrease in auroc and aupr in all but a few cases for the mi prediction. it has no effect on the aracne predictions and lowers the prediction accuracy of clr in general. the silencer is able to correct the loss in auroc score originating from aracne but does not have a positive effect in all other cases. the performance of the silencer has been subject to controversy  <cit> . concluding, we believe that netter compares favorably to other post-processing approaches. furthermore it has the advantage that it is not limited to correlation-like measures but can be applied to rankings or ranking ensembles of different algorithms.

characteristics of improvement with regard to the initial prediction accuracyfig.  <dig> characteristics of improvement with regard to the initial prediction accuracy. relative  change in aupr of the full dataset is plotted, binned in equally sized groups of  <dig> networks. in general, netter’s potential to improve the prediction is higher when the initial prediction is more accurate



successive applications of netter
netter can also be applied on the outcome of a previous netter re-ranking. figure  <dig> shows the evolution of the aupr score of chaining netter on the reduced test dataset of  <dig> genie <dig> predictions. a second re-ranking procedure has a mixed effect on the performance, with about as many networks improving in accuracy as predictions becoming less accurate. further successive applications of netter result in an accuracy loss in the general case although many networks continue to show an improvement compared to original ranking after  <dig> re-rankings. the obtained accuracy is comparable to running netter with increasingly less stringent regularization penalty  as the influence of the original ranking is decreased with every re-ranking.
fig.  <dig> evolution of the performance during consecutive applications of netter. netter is consecutively applied using default setting and penalty functions on the reduced test dataset. the performance increase or decrease compared to the original prediction is plotted after each re-ranking



parameter and structure cost function stability analysis
the large number of parameters which can be set in netter raises the questions of how one can tune these parameters and how influential these parameters are on the prediction accuracy. furthermore, one needs to be sure that a small change in the definition of the structural functions does not lead to a large change in the re-ranking accuracy. to address the first question, netter is equipped with a logger system which can track among others the prediction accuracy, the total cost function, the individual penalty functions and the accept/revert ratio of the simulated annealing process at desired intervals.

to address the second question, first the performance tests used a large and diverse dataset: including benchmark data and networks of different dimensions, created by two different simulators to decrease the change of obtaining inflated figures by chance. secondly, we have performed parameter sweeps by changing the value of one parameter and keeping the other constant. thirdly, we substituted the default structural cost function mapping for each penalty with three times sixteen other simple structural cost functions with different slopes and intersects by varying a and b. table  <dig> lists the default parameter settings and explores different values for the structural penalty functions, the balance factor α, the subnetwork size parameter n and associated coefficients πi. the tables shows the average aupr over all  <dig> networks, the individual values can be found in the additional files 1– <dig>  we discuss the parameter settings and the results of the stability tests in the following subsections.i and the relative weights of the structural penalties

default setting n= <dig> π
n= <dig> π
n= <dig> π
π
π
default setting α=10−5
α=10−2
α=10−3
α=10−4
α=10−6
the average aupr score on a subset of  <dig> genie <dig> predictions is shown and compared to the score using default settings. parameters not listed were set to default values. 



influence of the number of optimization runs on the convergence of netter
netter runs a number of independent optimization runs before averaging and producing the final output ranking. we have shown that using this ensemble method, the output of netter is robust if the same settings are used. we further explore the stability of netter with regard to a variable number of independent optimization runs. figure  <dig> shows  <dig> runs of netter using  <dig>   <dig>   <dig> and  <dig> independent runs before averaging on the e.coli. dream <dig> network. all other networks show similar behaviour. it shows that the mean performance gain increases if more optimization runs are performed. the variance between the final re-ranking also decreases with an increasing amount of optimization runs. however, the mean performance difference between  <dig> runs and  <dig> runs is only  <dig> , while the difference with the original ranking evalation is  <dig> . therefore, if computing power is a bottleneck and many networks need to be re-ranked, a reduced number of optimization runs can be used without a large loss in accuracy.
fig.  <dig> influence of the number of optimization runs on the convergence of netter. netter is run ten times with a varying number of independent optimization runs . each dot represents the aupr of the re-ranked prediction



influence of the subnetwork size n and coefficients πi
when calculating the structural cost function, the ranking is divided into subnetworks of increasing size. the size is determined by the parameter n and the impact on the total structural cost function of a single subnetwork gi is determined by the associated coefficient πi. increasing the subnetwork size will decrease the computation time, as there are fewer subnetworks of which the structural properties need to be tracked. on the other hand, a larger subnetwork size leads to less structural differentiation options for the different links, possibly resulting in a lower accuracy. table  <dig> shows the results for varying n and πi. the performance is stable with regard to the coefficient choice for πi and the subnetwork size n over a wide range of values. concluding, we recommend to set n to a small value  to ease the computational demands but to allow for maximum differentiation, however the choice of n and πi is not crucial with regard to the performance.

influence of varying the global balance factor α
probably the most important parameter in the re-ranking algorithm is the parameter α which determines the trade-off between the divergence cost and structural cost of a ranking. if this parameter is set too high, the algorithm will not allow any changes to be made to the original ranking. whereas if the parameter is set too low, the re-ranking process will not use the original ranking to guide the optimization process. we vary this parameter by setting the values 10−i, with i=2… <dig>  the results are shown in table  <dig>  for high values of α, the network will only allow small changes to the network, resulting in accuracy which is between the accuracy of the original prediction and the maximum accuracy which can be achieved after re-ranking. interestingly, the accuracy seems to be stable for the values i=4… <dig>  we believe this is due to the ensemble approach in which we average over several optimization processes.

influence of varying the relative weight of a individual structure penalty function
the impact of the individual penalty functions on the total structural cost function can be adjusted by changing the associated weights of each penalty function. these weights are typically set by running the algorithm several times with some initial settings and by tracking the individual penalty scores using the logging system. the influence of these parameters is shown in table  <dig>  for all three penalty functions, a performance loss can be seen if the penalty influence is set to zero and as such is not included in the structural cost function. the weight of all three penalties is shown to be robust for a wide range of values, meaning that a small change in this weight does not result in a big effect on the outcome. as a rule of thumb, we suggest that the weights are set using the logger system to values such that all penalties which the user designed and included more or less equally contribute to the decrease in the overall penalty function. this way, the weights of the individual penalty functions seem to have little effect on the accuracy increase of the re-ranking process.

influence of the individual structure cost penalty mappings
in order to test the robustness, we replaced the default v-shaped function =∥ay+b∥) of each structural penalty in a  <dig> by  <dig> grid search. b was set such that the function had zero cost at different values for the structural property y and for each setting of b, four different slopes were selected by varying a. additional files 1– <dig> contain the exact values of a and b, a visualization of the functions and the performance metrics of the networks re-ranked by netter using these settings. for the graphlet based and the gene limiting penalty, the decrease in average aupr over the  <dig> networks was at most  <dig>  and corresponded to the setting in which the penalty function was moved furthest from the original intersect. we therefore conclude that these penalties are stable over a wide range of possible mapping definitions. the anti-dominate penalty showed a slightly faster decrease in aupr if the intersection with the x-axis was moved further to the right. in the extreme case the performance dropped to  <dig>  from  <dig> . the performance loss is slightly more pronounced because unlike the latter penalties the penalty cost associated with y-values left of the intersect have no meaning, as it does not make sense to discourage rankings which explore different regions of the network. concluding, the exact shape of all three structural penalty functions is robust and only decreases slowly if the function is moved closer to the inverse function. the individual network re-ranking scores can be found in additional files 1– <dig> 

further exploration of the impact of the structural penalty function definition
in addition to the tests in the previous subsection in which we varied the shape and the relative performance of the structural penalty functions, we believe it also important to investigate how netter behaves in extreme settings. the goal is to both establish some baselines for the performance metrics and to help gain intuition about the presented performance and stability results. in a first test, we excluded all structural penalties and the divergence cost function and again re-ranked the reduced subset of  <dig> networks. the simulated annealing scheme was altered to accept every proposed ranking. this results in randomly shuffling the ranking for a set number of iterations before averaging the obtained rankings. table  <dig> shows the aupr results for  <dig>   <dig> and the default value of  <dig>  iterations averaged over the standard value of  <dig> independent optimization runs.
average values over  <dig> runs are shown on the reduced test dataset. standard deviation is listed between brackets



this experiment was repeated  <dig> times and the standard deviation between runs is shown between brackets. the table shows that the performance drops as the number of iterations increases. this is expected, as the initial prediction is more confident about the top of the ranking which would as a result contain more true positive links. randomly shuffling the ranking would eventually lead to a uniform distribution of the true positive links, resulting in a worse aupr score and an auroc score of  <dig> . due to the ensemble nature of netter, the standard deviation of the performance loss between the final obtained rankings remains small, although the obtained ranking diverges more than in the latter case.

in a second test, we modify the structural penalties such that they attempt to optimize the inverse function. for the regulatory gene limiting penalty and the graphlet-based penalty this is achieved by changing the v-shaped function intercept to 1−b. the optimization process will then attempt to lower the amount of g <dig> graphlets and increase the numbers of nodes with outgoing edges. we excluded the anti-dominating penalty from these experiments, as the inverse of this function is not well defined. table  <dig> lists the average aupr score over the subset of  <dig> networks.


even in the extreme case in which one uses two inverted functions which are clearly not typical for a gene regulatory network, the accuracy of the prediction remains higher than the randomly shuffled network. this is due to the divergence cost function which attempts to keep the new ranking as close as possible to the original. in case only one inverted function is used, the performance loss is less pronounced, suggesting that other structural properties can counter the effects of ill-chosen penalty functions to some extent. overall we believe that the performance gain is promising if well-motivated structural properties are used and the performance gain is robust to the exact transformation of the structural property into a penalty function.

CONCLUSIONS
in this work we presented netter, a novel post-processing algorithm for gene regulatory network predictions. our algorithm re-ranks a sorted list of predicted regulatory interactions using known structural properties of the network. the algorithm works by defining an optimization problem in which we minimize a weighted sum of desired structural properties and a regularization term penalizing divergence from the original prediction. this optimization problem is solved several times using simulated annealing, after which the obtained networks are aggregated using average rank to obtain the final output. we offer a flexible system in which desired structural properties can be developed and included. expert users can tune the system to include specific prior knowledge but we show that by using three suggested more general penalty functions we can obtain a large accuracy gain on benchmark and artificial data. using these settings netter outperforms other post-processing methods such as the silencer and network deconvolution. although our method is heavily parameterized, we have shown that the performance increase is robust for a wide range of values and structural cost penalty functions. furthermore, especially the top of the ranking is improved by netter, making our method appealing for practical use. finally, we have shown that netter can further improve the dream <dig> community prediction of the e.coli. network inferred from real expression data.

additional files
additional file  <dig> 
add  <dig> graphlet penalty.pdf. additional file  <dig> is a pdf file containing the default mapping of the graphlet based penalty and a detailed view of the stability tests. 



additional file  <dig> 
add  <dig> regulatory penalty.pdf. additional file  <dig> is a pdf file containing the default mapping of the regulatory gene penalty and a detailed view of the stability tests. 



additional file  <dig> 
add  <dig> antidominating penalty.pdf. additional file  <dig> is a pdf file containing the default mapping of the anti-dominating penalty and a detailed view of the stability tests. 



additional file  <dig> 
add  <dig> performance tests individual results.xlsx. additional file  <dig> is an xlsx file containing the detailed results of all performance tests. 



joeri ruyssinck is the sole first author, yvan saeys is the sole last author

competing interests

the authors declare that they have no competing interests.

authors’ contributions

jr, td and ys designed the study. jr devised and implemented the algorithms and experiments. jr, pd, td and ys wrote the manuscript. all authors read and approved the final manuscript.

