BACKGROUND
understanding the contribution of selection and molecular adaptation in shaping genome wide variation is among the most exciting and widely researched problems with many applications ranging from human health to conservation of endangered species. among the many selection detection strategies  <cit> , fst outlier approaches are becoming widely used  <cit>  because they are important not only for studying the genetic basis of adaptation but also for eliminating non-neutral outlier loci from data sets before computing most population genetic parameters , that require neutral loci  <cit> . this is particularly important in a time where production of data sets with information from hundreds of loci is becoming fairly common.

one such fst method is described in  <cit>   and is implemented in the fdist program and can be used for any codominant genetic molecular markers including microsatellites, single nucleotide polymorphisms  and allozymes. this method evaluates the relationship between fst and he  in an island model  <cit> , describing the expected distribution of wright's inbreeding coefficient fst vs. he under an island model of migration with neutral markers. this distribution is used to identify outlier loci that have excessively high or low fst compared to neutral expectations. such outlier loci are candidates for being subject to selection.

using fdist can be a challenging task for those not familiarized with command-line applications and requires a specific data format not used by other applications  <cit> . furthermore, several independent runs are usually needed to tune parameters  before a final execution is made in a process that is prone to human introduced mistakes. fdist, not being one of the most computationally intensive programs available, can still take up to one hour for a single run , and, in most cases, multiple runs are needed for parameter tuning. large population genomic datasets can take even longer. in this context, fdist requires experienced computer users, and its usage is error prone .

implementation
we designed lositan , a selection detection workbench constructed around fdist. lositan is a java web start application coded mostly in jython with a small part in java, allowing direct execution from the web. lositan provides the following features:

 <dig>  easy to use interface , directly usable from the web.

 <dig>  data import in genepop  <cit>  format.

 <dig>  generation of graphics in several formats .

graphics can be generated in several formats  and parametrized in many ways . a completely unedited example of a png output is presented on figure  <dig> 

 <dig>  data export in a format suitable for import into statistical packages like r  <cit>  or commonly used spreadsheet software.

in case the user desires to further analyze the data or have total flexibility in generating graphics, lositan makes available both the confidence intervals computed and the fsts and heterozygosities for each locus.

a simple r script is supplied in order to facilitate loading the data into r. loading in spreadsheet software is done simply by importing as a tab delimited file.

 <dig>  choice of which populations and/or loci are studied.

 <dig>  approximating mean neutral fst  by removing potential selected loci.

the initial mean dataset fst is often not neutral in the sense that  selected loci are often included in the computation. lositan can optionally be run once to determine a first candidate subset of selected loci in order to remove them from the computation of the neutral fst. this value will be, in most cases, a better approximation of the neutral fst <cit> . the procedure works as follows: lositan is run a first time, using all loci to estimate the mean neutral fst. after the first run, all loci that are outside the desired confidence intervals  are removed and the mean neutral fst is computed again using only putative neutral loci that were not removed. a second and final run of lositan, using all loci, is then conducted using the last computed mean. this procedure lowers the bias on the estimation of the mean neutral fst by removing the most extreme loci from the estimation. naturally all loci will be present in the last run will have their estimated selection status reported.

 <dig>  approximating average simulated fst to the average value found in the real dataset even when the experimental conditions are far from the ones where the theoretical formula fst=14nm+ <dig> holds .

to be able to  approximate the average fst in conditions far from the theoretical optimum, lositan starts by running fdist for  <dig>  realizations using the theoretical value, calculating the average simulated fst, if the value is too far from the real average fst, lositan uses a bisection approximation algorithm running  <dig>  realizations for every tentative bisection point. the algorithm works by iteratively slicing the interval of possible fst values  in half at each iteration and choosing the mean of the bounds on each iteration . an example is provided to make the approach clearer:

in a certain demographic scenario we want to simulate a neutral fst of  <dig> . the algorithm starts by trying  <dig> . if the result is higher than desired then  <dig>  will be tried , after that  <dig>  / <dig> will be tried, if the result is too low,  <dig>  will be used next /2), the process repeats until the error margin is acceptable.

in practical terms the method was able to converge to the desired value in all cases tested .

 <dig>  iterative smoothing of confidence interval contours.

contour smoothing is achieved by running fdist an extra  <dig>  realizations. the user can request smoothing an unlimited number of times until the result is deemed satisfactory.

 <dig>  ability to use multiple cpu cores and processors when running fdist.

to be able to use multiple cores, lositan divides the number of desired simulation repeats among all available cores , this is possible because fdist simulation runs are independent, thus making parallelization a simple task. tests show a near linear relationship between the number of cores used and performance gains, an existing 5â€“10% penalty is due mainly to joining the partial results together. lositan, although being directly executable from the web is a client-side application and all computational intensive operations occur on the user computer and not on the server.

 <dig>  automatic and transparent download of the latest version of fdist.

we maintain the latest version of the fdist application on the server, which is downloaded transparently by the client application whenever there is a new version. at the time of this writing the supported version is fdist <dig> 

the interface includes tips for all the less obvious parameters and enforces constraints for all the user inputs which the system can infer are not correct.

RESULTS
in a beta test release to users the feedback was generally very positive stressing essentially that the application is easy to use, allows to easily input and output data and deal with non-trivial parameter determination like calculating neutral fst. most importantly it made users aware of issues in data analysis that they were not aware of. for example, users were not aware of how to estimate the genome wide average neutral fst from their empirical data set by removing one or a few strong outlier loci, and the recomputing the average fst. although lositan helps avoid many pitfalls involved with using fst-outlier approaches in general, it is not able to solve fundamental issues regarding these approaches, for instance the non-linear behavior of fst=14nm+ <dig> when fst approaches zero can make it difficult to detect low fst-outliers especially when selection is not strong. as such an easy to use application should not be seen by users as a excuse to avoid critical reasoning around the the whole selection detection process. feedback from users also allows to chart possible future work, like supporting dominant markers or supporting other selection detection approaches like  <cit> .

our solution to use all the available computing power on new multi-core hardware is an example of an "embarrassingly simple parallel" computation approach. we contend that having a simple approach is a good principle: the point in this application is to make all computational power available to the users and not to develop new concurrent algorithms. a simple, highly efficient, elegant and less bug-prone approach is what responds to the users needs, as the objective of this work is not to develop new algorithms, but to use them.

CONCLUSIONS
lositan is built along the principles exposed in  <cit> , namely that intuitiveness and user empowerment should be fundamental guidelines for software construction targeting biologists. this is done, not only by supplying an easy to use web interface for an, otherwise, hard to use application, but also allowing the use of widely utilized population genetic data formats, automating the tuning of nuisance parameters and lowering the computational costs on modern hardware. in addition, strong emphasis is put on trying to avoid errors on the usage of the software either by both enforcing constraints and giving suggestions on less obvious features. this will lower the barriers to usage of the underlying application, allowing for a wider user base which will be able to concentrate more on the biological problems and less on unnecessary application complexity.

we are in the dawn of the era of multi-core computing. the vast majority of existing software cannot make use of the extra computational power made available on new machines. our approach, based on partitioning a computational intensive task into smaller ones, can be used to leverage the extra computational power even without changing existing code on applications which can be broken into smaller independent running units. this partitioning approach can be performed in some cases by users on existing software or by programmers in new applications that take advantage of multiple cores. with the current trend of supplying many more cores with new computers, strategies like the one presented here will be mandatory in order to take full advantage of all the existing processing power. lositan is one of the first of many applications to explore the multi-core programming paradigm.

future planned developments will include addition of other f-outlier methods and simulation facilities for explore the effects of different demographic scenarios on fst variance and the detection of outliers. all the code to handle genepop and fdist file formats and applications was also donated to the biopython project and is publicly available starting from version  <dig> .

availability and requirements
project name lositan

project home page . development site: 

operating systems platform independent

programming language java and jython

other requirements browser with javawebstart to run over the internet .

windows: at least windows  <dig> and java  <dig> .

mac os x:  <dig>   and java  <dig>  .

linux: java  <dig>  and the free gnu c compiler.

license gnu gpl

any restrictions to use by non-academics none

authors' contributions
ta is the leading architect and main developer of lositan, and drafted this publication. abâ€“p and gl have both theoretically drafted the idea of developing lositan and together with ta, rjl contributed in discussions, planning and writing of this manuscript. rjl developed the web page and tutorials and al developed the code regarding multi core detection and graphics and data export.

