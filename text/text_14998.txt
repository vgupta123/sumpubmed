BACKGROUND
most biological processes in the cell involve macromolecules interacting with one or several partners  <cit> . knowledge of the overall structures of these assemblies as well as the details of the interactions is essential for understanding the underlying biological mechanisms or for developing new therapeutic strategies. in spite of spectacular progress, the determination of the three-dimensional structure of large complexes at atomic resolution by means of x-ray crystallography or nuclear magnetic resonance spectroscopy remains a difficult task. even in the case of binary complexes , the number of available structures only represents a minor fraction of the complexes known to exist. given the deficit of structural information on these assemblies and the increasing number of available structures for isolated proteins, computational modeling tools provide a promising approach to predicting structures of protein complexes. docking methods are increasingly reliable and efficient for assembling macromolecular complexes when the partners do not present any large internal deformation. numerous studies have been dedicated to protein-protein interactions  <cit>  and the worldwide challenge "critical assessment of predicted interactions"   <cit>  demonstrates the interest of the scientific community in this domain. the main challenges that need to be addressed for constructing macromolecular machineries concern the size and the number of the partners, and also their flexibility. a number of partners greater than two already leads to combinatorial problems  <cit>  that are difficult to manage when searching the space in terms of relative rotations and translations. very large partners make the search computationally costly.

concerning flexibility, conformational adjustment induced upon association can lead to complete remodeling of the partner interfaces, thus making surface recognition inefficient when starting from the structure of the isolated partners. several methodological approaches are being explored to overcome this particularly difficult problem  <cit> , which must combine exploration of the macromolecule internal flexibility  and rapidity of the search. we have investigated two of these approaches, namely a normal mode approach that restricts the internal conformational search to privileged deformation directions  <cit>  and a multi-copy approach that pre-generates ensembles of possible conformers to represent flexible protein parts  <cit> . the conformers are then attributed a weight that varies during the docking process. in addition to these methodological developments, we have developed coarse-grain models and associated force fields, directed to both proteins  <cit>  and dna  <cit> , in order to allow the docking of large macromolecular systems. the level of graining is moderate, corresponding to four to five heavy atoms grouped together in each bead. this allows conservation of the main features of the surface geometry, which is essential for detection of surface complementarity. our exploratory efforts also bear on the development of scoring functions that adequately account for the strength of protein-protein or protein-dna association.

in order to develop methodological investigations as well as to optimize parameters, we needed a tool capable of performing and analyzing routine docking simulations, but that was also sufficiently flexible to allow easy testing and adding new functionalities in an efficient and rigorous fashion. for these reasons, we have developed the docking library ptools, which relies on a modular, object-oriented implementation based on python/c++ coupling. its multi-language object-oriented paradigm is shared with other libraries like mmtk  <cit>  or the new egad library  <cit>  indicating a convergence toward modular design.

ptools can handle coarse-grained as well as atomic macromolecular objects that can be compared or superposed for the purposes of analysis, or that can be docked using multiple energy minimizations in the coarse grained representation according to the attract protocol  <cit> . in this article, we present this library along with the principles that have guided its development. we expose the motivations for our choices in terms of programming and we provide several examples of its utilization for the docking problem. finally, we illustrate the potentialities of our library for facilitating further developments, like testing new force fields or investigating docking algorithms. we detail how new methods can be implemented and tested in a case of a multi-protein docking strategy that avoids the problem of combinatorial explosion of possible start structures. the ptools library can be downloaded at .

implementation
design goals
the ptools library has been designed in order to perform assembly tasks in an efficient way and to ease developments without sacrificing speed for correctness. we chose an object-oriented approach with a few free functions  <cit> . figure  <dig> describes the library architecture. we detail below the reasons why we chose a python/c++ solution.

speed
docking simulations require numerically intensive functions and speed was thus one of our concerns. we chose the c++ programming language to develop the core library since it allows the writing of both fast and flexible code. indeed, c++ is fast because it is a statically typed, compiled language. c++ is also flexible because of many advanced features such as virtual functions, templates, the standard template library, operator overloading, etc. naturally some of these features  come with some speed overhead,  <cit>  but they were not used in the time-critical routines of the library.

correctness
in the design of this library, large efforts were made to prevent errors or to catch them as soon as possible. with the use of standard c++ containers and smart pointers to hold dynamically allocated memory, we avoid most of the memory issues often encountered in software. preprocessor macros are heavily used to make consistency checks in most of the functions . for performance issues, these checks are disabled in release mode. in addition, core features are tested with unit tests. these tests guarantee that an expected behavior still works when adding new functionalities. finally, runtime errors are propagated through c++ exceptions, preventing the programmer from simply ignoring an error return code. furthermore, the library successfully passes valgrind's memory debugger  <cit>  which detects various types of bugs like memory leaks or use of undefined values.

ease of use
we also aimed for simple tasks to be easy to implement while complex ones should be as intuitive as possible. this principle has guided most of our design choices. for example, a single line of code is required to load a protein from a pdb file. only one line is also needed to move a protein along a given translation vector, or to make a rotation. however, we also allow advanced users to access low-level methods. for instance, all properties of a protein single atom can be altered.

ease of modification and extension
the object-oriented framework of the library simplifies modifications and extensions of the code. for example, all force fields are derived from a base abstract class requiring users to provide only two functions, one for energy calculation and the other one for its derivatives. to simplify the task of developing a new force field, derivative correctness can be automatically checked . a second-generation force field is under development and has already given promising results, especially for the difficult case of antigen-antibody complexes.

python bindings
while this c++ library has been designed to be usable by pure c++ programs, the simulation software consists of python scripts. this choice has been motivated by the fact that the python programming language is increasingly used in the bioinformatics community  <cit> . indeed, this language is reasonably easy to learn  <cit> , easy to read with block indentations and also very comprehensive, with numerous additional modules such as command-line option parsing, matrix handling, multithreading, interactivity with others programs, etc. finally, python, as an interpreted language, does not require compilation after each modification thus allowing rapid and flexible development of new features.

automatic generation of bindings
the python c application programming interface  is the most natural and flexible way for interfacing c/c++ code with python. however, this solution is time-consuming and error-prone since objects are manually interfaced from one language to the other. furthermore, frequent developments and improvements in the code considerably complexify the python bindings of the library. this justifies the requirement for both an efficient interface between c++ and python and an automatic wrapping of the code.

the boost python library can be seen as a c++ wrapper for the python c-api. by using sophisticated c++ mechanisms, it handles most of the housekeeping code like incrementing counters or translating c errors into python exceptions. with the help of boost.python, exposing a c++ class to python is then as easy as providing the class name and all of its method names. however, the interface files still need one line for the class name, and one line for each member we want to expose. keeping the interfacing code in sync with the library objects thus still requires significative investments.

to help in the creation of the interface file, we use a code generator called py++  <cit> . this python module, with the help of few other programs, reads a c++ header file and automatically generates the correct code for exposing free functions and classes described within this header. a single line of python code is required to wrap a c++ class with all its public methods.

toolbox
pdb i/o
loading a pdb file into a rigidbody object is extremely simple and requires a single line of code. in the following example in c++ the 1gc <dig> pdb file is loaded into the rigidbody object prot. then we select the chain a of the protein and write it into a new pdb file.

rigidbody prot;

atomselection sela = prot.selectchainid;

rigidbody chaina = sela.createrigid;

writepdb;

the equivalent python code is:

prot = rigidbody

sela = prot.selectchainid

chaina = sela.createrigid

writepdb

the similarities between both languages result in near-identical apis for the library, the main difference in the example above being that the type of a new variable is not declared in python. further examples will be only given in c++.

the rigidbody object contains a vector of atom objects and all atomic properties remain accessible and modifiable using low level methods. here, as an example, we extract the third atom of the protein  and modify its coordinates, its residue identifier and its name.

atom atom = prot.copyatom;

coord3d new_xyz = coord3d;

atom.setcoords;

atom.setresidid;

atom.setresidtype;

selection of atoms
the class atomselection implements a convenient method for selecting atoms from a protein or dna molecule. user can filter atoms on properties like atom types, residue name, residue number, backbone or side chain. selections can be combined using ensemble operators and, or and not which give full control over which atoms are included in an efficient and intuitive way.

as an example, the following code creates a selection containing non-cα atoms of residues 5– <dig> and 40– <dig> of the rigidbody prot.

atomselection sel <dig> = prot.selectresrange;

atomselection sel <dig> = prot.selectresrange;

atomselection sel <dig> = prot.ca

atomselection result =  & !sel3;

rigid-body transformation tracking
translations and rotations of molecules are internally stored into a  <dig> ×  <dig> homogeneous coordinate matrix. combined with a lazy evaluation of atom coordinates, this allows users to naturally express series of transformations without hurting performance. indeed, when a user asks for a sequence of rotations and translations, only its associated matrix is computed. cartesian coordinates are updated only on explicit request. an additional advantage of these matrices is the storage of docking results. indeed, a typical docking simulation generates thousands of geometries , and replacing final ligand coordinates by a matrix saves a lot of disk space. the following c++ code shows an example of a π/ <dig> rotation of rigidbody prot around axis , followed by a translation:

#define pi  <dig> 

coord3d pta;

coord3d ptb;

prot.abrotate;

coord3d tr;

prot.translate;

the above code runs in constant time with respect to the number of atoms because, due to the lazy evaluation, only a  <dig> ×  <dig> matrix has been modified.

superposition
a root mean square deviation  superposition algorithm  <cit>  has been introduced into the library. with the help of selection methods, users can superpose two molecules in various ways provided that the two selections have the same size. the result of a superposition is an object which contains the rmsd after superposition and a  <dig> ×  <dig> homogeneous matrix to be applied to the mobile element to obtain this calculated rmsd.

the following code shows a superposition of two rigidbody objects prot <dig> and prot <dig> which have the same number of atoms.

superpose_t sup = superpose;

double rmsd_best = sup.rmsd;

matrix mat = sup.matrix;

variable mat now contains the matrix that has to be applied to prot <dig> in order to minimize the rmsd between prot <dig> and prot <dig> 

helical parameters
the library also provides a function which translates a  <dig> ×  <dig> matrix into a screw motion  <cit>  , which allows the reconstruction of a helical filament given two units. helical parameters such as pitch and number of monomers per turn can also be extracted from a  <dig> ×  <dig> matrix. the  <dig> ×  <dig> matrix can be obtained from a superposition, or from the result of a docking process.

minimizer
in the ptools library, we interfaced the l-bfgs minimizer written in fortran by jorge nocedal  <cit> . l-bfgs is a limited-memory quasi-newton minimizer used to solve nonlinear optimization problems. to compute the minimum of a multi-variable function it requires the gradient  of the objective function and accelerates the convergence by storing a low-rank approximation instead of the entire hessian matrix.

force fields
the bfgs minimizer requires the number of free variables describing the degrees of freedom of the system and access to both a function to minimize and its partial derivatives. the forcefield abstract base class is responsible for providing this information to the minimizer through virtual functions. force fields can be implemented by deriving the forcefield class.

the ptools library contains by default the force field used by the docking program attract for protein-protein and protein-dna docking. this force field applies to reduced protein and dna representations. reduced proteins are described by up to three pseudo-atoms per residue  <cit> . for dna, each nucleotide is described by  <dig> to  <dig> beads, made of  <dig> to  <dig> heavy atoms  <cit> . this model assumes no internal energy evaluation since it has been developed for systematic rigid body docking. the effective interaction between two partners is the sum of a soft lennard-jones potential and an electrostatic potential. both reduced model are compatible and show good performances in protein-dna docking  <cit> .

with the help of the ptools library, a new protein force field is currently under development with modifications in the protein backbone representation that allow a more realistic description of its polar character. preliminary results look very promising especially for the ranking issue. we are also evaluating a modified lennard-jones scoring function with pairwise interaction terms .

automatic derivative calculation
minimizers, such as quasi-newton or conjugated gradient methods, require both a function to minimize and its derivatives. usually energy functions used in molecular modeling are not trivial and errors may occur either during the determination of the derivative formula or during its implementation into the source code. in addition some minimizers may complain about inconsistent derivatives, while others may also return bad results. a possible approach to detect incorrect derivatives is to calculate numerical derivatives of a function f using the finite difference method. here is the one dimensional formula:

  

however, the above formula is subject to roundoff errors which can affect even the first digits of the result. to prevent this well-known problem of roundoff errors  <cit> , we integrated a c++ automatic differentiation tool provided by pr. martins and peter sturdza  <cit> . this tool uses the c++ ability to manipulate user-defined classes instead of built-in types with arithmetic operations. the new type, called dbl, has two double precision components: the first one is the value of the variable while the second is its derivative. any arithmetic operation involving at least one dbl returns a dbl with both components accordingly set.

as an example, we may consider the following function, inspired by sturdza et al.  <cit> :

  

the corresponding c++ function is:

dbl f {

return +y)/sqrt,3)

   +pow,3));

}

here is how to calculate both the function and its derivative at x <dig> =  <dig> , y <dig> =  <dig> :

dbl x0;

dbl y <dig> =  <dig> ;

dbl result = f;

the first line sets the regular value of x <dig> to  <dig>  and its derivative part to  <dig>  meaning that f must be differenciated with respect to x <dig>  here y <dig> has a regular value of  <dig>  and a null derivative part. the last line simply calls the function, and the result variable stores two values: the expected result and the derivative part of f with respect to x. a further call to f with dbl x <dig> =  <dig> ; dbl y0; will return the derivative of f with respect to y.

because this feature is only activated by a compilation flag in debug mode, it does not reduce speed or increase executable size in release mode.

documentation
extensive documentation is provided, with a tutorial describing every step from the compilation of the library source code to full protein-protein and protein-dna docking simulations with attract. the c++ api is also automatically parsed by doxygen  <cit>  which generates a browsable documentation with an exhaustive description of every class and member function within the library. these reference pages may also be very useful for the users of the python-side of the library since function names are conserved in the c++/python binding.

methods and included docking tools
the python tools presented in this section articulate the ptools c++ library functions for docking applications.

attract
the attract docking program is implemented as a python script using the ptools library. this script is also provided with the ptools package. the docking protocol of attract has already been described in previous publications  <cit> . briefly, attract performs systematic docking without using any experimental data concerning the native complex. this algorithm relies on minimization of the interaction energy, the ligand  being placed at regular positions/orientations around the receptor surface  at a distance slightly larger than its biggest dimension. for each starting position, about  <dig> initial ligand orientations are generated. for each starting geometry, energy minimization  is performed using transitional and rotational degrees of freedom of the ligand. for instance, we carried out a rigid body docking simulation of bovine alpha-chymotrypsinogen a complexed with the pancreatic secretory trypsin inhibitor  using nearly  <dig> different starting configurations of the bound form. the top-ranking solution is very close to the x-ray structure  and the simulation was achieved in  <dig> hours using a single core of an intel xeon quad core running at  <dig>  ghz.

different python scripts are provided with the attract program to set up the input files needed by the attract docking script. first, the coarse-grained representation of the macromolecule is automatically generated by the reduce.py script. second, translate.py defines ligand starting positions at a given distance from the receptor surface. it employs a slightly modified shrake and rupley method  <cit>  and the density of the starting points around the receptor can be defined by the user. finally, the attract input file contains all the specifications required to process the docking simulation . several minimizations  are necessary because the pairlist to calculate the interactions is only generated at the beginning of each minimization.

analysis scripts
to process and analyze the docking simulation outputs, a set of python scripts based on ptools are also provided. these scripts are well adapted to the attract output format but may be used independently as well.

our clustering algorithm, implemented in cluster.py, can rapidly group nearly identical structures without requiring a preselected number of desired clusters.

if the structure of the bound complex is known, some additional functions may be used to evaluate the quality of the predicted interfaces. in addition to the rmsd, interface rmsd  and the fraction of contacts in native structure  are of great help in assessing docking results  <cit> .

parallel computing
practically, a docking simulation consists of several independent energy minimizations. a single simulation can thus be split into smaller ones and run across a computer cluster. we used the condor workload management system  <cit>  to distribute our docking simulations on a  <dig> nodes cluster, with one job per starting point. the observed scaling is excellent. a docking simulation taking  <dig> minutes on a single core can be achieved in  <dig> minutes when running on  <dig> identical nodes and  <dig> minutes for  <dig> identical cores. this corresponds to a speed-up factor of  <dig>  for  <dig> cores and  <dig>  for  <dig> cores. it is interesting to note that the  <dig> core simulation was exactly  <dig> times faster than the  <dig> core simulation.

RESULTS
as mentioned previously, one of the benefits of the library design is to allow rapid extensions of the docking tool. here, we show how the library can be used to investigate methods for managing an arbitrary number of molecules, or in other words, to perform multiligand docking. since the attract force field is able to deal with both protein-protein and protein-dna complexes, this will open the way toward the assembly of various systems.

when the number of partners is greater than two, the systematic docking approach of attract cannot be used because of a combinatorial explosion  <cit>  in the definition of starting points for minimization. using ptools functionalities, we devised a strategy to overcome this limitation. the main idea is to limit the number of starting points for the 3-body docking simulations by combining high ranked solutions from the 2-body docking simulations.

more precisely, we investigate the 3-body problem with the following approach, described here for a test-case system formed by the globular head of the complement system protein c1q   <cit> . we assume that one of the partners is known to interact with the two others, which is generally the case for 3-body systems that need to be assembled. in the following, the  <dig> partners are labeled units a, b and c, and unit a is taken as the reference for two systematic pairwise docking simulations with the other two units .

after a proper initialization step , one can perform the two 2-body docking simulations with attract.

$ attract.py unita.red unitb.red > ab.out

$ attract.py unita.red unitc.red > ac.out

in the above example, the .red filename suffix is used to easily distinguish reduced coordinates files from regular pdb files. more details about attract command line options are available in the tutorial provided with the ptools library.

from the clustered results of each 2-body docking simulation, we extract the  <dig> best candidates.

$ cluster.py ab.out unitb.red | head - <dig> > bestb.out

$ cluster.py ac.out unitc.red | head - <dig> > bestc.out

each of the  <dig> ×  <dig> possible combinations of dimer structures is used as docking start structure to generate complexes with the three partners. the command for extracting the ab docking prediction ranked 26th  and the ac docking prediction ranked 5th  are as follows:

$ extract.py attractab.out unitb.red  <dig>  <dig> > b_128_ <dig> red

$ extract.py attractac.out unitc.red  <dig>  <dig> > c_73_ <dig> red

at this point, structures with too many clashes are discarded and we optimize the remaining structures by a series of energy minimization steps where the reference unit  is kept fixed but the other two partners  are allowed to move freely in translation and rotation.

#### python script: minimize3body.py #####

from ptools import *

a = attractrigidbody

b = attractrigidbody

c = attractrigidbody

a.setrotation # don't allow rotations and

a.settranslation # translations for unit a

#loads a forcefield with a cutoff of 12a

forcefield = attractforcefield1

#populates the simulation box

forcefield.addligand

forcefield.addligand

forcefield.addligand

#creates a minimizer instance:

lbfgs = lbfgs

lbfgs.minimize # minimizes for at most  <dig> steps

an arbitrary number of molecules can be added to the simulation with the addligand method.

we tried to keep the use of the different classes as natural as possible from the programmer's perspective. after minimization, the lbfgs object contains the energy of the minimized system as well as the effective values of the free variable set. the minimizer also stores the different states of the system for each minimization step. this permits the generation of movies with visualization software like pymol or vmd to inspect a simulation . in spirit this strategy for multiligand docking is similar to the approach introduced by inbar et al.  <cit> . however, in their approach high ranking dimers are combined rigidly into trimeric complexes without the possibility to readjust the already formed pairwise  complexes. in our test, the 3-body readjustment docking step with two mobile partners  resulted in a very significant improvement of the deviation of the structure with respect to the native complex. for example, the rmsd of b compared to its reference position decreases from  <dig>  Å to  <dig>  Å in the best ranking case .

once the strategy has been sufficiently tested and optimized, the instructions for the multiligand docking can be easily gathered into a new script. this time, the script files cluster.py and extract.py will be used as regular python modules rather than standalone programs.

discussion
other tools
ptools is not the only available tool for molecular modeling, not even for molecular docking. before discussing the multiple advantages of ptools, we will describe other available tools.

mmtk is an open source molecular modeling library written by konrad hinsen  <cit> . this library is written in python, with some computationally intensive routines written in c. mmtk comes with functions and classes for molecular modeling and molecular dynamics, using the amber force field. a protein-protein docking program, pydock  <cit>  has been built on top of this library.

the egad library  <cit>  is a c++ object-oriented library dedicated to protein modeling. it provides many tools from basic molecular manipulations to side chain refinements with the opls-aa forcefield. by design and philosophy, ptools is comparable to egad. yet they still differ on certain points. egad is focused on protein design rather than molecular docking and it uses all-atom representations. we found out that each project may benefit from the other, which could be the subject of future work.

haddock  <cit>  is a suite of programs dedicated to docking. it is built on top of cns, a molecular modeling library designed for crystallography and nmr applications. this library defines its own scripting language.

biskit  <cit>  is a molecular modeling library written in python for various purposes. high-level applications like docking, homology modeling and molecular dynamics are performed using external programs and other software can be easily added.

some molecular modeling programs which are not designed for docking purposes can also be cited. modeller  <cit>  is a closed-source suite of tools for homology modeling with a python interface. while this program is not intended for protein-protein docking it can be useful to generate starting structures for docking.

mgltools is a python library for visualization preparation and analysis of molecular structures. it is coupled to autodock for preparing inputs and analyzing outputs.

ptools advantages
the goal of ptools is to provide a scaffold for development and implementation of new molecular modeling methods. in this purpose, the most interesting points of this library are:

• generality: the ptools library can handle both all-atom and coarse grained representations. tools are provided for translating from all-atom to reduced models and for retrieving all-atom coordinates from docking simulations.

• flexibility: ptools has been designed as a library and therefore eases the development of new applications, in contrast to monolithic programs.

• language choice: the programmer can either use the ptools library as a pure c++ library or as a python module. we also provide a very efficient way to generate new python bindings. most c++ classes can be interfaced using a single, simple line of code, without any knowledge of the python c-api.

• easy to extend: our automatic check of first derivatives is much more precise than the finite difference method and can therefore help for the design of new forcefields.

• freely available: this library is open-source and can be freely studied, modified and distributed provided that modifications remain open-source. we also do not rely on any proprietary external dependency.

• well documented: a tutorial describing installation and use of docking tools is distributed along with the library. automatic parsing of the source code provides a valuable and always up-to-date documentation for developers.

• cross-platform: this library has been successfully compiled and tested on various linux distributions and mac osx platform. it should compile on windows as well with very few modifications, probably limited to the compilation environment. feedback from windows users is welcome and we will update our documentation and compilations tools in order to take their experience into account.

CONCLUSIONS
we present in this article a new library for molecular modeling and docking that provides the modeling community a user-friendly way to manipulate both coarse-grained and atomic representations of macromolecules. its object-oriented design allows rapid development of new features. the library can be used as a pure c++ library or as a python module. binding ptools with python brings to the developer a higher level set of functions and modules that help improving overall code quality, as well as favoring easy testing and implementation of new docking strategies. we have illustrated this potentiality with the investigation of a new methodological strategy aiming at docking an arbitrary number of proteins. tests and applications of the multi-protein docking approach to bound and unbound systems will be subject of future work. future improvements of the ptools library will include the possibility to account for conformational flexibility of the association partners during docking, using methods that are presently being explored using the attract program  <cit> .

availability and requirements
• project name: ptools  and attract 

• project home page: 

• operating system: linux, macosx

• programming language: c++/python

• other requirements: standard programs and libraries such as scons, gccxml, pygccxml, py++, the boost libraries 

• license: gnu gpl version 3

• restrictions on use: only those of the gpl v <dig> 

authors' contributions
as designed, wrote and tested the c++ library, made the python bindings, ported the original attract code to c++ and python, and performed the 3-body docking experiments. pp and sf wrote code for the c++ library and python scripts and tested the library. pp wrote the library tutorial. mz wrote the original attract code. cp and mz supervised the multiligand experiments. all authors participated in the writing of the manuscript.

