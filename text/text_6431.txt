BACKGROUND
with the development of advanced biotechnology, more and more biological sequence information has been generated. the amount of genetic data is growing faster than the rate at which it can be analyzed. clustering techniques provide a viable solution for handling and analyzing such rapidly growing genetic data. clustering algorithms partition sequences into different biologically meaningful groups, facilitating therefore the prediction of functions of genes  <cit> . when a new gene is assigned to a cluster, the biological function of this cluster can be attributed to this gene with high confidence. on the other hand, clustering gene sequences into groups may also help with analyzing evolutionary relationships among the sequences in a cluster  <cit> .

clustering of gene sequences requires calculation of similarity between sequences. there are two clustering approaches according to the similarity measure used in a clustering method. one is based on sequence alignment. the similarity between two gene sequences is measured by the scores obtained from an alignment algorithm such as blast  <cit>  or fasta  <cit> . although sequence alignment gives good solutions, it is relatively difficult to cluster a large number of sequences because of its computational complexity. moreover, if the sequences in the set vary in length, a satisfactory alignment is hard to achieve, resulting in a low accuracy of clustering.

the other approach for similarity measure is to use alignment-free methods  <cit> . in recent years, several alignment-free measures have been proposed. the word-based measure is one of the most widely used methods  <cit> . this method chooses a short word length k, maps each sequence onto an n-dimensional vector according to its k-length tuple  properties, and then assesses the similarity of any two vectors by measures such as euclidean distance  <cit> , mahalanobis distance  <cit> , kullback–leibler discrepancy  <cit> , cosine distance  <cit>  or pearson’s correlation coefficient  <cit> . in recent years, several novel alignment-free measures  <cit>  have been designed for dna sequences analysis. yang et al.  <cit>  extended the k-tuple distance, which is based on the difference in tuple frequencies, to clustering gene sequences. their tuple-based method determines the similarity of sequences by considering only tuple frequencies and ignoring the positional information within a sequence.

major algorithms used in gene sequence clustering can be divided into two categories according to the result format: hierarchical clustering algorithms and partitional clustering algorithms  <cit> . hierarchical clustering is widely used for detecting clusters in genomic data. it generates a set of partitions forming a cluster hierarchy. according to linkage criteria, there are three hierarchical clustering methods including single-linkage clustering , complete-linkage clustering  and average-linkage clustering   <cit> . with sl, clusters may be merged together due to single sequences being close to each other, even though many of the sequences in each cluster may be very distant to each other  <cit> . cl tends to find compact clusters of approximately equal diameters  <cit> . with cl, all objects in a cluster are similar to each other. al can be seen as an intermediate between single and complete linkage clustering, resulting in more homogeneous clusters than those obtained by the single-linkage method  <cit> . for instance, blastclust  <cit>  and generage  <cit>  employ single linkage clustering approach; swords  <cit>  is based on word frequencies as profiles to merge clusters hierarchically; and uchiyama  <cit>  use average linkage clustering algorithm to classify genes. hierarchical approaches may yield fairly good results, but they require the similarity of all pairs of sequences and quickly arrive at a bottleneck in terms of computational time and memory usage for large-scale data sets  <cit> .

partitioning algorithms have also been used. partitional clustering obtains a partition of data objects by optimizing some clustering criterion. partitional clustering algorithms are simple and well-suited for clustering large datasets  <cit> . k-means   <cit>  is a commonly used method of partitional clustering methods. km has a lower order of computational complexity and demands less physical memory than the hierarchical method. it is suitable for clustering large gene data. some km-based algorithms, such as those introduced by wan et al.  <cit> , kelarev et al.  <cit> , tseng et al.  <cit>  and ashlock et al.  <cit> , have been developed to group dna sequences. the major drawback of km compared to hierarchical clustering algorithms is the lack of hierarchical relationships in its results. to remedy the problem, bisecting k-means , a hierarchical variation of km, was proposed to build a tree of clusters in a top-down fashion by splitting the least homogeneous cluster into two more homogeneous ones. bkm can produce either a flat clustering or a hierarchical clustering by recursively applying km. it has a linear complexity and is relatively efficient and scalable. recent study  <cit>  concluded that bkm outperforms km and performs equally well or better than hierarchical methods when it partitions the dataset based on a homogeneity criteria. the bisecting approach is very attractive for genomic studies  <cit> .

hierarchical clustering produces a nested series of partitions, where the results are usually depicted as a dendrogram while partitional clustering produces a flat partition. blastclust  <cit>  is a hierarchical clustering method based on blast scores as the measure of sequence similarity. blastclust computes pairwise similarity of all sequences by blast alignment and then clusters sequences by the single linkage clustering method which produces clusters of linear topology. the performance of blastclust is limited by the size of the input data. cd-hit-est  <cit> , a partitional approach, is also widely used to cluster dna sequences. cd-hit-est uses an incremental clustering process and avoids the unnecessary alignments by a short word filtering mechanism, which detects similar sequences by counting the number of identical short words between them. the purpose of filters is to decide whether the identity between two sequences is above or below a threshold without aligning them, therefore speeding up the clustering process. though cd-hit-est is based on alignment, it can avoid too many pairwise alignments by using a filter, thus it is faster than blastclust, and can handle larger datasets.

recent studies reveal also that blastclust is less effective for clustering divergent sequences  <cit> , and its performance strongly depends on the choice of optimal blast parameters including similarity threshold, percent identity, and alignment length  <cit> . cd-hit-est, on the other hand, does not provide hierarchical relationships between clusters of sequences. in many situations both cd-hit-est and blastclust yield clusters with only one sequence  <cit> . all the traditional clustering methods based on sequence alignment encounter computational difficulties in dealing with large biological databases.

the approach presented in this paper involves a new alignment-free distance measure based on k-tuples, dmk   <cit> , and a modified bisecting k-means clustering algorithm, mbkm . mbkm aims to speed up the clustering process by using the alignment-free similarity measure, and is able to produce either a hierarchical clustering or a partition clustering result. we have applied mbkm with dmk in clustering gene sequences and performing phylogenetic analysis. dmk shows better performance than the k-tuple distance in our experiments, and mbkm outperforms sl, cl, al, bkm and km when tested on public gene sequence datasets. furthermore, the proposed method also outperforms alignment-based methods such as blastclust and cd-hit-est.

methods
a gene is a stretch of dna that codes for a single polypeptide chain  <cit> . a gene sequence is a succession of four symbols {a, c, g, t}. because the similarity between the genes of two species indicates their evolutionary relationship, it is used in many clustering algorithms. the goal of sequence clustering is to partition biological sequences into meaningful/functional groups according to the similarity information, which is calculated using either an alignment-based method or an alignment-free method.

the traditional approach for clustering dna sequences requires all-by-all comparisons from alignment  <cit> . given two sequences: s1 = agcacaca and s2 = acacagta, s1p and s2p are used to represent the pth characters in s <dig> and s <dig>  respectively. the alignment score  <cit>  for  is given by

  simscore=∑p=1le 

where e is the cost of an alignment operation: deletion, substitution, or insertion. however this distance measure relies on sequence alignment. since sequence alignment suffers in computational aspect with regard to large biological databases, clustering methods relying on sequence alignment have difficulties in dealing with the large gene data. an alignment-free similarity measure helps avoid the computational complexity of multiple sequence alignment for similarity computation. in this paper we propose a new alignment-free similarity measure, dmk, based on which we developed mbkm to cluster gene sequences.

in the follows, we will present dmk first, and then describe mbkm algorithms.

a new similarity measure: dmk
in this section, we introduce a new similarity measure which takes into account the occurrence, location and order relation of k-tuple in a dna sequence.

sequences are numerically transformed to feature vectors that can be processed by data mining algorithms. let Σ be the alphabet set of nucleotides . a sequence of length s, s, is defined as a linear succession of s symbols from Σ. a segment of k consecutive symbols in sequence s  is designated as a k-tuple. there is a set of 4k possible k-tuples, wk. the number of occurrences of a k-tuple w, nw, is counted by moving a sliding window of length k over the sequence with k - 1 bp overlapping step size.

to explore the correlation properties of dna, nair et al.  <cit>  provided a presentation of genomic data using the inter-nucleotide distance sequence. based on a similar idea, we utilize the gaps between the locations where k-tuple occur in the sequence to explore the sequence structure. for a dna sequence spr is the location of the rth occurrence of k-tuple w, where p0 =  <dig>  and αr is given as,

  αr=1pr−pr− <dig> ≤r≤m 

in which m stands for the number of occurrences of w. αr reflects the density of w and is closely related to the location where w occurs in the sequence. each w begins at the 1/α <dig> position, and {α <dig> α <dig> …,αm} for repetition of w forms an array whose rth element indicates the relative position of two neighboring w in the sequence. this array allows us to find all subsequent repeats of w.

to characterize the order of αr, we define βj as a partial sum of {αr}. βj is calculated by the following formula:

  βj=∑r=1jαr,1≤j≤m 

{αr} is a list of non-negative real numbers, and βj is totally ordered by ≤, so β <dig>  β <dig>  …, βm is also an ordered set. {α <dig>  α <dig> …, αm} and {β <dig>  β <dig> …, βm} determine each other uniquely. βj is only dependent of the number and positions of w and independent on other k-tuples. given the set of {β <dig>  β <dig> …, βm}, one can obtain where w occurs and how many times w occurs in the sequence.

shannon’s entropy <cit> , which illuminates the total information measure of source on the average, is a measure of order/disorder. according to  <cit> , when using the totally ordered set {β1β <dig> …, βm} to calculate the probabilities, the shannon entropy reflects the degree of importance of position in a sequence. we construct a discrete probability distribution q=, where qi=βi/∑i=1mβi, and ∑i=1mqi= <dig>  the shannon entropy of the discrete probability distribution is calculated by

  h=−∑i=1mqilog2qi 

for each k-tuple w in the sequence, not only the information of tuple numbers but also the information of tuple positions is involved in the definition of h. we take h as the feature of w in the sequence, and then construct a vector consisted of h of all possible k-tuples in the given sequence.

for a fixed k, there are 4k distinct k-tuples to be considered. these k-tuples in a fixed 4k-dimension feature vector are denoted by , where hi means the feature representation of the ith k-tuple. this feature vector based on h can be regarded as an index for its corresponding sequence.

cluster analysis algorithms partition objects into groups based on the distances between objects. euclidean distance is the square root of the summation of the squares of the differences between all pairs of corresponding objects. the k-tuple distance is the sum of the differences in frequency over all possible k-tuples; on the other hand, we use euclidean distance between shannon entropy of k-tuples in sequences to measure the similarity. this distance measure method is referred as dmk. for any two sequences x and y, dmk can be calculated as:

  ddmk=∑i=14k <dig> 

where hwix and hwiy represent the shannon entropy values of the ithk-tuple in sequences x and y, respectively. dmk can be calculated from following algorithm:

algorithm name: dmk for similarity measure

input: sequences {s <dig>  s <dig> …, sn}.

output: similarity matrix, )n*n.

steps:

 <dig>  for each sequence, search and locate each k-tuple;

 <dig>  for each k-tuple, use equation  to calculate αr

 <dig>  for each k-tuple, use equation  to calculate βj;

 <dig>  for each k-tuple, use equation  to calculate h;

 <dig>  for each sequence, construct 4k -component vector by h of all k-tuples.

 <dig>  for any two sequences, use equation  to calculate the distance between the two sequences.

 <dig>  return {d}.

a new clustering algorithm: mbkm
km can be used to obtain a hierarchical clustering solution using a repeated bisecting approach  <cit> . bkm is such an algorithm and it can produce either a partitional or a hierarchical clustering.

bkm has a linear time complexity in each bisecting step. recent study  <cit>  concludes bkm outperforms km as well as the agglomerative approach in terms of accuracy and efficiency. consequently, the bisecting approach is very attractive in many applications for clustering and genomic data analysis.

bkm initially regards the whole data set as a cluster, and splits one cluster into two subclusters at each bisecting step using km until singleton clusters are obtained at the leafs or until k clusters are obtained. the outcome is structured as a binary tree. there are two key steps in a typical bkm. the first one is the selection of initial centroids. generally the initial centroids are chosen randomly in bkm. the second key step is the rule, ζ, for selection of a existing cluster to be split in each bisecting step. ζ is typically given by the following three approaches  <cit> :

1) choosing the cluster with largest size;

2) selecting the cluster with the overall similarity

  1c2∑s∈cs'∈cd 

the overall similarity is either minimized or maximize, depending on the definition of d. c is a cluster;

3) using a criterion based on both size and overall similarity.

because the differences between these methods are small in terms of the final clustering result, the way of splitting the largest remaining cluster is recommended  <cit> .

there are two problems in bkm algorithm:

 <dig>  randomly choosing the initial centroids in bkm may result in too adjacent elements selected. if the initial centroids are too close, the algorithm will reach a local optimization. moreover, different sets of initial cluster centroids can lead to different final clustering results.

 <dig>  the algorithm for choosing one existing cluster to split in each bisecting step usually selects the cluster with the largest size. although this leads to reasonably good and balanced clustering solution, it cannot gracefully work for datasets where the natural clusters are of different sizes, as it will tend to partition larger clusters first. in real biological data, the number of elements in every cluster may not always be similar.

to address the above two problems and obtain more natural hierarchical solutions, we develop a modified bisecting k-means, mbkm, which choose the initial centroids by the maximum and minimum principle and select the cluster to split based on the compactness of clusters.

1) selecting initial cluster centroids

in order to achieve stable and reliable clustering results, we use the maximum distance, which can avoid obtaining adjacent elements, to select the initial centroids. for a set of sequences, {s <dig>  s <dig>  …, sn}, let d be the distance between any two sequences in the dataset. we choose the sequence sc <dig> and sc <dig> as the cluster centroid according the following rule:

  dc <dig> c2=maxi,j= <dig> ,…,nd 

2) selecting the cluster to split

bkm algorithm usually partitions the largest size cluster into two smaller ones and yields clusters with similar size. however, a cluster with large number is not always the loose one. if one existing cluster is a loose one, in which its members are not closely related to each other, the cluster will be selected to be split.

variance is a measure of how far a set of numbers are spread out from each other, and it can measure the compactness of the clusters. so we select the cluster to split on the basis of the compactness of clusters measured by variance. the variance of cluster cj is defined as following:

  σj=∑si∈cjd2nj,1≤i,j≤n 

where μj is the centroid of sequences in cj, d  is the distance between si and μj, and nj is the number of sequences in the cluster.

a small variance of a cluster indicates that the members in the cluster tend to be closely related to the mean. in other words, the smaller the variance is, the more compact the cluster is, and vice versa.

based on the above idea, we outline mbkm algorithm as follows.

algorithm name: mbkm for clustering sequences

input: sequences {s <dig>  s <dig>  …, sn}, a distance function d between sequences, the number of clusters k.

output: set of k clusters.

steps:

 <dig>  initialization: regard the whole dataset {s <dig>  s <dig>  …, sn} as a single cluster.

 <dig>  pick a cluster to split.

 <dig>  find two sub-clusters:

 <dig>  select two initial centroids using equation ;

 <dig>  assign the sequences to the closest centroid;

 <dig>  recalculate two centroids based on the sequences assigned to the cluster;

 <dig>  repeat steps  <dig>  and  <dig>  until no change in cluster centroid calculation.

 <dig>  calculate the variance of each cluster according equation  and take the split that produces the clustering result with the highest variance.

 <dig>  repeat steps  <dig>   <dig> and  <dig> until the desired number k is reached.

this algorithm outputs a binary tree of sequences, where each leaf represents a sequences and each node represents a sequence collection.

RESULTS
the proposed method is evaluated by clustering functionally related gene sequences and by phylogenetic analysis. we present our evaluation results in two parts. the first one aims at testing the efficiency of our similarity measure, dmk. the second one is to illustrate the efficiency of the proposed clustering method, mbkm.

to measure the quality of the clustering results, our experiments adopt f-measure  <cit>  to evaluate the clustering performance. for cluster j and class if  is defined as:

  f=2*precision*recallprecision+recall 

where i = <dig>   <dig>  …, ej =  <dig>   <dig>  …, fprecision = nij/njrecall = nij/nie is the number of classes, and f is the number of clusters. nij is the number of the sequences of class i in cluster jni is the number of the sequences of class i, and nj is the number of the sequences of cluster j.

the f-measure of the whole clustering result is defined as:

  f=∑ininmax) 

where n is the total number of sequences in the data set. clearly, an f-measure has a value between  <dig> and  <dig>  the larger the f-measure is, the better the clustering result is.

evaluation of similarity measure
to evaluate the proposed similarity measure, we test dmk on gene sequence data sets and compare it with the k-tuple distance. we also verify the effectiveness of dmk by assessing how well it performs on phylogenetic analysis.

gene sequences clustering
genes of the same family usually share similar sequences, functional domains, and even interacting partners. when a new gene is assigned to a cluster, the biological function of this cluster can be attributed to this gene with high confidence.

four data sets are extracted from different gene repositories as shown in table  <dig>  the sequences of ds <dig> are downloaded from ncbi . the other three datasets, ds <dig>  ds <dig> and ds <dig>  are taken from pbil . ds <dig> is taken from hovergen of pbil, a database of homologous vertebrate genes. ds <dig> is taken from hogenom, which contains homologous gene families from microbial organisms. ds <dig> is randomly selected from homolens, a database of homologous genes from ensembl organisms and ensembl families.

four widely used clustering algorithms, including km, single-linkage clustering , complete-linkage clustering  and average-linkage clustering , have been chosen in the experiments. for comparison, we perform the clustering tests on all data sets using the k-tuple distance and dmk distance. in this paper, we set k value to  <dig>  for protein coding genes, a tuple size of  <dig> is a good choice according to reference  <cit> . we also tested the clustering performance on different k values, and the result confirms that a small k value is preferred, see additional file 1: table s <dig>  for larger k values, there are more tuples with zero frequencies and less information is captured by the algorithm.

km algorithm would yield different results during multiple executions due to its stochastic feature for initialization. we examine km in ten runs and report the average performance. the al, cl and sl hierarchical algorithms generate one solution for each of them. we obtain the result of hierarchical clustering algorithms by analyzing the hierarchical tree using the expected number of cluster as input parameters.

according to table  <dig>  the f-measure values for each of the data sets using dmk are clearly higher than those obtained with the k-tuple distance. in our experiments, on average, the value of the f-measure given by dmk is 18% better than by the k-tuple distance  in km,  <dig> % better in sl ,  <dig> % better in cl , and  <dig> % better in al . clearly, dmk provides a significant improvement in clustering sequences. on the four data sets, the f-measure of dmk is improved more than 20% compared with that of the k-tuple distance during the same clustering process in most cases. dmk outperforms the k-tuple distance in the experiments. this is because dmk considers the occurrence, location and order relation of tuples in sequence and can capture more information in the sequence, while the k-tuple distance considers frequency alone and ignore the position of tuples in a sequence. in addition, we have tested dmk and k-tuple measures on protein sequences with a k value of  <dig>  and the results indicate that dmk performs better than k-tuple distance . thus in practical dmk measure can also be applied in clustering protein sequences after tuning current algorithm.

phylogenetic analysis
in this experiment, the proposed similarity measure dmk is further tested by phylogenetic analysis. in order to evaluate the similarity measures, we use upgma in the phylip package, a widely used clustering algorithm in phylogenetic analysis. the tree is drawn by treeview program  <cit> .

the selected data set includes the full β-globin gene sequences of  <dig> species reported by feng et al.  <cit> , which are downloaded from ncbi . their names, accession numbers, locations and lengths are listed in the additional file 1: table s <dig>  the similarity/dissimilarity matrices for the full sequences of β-globin gene of the  <dig> species using dmk are shown in table  <dig>  respectively. the smaller the distance is, the more similar the two sequences are.

in table  <dig>  the most similar species pairs are human-gorilla, human-chimpanzee and gorilla-chimpanzee, which are expected from their evolutionary relationship. a slightly less similar species pair is goat-bovine. on the other hand, gallus is separated from the rest, this coincides with the fact that gallus is the only nonmammalian species among these  <dig> species. we can also find that opossum is far away from the remaining mammals. these results are consistent with biological morphology.

the quality of the constructed tree shows the quality of the distance matrix and the method of abstracting information from dna sequences. in figure 1v, we show the phylogenetic tree of  <dig> β-globin gene sequences based on dmk, generated by upgma. for comparison, the phylogenetic tree of the k-tuple distance is shown in figure  <dig> 

the tree in figure  <dig>  has some consistencies with biological morphology. although it supports the separation of gallus relative to other species, its obvious drawback is that it fails to separate  and  from opossum. from figure  <dig> , gallus is separated from the rest and opossum is far away from the other species. this topology is in good agreement with that presented by feng et al.  <cit>  and cao et al.  <cit>  except for the relative position of rodents.

dmk measures the similarity between dna sequences more effective than the k-tuple distance. this is because dmk measures the distance between dna sequences based on sequence structure and composition. through evaluation on gene families and constructing phylogenetic trees of full gene sequences of  <dig> species, we find that dmk gives more competitive results compared to the k-tuple distance.

evaluation of clustering methods
to evaluate the effectiveness of the proposed clustering algorithm, mbkm, we apply mbkm in clustering gene sequences and compare it with several clustering algorithms. moreover, we use our method, mbkm with similarity measure dmk, in phylogenetic analysis to show how well the genes are grouped together and how well the resulting trees agree with existing phylogenies.

performance comparison of clustering methods
in order to illustrate the efficiency of mbkm in gene sequence clustering, we ran mbkm with the k-tuple distance and dmk on real data sets listed in table  <dig>  the clustering results are compared with those of km, sl, cl, al and bkm algorithms. for bkm, the number of iterations for each bisecting step is set to  <dig>  we ran bkm  <dig> times to obtain the average f-measure. by combing the six clustering algorithms with two similarity measures, we have  <dig> combinations of clustering algorithm for performance assessment. the combinations are km with k-tuple, sl with k-tuple, cl with k-tuple, al with k-tuple, bkm with k-tuple, mbkm with k-tuple, km with dmk, sl with dmk, cl with dmk, al with dmk, bkm with dmk and mbkm with dmk.

the clustering performance of different clustering methods is the result of a combination of factors, including the types of sequence distances used for clustering and the choice of clustering algorithms. table  <dig> shows the clustering performance on the data sets for all  <dig> clustering methods. for each data set, we set the number of cluster as the real number of class during the clustering run. for example, the real number of cluster is  <dig> in ds <dig> and  <dig> in ds <dig> 

from table  <dig>  we observe that mbkm using dmk achieves best result and clearly outperforms other methods for the four data sets. the average f-measure of mbkm with k-tuple is about  <dig> % higher than km with k-tuple , 45% higher than sl with k-tuple ,  <dig> % higher than cl with k-tuple , 19% higher than al with k-tuple  and  <dig> % higher than bkm . for mbkm with dmk, f-measures for ds <dig>  ds <dig>  ds <dig>  and ds <dig> are  <dig> ,  <dig> ,  <dig> , and  <dig>  respectively. on average, the value of f-measure given by mbkm is  <dig> % better than km ,  <dig> % better than sl ,  <dig> % better than cl ,  <dig> % better in al , and  <dig> % higher than bkm  respectively. these results show that our method, combining mbkm with dmk, is able to achieve high quality results on all the data sets.

because the clustering methods listed in table  <dig> use the numbers of cluster as input parameters, we analyze the effects of varying the number of clusters on the clustering performance. this analysis is applied to ds <dig>  ds <dig>  ds <dig> and ds <dig> datasets and all  <dig> combinations. figures  <dig> and  <dig> show the results of these runs based on the k-tuple distance and dmk, respectively. the data used for generating these figures are included in additional file 1: tables s3-s <dig> 

from figures  <dig> and  <dig>  we can see that dmk achieves better cluster quantity than the k-tuple distance in terms of f-measure. using same clustering algorithm on the same data set, dmk achieves higher average of the f-measure values than the k-tuple distance, and dmk also obtains higher f-measures at corresponding number of clusters . from both figures, we find that f-measure changes as the number of cluster changes. as it is known, f-measure is a balanced measure of precision and recall. it is an ideal condition when the number of cluster is equal to the real number. when the number of cluster is greater than or less than the real number, the f-measure will be affected.

with regard to clustering algorithms, sl performs poorly in many cases, and this may be because that sl uses the nearest pair of sequences and may lead to bad splits of one cluster if two or more clusters show different pattern densities. for km and bkm, the results of many runs are lower than those of mbkm. on the whole, mbkm achieves better results than other clustering algorithms, and mbkm combining with dmk achieves best results among these clustering methods in our experiments.

the task of sequence clustering is to group given sequences into clusters. the similarity measure, dmk, measures the similarity between dna sequences based solely on the k-tuple. it is more effective than the k-tuple distance, which is one of the most widely used methods. the clustering algorithm, mbkm, can obtain better clustering results and can reveal the relationships among clusters in hierarchical manner. in the next experiments, we combine mbkm with dmk to clustering dna sequences.

in order to further illustrate the efficiency of our method, combining mbkm and dmk, we compare mbkm with dmk to two other clustering programs: blastclust  <cit>  and cd-hit-est  <cit> . blastclust is an alignment-dependent clustering algorithm. blastclust is from ncbi blast package. blastclust accepts a number of parameters that can be used to control the clustering stringency including thresholds for score density , and alignment length . cd-hit-est is a popular dna clustering program based on greedy incremental clustering method. cd-hit-est groups dna sequences into clusters that meet a user-defined similarity threshold  and uses short-word filters to rapidly determine that if two sequences are similar, which reduces the number of full alignments necessary.

we perform tests using blastclust and cd-hit-est on the data sets listed in table  <dig>  in order to obtain the best possible performance of blastclust, we set -p as f  and vary the input parameters, -s and –l, to evaluate the results. the score density, –s parameter, varies between  <dig> and  <dig> with step size  <dig>  and the alignment length, –l parameter, varies between  <dig>  and  <dig>  with step size  <dig> . other parameters are kept default. for cd-hit-est, because the sequence identity threshold, -c parameter, should be greater than or equal to  <dig>  in the program, we vary -c parameter between  <dig>  and  <dig> with step size  <dig> , and set the word length as default value. the best results from different parameter combination are recorded. for mbkm with dmk, we set the size of k-tuple as  <dig> and use the real number of clusters as input. as blastclust and cd-hit-est do not use the number of clusters as input, we choose the resulting class i, which has the max f for cluster j, to calculate the f-measures. the results, which contain the corresponding f-measures and the execution time, are summarized in table  <dig> 



for the cases that the real number of clusters is unknown, the performance of our algorithm will be affected. in order to compare with blastclust and cd-hit-est on a relatively fair ground, we can vary the number of clusters and take the average of the f-measure values over the different numbers of clusters. for instance, we run mbkm with dmk with the range of 3– <dig> numbers and the average values of f-measure are  <dig> ,  <dig> ,  <dig>  and  <dig>  for ds <dig>  ds <dig>  ds <dig> and ds <dig>  respectively. as shown in additional file 1: tables s7-s <dig>  these values are also higher than the corresponding f-measure of blastclust and cd-hit-est.

phylogenetic analysis
in this experiment, we used mbkm with dmk to construct phylogenetic trees.

1) the clustering result of  <dig> species

we apply mbkm with dmk to the  <dig> dna sequences of β-globin gene in table  <dig>  the clustering result is shown in figure  <dig>  using the same data set, we also build the phylogenetic tree using clustalw  <cit>  and muscle  <cit>  for alignment, and upgma and maximum likelihood  method  for presenting the tree. figure  <dig> and  <dig> shows the tree built by clustalw with upgma and muscle with ml respectively. the trees built by muscle with upgma and clustalw with ml are provided in figure  <dig> of additional file  <dig> 

in figure  <dig>  human, gorilla, chimpanzee and lemur are closer to bovine and goat than to mouse and rat, this topology is in complete agreement with feng et al.  <cit>  and cao et al.  <cit>  confirming the outgroup status of rodents relative to ferungulates and primates. moreover, the tree in figure  <dig> is identical to the tree in figure  <dig> and the tree built muscle with upgma. in experiment, the branch  is not classified well by clustalw with ml. furthermore, it took about  <dig>  second for our method. however, upgma with clustalw and muscle for the same data set took  <dig>  and  <dig>  seconds to build the tree, respectively, and ml with clustalw and muscle took  <dig> and  <dig>  seconds to build the tree, respectively.

2) the clustering result of  <dig> h1n <dig> viruses

h1n <dig> is subtype of the influenza a virus which can cause illness in humans and many other animal species. analysis of h1n <dig> is critical for preparing a strategy to prevent and to control influenza epidemics and pandemics. the h1n <dig> avian influenza is characterized by its continuous antigen variation, which is mainly caused by the ha and na proteins in which ha protein has highest rate of mutation. ha protein plays a critical role in identifying and adsorbing the host cell receptor in the infection process, and it is the decisive factor of host specific. we use our method to verify the phylogenetic relationships of h1n <dig>  and the result is included in additional file  <dig>  the clustering result using mbkm with dmk is shown in figure  <dig>  as a comparison, we also use clustalw with upgma and muscle with ml to construct the phylogenetic tree and they are presented in figure  <dig> and  <dig> 

as is seen from figure  <dig>   <dig> h1n <dig> viruses are distinctly divided into four main groups using our method. the four groups, include european swine older than  <dig> , the avian older than  <dig> , american swine older than  <dig>  and the new  <dig> viruses from human, swine and avian . the result shows that the new  <dig> human h1n <dig> viruses have closer relationship with old american swine than old avian and european swine. this grouping result is generally consistent with the topology given by clustalw with upgma, which is shown in figure  <dig>  and the one presented by muscle with upgma, which is provided in the additional file  <dig>  as well as the result suggested by zhao et al.  <cit> . figure  <dig>  built by muscle using ml method, also shows the new  <dig> human h1n <dig> viruses have close relationship with old american swine except the position of the group  is different from the positions in figure  <dig> and  <dig>  clustalw with ml  also classifies the  <dig> h1n <dig> viruses into four groups except that swine/wisconsin/ <dig> and swine/wisconsin/ <dig> are not classified well.

our method analyzed the  <dig> h1n <dig> viruses within  <dig> second, while upgma with clustalw and muscle of the same data set took  <dig> and  <dig>  seconds to build the tree, and ml with clustalw and muscle took  <dig> and  <dig>  seconds to build the tree, respectively.

our method, mbkm with dmk, performs well when clustering  <dig> species and  <dig> h1n <dig> viruses. it obtains similar results to the alignment-based method. furthermore, our method is much faster than the alignment-based methods.

in order to compare the speed of our method with the multiple sequence alignment based methods, clustalw and muscle, we performed the test on two sets of sequences. the first set consists of six datasets. all the six datasets include  <dig> sequences. the lengths of all sequences in the six datasets are around  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig> respectively. another set also consists of six datasets. the number of sequences in each dataset is  <dig>   <dig>   <dig>   <dig>   <dig>   <dig> respectively; the lengths of all the sequences are around  <dig>  because ml method is slower than upgma, we use upgma to build the phylogenetic tree of the results from clustalw and muscle and record the time used for each method. the results in figure  <dig> show that our method is much faster than the other two methods. the actual time differences are much higher than the visual differences in the figure since we are using the log as the label of y-axis.

scalability test
for dmk, the time complexity of transforming the gene sequence s1⋯sl to a vector is o , thus the time complexity of generating the vectors for the whole sequence database is o, where l¯ is the average length of the sequences and n is the number of sequences. the value of k set to  <dig> yields good results in our experiments, and we fix k to  <dig> as the size of k-tuple. dmk have linear time complexity with respect to both l¯ and n.

the time consumed for mbkm calculation is primarily determined by choosing the initial cluster centroids. for n sequences, this step has a time complexity of o . the time complexity of clustering step in mbkm is o . the following scalability test on our method, mbkm with dmk, confirms that our method has linear time complexity with respect to the average length of the sequences. the scalability test uses theoretical model sequences composed of the four symbols ‘a’, ‘c’, ’g’ and ‘t’. the method is implemented in java and on a computer with  <dig>  ghz cpu and 2 gb ram.

CONCLUSIONS
in this paper, we presented a novel approach for dna sequence clustering, mbkm, based on a new sequence similarity measure, dmk, which is extracted from dna sequences based on the position and composition of oligonucleotide pattern. the experimental results show the method of combining mbkm with dmk is effective in classifying dna sequences with similar biological characteristics and in discovering the underlying relationship among the sequences. in addition, dmk can achieve comparable or better accuracy than the frequency-based distance measure. our proposed method can be applied to study gene families and it can also help with the prediction of novel genes. furthermore, mbkm with dmk can generate cluster trees that are useful to understand the processes governing the gene evolution. in addition, our method may be extended for protein sequence analysis and metagenomics of identifying source organisms of metagenmic data. our method has limitations too. for example, the method did not consider edge length, and has not address problems with long repeated sequences or long insertions. in future we will try to address these problems.

competing interests
the authors declare that there are no competing interests.

authors’ contributions
dw designed the algorithm, conducted the experiments, and wrote the manuscript. qj supervised the project and proposed data mining algorithm. yw guided the experiments, wrote the manuscript and analyzed the results. sw guided the experiment analysis, and proposed ideas for sequence clustering algorithm. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary data.

click here for file

 acknowledgements
this work is supported by the national natural science foundation of china under grant no. <dig> and no. <dig>  and the shenzhen new industry development fund under grant no.cxb201005250021a.
