BACKGROUND
genome sequencing projects continue to produce amino acid sequences; however, understanding the biological roles played by these putative proteins requires knowledge of their structure and function  <cit> . despite that empirical structure determination methods have provided structural information for some proteins, computational methods are still required for the large number of proteins whose structures are difficult to determine experimentally. and while the primary sequence should contain the folding guide for a given protein, our ability to predict the three-dimensional  structure from the primary sequence alone remains limited. some ab initio methods do not require such information, but the application of these methods is often limited to small proteins  <cit> .

structure alignment research has led to the discovery of homologues of novel protein structures. and, although many structure alignment tools have been developed, such as ce  <cit> , dali  <cit> , vast  <cit> , mammoth  <cit> , fatcat  <cit> , and vorolign  <cit> , we wanted to provide a different perspective on protein structure analysis. previous studies of protein structures have shown the importance of repetitive secondary structures, particularly α-helices and β-sheets, in overall structure determination. together with variable coils, these structures constitute a basic three-letter structural alphabet that has been used in the development of early-generation secondary structure prediction algorithms  as well as more recent-generation algorithms. these newer algorithms have been applied to neural networks, homology sequences, and discriminative models  <cit> , and their accuracy in predicting secondary structure approaches 80%. however, despite this predictive accuracy, the three-letter alphabet does not contain the information necessary to approximate more refined 3d reconstructions.

the recent rapid increase in the number of available protein structures has allowed more precise and thorough studies of protein structures. several authors have developed more complex structural alphabets that incorporate information about the heterogeneity of backbone protein structures by using subsets of small protein fragments that are observed frequently in different protein structure databases  <cit> . the alphabet size varies from several letters to about  <dig> letters  <cit> . for example, unger et al.  <cit>  and schuchhardt et al.  <cit>  used k-means methods and self-organizing maps , respectively, to identify the most common folds, but the number of clusters generated was too large to have substantial predictive value. by applying autoassociative neural networks, fetrow et al. defined six clusters that represent super-secondary structures which subsume the classic secondary structures  <cit> . bystroff and baker produced similar short folds of different lengths and grouped them into  <dig> clusters that they used to predict 3d structure  <cit> . camproux et al. developed a hidden markov model  approach that accounted for the markovian dependence to learn the geometry of the structural alphabet letters and the local rules for the assembly process  <cit> . fixing the alphabet size to  <dig> letters, yang & tung applied a nearest-neighbor algorithm on a -map of structural segments to identify the  <dig> groups of segments used in their alphabet  <cit> . more details about these local structures can be found in a recent review  <cit> .

in this study, we developed a flexible pipeline for protein structural alphabet design based on a combinatorial, multi-strategy approach. instead of applying cross-validation  <cit>  or markovian processes  <cit>  to refine the clusters directly, we used soms and bayesian information criterion  to determine the optimum size of structural alphabet. we then applied the k-means algorithm  <cit>  to group protein fragments into clusters, forming the bases of our structural alphabet. moreover, unlike most other works that built substitution matrices for alphabets based on known blocks of aligned proteins, we used a matrix training framework that generated matrices automatically without depending on known alignments. an expressive structural alphabet allows us to quantify the similarities among proteins encoded in the appropriate letters. it also enables the primary representation of 3d structures using standard 1d amino acid sequence alignment methods. to demonstrate the feasibility of our new method, we verified the application of the alphabet produced by our pipeline and the trained substitution matrix to a widely used 1d alignment tool, fasta  <cit> . we conducted several experiments using the same datasets used in other recently published works and evaluated the performance of our tool in database-scale searches. in addition to investigating whether our alphabet and matrix worked well with 1d alignment tools in database searches, we evaluated the ability of our structural alphabet to characterize local structural features.

RESULTS
structural alphabet
by combining soms, minimum spanning trees, and k-means clustering, we developed a multi-strategy approach to designing a protein structural alphabet. to derive an appropriate substitution matrix for the new alphabet, we developed a matrix training framework that would automatically refine an initial matrix repeatedly until it converged. unlike some previous works that presumed the size of the alphabet  <cit> , our method determined the alphabet size autonomously and statistically. various experiments were conducted to evaluate our methodology.

the som is an unsupervised inductive learner and can be viewed as topology preserving mapping from input space onto the 2d grid of map units  <cit> . the number of map units in soms defines an inductive bias  <cit> , as does the number of hidden units for the feedforward artificial neural networks, and it affects the clustering results. by systematically varying the number of som map units and applying bic, we identified the most frequent number of clusters that maximized the bic and used this number to define the size of the alphabet. we tested soms ranging in size from  <dig> ×  <dig> to  <dig> ×  <dig>  ultimately defining the size of our alphabet at  <dig> letters. the relationship between number of clusters found and number of som map units used is summarized in table  <dig> 

our analysis determined that among the number of clusters that maximized the bic,  <dig> clusters occurred most frequently. thus, we assigned  <dig> letters to our alphabet.

to verify whether fragments were assigned to the same cluster by the various soms, we analyzed those soms  that produced  <dig> clusters, including soms sized  <dig> ×  <dig>   <dig> ×  <dig>   <dig> ×  <dig> units, etc. we calculated the overlap level between any two of the soms, defined as percentage of fragments that belonged to the same cluster. the average overlap between all pairs of soms for each of the  <dig> clusters was over 90%, indicating that these clusters were very consistent . table  <dig> and  <dig> display the within-cluster euclidean distance, defined as the average distance of each segment to the center, and the center-to-center euclidean distance for the  <dig> protein fragment clusters found by our method and by som alone, respectively. the average phi/psi angles  for the  <dig> clusters are presented in table  <dig>  as indicated in table  <dig> and  <dig>  the within-cluster euclidean distances for our clusters were smaller than those of the som clusters, which suggested that our  <dig> clusters were more coherent. on the other hand, the center-to-center distances for our clusters were larger than those of the som clusters, indicating that our clusters were better separated from each other. the 3d conformation of the representative segment for each alphabet letter is illustrated in figure  <dig> and the superimposition of protein segments is shown in figure  <dig>  to verify that these representative segments could be the building blocks for protein structures, we analyzed the frequency of their occurrence in four major structural classes according to the structural classification of proteins : all-alpha, all-beta, alpha/beta, and alpha+beta  <cit> . the frequency of each category of segments is presented in table  <dig>  the alpha helix segments represented by alphabet letters t, p, and r occurred more often in the all-alpha class than did the other segments. similarly, more beta sheet segments, such as n, e, and a, were found in the all-beta class. in both the alpha/beta and alpha+beta classes, most of the segments were found to be either alpha helices or beta sheets.

trisum – substitution matrix
most approaches to constructing substitution matrices require the alignment of known proteins  <cit> . because alignments are not always available and their validity can be dubious, we used a self-training strategy to build the substitution matrix for our new structural alphabet. this training framework had a flexible and modular design, and unlike most other approaches, it did not rely on the pre-alignment of protein sequences or structures. different training data or alignment tools can be incorporated into this framework to generate appropriate matrices under various circumstances. in this study, we used the non-redundant proteins contained in scop <dig>  with sequence similarity of less than 40% for training, excluding those proteins in scop- <dig> and the  <dig> test proteins  to ensure that the training data and the testing data did not overlap. we defined the positive hit rate of a query as the ratio of the number of positive hits to the size of the family the query belonged to. as we iterated each training protein , we refined the matrix until we could no longer increase the average positive hit rate of all the proteins. we tried different learning rates ranging from  <dig>  to  <dig> . the final average positive hit rates under different learning rates were similar, ranging between  <dig>  and  <dig> . an example of the learning curve of matrix training is presented in figure  <dig>  we selected the converged matrix with the maximum positive hit rate with the learning rate set to  <dig> . we named this matrix trisum- <dig> , as shown in figure  <dig> 

comparison with other tools
several protein structure search tools based on 1d alignment algorithms have been developed, including sa-search  <cit> , yakusa  <cit> , and 3d-blast  <cit> . yang and tung tested 3d-blast on the scop database scan task  <cit> . they prepared a protein query dataset named scop- <dig> from scop  <dig>  and  <dig> ; this dataset contains  <dig> proteins with <95% sequence similarity. we tested sa-fast on the same dataset in order to allow direct comparison . the results indicated that sa-fast outperformed 3d-blast and psi-blast in the test of the scop- <dig> query dataset.

athe top-ranked family in the hit list of a query was used as the predicted family. accuracy is the percentage of times that the family was correctly predicted.

we also used the same  <dig> proteins selected from scop95- <dig>  that were used by yang & tung to compare sa-fast with 3d-blast, psi-blast, yakusa, mammoth, and ce, in search time, predictive accuracy, and precision. other search tools exist, such as pbe  <cit> , sa-search  <cit> , and vorolign  <cit> , but because they either could not be tested on the scop database directly or the versions of their databases provided were too old , these tools were not used in the comparisons. the results showed that sa-fast outperformed the other two blast-based search tools  and another structure search tool that describes structures as 1d sequences  in both predictive accuracy and precision . additionally, sa-fast was comparably accurate and precise as the structural alignment tools mammoth and ce. regarding search time , table  <dig> clearly indicates that sa-fast was far more efficient than were the structural alignment tools mammoth and ce.

athe top-ranked family in the hit list of a query was used as the predicted family. accuracy is the percentage of times that the family was correctly predicted.

bthe precision is defined as t/h, where t is the number of true hit structures in the hit list, and h is the total number of structures in the hit list.

to further evaluate the predictive validity of our alphabet, we examined pairwise alignment of difficult cases based on the number of residues aligned and the superposition root mean square deviation . to avoid alignment process bias and to maintain consistency in our analysis of various structural alphabets, we applied the same fasta-based alignment algorithm  <cit>  in the alignment tests. we tested the alphabets and substitution matrices used in pbe-align, 3d-blast, and sa-fast on ten difficult cases of previously studied pairwise alignments and compared the results with those produced using vast, dali, ce, and fatcat  <cit> . based on the alignments obtained using different alphabets and matrices, we used vmd  <cit>  to calculate the superposition rmsd for pbe-align, 3d-blast, and sa-fast. table  <dig> shows that our alphabet had the lowest average rmsd per aligned residue among the three structural alphabets in the ten difficult alignment tests. figure  <dig> shows four superimposition examples based on our structural alphabet.

the number of residues aligned and the rmsd  are shown. the last row displays the average rmsd per aligned residue. except for pbe-align, 3d-blast, and sa-fast, the results of the methods were adopted from  <cit> .

local structure conservation in putative active sites can reflect biological meaning and these types of structural patterns can be used to predict protein function  <cit> , e.g., the binding sites for metal-binding proteins  <cit> . conserved local structural features can be identified in various ways and described using different representations. because of the aforementioned advantages to 1d representation, we wanted to evaluate the feasibility of describing structural domains/sub-domains using our structural alphabet. because there is no motif finding tool specifically designed for protein structural alphabets, we applied the motif finding programs available to evaluate the feasibility of using structural alphabets to characterize local structure features. currently, we use the motif finding program, meme  <cit>  to identify common structural motifs in protein families. we tested our method on a well-known protein family, the epidermal growth factor /egf-like family. based on the information published in literature or recorded in databases, we could verify whether the protein domains/sub-domains in egf/egf-like proteins could be described accurately using structural alphabets. egf domains comprise extracellular protein modules described by 30– <dig> amino acids primarily stabilized by three disulfide bonds. homologies and functional data suggest that these domains share some common functional features. if we number the cysteine residues as cys <dig> to cys <dig>  where cys <dig> is the closest to the n-terminus, the regularity of cysteine spacing defines three regions: a, b, and c. based on the conservation in sequence and length of these regions, the homologies have been classified into three different categories  <cit> . we first described the  <dig> proteins in the egf-type module family of scop  <dig>  using our alphabet and the alphabets of yang & tung's  <cit>  and de brevern et al.  <cit> . we then used meme to identify the common motifs corresponding to the a, b, and c sub-domains. according to interpro  <cit> ,  <dig> of these proteins were exclusively of egf type- <dig>   <dig> were of egf-like type- <dig>  and  <dig> belonged to egf-like type- <dig> only. we classified the remaining  <dig> proteins as others. sub-domain a was typically composed of five to six residues in types  <dig> and  <dig>  sub-domain b usually contained 10– <dig> residues in type- <dig> but was consistently three residues shorter than in type- <dig>  sub-domain c was conserved in length and contained four or five specific residues in type- <dig> and type- <dig>  <cit> . the sub-domains in egf-like type- <dig> were less conserved. a found motif was considered to correspond to a sub-domain if more than one-half of the residues in the sub-domain were included in the motif. if any single motif correctly corresponded to a sub-domain, we claimed that this sub-domain was recovered successfully . the results of the motifs found are summarized in table  <dig> and  <dig>  they show that meme was able to identify more egf sub-domains using our structural alphabet than using the alphabets of yang & tung or de brevern et al. one example of each egf group is shown in figure  <dig>  including the structures with highlighted sub-domains. using our alphabet, meme identified meaningful motifs that covered all three sub-domains in the egf examples ; however, using yang & tung's or de brevern et al.'s alphabets, the motifs found covered only one or two sub-domains.

athe number of egf proteins of a specific type, ba hit for a sub-domain occurred when more than half of the sub-domain residues were contained in a given motif. we present the number of hits of different types, ccov was defined as the ratio of the number of hits to the number of egf proteins, e.g., if no. =  <dig> and hits =  <dig>  then cov = 22/ <dig> =  <dig> %.

aegf  proteins in which all three sub-domains  were found by meme, begf  proteins in which two of the three sub-domains were found by meme, cegf  proteins in which only one sub-domain was found by meme, degf  proteins in which meme failed to identify any sub-domain.

discussion
this study aimed to:  introduce a systematic and modular pipeline for protein structural alphabet design, and  analyze the potential of our new alphabet to characterize local protein properties. there are two features that distinguish our method from the others. first, we took a multi-strategy approach to structural alphabet design. the alphabet size was automatically and statistically determined based on bic and was visualized using a unified distance matrix . we did not pre-specify the alphabet size  <cit>  or use an ad hoc procedure, such as iterative shrinking, to find the optimal size  <cit> . and, unlike other methods that use specialized databases, e.g. pair database  <cit>  and pdb-select  <cit> , the protein structure data used to build the alphabet were obtained from the non-redundant pdb  database and were not pre-processed for any particular purpose, ensuring the generality of our alphabet. second, we proposed a novel automatic matrix training framework to construct an appropriate substitution matrix for the alphabet. this training strategy did not need any information about known alignments, e.g. pali  <cit> , that most previous strategies have required. using different training data and update rules, the self-training methodology can be applied to various alphabets. for example, instead of protein classifications, we could consider rmsd in the update rules to tune the matrix. in table  <dig>  we summarize the properties of the structural alphabets and design methods evaluated in this study.

we demonstrated that our pipeline could produce a biologically meaningful structural alphabet. we compared sa-fast, a search tool based on fasta combined with our alphabet and substitution matrix, with other search tools. the results showed that sa-fast was very competitive in its predictive accuracy and alignment efficiency for database-scale searches. in addition, we compared our alphabet with others in difficult cases of pairwise alignment. the number of residues aligned and the rmsd superpositions indicated that our structural alphabet was not only comparable to other alphabets but also performed competitively with structural alignment tools.

we found several advantages to using a 1d structural alphabet. first, 1d representations of protein structures are easier to compare and more economical to store. second, previously designed and widely used 1d sequence alignment tools can be applied directly to protein structure and sequence analysis. third, 1d-based approaches can serve as pre-processors to filter out irrelevant proteins prior to the application of more computationally intensive structural analysis tools.

CONCLUSIONS
these results are encouraging and we can extend this work in several directions. firstly, we can use more complete datasets for substitution matrix training to increase the sensitivity and selectivity of future database searches. secondly, we can combine other alignment tools, in addition to fasta, with our substitution matrix and evaluate the performance of these different combinations. thirdly, to increase the performance of meme in structural motif detection, we could modify meme or develop a new motif-finding tool specifically for our structural alphabet. meme was originally designed to find motifs in amino acid and nucleic acid sequences. currently, we use meme to detect protein motifs and we have demonstrated that it can recover some of the structural sub-domains described by our structural alphabet. finally, several structural alphabets have been developed based on different protein structural characteristics. it would be worthwhile to conduct a thorough comparative study and evaluate the feasibility of combining different alphabets. the combination of complementary structural alphabets would increase their overall applicability and characterize 3d protein structures more completely.

