BACKGROUND
introduction
a great deal of knowledge about signal transduction, which is mediated largely by the interactions of proteins, has been built up over the years  <cit> , in part because molecular changes that affect signal-transduction systems play a role in many diseases, such as cancer  <cit> . signal-transduction systems are exceedingly complex, and as a result, our ability to manipulate the behaviors of these systems  is limited. to extend our understanding beyond that reachable through intuition alone, researchers are attempting to develop predictive mathematical models for signal-transduction systems  <cit> . these systems are difficult to model for a variety of reasons  <cit> , and new modeling approaches, such as rule-based modeling  <cit> , are needed. rule-based modeling is notable because it provides a solution to the problem of combinatorial complexity  <cit> .

central to rule-based modeling is the concept of reaction rules, which will be elaborated in detail below. one can think of a rule as a generalized reaction or a coarse-grained description of a molecular interaction and its consequences. the power of a rule is that it can concisely capture the site-specific details and consequences of an interaction of a structured molecule, such as a protein  <cit> . functionally, a rule defines 1) the necessary and sufficient properties of reactants in a class of reactions arising from a molecular interaction, 2) the products of a reaction in this class given any particular set of reactants, and 3) a rate law that governs all reactions defined by the rule.

a set of rules for the protein interactions in a signal-transduction system typically implies a much larger set of reactions. the reason is that processes such as multivalent binding and multisite phosphorylation can yield a combinatorial number of chemically distinct protein complexes and phosphoforms  <cit> . the sheer size of such networks, as well as the cost of simulating large-scale chemical reaction networks using conventional methods, has posed a formidable barrier to the development and analysis of models for signal-transduction systems that account for site-specific details of protein interactions .

to address the problem of simulating models defined by rules that imply large-scale chemical reaction networks, colvin et al.  <cit>  generalized the stochastic simulation method of stochsim <cit>  and implemented this method in software called dynstoc, which is freely available  <cit> . the stochsim/dynstoc simulation method involves the use of rules to determine if randomly selected components of molecules undergo a reaction. the method has a computational cost that is independent of the size of the reaction network implied by a set of rules. in this respect, the method is similar to methods reported by danos et al.  <cit> , yang et al.  <cit> , and yang and hlavacek  <cit> . these methods have been called "network-free" methods  <cit> , in part because the efficiency of these methods is independent of the size of the reaction network implied by rules.

a key feature of dynstoc is its ability to simulate models encoded in the bionetgen language , a general-purpose model-specification language that has been described in detail and that can be interpreted by a number of software tools  <cit> . thus, dynstoc can be used to simulate a wide array of rule sets that imply large-scale chemical reaction networks. unfortunately, the network-free simulation method implemented in dynstoc is a null-event stochastic simulation method, and as a result, simulation of models with fast reactions is inefficient, because the size of the fixed time step used in the simulation procedure is determined by the rate of the fastest reaction.

here, we present a software tool, rulemonkey, which implements a network-free stochastic simulation method for determining the system-level dynamics of molecular interactions represented by rules. in this method, unlike in the null-event method of stochsim/dynstoc, the size of the time step is variable, and each time step results in a change of the state of the system being simulated. like dynstoc, rulemonkey is capable of simulating models defined using bngl.

overview of graphical formalism underlying bngl
the algorithm presented below is intended for simulation of rule-based models that can be specified using bngl  <cit> , particularly models for the system-level dynamics of protein-protein interactions in signal-transduction systems. in such a model , molecules and molecular complexes are represented as graphs, and molecular interactions are represented as graph-rewriting rules. it will be useful to briefly review the graphical formalism underlying bngl  <cit> .

molecules  are taken to be the building blocks of chemical species  and to be composed of reactive components, such as amino acid residues subject to post-translational modifications, linear motifs , and protein interaction domains . thus, in a rule-based model, molecules and their components comprise a set of chemical species s = {s <dig>  s <dig>  ...}, and each species si is represented by a graph gi = , where the vertices vi represent molecular components and the edges ei represent  bonds between components. thus, the connectivity of molecules within a chemical species is explicitly represented, and the components that mediate molecular interactions are identified. the vertices of a graph are labeled. by convention, vertices that share the same label are taken to be chemically indistinguishable. labels are immutable. in addition to labels, vertices can be associated with mutable attributes, which can be used to represent the  internal states of components. it is often convenient to introduce an internal state to represent the phosphorylation status of an amino acid residue  <cit> . by introducing an internal state for each amino acid residue  subject to modification by kinases and phosphatases, one can track all possible phosphoforms of a protein.

rules are used to implicitly represent reactions arising from molecular interactions. a rule glhs → grhs is composed of 1) sets of left-hand side  and right-hand side  pattern graphs, glhs and grhs, which can be viewed as subgraphs of the graphs used to represent chemical species or species graphs, which are denoted g = {g <dig>  g <dig>  ...}; 2) a mapping of the vertices of lhs pattern graphs to the vertices of rhs pattern graphs, which defines a graph transformation; 3) a rate law; and 4) application conditions.

application conditions are optional but almost all rules encoded in bngl are endowed with an application condition that restricts molecularity  <cit> . a particular chemical species is a reactant in a rule-defined reaction if its corresponding species graph is matched by a lhs pattern graph  and, in addition, it and any potential co-reactant satisfy the application conditions associated with the rule . the set of molecular components  directly affected by a transformation will be called a reaction center. because many species graphs can potentially be matched by a single lhs pattern graph, a rule generally defines not a single reaction, but an entire class of reactions, all of which involve a common transformation. this transformation affects the same reaction center but can take place in multiple molecular contexts, depending on the lhs pattern graph of the rule and the application conditions  of the rule.

rules are typically associated with application conditions that impose constraints on the molecularity of reactions and the number of reaction products  <cit> . in bngl, separation of two lhs pattern graphs by a "+" symbol indicates a molecularity of  <dig>  and a rule with a single lhs pattern graph indicates a molecularity of  <dig>  similarly, separation of two rhs pattern graphs by a "+" symbol indicates two reaction products, and a single rhs pattern graph indicates a single reaction product. application conditions can be introduced for a variety of other reasons. for example, monine et al.  <cit>  recently modeled steric effects on multivalent ligand-receptor binding using rules with application conditions that place constraints on the allowable geometric configurations of ligand-induced receptor aggregates. here, we will only consider application conditions related to molecularity and number of reaction products.

above, we have implicitly assumed that rules define unidirectional reactions. in bngl, a short hand notation  can be used to indicate that the pattern graphs of a rule can be reversed to define reverse reactions  <cit> . this notation is convenient, as it allows one to avoid redundancy in a model specification. however, the distinction between lhs and rhs graphs is obfuscated. in the discussion that follows, for clarity, we will continue to assume that rules define unidirectional reactions only, which is equivalent to assuming that only the - > notation within bngl is available. from this point of view, two rules are required to define reversible transformations. for example, a - > b and b - > a must be used instead of simply a <-> b where a and b are pattern graphs. in short, we will refer to those graphs in rules that are used to identify reactants as lhs pattern graphs and those graphs that are used to define transformations as rhs pattern graphs.

the advantage of the rule-based modeling formalism is that a modeler can use a rule to concisely and comprehensivley account for the site-specific details and consequences of a molecular interaction, no matter how many distinct reactions might arise from the interaction. however, this expressiveness comes at a cost. each individual reaction defined by a rule is assigned the same rate law up to a statistical factor, which can vary from reaction to reaction within a reaction class  <cit> .  in reality, each reaction in a reaction class may be characterized by a unique rate law. thus, the rate law associated with a rule provides only a coarse-grained description of the kinetics of the reactions within the rule-defined reaction class. however, because a rule can specify the molecular context that is permissive for reaction, the coarseness of a rule can be adjusted by tuning the contextual elements of the rule. at the finest level, the contextual elements are highly specific and a rule defines a unique reaction. at the coarsest level, the rule is free of contextual constraints, meaning that the rule indicates that a reaction center can undergo a reaction regardless of the molecular context in which that reaction center is found.

model assumptions
having presented an overview of the graphical formalism underlying bngl, we can now introduce the assumptions upon which the algorithm implemented in rulemonkey is based.

we consider a well-mixed isothermal reaction compartment of volume v containing a set of m molecules p = {p <dig>  ..., pm}, which we take to be proteins. each molecule pi is associated with a set of components ci = {ci <dig>  ci <dig>  ...}. these components, each of which are optionally associated with an internal state, undergo reactions according to a set of n reaction rules r = {r <dig>  ..., rn}. each rule ri defines a class of reactions, and each member of this class is characterized by a single rate law up to a statistical factor, as mentioned earlier. given this rate law, a cumulative rate ri can be determined for the class of reactions defined by ri, at least in principle. this cumulative rate corresponds to the sum of the rates for the individual reactions in the class of reactions defined by ri. by convention, the rate of each reaction will be taken to be given in terms of the number of molecules undergoing the reaction per unit time in v. in other words, each ri has the same units as 1/t.

as a simplification, we will consider only mass-action rate laws. thus, for example, we will assume that a bimolecular reaction a + b → product is characterized by a rate law of the form fkv nanb, where na is the number of a type molecules or molecular complexes in v , nb is the number of b type molecules or molecular complexes in v , kv is a rate constant expressed in the same units as 1/t, and f is a statistical factor that accounts for the number of  ways that the a and b molecules  can react, i.e., the number of degenerate reaction paths from reactants to products. these molecules  can react in more than one way if, for example, a and b associate via binding sites that are present in a and/or b in multiple copies. thus, kv is a so-called "single-site" rate constant. rate constants associated with rules are assumed to be single-site rate constants according to the conventions of bngl  <cit> . note that kv is volume dependent and can be equated to k/, where na is avogadro's number and k is the rate constant expressed in the same units as nav/t. the statistical factor f, which is related to symmetry, can be determined as described by blinov et al.  <cit> .

as another simplification, we will assume that internal-state dynamics are described by two-state trajectories. thus, a component cij of molecule pi will be associated with an internal state σij ∈  <dig> <cit>  or none at all.  if a component is a tyrosine residue subject to phosphorylation and dephosphorylation, then an internal state could be introduced to represent its phosphorylation status  <cit> , with one state value representing the unphosphorylated form and the other state value representing the phosphorylated form. software tools for rule-based modeling, including rulemonkey, actually allow for greater than two internal states to be associated with a component.

for purposes of discussion, we will focus on rules specifying reactions that result in the association or dissociation of two components or that change the internal state of a component . note that a component is taken to have at most one binding partner at a time, as usual  <cit> . extension of the discussion that follows to account for other types of rules, such as rules for synthesis, degradation and trafficking between compartments, is straightforward. rulemonkey is capable of handling these types of reactions, which can be specified in accordance with the conventions of bngl  <cit> . for a system in which only association, dissociation, and state-change reactions are possible, counts of molecules and components are conserved quantities. moreover, for such a system, the lhs pattern graph of a rule will serve to identify either one or two reactants for each reaction defined by the rule.

the population-based approach to simulation of a rule-based model
the state of a system governed by a rule set r can be taken to be given by the vector x = , ..., xn]t, is the population level of the molecule or molecular complex si described by graph gi and n is the number of chemical species that are populated over the time interval of interest. in the limit of continuous population sizes, x evolves deterministically according to a system of coupled ordinary differential equations :   

where the vector field f is composed of mass-action terms derived from the rate laws associated with the rule set r. for a rule set that implies m unidirectional reactions, there are m mass-action terms.

in principle, eq.  <dig> can be derived from r  <cit> . however, derivation and numerical integration of eq.  <dig> is impractical when a rule set implies a large-scale chemical reaction network , which is often the case  <cit> . reduced forms of eq.  <dig>  involving transformations of the variables x, can sometimes be found through analysis of r  <cit> , and on-the-fly stochastic simulation procedures  <cit>  can sometimes be used to limit enumeration of the reactions implied by r, which is expensive. nevertheless, these methods fail to be practical for many rule sets.

to overcome this problem, kinetic monte carlo  procedures have been developed in which r is used directly to generate stochastic trajectories consistent with the chemical master equation that corresponds to eq.  <dig>  <cit> . these procedures avoid enumerating the reaction network implied by r. thus, the term "network-free" is apt for these simulation procedures. the algorithm presented below is a network-free procedure.

the particle-based approach to simulation of a rule-based model
the rulemonkey algorithm, like other network-free simulation procedures, is particle based, meaning that each and every material component of a system is tracked, regardless of whether the material components are chemically distinguishable. in other words, given a set of rules r and a set of instances of chemical species graphs, each potentially present in multiple copies, these graphs and their constituent parts are tracked individually as the graph transformations defined by r are applied to them  and the constituent parts move through the space of possible chemical species. let us use  to denote the set of instances of chemical species in a system of volume v at time t. these instances of chemical species can, in principle, be partitioned into disjoint sets, the set of n populated chemical species:   

where  is the jth copy of species si and xi is the population level of  species si at time t in v . in a network-free simulation procedure, the species instances  are tracked but they are not partitioned as indicated in eq.  <dig>  which is essentially equivalent to determining x, the population levels of the chemical species in v. to determine x from , one must identify and count the graphs in  corresponding to each species in s, which is an expensive procedure because it necessarily involves repeated solution of the graph isomorphism problem  <cit> .

instead of relying on a partition of  as indicated in eq.  <dig> or knowledge of x to advance a simulation, a network-free algorithm relies on knowledge of the complete component state of a system, i.e., the state of each component in the system. the state of an individual component c is the information required to uniquely identify 1) the component, including its label and the label of the molecule of which it is a part; 2) the internal state of the component ; and 3) the bound state of the component, including its binding partner . let us use ∑c to denote the complete component state of a system, which we will also refer to as simply the system state. note that ∑c fully defines  . because the graph-rewriting operations defined by rules directly alter ∑c, the system state as expressed in terms of component states can be easily tracked  and ∑c can be dynamically updated as rules in r are applied to graphs in  in a simulation procedure.

observables
there is a one-to-one relationship between ∑c  and x, but as indicated above, the rulemonkey algorithm, like other network-free simulation procedures, avoids determining x. how then are system properties of interest determined as a function of time?

the output of a network-free simulation procedure is determined by a specification of a set of ω observables, o = {o <dig>  ..., oω}. each observable oi is composed of a pattern graph gi, making it similar to a rule. it is also associated with a time-dependent match number mi, which is a function of gi and the system state:      

and w is a weight that is specified to be either  <dig> or the number of times that s is matched by gi, i.e., the number of distinct images of gi in s or the number of distinct mappings  of the elements of gi to a subset of the elements of s. in a bionetgen input file, the former case is indicated by the bngl keyword species, whereas the latter case is indicated by the bngl keyword molecules  <cit> . the match number associated with an observable of the species type is a count of the number of chemical species in v containing at least one moiety matched by the pattern graph of the observable. the match number associated with an observable of the molecules type is a count of the number of moieties in v matched by the pattern graph of the observable. because the match numbers associated with observables are functions of the system state , these quantities can be easily tracked and dynamically updated as the system state changes in a simulation procedure.

algorithm
given the background presented above, we can now present an outline of the simulation procedure implemented in rulemonkey. this procedure has more or less already been described in earlier work  <cit> , although key implementation details, described below, are novel. the procedure can be used to produce stochastic trajectories consistent with the chemical master equation corresponding to a system of odes of the form of eq.  <dig>  a comparison of methods is included below.

we take as given a set of n rules r = {r', r"}, where r' denotes the set of rules with a single lhs pattern graph and r" denotes the set of rules with a pair of lhs pattern graphs. we also take as given an initial time t, a system volume v , and a set of initial species instances , from which the component state of the system, ∑c, can be determined. for now, we will assume that there is a procedure that allows us to calculate the set of rates r = {r <dig>  ..., rn} associated with r. the method by which these rates are calculated will be described in detail below.

we will also assume that there are procedures that allow us to identify the potential reactants in rule-defined reactions and the reaction centers in these reactants. thus, for a rule ru in r' we will assume that a set of species instances  can be identified as matching the lhs pattern graph of ru. the species instances in  are potential reactants in a reaction defined by ru. the reaction centers in  are the components that are matched by the lhs pattern graph of ru and that are directly modified in a reaction defined by ru . likewise, for a rule rv in r", we will assume that sets of species instances  and  can be identified that match the first and second lhs pattern graphs of rv, respectively. pairs of species instances in  are potential co-reactants in a reaction defined by rv.

we can now outline the key steps of the network-free simulation procedure implemented in rulemonkey, which is similar to gillespie's method  <cit> .

initialize
specify v, t, r, including the single-site rate constants in rate laws associated with rules, and a seed set of species instances , which determines ∑c. for each rule ri in r, calculate the rate ri associated with this rule and identify the species instances in  that are matched by the lhs pattern graph of the rule. finally, specify a set of observables, o, and use eq.  <dig> to calculate the match numbers associated with these observables.

increment time and select a rule in accordance with rule rates
calculateτ, the waiting time to the next reaction event in the system, using   

where ρ <dig> ∈  is a uniform deviate and  recall that the rule rate ri, which is taken to have units of inverse time in eq.  <dig>  is the cumulative rate of all possible reactions defined by rule ri. equation  <dig> follows from , where p is the probability distribution function for τ  <cit> . this distribution holds if the rate at which the system leaves state ∑c is simply rtot, the sum of the cumulative rates for the classes of reactions through which the system state can change.

determine the class of the next reaction event by finding the smallest integer i that satisfies   

where ρ <dig> ∈  is a second uniform deviate. the next reaction event will be in the class defined by rule ri, where i ∈ . equation  <dig> indicates that the class of the next reaction event is randomly selected with probability in proportion to the cumulative rate of reactions within that reaction class. it should be noted that the cost of finding ri using eq.  <dig> is proportional to n. a more efficient procedure, with cost proportional to logn, could be implemented  <cit> , but eq.  <dig> is used in rulemonkey for simplicity. for simulation problems that we have considered, performance profiling indicates that this simplification does not limit the efficiency of rulemonkey.

select a set of reactants and use the selected reactant and rule to change the system state
additional uniform deviates are needed in the simulation of a reaction event. if ri ∈ r' then a species instance  is randomly selected with probability in proportion to the number of distinct reaction centers in s matched by the lhs pattern graph of ri. on the other hand, if ri ∈ r" then a first species instance  is randomly selected with probability in proportion to the number of distinct reaction centers in s <dig> matched by the first lhs pattern graph of ri , and a second species instance  is randomly selected with probability in proportion to the number of distinct reaction centers in s <dig> matched by the second lhs pattern graph of ri. the graph transformation defined in rule ri is then applied to a randomly selected set of reaction centers in the selected reactant, which changes the system state ∑c . in other words, the randomly selected set of species instances, s or {s <dig>  s2}, is essentially removed from the system and replaced by a new set of species instances. the new species instance correspond to the product of the reaction event defined by ri.

update sets and quantities that depend on the system state
increment time t ← +τ and update the sets of reactants associated with rules. likewise, update the match numbers associated with observables. the steps outlined above that follow initialization are iterated until a stopping criterion is satisfied.

implementation
the simulation method described above has been implemented in software called rulemonkey. rulemonkey is available as a stand-alone application, which is freely available via the rulemonkey web site  <cit> , and as a simulation engine within the getbonnie environment  <cit> . the input for a simulation is a bngl-encoded model and simulation specification. in other words, rulemonkey reads and interprets standard bionetgen input files, like dynstoc  <cit>  and bionetgen  <cit> . the conventions of bngl are described in detail elsewhere  <cit> . the novel details of algorithm implementation, which are related to the calculation of rule rates, are described below. usage considerations are also discussed.

calculation of rule rates
below, equations are given for exactly calculating the rates associated with five types of reaction rules, which generate reactions of the types illustrated in fig.  <dig>  the five rule types are sufficient to specify a wide range of models. for efficiency, the equations given below are used only in the initialization step of the simulation algorithm. after initialization, as described in detail for rejection-free simulation of multivalent ligand-receptor interactions  <cit> , the rates given by these equations are updated on the fly as reactions occur, which requires that matches of lhs pattern graphs in rules be tracked during a simulation.

unimolecular state-change reactions
we will use ra to denote a rule that defines unimolecular state-change reactions, such as that illustrated in fig.  <dig>  we will assume that ra has the following form: la → ρ a, where la is a lhs pattern graph and ρ a is a rhs pattern graph. thus, ra defines unimolecular reactions that each have a single reactant and a single reaction product. we will assume that the pattern graph la identifies a reaction center composed of a single molecular component in a particular internal state.

given a set of species instances  at time t, the instantaneous rate ra associated with ra is given by the following expression:   

where ka is the single-site rate constant associated with the mass-action rate law of ra and va is a function that gives the number of distinct reaction centers in species instance s matched by la . the function va is similar to that of μ . note that va =  <dig> if no subgraph of s is isomorphic to la. also note that va is not necessarily equivalent to the number of times that s is matched by la but rather is equivalent to the number of distinct reaction centers among the subgraphs of s matched by la. it is important to make the distinction between number of matches and number of distinct reaction centers in matches when a lhs pattern graph specifies a contextual constraint that can be satisfied in more than one way.

in the course of a rulemonkey simulation, rates of the form of ra are updated on the fly as reactions occur and are never recalculated de novo after initialization, which would be inefficient. thus, for example, if a species instance s matched by la is removed from , then ra is decremented by kava. similarly, if a species instance s matched by la is added to , then ra is incremented by kava. updates of rule rates are facilitated by tracking matches of lhs pattern graphs of rules to subgraphs of the graphs representing the species instances in a system. as part of this bookkeeping procedure, when a new species instance appears in a system , it is checked against all the lhs pattern graphs of rules to determine the types of reactions in which it can potentially participate and to calculate updates of the rates associated with rules. when a species instance disappears from a system , the rates associated with rules are appropriately adjusted as well. the cost of updating a rate such as that given by eq.  <dig>  or any of the equations given below, depends on the number of rules in a model and the number of chemical species instances created and destroyed in a reaction. however, the cost per time step is more or less fixed over the course of a simulation. the overall efficiency of simulation depends on the efficiency of the procedures used to update rates and to store and update other information needed to implement the simulation algorithm described above.

unimolecular dissociation reactions
we will use rb to denote a rule that defines unimolecular dissociation reactions, such as those illustrated in fig.  <dig>  we will assume that rb has one of two forms: lb → ρb or  where lb is a lhs pattern graph, and ρb, , and  are rhs pattern graphs. in the former case, rb defines unimolecular reactions that each have a single reaction product, as when a bond opens but no constituent parts of the reactant species dissociate. in the latter case, rb defines unimolecular reactions that each have two reaction products, as when a bond opens and constituent parts of the reactant species dissociate from each other. we will assume that the pattern graph lb identifies a reaction center composed of two molecular components that are directly connected by a  bond.

given a set of species instances  at time t, the instantaneous rate rb associated with rb is given by the following expression:   

where kb is the single-site rate constant associated with the mass-action rate law of rb and vb is a function that gives the number of distinct reaction centers in species instance s matched by lb . note that a species instance s is considered to be matched by lb only if application of the graph-rewriting operation of rb to s produces the correct number of reaction products, i.e., the number of products consistent with the rhs of rb. the function vb in eq.  <dig> is analogous to the function va in eq.  <dig> 

as noted above for rates of the form of ra, rates of the form of rb are updated on the fly as reactions occur during the course of a rulemonkey simulation. these updates are straightforward and follow from eq.  <dig> 

bimolecular association reactions
we will use rc to denote a rule that defines bimolecular association reactions, such as those illustrated in fig.  <dig>  we will assume that rc has the following form:  where lc and  are lhs pattern graphs and ρ c is a rhs pattern graph. we will assume that the pattern graphs lc and  identify two reactants and a single component within each. this pair of components forms the reaction center identified by rc and these components are connected in the product of reaction. consistent with the conventions of bngl  <cit> , the plus sign that separates lc and  indicates that the molecularity of reactions defined by rc must be  <dig> 

given a set of species instances  at time t, the instantaneous rate rc associated with rc is given by   

where   

and   

in the above equations, kc is the single-site volume-dependent rate constant associated with the mass-action rate law of rc, vc is a function that gives the number of distinct reaction centers in species instance s matched by lc, and  is a function that gives the number of distinct reaction centers in species instance s matched by both lc and . in the case where no species instance is matched by both lc and , the positive, first term in eq.  <dig> accounts for all possible combinations of reactants and the second term reduces to zero. in other cases, the first term over counts the number of combinations, and the second term corrects for the over counting.

on-the-fly updates of rates of the form of rc are fairly complicated but follow from eq.  <dig>  basically, when the system state changes, rc is incremented or decremented by the terms in eq.  <dig> that are added or removed as a result of the system state change.

unimolecular monogamous ring-closure reactions
we will use rd to denote a rule that defines unimolecular monogamous ring-closure reactions, such as that illustrated in fig.  <dig>  we assume that rd has the following form: , where ld and  are lhs pattern graphs and ρ d is a rhs pattern graph. because ld and  are not separated by a plus sign, these pattern graphs can be understood to identify two reactive components within the same chemical species, consistent with the conventions of bngl  <cit> . here, we further assume that these reactive components lie within the same molecule. the pair of components identified by ld and  forms the reaction center identified by rd, which defines a graph-rewriting operation that connects the two vertices in the reaction center.

given a set of species instances  at time t, the instantaneous rate rd associated with rd is given by   

where   

and   

in the above equations, kd is the single-site rate constant associated with the mass-action rate law of rd, vd is a function that gives the number of distinct reaction centers within a common molecule m in a species instance s matched by ld, and  is a function that gives the number of distinct reaction centers within a common molecule m in a species instance s matched by both ld and . in bngl, the graphs that represent chemical species are composed of graphs that represent types of molecules  <cit> . thus, m in eq.  <dig> references a particular subgraph of a species instance graph s that corresponds to a type of molecule. updates of rd necessitated by system state changes follow from eq.  <dig> 

unimolecular non-monogamous ring-closure reactions
we will use re to denote a rule that defines unimolecular non-monogamous ring-closure reactions, such as that illustrated in fig.  <dig>  we assume re has the following form:  where le and  are lhs pattern graphs and ρ e is a rhs pattern graph. according to the conventions of bngl  <cit> , the lhs pattern graphs le and  identify two reactive components within the same chemical species. here, we further assume that these reactive components lie in different molecules within the same chemical species. the pair of components identified by le and  forms the reaction center identified by re, which defines a graph-rewriting operation that connects the two vertices in the reaction center.

given a set of species instances  at time t, the instantaneous rate re associated with re is given by   

where   

and   

in the above equations, ke is the single-site rate constant associated with the mass-action rate law of re, ve is a function that gives the number of distinct reaction centers within a common molecule m in a species instance s matched by le, and  is a function that gives the number of distinct reaction centers within a common molecule m in a species instance s matched by both le and . updates of re necessitated by system state changes follow from eq.  <dig> 

usage considerations
in the actions block of a bionetgen input file  <cit> , a rulemonkey-specific command, simulate-rm, is used to initiate a simulation. this command takes the same arguments as analogous commands that invoke other simulation engines, such as dynstoc  <cit> . the output of a rulemonkey simulation is a .info file and a .gdat file. the .info file reports metadata about a simulation run, such as the execution time. the .gdat file reports a time course for each observable quantity defined in an input file . observables are sums or weighted sums of population levels of chemical species , and they are defined according to the conventions of bngl  <cit> . the time points at which results are reported in the .gdat file are specified by a user using the simulate-rm command. these results are generated through evaluation of the system state at each of the time points of interest.

RESULTS
validation
we validated rulemonkey by comparing simulation results against those obtained using bionetgen  <cit> , dynstoc  <cit> , and problem-specific codes  <cit> . the following models were considered : 1) the multisite phosphorylation model introduced by colvin et al.  <cit> , testcase <dig> bngl ; 2) the tlbr  model introduced by yang et al.  <cit>  and considered by colvin et al.  <cit>  and here in fig. 2b, testcase2a.bngl  and testcase2b.bngl ; 3) a model introduced here with reaction events occurring on disparate time scales, stiff.bngl ; 4) a model introduced here for interaction of a pentavalent ligand with a trivalent cell-surface receptor, pltr.bngl ; 5) the model of blinov et al.  <cit>  for early events in epidermal growth factor receptor  signaling, egfr net.bngl ; 6) the model of goldstein et al.  <cit>  and faeder et al.  <cit>  for early events in ige receptor  signaling, fceri.bngl ; and 7) the model of nag et al.  <cit>  for crosslinking of phosphorylated lat molecules by intracellular grb2-sos <dig> complexes, lat.bngl . the bionetgen input files that specify these models and rulemonkey simulations of them are available as additional files  <dig>  they are also available at the rulemonkey web site  <cit> .

the performance of rulemonkey for seven benchmark problems is compared against that of dynstoc  <cit> , problem-specific codes implementing network-free procedures  <cit> , and the simulate-ssa procedure of bionetgen  <cit> . the problem-specific codes for benchmark problems  <dig>   <dig> and  <dig> were provided by m. i. monine; these codes have been described by yang et al.  <cit> , monine et al.  <cit> , and nag et al.  <cit> . each table entry indicates seconds of cpu time per reaction event. for benchmark problems  <dig>   <dig>  and  <dig>  bionetgen is unable to exhaustively generate the reaction network needed for generate-first simulation , as these problems involve simulating polymerization-like reactions. for bionetgen simulations, the cost of network generation is not included in the table entries. all simulations were performed on a macintosh desktop computer, equipped with a single g <dig> processor. simulations were performed as specified in the indicated bionetgen input files, which are available as additional files  <dig> and 3- <dig> and at the rulemonkey web site  <cit> . the benchmark problems are described in more detail in the text and in the references cited.

each model is specified as a bionetgen input file, which can be processed by bionetgen, dynstoc, and rulemonkey. the input files for these different software tools are the same, except for the simulation commands in the actions blocks  <cit> . as noted above, the simulation command for rulemonkey is simulate-rm. bionetgen accepts two simulation commands, simulate-ode and simulate-ssa. in calculations with bionetgen, we used simulate-ssa, which invokes an efficient extension of gillespie's method, preceded by a generate-network command, which prompts bionetgen to implement the procedures needed to explicitly derive the reaction network implied by a set of rules. in other words, we only used bionetgen to perform simulations via the so-called generate-first approach  <cit> .

the reason we only consider generate-first simulations using bionetgen is that simulation cost and network-generation cost can be easily separated when this simulation approach is taken, as it consists of two steps. the first step is network generation. the second step is simulation. in the on-the-fly approach, execution switches back and forth between network generation and simulation. it has been observed that stochastic simulation via the on-the-fly approach tends to be faster than stochastic simulation via the generate-first approach  <cit> . thus, if we find that generate-first simulation is faster than network-free simulation, we can assume with some confidence that on-the-fly simulation is also faster than network-free simulation.

typical validation results are shown in fig.  <dig>  in all cases, rulemonkey was found to produce results consistent with those obtained using the other methods/codes considered.

performance
as can be seen from the results of table  <dig>  rulemonkey is more efficient than dynstoc, but less efficient than bionetgen and problem-specific codes . bionetgen is unable to simulate three of the test models via the generate-first approach because the reaction networks implied by the rule sets of these models cannot be generated exhaustively. thus, of the available general-purpose simulation codes compliant with the conventions of bngl, rulemonkey and dynstoc are the most widely applicable , and rulemonkey is more efficient than dynstoc . it should be noted that we would expect the generate-first approach to simulation  <cit> , which may involve either stochastic simulation or numerical integration of odes , to be more efficient than network-free simulation for cases where the generate-first approach is feasible because of the bookkeeping costs of network-free simulation, which requires data structures and update schemes to track the component state of a system. unfortunately, simulation methods that rely on derivation of the reaction network implied by a rule set, which is computationally expensive, are often not feasible for rule sets that imply large-scale chemical reaction networks. feasibility depends on effective network size, which is a function of model parameter values. for some parameter values, network generation can be halted arbitrarily or limited as in the on-the-fly approach to simulation  <cit> . for other parameter values, as demonstrated by yang et al.  <cit> , for example, network generation is a limiting factor, and network-free simulation is essential.

the performance of rulemonkey scales with problem size in a way that is similar to that of dynstoc  <cit>  and the problem-specific codes of yang et al.  <cit>  and yang and hlavacek  <cit> . results obtained from simulation of the tlbr model of yang et al.  <cit>  are shown in fig.  <dig>  the tlbr model, a kinetic version of the model of goldstein and perelson  <cit> , characterizes the interactions of trivalent ligands with bivalent cell-surface receptors. in fig.  <dig>  the cost of simulation is shown as a function of the number of receptors nr. as nr increases, the frequency of reactions increases. in fig.  <dig>  the cost of simulation is shown as a function of the dimensionless parameter β, which characterizes ligand-induced receptor crosslinking at equilibrium. as β increases, the equilibrium size of ligand-induced receptor aggregates increases. thus, this parameter effectively controls the number of populated species and the number of reactions with non-zero flux. as can be seen, the cost of simulation is constant up to a critical value of β, where a percolation transition occurs  <cit> . above this threshold, simulation cost increases linearly. yang et al.  <cit>  have shown that this scaling arises because of the expense of enforcing an application condition of a rule of the tlbr model that prohibits the formation of cyclic receptor aggregates. thus, in the case of the tlbr model, simulation efficiency is affected by model parameter values. we expect that simulation of the model of benchmark problem  <dig> in table  <dig>  which is closely related to the tlbr model, is affected by model parameter values in a similar way.

finally, we compared the performances of rulemonkey and dynstoc for problems with reactions occurring on different time scales . as can be seen, as the rate of the fastest reaction in a system increases, the efficiency of dynstoc degrades relative to that of rulemonkey.

CONCLUSIONS
rulemonkey is a general-purpose simulator for rule-based models encoded in bngl. rulemonkey complements bionetgen  <cit> , the first software tool to have the capability to simulate rule-based models encoded in bngl. the rules that comprise bngl-encoded models can be expanded by bionetgen into the set of reactions implied by the rules, and bionetgen can simulate the kinetics of these reactions using conventional methods, such as numerical integration of the corresponding system of ordinary differential equations  for mass-action kinetics. although bionetgen has been used to study a number of systems  <cit> , the reaction network implied by a set of rules is often so large as to make the simulation approaches implemented in bionetgen impractical. network generation is expensive, as is simulation of a large-scale reaction network using a conventional method. such methods have a computational cost that depends on the size of the network being simulated. in the generate-first and on-the-fly approaches to simulating rule-based models  <cit> , which are implemented in bionetgen, there is both a network generation cost and a network simulation cost, because network generation is a prerequisite for network simulation via these approaches. in contrast, in network-free simulation approaches  <cit> , such as the method presented here and implemented in rulemonkey, there is only a network simulation cost. however, it should be noted that network-free simulation procedures have a relatively high cost per reaction event, as is evident in table  <dig>  thus, one should choose such a simulation procedure only when the cost of an alternative procedure that relies on network-generation is prohibitive.

the cost of network generation is often prohibitive, which has motivated the development of several network-free simulation methods  <cit> . like these methods, the method presented here and implemented in rulemonkey avoids network generation and, consequently, has a computational cost independent of the number of reactions implied by a set of rules . we note that yang and hlavacek  <cit>  have described a method that is essentially the same as that implemented in rulemonkey but without providing details about how the method could be implemented for general use  and without providing general-purpose software.

rulemonkey and dynstoc  <cit>  are similar in that they can both simulate bngl-encoded models while avoiding network generation. however the method implemented in rulemonkey is a rejection-free method, whereas the method implemented in dynstoc is a null-event method. both types of methods are capable of producing correct simulation results but null-event methods tend to have a higher cost for simulation of systems with fast reactions  <cit> . for cases that we have examined, rulemonkey typically performs better than dynstoc  and has a decided advantage for systems with fast reactions . this advantage is perhaps significant because practical problems tend to involve reactions occurring on disparate time scales.

the capability of rulemonkey to correctly process bngl-encoded model and simulation specifications  is significant in that this capability allows rulemonkey to be used to simulate a wide array of models that account for the site-specific details of protein-protein interactions  as well as the connectivity of proteins in protein complexes . rulemonkey also distinguishes between intra- and intermolecular reactions, which is important for correct simulation results in many cases  <cit> . we have demonstrated that rulemonkey can be used to efficiently simulate rule sets that imply large-scale chemical reaction networks . the capabilities of rulemonkey complement those of bionetgen and other available software tools for simulation of rule-based modeling  <cit> . in the future, we expect rulemonkey will prove useful for simulating models of signal-transduction systems that are significantly larger and more comprehensive than the rule-based models of such systems that have so far been considered  <cit> .

availability and requirements
• project name: rulemonkey

• project home page: http://public.tgen.org/rulemonkey

• operating system: platform independent

• programming language: c

• other requirements: none

• license: gnu general public license , version 3

• any restrictions to use by non-academics: if the terms of the gpl are unacceptable, it may be possible to provide the software under a different license.

authors' contributions
jc implemented the algorithm and designed the tool. mim and rng tested and validated the tool and evaluated its performance. dvh, rgp and wsh planned the project. rgp and wsh conceived the tool and wrote the manuscript. all authors have read and approved the final version of the manuscript.

supplementary material
additional file 1
this plain-text file specifies a simulation of the multisite phosphorylation model introduced by colvin et al.  <cit> . this simulation is considered in fig. 2a and table  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 2
this plain-text file specifies a simulation of a model for trivalent ligand-bivalent cell-surface receptor interaction  introduced by yang et al.  <cit> . this simulation is considered in fig.  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 3
this plain-text file specifies a simulation of a model for trivalent ligand-bivalent cell-surface receptor interaction  introduced by yang et al.  <cit> . this simulation is considered in fig. 2b and table  <dig>  the difference between the files testcase2a.bngl and testcase2b.bngl is in parameter values. the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 4
this plain-text file specifies a simulation of reaction events occurring on disparate time scales. this simulation is considered in fig.  <dig> and table  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 5
this plain-text file specifies a simulation of a model for pentavalent ligand-trivalent cell-surface receptor interactions. the model is based on assumptions similar to those upon which the tlbr model  <cit>  and the model of goldstein and perelson  <cit>  are based. this simulation is considered in table  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 6
this plain-text file specifies a simulation of the model of blinov et al.  <cit>  for early events in epidermal growth factor receptor  signaling. this simulation is considered in table  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 7
this plain-text file specifies a simulation of the model of goldstein et al.  <cit>  and faeder et al.  <cit>  for early events in ige receptor  signaling. this simulation is considered in table  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 additional file 8
this plain-text file specifies a simulation of the model of nag et al.  <cit>  for crosslinking of phosphorylated lat molecules by intracellular grb2-sos <dig> complexes. this simulation is considered in table  <dig>  the file can be processed by rulemonkey and other bngl-compatible tools for simulating rule-based models.

click here for file

 acknowledgements
we thank j. yang for helpful discussions and b. hu for integrating rulemonkey into getbonnie. this work was supported by national institutes of health grants ai <dig>  ca <dig>  ns <dig>  gm076570; doe contract de-ac52-06na25396; and the arizona biomedical research commission.
