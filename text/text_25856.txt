BACKGROUND
as the breadth, depth, and quantity of biological data has continued to grow, these data have increasingly been represented as graphs or networks for the purposes of analysis and visualization. historically, biological networks have been used to represent the organization of metabolic pathways  <cit> , protein complexes  <cit> , and regulatory networks  <cit> , often based on laboratory work carried out before the advent of high-throughput technologies. with the introduction of genome-scale data, datasets from protein-protein interaction networks  to microarray correlations  <cit>  have all been represented as graphs; computational predictions including regulatory networks  <cit>  and functional relationships  <cit>  are generally presented as network structures as well. most commonly, each vertex indicates a gene and each edge a biological relationship, weighted or unweighted  and undirected or directed . not only do graph structures represent a well-understood computational platform for the analysis of these networks on a whole-genome scale  <cit> , they offer a rich visual representation of the varied molecular interactions underpinning systems biology.

the visualization of biological networks has inspired substantial research and tool development, ranging from the detailed organization of small, sparse networks as pathways  to visual overviews of entire genomes  <cit> . another class of online tools focus on visualization of multiple network alignments  <cit> . unfortunately, many biological networks of interest fall between these two extremes of size and detail. genomic data is often large , but not so large that it falls into the class of "huge" network visualization ; tools for exploring such tremendous networks typically hide the details that are vital for understanding biological networks. similarly, while many types of biological networks have a small-world-like property  <cit>  and are thus relatively sparse, other graphs are dense or even fully connected ; standard visualizations of such graphs usually degenerate into uninformative "hairballs"  <cit> . moreover, regardless of network size, useful biological graph visualizations must allow for wide variation in scale and detail: most biologists, when presented with a biological network, want to see both the big picture and the specific interactions surrounding their gene of interest. this introduces a need for biological network visualization that appropriately balances scalability, interactivity, and specificity of data presentation.

we have created graphle as a tool to address these issues and to provide biologists with a tool for exploring large biological networks. as shown in figure  <dig>  graphle consists of two parts, the main one being a java-based client that runs in a user's web browser to display interactive, controllable portions of large biological networks . this client allows a user to navigate within a biological network either horizontally, by focusing different sets of one or more query genes and viewing their network neighborhood, or vertically, by limiting the view to more or less heavily weighted edges and vertices. for example, if edge weights represent microarray correlations, this allows a user to view only the most correlated pairs of genes or to decrease the cutoff and see additional, weaker relationships. underlying the graphle client is a server that can run in a centralized location to manage up to hundreds of biological networks, possibly representing several hundred gigabytes of data. communication between the server and client is optimized so that only the small, focused portions of the underlying networks surrounding a user's query are communicated to the client, which in turn fine-tunes the visualization of this subgraph. graphle thus allows a user to flexibly explore any biological network and to interactively scale between very general and very detailed visualizations of specific genes of interest. an implementation of graphle is available online at http://function.princeton.edu/graphle, showing functional relationship networks predicted for s. cerevisiae by the biopixie system  <cit> , for e. coli by the mefit system  <cit> , and for human beings by the hefalmp system  <cit> ; a downloadable java implementation with source code and documentation are also available at this address.

implementation
graphle is implemented in java using a client/server architecture to modularize the two main components of the system: a graph server that manages a  collection of weighted graphs and associated metadata, and a user interface client that provides an interactive visualization of portions of this data. this partitions the system to allow hundreds of gigabytes of biological network data to be managed on the server while still providing a focused, responsive user experience. the responsibilities of the graph server include accessing large amounts of graph data on disk in a query-driven manner, caching this data to improve performance, executing graph query algorithms based on client input, and providing information on genes  and underlying data  as needed. the graph client must run in a web browser and provide rapid, interactive access to all data managed by the server in an informative visualization. fundamentally, just as google acts as a query-driven server to present an informative subset of the web, the graphle server acts in a query-driven manner to filter and present the content of biological networks.

graph server
the graphle server is based on a java port of portions of the sleipnir c++ library for computational genomics  <cit>  that allow it to efficiently manage multiple large biological networks. subgraphs are retrieved from these networks using any graph query algorithm. the biopixie  <cit>  and hefalmp  <cit>  algorithms are currently implemented and can be configured in the server; the former selects high-scoring genes based on their total connection weight to all query genes. the hefalmp algorithm scores each gene by the ratio of its average connection weight to the query genes over its total average connection weight. regardless of graph query algorithm, the resulting neighborhood is communicated to the client using a standard socket connection. the graph data organized by the server can include continuous or discrete experimental results , predicted interaction networks, ontological structures such as the gene ontology  <cit> , or any undirected weighted  graphs.

graph data is stored using the sleipnir cdat interface, and can thus be interconverted between human-readable text  and a compact binary  format. graphs stored as dabs are automatically indexed and memory mapped; due to memory mapping restrictions on many platforms, an lru cache is used to maintain a subset of currently mapped graphs. retiring a graph from this cache, loading a new ~ <dig>  gene graph, and performing a complete graph query takes at most ~ <dig> s on a modern server, most of which is spent in disk access.

the graph server also maintains metadata describing graphs, vertices, and edges. each graph is assigned to a particular organism  and to a "context" within that organism, where a context can be a biological process, tissue type, or other specific subcategory. vertices are described by a unique identifier  and zero or more synonymous aliases; they may also possess zero or more categories of metadata, with each category consisting of an arbitrary dictionary of key/value descriptors  similarly, edges may also be decorated with arbitrary category dictionaries of metadata; this is particularly useful in the case of graphs representing predicted biological networks, as it provides a convenient way to indicate what experimental data was integrated to produce each predicted interaction  <cit> .

user interface client
the graphle client is a java applet designed to interactively visualize configurable subgraphs of biological networks  in a web browser. the client uses the prefuse library http://prefuse.org for graph layout, supplementing it with an interface for selecting organisms and contexts, displaying vertex/edge metadata, exporting image or text representations of the current graph, and performing graph queries. these queries consist of a user-provided set of genes  sent to the graphle server, which performs a configurable graph query algorithm to return the most relevant portion of the selected  complete graph. in addition to controlling which genes make up the current query, the client also provides realtime filters for vertex and edge inclusion . the combination of these three features allows a user to fluidly and tractably navigate through large, dense, weighted graphs.

RESULTS
graphle provides a web-based system for interactively browsing large biological networks. these graphs can represent experimental results , computational predictions , or any other undirected, weighted graphs. each underlying graph can be very large , and the graphle server can manage hundreds of such graphs along with associated metadata . the graphle client executes in a user's web browser and retrieves subgraphs focused on a specific set of query genes. this query and the displayed subgraph can be interactively modified in realtime, allowing a user to conveniently explore targeted subgraphs of interest extracted from the large body of underlying data.

graph queries and exploration
a graphle query consists of two components: a particular underlying graph specified by an organism and biological context , and one or more gene identifiers specific to that organism . for example, a graphle server may have access to several graphs, each covering a specific context in yeast, human, mouse, or another organism's data; contexts represent variables such as biological processes , tissue or cell types, or developmental stages. a user of the graphle client selects an organism and context from the server-provided list and queries on one or more of the organism's genes. these genes are sent to the server, which uses a configurable graph query algorithm  <cit> , described above) to select the subgraph of the requested network most relevant to the query genes . this subgraph is of sufficiently small size  to be sent to the client in full; the client then provides a configurable visualization of the subgraph for the user.

edge weights in biological networks often represent the strength of our confidence in an experimental outcome: greater sequence similarity, higher correlation between gene expression values, or larger probabilities of functional interactions, for example. similarly, using the concept of guilt by association, most graph query algorithms assume that vertices more strongly connected to the query set in the aggregate are in turn more biologically related to those query genes. correspondingly, the graphle client allows a user to fine-tune the visualization of a queried subgraph by filtering edges by weight and vertices by score ; filter changes automatically rerun the graph layout algorithm, which is animated to maintain visual context. a biologist can thus easily visualize both strong and diffuse clusters in the data, expand from the most related genes to more distant neighbors, and easily track the relationship of the original query genes to these neighbors.

using graphle: investigating genes and sharing data
a typical use of graphle is for a biologist to investigate specific genes in a pre-existing biological network. for example, suppose a yeast biologist is interested in the roles of sac <dig>  and the uncharacterized orf yir003w in the process of mitochondrion organization and biogenesis. using the graphle query shown in figure  <dig>  an investigator can obtain a visualization of functional interactors  as predicted by the biopixie system  <cit> . the number and minimum confidence of the displayed interactors can be controlled interactively , and the data used to make the predictions  and their confidences  are shown directly within graphle. from this, one might conclude that yir003w likely participates in cytoskeletal processes through a variety of potential interaction partners 

conversely, a biologist who generates a large interaction dataset or a bioinformatician with predicted interaction networks can share their data online using graphle. particularly for higher eukaryotes with large genomes, the data for a single interaction network can be gigabytes in size; when tens or hundreds of such networks are predicted, transmitting them en masse becomes impractical. a graphle server can be paired with any web server to share new data for collaborators to query and explore, with few limitations on graph size; the graphle installation at http://function.princeton.edu/graphle shares approximately  <dig> gb of biological networks. the process for creating a new graphle server installation is also detailed on this web site.

multiple organisms and biological contexts
the graphle server organizes its collection of graphs using two biologically motivated levels of abstraction: each graph is assigned to exactly one organism and one biological context . a graph's organism dictates what unique gene identifiers  are used to label its vertices, since the server maintains sets of known genes specific to each organism. a context, practically speaking, can be any unique identifier of a particular graph; in practice, a context is often the experiment that generated the graph data, the computational algorithm that generated a set of predictions, a specific biological system , or a combination of these. for example, the graphle system running at http://function.princeton.edu/graphle offers graphs generated by biopixie  <cit>  in yeast, mefit  <cit>  in e. coli, or hefalmp for human data  <cit> , with contexts representing different biological processes on which the two algorithms focused.

gene  and data  information
graphle maintains arbitrary metadata optionally describing each vertex  and edge in its graphs . for genes, this metadata is most often useful for conveying standard knowledge associated with genes: synonymous gene identifiers, chromosomal location, known functions cataloged in the gene ontology  <cit>  or elsewhere, etc. for edges, this metadata can provide information on the experimental data underlying the graph visualization. this is most important in graphs representing computational data integrations, since each edge might then summarize information from many experimental results - the specifics of which can be provided in the appropriate edge metadata.

exporting graph images and data
graphle provides the opportunity for users to export the current subgraph as an image or as raw textual data . data exported in this manner is provided as a simple edge list linking unique vertex identifiers  with the weight of the edge joining them . the currently visible, filtered subgraph can be exported as an image of quality suitable for publication.

CONCLUSIONS
we present graphle, a system for interactively exploring large, densely connected biological networks. this task has been particularly challenging in the past due to the impracticalities of storing these graphs  and visualizing them in an informative manner . graphle allows collections of dense, weighted graphs to be stored on a server and accessed through focused queries by a web-based client. the data comprised by such graphs can range from experimental results to computationally predicted interaction networks, and graphle allows each vertex  and edge to be annotated with arbitrary descriptive metadata. a web-based client sends sets of query genes from a user to the server and interactively displays the resulting focused subgraphs, which can be manipulated in realtime and exported as data for analysis or as images for publication. the graphle source code, documentation, and a demonstration client can be found at http://function.princeton.edu/graphle. graphle thus provides a complete solution for storing, sharing, and exploring biological networks.

availability and requirements
project name: graphle

project home page: http://function.princeton.edu/graphle

operating system: platform independent

programming language: java

other requirements: java  <dig>  or higher

license: creative commons attribution  <dig> 

any restrictions to use by non-academics: no

authors' contributions
som and ch implemented the software. ch designed the software and drafted the manuscript. ogt coordinated the study. all authors read and approved the final manuscript.

