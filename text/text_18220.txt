BACKGROUND
the annotation of biological data is a common task in different fields of the life sciences, and can be classified into two types: manual and automatic  <cit> . manual annotation refers to the actions of an individual, usually an expert in the field, annotating the evidence extracted during a review of published scientific literature. it is a valuable effort that produces important resources like uniprotkb/swiss-prot, a manually annotated database of high quality protein information  <cit> . automatic annotation is generally based on the hypothesis that two very similar sequences  have a common ancestor and their functions and features should be similar; therefore, any annotation in one of the sequences can be extrapolated to the other. automatic annotation is required because of the flood of data that can not be handled manually; genome projects, among others, are able to generate terabytes of information on a daily basis and it is therefore impossible to have enough experts to annotate this quantity of data manually. however, automatic processes are inexact  <cit> , they can infer erroneous annotations.

a combination of the two types of annotation is required in order to balance the needs for both high quality annotation and large-scale processing. manual annotation thus becomes a quality-control mechanism for the information obtained by automatic methods. currently, most manual annotation is performed by experts employed by the institutions hosting databases, but many additional experts in the wider scientific community could contribute to this effort if the facilities existed to do so. we have designed and implemented the distributed annotation system  writeback, which enables community-based manual annotation of public data. our approach makes the process of manual annotation a collaborative task, whereby any individual can participate by sharing their knowledge in the form of new or edited annotations.

collaborative environments such as wikiproteins  <cit>  or gene wiki  <cit>  use the wiki paradigm in the biological domain. the central goal of wikiproteins is to promote the community annotation of biomedical concepts and their interactions, however it does not offer any tools for annotating specific biological parts of a protein -e.g. positional features. in contrast to the wiki-based approach, which duplicates information from its original source to make it part of the wiki environment, das writeback directly references the source database. das allows the user to access several sources in a federated way and at the same time use tools for editing the data. das  <cit>  is a widely-adopted standard communication protocol, and has an established set of methods to make the annotations from different network locations available in the same context. annotations in das are known as features, and each has a defined set of attributes. for example: type indicates the type of the annotation, start-stop define the position, and method describes the method used to identify the feature. das is motivated by the idea of providing a federated system; a logical association of independent sources distributed over multiple sites, which provides a single, integrated, coherent view of all resources in the federation. this architecture makes several distinct physical data sources appear as one logical data source to end-users. here we describe the implementation of a das writeback system through an extension of the existing das protocol. we present an example of the system and results of a usability experiment to test the implementation.

implementation
a masters thesis at the chalmers university of technology on this topic resulted in the implementation of a das writeback server as a proof of concept  <cit> . the graphical user interface was built using jsp  and the servers were java servlets. the mechanism used to store the new annotations was incompatible with the concept of meta-annotation, which is one of the fundamental ideas of this project. despite this, the experiences and results of that project were very useful and enabled us to avoid several potential issues.

a fundamental distinction between the previous project and the one presented here, is that the former adopts the proposals included in the das/ <dig> document, whereas we propose an extension for das  <dig> . please note that das/ <dig> is an entirely separate specification which is not backwards compatible with existing servers and clients despite being based on the das architecture. the submission forms used in the previous project acted as the start point to get a more specific form for protein annotation, to which we added some user interface aids that are discussed below. furthermore, we thought that the user should be immersed in the context of the proteins that they are annotating, and therefore decided to embed the writeback functionality in a das client, which provides the available information for the target protein. the das writeback system provides the capabilities of reading, writing, editing and deleting features by users of a web application. for the design and development of such a system it was necessary to design an architecture that supports the new features, define an extension of the das specification to accommodate the client-server communication, and implement server and client components. all of these milestones were achieved while trying to follow the same style as the existing das technology, thus looking for an easy adoption of the system by the das community.

when extending the das protocol to support servers that can store edited annotations, we set out to retain compatibility with the existing read-only system of http get requests. development was based on the idea that a das writeback server should have, at the very least, the methods for basic reading/writing operations. in database theory, this is known as crud   <cit> .

the components of the system were developed bearing the following goals in mind:  <dig>  the original annotations of a das source should not be modified directly;  <dig>  the system should be trusted by the user; and  <dig>  the system should promote interaction between the server and users.

architecture
in order to accomplish the first goal, the architecture includes a third party writeback server that stores the changes to a set of annotation, independent of the original source providing those annotations. in addition, changes to annotations can be considered annotations themselves and so the writeback server must provide methods to annotate annotations. this requires three new types of annotation: create, update and delete.

protocol extension
restful web services implement remote procedure calls across the web as an alternative solution to soap  web services. one of the major strengths of the restful strategy is that it is based on such widely adopted standards as http, xml, uri and mime. this makes rest, and therefore das, technologies easy to implement and attractive to both developers and final users. a comparison between soap and rest web services can be found in  <cit> .

one of the main features of the rest architecture is to have a uniform interface. this means that rest resources should be manipulated using a predefined set of operations. in the case of the web, those operations are the  <dig> basic reading/writing operations crud, and the http methods put, get, post and delete are suggested in the literature to specify those actions. these operations "are broadly applicable but they also help uphold specific web architectural properties"  <cit> .

the idea of specifying operations for publishing and editing resources using http is not novel; atompub is a proposed protocol for publishing and editing web resources using http  <cit> . google has also defined a protocol based on atom, atompub and rss <dig>   <cit> . the writeback specification used for this implementation is a combination of features of those protocols, plus the inherent requirements of the das technology. the proposed specification can be found on the das <dig> e web page . it proposes that both input and output documents for the writeback should follow the das gff format ; the http method indicates what to do with the received document  and the http status codes used for das remain valid and will indicate success or failure of the requested command.

server
our implementation of das writeback is an extension of the mydas server  <cit>  and is based on das <dig> . a writeback data source was implemented to store annotations. annotations are the main entity in the data model, and any edits or deletions of an annotation are considered to be versions of the original annotation.

the datasource uses hibernate  <cit>  as its layer to access the persistence data, which brings the advantage of being database-engine independent. the data source has been successfully tested using postgresql, mysql and derby but is expected to work properly in other engines.

client
as a federated system, das delegates most of the integration responsibilities to its clients, giving it a "dumb server, clever client" architecture  <cit> . as a consequence, if the goal is to capture feedback from users , the client should be able to execute several tasks related to both logic and user interaction. one of the goals of this project was to create the perception for users that the writeback functions in a client are native and can be used naturally with existing clients. for this reason, the extension of an existing client was preferable to implementing a new client from scratch. in addition, the writeback server behaves as any other das server for reading purposes, so many software routines of an existing client could potentially be reused for the writeback visualisation.

dasty <dig>  <cit>  is a web-based protein das client, which makes extensive use of ajax in order to make the user's experience as close as possible to using a stand-alone client. dasty <dig> offers a number of features that make it an ideal candidate for the proposed extensions. for example, dasty <dig> has a modular structure based on panels, so it provides the opportunity to group the writeback features in a new panel, thus isolating the writeback content for those who prefer not to use this information. dasty <dig> went through a refactoring process, optimising its code to provide a plug-in framework. the new version is called dasty <dig>  the writeback client has been implemented as a dasty <dig> plugin and is included in its core feature set.

the communication between the client and the writeback server has some differences with respect to the communication with other das servers. firstly, the different http methods  should be used according to their function. for this reason, the proxy component of dasty <dig> was extended to support the appropriate method usage. the second difference is in the amount of information transferred; before the writeback, all the requests in dasty <dig> were using the get method. therefore the information sent from the client to the proxy was limited to  <dig> characters, which is the url size limit for some web browsers and servers. with the writeback functionalities, however, the client sends an xml document that is likely to exceed the url size limit, making the use of other http methods mandatory. this reinforces the applicability of the choice of adopting the restful standard. the communication between writeback client and server is achieved using the das gff xml format, which is defined in the das specification. the client has a logical model to map the das gff format when it is reading from the writeback server, and also starts from this model to build the xml when information is to be sent to the server.

RESULTS
we have developed a das writeback tool by extending existing das clients and servers. the writeback is included as a plug-in of dasty <dig> and is integrated in the latest implementation of mydas, compliant with the current das  <dig>  specification. the extensions performed in dasty <dig> in order to support the writeback capabilities are divided below into reading and writing functions, i.e. if annotations are requested or if a change/creation is submitted, respectively:

reading functions
the writeback server behaves like any other das source when a set of features is requested. the client decides when and how to process this information. for the dasty <dig> writeback plug-in, the user has three different modes to operate :

disable the writeback display
the first mode essentially ignores the writeback information and in this case dasty <dig> just collects and displays the original information from the sources. this is useful for the users who do not want the collaborative information displayed.

writeback as an extra source
dasty <dig> can display the information coming from the writeback server as an extra data source. in this case, all the writeback features will be displayed as new tracks, allowing the users to compare the original annotation with the last version of it in the writeback server. figure 2d shows an example of this display.

merging the writeback with the sources
in this mode, the writeback annotations overwrite the original ones in the graphic. this generates a similar graphic for features as normally rendered by dasty <dig>  but incorporating the modifications that the writeback server contains. the features tagged as deleted will be transparent in the graphic, and just its border will be visible.

writing functions
after authentication, the writeback extension for dasty <dig> allows users to create, update and delete features. the internal pop-up windows of dasty <dig> are reused in order to display the tools to execute these functions in the same context as the selected feature's information. with this goal in mind, a set of tabs was added to these windows. figure  <dig> shows the contents of the four different tabs that the user can choose after clicking on a particular feature. the first tab  is the detailed information that dasty <dig> provides to the user for the chosen feature, the other three tabs give access to the writeback capabilities. below is a description of how the writeback capabilities are made available in dasty3:

update
create
in the top-right corner of the writeback panel  there is a form to add a new feature, which is similar to the one in figure 3b but without any content in the fields. the user enters the details of the feature in the form, dasty <dig> sends them to the writeback server and a new feature is created.

delete
user interface aids
version  <dig>  http://www.biodas.org/documents/spec- <dig> .html of the das specification recommends the use of ontologies in order to standardise both types and evidence codes, and make the task of integrating annotation from several servers easier. the recommendation says that for the values of the attribute cvid and the content of the element type, the so , mod  and bs  ontologies should be used. in the case of the method, the ontology to use is the evidence code ontology.  <cit> .

in order to promote the use of those ontologies, a list of suggested terms from the corresponding ontology is displayed in the edit form  while the user is writing in the fields "type" and "method".

the same form has a set of logic validations to ensure that the coordinates of the annotation are not out of the limit imposed for the size of the protein, and that the start amino acid is before the end amino acid. finally, the orientation and phase components of a das feature are defined by default to non applicable because these genomic-specific fields do not apply to annotations of proteins.

a basic module to allow for user authentication through a login and password was added in the writeback panel . any writing function is conditional on prior login and password validation. the reading functionality does not require authentication.

usability experiment
at the conclusion of two cycles of design, implementation and feedback from the das community, we subjected the system to a final formative evaluation by conducting a usability experiment. the technique used to design such an experiment was constructive interaction  <cit> . basically, constructive interaction consists of executing the tasks in dyads, one of the users is the actor  and the other is the co-actor. the instructions for the test subjects indicate that they consult each other before any action and avoid contact with the facilitator. in this way the ideas are expressed more naturally as a normal communication between the parts of the dyad.

the experiment was executed with the participation of eight postgraduate students organised in dyads. the annotation tasks were based on data extracted from a published paper, demonstrating that the system can be used for a real biological use case. all the sessions were recorded and analysed for further improving the writeback extension. details of the usability experiment are described in  <cit> .

the experiment allowed us to capture fifteen usability issues. only one was classified as a major problem and five as a minor problems. there were two positive findings, two bugs and five suggestions. a detailed list of the findings is included in the additional file  <dig>  all the problems and bugs were solved for the final version of the application, three of the suggestions were implemented and the remaining two were postponed to a future maintenance cycle. the major outcome of the experiment is that the users were able to use the writeback functionalities without extensive training, giving us two important things to highlight: firstly, both server and client function according to the user's expectations, and secondly, the functionalities are intuitive enough to allow untrained users to solve protein annotation tasks.

discussion
at the time of writing this manuscript, the das registry reports over  <dig> data sources. this illustrates the high adoption of das, making it the perfect environment for a collaborative approach as presented here. the writeback specification is now an official extension in das and is considered to be a part of the core protocol. the developed software has been well received by the community. on the one hand, the server implementation is now part of the official development of one of the more stable das servers ; and, on the other hand, the client is included in the set of plugins of dasty <dig>  which is a widely used das client. however, the success or failure of any collaborative system is recognized through the interaction of real users with the system, and additional time is required to be determine this. we hope this system will contribute to creation of a more publicly accessible, easily updatable, and reliable protein knowledge base. the experiment vindicated our user centered approach. the one major issue has been corrected, and in general we demonstrated the usefulness of our concept. all the groups that participated in the experiment were able to create/update das annotations from a published paper, so we consider this to demonstrate that our system is effective, usable and will provide the appropriate environment for the creation and development of a protein annotation community.

CONCLUSIONS
we developed a system for annotating positional features on a protein sequence in a collaborative environment where the consumers of the information have the option to become authors of new annotations or to edit existing ones. from the usability experiment we learnt that das writeback provides an appropriate environment for the creation, editing and deletion of protein annotations. such a system can contribute to the curation of automatic annotation as a community process and also provides a quick way to publish manual annotations while these are awaiting annotation in a curated database. the advantage of das writeback over wiki-based tools is that it enables structured, fine-grained positional annotation of sequences using existing ontologies, rather than free text, thus ensuring addition of annotation in a format compatible with the public databases.

the das writeback server facilitates the collaborative annotation of biological sequences, particularly proteins, within the das environment. an important concept for our work is the notion of community based annotation within the biomedical domain; shifting the annotation from centralised practices to highly distributed schemas for which the participation of the community adds value to the data and improves its quality. the server was tested for performance and was found to support several concurrent users. the client was tested for usability and was found to facilitate the annotation process well.

an important milestone in the future is to provide an implementation of the same technology for other types of genetic material. for example, writeback for dna information or for experimental information such as microarrays. we propose that future developments could include the implementation of filtering by dynamic trust rankings based on both features and users, this may achieve a higher level of confidence in the information of the writeback system.

availability and requirements
project and documentation:

• project name: writeback

• project home: http://code.google.com/p/writeback/

• programming language: java+javascript

• license: apache  <dig> 

• any restrictions to use by non-academics: none

server:

• project name: mydas 

• project home page: http://code.google.com/p/mydas/

• operating system: platform independent

• programming language: java

• other requirements: java  <dig>  or higher, tomcat  <dig>  or other servlet server.

• license: apache  <dig> 

• any restrictions to use by non-academics: none

client:

• project name: dasty <dig> 

• project home page: http://www.ebi.ac.uk/dasty/

• project sources: http://dasty.googlecode.com/

• operating system: platform independent

• programming language: javascript-html

• other requirements: javascript enabled in the web browser; firefox  <dig> + is recommended

• license: apache  <dig> 

• any restrictions to use by non-academics: none

authors' contributions
critical revision of the manuscript for important intellectual input: rj, ag, hh, nm and eb. technical and material support: hh, nm and eb. study supervision: hh, nm and eb. study concept: gs, rj and ag. architectural design: gs and eb. software development: gs. drafting of the manuscript: gs. design of the usability experiment: gs, nm and eb. all authors read and approved the final manuscript.

supplementary material
additional file 1
das gff example. example of a file that follows the das gff format and can be used as input for the writeback server.

click here for file

 additional file 2
usability report. this is list of the findings of the usability experiment for the writeback extension on dasty.

click here for file

 acknowledgements
we thank the national bioinformatics network of south africa for funding the project. rj has been supported by european commission "enfin" grant, contract number lshg-ct-2005- <dig>  this work was also funded by apo-sys, contract number fp7-health-2007- <dig>  we would like to thank elizabeth kelly for insightful comments on the manuscript. we are grateful to the das community and the members of their mailing list, especially to andy jenkinson, for their advice and suggestions during the development of this project. this research was conducted using the resources of the departments of computer science and the computational biology group in the institute for infectious disease and molecular medicine of the university of cape town.
