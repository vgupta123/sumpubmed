BACKGROUND
the variant call format  has become the standard format for storing variants identified in next-generation sequencing  and other studies. vcf files are flexible with eight fixed fields including chromosome , position , known variant ids such as dbsnp identifications , reference allele , alternate allele , variant quality score , filter information summarizing why a variant was or was not considered valid by the variant calling software , and an information field . additional fields containing genotypes for one or more samples may also be present. each row of the file contains information about observed variants at the given position and chromosome, may have information about how the variant was/were identified , and biological annotations . the last columns of a vcf file contain genotype information specifying whether the individual is heterozygous, homozygous reference or variant, or whether it is unknown . finally, vcf files can contain information for a single or multiple samples. alternatively, summary vcf files containing minimal information  can be used. vcf files are used to store all variant types including single nucleotide variants, insertions and deletions, copy number variants, and structural variants. the vcf has become an important format in modern biology and is the only widely used format for variant storage.

several programs exist for manipulating and comparing vcf files: vcf tools  <cit> , bedtools  <cit> , bcftools, and the genome analysis toolkit   <cit> . each of these softwares is flexible and powerful, but missing certain essential features. in this manuscript we describe a novel program, the variant tool chest . the variant tool chest complements existing softwares by extending their capabilities without replicating existing solutions for working with vcf files. we also provide suggestions for building upon the vtc rather than building new tools from scratch. vtc can be downloaded at https://github.com/mebbert/varianttoolchest.

RESULTS
novel features
multi-sample vcf support
as next-generation sequencing continues to gain momentum, researchers need the ability to compile many samples into a single vcf or analyze variants from multiple vcf files. vtc was built to work with a combination of multi- and single-sample vcf files. existing softwares are only capable of handling either a single vcf file, or one multi-sample vcf file. vtc can handle a mix of single and multi-sample vcf files, with the user defining which sample to use from each of the vcf files.

genotype set operations
vtc contains a powerful set operation tool named "setoperator" designed to perform simple or complex set operations using vcf files, including intersects, complements, and unions. while various tools exist to perform set operations on vcf files, vtc improves existing solutions in two ways. first, existing software performs set operations based only chromosome and base pair position. this means that if one individual is heterozygous and another homozygous, the resulting operations would assume that these two individuals have the same genotype. second, existing tools work on only a collection of single sample vcf files. in contrast, vtc can perform set operations on a single multi-sample vcf file, or a combination of multi- and single sample vcf files. furthermore, the user can choose to only perform the operations based on certain individuals from each multi-sample vcf file. these abilities save researchers time by not forcing the user to extract all samples of interest into a collection of single sample vcf files, and allow more efficient storage of genotypes in multi-sample vcf files. for example, it is helpful and makes sense for a researcher to store all genotypes for a single family in a single vcf file; however, the researcher may have interest in performing set operations across multiple families , such as performing an intersection of variants from all affected individuals from all families.

vtc has several operation-specific settings for intersects and complements that allow researchers to specify genotype-level requirements. for intersects, vtc currently has five genotype-level intersect methods and two record-level  intersect methods. the genotype-level intersect methods are as follows:  heterozygous;  homozygous variant;  heterozygous or homozygous variant;  homozygous reference; and  match sample exactly across variant pools. the record-level intersect methods are:  variant; and  position.

the genotype-level intersect methods require that all sample genotypes involved in the intersect fall into the specified category. one caveat is that the heterozygous genotype requires the sample to have a reference allele. so if a sample's genotype has two different variant alleles , though technically a heterozygote, will not be considered as such. this distinction is made assuming that researchers interested in identifying heterozygotes will assume the samples have a reference allele. this also greatly simplifies several corner cases when dealing with multiple variants at a single location.

the record-level intersect methods ignore genotypes and only consider whether the variant pools included in the analysis contain the variant. the "position" method only considers chromosome, position, and the reference allele, while the "variant" method also includes the alternate allele. for the "variant" method, records with multiple alternates are considered to intersect if at least one of the alternates matches.

there are currently three complement methods:  heterozygous or homozygous variant;  exact genotype matches; and  variant. when performing a complement, the "heterozygous or homozygous variant" method requires that all sample genotypes in both variant pool be either a heterozygous or homozygous variant in order to be removed from the variant pool being subtracted from. the "exact genotype" method requires that all samples across both variant pools have the same genotype, whatever it may be. the "variant" method ignores genotypes and only subtracts if the chromosome, position, reference, and alternate match between the two variant pools.

unions combine all variants and specified samples into a single vcf file regardless of genotype. samples missing variants will have a "no call" genotype .

detailed set operation syntax
the set operator tool in the vtc empowers researchers to define set operations with a powerful, simple syntax. this simple syntax has several advantages:  researchers may specify any number of input files  to perform operations;  researchers may specify specific samples within a given variant pool to include in the operation; and  each operation is assigned an identification value  automatically by vtc or specified by the user, so that it can be used in subsequent operations. the general syntax structure for a single operation is as follows :

oid=operator:input_id2:etc.]

where oid is a user-specified id for the operation , operator is the operation of interest , input_id is the variant pool id, and sample_id is a sample id for a sample within the given variant pool. if sample ids are omitted, set operator will use all samples within the variant pool. for example, the following intersect operation will perform an intersect on all samples within the variant pools named "file1" and "file2": myop=i.

operation stringing
as previously mentioned, the set operation syntax allows resulting variant pools to be used in subsequent operations. this feature allows researchers to obtain final results with a single command in most circumstances. continuing with the previous example, "myop" may be specified in a subsequent operation as follows: "myop=i myop2=c".

intermediate files
when performing complex set operations, researchers may want all intermediate operation results to be printed to a file. otherwise, the researcher would be required to perform separate commands. as such, a simple option named "--intermediate-files" will print each operation result to a file named according to the specified "oid" previously mentioned.

header repair
vcf files can be complex, and maintaining a valid vcf header can be challenging. since vtc is built on the code that defines vcfs, it is possible to detect invalid vcf headers and repair them. vtc will automatically add missing required header information such as the "gt" header line when genotypes are being printed. there are many useful  header lines that cannot be anticipated, however. this feature is still under active development.

add/remove "chr"
chromosome numbers in vcf files may be prefixed by "chr" or may simply be the chromosome id . many next-generation sequencing softwares are incapable of handling vcf files that do not use the same convention simultaneously. for example, if one file includes "chr" and another does not, current tools will reject the files. and some tools require the vcf files to have the same chromosome id as the reference sequenced used in the original analysis. vtc will either prepend or remove "chr" from all variant records seamlessly according to the user's specifications by simply including  the "--add-chr" flag.

summary information
several tools exist that will provide high- or low-level detail on a variant pool, but they can be cumbersome. vtc has a tool named varstats that will provide a quick summary of the variant pool, or a detailed variant-by-variant summary. high-level summary metrics include total number of variants, total number of single nucleotide variants , insertions and deletions, structural variants, and variants with multiple alternates. the summary also includes summary depth and quality values. the variant-by-variant summary includes allelic counts and the minimum, maximum, and average read depth and quality scores for each variant.

compare operation
many analyses require researchers to perform several set operations to identify all variants in common between vcfs, those that are unique to a given vcf, and researchers may also need the combined set. researchers are generally not satisfied knowing only the number of variants that fall into each group, such as would be represented by a venn diagram. to obtain all of this information a researcher would perform four set operations: an intersect , two complements , and a union . set operator has a compare operation  that will automatically perform all four operations, print the results to their respective files, and print a summary of each resulting variant pool to the console. this option currently is limited to two input files.

vcf association analysis
association analyses are common using genomic data, but we are not aware of any available tools to perform such analyses on vcf files. the varstats tool in vtc will perform association analyses on all variants in a variant pool if a phenotype file is provided. results, including odds ratios and p-values for each variant are printed to a file. if there are multiple alternates at a given location, varstats will perform the analysis on each alternate and print results on a separate line. this option does not currently provide p-value correction such as multiple test correction, but will be implemented in a future release. these corrections can be easily performed in statistical software.

future directions
filter tool
next-generation sequencing variants are often filtered on various values including quality scores and depth. several tools already exist that, when combined, satisfy most needs for filtering variants. ideally, a single tool would incorporate all of this functionality along with new features for simplicity.

file formats
while vcfs are the most common format for next-generation sequencing variants, there are other file formats that will be incorporated into vtc including plink  and comma-separated value  files. plink is particularly important since there are many existing large-datasets in plink format. in order to compare or combine data in plink format to those in vcf format, there must be a tool to handle this. vtc will enable researchers to read in variant data from multiple formats and perform all of the same analyses seamlessly. this is especially pertinent as a common qc measure of single nucleotide variants identified in ngs studies is to compare ngs variants to variants genotyped on a snp array. array data is most often reported in plink format.

enhanced compare
as different technologies are compared, there is a need to determine concordance between samples tested on multiple technologies. vtc will implement an "enhanced compare" option that will report genotypes that are perfect matches, imperfect matches , and no matches for the same samples on different technologies.

additional setoperator options
anticipating all possible uses and hypotheses is difficult with any new tool, especially with data as complex as genomic variants. responding to these needs is important and will likely involve updated setoperator options. a few options we plan to implement are to accommodate specialized union operations, similar to those for intersect and complement. specifically, users may need to union only heterozygotes, heterozygotes or homozygous variant, only homozygous variant, or only homozygous reference.

incorporate new and existing tools
building useful computational tools that interface well together benefits researchers across all disciplines. new tools, while generally valuable to the research community, often do not integrate well with other tools used within a discipline, causing end users grief. there are likely many reasons for this fragmentation, but we would like to address two major sources:  contributing to an existing project can be costly  and difficult; and  computational researchers need to publish their work to demonstrate academic productivity.

while object-oriented programming mitigates much of the difficulty, contributing to an existing project is still difficult because of the time and effort required to become familiar with existing source code. many projects have hundreds of classes with complex interactions that make adding new functionality daunting. in many cases, a researcher may opt to write a separate tool simply because it is more feasible. unfortunately, this causes fragmentation between tools. to promote well-integrated tools, vtc was written specifically to facilitate contribution with its easily extensible code structure. any computational researcher can begin a new tool without needing to familiarize him/herself with other complex code.

contributing to existing source code can be challenging, but publishing requirements also present a challenge to computational researchers, since publications are an essential measure of academic productivity. if a computational researcher adds a novel algorithm to an existing tool, s/he may forfeit the opportunity to publish the algorithm and get feedback from the community. because vtc is simply a collection of useful tools, however, researchers can contribute an independent tool or algorithm with an independent name and publish it independently.

as we mentioned above, it is not possible to predict all possible operations and uses for software like vtc and we anticipate the need for additional functionality. to this end, we invite all computational researchers to contribute independent tools associated with variant analysis to vtc. this will benefit researchers by promoting tool integration within a simple, intuitive framework.

CONCLUSIONS
vcf files are the standard format for storing variants identified in next-generation sequencing  and other studies, but working with them can be challenging. in this manuscript we describe a novel program, the variant tool chest . the variant tool chest is easily extendable and complements existing softwares by extending their capabilities without replicating existing solutions for working with vcf files. vtc is available at https://github.com/mebbert/varianttoolchest

