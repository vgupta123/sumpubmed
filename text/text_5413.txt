BACKGROUND
dna filter- and microarrays are widely used in functional genomics research. complete genomes can be spotted on such arrays. after hybridization and image analysis large data tables are generated. from each hybridization ten thousands  to hundred thousands  of data lines for all measured gene features are generated and saved. data may be saved as structured xml-documents, mostly using well defined and standardized mage-ml  <cit>  object model and definitions. this requires subsequent use of programs that can import xml documents . alternatively, most programs can generate generic tab-delimited text files, which can easily be imported into nearly any spreadsheet or statistics program or databases. depending on the study type, dozens to hundreds of these data tables are generated. before the actual statistical or cluster analysis, these data tables have to be combined and merged to expression matrices, gene annotations or sample informations may be appended, renewed or extended. often additional data values are to be computed or certain features must be filtered out.

one way to perform such tasks can be the use of commercially available microarray databases with integrated handling and analyses tools . large institutes have developed customized solutions . alternatively open source solutions  may be setup. however, all such solutions require considerable computer expertise both for the installation set-up and for the system maintenance.

some of the tasks mentioned above may also be solved with standard spreadsheet programs from office packages . unfortunately, both the commercial as well as the freeware solutions have severe limitations. data files may not exceed  <dig> rows and/or  <dig> columns and may create bizarre results when using incorrect national settings for number or time formats.

moreover, one can implement such tools "de novo" , which again requires expert knowledge from bio-informaticians. in fact, this approach requires an installation of the respective development environments and – even more critical – detailed background knowledge and experience on development and optimization of algorithms as well as the implementation of such tasks.

in contrast, our here presented solution, tablebutler is a standalone application  which can perform most of the commonly used operations prior to statistical or cluster analysis of microarray data. at present, tablebutler exclusively works with tab-delimited data files, avoiding the need to keep track with file format changes in proprietary spreadsheet formats or varying xml-dialects to enwrap the information. the rich ms windows user interface allows convenient set-up of operations for non-bioinformatics educated users. by default, all derived data files are generated with new file names, thus preventing data loss due to erroneous actions.

parameters of interactively set-up filters and operations may be saved and recalled later on for similar operations. this guarantees consistent pre-processing of data tables across project and users.

implementation
file selection
multiple files, e.g. primary result tables from single microarray hybridizations, may be selected for batch processing. an "explorer" like file selector allows selecting files from different folders or drives. furthermore, all data files with a given file mask from a complete folder tree may be selected with a few mouse clicks. lists of selected files may be saved and recalled later. last visited folders are memorized and can easily be revisited. see figure  <dig>  for a snapshot of tablebutler's file selector.

file merging
data tables are merged by combining rows from different tables, which contain the same identifier in a specified key column. this is a typical task when renewing or extending the annotations for all genes from a microarray with a gene index list. what sounds trivial for a few genes becomes challenging when re-annotating  <dig>  features from a filter array with  <dig>  gene annotations from genbank or ensemble. one reference file may be inserted into all selected files. vice versa, all matching genes from the list of selected files are assembled against the reference. see figure  <dig>  for a snapshot of tablebutler's table merger.

column rearrangement
during statistical analysis or clustering it might be handy to change column order, e.g. to group experiments. also, when submitting microarray data to databases not all data columns from the raw hybridization data tables are required. published combined data matrices may contain several thousand data columns  <cit> . with tablebutler, one can easily reorder or reduce the columns in all selected data files in a batch. the re-order pattern can be comfortably set-up in a drag-and drop manner. first, one clicks the column in a source preview, and then one clicks the destination column in a result-preview for each required column. for large data files, regular expressions can be used to generate the pattern for hundred or thousands of columns. in addition, lists of externally generated column names may be used for reordering. see figure  <dig>  for a snapshot of tablebutler's column rearranger.

row filtering
not all rows  from a hybridization file are required or suited for subsequent statistical or cluster analysis. spotting controls or spike-in genes for quality tracking of the wet-lab processing steps  do not contribute any biological information for the study. low quality genes can increase the signal noise in the statistical tests. row filtering can be used to remove thus data rows from the data. rows may be filtered upon text or numerical content of a single data column. several filters  may be combined in a single run.

when filtering multiple files simultaneously, the single file's filter can be combined  and applied to all files, thus generating a consensus list of genes fulfilling all filter criteria from all data tables. see figure  <dig>  for a snapshot of tablebutler's row filter.

compute
often additional data values or data transformations may be useful or required before further analysis. tablebutler offers a variety of simple arithmetic, textual and statistical functions that are applied to data values in each gene row:

• simple arithmetic 

• basic statistics, ,

• spot coordinate transformation ,

• basic normalization 

• data imputation for missing values 

• replica averaging of replicated genes 

• text functions 

• date to number conversions

similarly, a set of functions is available to re-compute data values based on mathematical operations applied to whole data columns. these functions serve mainly for simple normalization  across complete columns . see figure  <dig>  for a snapshot of tablebutler's column re-computer.

building a matrix
final adjusted and normalized ratios  or intensities  are combined into an expression matrix. tablebutler allows to build generic expression matrices , or matrices with multiple data values per condition . in certain cases, transpositions of matrices may be required, which can also be performed. see figure  <dig>  for a snapshot of tablebutler's matrix builder.

splice data tables
here various functions to cut and combine data tables are found:

• remove certain numbers of rows/columns from data files

• append files 

• remove rows with replicated values in key columns 

• logically combine data files using a key column .

data view
provides several graphs to visually inspect data with standard graphs:

scatter plots, r/i-plots, quantile plots, line graphs, histograms, box plots, heat maps

in most cases, multiple operations  may be combined. some operations  add multiple new columns to the data files. here it is recommended to run such operations separately. parameter sets for operations may be saved and recalled later, allowing standard processing of homologues data sets.

scripting
furthermore, multiple filters may be combined in scripts, to realize complicated data workflows. an internal script editor allows composing scripts, supplying allowed script commands in nested pop-up menus. scripts can be prototyped interactively, saving customized parameters for the single operations. scripts may be loaded and executed manually or may be run automatically when tablebutler is started with command line parameters.

tablebutler server
tablebutler may even be run as server: a user-defined folder is watched. any tablebutler scripts dropped to this folder are automatically loaded and executed. the script folder or referenced data folder may be located on shared network resources.

RESULTS
tablebutler is a native win <dig> application implemented with borland's delphi  <dig> and runs on win <dig> operation systems . it does not require any additional supporting programs or libraries. tablebutler can be copied to any computer with basic user privileges.

tablebutler was applied in several collaborative research projects for preprocessing of gene expression data from large format filter arrays , custom spotted c-dna microarrays  and commercial affymetrix .

for more details about tablebutler's functionality and usage, visit the web page: .

CONCLUSIONS
tablebutler is a monolithic windows application. it is implemented to handle, join and preprocess batches of large tab delimited ascii data files. the intuitive user interface enables scientists  to setup workflows for their specific problems by simple drag-and drop like operations. special knowledge about scripting languages  is not required. tablebutler can be executed without installation even from a memory stick. it does not require any supporting libraries or tools.

tablebutler may be applied to any kind of tab delimited data table files: dna expression data, micro-rna data, protein data, etc., even lists of telephone numbers or mp3-songs.

authors' contributions
cs designed, implemented tablebutler and drafted the manuscript. aa und uw participated in design of functionality and user interface and applied tablebutler in research projects. ph revised the manuscript. all authors read and approved the final manuscript.

