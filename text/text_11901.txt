BACKGROUND
chromosome recombinations within species are a powerful way to create variation, eventually leading to selection. in some species, such as humans, recombinations exchange highly similar chromosome segments differing at isolated positions called single nucleotide polymorphisms. the identification and ordering of these events gave rise to the multiple population genetics models that try to reconstruct the history of the species  <cit> .

in a very different world, phages often use recombination as a radical invention process: "let's exchange our legs for blades, and see if we fare better." legs and blades have no detectable similarity but have the same function, in this case running. we will call these events modular recombinations in order to distinguish them from  chromosomal recombinations.

the mechanisms allowing modular recombination are still debated. some argue that new phage architectures are selected from a large number of random breaks and repairs that mix different genomes, a process called illegitimate recombination  <cit> . others, such as  <cit> , suggest that divergent sequences are transferred from one phage to the other using flanking homologous sequences, as illustrated in figure  <dig>  the authors give compelling evidence of the occurrence of this type of recombination in the family of phages that infect staphylococcus aureus and in various other families.

our goal is the detection, reconstruction and ordering of modular recombination events, using the model proposed in  <cit> . we apply our methods to medium length siphoviruses  that are by far the most common in databases, and the most studied since they seem to be partly responsible for virulence factors associated with antibiotic resistant bacteria  <cit> .

phage structure and modular theory
when the whole sequences of two phages involved in recombination events are compared, there is an alternating pattern of similar and divergent sequences. this phenomenon was observed in the last century and gave rise to the modular theory  <cit>  which postulates that phages are assemblages of modules that carry identical biological function with possibly different tools. an example of such a module is the integrase gene, that allows the phage to insert its own genome into the circular genome of its bacterial hosts. the nucleotide sequence of an integrase is highly correlated with the specific bacterial gene where the insertion will occur: in staphylococcus aureus, around  <dig> different integration sites are known  <cit> , with corresponding integrase genes. two otherwise identical phages may differ, for example, only in their integrase genes.

we will refer to the different implementations of a module as variants of that module. the number of modules in a phage varies according to the various informal definition of module: each phage species has  <dig> to  <dig> main modules, but these can be subdivided into a few dozen. the number of known variants typically ranges from  <dig> to  <dig>  a standard organization of modules for siphoviruses is the following:

 <dig>  lysogeny. this module contains the integrase gene.

 <dig>  dna metabolism.

 <dig>  head morphology and dna packaging.

 <dig>  tail assembly.

 <dig>  lysis.

a last characteristic of co-linear phages is that multiple copies of their linear genome are physically concatenated during their killing cycle. recombinations that occur at this stage may involve the end of one of the concatenated copies with the beginning of the next copy: to analyze recombinations occurring at that stage, we need to make the hypothesis that the phage genomes are circular, thus the list of modules given above must be interpreted as circular. the integrase gene, for example, is often the first gene in a siphoviruses genome sequence, but many begin with tail assembly genes. for simplicity, we will assume that each phage sequence is described by a linear sequence that begins with its integrase.

in order to detect possible modular recombinations, it is necessary to know the position and variants of each module in a given set of phages. this knowledge is based on the notion of alignment of phages.

alignments of phage genomes
phage genomes are not alignable in the usual bioinformatics sense, because many variants of the same module are not comparable in terms of nucleotide composition and/or length. however, when comparing different phages, we want the different variants of the same module to be 'aligned'. this paradox is solved by the following definition:

definition  <dig>  an alignment of a set of n co-linear phage sequences is the identification of k positions of each phage sequence, at least one of them immediately before the first gene, subdividing each sequence into k possibly empty segments. we refer to the sets of n segments at the same position as a module of the alignment, and group the non-empty segments within a module into variants.

note that definition  <dig> does not contain explicit rules to tell when two segments are the 'same' variant. in practice, very high sequence identity is the standard, since these will be the segments that determine the homologous participants of the modular recombination events.

an alignment uses both sequence similarity and functional annotation of phage genes: for well-annotated genes, the modules of the alignment correspond to biological reality; for unannotated genes -- which are currently the vast majority -- the modules of the alignment are essentially constructed using sequence similarity. these techniques are described in more detail in the methods section.

mathematical model of modular recombinations
a phage is represented by a list of integers a <dig>  a <dig>  . . . , ak. each integer ai ≥  <dig> represents a variant of module i, and the list is circular, in the sense that module k is adjacent to module  <dig>  the number of modules k is fixed. the number of variants of each module is a constant, though the number of variants may differ from one module to the next. when a module is absent in a phage, its variant number is set to  <dig>  thus our model of modular recombination can represent deletions.

for example, consider the following four phages with  <dig> modules:

 a=214321b=224202c=224321d= <dig> 

a modular recombination between two phages:

 a1…ai…aj…akandb1…bi…bj…bk 

exchanges the segments ai . . . aj and bi . . . bj, provided that ai = bi, aj = bj, and both are non-zero. the modules corresponding to ai and aj are called the flanking modules of the recombination. for example, a recombination between phages a and b, with i =  <dig> and j =  <dig>  may produce phage c:

 a=214321b=224202_c= <dig> 

alternatively, phage c may be produced by a recombination of a and d:

 a=214321b=224221_c= <dig> 

throughout the paper, a parent/child relationship is written with an arrow so that a → b implies that a is a possible parent of b. we say that c is a potential child of a and b, written a → c ← b, or of a and d, written a → c ← d. a recombination history is simply a set of recombinations.

the first problem that we study in this paper is the following:

problem  <dig>  given a set  p of phages, reconstruct a recombination history such that a maximum number of phages in  p are produced by recombinations of elements of  p.

reconstruction of recombination histories may be hampered by missing data: the number of sequenced phages is growing, but it is difficult to know how well the phage populations are sampled. our second problem is to develop techniques to solve the following:

problem  <dig>  given a set  p of phages, find a minimal set of missing parents  q such that a maximum number of phages in  p are produced by recombinations of elements of .

RESULTS
alignment of  <dig> staphyloccocus aureus phage genomes
we selected a set of  <dig> phage genomes having reasonably good annotations, possessing an individual accession number, and cataloged in a recent paper whose goal was to classify them  <cit> . using a semi-automated technique , we aligned the  <dig> sequences over approximately 80% of their length, including the complete subsequence spanning from the terminase genes to the amidase genes, which covers at least 50% of the genome sequences. four other parts of the sequences were selected: the integrase genes, the repressor genes, part of the replication modules, and the dut gene. figure  <dig> shows the modules and variants obtained from the alignment for the portion between the terminase genes and the tape measure genes. additional file  <dig> contains the full alignment in detail.

the total number of modules is k =  <dig> and the number of non-empty variants ranges from  <dig> to  <dig>  a surprising discovery is the presence of rather small - around  <dig> bp - highly conserved segments across all, or almost all, phages of the set. these occur at regular intervals along the first half of the sequences and seem to act as recombination hubs between larger modules. details about their use is given in the next section.

two sequences in variant i share at least m %, identity, and a sequence in variant i shares at most m% identity with a sequence in another variant.

anchor modules correspond to well-annotated genes or regions. in the alignment of figure  <dig>  the portal and tape measure genes are anchors. the portal module is the most variable with  <dig> variants. a measure of quality of a module is how well the variants are separated, that is, how similar are sequences in the same variant, and how dissimilar are sequences in different variants. table  <dig> gives these values for the  <dig> variants of the portal module. as one can see, two sequences in the same variant share at least 94% identity, and two sequences in different variants share at most 76% identity. the dataset extracted from the alignment is in additional file  <dig> 

modular recombination history
the first step in the reconstruction of the recombination history is to identify all observable recombinations consisting of two parents and their potential child: p → q ← r. this detection step is easy, since we can simply check all trios for potential parent/child relationships. for the dataset of  <dig> phages we find  <dig> observable recombinations, summarized in figure  <dig>  involving four potential children. one of them, f <dig>  has a clear set of parents, and phage f <dig> has f <dig> as a parent with a large number of other potential parents. the relationship between phages f <dig> and f <dig> is less clear and is the root of the complexity of the procedure: each of them can be a parent of the other, and each of them has only one possible set of parents. this yields two different solutions containing three recombination events, once the second parent of f <dig> is chosen. in general, cycles in the graph such as this, along with longer cycles, can have complex interactions that contribute to making the problem of removing cycles challenging.

however, there is always the possibility that some parents are not yet discovered, not yet sequenced, or even extinct. using the techniques described in the methods section, we constructed three 'virtual' missing parents that contribute to five more observable recombinations. the predicted modules of the missing parents are given in additional file  <dig>  and the resulting graph is presented in figure  <dig> 

the most interesting result is that this new solution solves the problem of who between f <dig> and f <dig> came first. phage f <dig> appears as a parent of phage f <dig>  thus freeing it to become the parent of f <dig>  such a combinatorial prediction can sometimes be confirmed at the sequence level. indeed, phages that are involved in a sequence p <dig> → p <dig> → p <dig> may share inherited modules, and the phylogenetic history of those shared modules should be consistent with the prediction. in this case, phages f <dig>  f <dig> and f <dig> share  <dig> such modules, and all of them confirmed the prediction.

another interesting observation is the re-use of flanking hub modules in the predicted recombinations. of course, the  <dig> recombinations require the use of a total of  <dig> flanking modules. out of these  <dig> flanking modules, at least  <dig> belong to a set of  <dig> short modules: {a <dig>  a <dig>  a <dig>  a13} - numbers refer to the columns of the full alignment given in additional file  <dig>  this means that at most  <dig> of the flanking modules belong to the remaining set of  <dig> modules.

methods
phage genome alignments
the alignment technique relies on two basic constructions: blocks and anchor modules.

for constants m and m, a block  bis an alignment of ℓ subsequences b <dig>  b <dig>  . . . , bℓ from a set of phages  psuch that:

 <dig>  each phage in  p has at most one subsequence in  b.

 <dig>  the identity between two sequences in  b is greater than m %.

 <dig>  the identity between a sequence in  b and any other subsequence not in  b  is smaller than m%.

the requirements for blocks are generally hard to meet for most sets of genomes, but are rather common in bacteriophages, often with values of m larger than  <dig>  together with values of m smaller than  <dig>  as shown in  <cit> .

an anchor module for a biological function f is a collection of blocks  where each block of the collection should have a sequence annotated with function f. we have:

proposition  <dig>  if the genomes in  pare co-linear, then the anchors can be linearly ordered such that the first coordinates of all corresponding subsequences in a phage p are increasing.

it thus makes sense to consider the set of non-empty sequences s = {s <dig>  s <dig>  . . . , sn′}, n' ≤ n that links two anchors. the next step in the alignment is to construct a set of compatible blocks over s:

definition  <dig>  two blocks are compatible if no sequence in one block is a subsequence of a sequence in the other one.

a set  c of compatible blocks is partially ordered by the first coordinates of the subsequences of the phages that two blocks have in common. thus, given a linear extension of the partial order, a sequence of modules containing one block each can always be defined. 

the quality of an anchor module is assessed by the differences m − m for each block it contains. the quality of an alignment between two anchor modules is assessed by the differences m − m for each block, and the percentage of the nucleotide positions of the sequences in s included in the blocks.

reconstruction of the recombination history
given a set  p of phages, the set  c of potential children is the subset of phages in  p that can be produced by at least one recombination of two phages in  p, called observable recombinations. a parents graph is a directed graph with vertices  p and two edges for each possible observable recombination, one from each parent to the child. figure  <dig> depicts a parents graph. a recombination graph is a subgraph of the parents graph that is acyclic, where each node has either two incoming edges, its parents, or none. a full graph is a recombination graph in which no recombination can be added without violating the acyclic condition. a maximum recombination graph is a graph that contains a maximum number of recombinations, and is clearly full. figure  <dig> depicts a maximum recombination graph with solid edges.

in a recombination graph, the subset  f of forefathers is the set of vertices that have one or more outgoing edges, but no incoming edge. the subset  d of descendants is the set of vertices that have two incoming edges.

there is a simple algorithm that constructs a full recombination graph subject to the constraint that its set of forefathers is included in a fixed subset s⊆p:

algorithm  <dig> is the greedy answer to a maximization problem that is the first step of the solution of problem  <dig>  we first need a suitable family of feasible solutions that will be shown to form a matroid.

definition  <dig>  let  pbe a set of phages, with potential children  c. a subset  eof  cis feasible if there exists a recombination graph with forefathers f⊆such that e⊆d.

proposition  <dig>  the family of subsets of  cformed by feasible subsets is a matroid.

algorithm  <dig> construct a full graph with forefathers in  s

input: list  l of observable recombinations and set of potential forefathers s

output: a full recombination graph  g whose forefathers are in s

1: s′:=s

2: repeat

3:      for each recombination p → q ← r in  ldo

4:        if p, r ∈ s' and q s' then

5:          add p → q ← r to  g

6:          add q to s′

7:        end if

8:      end for

9: until nothing is added to  g

proof. clearly, any subset  e of a feasible solution e′ is feasible. suppose that |e|<|e′|, let  g be a recombination graph with children  e and descendants  d, and g′ be a recombination graph with children e′ and descendants d′. pick one vertex x <dig> in e′\e. we construct a sequence x <dig> . . . xk, such that xk is in e′\e, and xk has two parents in d∪f. if x <dig> has two parents in d∪f, then we are done and k =  <dig>  if xi is in ε'\ ε and has at least one parent outside d∪f, choose one parent to be xi+ <dig>  eventually the process must stop, since all descendants of a recombination graph have at least one ancestor with both parents in  f. phage xk can be added to  e without creating a cycle.

corrollary  <dig>  algorithm  <dig> computes a maximum solution to problem  <dig> with the constraint that the forefathers are in p\c.

we now turn to the problem of constructing a maximum recombination graph. clearly, the set of descendants  d is included in  c, thus |c| is an upper bound for the maximum number of phages produced by recombinations. the converse is not always true, but almost, in the sense that all potential children in  c are necessarily members  of any full recombination graph. we call it the no-child-left-behind property:

lemma  <dig> . if a recombination graph for a set of phages  pis full, then the set of potential children  cis included ind∪f, the union of the forefathers and descendants of the recombination graph.

proof. suppose that q∈c is not in d∪f. then q has no child in the graph, and there exist parents p and r such that p → q ← r. so adding the edges from p to q and r to q cannot create a cycle, which is a contradiction to the fullness of the graph.

the main consequence of lemma  <dig> is to redefine the optimization goal of problem  <dig> from maximizing |d| to minimizing |c∩f|, since the set  cis fixed. at this point, we strongly suspect that the general problem is np-complete. however, as we will see in the next sections, with proper optimization the most complex biological data that we could find yielded instances of size up to  <dig>  which can easily be solved by exhaustive search. the optimization step is a consequence of the following proposition that extend easily computed partial solutions to a maximum solution.

proposition  <dig>  any full recombination graph whose forefathers are in p\cis either a maximum recombination graph, or can have recombinations added to it to become maximum.

proof. let  g be a full graph with descendants  d, whose forefathers  f are in p\c, and let  m be a maximum graph with descendants d′ and forefathers f′. consider the acyclic subgraph of m′ of  m induced by the forefathers f′\f, and the vertices d′\d. by construction, the vertices and edges of  g and m′ are disjoint. any vertex of d′\d is connected, in m′, to at least one parent, otherwise this would contradict the fullness of  g. for vertices that have only one parent in m′, the other one must be in  g. therefore all the missing arcs go from vertices of  g to vertices of m′, and can be added together without creating cycles.

combining these results, problem  <dig> can be solved with the following steps:

 <dig>  compute a full recombination graph  g using algorithm  <dig> and the set p\c.

 <dig>  let  b be the subset of potential children  c that are not in  g. find a minimum subset f′ of  b such that all elements of b\f′ have parents in  b,  g, or p\c.

lemma  <dig> guarantees that step  <dig> has a solution, and proposition  <dig> guarantees that the procedure will give a maximum solution.

missing parents
we propose here a technique for reconstructing missing parents that is based on the following observation:

proposition  <dig>  the recombination children of phages p and q share at least three consecutive modules with each parent.

suppose phages p and q share at least three consecutive modules then phage p may be a parent of phage q, or phage q may be a parent of phage p . those two hypotheses will be denoted p → q and q → p , or simply p ↔ q. a reconstruction history must decide, for each pair of phages that share at least three consecutive modules, whether p → q, q → p , or neither.

when p → q, it is possible to partially identify the missing parent. let p = abxcdy, and q = a'bxcd'y' be a decomposition of the sequences in which bxc is a maximal sequence of at least three consecutive shared modules between p and q: that is, modules a and a' are different, modules d and d' are different, x is a sequence of at least one module. then, if p → q, the missing parent can be written as pq = a'b ∗ .. ∗ cd'y', where the ∗..∗ represents any sequence of modules of length |x|, but different from x. 

for example, consider the following set of phages, that contains only one observable recombination a → c ← d:

 a=214321c=224321d=224221g=123112h= <dig> 

we have: a ↔ c, a ↔ d, c ↔ d, and g ↔ h. these relations give  <dig> templates for missing parents. here are the templates for the relations g ↔ h:

 g→h←gh=22***2h→g←hg=12*** <dig> 

two or more templates are compatible if the sets of phages that they represent have a non-empty intersection.  the missing parents graph is the graph of the compatibility relation over a set of phages and all the missing parent templates deduced from the set. figure  <dig> shows the corresponding graph for the above example. in this example, the edge exists between templates ca =  <dig>  <dig>  <dig> ∗ ∗ ∗ and dc = ∗ ∗  <dig>  <dig>  <dig> ∗ since they are compatible as they do not specify conflicting variants for any module;  <dig> and '*' are compatible,  <dig> and '*' are compatible,  <dig> and  <dig> are compatible, and so on.

cliques that contain an observed phage correspond to observable recombination events. the most interesting cliques are those whose elements are all templates: they describe missing parents. for example, in figure  <dig>  the clique that contains gh =  <dig>  <dig> ∗ ∗ ∗  <dig>  cd = ∗ ∗  <dig>  <dig>  <dig> ∗ and ac =  <dig>  <dig>  <dig> ∗ ∗ ∗ spells out phage  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  which is the only phage that belongs to all sets represented by the three template vertices of the clique. opting for this solution, we would infer one missing phage b =  <dig>  <dig>  <dig>  <dig>  <dig>  <dig>  and three recombination events: a → c ← b, c → d ← b, and g → h ← b.

how to add missing parents

adding missing parents must be done carefully in order to insure that the procedure converges if applied recursively. for the case of the data in the results section, we used the following guidelines:

 <dig>  a missing parent must not be a potential child of the set of phages to which it is added.

 <dig>  it must increase the total number of recombinations by at least two.

 <dig>  missing parents of orphans, these being the members of c that have no parents in the recombination graph, have priority.

selecting an optimal choice of missing parents could be, in theory, a difficult problem. since it was not the case in practice, we postpone the theoretical analysis to a subsequent paper. it will also be worthwhile to study the properties of the set of all optimal solutions, especially in terms of what is common to all optimal solutions.

CONCLUSIONS
this paper provides, to the best of our knowledge, the first formal attempt to reconstruct the modular recombination histories of families of phages. the results are encouraging, but raise many questions and point out many directions for further development.

our next goal is to apply these techniques to the whole family of phages that co-infect staphylococcus aureus, currently thought to contain more than a hundred members. this will be computationally intensive, but our preliminary studies suggest that this will be feasible.

since staphylococcus aureus bacteria are the source of many infections in human beings, strains have been collected in hospitals and other sites all over the world. another direction would link the recombination histories to geographical data.

other important phage families are also under special scrutiny, for example the phages that infect lactococcus lactis bacteria that are essential in the production of cheese  <cit>  and whose presence can lead to taste alteration or complete fermentation failure.

competing interests
the authors declare that they have no competing interests.

supplementary material
additional file 1
the complete alignment. this file contains the complete alignment as described in the results section.

click here for file

 additional file 2
the dataset extracted from the alignment. the variants and modules obtained from our alignments, along with missing parents computed using our methods.

click here for file

 declarations
this work was partially supported by nserc grant 121768- <dig> 

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2013: proceedings from the eleventh annual research in computational molecular biology  satellite workshop on comparative genomics. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/14/s <dig> 
