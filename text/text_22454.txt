BACKGROUND
identification of biological modules plays a key role in bioinformatics because it can reveal interesting groups of proteins/genes having strong interactions, which may be related to some biological functionalities. in the literature, many methods have been proposed for this purpose. one popular way is to make use of clustering algorithms  <cit> , which reveals module patterns by clustering proteins/genes into groups such that intragroup similarities are maximized while inter-group similarities are minimized. the performance of this type of methods relies significantly on the similarity function used during the clustering process. due to this shortcoming, some researchers also tune to matrix factorization techniques for detecting biological modules. for example, in  <cit> , singular value decomposition based methods have been studied and developed to detect modules from gene expression data. in  <cit> , nonnegative matrix factorization related methods have been developed to cluster and explore biological data. recently, cur decomposition, a new method approximating original data matrix by selecting a set of columns and rows, has been applied to analyze microarray data and snp data  <cit>  because of its scalability and interpretability. this method may possibly be used to cluster large-scale biological data as well. however, all these methods are developed for analyzing biological data represented as matrix form, which models interactions between only two types of variables.

with rapid acquisition of biological experiments from different laboratories or studies based on different databases, many higher-order biological data representing interactions between more than two types of variables can be obtained. for instance, researchers in different laboratories may be interested in analysing gene co-expression networks under different stimulus, each of which is represented as a gene×gene matrix. integrating these matrices results in a higher-order biological data, namely a gene×gene×stimulus tensor, and finding module patterns from such data tends to offer a better view of the underlying biological structures. therefore powerful methods which are able to detect modules with integrative analysis are urgently called for.

in the literature, several integrative analysis methods have already been put forward. in  <cit> , li et al. developed a framework to find recurrent heavy subgraphs from multiple weighted networks represented as a 3d tensor, i.e., gene × gene × network. in the framework, a tensor objective function is proposed and solved, the solution of which helps to discovery a heavy subgraph. in  <cit> , omberg et al. employed higher-order singular value decomposition to perform integrative analysis of multiple mircoarray data from different studies. zhang et al. extended nonnegative matrix factorization method for exploring protein modules from multiple data sources  <cit> . in  <cit> , a jointcluster algorithm was proposed to extract coherent clusters from multiple networks. however, all these methods are not suitable for analyzing time series data, which is also a task of particular importance in bioinformatics.

in this paper, we are interested in identifying biological modules from multiple time series data with integrative analysis. there are two ways to build up such data in general. one is to collect and accumulate from different time series data sources  <cit> , and the other is to perform time series biological experiments under different stimulus/conditions  <cit> . the second way is usually more popular. for instance, in  <cit> , researchers studied the time series expression profiles of genes in arabidopsis thaliana under several abiotic stimulus; in  <cit> , researchers studied time series gene expression of several sclerosis patients after ifn-β injection. joining such data together, we can form a higher-order time series tensor, e.g., a gene×condition×time tensor. identifying modules of genes, conditions and time-points from such tensor data could offer us a better understanding of the corresponding biological processes. for example, supper et al. proposed edisa algorithm by extending the 2d iterative signature algorithm to extract and analyze such modules  <cit> .

we propose in this paper, multifactv, a method to find modules from tensor time series data. this method employs a tensor factorization objective function and makes use of the decomposition results to identify modules. as we consider time series data, the modules are expected to be as consecutive as possible in time dimension. therefore we incorporate a time-related regularization term of total variation into the objective function. different from the conference version  <cit> , we have re-derived the factorization formulas and updated the algorithm because we do not assume that input biological tensor is nonnegative in this paper. we have compared multifactv with edisa  <cit>  and metafac  <cit>  on synthetic datasets, and the results have shown that mulitfactv outperforms the other two algorithms. in addition, we have applied multifactv to arabidopsis thaliana root tissue dataset, yeast dataset and homo sapiens dataset, and the results have shown that multifactv indeed identifies some interesting biological modules, most of which have not yet been reported in our conference version. these interesting findings have also been validated and explained by using gene ontology analysis with david or other analysis.

methods
terminologies
a tensor refers to a multidimensional array or matrix. the order of a tensor is defined to be the number of dimensions, also known as modes, of the corresponding multidimensional array. for instance, given a n <dig> × n <dig> × n <dig> tensor a=ar,s,t, it is called a third-order tensor. the process of rearranging a tensor into a two-dimensional matrix is called unfolding. a n-th order tensor can be unfolded into n matrices in terms of each of its modes. for example, unfolding the tensor a  in terms of mode  <dig>  mode  <dig> and mode  <dig>  we obtain three matrices a, a and a of sizes n <dig> × n2n <dig>  n <dig> × n1n <dig> and n <dig> × n1n <dig> respectively. in this paper, we let a denote the unfolding matrix of tensor a  in terms of mode p.

let in×n be the n × n identity matrix. let mt be the transpose of matrix m. given a n <dig> × n <dig> matrix m, we define vec to be a n1n <dig> ×  <dig> vector that is obtained by stacking each column of m. we define shrinkageα/ρ to be a shrinkage-thresholding operator for each entry of a matrix, i.e.,

 shrinkageα/ρi,j=mi,j-min.mi,j|mi,j|, 

where mi,j|mi,j| should be zero when mi,j =  <dig> 

let ⊗ and ○ be the kronecker product operator and outer product operator. given a n-dimensional vector x = t , let x+ = {xi|xi > <dig>   <dig> ≤ i ≤ n} and x- = {xi|xi < <dig>   <dig> ≤ i ≤ n} denote the sets of its positive entries and negative entries respectively. besides, we define ∑x+=∑y∈x+y and ∑x-=∑y∈x-y. in this paper, max and min are functions used to find the maximum value and minimum value respectively.

multifactv
our idea to extract modules from higher-order time series biological data is using tensor factorization techniques. a higher-order time series biological data can be represented as a tensor. for example, a gene-condition-time interaction data is represented as a tensor in figure  <dig>  factorizing this tensor with two decompositions for gene, condition and time-point respectively, we find two modules, i.e., the first module m <dig> = {g <dig>  g <dig>  g <dig>  g <dig>  c <dig>  c <dig>  c <dig>  c <dig>  c <dig>  t <dig>  t2} and the second module m <dig> = {g <dig>  g <dig>  g <dig>  c <dig>  t <dig>  t <dig>  t4}, by using a threshold  to cut off the decompositions shown as in figure  <dig>  however, we may not be able to obtain good modules merely based on traditional tensor factorization techniques because the data we are considering includes time dimension. we need to make sure the modules exist consistently in some consecutive time periods, e.g., the time-points involved in module m1/m <dig> are expected to be as consecutive as possible. to achieve this property, some suitable constraints must be incorporated into the factorization process. next we will formulate the proposed multifactv method.

we assume that the higher-order biological data represents interactions between three types of variables, for example gene × condition × time data. we formulate the proposed mutlifactv based on such data in this paper. however, it is remarkable that multifactv is a general framework that can be derived similarly for biological data representing interactions more than three types of variables. suppose we consider the genomic expression profiles of n <dig> genes under n <dig> conditions over n <dig> time-points. the corresponding interactions can be represented as a n <dig> × n <dig> × n <dig> tensor a=ar,s,t, where ar,s,t is a value recording how the gene r responds to the condition s at the time-point t. we note that ar,s,t can be a positive or negative value, i.e., the input tensor a  is not necessarily a nonnegative tensor.

assume we would like to find k modules. the following objective function is proposed to decompose the tensor a  into three matrices u, v and w:

  mina-∑k=1kuk∘vk∘wk2+α∑k=1k||bwk||1s.t.w≥ <dig> and1t⋅wk=1fork =  <dig> , ...,k 

where u = , v = , w =  are three decomposition matrices regarding n <dig> genes, n <dig> conditions and n <dig> time-points respectively; b is a  × n <dig> matrix satisfying

 bi,j=1i=j-1i=j-10otherwise 

and α > <dig> is a regularization parameter. clearly, α∑k=1k||bwk|| <dig> is a total variation constraint regarding the decomposition matrix of time. with this regularization term, we can control the modules identified such that they exist consistently in some consecutive time periods. different from the conference version  <cit> , the decomposition matrices u and v do not have nonnegative constraints because we allow negative entries in the tensor a .

multifactv seeks matrices u, v and w that minimize the objective function in . as there are three matrices unknown, we need to solve them in an iterative fashion, i.e., changing the optimization problem into three subproblems with one unknown matrix in each, and then solving them iteratively until it converges. therefore we have three subproblems for multifactv as follows.

subproblem 1: fix v and w, and solve u by minimizing the objective function in .

in this subproblem, the objective function is transferred into:

  mina-uf <dig> 

where f = t. we have the following solution for u:

  u=aftfft- <dig> 

subproblem 2: fix u and w, and solve v by minimizing the objective function in .

in this subproblem, the objective function is transferred into:

  mina-vf <dig> 

where f = t. we have the following solution for v:

  v=aft- <dig>  

subproblem 3: fix u and v, and solve w by minimizing the objective function in .

in this subproblem, the objective function is transferred into:

  mina-wf2+α∑k=1k||bwk||1s.t.1t⋅wk = 1 for k= <dig>   <dig> ..., k, 

where f = t. in order to solve the matrix w in , we introduce two  × k auxiliary matrices p and q and adopt the strategy of alternating direction method of multipliers   <cit> . as a result, three updating formulas are derived and obtained :

  vec=fft⊗2in3×n3+-1vecρbt+2aft 

  p=shinkageα/ρ 

  q=q+ρ 

here ρ can be any positive number and we use ρ =  <dig> in our implementation. clearly, we need to update matrices w, p and q iteratively until it converges to solve this subproblem. note that each column of w must be normalized after updating as equation  to guarantee its constraints in .

iteratively solving these three subproblems leads to a local minimum of the multifactv objective function in  and the solutions for matrices u, v and w at the same time. different from our conference version, the updating formulas for u and v in subproblems  <dig> and  <dig> change here because we do not have nonnegative constraints on them. next we summarize the proposed multifactv method in algorithm  <dig> 

algorithm  <dig> the multifactv algorithm

input: a n <dig> × n <dig> × n <dig> tensor a , the number of modules k, parameter α, and thresholding parameters τ <dig>  τ <dig>  and τ3

output: k modules stored in Ω = {Ω <dig>  Ω <dig>  ..., Ωk }

procedure:

 1: randomly initialize matrices u, v and w, and set t = 1;

 2: compute u = aft - <dig> where f =  ʘ u )t;

 3: compute v = aft - <dig> where f =  ʘ u )t;

 4: randomly initialize matrices p and q, and set f =  ʘ u)t, s= <dig>  ρ=1;

 5: iteratively update w, p, q as follows:

 vec)=fft⊗2in3×n3+-1vecρbt-q/ρ)+2aft,p=shinkage α/ρ+q/ρ),q=q+ρ-p), 

  until it converges;

 6: set w = w;

 7: if ||u - u|| <dig> + ||v - v|| <dig> + ||w - w|| <dig> > <dig> , set t = t +  <dig> and goto step 2;

  otherwise, goto step 8;

 8: for k =  <dig> to k

   set Ωk = Ø

   if ∑uk+<-∑uk-,setuk=-uk;

   for r =  <dig> to n1

    ifur,k>=  <dig> *τ1*+min, set Ωk= Ωk∪{condition s};

   for t =  <dig> to n3

    if wt,k >=  <dig>  ∗ τ <dig> ∗ +min), set Ωk = Ωk ∪ {time point t};

 9: return Ω = {Ω <dig>  Ω <dig>  ..., Ωk}.

in this algorithm, we need to input a tensor and five parameters. at the beginning, the algorithm randomly initializes matrices u, v and w in step  <dig>  and then it updates them iteratively from steps  <dig> to  <dig>  we note that there is an inner loop in step  <dig> in order to update w. when finishing the computation of u, v and w, the algorithm outputs k modules in step  <dig> by cutting off each column of u, v and w with thresholding parameters τ <dig>  τ <dig>  and τ <dig> respectively. since the decomposition matrices u and v are not necessarily nonnegative, the module extraction in step  <dig> is also different from the conference version.

RESULTS
in this section, we run multifactv on synthetic datasets, arabidopsis thaliana dataset, yeast dataset and homo sapiens dataset to test its performance and usefulness. the synthetic datasets are generated artificially and the other three real datasets can be found on http://www.ra.cs.uni-tuebingen.de/software/edisa/downloads/index.htm.

results on synthetic datasets
in this experiment, we generated gene×condition×time tensor data to test the effectiveness of multifactv. in the synthetic datasets, some "ground-truth" modules containing a set of genes, conditions and consecutive time intervals were generated. there were  <dig> genes,  <dig> conditions and  <dig> time-points. based on the number of modules included, the datasets were categorized into four types, 3-module dataset, 5-module dataset, 8-module dataset and 10-module dataset. to test the robustness of multifactv, we added different level of noise in the corresponding tensors, i.e., using  <dig> ,  <dig>  and  <dig>  as densities to add noise into the tensors respectively. our objective was to identify the "ground-truth" modules accurately.

as for a comparison, we performed edisa and metafac as well. for metafac and multfactv, we set k to be the number of modules in the dataset. for edisa, the sample size was set to be  <dig> and the iteration number was set to be  <dig>  the parameters τg and τc were turned in the interval  <cit>  with  <dig>  as increasing step and then the best parameter values were to produce final result. for multifactv, we used τ <dig> = τ <dig> =  <dig>  and τ <dig> =  <dig> . all results were evaluated based on the fscore and nmi  by considering the discovered modules and the "ground truth" modules.

before comparing the performance of multifactv and the other two algorithms, we first demonstrate the convergence of the proposed multifactv and how its performance changes against the tuning of parameter α. in figure  <dig>  we show the convergence of multifactv based on one synthetic dataset. we see from this figure that the objective function value is decreasing as the number of iterations increases, and after  <dig> iterations the change is very little and the algorithm is stopped. in figure  <dig>  we show how the performance of mutlifactv changes with respect to the tuning of α. we see from this figure that its performance does not change significantly as parameter α changes from  <dig> to  <dig>  and the best result is yielded when α =  <dig>  therefore we used this value for α in the experiments. table  <dig> shows the results of edisa, metafac and the proposed algorithm on these synthetic datasets. we see from the table that multifactv algorithm outperforms the other two comparison algorithms.

results on arabidopsis thaliana datasets
in this experiment, the multifactv was applied to arabidopsis thaliana data to explore biological module patterns therein. the data recorded the time-series genomic expression of the root/shoot tissue in arabidopsis thaliana when different abiotic stresses were considered. for the genomic expression data of root tissue, we constructed a gene×condition×time tensor a  of size  <dig> ×  <dig> ×  <dig>  for the genomic expression data of shoot tissue, we constructed a gene×condition×time tensor a  of size  <dig> ×  <dig> ×  <dig>  both tensors were nonnegative. we run the multifactv method with k =  <dig>  α =  <dig>  τ <dig> = τ <dig> =  <dig>  and τ <dig> =  <dig>  on each tensor.

next we present some biological modules discovered from each of these tensors. to validate these modules, we associate them to some functional annotation terms with david analysis  <cit> . besides, the corresponding p-values are also given to demonstrate the statistical significance of these functional terms.

interesting genomic modules in root tissue: some interesting biological modules detected from root tissue by multifactv are given in the following.

 <dig>  cold-osmotic modules. in  <cit> , it has been manifested that a large portion of the arabidopsis genes are sensitive to cold and osmotic stress stimulus. in our results, we found several modules participating in the response to both stresses. we present two of such modules here and their genomic expression profiles are shown in figure  <dig>  we observe from figures  <dig> and  <dig> there are distinct expression shapes, where the shapes for cold and osmotic conditions are quite similar. this observation indicates the genes in these two modules co-regulate under these two conditions, suggesting that arabidopsis may not distinguish between cold and osmotic stresses. the first module is associated to functional terms like "response to water deprivation", "cold acclimation" and "response to cold"  by using david, and the second module is associated to "response to osmotic stress", "response to temperature stimulus" and "response to cold" . these facts confirm that both modules play key roles in the response to cold and osmotic stresses.

 <dig>  salt module. in figure  <dig>  we show a module detected by multifactv that responds to salt stress. apparently, this module has quite different expression shapes under salt stress compared to under the other stresses. moreover, the terms like "response to water deprivation" and "response to salt stress"  are mapped to it, which manifests this module indeed functions under salt stress.

 <dig>  heat module. we obtained a module participating in the response to heat shock, shown as in figure  <dig>  clearly, it has quite distinct expression shapes under heat condition. with david, the genes in this module are mapped to "response to heat" and "response to temperature stimulus" .

 <dig>  uvb-wound modules. we obtained two modules responding to uvb light and wound stresses, see figure  <dig>  in figure  <dig>  we observe that the module  <dig> down-regulates slightly from  <dig> h to 12h and up-regulates from 12h to 24h. this module is significant for "photosynthesis, light harvesting", "response to light stimulus" and "defense response" . it can be observed from figure  <dig> that the module  <dig> has different genomic expression profiles for uvb and wound stresses in comparison with the other stresses. the module is pronounced under "response to light stimulus", "response to uv" and "response to wounding" . clearly, both modules indeed participate in the response to uvb light and wound stresses.

interesting genomic modules in shoot tissue: in the following, we show two interesting genomic modules in shoot tissue output by the proposed multifactv.

 <dig>  salt-oxidative-drought module. we found a module participating in the response to salt, oxidative and drought stresses, see figure  <dig>  we observe that the module has similar genomic expression profiles for salt, oxidative and drought stresses. it is annotated to functional terms like "response to salt stress", "oxidoreductase", "oxidation reduction" . this suggests that the module is significant and indeed has biological functionalities related to salt and oxidative stresses.

 <dig>  wound module. we obtained a module participating in the response to wound stress, see figure  <dig>  it can be observed that the module first up-regulates and then down-regulates from 1h to 12h under wound stress, and its genomic expression shapes are quite different in comparison with the ones for the other stresses. by using david, the module is annotated to functional terms like "defense response" and "response to wounding" . this suggests the module identified by multifactv indeed has wound-related biological functionalities.

results on yeast dataset
we performed the proposed multifactv on yeast dataset to explore interesting module patterns. this dataset recorded multiple time series genomic expression of yeast saccharomyces cerevisiae regarding to different environmental changes  <cit> . we considered six environmental stresses in this dataset, including heat shock,  <dig> mm h2o <dig>  1mm menadione,  <dig> mm dtt,  <dig> mm diamide and 1m sorbitol. since different time-points were adopted to record the expression under different environmental stresses in the original data, we preprocessed this data by selecting  <dig> time-points, i.e., 10min, 20min, 30min, 40min, 60min and 80min. the missing time-point was handled by using a linear interpolation of two closest time-points available. other missing values were replaced with the average expression value at the corresponding time-point. as a result, we constructed a gene×condition×time tensor a  of size  <dig> ×  <dig> ×  <dig>  i.e., there were  <dig> genes,  <dig> stresses and  <dig> time-points. this tensor was not nonnegative because the genomic expression data included negative values. the multifactv algorithm was performed with k =  <dig>  α =  <dig>  τ <dig> = τ <dig> =  <dig>  and τ <dig> =  <dig> .

next we present and analyze some interesting module patterns identified by the proposed multifactv.

 <dig>  h2o2-menadione modules. in  <cit> , it has been shown that a large portion of genes in yeast co-regulate under h2o <dig> stress and menadione stress despite that they are supposed to result in different reactive oxygen species. the multifactv obtains similar findings and we present the genomic expression of two modules of such kind, see figures  <dig> and  <dig>  we observe that the module  <dig> up-regulates from 30min to 40min and down-regulates from 40min to 60min under both stresses, while the module  <dig> down-regulates from 10min to 20min and up-regulates from 20min to 30min. the analysis with david have shown that the module  <dig> is functionally related to "reproduction of a single-celled organism", "mating projection tip" and "cell budding" , and the module  <dig> is functionally associated to "glucose catabolic process", "hexose catabolic process" and "monosaccharide catabolic process" . all these terms may be related to some biological process induced by the oxidative and reductive reactions taking place in the cells.

 <dig>  heat shock modules. we obtained two interesting modules responding to heat shock in yeast. the genomic expression of both modules are shown as in figures  <dig> and  <dig>  we see that these two modules have opposite expression trends after heat stress where the module  <dig> down-regulates while the module  <dig> up-regulates. the analysis with david have shown that the module  <dig> indeed takes part in the response to heat and temperature stimulus . moreover, we find this module is annotated to functional terms like "protein catabolic process" and "cellular macromolecule catabolic process" . this can be interpreted by the fact that heat shock usually leads to protein unfolding  <cit> . the module  <dig> is annotated to functional terms like "ribonucleoprotein complex biogenesis" and "rna binding" . this may be because the protein unfolding induces the concurrent ribonucleoprotein complex biogenesis.

results on homo sapiens dataset
we applied the proposed multifactv to homo sapiens dataset for exploring biological modules. it was a higher-order time series dataset about genomic expression of multiple sclerosis patients after ifn-β injection treatment. we represented this data as a nonnegative gene×patient×time tensor of size  <dig> ×14× <dig>  i.e, there were  <dig> genes,  <dig> patients {a, b, c, d, e, f, g, h, i, j, k, l, m, n} and  <dig> time-points. the multifactv was performed with τ <dig> = τ <dig> =  <dig> , τ <dig> =  <dig> , α =  <dig> and k =  <dig>  as a result, we found many interesting modules responding to ifn-β treatment similar to  <cit> . to exploit the usefulness of those modules from a different view, we made use of them to help us group the patients.

with the  <dig> modules identified, we constructed a binary matrix m of size  <dig> ×  <dig> representing the membership of each patient to the modules, where mi,j =  <dig> if the i-th patient was associated to the j-th module, otherwise mi,j =  <dig>  in such case, each of the  <dig> patients was represented as a  <dig> ×  <dig> binary vector. subsequently, we clustered the  <dig> patients by using k-means algorithm and the clustering results were {a, b, c, d}, {e, f, g, h}, {j, k, l, m }, {i, n }. this grouping result may suggest some differences of patients in their disease histories or progressions. we believe that this result will be beneficial to the designation of personalized medicine for the patients with multiple sclerosis  <cit> .

CONCLUSIONS
as more and more time series biological data are being accumulated from different laboratories or databases, identification of modules with integrative analysis become an important and urgent task. one way to accomplish such integrative analysis is assembling multiple time series biological data into a tensor form. in this paper, we have proposed the multifactv method, which extends the tensor factorization objective by introducing a time-related regularization term of total variation, to detect modules from such higher-order time series biological data. we have performed the multifactv method on synthetic datasets, arabidopsis dataset, yeast dataset and homo sapiens dataset to test its performance. the results have shown that the proposed multifactv indeed reveals some interesting module patterns. we have shown and validated these interesting findings with david analysis or other analysis.

in this paper, we assume that the multiple time series genomic expression data have the same size, i.e., the same number of genes and the same number of time-points, so that they can be joined into a tensor. in some cases, the data may be in different sizes. for example, the original yeast dataset  <cit>  has different number of time-points for different environmental stresses. in the future, it would be interesting to extend the tensor factorization objective function of tucker <dig> or tucker <dig>  <cit>  in a similar way to perform integrative module detection for such data.

competing interests
the authors declare that they have no competing interests.

authors' contributions
xl, mn and yy participated in designing the algorithm, drafting and revising the manuscript. xl participated in implementing the algorithm and performing experiments. qw participated in the discussions of experimental results. all authors have read and approved the final version of this manuscript.

