BACKGROUND
recent advances in developmental neuroscience have revealed how the mechanisms controlling proliferation, fate determination, migration, differentiation, synaptogenesis and cell death each contribute to the establishment of the architecture and connectivity of the mature brain. what has been lacking, however, is an understanding of the determinants of the positioning of neurons in 3d space: what controls the position a neuron will come to occupy within a brain structure relative to other cells in the local environment? in some structures, cells are packed side-by-side and there is no mystery to their spacing; in others, the distance between members of a cell type is often conspicuous, but we know nothing of the constraints imposing this spacing. we do not know, for instance, whether higher-order patterning is present, much like a rough or distorted lattice, or whether such cells are essentially randomly distributed within a volume of tissue, constrained only by the physical size of other cells. we may know quite a bit about the dendritic morphology of individual cells within a region, and can make inferences about the relationship between the morphology of a cell and how a population of those cells should be distributed to maximize a uniform dendritic sampling within the structure, but little concrete evidence exists to relate one to the other. this issue of neuronal positioning, almost completely neglected within the brain, has been explored extensively within the two-dimensional confines of the neural retina, where modeling studies have revealed the rules governing intercellular spacing, in turn suggesting plausible biological mechanisms that might embody such spacing rules  <cit> . several mathematical techniques have been used to good effect in quantifying neuronal patterning in 2d  <cit> . computer aided methodologies now allow for the localization of x, y, z centroids for neuroanatomical structures in 3d space  <cit> , making the study of neuronal patterning in 3d space more feasible provided the tools for such spatial analysis exist.

to this end, we have now extended 2d methods to allow a comparable analysis on 3d datasets, described in this paper, to study the geometrical relationships between cells in a volume of tissue and to model their positioning in 3d space. to our knowledge, our program is the first gui-driven program that allows for the interactive exploration and analysis of 3d neuronal datasets.

implementation
computing environment
our program, spatial analysis 3d , is written mostly in matlab, for several reasons. first, matlab is cross-platform , and combines a powerful numerical environment with a portable gui. we hope that some of our users will know the matlab language and hence develop further routines to be included in future releases of sa3d. also, matlab can interface with programs written in other languages like c. we use this feature for some of the more numerically-intensive aspects of the computation , and also for reuse of existing c functions for the analysis of 3d datasets  <cit> .

sa3d is available on our website  <cit>  along with a separate user guide that describes in detail how to install and use the program.

data input/output
data files  can be read in to sa3d in several formats, most notably an excel data file, a comma separated value file, or a tab-delimited text file. program output is mostly graphical, and standard matlab menu items allow for these windows to be printed. in addition, data generated by the program can be saved in the native matlab format – files are given the suffix .sa <dig> to indicate they are generated by sa3d.

analysis functions
the bulk of the program is dedicated to quantitative analysis of the spatial positioning of neurons, described below. in addition, we make use of matlab's built-in capacities for interactively viewing 3d datasets, e.g. to provide real-time rotation of datapoints .

delaunay tessellation
delaunay tessellations  are computed using the functions provided by matlab. these routines are, in turn, based upon the standard routines within qhull  <cit> , and can compute tessellations in geometrical spaces higher than just 2d.

autocorrelation
the autocorrelation routines, and corresponding density recovery profile , are written in c, and generalise the formulation from 2d into 3d  <cit> . one complication with the calculation of the drp in 3d is computation of the correction factor to handle boundary effects; here we have used the isotropic boundary correction  <cit> , implemented in c by prof. adrian baddeley along with the f, g, k functions.

f, g, k functions
the program also permits the plotting of three other statistics often used in the analysis of spatial point patterns, being the g, f and k functions  <cit> . the g function is the cumulative frequency distribution for the population of nearest neighbor distances:

 g=1n∑i=1ni 

where yi is the distance of cell i to its nearest neighbor, and n is the number of cells. i is the indicator function, which is one if the argument is true, else zero. the f function, by contrast, plots the cumulative frequency distribution for the distance of each grid point to its nearest cell when a regularly spaced grid of g points is superimposed upon the population:

 f=1g∑i=1gi 

where zi is the distance of grid point i to the nearest cell. the f function is useful for detecting non-homogeneities in the distribution of cells within the field. finally, the k function counts the expected number of cells within a given distance of a cell:

 k=|b|n2∑i=1n∑j≠ii 

where |b| is the volume of the sample region and dij is the distance between cell i and cell j. the k function is the cumulative version of the drp. these three functions were implemented in c and kindly provided by prof. adrian baddeley. all three functions include several methods to correct for edge effects; see  <cit>  for details.

modeling functions
as well as analysing existing datasets, sa3d can generate synthetic datasets for comparison with experimental data. the program includes two main routines for generating sample points within a given volume:

• random: neurons are positioned at random, subject to an optional constraint that no two neurons come closer than some minimal distance  to each other. the minimal distance is sampled from a normal distribution with a given mean and standard deviation. implementation of this rule follows that specified elsewhere  <cit>  with the obvious extension into 3d. neurons are added serially into the array until either the requested number n of neurons has been added or until the packing limit has been reached .

• hexagonal close packing : neurons are initially positioned into a regular hexagonal lattice, with a specified mean spacing between neurons; the number of neurons n is automatically determined so that the lattice fills the volume. the position of the neurons are then independently jittered by adding gaussian noise with a specified standard deviation.

RESULTS
in this section, we present a case-study of usage of sa3d. we have used the program to generate two datasets, one using the dmin model, and the other by jittering a regular hexagonal structure of points. here we show how our different analysis techniques can reveal differences between the two datasets.

delaunay tessellation analysis
by inputting x, y, z positional information for a population of cells, a variety of spatial statistics can be generated based upon the tessellation of the field by delaunay tetrahedrons, including the derivation of voronoi domains. for a sample of  <dig> points, these calculations are nearly instantaneous. figure 1a shows examples of two simulated datasets of comparable density, one of randomly distributed cells constrained by a local minimal distance  spacing rule, the other being a hexagonal lattice with local jitter applied to every cell. a single voronoi domain of a given cell is illustrated for each case, along with its associated statistics to the right, including the volume of the voronoi domain illustrated, the number of voronoi vertices and facets for that domain, the sum of the surface area, and the vector details, being an index of its elongation within the field.

from this plot, one can select any individual point within the field for highlighting, or the points can be toggled sequentially by using the arrow keys. while the figure illustrates the voronoi domain analysis, comparable analysis and presentation can be chosen for other derivatives of the delaunay tessellation , including the nearest neighbor analysis.

for any of those analyses, the population statistics for every cell in the field can be plotted in one of two ways. figure 1b illustrates these for the voronoi analysis shown in figure 1a. the population of voronoi domain volumes can be presented in histogram form, for all cells in the field, showing the less variable distribution for the jittered lattice relative to the dmin simulation . but to appreciate the nature of this variability across the field, a graphic representation of the voronoi volume for each cell can also be plotted in 3d. all such 3d plots can be zoomed and rotated for detailed visualization .

problematic boundary cells can be eliminated from the population statistics by selecting one of a number of increasingly stringent filters. filter choice is dependent upon the analysis being conducted, since, for example, only those cells closer to the boundary than to any other cell will have an uncertain nearest neighbor, but cells meeting this restriction may still have an uncertain delaunay tetrahedron or voronoi domain.

spatial autocorrelation analysis
the 3d spatial autocorrelation of the field can also be generated, from which the drp is computed. the organizing principles of these two distributions of cells, while difficult to surmise by visual inspection of the population data or the tessellation analysis provided in figure  <dig>  are now readily apparent: the minimal distance spacing rule is revealed by a region surrounding the origin of the autocorrelogram where cellular density is lower than at all other locations within the field; by contrast, the periodicity in the jittered hexagonal lattice reinforces itself within the correlogram, revealed as repeating regions of high and low cell density  . the drp can be computed from each correlogram  <cit> , being a plot of average density in the correlogram as a function of increasing distance from the origin , showing this difference clearly: the drp for the dmin simulation reveals only the presence of an exclusion zone surrounding the origin, whereas the drp for the jittered lattice simulation reveals the waxing and waning of average density at increasing distances from the origin. as mentioned above, the program also permits the plotting of the k function, being the cumulative frequency histogram associated with the autocorrelogram.

the plots for both correlograms readily discriminate these features in histogram form ; however, they conceal any angular variation in density. those can be made apparent by separate plots of cell density as a function of their angles of azimuth and elevation : while the minimal distance spacing rule produces no systematic variation in density as a function of direction from the origin, the variation by angle is clearly revealed for the jittered lattice.

cumulative nearest neighbor distributions 
the f, g and k functions are commonly used to compare two sets of spatial patterns, or one set of patterns against the null hypothesis of complete spatial randomness . here we demonstrate the utility of the g function to compare two simulated populations both created using the dmin model, where only one parameter  differed . at small distances , g for both simulated datasets is less than g under csr, which indicates exclusion in neuronal positioning. further, g helps discriminate between the two simulations: the sigmoidal curve for the dmin simulation with σ =  <dig> μm is wider than the curve for the simulation with σ =  <dig> μm. this is expected, since the larger the standard deviation, the larger the range of minimal nearest-neighbor distances that are allowed in the model.

future directions
this paper accompanies the first release of sa3d, and we hope that it will continue to be developed over the coming years. some features that we would like to implement in future releases include:

• extension to multiple types of neuron. currently the program assumes that all neurons are of the same type, and hence can be described just by their x, y, z location. the addition of an extra label, t, which typically would be an integer, would allow for us to discriminate between different types of neuron, and perform other analyses. for example, cross-correlation analysis could be used to test whether there is any spatial arrangement between neurons of different types. the corresponding 2d methods have previously been useful in helping assess whether groups of related retinal neurons should be regarded as one type or many types  <cit>  and hence we expect these methods to be comparably useful in 3d.

• model fitting. we currently provide two models for generating simulated neuronal populations; both these models require various parameters. some automated method for finding the values of these parameters to minimize the discrepancy of the model and real data would be beneficial.

CONCLUSIONS
these tools provide a means for investigating the rules governing nerve cell patterning within the central nervous system. they can be used to reveal the spatial statistics associated with a given population of cells; they can discriminate the patterning between experimental and control conditions; and they permit the modeling of real distributions based upon lattice-like distributions and on minimal distance spacing rules, both of which can be established with parameters modulated by the user. these spatial statistics can be compared with the morphological features associated with single cells, for example, by correlating the voronoi domain with dendritic morphology in 3d, to understand the nature of the dendritic coverage within a volume of tissue  <cit> . a limitation of the analysis methods presented here is that they assume that each of the x, y, z dimensions are treated equally. our methods are therefore inappropriate for specific cases, e.g. cortical microcolumns  <cit> , where neurons of a certain type appear columnar across the depth of a slice; for these types of data, more specialised methods are appropriate  <cit> . however, even with columnar data, the interactive visualisation facilities offered by sa3d may still be useful for viewing the data. studying the emerging regularity of a population of cells during development can clarify the potential biological mechanisms underlying it  <cit> , in turn directing an assessment of the interactions that might mediate such homotypic cell spacing behavior. as well as informing us about developmental mechanisms, these methods can also be applied to adult tissue, as the spatial distribution of neurons can help assess the number of natural cell types in a structure  <cit> . the tools require the user to be able to assign positional information for each cell in 3d, and assume equal accuracy in the z dimension; this may be their greatest constraint, necessitating thick specimens sampled with confocal or two-photon microscopy, or sectioned specimens that can be accurately reassembled to preserve true spatial relationships in 3d. ultimately, the benefit of such tools will depend upon the ingenuity of the researcher, but if the field of retinal research is anything to judge by, their adoption by brain researchers can only enlighten our understanding of the developmental neuroanatomy and nerve cell biology associated with such populations of cells.

availability and requirements
• project name: spatial analysis 3d

• project home page: 

• operating system: platform independent 

• programming language: matlab/c

• other requirements: matlab  <dig> or higher.

• license: sa3d  is distributed free under the conditions that  it shall not be incorporated in software that is subsequently sold;  the authorship of the software shall be acknowledged in any publication that uses results generated by the software;  this notice shall remain in place in each source file.

• any restrictions to use by non-academics: none.

abbreviations
csr: complete spatial randomness; drp: density recovery profile; gui: graphical user interface; hcp: hexagonal close packing; sa3d: spatial analysis 3d

authors' contributions
sje wrote the modeling code , validated and tested the software, and refined both the manuscript and user guide. ddl designed, implemented and tested the program, including development of new analysis techniques and extension of existing methods into 3d, and wrote all program documentation. mar specified the software requirements and tested the program. ber conceived the project, refined the software requirements, edited the user guide, and prepared the initial draft of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
rotations of example 3d populations. 3d plots of the populations of cells shown in figure 1a, in rotation, showing, for an individual cell near the center of each field, its near neighbors that define the voronoi domain of that cell. the nearest neighbor is illustrated in red.

click here for file

 additional file 2
rotations of example autocorrelograms. 3d autocorrelograms of the populations of cells shown in figure 2a, in rotation.

click here for file

 acknowledgements
supported by the nih . we thank adrian baddeley for providing c code for determining f, g and k functions in 3d.
