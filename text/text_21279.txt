BACKGROUND
database searching has become the key technology for shotgun proteomics. many algorithms and software tools exist for such searches, including sequest  <cit> , mascot  <cit> , x!tandem  <cit> , omssa  <cit> , phenyx  <cit> , pepsplice  <cit> , crux  <cit>  and pfind  <cit> . however, the existing tools are not quick enough, for the following reasons:

first, the size of protein databases is increasing significantly, resulting in many peptides. in addition, semi- or non-specific digestion generates  <dig> to  <dig> times more peptides than full-specific digestion. for example, the size of the all-species ncbinr protein sequence database was  <dig>  gb in december  <dig> and increased to  <dig>  gb in june  <dig>  the number of non-redundant peptides generated by full-specific digestion with up to two missed cleavage sites in the ipi-human v <dig>  database  <cit>  is  <dig>  and it increases 170-fold to  <dig> for non-specific digestion.

second, identification of peptides with chemical and post translational modifications requires much more time. the number of peptides in the ipi-human database generated by full-specific digestion with up to two missed cleavage sites increases  <dig> -fold from  <dig> to  <dig> in the case of up to three variable post translational modifications of oxidation  and phosphorylation .

third, with the great progress of liquid chromatography and mass spectrometry, the generation rate of tandem mass spectra is increasing remarkably. a mass spectrometer such as thermo electron  ltq generates about five tandem mass spectra per second and velos generates more than ten tandem mass spectra per second. although the performance of computing hardware is improving steadily, it cannot catch up with the progress in the generation rate of tandem mass spectra.

to address these problems, some software tools accelerate processing by efficiently organizing the protein sequence database. sequest  <cit> , crux  <cit>  and pfind  <cit>  use peptide indexing to accelerate tandem mass spectra identification. tang  <cit>  uses a peptide and b/y ions index. lu and chen use a suffix tree for fast tag-based searching <cit> . inspect uses a fast trie-based search for scanning of the database with sequence tags  <cit> . edwards and lippert proposed that elimination of redundant candidate peptides can decrease the identification time because it decreases the corresponding peptide-spectrum matching times. in  <dig>  edwards applied a compressed sequencing-by-hybridization graph for sequence database compression for peptide identification  <cit>  and used it for expressed sequence tag searching  <cit> . this approach compresses the sequence and eliminates most but not all of the peptide redundancy. in  <dig>  edwards and lippert implemented the simultaneous linear scan and suffix tree traversal algorithm for peptide candidate generation <cit> . they also proposed the use of the suffix array as a compact representation of a sequence database that can eliminate candidate redundancy. however, there are no details in their paper about how the suffix array is used and how well it performs, and they did not implement it in any search engines.

based on our daily experience of research and use of search engines, we propose that four aspects are important for choosing a data structure. first, it should improve the identification time efficiency, because that is the aim of using it. second, it should not require much time and space for construction. third, it should not affect accuracy. fourth, it should be flexible to use, as flexibility is important for a search engine. for example, mascot creates binary formats for ease of input, but it does not perform formal indexing, because a new index would be required for each combination of search parameters  <cit> .

two approaches to data structure organization should be mentioned. the first is to not use any special data structure. when identification starts, proteins in the database are digested online individually to generate all peptides. then every peptide is matched with the spectra within the mass tolerance window and a peptide-spectrum matching score is given. this method does not require time and space to construct a data structure beforehand, but it cannot speed up the identification. the second approach is to use a peptide index  <cit> . proteins are digested offline and the generated peptides are stored on a disk. for every peptide, its mass, position, length, corresponding proteins and other useful information are recorded. all peptides are sorted and the redundant peptides are eliminated. any search engine will only need to read the peptide index from the disk to obtain the non-redundant peptides and match them with the spectra. many search engines implement this data structure to speed up identification, such as sequest  <cit> , crux  <cit>  and pfind  <cit> . these search engines use peptide indexing to eliminate redundant peptides and accelerating query response time. the approach of peptide indexing can speed up the identification but it requires much time and space for construction. furthermore, the time and space requirement can be 100-fold greater for non-specific digestion. in addition, when the search parameters, such as the maximum number of missed cleavage sites, the maximum length or the maximum mass of putative peptides are changed, a new index must be constructed.

the advantages and the disadvantages of these two approaches are obvious. in this study, we propose ablcp, an algorithm based on the longest common prefix, to organize the database efficiently to retain the advantages and avoid the drawbacks of these approaches.

first, ablcp sharply improves the identification time. many peptides appear in more than one protein because there are many homologous proteins in a protein sequence database. the peptide redundancy ratios of some databases are very high. removal of the redundant peptides can reduce the corresponding peptide-spectrum matching times and thereby decrease the identification time. compared to an approach that does not use a special data structure, the experiments presented in results section show that ablcp can decrease the identification time by about 50%.

second, compared to the approach using peptide indexing, ablcp requires less time and space for construction. the construction time for ablcp is very short: it only needs tens of seconds for normal databases such as ipi-human and several minutes for large databases such as uniprot/swissprot. the additional space needed for ablcp is equivalent the original database space, which is only half the space needed for full-specific digestion peptide indexing with pfind. the additional time and space for peptide indexing increases remarkably for semi or non-specific digestion, sometimes up to 100-fold over that required for full-specific digestion. however, with ablcp, the non-specific and full-specific digestions require the same time and space.

third, ablcp does not cause any accuracy loss. ablcp eliminates the redundant candidate peptides by the property of longest common prefix. for database searching, the enzymatic digestion poses a challenge to this algorithm because if the property of longest common prefix is used directly, then some candidate peptides may be omitted. however, some adjustments can be made to this algorithm to ensure no candidate peptides are omitted, thus this algorithm can increase the speed without a loss of accuracy.

finally, ablcp is flexible to use. ablcp uses online digestion, thus it is subject to fewer restrictions. when the digestion parameters are changed, such as the maximum number of missed cleavage sites or the maximum length or mass of putative peptides, the peptide indexing needs to be constructed again, but this is not necessary for ablcp. ablcp is more flexible and is only dependent on the database and enzyme.

RESULTS
in this study, all of the experiments were performed on a windows xp machine with  <dig> gb ram and  <dig> intel xeon cpus, each of which had  <dig>  <dig>  ghz cores. all of the programs were implemented in c/c++ language. unless otherwise specified, tryptic digestion was assumed, and for site-specific digestion, up to two missed cleavage sites were assumed.

in the methods section, we will show how this algorithm ensures that no candidate peptides are omitted and how it performs online digestion. in this section, we evaluate this algorithm through two sets of tests. in the first test, we compare the peptide and protein identification time among the following three workflows: workflow- <dig>  with no special data structure; workflow- <dig>  with peptide indexing; workflow- <dig>  with ablcp. in the second test, we compare the time and space cost between ablcp and peptide indexing.

workflow- <dig> and workflow- <dig>  implemented in pfind, were compared with workflow- <dig>  using ablcp. in our previous studies  <cit> , the efficiency of peptide indexing in pfind was compared with sequest, mascot and x!tandem. pfind requires much less time and space than sequest for construction of the peptide indexing and requires less time than mascot and x!tandem for peptide and protein identification. the identification accuracy of pfind, mascot and sequest was investigated in one of our previous studies  <cit> .

identification time
two experiments were performed that tested two data sets, the isb data set  <cit>  and mouse liver data set  <cit> , from cited publications. in the isb data set, all of the ten raw files of the ltq data on mix  <dig> were chosen to be searched against the  <dig> proteins merged with the uniprot/swissprot v <dig>  protein sequence database. in the mouse liver data set, two raw files of ptyr peptides were chosen to be searched against the ipi-mouse v <dig>  protein sequence database  <cit> .

experiment  <dig> on the isb data set used full-specific enzymatic digestion and experiment  <dig> on the mouse liver data set used non-specific digestion. the searching parameters are shown in table  <dig> and search time is shown in table  <dig>  the three workflows are used in each group. these experiments show the comparison of the peptide and protein identification time cost.

workflow- <dig>  with no special data structure; workflow- <dig>  with peptide indexing;

workflow- <dig>  with ablcp. the unit of time is minutes.

from table  <dig>  in exp  <dig>  use of peptide index or ablcp can save around 40% of the identification time versus not use a special data structure, with the time decreasing from  <dig>  days to  <dig>  days. in exp  <dig>  the workflow with ablcp saves around 50% of the identification time, and the workflow with peptide indexing saves around 46% of the identification time. the time is reduced from  <dig>  days to  <dig>  days with ablcp and to  <dig>  days with peptide indexing. the workflow with peptide indexing is not as efficient as workflow with ablcp, because peptide indexing spends much time on reading the indexing files.

these two approaches eliminate redundant candidate peptides in protein sequence databases and reduce the corresponding peptide-spectrum matching times, thereby decreasing the identification time. the redundancy ratio of the two databases is shown in table  <dig>  for these two large databases, one has a redundancy ratio around 55% and the other around 33%. removal of the redundant candidate peptides can decrease the identification time in these large databases.

the peptide redundancy ratio of the ipi-human v <dig>  and uniprot/swissprot v <dig>  protein sequence databases. the length of the peptides is limited from  <dig> to  <dig> amino acids.

workflow- <dig> is slow but without additional storage space or time cost for construction. both workflow- <dig> and workflow- <dig> can speed up the identification, but have some additional storage space and time cost. because reduction of the cost is important for identification efficiency, we should compare the storage space and time cost to choose a better data structure for identification.

storage space and time cost for construction
three aspects are evaluated to compare the cost between ablcp and peptide indexing. the first is the additional storage space needed for the data structure. the second is the time needed to construct the ablcp or peptide indexing. the third is the time needed for identification using the ablcp or peptide indexing. these aspects were tested in the ipi-human v <dig>  and uniprot/swissprot v <dig>  protein sequence databases for full-, semi- and non-specific digestion. the peptide length range is from  <dig> to  <dig> amino acids.

the first aspect that we compared is the additional storage space for the data structure. table  <dig> shows the storage space needed for ablcp and peptide indexing in two databases for full-, semi- and non-specific digestion. for peptide indexing, it is necessary to record information such as the mass, the position, the length and other information of every candidate peptide. for ablcp, because the length of a peptide is limited and each peptide usually contains no more than  <dig> amino acids, implying the length of a string representing a peptide sequence is not longer than  <dig>  only one byte is needed for each lcp. table  <dig> shows that peptide indexing needs more storage space than ablcp, particularly with non-specific digestion. for full-specific digestion, ablcp requires only half of the additional storage space of peptide indexing. for non-specific digestion, ablcp requires the same additional storage space as site-specific digestion, but this additional storage space increases significantly  for peptide indexing. in the uniprot/swissprot v <dig>  database, peptide indexing requires  <dig> mb for site-specific digestion and  <dig> mb for non-specific digestion. table  <dig> shows that the additional storage space required for ablcp is only about 1/ <dig> of that of peptide indexing for the ipi-human database and about 1/ <dig> of that of peptide indexing for the uniprot/swissprot database. non-specific digestion could be used to match peptides when the enzyme specificity is unknown, such as with endogenous peptides.

the experiments were performed on the ipi-human v <dig>  and uniprot/swissprot v <dig>  protein sequence databases for full-, semi- and non-specific digestion. the unit of storage space is mb.

the second aspect that we compared is the time needed to construct ablcp or peptide indexing. table  <dig> shows the time needed to construct ablcp and peptide indexing for two databases for full-, semi- and non-specific digestion. in the large database, the non-specific digestion costs several hours for peptide indexing, but the time spent for ablcp is no more than several minutes, and the data show that ablcp is  <dig> times quicker than the peptide indexing.

the experiments were performed on the ipi-human v <dig>  and uniprot/swissprot v <dig>  protein sequence databases for full-, semi- and non-specific digestion. the unit of time is seconds.

the third aspect that we compared is the time required to use ablcp or peptide indexing for identification. for peptide indexing, this time is spent on reading the index and sequence files from a disk. for ablcp, the time is spent on reading files from a disk and online digestion. reduction of this time can reduce the identification time and improve the analysis efficiency. sometimes, especially for high-accuracy instruments, peptide indexing can skip some peptides with various meta-data, sequence, or mass properties, so this time may be short for peptide index. for most other situations, this time is proportional to the peptide number. table  <dig> shows the time required to use ablcp and peptide indexing for identification in two databases for full-, semi- and non-specific digestion. the data show that ablcp is much quicker than the peptide indexing and that the time required is less than 20% of peptide indexing on average.

the time needed to read peptides from the disk for peptide indexing or online digestion for ablcp. the experiments were performed on the ipi-human v <dig>  and uniprot/swissprot v <dig>  protein sequence databases for full-, semi- and non-specific digestion. the unit of time is seconds.

these tables show that the construction time and query time required to use special data structures is low, especially for ablcp, which requires no more than several minutes. the additional storage space needed for ablcp is small. however, these data structures can decrease the identification time remarkably, as shown in table  <dig>  thus, it is worthwhile to use these data structures. in terms of storage space, construction time and query time, ablcp is much more efficient than peptide indexing, especially for large databases and non-specific digestion. the cost for peptide indexing in a large database with non-specific digestion is barely acceptable for a normal personal computer, because this cost can even be tens of gb and several hours. but this cost is not a problem for ablcp, as the storage space and time cost for ablcp is much less than that of peptide indexing.

discussion
ablcp is lossless and independent of scoring model, so it can also be designed to be used in other search engines. in the future, we intend to transplant our algorithm to a parallel environment for searching. searching in parallel is another way to speed up identification. for ablcp, because every character and lcp position is independent after construction, it is only necessary to divide the protein coupled with lcp into several parts for searching in parallel.

CONCLUSIONS
this paper explores an algorithm called ablcp that organizes protein databases efficiently. this algorithm eliminates redundant candidate peptides in protein sequence databases and reduces the time of peptide-spectrum matching, thereby decreasing the identification time. we compare ablcp with two other workflows: workflow- <dig>  with no special data structure, and workflow- <dig>  with peptide indexing. compared to workflow- <dig>  ablcp can decrease identification time by about 50%. compared to workflow- <dig>  ablcp is proved to be more efficient in terms of time and storage space required. this algorithm is based on the property of lcp with some adjustments made for site-specific digestion. in addition, ablcp is more flexible. ablcp uses online digestion, and thus, it is subject to fewer restrictions.

