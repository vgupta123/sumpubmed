BACKGROUND
genetic variations include single nucleotide polymorphisms , insertions and deletions , and structural variants such as inversions, large-scale duplications/deletions, and transpositions. among all these types of variation, indels are the second most common in human populations, only after snps, demonstrated by recent large-scale human genome sequencing projects  <cit> i. however, with the availability of newly sequenced human genomes, the number of novel indels increases at a much faster pace than that of snps. for example, a  <dig> study shows that more than 63% of the nearly  <dig> million indels identified in  <dig> diverse human genomes are novel  <cit> , compared to those in dbsnp. recently, sequencing and analysis of an indian female’s genome reveals that about 84% of her indels are unique, i.e., not documented in any of the sequenced genome databases, in contrast to less than 3% of her snps being unique  <cit> . thus, compared to snps, the research on cataloging indel variants is still in its infancy, and intense effort is needed to obtain a complete inventory. indels also present great technical difficulty and challenge to short read mapping algorithms. improved from the first generation short read mappers, various mapping programs and indel detection programs have been developed to allow for indel detection  <cit> . however, if indels happen to occur in seed regions , mappers and indel detection programs may still fail to map the reads, though it is unclear how this impacts the overall mapping performance.

with rapid development in indel-related research, quality evaluation of the identified indels becomes more and more important to downstream association studies. compared to snp calling, indel calling is more prone to errors occurring in pcr, sequencing, mapping, and calling procedures. these errors can lead to a high false positive rate in indel identification  <cit> . on the other hand, due to much stringent criteria and highly involved process of indel calling, real indels could also be removed  <cit> . recently, while working on indels in dbsnp, we noticed that multiple indels result in the same mutation but are treated as different variants. figure  <dig> shows examples of such indels with one insertion type and one deletion type. for both types, the two indels are presented as different variants in the current version of dbsnp with distinct ids, but sequence alignments show clearly that they cause the same change to the reference genome. biologically, indels with alternative positions  may exist, but to our knowledge, experimentally, there is no way of knowing exactly which one represents the true biological signal. as will be shown later, there exist a non-negligible number of such redundant indels in the current dbsnp. note we call indels redundant if they differ only in annotations, not in the resulting sequences after their modifications to the reference genome. this redundant information does not reveal real biological signals and may mislead downstream analyses. the observed redundancy could be due to equally optimal sequence alignments produced by alignment programs, that is, when the variant sequence and the reference sequence are aligned together, alignment programs cannot differentiate multiple optimal solutions computationally, hence different indel variants may be reported by different alignment programs. these cases suggest that redundancy might be a general problem for indels curated in dbsnp. however, to our knowledge, no work has been done to fully explore the extent of redundancy. to get further confirmation, we compare the distance distribution of adjacent snps with that of adjacent indels in dbsnp. it is found that in all chromosomes, compared to the distances of adjacent snps, the distances of adjacent indels show a higher proportion at distance one. as an illustrative example, figure  <dig> shows histograms of the distances between adjacent snps and the distances between adjacent indels for chromosome  <dig>  both types of distances have monotone decreasing distribution. however, in sharp contrast to snps, the number of adjacent-indel distance = <dig> stands out from all other distances. this shows that compared to snps, there are many more indels that are right next to each other or are very close on a chromosome. this further motivates us to examine the redundancy in indels, especially among nearby indels.figure  <dig> 
examples of indel redundancy in dbsnp.  two indels, both of insertion type, result in the same variant sequences with respect to the reference sequence  two indels, both of deletion type, result in the same variant sequences with respect to the reference sequence.
histograms of adjacent-snp distances and adjacent-indel distances  on human chromosome  <dig>  histograms are plotted in probability densities, with blue color representing snps and red representing indels.



this paper develops methods and strategies to check for indel redundancy. using dbsnp indels as the test case, we examine the extent of indel redundancy for humans and develop vindel, a standalone indel redundancy verification pipeline, together with a corresponding web tool. statistics analysis is applied to check for the correctness of the pipeline. as indels have been shown to be linked to diseases and cancer and have been used as genetic markers for various purposes, it is essential to catalog redundant indels and develop annotations with non-redundant information that represent real biological signals instead of computational artifacts. our vindel system provides the tool needed for this purpose.

methods
based on the two examples of redundant indels in dbsnp  and the comparison of distance distribution of adjacent snps and indels , we designed and implemented an indel redundancy verification pipeline. the pipeline consists of three phases: first, indel information was retrieved from the snp/indel flat files downloaded from dbsnpii using a python program. second, based on their position information, indels were allocated into candidate redundant indel groups by clustering. third, indel variant substrings were generated correspondingly for indels in the same candidate redundant groups and pairwise comparisons were conducted to identify redundant indels. details are described in the following.

data retrieval
ncbi dbsnp is a widely used public database for short genetic variants. we collected indel information by parsing the human genome dbsnp  flat files that contain both snps and indels for chromosomes  <dig> to  <dig>  the original files were parsed to retrieve indel information, including indel id, chromosome number, chromosome position, allele information, and alignment type.

indel alignment type specification verification
to check indel redundancy, we need to determine the alignment type  for each indel relative to the reference genome. ncbi dbsnpiii specifies indel alignment types in four categories, with loctype =  <dig> denoting “insertion on the subject sequence”, loctype =  <dig> “deletion on the subject sequence”, loctype =  <dig> “range insertion”, and loctype =  <dig> “range deletion”. in this work, we focus on small indels, i.e., loctype =  <dig> and loctype =  <dig>  which account for the majority of human indels . as it is unclear from the description page what the subject sequence means in the annotation and our email inquiry to dbsnp helpdesk was not answered, we checked the reference genome to see whether the substrings exist, so the type corresponds to deletion of the substrings. our results show that indels with loctype  <dig> should correspond to deletion made to the reference genome as only about 1% of loctype  <dig> failed to find the substring versus more than 38% of loctype  <dig>  therefore, from here on, we treat loctype  <dig> as deletion and loctype  <dig> as insertion relative to the reference genome.

candidate redundant indel groups
based on the retrieved indel position information, we scanned indels along each chromosome to form candidate redundant indel groups. to limit the number of pairwise comparisons in the subsequent step, we apply further filtrations to the indels when generating candidate redundant indel groups:  because indels belonging to different types  or having different lengths are definitely not the same variant, we only consider indels with the same type and length;  we also set a threshold value for the distance between adjacent indels of the same group since redundancy is less likely to happen between two indels located far away from each other. indels were then grouped into candidate redundant groups if their distances are less than the threshold value. each candidate redundant indel group may contain two or more indels. details are shown in table  <dig> table  <dig> 
algorithm for clustering indels into candidate redundant indel groups



algorithm 1:

input:

output:
current = i
if next adjacent indel i
i’s position p
i - p
current < = d
then
current
= i
else
end


indel redundancy check
to find redundancy in candidate redundant indel groups, we conducted pairwise comparison for indel variant substrings generated from indels in the same group. for each indel, we generated the variant substring based on indel position, allele information, alignment types, and the corresponding reference genome substring. the human reference genome, grch <dig> build version p <dig>  is downloaded from ncbiiv. consider two indels a and b in a candidate group, and without loss of generality, assume that a precedes b on the chromosome. if both a and b are of insertion type, we extract a template substring from a’s position to b’s position on the corresponding reference genome , attach indel a to the front of the template to form a’s variant string, and attach indel b to the end of the template to form indel b’s variant string. these two variant strings are then compared for equivalence, in other words, if the two variant strings are identical, then one indel is redundant with respect to the other. similarly, if both indels a and b are of deletion type, we extract a template substring from indel a’s starting position to b’s ending position on the reference chromosome, delete indel a from the beginning to form indel a variant, and delete indel b from the end to form indel b variant. the comparison between the two variant substrings then determines whether redundancy exists between the two indels. the algorithm details are shown in table  <dig> figure  <dig> 
a demonstration of how we check whether two indel variants are the same.

algorithm for indel pair redundancy check by applying sliding window on reference genome



algorithm 2:

input:
a = t
b,, same length l
a = l
b,
a,
s
b, position information p
a,
p
b, where p
a < = p
b,

output:
i or for deletion type s
s
i
= substring in reference genome with p
b - p
s
d = substring in reference genome with p
b - p
a + l
if
t
a = t
b = insertion then
a in front of template substring s
i to form variant substring v
b at the end of template substring s
i to form variant substring v
if
v
a = v
b
then
else
if
t
a = t
b = deletion then
a in front of template string s
d, form variant substring v
b at the end of template string s
d, form variant substring v
if
v
a = v
b
then
else


statistical analysis of the distribution of indel sizes and adjacent-indel distances
we first consider the size of indels after removing redundant indels. it has been shown that the distribution of indel sizes in human and rodent pseudogenes can be described well by a power law distribution  <cit> . in our study, we perform a similar analysis. as an example, figure  <dig> shows the result of fitting a pareto distribution to the indel sizes on chromosome  <dig>  we set the location or scale parameter of the pareto to be  <dig> since the minimum possible value of the indel sizes is  <dig>  by maximum likelihood estimation , the estimated shape parameter is α^= <dig> .figure  <dig> 
fitting pareto distribution to indel sizes for chromosome  <dig>  left panel: indel size histogram with fitted pareto density function shown in red line; right panel: qq-plot .



next, we consider modeling the distribution of distances between adjacent indels. we take the distance between adjacent snps as an illustrative example. the histogram in figure  <dig> suggests that the distance between adjacent snps may be approximated by an exponential distribution, which implies that the occurrence of snps in the human genome may follow a poisson process. to add flexibility  in modeling, here we use a gamma distribution to fit the distribution of distances between adjacent snps. the corresponding count data model, often called the gamma count model, is a renewal process with gamma inter-arrivals  <cit> . this model is widely used in the analysis of genetic applications, for example, modeling the occurrence of gene conversion  <cit>  and the occurrence of crossovers  <cit> . when the shape parameter α of the gamma distribution is taken to be an integer, this model can be naturally thought of as counting every αth event as an arrival in a poisson process. as an example, figure  <dig> shows the result of fitting a gamma distribution to the distribution of distances between adjacent snps on chromosome  <dig>  with the mle of shape parameter α^= <dig>  and the mle of the rate parameter β^= <dig> . alternatively, if we fit the distance distribution of adjacent variants with an exponential distribution, the mle of the rate parameter λ^= <dig> . we note that these two distributions have similar means and variances, and the log likelihoods for observing such adjacent-snp distances under the gamma and exponential distributions are −  <dig>  ×  <dig> and −  <dig>  ×  <dig>  respectively. analogously, we fit a gamma distribution to the distribution of distances between adjacent indels after redundancy filtration. figure  <dig> suggests that great over-dispersion should be observed for the distribution of distances between adjacent indels in comparison to that of adjacent snps. in other words, the rate parameter is expected to be much smaller for the adjacent-indel distance distribution than that for the adjacent-snp distance distribution. figure  <dig> demonstrates an example of fitting a gamma distribution to the adjacent-indel distances on chromosome  <dig>  the resulting estimated parameters are α^= <dig>  and β^= <dig> ×10− <dig>  and the log likelihood is −  <dig>  ×  <dig>  other distributions such as weibull may also be used to model the adjacent-indel distance distribution in observing its heavy tail. however, the goodness-of-fit may not be better than the gamma count model. in the example of chromosome  <dig>  the log likelihood under weibull  distribution is −  <dig>  ×  <dig> figure  <dig> 
fitting gamma distribution to adjacent-snp distances and adjacent-indel distances for chromosome  <dig>   fitting gamma distribution to adjacent-snp distances. left panel: fitted gamma density function shown in red, observed distribution in black; right panel: adjacent-snp distance qq-plot .  fitting gamma distribution to adjacent-indel distances . left panel: adjacent-indel distance histogram with fitted gamma density function shown in red line; right panel: adjacent-indel distance qq-plot .
the percentage of redundant indels as a function of distance threshold for human chromosome  <dig>  orange column represents insertion type indels; gray column represents deletion type indels; yellow column represents total inels .



RESULTS
indel redundancy rate with different distance cutoffs
we first applied our pipeline to human indels on chromosome  <dig>  as pairwise comparison of all the indels on a chromosome is too time consuming, we set cutoff values for the distance between adjacent indels to  <dig>   <dig>   <dig>  and 100 bps. we generated candidate redundant indel groups based on these cutoff values, then applied indel redundancy verification methods to identify redundant indels. in this process, we calculated the redundancy percentage for indel insertion type and deletion type separately since we only handled alignment type  <dig>  and  <dig>  as discussed in the method section. the results are shown in figure  <dig>  as the distance threshold increases from  <dig> to  <dig>  the total indel redundancy rate increases sharply, from  <dig> % to  <dig> %, however, from  <dig> to  <dig>  the percentage increase trend becomes flat, from  <dig> % to  <dig> %, suggesting that for large distance groups, there is less increase in the number of redundant indels. specifically, for distance threshold  <dig>  we get 13% redundancy rate for insertion type indels and 9% redundancy rate for deletion type indels. based on this observation, we adopted the cutoff of  <dig> as the distance cutoff for identifying redundant indels on all chromosomes.

indel redundancy rates for all the chromosomes
we applied our redundancy check pipeline to indels from chromosome  <dig> to chromosome  <dig> to see how redundancy rate varies with chromosome. figure  <dig> shows that the redundancy rate for insertion type indels, deletion type indels, and total indels. on average,  <dig> % of the total indels are identified as redundant. the redundancy rate is quite consistent across chromosomes . the standard deviation of these redundancy rates is  <dig> %. such a small variation in redundancy rate implies that redundancy occurs homogeneously among all  <dig> chromosomes and indel redundancy problem is not biased towards any particular chromosome. we also provide the proportion of insertions over redundant indels, as shown in table  <dig>  it is found that the numbers of redundant insertions and deletions are comparable among all  <dig> chromosomes, though on average, there are fewer insertions shown in redundant indels than deletions. the slight discrepancy between the rates of redundancy for insertions and deletions may be due to the more frequent occurrence of deletions than insertions.figure  <dig> 
the percentage of redundant indels for human chromosome across 1– <dig>  blue line represents insertion type indels; orange line represents deletion type indels; gray line represents total inels .
various statistics



chromosome
original number of indels
redundancy
insertion redundancy
indel size
adjacent-snp
adjacent-indel
rate 
a
rate 
b
shape
c
shape
d
rate
e
shape
f
rate
g

athe total redundancy rate on individual chromosomes. bthe percentage of redundant insertions. cthe shape parameter of the pareto distributions fitted to the indel sizes . d,ethe shape and rate parameter estimates for the gamma distributions fitted to the adjacent-snp distances. f,gthe shape and rate parameter estimates for the gamma distributions fitted to the adjacent-indel distances. htotal number of indels studied.



in addition, it can also be seen that the size of redundant indels follows a particular distribution. intuitively, redundancy tends to occur more frequently between indels with small sizes. this can be seen clearly from the histogram of redundant indel sizes on chromosome  <dig> .figure  <dig> 
histogram of redundant indel sizes for human chromosome  <dig> 




indel size distribution
after redundancy filtration, we fit the indel size distribution with a pareto distribution. the scale or location parameter is fixed to be  <dig>  mle of the shape parameters for all  <dig> chromosomes are listed in table  <dig>  the shape parameter varies little across chromosomes, ranging from  <dig>  to  <dig> , with mean  <dig>  and standard deviation  <dig> . this is consistent with the shape parameter of  <cit> .

distribution of distances between adjacent variants
we first investigate the distribution of distances between adjacent snps. by fitting the distance distribution with a gamma distribution, we obtain mle for the shape parameter α and rate parameter β for all  <dig> chromosomes . the shape parameter estimates are all close to   <dig>  suggesting that the occurrence of snps on human chromosomes may be described approximately by a poisson process with rate  <dig>  times the genetic distance within humans. on the other hand, after removing the redundant indels, we fit the distribution of distances between adjacent indels with a gamma distribution. the parameter estimates for all  <dig> chromosomes are listed in table  <dig>  with average α^= <dig> , and average β^= <dig> ×10− <dig>  comparing the corresponding parameter estimates α^ and β^ in the gamma count models for the distance distribution of adjacent snps and for the distance distribution of adjacent indels, we see that the mean adjacent indel distance is  <dig> / <dig> ×10− <dig> / <dig> = <dig>  times larger than the mean adjacent snp distance, and also the variance is  <dig> / <dig> ×10− <dig> / <dig> = <dig>  times larger. this result indicates several differences between snps and indels. first, the rate of indel mutations might be about ten times lower than that of single nucleotide mutations. large-scale genome sequencing projects  <cit>  have shown that there are about  <dig> snp every 100 bps, whereas about  <dig> indel per 1000 bps. the rate difference could also be partially contributed by the fact that indels are under stronger selective constraints than snps and stronger purifying selection on indels might have removed more indels than snps.

several aspects merit discussion. first, results on modeling indel size distribution and modeling adjacent-indel distance distribution can be used to estimate gap extension and gap opening in sequence alignment and indel calling algorithms. second, as we limited the distance cutoff to be  <dig>  there is still redundancy, albeit small, in indels that are farther apart than 100 bps. therefore, future improvement includes incorporation of more efficient algorithm for examining all possible indel pairs to identify all the redundant indels. furthermore, other important features, such as sequencing errors, mapping errors, and coverage, may also be incorporated in our algorithm to aid the selection of distance cutoff. one may argue that sequence alignment ambiguity may also reflect true biological events, in the sense that there are correspondingly multiple ways for indels to happen. however, if we focus on the net effect of these variations, it is clear that regardless of the exact indel events, they create the same variant string or genomic sequence and therefore, should most likely have the same effect on the individual carrying the variant. therefore, we believe that it is important to keep only the unique indels.

a web-based tool for indel redundancy check process based on standalone pipeline algorithm
in addition of the standalone indel redundancy check pipeline, we also developed a web-based user friendly tool for indel redundancy check. the web tool applies php/apache/mysql/linux architecture, based on a model-view-controller design strategy. in the web interface front end, a user can input indel information, such as chromosome number, chromosome position, and indel allele information. in the server backend, we have a database table that stores indel information from dbsnps and the indel redundancy check pipeline python program that checks for redundancy based on the user’s input. the redundancy checking results are displayed in the web front end. for computational efficiency, the current web tool only searches for and checks adjacent indels less than 5 bps from the user’s query indel in our non-redundant indel database. the response time is at most a few seconds and the result is displayed to the web front end. however, for their target indel, users can also choose to examine all indels on the same chromosome as the target indel for redundancy check, which significantly increases the computational time. one limitation with the current redundancy check standalone pipeline and web tool is that they only handle indels in humans. as more and more indels from other species are identified, we will add the capability of indel redundancy check for additional species.

CONCLUSIONS
based on the observed indel redundancy in the current dbsnp, we developed vindel, a simple computational pipeline to check for indel redundancy in a database of interest. vindel is implemented in python and used to investigate the degree of redundancy in human indels in dbsnp. the approximate 10% redundancy is observed consistently across all the  <dig> human chromosomes. further statistics results prove the consistency of the pipeline. in addition to the standalone vindel pipeline, the indel redundancy check algorithm is also implemented in the web server http://bioinformatics.cs.vt.edu/zhanglab/indelredundant.php.

endnotes
ihttp://massgenomics.org/2012/01/the-current-state-of-dbsnp.html.

iihttp://www.ncbi.nlm.nih.gov/snp/.

iiihttp://www.ncbi.nlm.nih.gov/snp/specs/alignment_types.html.

ivftp://ftp.ncbi.nlm.nih.gov/genbank/genomes/eukaryotes/vetebrates_mammals/homo_sapiens/grch37/primary_assembly/assembled/chromosomes/fasta

additional file
additional file 1: 
supplementary materials for vindel: a simple pipeline for checking indel redundancy. this additional file includes histograms of indels and snps for chromosome 1– <dig>  and statistics analysis results for chromosome 1– <dig> 

 these two authors zhiyi li and xiaowei wu contributed equally to this work.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

zl performed the computational experiments for the pipeline. bh did data processing and prototype coding. xw did the statistical analysis of the data. lz proposed the design of the pipeline to detect indel redundancy in dbsnp. zl, xw, and lz wrote the paper. all authors read and approved the final manuscript.

