BACKGROUND
the discovery that rna can directly regulate chemical reactions in a cell without being translated into, or coding for, a protein has radically altered the understanding of rna function  <cit> . many types of such non-coding rnas  have been identified, with roles in diverse cellular activities  <cit>  and it is predicted that numerous ncrnas are yet to be identified  <cit> .

correct determination of the secondary structure of a ncrna, i.e., the canonical base pairing interactions between the nucleotides, is important for understanding the chemical basis for its function  <cit> . in addition, accurate prediction of rna secondary structure also improves computational methods that scan genomes for novel ncrna genes  <cit>  because these methods utilize structure prediction to test for conserved secondary structure across genomes, which, in turn suggests that the sequence regions corresponding to conserved structural regions form homologous ncrna genes.

a number of alternative techniques have been proposed for rna secondary structure prediction - a process that is commonly referred to as rna folding  <cit> . for folding a single rna sequence, the state of the art method utilizes a thermodynamic model that predicts molecular stability for a given set of base pairing interactions using a nearest neighbor model  <cit> . when multiple rna homologs that share a common secondary structure are available, significantly higher accuracy can be obtained by folding these multiple sequences together to find the conserved structure. in fact, comparative sequence analysis methods  <cit>  that utilize a large number of homologs for rna folding, currently offer the most accurate prediction of secondary structure. comparative sequence analysis takes as input multiple homologous rna sequences and predicts a consensus secondary structure. the analysis is an iterative process, where the sequences are aligned and conserved base pairs are identified between columns of the alignment. then the pairing information is utilized to refine the alignment of the sequences in the next iteration. comparative sequence analysis aims at combining the folding of individual sequences and the alignment between the sequences to determine the consensus structure. the method is, however, manual and time consuming. computational methods for structure prediction using multiple homologous sequences can be thought of as attempts to automate comparative sequence analysis, typically with a much smaller number of input sequences. a recent comprehensive review of computational methods for structure prediction for multiple sequences can be found in  <cit> .

this paper presents turbofold, a new secondary structure prediction algorithm. turbofold is an iterative algorithm that takes, as input, a collection of homologous rna sequences and outputs estimates of base pairing probabilities for each of the sequences. turbofold computes estimated base pairing probabilities for a given sequence, by using both intrinsic information derived from a thermodynamic nearest neighbor model for folding of the sequence and extrinsic information for folding of the sequence inferred from the other sequences in the input set. the extrinsic information contribution of each of the other sequences is obtained by mapping the estimated base pairing probabilities for the sequences, from the previous iteration, using posterior probabilities of nucleotide co-incidence between sequences. two nucleotide positions  are co-incident if they are either aligned, or if one nucleotide position  occurs in an insertion in that sequence that begins at a nucleotide position aligned with the second nucleotide position   <cit> . co-incidence is illustrated in figure  <dig> and a formal definition can be found in  <cit> . the pairwise nucleotide co-incidence probabilities are obtained by using a hidden markov model  for the alignment between the sequences.

the estimated posterior probabilities of base pairing output by turbofold can be utilized for predicting the secondary structure of the sequences, either by thresholding the probabilities to obtain structures composed of base pairs with estimated pairing probabilities higher than a desired threshold or by using the estimated posterior probabilities in a maximum expected accuracy  secondary structure prediction algorithm  <cit> . the latter algorithm is termed turbofold-mea. while turbofold predicts the secondary structures for the multiple sequences collectively using information from all sequences, it does not do so with a rigid definition of common secondary structure for the collection of sequences. thus turbofold permits variable folding domains that are seen in some of the sequences and not in others, a scenario that is not uncommon in ncrna sequences that are homologous despite the minor variations in their secondary structure topology.

benchmarking results demonstrate that the base pairing probability estimates of turbofold are more accurate than alternative methods that provide such estimates, i.e. for a given sensitivity, the base pair predictions obtained by thresholding the estimated probabilities from turbofold have a higher positive predictive value  than the alternative methods. secondary structure prediction using turbofold-mea also provides among the highest accuracy across the secondary structure prediction methods benchmarked. specifically, for ncrna families with significant structural variation, turbofold-mea has a higher sensitivity than other methods at similar ppv. for other ncrna families, the results of turbofold-mea are comparable to the best performing methods. the computation time and memory requirements of turbofold are modest and comparable to, or lower than, those for other methods with comparable accuracy, with the exception of raf  <cit> , which is faster.

in the next section, turbofold is presented as an iterative algorithm that alternates between computations of a) extrinsic information and b) a modified partition function that yields estimates of posterior base pairing probabilities. within the section, a description is also provided for methods for prediction of secondary structures from base pairing probability estimates, either by composing structures made from base pairs with estimated probabilities higher than a chosen threshold or by using the mea methodology. the results section benchmarks the performance of turbofold and turbofold-mea against other secondary structure prediction methods with regard to structure prediction accuracy and resource  requirements. the discussion section presents the motivation for the proposed method and the nomenclature by exploring connections with turbo-decoding  <cit>  and presents an example that illustrates turbofold's ability to allow variable structural elements across input sequences. the relation of turbofold to existing multi-sequence methods for prediction of rna secondary structure is also addressed within the discussion section.

methods
turbofold takes as input k rna sequences denoted by x <dig>  x <dig>  ..., xk or  where  denotes the set of sequence indices. the length of the mth sequence xm is denoted by nm. thus the sequence xm consists of an sequence of nm nucleotides ordered from the 5' to the 3' end, where each nucleotide takes values from the alphabet set {a, u, g, c} based on its identifying nitrogenous base. a secondary structure sm on an rna sequence xm is represented as the set {}l of pairs  of nucleotide indices il, jl corresponding to the base pairs in the secondary structure, where the subscript l indexes the base pairs in the structure. by convention,  <dig> ≤ i <j ≤ nm and each nucleotide position can participate in at most one base pair. furthermore, as is common, for computational reasons, it is assumed that the base pairs within a structure satisfy the pseudoknot free condition, i.e. for any four nucleotide indices  <dig> ≤ i <dig> <i <dig> <j <dig> <j <dig> ≤ nm, both  and  cannot be base pairs in sm.

the steps in turbofold are listed in algorithm  <dig>  the ensuing description first provides a high-level overview which is followed by details of the individual modules within the algorithm. the notational convention denotes probabilities by π and matrices of probability entries by Π. terms analogous to, but not strictly, probabilities are denoted as  and , respectively, in their scalar and matrix forms. the association of these terms with a sequence or a pair of sequences is indicated by adding superscripts comprised of a single sequence index or a two-tuple of sequence indices. pre-subscripts of p and c indicate that they are associated with pairing and co-incidence events, respectively. finally, if required, a pre-superscript denotes the iteration index.

prior to commencing the iterations, pairwise posterior co-incidence probability matrices cΠ and pairwise sequence identities ψm,s are computed for each pair of sequences , m, , m ≠ s. specifically, cΠ is an nm × ns matrix whose ikth entry cπ  is the posterior probability that nucleotide at index i in xm is co-incident with the nucleotide at index k in xs. the sequence identity, ψm,s, is computed as the fraction of positions, along the maximum likelihood alignment path, in which the nucleotides for sequence xm and xs match. the posterior co-incidence probability matrices cΠ and sequence identity ψm,s are computed efficiently in turbofold using a pairwise alignment hidden markov model   <cit> , which requires o operations and storage for each sequence pair.

once similarities and posterior co-incidence probabilities are available, turbofold proceeds with iterations indicated in algorithm  <dig>  where t denotes the iteration count, commencing at t =  <dig>  the tth iteration computes base pairing probability matrices  for each sequence  using, as input, the base pairing probability matrices  computed in the previous iteration. specifically,  is an nm × nm lower triangular matrix, whose ijth element  represents the tth iteration estimate of the probability that in the secondary structure of xm the nucleotides at indices i and j in the sequence are base-paired. the computation of the base pairing probability matrix  comprises two steps, details of which follow the overview of the algorithm flow. the first step computes a lower triangular nm × nm extrinsic information matrix , using base pairing probability matrices  for all sequences other than xm from the previous iteration. the notation  denotes the set of indices obtained by deleting m from the full set of indices . the second step computes a modified partition function that combines the extrinsic information with the nearest neighbor thermodynamic model to obtain the base pairing probability matrix . the algorithm terminates after  iterations where the first iteration  corresponds to an initialization step where base pairing probabilities  are computed with the extrinsic information set to unity for all sequences. the overall process is illustrated in figure  <dig> in a flow chart format that highlights the iterative nature of the algorithm and the analogy with turbo-decoding in digital communications.

extrinsic information computation
the process for computing extrinsic information  for the mth sequence xm in the tth iteration is outlined next. first values for base pairing proclivity for the sequence xm induced by each of the other sequences are computed. specifically, for each , an nm × nm lower triangular matrix  is evaluated. the ijth entry of  is computed as in  and characterizes the proclivity for base pairing between the nucleotides at indices i and j in the sequence xm, as induced by: a) the base pairing probability matrix  for the sequence xs in the th iteration and b) the alignment posterior co-incidence probability matrix cΠ. equation  can be intuitively understood by referring to figure  <dig>  multiplying , which represents the most recent estimate of the probability that nucleotides at indices k and l are paired in xs, with the probabilities cπ and cπ that the nucleotide indices k and l in xs are co-incident with the nucleotide indices i and j, respectively, in xm yields an estimate for the proclivity of base pairing induced from the index 2-tuple  in xs onto the index 2-tuple  in xm. this estimate is exactly the term listed in the summation on the right hand side of . the summation itself represents an aggregation of the proclivity estimates across the different possible base pairs  in xs.

in , the induced proclivity terms for which either of the two co-incidence probabilities are small can be excluded from the summation in order to reduce the computational load, without incurring a significant   

performance penalty. this is indicated in  by constraining the indices k and l to constraint sets  and , respectively, where  denotes the set of indices for which the posterior co-incidence probabilities cπ  exceed a chosen, sufficiently low, significance threshold, and  is similarly defined. the computation of these sets of constrained co-incident indices is described in detail in  <cit> . if, over all choices of sequence pairs , the average number of elements in the set   is d, then the computation of a term in one of the matrices  requires  operations on average. it is worth noting that without the constraints for indices k and l, the evaluation of induced probabilities in  could be expressed as two matrix multiplications, , which would require  operations per entry.

the use of co-incidence, rather than alignment, probabilities for the generation of extrinsic information is motivated by the fact that the coincidence probabilities, which are the sum of probabilities for matching, insertion and deletion events in the alignment, propagate pairing proclivities to inserted base pairs that change the lengths of helices, whereas alignment probabilities would restrict the extrinsic information to only the conserved base pairs.

utilizing the induced base pairing proclivity matrices, the extrinsic information for base pairing for xm is computed as:   

where  is a normalizing factor chosen to ensure that the maximum value in  is unity. the factor  in  weights the contribution of xs to the extrinsic information for xm using the sequence identity, ψm,s, for sequences xs and xm. the sequences that are highly similar to xm, have a lower contribution to extrinsic information than those with lower similarities. in the extreme case that a sequence xs is the same as the sequence xm, ψm,s =  <dig>  and the weighting factor  sets the contribution of the extrinsic information to zero, which is desirable because in this setting, sequence xs contributes no useful extrinsic information for folding of xm. figure  <dig> illustrates the process for computing extrinsic information  for the mth sequence xm in the tth iteration in a flow chart format.

the aggregation of proclivity matrices and normalization of the aggregate proclivity matrix for computation of extrinsic information for xm requires  and  operations, respectively. the total number of computations for evaluating the extrinsic information for all sequences, utilizing  for each sequence, is:   

the asymptotic time complexity of extrinsic information computation for all sequences is o, where n is the longest sequence length. the memory complexity is o for storage of the extrinsic information matrix for the set of k sequences.

modified partition function for updating base pairing probabilities
at the tth iteration, an updated estimate of the base pairing probability matrix  for the sequence xm is obtained from the extrinsic information  and the nearest neighbor thermodynamic model for xm, which, in turbofold, encapsulates the intrinsic information for folding of xm. a modified boltzmann distribution is used to model the probability distribution of secondary structures on xm, where the probability of structure sm is modeled as   

where r is the gas constant, t is the absolute temperature, and   

is a modified free energy change for structure sm . here Δg <dig> is the gibbs free energy change of folding for sm, which is obtained using the nearest neighbor thermodynamic model with the free energy parameters from  <cit> . the extrinsic information for base pairing contributes to the modified free energy in  as a pseudo-free energy term for each base pair in s and γ denotes the relative contribution of this extrinsic information relative to the intrinsic information represented by Δg. the denominator in  represents a modified partition function for xm defined as:   

the probability of base pairing between nucleotides at indices i and j in xm is formulated as the summation of the probabilities of structures of xm that contain :   

the base pairing probability matrix  is computed efficiently via a modification of the dynamic programming algorithm for partition function calculation  <cit>  that uses the nearest neighbor thermodynamic model. specifically, the pseudo-free energy term in  represents an a priori probability  for the base pair , which in the modified dynamic programming algorithm contributes an addition of the pseudo free energy  when considering pairing between nucleotides . the computation of modified partition function for all sequences has o time complexity and o memory complexity, where n is the longest sequence length.

structure prediction utilizing the base pairing probabilities
the base pairing probabilities computed by turbofold, , are utilized for structure prediction via two methods. the first method thresholds the base pairing probability matrix to determine the base pairs whose estimated probabilities are higher than a significance level pthresh. this yields a corresponding structure   

composed of base pairs deemed significant. any choice of pthresh greater than  <dig>  guarantees that  is a valid secondary structure  <cit> . for pthresh ≤  <dig> ,  may contain base pairs that form pseudoknots or may contain multiple base pairs for a nucleotide.

the second method, turbofold-mea, predicts the structures via maximum expected accuracy algorithm  <cit> . given the base pairing probabilities  for xm, the maximum expected accuracy structure is determined as in , where  is the probability that nucleotide at i is not paired with any other nucleotides.  is computed as:   

the computation of maximum expected accuracy structure is accomplished via a dynamic programming algorithm. the prediction of structures for all the sequences has o time and o memory complexity, where n is the length of longest sequence.   

time and space complexity
the time and space complexity of turbofold can be described in terms of the operations required for the one time initialization and the operations required for the η computationally identical iterations. for the initialization, the estimation of posterior co-incidence probability matrices and the pairwise sequence identities for all sequence pairs requires o computations. in order to store the co-incidence probability matrices computed in the initialization, o memory is required. over the η iterations, for all the sequences, updates of the extrinsic information require o computations and the modified partition function evaluations require o computations. the storage requirement for the iterations is o. these requirements for turbofold can be contrasted with sankoff's algorithm, which requires o computations and o memory, when used with a banded constraint on the nucleotide alignments for reducing computation by "cutting corners"  <cit> . thus, the time and memory requirements for sankoff's algorithm increase exponentially with increasing number of input sequences, whereas the time requirement for turbofold increases proportional to the square of the number of input sequences, and memory requirement increases linearly with the number of input sequences.

it should be noted that, in each iteration, the base pairing probability computations for each sequence are performed independently. therefore the base pairing probabilities for all sequences can be computed in parallel using k processors. in the current implementation of turbofold, the user can specify the number of threads that will be used to compute the base pairing probabilities in parallel. the posix threads library is utilized for implementation of parallel computations.

measures for accuracy of predicted structures
the structure prediction accuracy is evaluated in terms of sensitivity and positive predictive value  of the predictions. for a sequence xm, the sensitivity of the predicted structure is the ratio of number of correctly predicted base pairs to the number of base pairs in the known structure and the ppv is the ratio of the number of correctly predicted base pairs to the number of base pairs in the predicted structure. a base pair between nucleotides at im and jm in the predicted structure is assumed to be correctly predicted if there is a base pair  or  or  or  or  in the known structure, which is consistent with prior methodology for accuracy assessment  <cit> . this scoring reflects the uncertainty in structure determination by comparative analysis and thermal fluctuations in structure.

selection of parameters
the number of iterations, η, and relative weight of extrinsic information, γ, in the modified free energy in  are selected empirically based on experiments. to select the parameters, the prediction accuracy of turbofold is evaluated with different values for γ and η on four training datasets. the datasets include two trna datasets from the compilation of trna sequences and structures by sprinzl  <cit>  and two 5s rrna datasets from the 5s ribosomal rna database  <cit> , respectively. for each family,  <dig> sequences are chosen randomly and divided into combinations of k sequences, where the process is repeated independently for k =  <dig> and k =  <dig>  yielding two training datasets per family . the number of iterations, η, is varied from  <dig> to  <dig>  figure  <dig> shows the plots of sensitivity versus ppv of structure prediction via turbofold-mea with varying η for trna and 5s rrna datasets. the reported sensitivity and ppv for each family is the average sensitivity and ppv of predictions over k =  <dig> dataset. the average sensitivity versus ppv plots for changing η over the k =  <dig> dataset are included in the supplementary data . increasing the number of iterations increases both sensitivity and ppv for both families. increasing the number of iterations, however, also linearly increases the computation time required for turbofold. because the increases in sensitivity and ppv are marginal for η >  <dig>  the number of iterations is chosen as η =  <dig> 

for selecting γ, the structure prediction accuracy of turbofold-mea is evaluated, utilizing η =  <dig>  with a set of values for γ such that γ/rt ∈ { <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> }. figure  <dig> shows the plots of sensitivity versus ppv of structure prediction with changing value of γ/rt over k =  <dig> datasets. the sensitivity versus ppv plot for predictions over k =  <dig> datasets are included in supplementary material . increasing γ increases ppv for both datasets. furthermore, γ/rt ≈  <dig>  maximizes sensitivity of structure prediction for both datasets. increasing γ above  <dig>  rt introduces a tradeoff between sensitivity and ppv. γ =  <dig>  rt is therefore used in the turbofold benchmarks.a version of the turbofold source code that was used to obtain the benchmarking results presented here can be found as additional file 2

RESULTS
three sets of experiments are performed for comparing turbofold with other programs: 1) experiments for assessing accuracy of structures predicted from thresholding of base pairing probabilities as computed by turbofold; 2) experiments for assessing accuracy of structures predicted from turbofold-mea; 3) experiments for comparing time and memory requirements of turbofold with other programs. datasets for benchmarking experiments are generated as follows:  <dig> rnase p sequences are randomly selected from the rnase p database  <cit> , then the sequences are split into sets of k sequences such that  <dig> ≤ k ≤  <dig>  the average sequence length is  <dig> nucleotides and the average pairwise identity, as determined from the alignments computed by clustalw  <dig> . <dig>  <cit> , is 50%. the random selection and division into combinations of k sequences  is also performed with  <dig> tmrna sequences  <cit>  , and  <dig> telomerase rna sequences  <cit>  ,  <dig> srp sequences from the srpdb  <cit>  ,  <dig> trna sequences from the compilation of trna sequences by sprinzl et al.  <cit>  , and  <dig> 5s rrna sequences from the 5s ribosomal rna database  <cit>  . this procedure yields  <dig> datasets for each family and  <dig> datasets in total. the datasets are available as additional file 3

performance benchmarks for estimated base pairing probabilities
the accuracy of structures predicted by thresholding of base pairing probabilities estimated by turbofold, is compared with three other methods that estimate base pairing probabilities:

 <dig>  locarna  <cit>  is structural alignment algorithm for multiple sequences that utilizes pairwise structural alignment computations progressively for prediction of the structural alignment. version  <dig> .2a is utilized, with vienna rna software package version  <dig> . <dig>  in probabilistic mode to generate base matching probabilities with consistency transformation . given k input sequences, the single sequence reliabilities as computed by locarna are utilized as estimates of base pairing probabilities.

 <dig>  rnaalifold  <cit>  is a structure prediction algorithm that takes a sequence alignment of the input sequences. the structures are predicted via maximization of a score that is based on free energy changes and covariation from the sequence alignment. rnaalifold also estimates the base pairing probabilities for sequences via computation of a partition function for the alignment. the version included in vienna rna software package version  <dig> . <dig> is utilized with command line option '-p' for computation of base pairing probabilities with clustalw  <dig> . <dig>  <cit>  for computation of input sequence alignment.

 <dig>  single sequence partition function computation  <cit> , which computes the base pairing probabilities of a given rna sequence in the equilibrium ensemble of secondary structures. the partition function computation as implemented in rnastructure version  <dig>   <cit>  are utilized in benchmark experiments.

for each method, for a given threshold pthresh, the structure formed by base pairs whose estimated probabilities exceed pthresh, is computed. the sensitivity and ppv of this structure are then evaluated with respect to the known structure. the threshold probability pthresh is varied from  <dig>  to  <dig>  in steps of  <dig>  to obtain number of sensitivity vs ppv points which are then plotted along a curve, one for each method. figure  <dig> shows the plots of sensitivity versus ppv for the four methods over the datasets for two choices of number of sequences, k =  <dig> and k =  <dig> 

for the rnase p, tmrna, telomerase rna, and srp datasets, turbofold has higher sensitivity for a fixed ppv, and higher ppv for a fixed sensitivity than the other methods. in addition, the ppv versus sensitivity plot for turbofold approaches the top right corner, corresponding to ideal  = , closer than the other three methods evaluated. the accuracy of turbofold and locarna are comparable over trna datasets. over 5s rrna datasets, the accuracy of turbofold is comparable to that of rnaalifold. the prediction accuracy of rnaalifold, however, depends significantly on the accuracy of the input alignment computed by clustalw. over datasets with high average pairwise identity, which are easier to align, predictions of rnaalifold are higher in accuracy than over datasets with lower average pairwise identity. figure  <dig> illustrates this: compared to other methods, the accuracy of rnaalifold predictions is highest for the 5s rrna, whose average pairwise identity is significantly higher than average identities of other datasets. additionally, the accuracy of rnaalifold for the k =  <dig> dataset is lower than for the k =  <dig> datasets when average sequence identity is low. turbofold demonstrates a better performance with k =  <dig> than with k =  <dig> for all sequence families, as expected.

structure prediction accuracy of turbofold-mea
the structure prediction accuracy of turbofold-mea is compared with eight other structure prediction methods listed below.

 <dig>  raf  <cit>  is a structural alignment algorithm that utilizes progressive pairwise alignments to predict the structural alignment. raf utilizes a simple scoring scheme based on base pairing probabilities , alignment probabilities , and a set of weights learned from a dataset of multiple structural alignment dataset for structural alignment prediction. version  <dig>  is utilized with the default command line option for prediction .

 <dig>  locarna  <cit>  version  <dig> .2a  is utilized.

 <dig>  centroidalifold  <cit>  is a structural alignment method that takes an input sequence alignment and combines the base pairing information and input sequence alignment to predict structures for each sequence. the input sequence alignment is generated by clustalw  <dig> . <dig>  <cit> .

 <dig>  rnasampler  <cit>  is an iterative sampling algorithm that predicts conserved helices in input sequences for structure prediction. rna sampler was used with default options.

 <dig>  rnacast  <cit>  analyzes the folding space of input sequences in terms of abstract shapes and finds the optimal abstract shape that is common for all the structures and uses the optimal shape to generate consensus secondary structure. rnacast is used with 40% free energy energy cut-off threshold, as in  <cit> , because rnacast fails to determine consensus structures for some datasets for higher thresholds.

 <dig>  foldalignm  <cit>  is a method for progressive structural alignment of rna sequences. foldalignm version  <dig> . <dig> is run with foldalign version  <dig> . <dig>  <cit> . the java heap space is set to  <dig> gigabytes .

 <dig>  mastr  <cit>  is a markov chain monte carlo algorithm for structural alignment of a given set of rna sequences. the default command line options are used for mastr.

 <dig>  mxscarna  <cit>  is a method for structural alignment of multiple rna sequences. mxscarna progressively aligns the sequences using an efficient pairwise structural alignment algorithm for determining the set of stems in the sequences that optimizes a scoring function evaluated from precomputed probabilities of base pairing and alignment. version  <dig>  is used in the predictions.

 <dig>  centroidhomfold  <cit>  is a method that takes as input a target rna sequence and  sequences that are homologous to the target sequence and predicts a structure for the target sequence. for an input set of k sequences, predictions for each sequence are obtained by running centroidhomfold k times with each of the sequences serving as the target sequence once with the remaining  sequences as the homologous sequences. centroidhomfold version  <dig>  is used.

 <dig>  free energy minimization  <cit>  as implemented in rnastructure version  <dig>  is used for single sequence structure predictions.

structure prediction accuracies of all the methods are evaluated over the  <dig> testing datasets. some of the methods failed to complete on some of the datasets because of rather large memory requirements. these methods are therefore excluded from the reported results for the corresponding cases in the following description.

comparison of time and memory requirements
the methods are also compared in terms of memory and time requirements. for this purpose, three datasets are generated by randomly selecting  <dig> rnase p sequences and then dividing the rnase p sequences into k =  <dig>  k =  <dig>  and k =  <dig> sequence combinations. it should be noted that the range of the run times required by all the methods is large . the timing and memory benchmarks are performed over the datasets chosen from rnase p family because for these datasets, the time and memory requirements for all methods are large enough to enable reliable estimation. the experiments are performed on a compute cluster for which each node is equipped with two quad-core intel xeon  <dig>  ghz processors and  <dig> gb of main memory running red hat enterprise linux server release  <dig> . table  <dig> shows the time requirements of the methods that executed successfully. the memory requirements of foldalignm, mastr, rnacast and rna sampler exceeded the available main memory on the utilized node. for each method, the reported time requirement is the cpu time spent by the method, as reported by the portable batch system  running on the cluster. comparing the two multi-sequence methods that provide base pairing probability estimates and do not require an input alignment, it can be seen that turbofold is faster than locarna. rnaalifold has the smallest runtime on all the datasets. turbofold-mea runs slower than all methods except locarna. in addition, the computational requirements of locarna scale up fastest as the number of sequences k increases. raf also shows a similar behavior, but the scaling is not as steep as locarna. increasing the number of input sequences increases the time requirements of turbofold-mea though these requirements increase by a smaller scaling factor compared to the increase for raf and locarna.

the time requirements  of methods on timing/memory datasets. each column shows the time requirements of the methods on a dataset, indicated by number of sequences.

the memory usage of the methods on timing/memory datasets. each column shows the memory usage of the methods on one dataset, indicated by number of sequences.

discussion
the computation of extrinsic information in turbofold is similar to several previous approaches for combining homology information for multi-sequence alignment and structure prediction. for example, the method proposed in  <cit>  approximates base pairing probabilities via a computation similar to the extrinsic information computation. turbofold, however, is fundamentally different. whereas the method in  <cit>  is non-iterative and directly utilizes the approximated probabilities for structure prediction via a nussinov style  <cit>  dynamic programming algorithm, turbofold iteratively updates the extrinsic information and recomputes probabilities of base pairing, alternating between these steps in order to refine the estimates of posterior base pairing probabilities. as shown in the results section, the iterative procedure offers a significant improvement over a single computation. also, the consistency transformation  <cit>  is utilized by locarna for re-estimating the alignment probabilities in the progressive alignment via a procedure similar to extrinsic information computation. this procedure, unlike the method in  <cit> , updates only the probabilities of alignment and the structure predictions are not explicitly updated. locarna can, however, perform iterative refinement to update the predictions of structures and alignment. another difference is that the other methods use posterior alignment probabilities whereas turbofold uses posterior co-incidence probabilities. it was observed  that the structure prediction accuracy of turbofold decreases when posterior alignment probabilities are utilized for generating extrinsic information instead of posterior co-incidence probabilities. in addition to combining information from homologous sequences, the extrinsic information can be generated experimentally. for example, in  <cit> , the ability to use chemical mapping data is integrated into single sequence free energy minimization where it contributes to the structure prediction as an experimentally derived extrinsic information and is utilized in a non-iterative manner.

a major difference between turbofold and most available programs is that turbofold does not rigidly enforce commonality of secondary structure for the predictions across the multiple input sequences. this flexibility of turbofold is in sharp contrast with algorithms in the sankoff framework  <cit> , where typically commonality of topology is rigidly enforced during the joint structure prediction process. the lack of a pre-defined model for commonality of secondary structures also distinguishes the method from alternative methods such as rnacast  <cit>  and rna sampler  <cit>  that use representations of secondary structure to explore topologically equivalent foldings of multiple rna sequences. when predicting structures for homologous sequences that have diverged significantly from each other, the ability of turbofold to allow variable structure elements in some sequences offers an advantage. variable structure elements are common in conserved rna secondary structures  <cit> . one such example is the variable loop in trna, which can make a fifth arm in what is often a four-arm structure. an example of such a case in rnase p is shown in figure  <dig>  with the known secondary structures for three rnase p sequences, esh17b- <dig> , synechococcus pcc <dig> , and nocardiodes nsp <dig> . the known structure for nocardiodes nsp <dig> in figure  <dig> diverged from the other structures with a four-way external loop between 5' and 3' ends. on the other hand, structures for esh17b- <dig> and synechococcus pcc <dig> contain an external loop that contains a single branch with 5' and 3' dangling ends. thus, the secondary structure for nocardiodes nsp <dig> is topologically different, in terms of branching configurations, from the secondary structures for esh17b- <dig> and synechococcus pcc <dig> 

the inverse similarity weighting  in  is a good choice despite the fact that fact that, under this weighting, larger weights are assigned to highly diverged sequences can often not be aligned well. this is because, unlike methods that determine one alignment and incorporate it in jointly folding sequences, the alignment information in turbofold is probabilistic and incorporated in the form of nucleotide co-incidence probabilities. for highly diverged sequences, these co-incidence probabilities are smaller in magnitude and diffused over a wider region. though the inverse similarity weighting  in  assigns larger weights to highly diverged sequences, they do not exercise a strong influence when the extrinsic information is computed by averaging across multiple sequences in . the experimental results for srp sequences, whose predicted average pairwise identity is 42%, are in agreement with this observation. compared with other methods turbofold predictions provide the highest sensitivity.

the concept of iterative updates utilized in turbofold is motivated by iterative error-correction coding methods in digital communications  <cit> , especially turbo decoding  <cit> . for the case of two rna homologs, based on the analogy with turbo decoding, the conceptual framework for iterative estimation of rna secondary structures and alignments was previously introduced by the authors in  <cit> , albeit without a practical realization and also with significant differences in details. both turbofold and turbo decoding rely on multiple encodings of common underlying information, which the estimation  procedures seek to recover. in turbofold a  common secondary structure is "encoded" by nature in the form of multiple homologous sequences and the goal of the estimation is to recover this common secondary structure. in turbo decoding, a common digital data stream is deliberately encoded by multiple, usually two, encoders prior to communication over a channel and the receiver seeks to recover the common digital data stream. both problems benefit from iterative update procedures that are enabled by re-framing decoding or prediction in terms of estimating corresponding probabilities. specifically, in turbofold, the formulation of the rna folding problem as a base pairing probability estimation problem, as opposed to the problem of estimating one or more consensus secondary structures, allows propagation of probabilistic information from one sequence to the other and iterative updates. it is also noteworthy that in turbofold the extrinsic information is incorporated as a free energy modification in the partition function for estimating single sequence base pairing probabilities with minimal computational cost, which is analogous, in turbo decoding, to the method for insertion of extrinsic information as a pseudo prior  <cit>  in the decoding procedure for the recovery of a single encoded stream. there are also obvious differences between turbofold and turbo decoding. whereas, in turbo decoding, the encoding of the data is designed manually for explicitly enabling recovery at the receiver, there is no such explicit design for the multiple homologs that form the input to turbofold. this apparent disadvantage is, however, offset in part by the fact that typically many more homologs are available for an ncrna sequence for use in turbofold whereas in turbo decoding use of more than two encodings levies a cost in power and data rate that is usually not justified by relatively minor performance gains that these additional encodings enable.

the main limitation of turbofold is its inability to predict sequence alignments that conform to the predicted secondary structures. in parallel with previously proposed iterative decoding of rna structural alignment in  <cit> , the most natural extension of turbofold for prediction of sequence alignment is via an integration of a probabilistic model for alignment into the existing iterative structure prediction. a probabilistic model for alignment already exists in the hidden markov model. the iterations, however, do not update the co-incidence probabilities of alignment. the integration of probabilistic alignment model into the iterative prediction is currently a future consideration.

CONCLUSIONS
turbofold, a new method for secondary structure prediction for multiple homologous sequences, is presented in this paper. turbofold estimates base pairing probabilities for each of the sequences via an iterative procedure that utilizes extrinsic information from other sequences and intrinsic information from a thermodynamic nearest neighbor model for rna folding. experimental results demonstrate that the iterative updates in turbofold offer a significant improvement over both single sequence computations and over non-iterative multi-sequence computations of base pairing probabilities. the base pairing probability estimates from turbofold outperform alternative multi-sequence methods for estimating base pairing probabilities. turbofold can be downloaded, either as source code or precompiled binaries as part of the rnastructure package for microsoft windows, at http://rna.urmc.rochester.edu.

authors' contributions
aoh designed the studies, wrote the turbofold code, performed the experiments, and drafted the manuscript. gs and dhm conceived the studies and revised the manuscript. all authors read and approved the final manuscript.

turbofold algorithm
input : a set of k homologous rna sequence ,  = { <dig> , ..., k}.

output: posterior base pairing probability estimates  for each rna sequence in the set.

begin

   for m ←  <dig> to k do

      for s ←  <dig> to k do

         // compute the alignment co-incidence probabilities and sequence identities via a hidden markov pairwise sequence alignment model

         compute cΠ  and ψs,m;

      end

   end

   // iterate  times.

   t ← 0;

   while t ≤ η do

      for m ←  <dig> to k do

         // compute extrinsic information for base pairing

         if  then

            // use uniform unity initialization for extrinsic information

            ;

         else

            compute  utilizing  ;

         end

         // compute base pairing probabilities via modified partition function computation

         compute  utilizing  and nearest neighbor thermodynamic model;

      end

      t ← t + 1;

   end

end

algorithm 1: turbofold: iterative probabilistic structure prediction

supplementary material
additional file 1
supplementary material for "turbofold: iterative probabilistic estimation of secondary structures for multiple rna sequences,". this file contains supplementary information for the manuscript that provides details for the computation of the normalization factor, , in eqn. , plots of sensitivity versus ppv for predictions of turbofold over trna and 5s rrna training datasets with k =  <dig> for varying values of η, number of iterations, and γ, weight of extrinsic information, parameters, and plots of number sequences  versus sensitivity and versus ppv for testing datasets stratified in terms of sequence identity.

click here for file

 additional file 2
zip file with turbofold source code. version of the turbofold source code at time of publication of this paper.

click here for file

 additional file 3
zip file of datasets. datasets used in the benchmarking of turbofold and other algorithms.

click here for file

 acknowledgements
the authors thank the center for research computing, university of rochester, for making computation time available for performing the experiments and for technical assistance. this work was supported in part by nih grant r01hg <dig> to dhm. authors were funded by the university of rochester and by the national institutes of health to pay the open access publication charges for this article.
