BACKGROUND
next generation sequencing instruments such as the illumina genome analyzer , solid ,  <dig> , and ion pgm™ and ion proton™  are able to produce dozens of gigabases of sequencing data per week. the illumina genome analyzer and solid platforms produce large data files containing relatively short subsequences  of equal size, usually 30– <dig> bases long. each step in the sequencing process, such as sample preparation, library generation and base calling, can introduce significant biases and sequencing errors. for example: scanner calibration errors can cause one or more specific nucleotides to appear at deviated frequencies in the sequencing dataset . a high concentration of adapters or pcr primers presented during sample preparation can cause biases at the beginning of the reads . additionally, physical disturbances  during the sequencing process can lead to a drop in the quality of one or more sequencing cycles .

a variety of platform-independent, as well as instrument-specific, applications have been developed to identify such biases and errors in the sequencing data
 <cit> . reads manipulation tools have also been developed to perform tasks such as sorting, trimming, filtering, eliminating duplications, and reads curation
 <cit> .

a major inconvenience however, is that each phase in the data manipulation process and in the recalculation of the statistical characteristics of the datasets requires separate applications and must be performed as a series of disconnected steps. the presented interactive windows-based application  performs a variety of data manipulation tasks while simultaneously monitoring the statistical properties of the dataset and allowing users to save and/or undo  each step of the analysis. also available is a linux version that has better performance, but is lacking the interactive and visual capabilities of the windows-based version. slim-filter is compatible with standard illumina genome analyzer file formats , as well as a presented new as  format designed to store only unique reads and their copy numbers in descending order .

implementation
slim-filter for windows is implemented in vc++ and supports all windows  <dig> bit operating systems. plots and diagrams that represent statistical properties exploit the .net library and require a microsoft.net framework  <dig>  . the linux version of slim-filter provides similar functionality, but is implemented as a one-step command line application. setup files, example data, file format descriptions, and the user manual are available on the supplementary website .

windows-based interface
slim-filter for windows is organized as a chain of data manipulation steps which can contain several tasks. the resulting new set of reads can be saved in fasta, fastq, or as formats. corresponding windows summarize statistical properties of the resulting reads . the sequential windows containing statistical summaries for each data manipulation step can remain open, allowing for a before and after comparison of the datasets. slim-filter allows the user to return  to any of the previous steps of the analysis and proceed with a different set of tasks and/or task parameters. the log of the step-by-step statistical analysis and the history of data manipulation is stored in a report text file.

data manipulation
slim-filter can perform eleven different data manipulation tasks. if the input data is available in the fastq file format, the user can  exclude reads with a quality score below a user-defined threshold, or  replace each low quality nucleotide with the “unknown nucleotide” symbol n. the other nine tasks do not require nucleotide quality information and can be performed on data in the fastq, fasta and as formats. each read that contains a single unknown nucleotide can be  replaced by four alternative reads where the n symbol is replaced by each of the four possible nucleotides . this tactic allows for the “recovery” of data from damaged sequencing runs such as the one shown in figure
1c, where a single low quality cycle resulted in the presence of an unknown or low quality nucleotide in the middle of each read. after “recovery”, resulting reads can still be used by most de-novo assembly and snp detection programs.

a sharp decline in the quality of the last nucleotides or the presence of undesirable prefixes may require the user to  trim the prefixes and/or suffixes of all the reads in the dataset. this option is available at any step of the data analysis. slim-filter’s filtration capabilities include:  the elimination of all reads containing odd or unknown characters;  the removal of low complexity reads ;  the exclusion of reads containing template subsequences; and  the interactive deletion of the most abundant reads in the dataset. additional data manipulation features include:  the removal of duplicated and  reverse complementary reads , and  the sorting and storing of reads by order of ascending copy number and in the as data format, which allows the user to easily view or edit the sequencing data files.

statistical assessment of reads
following each step, slim-filter recalculates and visualizes the statistical characteristics of the altered dataset in a new window . the graphical output includes: the  gc content and  entropy distributions for all reads in the dataset, as well as only the unique reads . it also includes  the average position-by-position quality and  proportion of each nucleotide,  the copy number distribution of the reads, and  a list of the  <dig> most frequent reads. these graphical outputs have been chosen to visually detect the most frequent sequencing instrument errors such as scanner calibration, quality drops due to mechanical disturbances, and sample and library preparation errors. the entropy of each individual read is calculated using the formula
e=−∑i=15piln, where pi is the proportion of each of the four considered nucleotides  in each given read. a short execution trace  is available for each window and contains a summary of the previously applied step. the pop-up filter option  opens a list of tasks that can be performed at each given step of the analysis. the “exclude reads containing subsequences” option opens a new window, allowing the user to define subsequences to be used in the filtration process. at any point during the session, the user can save a detailed step-by-step report containing all data, which can be used to re-construct the presented graphs using third-party software such as excel, matlab, r, etc.

RESULTS
linux and windows versions
the core code of slim-filter is written in standard c++ and is available in both windows and linux versions. the .net chart controls are used to display statistical properties. in case of very large input datasets and the limited amount of main memory for windows desktop computers, performance will depend on the frequency of garbage collection performed by the windows operating system. an estimate of the required memory for different reads’ file sizes can be found on the supplementary website.

the linux version lacks a graphical user interface and represents a single-step execution command line application. the linux version also requires a full set of parameters to be present in the command line.

future work
we see slim-filter as part of a line of windows-based applications focused on moving basic  next generation sequencing data analysis tasks from specialized computational facilities to the investigator’s desktop computer. future versions of slim-filter will support paired-end reads as well as reads of flexible sizes generated by the  <dig> life sciences gs flx and the ion pgm™ and ion proton™  sequencing instruments.

CONCLUSIONS
slim-filter has been developed with the goal of providing individual investigators with integrated sequencing reads analysis, curation, and manipulation capabilities. it allows the user to assess quality, collect statistics, and perform basic data manipulation tasks on a set of short reads of equal sizes. multiple error types such as biases at the beginning of the reads, damaged sequencing cycles, sequencing of adapters, and a drop in quality scores at any position in the reads can be treated or trimmed under both windows and linux versions of the program. slim-filter supports the fasta, fastq, and as file formats. setup files for windows 64-bit operating systems and binary files for the linux operating system are available at
http://www.bioinfo.uh.edu/slim_filter.

availability and requirements
project name:slim-filter

project home page:http://www.bioinfo.uh.edu/slim_filter

operating system: windows  <dig> bit, linux

programming language: vc++/c++

other requirements: microsoft.net framework  <dig>  or higher

license: gnu

competing interests
the authors’ declare that they have no competing interests.

authors’ contributions
gg has implemented the windows and linux versions of slim-filter and constructed the first draft of the paper. am-a and ww analyzed various types of sequencing biases/errors and helped identify appropriate ranges for the statistical parameters to be monitored as well as the data manipulation tasks to be implemented. jjh, eb, kk, sg, and mr participated in the design, development and testing of slim-filter. yf developed the core c++ classes used in slim-filter and supervised the project. all authors have read and approved the final manuscript.

