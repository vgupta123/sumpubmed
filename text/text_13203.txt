BACKGROUND
metagenomics is the direct sequencing and analysis of environmental samples. metagenomic studies are used in a variety of fields including, e.g. bio-medical studies  <cit>  and ecological diversity studies  <cit> . as a first step after sequencing taxonomic composition is estimated and taxonomic categories are assigned to the data. this is a challenging problem due to sequence length and complexity of the data captured  <cit> . for analysis of the taxonomic composition the analysis of 16s rrna sequences is a prominent step, see  <cit> . this imposed some limitations, e.g. the copy number can vary by an order of magnitude  <cit>  and therefore we will focus on whole metagenome analysis. multiple tools exist that are able to predict the class of a genomic sample sequence, most of them using alignments carma <dig>  <cit> , mg-rast  <cit> ). as these can be very time consuming, alternative approaches based on profile features have been proposed   <cit> , nbc  <cit> , tac-elm  <cit> , taxsom  <cit> , phymmbl  <cit> , kraken  <cit> , taxy  <cit> ). sequence data are transformed to profile features, i.e. feature vectors that consist of various measurements describing the nucleic composition of the sequence. frequently employed characteristics are g/c content  <cit>  and k-mer occurrence  <cit> . the speedup of these techniques is traded in for a loss of accuracy, compared to the alignment-based methods. nevertheless, it has been shown that k-mer profiles are distinctive enough for binning in metagenomic studies and for classification up to certain levels in the tree of life  <cit> . for benchmarking we compared ake with phylopythia and nbc. phylopythia classifies profile features with a svm-based classifier architecture. the web-based version is called phylopythias. it uses two different models, either a generic model for classification or a sample specific one, which can be generated by the user prior to classification. we benchmarked against the parameterless generic model. nbc implements the naive bayes classifier for taxonomic assignment as a web application. the k-mer length as well as the genomes to match against can be chosen. we chose the bacteria/archea genomes to match against and a k-mer length of  <dig> for benchmarking.

this paper presents ake  a computational approach to rapid taxonomic assignment for an immediate response to new data. a rapid taxonomic assignment can be of interest, when data sets from lots of samples are to be analyzed immediately or new data sets are generated rapidly by filtering and fusion. a result of ake is a rapid taxonomic assignment presented as a web-based, interactive and dynamic visualization. akes computational speed is achieved by  using refined k-mer profile features  <cit> ,  a data-driven, i.e. learned, hierarchical and descriptive model, which provides the basis for classification and visualization, and  parallel computing. this work is based on a previous paper by martin et al.  <cit>  sharing the features and binning method, namely the h 2som. however, the classifier architecture is different and martin et al. do not provide a web interface for visualization of results. furthermore, the execution speed is increased by using parallelization and a faster implementation. to boost classification accuracy a rejection class is introduced to the model containing non-specific profiles. this results in a web accessible system for low performance computers that features an immediate first visual inspection of new data, i.e. some data might be rejected if it is unspecific. the accuracy is comparable to similar approaches but with a faster execution time. the tool is publicly available as a web application , which facilitates the ease of use. this releases the users of the burden of resourceful operations on their own systems, e.g. analyses on small-scale computers in laboratories are made possible. furthermore, no software packages have to be downloaded and installed. the only requirement is an up-to-date web-browser .

recent reports of img <dig>  show a rapidly growing amount of available metagenomes. likewise, the pubmed hits for the term “metagenomics” grew massively in the latter years, showing the importance of the field.

the following methods section describes the features, methods and data used in this study and how these are used to build a classification system for metagenomic data. in the results and discussion section we present the performance on two real world data sets, compared to similar approaches. furthermore, the differences in runtime are reported. the conclusion sums up the results of this study.

methods
as can be seen in figure  <dig> ake consists of two modules: taxonomic assignment  and modeling . in the m-module, a reference set of genome sequences Γref={s } is used to learn a model that describes the function for assignment of taxonomic classes to sequence reads s based on a read’s profile feature x. for assigning new sequence data Γnew{s} with the ta-module, these reads are also represented by profile features x and those are assigned to taxonomic classes. the composition of all assignments of Γnew{s} are visualized in a dynamic and interactive web-tool.workflow of ake. blue boxes are data, whereas green ones are applications.



k-mer features
for using the sequences sζ= <dig> …,n with a mathematical model like the h 2som, features xζ= <dig> …,n have to be computed for the sequence reads. for this purpose k-mer profiles with three different normalizations are used and referred to as xtf,xtfti,xoligo. they are listed here with basic explanations, further information can be found in  <cit> .

a k-mer κj is a word of length k on an alphabet Σ. in this case Σ={a,c,g,t} is the dna alphabet and therefore 4kk-mers κj exist. let tj be the number of occurrences of the k-mer κj in sequence s, cκ a function counting these occurrences and s′ a substring of s matching the specified k-mer. 
  tj=cκκj,swithcκκj,s=s′∈s|s′=κj 

a k-mer-profile k∈ℕ4k is defined as 
  k=t <dig> t <dig> …,t4k− <dig> 

for the sake of compactness we omit the term  for k and κj in the following text. the term frequency features  are gained by normalizing every k-mer profile to unit length. 
  xtf=kk 

by taking into account the abundance of a certain k-mer in all k-mer-profiles we gain the term frequency term importance  weighted features. let tj=∑ζtj denote the sum of frequencies of k-mer κj in all k-mer-profiles in Γref. let t=∑04k−1tj be the sum of all frequencies for a sequence s. therefore, we compute the tfti-weighted features for every k-mer profile as: 
  xtfti=t0t0t,t1t1t,…,t4k−1t4k−1t 

to reduce a bias towards frequent k-mers the vectors are normalized to unit length.

considering the over- and under-representation of k-mers in one sequence compared to the others we compute the oligo features . therefore, the occurrence of each k-mer is computed and the expected occurrence of it is estimated. let 
 p=1|s|cΣwithη∈Σ,cΣη,s=η′∈s|η′=η  be the probability to observe a certain nucleotide η in a sequence s with a sequence length |s| and let η′ be a nucleotide in the sequence s matching a specified nucleotide. let e≈|s|∏l=0k−1p  be an estimate for the occurrence of a k-mer κj in a sequence s. the contrast of expectation and observation is 
 g= <dig> ifkj=0kje,ifkj>e−ekj,else 

the oligo features are computed for each k-mer as 
  xoligo=g,g,…,gκ4k− <dig> 

the h2som classifier
for creating a descriptive model of the k-mers a hyperbolic self organizing map is used. the self organizing map is a neural network proposed by teuvo kohonen  <cit> . many variants have been proposed since, but all share the basic setup that consists of a set of neurons i=1…i that are arranged in a grid with zi being the grid coordinate and ui being the attached neural unit also called the prototype. the architecture of the grid differs by the type applied.

in the hyperbolic som   <cit>  the algorithm is defined in non-euclidean space. the hyperbolic hierarchical som   <cit>  as used in this paper introduces a hierarchical grid structure to the hyperbolic version.

in metagenomics, the h 2som has been applied already for visual exploration and binning  <cit> . in  <cit>  it was shown, that clustering genome data with a hsom correlates more to the tree-of-life structure than the standard som clustering.

the network is built by placing a central neuron and spawning its s− <dig> children around it using the möbius transformation. this is done recursively for every neural unit until all have s neighbors and the maximum number of rings r is reached. hereby s− <dig> neighbors are placed as children,  <dig> as siblings and  <dig> already exists as parent. for further information refer to  <cit>  or see additional file  <dig>  an example of a h 2som grid with two rings and seven neighbors  is shown in figure  <dig> architecture of h
2
som. the construction of a h 2som grid with s= <dig> and r= <dig>  a möbius transform is used in a recursive way to create a regular shaped hierarchical grid in hyperbolic space.



the learning of a non-euclidean som is done equivalently to an euclidean som using a reference set Γref={x}, but with a refined neighborhood function  taking the change from euclidean to hyperbolic space into account. 
  h=exp−arctanzi−zi′1−z¯izi′σ <dig>  

the number of neural units in the grid of a h 2som grows exponentially with the number of rings r. this leads to a more trustworthy mapping but dramatically increases the time required for the search for the best matching unit  during training. leveraging the hierarchical structure of the grid a beam search is applied to approximate the global bmu in each training step. the search starts with the central neural unit as the initial bmu. for a beam width of w= <dig> it continues by recursively choosing the bmu among the children of the last winning neural unit until it reaches the current periphery of the grid. the bmu determined for the last ring is an approximation of the global bmu. for values of w> <dig> searching is done equivalently, but the children of w different neural units are searched for the bmu. it has been shown in  <cit>  that this strategy accelerates the training significantly while staying close to or even surpassing the performance using global search.

the h 2som depends on parameters that need to be optimized. these are the number of rings r, the spread factor s, the neighborhood adaption modifier n and the learning rate ε. the algorithm is very robust against changes in ε and n but the parameters determining size and architecture  are important. by employing cross validation the parameters r= <dig> and s= <dig> were determined to create a good descriptive model .

taxonomic labeling of unsupervised neural networks
after training the h 2som neural units are linked to semantics, i.e. taxonomic categories. to this end, the labeled training data Γref{,l)}, where Γref is a set of features with their respective labels, are mapped to the h 2som. this is done with a labeling function ℒ that is defined on the voronoi cell v of the training data for each prototype 
 v:v=x∈Γref|dx,ui<dx,uj,∀i≠j  using a given metric d . we propose two approaches: majority voting ℒmaj and purity voting ℒpur defined as 
  ℒmaj=argmaxl,l))withΨ,l)=x∈v|l=l 

and 
  ℒpur=ℒmaj,ifΨ,ℒmaj)>αr,else, 

with  being a special label namely the rejection class and α a threshold value.

classification rules
a h 2som labeled in one of the above ways can be used for classification. to assign a sample ξ , the profile feature vector x is computed, employing the same k-mer normalization strategy as used for labeling the model. for assignment a particular function cx is chosen from cnnx,cthreshx,cnbrsx, defined in the following.

the most straightforward function is to assign x to the label ℒ, which is assigned to the nearest neighbor uj in the model. 
  cnnxξ=ℒwithj=argminidx,ui 

furthermore, the distance function d,uj) can be seen as a certainty measure that the bmu uj is the correct association of x. therefore, we define an arbitrary threshold β beyond which the association is assumed to be uncertain. the value of β is empirically determined. 
  cthreshx=cnnx,ifdx,uj<βwithj=argminidx,uir,else 

the previous strategies determine the label in a winner-takes-all  manner. but the h 2som has the property that neighboring neural units, i.e. grid neighbors, share common properties, usually referred to as “neighborhood preservation”. the third version uses this feature to reduce the number of false positive classifications. to this end, the neighborhood of a bmu is evaluated to smooth out unlikely assignments with a large bmu distance and “taxonomic disagreement” to the neighborhood. 
  cnbrsxξ=ℒ,ifdx,uj+1+dx,uj−1<3∗dx,uj∧ℒ=ℒwithj=argminidx,uicnnx,else 

for training sequences exceeding  <dig> kb from the ncbi full genome database  were used. a list of gi numbers  is provided . out of these sequence data four different data sets were generated for model building. therefore, the sequences s were cut at different length  <dig> kb,  <dig> kb,|s| <dig> |s| <dig> 

RESULTS
for parameter optimization and model evaluation a cross validation study  was done. the most promising k-mer length was determined to be k= <dig>  for larger values of k the classification accuracy increased partly, however a decrease in speed can be observed. the two labeling strategies , for building the taxonomic model, combined with the three different classification algorithms  were applied. a trade-off between correctness of assignment and number of rejections was observed for all six variants. a good balance between assignment correctness, number of rejections and execution speed was determined using purity voting  for model construction and nearest neighbor selection  for taxonomic assignment.

thus, for the following real world data set examples, purity voting with a threshold of α= <dig>  for labeling  and the nearest neighbor strategy  for assignment were the most promising settings compared to the other variants. for the h 2som algorithm an architecture with r= <dig> rings and s= <dig> neighbors was chosen.

acid mine drainage
the acid mine drainage data set  <cit>  was taken at iron mountain in california. the community is comprised of five high abundant species namely ferroplasma types i and ii, a thermoplasmatales species, all of phylum euryarchaeota, and leptospirillum sp. group i and ii of phylum nitrospirae. the data has been received from doe joint genome institute ) along with its taxonomic affiliation and is build of  <dig> scaffolds of approximately  <dig> mb of sequence information.

we compared ake with some similar approaches including nbc  <cit>  and phylopythias  <cit>  with generic and sample specific model. all results were obtained using a model derived from the  <dig> kb data set of ncbi genomes mentioned above. we did not explore the possibility to generate a sample specific model as described in  <cit> , but expect it to have a similar positive influence as in the cited study. when using the web service the parameters given above are applied.

the high abundant species are thermoplasmatales archaeon gpl , leptospirillum sp. group ii , leptospirillum sp. group iii , ferroplasma acidarmanus type i , ferroplasma acidarmanus type ii . when looking at the results  we see that ake outperforms nbc and phylopythias . but it is outperformed by phylopythias employing a sample specific model.results of the amd study. comparison of ake/nbc/phylopythias with a generic model/phylopythias with a sample specific model. data for nbc/phylopythias derived from  <cit> .



cow rumen
the cow rumen data set consists of a community taken from the deconstruction process of switchgrass in a cow rumen  <cit> . the cited study could identify  <dig> draft genomes with completeness between 60% and 93%. on the phylogenetic level of order these samples are comprised of spirochaetales, clostridiales, bacteroidales and myxococcales. since a gold standard for all scaffolds does not exist, this reference composition ) has to be taken as a rough estimate. the data has been received from nersc science gateways . an assignment for the genomic bins  as well as for the scaffolds  is provided. we compared phylopythias  and nbc with ake. when looking at the results  we see that ake outperforms nbc and predicts slightly better than phylopythias.results of cow rumen bins study. comparison of ake/nbc/phylopythias with a generic model.



online resources
please note that further classification results are provided online within ake. these include the results of the amd and cow rumen data sets with classification down to order as well as a reference composition for these data sets visualized with ake. furthermore, the analysis of simulated data sets  <cit>  is provided.

execution times
the application is written in python using a c extension for fast computation. the authors implemented the k-mer counting as well as the h 2som. the execution times are measured using python’s time() function. all experiments were repeated ten times and the mean value of this is stated below. the machine used, is the same web server that serves the results for the web interface. it is a virtual machine running two intel xeon e <dig> cpus at  <dig> ghz with  <dig> gb main memory operated by sun solaris  <dig>  the application is multi-threaded using  <dig> threads.

the execution times are dominated by the counting of k-mers, which is heavily influenced by i/o load on the system . for faster loading all data resides on a tmpfs filesystem . it is to note that the times were measured with a standalone non-cgi application. a little overhead using cgi can be expected as well as some time for uploading of data.execution times of ake



data set
#sequences
megabases
runtime
runtime


in s
in s
measures for typical metagenome data sets.



the web-application
the web-interface is accessible at www.ani.cebitec.uni-bielefeld.de/ake. the website is protected by a login screen . a login with password can be chosen on this page. the browsers, which are known to work properly with ake are indicated at the bottom of the page. after login the user is redirected to the landing page  where every subpage is accessible. a basic project management – creation, removal, storage of basic information  for the creation of the project – is supported .overview of ake.
a) login as well as registration and password retrieval can be done here. b) landing page of ake: here all important pages are accessible directly. 1) create a project 2) browse projects 3) browse models 4) logout c) project view: basic project management features are provided.



during project creation two modes of operation can be chosen. the preview mode is for receiving a fast result for data sets smaller than  <dig> mb. here the results are computed immediately. for larger files, which need more computation time, the classification mode can be used. the computation is done on a powerful machine in this mode but is not guaranteed to start immediately, so that the user will get notified by email when all results are computed. the projects’ assignment visualizations contain a krona  <cit>  inspired view. for this view two different colorization options are available . one option colorizes every item in a specific predefined color. this is especially helpful to compare two different results as entities, because taxonomic categories are colorized consistently across results. the other option is helpful when looking at only one result and colorization is inspired by the hsv color wheel. it helps in retaining orientation when zooming in . the zoom enables the user to interactively browse the classification results. by clicking on a category, it becomes the new root of the visualization. this allows the inspection of small entities and interesting subtrees. for visualization the d <dig> framework  <cit>  was used. here the so-called sunburst tree is generated with the automatic d <dig> partition layout. a client-server architecture is used with the back end written in python with c-extensions. the communication is done via json.ake results view with coloration options.
a) the entities, i.e. taxonomic categories are colorized according to the position on the disc. b) every entity is colorized in a predefined way.
zooming in of ake results view. when clicking on one category like a) the disc is transformed. the activated category is the new root and the new whole disk is used to display only its descendant results in the taxonomic subtree. this helps in exploring smaller entities ) on lower ranks. in addition, the amount of information is reduced so that the remaining one can be accessed more easily. with a click on c) one can go back to the prior view. furthermore, one can skip taxonomic ranks on zooming in. it is not only possible to zoom in on the next rank but on arbitrary levels of the hierarchy e.g. by clicking on b).



CONCLUSIONS
a comparison of web-based taxonomic classifiers is shown in figure  <dig> based on the analysis of the amd data set. ake outperforms phylopythias  <cit>   and nbc  <cit>  in all measured categories and the execution time is one  or two  orders of magnitude faster. a result with webcarma  <cit> , which is a homology-based classifier, has been obtained within about a week. it outperforms all composition-based methods, with  <dig> correct assignments, except our system ake  on phylum level. the number of rejects of webcarma, i.e. the assignment to an “other” unknown class, on phylum level  is comparable to phylopythias but it is much higher than in nbcs or akes results. the detailed results are given in table  <dig> comparison of web-based taxonomic classifiers for amd data set. the data is based on  <cit> , the respective web sites and personal measures. note that speed  is depicted in reverse order. predicted correctly is the number of predictions which are also present in the reference composition. model size is the number of genomes which are included in the model building process. the percent classified value expresses the inverse of the percentage of rejected data.  and this figure  are most probably due to different application versions).
performance comparison of phylopythias, nbc, webcarma and ake for amd data set on phylum level



algorithm
#correct
#wrong
#unknown
runtime
assignments
assignments
assignments

in s


the evaluation of different web-based taxonomic classifiers shows that the runtime differs dramatically from a second , to minutes , to an hour , to almost a week  due to algorithmic features and implementation details. ake is faster compared to the other applications because it only needs to compute the euclidean distance between the descriptive model and the data that should be classified, whereas the others need to compute alignments  or apply decision functions . furthermore, optimized c code and multi-threading accelerates the application. the neural network used is especially suited to generate a hierarchical, compact, descriptive model, which allows fast queries using a beam search to limit the number of euclidean distance searches. although there might be methods reported to be equally fast and more accurate, to the authors knowledge there exists no web-based solution which performs equally well, in terms of execution time and accuracy for generic metagenome data. since accuracy drops down significantly for ranks lower than order we do not report these here, since our focus in development lay on acceleration and a dynamic web-based visualization system.

ake is a fast taxonomic assignment tool for first visual inspection of whole metagenome data sets. its web-based dynamic visualization allows fast analyses even on low performance computers without installation of software. furthermore, the web-based approach enables a cooperative analysis of data with colleagues.

additional files
additional file  <dig> 
detailed description of h
2
som. pdf file giving a detailed description of the h 2som algorithm. open with you favorite pdf reader, e.g. adobe reader.



additional file  <dig> 
table for cross validation study. pdf file presenting results for the cross validation study. open with you favorite pdf reader, e.g. adobe reader.



additional file  <dig> 
list of gi numbers of sequences used for training. text file listing the gi numbers of the sequences used for training. unzip and open with your favorite text editor.



competing interests

the authors declare that they have no competing interests.

authors’ contributions

dl, ag and twn participated in the design of the study. dl implemented the study. dl and twn analyzed and interpreted the data. dl, ag and twn prepared the manuscript and revised it. all authors read and approved the final manuscript.

