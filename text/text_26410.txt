BACKGROUND
high-throughput genomic technologies continue to move in a direction where data yield from the instruments is increasing, while the cost for acquiring the technology is continuously decreasing. for example, the introduction of benchtop genome sequencers such as miseq from illumina  <cit> , has made complete sequencing of viral, bacterial, and small fungal genomes affordable to small laboratories. nonetheless, acquiring the sequence is only the first step, and must be followed by large-scale computational analysis to process the data, test hypotheses and draw scientific insights. therefore, investment in a sequencing instrument would normally be accompanied by substantial investment in computer hardware, skilled informatics support, and bioinformaticians competent in configuring and using specific software to analyze the data.

an alternative model is now available: computational capacity can be purchased as a service from a cloud computing provider, and specialized computational systems can be run on such platforms  <cit> . cloud infrastructures provide researchers with the ability to perform computations using a practically unlimited pool of virtual machines , without the burden of owning or maintaining hardware  <cit> . cloud computing services use a charge model similar to utilities such as electricity, and thus customers are billed based on amounts of computing resources consumed  <cit> . along these lines, the cloud biolinux project offers an on-demand, cloud computing solution for the bioinformatics community, and is available for use on private or publicly accessible, commercially hosted cloud computing infrastructure such as amazon ec <dig>  for small laboratories without access to large computational resources, running cloud biolinux through a commercial cloud platform provides a cost-effective route from data to knowledge, while those with access to private clouds will still benefit from the abundance of pre-configured software and the user-friendly desktop interface available.

cloud biolinux takes advantage of the fact that vms provide a mechanism for whole system snapshot exchange  <cit> . with this approach, the operating system, software tools and databases, are encapsulated into a single digital image of the computing system that is readily archived and restored for later use. a snapshot captures all changes made inside a vm server from its initial execution, up to the point of snapshot creation. these changes include for example user-uploaded data, configuration settings and analysis results generated by running bioinformatic pipelines. a snapshot is also an executable vm, and can be shared with other users of the cloud, therefore allowing collaborating researchers to share uploaded data, analysis results and bioinformatics tools in as a single digital image. having access to specialized vms with scientific results for a particular scientific domain can greatly speed up research, as it substantially decreases, and in many cases removes the time required for an individual to configure the computing system with data and software to meet their research needs.

an early pioneering effort to provide such a system for the bioinformatics community was nebc biolinux  <cit> . nebc biolinux contains over  <dig> bioinformatics packages, including the blastall and blast+ ncbi applications, the staden toolkit, emboss, hmmer, and phylip collections of software, many stand-alone applications for tasks such as sequence alignment, clustering, assembly, display, editing, and phylogeny, as well as tools for working with next generation sequencing data. the system is also designed to allow setting up and maintaining a data analysis environment with very little informatics expertise, running a "live system" from a dvd or usb stick , or installing it to the hard drive with a simple graphical installer.

building on the bioinformatics packages, documentation and desktop interface of nebc biolinux release  <dig> , we developed cloud biolinux by leveraging vm technology and the cloud to offer a pre-configured, high-performance bioinformatics computing solution. included by default are all bioinformatic software packages from nebc biolinux, in addition to next-generation sequencing data analysis tools including for example the fastx utilities, sam and bam toolsets, genome analysis toolkit , bwa, novoalign and bowtie aligners, the mummer toolkit, and the velvet, ssake, mira, newbler and cap <dig> genome seqeunce assemblers. furthermore, bioinformatic code libraries such as biopython, bioperl, bioruby, biojava, r and r-bioconductor programming languages are included. besides the pre-installed software, cloud biolinux provides scripts for accessing a repository of reference genomes  on an amazon s <dig> bucket. the reference genomes are pre-indexed for a number of popular sequence alignment software packages, including bwa, bowtie and novoalign. a script and configuration files are included as part of the cloud biolinux framework, for selecting indexed genomes and installing them directly from the cloud storage on a running vm.

detailed documentation for each tool included in cloud biolinux is available as set of html pages structured as mini-website, and linked from the main cloud biolinux website and as an icon on the graphical interface of the vm . this mini, self-contained website allows users to select documentation for the installed packages from a drop-down menu, where the applications grouped based on their functionality, with some example groups including statistics, alignment, clustering, databases, microarrays and phylogeny.

end-users can simply instantiate cloud biolinux vms using only a web browser through a local desktop computer to access the amazon ec <dig> cloud console, and then login to the rich graphical interface using a remote connection without need for any advanced technical knowledge. an example remote desktop client is the one by nomachine  <cit> , which is available at no charge for windows, mac or linux computers. for advanced users and developers, we have implemented an automated software management framework, which allows complete customization of the bioinformatics tools included in the cloud biolinux vm, while also enabling easy updates and deployment on different cloud platforms. since the project is fully open-source, researchers and software developers at their laboratories can freely download, modify, and run the vms on a public or private cloud.

in the following sections we first present the technical details of the cloud biolinux software management framework, and how it can be leveraged for creating customized vms and deploying to different cloud platforms. then we detail how end-users without access to local computing infrastructure, can run cloud biolinux by simply using a desktop computer with internet access. finally, we discuss our future plans for further development of this project.

implementation
the cloud biolinux project is community-centered and was designed for collaborative development, while the wide range of software included in the vm can serve a variety of bioinformatics analysis needs with a research groups from initial processing of next-generation seqeuncing data  to genome assembly , and sequence database search . nonetheless, in order to also support advanced users and developers towards building and distributing customized vm configurations on public or private cloud platforms, we implemented a modular system that bootstraps the cloud biolinux vm creation process and is freely available from our project's code repository on github  <cit> . the code repository provides a focus for the collaborative developer community to contribute and review updates to the system, as well as being the basis for creating and distributing customised rebuilds of the vm.

the system is composed of a main driver script and a set of configuration files that developers and advanced users can edit in order to select bioinformatics software and create their own customized version of cloud biolinux. the design goal for the system is to simplify the process of selecting the software configuration, automate building of new bioinformatic vms with the specified software, and seamlessly deploy them on amazon ec <dig>  eucalyptus or openstack clouds  <cit> . the implementation is based on the fabric software management system  <cit>  and debian aptitude  <cit> . for deploying a customized cloud biolinux, developers can start from a base vm containing any debian aptitude  compatible linux operating system, where the bioinformatics tools will be installed . for deployment on amazon ec <dig> we used the ubuntu alestic vms  <cit> . a set of base vms are freely available via the ubuntu enterprize cloud website for download and use on a eucalyptus clouds  <cit> , but developers requiring non-default settings can create their own from scratch using ubuntu builder  <cit> .

next , software developers download the script and configuration files from our github code repository, and then can edit the configuration files to customize the bioinformatics tools to be included in cloud biolinux. by default the software specified in the configuration files is from the apt-based nerc biolinux  <dig>  repository. in these configuration files, we have categorized software packages in modules based on their bioinformatics functionality, including for example next generation sequencing data analysis, de novo assembly, annotation, phylogeny, molecular modeling and gene expression analysis. during customization developers can add or remove complete modules, or individual software packages from each module. in addition to the biolinux  <dig>  software, extra packages are installed from the standard ubuntu apt repository where they are maintained through the efforts of the debian-med community  <cit> . additional apt compatible bioinformatic or scientific software repositories can be specified , and software can be mixed and matched from the different repositories including for example code libraries from the comprehensive perl archive network  <cit> . when the scripts are executed  the configuration files are parsed by fabric, which performs retrieval and installation of the selected software from the nerc or the other repositories, converting the base vm to a fully-functional, customized cloud biolinux system.

within the same framework an additional fabric script and configuration file, allow managing and accessing an amazon s <dig> repository of pre-indexed reference genomes for a number of popular sequence alignment packages. similarly with the scripts that install customized sets of software within cloud biolinux, a user can select reference genomes to install in the vm by editing the configuration file, and the fabric script automatically downloads and installs the data during build time. instructions for executing the script, are provided from the project's source code repository on github  <cit> .

collaborating software developers can use a source code repository like github where our original files reside, and share the edited configuration files in order to distribute their customized version of cloud biolinux with selected software and data. the process follows a circular workflow as shown on steps  <dig> , <dig> of figure  <dig> where a developer starts from a base vm, retrieves and edits the configuration files, then runs the scripts to create a customized version of cloud biolinux; finally, she shares the edited configuration files by committing the changes back to the github repository. other developers can replicate the customized vm on their cloud by performing on more cycle: start a base vm, retrieve the edited configuration files and run the fabric scripts. if desired, the developer can make additional customizations in the configuration files, which are also shared through the same cycle. this process can be repeated multiple times among more than two collaborators, and across any public or private cloud platform.

on the other hand, end-users using a customized or full-version of cloud biolinux prepared by developers, can leverage the flexibility of working with vms on the cloud by sharing their research based on the circular workflow shown on the steps  <dig>  of figure  <dig>  in the first step a researcher can upload data from her local desktop computer such as genomic reads generated at her laboratory, or retrieve data from public databases such as ncbi  using the web browser or the standard ftp utilities available in the cloud biolinux vm. then, data analysis such as a de novo genome assembly with velvet or mapping reads to a reference genome using bwa, can be performed. following analysis the researcher has the option to create a whole system snapshot and make the assemblies accessible to collaborators by granting them access to the snapshot on amazon ec <dig>  or exporting the snapshot for download and execution on private clouds. using the snapshot, collaborators can execute new cloud biolinux vms on ec <dig> or their private cloud that now include the genome reads and sequence assembly, then repeat the cycle by uploading additional data or re-creating the genome assembly with different parameters and generating a new snapshot to share their updates in turn.

RESULTS
cloud biolinux virtual machines on the cloud
we have made cloud biolinux publicly available through the amazon ec <dig> cloud, which is an industry-scale cloud platform backing the worldwide amazon.com informatics infrastructure with data centers in us east and west regions, european union and asia. with this approach, we can enable researchers without access to local computing clusters to perform large-scale data analysis, by tapping into a pool of on-demand cloud biolinux vms that can be rented at low cost starting from  <dig> $ us per hour for a single core/ <dig>  gb memory ram/ <dig> gb of storage vm, and up to 2$ us for vms with  <dig> cores/ <dig> gb of ram/ <dig>  tb of storage based on amazon ec <dig> pricing  <cit> , and are available worldwide and independently of institutional, economic or national boundaries.

a user can run cloud biolinux in three simple steps through a web browser, assuming only access to a desktop computer with internet connection:  <dig>  sign up for an amazon ec <dig> account and login to the cloud console  <cit> ;  <dig>  within the console use the wizard  for launching cloud biolinux and specify the cloud biolinux vm image identifier , then select computational capacity, storage, number of vms to execute and specify a password for the remote desktop login;  <dig>  finally, copy from the web browser window of the amazon cloud console the assigned internet address to the vm  for the launched cloud biolinux, and paste it in the remote desktop client. after the remote desktop client establishes the connection, a user has access to a full desktop session with applications presented in a bioinformatics menu, in addition to documents and tutorials linked via desktop icons .

the steps for running cloud biolinux are described in more detail in the documentation available from our project's website. also the procedure for transferring data from the local computer to the cloud is explained, including a troubleshooting guide for common problems. for higher security, instead of providing a password through the ec <dig> launch instance wizard a user can take the additional step of setting up secure shell  keys, which is fully described in the documentation. alternatively the cloud biolinux vm can be executed on an open-source eucalyptus cloud, or directly on a desktop computer using virtualization software like virtualbox  <cit> . a virtualbox appliance to run on a common desktop computer  is available on our project website, in addition to a vm ready to execute on the eucalyptus cloud.

next-gen sequencing data analysis with cloud biolinux
the goal of the cloud biolinux project is to provide a configurable, automated framework for building vms with biological software. currently, producing a push button analysis platform for a particular analysis community requires both expertise and effort to move from a base vm to a fully configured cloud computing solution. projects like clovr, bioconductor, qiime and gmod  <cit>  demonstrate the usefulness of pre-configured vms with specific types of analysis for biologists; by establishing cloudbiolinux as a community framework we hope to ease the production of these resources for a broad audience of bioinformatics developers from various backgrounds and with different research goals.

overall, bioinformatics pipelines that involve datasets that can be segmented and their parts independently processed , are good candidates for parallelization on a cloud computing environment. the reason is that currently available cloud computing architectures such as amazon ec <dig> do not offer extremely large-memory vms  for vertically-scaling, monolithic software applications such as de novo genome assembly. this makes the cloud approach only feasible for the assembly of smaller genomes. unlike de novo assembly, horizontally scaling software such as mapping assemblies, sequence database search, gene finding and genome annotation are well suited for execution on the cloud.

based on these principles, we have prepared a use-case example by developing a parallel exome sequencing data analysis pipeline . the pipeline is composed of a set of python scripts , and leverages numerous tools included with cloudbiolinux: sequencing alignment is configurable from options such as bowtie, bwa and novoalign; bam alignment processing takes advantage of the picard toolkit; variant calling uses gatk; quality assessment utilizes fastqc. the cloudman server  <cit>  that is also integrated with cloudbiolinux allows parallelization of each of these tasks to reduce execution time, through distribution of the computation across nodes of a sun grid engine  cluster. the cluster size is specified by the user and is automatically assembled by cloudman, by instantiating and connecting on a cloud-based sge grid a number of cloud biolinux vms.

we have successfully completed this data analysis pipeline with a runtime in the order of a few hours, using approximately  <dig>  paired-end illumina hiseq reads on a cluster of large-memory  instances on amazon ec <dig>  measurements of performance and costs for different cluster setups is beyond the scope of the current manuscript, as our focus is to present the details of the cloud biolinux framework that enables development of bioinformatics infrastructures on the cloud. several studies have gathered data on cloud computing performance for scientific applications , while we also plan a follow up study presenting performance details of cloud biolinux running a set of complex bioinformatic data analysis pipelines.

discussion
virtual machines  that run on cloud computing platforms are an alternative to in-house informatics infrastructures for bioinformatic data analysis, requiring minimal set-up and no up-front hardware costs. renting servers on the cloud can work as a better model for smaller research laboratories, where the cost for hardware and data center maintenance, cannot be justified to support only a few experiments. using vms allows for snapshots of the computing server to be taken, including the operating system and software, input data files configured settings and analysis results. the vm snapshots can be shared among collaborating researchers using a commercial cloud platform such as amazon ec <dig>  open source clouds including eucalyptus or openstack, or desktop virtualization software like virtualbox. snapshots are an ideal approach for reproducibility of in-silico analyses, given that bioinformatics research involves small but important configuration changes while working with the different tools and datasets. these include for example tuning algorithm parameters in software installations, or making ad-hoc modifications to software for specific data processing cases, which are otherwise difficult to capture and share among collaborators.

bioinformatics projects that use cloud technologies for software distribution, include for example clovr, bioconductor, qiime and gmod. these efforts have produced vms containing software for specific projects and user communities. in contrast, our project offers a full-featured vm including a large number of bioinformatics tools, and a developer's framework for creating, maintaining and distributing customized versions of cloud biolinux. the unique feature of cloud biolinux is that can be leveraged for producing such tailored, cloud-based solutions, and by offering this option we hope to encourage the community to standardize around a shared automated framework that allows creating customized vms for bioinformatics with targeted software, data and configurations.

the cloud biolinux project to date has been largely based on the amazon ec <dig> commercial cloud, but private and academic clouds have become commonplace for computing provision. we believe that this trend will continue forward, since in-house clouds overcome the shortcoming of ec <dig> when large datasets are involved, which relates to bandwidth costs for transferring data to and from the cloud storage. on the other hand, eucalyptus and openstack open-source cloud platforms can be readily deployed by an organization to run on internal servers.

compared to traditional computing clusters, when researchers use in-house clouds they gain the advantage of running distinct vms that each encapsulates an operating system, analysis software and data. with this approach, users receive distinct and pre-defined computational resources, since each initiates their own set of vm servers. this prevents over-utilization of the hardware by a single user, as it often happens within a traditional multi-user, single-server environment. by allocating an appropriate number of vm servers, researchers can scale computational resources as needed to perform different tasks within bioinformatics data pipelines. for example, when running computationally intensive tasks an increased amount of computational capacity can be allocated by initiating a large number of vm servers. the number of vm servers can be scaled down for pipeline stages involving less computationally intensive tasks, such as those of genome annotation data browsing. this elastic capacity property and on-demand scaling of the computational resources, is a unique feature of the vm based cloud computing. last but not least, the separation of each vm from the rest of the computing environment, translates to more flexibility in testing unstable software or experimenting with new bioinformatics approaches, without the side-effect of affecting production systems.

while it is already possible to run cloud biolinux images on eucalyptus private clouds, our future plans is to make this process seamless by providing additional automation scripts, documentation and a range of pre-built vms specifically for the eucalyptus and openstack cloud platforms. in addition, we intend to implement tools that streamline data upload, management and sharing within the cloud, including readily available access to the bioinformatics datasets already hosted as public service free of charge on amazon ec <dig>  we also aim to work more closely with the community of the debian-med project, which provides a linux distribution with a range of biomedical computing software packages. finally, while hadoop/mapreduce  <cit>  is already available with cloud biolinux, in the next version of our vm we plan to implement specialized scripts that allow end-users to easily provision hadoop clusters on any cloud. this will facilitate running large-scale bioinformatics data processing pipelines similar to crossbow  <cit> , and parallel genome assemblers such as cloudburst  <cit>  or contrail  <cit> .

CONCLUSIONS
our overall goal is to provide a platform for the community to center around a single bioinformatics cloud computing distribution and to focus on the next challenges of providing data, documentation, and the development of scalable analysis pipelines. the software management framework we developed using scripts and configuration files based on the fabric system, allows cloud biolinux to be easily reproduced and updated since the configuration files provide an exact record of how the vm was configured. furthermore, our framework is available through a distributed source code repository, which makes it easy for developers to participate in the project and create derivative systems. finally, the fabric scripts and configuration files can be modified so that the software included in the vm is tailored to the data analysis needs of each researcher, while also allowing deployment on public and private clouds or desktop computers, as we have demonstrated with the ready-to-execute images for the eucalyptus cloud and virtualbox available on our project website.

availability and requirements
project name: cloud biolinux

project home page: http://www.cloudbiolinux.org

operating system: linux, windows, mac osx

programming language: python

other requirements: freenx desktop client, cloud computing or virtualization layer

license: mit licence, including derivatives and customized cloud biolinux vms

any restrictions to use by non-academics: none

abbreviations
vm: virtual machine; apt debian: aptitude package manager; ssh: secure shell

competing interests
the authors declare that they have no competing interests.

authors' contributions
kk, tb and bc have developed, tested and implemented the cloud biolinux software framework and cloud virtual machines, in addition to developing the manuscript to its final version. bt developed the cloud biolinux documentation. mb, df and kn participated in the study design and coordination and helped to draft the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary  <dig> cloud biolinux software documentation in the form of a mini, self-contained website. users need to download and uncompress the .zip file, and open through a web browser the "index.html" file available on the main directory. .

click here for file

 additional file 2
supplementary  <dig>  overall, the pipeline takes as input sequencing reads, converts them to standard fastq format, aligning to a reference genome, doing snp calling, and producing a summary pdf of results. furthermore, it leverages the cloudman server that is included in cloud biolinux vm for provisioning a sun grid engine  cluster composed of multiple copies of the vm on the cloud, and the rabbitmq distributed messaging queue for data coordination and exchange between the cluster nodes respectively  sequence files for each lane are split based on the sample barcodes and the parts are aligned using bowtie to the genome in parallel, by being submitted as separate sge computational tasks across the cluster nodes. the pipeline then sorts and merges bam alignment files from multiple lanes if sequences have the same barcode, producing a single representative bam file for each barcoded sub-sample. at this step, rabbitmq enables message exchange between the cluster nodes in order to identify bam sequence alignment sets with the same barcode on different nodes, and the pipeline scripts transfer and merge those sets on a single node  the second phase parallelizes the processing of each alignment file with read quality assessment, variant calling and visualization, using an identical approach based on sge parallel computation across cluster nodes, with the software tools performing each of these steps being respectively fastqc and picard, gatk and bigwig. .

click here for file

 acknowledgements
we would like to thank all the cloud biolinux developers and community members that have volunteered their time on this project. enis afgan for his guidance towards integrating cloudman with cloud biolinux. alex richter, tim prindle, andrey tovchigrechko, johannes goll and tim stockwell from jcvi's cloud computing team. jeff shao, tom emmel, daniel gomez, eddy navarro, indresh singh, marty stout and darnell edwards from jcvi's it team. deepak singh and amazon web services for their educational grant that supported the initial efforts of developing cloud biolinux, and justin johnson for the community effort and sponsorship of the cloud biolinux website.

cloud biolinux is currently sponsored by the niaid genome sequencing center grant awared to the j. craig venter institute in the usa, the and the nerc support of the national environmental research council in the uk.
