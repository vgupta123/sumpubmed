BACKGROUND
visualisation is a key challenge in the analysis of large biological datasets, especially when analysing organized structures with distinct sub-clusters  <cit> . this is particularly important when analysing 3-dimensional  datasets. when a biological process or feature has been described spatially by a set of 3d referenced points, either via laboratory work  or generated within a simulation, with some data attached to each point in space, the first step in interpreting the data is to visualise it. once the data are visualised and their quality assessed, downstream analysis can proceed. for example, a typical second step is to cluster the observations into different classes based upon the information associated with each point; those results will also need visualisation.

while various 3d visualisation tools have been developed, they have typically been made available via a locally installed piece of software such as biolayout express 3d <cit> , arena3d  <cit> , 3d genome tuner  <cit> , amira 3d  <cit> , v3d  <cit> , the allen brain atlas  <cit>  or cytoscape  <cit> . these tools are very complete and usually complex to operate for non-expert users. moreover, they require installation on every machine they are used on, which makes sharing inconvenient. to address this issue, some 3d visualisation tools have been built online and are accessible through the browser directly, such as astexviewer  <cit> , which is utilised by the protein databank europe via a java applet. more recently, visualisation tools developed using html5/webgl capabilities have been described, although they have focused on very specific applications, such as analysing radiology data  <cit> .

importantly, as yet no tool has allowed biologists to view their own 3d data directly online in an easy, fast, interactive and secure way. using webgl and the javascript 3d library three.js, bioweb3d aims to be a simple, generic, tool for tackling this problem.

implementation
bioweb3d allows the user to represent any 3d dataset on their browser by defining only two files. the two files can either be formatted as json or xml files, two widely used structured formats on the web  <cit> , or directly as comma separated values files .

the first file used by the application, referred to as the “dataset file”, contains the coordinates of every point in the dataset. the second type of file used, the “information layer” file, describes one or several information layers that are associated with the points defined in the first file. for example, if each point defines the location of a cell within a tissue, the second file could describe whether a particular gene is expressed in each cell. that way the tissue expression profile can be represented in the spatial context of the tissue.

datasets can be viewed and compared in up to four “worlds”  at the same time. although browser based, the application, fully written in javascript, does not need to send any data to the host server. instead, the modern internet browser’s local file system reading capabilities are used through the html  <dig> filereader functionality. this allows the application to handle, in a very short period of time, large datasets while ensuring that the privacy of the data is maintained.although the focus is on making bioweb3d simple and easy to use, some options are available to customise how datasets are represented. the application can be used to visualise sequential information, such as 3d protein structures, in which case a solid line can be drawn between the points. in other situations, such as when a population of cells is considered, the points are viewed as individual particles. the information layers are visualised by colouring the 3d points according to the class that each point belongs to.

technological overview
bioweb3d is fully written in html/javascript. it relies heavily upon a relatively recent 3d javascript library called three.js  <cit> . this library is used as the main interface between webgl   <cit>  and javascript. more specifically, bioweb3d allows the generation and manipulation of simple three.js objects. indeed the primary challenge associated with the creation of bioweb3d has been to design interactions between the 3d visualisation and the user interface in the most efficient way.the 3d data are rendered using simple 2d quadrilaterals positioned in the 3d space according to their coordinates. this simple technique has been selected to keep bioweb3d as light-weight as possible whilst ensuring good quality visualisation performance and fluidity.

listing  <dig> json dataset file  

defining the input file formats
json is the recommended format to input files into bioweb3d because of its rigorous structure and its fast object generation, which is directly built into all of the primary internet browsers’ interpreter. compared to other data-interchange languages, such as xml, json is also easily human readable thanks to a light-weight syntax. however, some applications might output data only in an xml format and not json, as the latter is generally more web oriented. for this reason bioweb3d can also accept xml as an input format.furthermore, much data generated in the biological sciences is stored within csv files. converting csv documents to the json or xml format is not always trivial. in order to facilitate this process, the application is also able to directly render simple csv files that follow a certain format as an input.

dataset file specification
when the user adds a new dataset file, a new dataset section is created in the “data” panel of the application. each dataset file contains one dataset.

json format
the dataset file should have a root object called “dataset” which contains: 

•the “name” property of the dataset ;

•the “chain” parameter, which should be set to true if the points are connected  - the data will be considered sequentially, with each point connected by a solid line to the previous and next point according to its order in the dataset file;

•the “points” property, which is a two dimensional array representing a list of  vectors that define the co-ordinates of the points.

listing  <dig> is an example of a minimal  <dig> points dataset file.

listing  <dig> xml dataset file  

xml format
the dataset xml format used is very similar to the previously defined json format. the file must have a root object called “<dataset>” which contains:

•the “<name>” property of the dataset ;

•the “<chain>” parameter, which should be set to true if the points are linked  - the data will be considered sequentially, with each point connected by a solid line to the previous and next point according to its order in the dataset file;

•the “<points>” property, which contains all the single “<point>” elements that define the dataset. each “<point>” has three properties to define its spatial location, namely “<x>”, “<y>” and “<z>”.

listing  <dig> contains the same minimal dataset as listing  <dig> but formatted in xml.

csv format
each line represents a point and the three coordinates on each line must be separated by “comma” characters.

as an example, listing  <dig> carries the same information as the json file in listing  <dig>  we note that although the spatial information remains the same it is not possible to set a name or to connect the points within a csv file input.

listing  <dig> csv dataset file  

information layer file specification
the information layer file contains information about the points described in the dataset file. the information in this file has to be given in the same order as the points defined in the dataset file.

json format
the information layer files must have a root element named “information”. since one information file can define multiple information sets, the structure below “information” is a list. each element of the list is structured as follows: 

•the “name” property ;

•the “numclass” property, which indicates the number of different classes the data will be assigned to;

•the “labels” property, which defines a list of names for the “numclass” classes previously defined ;

•the “values” property, which defines the class of each point in the dataset. as points do not have single ids, this property must be in the same order and have the same length as the points defined in the dataset file.

for example coming back to the  <dig> points defined in listing  <dig>  two information layers could correspond to: 

•one clustering algorithm that puts the first two points together in class one and the third point alone in a second class

•a second clustering algorithm that puts each point in a separate class

listing  <dig> json information layer file  

in this case the information layer file would look like listing  <dig> 

xml format
the information layer xml format used is very similar to the previously defined json format. the information layer files must have a root element named “<information>”. since one information file can define multiple information sets, the structure below “<information>” is a list of “<set>” elements. each “<set>” element is structured as follows: 

•the “<name>” property ;

•the “<numclass>” property, which indicates the number of different classes the data will be assigned to;

•the “<labels>” property, which contains as many individual “<label>” properties as the number of different classes. each “<label>” defines the names for one class ;

•the “<values>” property, which contains all the single “<value>” properties, each one defining the class of each point in the dataset. as points do not have single ids, the “<value>” properties must be in the same order and have the same length as the points defined in the dataset file.

listing  <dig> xml information layer file  

listing  <dig> csv informationlayer file  

listing  <dig> carries the exact same information as listing  <dig> 

csv format
each column represents the class to which a point belongs. the separation character between columns must be a “comma”. listing  <dig> carries the same information as listing  <dig>  note that it is not possible to use the “labels” or “name” properties available in listing  <dig> within a csv information layer file.

RESULTS
basic usage
the goal of bioweb3d is to allow scientists unfamiliar with visualisation software to explore 3d data very quickly without having to install any software. to illustrate its utility we applied bioweb3d to study heterogeneity in gene expression levels across cells in the brain of the marine annelid platynereis dumerilii. using a newly developed technique called primr  <cit> , tomer and colleagues were able to generate a map of pseudo-cells within the platynereis dumerilii brain, before determining whether a pre-defined set of genes were expressed in each pseudo-cell. in the context of bioweb3d, the locations of the pseudo-cells are used to generate the “dataset” file and information about the sets of cells that define clusters with similar gene expression profiles are used to generate the “information layer” file. in figure  <dig> we illustrate the results — each point represents a pseudo-cell and its colour indicates the class  to which it belongs to.

bioweb3d can be used to visualise datasets derived from a wide variety of biological assays. examples are shown on the github wiki  <cit> , where we display a 3d representation of a principal component analysis  carried out with r and the 3d structure of a protein extracted from the pdbe database.

more generally, the user can interact with the visualisation via an interface on the right of the screen, which contains three panels. in the “dataset” panel, the user can choose the datasets and information layer files that should be represented in each world. this panel also allows the user to show/hide specific classes of the selected information layers. each dataset file entered will create a new sub-panel where the user can input information layer files for that world. selecting an information layer in the drop-down list will display the data in the current world and generate a list of classes that the user can modify regarding their visibility and colour. the “view” panel enables the user to choose which of the worlds are shown on the screen, ranging from  <dig> to  <dig>  finally, the “settings” panel provides the user with a number of options that affect all worlds and all datasets, such as modifying the axes scales, modifiying the transparency and size of raw data points and information layer coloured points. the user can also choose to enable centering of the data around  <dig> or leave the coordinates as inputted.

bioweb3d and local software
many 3d visualisation software tools, most of which require local installation, exist and provide similar functionalities with standard 3d format input such as wavefront.obj. some are extremely generic and powerful like blender or amira 3d. however, these tools are not typically oriented towards a scientific audience. moreover, those that are more focused on science are often targeted towards a very specific application, especially in the medical sciences  <cit> . in this context, we believe that bioweb3d can be useful as it is completely generic and browser based. it should also be noted that recent browser improvements regarding gpu acceleration through the webgl paradigm allow bioweb3d to visualise several hundred thousand points. additionally, local software is usually platform specific, which is not the case for browser based applications.

bioweb3d and java applets
as mentioned previously, browser based 3d visualisation tools currently exist mainly in the form of java applets. this technology has attracted much criticism in  <dig> regarding security flaws, leading the “united states computer emergency readiness team” to advise that all java applets should be disabled due to current and future java vulnerabilities  <cit> . the development of webgl technology is viewed by many as a candidate for replacing applets.

current limitations
the main current limitation of a webgl based application is the machine and browser compatibility. only computers with fairly recent graphic cards will be able to run a 3d environment. it should also be noted that microsoft has notified the developer community that internet explorer is not scheduled to support webgl in the near future. however, importantly, chrome, firefox, safari and opera all now support webgl applications. moreover, we note that webgl is also supported on mobile platforms such as ios or android  <cit> .

open source and collaborative development
as a fully open source software, the source code for bioweb3d is available on github  <cit> , a web platform that allows interested parties to collaborate on the development of the project. in the wiki page “contribute to bioweb3d”, directions to alter or add capabilities to bioweb3d are provided for users who wish to get involved.

CONCLUSIONS
bioweb3d is designed to be a simple and quick way to view 3d data with a specific focus on biological applications. being browser-based, the software can be easily used from any computer without the need to install a piece of software. importantly, bioweb3d has been designed to offer a very straightforward and easy-to-use working environment. despite current limitations in terms of compatibility or rendering performance for large numbers of points, we believe that bioweb3d will enable non-experts in 3d data representation to quickly visualise their data and the information attached to it in many biological contexts, thus facilitating downstream analyses.

availability and requirements
the full source code is available on the github page of the project  <cit> . a live version of the software is online  <cit> . you will require a graphical card and a browser with webgl capabilities to run bioweb3d.

project name: bioweb3d

project home page:http://www.ebi.ac.uk/~jbpettit/bioweb3d

operating system: platform independent

programming language: htlm/javascript

other requirements: browser and graphic card with webgl capabilities

license: academic free license  v.  <dig> 

competing interests
the authors declare no competing interests.

authors’ contributions
jbp developed the presented software and drafted the manuscript. jcm has been involved in writing and editing the manuscript. he has also given the final approval of this version to be submitted. all authors read and approved the final manuscript.

