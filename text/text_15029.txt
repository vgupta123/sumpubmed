BACKGROUND
over the past decade, text mining techniques have been used to support the automatic extraction of information from biomedical literature. a number of systems have been designed to capture information on general biological molecular interactions  <cit>  or interactions focused on a particular organism of interest . in addition, specific types of molecular interactions have been targeted . several evaluation challenges and exercises have been organised to assess the development in the field, in particular for protein-protein interactions  .

a topic that has been of particular interest in biomedicine is the investigation of gene regulatory networks, in which transcription factors play a crucial role. a transcription factor  is a protein that regulates binding of rna polymerase and initiation of transcription  <cit> . tfs are regulators of gene expression and influence almost all biological processes in an organism. existing tf databases  are largely based on manual literature curation. despite their importance for genome biology, curation of these databases is far from satisfactory for many organisms, partially due to the difficulties in locating the information linked to transcription regulation stored in an ever increasing volume of relevant literature.

in this paper we investigate the automatic extraction of tf-related contexts  to support curation of transcription factors from biomedical literature. to the best of our knowledge, our work is one of the first attempts to apply text-mining techniques to the task  <cit> . as opposed to ppi contexts , our aim is to locate a specific type of interactions related to gene regulation by tfs. more precisely, we are focused on a specific role of certain biological entities: our targets are contexts that mention special proteins  that regulate gene expressions. the following is a typical example of a tf-related context:

… reconstituted in vitro transcription reactions and deoxyribonuclease i footprinting assays confirmed the ability of trf <dig> to bind preferentially and direct transcription of the tudor gene from an alternate promoter…

several actors and events  can be typically found in such contexts . one of the most important features of tfs is transcription regulation where transcription factors interact with other regulatory proteins to either increase or decrease the transcription of specific genes. thus, transcription regulation contexts could be regarded as a type of ppi context and in this paper we further investigate the degree of similarities between them.


                           dna binding

                           transcription

                           protein actor

                           dna actor
we focus on machine learning  approaches and discuss creation of suitable training datasets that can support the task. more specifically, we present a series of investigations and experiments that aim to clarify the following issues:

• training data: can we use existing knowledge bases  to create a collection of noisy but useful positive data? would it be feasible to use ppi contexts to support tf-curation?

• features: is a small set of biological features , which are believed to be representative of transcription factors, enough to identify tf-related sentences?

• machine learning: which techniques are effective for the extraction of tf-related contexts?

in the following section we present the methods and resources that have been used in our investigations. after presenting the experiments and results, we compare our approach to related work in the domain and give some conclusions and directions for future work.

methods
we approached the problem of extracting tf-related contexts as a binary classification task: given a sentence, we aim to classify it as tf-related  or not . we consider three major components: selection of relevant features to support classification, obtaining training data to build classifiers, and selection of ml approaches to be employed for context recognition. we have analysed two types of features: in the generic model , we follow the standard bag-of-words approach; in the biological model , we consider only features that reflect the biological profile of the task. three different machine learning algorithms are applied to train tf classifiers based on the two learning models. the overall approach is presented in fig.  <dig> 

feature engineering
in the generic, word-based model , standard word lemmatisation  is employed along with a feature selection procedure to reduce the feature space. we used pearson's chi-square  test  <cit>  to rank the words in the descending order of their likelihoods of distinguishing the class. the threshold τ of chi-square statistics used for feature selection is calculated using the following equation:

 τ=∑w2/few∥w∥ 

where fow denotes the frequency of the observed word w and few is the frequency of the expected values; ‖w‖ is the total number of the words in the collection. a sentence vector is built by using the features above the threshold τ for all words that are present in it.

in the biological model , the following features are identified in candidate sentences: gene/protein names, interaction words, tf-related mesh and go terms, and other biological words. our rationale was simple: target sentences generally describe interactions between tfs  and target genes, and thus we expect that gene/protein names are important features as are the interaction words  <cit> . protein/gene names are recognised by combining the outputs from two publicly available gene name taggers, abner  <cit>  and lingpipe  <cit>  . a thesaurus containing interaction words has been collected from the tf and ppi data . all morphological and derivational variants  have been included, resulting in  <dig> potential interaction-word form features.

mesh and go terms related to transcription regulation are also considered as potentially important features and have been collected from these two resources, resulting in  <dig> mesh terms  and  <dig> tf-related go terms . moreover, we have constructed a dictionary of biologically relevant words by tokenising all the terms contained in the mesh thesaurus and the go ontology . after removing stop-words  and discarding words with fewer than  <dig> characters, the dictionary contains around  <dig>  words, which have been used as potential features in the bm model.

a feature vector for a given sentence in the bm model contains the following features. first, for each word from the biological dictionary that is present in the sentence, a feature is added , as well as for each interaction word that occurs in the sentence but is not contained in the biological word dictionary . then, the following binary features are generated:

- has-protein – flagged if the sentence contains at least one protein/gene name;

- has-two-proteins – flagged if the sentence contains at least two unique protein/gene names;

- has-interaction-word – flagged if the sentence contains at least one interaction word;

- has-two-interaction-words – flagged if the sentence contains at least two unique interaction words;

- has-mesh-tf-term – flagged if the sentence contains at least one mesh tf term;

- has-two-mesh-tf-terms – flagged if the sentence contains at least two unique mesh tf terms;

- has-go-tf-term – flagged if the sentence contains at least one go tf term;

- has-two-go-tf-terms – flagged if the sentence contained at least two unique go tf terms.

these feature vectors are used in three different machine learning algorithms , support vector machine , and maximum entropy ) to learn the classifiers.

building training and testing datasets
building a training set for the extraction of tf sentences proved to be the most difficult and time consuming step. the only suitable and publicly available source is the flytf database . this is a manually curated database that contains transcription information based on flybase/go annotation data and the dbd transcription factor database  <cit> . some of the records in the database are supported by “traceable author statements”, including sentences from the literature. we have extracted  <dig> sentences from the database, which seemed as not being enough for a larger scale investigation on retrieving tf-related sentences. we have therefore considered additional sources to support the task by obtaining noisy and weak positive and negative training data.

non-protein-function description  data
we used negative sentences from the prodisen corpus  <cit> , which has been constructed for functional descriptions of genes and proteins, as negative data. a total of  <dig> sentences that have been marked as “not gene function description” are randomly collected from the corpus for training and testing.

mesh and go tf-related descriptions
as mentioned above , both the mesh and go databases contain tf-related concepts. mesh terms located under the subheading ‘transcription factor’ describe various types of transcription factor concepts which are classified according to either their structure of dna-binding domains or their regulatory function. in addition, go annotation information is usually used as a main source for the curation and exploration in transcription factor databases such as flytf and tfdb  <cit> . we have therefore collected definitions of tf-related terms from the mesh and go databases to create a noisy positive set of tf-related sentences. in addition to sentences in definitions, synonym lists are treated as tf-related sentences. together with flytf data, we have collected around  <dig> positive sentences .

the suitability of tf-related definitions from the mesh thesaurus and go database as positive data has been tested on the existing flytf data. we performed a separate experiment  in which only the mesh and go tf data was used for training, while the flytf data was used as the test data to evaluate the performance. generally, the precision was well above 90% with the average recall around 70%, which supported our assumption that this data can be used for learning.

ppi data
there have been extensive work and several resources available for ppi-focused text mining systems . the reason for us to consider ppi data is due to a potential functional similarity between transcriptional regulation  and generic ppi contexts. the aim was to investigate the possibility of using ppi data as training data for tf classification. our rationale was the following: if ppi and tf contexts are indeed similar, then it would be difficult to differentiate between the two, and a  tf-classifier would generally achieve a lower precision on a dataset that contains both tf and ppi examples. on the other hand, if these two context types are generally different, then it would be easier to construct a classifier that performs well on tf and ppi data. we have tested this hypothesis by using ppi data as negative data and comparing it to the results obtain by using real negative data . if ppi data can indeed be used as negative examples, then we would expect at least the same precision as for the nonpf  data. to generalise the concept of ppi, the data has been collected from various sources including the datasets for lll <dig> challenge  <cit> , biocreative-ppi corpus compiled by j. hakenberg  <cit> , picorpus  <cit>  and generif hiv interaction corpus  <cit> .

to summarise the data preparation step, the data used for tf-sentence classification is organised into three different sets of contexts, namely, tf data , non-protein-function-description  and protein-protein interaction  data. the nonpf and ppi datasets are separately treated as negative and noisy negative data to constitute two experimental settings: tf&nonpf and tf&ppi. the three data collections have been prepared at the sentence level, and they all have a similar number of sentences .

experiments and 
RESULTS
the detailed statistics for the datasets used in the experiments are given in table  <dig>  table  <dig> presents the details of the features generated for each of the datasets after the feature selection process .

before presenting the results of the identification of tf-related sentences, we first report our findings on the usefulness of tf-related data collected from the mesh and go databases as positive data for the task. we also present an analysis of the similarities between tf and ppi data. in all experiments, the performance has been evaluated using 5-fold cross-validation , by using precision , recall  and f-measure  metrics defined as follows:

 r = tptp + fn                        p=tptp+fp                     f−measure=2prp+r 

where tp  is the number of correctly recognised tf sentences, fn  is the number of tf sentences not identified by the system, and fp  the number of tf sentences that are incorrectly detected. for most experiments we compare the results obtained from the two learning models  and three ml approaches . the svm classifier was built with the tinysvm package  <cit>  using the polynomial kernel, and the nb and me classifiers were implemented with mallet  <cit>  with the default parameters.

suitability of mesh and go tf-related data as positive examples
as described earlier, we hypothesised that the descriptions of tf-related terms from the mesh and go databases could be used for detecting tf-related sentences. to verify this hypothesis, we used this data as the noisy positive examples for learning  and the flytf data  as exclusive positive data for testing. table  <dig> shows the performance of the three machine-learning classifiers.

the results show that the precision achieved was well above 90% on both datasets , suggesting that the tf-related term definitions from the mesh thesaurus and go database – despite being noisy positive data – are suitable for capturing features for tf-sentence classification. the relatively lower recall results  reflect the issue that this data – although accurate – does not cover all expressional variations used in tf sentences. to demonstrate potential usefulness of  data from flytf for recall, we have conducted a set of experiments in which we added 80% flytf data to the mesh+go training  data, and 20% flytf data was left for testing . table  <dig> shows the effects of adding the flytf data to the training data: there was a substantial increase in recall  and accordingly in f-measure .

similarities between tf and ppi contexts
the last point made above was a surprise: when the ppi data was used as negative examples for training, the precision was overall better than when the nonpf data was used . this suggests that ppi data seems to better discriminate tf contexts than the nonpf dataset. high precision  suggests that tf and ppi contexts are not as similar as expected, implying that ppi data could provide promising noisy negative data for learning tf classifiers. furthermore, we calculated feature distribution differences between the tf and ppi datasets, and also between the tf and nonpf data, using the average kullback-leibler  divergence  <cit> . for two datasets q and p, the akl divergence is calculated as:

 akl=12∑xlog⁡qp+plog⁡pq) 

here, q and p are occurrence probabilities of the feature x in datasets q and p, respectively. in our case, feature probabilities are calculated using the chi-square statistics value of each feature in the collection. the divergence results for tf/ppi and tf/nonpf datasets with the two feature models  are presented in fig.  <dig>  with various numbers of top ranked features selected from the datasets. overall, the divergence between the tf and ppi data was much larger than that of tf and nonpf data. this partly explains why the accuracy on the tf&ppi dataset generally outperformed that of tf&nonpf.

obviously, despite the high precision in discriminating between generic ppi and tf contexts, there are ppi sentences that are also tf contexts. table  <dig> presents “confusion” examples of ppi sentences wrongly classified as tf-contexts, and tf-sentences marked as non-tf  contexts. for example, sentences containing ‘transcription’ are usually correctly identified as  tf contexts, while, on the other hand, some tf sentences, which do not contain strong tf discriminative features, are wrongly recognised as ppi examples. still, the results for the tf&ppi dataset were encouraging and we decided to conduct further experiments with the ppi data used as  negative data .

performance comparisons for the tf-sentence classification task
after the preliminary experiments, the two datasets  were used to train three machine-learning classifiers , using 5-fold cross-validation. table  <dig> and figures  <dig> and  <dig> present the results, while a detailed discussion is given below.

comparison of the feature models 
the biological model consistently out-performed the generic model on both tf&nonpf and tf&ppi datasets. the experimental results show that the performance of individual classifiers improved up to  <dig> %, while being achieved with fewer features . although the biological model requires additional pre-processing for feature extraction , this is typically a step in a typical text mining pipeline that would be beneficial for other tasks as well. overall, the results suggest that biological features  seem to be to some extent more useful than non-biological features for tf-sentence identification. still, in some cases, the bm model achieved only less than 1% improvement on the f-measure compared to the gm model. one explanation for such a modest improvement is a potential overlap between bm and gm features. we explored the top  <dig> features  from the gm and bm models used in the tf&nonpf dataset, and found that only  <dig> % features of the gm model  has not appeared in the bm feature list. this implies that the best features for classification are indeed biological words, which have been selected by both models.

using more negative data for training
to ensure unbiased learning of the classifiers, in the first set of experiments  we have deliberately constructed the training datasets with balanced numbers of positive and negative examples. however, in a real-world setting, it seems that non-relevant tf contexts are far more frequent than relevant ones. to investigate the impact of an unbalanced but more realistic training dataset containing more negative cases, we performed another set of experiments with additional  <dig> ppi sentences and  <dig> nonpf sentences added to the corresponding  training data and examined the performance of the classifiers on the unchanged test data. the results presented in table  <dig> show just a marginal improvement when compared to the balanced-training data scenario .

comparison of ml approaches
tables  <dig> and  <dig> show that the three ml approaches obtained a high precision , suggesting that tf contexts contain distinguished features which provide strong discriminating power. still, performance of the classifiers was not consistent on the two datasets. the nb classifier excelled the other two classifiers on the tf&nonpf dataset with an f-measure of over 95% on average, but it performed worse on the tf&ppi dataset . the svm classifier was the best on the tf&ppi dataset, but on the tf&nonpf dataset it did not work very well, especially for the generic model. the inconsistent performance of the nb and svm classifiers  can be partially explained by the differences between feature distributions in two datasets .

merging results from different classifiers
the inconsistent results obtained by different classifiers prompted us to analyse the results obtained by combining their outputs. we investigated a vote-based merging through two stages: first, the outputs from three different classifiers trained on the same dataset are combined together according to different voting strategies ; then, the results integrated from the distinct training datasets  are merged together to form the final classification results .

stage i: merging results from the classifiers trained on the same dataset
we experimented with the biological model only. three voting approaches have been applied: unanimous , any  or majority . table  <dig> shows the performance of stage i. it is a no surprise that the unanimous voting strategy improved precision, while the voting based on positive outcome from any classifier improved the overall recall performance. however, the best merged f-measure was achieved by the majority voting method, with a marginally worse performance compared to the best single classifier. it is reasonable to expect that the majority voting has a slightly lower f-measure as it only builds the results by agreeing on the judgment from the majority.

stage ii: merging results from the classifiers trained on different datasets
it is obvious that the classifiers learned on different datasets may rely on different classification features. by merging the results from different datasets, we investigated potential complementarities. two types of result filtering were considered: unanimous voting and any voting. note that each time the results from two training datasets to be merged are obtained using the same voting strategy at stage i.

the final merged results are reported in table  <dig>  the best precision, recall, and f-measure generated in stage ii basically outperformed the results produced at stage i as well as those from the individual classifiers. the best two f-measure values with most balanced precision and recall were obtained using a combination strategy with the 2/ <dig> majority voting  and any voting , and the one with the any voting  plus unanimous voting . the former method achieved f-measure of  <dig> % with a high recall , while f-measure in the latter reached as high as  <dig> % with a ‘perfect’ precision . these results confirm our hypothesis on a complementary relation between the results obtained from the tf&ppi and tf& nonpf data sources. this means that the result merging method could be an effective approach for performance improvement through different contributions from the two training datasets.

related work
approaches to the extraction of protein-protein interactions and other biological relationships from biomedical text vary widely. previous research efforts have generally focused on either statistical methods , or linguistics approaches including shallow and deep parsing, applying simple pattern- or rule-based matching  <cit>  or complex template- or frame-based processing  <cit> . in addition, a number of research projects have relied on machine learning. for example, donaldson and colleagues  <cit>  built a prototype system to populate a knowledge base with ppi data recognised by an svm classifier. jansen and associates  <cit>  reported on a bayesian network to predict ppi in yeast. sugiyama and colleagues  <cit>  investigated several machine learning techniques, such as k-nearest neighbour rule, decision tree, neural network, and svm, to verify the effectiveness of ml approaches in detecting ppi.

similarly to other ml-approaches, we have employed different machine methods  to discover contexts describing transcription factors. however, our system differs from the related work in the following aspects:

 our approach is focused on a specific role of certain biological entities: our targets are special proteins  that regulate gene expressions. due to the particular role that tfs have in gene regulation, the objective of our system is to detect relevant text contexts related to this specific biological function and role.

 we rely on background knowledge collected from weak and noisy evidence that is available in existing resources. we have created a dataset of positive examples from descriptions of biological terms from the mesh and go databases related to transcription factors. the experiments have shown that although not ideal, this dataset can be used as noisy positive training data.

 feature selection is one of the most important issues in an ml approach. most of existing approaches rely on weighted word-based features. we have used biological features  and have shown that these features provide at least comparable performance with a significant reduction of the feature space.

CONCLUSIONS
we have presented a text-classification approach to automatically locate tf-related sentence contexts, in order to build a starting point for literature-based curation of transcription factor databases. the results are highly encouraging, with f-measure well above 90%. the extraction approach is built around an ml-based architecture, with a dedicated feature model based on specific biological features relevant to the task. we have investigated three different ml methods, and also presented a two-stage result-merging method that has been used to combine the results from both different types of machine-learning algorithms and the different training datasets.

our initial experiments have confirmed that reasonable training data can be obtained from existing resources, namely, mesh and go tf-related data. the testing results on the flytf data were encouraging, and strongly confirmed our assumptions that tf-related mesh and go term definitions are useful for the detection of tf-related contexts, but that real-world positive data  are needed to improve recall. another interesting finding from our experiments is that we have not been able to confirm strong similarity between tf and ppi contexts as expected. by using ppi data as negative examples for the tf-related sentence extraction, we were generally able to obtain comparable if not more accurate results when compared to negative data obtained from non-protein-description data .

the results reported here show that the proposed approach is capable of accurately identifying tf-related information from text. however, a number of interesting issues remain to be resolved. the first issue is related to distinguishing transcription factors from other proteins in a tf-related context in which two or more gene and protein names co-occur together. a possible solution is to make use of syntactic relations, combined with biological feature terms to judge the likelihood of a protein being a transcription factor. in addition, flytf data, which is treated as an important positive tf example dataset used for classification, is an organism-specific corpus. it is likely that it does not cover all tf-related features for various organisms. therefore, an analysis of a more diverse tf data for the identification of transcription factors is needed.

competing interests
the authors declare that they have no competing interests.

authors' contributions
hy designed and implemented the system, performed experiments and evaluated the results. gn motivated and coordinated the study, and helped with the interpretation of the results. jak participated in the conceptual design and machine learning. hy drafted the first version of the manuscript, and gn prepared the final manuscript, which all authors read and approved.

