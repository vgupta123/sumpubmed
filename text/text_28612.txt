BACKGROUND
what is blast?
basic local alignment search tool  answers the question: "what known nucleotide or amino acid sequence in an existing sequence database is most similar to an unknown input  sequence?" blast was originally intended for comparison of unknown and newly sequenced genetic sequences against annotated database sequences to find those sequences with the closest biological similarity to the query  <cit> . many papers describe the blast algorithm and concepts for similarity searching in detail  <cit> .

with the advent of high-throughput sequencing technologies, there is an ever increasing input of new genetic data, which typically needs to be evaluated using blast. as this ever increasing volume of new data is analyzed using blast and then annotated the new sequences are subsequently added to the public databases, which in turn continues to increase their size. this is a vicious cycle, in which new sequence data is generated at increasing rates and databases are continually increasing in size. the blast search process is therefore becoming an increasingly time-consuming productivity bottleneck in genomics. in example, a typical laboratory workstation  can search one query sequence  against a local copy of ncbi  nucleotide  database  in just under  <dig> minutes. thus, a typical high-throughput blast search, which involves  <dig>  sequences, can take over  <dig> days to complete on a single workstation. this is an inordinate amount of time to wait for results.

there is a growing need to find ways of reducing these blast productivity bottlenecks when evaluating new sequence data. one of the most logical approaches is to increase overall blast performance by enhancing scalability, user-friendliness, and reliability. there are an increasing number of commercial and several non-commercial software packages that have been developed . the obvious drawback to commercial products is a very high price tag. on the other hand, non-commercial and freely available blast solutions  have been shown to increase the throughput of large blast jobs, but typically require a high level of computer literacy and networking skill to enable them to be effectively utilized. as examples, wu-blast  <cit>  provides a dramatic increase in the speed and efficiency of the blast algorithm itself, but it is currently unavailable for windows environments, does not have distribution capabilities inherent, and requires someone with above average computer skill to setup, operate and maintain. similarly, mpi-blast  <cit> , which is arguably the most popular and powerful distributed blast implementation available today, distributes blast across windows, unix-based, or heterogeneous networks, yet need for extensive networking skill, lack of user interfaces, and low fault tolerance can result in limited utility for the average end-user.

ultimately the high price, lack of user-friendliness, or other similar factor reduces the utility of most available technologies for a majority of scientists that could truly benefit from such high-throughput blast tools. thus, after evaluating the available free software, we identified the need within the research community for a comprehensive blast toolkit with a high degree of user-friendliness and functionality. we sought to create a full windows toolkit with the following characteristics:

• utilizes the most common operating system 

• utilizes local area network  connected windows workstations as a distributed environment

• freely available for non-commercial and academic use.

• does not require extensive networking, hardware or software skills to setup and utilize.

• gui based formatting of custom databases from any fasta file

• gui based importing and distribution of existing blast databases 

• automatic scanning of lans for windows workstations that are available and ready to run wnd-blast

• ability for users at child nodes to cancel computationally intensive blast searches without disrupting the entire job if they happen to require more resources than are available during searches.

• ability to blast a multi-fasta file 

• ability to blast a folder containing multiple single fasta files 

• automatic creation and management of individual projects on any workstation in the network.

• generation and real-time viewing of blast log files to show network performance and progress

• progress bars for most time consuming functions such as database formatting and large high throughput blast searches

• logical formatting and visualization of blast search outputs using any of the fields available 

• exporting of custom annotated fasta files containing any of the blast output data fields or manually input data.

• exporting of fasta files containing any combination of hits, "no hits", or "false hits".

• ability to manually and automatically curate blast output files

• indexing of input and output files related to annotation allowing for rapid database curation and intuitive manipulation and mapping of data along with other experiments.

• gui based installation and easy to follow instructions for setting up required windows network shares.

• a useful help file.

the solution developed to address all of these issues has been named w.nd-blast, which stands for windows .net distributed basic local alignment search toolkit.

implementation
programming language
the package was written using microsoft visual studio .net  <dig> and c# as the primary programming language. the software relies on the use of .net  <dig>  framework, which can be freely downloaded from the microsoft website .

auxiliary programs
w.nd-blast has encapsulated the ncbi blast software  including blastall, formatdb and scoring matrices . w.nd-blast only requires a user supplied database and input sequences for proper execution. w.nd-blast has the ability to execute any of the sub-programs of blastall .

w.nd-blast toolkit overview
the w.nd-blast toolkit consists of several integrated software solutions

• project control panel

• database engine

• blast engine

• w.nd blast distribution algorithm

• blast output viewer

• annotation engine

project control panel
considerable attention was put into the design of the w.nd-blast protocol, which is based on creation and organization of separate blast projects. once the software is initiated, the user is presented with a simple project control panel  . this control panel has two options: a) create a new project or b) work on a previous project. the user creates a new project by entering the investigators last name, the title of the project, and a database identifier or date. after the researcher defines the new job the combined database and blast engine  interface opens and a unique project folder is automatically created for the new project . alternatively the second option available at the  is to work on an existing or previous project. if an existing project is selected the blast output viewer  is opened along with a list of available subprojects . subprojects can represent multiple blast outputs of the data against different or updated databases or sub-queries from the input sequences.

database engine
the database engine is a separate part of the previously mentioned dbe , which allows for creation and distribution of new databases using a fully functional database formating  interface. the formatdb interface provides all available parameters with the most common parameters defaulted. thus, when formatting a new database only the location of the fasta file being formatted must be identified  and the type of fasta file  must be entered. the database is formatted and entered into the software appearing as an available database. any number or type of database can be created and made available. the database engine also allows for automatic location and importing of existing databases, which are copied into the database  directory and added to the available database file. the software also has the ability to scan a computer or specific folder and will find any existing databases. following scanning for available workstations in the next section, the databases can be automatically distributed to any or all of the worker nodes after formatting or importing.

blast engine
the blast engine, which is the primary part of the dbe , provides the option to scan the lan for available network workstations  running the w.nd-blast server. it also provides the alternate option to blast only on the local machine. the software scans and finds only those lan workstations that are available and configured to run wnd-blast. the same wnd-blast package provided for the master node software must be installed on each of the worker nodes as well. the blast engine allows for the selection of child nodes, fasta file or folder, and blast parameters. the user is also presented with a list of blast databases to choose. note: the user must format or import these databases. progress bars keep track of the job and a real-time log file viewer provides feedback to the user on the overall progress of the blast as well as on which workstations are working.

w.nd blast distribution algorithm
the software utilizes simple client/server architecture with a single source client, referred to as 'master node' and multiple servers that are referred to as 'child nodes'. an included w.nd-blast server must be installed and running on all participating child nodes. each child node is used solely for communication with the master node and executing the blast program. the blast algorithm used is unchanged from the most current ncbi blast, version  <dig> . <dig>  as newer versions are released by ncbi the algorithm can be updated independently with an integrated update feature or with new versions of w.nd-blast provided through the livestock issues research unit's website. the child nodes are queried by the master node upon execution of the blast algorithm. communication between the master and child nodes is achieved and maintained through a well known port using an underlying transmission control protocol  connection.

the child nodes are located by w.nd-blast, which performs a search of all workstations within range  of the master or local machine. this is accomplished by creating a unique multicast group for the master and child nodes. once communication has been established by the master node, the child nodes are added to the available workstation pool. the user is given a choice of using all or any combination of child nodes in a pool for their job. thereafter, the available child node pool can be used to add child nodes, while the blast is in progress. this is useful when a user knows his colleagues no longer need their compute resources and wishes to add this newly freed resource to his currently running blast job. before the master node executes a blast query, each participating child node must have the database the user wishes to query available locally. if not available locally, the master will distribute the database to the child nodes lacking the database. once each child node has the required database, the master begins running queries on that child.

to add flexibility to input data processing, the user has the option to select a single multi-fasta file or an entire folder containing individual fasta files. if a multi-fasta file is selected, w.nd-blast automatically parses the file into single fasta files. if a whole folder is selected, w.nd-blast will attempt to blast each fasta file contained in that folder, but each file in the directory must only contain a single sequence. once the user identifies either a file or folder every sequence in the pool is marked as not done in the master node job log at initialization of the "blastem" command. the sequences are then marshalled and sent one by one to child nodes. the master log reflects this distribution by updating the status of each sequence to working. upon receipt, the child node un-marshals the query and begins blast operations. after the initial sequence distribution to each node, the master node is placed in a wait state tied to that sequence. the master node remains in this state until it receives a call-back from one of the child nodes or there are zero sequences remaining in its waiting sequence pool. every child node, upon completion of a blast, sends a call-back message to the master informing of its finished state. the master node then retrieves the blast results and writes them to a file in the project folder. upon receipt of the call-back, the master node also sends the child node the next query sequence from the pool to begin blast operations and update the sequence status to done. this process continues for every sequence until the sequence pool is empty.

blast output viewer
once a blast is completed, the user has the option to view the blast output in the blast output viewer . the viewer scans through each blast output, one input sequence at a time, and displays as many hits for each sequence as the user desires. the viewer displays hits in a tabular format that can be rearranged based upon the user's desired preference. the viewer works with any type of xml formatted blast output such as blastx, blastn, blastp, tblastx, etc. there is also an alignment option that brings up a separate window that displays any of the output alignments. the alignment view of the sequence shows the query-seq, hit-seq, and mid-line fields of the hit aligned for easy viewing and analysis . the curation of blast hits is performed by clicking the checkbox corresponding to a single blast hit. this manual curation is based on which hits the user decides are significant based on his/her criteria. the researchers' criteria may consist of bit-score, e-value, and hit length for example. curated hits can be exported as tables, association files and even annotated fasta sequences.

annotation engine
the bov acts not only as a way to view and curate high-throughput blast data, but also has an effective way to perform automated annotations based upon top hits. the type of annotation can be defined dynamically based upon hit definition and can include any of the blast output fields that are available. the annotation engine  is used to export the blast output data according to the user's specifications. the annotation engine can automatically create annotated multi-fasta files, tab delimited text files containing all annotation, or common association files that are fully annotated based upon the user's criteria or selections.

in addition, as one of the most powerful aids to downstream analysis, the software automatically creates separate fasta file folders within a project that contain the "no hits". this allows the "no-hits" from previous jobs to be queried against separate databases or future updated database versions. similarly, during manual curation , those hits not "curated" or considered significant by the scientist are considered "false hits". as with the "no-hit" results the "false-hit" files can be exported separately as fasta files. as indicated, no-hits are those queries which did not get a significant match against the database.

an example of a typical annotated fasta output of an unknown sequence  searched against a typical protein databases that hit against the database sequence with accession number q <dig> could be exported as follows : >contig 111- similar to gb:af <dig>  -e-value  <dig> × 10e-180- transcription activator aagcttcacgcccaattctgcatcattttcataaagagcaggattggacaatacttgaaaactcagtttattggctgcgtcggaggcgttggagatcaactcacgtagg...

workstation test network
the workstation test network used for testing was limited to the number of workstations available within our facility . all of the workstations have various versions of microsoft windows . the workstations used in the testing process are detailed in table  <dig> 

performance testing
various combinations of workstations from the test network were utilized to test the functionality and reliability of w.nd-blast. for performance tests, the job start times were automatically recorded as well as the time when the job finished. duration of the job was calculated by subtracting the software recorded initiation time from the software recorded end time. performance of w.nd-blast was tested by varying the number of input sequences, database size, and number of workstations. two sizes of databases were used for testing the functionality of w.nd-blast, a  <dig> mb  protein  and  <dig>  gb  nucleotide database . the primary rational for testing the larger database was that the larger database exceeds the caching ability of the physical memory and requires the computer to access disk. in addition, larger databases are automatically segmented by formatdb. for this reason it is necessary to test both the database engine and blast engine for their abilities to handle large and segmented databases. the current version of w.nd-blast improves blast scalability only by distributing jobs across networks. as noted in the future work section at the end of the manuscript future versions of w.nd-blast will be further optimized to enhance performance on increasingly large databases using database partitioning  and dynamic task allocations . the smaller database was populated by protein sequences so blastx was executed. the larger database was populated by a subset of nucleotides from ncbi's nt database, therefore, blastn was executed. current versions of ncbi nt and ncbi nr databases were tested to ensure that the software was able to handle much larger databases. finally, all of the common blast programs were tested  and found to perform correctly.

fault tolerance/recovery implementation
as with any distributed system, fault tolerance is always a key issue. w.nd-blast displays several layers of fault tolerance. the primary level of fault tolerance is achieved by allowing the master node to assign individual and distinct jobs to each child node. because jobs  are submitted independently by the master node to each child node, if a node fails, only the single sequence the failed node was processing at the time of failure is temporarily lost. the lost sequence is ultimately reallocated to a separate node by the master so that there will be no missing data. a log is kept at the master node of all of the queries in the sequence pool  and their respective status. when a result is received at the master node, the validity of the result is checked, the sequence status is changed to done in the log, and the sequence is removed from the pool. the master node will only allow the sequence to remain in the working state for a user specified amount of time before returning the status to not done. this prevents jobs from being stalled on slow nodes toward the end of large jobs. when a failed child node is restarted on the network, it will broadcast a message to the master informing it of its return to ready status. the master then prompts the user to add or omit this node to its working nodes. if the master node goes down , the job can be resumed at the point of failure and all data up to that point is maintained intact. all remaining query sequences in the sequence pool will then resume execution on the available children. the final layer of fault tolerance occurs at the end of a large blast job when the software performs a final check of data integrity and ensures that all the input sequences have generated a quality output. any sequence that did not generate an output file is automatically subjected to a second blast.

efficiency
efficiency  was used in order to determine the scalability of w.nd-blast. efficiency was calculated by means of the following equation:

e = *100%.

where:

e = efficiency expressed as a percentage.

σ = time to process a given number of sequences  on a single average class e  workstation.

n = number of workstations being evaluated for a given data point . this does not include the master node which does not perform queries.

x = time to process job on n workstations.

RESULTS
performance of w.nd blast
when performing the test using  <dig> sequences on one workstation the blastx took on average  <dig>  min. theoretically, when increasing the number of workstations by three the time should decrease by no more than  <dig> times . the actual time, derived from table  <dig>  was measured at  <dig>  minutes, which correspond to a 99% efficiency rating using equation  <dig>  with  <dig> workstations the time should theoretically be  <dig>  minutes. the actual average time achieved was  <dig>  minutes, which gives an efficiency rating of better than 100%. this trend can also be seen when doubling the number of workstations from  <dig> to  <dig>  it is likely that those efficiencies above 100% are likely attributed to the effect of adding worker nodes with slightly more resources  as part of the child node pool. this is because efficiency is calculated in relation to the single machine times, which are determined on our class e nodes .

fault tolerance/recovery
w.nd-blast allowed workstations to fail, be turned off, or to be turned on during jobs. it easily adapted by redirecting failed queries, adding new workstations, or ignoring failed workstations. even when the master node was shut off during testing and although the job did not progress, w.nd-blast was able to continue the job at the point of failure once the master node was rebooted.

shortcomings in current version
w.nd-blast was designed as a user-friendly distributed software implementation of blast. for large databases such as current versions of nr or nt from ncbi there is a inherent decrease in the efficiency of the blast algorithm as described in the introduction. by distributing tasks among computers w.nd-blast still reduces the time it takes to perform searches on any size databases  but does not enhance the efficiency of the blast algorithm itself. with tools such as mpi-blast  <cit> , which utilizes a database segmentation scheme, queries against large databases are more efficient. as noted in the following section on future work the next evolution of w.nd-blast will include a database segmentation scheme that will dramatically improve overall efficiency on increasingly large databases.

in the current version of w.nd-blast there is the inability of the software to handle multiple projects simultaneously originating from a single master node. however on large networks multiple instances of the software can be running simultaneously if separate master processes are activated from different workstations and worker nodes are partitioned between jobs. this potentially allows more than one scientist to be utilizing the software on the same network.

w.nd-blast software is able to do a blast locally on the master node alone  but it is unable to blast on the master node, while performing distributed blast. this means that the number of machines for distributed blast is always n- <dig> if the master node is counted. it should be noted that all calculations based on time in this paper do not count the master node. in w.nd-blast the master node distributes tasks, coordinates, and compiles results.

finally, there is a lack of ability in the current version to utilize more than one processor on multi-processor machines. in future versions this feature will be reincorporated as a feature.

future work
there are several areas where w.nd-blast would benefit from future work. firstly, w.nd-blast provides for sufficient fault tolerance when the master node fails, but implementing a shadow master would be the most efficient addition to the algorithm. the shadow master would act as a clone to the master node, and in the event of failure the shadow would continue the execution of the application. if the master node fails, the current implementation would not resume until the user arrived back at the master workstation to restart it. with a shadow master, the software would continue. secondly, one of the most dramatic planned performance improvements in the w.nd-blast implementation will be the development of a database segmentation scheme similar to mpi-blast  <cit> . considering the efficiency of w.nd-blast on smaller databases a segmentation scheme should provide an even greater increase in efficiency on large databases such as current versions of nr or nt. this increase in performance would be primarily based on the ability of a given node to maintain a designated segment  of large databases in its memory so that it does not exceed the physical memory capacity and allowing it to cache the database files in memory after the first search. this prevents excessive writing to disk to load additional portions of the database. instead by segmenting the database a node will typically search all sequences against its own small piece of the database and return results to the master to be compiled. thirdly, several levels of quality of service  will be implemented within the w.nd-blast system. the current implementation only allows the remote users  to end the application if necessary. future efforts will allow the user at the worker node or at the master node to decrease the amount of cpu usage blast is allotted on each node on a node by node basis. qos will also be implemented related to the availability or lack of availability of disk space on child nodes. in example, if the child node is unable to hold the database it can automatically be pointed or manually assigned to access a file share database.

CONCLUSIONS
blast is one of the most widely used applications in modern biology, including genomics, microbiology, and molecular biology in general. its significance can be shown in the thousands of publications that refer to its use every year. in science, when a tool is this significant, the next logical step is to improve its functionality . wnd-blast provides this with its no hassle installation and intuitive user interfaces. also, when a tool is this widely used the need arises for enhancing performance. wnd-blast accomplishes this by allowing the user to distribute blast jobs from a single workstation to all available computing resources without the need for a server class machine. wnd-blast provides the research community with a more comprehensive, fault tolerant, user-friendly, reliable, and time efficient toolkit to perform blast queries distributed across windows based networks. w.nd-blast's output viewer and annotator also provide the user with a high-throughput method to analyze, process, and export blast results in a well-organized fashion.

availability and requirements
wnd-blast can be downloaded free-of-charge from the web page . wnd-blast requires windows  <dig> k or higher with the .net  <dig>  framework installed. as mentioned previously, wnd-blast was written primarily using microsoft visual studio .net  <dig> using c#. the wnd-blast software is provided 'as is' with no guarantee or warranty of any kind. the wnd-blast software is available for all non-commercial use. any other use of the software requires special permission from the primary author.

usda disclaimer
mention of trade names or commercial products in this publication is solely for the purpose of providing specific information and does not imply recommendation or endorsement by the u.s. department of agriculture.

authors' contributions
sd conceived of the project, devised the w.nd-blast algorithm, designed the functionality of each aspect of the software, and edited very early versions and final drafts of the manuscript; jz encoded much the software and wrote the primary version of the manuscript; mo assisted with testing, finding bugs in the software, and editing early version of the manuscript; jr assisted with all coding of the software; pp assisted in writing the manuscript and testing the software.

figures and tables
 <dig> – w = microsoft windows, u = unix/linux, o = other

 <dig> – based on ability to recover from node failure, master failure, and complete failure

this table provides a list of many of the most popular blast programs as well as their major features. the primary goal of most blast packages is to increase the performance of the blast algorithm. there seems to be a dichotomy between increased performance and user friendliness that has been encapsulated within w.nd blast. w = windows based, u = unix/linux based, o = other

different classes of workstations used in testing w.nd-blast are given. they are classified according to processor type and speed, os, ram, and hard disk space. the number of each workstation class in our lab is also given.

this table provides the time in minutes to perform the specified blast jobs on the number of sequences shown. the database size used for this analysis was  <dig> mb  protein database. blastx was utilized to search high-throughput jobs ranging from 100– <dig> sequences on various heterogenous workstations ranging from  <dig> to  <dig> nodes per job. at  <dig> and  <dig> nodes it should be noted that older machines were utilized.

