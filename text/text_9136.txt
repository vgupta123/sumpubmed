BACKGROUND
polyploidy is an important evolutionary process in plants, as well as in some animal groups , accounting for a significant proportion of speciation events  <cit> . most eukaryotes have a life cycle which includes a haploid  and a diploid  part. a polyploid can arise from a sterile hybrid which has resulted from the fusion of two incompatible haploid gametes. if, for example due to meiotic errors, the hybrid doubles its chromosomes, it can develop into a new, fertile lineage that is instantaneously reproductively isolated from its parents , so called allopolyploidy. genome doubling within a lineage is called autopolyploidy.

despite the importance of polyploidy, molecular phylogenetic studies of plants, even at shallow levels where reticulate patterns due to allopolyploidy are to be expected, have been dominated by the use of sequence regions that are unable to trace biparentally inherited evolutionary history. for example, sequences from the cytoplasmatic genomes are usually maternally inherited only, and for nuclear ribosomal dna it is thought that concerted evolution can eradicate evidence for hybridization . moreover, most phylogenetic studies aiming at tracing polyploid histories use a single nuclear low-copy number gene tree for inference  <cit> , or are restricted to relatively simple problems as the origin of allotetraploidy  <cit> . however, to successfully distinguish polyploidization from other biological processes that may be responsible for incongruent phylogenetic patterns , it is desirable to use a large number of gene loci . following this approach, in  <cit>  multiple biparentally inherited genes are used for problems involving ploidy levels higher than 4x   <cit> . the collections of gene trees arising in such studies commonly have the property that the same species name can label more than one leaf in a single gene tree, due to polyploidization events  <cit> . more formally, we call such trees multiply-labeled trees or mul-trees, for short .

recently, mul-trees have been used to construct phylogenetic networks representing the evolutionary history of polyploid species  <cit> . although there is now a well-developed algorithm for constructing these networks from a mul-tree  <cit> , construction of the mul-tree has to date been performed using an ad hoc consensus approach  <cit> , where, essentially, from the given collection of gene trees, a mul-tree was intuitively constructed in such a way that the number of gene trees that supported each branch was as large as possible. here we describe a method that generalizes this ad hoc approach, and allows the systematic construction of a consensus mul-tree from a collection of mul-trees. this method generalizes the greedy consensus method for finding the consensus of a collection of phylogenetic trees  <cit>  although, as we shall see, various complications arise due to computational issues concerning mul-trees. we illustrate the applicability of our new method using two collections of mul-trees of flowering plants of the genus silene. an implementation of the method in java , which is incorporated within the padre software package  <cit> , is freely available for download from .

RESULTS
the main algorithm
the input to our algorithm consists of a collection of rooted mul-trees, where the labels that occur are the same for each tree. an example of a collection of three such trees is presented in figure  <dig>  the leaves of every tree in this example are labeled by a <dig>  a <dig>  or a <dig>  labels a <dig> and a <dig> each occur twice, whereas label a <dig> occurs three times. to take into account that labels may occur more than once, the leaves of the trees are thus labeled by a multiset ℳ, in which the number of occurrences of any label a in ℳ is called the multiplicity of a. for example, in figure  <dig> the multiset ℳ is given by {a <dig>  a <dig>  a <dig>  a <dig>  a <dig>  a <dig>  a3} and the multiplicity of a <dig> is  <dig>  we will call a mul-tree with leaves labeled by a multiset ℳ a mul-tree on ℳ, for short. note that if all of the labels in ℳ have multiplicity  <dig>  then ℳ is just a set and a mul-tree on ℳ is a phylogenetic tree in the usual sense  <cit> .

the basic approach taken by our algorithm is to break the input mul-trees into a collection of clusters, that is, sub-multisets of ℳ. in a mul-tree t on ℳ each cluster arises from some branch e in t, and contains the labels a in ℳ with the property that we have to traverse branch e on the path from the root r to a in t. we also say that t exhibits these clusters. for example, in figure  <dig> branch e in tree t <dig> gives rise to the cluster {a <dig>  a <dig>  a <dig>  a3}. we then select clusters from those obtained by breaking up the mul-trees, one at a time, starting with those that are exhibited by most of the input trees, to construct a consensus mul-tree. at any time the clusters selected by our algorithm so far are chosen to have the property that there exists a mul-tree that exhibits all of them simultaneously.

note that this approach is also used in the greedy consensus method for constructing a consensus of a collection of phylogenetic trees  <cit> . in this method the efficient selection of the next cluster to be inserted into the consensus tree is based on the following useful property of phylogenetic trees  <cit> : if every pair of clusters in a collection is compatible, that is, there exists a phylogenetic tree that exhibits both clusters, then there is a  phylogenetic tree that exhibits the whole collection. in contrast, for mul-trees this property does not hold in general. for example, among the clusters obtained from the mul-trees in figure  <dig> every pair can be exhibited by some input tree. but it can be checked that there is no mul-tree that exhibits them all at once. in fact, it is np-hard to decide whether a collection of clusters of a multiset ℳ can be exhibited by some mul-tree on ℳ  <cit> . and, even if there exists such a tree, it need not be unique  and 2).

to cope with these difficulties, our algorithm first greedily adds in those clusters containing at least one label a that has multiplicity  <dig> in ℳ, called core clusters. the key property of these clusters is that, if they can be added to a mul-tree, then this can only be done in a unique way  <cit> . for example, the cluster {a <dig>  a3} can be added in only one way to the mul-tree in figure  <dig> resulting in the mul-tree depicted in figure  <dig>  we call the mul-tree obtained by adding in core clusters the backbone tree. note that if every element in ℳ has multiplicity  <dig> then every cluster is a core cluster and our algorithm works precisely like the greedy consensus method for phylogenetic trees  <cit> . in general, however, there will be clusters that are not core clusters, called ambiguous clusters, and therefore, in the second phase, we continue to greedily select these and, if possible, insert them into the backbone tree. this results in one or more mul-trees, all of which exhibit the same collection of clusters and that contain the backbone tree as a subtree.

note that as part of the two-phase strategy outlined above we also apply a threshold t that determines the minimum number of input trees that must exhibit a cluster in order to be taken into account when forming a consensus mul-tree. this threshold helps to prevent a core cluster being exhibited by only a small number of input trees blocking the addition of an ambiguous cluster that is exhibited by many input trees later on. the idea of using a threshold is similar to the approach taken by the majority rule consensus method for phylogenetic trees  <cit> .

a detailed description of the algorithm
we now give a full description of our new algorithm: in figure  <dig>  we present it in form of pseudo-code. first it uses the procedure clusters  to compute the sorted lists  and  of core and ambiguous clusters  on the given multiset ℳ. as mentioned in the previous section, we then select clusters, one at a time, from these lists to form a consensus of the input trees. we start  with a tree t that exhibits precisely the trivial clusters on ℳ, that is, the clusters containing a single label in ℳ . then we construct the backbone tree using the list of core clusters , and then add ambiguous clusters to the backbone tree . the output is a mul-tree selected from the resulting collection  of mul-trees. an output tree from this collection can either be selected by the user, or the whole collection of trees can be returned. in the next section we provide a score function to aid with the tree selection process.

to conclude the description of our algorithm we describe the details of the computation of the core and ambiguous clusters as presented in figure  <dig>  first, for each input mul-tree ti,  <dig> ≤ i ≤ l, we compute the collection of non-trivial clusters  that are exhibited by ti . if an input mul-tree exhibits a cluster c several times, e.g. tree t <dig> in figure  <dig> exhibits the cluster {a <dig>  a <dig>  a3} twice, we include in  the corresponding number of copies of c and distinguish them by recording the branch in ti that gives rise to them.

next we combine the collections  into a set ℬ of all clusters that arise from the branches of the input mul-trees without taking multiple copies of the same cluster into account . then using the threshold t, for each cluster c in ℬ the number  is computed, which is the largest number of copies of c such that at least t of the collections  contain that many copies of c . the clusters c in ℬ with  >  <dig> are then partitioned into core clusters and ambiguous clusters .

the core clusters are collected together in the set  . note that if d is a core cluster then  ≤  <dig> holds. in contrast, for an ambiguous cluster a one can have  >  <dig>  and so we record the numbers of copies of a that we might be able to accommodate in the consensus tree in the form of pairs , ..., ) denoting the resulting set of pairs by  . the core clusters d in  are then sorted decreasingly according to the number of collections among  in which cluster d is contained , where ties are broken arbitrarily. this yields a sorted list  of core clusters. similarly, the pairs  in  are sorted decreasingly according to the number of collections among  that contain at least m copies of a . again ties are broken arbitrarily. this yields a sorted list , ..., ) of the pairs in  from which the sorted list  of ambiguous clusters is extracted, with some clusters possibly occurring more than once in this list.

the run time of our algorithm can be bounded in terms of the number l of input trees, the sum m of the multiplicity of all elements in ℳ, and the sum d of the multiplicity of all elements in ℳ except those that occur with multiplicity  <dig>  for example, for the multiset labeling the tree in figure  <dig> we have m =  <dig>  which is the same as the number of leaves of the tree, whereas d =  <dig> because the multiplicity of a <dig> and a <dig> is not taken into account. note that, since the number of branches of a tree is linear in the number of its leaves, the total number of clusters  is in o. hence a straightforward implementation of the procedure clusters in figure  <dig> has a run time in o.

once the lists of clusters have been computed, the main task is to check, for a given tree and a cluster, whether the tree can be adapted to exhibit the additional cluster. basically we can use the algorithm presented in  for this task, which yields a run time for multicons of o. the first term in this bound comes from the run time of the procedure clusters. to give the reader some idea how the remaining two terms in the bound arise, note first that checking whether a core cluster can be added in line  <dig> of the algorithm multicons can be done by going through the vertices of degree higher than  <dig> in the tree constructed so far and checking whether they can be resolved to accommodate the additional cluster. implementing this in a straightforward way, each core cluster can be checked in o time and the resulting tree is, as mentioned above, unique. since there are o clusters, this yields the second term.

as for the third term, checking whether an ambiguous cluster can be added to a particular tree in lines 12- <dig> can be done in a similar way as outlined above for core clusters. however, the key difference is that there are now o resulting trees. this implies that the number of trees in the output collection  is bounded by o, in view of the fact that the number of non-trivial ambiguous clusters in a mul-tree on ℳ is in o . this leads to the last term in the bound above.

pre- and postprocessing
it often happens that the collection of input mul-trees are labeled by slightly different multisets . hence, we have also developed a simple preprocessing procedure that essentially restricts the input trees to a common multiset ℳ of labels. this procedure employs a majority rule, that is, for every label a that appears in at least one of the input trees, the multiplicity of a in ℳ is chosen as the largest integer m such that a appears in at least half of the input trees with multiplicity at least m. note that it is possible that some labels appear in so few input trees that they have multiplicity  <dig> in ℳ, that is, they will not appear in the consensus tree.

once we have determined this multiset ℳ it remains to restrict the input trees to ℳ and to compute a consensus of the restrictions. however, the restriction process might involve a choice of which leaves labeled by copies of a certain label should be removed. as the number of possible choices increases rapidly for different labels, potentially leading to a huge number of different restrictions, we avoid deciding which copies of a label to remove as follows. if a cluster contains more copies of a label than the multiset ℳ, these additional copies are removed from the cluster, independently of all other clusters. note that this might however yield two copies c and c' of a cluster in the collection  arising from some input tree ti such that the branch e that gives rise to c lies on the path from the root of ti to the branch e' that gives rise to c'. for example, consider the tree t <dig> in figure  <dig>  branch e gives rise to the cluster {a <dig>  a <dig>  a <dig>  a3} and branch e' to the cluster {a <dig>  a <dig>  a3}. however, if we restrict t <dig> to the multiset {a <dig>  a <dig>  a <dig>  a <dig>  a3}, say, we remove one copy of a <dig> from {a <dig>  a <dig>  a <dig>  a3}, then after the restriction both e and e' give rise to the same cluster {a <dig>  a <dig>  a3}. in this situation the cluster arising from e' is not counted as an additional copy and can rather be viewed as an artifact of the restriction to ℳ and will, therefore, not be included in . so, for the tree t <dig> in figure  <dig> only the two copies of cluster {a <dig>  a <dig>  a3} that arise from branches e and e" will be taken into account.

we also developed a postprocessing procedure that scores the mul-trees in the collection  computed by the algorithm multicons, to deal with the fact that this collection could be quite large. the basic idea for the scoring is to estimate the number of allopolyploidization events that are implicitly hypothesized by a mul-tree. to do this, we use an algorithm presented in  <cit> , called multibuild, to compute for each mul-tree t in  a network  representing t. we then use the number of allopolyploidization events hypothesized by  to score each mul-tree t, since  can be viewed as a most parsimonious representation of t in terms of such events. in practice, we have found it best to take all possible refinements of t to bifurcating trees and to calculate the minimum number of allopolyploidization events in the networks obtained for those refinements as the score of t. we suspect that this is because multibuild is only guaranteed to find an optimal network with respect to the number of allopolyploidization events if the mul-tree is binary.

applications
we illustrate the application of our method, along with some of the complexities involved in constructing a consensus of mul-trees, using two data sets of mul-trees of the flowering plant genus silene . these examples were computed using the implementation of the algorithm in the padre package. this takes as input a collection of trees in newick format  <cit> , and displays the resulting consensus tree, which can also be saved as a file in encapsulated postscript  or newick format.

the first collection of mul-trees we apply our algorithm to is depicted in figure  <dig>  we chose this example, as it is small enough to easily follow the workings of the algorithm. the labels represent silene species, namely, the diploids s. ajanensis  and s. uralensis , the tetraploid s. involucrata , and the two hexaploids s. sorensenis  and s. ostenfeldii . all trees are rooted at s. zawadskii . they are restrictions of the larger gene trees published in  <cit>  to the species a, u, i, s, o and z.

the gene trees in  <cit>  are reconstructed using standard techniques in phylogenetic analysis from regions of the nuclear rna polymerase  gene family -), two concatenated chloroplast regions ), and one nuclear ribosomal region ). although all  <dig> gene trees in figure  <dig> may be viewed as mul-trees, it should be noted that only the four trees on the rnap genes -) are true mul-trees. for the chloroplast regions, this is because chloroplasts are maternally inherited and harbor a haploid genome. a mul-tree constructed for such regions is therefore a phylogenetic tree in the usual sense. regarding the nuclear ribosomal dna, the reason is different in the sense that, although they constitute a very large multigene family, its members are kept identical or very similar by concerted evolution. therefore, traces of hybridization events are quickly eradicated . as a consequence, nuclear ribosomal dna can behave similarly to a haploid, uniparental locus.

when we apply our algorithm to the input mul-trees in figure  <dig>  we first apply the preprocessing procedure to compute a multiset ℳ to which we restrict the input trees, yielding ℳ = {a, i, i, o, o, o, s, s, s, u, z}. using this multiset and the default value of ⌈l/2⌉ =  <dig> for the threshold t we obtain the  <dig> non-trivial core clusters

  

and the non-trivial ambiguous clusters {o, s}  and {i, o, s}  to build a consensus tree. note that, although the cluster {a, i, o, o, s, s} is generated twice when breaking t <dig> into clusters , it is taken into account only once. also note that the choice of the threshold t implies, for example, that even though {a, i, o, s} is a core cluster it is not taken into consideration for constructing the backbone tree as this cluster is only exhibited by a single input tree, namely the tree in figure  <dig> 

the backbone tree constructed from the  <dig> selected core clusters is depicted in figure  <dig>  adding in the ambiguous clusters results in  <dig> semiresolved consensus mul-trees one of which we depict in figure  <dig>  when applying the scoring procedure, by constructing a reticulate network with multibuild for all  <dig> distinct refinements of these  <dig> trees to bifurcating trees, we find a single refined mul-tree with minimum score which is depicted in figure  <dig>  note that this tree was also constructed by the ad hoc method mentioned above in  <cit> . the reticulate network computed for this mul-tree is depicted in figure  <dig>  it postulates  <dig> consecutive allopolyploidization events, the first one resulting in the tetraploid s. involucrata and the second one leading to the two hexaploids s. sorensenis and s. ostenfeldii.

the second collection of mul-trees we applied our algorithm to is depicted in figure  <dig>  this collection is more complex than the previous one since it involves more species and the trees are much more unresolved. the additional silene species appearing in the trees  are: s. linnaeana , s. uralensis  , s. samojedora , and s. villosula , which are all diploid, and s. sachalinensis  and s. tolmatchevii , whose chromosome numbers are unknown but, in view of the number of rnap gene copies found, are likely to be tetraploids. it should be noted that in contrast to the trees in figure  <dig>  the four mul-trees in figure  <dig> were reconstructed solely from rnap gene families , rpa <dig> , rpd2a , and rpd2b ). as before, all mul-trees are rooted at s. zawadskii .

the multiset of labels constructed by the preprocessing procedure is ℳ = {a, i, i, l, o, o, o, s, s, s, sac, sac, sam, t, t, u, u m, v, z}. using this multiset a collection of  <dig> non-trivial clusters is derived from the input trees, of which  <dig> are core clusters and  <dig> are ambiguous clusters. we employed a threshold of t =  <dig>  as the input trees are very unresolved and larger thresholds yield only a small number of non-trivial clusters to form a consensus tree. in figure  <dig> we depict the unique backbone tree constructed from  <dig> of the non-trivial core clusters. adding ambiguous clusters to this tree results in  <dig> semiresolved consensus mul-trees one of which we depict in figure  <dig>  by exhaustively searching through the set of all  <dig> refinements of these  <dig> trees, we find that only  <dig> of them give rise to a reticulate network with the minimum number of  <dig> hypothesized allopolyploidization events. in figure  <dig>  we depict one of them and in figure  <dig> we depict the corresponding reticulate network. note that this network agrees with the network presented in figure  <dig> when restricted to the silene species in the first collection. in addition two further allopolyploidization events are hypothesized, suggesting that s. sachalinensis and s. tolmatchevii are tetraploids.

CONCLUSIONS
in this paper, we have presented a new algorithm for constructing a consensus mul-tree from a collection of mul-trees, and illustrated its applicability using two examples. both consisted of collections of gene trees that were constructed from sequence data of polyploid plants, including biparentally informative sequences. in both cases, we have also obtained networks that provide scenarios for how the plants evolved.

as a preprocessing procedure we provide a way to deal with the situation that some input trees might have missing or additional leaf labels. a key task in this context is to determine the multiset of labels that should appear in the consensus tree. the simplest possible approach would be to just take the union of the multisets over all input trees, that is, every label has the maximum multiplicity with which it occurs in an input tree. however, in practice we found that this tended to lead to an overestimation of the multiplicity of some labels, hence our use of a majority rule procedure. even so, our approach is still rather simple in that it is only likely to work well in case the number of additional or missing leaf labels is small since otherwise too much information is lost. to circumvent this problem one might try to develop supertree methods for mul-trees, although we expect that this task would be quite challenging in the light of the fact that many versions of the supertree problem are hard even for collections of phylogenetic trees . in this vein, it might also be of interest to explore the possibility of constructing consensus- or super-networks  <cit> .

the basic idea for our algorithm, that is, breaking the input trees into clusters and then combining some of these clusters to form a consensus tree, seems to yield good results if the input trees are not too unresolved and there are enough clusters that are exhibited by many input trees. however, in some circumstances, the greedy construction involves a random choice of which clusters, exhibited by the same number of input trees, should be added next. in view of this, a more canonical approach to selecting clusters could be desirable. this might be achieved by generalizing, for example, the majority rule consensus approach  <cit>  to mul-trees. even so, the results in  <cit>  imply that as the total multiplicity d of those labels that appear with multiplicity greater than  <dig> grows, the majority rule consensus tree will resemble more and more the strict consensus tree, which tends to be very unresolved. our algorithm tries to address this issue by allowing the user to explore how being strict  or generous  affects the resulting consensus trees. in addition, there is also the option to explore whether further clusters exhibited by less than t input trees could still be added into the consensus tree at the end. in future work, it could also be interesting to try and generalize non-cluster-based approaches for computing a consensus of phylogenetic trees as described in  <cit>  .

we employ a postprocessing procedure to score the resulting trees, but as this potentially involves refining trees to binary trees, it has a worst case run time that is exponential in the number of leaves of the resulting trees . therefore, despite working quite well for the examples we have considered, it is likely to be limited to rather small problem instances. moreover, the number of trees with optimal score can be quite high, especially when the input trees are very unresolved. even though multiple optimal solutions are not uncommon in phylogenetics , it could still be of interest to develop ways to systematically select specific optimal trees. for example, alternative score functions could be developed that take into account how the clusters are arranged in the input mul-trees or, if available, branch length information.

the parameter that seems to have the biggest impact on the run time is the total multiplicity d of those labels that appear with multiplicity greater than  <dig> in many input trees. even though the theoretical worst case run time of our algorithm increases exponentially with this parameter , for both examples presented above the run time was only a few seconds on a modern desktop computer.

in view of recent advances in dna sequencing technologies , we anticipate that many more data sets will soon become available giving rise to collections of mul-trees. the algorithm proposed in this paper will hopefully provide a useful new tool for analyzing such collections.

authors' contributions
all authors contributed to the ideas and the development of the algorithm which was implemented by ml. ap and bo provided the biological data set and ensured the biological relevance of the paper. every author contributed to the writing of the paper.

