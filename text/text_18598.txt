BACKGROUND
multiple sequence alignment  of individual loci  is the first step in many bioinformatics pipelines, including phylogeny estimation, protein classification, the detection of selection and co-evolution, and metagenomics. several application areas could benefit directly from improved alignments and phylogenies of large-datasets. for example, metagenomic methods that rely on marker genes  invariably use genes that are present for well over  <dig>  bacterial sequences and rely directly on the phylogeny to characterize the content of a shotgun sequencing sample. improved alignments mean higher quality signal and thus more precise description of a given microbial community. furthermore, it is well established that dense taxonomic sampling generally improves the estimation of phylogenies and multiple sequence alignments. thus, multiple sequence alignment of datasets containing hundreds to many thousands of sequences is of increasing importance.

numerous msa methods have been developed, but only a few of these can analyze large datasets, and even fewer have been demonstrated to have good accuracy beyond a few hundred sequences  <cit> . the impact of multiple sequence alignment on downstream analyses is known to be substantial, with errors in multiple sequence alignment producing increased error rates in phylogeny estimation, false detection of positive selection, difficulties in detecting active sites in proteins, etc.  <cit> . thus, highly accurate multiple sequence alignment, especially of large datasets spanning large evolutionary distances, is one of the major outstanding bioinformatics problems  <cit> .

one of the most accurate approaches to multiple sequence alignment is statistical estimation under stochastic models of sequence evolution where sequences evolve down trees with insertions and deletions  and substitutions. yet statistical estimation of alignments or trees under these models is rarely performed, largely because the current methods for this type of analysis are too computationally intensive to use on more than about  <dig> sequences. while many methods have this approach , bali-phy is the best-known, and the main such method that is used to estimate an alignment and phylogeny from unaligned sequences;  <cit>  is the initial paper on this method, but subsequent publications extended and improved the statistical models on which the method is based.

liu et al.  <cit>  showed that bali-phy dominated saté  <cit>  and other alignment and tree estimation methods on datasets with  <dig> sequences with respect to alignment and tree accuracy, but the analysis took several weeks for each dataset. even smaller datasets can be computationally intensive , and the largest dataset that bali-phy has analyzed may be the 117-sequence dataset studied in  <cit> . however, bali-phy may not be able to run on substantially larger datasets than this; indeed, our initial testing found that with  <dig> sequences, bali-phy failed at an early step on every run . indeed, although bali-phy has been cited often in the literature, very few benchmarks of performance are included; most simply note that bali-phy has a strong statistical model but is slow and computationally demanding  <cit> . thus, improving the scalability of bali-phy to larger datasets is of great interest and potentially substantial impact.

our group has developed several techniques  <cit>  to improve the scalability of multiple sequence alignment methods to large datasets, of which pasta  <cit>  and upp  <cit>  provide the largest improvements. pasta is an iterative divide-and-conquer method for co-estimating trees and alignments, in which each iteration begins with a maximum likelihood tree computed in the previous iteration, and then uses the tree to partition the sequences into small subsets that are local within the tree. then, a selected msa method is applied to each subset and the subset alignments on adjacent subsets  are aligned together using profile-profile alignment methods. finally, an alignment on the entire dataset is obtained by transitivity. as shown in  <cit> , using pasta with mafft  <cit>  on the subsets made it possible to align ultra-large datasets, including one with  <dig> , <dig> sequences, and to do so with high accuracy. upp uses a different approach: it selects a random subset of the sequences, computes an alignment and tree  on the subset using pasta, and then represents this pasta alignment using an ensemble of hidden markov models , each computed on a small subset of the sequences . each remaining sequence is then aligned to the backbone alignment using the best-scoring hmm in the ensemble. finally, the entire set of sequences is aligned through transitivity. like pasta, upp also produces highly accurate alignments of datasets with  <dig> , <dig> sequences  <cit> , and is more accurate than pasta when the sequence dataset has fragmentary sequences  <cit> .

in this study, we explore the use of both pasta and upp to boost bali-phy. pasta is a method that has algorithmic parameters with default settings, and we use pasta with its default settings as a starting tree. we then run one iteration of pasta using bali-phy instead of mafft as the subset aligner, and we refer to this extension of pasta by “pasta+bali-phy”. as we will show, pasta+bali-phy can align 1000-sequence datasets with higher accuracy than default pasta. we also use pasta+bali-phy  to compute backbone alignments and trees with  <dig> sequences within upp, and we show that this approach produces more accurate alignments on  <dig> -sequence datasets than default upp. the improvements obtained over default pasta and default upp are significant, since these two methods are the current most accurate methods for large-scale and ultra-large scale multiple sequence alignment  <cit> , especially  when alignments are used for phylogenetic estimation purposes.

the rest of this paper is organized as follows. in “methods” section, we describe bali-phy, pasta, and upp, and the performance study we used to evaluate the impact of integrating bali-phy into pasta and upp. in “results and discussion” section, we report the results of the performance study. in “general observations” section, we discuss the implications of the study and future research. additional results and discussion are provided in additional file  <dig> 

methods
we ran two experiments in this study. the first experiment evaluated pasta+bali-phy on 1000-sequence datasets in comparison to other alignment methods, and the second experiment evaluated upp using pasta+bali-phy to compute the backbone alignment and tree in comparison to other alignment methods on  <dig> -sequence datasets. all datasets are available from prior publications.

algorithms

bali-phy is a method that uses gibbs sampling to alternately sample a new alignment, followed by a new phylogeny, each proportional to their likelihood under its sequence evolution model. unlike standard phylogenetic models, such as the generalized time reversible  model  <cit>  in which only substitutions occur, the stochastic models in bali-phy, rs <dig> and subsequently rs <dig>  also have indels. the resulting set of simulated phylogeny-alignment pairs constitutes an estimate of the joint posterior distribution. bali-phy does not have a well-defined stopping rule, and will run indefinitely until it is terminated. hence, to compute a single msa using bali-phy, it is necessary to define a stopping rule and a method for extracting the final alignment. in the study presented here, bali-phy was stopped after  <dig> hours of running independently on all  <dig> cores of a single node on the blue waters computing facility at uiuc  <cit> . once completed, the posterior decoding  alignment was computed using the alignment-max command within bali-phy and designated as the output alignment. the pd alignment is obtained by scoring each column in the sample alignments according to how often it appears, and choosing the set of columns that a) constitutes a valid msa on the data and b) has the largest cumulative score possible. we chose the pd alignment because prior studies have shown that the pd alignment was more accurate than the map  alignment  <cit> .

for all experiments described in this paper, we use “bali-phy" to specifically refer to the protocol described above for computing a multiple sequence alignment from a given input, using bali-phy v <dig> . <dig>  no restrictions or starting data were provided to the software; commands for its execution, as well as for computation of the pd alignment, are provided in additional file  <dig> 


mafft is a well known method for multiple sequence alignment that has been consistently one of the top performing methods in terms of alignment accuracy on both nucleotide and amino acid benchmarks  <cit> . mafft has many ways of being run, but its most accurate settings, such as using the local pairs  command, are computationally very intensive on large datsets. mafft run in default mode will select the variant to run based on the dataset size, but will not typically have the same high accuracy as when run using the local pairs command.


pasta is an algorithm for large-scale multiple sequence alignment that has several algorithmic parameters that can be set by the user, but also has default settings, which we now describe. pasta operates by initializing an alignment, then iteratively estimating a maximum likelihood  tree using fasttree- <dig>  <cit>  on the alignment, estimating an alignment with the help of this tree, and repeating. the calculation of the new alignment given the current tree is obtained using a specific divide-and-conquer strategy, wherein the tree is broken into subtrees through repeatedly deleting centroid edges until each subtree has a small enough number of sequences . then, the preferred multiple sequence alignment method  is used to align each subset, yielding a set of subset msas. then, every pair of subset alignments that are adjacent to each other in the tree are merged into a larger alignment using a profile-profile alignment technique . this produces a set of larger subset alignments that overlap and agree pairwise in all homologies for those sequences that they share and enables an alignment on the entire set to be computed using transitivity. the number of times this process iterates can be set by the user, but the default is three. as shown in  <cit> , pasta improves on both saté  <cit>  and saté-ii  <cit>  in terms of accuracy and scalability to large datasets.


pasta variants: pasta has default settings as described above that were selected for use with mafft l-ins-i as the subset aligner. however, pasta can be used with any msa method as the subset aligner. in this paper, we examine the effect of using bali-phy instead of mafft l-ins-i within pasta. in order to implement this, some additions to the infrastructure within pasta were necessary. see additional file  <dig> for details.

because bali-phy requires  <dig> hours and a 32-core server to run whereas mafft l-ins-i runs on  <dig> sequences in a matter of minutes, replacing mafft l-ins-i for the initial iterations when the subsets are effectively  random would have been a poor use of expensive computing resources. we therefore chose to implement it by running pasta in default mode , and then performing the fourth iteration using bali-phy as the subset aligner. because bali-phy is able to run on datasets with  <dig> sequences, we set the decomposition size to  <dig> instead of  <dig>  which is the default setting. all other parameters were run in default mode. the two natural lines of inquiry with the tests were therefore  does the fourth iteration using bali-phy improve the alignment compared with the result after the first three iterations , and if so,  can we be sure it is due to bali-phy and not simply that we used an extra iteration? to explore these questions, we tested the following three variants of pasta: 

pasta: pasta with fully default settings, which means three iterations, maximum subset size  <dig>  with mafft l-ins-i as the subset-aligner, and opal to align pairs of subset alignments. we denote this by p.


pasta+bali-phy: pasta with three iterations under default settings, followed by one iteration with maximum subset size  <dig> and bali-phy as the subset aligner.  specified as an input.) we denote this by p+bali-phy.


pasta+mafft-l: pasta with three iterations under default settings, followed by one iteration with maximum subset size  <dig> and mafft l-ins-i as the subset aligner.  we denote this by p+mafft-l.





upp is a fast multiple sequence alignment method that can be extended to  <dig> , <dig> sequences easily, and is especially robust to fragmentary sequences compared to pasta  <cit> . upp works by choosing a random subset of   <dig> sequences in the dataset to be the “backbone" and aligns those sequences with pasta. it then constructs a collection of hmms  on the backbone alignment. for each of the remaining sequences, it finds the hmm from the ensemble that has the best bitscore, and uses that hmm to add the sequence to the backbone alignment. these additions are done independently, because the backbone alignment does not change during the process. upp runs in time that is linear in the number of sequences in the input, and is also highly parallelizable. we present results using upp with the three variants of pasta described above to compute the backbone alignment and tree on 1000-sequence subsets of different  <dig> -sequence datasets.


maximum likelihood trees were estimated on each estimated and true 1000-sequence alignment using raxml  <cit>  and fasttree- <dig>  <cit> , two of the most accurate methods for large-scale maximum likelihood  <cit> . for the  <dig> -sequence datasets, we only used fasttree- <dig>  since raxml is too slow on such datasets. we ran raxml and fasttree- <dig> in their default modes under the gtr model with gamma-distributed rates across sites.

data
in order to test the algorithms described above, a collection of simulated datasets used in  <cit>  was downloaded from the authors’ website. this collection included data generated by three separate sequence evolution simulators, indelible  <cit> , rnasim  <cit> , and rosedna  <cit> . each of these simulators has distinct properties, and hence represents a unique set of simulation conditions. two of the three  included  <dig>  sequences in each replicate, while the third  included only  <dig> . for the former, ten replicates from each simulator were used and a single set of  <dig>  sequences was randomly chosen from the original.
table  <dig> summary statistics for true alignments on  <dig> -sequence data

p-distance
the p-distance is the normalized pairwise hamming distance. numbers shown are averages over  <dig> replicates





rosedna is a subset of a larger collection of dna sequences simulated using the rose simulator  <cit>  that was used in  <cit>  to evaluate saté in comparison to other msa methods. the rose simulator is a straightforward implementation of the hky stochastic model, which is itself a close precursor to the standard generalized time reversible  model  <cit>  in use today. the simulator adds an additional model that allows the user to simulate insertions  by simulating, in order, the number of insertion events that occur, the position of each insertion followed by its length. we used  <dig> replicates of the  <dig> -sequence datasets from the model conditions labeled 1000m <dig>  1000s <dig> and 1000l <dig> from  <cit> , where the m/s/l moniker refers to the average gap length  of each indel event. the specific model conditions we selected have high rates of evolution, and were selected to provide a substantial challenge to the msa methods.


indelible is similar to rose, but includes some additions that accommodate additional model complexity, such as gamma-distributed rates across sites and a codon model. the indelible data used for these experiments are the same data used in  <cit> , and includes only the model condition labeled m <dig> in the previous paper, which is the highest rate of evolution of the three that were used.


rnasim simulates rna sequence evolution down a tree, specifically taking rna structure into account, and hence represents a significant departure from the previous two. it uses a population genetics model with selection to simulate sequence mutations, with selection favoring mutations with a relatively low free energy in its folded state. this is designed to emulate actual conditions that might plausibly be acting on mutations to rna sequences, particularly those in a folded state such as ribosomal rna. as a result, it has several major differences from the other simulators. first, there is no uniform substitution matrix used in the simulation. second, site mutation probabilities are not independent of one another. importantly, by contrast with the other two simulators, these differences are a departure from the likelihood model  used in the maximum likelihood phylogeny estimation step of pasta, and also a departure from the substitution model used by bali-phy. therefore, results on the rnasim data provide a test of the msa method’s robustness to model misspecification, and indirectly also test the ability of gtrgamma maximum likelihood phylogeny estimation to be robust to substantial model misspecification.

evaluation criteria
we explore alignment accuracy using three standard criteria: modeller score , sp score , and total column  score, as computed by fastsp  <cit> . the modeller score is equivalent to 1-spfp, where spfp is the “sum-of-pairs false positive rate"; similarly, the sp score is equivalent to 1-spfn, where spfn is the “sum-of-pairs false negative rate". these spfp and spfn error rates are based on homologies between nucleotides that appear in the true and estimated alignments  <cit> . the tc score is the fraction of the number of columns in the true alignment that are recovered in the estimated alignment. all accuracy criteria are given as a percentage, with  <dig> % indicating perfect accuracy.

we explore phylogenetic accuracy of maximum likelihood  trees computed on these alignments using the robinson-foulds  error rate, where the rf error is the percentage of the non-trivial bipartitions in the true tree that are missing from the estimated tree. we report accuracy using “delta-rf", which is the change in the rf error rate between the ml tree computed using the estimated alignment and the ml tree computed on the true alignment. the rf error rates were calculated using dendropy  <cit> .

RESULTS

results for experiment 1: we compare p+bali-phy, p+mafft-l, p, mafft l-ins-i, and mafft run in default mode; see table  <dig>  p+bali-phy has the top tc scores of all methods, with very substantial improvements over the second best method, which is typically p+mafft-l. p+bali-phy is also the best performing method in terms of alignment precision and recall on four of the five model conditions, and in second place on the fifth , where p is best. however, p+bali-phy is within  <dig> % of p on the rose s <dig> datasets in terms of precision and recall. mafft l-ins-i produces less accurate alignments than the pasta variants we study, but is much more accurate than mafft run in default mode. the fact that default mafft has poor accuracy on these datasets shows that these are not datasets that are aligned with high accuracy by all methods; only the better methods provide good accuracy on these datasets.
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
- <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
note that precision, recall and tc are accuracy metrics  but delta-rf is an error metric . metrics are averages over  <dig> replicates. method names have been shortened slightly for space: p refers to pasta, p+ is shorthand for pasta+, mafft-def refers to default mafft, and mafft-l refers to mafft l-ins-i. bold numbers indicate best performing method




results in terms of tree error are somewhat more mixed: p+bali-phy is best on three of the five model conditions, in second place  on one condition , and in second or third place  on the remaining condition . however, on those conditions where p+bali-phy does not have the highest tree accuracy, it is close to the best performing method .

overall, default mafft has the worst accuracy of all methods on these data with respect to all criteria. mafft l-ins-i is clearly more accurate than default mafft, but not as accurate as the pasta variants in terms of alignment criteria. hosever, mafft l-ins-i has the best tree accuracy on the rose m <dig> datasets, and second best tree accuracy on the rose s <dig> datasets.
fig.  <dig> results on 1000-sequence datasets, comparing default pasta and pasta+baliphy. each point represents one replicate. pasta denotes the alignment from pasta under default settings ” in the text), and pasta+bali-phy denotes the alignment after an additional iteration using bali-phy. delta-rf refers to the difference between the rf error rates of ml trees computed on the estimated and true alignments. in each subfigure, a position above the 45-degree line indicates that pasta+bali-phy is preferable; the axes for the subfigure for delta-rf have been flipped to maintain this interpretation, since delta-rf is an error metric rather than an accuracy metric




the same figure comparing pasta with bali-phy to pasta with mafft shows virtually identical patterns and is contained in additional file  <dig> 


results for experiment 2: in experiment  <dig>  we compared three variants of upp that differ only in how the backbone alignment and tree are computed; see table  <dig>  clearly using p+bali-phy to compute the backbone alignment and tree has the highest alignment accuracy for all three criteria, and the gains in accuracy are largest in terms of the tc score; the second most accurate method uses p+mafft-l to compute the backbone alignment and tree. upp only computes an alignment, so we computed ml trees on these three alignments using fasttree- <dig> . note that the trees computed using upp with p+bali-phy are within  <dig>  % in rf error of the tree computed using ml on the true alignment, showing that the alignment error is low enough to not impact the tree estimation by much in comparison to the tree computed on the true alignment. figure  <dig> shows results for each replicate and demonstrates that improvements in alignment accuracy occur on nearly every replicate.
fig.  <dig> results on  <dig>  sequences. using upp on two different backbones: one computed using default pasta and the other computed using pasta+baliphy . each point represents one replicate. delta-rf refers to the difference between the rf error rates of ml trees computed on the estimated and true alignments. in each subfigure, a position above the 45-degree line indicates that pasta+bali-phy is preferable; the axes for the subfigure for delta-rf have been flipped to maintain this interpretation, since delta-rf is an error metric rather than an accuracy metric


 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
 <dig>  %
each method shown under backbone is the method used to align the backbone of  <dig>  sequences. due to the running time required for raxml on data of this size, Δ-rf shown is for fasttree- <dig> only. bold numbers indicate best performing method




statistical significancetable  <dig> 
p-values for each model condition and metric for the hypothesis test that p+bali-phy outperforms p with respect to alignment accuracy

 <dig> 
 <dig> 
< <dig> 
< <dig> 
 <dig> 
< <dig> 
< <dig> 
< <dig> 
< <dig> 
values are based on one-sided student’s t-test for differences between the two methods on each replicate. bolded values indicate significant differences using a benjamini-hochberg procedure to control the false discovery rate at  <dig> %  <cit> 

p-values for each model condition and metric for the hypothesis test that p+bali-phy outperforms p with respect to tree accuracy

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
values are based on one-sided student’s t-test for differences between the two methods on each replicate. bolded values indicate significant differences using a benjamini-hochberg procedure to control the false discovery rate at  <dig> %  <cit> 




general observations
as this study showed, incorporating bali-phy into pasta produced alignments that were generally more accurate than default pasta, which is based on mafft; similarly, incorporating pasta+bali-phy into upp produced alignments that were more accurate than default upp, which is based on default pasta. the improvement in alignment accuracy was most noticeable for the total column  score, where pasta+bali-phy had much higher tc scores than the next best method, which was pasta+mafft-l. for example, on the  <dig> -sequence datasets we studied, pasta+bali-phy had much higher tc scores than pasta+mafft-l and default pasta, by factors that ranged from  <dig>  to  <dig>   and from  <dig>  to  <dig>  . pasta+bali-phy nearly always produced alignments that have higher modeller-score  and sp-score , with the single exception being the rosedna s <dig> dataset with  <dig>  sequences, where it was  <dig> % lower than the best-performing , but both had good accuracy . the integration of pasta+bali-phy into upp produces alignments that strictly dominate the second best performing method, which is upp run in default mode, using default pasta to compute its backbone tree. thus, integrating bali-phy into pasta and upp improves alignment accuracy with respect to all three criteria, with particularly large improvements for tc scores. perhaps the most important trend with respect to tree accuracy is that for all  <dig> -sequence model conditions and nearly all  <dig> -sequence model conditions, ml trees computed on the pasta+bali-phy alignments are within  <dig> %  of the ml tree computed on the true alignment. thus, in general, alignment error in pasta+bali-phy does not increase tree error in a noticeable way over what could be computed given the true alignment. the only exceptions to this are the rosedna datasets, where the increase in tree error obtained on the pasta+bali-phy alignment compared to trees computed on the true alignment ranges from  <dig>  %  to  <dig>  % . however, ml trees on other alignments on those datasets also have somewhat higher delta-rf error on these rosedna datasets. indeed, pasta+bali-phy has the lowest delta-rf error on four of the six combinations of ml method and model condition, and comes in second place on the remaining two conditions. furthermore, when ml trees computed on pasta+bali-phy alignments are not the most accurate, they are very close in accuracy to the the most accurate trees, with differences that range from  <dig>  to  <dig>  %.

the gap length distribution affects alignment difficulty, with short gap datasets harder to align correctly than datasets with long gaps. the comparison between results on the  <dig> -sequence rosedna m <dig>  datasets and the 1000-sequence rosedna s <dig> datasets is interesting, though. if alignment precision and recall are considered, then the rosedna m <dig> datasets are more difficult, as they result in reduced precision and recall values for all methods; however, if tc scores are considered, then the rosedna s <dig> datasets are more difficult. clearly, model conditions impact performance with respect to the different alignment criteria differently, but generally short gaps combined with high rates of substitution create the hardest conditions.

CONCLUSIONS
this study was limited to simulated datasets where sequences evolve down model trees under processes that include insertions, deletions, and substitutions. of the three simulators used to produce these datasets, rnasim is the most complex, and in particular includes sites that co-evolve based on the secondary structure for the rna molecule used to design the simulation. on these datasets, we explored the use of bali-phy within pasta  as a point estimator of the true sequence alignment. our study shows that incorporating bali-phy into pasta and upp enables bali-phy to be extended to large and ultra-large datasets, and to produce more accurate alignments than the default settings for pasta and upp, which are the current best alignment methods for large-scale and ultra-large-scale multiple sequence alignment. indeed, what this study shows is that integrating bali-phy into pasta means that a dataset with  <dig> sequences can be aligned in about the same time as  <dig> independent bali-phy analyses of  <dig> sequences each. furthermore, once a dataset of this size is computed, larger datasets can be aligned very quickly by using the pasta+bali-phy alignment as the backbone alignment and tree in upp. thus, even though this approach does not address how to speed up bali-phy for 100-taxon datasets, it does show that bali-phy can be scaled to much larger datasets in an essentially linear fashion.

there are several limitations to this study. first, although we explored this technique with bali-phy, we did not explore it with other statistical methods. however, since the parameters of the divide-and-conquer strategy  can be adjusted to suit the given base msa method, this extension can be easily done. thus, methods such as statalign  <cit> , which may be limited to even smaller datasets, could also be tested in this framework. similarly, methods such as pagan  <cit>  are impacted by dataset size and the challenge in estimating good guide trees, and pasta’s phylogenetically-informed divide-and-conquer strategy might be useful techniques to improve their scalability to large sequence datasets, especially when the sequence datasets are highly heterogeneous. thus, future work should evaluate the impact of this type of strategy on statalign, pagan, and other statistical methods.

our study also only examined minor adjustments to the algorithmic parameters for pasta and upp; additional research to optimize the parameters involved in this implementation could lead to substantial improvements, as essentially no parameter tuning was done.

this study was limited to simulated datasets, and so the potential for this type of approach to provide improvements on biological datasets is unknown. one of the challenges is that most biological alignment benchmarks are amino acid datasets; while bali-phy can analyze amino acid sequences, it is even more computationally intensive on amino acid datasets than on nucleotide datasets, and it is not known whether the statistical approach in bali-phy will provide advantages for structural alignment estimation.

finally, one of the appealing aspects of the bayesian approach in bali-phy is that it returns a sample from the distribution on multiple sequence alignments and trees. this study only explored bali-phy as a point estimator of the alignment, and so in a sense does not truly scale bali-phy to large datasets. scaling bayesian methods such as bali-phy so that they achieve their full potential on large datasets is clearly of great interest, and future work should attempt to do this.

additional file

additional file  <dig> supplementary information. additional file  <dig> contains the details of the modifications to pasta discussed in section “methods” as well as specific commands used to run each software used in the paper. it also contains additional data, including additional pairwise plots similar to fig.  <dig> and a performance comparison of the two maximum-likelihood tree estimation programs.




