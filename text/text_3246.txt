BACKGROUND
the inference, or reverse-engineering, of molecular networks from experimental data is an important problem in systems biology. accurate methods for solving this problem have the potential to provide deeper insight into the complexity and behavior of the underlying biological systems. so far the focus has been largely on the inference of network topology, that is, on the wiring diagram representing the regulatory relationships connecting different genes  <cit> .

it has been argued that one can obtain a significant improvement in performance with inference methods that make use of data that capture the dynamics of a network in response to perturbations  <cit> . this point of view has been adopted in the design of several recent methods that take into account time series data as well as perturbations of the network  <cit> .

making effective use of prior knowledge is also crucial in any inference problem  <cit> , because it is usually vastly underdetermined due to insufficient data quantity and/or quality. that is, typically many different models are consistent with the available data, and prior knowledge must be used to further narrow down the space of candidate models. prior knowledge can come in different forms such as information about the network’s sparsity or specific connectivity information. since gene regulatory networks are known to be sparsely connected, many inference methods specify constraints to favor sparse networks in the inference process. this is achieved for example, by iteratively setting weak connections to zero  <cit> , choosing the sparsest among all possible solutions  <cit> , or simply imposing a maximum number of regulators per gene  <cit> . however, care must be taken, since the more biologically meaningful networks might not necessarily correspond to the most parsimonious solution  <cit> . explicit knowledge of the network’s connectivity can be gathered from previous biological knowledge of the system in question  <cit>  or from the contributed knowledge from different inference methods, particularly when heterogenous data types are available .

finally, another desirable property of inference methods is the tolerance to certain levels of noise in the experimental data used. this is especially important for methods that capture dynamical properties of the network in order to avoid the problem of over-fitting the data  <cit> . sources of noise include both biological and measurement noise. for methods that discretize data, such as bayesian network or boolean network methods  <cit> , an additional source of noise comes from the necessary discretization of continuous data into categorical data.

several inference methods have one or several of the aforementioned features. some of these methods fall in the category of coarse-grained models based on discrete variables, such as boolean networks, bayesian networks, petri nets, and polynomial dynamical systems  <cit> ; others correspond to fine-grained models based on continuous variables, such as systems of ordinary differential equations, artificial neural networks, hybrid petri nets, and regression methods  <cit>  . however, there is still a need for inference methods that gather all the previously mentioned properties, and for which their mathematical frameworks can be exploited to improve the methods’ performance.

in this paper we present a novel reverse-engineering method that combines all of these relevant features. it uses input that consists of  time courses of experimental measurements, which can include various network perturbations, such as data from knock-out mutants and rnai experiments, and  prior knowledge about the network in the form of directed edges between nodes  or as information about the regulatory logic rules of individual nodes. the output of the algorithm is a family of boolean dynamic models, from which one can extract a directed graph whose edges represent causal interactions between nodes. the boolean dynamic models are identified by an optimization algorithm that searches through the space of boolean dynamic models that approximate the given data and satisfy the constraints imposed by the prior biological information. an important feature of the algorithm is that it uses the expression of boolean functions as polynomials, leading to a model search space that has a rich mathematical structure that can be exploited. this effective representation of dynamic models lends a criterion for measuring model complexity and to select models accordingly. we show that the method is robust to a significant level of noise in the data. additionally we show that the method’s performance on the data set used in  <cit> , compares favorably to that of several other methods. our algorithm incorporates work contained in the first author’s ph.d. thesis  <cit> .

methods
modeling framework
we use the modeling framework of boolean networks, represented as time-discrete, state-discrete dynamical systems. a boolean network on n variables can be viewed as a function

 f=:kn→kn, 

where each coordinate update function fi:kn→k is a boolean function in n variables and k={ <dig> }.

if we use the fact that k supports the algebraic structure of a number system, using addition and multiplication modulo  <dig>  then we can express each boolean function as a polynomial function with binary coefficients, using the translation xandy=x·y, xory=x+y+xy, notx = x+ <dig>  while addition corresponds to the logical exclusive or function xor. since x2 = x in k, each polynomial can be assumed to be square-free, that is, every variable in every term of the polynomial appears with exponent  <dig>  with this reduction, there is in fact a one-to-one correspondence between boolean functions in n variables and square-free polynomials in n variables over k . note that this square-free representation is equivalent to the use of sperner systems for boolean models’ search space reduction in  <cit> . we refer the reader to  <cit>  for an overview on polynomial dynamical systems in biology and the network inference problem.

simulation of dynamics
boolean models can be simulated either synchronously, by applying all coordinate functions at the same time, or asynchronously, with the coordinate functions updated sequentially, in a particular order of the nodes in the network. it is worth noting that in this mathematical framework the steady states of a dynamic model are independent of the update schedule used. however, different update schedules can result in different periodic dynamics  <cit> . while there are examples of biological systems that exhibit synchronous dynamical patterns  <cit> , asynchronous simulations might be able to predict a wider range of biological behaviors. however, the exhaustive computation of asynchronous simulations becomes intractable even for moderately sized biological systems  <cit> . thus, for the purpose of the current work, we have decided to use a synchronous update schedule for model simulation. as we will show, this assumption will also allow us to identify the boolean functions that generate model dynamics.

network inference problem
the primary input to our algorithm is one or more time series of experimental measurements for all the variables associated with the nodes in the network. these can include measurements from network perturbations, such as knock-out mutants and rnai experiments, discretized into binary data. additional input can include prior knowledge about the network in the form of an n×n interaction matrix , where ρij denotes the probability that a causal influence exists from node j to node i.

given a collection of n variables associated with the nodes in the network, let t <dig> …,tμ <dig> be the μ <dig> input time series. for 1≤μ≤μ <dig>  tμ:={t1μ,t2μ,…,tαμμ} represents the μth time series. thus, tjμ is the jth measurement in the μth time series, and consists of a vector of dimension n, with coordinates representing measurements for the individual n variables associated with the n nodes in the network. we assume that the data contains a proportion 0≤ξ< <dig> of noise; that is, a proportion ξ of entries in the time series are assumed to be “flipped” through noise. as a result of noise, or as a result of the data discretization process, the given time series might end up being inconsistent, in the sense that from a given state tiμ the system transitions to two different states at different points in the time courses, thus precluding fitting of the data with a deterministic model. such inconsistencies can be eliminated by breaking the affected time courses at the points of inconsistency. that is, we eliminate all transitions from tiμ . we will assume for the purpose of this paper that the given input time courses are the result of removing all possible inconsistencies.

the network inference problem in our context can then be formulated as follows:

choose a family of boolean dynamical models { f:kn→kn} that: 

 best fit the data, in the following sense. for each candidate f, generate μ <dig> new time series of length αμ by iteratively applying f to the initial time points t1μ of the input time series. then we require that these time series agree with the input time series, except for a fraction ξ of the ++⋯+ time series coordinate entries. to be precise, for 1≤μ≤μ <dig> and 1≤j<αμ, we search for boolean dynamic models satisfying f=tj+1μ except for at most ×ξ time points in which case f=tj+1μ+ <dig> 

 conform to the prior information available about the biological system, given by the matrix .

 contain boolean coordinate functions that are as “simple” as possible, in a well-defined sense.

we emphasize that in , we allow models to disagree with the input data commensurate with the expected noise level. instead, one of the optimization criteria is the goodness-of-fit of a given boolean dynamic model, which measures this deviation. this relaxation is the reason for the method’s robustness to data noise, and it is one feature that sets our algorithm apart from others of this kind. we choose an evolutionary algorithm as our optimization procedure, although other optimization methods could be chosen as well.

an efficient description of the model search space
we derive now a computationally efficient characterization of polynomial functions that fit a time series of a given length. this characterization greatly reduces the space of all polynomials that the algorithm needs to search over.

first observe that finding a dynamic model f = :kn→kn satisfying the condition f=tj+1μ except for at most ×ξ time points, reduces to finding the individual coordinate functions fi:kn→k for i =  <dig> …,n, satisfying the condition:

  fitjμ=tj+ <dig> iμ 

for 1≤μ≤μ <dig>  1≤j<αμ, and 1≤i≤n, except for at most ×ξ time point coordinates.

as previously described in the modeling framework section, each function fi can be expressed as a square-free polynomial in n variables, with coefficients in k. a priori, the search space for fi is the vector space of all such polynomials in n variables. since this space has dimension 2n, the number of square-free monomials in n variables, an exhaustive exploration of the search space quickly becomes intractable. however, each polynomial fi in this space is described by the monomials that appear as summands in fi , and each monomial xa:=x1a1x2a2⋯xnan is characterized by its support, that is, the list of variables that appear with exponent  <dig> in xa. let supp denote the support of the monomial xa and |supp| denote the number of variables in xa, that is, |supp|:=∑i=1nai, which we will refer to as the length of the support. we propose to reduce the search space as follows.

note that each coordinate polynomial function fi has prescribed values at exactly m points, where

  m:=α1-1+α2-1+⋯+αμ0-1=∑j=1μ0αj-μ <dig>  

we call the integer m the total length of the input time series. recall that the floor ⌊r⌋ of a real number r is the largest integer not greater than r. then we define the set  to be the set of all monomials whose support has length at most Φ:=⌊log2⌋, that is,

  ℳ:={xa:|supp|≤Φ}. 

we restrict the search space to polynomials that are linear combinations of monomials in  with boolean coefficients. as a vector space,  has dimension ∑i=0Φni. this quantity also appears in information theory as the number of bit-strings of length n with hamming weight less than or equal to Φ. this expression depends on both n and Φ, thus preventing a direct comparison with 2n. in table  <dig>  we provide a comparison between these two quantities for the case when Φ= <dig>  which corresponds to time courses of total length m between  <dig> and  <dig>  and Φ= <dig> which corresponds to time courses of total length m between  <dig> and  <dig>  the rows of the table are labeled by the variables in the network.


n

the fact that each polynomial function that fits a given set of time series of total length m has a polynomial representation in  follows from a theoretical result in computer algebra. we present a thorough explanation of this fact in additional file  <dig>  however, summed up briefly, this result is based on the observation that if two different polynomials f and g have the same values at each point t in the input time series, that is, f = g for each time series point t, then f can be written as f = g+h, for some polynomial h with h =  <dig> for each time series point t.

furthermore, given a polynomial f and the valuations at each time series point t, we can find polynomials g and h with f = g+h, such that h =  <dig> for each time series point t, and such that g cannot be further decomposed into the sum of two  polynomials g = p+q with q =  <dig> for each time series point t. in  <cit> , babson et al. show that the exponent vectora =  of any monomial xa appearing in any such polynomial g must satisfy

 ∏i=1n≤m. 

for a square-free monomial xa, this criterion translates to 2|supp|≤m, or equivalently, |supp|≤ log <dig>  this justifies the definition of the set  above.

as observed in table  <dig>  the dimension reduction of the search space achieved in this way is significant even for reasonably large n. although the search space might still be too large to admit an exhaustive exploration, this reduction makes the search space more amenable for the application of stochastic optimization algorithms. furthermore, this reduction in the model space is not arbitrary, but is based on a careful analysis of the form of polynomials relevant for interpolating time series of a given length.

inference algorithm
inference of dynamic models as an optimization problem
we separate the binary time series t <dig> …,tμo into two types: wildtype time series for μ= <dig> …,ℓ and, knockt-out mutant/rnai time series for μ=ℓ,…,μo. we formulate the inference problem as an optimization problem with a multi-objective function that measures: 

1) the goodness-of-fit of a boolean dynamic model with respect to the input data.

2) model complexity with respect to the support of the model’s coordinate polynomial functions.

3) consistency with the network topology obtained from the dynamic model with respect to the prior knowledge of the network’s topology.

4) consistency with any existing information about the model’s polynomial structure.

for the solution of this optimization problem we chose an evolutionary computation approach and we developed an evolutionary algorithm. evolutionary algorithms , population-based heuristic optimization algorithms, are known to perform well on under-determined problems and noisy fitness functions  <cit> . accordingly, this type of evolutionary computation approaches are suitable search methods for inferring dynamic model parameters of grns  <cit> . in particular, eas have shown to achieve good solutions by searching a relatively small section of the entire space  <cit> , and have been widely used in genetic data analysis and grn inference .

although there are many different variants of eas, the common underlying idea behind all these methods is the same: given a population of individuals, environmental pressure causes natural selection  which causes an increase in the fitness of the population. given a fitness function to be maximized, a population of candidate solutions is created. based on this fitness, some of the better candidates are chosen to seed the next generation by applying recombination and/or mutation to them. recombination or crossover is an operator applied to two or more selected candidates -the so-called parents- to form new candidates or children. mutation applied to one candidate results in one new candidate. executing recombination and mutation leads to a set of new candidates  that compete, based on their fitness score, for a place in the next generation until a candidate with sufficient quality is found or a previously defined computational limit is reached  <cit> .

in our context, polynomial dynamic models play the role of individuals in the population. each one of these individuals are made of n coordinate polynomial functions. within a given individual, polynomial functions are mutated by changing some of their monomial terms. crossover occurs by assembling a new candidate model from optimal polynomial coordinate functions for each i= <dig> …,n. additionally, to prevent a decrease of the fitness score of a given generation, some of the candidate solutions with better fitness scores are allowed to be directly cloned, that is inherited unchanged, to the next generation.

multi-objective fitness function
before describing our fitness function, it is important to observe that our optimization problem can be divided into n optimization sub-problems : consider a boolean polynomial dynamic model f =  for a given generation in the ea. based on the synchronous update schedule that we have selected for our approach, the state value of a node i at time t is computed as xit:=fi. that is, given the coordinate function fi for a node i to compute its state at a given time t for a given time series μ, it is enough to have the values of the time series μ at time t- <dig>  thus we do not require the other n- <dig> coordinate functions. therefore, the goodness-of-fit of a model f =  can be evaluated one coordinate function at a time. similarly, the other optimization criteria, such as complexity, can be evaluated one coordinate function fi at a time. once each of the coordinate functions fi have been evaluated, they can be assembled to a dynamic model f= via an n-point crossover. this newly assembled model can then be evaluated for all the optimization criteria to estimate its fitness as a mutant or clone for the next generation in the ea.hence, the fitness function for our ea is built as a multi-objective function consisting of the weighted sum of the different fitness criteria for each coordinate function fi and the fitness of the assembled candidate dynamic models f=. we next list the different criteria.

goodness-of-fit
this score measures the ability of a candidate model to fit the time series data. as previously stated, for 1≤μ≤ℓ we let tμ={t1μ,t2μ,…,tαμμ} correspond to the wildtype input time series. consider a candidate model f = . for each initial time point t1μ, we consider the time series generated by iterating f =  for αμ times. we compute the hamming score as:

  hf=∑μ=1ℓdμn×∑μ=1ℓαμ, 

where dμ is the hamming distance between input wild type time series and the input time series generated by f. that is, the total number of bits where the input wildtype time series and the time series generated by the candidate model f differ. hence, the goodness-of-fit score is computed as modelfit=whm, where whm is the weight assigned to the model’s data fit, part of the ea parameters.

now we consider the knock-out mutant and/or rnai time series. for each ℓ+1≤μ≤μo we let tμ={t1μ,t2μ,…,tαμμ} be an input knock-out mutant and/or rnai time series, corresponding to the r-th gene. in this case, all the candidate models will be considered to have the r-th coordinate function fr =  <dig>  that is, for a given candidate model f= we let f∗: =  by setting the rth coordinate function fr =  <dig>  and keeping all the other coordinate functions the same as for the wildtype case. consider the initial time points corresponding to the knockout and/or rnai time series. from these initial time points, we consider the knockout and/or rnai time series generated by iterating f∗ =  for αμ times. for each ℓ+1≤μ≤μo, analogously to equation  <dig>  we compute the hf∗ from comparing the knock-out and/or rnai input time series and those generated by f∗. similarly, we compute modelfit=whm.

goodness-of-fit of coordinate functions
this score measures the ability of a candidate coordinate function fi to fit the ith column of each input time series. in the case of the wildtype time series data, we consider the time series generated by synchronously iterating the coordinate function fiαμ times, starting at the initial time point ti,1μ of the ith column of each input time series. we compute the hamming score as:

  hfi=∑μ=1ℓdiμ∑μ=1ℓαμ, 

where diμ is the hamming distance between the ith columns of the input wildtype time series and the time series generated by fi. thus, the goodness-of-fit of a coordinate function fi is given by polynomialfitfi=whp, where whp is the weight parameter assigned to the goodness-of-fit of coordinate functions. for the knock-out mutant and rnai time series, we proceed analogously to the wildtype case , but considering the model f=, representing the knock-out mutant or rnai experiment on the rth gene . the complexity score for a candidate model is measured as the average of the complexity scores of its coordinate functions. notice that the complexity score in our proposed method is enabled from the algebraic identification of the upper bound for the monomial support. however other complexity criteria such as bayesian information criterion  <cit>  and akaike’s information criterion  <cit> , could be used instead.

prior knowledge of network topology
prior information about the topology of the network can be available from two different sources:  from previous biological knowledge and  from knowledge acquired from the prior use of another inference method, thus applying our method as a “meta-inference method". prior knowledge from these two sources is encoded in the n×n matrices bioprobmatrix and revengprobmatrix, respectively. the entries ρıȷ of either matrix represent the probability of a causal influence from node ȷ to node ı. for a candidate model f, let us consider its adjacency matrix v, in which an entry aıȷ is ‘1’ if xȷ appears in the ıth coordinate function fı and ‘0’ otherwise. for such a matrix, consider the ıth row v = , corresponding to all variables appearing in the ıth coordinate function. let  be the ıth row of the bioprobmatrix, and let

 βıȷ:=1-ρıȷifvȷ=0;ρıȷotherwise. 

thus, the prior biological knowledge score assigned to each coordinate polynomial fı is given by bioscore=1n∑ȷ=1nβıȷ. by extension, the bioscore assigned to a candidate model f is given by

  bioscoref=wb∑ı=1nbioscoren, 

where wb is the weight assigned to the model bioscore in the ea parameters.

analogously, we compute the revengscore to obtain the prior reverse engineering score.

algorithm summary
we summarize the full algorithm as follows: inference of structure and dynamic polynomial models

algorithm  <dig> inference of structure and dynamic polynomial models
RESULTS
validation part 1: assessment of robustness to data noise
inference algorithms using a discrete modeling framework, such as boolean or certain bayesian methods, face an additional challenge: their performance depends on the choice of a data discretization method. thus we separate the effect of data discretization on the method’s performance from that of robustness to data noise. we use a binary data set generated from the published boolean model of a gene regulatory network in  <cit> . we added different levels of noise to the data sets to assess how robust the method is to such data noise and the effect on the dynamics prediction.

the segment polarity gene network: the boolean model in  <cit>  represents a gene regulatory network in drosophila melanogaster responsible for segmentation of the fruit fly body. this boolean model is based on the binary on/off representation of mrna and protein levels of five segment polarity genes. the authors constructed their model based on the known network topology and validated it using published gene expression data.

the expression of the segment polarity genes occurs in stripes that encircle the embryo and are captured in the boolean model as a one-dimensional representation. each stripe consists of  <dig> interconnected cells grouped into  <dig> parasegment primordia in which the genes are expressed in every fourth cell. the authors assumed the parasegments to be identical so that only one parasegment of four cells is considered. the variables of the dynamical system are the segment polarity genes and proteins in each of the four cells. thus, one stripe is represented as a 15×4= <dig> node network which we aim to infer. in additional file  <dig> we have included all the details about the boolean model and its polynomial translation, used in this section.

input data
because we did not assume any prior knowledge about the amount of noise present in each one of the input data sets, we uniformly choose all ea simulations to assume 5% noise.


generation of input time series. we generated  <dig> time series, including wildtype and knock-out mutant data, with a total of  <dig> time points . in additional file  <dig>  we present a detailed description of the polynomial model used and the simulation data.

we added ξ= <dig> . <dig> . <dig> percent noise to the input data by randomly flipping ξ bits, respectively. note that, since data discretization may filter out some amount of noise in the experimental data, adding noise to the already discretized data probably results in the addition of more noise than if we would have added the noise to the continuous data and then discretized it.

prior knowledge about the network topology
a) prior biological information. we included only the  <dig> biologically obvious molecular dependencies, that is, from each one of the  <dig> genes in the network to their corresponding protein products.

b) prior use of an inference method. using our software as a inference method, independently of prior biological information, we input information about the network topology obtained by first applying the inference method from jarrah et al. in  <cit>  to the available data with the added noise. the method in  <cit>  infers network topology through exact data interpolation within the polynomial dynamical systems framework.

generation of parameter sets for the ea algorithm
we assess the robustness to noise under a broad sampling of parameter sets, rather than only presenting the best results after parameter tuning. to create a good sampling of multi-variable parameter sets while reducing the number of runs necessary, we used a latin hypercube sampling  method, as introduced in  <cit> . from the lhs, we generated  <dig> different sets of parameters. in the additional file  <dig>  the reader can access the information on the ranges of parameter values that the lhs protocol generated.

inference of static network
a key issue, when applying heuristic search algorithms, is their dependence on the choice of various parameters. for ea algorithms, the number of parameters that can be changed to optimize the method’s performance is often quite large. furthermore, for inference methods that utilize ea strategies , typically a prior parameter tuning is done to evaluate overall performance based only on the set of parameters for which the ea shows the best results. we considered it important, however, to reveal a broader view of the algorithm’s performance under different choices of parameter values and identify relevant parameters to use in the evaluation of robustness to noise. as indicated before, we used an lhs method to create a broad sampling of multi-variable parameter sets while reducing the number of runs necessary.

we generated triplicates for each one of the ea runs, for a total of  <dig> runs for each one of  <dig> noise levels. in figure  <dig> we show the performance of our method considering all the different sets of parameters, and present the ranges -lowest to highest- of obtained values for false positive rate  and recall or true positive rate . we observe that even for the ranges of values with the poorest performance across all the parameter sets and the different levels of noise, the ratio between fpr and recall is always above 1; that is, according to the receiver operating characteristic  space, these pairs of values fall at all times above the line of no discrimination, showing good performance of the algorithm over a wide range of parameters  <cit> . additionally, we considered the parameter set that showed the highest fitness scores. in figure  <dig> we show the pairs of fpr and recall values for the three levels of noise. in figure  <dig> we show a comparison of the inferred network topologies under different levels of data noise based on the best results obtained across the different  <dig> sets of parameters. notice that these inferred networks are not the best solutions obtained after a tuning of parameters but simply the best results obtained from the different sets of parameters obtained by the lhs sampling method.

as mentioned earlier, we assumed no prior knowledge in terms of the amount of noise present in each one of the input data sets; thus, we uniformly choose all ea simulations to disagree with up to 5% of the data. in that sense, since for the input data set containing 0% and 1% of noise, the polynomial models are allowed to disagree with up to 5% of the bits of the input, it is not surprising that rather than being detrimental, the ea’s performance slightly improves when considering data sets with some level of noise.

inference of dynamic model
along with the network topology, by design, our method infers dynamic models. thus we tested the method’s ability to predict dynamic patterns of the network across the different levels of noise.

we considered the  <dig> steady states retrieved in albert and othmer’s model  <cit> ,  <dig> of which correspond to patterns that have been observed experimentally. we selected the dynamic model from the output of the best performing set of parameters found in the previous section. in table  <dig> we present the steady states retrieved by our method under the different levels of noise. we observe that across the different levels of noise, at least 50% of the expected steady states were always retrieved by the method.

%
%
%
in the first column, the  <dig> steady states obtained after the simulation of the boolean model in  <cit>  for all the input initializations. in the next columns the steady states retrieved by our method under the different levels of noise are shown.

validation part 2: benchmarking with irma synthetic network
to test the performance of our method on expression profiles, we use the biological system in  <cit> . this system is a synthetic network within the yeast saccharomyces cerevisiae, denoted irma, for “in vivo benchmarking of reverse-engineering and modeling approaches". the network was constructed from five genes: cbf <dig>  gal <dig>  swi <dig>  ash <dig> and gal <dig>  galactose activates the gal1- <dig> promoter, cloned upstream of a swi <dig> mutant in the network, and is able to activate the transcription of all five network genes. the endogenous transcription factors were deleted from the organism to constrict the impact of external factors. the authors measured both time series and steady-state expression levels using two gene profiles described as switch on and switch off, obtained by shifting the growing cells from glucose to galactose medium and from galactose to glucose medium, respectively.

input data

input time series and their discretization. the translation from continuous data to their discrete equivalent is a crucial step in preserving the variable dependencies and thus has a significant impact on the performance of network inference algorithms  <cit> . although it is possible to manually chose an appropriate discretization for the data given the size of the network, we followed a systematic procedure to find the most appropriate discretization. we first compared three discretization methods, quantile , interval  and ssd, a graph-theoretic method in  <cit> , to discretize the switch on and switch off time courses into binary states. although none of the discretization methods was able to reproduce every observed pattern, we selected the quantile binary discretization q <dig> as the method that best captures some important dynamical features in the data. in additional file  <dig>  we have included the comparative study of the three discretization methods with their plots.


prior knowledge of the network topology. in the specific scenario of the yeast synthetic network, we observed that across the different discretization methods used, we had issues with loss of some dynamic patterns observed in the continuous data. to counteract the data limitation due to the 2-state data discretization, we used our inference method as a meta-algorithm, that is, we input a previously inferred network topology from the dynamic bayesian method banjo  <cit> . first, we performed a comparative study across different data discretization methods beyond binary, considering also  <dig>   <dig> and  <dig> discrete variable states. based on banjo’s scorings across the different data discretization methods, the highest scores are obtained when considering the quantile ternary  discretized data. in fact, selecting this more adequate discretization  improves banjo’s performance from the results originally reported by cantone et al. in  <cit> , from  to  for the switch on time series and from  to  for the switch off time series. therefore, using this more optimal ternary discretization q <dig>  we input the banjo inferred network as prior knowledge about the topology of the network.

inference of irma’s static network

an objective benchmarking procedure. possible bias can occur when comparing inference methods: 1) only methods that are “alike” to the method of interest are used for comparison purposes and/or 2) a lack of experience with the methods or software used for benchmarking, prevent an optimal use of such methods. to avoid these two biases, we decided to benchmark our method with a broad spectrum of inference methods from fundamentally different modeling frameworks  and to exclusively use the best results reported by the authors in their corresponding publications of their own methods. with that in mind, we benchmarked our method with the broad range of inference methods proposed in  <cit>  and  <cit> . they all used the irma network and its time series data to benchmark their methods with banjo and tsni  <cit> , as reported by cantone et al.

in figure  <dig>  we show first a comparison between the true irma network and the networks inferred by our algorithm for both the switch on and off data. we observe for the switch on time series data that seven edges are correctly inferred, one edge has a wrong direction, one is a false positive , and only one edge is missing. as noted in  <cit> , the switch off data are a challenge due to a lack of a significant stimulus compared to the switch on data. in this case, our method was able to infer  <dig> edges correctly, one edge has the wrong direction,  <dig> are false positives, and  <dig> edges are missing.

in table  <dig> we have also summarized the results obtained with our method for both irma’s switch on and switch off time series and the comparison with the best results reported in each one of the aforementioned publications. we observe that in the switch on data, our algorithm obtains better or similar ppv in comparison with the best results across all the other methods, except for the results reported in  <cit> , where, while having a high ppv, only  <dig> out of  <dig> edges are inferred. additionally, for this same data set, the recall values of our method outperformed those of any of the other inference methods.

et al.
et al.
in a) the results from our algorithm; in b) the results in  <cit>  which outperforms the standard aracne method reported in  <cit> ; in c) tsni as reported in  <cit> ; in d) the results reported in  <cit>  after using time series and product synthesis rates and finally, in e) the results reported in  <cit> .

one important aspect to mention is with respect to the level of noise we assume in the data. detailed error models have been proposed to attempt to quantify the uncertainty in gene expression data  and the impact of noise on the outcome of statistical analysis of microarray data  <cit> . however, in our case, in the absence of replicate data, we could not perform such an analysis. thus, analogous to the case of the segment polarity gene network, we selected ea simulations assuming the data sets to contain 5% noise.

inference of irma’s dynamic network model
one of the goals of modeling gene regulatory networks is to obtain a predictive model. to assess the prediction capabilities of our method, we used the switch on time series as input data and we tried to predict the expression profiles in the switch off experiment time series.

in figure  <dig> we represent the predicted dynamic patterns of each one of the five genes for the switch off data in irma and from our inferred dynamic model. we observe that the inferred dynamic model is capable of reproducing fully the dynamic behavior for swi <dig> and ash <dig>  the behavior of gal <dig>  which is expected to switch off, shows no expression at all times in our predicted model, therefore predicting the time series except for the initial time point. similarly, for gal <dig> we observe that the expected degradation behavior of the switch off time series is partly reproduced but faster than the actual irma time series.

because the aforementioned last two variables are representing gal <dig> and gal <dig> mrna levels when the cell’s environment is shifted from galactose to glucose medium, one would expect to observe a degradation of their mrna levels. however, as noted by the authors in  <cit> , the transient increase observed in the mrna levels at the first time step of gal <dig> and gal <dig> is attenuated by an effect unrelated to their transcriptional regulation. this implies that the genes responsible for the regulation of such galactose-related variables will lack this dynamic information and, thus, it is natural to expect such behavior not to be predicted by any method based solely on mrna data. the only variable that our method could not capture was cbf <dig> 

discussion
efficient inclusion of prior knowledge
as mentioned in the introductory section, the effective use of prior knowledge is crucial to overcome the lack of quantity or quality of data. to illustrate this, consider again the irma network as an example. as noted in the previous section, the switch off data are a challenge due to a lack of significant stimulus compared to the switch on data. this scenario is ideal to highlight that, with a lack of sufficient information provided by the observational data, the performance of inference methods can overcome the input data limitations by the additional consideration of prior knowledge about the topology of the network. to show this, we set up the next experiment: with the switch off data as input we ran our method using as prior knowledge different amounts of information about the network topology. we created  <dig> networks with prior information about the network topology by considering 25%,50%,75% and 100% of randomly chosen true positives in the network. our objective then is to investigate whether successively adding more prior knowledge about the network topology will also show an incremental improvement in the method’s performance. accordingly, in table  <dig>  we observe the progressive improvement of our inference method after successive addition of prior information about the toplogy of the network. after the addition of just 25% of the edges of the network as a prior, our method outperforms tsni, td aracne from  <cit>  and the recall from  <cit> . after the addition of 75% of the network’s structure as prior, our method also outperforms the method described in  <cit> .

we present ppv and recall values for the assessment of our method on the irma’s switch off network with successive addition of prior information about the network topology.

in this small example it is possible to highlight the benefit acquired from adding just partial information about the network. however, reliable sources of information are not necessarily easy to retrieve. in our method we have proposed two main sources of such prior information: 1) prior biological knowledge of the network’s topology and, 2) prior information about the network obtained from other inference methods applied to available data . the latter source of information is particularly useful when different types of data are available so that ad hoc methods can be applied to each type of data.

it is possible to imagine other scenarios in which other kinds of prior biological knowledge can be used with our method. for instance, suppose that for a given gene i, the maximum number of binding sites for activators/repressors is known. then the upper bound Φ for the maximum monomial support of all the variables  in the network can be refined for the polynomial function fi, describing the dynamic patterns of gene i. first, an unbiased initial run of the ea algorithm can be done, with the Φ upper bound from the input data. from these runs, one might identify the Φ most prevalent variables in fi, i.e., the more likely activators/repressors of the gene in question. with these Φ most prevalent variables, the ith row in the bioprobmatrix can be fixed with 1′s in the corresponding columns of these variables and the rest fixed to  <dig>  in order to find the most optimal polynomial models. in the case that the number of most prevalent variables is less than Φ, several runs of the ea can be done; in each one of these runs, for the ith row of the bioprobmatrix, one can fix to  <dig> the values for these variables while considering combinations of the other variables to be fixed to  <dig> and the rest of the variables fixed to  <dig>  until we find best scored polynomial models.

CONCLUSIONS
the development of algorithms for the inference of molecular networks from experimental data has received much attention in recent years, and new methods are published regularly. most of these methods focus on the inference of the network topology and cannot use information about the temporal development of the network. additionally, there is still a need for methods that can take different types of prior information about the network. finally, well justified search space reductions are needed to improve the performance of inference methods.

the method we present in this paper combines several useful features:  it effectively uses time series data;  it takes into account prior information about the network;  it infers dynamic models so that it can predict long-term dynamic behavior of the network;  it is robust to noise in the input data; and,  it uses theoretical tools from computer algebra and a local search algorithm to efficiently explore the model search space and to optimize between model fit and model complexity.

our method compares in general favorably with other inference methods that also utilize time series data. as we have shown here, a good strategy for increased performance is the introduction of an effective search space reduction and the combination of different inference methods.

lastly, although our method is within the pds modeling framework, our introduced description of the search space can be applied as well to other boolean modeling approaches. we expect this description to be useful for boolean methods proposed in the future or to improve the performance of existing ones.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
pvl developed the design of the algorithm and helped with its encoding, performed the robustness to noise analysis and performed the benchmarking analysis. aj participated in the design of the algorithm and supported pvl with the benchmarking analysis. ldg participated in the design of the algorithm and performed the comparison of dimensionality of the classes of boolean functions. jm participated in the design of the inference algorithm, helped with its encoding and supported pvl in the robustness to noise analysis of the algorithm. rl participated in the design of the inference algorithm, provided funding and directed the project. all authors read, edited and approved the final manuscript.

supplementary material
additional file 1
algebraic description of the model search space.

click here for file

 additional file 2
segment polarity gene network.

click here for file

 additional file 3
contains the comparison of discretization methods for the switch on and switch off data for the irma network.

click here for file

 acknowledgements
the authors would like to thank pedro mendes, brandilyn stigler and diogo camacho for their insights throughout the project. we thank andrei zinovyev and thibauld favre for reading the written materials and providing useful feedback. finally we thank the anonymous reviewers for all the helpful comments on the manuscript.

funding
this work was partially supported by a grant to r.l. from the national institute for general medical sciences .
