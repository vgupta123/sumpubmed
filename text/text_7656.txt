BACKGROUND
in neuroscience it is important to accurately trace, or reconstruct, a neuron’s 3d morphology. the current neuron tracing methods can be described, according to the necessary manual input, as being manual, semi-automatic or fully automatic. neurolucida , a largely manual technique, uses straight line-segments to connect manually determined neuron skeleton locations drawn from the 2d cross-sectional views of a 3d image stack. in contrast, semi-automatic methods need some prior information, such as the termini of a neuron, for the automated process to find the neuron skeleton. for example, the semi-automatic vaa3d-neuron  <dig>  system   <cit>  has been used in systematical and large-scale reconstructions of single neurons/neurite-tracts from mouse and fruitfly  <cit> .

however, for very complicated neuron structures and/or massive amounts of image data, the semi-automatic methods are still time-consuming. thus, a fully automated tracing method is currently highly desired. early fully automated methods used image thinning to extract skeletons from binary images  <cit> .

these methods iteratively remove voxels from the segmented foregroun region surface of an image. in addition, neuron-tracing approaches based on pattern recognition were also developed . however, in cases of low image quality, the tracing accuracy may be greatly compromised. the model-based approaches, such as those that use a 3d line, sphere or cylinder for identifying and tracing the morphological structures of neurons, are relatively more successful . these methods can also be guided using both global prior information and local salient image features . while the basis of most existing methods is to grow a neuron structure from a predefined or automatically selected “seed” location, the all-path pruning method  <cit>  that iteratively removes the redundant structural elements was recently proposed as a powerful alternative.

despite such a large number of proposed neuron tracing algorithms , few can automatically trace complicated neuron structures set in noise-contaminated microscopic images  and ). here we report a new method, named df-tracing , which meets this challenge. we tested df-tracing with very elaborate images of dragonfly neurons. without any human intervention, df-tracing produced a good reconstruction  and ), comparable in quality to that of human manual work.

method
a reconstructed neuron  and ) has a tree-like structure and can be viewed as the aggregation of one or more neurite segments. each segment is a curvilinear structure similar to figure  <dig>  when a neuron has multiple segments, they are joined at branching points. the neuron structure can thus be described with a swc format  <cit> , where there are a number of reconstruction nodes and edges. each node stands for a 3d spatial location  on the neuron’s skeleton. each edge links a node to its parent . the cross-sectional diameter of the neuron at the location of each node is also calculated and included in swc format. therefore, to produce a neuron reconstruction, two key components are  determination of the skeleton, i.e. ordered sequence of reconstruction nodes, of this neuron, and  estimation of the diameters at each node’s location.

an intuitive way to trace a neuron is to start from a predefined or automatically computed location, called “seed”, to grow the neuron morphology until it covers all visible signals in the image. if the image foreground region that corresponds to a neuron can be well extracted, the problem reduces to determine the complete set of reconstruction nodes, i.e. skeletonize the neuron, using the foreground mask of the image, followed by estimating the cross-sectional diameter of all reconstruction nodes.

we follow this intuition and design the following three-stage neuron-tracing algorithm:

 enhance line-like structures in the image, followed by adaptive thresholding to remove non-neuron background and noise. 

 skeletonize the neuron using coupled distance fields. 

 assemble multiple spatially disconnected pieces of the traced neuron into the final result. 

preprocessing: extraction of neuron signal
since a neuron segment looks like a line or a tube , anisotropic filtering of image noise can enhance the neuron signal in an image. we use nonlinear anisotropic filtering for signal enhancement, followed by automated thresholding.

the key idea of anisotropic filtering is to calculate image features that signify the orientation preference of local image areas. we follow the classic hessian matrix based method, which detects the curvilinear structures in images  <cit> . let u stand for an image, where x, y, z are the spatial coordinates. we use ∇u to denote the image intensity gradient. a filtered image pixel will take the following value v,

  v=exp−∇u2fu. 

the function f is defined using the hessian matrix of each image pixel u,h=uxxuxyuxzuyxuyyuyzuzxuzyuzz, where h is indeed symmetric. of note, the hessian method has been well used in medical image computing, especially vessel enhancement and segmentation .

to do so, we compute the eigenvalues of h, denoted as λ <dig>  λ <dig>  and λ <dig> . interestingly, when the brighter pixel intensity indicates the stronger signal and a line-look structure is present at the current pixel location, there is λ <dig> ≈  <dig> and λ <dig> >> {λ <dig>  λ3}  <cit> . therefore, we explicitly detect if such conditions will be met for each pixel, and define the following function f.

  fu={∑i3=1aiλikiλ1≈ <dig> λ1≫λ <dig> λ1≫λ30otherwise 

where αi  are pre-defined coefficients , ki=exp-λi2/∑i3=1λi <dig> 

after signal enhancement, extracting the neurite foreground using global thresholding is straightforward. we determine the threshold with the following iterative process. first, the average image intensity is taken as a candidate threshold. we use this candidate threshold to divide the image into two portions: pixels with higher, or lower intensity. we then calculate the average of the two mean intensity values of these two portions and use it as a new candidate threshold. this process is iterated until the candidate threshold value no longer changes. this converging threshold is used as the final global threshold: any image pixel with intensity higher than this threshold is part of the so called “image foreground”, which is assumed to contain the neuron signal.

lastly, since the 3d-extracted image foreground could contain multiple neurite areas and noise, neuron reconstruction is carried out in individual areas, which are “stitched” together via post-processing. discarding the very small pieces  removes the noise still present in the image foreground.

neuron tracing using coupled distance fields
figure  <dig> shows that the skeleton of a neuron segment is essentially the medial axis of this segment. how can the medial axis be recovered? possibly the simplest way is image thinning, which unfortunately has two well-known problems:  sensitivity to orientation of the image region of interest, and  unnecessary forks of the skeleton at the ends of the image region. another intuitive approach is to use tube fitting  or a rolling ball fitting. below, we present a simple method that works robustly without a parameter.

distance transform of an image region r with respect to another image region t is defined as for each image pixel in r, replace its intensity using the shortest distance to t. typically t is selected as the image background, but it can also be selected as any specific image pixel. we have the following observation of figure  <dig> 

• in the distance transform of a neuron segment with respect to an arbitrarily selected seed location, s, at a tip point of the neuron segment, the distance-transformed pixel intensity has a larger value than those of the nearby foreground pixels. in another word, any tip/terminal point in a neuron structure will have a local maximum on the boundary pixels in this distance field.

• in the distance transform of a neuron segment to the image background, the boundary pixels will have value  <dig> and the skeleton points will form a ridge of local maximal values, compared to all other image pixel locations that are orthogonal to the tangent direction of the skeleton. extraction of the ridge will skeletonize the neuron segment.

• assume we have a rolling ball that is pushed forward by these two coupled distance “force” fields. it can be seen that this ball will move toward the skeleton from any starting location and then along the ridge curve. following this trajectory we can extract the neuron skeleton quickly. for this reason, in figure  <dig> we call these two force fields “thrust”  and “pressure”  to the background) fields, respectively.

• multiple traced neuron segments can be merged at their convergence point to reconstruct the tree-like structure of a neuron.

based on these observations, we have designed the following df-tracing algorithm:

 detect neuron region in 3d using method in  <dig> . multiple spatially non-connected neuron regions may be produced.

 for each neuron region r, find the set of boundary pixels b, which is defined the set of pixels having at least one neighboring pixel  as the background.

 arbitrarily select a seed location, s, from the boundary pixel set b.

 compute both the thrust and pressure distance fields with respect to s and b, using the entire image.

 in the thrust field, detect the set of all local maxima locations, m.

 for each point t ∈ m, set an initially empty skeleton c to {t}. denote the last added skeleton point as p .

 denote π = r ∩ Ω . for all pixels q ∈ π, find q* that has the largest pressure field value.

 if q* also has a lower thrust field value  than p, then add q* to the skeleton set.

 assign q* to p, and repeat steps  <dig> and  <dig> until the seed location s is met. this completes the skeleton of a neuron segment c.

 merge the common portion of multiple skeletons.

 use the pressure field value of skeleton points as the respective values for the radius estimation.

 assemble multiple neurite reconstructions for all neuron regions using the post-processing method in  <dig> .

in its implementation, our df-tracing algorithm can be further optimized. indeed, steps 6- <dig> can be parallelized. instead of finding the complete skeleton for each terminal point t ∈ m sequentially, we can grow every skeleton one step at a time in parallel. a skeleton stops growing when either the seed location or any other skeleton pixel location has been reached. this process iterates until all skeletons stop growing. the parallelized algorithm will also avoid step  <dig>  i.e. merging common portions of skeletons. in addition, to save computational time when calculating the distance fields, we use the city block distance  <cit>  instead of the euclidean distance.

post-processing: produce the complete reconstruction
the neuron-tracing algorithm in  <dig>  can return a tree-like structure for a single 3d connected neuron region. in case that the neuron foreground extraction  produces multiple spatial disconnected neuron regions, we will have multiple neuron trees. often these pieces need to be assembled into a full reconstruction. since a gap between two disconnected neuron regions is typically small; only the nearby pieces with a separation smaller than two times the radius of the nearest nodes are connected. then, an arbitrarily selected “root” location  is used to sort the order  of all neuron reconstruction nodes. finally, pruning the very short branches whose lengths are less than two pixels completes the reconstruction.

pros and cons of df-tracing, and comparison to other methods
df-tracing is an efficient, deterministic, and essentially parameter-free method . compared to many previous neuron-tracing methods, this new method avoids the complication introduced by the previous need to select parameters. in addition, df-tracing is a local search method, similar to the major body of existing neuron-tracing techniques. while local search cannot guarantee the global correctness of the final reconstruction, compared to those use the global guiding information , df-tracing has the advantage that it uses a smaller amount of computer memory. moreover, we note that the termini produced in the thrust field  could be used as global guiding prior information for the vaa3d-neuron system. in that sense, the steps 6- <dig> in df-tracing is basically equivalent to the shortest path algorithm in the graph-augmented deformable model  <cit> . however, df-tracing does not need to literally produce the graph of image pixels and thus uses less computer memory.

df-tracing has several caveats that deserve further improvement. first, it is based on distance transform, which may be sensitive to neuron boundary and also anisotropic neuron structure in 3d images. this can be refined in the future by  replacing distance transform with a more robust statistical test method, similar to the diameter estimation method used in vaa3d-neuron and  smoothing the contour/edge of the extracted image foreground to make the distance transform more robust to image noise. second, the post-processing of df-tracing can be further improved by adding machine learning methods . third, the preprocessing step can be further improved using a multi-scale anisotropic filtering approach  <cit> .

RESULTS
to assess the df-tracing method, we consider several datasets, especially one consisting of 3d confocal images of dragonfly neurons , which have very complicated neuron arborization patterns, heavy noise and uneven image background  and ). we also tested df-tracing using neuron images from other organisms, such as the fruit fly . we compared df-tracing with existing automatic approaches, especially neuronstudio  <cit>  and itube  <cit> , and the semi-automatic approach vaa3d-neuron  <dig>  .

we tested the neuron-tracing algorithm on 3d confocal image stacks of neurons in dragonfly  and drosophila  competition .

neuron signal enhancement and neuron tracing
our dragonfly image stacks are noisy and have low contrast  and , thus they are good test cases to examine the neuron signal enhancement method in  <dig> . we added poisson noise to the original image and compared the results to gaussian-filter based denoising. as shown in figure  <dig>  our anisotropic filtering method is able to produce much better peak signal-to-noise ratio  . visually, our method also preserves and enhances the neurite signal significantly.

we then used df-tracing to trace the neuron in figure  <dig> . after filtering, there are many disconnected neuron regions ). df-tracing successfully traced all individual regions and merged the final result . the final tracing result faithfully replicates the original neuron morphology. a few small branches are missing ), which are due to the low image quality in the respective image areas. in summary, figure  <dig> demonstrates that both the signal enhancement and tracing modules in the df-tracing algorithm yield a high performance.

neuron tracing: comparison with other methods
we compared df-tracing to the following three neuron-tracing programs, which are publicly available and have been used to produce several recent significant results in neuroscience.

 vaa3d-neuron  <dig>  semi-automatic tracing ;

 neuronstudio automatic tracing ;

 itube automatic tracing  <cit> ;

to compare the key tracing modules of different methods, we used one confocal image of fruitfly olfactory projection neuron, which has a very high signal-to-noise ratio and is also used in several previous studies . we binarized this image for testing.

we also compared the tracing performance of these methods for complicated neuron morphology using the dragonfly neurons. due to the complexity of the neuron structure, it is very difficult to manually determine the end points of neurons within a day, thus it is impractical to directly use vaa3d-neuron  <dig>  for these dragonfly neurons. figures  <dig> and  <dig> show the tracing results produced by both neuronstudio and itube. both methods missed a number of branches, whereas df-tracing reasonably recaptured the neurons’ morphology.

neuron tracing: quantitative analysis
figure  <dig> compares the results between tracing methods. with vaa3d-neuron, we manually selected all end-points of this neuron and inspected the results to produce the “ground truth” for evaluation ). we selected a total of  <dig> points. it is apparent that the neuronstudio result misses many branches ). the itube result includes most branches, but still misses a few, especially the highly curved structures ). df-tracing produced the same result as the ground truth version ). table  <dig> summarizes the comparison quantitatively. it is clear that the df-tracing result is the best among these methods as all branches were correctly traced.

we also compared the tracing results for a non-binary confocal image. we chose a local region of the dragonfly neuron ). we also selected all end-point  of this neuron and inspected the results to “ground truth” for evaluation ). the neuronstudio and itube results miss many branches  and ). df-tracing produced the same result as the ground truth version ). table  <dig> summarizes the comparison quantitatively. there was also clear that the df-tracing result produced the best performance among these methods, as most branches were correctly traced.

with regards to running time for tracing, vaa3d-neuron  <dig>  is still faster than the new df methods, although it requires some human-interaction time, with an execution time of around 10 seconds for the figure  <dig> on an intel q <dig> processor . the tracing time for figure  <dig> is around 22 seconds. table  <dig> summarizes the comparison time of different methods. it is clear that the time of df-tracing is currently the slowest of all automatic methods, but its accuracy is the best. however, it should be noted that the operations of df-tracing can be parallelized, and thus in a future implementation we hope to accelerate the speed by orders of magnitude through the use of multi-core processors and graphics processing units .

neuron tracing: robustness
we tested the robustness of df-tracing. we added gaussian white noise of mean  <dig> and different variance v to the image in figure  <dig>  where v =  <dig> ,  <dig> ,  <dig>  and  <dig>  respectively. in this way, multiple reconstruction results were produced as shown in figure  <dig>  we computed the pair-wise spatial distance  score of these reconstructions, as defined in  <cit> . the average sds is  <dig>  pixel, very close to  <dig> 

we also tested the robustness of df-tracing for a non-binary confocal image. we added gaussian white noise of mean  <dig> and different variance v to the image in figure  <dig>  where v =  <dig> ,  <dig> ,  <dig>  and  <dig>  respectively. in this way, multiple reconstruction results were produced. as shown in figure  <dig>  the test image contains various levels of noise. for example, when v =  <dig> , most signals of the image have been contaminated, yet we can trace major neuron branching in the remaining visible image regions. we computed the pair-wise sd score of these reconstructions and the average of sds is  <dig>  pixel. these expe-riments demonstrate that our method can produce consistent and robust reconstructions.

automatic tracing of complicated morphology of many neurons
in figure  <dig>  we tested the performance of df-tracing on  <dig> dragonfly neurons  that have various levels of complexity and background noises. df-tracing reconstructed the morphology within a day on a macbook pro laptop. fully manual tracing of same set of data would need at least tens of days. the biologist  in this study visually inspected all results and found all major neuron trunks and branches have been correctly traced. of note, the complexity of morphology and high noise level make it very hard to produce faithful manual tracing, thus df-tracing is evidently a meaningful solution to this data set.

CONCLUSIONS
we have developed a automatic neuron tracing method, df-tracing, that outperformed several previous automatic and semi-automatic methods in a very challenging set of dragonfly neurons with complex morphology and high noise levels. this method is efficient and essentially parameter-free. df-tracing has application potential in large-scale neuron reconstruction and anatomy projects.

competing interests
there are no competing interests.

authors’ contributions
hp conceived and supervised the study; jy designed algorithms; jy and hp wrote program and performed data analysis; pgb assisted in data analysis; all authors participated in the preparation of this manuscript. all authors read and approved the final manuscript.

