BACKGROUND
the ability to rapidly map millions of oligonucleotide fragments to a reference genome is crucial to many high throughput genomic technologies. for example, affymetrix, nimblegen, and agilent have recently developed oligonucleotide arrays to tile all the non-repetitive genomic sequences of complex eukaryotic genomes. since the arrays were usually designed based on an older genome assembly, it is important to remap all the probes to the newest genome assembly or transcriptome annotation during data analysis  <cit> , under the assumption that the current genome and transcriptome are more precise than the earlier ones. it is not uncommon for a probe to map to multiple locations in the genome. as a result, the probe could give rise to unexpected behaviour if information on its genome copy number is unknown or ignored. other examples are the next-generation sequencing approaches to annotate novel transcripts  <cit>  and regulatory elements  <cit> . in these applications, millions of short oligonucleotide fragments are generated and mapped to a reference genome to identify the transcript or cis-element clusters.

the current algorithms available for fast sequence similarity search such as blast  <cit> , megablast  <cit> , blat  <cit>  and mummer  <cit>  were not specifically designed for mapping millions of query sequences. as a result, using such algorithms often take very long time, even on computer clusters with fast processors and big memory. for example, in the recent microarray quality control project  <cit> , it took approximately two days to map the half a million probes on the affymetrix u <dig> expression microarray to the refseq mrna database of approximately  <dig> mb size on a beowulf cluster with  <dig> amd opteron dual processor nodes. this translates into inhibitive time and resources required to map the  <dig> million probes on affymetrix genome tiling microarrays to complete mammalian genomes.

we propose an intuitive and efficient method xman  for the rapid mapping of millions of query oligonucleotide fragments to the reference genome of any given length. xman differs significantly from existing algorithms. first, instead of indexing the reference genome which is memory expensive, xman transforms all the query sequences into integers and stores them in ram as a hash table. secondly, when scanning through a genome of any size for query mapping, xman hinges on bit shifting operation over sliding windows to boost its search speed. in this paper, we will explain xman's underlying algorithm, compare its performance with other methods, and discuss its application in tiling microarray data analysis.

RESULTS
tiling microarray probes remapping
tiling microarrays have probes that cover essentially the entire non-redundant genome in an unbiased fashion. such arrays have diverse applications, including chromatin-immunoprecipitation coupled with dna microarray analysis , comparative genome hybridization, empirical detection of novel transcripts and polymorphism discovery  <cit> . the average nucleotides spacing between centres of neighbouring probes defines the tiling ‘resolution’. there are several tiling array platforms with different probe length, resolution, and manufacturing characteristics. we focus our study on affymetrix tiling arrays since they have the highest probe density, with approximate  <dig> million 25-mer probes covering the non-repetitive human genome at  <dig> bp resolution. the sheer amount of raw data generated on these arrays poses challenges for data analysis.

despite extensive efforts to design statistical algorithms to analyze affymetrix tiling microarray  <cit> , potential probe mapping problems exist and might have serious downstream consequences. early assessments  <cit>  on affymetrix expression arrays revealed that remapping probe sets to the newest genome could create as much as 50% discrepancy in predicted differentially expressed genes, regardless of the analysis methods used. therefore, it is crucial to remap all the tiling array probes to the current genome to ensure more precise downstream analyses. furthermore, one primary objective in microarray analysis is to minimize probe cross-hybridization. most tiling microarrays are designed based on repeat-masked genome, which still contains many repetitive elements including tandem repeats  <cit>  with period longer than  <dig> bp and segmental duplications  <cit> . affymetrix tiling probe selection operates in a local fashion, which does not check whether a probe matches elsewhere in the whole genome . it does map all the probes to the genome afterwards, although only to the repeat-masked genome which could be problematic. this approach also sometimes maps the same probe to multiple locations in a short genomic region. when calculation on the region is performed assuming all the probe measures are independent, this mapping is likely to inflate the p-value of the region and create a false positive. these problems could be potentially addressed by taking into account each probe's copy number  <cit>  and filtering out repetitive probes  <cit>  in the analysis.

affymetrix human tiling  <dig>  arrays were designed based on build ncbiv <dig> of the human genome, and we downloaded the affymetrix probe mapping  files from . we used xman to remap the ~ <dig> million probes to build ncbiv <dig> of the human genome, in both watson and creek strands without repeat-masking . xman stores the number of times a probe's 25-mer sequence maps to the genome, so as to aid probe cross-hybridization estimation. the whole process took less than six hours on an amd opteron single-cpu linux computer, including importing probe sequences into hash table, scanning the genome, and writing the result bpmap file. there are a total of  <dig> , <dig> unique 25-mers on the whole human tiling microarrays, among which  <dig>  have been synthesized on the arrays multiple times, resulting in a total of  <dig> , <dig> array spots . an unexpected observation is that  <dig>   probes no longer maps to the ncbiv <dig> genome, thereby should be excluded from downstream analysis. another surprise is that although the tiling probes are selected from the ‘repeat-masked’ genome,  <dig> , <dig>  of the probes have multiple genomic copies . for example, one probe with sequence tcggcctcccaaagtgctgggatta, which was designed to interrogate a non-repetitive sequence on chromosome  <dig>  mapped to  <dig>  locations in the genome. it is worth noting that a typical transcription factor only binds less than 1% of the genome. thus, the ~3% probes with multiple genome copies could bring substantial influence to a chip-chip analysis.

table head line:

#uniqseq: number of unique 25-mer in the original bpmap file

#seq.mentries: number of 25-mer with multiple spots in the array

#queryentries: number of array spots in the original bpmap file

#seq.mgenomematches: number of 25-mer with multiple genomic copies

#seq.nogenomematch: number of 25-mer with no match in the genome

#totalentries: number of total entries in the xman mapping

athe original affymetrix probe mapping is from the ncbiv <dig> human genome. the new xman probe mapping is based on ncbiv <dig> human genome.

bthe original affymetrix probe mapping is from the ncbiv <dig> human genome. the new xman probe mapping is based on the ncbiv <dig> human genome.

cthe original affymetrix probe mapping is from the ncbiv <dig> mouse genome. the new xman probe mapping is based on the ncbiv <dig> mouse genome.

dboth the original affymetrix probe mapping and xman probe mapping are based on the tigrv <dig> arabidopsis genome.

similar situation was observed when xman was applied to remap several other affymetrix tiling arrays for human, mouse and arabidopsis .

based on the above observation, xman used the following rules to remove probe redundancy in the human genome tiling array bpmap: 1) all the probes with copy number more than  <dig> are filtered out; 2) the same 25-mer is mapped only once within a  <dig> kb window along the genome; 3) the remaining probes with multiple copy numbers are not mapped unless it is at least 30bp apart from the previous probe . the correct whole genome probe copy number is stored with each probe's 25-mer sequence, regardless of whether it is mapped to a certain region or not by rules 2) and 3).

comparison with existing tools
many tools are available for sequence similarity search, among which blast  <cit> , megablast  <cit> , blat  <cit>  and mummer  <cit>  are probably the most widely used. we compared the performance of xman with these tools in the same linux computer to map the  <dig> million human genome tiling probes to the human genome. blastn  <cit>  scans for short matches  in the genome and extends those matches into high-scoring pairs . megablast utilizes a greedy algorithm  <cit>  to search for nucleotide sequence alignment and is optimized for aligning slightly different sequences. blat  <cit>  indexes non-overlapping k-mers in the genome and hashes them inside the computer ram, then scans linearly through the query sequence. mummer  <cit>  adopts a suffix tree data structure for rapid sequence alignment, but is memory intensive. mummer  <dig>  uses approximately  <dig> bytes for each nucleotide in the reference genome, thus requires ~ <dig> gb  of ram to create the human genome data structure. we do not have access to a computer that meets this ram requirement, thus did not include mummer in our comparison.

it took blast  <dig>  minutes, blat  <dig> minutes, and megablast   <dig>  minute to search the first  <dig> thousand probes against the human genome. since search time is approximately proportional to the query size, extrapolating these numbers predicts that the three algorithms will take about  <dig> ,  <dig>  and  <dig> cpu hours to map all  <dig> million probes, respectively. megablast appears to be a proper solution to this specific probe-mapping problem, and is extremely efficient with this word size of  <dig>  nevertheless, its advantage diminishes when mapping shorter fragments with smaller word size. for instance, megablast requires almost  <dig> cpu minutes to search  <dig> thousand 18-mer probes against the genome with word size of  <dig>  i.e.  <dig> cpu hours for the  <dig> million 18-mer probes. in comparison, word size in xman, which is the minimal length of an identical match, is always equal to the length of the query oligonucleotide and has no effect on the searching time. in any case, xman needs less than  <dig> cpu hours in completing the  <dig> million probe mapping, and is at least an order of magnitude faster than other popular algorithms.

impact of the updated probe mapping on the tiling array analysis
we aim to systemically investigate the impact of the updated probe mapping on tiling array data analysis. we recently developed a model-based analysis of tiling arrays  algorithm  <cit>  to reliably detect chip-enriched regions on affymetrix tiling arrays. mat employs a linear model to estimate the baseline probe behaviour based on probe sequence and copy number. to our knowledge, it is the only algorithm that considers probe copy number information in tiling array analysis. as our goal here is to assess the pure effect of probe mapping on tiling array data analysis, we only used mat to investigate the impact of xman probe mapping. since the affymetrix bpmap does not contain probe copy number information, we used  <dig> copy for every probe.

we applied mat to the estrogen receptor  whole genome chip-chip data  <cit>  using both affymetrix and xman bpmaps . regardless of the thresholds, the consistency between the chip-regions from the two probe mappings is usually around 95%. our analysis suggested that at the same false discovery rate  threshold, xman bpmap can significantly increase the number of detected chip-regions compared to affymetrix bpmap. at 0% fdr threshold, mat identified  <dig>  more regions with xman bpmap, among which  <dig> could not be identified even at 5% fdr using affymetrix bpmap. we randomly selected  <dig> out of the  <dig> xman-specific regions to conduct site-specific er chip and real-time quantitative pcr assay , and found  <dig> out of the  <dig> regions to be chip-enriched  in an estrogen-dependent manner . this indicated that most of the xman-specific er binding sites are real, suggesting a reduced false negative rate in the analyses using xman bpmap. on the contrary, only  <dig> regions were found at 0% fdr using affymetrix bpmap but not found using xman bpmap at 5% fdr. all  <dig> affymetrix-specific chip-regions reside in repetitive sequences, suggesting that they are most likely false positives, due to the inflated signals on the repetitive probes in affymetrix bpmap.

athe numbers of chip-regions identified by mat are shown in the table. a chip-region is annotated as repeat if more than 70% of the region is within repeatmasker repeats, simple repeats, or segmental duplications. the numbers of non-repeat regions are shown in the parentheses.

bchip-regions identified from affymetrix_ncbiv <dig> probe mapping were converted into ncbiv <dig> version using liftover program (). two regions are considered the same if they overlap by more than 50%.

cthe percentage of shared regions was defined as the number of shared regions divided by the number of regions identified using affymetrix probe mapping.

we conducted another comparison using a spike-in experiment, in which the position and concentration of every spike-in target was known. the spike-in sample representing a mock chip is a mixture of human genomic dna and  <dig> clones of approximately ~ <dig> bp, which are  <dig>  4-, … , 256-fold enriched  relative to genomic dna. genomic dna without spike-in clones serves as a mock input control. the samples were hybridized to affymetrix tiling arrays in  <dig> replicates . with xman bpmap, mat achieved 100% accuracy for predicting the spike-in clones with  <dig> false positive and  <dig> false negative. mat with affymetrix bpmap, however, would yield one false positive prediction . a scrutiny into this false positive region revealed that most of the probes there had multiple copies in the genome. so by using xman bpmap to control the cross-hybridization effect, mat successfully eliminated this false positive.

CONCLUSIONS
as many genome sequencing projects continuously update the genome assembly, and high-throughput sequencing/microarray technologies frequently introduce millions of oligonucleotides, algorithm for fast mapping of oligonucleotides to the newest genome is needed. we introduce an intuitive and effective algorithm xman, which is optimized for mapping millions of oligonucleotide fragments to the genome simultaneously and is at least an order of magnitude faster than other popular algorithms. it also works on mapping long oligonucleotide probes from nimblegen and agilent, and can be further adopted to map the short sequence tags from high throughput sequencing technologies. xman can also be used to convert probe genome coordinate between closely related species for analysis, e.g. when chimpanzee dna is hybridized to human tiling arrays.

although the liftover program from ucsc can convert genome coordinates, it relies on library files which are not available for all the possible genome assemblies. xman, on the other hand, could be used for any coordinate conversion when the query and reference genome sequences are available. in addition, liftover only transfers coordinates to a new version without the ability to find other matches of the query dna sequence. for example, the previously mentioned probe on chromosome  <dig> which matches ~ <dig> thousand genome locations, will only be converted to a single new genome coordinate by liftover.

most index-based sequence similarity search programs involve two major stages, a heuristic search stage to locate potential similar blocks  and an alignment stage to combine the anchors. since xman only finds exact matches of short fragments, it simplifies the index-based method by eliminating the second stage. xman encodes the query sequences into hash table in ram and linearly scans through the genome for the exact matches. query size only affects hash table generation and output writing time, but not genome scanning time. xman does require ram to hash all the query sequences, which is much smaller than the genome size and often available with current computing capacity. besides, when query sequences are too big, they can be split to multiple files, so xman can be carried out sequentially on each smaller query files.

using xman to generate probe mapping bpmap is important for tiling array data analysis. it not only converts the probe coordinates to newer genome assemblies, but also removes many redundant probes, and allows algorithms such as mat to consider and control probe cross-hybridization effect. during the bpmap comparison analysis on er chip-chip data, we not only removed several false-positive chip-regions residing in highly repetitive sequences

we observed an interesting phenomenon that xman bpamp allows more chip-regions to be identified at the same fdr cutoff . after probe standardization, mat uses a sliding window approach to calculate a matscore for each window  based on the standardized value of all the probes in the window. assuming the background null distribution to be normally and symmetric distributed about the median m , mat estimates the null distribution using all the matscores less than the median. at each matscore cutoff , the number of peaks below  over the number of peaks above  gives the empirical estimate of fdr. xman's more accurate probe mapping and filtering removes the noise from many windows with multiple copy number probes, thereby reducing the overall variance of the matscore null distribution. this leads to a higher signal to noise ratio, and eventually more predictions under the same fdr cutoff.

a) matscore histogram: the standard deviations estimated from the background null distribution are  <dig>  and  <dig>  using xman and affymetrix probe mapping, respectively. only the bottom part of the histogram was shown.

b) scatter plot of false discovery rate  versus number of true positives. under each cutoff, the number of true positive is estimated as the number of positive peaks minus the number of negative peaks; the fdr is estimated as the number of negative peaks divided by number of positive peaks. under the same fdr cutoff, mat predicts more true positive peaks using xman probe mapping than using affymetrix probe mapping.

materials and methods
hash table for query sequences
xman seeks to eliminate the time-consuming disk access operations by creating a query sequence hash table that resides entirely in the computer ram. each nucleotide is encoded as two bits, i.e. a: 00; c: 01; g: 10; t:  <dig> , thus any n-mer sequence can be converted into a 2n-bits integer, which is a key in the hash table. in order to avoid encoding ambiguities, all the query sequences are restricted to have the same length. the value of each key in the hash table is a feature associated with the corresponding sequence. the feature can be the x and y coordinates of a given probe on the microarray, or the position of a sequence in the query file. redundant query sequences  share the same key, with multiple features . the memory requirement is proportional to the total size of the query sequence.

scanning the genome
xman scans the reference genome using a sliding window of size n  at steps of size  <dig>  to accelerate search speed, xman also encodes each nucleotide in the genome sequence in  <dig> bits, and takes advantage of the fastest bit-shifting operation for the encoding, as described below:

denote the 2n bits integer from the previous window as a

reset the two left-most bits of a to  <dig> 

left-shift a by  <dig> bits

read one more base and add its baseindex to a to form the new 2n bits integer for the current window

if this new a is a key in the query hash table, xman stores the corresponding chromosome, strand and genomic position.

step one base 5′ to 3′, and repeat steps 1- <dig> until the end of the genome

the scanning is linear in time to the reference genome size. at the end, for each query sequence, xman has all its genome copy number and positions, which will be output to a tab-separated values  file. query sequences no longer match to the genome are also output as if they are in a chromosome called “nomatch”. furthermore, the following xman running statistics will be reported. please see fig.  <dig> for an example.

numuniqseq: number of unique sequences in the query

numseq.mentries: number of sequences with multiple entries in the query

numqueryentries: number of entries in the query file

numseq.mgenomematches: number of sequences with multiple genomic matches

numseq. nogenomematch: number of sequences with no match in the genome

numtotalentries: number of total entries in the final xman mapping result.

software implementation
xman is implemented in open source python, and is freely available at . it requires the query oligonucleotide file and the subject genome file. the query file can be in either in affymetrix binary probe mapping  format or plain-text tab-separated values  format. the first column in the tsv file must be the sequence and the other columns  could be feature associated with the sequence. the reference genome files must be in fasta format and can be downloaded from .

competing interests
the authors declare that they have no competing interests.

authors' contributions
wl carried out the study and drafted the manuscript. jsc and mb performed the molecular biology study. xsl conceived of the study, and helped to draft the manuscript. all authors read and approved the final manuscript.

