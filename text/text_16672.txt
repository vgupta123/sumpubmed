BACKGROUND
genome browsers are the primary tools for the visualization of raw genomic sequence data and annotations. typically, these software systems are web-based and present an image with "tracks" of information that describe the underlying genome sequence. the tracks include features such as snps, ests, linkage-disequilibrium, and splice variants. navigation through these annotations is done by zooming and scrolling along the track and the underlying sequence information.

initially, most organisms with complete genomes had their own custom-built genome browser software  <cit> . more recently, there has been a push towards feature-rich species-generic genome browsers that can be reused for new genomes. the result is a small number of high quality genome browsers that are used across many species  <cit> . all of these browsers use a large set of annotations, which are input into a relational database. a collection of scripts then read the information for the genome region a user wants to view and presents the annotations corresponding to that region.

the large software systems used by genome browsers often require specialized knowledge for installation and maintenance. the requirement of a relational database complicates the genome browsers' applicability in dynamic contexts that change frequently. in addition, running a full-fledged genome browser on a personal computer is not trivial.

here we present lightweight genome viewer , a genomic sequence annotation visualizer that requires only a single text file and executable to run. this simplicity and independence from a database backend facilitates the dynamic creation of genome views based on user-chosen analyses. lwgv allows "include" files, which provide an object-oriented, plug-n-play, architecture for managing tracks and building text files for more complex viewer applications. we have successfully used lwgv to visualize rnai oligos on their corresponding genes  <cit> , to present a linkage disequilibrium map of chromosome  <dig>  <cit> , and to display feature annotations for the geneseer  <cit> . we also present a new application of lwgv to dynamically visualize changes in gene expression along a genome using any combination of the over  <dig> prokaryotic microarrays available in the many microbe microarrays database . lwgv is an ideal tool for the presentation of dynamic analyses and sequence annotations without resorting to the creation and maintenance of a large database and software infrastructure.

implementation
lwgv runs as a web-based cgi program. genome features are represented as color-coded tracks on a web browser, and detailed information about each feature can be shown by "mousing-over" them . these features are described in a text-file written in a simple descriptive language. in addition, we offer translators that accept standard annotation formats including bed, wig, psl, gff, and genbank. each track, or feature within a track, can have its own unique color, and features across tracks can have lines connecting them to show, for example, the boundaries of homologous sequences across two species or to compare alternative splice sites . in addition to tracks, the sequence viewer can represent numerical information along a genome using line plots, smooth line plots , or histograms. basic properties like image width, track height, and navigation buttons are all configurable. commonly used feature sets and configuration parameters can be stored in separate files and included into an annotation file with an "#include" statement to prevent regenerating the same features in contexts where only part of the analysis data is dynamic.

RESULTS
lwgv as a traditional genome browser
although lwgv is not as feature rich as database-driven genome browsers, it is sufficiently fast to be used in place of a genome browser in many contexts where the number of tracks and features is not too large . for example, lwgv was used to display a linkage disequilibrium map of human chromosome  <dig>  <cit> . lwgv is a good replacement for traditional genome browsers when quick setup is needed and the visualization demands require only simple tracks and graphs. larger software packages, such as the ucsc genome browser  <cit> , should be used when more advanced browsing features are needed .

lwgv as a short sequence viewer
most software applications for visualizing short dna sequences are standalone-applications that are only available commercially or are devoted to a specific task such as restriction enzyme digestion  <cit> . lwgv is well suited for visualizing annotations of short stretches of dna. for example, we use lwgv to show the location of the rnai knockdown clones from the hannon-elledge shrna libraries  <cit> . for this task, it is only necessary to show individual genes and the location of each shrna designed for those genes. with lwgv, this task can be done by reading the available shrnas for a particular gene from the database of all shrnas and generating the corresponding annotations such as exon boundaries and shrna binding sites into a temporary file to be read by lwgv. this dynamic approach allows one to update the shrna database without having to sync a second database for a genome viewer.

lwgv is particularly well suited to dynamically display a user's analysis of a particular region of dna. we previously developed a web application where biologists can design their own rnai oligos  <cit> . lwgv provides a simple way to show the locations of the rnai oligo designs on the user's sequence . for traditional genome browsers, this would require either generating  a new database or table for each user or developing a lot of workaround code to allow the genome browser to operate from a database that has many discontinuous sequences from different species. with lwgv, the user's sequence can be visualized by generating the appropriate temporary file with their sequence and the location of the sirna oligos on their sequence. these temporary files can be deleted when they are past a pre-determined expiration date.

lwgv as a dynamic microarray analysis tool
common microarray analysis procedures yield lists of genes, whose expression changes significantly in response to an environmental or genetic perturbation. the functional role for most of these expression changes is typically unknown, and the often-large number of changed genes hinders human interpretation of their role. in many species, genes with similar functional roles often exhibit chromosomal proximity and therefore operate as a co-expressed module, even when part of distinct operons and transcription units  <cit> . to facilitate the sharing, discovery, and analysis of expression data in a genome localization context, we created an lwgv application where users can dynamically choose any two sets of microarray experiments in m3d and view gene expression changes in their chromosomal context . m3d includes affymetrix microarray compendia for multiple microbes including s. oneidensis, e. coli, and s. cerevisiae, and it also provides visualization and data download tools  <cit> . lwgv is also packaged with a script that allows any expression data in the commonly used gpr format to be visualized in a genome context.

CONCLUSIONS
lwgv is a lightweight genome browser that can be used in small-scale projects and individual labs. scientists and laboratories with little computing infrastructure can use lwgv since it does not require databases or other software.

availability and requirements
lwgv is distributed under the gpl license.

project name: lwgv

project homepage: 

operating systems: linux and mac os x

programming languages: c

other requirements: apache, cgic, gd graphics library, lex , yacc 

any restrictions to use by non-academics: none

lwgv is distributed as a source code tarball and installs with the standard unix "./configure" and "make" commands. details about installing lwgv, writing tracks, and customizing the output can be found in the manual and readme files distributed with the software.

competing interests
the author declares that there are no competing interests.

authors' contributions
jjf and rs developed the initial source code. ao wrote parsers for converting other genome browser annotations into the lwgv format. all authors contributed bug fixes and minor additions to the software. all authors contributed to writing the manuscript. all authors read and approved the final manuscript.

