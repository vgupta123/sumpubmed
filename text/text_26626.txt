BACKGROUND
gene regulatory network  reverse-engineering has been a subject of intensive study within the systems biology community during the last decade. of the dozens of methods available currently, most can be broadly classified into three main-stream categories, namely co-expression networkdifferential equation and bayesian network. co-expression network  <cit>  is a class of coarse-scale, simplistic models that relies directly on pairwise or low-order conditional pairwise association measures, such as the  correlation or  mutual information, for inferring the connectivities between genes. these methods have the advantage of low computational complexity, and can scale up to very large networks of thousands of genes  <cit> . however, their major limitation is that they do not model the network dynamics, and hence cannot perform prediction. differential equation  based approaches are a class of sophisticated, well established methods which have long been used for modeling biochemical phenomena, including grns  <cit> . a particularly salient feature of de-based approaches is that they can accurately model the detailed dynamics of biochemical systems in continuous time. however, these methods are also much more computationally intensive, and so far are only applicable to relatively small networks of a handful genes . lying in-between these two extremes are bayesian networks , a class of models that are based on solid principles of probability and statistics. a bn represents accurately and compactly the joint distribution of a set of variables, using probability and graph theories. bn can also perform prediction of the grn behavior in unknown conditions, albeit not at as detailed level as de-based approaches.

in this paper, we focus on the bn paradigm, which is indeed among the first approaches for reverse engineering grn, through the seminal work of friedman et al.  <cit> , and later by numerous other authors  <cit> . two critical limitations when applying the traditional static bn paradigm to the grn domain are:  bn does not have a mechanism for exploiting the temporal aspect of time-series data  abundant in this field; and  bn does not allow the modeling of cyclic phenomena, such as feedback loops, which are prevalent in biological systems  <cit> . these limitations motivated the development of the dynamic bayesian network  which has received significant interest from the bioinformatics community  <cit> . dbn exploits the temporal aspect of time series data to infer edge directions, and also allows the modeling of feedback loops .

in dbn framework, the task of grn reverse engineering amounts to learning the optimal dbn structure from gene expression data. after the structure has been reconstructed, a set of conditional probability tables can be easily learned, using methods such as maximum likelihood, to describe the system dynamics. in this paper, we are focusing on the more challenging problem of structure learning. most of the recent works have employed either local search , stochastic global optimization , or monte carlo simulation. this is due to several np-hardness results for learning static bn structure . however recently, dojer  <cit>  has shown otherwise that for certain dbn models, learning can be efficiently done in polynomial time for the globally optimal dbn, when the minimum description length  and the bayesian-dirichlet equivalent  scoring metrics are employed. in our recent preliminary work  <cit> , we have shown that this result also holds true for the mutual information test , a novel scoring metric recently introduced for learning static bn  <cit> . through extensive experimental evaluation, de campos  <cit>  suggested that mit can compete favorably with bayesian scores, outperform mdl  and hence should be the score of reference within those based on information theory. to our knowledge, other than the popular scoring metrics, mit has not been considered for learning dbn. an attractive characteristic of mit is that when placed into a global optimization framework, its complexity is much lower than that of the bde-based algorithm by dojer  <cit> , and seems to be comparable to that of the mdl-based algorithm. in other words, mit seems to combine the goodness of both bde and mdl, namely network quality and speed. the implementation of our mit based algorithm, made available as the globalmit toolbox  <cit> , when tested on small scale synthetic data  <cit> , confirmed that mit also performs competitively with bde and mdl in terms of network quality.

the first-order markov dbn model that we considered earlier  <cit>  is however not completely adequate for the accurate modeling of grn, as genetic interactions are invariably delayed with different time lags  <cit> . specifically, this delay is due to the time required for the regulator gene to express its protein product and the transcription of the target gene to be affected  by this regulator protein. in grns, most genetic interactions are time delayed, depending on the time required for the translation, folding, nuclear translocation, turnover for the regulatory protein, and elongation of the target gene mrna  <cit> . furthermore, the amount of time lag needed for different regulator to exert its effect is also different. higher order dbns are therefore needed to capture these time-delayed interactions. in this paper, we generalize our globalmit algorithm to the case of higher order dbn models, to be named globalmit+. our contribution in this paper is three-fold:  we prove the polynomial time complexity of globalmit+ for higher order dbns;  we give a complete characterization of the time complexity of globalmit+, and propose a variant globalmit* for large scale networks that balances optimality, order coverage and computational tractability;  we evaluate the high-order globalmit+/* on several real and synthetic datasets, and for the first time apply a dbn-based grn reverse engineering algorithm on a large scale network of  <dig> cyanobacterial genes, in a very reasonable run-time on a regular desktop pc. we show that the learned networks exhibit a scale-free structure, the common topology of many known biochemical networks, with hubs with significantly enriched functionals corresponding to major cellular processes.

methods
preliminaries
we first briefly review the dbn models. let x=x <dig> …,xn be a set of random variables ; xi <dig> …,xin be an actual observed sequence corresponding to xi over n time points; xit be the rv representing the value of xi at any time t; and x=x <dig> …,xn. a dbn represents the joint probability distribution function  over the set of n×n rvs x <cit> ∪x <cit> …∪x. since such a general pdf can be arbitrarily complex, several assumptions are often employed for its simplification. the two most popular assumptions are first-order markovianity, i.e., p=p, and stationarity, i.e., p is independent of t. these two assumptions give rise to the popular first-order markov stationary dbn which assumes that both the structure of the network and the parameters characterizing it remain unchanged over time. it is worth noting that recent works have progressed to allow more flexible, non-stationary dbn models, such as ones with, either parameters  <cit> , or both structure and parameters  <cit>  changing over time. however, more flexible models generally require more data to be learned accurately. in situations where training data are scarce, such as in microarray experiments where the data size can be as small as a couple of dozen samples, a simpler model such as the markov stationary dbn might be a more suitable choice.

dbn models consist of two parts: the prior network and the transition network <cit> . the prior network contains only intra time slice edges , while the transition network can contain both inter and intra time slice edges, as demonstrated in figure  <dig>  learning the prior network requires collecting m independent observation sequences, of which only m initial time slices are used for learning. for biological networks, such data abundance is not always available, since there may be only one or a very limited number of time series. therefore, only the learning of the transition network is practical and is relevant. henceforth, by dbn we mean only the transition network part of the model. some authors have further restricted the transition network to contain only inter time slice edges  <cit> . in the context of genetic networks, inter-time slice edges correspond to time-delayed genetic interactions, while intra-time slice edges correspond to instantaneous interactions. in reality, only delayed genetic interactions are biologically plausible, as a result of the time required for the translation, folding, nuclear translocation, turnover time-scales for the regulatory protein, and the time scale for elongation of the target gene mrna  <cit> . only when this total time lag is small compared to the sampling gap, then the interaction can be considered as instantaneous. in this paper we shall consider dbn with only inter-time slice edges. the rationale for this focus can be taken from both a biological point of view , and from an algorithmic point of view: there are efficient polynomial time algorithms for learning this class of dbn, as will be discussed in the next section.

a critical limitation of the first-order dbn for modeling grn is that it assumes every genetic interaction to have a uniform time lag of  <dig> time unit, i.e., all edges are from slice t-1] to t. for grns this is not always the case, since genetic interactions can have longer lags, and different transcription factors  of the same gene can have different lags  <cit> . as mentioned earlier, this motivates the use of higher order dbns, in which the first-order markovianity is replaced by the dthorder markovianity, i.e., p=p. with this model, a node  can have parents  in any of the previous d time slices. a 2nd-order markov dbn is illustrated in figure  <dig>  in which node x <dig> is regulated by two parents, namely x <dig> with one-time-unit lag, and x <dig> with two-time-unit lag.

the mit scoring metric
in this section, we first review the mit scoring metric for learning bn and then show how it can be adapted to the dbn case. the most popular approaches for learning dbn are essentially those that have been adapted from the static bn literature, namely the search+score paradigm  <cit> , and markov chain monte carlo  simulation  <cit> . in this paper we apply the search+score approach, in which we specify a scoring function to assess the goodness-of-fit of a dbn given the data, and a search procedure to find the optimal network based on this scoring metric. while several popular scoring metrics for static bn, such as the bayesian scores , and the information theoretic scores , can be adapted directly for dbns, we focus on the mutual information test , a recently introduced scoring metric for learning bn  <cit> . briefly speaking, under mit the goodness-of-fit of a network is measured by the total mutual information shared between each node and its parents, penalized by a term which quantifies the degree of statistical significance of this shared information. to understand mit, let {r <dig> …,rn} be the number of discrete states corresponding to our set of rvs x={x <dig> …,xn}, d denote our data set of n observations, g be a bn, and pai={xi <dig> …,xisi} be the set of parents of xi in g with corresponding {ri <dig> …,risi} discrete states, and si=|pai|. the mit score is defined as: 

  ssmit=∑i=1;pai≠∅n2n·i−∑j=1siχα,liσi, 

where ixi,pai is the mutual information between xi and its parents as estimated from d. χα,lij is the value such that pχ2lij≤χα,lij=α , and the term liσi is defined as: 

  liσi=−1)∏k=1j−1riσi,j=2…,si−1),j= <dig> 

where σi=σi,…,σisi is any permutation of the index set {1…si} of pai, with the first variable having the greatest number of states, the second variable having the second largest number of states, and so on.

to make sense of this criterion, let us first point out that maximizing the first term in the mit score, i.e., ∑i2n·i, can be shown to be equivalent to maximizing the log-likelihood criterion. however, learning bn by using the maximum likelihood principle suffers from overfitting, as the fully-connected network will always have the maximum likelihood. likewise, for the mit criterion, since the mutual information can always be increased by including additional variables to the parent set, i.e., i≥i, the complete network will have the maximum total mutual information. thus, there is a need to penalize the complexity of the learned network. penalizing the log-likelihood criterion with −12clog gives us the bic/mdl criteria, while -c gives us the aic criterion =∑i=1n∏j=1sirij measures the network complexity). as for the mit criterion, while the mutual information always increases when including additional variables to the parent set, the degree of statistical significance of this increment become negligible as more and more variables are added. this significance degree can be quantified based on a classical result in information theory by kullback  <cit> , which, in this context, can be stated as follows: under the hypothesis that xi and xj are conditionally independent given pai is true, the statistics 2n·i approximates to a χ <dig> distribution, with l=qi degree of freedom, and qi= <dig> if pai=∅, otherwise qi is the total number of states of pai, i.e., qi=∏k=1sirik. thus the second term in the mit score penalizes the addition of more variables to the parent set. roughly speaking, only variables that have the conditional mutual information shared with xi given all the other variables in pai that is higher than 100αpercent of the mi values under the null hypothesis of independence can increase the score. an important difference between mit and the other information theoretic based metrics  is that the penalty term is applied individually and independently to each rv rather than to the network as a whole. for further details on the motivation and derivation of this scoring metric as well as an extensive comparison with bic/mdl and bd, we refer readers to  <cit> .

we next show how mit can be adapted for the case of high-order dbn learning, by carefully addressing the issue of data alignment. the mutual information is now calculated between a parent set and its child at different time lags. at any time t>d, let pai={xi <dig> …,xisi} be the parent set of xi, with {δi <dig> …,δisi} be the actual regulation order corresponding to each parent. in this work, since we only consider dbn with inter time slice edges, 1≤δij≤d,∀j for a d-th order dbn. when the mutual information is calculated, the target node is always shifted by d units forward in time, while the parents are shifted forward by d−δi <dig> …,d−δisi time units respectively. we define is as a time-delayed mutual information operator, which automatically shifts the target variable as well as all of its parents to the correct alignment.

the number of effective observationsne is therefore ne=n−d, if we have only one time series of length n. if there are m separate time series, it is imperative that no wrong alignments occur at the transition between these time series when they are concatenated. the number of effective observations for multiple time series is ne=∑i=1mni−md where ni’s are the length of the time series. the mit score for dbn is calculated as: 

  smit″=∑i=1;pai≠∅n2ne·is−∑j=1siχα,liσi· 

 to make this clear, we demonstrate the process of data alignment through the simple dbn example given in figure  <dig>  for node x <dig>  pa2=x <dig> x <dig>  therefore when is operates, it shifts the target node x <dig> forward by two units in time, while the parent x <dig> is shifted zero unit, and parent x <dig> is shifted  <dig> unit, as shown in figure  <dig>  the number of effective observations is ne=n1− <dig> if only the first sequence is used, or ne=n <dig> + n <dig> + n3−2× <dig> if all  <dig> sequences are used for learning.

shared and exchanged information in time-delayed mi
the proposed algorithm uses the time-delayed mutual information to give directional sense in dynamical systems. as a measure, for capturing system dynamics, the time-delayed mi contains both the exchanged information which is useful and the shared information which is not useful. however, schreiber  <cit>  premised that the time-delayed mi, because of its use of static probability, is limited and unable to distinguish between the exchanged information from shared information. consequently, he proposed the concept of transfer entropy, using transition probabilities rather than static probabilities, thereby ignoring static correlations due to the common history or common input signals. from this viewpoint, it implies that the transfer entropy would be more appropriate because the time-delayed mi, using static probability, will contain exchanged information with less ‘strength’ than transfer entropy which is not influenced by static correlations.

however, we note that the transfer entropy requires the estimation of very high-dimensional joint distributions, i.e.,  dimensions where d is the markov order. thus, even with d =  <dig>  hundreds to thousands of samples are required for satisfactory estimation of the 7-dimension distribution. in contrast, the time-delayed mi requires estimation of only bi-dimensional distributions and is thus better able to cope with limited  microarray data samples, as commonly available for reconstructing genetic networks. if the number of samples increases in the future, e.g., due to advancements in technology for gene expression profiling, the transfer entropy approach will be an important candidate for reverse engineering genetic networks.

proposed approaches
this section presents our globalmit+ algorithm for learning the globally optimal structure for a d-th order dbn with the mit scoring metric in polynomial time. the original globalmit algorithm for the case of the 1st-order markov dbn  <cit>  can be considered as a special case of globalmit+ with d= <dig>  our development of globalmit+ has made use of the same set of assumptions as proposed by  <cit> . while therein, the dbn learning problem is placed within a generic machine learning context, herein we are focusing our attention to the particular context of grn modeling. next, we list the required assumptions and discuss the associated rationales along with biological plausibility.

assumption 1
 examination of the graph acyclicity is not required.

this assumption is valid for dbns with no intra time slice edges. for this class of dbn, as the edges are only directed forward in time, acyclicity is automatically satisfied. the biological implication of this assumption is that we may not be able to detect the instantaneous interactions. as stated previously, the majority of genetic interactions are time-delayed. however, if the sampling gap is large, we may consider some quick interactions as instantaneous. the effect of this constraint is that, if gene x <dig> regulates gene x <dig> almost instantly, their mutual information i will likely be maximized when their expression profiles are in synchrony, i.e., no shifting of any of the two sequences is involved. with assumption  <dig> in place, we will have to consider two time-delayed mutual information values, is and is . if these values are significantly weaker than i then the interaction between genes x <dig> and x <dig> may go undetected. however, when the signal is smooth and is sampled in short time step, we found that shifting the expression profile by just one time unit will not often cause a large reduction in the mi value. this is because smooth time series have high auto-correlation at short lags, and thus, instantaneous interactions may still be captured by dbn models with only inter-time slice edges. the algorithmic implication of assumption  <dig> becomes clear when we consider assumption  <dig> below:

assumption 2
 s=∑i=1ns where d|xi∪pai denotes the restriction of d to the values of the members of xi∪pai.

to simplify notation, we write s for sxi,pai:d|xi∪pai. assumption  <dig> simply states that the scoring function decomposes over the variables and is satisfied by most scoring metrics such as bic/mdl, bd and also clearly by mit. however together with assumption  <dig>  their algorithmic implication is profound: these assumptions allow us to compute the parent set for each node independently. unlike the case of bn where the choice of parents for a certain node may affect the choice of parents of all the other nodes, for dbn , the choice of parents for a node has no effect on the other nodes. thus, the algorithms developed based upon these two assumptions become very amenable to parallelization, i.e., each node can be learned independently with a separate computational thread. still, exhaustive brute-force search for the optimal parent set will require exponential time for a d-th order dbn, because pai can be an arbitrary subset of x∪…∪x and the number of all possible parent sets is 2dn. in order to further reduce the search space, we rely on the special structure of the scoring metric, as follows:

assumption 3
 s=u + v for some non-negative functions u and v satisfying pai⊆pai″⇒u≤u.

assumption 4
 |pai|=|pai″|⇒u=u.

assumption  <dig> requires the scoring function to decompose into two components: v evaluating the accuracy of representing the distribution underlying the data by the network, and u measuring its complexity. furthermore, u is required to be a monotonically non-decreasing function in the cardinality of pai , i.e., the network gets more complex as more variables are added to the parent sets. however in its original form, the mit scoring metric, having higher scores for better networks, does not abide by these assumptions. we overcome this by casting the problem as a minimization problem  where lower scored networks are better. we consider a variant of mit as follows: 

  smit=∑i=1n2ne·is−smit″, 

where xd=x∪…∪x. this score admits the following decomposition over each variable =0): 

  smit=vmit+umit,vmit=2ne·is−2ne·is,umit=∑j=1siχα,liσi. 

roughly speaking, vmit measures the “error” of representing the joint distribution underlying d by g, while umit measures the complexity of this representation. we make the following propositions:

proposition 1
s’mit maximization is equivalent to smit minimization.

proof
this is obvious, since ∑i=1n2ne·is=constant. □

proposition 2
vmit,umitsatisfy assumption  <dig> 

proof
vmit≥ <dig> since of all possible parent sets pai, the full set xdhas the maximum  mutual information with xi. and since the support of the chi-square distribution is ℝ + , i.e., χα,·≥ <dig>  therefore pai⊆pai″⇒0≤umit≤umit. □

while we note that umit does not satisfy assumption  <dig>  for applications where all the variables have the same number of states, it can be shown to satisfy this assumption. within the context of grn modeling from microarray data, this generally holds true, since it is a popular practice to discretize expression data of all genes to, e.g.,  <dig> states corresponding to high, low and base-line expression value  <cit> .

assumption 5
 all variables in x have the same number of discrete states k.

proposition 3
under the assumption of variable uniformity, umit satisfies assumption  <dig> 

proof
it can be seen that if |pai|=|pai″|=si, then umit=umit=∑j=1siχα,2kj− <dig>  □

since umit is the same for all parent sets of the same cardinality, we can write umit in place of umit. with assumptions 1- <dig> satisfied, we can employ the following algorithm  <dig>  named globalmit+, to find the globally optimal dbn with mit, i.e., the one with the minimal smit score.

theorem 1
under assumptions 1- <dig>  globalmit+ applied to each variable in x finds a globally optimal d-th order dbn under the mit score.

algorithm  <dig> globalmit+ : optimal dth-order dbn with mit
· pai:=∅

· forp= <dig> to nd

· if umit≥smit then return pai; stop.

· p=arg minsmit|y⊆xd;|y|=p

· if smit<smit then pai:=p.

· end for

proof
the key point here is that once a parent set grows to a certain extent, its complexity alone surpasses the total score of a previously found sub-optimal parent set. in fact, all the remaining potential parent sets p omitted by the algorithm have a total score higher than the current best score, i.e., smit≥umit≥smit, where paiis the last sub-optimal parent set found. □

we note that the terms 2ne·is in the smit score in  are all constant and would not affect the outcome of our optimization problem. knowing their exact value is however, necessary for the stopping criterion in algorithm  <dig>  and also for determining its complexity bound, as will be shown in section “complexity analysis”. calculating is is by itself a hard problem, requiring in general, a space and time complexity of order o. however, for our purpose, since the only requirement for vmit is that it must be non-negative, it is sufficient to use an upper bound of is. since a fundamental property of the mutual information states that i≤min{h,h}, i.e., mutual information is bounded by the corresponding entropies, we have: 

  2ne·is≤2ne·hs, 

where hs is the entropy of xi estimated from a d-time-unit shifted expression profile, i.e., xi,…,xin. otherwise, we can use a universally fixed upper bound for all hs, that is logk, then: 

  2ne·is≤2ne·logk. 

 using these bounds, we obtain the following more practical versions of dmit: 

  vmit″=2ne·hs−2ne·isvmit′=2ne·logk−2ne·is. 

it is straightforward to show that algorithm  <dig> and theorem  <dig> are still valid when v’mit or v”mit are used in place of vmit.

complexity analysis
theorem 2
globalmit+ admits a polynomial worst-case time complexity of ologkne) in the number of variables and dbn order.

proof
our aim is to find a number p* satisfying umit≥smit. clearly, there is no need to examine any parent set of cardinality p* and over. in the worst case, our algorithm will have to examine all the possible parent sets of cardinality from  <dig> to p*- <dig>  we have: 

  umit≥smit⇔∑j=1p∗χα,liσi≥vmit=2ne·is. 

as discussed above, since calculating vmit is not convenient, we use v’mit and v”mit instead. with v’mit, p* can be found as: 

  p∗=arg minp|∑j=1pχα,liσi≥2ne·hs, 

while for vmit′: 

  p∗=arg minp|∑j=1pχα,liσi≥2ne·logk. 

it can be seen that p* depends only on α,kand ne. since there are op∗) subsets of xd with at most p* parents, and each set of parents can be scored in polynomial time, globalmit+ admits an overall polynomial worst-case time complexity in the number of variables n and network order d. while p* does not admit a closed-form solution , a large over-estimate of p* can be provided as follows. note that χα,lij is the value such that p≤χα,lij)=α. since generally α≫ <dig> , if we take the mean value  of the χ <dig> distribution, i.e., lij, as an under-estimate for χα,lij, then: 

  ∑j=1p∗χα,liσi≥2ne·logk⇔∑j=0p∗−12kj≥2ne·logk⇔kp∗−1≥2ne·logk⇔p∗≥logk2ne·logkk−1+ <dig> 

assuming ne≫logk, we can see that p∗∼logk, and the algorithm admits an overall complexity of ologkne). □

let us now compare this bound with those of the algorithms for learning the globally optimal dbn under the bic/mdl and bde scoring metrics as proposed by  <cit> , and implemented in the bnfinder software  <cit> . for bic/mdl, pmdl∗ is given by ⌈logkne⌉, while for bde, pbde∗=⌈nelogλ−1k⌉, where the distribution p∝λ∑|pai|, with a penalty parameter 0<λ< <dig>  is used as a prior over the network structures  <cit> , default value logλ−1= <dig> for bnfinder]. in general, pbde∗ scales linearly with the number of effective data items ne, making its value less of practical interest, even for small data sets. moreover, this bound becomes meaningless when ne>n, as pbde∗>n, meaning that in the worst case bnfinder+bde will have to investigate all the possible parent sets. on the other hand, it can be seen that the first order globalmit and bnfinder+mdl admits roughly the same worst-case computational complexity.

the globalmit* algorithm
it is noted that the search space has been expanded from x in the case of the 1st-order dbn, to xd=x∪…∪x for the case of the dth-order dbn. roughly, the number of variables has been multiplied d times in order to accommodate the higher-order regulations. such a multiplicative expansion in the search space may be very expensive, especially for a deterministic global optimization algorithm such as globalmit+. for very large networks, it may be useful to consider the following additional assumption:

assumption 6
 no multiple edges with different time lags exist between a parent xi and its child xj. furthermore, the only one edge allowed, if it exists, must take place at the optimal lag δij∗, where δij∗=argmaxis|1≤δ≤d.

this assumption restricts that for each node xi, there may be only one single link to any node xj at the most-probable time lag where their mutual information is maximized. with this assumption in place, the search space for each variable xj reduces from xd=x∪…∪x to xj∗=xt−δij∗i=1…n, which is equivalent in size to the first-order globalmit algorithm. thus assumption  <dig> provides a trade-off between optimality and coverage: while the search is performed only on n variables at a pre-determined lag thereby significantly reducing the computational cost, this lag can take any value from  <dig> to d detecting delayed genetic interactions at the most likely time lag. we shall refer to this variant of globalmit+, when assumption  <dig> is employed, as globalmit*. it can be easily seen that, for any high order d> <dig>  globalmit* still admits the same complexity as the first order globalmit.

RESULTS
this section presents the experimental evaluation on globalmit+/*. our proposed algorithms are implemented within the matlab/c++ globalmit+ toolbox, freely available as online supplementary material . we compare our approach with two other global optimization algorithms for learning dbn under the mdl and bde metrics, namely bnfinder+mdl and bnfinder+bde, which are part of the python-based bnfinder software  <cit> . as elaborated in the previous section, the bnfinder+bde algorithm is generally very expensive, and hence not feasible for large or even medium  scale networks. in these cases, we replace bnfinder+bde with banjo  <cit> , a java-based software package for learning dbn using the bde metric via a stochastic global optimization method, in particular simulated annealing.

it is noted that the globalmit+ toolbox supports multi-threading to maximally exploit the currently popular multi-core pc systems. we conducted our experiments on a quad-core i <dig> desktop pc with 8gb of main memory, running win <dig> 64bit, which is a typical off-the-shelf pc configuration at the time this paper was written. intel core i <dig> processors contain  <dig> separate cores, each can handle  <dig> independent threads concurrently. we shall execute globalmit+ with  <dig> threads in parallel . banjo also supports multi-threading, whereas bnfinder does not. while we could have run all algorithms with only a single thread, for a “fair” comparison in terms of run-time, our objective in carrying out the experiments this way is to highlight the capability and benefit of parallelization of globalmit+. the 1-thread execution time would be roughly three to five times longer in our observation. as for parameter setting, bnfinder was run with default settings, while banjo was run with  <dig> threads, simulated annealing+random move as the search engine, and its run-time was set to, either that required by globalmit+ or at least  <dig> minutes, whichever longer. globalmit+ has two parameters, namely the significance level α, to control the trade-off between goodness-of-fit and network complexity, and the dbn order d. adjusting α will affect the sensitivity and precision of the discovered network, very much like its affect on the type-i and type-ii error of the mutual information test of independence. de campos  <cit>  suggested using high significance levels, i.e., between  <dig>  and  <dig> . we note that for smaller number of samples, a lower level of significance αmay be necessary to avoid overly penalizing network complexity. thus, in our experiments we set α= <dig>  for ne< <dig> and α= <dig>  otherwise. the choice of a suitable dbn order d, on the other hand, is both species-specific and data-specific, in particular the data sampling rate. for example, in mammals, the transcriptional regulatory time delay can be from several minutes to several tens of minutes, and is composed of two components: the tf translation/post-translational processing/translocation time , and the target gene transcription and post-transcription processing time   <cit> . also, for a higher data sampling rate, a higher d value is needed to cover the same time delay. it is also noted that increasing d will decrease the number of effective data points available for learning. in our experiments, we experimentally set d from  <dig> to several time units, depending upon the sampling rate. whenever necessary, gene expression data were discretized using 3-state quantile discretization.

small scale e. coli network
we study the e. coli sos system  <cit>  which involves lexareca and more than  <dig> other genes they directly regulate. in normal condition, lexa binds to the promoter regions of these genes and acts as a master repressor. when the dna is damaged, the reca protein senses the damage and triggers lexa autocleavage. drop in lexa level leads to de-repression of the sos genes. when dna repair completes, reca stops mediating lexa autocleavage, lexa accumulates and represses the sos genes again. we used the expression data gathered in  <cit>  for  <dig> genes, namely uvrd, lexa, umud, reca, uvra, uvry, ruva and polb, to reconstruct the interactions between these genes. the data set contains  <dig> time series, each of  <dig> observations taken at 6-minute interval, under two uv exposition levels. since the dynamics of each gene in all time series are similar, we can take the mean value of these time series as input to the algorithms. thus, the input data consists of  <dig> genes× <dig> observations.

for this small network, globalmit+ and bnfinder require only a few seconds, while banjo was executed for  <dig> minutes with  <dig> threads in parallel. the experimental results are reported in figure  <dig>  globalmit+ , bnfinder  all returned the same network in figure  <dig>  with ruva being disconnected. overall, this structure closely reflects the sos network, in which the lexa/reca compound acts as a hub that controls the other genes. banjo returned the network in figure  <dig>  in which the hub-structure is basically also identified, but with several more false interactions between the target genes, e.g., between umud and uvrd/uvra. note that the ruva gene is also disconnected in the banjo’s recovered network. when testing with higher orders, globalmit+ discovered a similar hub structure. the most complete network was discovered at d= <dig> in , in which all the interactions between lexa/reca and other genes were recovered. furthermore, the mutual interaction between lexa and reca were also correctly identified. additional experiments to test the effect of data discretization on this data set are presented in the online supplementary material .

medium scale synthetic network for glucose homeostasis
we study a glucose homeostasis network of  <dig> genes and  <dig> interactions, first proposed by le et al.  <cit> . the network, which shows the genetic interactions that control glucose metabolism in perinatal hypatocytes, was the result of an extensive literature review of the biological components affecting perinatal glucose metabolism. le et al.  <cit>  modeled the interactions using conditional probability tables with two discrete states, with the strength of the interactions chosen to be consistent with biological variation. they provided a program to generate synthetic data sets from this network using a static bayesian network model. it is clear from figure  <dig> that the network has a cascade hierarchical structure, and is reasonably complex, with several genes being regulated by multiple transcription factors. in order to create a synthetic dynamic bayesian network for testing, we modified le et al.’s network as follows. first, we organized the nodes into  <dig> levels, with the top level comprising of the master transcription factors , and the interaction order between nodes in adjacent levels assumed to be one. the network in figure  <dig> thus contains time-delayed interactions of orders  <dig> ,  <dig>  and  <dig> . then, from the data generated by le et al.’s program, we simply shifted forward the expression profiles of the 2nd-, 3rd- and 4th-level nodes by  <dig>   <dig> and  <dig> time units respectively to create data for this dbn model. we generated ten time series of  <dig> observations, then for each n∈{ <dig> , <dig> ,125} we took the first n observations of these series for testing. since the network structure in this experiment is known in advance by design, we can calculate the true positive , false positive  and false negative  edges. the mean±standard deviation values for the performance metrics, namely sensitivity ), precision ) and runtime, over  <dig> time series for all algorithms are reported in table  <dig> 

se: percent sensitivity; pr: percent precision; time: in minutes.

it is noted that we have omitted bnfinder+bde in this experiment. the reason is that this algorithm becomes too expensive even for this medium network. for example, at n= <dig>  bnfinder+bde requires around  <dig> minute. the execution time quickly increase to 1206± <dig> mins at n= <dig>  and at n= <dig>  we could not even complete analyzing the first of the  <dig> datasets: the execution was abandoned after  <dig> days, with bnfinder+bde having learnt the parents for only  <dig> nodes. of the algorithms reported in table  <dig>  globalmit, banjo and bnfinder+mdl are limited to learning the 1st-order dbn. it can be observed that globalmit and bnfinder+mdl learned networks with similar sensitivity and precision, with both performance metrics improving as n increased. on the other hand, banjo achieved a slightly better sensitivity, but at the cost of a significantly lower precision. this observation is in concordance with our earlier experiment on the e. coli sos network, in which banjo also learned many more edges than globalmit+ and bnfinder. this result also highlights the major advantage of deterministic global optimization based approaches  over stochastic global optimization based method such as banjo. wherever applicable, these methods never get stuck in local minima, and are able to deliver consistent and high quality results. of course, banjo on the other hand is the choice for very large datasets where deterministic methods are computationally infeasible.

as for higher-order dbn learning algorithms, both globalmit+ and globalmit*  achieves significantly better sensitivity compared to first-order dbn learning algorithms . the improved sensitivity is mainly credited to the ability of these algorithms to cover all the possible time-delayed interactions between the genes. more specifically, at n= <dig>  globalmit* discovers on average  <dig>  high-order interactions, i.e., 43% of the total high-order interactions. meanwhile, banjo and bnfinder+mdl only recover on average  <dig>   and  <dig>   high-order interactions respectively. it is also noticeable from this experiment that globalmit* delivered results almost identical to globalmit+ but with a much shorter time, comparable to the 1st-order globalmit.

large scale cyanobacterial genetic networks
this section presents our analysis on a large scale cyanobacterial network. cyanobacteria are the only prokaryotes that are capable of photosynthesis, and in recent years have received increasing interest  <cit> , due to their high efficiency in carbon sequestration and potential for biofuel production . these organisms therefore are credited with holding the key to solving two of the most critical problems of our time, namely climate change and the dwindling fossil fuel reserves. despite their evolutionary and environmental importance, the study of cyanobacteria using modern high throughput tools and computational techniques has somewhat lagged behind other model organisms. herein, we focus on cyanothece sp.  <dig>  hereafter cyanothece, a unicellular cyanobacterial strain that is involved not only in photosynthesis but also in nitrogen fixation in the same cell. as a byproduct of nitrogen fixation, cyanothece has been recently shown to produce biohydrogen at very high rates that are several fold higher than previously described hydrogen-producing photosynthetic microbes  <cit> .

we used transcriptomic data from  <cit> , where samples from cells grown in alternating 12h light-dark cycles were collected every 4h over a 48h time course. we analyze the subset of  <dig> genes that have a 2-fold expression in at least one of the  <dig> time points, as published in  <cit> . since the sampling gap of 4h in this experiment is relatively large as compared to regular biological regulatory time lag, we used spline interpolation to interpolate two more data points in between each two actual measurements, i.e., upsampling the given time series at an 1h20’ interval. the resulting data set thus contains  <dig> genes× <dig> time points. for this large network, we employed the globalmit* version, with order d= <dig> . globalmit* inferred the network as in figure  <dig> after  <dig>  mins of execution time. upon visualization with cytoscape  <cit>  using a standard layout algorithm, the network shows a clear scale-free topology, with the majority of nodes having only a few connections and a small number of hubs having many connections. the node degree in a scale-free network distributes according to a power-law distribution, p∝x−γ, with the scaling parameter γtypically between  <dig> and  <dig> for various networks in nature, society and technology. the scale-free property is thought to be a key organization feature of cellular networks, as supported by recent analysis on model organisms such as s. cerevisiae and c. elegans <cit> . it is noted that some authors use the scale-free property as the prior input for their algorithms to, either encourage or enforce them to produce scale-free networks as output  <cit> . herein however, we have not used any such prior information.

to formalize this observation, we fit the node degree  in the globalmit* inferred network to the power-law distribution using the method of maximum likelihood . the ml estimate for γ in this network is  <dig> , falling well within the typical range. from figure  <dig> it can be seen that the observed degree distribution fits well with the theoretical p=x− <dig> curve. in order to verify that the scale-free structure is not merely an artefact of the inference algorithm, we test globalmit* with the same parameters on the same microarray data set, but with every gene expression profile randomly shuffled. the resulting network is shown in figure  <dig>  using the same layout algorithm, no clear modular structure and hubs are visually recognizable for this network. also, as clear from figure  <dig>  the node degree distribution largely deviates from a power-law curve, being very short-tailed with the largest hubs having only  <dig> connections.

we next tested bnfinder and banjo on this data set. bnfinder+bde was abandoned after  <dig> days of execution without finishing. bnfinder+mdl on the other hand is relatively fast, requiring only  <dig> mins. the resulting network, shown in figure  <dig>  also exhibits a scale-free structure. the ml estimate for γ in this network is, interestingly,  <dig> , very close to that of the globalmit* network. banjo was run with  <dig> threads for 1h. the resulting network, shown in figure  <dig>  does not appear to possess a scale-free topology, and the node degree distribution also largely deviates from a power-law curve. in fact, the banjo network node degree distribution resembles that of a random erdös-rényi graph with the same number of nodes and connections .

we next perform functional enrichment analysis for the top hubs in each network. for this purpose, we gathered annotation data for cyanothece sp.  <dig> from cyanobase . cyanobacteria in general and cyanothece in particular are not very well annotated. for example, to date, nearly half of synechocystis sp. pcc 6803’s genes, the best studied cyanobacterium, remain unannotated. therefore, we supplemented cyanobase annotation with homology search using the blast2go software suit  <cit> . in total, these combined efforts gave us annotation data for  <dig> out of  <dig> genes in our study. we then employed bingo  <cit>  for gene ontology functional category enrichment analysis, using the hypergeometric test for functional over-representation, and false discovery rate  as the multiple hypothesis testing correction scheme. only a corrected p-value of less than  <dig>  is considered significant. following these procedures, of the top  <dig> hubs in the globalmit* network,  <dig> were found to be significantly enriched in major cyanothece cellular processes, such as nitrogen fixation, photosynthesis and other closely related pathways, as presented in table  <dig>  since the wet-lab experimental setting herein involves alternative light-dark cycles, this result is found to be highly biologically relevant. cyanothece strains thrive in marine environments, and in addition to carbon fixation through photosynthesis, these bacteria can also perform nitrogen fixation by reducing atmospheric dinitrogen to ammonia. since the nitrogenase enzyme is highly sensitive to oxygen, cyanothece temporally separates these processes within the same cell, so that oxygenic photosynthesis occurs during the day and nitrogen fixation during the night  <cit> . thus, under normal growth condition with regular dark-light cycles and without any stress, it could be expected that photosynthesis and nitrogen fixation are the two most active cyanothece cellular processes. this is reflected clearly in the globalmit* reconstructed network. upon inspecting bnfinder+mdl network,  <dig> out of the top  <dig> hubs were found to be significantly enriched, also in major relevant cellular processes. it is noted that while globalmit* show the most hubs, bnfinder+mdl manages to recover several hubs with significantly better corrected p-value. in particular,  <dig> hubs for nitrogen fixation, proton transport and ribosome were recovered with significantly smaller corrected p-value. however, as opposed to globalmit*, other important functional hubs for photosynthesis, photosystem i & ii were missing. banjo on the other hand produced relatively poor result, with only  <dig> out of  <dig> top hubs turned out to be significantly enriched, but not related to any major cellular pathway. the overall results suggest that both globalmit* and bnfinder+mdl successfully reconstructed biologically plausible network structures, i.e., scale-free with a reasonable scaling parameter value, and with functionally enriched modules relevant to the wet-lab experimental condition under study. globalmit* managed to produce more enriched hubs, as a result of the higher order dbn model employed and the improved mit scoring metric. banjo on the other hand, generally failed to produce a plausible network structure. this experimental result thus highlights the advantage of deterministic global optimization approach, as employed by globalmit* and bnfinder+mdl, versus a stochastic global optimization approach as employed by banjo.

CONCLUSIONS
in this paper, we have introduced globalmit+ and globalmit*, two dbn-based algorithms for reconstructing gene regulatory networks. the globalmit suite makes use of the recently introduced mit scoring metric, which is built upon solid principles of information theory, having competitive performance compared against the other traditional scoring metrics such as bic/mdl and bde. in this work, we have further shown that mit possesses another very useful characteristic in that when placed into a deterministic global optimization framework, its complexity is very reasonable. as theoretically shown and experimentally verified, globalmit exhibits a much lower complexity compared to the bde-based algorithm, i.e., bnfinder+bde, and is comparable with the mdl-based algorithm, i.e., bnfinder+mdl. globalmit+/* are also designed to learn high-order variable time delayed genetic interactions that are common to biological systems. furthermore, the globalmit* variant has the capability of reconstructing relatively large-scale networks. as shown in our experiments, globalmit+/* are able to reconstruct genetic networks with biologically plausible structure and enriched submodules significantly better than the alternative dbn-based approaches. our current and future study of globalmit+/* mainly focuses on the application of these newly developed algorithms to elucidate the gene regulatory network of cyanothece, synechocystis, synechococcus amongst other cyanobacteria strains having high potential for biofuel production and carbon sequestration.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
nxv developed the algorithms and carried out the experiments. mc provided overall supervision and leadership to the research. nxv and mc drafted the manuscript. rc and ppw suggested the biological data and provided biological insights. all authors read and approved the final manuscript.

supplementary material
additional file  <dig> 
globalmit+.zip — the globalmit+ toolbox implementation of the proposed algorithms in matlab and c++, together with the user’s guide  <cit> .

click here for file

 additional file  <dig> 
supplementary material for gene regulatory network modeling via global optimization of high-order dynamic bayesian network  <cit> .

click here for file

 acknowledgement
this project is supported by an australia-india strategic research fund .
