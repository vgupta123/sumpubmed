BACKGROUND
within the field of systems biology, the analysis of different types of biological networks is an important task in understanding the underlying biological processes. for this endeavour, a mathematical framework is provided by graph theory, which has allowed to verify that a multitude of organisms share relevant properties when analysing the topology of their networks  <cit> . additionally, being able to capture the network in a visual form can provide useful insights. while, in the pre-genomic era, the analysis and visualization of these networks were approached as independent computational problems, it is desirable that these two levels are well integrated  <cit> .

together with their regulatory  <cit>  and signalling counterparts  <cit> , metabolic networks represent a vastly studied class of biological networks. these are typically composed of two entities: metabolites and reactions. metabolites can be converted by the cell into building blocks or decomposed to generate energy or other compounds.

metabolic engineering  aims to rationally pinpoint genetic changes in selected host microbes that can optimize the production of compounds of industrial interest and, thus, it heavily makes use of computational analyses of metabolic networks. however, in many cases, the static view of metabolic systems provided by these networks is insufficient, and there is the need to reconstruct genome scale metabolic models   <cit>  with simulation capabilities, which are increasingly being created given the availability of genome sequences, annotation tools and omics data.

given the lack of kinetic information to provide for large-scale dynamical models, stoichiometric models are the most common. the information about the metabolites and reactions from the metabolic network, together with stoichiometry, are the starting points for their reconstruction  <cit> , being mathematically represented by a set of equations that describe the chemical transformations  <cit> .

gsmms are often used to simulate the metabolism of the cell using constraint-based approaches, where typically a pseudo steady state is assumed  <cit> . using these models and specifying environmental conditions , it is possible to perform the calculation of flux distributions. the most used method is flux balance analysis , where a flux  to maximize  is chosen to obtain an optimal flux distribution  <cit> .

in this work, an integration of network visualization with me methods is proposed, which demands that many issues related with the visualization of metabolic networks must be addressed. while the scalability of the networks is successfully addressed by generic visualization packages, usually the generic layouts available produce unsatisfactory results for metabolic networks. this is mostly due to the fact that the majority of layout algorithms do not take into consideration any biological knowledge, such as cell localization or molecular functions. another problem comes with the filtering of the networks. it is necessary to have an easy way to query the network and visually filtering it to specific sets of nodes of interest in a given context. to address these problems, a visualization tool should offer some basic features: layout algorithms, a graphical notation, integration with analysis tools by providing information about the network and an user interface to allow interaction  <cit> .

there are a myriad of software tools for me, able to use metabolic models to perform phenotype simulations and implement strain optimization methods, being some of the best known examples: optflux  <cit> , the cobra toolbox  <cit> , cellnetanalyzer  <cit>  and fasimu  <cit> . there are also several tools that perform visualization of metabolic  of biological networks. there are not, however, many examples of successful integration of these two distinct types of applications. celldesigner  <cit> , for instance, is one of the most popular tools for editing and visualizing biochemical networks, but it lacks specific methods for constraint-based approaches and does not deal well with large-scale gsmms.

cytoscape  <cit>  became a standard tool for the integrated analysis and visualization of biological networks. one of its many plugins, fluxviz  <cit> , provides features for the visualization of flux distributions in networks. fluxviz was primarily developed for fasimu, a software for flux-balance computation, and it uses the generated result files as input for visualization.

another tool worth mentioning is vanted  <cit> , an application for the visualization and analysis of networks with related experimental data. the usefulness of this tool for me purposes is provided by two of the available plugins, fluxmap, that allows the visualization of measured or simulated fluxes in the network, and fbasimvis for constraint-based analysis of metabolic models, with a special focus on the dynamics and visual exploration of metabolic flux data resulting from model analysis. it supports wild type and knock-out fba simulations.

both the cobra toolbox and cellnetanalyzer are based on the commercial software matlab, and therefore are not freely available for the community. cobra already includes some network visualization tools in the original release, but the generated maps are static built-in maps, that can be exported in a single format , optionally including overlaps with simulation results. an extension, paint4net  <cit> , that allows some editing features , has been recently proposed. however, editing is limited to the models and layouts from the related bigg database, editing options are quite limited and layouts can only be exported as images and not reused. on the other hand, cellnetanalyzer only enables the visualization of small or medium scale biological networks. more recently, metdraw  <cit> , that is capable of generating layouts for large metabolic models, was published providing the means to visualize “omics” data overlaid in the network. however, it does not support editing layouts, requiring the use of an external tool for that aim, and is not integrated with any me tool.

in the majority of these tools, biological entities/ interactions are represented as shapes/ lines, with different colours/formats standing for their classes. although this seems a reasonable solution, the complexity of the integrated information and the range of possible interactions motivated the development of standard notations. the most successful was the systems biology graphical notation   <cit> , where networks are modelled in a state-transition way. another successful standard format is the systems biology markup language   <cit> , which aims at storing and exchanging biological models. combined with the development of the smbl layout package, this makes up a very promising effort in network visualization as well. the full support to these standards is not guaranteed by most of the tools and this would be an advantage in the interoperability of these tools with other relevant software.

overall, and in spite of the aforementioned tools, network visualization has been traditionally apart from me-related methods. some notable exceptions were already mentioned, but an effective framework, which would facilitate the agile integration of simulation results with dynamic layouts of metabolic networks, is, in the authors’ point of view, still lacking. indeed, this work focuses on the development of a visualization framework based on a well-defined abstract representation of metabolic networks, which will provide researchers with visualization tools, to be used in the context of me projects. this has been developed as a plugin for the optflux platform, allowing its integration with other tools, building a useful tool to assist me researchers. to highlight the main features of the tool, described in detail next, as compared to the other tools, table  <dig> provides a comparative analysis of their features.table  <dig> 
feature comparison of several tools for metabolic network visualization


optflux visualization plugin
celldesigner
cytoscape
vanted
paint4net
cellnet-analyzer
cobra toolbox

file formats/standards

layout algorithms

integration with me

other features


implementation
metabolism can be represented as a series of transformations of metabolites, being easy to represent as a graph. there are two main entities that will be addressed by the visualization platform: reactions and metabolites. a reaction is a chemical transformation that uses a set of metabolites as reactants and produces another set of metabolites to be used by other reactions.

for the representation, a reaction-compound network  was chosen, represented by a bipartite graph, which can be divided into two distinct sets of vertices , such that every element of a set only connects with vertices of the other set. this provides a descriptive and visually attractive representation.figure  <dig> 
network representation used in the visualization framework. a reaction-compound network; b adopted irreversible reaction representation; c adopted reversible reaction representation.



a metabolic layout can then be defined by a core list of reactions, each represented by a reaction node, a set of reactants, a set of products and a set of information nodes. the reactants and products are represented as sets of metabolite nodes, representing the compounds that are part of that specific chemical reaction. the reaction node, and the respective metabolite nodes, will be connected by edges, represented as lines with a shape defined according to the reversibility of the reaction. if the reaction is irreversible, the edges that connect reactions to the metabolites will have arrows only pointing to the products , while in reversible reactions they will have arrow shapes pointing to both metabolite ends . the metabolite nodes can have two distinct types: regular and currency metabolites. the ones in the latter group will be differentiated since they typically represent highly connected hubs  with reduced interest in most analyses.

a metabolic layout is based on the reactions contained in the metabolic model. since one of the goals of this work is to provide a link between the visualization and the metabolic model, a strategy must be defined to map the entities of the visualization framework with the entities of the model. it is also desirable that a layout can represent just a part of the metabolism of an organism , as well as the possibility to use the same layout on different models . another important aspect is to make networks visually more understandable, replicating some of the nodes, a feature typically applied to currency metabolites. to comply with these features, each reaction and metabolite node will have a list of model identifiers that will provide the link between the model and the layout.

the two main tasks of the software are to build these layouts from external sources , and to visually represent them. this leads to a two-layer architecture , where the first implements the capabilities to read and write metabolic layouts, while the other, the visualization layer, handles the visualization and edition of the metabolic layout. the main features of each are given below:figure  <dig> 
visualization framework architecture overview. the input/output layer provides the reading and writing capabilities for several file formats. the visualization layer contains the layout representation, and provides the visualization capabilities. external sources can also provide filters and overlaps, being optflux one such example .

visualization layer: provides all the functionalities related with the visualization and edition of a layout, including automatic layouts, creation and edition of layouts, visual filters and operations to change the aspect of the network .

input and output layer: implements several tools that provide network creation and exportation capabilities for a multitude of file formats. it has the objective of reading networks in specific file formats and building the metabolic layout, used by the visualization layer. at the same time, it also provides the possibility to export those layouts into some of those formats.



the strategy adopted in the development of the framework had the goal of creating a tool that can be used independently, but at the same time build it in a way such that the integration with an me tool  was facilitated. this brings to light the importance of the mvc  design pattern, not only in the development of the framework, but also in the integration with optflux, that also follows this principle. indeed, optflux is built on top of aibench , a software development framework developed by researchers from the university of vigo in spain. building applications over aibench facilitates the creation of applications composed of units of work with high coherence that can easily be combined and reused, by incorporating three main object types: operations, datatypes and datatype views.

the basis of the implementation of the operations in optflux, is a core library implementing relevant me methods and algorithms, including phenotype simulation methods , strain optimization algorithms and with many other features. it also contains all data structures and methods used to represent metabolic models, and reading/writing files in different formats. optflux’s plugin-based architecture facilitates the development of additional features. the visualization plugin is such an example, which provides a direct connection between the metabolic model, simulation and optimization methods used in optflux, and the metabolic layout defined in the visualization core framework.

the entire visualization framework was developed in java. the visualization of the graph is done using the prefuse package , the cd-sbml is read using jsbml  <cit> , sbgn-ml files are read using libsbgn  <cit>  and the exportation of the layouts as images  is performed using batik java svg toolkit  and vectorgraphics2d .

RESULTS
visualization layer features
as stated previously, the visualization layer provides all the functionalities related with the visualization and editing of the metabolic layout. one of these features allows to change the default colours and shapes of the nodes. the graphical user interface  is composed of two major elements : the network view, where it is possible to edit the network and click/drag the nodes , and the side panel where filters, overlaps and node information are available . in this way, it is possible for the user to easily interact with the network, using all the features the interface has to offer.figure  <dig> 
visualization framework interface examples. a network view where the network is displayed, and the user can interact with it; b side panel where filters, overlaps, information about the nodes and the zoom panel are displayed.



this layer provides all the features that allow navigating and obtaining additional information about the network by clicking the nodes. some of them are the basic features that are typical in any visualization framework, such as highlighting, zooming and dragging, which allow navigating through the network. by clicking a node, the node information panel will display information on that node. it is possible for advanced users to implement an information panel and add it to the interface, to visualize information of specific interest.

one of the main features allows loading layouts from different sources. some layouts may not specify the coordinates of  the nodes. the layout used by the visualizer, by default, is the force directed layout   <cit>  with some modifications to support fixed nodes. this was coupled with the possibility to fix/unfix nodes, allowing the user to fix a node to the specific position it is in, or drag it to a desired position; unfixing a node will remove the position information of the node, making it susceptible to the fdl algorithm that can adjust its position according to its surroundings. it is also possible to unfix and fix nodes by type, allowing a user to fix/unfix all reaction or metabolite nodes at the same time.

another crucial aspect is the ability to edit the metabolic layout. this feature, when combined with the import and export capabilities, provides users with the means to create and edit their layouts, being able to export them for later use.

as stated above, the same metabolite can be represented several times in a layout by different nodes. if a metabolite node is connected by several reactions the user can replicate it, resulting in a metabolite node for each reaction. also, metabolite nodes representing the same compound can be merged. it is also possible to replicate a reaction node, resulting in two, or more, reactions connected to the same set of metabolite nodes. merging two reactions is only possible if they are exactly the same, i.e. are connected to the same nodes and have the same reversibility. the type of a metabolite can be changed, e.g. to a currency metabolite.

filtering and overlaying capabilities are also provided. it is possible to filter the network, by hiding parts of it, based in the node type  or by reaction identifier. to overlay information over the network, the visualizer allows altering its visual aspect, supporting the change of the direction, thickness and colours of the edges, while for nodes it is possible to change the colour and shape. this feature will allow, for instance, overlaying flux distributions in the metabolic layouts.

input and output features
the input/output layer provides support for different input/output formats:celldesigner sbml : a graphical notation system proposed by kitano  <cit> , where layouts are stored using a specific extension of the systems biology markup language .

extensible graph markup and modeling language : a format based on the graph modelling language , being used for graph description using xml tags to describe nodes and edges of a graph. it is used, for instance, by cytoscape.

kegg markup language : an exchange format created for the automatic drawing of kyoto encyclopaedia of genes and genomes   <cit>  maps.

systems biology graphical notation : defines three visual languages: process description , entity relationship  and activity flow . for the purpose of this work, which focuses on metabolism, support was only developed for the pd language, based on kitano’s proposal used in celldesigner’s graphical representation, using bipartite graphs.

cobra layouts: maps developed for the cobra toolbox. there are, currently, several maps on this format for many of the models hosted in the bigg knowledgebase . these can be used on different models that have similar pathways, with a correct mapping of the identifiers between the layout and the bigg model.

pathway generation: it is possible to generate a layout by using a list of reactions from a gsmm. this can be done following two strategies: choosing a list of reactions or, in the case where the model has pathway information, building layouts with the reactions from a set of pathways.



optflux plugin
the visualization plugin for optflux has the main goal of providing a connection between the gsmms loaded into optflux, their phenotype simulation and optimization results, and the layouts from the visualization framework.

through the plugin’s operations, it is possible for the user to map the identifiers of the metabolic model with the identifiers of the reaction and metabolite nodes of the layout. there are two different mapping methods available: loading a two-column file with the explicit mapping or applying regular expressions to the identifiers in the model and/or the layout. another available operation allows the importation of kgml layouts, which can be automatically downloaded from the kegg site.

the third operation allows the creation of layouts from reactions of a metabolic model, using the pathway layout generation feature described above. the generation of this type of layouts can be made by selecting a pathway from the model or by selecting a list of reactions manually. it is also possible to select an existing layout as a basis for the new layout. this will allow creating new layouts or adding new reactions to existing ones.

each model can have a list of layouts associated, being possible to navigate from one layout to another by clicking the elements of that list. if the user clicks a metabolite that is present in another layout from the list, the information panel will display access buttons for those layouts.

the most desired functionality of the connection between a me and a visualization tool, is the ability to visualize phenotype simulation results  overlaid in the network. this allows using the visualization tool to better understand the organism’s metabolism and design changes that can improve it towards some defined aim.

to allow this operation, there is a conversion from a simulation result in optflux, to an overlap object that is used in the visualization. in optflux, simulation results have two major elements of interest for the visualization: flux distributions and genetic conditions. a flux distribution contains the flux values for each reaction. to represent it, a conversion of identifiers is needed. it can happen that two or more fluxes are mapped to the same reaction node, and the methodology chosen was to sum all those values . in the end, all these flux values, now mapped by reaction node, are normalized and used to determine the thickness of the edges. additionally, the labels of the reaction nodes are also changed, adding the numerical value of the flux after the reaction name.

the genetic conditions of a simulation are defined as all genetic changes made to the organism for that specific simulation. it contains all knock-outs , and under/over expressed reactions. for the visual representation, some node shapes and colours were adopted to highlight these affected reactions. as seen in figure 4a, a knocked-out reaction will be indicated by a red cross, with reaction edges also coloured red. an upward arrow will indicate an over-expressed reaction, where both the arrow and the edge are green . finally, an underexpressed reaction is coloured orange and accompanied by a downward orange arrow .figure  <dig> 
symbols used to represent genetic modifications in a phenotype simulation overlap. a knocked-out reaction; b under-expressed reaction; c over-expressed reaction.



another type of overlap was also developed to visualize the comparison of two phenotype simulation results. the methodology followed was similar to the simulation overlaps. the genetic conditions are represented using the same symbols, but the colours of the edges follow a different strategy. each simulation will have a colour by default, for instance, simulation  <dig> will have the colour red, and simulation  <dig> will have the colour green. then, according to the flux for each reaction in each simulation, the colours will vary. if the amount of flux is larger in simulation  <dig>  the colours will vary in a gradient that spans from red to black , and if the flux value in simulation  <dig> is greater, the colours will vary from green to black. this will allow the user to identify where flux paths differ in the simulations  and where both share fluxes . at the same time, for reversible reactions, the fluxes of the compared simulations can take different directions. in this case, edges will have the colour of the simulation that follows the direction they are pointing, also giving the user an easy way to understand where the simulations differ. the thickness of the edges is calculated using the mean of the flux values in both simulations. on top of this, some filters are also generated, where it is possible to hide zero value fluxes in a simulation.

optflux also provides a plugin that calculates the set of elementary flux modes  of a model. efms are the set of all routes through the network that cannot be decomposed to simpler routes  <cit> , while maintaining steady-state, so they provide a way to analyse the set of pathways in the metabolic network. this plugin provides an interface that allows filtering these results, including the selection of efms based on presence/absence of external metabolites or sorting by yield. it is possible to select sets of efms browsing these results, to visualize the efms in a column-wise table, and to obtain the flux values for each reaction within the efm.

the visualization plugin can convert these flux distributions into an overlap, in a way similar to the one used for the phenotype simulation results. considering that, in this case, the only information available is the set of flux distributions, only the thickness and labels of the edges are changed. a visual filter can be applied hiding the reactions with zero value fluxes, thus allowing the visualization of the reactions that are part of the efm.

regarding customization, the plug-in allows for the configuration of the style of the visualization through the preferences option in the help menu. this allows to personalize the layouts, defining parameters such as the colour and shape of the nodes or the font, size and colour of the labels. perhaps more importantly, it is also possible to define the content of the labels of reaction and metabolite nodes, choosing which attributes to include from the ones available in the model. an example and more details of this process are given in the optflux documentation and in the case study description available in the additional file  <dig> 

usage example: succinate production with e. coli
to best illustrate the main features of the proposed tool, two case studies will be used, focusing on succinic acid  and glycine production  with e. coli. the full description of the workflow and required materials for both case studies are provided as additional file  <dig> 

succinic acid is an important compound to industry that has been produced mainly by chemical processes. recently, there has been an effort to use microbial fermentation processes with anaerobic bacteria  <cit>  and optimizing micro-organisms to over-produce succinic acid is one goal of interest for me researchers. for this case study, the e. coli metabolic model ijr <dig>  <cit>  was used. the model is available for download directly from optflux’s internal repository, and it is composed of  <dig> reactions ,  <dig> metabolites  and  <dig> genes with  <dig> gene rules.

for visualization purposes, a cobra layout was loaded for this particular model from the bigg database . after some manual and automatic curation, using the tools offered by the visualization framework, a second version of the layout was created and exported in the xgmml format, fully mapped to the model. a set of knockouts was selected from optimization results obtained using optflux  <cit>  . this set was chosen because it is not composed of a large number of knockouts while, at the same time, it is somewhat complex.table  <dig> 
deleted reactions for succinic acid production with e. coli, using the ijr <dig> metabolic model



reaction
model id
stoichiometric equation
e + nadh + nadp+ = > h+


in this case, the layouts used are of large dimensions so the full layout representation as an image is not practical. figure  <dig> represents parts of the layout and important genetic modifications in the network.figure  <dig> 
visualization of parts of the ijr <dig> model layout representing the main genetic modifications performed over the model to produce succinate. a part of the central metabolism; b inactivation of the pyridine nucleotide transhydrogenase ; c deletion of transketolase i; d inactivation of the succinate dehydrogenase , in the tca-cycle; e knockout of serine hydroxyl methyltransferase reaction .



by analysing the solution, and with the support from the visualization, it was possible to infer that nadph balance was the key factor for the increase in succinate production. figure 5a represents a part of the central metabolism of the e. coli ijr <dig> model. there, it is possible to visualize the deletion of transketolase i  that causes a decrease of flux in the pentose phosphate pathway leading to a decrease in nadh production. the inactivation of the pyridine nucleotide transhydrogenase  will also contribute to the shortage of nadh. the serine hydroxyl methyltransferase reaction  is knocked-out to prevent the formation of nadph in the glycine production pathway. finally, to prevent the consumption of succinate, there is the inactivation of the succinate dehydrogenase, in the tca cycle , which leads to the excretion of succinate.

usage example: glycine production with e. coli
the second case study was performed with the iaf <dig> e. coli metabolic model  <cit> . this model is larger than the one used in the previous example. it is composed of  <dig> reactions ,  <dig> metabolites  and  <dig> genes. the goal of the optimization for this example was the production of glycine, and the results obtained are described in table  <dig>  chosen following the same strategy used in the previous case.table  <dig> 
deleted reactions for glycine production with e. coli, using the iaf <dig> metabolic model



reaction
model id
stoichiometric equation


for the visualization, several layouts were loaded containing most pathways of the metabolic model. indeed, although it would be possible to load a layout for the entire model, this would not be practical to conduct the type of analyses shown below. in these cases, the user should seek to work with partial layouts with about  <dig> to  <dig> nodes  to improve the quality of the generated results.

after loading the pathway layouts, a simulation comparison of the wild type and knock-out mutant was performed. visualizing the overlap of that comparison, it is possible to understand how both flux distributions differ by analysing the colours of the edges. the reference flux distribution is the wild type, represented by the green colour, while the knock out solution will be coloured red. as explained above, the more similar both flux distributions are, the darker the resulting colours will be, ranging from black to the colour of the simulation with the higher value. figure  <dig> shows parts of the layout and the relevant genetic modifications that lead to the optimized results.figure  <dig> 
visualization of several parts of different pathway layouts of the iaf <dig> model. a simulation comparison of the wild-type simulation and a mutant that produces glycine, was performed, which allows the visualization of fluxes differences in both simulations. a part of central metabolism pathway, showing the inactivation of the phosphoenolpyruvate carboxylase ; b another component of the central metabolism pathway showing the inactivation of the isocitrate lyase ; c part of the alternate carbon souirces pathway that clearly shows an increase in flux for the mutant simulation. d part of the co-factor biosynthesis pathway showing the inactivation of the glycine cleavage ; e and f parts of the nucleotide metabolism pathway and inactivation of the phosphoribosylglycinamide formyltransferase  <dig> .



the inactivation of isocitrate lyase  and phosphoenolpyruvate carboxylase , both present in the central metabolism , lead to the necessity of another route for the production of oxaloacetate. it is possible to see that the tca cycle has mostly a prevalence of green colour, which means that the reference simulation, the wild-type, has more flux in those reactions. the other route taken due to these knockouts can be seen in two different pathways, being clearly visible as a chain of red reactions, both in the alternate carbon sources layout  and in the nucelotide metabolism  culminating in the production of glyoxylate, which can be converted to l-malate by malate synthase  and then transformed into oxaloacetate. the inactivation of the glycine cleavage complex  and phosphoribosylglycinamide formyltransferase  <dig>  are necessary to the accumulation of glycine, being produced as a by-product of fprica synthesis. both reactions can be used to recycle glycine, which means that both deletions are essential to the solution.

CONCLUSIONS
in this work, a metabolic network visualization framework was presented, which has the ability to load networks from a variety of formats and display them using a dynamic layout. it provides features for the straightforward creation and editing of these layouts, as well as exportation capabilities. on top of this, it is possible to overlay the network with visual changes, a functionality that allows, for instance, visualizing fluxes in a phenotype simulation, identifying the genetic conditions imposed in a simulation, addressing the comparison of two simulation results, analysing results from strain optimization methods or visualizing the set of elementary modes in a model.

the framework was integrated with optflux, a me framework, by the development of a plugin. this allows me researchers to use the visualization directly from within optflux, and use a series of operations that will allow loading and exporting layouts with a user-friendly interface.

this framework presents itself as a useful tool that can help researchers involved in me projects to have a way of easily addressing the visualization of the metabolic networks they are studying. the ability to dynamically visualize phenotype simulations is an important asset. the combination of visualization with simulation and optimization processes will help researchers to achieve knowledge about the structure and functioning of organisms of interest that was not available before.

while a number of features are planned, an interesting line of future work is the development of tools that allow importing other types of omics data , providing its integrated visualization with gsmms. the general-purpose nature of the core layer of the visualization framework allows the easy development of such tools, providing a good basis for the extension of the proposed software also in other directions.

availability and requirements
the described plugin is included in the base distribution of optflux that can be downloaded and installed from the homepage given below. the site also includes documentation for the plugin in the form of a wiki.

more details:software name: optflux - software for metabolic engineering

project home page:http://www.optflux.org

specific wiki page for the plug-in :http://darwin.di.uminho.pt/optfluxwiki/index.php/optflux3:metaviz

operating system: platform independent

programming languages: java

other requirements: java jre  <dig> .x , glpk or cplex

license: gnu-gpl, version 3



additional file
additional file 1: 
full description of the workflow followed in the case studies, including the full set of instructions to conduct them using 
optflux. all materials needed for the tutorial are available on the url: http://darwin.di.uminho.pt/optflux/suppmaterial/visualization/materials.zip.



abbreviations
cd-sbmlcelldesigner sbml

efmelementary flux mode

fbaflux balance analysis

fdlforce directed layout

gssmscale metabolic model

guigraphical user interface

keggkyoto encyclopedia of genes and genomes

kgmlmarkup language

memetabolic engineering

momaminimization of metabolic adjustment

mvcmodel-view-controller

roomregulatory on/off minimization of metabolic flux changes

sbgnsystems biology graphical notation

sbmlsystems biology markup language

xgmmlextensible graph markup and modeling language

competing interests

the authors declare that they have no competing interests.

authors’ contributions

mr and pv were involved in the identification of requirements, conception of the software architecture and case study selection. mr, an and pv were involved in designing the software and writing the manuscript. an and pv implemented the software and ran the analysis. all authors read and approved the final manuscript.

this work is partially funded by erdf - european regional development fund through the compete programme  and by national funds through the fct  within project ref. compete fcomp-01-0124-feder- <dig> and the fct strategic project pest-oe/eqb/la0023/ <dig>  the work of pv is funded by phd grant ref. sfrh/bde/51442/ <dig> 
