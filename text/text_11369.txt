BACKGROUND
gene knockouts are an important tool used to study gene function in viruses  <cit> , bacteria  <cit> , and other organisms, including model organisms such as mice  <cit> . although the principle of removing a gene in an attempt to discern its cellular role is not new, the recent development of crispr/cas <dig> as a tool for knocking out genes in vivo has revolutionized the field of genome editing and underscores the importance of using knockouts as a tool to study gene function  <cit> . a common experimental approach to knocking out a gene is to simply excise the gene of interest from the target organism’s genome. viruses, however, often contain dna sequences that code for multiple protein products in separate reading frames, called overprinted genes   <cit> . for, example, human immunodeficiency virus type  <dig>  contains  <dig> instances of gene overprinting  <cit> , as shown in fig. 1b. this phenomenon is widespread among different viral families  <cit>  and precludes the excision strategy of knocking out a viral gene.fig.  <dig> examples of gene overprinting in viruses. a outline showing different types of gene overprinting and associated nucleotide and amino acid sequences. gene b overprints into gene a in the same direction but a different frame. genes c and d showcase overprinting in different frames and directions. start codons in nucleotide sequences are shown in green. b genome of human immunodeficiency virus type i  <cit>  with annotated genes. tat and rev splicing is indicated by a solid line




an alternate approach to excising genes is to mutate a sequence in order to insert a premature stop codon in the target gene, which results in a non-functional truncation of the final translated protein. throughout this work, “target gene” refers to the gene we wish to mutate in order to insert a premature stop codon. in fig. 1a, gene a is the target  gene, and gene b is the overlapping gene. to ensure that this truncation retains no function of the wild-type gene, the stop codon should occur as early in the gene sequence as possible. however, the amino acid sequence of the overlapping gene must be preserved in order to experimentally discriminate between changes in phenotype due to changes in the overlapping and target genes. such mutations are possible due to the degeneracy of the genetic code—several amino acids can be coded for by more than one nucleotide sequence  <cit> . however, designing such mutants by hand is slow and non-trivial, especially when mutating many clones or strains of viruses. additionally, changes in restriction enzyme recognition sites that can be used to trace the newly introduced mutations are important experimentally in planning molecular cloning and mutagenesis protocols  <cit> .

restriction enzymes are a class of bacterial endonucleases that specifically cleave dna at a 4– <dig> nucleotide recognition sequence. mutagenesis protocols are frequently designed to add or remove a restriction site as tracers, so that resulting constructs can be analyzed inexpensively for the presence of the desired mutation without having to sequence multiple clones  <cit> . given the diversity and number of restriction enzymes commercially available  <cit> , searching for potential restriction enzyme recognition sites in a given dna sequence by hand is unfeasible. methods for rapid searching of nucleotide sequences for restriction sites have been previously published  <cit>  and are not discussed here. in this work, we introduce pyviko—a tool which automates the process of designing knockout viruses while taking into account changes in restriction enzyme recognition sites and the integrity of the overlapping gene.

implementation
pyviko was implemented in python  <dig> . the python regex module  <cit>  is optional and can be installed to augment the base functionality of pyviko, but is not required to use the software. source code is freely available  <cit>  under the mit license and is thoroughly unit tested prior to each release. releases are available from the python package index  <cit> . a client-side web interface in javascript is available for making single-gene knockouts without installing pyviko  <cit> . extensive documentation for pyviko is available online  <cit>  and as comments in the source code. online documentation is build directly from comments in the source using pdoc  <cit>  and is available without installing pyviko. bug reports should be submitted on the project’s github page  <cit> .

the basic functionality of pyviko is divided into three modules: core, restriction, and mutation. functions for basic nucleic acid sequence manipulation, including reading from and writing to fast-all  files, are included within the core module. the restriction module contains functions to analyze sequences for restriction sites and find changes in restriction sites that result from sequence changes. the mutation module includes functions to find favorable mutations as well as the mutant and overgene classes. the mutant class brings together the three modules and identifies favorable knockout mutants in sequences of interest.

RESULTS
use in interactive and stand-alone scripts
pyviko was created to streamline the process of planning viral mutageneses. each module is designed to be intuitive and extensible to facilitate its use in a variety of applications. figure 2a–b shows the generation of knockouts from a single target and overlapping gene pair in an interactive fashion in a python interpreter. using the sequences of an input gene and its overprinted counterpart, the overlapping sequence is automatically detected and all possible knockouts matching the input parameters are displayed. thus, in the example shown in fig. 2a, the target gene can be knocked out by mutating the initiation codon  to acg without changing the coding capacity of the overlapping gene . alternatively, the tca  codon at index  <dig> of the target gene can be mutated to a stop codon  without changing the coding sequence of the overlapping gene .fig.  <dig> usage of pyviko in stand-alone scripts and web interface. a schematic of sample target  and overlapping  genes used in code examples. b minimal python commands for generating gene knockouts. in this interactive example, “>>>” denotes input into a python interpreter and output is displayed directly below the input on an unindented line. c pyviko input interface  <cit>  including sample gene sequences. d results of analysis for input shown in 




to reach a wider, non-computational audience, this single-gene pair knockout script has also been implemented as a graphical interface in javascript  <cit> . this interface supports generation of knockouts for a gene or pair of genes under various parameters, including requirements for start codon mutants or restriction site changes. figure 2c shows the input interface and 2d shows the output of the analysis for the gene pair shown in fig. 2a. the full mutant sequence for each mutation is shown together with a link to an interface to design further restriction site changes for a particular point mutant.

for experiments requiring the generation of many mutants, pyviko provides a rapid, high-throughput approach to viral mutagenesis. additionally, pyviko supports reading from and writing to files in the universal fasta format to maximize inter-application compatibility. additional file  <dig> contains a python script showcasing the ability of pyviko to generate mutants in a batched fashion, taking input from fasta files and writing mutagenesis results to fasta. additional file  <dig> also shows many of the options available when searching sequences, including filtering for mutants that add or remove a restriction site and including or excluding mutants that perturb the start codon. mutating a gene’s start codon is another feasible option to prevent production of a specific protein. some viruses, however, have been shown to use alternate start codons  <cit> . care should be taken to biologically validate knockouts made using this strategy.

integration with existing tools and extensibility
recent trends toward open-source software in bioinformatics have led to the development of a variety of new python tools for analyzing nucleotide sequences, including biopython  <cit>  and pydna  <cit> . while biopython and pydna both include functions for restriction site identification, neither is designed to analyze restriction site changes as a result of nucleotide sequence mutations. pyviko is designed to solve the problem of mutating overprinted genes, which are most common in viruses but do occur in other organisms, including bacteria  <cit> , mice, and humans  <cit> . unlike other software, pyviko is optimized to analyze multiple overlapping sequences concurrently, examining changes in translated amino acid sequence and restriction sites resulting from changes in nucleotide sequence.

while pyviko is not dependent on existing software for its basic nucleic acid manipulation and restriction site identification functionalities, it is not designed to supersede other general nucleotide sequence analysis programs. rather, pyviko can be used in conjunction with software like pydna and biopython to complement pyviko’s approach to viral mutagenesis. additional file  <dig> contains the script used to collect sequences from genbank for the large-scale analysis discussed in the following section. this script leverages biopython’s entrez module to retrieve viral genomes to be analyzed by pyviko. additional file  <dig> is a python script that retrieves a viral genome sequence  from the ncbi nucleotide database  <cit>  via biopython, generates a knockout for a target overprinted gene  with pyviko, then uses pydna to design primers for molecular cloning.

although pyviko was designed to generate knockouts of viral overprinted genes, the software is generally applicable to any mutagenesis of overprinted genes. additional file  <dig> is a python script containing a variety of examples of mutagenesis design involving overprinted genes, including: mutagenesis of hydrophobic to non-hydrophobic amino acid residues in the target gene, identification of all mutations in the overprinted region that do not change the polypeptide sequence of the overlapped gene, and generating a sequence that scrambles the amino acids of a target gene without changing the amino acids of the overlapping gene.

large-scale functional testing
to validate the approach of pyviko in knocking out overprinted viral genes, we performed a large-scale analysis of annotated viral genomes deposited in the national center for biotechnology information  nucleotide database. using the script included as additional file  <dig>  we collected  <dig>  sequences annotated as complete viral genomes from the ncbi nucleotide database. from these genomes,  <dig>  pairs of overprinted gene pairs were identified and analyzed by pyviko. note that individual genes may appear in more than one pair as a gene may overlap with more than one other gene .

pyviko was able to identify point mutants that added a premature stop codon in the target gene without changing the amino acid sequence of the overlapped gene in  <dig> % of all genes analyzed. many of these mutations added or removed a restriction enzyme recognition site  <cit> , and  <dig> % of all target genes analyzed could be knocked out as above with the additional constraint of a restriction site change. however, the location of the premature stop codon is important for the efficacy of the knockout—a “premature” stop codon close to the end of the target gene could still result in a gene product with some level of function. thus, we decided to further judge the efficacy of pyviko knockouts by examining the first possible premature stop codon in each target gene identified by pyviko.

to quantify the effectiveness of pyviko knockouts, we calculated the percentage of stop codons that could be added within the first  <dig> codons of the target gene. while there is evidence that polypeptides shorter than  <dig> amino acids could have intracellular functions  <cit> , it is highly unlikely that a protein truncated to  <dig> amino acids or less would retain its original function. pyviko identified potential premature stop codons within the first  <dig> codons in  <dig> % of all target genes . requiring a restriction site change, pyviko identified a premature stop codon within the first  <dig> codons in  <dig> % of target genes . these data show that, while requiring a restriction site change does not greatly change the percentage of target genes that can be knocked out, the distribution of first premature stop codons is much wider when restriction site changes are required . it is also possible that the relative truncated length of a knockout is important—for example, a truncated gene coding for  <dig> amino acids is 20% of the final polypeptide length of a  <dig> amino acid protein, but only 2% of a  <dig> amino acid protein. however, a heat map of first-codon knockouts along a unit gene show that over 90% of knockouts are within the first 10% of the coding sequence both without  and with  restriction site change constraints. this is consistent with the conclusion that the vast majority of pyviko-designed gene knockouts will not result in a functional protein product.fig.  <dig> large-scale analysis of viral overprinted genes from the ncbi nucleotide database. a and b show counts of the first position at which a directed point mutation can insert a premature stop codon in the overprinted gene without changing the amino acid sequence of the overlapped gene in each gene pair surveyed. full-size graphs show mutations over the full length of all genes surveyed with a log <dig> scale to ensure visibility of bins with low counts. insets show the first  <dig> codons of each gene with a linear y axis. a shows counts without requiring a restriction site change and  shows counts with a required restriction site change. c and d show positions of the first stop codon mutants from  and  expressed as the ratio of the position of the first codon relative to the total length of the gene in codons. c, as in , shows counts without requiring a restriction site change and , as in , shows counts with a required restriction site change




CONCLUSIONS
in this work, we introduce pyviko, an intuitive and extensible python tool for designing viral knockouts. while the software is platform-independent and does not require any external modules other than python itself, pyviko can also be used with existing python tools such as biopython and pydna to extend its base functionality as shown in the example scripts. pyviko performed well on a test set of over  <dig>  gene pairs collected from viral genomes deposited in the ncbi nucleotide database, identifying a point mutation that could be inserted within the first  <dig> codons of the target gene in  <dig> % of all tested gene-overprinted gene pairs. this shows that pyviko can be used successfully in a wide variety of contexts to facilitate the molecular cloning and study of viral overprinted genes. the complete source code and quick-start guide are included as additional files  <dig> and  <dig>  respectively.

availability and requirements
project name: pyviko

project home pages: https://github.com/louiejtaylor/pyviko, https://pypi.python.org/pypi/pyviko


operating system: platform independent

programming language: python

other requirements: python  <dig>  or higher

license: mit license

additional files

additional file 1: a python script showcasing the ability of pyviko to generate mutants in a batched fashion, taking input from fasta files and writing mutagenesis results to fasta. additional file  <dig> also shows many of the options available when searching sequences, including filtering for mutants that add or remove a restriction site and including or excluding mutants that perturb the start codon. 


additional file 2: the python script used to collect sequences from genbank for the large-scale analysis in fig.  <dig>  this script leverages biopython’s entrez module to retrieve viral genomes to be analyzed by pyviko. 


additional file 3: a python script that retrieves a viral genome sequence  from the ncbi nucleotide database via biopython, generates a knockout for a target overprinted gene  with pyviko, then uses pydna to design primers for molecular cloning. 


additional file 4: a python script containing a variety of examples of mutagenesis design involving overprinted genes: mutagenesis of hydrophobic to non-hydrophobic amino acid residues in the target gene, identification of all mutations in the overprinted region that do not change the polypeptide sequence of the overlapped gene, and generating a sequence that scrambles the amino acids of the target gene without changing the amino acids of the overlapped gene. 


additional file 5: the pyviko web user interface quick start guide, also available at  <cit> . this document explains the use of the pyviko web user interface. 


additional file 6: the pyviko source code, version  <dig> . <dig> . current release available from the python package index  <cit> . 




abbreviations
dnadeoxyribonucleic acid

fastafast-all 

hiv-1human immunodeficiency virus type 1

ncbinational center for biotechnology information

pyvikopython viral knockouts

rnaribonucleic acid

