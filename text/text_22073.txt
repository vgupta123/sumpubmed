BACKGROUND
picky  <dig>   <cit>  introduced several novel approaches to oligo microarray design for large and complex genomes. it went beyond sequence comparison and utilized efficient thermodynamic calculations in a whole genome scale to determine the quality of all probe candidates. it also employed a global optimization strategy to ensure the entire microarray, not just individual probes, are optimized for best sensitivity, specificity and uniformity. since picky can run on all major computing platforms and is computationally efficient, it has been used by several research groups to design their oligo microarrays  <cit> . in particular, the rice microarray project sponsored by national science foundation selected picky to design its whole genome rice microarrays and the xanthomonas oryzae dual rice pathogen microarray  <cit> . independent evaluations of microarray design software indicated that picky generates quality probes  <cit> . the results from a recent quantitative evaluation showed that picky-designed microarray probes are robust and consistent throughout a wide range of temperature and sample concentration  <cit> . in this article we describe some new features added to picky since version  <dig>  release and their algorithmic details; these new features make the latest picky  <dig>  more versatile to microarray users.

a primary difficulty of microarray design for large genomes, like those of rice or maize, is their large gene families. each gene family contains many highly similar genes that are thermodynamically indistinguishable to microarray probes. for example, the largest transposon gene family in rice contains over  <dig> sequences that are more than 90% similar to each other over 90% of their entire length  <cit> . probes designed to detect genes in this family likely will bind to multiple targets -- the keys are how to rationally determine the intended targets and to also avoid all unintended targets. a subset of genes that share common sequence regions may be rolled into a group to share a common probe; these common regions, however, are often highly similar to regions contained in the other genes. the conflicting needs are to target some common regions for shared probe design and to also avoid the other common regions to prevent cross-hybridizations. therefore, it is more difficult than single-target probe design to choose a probe that can be shared but does not cross-hybridize with the other nontarget genes existing in the same gene family. the "shared probe" design feature has been added to picky; it allows genes in a group to be studied as a whole if not individually. this new feature differs from previous methods to discover "non-unique probes"  <cit> : the shared probes are not ranked by sequence level comparisons  but by their thermodynamic comparisons with targets and nontargets, any number of genes can share the same probe, and a gene can share different probes with different sets of genes. generally, an algorithmic method to design probes shared by a few genes is more desirable than the absence of any probe to detect any of the genes. note that some genes sharing a probe may also acquire their own unique probes with different target regions; thus, the identify of genes detected by a shared probe is often resolvable when considering multiple probes. the division of gene families into groups by picky is entirely computational and may not necessarily reflect their evolutionary distances.

a recently published biochemistry study demonstrated that the salt effect on dna annealing stability is generally nonlinear, in contrast to the linear salt effect correction commonly used in melting temperature estimation equations  <cit> . nonlinear salt effect suggests that the optimal microarray probes at different hybridization salt concentrations may not be the same. a more precise nonlinear salt effect calculation is added to picky to enhance the precision of the designed probes under a specific microarray protocol with a known salt concentration. unlike the linear salt effect calculation which depends only on salt concentration, the nonlinear salt effect calculation also depends on dna context. therefore, new code is added to the picky design algorithm to keep track of the dna binding context for each probe candidate.

another frequently occurring issue is that microarrays can seldom keep up with the rapid progress of sequence annotation updates. for example, the nsf 45k rice microarray was designed using gene models from version  <dig> of the rice genome annotation  <cit> . this microarray is still being used by many users, but three newer rice annotations have been released  <cit> ; the latest version  <dig> annotation has much improved gene models  <cit> . it is impractical to keep making new microarrays each time the sequence annotation gets updated. although most probes on the existing rice microarrays should continue to work, some of the probes may no longer function as expected due to conflicts with the newer gene models. it is possible to add new probes to an oligo microarray for newly discovered gene sequences, but it incurs extra cost that should be minimized. a new feature is added to picky to reanalyze existing probes against new sequence information to determine probes that are still valid. invalid probes can be ignored during subsequent data analysis although they cannot be removed from printed microarrays. only genes, new or old, that no longer have valid probes to detect them will need new probes to be added during the next microarray print. therefore, the reanalysis feature reduces the cost of microarray update and maintains microarray quality. this feature may also be used to examine vendor supplied microarrays against users' gene sets to include only valid probes for data analysis, even if different gene sets have been used to design the microarrays.

implementation
shared probe design
to design shared probes, there are three requirements: 1) to be able to efficiently determine common regions among input sequences that are long enough to be targeted by probes; 2) to be able to efficiently distinguish these common regions from other highly similar regions during probe design so they would not be considered as nontargets and prevent probe targeting; and 3) to be able to thoroughly examine the thermodynamic characteristics of probe candidates targeting these common regions to prevent them from cross-hybridizing with nontargets in the whole genome. although it is relatively easy to achieve the first requirement, it is harder to achieve the second and third requirements because common regions among gene family members often vary in their similarity levels -- a slight difference in their mutual similarity can mean either good targets for shared probes or very detrimental nontargets for shared probes.

although it is straightforward to detect common regions between any two sequences, from the perspective of probe design these common regions often randomly overlap, making it difficult to target a probe. an example helps illustrate the complexity. in figure  <dig>  five sequences a-e are shown to share six common regions. region  <dig> is shared by a and b, region  <dig> is shared by b and c, region  <dig> is shared by c and d, region  <dig> is shared by a-c, region  <dig> is shared by a-d, and region  <dig> is shared by all sequences. the common regions overlap each other, e.g., region  <dig> overlaps regions  <dig> and  <dig>  and region  <dig> overlaps all other regions. therefore, a common region may be implicitly divided into more regions, and probes targeting the region should not cross any of its dividing boundaries set by the other regions. for example, probes designed to target the early part of region  <dig> are shared only by sequences a and b, but probes designed to target region  <dig>  which overlaps region  <dig>  are shared by sequences a-d. a probe that targets the boundary area between regions  <dig> and  <dig> does not make a good probe for either region. this example demonstrates that simply finding a long common region is not sufficient to design good shared probes.

many indexing data structures can be used to efficiently discover all common regions among input sequences  <cit> . since suffix array is the chosen data structure in picky, we focus on some of its well-known properties. one property is that suffixes sharing the longest common prefixes must be collated into the same group on the suffix array. in addition, different such groups must be separated by groups of shorter common prefixes that may contain as few as just one suffix. since the longest common prefix  array has already been constructed as part of picky computation  <cit> , the following algorithm suffices to achieve the first requirement, to find all common regions long enough to accommodate probes:

 scan the lcp array, and locate groups of suffixes whose lcp values are greater than the minimum probe size.

 for each of the groups found, check if any of the following conditions is true:

 <dig>  suffix from a nontarget input sequence or the reverse complement of any input sequence is in the group.

 <dig>  either one of the lcp values bordering the group is greater than the maximum allowable length of exact nontarget match.

 if either condition above is true, this group is invalid and is skipped. otherwise, record it in a lookup table indexed by the left-most sequence in the group.

step  <dig> discovers all regions that may accommodate probes. picky allows users to provide a list of nontarget sequences to be avoided during the microarray design; these can be any transcripts that might be encountered by the microarray . picky also considers the reverse-complements of all input sequences to be nontargets; this prevents secondary structure formations on the probes or on their targets. the details of these are described in the picky  <dig>  paper  <cit> . if suffixes from nontarget sequences or the reverse-complements of any sequences are in a group, the group cannot be used to design probes. if a group is bound on either side by overlaps longer than the maximum allowable length of exact nontarget match, then suffixes in the group are overlapping too much with nontarget sequences, thus the group cannot be used either. the probe size and the maximum length of nontarget match are user specified parameters. in the algorithm, steps  <dig> and  <dig> can be combined in implementation and run in linear time. step  <dig> can run in either constant time or logarithmic time depending on whether a hash table or a balanced binary tree is used for the lookup table. the worst-case complexity of this algorithm is thus o, where n is the number of suffixes from all input sequences . figure  <dig> presents an example implementation of this algorithm in c++.

the left-most sequence that is used to record a group is called the host sequence. the span of a group is defined to be its number of members, and the length of a group is the shortest overlap  among all its members. in figure  <dig>  the common regions are represented by the groups hosted on sequences b, c and d as indicated by their thick underlines. in particular, sequence d hosts three different groups representing regions  <dig>   <dig> and  <dig> with span value  <dig>   <dig> and  <dig>  respectively. it is necessary to track the stacking of these groups so probes can be shared by the correct member of sequences and no probe may cross different groups. in figure  <dig>  probes targeting the first part of region  <dig> can only be shared by sequences c and d, but probes targeting region  <dig> or  <dig> can be shared by more sequences. no probe, however, should target any of the stacking group boundaries. the following algorithm efficiently traverses all host sequences and tracks their stacking groups:

 iterate through all host sequences on the lookup table.

 sort groups on a host sequence based on their start position, and then push the very first group onto a stack.

 while the stack is not empty, do one of the following:

 <dig>  if there are no remaining groups for the host sequence, pop the group on top of the stack, process it and add its probe candidates to its probe priority queue.

 <dig>  if the start position of the next group overlaps the right end of the group currently on top of the stack with at least maximum nontarget match length, process the region of the stack-top group up to the beginning of the next group, add its probe candidates to its probe priority queue, and then push the next group onto the stack.

 <dig>  if neither of the above is true, pop the group on top of the stack, process it, and add its probe candidates to its probe priority queue. if the stack is now empty, push the next group onto the stack.

to "process" a group region, we meant that the corresponding region of the group on the host sequence is used to identify probe candidates; this will be discussed shortly. the time to sort groups in step  <dig> is negligible, because only distinct groups long enough to accommodate probes are recorded and few are expected per each host sequence. the three choices in step  <dig> always advance some distance on a host sequence or reduce the stack size. therefore, without counting the time to process a group region, this tracking algorithm takes linear time to run in practice.

in step  <dig> , if the next group overlaps at least maximum nontarget match length with the group currently on top of the stack, then the right end of the next group cannot extend beyond the right end of the stack-top group. in this case we say that the next group covers the stack-top group. to prove this is always true, assume the opposite that a next group goes beyond the right end of the stack-top group but overlaps it with maximum nontarget match length. suffixes of the stack-top group cannot all be also members of the next group because that would extend the stack-top group to the right end of the next group and contradict our assumption. therefore, suffixes of the stack-top group that are not members of the next group must have overlapped at least the maximum nontarget match length with suffixes of the next group, which prevents the next group from even being added to the lookup table based on step  <dig>  of the first algorithm. therefore, a group that covers another group must be entirely within the region of the covered group and must have more members  than the covered group. a priority queue and stack combination can be used to keep track of the various groups on a host sequence: a priority queue is associated with each group and is used to store and prioritize its best probe candidates, while a stack is used to keep track of all stacking groups. for example, host sequence d in figure  <dig> contains three stacking groups. when the group representing region  <dig> is being processed, the groups for regions  <dig> and  <dig> are pushed down the stack as indicated by the underlines. processing on the host sequence never backtracks; thus, after group  <dig> has been processed, only the remaining region of group  <dig> will be processed. group  <dig> will later be skipped because the remaining region of group  <dig> becomes zero after group  <dig> has also been processed. figure  <dig> presents an example implementation of this algorithm in c++.

the final requirement is to process each group region, identify all shared probe candidates and examine their thermodynamic characteristics, to make sure that only probes with the least possibility to cross-hybridize with nontargets will be chosen. most of this requirement has been solved in picky  <dig>  for unique probe design  <cit> . picky  <dig> , however, considers all common regions detrimental. longer ones, as those encountered during shared probe design, will immediately rule out probe candidates targeting those regions. the picky algorithm has been modified to accommodate the shared probe design feature. now, when processing each group region, the same algorithm for unique probe design is used but the known span value of each group prevents group members from being identified as nontargets. therefore, only true nontargets will be screened during the shared probe design process. this modification finally achieves basic requirement  <dig> 

although a large gene family is expected to contain many common regions and produce many shared probe candidates, most of the candidates are not useful because they often imperfectly match some highly similar nontargets in the same gene family. for example, among the  <dig> gene models used to design the nsf 45k rice microarray  <cit> ,  <dig> common regions were identified, which produced  <dig> distinct shared probe candidates. after thermodynamic screening, however, only  <dig> shared probes can be chosen. this example reveals the importance of thermodynamic screening especially for shared probe design -- a sequence comparison method can identify the  <dig> probe candidates but does know many of them may cross-hybridize with nontargets.

as seen in figure  <dig>  a common region may be represented by several disjoint groups and stacking groups . groups that stack on each other may not necessarily be recorded by the same host sequence and may not all be visited during the processing of any particular host sequence . nevertheless, due to the insufficient span value of a covered group, the covered region of the group always triggers a maximum nontarget match length violation and is efficiently skipped during probe design. the covering groups with higher span values will then cover  the skipped region when their host sequences are being processed. in figure  <dig>  when host sequence b is being processed, the group  <dig> region covered by groups  <dig>   <dig> and  <dig> is skipped because the span value of group  <dig> is  <dig> and it cannot prevent extra members in the other groups from being identified as nontargets. thus, only in the early part of group  <dig>  which is not covered by any other groups, can shared probes be designed only for sequences a and b using this host sequence.

nonlinear salt effect calculation
picky uses the nearest neighbor  parameters determined by biochemists in standard buffers to estimate the melting temperature between two dna molecules  <cit> . standard buffers have a salt  concentration of  <dig> m. most microarray hybridization buffers, however, contain less salt. to accommodate the difference, a salt effect correction is added to the equation that calculates the melting temperature. at the time of picky  <dig>  publication, the prevailing appearance of the correction took a linear form in the middle of the following equation:   

after picky  <dig>  publication, a comprehensive study demonstrates that the salt effect on dna melting temperature is generally nonlinear; thus, the commonly used linear salt effect correction predicts melting temperatures that can significantly deviate from the measured values  <cit> . a higher melting temperature prediction error can throw off microarray design precision and reduce the quality of microarray data. this new study suggested that salt effect should be described using a nonlinear equation:   

this new equation uses two terms to correct for salt effects: a linear term which depends on both salt concentration and sequence binding context, and a quadratic term which depends only on salt concentration. the gc in the linear term is the gc content of two binding dna molecules, and it makes the salt effect calculation context-sensitive. all other terms in the two equations above are explained in the cited literature. picky  <dig>  incorporates this new equation and offers both equations for microarray design. if the nonlinear equation is chosen, picky has to dynamically maintain the gc content in its innermost loop of calculation, thus it runs about 1/ <dig> slower than the time it takes when the linear equation is chosen.

using the linear equation, picky always produces the same set of probes at different salt concentrations, because the difference between the linearly predicted target and nontarget melting temperatures is the same even though their values are changing with salt concentrations. picky optimizes its design by selecting probes that can achieve the highest melting temperature differences. because the salt effect term in the linear equation depends only on salt concentration, it is canceled out when two melting temperatures predicted at the same salt concentration are compared. for example, when picky is used to design probes for a set of  <dig> maize sequences, the same set of  <dig> probes is generated at different salt concentrations. it is shown under the "linear probes" column in table  <dig>  this independence on salt concentration can also be seen in figure 4a, where the melting temperature differences between targets and nontargets of 50-mer probe candidates targeting different locations on a sequence are calculated using the linear equation: the temperature differences change with target locations, but not with salt concentrations.

temperature 
temperature 
salt concentrations are shown in millimolar . the "linear probes" are the same but the "nonlinear probes" vary greatly at each salt concentration. comparing the two probe sets, the "same probes" and "overlap probes" columns show the number of their probes that are the same or overlapping. although at each salt concentration the "average" and "medium" target melting temperatures of the two probe sets differ just slightly, the two probes sets do not converge until reaching the  <dig> mm standard salt concentration level.

the nonlinear salt effect equation induces the dependence of picky probe design on salt concentration. as seen in figure 4b, the melting temperature differences predicted by this equation for the same 50-mer probe candidates now depend not just on target locations but also on salt concentrations. as a result, the probe sets selected by picky at different salt concentrations vary greatly; they are summarized under the "nonlinear probes" column in table  <dig>  at each salt concentration, the "same probes" and "overlap probes" columns in table  <dig> compare the probe sets obtained using the linear and nonlinear equations; they show the number of probes between the two sets that are the same or overlap somewhat. about a quarter probes are still different between the two probe sets even at the salt concentration of  <dig> mm which is very close to  <dig> m. it can be seen in table  <dig> that the average and medium predicted target melting temperatures of the two probe sets differ within just 1~2°c throughout the salt concentration range, but probes in the two sets only converge at the  <dig> m standard buffer salt concentration. this is because the nonlinear salt effect equation locally influences individual probe selections under different salt concentrations, although it predicts roughly the same melting temperature average as the linear equation predicts.

reanalysis of existing probes
picky  <dig>  incorporates another new feature to map existing probes against any gene sets and evaluate their thermodynamic properties. there are many applications of this new feature, e.g., to evaluate third party microarray design quality, to characterize existing microarrays against newly annotated gene sets, and to determine pcr primer specificity. to efficiently map probes, picky computes a prefix index table during the construction of the suffix and lcp arrays of the input sequences. this table divides the suffix array into smaller regions that can be independently searched using a binary search algorithm on suffix array  <cit> . picky tries to first locate a suffix that contains a query probe as a prefix, and then expands from the match site to discover all such suffixes. as stated earlier in explaining the shared probe design algorithm, all suffixes sharing the same probe prefix must be collated into the same group on the suffix array, so the expansion is local and efficient. the complexity of the probe mapping algorithm is expected to be o, where m is the probe length, n is the total sequence bases, and x is the index prefix length.

several different outcomes may result for a probe being mapped: it may not be found to target anything in the input sequences; it may be found to target only the user supplied nontarget sequences; or it may be found to target some sequences but also perfectly match some user supplied nontarget sequences or the reverse-complements of any sequences. in all of these cases, the probe is not considered useful. once a probe is mapped onto target sequences and is not found to exactly match nontargets, its thermodynamic characteristics are evaluated by picky. if its target and nontarget melting temperature difference is less than a minimum value set by the users , then the probe is not specific but may still be usable. finally, a probe may be found to target multiple sequences, i.e., it can be a shared probe. picky will sort the query probes based on their classifications and present them on screen using different color coding to indicate their types. a complication is that some probes may overlap each other on their target sites so their colors might be mixed on the screen display; the textual output generated by picky unambiguously describes the type of each query probe disregard whether it overlaps with the other probes or not.

RESULTS
the shared probe design requires a new graphical user interface and output file format to convey the information. figure  <dig> shows an example of how such information is displayed by picky. the target region of a shared probe on gene  <dig> is being viewed. three additional genes  <dig>   <dig> and  <dig> are also being targeted by the same probe. this can be seen from their matching green dna characters. because of dangling end differences  <cit> , their estimated melting temperatures with the shared probe may be slightly different . all detected nontargets of the shared probe are also listed after the four targets and are sorted based on their estimated melting temperatures with the probe. the closest nontarget gene  <dig> has an estimated melting temperature of  <dig> °c which is significantly lower than the 91°c of the targets. the picky design strategy is to widen the melting temperature differences between targets and nontargets, and this is also true for shared probes. when users move their mouse pointer over each of the matching fragments, an expanded alignment beyond the probe target region is dynamically produced to show the similarity between the gene being targeted  and the other gene  at the matching site. there are several other views of picky computation results that are documented in the picky user guide. the probe reanalysis results are displayed using the same interface, but if a mapped probe is not specific, its nontarget list can be very long and the estimated nontarget melting temperatures can be very high. although all nontargets are detected and analyzed, to conserve disk space, the picky output file reports only the closest nontarget of each probe, i.e., the one with the highest estimated melting temperature with the probe. each target sequence sharing the same probe is then listed in the output. the probe reanalysis output also uses the same file format, but some queried probes may not be found to target any sequence.

as reported earlier, picky has been used by many research groups to design their microarrays  <cit> . as part of its quality assurance testing, we have also used it to design microarrays for  <dig> model species. selected results are compared in table  <dig>  similar to many optimization problems, tradeoffs can be made during microarray design. one tradeoff is between the specificity of the probes and the number of probes designed. given different design constraints, picky can design probe sets that are significantly different in size. for example, using its stringent default parameters, picky can only find  <dig> probes for the  <dig> genes in a human gene set; with somewhat relaxed design parameters, picky can then find  <dig> probes for almost all genes in the human gene set. picky has more than  <dig> design parameters, but the ones that most influence probe specificity are the minimum melting temperature difference between targets and nontargets and the maximum allowable exact nontarget match length. if the minimum temperature difference is lowered or the maximum nontarget match length is increased, picky is allowed to choose from more probe candidates that would have been automatically ruled out by more stringent settings. the detail discussion of picky parameters and how they influence its design output is beyond the scope of this article and is provided in the picky built-in help system. the gene sets used to design probes for the  <dig> model species and the picky parameters used to design each probe set reported in table  <dig> can be found on the picky website  <cit> .

two probe sets are designed for each of the  <dig> model species. under "more sensitive design", fewer probes can be found but they need less time to compute. under "more relaxed design", more probes can be found but they require additional thermodynamic comparisons. these probe sets were computed either on a 2-cpu opteron  <dig>  ghz workstation or on a 4-cpu opteron  <dig>  ghz server with slightly higher memory overhead; thus, the computation time spent are comparable between the two machines . the data from this table are also drawn in figure  <dig> 

another tradeoff is between the time picky spent on its computation and the number of probes it designed. this is illustrated in figure  <dig> by using the data from table  <dig>  the cpu time and probe number difference between the two probe sets reported for each species are compared. for example, the smaller of the e. coli probe sets contains  <dig> probes and was computed in  <dig> ×  <dig> =  <dig> cpu-minutes. its larger probe set has / <dig> =  <dig> % more probes but takes / <dig> = 36% more time to compute; thus, the 4% more probes are expensive because they require 36% more time to compute. when its design constraints are relaxed, picky has to consider more probe candidates, which require more thermodynamic comparisons and computation time. the two lines in figure  <dig> indicate that generally more effort is needed to obtain new probes, i.e., the percentage time spent  is often more than the extra probes gained . notable exceptions of this trend are for maize, mouse and human. for these three species, more probes can be gained with relatively less computation time increase. it may be an anomaly with maize because its genome had not been fully sequenced at the time of this test, thus its gene set was limited to expressed sequences. with the mouse and human gene sets, however, this phenomenon suggests that they are more complex than the other genomes because their genes are similar at sequence level but still thermodynamically distinguishable. for example, increasing the nontarget match length from  <dig> to  <dig> and reducing the melting temperature difference from 20°c to 10°c doubled the time to evaluate the human gene set but almost tripled the number of probes that can be found by picky. from an information-theoretical point of view, this suggests that the mouse and human genomes have a higher information content -- the subtle differences among their genes can only be revealed by thorough thermodynamic comparisons  <cit> . the complexity and information content of a genome is not to be taken as its size, e.g., the arabidopsis genome is about the same size as the c. elegans genome, but requires more time to process.

discussion
picky employs a comprehensive thermodynamics analysis to determine the similarity among gene sequences in order to design good microarray probes. this analysis helps picky find gene-specific probes  <cit> . in addition, the equations picky uses to determine thermodynamic characteristics are deterministic. the deterministic design approach in picky means that the commonly used blocking agents for nonspecific bindings such as human cot- <dig> dna, yeast trna or salmon sperm dna are not necessary when using picky designed microarrays. unless their dna sequences are included in the nontarget gene set given to picky during a microarray design, the blocking agents may actually degrade microarray data quality. although many existing microarrays are not designed by picky, users can use picky to evaluate them and determine a subset of the probes to trust. in principle, this even works for microarray experiments that have already been completed; their results may be improved by filtering the data through the probe evaluation process using picky.

although the shared probe design feature is developed for large genomes as a remedy when unique probes cannot be found for certain gene families, it is also possible to combine several gene sets and ask picky to design shared probes among different species. these shared probes can be used in comparative genomics  <cit> , metagenomics   <cit>  or pathogen identification  <cit> . with its default settings, picky minimizes probe sharing by first selecting unique probes, but picky can also be instructed to opt for probes that are shared by more target genes. the shared probe set from picky can then be minimized to detect several known species  <cit>  or used in its entirety to detect as yet unknown species that are phylogenetically related to the species whose gene sets were used for the design  <cit> . for either application, the basic requirement is that a hybridization matrix h is given: the hij entry is  <dig> if probe j can detect species i or  <dig> otherwise. in reality, microarray probes do not exhibit this binary behavior but vary their detection signal strength among different but related species. in this respect, the optimization of the melting temperature difference between targets and nontargets of all picky designed probes enhances their binary nature in detecting species . a recent quantitative evaluation of picky designed probes confirmed this characteristic  <cit> .

CONCLUSIONS
shared probe design is a versatile feature that can increase detectable genes in large gene families and allow cross-genome microarrays to be developed. usually, some genes sharing a probe also have their own unique probes; thus, by considering a combination of unique and shared probes we can still identify genes that lack unique probes to detect them. the nonlinear salt effect calculation expands the probe design sensitivity to another dimension, the salt concentration, and precisely matches the designed probes to specific microarray protocols and hybridization conditions. the microarray reanalysis function provides no-cost improvements to microarray data quality by utilizing improved genome annotations; this is not limited to microarrays designed by picky. an interesting future project will be to reanalyze some completed microarray projects by filtering their existing data through the picky reanalysis function to see if the statistical quality of the filtered data may be improved or some alternative conclusions may be drawn from the results.

authors' contributions
hc wrote the picky software and the manuscript. all authors read and approved the final manuscript.

availability and requirements
project name: the picky oligo microarray design and analysis software

project home page: http://www.complex.iastate.edu

operating system: windows xp or later, mac os x  <dig>  or later, and most linux distributions running on × <dig> compatible cpus.

programming language: c++

other requirements: none

license: the picky project has never received public support and thus depends on commercial licensing fees to sustain its development and maintenance. free academic licenses are provided to academic and nonprofit users after they execute the online license request and provide proof of their nonprofit status. commercial users should contact picky http://picky@www.complex.iastate.edu to obtain commercial license information.

any restrictions to use by non-academics: commercial licenses required.

