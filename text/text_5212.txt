BACKGROUND
it is estimated that two thirds of proteins in prokaryotes and four fifths of those in eukaryotes are multi-domain proteins  <cit> , many of which have important functions in cell regulation and signalling. from a structural point of view, they range from those with significant and stable interactions between domains, which can usually be defined by x-ray and nmr, to those with flexible linkers and few domain-domain interactions that endow them with large conformational freedom. crystallography of multi-domain proteins that have flexible linkers is more problematic. x-ray crystallography and nmr approaches have tended to adopt a "divide-and-conquer" approach, by first defining structures of individual domains, although their structures have often been determined within multi-protein complexes where the relationships between domains are often well defined.

for multi-domain proteins with no structural information, their domain orientations may be predicted through homology modelling. however, homologous multi-domain templates are not always available. furthermore, even if a homologous template exists, its domains might not interact in the same way as the protein to model . to minimize the chance of inferring wrong interaction data from the templates, aloy and russell tried to model putative interactions by assessing residue contacts in the interfaces of known three-dimensional protein structures  <cit> . thus, in addition to homology modelling, there has been increasing focus on ab initio approaches. for instance, wollacott and co-workers  <cit>  modelled domain-domain assemblies by placing the domains at the n- and c-terminal of the linker structure, whose conformation is sampled during the procedure their approach successfully identified near-native assemblies in 50% of the studied cases.

another promising tool for ab initio modelling of multi-domain proteins is docking. rigid-body docking approaches have already shown success in predicting interactions between relatively rigid globular protomers in protein complexes, as seen in the recent capri  blind tests. however, although protein-protein docking could be directly applied to model domain-domain interactions, only a few specific cases have been reported . as an example, vitronectin was reportedly modelled by docking two of its domains  <cit> , but it required a strong inter-domain constraint from a disulfide cross-link. lise and co-workers have developed an approach for docking two domains that are part of the same protein chain  <cit> , using pair-wise residue contact function, which includes structural, physicochemical and evolutionary information, to distinguish the native-like domain assemblies from other solutions generated by standard docking procedures. their work suggests that data-driven docking is useful in modelling domain assembly as well. furthermore, inbar and co-workers  <cit>  have extended the docking approach to multi-domain and multi-molecular assemblies, by using a heuristic that applies hierarchical construction to represent the assembly process and a greedy algorithm to select candidate complexes. the modelling of multi-domain proteins has also further promising applications in the field of modelling protein-protein complexes where any of the components has multiple domains. instead of docking multi-domains directly, the problem can be tackled through divide-and-conquered approaches, which solve the structure of a multi-domain complex by first modelling the orientation of domains within a protein if there are stable relationships, and secondly each domain assembly can then be treated as a protomer for further docking. in this line, ben-zeev et al.  <cit>  applied docking between domains with residue conservation restraints to one of the capri targets , as part of a multi-docking protocol, although with limited success .

in this paper, we describe a new approach, pydocktet, for pair-wise assembly of domains that are connected by an inter-domain linker. in addition to the electrostatics and desolvation energy in the original pydock scoring function  <cit> , which gave one of the best performances for protein-protein docking in the recent capri test  <cit> , an additional pseudo-energy term derived from the end-to-end distance of linkers is incorporated in pydocktet to select the near-native pair-wise domain poses. we also discuss here the dependence of this scoring function on the linker length and on the quality of the domain models used for the docking.

RESULTS
structural analysis of linkers in multi-domain proteins
we begin our analysis by examining the inter-domain peptide region , whose information is applied in the scoring function of pydocktet. the goal is to study the relationship between the linker sequence length  and the distance between the linker ends . we began by compiling inter-domain linkers from multi-domain structures in pdb , with the following requisites: i) the linkers were identified as those polypeptide parts placed between domains defined by pfam  <cit>  ; ii) only structures with a resolution ≤  <dig> Å were used, in order to obtain atomic positions of linkers with greater certainty ; and iii) only linkers joining domains that are in contact  were included. although prediction of two-domain proteins with no contacts between domains is an important modelling problem, it is not the object of our method . the sequence length of the  <dig> linkers in this database varies from  <dig> to  <dig> amino acids. the linker distribution shows a higher frequency for linkers with shorter lengths, while linkers of  <dig> residues or more show lower frequencies .

the average linker end-to-end distances increased almost linearly with sequence length for linkers less than  <dig> residues long . this dependence is similar to the one described for a statistical ensemble of polymer conformations, where the average end-to-end distance obeys a "random walk gaussian chain" distribution that scales with l*n <dig>    <cit> . this is consistent with the fact that we cannot find conformational preferences in the structural data set for linkers of up to  <dig> residues length , and with previous studies showing that most linkers lack secondary structure  <cit> . however, given our broad definition of contacting domain-domain pairs , concern existed that those cases in our data set with very few inter-domain contacts could introduce errors in the derived statistical parameters. in order to disregard this possibility, we removed the  <dig> cases that had equal or less than  <dig> contact residues, finding that the statistical parameters  did not significantly change . we also checked that when removing the additional  <dig> cases that had up to  <dig> contact residues, the statistical parameters were basically the same .

from these average end-to-end distance values and their standard deviations, we have derived a scoring function pydocktet for docking of domain pairs . given the low frequency  of linkers with length larger than  <dig>  the docking sets we used to benchmark pydocktet included only domain pairs that have inter-domain linkers with length between  <dig> –  <dig> residues.

rigid-body docking for domain-domain assembly
we have used docking to rebuild a data set of  <dig> non-redundant proteins formed by two interacting domains . first, we extracted the coordinates of the domains from their x-ray structures, then we separated them and modified all side-chains of the isolated domains with scwrl  <dig>   <cit>  in order to minimize bias from the use of the assembled structures; finally we docked them as rigid-bodies with zdock  <cit> , and scored the docking poses with pydock. docking poses were further rescored with distance restraints derived from the linker database, according to linker sequence length . in order to evaluate the success of our predictions, we have defined an acceptable docking pose as one where the rmsd of one of the domains is ≤ 10Å from the equivalent one in the x-ray structure when the other domain  is superimposed onto that of the x-ray structure . the docking results for all cases, as scored by pydock and by pydocktet, are shown in figure 3a. however, since our goal was to evaluate the success of our scoring function in the identification of the correct domain-domain assemblies within a docking set, we then considered only those cases that had at least one acceptable docking solution within the  <dig>  docking poses generated by zdock . thus, the use of pydock method to rebuild inter-domain interactions gave an acceptable pose in the top  <dig> and top  <dig> ranked solutions in 51% and 63% of these cases, respectively , well over expected by random, and comparable to previous rigid-body tests. when we re-scored the docking poses using linker-length distance restraints with pydocktet, the success rates for top  <dig> and top  <dig> solutions increased to 61% and 78%, respectively . although the cutoff of 10Å rmsd for defining near-native solutions is accepted by the docking community for assessment of predictions as in capri, the resolution of the resulting models might be too low for some functional predictions. therefore, we have also evaluated the success rates for detecting a good solution . if we consider only those cases that have at least one good solution within the  <dig>  docking poses generated by zdock , the pydocktet results  are comparably good . in those cases, pydock alone already had a good performance , reflecting that when the docking method is able to generate good quality solutions, the pydock scoring function is already quite accurate. actually, the restraint-based energy helps especially in those cases where the quality of the docking solutions is not so good .

the use of pydock to identify domain assemblies from docking sets clearly gives well over random scoring, and the introduction of linker-based restraints as in pydocktet further improves the results. of course, for a realistic case, one has to rely on the docking procedure to generate near-native orientations. we have used here the known fft-based docking method zdock, but it is expected that the increasing success of rigid-body docking methods will also improve the predictive rates of pydocktet.

dependence of the predictive success of pydocktet scoring function on linker length
the scoring function of pydocktet uses the average end-to-end distance for every linker length l  as a restraint. it is expected that, as the linker length increases, it will provide a less useful restraint on the selection of docking poses, and therefore the performance of the method will likely depend on linker length. here we analyse the success rates of pydocktet for different linker lengths, considering only those cases of our domain-domain set that have at least one acceptable solution.

we classified linker lengths into five groups: 2– <dig>  5– <dig>  8– <dig>  11– <dig> and 14– <dig> amino acids. as shown in figure  <dig>  pydocktet gave consistently better predictive success rates in top  <dig> solutions than pydock, being the improvement of the restraint-based scoring function particularly significant for linker lengths 5– <dig> . in addition, the overall predictions, both for pydock and for pydocktet, increase with linker size up to linker lengths 8– <dig>  and then, for longer linkers, the performance significantly decreases . according to this, the best scenario for domain-domain assembly by docking and end-to-end restraints would be those cases with linker length up to  <dig> residues.

dependence of the predictive success of pydocktet scoring function on the type of domain-domain interface: docking energy and number of contacts
the scoring function of pydocktet consists of a pseudo-energy term derived from linker end-to-end distances, in addition to the original pydock function that is formed by electrostatics and desolvation energies. we have already shown that pydocktet function performs in general better than that of pydock, so now we will analyze in which cases this improvement is more apparent.

first, we will check whether the pydocktet improvement over pydock depends on the average pydock energy obtained for the pool of docking poses, which is different for each case. for each one of the cases that have at least an acceptable docking solution, we sorted the docking solutions by pydock energy  and computed the average of the best  <dig> energy values. figure 5a shows the dependence of the success rates of pydocktet and pydock on the average energy  of the top  <dig> solutions. the overall success rates of both pydock and pydocktet increase as the average energy value is lower. moreover, pydocktet improves pydock performance in all cases except for those with average energy value between - <dig> and - <dig> kcal/mol , being the improvement particularly good for those cases where pydock alone gave worse performance . thus, as would be expected, the most useful contribution made by tethered domain docking is when the average energy value of the top  <dig> solutions is low.

as for the size of the domain-domain interface, we showed above  that the existence of cases with low number of inter-domain contact residues did not affect the average linker distances and corresponding standard deviations derived from our data set. however, we observed in figure 5b that the docking results actually depended quite significantly on the interface size. figure 5b shows the global success rates of pydock and pydocktet, with regard to the number of contact residues in the interface . it also shows the percentage of cases with acceptable solutions within the docking set . strikingly, zdock found acceptable solutions only in one of the  <dig> cases with less than  <dig> contact residues , which indicates a clear limitation of the fft-based docking generation. this is in line with previous reports relating docking difficulty and interface size  <cit> . for cases with acceptable docking poses, the pydock scoring function also showed worse results when the number of contact residues was small – for the cases with less than  <dig> contact residues, pydock has success rate at 25% whereas pydocktet provides a significantly better success rate at 58%. in summary, the linker-based restraints of pydocktet were able to largely improve the predictive results on those cases particularly difficult for unrestricted docking .

assembly of domains from modelled individual structures
so far we have shown that pydocktet gives excellent performance in assembling domain pairs where the structures of the two domains have been obtained from crystal structures, after separating them and remodelling the side-chains of the isolated domains. however, in real situations the individual domains will have been obtained from independent crystal structures or from homology models. thus we have also tested pydocktet over a docking sub-set of  <dig> cases, in which subunits were modelled from the structure of homologues . as can be seen in table  <dig>  the pydocktet predictions were always better  than those of pydock. indeed, we found eight cases where the top solution is reasonably close  to the x-ray structure, so in about one out of three cases we can have a reasonable trust in the best solution that is picked up by pydocktet.

a the name of the structure is shown with the format: ___

b the best ranking of any acceptable solution from docking the crystal structures. rmsd  of the second domain is shown in brackets. '-' means that there is no acceptable solutions  generated by zdock.

c the best ranking of any acceptable solution from docking the modelled structures. rmsd  of the second domain is shown in brackets. '-' means that there is no acceptable solutions  generated by zdock.

in figure  <dig> we compare the results on the sub-set of domains modelled from homologues, with the same sub-set of domains taken from the crystal structures. when we consider only the cases that have at least one acceptable solution generated by zdock , the success rates of pydocktet for predicting an acceptable conformation in the top  <dig> and  <dig> solutions are 69% and 77%, respectively  . the top  <dig> and top  <dig> success rates for the same sub-set, when coordinates are taken from the crystal structure, are 82% and 91%, respectively  . in some of the cases we use templates with high sequence identity  structures); however this does not significantly affect the results. indeed, if we consider the cases that only have templates with maximum sequence identity of around 60% , the pydocktet success rates for the top  <dig> and  <dig> solutions are both 67% . in addition, if we also include the cases that have templates up to 80% sequence identity  the results do not significantly change either. thus the overall results of domain docking do not seem to depend too much on the details of the models. table  <dig> shows that most of the cases with poor pydocktet predictions  had similarly bad predictions when using the x-ray structures. there is only one case  where results were far worse when using modelled domains than when using the x-ray structures, but these bad results did not seem to arise from low-quality modelling, since the modelled domains were  <dig> Å and  <dig> Å cα rmsd with respect to the corresponding x-ray structures  structures). the important issue is that, in most cases, the pydocktet results we obtained when docking domain models were similarly good to those when docking x-ray structures. moreover, there are even cases where modelled domains yielded better predictive rates than x-ray structures . so in general, the domain models generated in an automatic way seem to be of sufficient quality to get similar docking results as when using the x-ray structures .

comparison to other domain-domain assembly approaches
we have evaluated the performance of pydocktet with respect to other computational methods that have been recently reported for domain-domain assembly. lise et al.  <cit>  tested their contact prediction method by generating  <dig> domain-domain orientations with the docking server gramm-x. they found an acceptable solution  in  <dig> out of  <dig> cases. for  <dig> of these  <dig> cases, the best model  was ranked first by their contact scoring function. we can test pydocktet in this benchmark. however, most of the cases in their benchmark have two linkers between the domains. our method is focused onto two domains joined by a single linker  and it is not directly applicable to domain-domain interactions with two linkers. thus, we have applied our method to the only three cases of their benchmark where the domains are joined by a single linker. when we used the close configurations  we found acceptable solutions  for two cases, 13pk and 1tfb, which were ranked  <dig> and  <dig>  respectively. when we used the open configurations , we found only one case with acceptable solutions, 1jmc. lise et al.  <cit>  used the open configuration  and found an acceptable solution  for only one case, 1tfb, which ranked  <dig>  as a note of caution, the overall results of lise et al.  <cit>  strongly depended on the ability of gramm to generate acceptable docking poses in such small number of alternative poses. another difference between their method and ours that makes difficult the comparison is that they used the criterion of fraction of native contacts above  <dig>  to define the acceptable solutions, while we use here the rmsd  below 10Å. both criteria are used in capri, in combination also with the interface rmsd, but no by separate. ligand rmsd is arguably a more restrictive parameter than fraction of native contacts. for instance, from the last round  <dig> of capri  we can observe a significant number of cases that, in spite of having fraction of native contacts above  <dig> , are incorrect predictions by the global capri criteria . on the contrary, virtually all cases with ligand rmsd below  <dig> Å are correct predictions , and there are even some solutions with ligand rmsd above  <dig> Å that are still acceptable .

inbar et al.  <cit>  recently described their combinatorial docking approach  for multi-domain and multi-molecular assembly. however, they reported only three cases of domain-domain docking : 1a <dig>  1b <dig>  and 1d0n. for all of them they found near-native assemblies within the top  <dig> solutions. however, our method is not directly applicable to these cases, since they have more than two domains .

finally, wollacott et al.  <cit>  recently reported a domain-domain assembly method based on conformational sampling of the inter-domain linker with their rosetta program. although they did not use computational docking, they provided an interesting test set to evaluate the performance of our approach. they divided their benchmark set according to their predictive results. for  <dig> out of  <dig> cases, they had a near-native decoy with rmsd <  <dig> Å within the top five models . we applied our method to  <dig> of these successful cases , and found acceptable solutions for  <dig> of them. the overall results of pydocktet were consistent with the ones we obtained in our data set of  <dig> cases: six cases with an acceptable solution ranked as top one ; nine cases with an acceptable solution within the top  <dig> solutions ; and  <dig> cases with an acceptable solution within the top  <dig> . for another  <dig> cases, they had near-native decoys  within the top  <dig> models, but they did not give exact ranking numbers, so a direct comparison with our method would be difficult. for the remaining  <dig> cases, in  <dig> of them their method did not produce any acceptable solution at all, and in  <dig> of them there was no acceptable solution within the top  <dig> models , so we wanted to check whether our method would be able to improve their results. we applied our method for eight of these difficult cases , and found acceptable solutions for five of them. we found one case with an acceptable solution ranked as top one ; four cases with an acceptable solution within the top  <dig> ; and five cases with an acceptable solution within the top  <dig> . these results are also consistent with the ones obtained in the set of good cases in wollacott et al.  <cit>  and with those in our data set of  <dig> cases. thus, our method failed for some of the cases for which wollacott et al.  <cit>  had excellent results, but succeeded in some of the cases where wollacott et al.  <cit>  did not have good predictions. the global success rate of pydocktet for the top  <dig> solutions  is comparable to the global success rate for the top  <dig> solutions in wollacott et al.  <cit>  , although we have to say in their favour that they used a stricter definition of the acceptable solution.

a the best ranking of the near-native prediction by pydock and pydocktet. the values in brackets are the rmsd value of the predicted solution.

b no solution with rmsd < 10Å in the docking set. we show the best rank of the lowest-rmsd solutions.

c a solution is found with rmsd  <dig> Å that is ranked  <dig> by pydock, and ranked  <dig> by pydocktet.

d the information of templates for modelling domain  <dig>  and  <dig> . the format of the template information is pdb id _chain .

we also performed an additional test on the difficult cases of wollacott et al.  <cit> , by independently modelling the two domains based on different templates. then we ran pydocktet on these independently modelled domains, instead of on the x-ray structures. we excluded two additional cases  because they did not have any suitable homologous template according to our criteria . our final set was formed by the six cases shown in table  <dig>  in four of these six cases, we obtained a reasonable model within the top  <dig> docking solutions as ranked by pydocktet . we have to note that in most of the cases zdock was not able to generate docking solutions with rmsd < 10Å, so we have considered as reasonable other orientations with larger rmsd with respect to the x-ray structure. particularly interesting are cases 1qcs and 1a6q, where pydocktet found acceptable docking solutions with rank  <dig> and  <dig>  respectively. the best solutions for all these cases are shown in figure  <dig>  the success rates are quite encouraging, especially considering that these examples were highly challenging cases for other domain-domain assembly methods. although we need to improve the sampling of docking orientations in order to better modelling these difficult cases, it is clear that the inclusion of distance restraints from linker lengths largely helps to model the assembly of multi-domain proteins.

CONCLUSIONS
we have described here a procedure to build multi-domain proteins from the structure  of their individual domains, using a combination of rigid-body docking, binding energy scoring, and linker-length based distance restraints. the inclusion of linker-based distance restraints largely improves the structural predictions, especially for those cases where binding energy alone is not sufficient to discriminate the near-native conformations. provided that the rigid-body generation method is able to produce acceptable domain-domain orientations, our scoring function  finds the correct assembly within the top  <dig> solutions in about 60– <dig> % of the cases.

