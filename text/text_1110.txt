BACKGROUND
the last decade has witnessed enormous growth in our knowledge of gene sequences. efforts are now being made to put this knowledge into a structural context by determining the structures of proteins associated with all known gene families. protein structure alignment methods are essential for interpreting such data, as they provide a means for detecting evolutionary and functional relationships between distantly related proteins <cit> . in practice, however, the problem of quantifying evolutionary distance beyond what is observable through sequence analysis is far from simple. in particular, it is not clear what measure should be used to compare structural domains, and what threshold should be used to judge if they are likely to be related.

these questions were investigated in two recent studies by sierk and pearson <cit>  and by kolody, et al. <cit> , where a number of structure alignment methods were tested in terms of their ability to correctly identify domains with the same cath <cit>  topology. the sensitivity and selectivity of each structure alignment method was assessed in terms of the ratio of true positives  to false positives . plotting the true positive ratio against the false positive ratio yields the receiver operating characteristic  curve, the area under which can be interpreted as "the probability of making a correct choice" given two observations, one true and one false <cit> . in the context of domain classification, an "observation" corresponds to a pair of structures. in this case, complications arise that make a definitive comparison of methods difficult.

a major problem concerns the distinction between "true" and "false" . in any given domain classification system there are borderline cases where a high alignment score is not actually "wrong", even though the two domains may be classified as having different topologies. conversely, domains classified as belonging to the same topology do not always have optimal alignment scores. in the present work, we modified the roc method in order to reduce the noise introduced by a binary classification scheme. specifically, we constructed a new training set of domains and used two domain classifiers, cath and scop <cit> , for each domain. given this new training set, and a more "fuzzy" definition of truth, we then derived a general score that showed increased selectivity as a function of sensitivity when compared with other methods, even when applied to a different test set <cit>  using cath as the gold standard.

implementation
derivation of a new training set
the training set used in the present work was constructed using both cath and scop domain definitions. in the first step, the sequence boundaries for each domain from cath version  <dig> . <dig> and scop version  <dig>  with a common pdb id were compared; the domains were considered equivalent if 75% or more of the residues of the larger domain were shared. a total of  <dig>  domains were compared in this way, resulting in  <dig>  equivalent domains, for which the cath domains boundaries were then used. a representative subset of the equivalent domains was then derived using the following procedure:

 <dig>  a blast alignment was computed for each pair of domain sequences.

 <dig>  the sequences were combined using single-linkage clustering with an e-value cutoff of  <dig>  to produce an initial set of sequence families.

 <dig>  each initial sequence family was then partitioned by the following iterative procedure:

a. the member with the greatest number of links was chosen, and a new cluster defined with it as the representative and all of its links members.

b. the representative and all its members were removed and step 3a is repeated until there were no members left.

the representatives defined in 3a  define the non-redundant sequence set  which yielded a total of  <dig> sequence unique domains .

a reduced training set was prepared that contained no significant sequence homologs to the test sets . the reduced training set was prepared by comparing each sequence in the full training set to each sequence in the test set using blast; if the sequence identity was higher than 30% and the blast e-value was lower than  <dig> , the domain was removed from the training set. a total of  <dig> domains were removed in this way, resulting in a reduced training set of  <dig> domains. the ash program is released with parameters derived from the full training set. in the following sections, we refer to parameter values optimized on both the full and on the reduced training set.

modified roc curves
the roc curves computed for the training set treat the cath and scop classifications as independent measures of "truth". consider a given query-template pair scoring above a given score threshold. if both measures classify the pair as belonging to the same topology/fold, the true-positive value was increased by 2; if only one of the measures classifies them as "true", both the true-positive and false-positive values were increased by 1; and, if they both classify the pair is "false" the false-positive value was increased by  <dig>  when reporting the ratio of false positives and true positives, the values were normalized by their sum over the entire training set, so the resulting curve had the dimensions of a normal roc curve.

all evaluations performed on the test set used the traditional roc curve procedure, with only cath topology classifications. this enabled direct comparison with the performance reported by koldny, et al.  <cit> .

derivation of an improved scoring function
in the new ash scoring function, we combined two measures of "similarity"  with three measures of "error" :

 score = wnernerrel + wseqfseq - wsassas - wgapgap - wdistdist. 

in this section we will describe each term as it appears in equation  <dig>  the weights are parameters that were used to maximize the area under a roc curve for the training set described above.

the number of equivalent residues  function was introduced previously <cit> . here we used the normalized form, which is a sum over all n aligned residue pairs of a similarity function s:

 nersrel=∑insi <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgobgtcqwgfbqrcqwgsbgudaqhaawcbagaem4uamfabagaemocainaemyzaumaemibawgaaogaeyypa0zaasaaaeaadaaewbqaaiabdofatnaabaaaleaacqwgpbqaaeqaaaqaaiabdmgapbqaaiabd6eaobqdcqghris5aagcbawaasaaaeaacqaixaqmaeaacqaiyagmaawaaewaaeaacqwgobgtdawgaawcbagaemycaehabeaakiabgucariabd6eaonaabaaaleaacqwg0badaeqaaagccagloagaayzkaaaaaiabcycasaaa@48f4@ 

where nq and nt are the number residues in the query and template, respectively. the similarity term is a gaussian function

 sid0=e− <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudaqhaawcbagaemyaakgabagaemizaq2aasbaawqaaiabicdawaqabaaaaogaeyypa0jaemyzau2aawbaasqabeaacqghsisldaqadaqaamaalaaabagaemizaq2aasbaawqaaiabdmgapbqabaaaleaacqwgkbazdawgaaadbagaegimaadabeaaaaaaliaawicacaglpaaadaahaaadbeqaaiabikdayaaaaagccqggsaalaaa@3e4a@ 

where di refers to the distance between two aligned cα atoms, and the width of the gaussian, d <dig>  is a parameter with a default value of  <dig> Å . the optimized weight of the ner term wner was  <dig>  for the full training set and  <dig>  for the reduced training set.

the sequence similarity function is the sum of the product of equation  <dig> and an element of an amino acid exchange matrix a. if ki, li represents the sorted  pair of amino acids associated with aligned pair i, then

 fseq=∑insi∗a∑insi.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwggbgrdawgaawcbagaem4camnaemyzaumaemycaehabeaakiabg2da9maalaaabawaaabcaeaacqwgtbwudawgaawcbagaemyaakgabeaakiabgehiqiabdgeabnaadmaabagaem4aas2aasbaasqaaiabdmgapbqabagccqggsaalcqwgsbabdawgaawcbagaemyaakgabeaaaogaay5waiaaw2faaawcbagaemyaakgabagaemota4eaniabgghildaakeaadaaewbqaaiabdofatnaabaaaleaacqwgpbqaaeqaaaqaaiabdmgapbqaaiabd6eaobqdcqghris5aaaakiabc6cauaaa@4dcf@ 

the derivation of the matrix elements of a are discussed below. the optimized weight of the sequence term wseq is  <dig>  for the full training set and  <dig>  for the reduced training set.

the sas function is proportional to the ratio of the rmsd to the number of aligned residues <cit> :

 sas=100n∑indi2n.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwgbbqqcqwgtbwucqgh9aqpdawcaaqaaiabigdaxiabicdawiabicdawaqaaiabd6eaobaadagcaaqaamaalaaabawaaabcaeaacqwgkbazdaqhaawcbagaemyaakgabagaegomaidaaaqaaiabdmgapbqaaiabd6eaobqdcqghris5aagcbagaemota4eaaawcbeaakiabc6cauaaa@3fe6@ 

the optimized weight of the sas term wsas was  <dig>  for the full training set and  <dig>  for the reduced training set.

the gap term is just the number of "internal" gaps. in order to define "internal" we must first define the alignment boundaries. the beginning  of the alignment was defined to be the first  residue for which the average similarity score over the following   <dig> residues was greater than  <dig> . the optimized weight of the gap term wgap was  <dig>  for the full training set and - <dig>  for the reduced training set.

the dist term consists of "structural descriptors" that do not depend on the alignment. they are combined in a weighted distance:

 dist=|wnrΔnres2+wrgΔrg2+wcoΔco2+wαΔnα2+wβΔnβ2wnr2+wrg2+wco2+wα2+wβ2|,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamxvp5wqsxmqhnxajn0bkvguhdwzzbqegyvzyrwyufgarqqtubsr4rnchbgeagqia8vkikvafgielifelkfelk=iy=hhbbf9v8qqaqfr0xc9pk0xbba9q8wqffeay=bilkvclq=jhqvepeea0=as0db9vqpepesp0xe9fve9fve9gapdbaqaaegacagaaiaabeqaamqadiabaagcbagaemiraqkaemyaakmaem4camnaemidaqnaeyypa0zaaoaaaeaadawcaaqaaiabdefaxnaabaaaleaacqwgobgtcqwgybgcaeqaaogaeuildqkaemota4kaemocainaemyzaumaem4cam3aawbaasqabeaacqaiyagmaagccqghrawkcqwgxbwvdawgaawcbagaemouailaem4zacgabeaakiabfs5aejabdkfasjabdegannaacaaaleqabagaegomaidaaogaey4kasiaem4vac1aasbaasqaaiabdogajjabd+gavbqabagccqqhuoarcqwgdbwqcqwgvbwbdaahaawcbeqaaiabikdayaaakiabgucariabdefaxnaabaaaleaaiigacqwfxoqyaeqaaogaeuildqkaemota4kae8xsde2aawbaasqabeaacqaiyagmaagccqghrawkcqwgxbwvdawgaawcbagae8nsdigabeaakiabfs5aejabd6eaojab=j7ainaacaaaleqabagaegomaidaaagcbagaem4vac1aa0baasqaaiabb6eaojabbkhaybqaaiabbccagiabbccagiabbkdayaaakiabgucariabdefaxnaadaaaleaacqqgsbgucqqgnbwzaeaacqqggaaicqqggaaicqqgyagmaagccqghrawkcqwgxbwvdaqhaawcbagaee4yammaee4ba8gabagaeeiiaaiaeeiiaaiaeeomaidaaogaey4kasiaem4vac1aa0baasqaaiabl2==ubqaaiabbccagiabbkdayaaakiabgucariabdefaxnaadaaaleaacqwi9=vbaeaacqqggaaicqqgyagmaaaaaaqabagccqggsaalaaa@99c0@ 

where the individual descriptors are defined in table  <dig>  the optimized weight of the dist term wdist was  <dig>  for the full training set and  <dig>  for the reduced training set.

the structural descriptor terms used in the ash score are listed. each descriptor is independent of alignment. the optimized weights of each term for the full training set  and reduced training set  are listed in the last two columns.

amino acid substitution matrix
the amino acid substitution matrix was derived from statistics drawn from the training set. the elements of a are defined traditionally, as the log of the observed frequency of aligned residue pairs over the expected frequency:

 a=log⁡2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgbbqqcqggbbwwcqwg4baecqggsaalcqwg5bqecqggdbqxcqgh9aqpcyggsbabcqggvbwbcqggnbwzdawgaawcbagaegomaidabeaakmaabmaabawaasaaaeaacqwgwbacdaqhaawcbagaemieagnaemyeakhabagaem4ba8maemoyaimaem4camhaaagcbagaemiuaa1aa0baasqaaiabdiha4jabdmha5bqaaigbcwgaljabciha4jabcchawbaaaaaakiaawicacaglpaaaaaa@4d2f@ 

where x, y represents an arbitrary sorted  pair of amino acid types. we utilized equation  <dig> in defining the frequency of each substitution:

 px,yobs=∑jm∑inj{sijif0otherwise∑jm∑injsij
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaqhaawcbagaemieagnaeiilawiaemyeakhabagaem4ba8maemoyaimaem4camhaaogaeyypa0zaasaaaeaadaaewbqaamaaqahabawaaiqaaeaafaqaaegabaaabaqbaeqabegaaaqaaiabdofatnaadaaaleaacqwgpbqaaeaacqwgqbgaaaaakeaafaqabeqadaaabagaemyaakmaemozaymaeiikagiaem4aas2aasbaasqaaiabdmgapbqabagccqgh9aqpcqwg4baeaeaacqwghbqycqwgubgbcqwgkbazaeaacqwgsbabdawgaawcbagaemyaakgabeaakiabg2da9iabdmha5baaaagaeiykakcabaqbaeqabegaaaqaaiabicdawaqaaiabd+gavjabdsha0jabdigaojabdwgaljabdkhayjabdeha3jabdmgapjabdohazjabdwgalbaaaaaacagl7baaasqaaiabdmgapbqaaiabd6eaonaacaaameqabagaemoaaogaaaqdcqghris5aawcbagaemoaaogabagaemyta0eaniabgghildaakeaadaaewbqaamaaqahabagaem4uam1aa0baasqaaiabdmgapbqaaiabdqgaqbaaaeaacqwgpbqaaeaacqwgobgtdaahaaadbeqaaiabdqgaqbaaa0gaeyyeiuoaasqaaiabdqgaqbqaaiabd2eanbqdcqghris5aaaaaaa@77af@ 

where kili represents the  pair of amino acids associated with aligned pair i. equation  <dig> essentially means that each amino acid substitution is weighted by equation  <dig>  which is a function of the euclidian distance between the two residues in the ash superposition. the expected frequency is just the product of the individual amino acid frequencies

 px,yexp⁡=pxobs∗pyobs
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaqhaawcbagaemieagnaeiilawiaemyeakhabagagiyzaumaeiieagnaeiicaahaaogaeyypa0jaemicaa3aa0baasqaaiabdiha4bqaaiabd+gavjabdkgaijabdohazbaakiabgehiqiabdchawnaadaaaleaacqwg5bqeaeaacqwgvbwbcqwgibgycqwgzbwcaaaaaa@46b9@ 

where

 pxobs=∑jm∑inj{sijif0otherwise∑jm∑injsij.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaqhaawcbagaemieaghabagaem4ba8maemoyaimaem4camhaaogaeyypa0zaasaaaeaadaaewbqaamaaqahabawaaiqaaeaafaqaaegabaaabaqbaeqabegaaaqaaiabdofatnaadaaaleaacqwgpbqaaeaacqwgqbgaaaaakeaafaqabeqadaaabagaemyaakmaemozaymaeiikagiaem4aas2aasbaasqaaiabdmgapbqabagccqgh9aqpcqwg4baeaeaacqwgvbwbcqwgybgcaeaacqwgsbabdawgaawcbagaemyaakgabeaakiabg2da9iabdiha4baacqggpaqkaaaabaqbaeqabegaaaqaaiabicdawaqaaiabd+gavjabdsha0jabdigaojabdwgaljabdkhayjabdeha3jabdmgapjabdohazjabdwgalbaaaaaacagl7baaasqaaiabdmgapbqaaiabd6eaonaacaaameqabagaemoaaogaaaqdcqghris5aawcbagaemoaaogabagaemyta0eaniabgghildaakeaadaaewbqaamaaqahabagaem4uam1aa0baasqaaiabdmgapbqaaiabdqgaqbaaaeaacqwgpbqaaeaacqwgobgtdaahaaadbeqaaiabdqgaqbaaa0gaeyyeiuoaasqaaiabdqgaqbqaaiabd2eanbqdcqghris5aaaakiabc6cauaaa@7513@ 

in order to avoid over-fitting of the amino acid substitution matrix, cross validation was performed to ensure that the result was not sensitive to the exclusion and any single domain in the training set . this involved computing a different substitution matrix for each domain in the training set, wherein the domain in question was excluded. the unbiased matrix was obtained by rounding each term in each matrix until there were no differences between any two matrices. the final amino acid substitution matrix for the full training set is shown in additional file  <dig> 

ash  <dig>  structure alignment package
in an earlier study we described a web service  that utilizes the double dynamic programming algorithm in conjunction with maximization of the ner score  using a quasi-genetic algorithm <cit> . in the current work, we present a streamlined version of the methodology that is released both as a web service and as a suite of command-line programs, including: a faster version of gash; a streamlined alignment program  for more rapid pair-wise alignment ; a batch version of rash for processing a list of templates , and a utility program for converting pdb-formatted files to the native data structure used by ash . the programs are written in ansi c, and the source code is freely available from the ash webserver <cit> .

several improvements have been made to reduce the computational time of all the above programs:

 <dig>  more efficient integration between local ash and the ner maximization procedures.

 <dig>  optimization of the double dynamic programming routine. in particular, attention was spent on the lower dynamic programming  step, since, in principle, this step must be repeated for every aligned residue pair. we now only invoke the lower dp if the residue pairs in question have the same secondary structure assignment.

 <dig>  the "local environment" of each residue is limited to a sequence window of +/-  <dig> residues.

 <dig>  the default behavior in rash and lash is to skip the crossover step used in gash.

 <dig>  when processing a list of templates using lash you must pre-compute the local environments and store these as text files. this reduces the overhead of repeatedly computing the local environments internally.

together, these improvements reduce the time per alignment for lash by approximately a factor of  <dig> relative to the original gash program.

reference alignment programs
four external structure alignment programs were used directly in this study: dalilite <cit>  was downloaded from the fssp server <cit> ; structal <cit>  was taken from the structal download page <cit> ; fast <cit>  was taken from the fast server <cit> ; ssm  <cit>  was taken from the ssm download center <cit> .

test sets
the test set was taken from kolodny, et al. and consisted of all unique, non-equal pairs of  <dig>  sequence-unique cath domains  <cit> . a subset of this set was used for geometric analysis and benchmarking. for geometric assessment we consider the "challenging" alignment pairs identified by kolodny, et al. for which the cath topology is identical. the resulting test set of structure pairs is significantly smaller  than that used for the domain classification test. however, the query-template pairs have been selected from the full test set based on the fact that only one of the alignment methods tested in kolodny, et al. produced a "good" alignment  <cit> . thus we expect that any systematic differences in the methods will be amplified in our comparison.

RESULTS
roc analysis
using the new training set, we optimized the weights of the new scoring function using a monte carlo procedure. figure  <dig> shows the roc curve for the full training set, for which the area under the curve is . <dig>  in order to put this number into perspective, we examined the highest scoring template for each query. specifically, we evaluated the frequency of making a "false" choice  when only the highest scoring template for a given query was used. there were  <dig> such mistakes out of  <dig>  queries for which a template exists with both the same cath and scop classification . this number was small enough that inspection of the alignments by eye was feasible. in general, the "false positive" pairs appeared to be very similar, in many cases more similar than the highest-scoring "true" template. this result assured us that high-scoring alignments make physical sense, even if they are classified as belonging to different topologies or folds.

as figure  <dig> shows, the area under the curve drops slightly to . <dig> when the training is done on the reduced training set. however, the area remains at . <dig> when applied to the test set, no matter which set of parameters is used, indicating that the parameters have not been over-fit. the difference between ash and the best reported result is 2% for the test set <cit> . while in relative terms this number is quite small, the absolute number of false positives could be significant if a large number of queries were performed.

we also evaluated the roc curve for the sequence similarity term alone. as figure  <dig> shows, this curve indicates a very weak sequence signal among the "true" pairs in the test set. for reference, a random score would be expected to approximate the function y = x. thus, while the sequence term does not provide a large amount of information in this non-redundant test set, it may help in distinguishing between borderline cases. moreover, it provides a link between sequence and structure information for the general cases where sequence homologs have not been excluded a priori.

the matrix elements of the derived substitution matrix were compared with those of the blosum <dig> matrix <cit>  . the slope and correlation coefficient for this plot are . <dig> and . <dig>  respectively. as a reference, we also plot the matrix elements derived from all domain pairs with different cath and scop topology/fold values. the corresponding slope and correlation coefficient are  <dig>  and  <dig> , respectively. this clearly indicates a sequence relationship between members with the same cath topology and scop fold that is weak, yet stronger than that observed between members with different cath topology and scop fold identifiers.

to further investigate the similarity between the proposed substitution matrix and previous work by other groups, our matrix was compared to all  <dig> entries in the aaindex, a database of substitution matrices  <cit> . after centering, and normalizing each matrix, we considered two criteria of similarity: the dot-product and the rmsd of the matrix values. the most similar matrix according to the dot-product was that of gonnet, et al.  <cit>  with a value of . <dig>  interestingly, this matrix was found to be the most accurate of  <dig> different matrices in an assessment by vogt, et al.  <cit> . the most similar according to rmsd was the sdm matrix of prlic, et al.  <cit> , with a value of . <dig>  the sdm matrix was derived by a method similar to ours and found to perform slightly better than that of gonnet, et al.  <cit> . these results suggest that the proposed amino acid substitution matrix may have utility in sequence based alignment studies, a question we intend to investigate in the future.

since we have followed the roc curve procedure used by kolodny, et al. to evaluate our domain classification scheme, it is worthwhile to mention that, in their study, kolodny, et al. state that "the number of disadvantages of using roc curves methodology for comparing structure alignment methods exceeds the number of potential advantages <cit> " they argue, rather, for a direct "geometric" comparison using a well-defined analog function such as the sas score. we initially were also skeptical about roc analysis using a single gold standard, such as cath. indeed, the drop in area from . <dig> to . <dig> when applying the new score to the test set  was initially attributed to inherent limitations in the cath classification scheme, rather than over-fitting on the training set or some other cause. in order to directly investigate this question, we repeated the calculation on the training set using each of the single classifications  separately. to our surprise, the resulting roc areas remained at . <dig>  suggesting that binary classification was not a significant problem. in the next section, we investigate the quality of the alignments themselves using geometric measures.

geometric analysis
in our geometric assessment we compute the average sas and ner scores derived from  <dig> alignment programs: gash, rash, dalilite, fast, ssm, and structal. we use the smaller "challenging" test set of true  matches, as described in methods. if any program failed to produce an alignment, we excluded the query-template pair from the average for all methods, and we recorded the frequency of such "missed alignments" in table  <dig>  in figure  <dig>  we plot the average ner score vs. the average sas score for the geometric test set. since the sas score is an error function, and the ner score is a similarity function, we might expect to see the best program in the upper-left corner and the worst one in the lower-right. while fast performs relatively poorly with regard to both ner and sas, and occupies the lower-right corner the other programs are distributed in a cluster in the upper left and it is hard to pick a clear "winner".

the total cpu usage for  <dig> programs was computed over the geometric test set of  <dig>  query-template pairs. the last column lists the number of query-template pairs for which no alignment was obtained by the method.

with regard to the sas score, structal does the best, in agreement with the findings of kolodny, et al. <cit> , followed by gash; however, when we consider the ner score, gash performs the best, followed by dalilite. rash and ssm perform at an intermediate level in terms of both scores and very similar to each other. the fact that no single program stands out in terms of both ner and sas suggests that they are somewhat independent measures. clearly, care must be used in using a single score or a single class of scores  as a basis for judging alignment quality. the aggregate function used in ash takes this independence into account by combining both similarity measures and difference measures. our overall conclusion regarding geometric analysis is that the "best" alignment method depends on the choice of the geometric measure. moerover, on average, ash, structal, dalilite, and ssm all appear to be nearly equal.

cpu usage
the total cpu required to run lash on all  <dig> ×  <dig> pairs of structures in the test set was  <dig> hours, or . <dig> seconds per alignment on an intel pentium <dig>  <dig>  ghz personal computer . in order to benchmark ash programs against reference programs, a head-to-head comparison using the  <dig>  query-template pairs in the geometric test set was carried out . in this test, fast was the fastest program at . <dig> seconds per alignment, but at a significant loss in terms of alignment quality, as noted above. rash was about a factor of  <dig> slower, at . <dig> seconds per alignment. gash and structal were each about a factor of  <dig> slower than rash, followed by dalilite. in their assessment, kolodny, et al. found ssm to be the fastest program. we also found ssm to be very fast when a single query was run against a precompiled list of templates. however, for the present exercise we wished to run a particular set of pairs of structures. in this particular mode, the existing ssm software was not designed to use precompiled results, which caused a considerable increase in cpu time . since this mode did not reflect ssm performance due to purely technical reasons, the cpu times for ssm were excluded from table  <dig> 

CONCLUSIONS
we have investigated the utility of using the ash structure alignment package to recognize domains with the same cath topology and scop fold classifiers. overall, we can argue that such domains share a distant evolutionary relationship. this can be seen in the strong correlation between the amino acid substitution matrix derived from the aligned "positives" and the blosum <dig> matrix. the low number of false-positives, suggests that the ash score correlates with evolutionary distance beyond the "twilight zone" where sequence alignment methods fail. a close examination of the "false positives" produced by ash suggests that there are some domain pairs that perhaps ought to be considered distant relatives, even though they are classified into different topologies/folds by cath and scop. however, the poor correlation between the substitution matrix derived from different topologies/folds and blosum <dig> suggests that such cases are rare exceptions. our study also shows that ash is competitive with the best programs examined in terms of both geometric scoring and cpu usage.

availability and requirements
project name: ash

project home page: 

operating system: unix-like 

programming language: ansi c

license: protein data bank japan software license, based on freebsd.

any restrictions to use by non-academics: none

abbreviations
roc, receiver operating characteristic curve; cpu central processing unit; pdb, protein data bank; pdbj, protein data bank japan; cpu; rmsd root mean square deviation; e-value, expectation value; ner, number of equivalent residues; ansi, american national standards institute; pc, personal computer.

authors' contributions
ds developed the new scoring function, integrated score with local ash, performed the alignments, and drafted the manuscript. ht wrote local ash and relevant sections of the manuscript. hn conceived of the study and participated in its design and coordination. all authors participated in preparation of the manuscript and approved the final version.

supplementary material
additional file 1
training set. the file contains the cath ids for each domain used in the training set.

click here for file

 additional file 2
amino acid substitution matrix. the file contains the amino acid substitution matrix values derived from the full training set.

click here for file

 additional file 3
false positives and true negatives. for each query, the highest-scoring false positive and the highest-scoring true negative from the training set are listed along with their scores.

click here for file

 additional file 4
amino acid exchange matrix values compared to the blosum <dig> matrix. the values of the ash amino acid substitution matrix derived from true pairs  in the training set are plotted against the corresponding blosum <dig> matrix elements . the corresponding matrix element values derived from false pairs  are shown in red.

click here for file

 acknowledgements
the authors would like to acknowledge david r. westhead and akira r. kinjo for useful discussions.
