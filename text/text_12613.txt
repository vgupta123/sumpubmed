BACKGROUND
a transcription factor is a protein that regulates the expression of its target genes
by physically binding to the promoter regions of these genes. the binding sites of a
transcription factor  naturally share similarity with each other. the common
pattern shared among the binding sites of a tf is called a motif. in general, there
are two approaches to computational motif analysis, de novo motif discovery  <cit>  and transcription factor binding site  search  <cit> . as the name suggests, de novo motif discovery algorithms find
over-represented patterns in sequences without prior knowledge of the binding tfs.
the input to these algorithms is usually the upstream region sequences of genes
putatively co-regulated by one or more common tfs. the output is one or more motifs
or patterns whose instances are over-represented in the input sequences. on the
other hand, a tfbs search algorithm takes binding site sequences of a tf as input.
it learns from these known binding sites and builds a tf model out of them. the tf
model can then be used to scan sequences for putative binding sites. while the two
approaches are tightly connected, we focus on the tfbs search problem and assume
that a tf has known binding sites available.

a typical tfbs search algorithm requires aligned tfbss. this requirement allows
simple representations of tf models. types of tf models include consensus sequences,
position-specific scoring matrices   <cit> , etc. the pssm method is a widely used method among the available tfbs
search algorithms. given aligned binding sites of a tf, the tf model is essentially
a 4×l matrix, where l is the length of the binding sites.
column i of the matrix stores the scores of matching the ith letter in a sequence of length l  to
nucleotides a, c, g and t, respectively. the score of an l-mer is then
calculated by summing up the scores of letter  <dig> through letter l. depending
on the variant of pssm, the score of a at position i can be the count of a
at position i in the known tfbss, the log-transformed probability of
observing a at position i, or any other reasonable number. once
constructed, the matrix of a tf can be stored in a database to scan sequences for
binding sites of the tf in the future without resorting to the actual binding sites.
in fact, many tools  <cit>  depend on matrices stored in at least one of the databases, jaspar  <cit> , regulondb  <cit>  and transfac  <cit> . since a matrix is constructed from aligned binding sites, we cannot
overemphasize the quality of tfbs alignments.

databases such as jaspar, transfac and oreganno  <cit>  contain dna segments bound by tfs. these dna segments can be seen as
tfbss with some irrelevant bases on one or both sides because of the resolutions of
techniques used to obtain tfbss. the dna segments belonging to a tf are therefore
unaligned variable-length sequences. while the dna segments for most tfs in the
jaspar database are aligned, this is not the case for the transfac public and
oreganno databases. about 53%  of the tfs in the transfac public
database  have unaligned variable-length dna segments. moreover, nearly
78%  of tfs having curated dna segments do not have a matrix.
focusing on tfs with variable-length dna segments, about 71%  of
them do not have a matrix. on the other hand, the oreganno database stores
experimentally validated dna segments bound by tfs but does not provide matrices.
about 31%  of the tfs therein have variable-length dna segments. in
the absence of a matrix, to search for binding sites of these tfs using a matrix
dependent tool, one needs to first align the curated dna segments for each tf. in
the rest of this paper, we refer to  dna segments containing tfbss
as  tfbss for simplicity reasons.

in this work, we propose a novel tfbs alignment algorithm named lasagna . the algorithm is based on the
hypothesis that binding sites of a tf share a core  <cit> , a short and highly conserved stretch of dna. hence, a binding site can
be seen as a core with some irrelevant bases on one or both sides. in general,
shorter sites tend to contain fewer irrelevant bases and are easier to align. for
this reason, we progressively align the binding sites from the shortest to the
longest ones. the algorithm further exploits dependence between two positions in a
binding site. dependence between positions has been shown to boost performance of
tfbs search algorithms  <cit>  as well as protein structural motif recognition  <cit> . to our best knowledge, this idea has never been applied to multiple
sequence alignment. we further describe a more sophisticated version, named
lasagna-chip, for aligning peak sequences produced by chip-seq experiments.

to compare algorithms for tfbs alignment, we conduct cross-validation 
experiments on  <dig> binding sites of  <dig> tfs across  <dig> species extracted from the
transfac public database . we compare lasagna to clustalw <dig>  <cit>  and meme  <cit> . being a widely used multiple sequence alignment algorithm, clustalw <dig> was
used to produce gapped tfbs alignments in creating the mapper database  <cit>  as well as to produce both gapped and gapless tfbs alignments in  <cit> . clustalw <dig> and other similar algorithms focus on producing structurally
correct alignments, while other improved algorithms rely on structural or homology
information  <cit> . clustalw <dig> can be viewed as a representative of these algorithms when no
information other than sequences is available. meme, on the other hand, is a de
novo motif discovery tool, whose input is typically regulatory regions of
length  <dig>  bp upstream of the genes presumably controlled by a common tf  <cit> . nevertheless, a motif found in the input tfbss can be used to align the
tfbss. in fact, meme is employed by the pazar database  <cit>  to dynamically align tfbss and generate pssms. we show that lasagna
significantly outperforms clustalw <dig>  and meme .

to scan promoters for new tfbss based on variable-length known tfbss, we couple a
pssm method with lasagna, denoted by lasagna-pssm. that is, the input
variable-length tfbss are aligned by lasagna and a pssm model is built from the
alignment. it is useful to compare an alignment-based tfbs search method to an
alignment-free method. therefore, we further compare lasagna-pssm to sitar  <cit> , which accepts variable-length input tfbss. to our best knowledge, sitar
is the only alignment-free method capable of handling variable-length input tfbss at
the time of writing. cross-validation results on  <dig> tfs whose binding sites can be
located in respective genomes indicate that lasagna-pssm is significantly more
precise at fixed recall rates .
the recall-precision curve also shows that our method is constantly more precise at
any recall rate and more sensitive at any precision.

finally, we demonstrate the application of lasagna-chip to chip-seq data using 38
mouse chip-seq experiments. we show that, assuming the one-per-sequence model,
lasagna-chip is comparable to meme in revealing the motif of the chiped tf or its
cofactor. for both lasagna-chip and meme, the chiped tf motif was found in 31
experiments, while a cofactor motif was found in  <dig> experiments. while the two
methods differ in the rest  <dig> experiments, the found motifs have similar information
content and may belong to unknown cofactors.

methods
we describe our novel alignment algorithm in this section. lasagna utilizes a search
module to align a new binding site with a partial alignment. thus, we introduce the
search module followed by the lasagna algorithm.

the search module
the search module of lasagna is a function learned from a  tfbs
alignment to score l-mers. it considers nucleotide pairs in addition to
individual nucleotides so as to exploit dependence between positions. we
introduce our choice of the search module, the pssm model described in  <cit> . we denote it by pssmka in this work.

suppose that a pssm is constructed from aligned sequences of length l.
the score of letter u at position i is given by 

 mi=logfif, 

 where fi is the probability of observing letter u at position
i and f is the background probability of
seeing letter u. similarly, the score of a pair of letters
 at position  is given by 

 mi,j=logfi,jf, 

 where fi,j is the probability of observing nucleotide pair
 at position  and
f is the background probability of seeing
the pair. the score of s, a sequence of length l, is then 

  pssmk=∑i=1lmi+∑k=1k∑i=1l−kmi,j, 

where si denotes the ith letter of s, j=i+k and
k is the scope parameter defined in  <cit> . the parameter k controls how far apart a pair of
nucleotides can be. when k= <dig>  only adjacent nucleotide pairs are
scored. we define pssm0=∑i=1lmi, that is, we do not score nucleotide pairs when
k= <dig> 

our search module is a variant of . let 

 mi′=minxmiifuis the gap lettermiotherwise 

 and 

 mi,j′=minx,ymi,jifuorvis the gap lettermi,jotherwise. 

 the search module is defined as follows: 

  pssmka=∑i=1lmi′+∑k=1k∑i=1l−kmi,j′, 

where superscript a denotes alignment as this module is used in our alignment
algorithm.

the lasagna algorithm
the algorithm is based on the idea that the binding sites of a tf share a common
core, a conserved short dna sequence. a binding site can then be seen as a core
with a few irrelevant bases on one or both sides. assuming that each binding
site fully contains the core, the shorter a binding site, the fewer irrelevant
bases it contains. therefore, we progressively align the binding sites by
aligning the shortest binding site with the already aligned binding sites until
all the binding sites are aligned.

the algorithm takes a set of unaligned binding sites, u, and parameter
ka as inputs. let a denote the set of aligned binding sites.
a binding site in a may have gap letters added to one or both ends as a
result of the alignment. the algorithm works as follows: 

 <dig>  initialize a to {s}, where s, the
seed site, a shortest binding site arbitrarily chosen from
u. remove s from u.

 <dig>  

 build pssmkaa from a. let the length of this pssm be
l.

 remove the shortest binding site s from u.

 create s, the augmented sequence of s, by adding
l− <dig> gap letters to both ends of s.

 score each l-mer of s by pssmkaa to find the highest scoring one.

 let s be its reverse-complement and repeat c–d.
that is, the opposite strand is considered.

 <dig>  add s to a if the highest scoring l-mer
resides in s. otherwise, add its reverse-complement to a. gap
letters are added to one or both ends of sequences in a. this ensures
that they are all of the same length and each column of the alignment has at
least one non-gap letter.

 <dig>  repeat 2– <dig> until u is empty.

in step 2b, there may be more than one shortest binding sites in u. to
break the tie, we use pssmkaa to scan each of the shortest ones. the
“s” containing the highest scoring l-mer is
removed from u to align with sequences in a. in the unlikely
case of two or more shortest binding sites in u sharing the same
highest score, one is arbitrarily chosen. figure 1
illustrates an iteration of the algorithm.
= <dig> .  the
aligned binding sites in a and the unaligned ones in
u. the shortest binding site is in bold.  the
sequence logo  <cit>  of the pssm built from a aligns with the augmented
sequence - - - - - - - - - tttcccgccaa - - - - - - - - -, where the
matched portion is in bold.  the updated a and
u, where the newly added binding site is in bold.

an alignment may be trimmed before building a pssm. we describe one way of
trimming aligned tf binding sites using two simple measures. let l be
the length of the aligned binding sites. we first compute and denote the
percentage of non-gap letters at position i of the alignment by
ci, for i= <dig> ,…,l. the information content  at
each position is then computed with small sample correction described in  <cit> . that is, 

 ici=max <dig> +∑u∈{a, c, g, t}filog2fi−ê, 

 where i∈{ <dig> ,…,l}, ni is the number of non-gap letters at position i and ê gives the approximated sampling error. let cmin and icmin be the cutoff thresholds. the alignment is examined from the left
end to the right until the first position j satisfying both cj>cmin and icj>icmin is encountered. the positions preceding j are trimmed
off. the trimming is similarly applied to the right end.

lasagna for chip-seq data
although lasagna is not specifically designed as a de novo motif
discovery algorithm, a more sophisticated version, named lasagna-chip, is
capable of handling chip-seq data. here, we refer to the previous section and
describe the additional steps that are necessary for aligning chip-seq peak
sequences. the flowchart in additional file  <dig> gives an
overview of lasagna-chip.

before aligning chip-seq peak sequences, each sequence is clipped to  <dig> bp
surrounding the signal peak. this is a common practice since, for most peak
sequences , the actual tfbs is usually found within  <dig> bp of the called
peak  <cit> . in step 2a, we trim the partial alignment a if it contains
more than two sequences. unlike tfbss found in databases such as transfac, even
after clipping, a peak sequence contains much more irrelevant bases flanking the
core. the trimming procedure described in the previous section is used, where
cmin  is set to the mean ci  over all the columns of a. the resulting alignment is further
trimmed by ic such that it has at most  <dig> columns and the columns on both ends
have positive ic. in step 2b, if there are more than  <dig> shortest binding sites in
u. only  <dig> are arbitrarily chosen to break the tie by similarity to pssmkaa.

the alignment a obtained by the modified procedure is further refined as
follows: 

 <dig>  set t to a trimmed to l columns as
described above.

 <dig>  build pssmkaa out of t.

 <dig>  initialize r to {}, the refined partial alignment.

 <dig>  for each peak sequence s, 

 create s, the augmented sequence of s, by adding
l− <dig> gap letters to both ends of s.

 score each l-mer of s by pssmkaa to find the highest scoring one.

 let s be its reverse-complement and repeat a–b.

 add s to r if the highest scoring l-mer
resides in s. otherwise, add its reverse-complement to r. gap
letters are added to one or both ends of sequences in r.

 <dig>  set a to r and repeat 1– <dig> until the sum of
ic across columns of t does not change in  <dig> iterations.

for chip-seq peak sequences, the shortest sequence may miss or contain only a
fraction of the core. hence, using the shortest sequence as the seed
site sometimes results in an alignment with less ic. for this reason,
five additional sequences are arbitrarily chosen as the seed site to
produce  <dig> additional alignments. among the  <dig> alignments, the one with the most
ic after trimming is chosen as the final alignment.

scoring a putative binding site
although a pssm suggests the length of a putative binding site, we do not
restrict the length of a candidate binding site to the length of the pssm. a
putative binding site could be of any reasonable length. if a true binding site
is flanked by a few irrelevant bases, this sequence should be given a relatively
high score compared to those of non-binding sites. therefore, to score a
putative binding site s, we slide s through the pssm as
described in the previous section. the score of sequence s is given by
  scoreks=maxi∈{ <dig> ,…,l+ls−1}pssmks), 

where l is the length of the pssm, ls is the length of s, s denotes the augmented sequence of
s with l− <dig> gap letters on both ends and pssmks is defined in .

RESULTS
comparison of alignment algorithms
data sets
we downloaded all the tf binding sites from the transfac public database
. the binding sites were grouped by species and tf. binding
sites having less than  <dig> nucleotides were discarded. tfs of each species
were filtered such that each tf has at least  <dig> binding sites. this ensures
that each tf has enough binding sites to construct a pssm. the numbers of
tfs and tfbss are listed in table  <dig> 


1


2

 <dig>  the total number of tfs.

 <dig>  the total number of tfbss.

to facilitate experiments, we planted each tfbs in a  <dig> base random
sequence simulated by a first-order markov chain of the species in question.
except for saccharomyces cerevisiae, the markov chain of a species was
learned from promoter sequences in the ucsc genome browser database  <cit> . for saccharomyces cerevisiae, the promoter sequences were
retrieved from the scpd  <cit>  using the yeast gene list in eugenes  <cit> .

performance assessment and evaluation metrics
since the purpose of aligning tfbss is to construct a pssm, the quality of an
alignment is best measured by the search performance of the pssm. the
performance of a tfbs search method is evaluated by ν-fold cv.
consider a tf with n binding sites. the n tfbss are first
divided into ν sets, each of which contains ⌊nν⌋ or ⌊nν⌋ +  <dig> tfbss. at each iteration of the ν-fold
cv, one of the ν tfbs sets called the test tfbs set,
ptest, is left out. the rest of the tfbss are aligned to build a
pssm. each test tfbs in ptest is then planted in a  <dig> base random sequence and scanned
by the pssm, scoring each l-mer, where l is the length of
the test tfbs. we score both the forward and reverse strands of an
l-mer and assign the higher score to it. an l-mer is
considered a hit if it shares more than ⌊l/2⌋ bases
with the test tfbs. the l-mers can then be divided into two sets,
h and n, where h is the set of hits and
n is considered the set of non-binding sites. the score of the
test tfbs is the highest score of hits in h. for each test tfbs
t∈ptest, we find its rank relative to all the non-binding sites in
n. formally, the rank of binding site t equals 1+|{s∈n|scoreks≥scoreks}|.

after the ν-fold cv, we end up with n ranks, each of
which corresponds to a tfbs. we use the area under the roc curve  to
gauge the quality of alignment. the roc curve is a plot of true positive
rate  against false positive rate , displaying the trade-off
between tpr and fpr. we refer readers to  <cit>  for an introduction to this metric. in this study,
ν= <dig> for all the cv experiments.

comparison with clustalw2
in general, gapless alignment is preferred over gapped alignment for aligning
tfbss. because of the nature of clustalw <dig>  the alignment of tfbss may
contain gaps in the middle of some binding sites. this is disadvantageous to
clustalw <dig> as the pssm method does not allow insertion of gaps into the
sequence being scanned. hence, we turned off gaps by setting the gap opening
penalty parameters to a large value, i.e., we set both
gapopen and pwgapopen to
 <dig>  indeed, results indicated that overall the “gapped”
clustalw <dig> performs slightly worse than the “gapless” variant
. for both lasagna and clustalw <dig>  parameter
ks in eq.  <dig> was searched from  <dig> to min{ <dig> lmin−1} for each tf and the one producing the highest auc is
used, where lmin is the minimal length of the tfbss. for lasagna, parameter
ka of the lasagna algorithm was set to ks as the two parameters are closely related.

we conducted 10-fold cv on each tf. the overall roc curves are shown in <dig> tfbss of  <dig> tfs. it shows that lasagna has invariably higher true
positive rate than clustalw <dig>  the auc score was calculated for each tf and
for each method. to gauge the significance of difference, the wilcoxon
signed-rank test  <cit>  was performed for each species. the tests showed that lasagna is
consistently better than clustalw <dig> across the  <dig> species. table  <dig> shows the test results. overall, lasagna performed
significantly better than clustalw <dig> in terms of auc scores. the species-wise
p-values shows that lasagna is significantly better 
than clustalw <dig> for aligning tfbss of all the  <dig> individual species.
left panel shows the curves at low false positive rates, from  <dig> to
 <dig> . the right panel presents the curves at false positive rates
from  <dig>  to  <dig> . the three methods are indistinguishable when the
false positive rate is greater than  <dig>  and hence the region is not
shown. we note that the vertical axes of the two panels are on
different scales.
clustalw2


1


2


3

p
-value

4

 <dig>  number of tfs on which lasagna performs better than
clustalw <dig> 

 <dig>  number of tfs on which lasagna and clustalw <dig> have the same
performance.

 <dig>  total number of tfs for a species.

 <dig>  wilcoxon signed-rank test p-value.

 to better understand the results, we split the  <dig> tfs into two groups. one
contains tfs on which lasagna performed better than clustalw <dig> and the other
contains the rest of the tfs. three factors are examined for each tf. they
are the number of tfbss, the mean and standard deviation of tfbs length. for
each factor, we looked for difference between the two groups. table  <dig> shows the comparisons. it can be seen that lasagna
produces better alignments when a tf has fewer binding sites but the
difference is not significant. the mean and standard deviation of tfbs
length are the two more important factors. we believe that lasagna is
well-suited for aligning tfbss that are longer and more variable in length.


comparison with meme
the meme tool in the meme suite  <dig> . <dig> was used. the parameter
minw, minimal width of motifs, was set to the
smaller of  <dig> and the minimal length of input tfbss. the option
revcomp to search the reverse strand was turned
on. finally, the parameter minsites was set to the
number of input tfbss since a common motif is supposed to appear at least
once in each tfbs. to ensure that meme functions properly, binding sites
shorter than  <dig> bases are padded with gap letters since genomic locations are
not available for most tfbss.
lasagna and clustalw2


1


2

p
-value

3

 <dig>  lasagna performed better than clustalw <dig> on tfs in this
group.

 <dig>  clustalw <dig> performed better than or equal to lasagna on tfs in
this group.

 <dig>  wilcoxon signed-rank test p-value.

 <dig>  number of binding sites for each tf.

 <dig>  standard deviation of binding site length for each tf.

the experiments were carried out in the same manner as the clustalw2
experiments. the overall roc curve in figure 2
indicates that lasagna has consistently higher true positive rates than meme
across different false positive rates. the overall and species-wise
comparisons between lasagna and meme in table  <dig> show
that lasagna performed significantly better than meme. to gain some insights
into the difference between lasagna and meme, we similarly examined the
three factors used to compare lasagna and clustalw <dig>  as seen in table  <dig>  the number of input tfbss is the only significant
 factor out of the three. the reasons are
not clear but may be investigated in the future. moreover, it will be
helpful to identify other  factors that can better
explain the performance difference.


1


2


3

p
-value

4

 <dig>  number of tfs on which lasagna performs better than meme.

 <dig>  number of tfs on which lasagna and meme have the same
performance.

 <dig>  total number of tfs for a species.

 <dig>  wilcoxon signed-rank test p-value.
lasagna and meme


1


2

p
-value

3

 <dig>  lasagna performed better than meme on tfs in this group.

 <dig>  meme performed better than or equal to lasagna on tfs in this
group.

 <dig>  wilcoxon signed-rank test p-value.

 <dig>  number of binding sites for each tf.

 <dig>  standard deviation of binding site length for each tf.

distribution of ks
in additional file  <dig>  for lasagna, clustalw <dig> and
meme, we show the distribution of ks for a tf by species and conserved domain. overall, we observe
that small values are preferred for all three methods. by visual inspection,
lasagna appears more similar to meme than clustalw <dig> in the usage of
ks. it can be seen that the usage of ks differs among different conserved domains. related conserved
domains such as zf-h2c2_ <dig> and zf-c2h <dig> display similar patterns. this is not
surprising as conserved domains in a protein are often computationally
predicted. hence, a protein is likely to possess related conserved domains.
while overall the distributions seem method-dependent, we observe that, for
zf-h2c2_ <dig> and zf-c2h <dig>  the distributions center around  <dig> across all three
methods. finally, we note that these observations are preliminary and more
tfs are needed to draw statistically sound conclusions.

comparison of tfbs search methods
data sets
to compare with an alignment-free tfbs search method, sitar,  <cit> , we retrieved real promoter sequences embedding tfbss.
specifically, we followed the curated location of each binding site in the
transfac public database  to retrieve the 1000-base sequences
flanking the binding site. we discarded binding sites that cannot be found
in the proximity of the curated locations. the retrieved binding sites were
grouped by tf and tfs having less than  <dig> binding sites were removed. after
filtering, we ended up with  <dig> tfs and  <dig> binding sites. a tf may be
present in more than one species as homologs and hence the binding sites of
a tf may be located in genomes of multiple species. the species and
respective numbers of binding sites are shown in table  <dig> 
public database

1
 <dig>  total number of tfbss.

performance assessment and evaluation metrics
to compare with sitar  <cit> , we adopt the same ν-fold cv process used to
compare lasagna with clustalw <dig> and meme. however, we do not assume that a
tfbs search method scores all the l-mers in a promoter sequence,
where l is the length of binding sites. instead, a tfbs search
method scans a promoter sequence and predicts a list of binding sites with
respective scores. the predicted binding sites may be of different lengths,
which is the case for sitar.

we describe how a hit is determined. let the length of a predicted binding
site be l and the length of the test tfbs in question be ls. the predicted binding site is considered a hit to the test
tfbs if the overlap between the two sequences is more than ⌊ls/2⌋ bases as in  <cit> . in case this is not possible, i.e.,
l≤⌊ls/2⌋, the predicted binding site must be embedded in the
true one to be deemed a hit.

using the n ranks of tfbss from ν-fold cv, we compute
recall , precision and the fβ-measure, where β= <dig>  as in  <cit> . let the recall rate be r. the number of tfbss recalled
by the method is pt=n×r. let the number of non-binding sites
or false positives introduced be pf. the precision is given by ptpt+pf, while fβ=precision×recallβ2×precision+recall.

comparison with an alignment-free method
we conducted 10-fold cv on the aforementioned  <dig> tfs. the pssm method
dependent on lasagna  was compared to sitar  <cit> . lasagna considered both strands of a sequence when aligning
binding sites. the parameters ka=ks were determined in the same way as in comparing lasagna to
clustalw <dig>  an alignment was trimmed with cmin= <dig>  and icmin= <dig> before constructing a pssm as described in the method
section on the lasagna algorithm. the pssm method uses a cutoff score to
predict tfbss. the cutoff score is set to the minimal score of the
constituting binding sites of the pssm. the sitar method has a mismatch
parameter and the maximal value allowed by its webtool is  <dig>  we searched in
the range from  <dig> to  <dig> to find the mismatch value giving the highest
fβ-measure for each tf.

in terms of the f β, no significant difference was found between the two methods
. to ensure a fair comparison, we fixed the recall rate for each
tf and compare the precision achieved by lasagna-pssm and sitar. the recall
rate was set to the lower of the recall rates attained by lasagna-pssm and
sitar. the tf c-jun  was excluded from comparison because sitar
did not recover any tfbs. figure 3a shows the plot of
precision by lasagna-pssm against that by sitar. at fixed recall rates,
lasagna-pssm is more precise than sitar on  <dig> out of  <dig> tfs
. figure 3b shows the plots of precision against recall based on all the
recalled tfbss by each method. it can be seen that lasagna-pssm is
constantly more precise than sitar at the same recall rate. moreover,
lasagna-pssm recovered substantially more tfbss than sitar at the same
precision.
 scatter plot of precision by lasagna-pssm against
precision by sitar at the same recall rate for each tf. each point
corresponds to a tf. seventy-three percent  of the tfs
are above the reference line, indicating that lasagna-pssm is more
precise for the  <dig> tfs.  plots of precision against recall
for lasagna-pssm and sitar based on all the  <dig> tfs.

results reported in  <cit>  showed that sitar is highly precise and sensitive. although sitar
accepts variable-length binding sites, all the experiments presented in  <cit>  used fixed-length binding sites as inputs. it is therefore not
clear how sitar performs on tfs having variable-length binding sites. it is
also not clear whether sitar preprocesses highly variable-length binding
sites as this was not stated in  <cit> . these issues however are not the focus of our work.

application of lasagna-chip to chip-seq data
to demonstrate the use of lasagna-chip on chip-seq data, we retrieved mouse
chip-seq data produced by the encyclopedia of dna elements  project  <cit>  from the ucsc genome browser  <cit> . all the  <dig> peak files in the narrow peaks format that matches
pattern
http://hgdownload.cse.ucsc.edu/goldenpath/mm9/database/wgencode*tfbs*pk*were
downloaded on oct.  <dig>   <dig>  where “*” is the wildcard character
matching zero or more characters. these files give signal peak location besides
start and end for each peak and hence the corresponding signal files do not need
to be processed by a peak-finding algorithm. four distinct cell types and 17
distinct target tfs are present in the  <dig> chip-seq experiments. additional file
 <dig> lists, for each chip-seq experiment, the cell,
target tf, number of peaks as well as the minimum, maximum, mean and standard
deviation of peak length. we observe that the peak length varies greatly. the
mean peak length can be as long as  <dig>  while the highest standard deviation is
nearly  <dig> 

it is useful to know if lasagna-chip is able to align peak sequences and reveal
the motif of the chiped tf. to align peak sequences, parameter ka was searched from  <dig> to  <dig> to obtain the alignment with the highest
ic. meme was also used to align peak sequences because it is often the choice of
method. in fact, meme is used by  <dig> out of  <dig> tools compared in  <cit>  for chip-seq data analysis. the meme parameters are described in
section comparison of alignment algorithms, where the one-per-sequence model is
assumed. to ensure that both methods finish within reasonable time, for each
experiment, we randomly sampled  <dig> peaks for alignment. we did not distinguish
large peaks from small ones because chip-seq experiments require large numbers
of cells and hence “a small peak could represent very strong binding in
only a subset of the cells”  <cit> .

for each alignment, we searched for the resulting motif in  <dig> uniprobe mouse
motifs and  <dig> motifs derived from all the matrices in the transfac public
database. the search was accomplished by software tomtom  <cit> . we used pearson correlation as the distance measure, required a
minimal overlap of  <dig> nucleotides, and set the e-value cut-off to  <dig>  additional
file  <dig> shows, for each chip-seq experiment, the
sequence logos of motifs found by lasagna-chip and meme. the matching motifs
found by tomtom are listed under each sequence logo  <cit>  by e-value. in case more than  <dig> significant motifs were found, only
the  <dig> most significant ones were shown. the one matching the chiped tf is
highlighted in yellow for each chip-seq experiment.

we first notice that overall the motifs found by lasagna-chip and meme are very
similar by visual inspection. no significant difference is observed in terms of
motif ic . for both lasagna-chip and meme, the chiped
tf motifs were found for  <dig> experiments. among the other  <dig> experiments are one
myb in mel cells, all the ets <dig> in ch <dig> and mel cells, one jund in mel cells, one
max in c2c <dig> cells, all the tbp in ch <dig> and mel cells. interestingly,
lasagna-chip and meme differ only for  <dig> out of these  <dig> experiments. they are one
ets <dig> in ch <dig> cells, one max in c2c <dig> cells and two tbp in ch <dig> and mel cells.
although lasagna-chip and meme differ in these cases, the found motifs still
warrant further analyses. for instance, the motif for ets <dig> in ch <dig> cells found
by lasagna-chip resembles the secondary motif of gabpa, which is a known
paralog.

for the other  <dig> out of the  <dig> experiments, lasagna-chip and meme produced similar
motifs. the one found for myb in mel resembles those of gata proteins. this
agrees with a recent study reporting that myb and gata- <dig> cooperatively regulate
il- <dig> by direct binding to a conserved gata- <dig> response element  <cit> . since this motif is based on  <dig> peak sequences, it is likely that
the two proteins similarly regulate other genes in mel cells. the motif for ets1
in mel cells also matches those of gata proteins. cooperation between ets <dig> and
gata- <dig> in regulating il- <dig> was also suggested  <cit> . finally, while the motif for jund in mel cells matches two motifs in
the transfac and uniprobe databases, the matches are likely false positives
since no literature support was found.

while it is not specifically designed to be a de novo motif discovery
method, lasagna-chip aligns all the peak sequences and finds the most
informative motif. the assumption that a motif instance is present in each peak
sequence may not hold for some experiments. because of several possible binding
models  <cit> , two or more motifs may be present in subsets of the peak sequences.
discovery of more than one motif will be enabled for lasagna-chip in the near
future.

lasagna is simple and effective
unlike meme and similar methods, the order in which the input sequences are
aligned is crucial to lasagna and clustalw. clustalw relies on a guide tree
based on pairwise alignments to decide the order. lasagna, on the other hand,
depends on the length of a sequence and its similarity to the partial alignment.
lasagna-chip is well-suited for a tf whose shortest site misses the core or
contains only a fraction of it. we, however, observed no significant difference
between lasagna and lasagna-chip on tfbss in the transfac public database. this
is because, for these tfbss, a shortest site often fully contains the
core.hence, our assumption holds true in general.

for chip-seq data, the assumption that short sequences contain less irrelevant
bases flanking the core may not hold. however, we observe that, under the
one-per-sequence model, lasagna-chip performed comparably well to meme in
aligning chip-seq peak sequences. we attempted other orders such as from the
longest sequence to the shortest one and found that aligning the shortest
sequence first does have its advantage . also, we note that, for
 <dig> out of  <dig> experiments, the peak sequences are all at least  <dig> bp  and hence all the peak sequences
are  <dig> bp long after clipping. this implies that lasagna-chip is capable of
handling sequences of the same length.

lasagna-chip, meme and methods alike produce gapless alignments and do have their
limits. when a tf binds to two cores separated by a variable-length spacer,
these methods are expected to align the canonical tfbss containing spacers of
the most prevalent length. these binding patterns are also known as two-block
motifs. gapped alignment or explicit modeling  <cit>  is needed to correctly align tfbss of this nature.

implementation
we have implemented a user-friendly webtool named lasagna-search, which is freely
available at http://biogrid.engr.uconn.edu/lasagna_search/. useful
features include automatic promoter retrieval, visualization of hits locally and
at the ucsc genome browser, and automatic gene regulatory network construction
based on significant hits. lasagna-search adopts the lasagna-pssm method and
currently stores pssm ks models , where ks is determined by cv experiments, for the  <dig> transfac tfs
summarized in table  <dig> as well as  <dig> tfs from oreganno
. in additional file  <dig>  we list each
model with its counterpart for the same tf if one is found in matrices in
transfac public. we do not evaluate models by ic because higher ic implies
higher specificity but not necessarily higher sensitivity. comparison with
models in other databases is beyond the scope of this study but will be
investigated in the near future.

lasagna-search estimates p-values of pssm scores empirically because the
pssm model for a tf may score nucleotide pairs in addition to individual
nucleotides. when ks= <dig>  a pssm score is considered the sum of independent variables and
hence the exact p-value can be efficiently computed  <cit> . even with this independence assumption, the scores of nucleotide
pairs at  and , for instance, are never independent. hence, a pssm
score cannot be seen as the sum of independent variables when nucleotide pairs
are scored. the empirical pssm score distribution of a tf is obtained from
scanning a random sequence simulated by
f,u∈{a, c, g, t}, where
f is estimated from all the tfbss used to build the
pssm. lasagna-search focuses on only pssm scores in the upper 5% and hence
scores in the lower 95% are given a p-value of  <dig> +. currently, the
smallest nonzero p-value is  <dig> ×10− <dig> and  <dig> means
any number less than  <dig> ×10− <dig> 

as a case study, we scanned the promoter region of human gene ccl <dig> , also known as mcp <dig>  ccl <dig> was arbitrarily chosen by browsing the oreganno
database  <cit> . the promoter sequence  was automatically retrieved and scanned for binding sites of all 68
human tfs with the p-value threshold set to  <dig> . figure  <dig> displays a partial view of the search results ordered by
p-value. the only  <dig> true positive hits, ap- <dig>  sp <dig> and p <dig> ,
were found in the top- <dig> of the list. according to oreganno, ccl <dig> is a target
gene of ap- <dig>  sp <dig>  nfkb <dig>  stat <dig> and gas, where gas likely refers to the gamma
activated site bound by stat <dig>  stat <dig>  however, is not one of the  <dig> tfs and
hence all the tfs known to regulate ccl <dig> were recalled. the fact that ap- <dig>  sp1
and p <dig> regulate ccl <dig> is also documented in transfac  <cit>  . the actual sites , however, are not in the public release and were not used to build the
pssm models. we note that this case study is for illustration not evaluation
purposes.
list of predicted binding sites are sorted by p-value in
ascending order while only the top- <dig> hits are shown. the best hit is
visualized in the context of other binding sites over a stretch of the
promoter, where the height of a box is − log10p-value.
ccl <dig> is known to be a target gene of ap- <dig>  sp <dig> and p <dig>  <cit> . these  <dig> binding sites are not in the transfac public
database and were not used to build the pssms.

CONCLUSIONS
we proposed lasagna, a novel alignment algorithm specifically designed for aligning
variable-length transcription factor binding sites. cross-validation results on 189
tfs and  <dig> tfbss indicated that lasagna significantly outperformed clustalw2
 and meme . this is because lasagna was specifically
designed for aligning variable-length tfbss. based on the success of lasagna, we
developed lasagna-chip, which is capable of handling sequences produced by chip-chip
and chip-seq experiments. while clustalw <dig> is better suited for producing
structurally correct alignments, lasagna-chip, meme and methods alike can be used to
align sequences produced by chip-chip or chip-seq experiments.

we compared lasagna-pssm, the pssm method dependent on lasagna, to sitar, an
alignment free tfbs search method. cross-validation experiments were conducted on
 <dig> tfbss of  <dig> tfs for both methods. the results showed that, at fixed recall
rates, lasagna-pssm is significantly more precise than sitar . the recall-precision curve showed that our
method is constantly more precise at any recall rate or more sensitive at any
precision.

we conclude that the lasagna algorithm is simple and effective in aligning
variable-length binding sites. it has been integrated into a user-friendly webtool
for tfbs search called lasagna-search. the tool currently stores precomputed pssm
models for  <dig> tfs and  <dig> tfs built from tfbss in the transfac public database
 and the oreganno database , respectively. in the future,
more sources of experimentally validated tfbss such as the pazar database will be
incorporated into the webtool, making variable-length tfbss more accessible to
scientists in the field.

competing interests
both authors declare that they have no competing interests.

authors’ contributions
ch conceived the study. cl collected the data, carried out the experiments and
drafted the manuscript. ch guided the study and revised the manuscript. both authors
read and approved the final manuscript.

supplementary material
additional file 1
lasagna-chip flowchart.

click here for file

 additional file 2
distribution of 
k


s

 by species and conserved domain.

click here for file

 additional file 3
summary of  <dig> mouse chip-seq experiments. each row shows the
track name in the ucsc genome browser, cell type, target tf, number of
peak sequences as well as the minimum, maximum, mean and standard
deviation of peak sequence length.

click here for file

 additional file 4
motifs found by lasagna-chip and meme. for each chip-seq
experiment, the sequence logos of motifs found by lasagna-chip and meme
are shown. the matching motifs in the transfac public and uniprobe
databases found by tomtom are listed below each sequence logo. the first
chiped motif tf is highlighted in yellow if it is among the matching
motifs. when the found motif does not resemble those of the chiped tf,
the first cofactor of the chiped tf is highlighted in blue if it is
among the matching motifs. other possibly correct matches are
highlighted in green.

click here for file

 additional file 5
list of lasagna-built models based on transfac/oreganno tfbss.
only models whose counterparts can be found in matrices in transfac
public are listed. the ic and number of sites are shown for each
model.

click here for file

 acknowledgements
we are indebted to the two anonymous reviewers, whose comments greatly improved
this paper. this work was supported in part by national science foundation
.
