BACKGROUND
background of the analysis problem
the understanding of molecular evolution requires a detailed understanding of the dynamics among the constituents of a molecule during its evolution  <cit> . computational biologists seek evolutionary signals in data sets of sequences of biomolecules and signatures of a correlated dynamic of the evolutionary processes shaping the characteristics of molecules under investigation. such co-evolution occurs mostly, when either an amino acid or a nucleotide within a biomolecule evolves in concert with another "site" within the same or a partnering molecule. the mutual information  is widely used to detect such correlated evolutionary dynamics. the computation of the mi  itself is straightforward. however, proper normalization needs to be carefully taken into account  <cit>  for typical, finite-sized data sets. this issue is discussed in more detail below. the problem of analyzing the obtained mutual information values was, however, not tackled until now: as the mi is a quantification between any two sites within a protein, of e.g., n amino acids, for such a molecule we need to compute and to analyze  mi values. even for modest sized proteins with n ~  <dig> this means to visualize  <dig> real values. typically one cannot easily grasp structures, scales, etc. in such large amounts of data.

visual-interactive approach and matrix visualization
recently, visualization has been widely recognized as a promising approach to help analysts and researchers to better understand such large amounts of complex data. the approach suggests to have visual-interactive displays appropriately encode information using visual mappings; and let the user interactively manipulate these displays to navigate, drill-down, and explore  <cit> .

according to the structure of the data to be visualized, different visual mappings are appropriate. matrix visualization  <cit>  is appropriate for large amounts of data elements for which pairwise relationships with quantitative attributes are given. by representing the quantitative value of each relationship by color, matrix visualization is highly scalable, ultimately representing each relationship by a single pixel.

important problems to address in designing effective matrix visualization systems involve choosing an appropriate color scale  <cit> , data preprocessing steps, and applying suitable sorting on the matrices to be visualized. the latter is specifically important, as is allows to make assessments on the overall structure of the relationships. matrix sorting usually arranges rows and columns of the matrix by similarity, with an appropriate similarity function defined on the row and column vectors of the matrix.

matrix visualization as a technique is well-known and to date has found its way into software systems such as r <cit>  or matlab <cit> . however, many implementations are focused on producing static images, offering only limited support for interactive parameter change and navigation in the matrix display by the user. we therefore developed a fully interactive matrix visualization system in java. it allows the user to change important parameters and navigate the data on the fly by means of a two-stage zooming mechanism. furthermore, we support the joint visualization of two matrices, supporting our specific analysis problem.

implementation
visualization
the implemented application generically supports two data matrices: one data and one weight matrix  which can be inspected individually or jointly. the general approach is to map the normalized matrix values to an appropriate color map and display it as a grid. while using color is typically not the first choice for representing absolute values, it allows comparative analysis of value ranges and provides a highly compact view of the overall data distribution. specifically in the case of large data matrices and in conjunction with an appropriate matrix sorting mechanism it allows the assessment of the features of the matrix. the application supports detailed visualization of either one of the two matrices. detailed information is available by interactively zooming into parts of the matrix and restricting the displayed data to specific value ranges. thereby, the approach follows shneiderman's information visualization mantra . sorting the matrix by arranging rows and columns by similarity reduces its complexity and allows identification of systematic  relationships between entities of the experiment by homogeneous colors  <cit> .

our sorting algorithm works by finding a so-called seed row according to the maximum of the sum of contained values. this row is made the top row. then, the sorting algorithm among the remaining rows finds the one that is most similar to the seed row, where the degree of similarity is measured by the l <dig> norm between the respective row vectors. the algorithm places the found row just below the seed row, makes the found row the new seed row, and iteratively continues until all rows have been processed. the same approach is then applied on the columns of the matrix. this sorting algorithm is rather simple, yet provides a useful starting point for the visual analysis. the algorithm has quadratic runtime complexity. for an overview of the application design, please see the system illustration and description provided in section results and discussion.

mutual information computation
the stand-alone program micato  reads a sequence file in fasta format and calculates the mi of the sequence contained therein. by separation from the visualization tool micato can be run on e.g., clusters using job-scheduling systems. this is useful in particular for sampling large instances of null models for normalization.

to this end micato calculates in a first step the sequence entropies of each column of the sequence alignment and stores it. then the joint entropy of each pairing of two columns is calculated and by equation  <dig> the mi is calculated and stored in a matrix miij for a pair of positions . then micato runs a user defined number of independent column shuffles to generate a statistically significant number of instances of the null model . the mi matrix is exported as a csv file, as well as the z-scores of those mi values with respect to the statistics of the null model. the csv format can be read by the mimatrixviz program without further conversion.

methods
information-theoretical measure
to measure co-evolution among residues one frequently uses the mutual information , defined as  <cit> :   

where x and y are outcomes for random variables xi and yj drawn from a symbol set , taken from a multiple sequence alignment as columns i and j. the symbols hi, hj  are the column sequence entropies and hij  is the entropy computed by the joint probability function pij. repeated application of the equation leads to a symmetric mi matrix  for all pairings .

in studies on proteins the symbol set consists of the  <dig> standard amino acids , which has to be expanded to include the gap character and an extra character for non-standard amino acids . we set the probabilities pi,pj, and pij to the observed frequencies of amino acids within the columns of a multiple sequence alignment. this can be done with the supplied routines in the program micato.

normalization & weighting
although in the post-genomic era  <cit>  we have access to huge databases of sequences, in a typical setting the number of sequences available is still only of the order  <dig>  we have previously shown that this limitation might lead to substantial finite-size effects in the computed mi values  <cit> . these effects can be compensated by normalizing the obtained mi values to a null model of evolution  <cit> .

we have implemented such a normalization by computing the mi for shuffled columns: while maintaining the one-column sequence entropies with this procedure we destroy any correlation between any two columns i and j and therefore obtain distributions for miij with respect to naturally occurring, independent symbol frequencies. from this distribution we can easily compute z values for any miij value by   

where  is the average of the mi values for the shuffled columns i and j, and σ the standard deviation of this sample. note that this has to be done for each column pair  independently. this protocol is also implemented in the program micato and it can be loaded into our visualization program as a weighting scheme.

RESULTS
the implementation of all components like user interface, data storage and algorithms is kept modular, so it is easy to adopt the system to upcoming needs. this includes e.g., additional matrix ordering methods, color schemes or data filtering mechanisms. currently, filtering can be done in two steps. firstly, by setting a maximum and minimum value of the mutual information. secondly, by doing the same for the z-score. by this the z-score can be used as filter or additionally as a weight for controlling the color saturation of the corresponding matrix entries.

the visualization system can be used additionally with any matrix valued data set beyond co-evolutionary studies. this is achieved by specification of a simple file format for matrix data. the software assumes the raw matrix and weight data to be contained in plain ascii files, where each row in the file contains one matrix cell entry of the form <row column value >.

example protocol
codoñer et al.  <cit> , as well as other authors  <cit>  have argued that intramolecular co-evolution typically results from a superposition of various biological and biochemical influences, which depend highly on the system under investigation. in fact, the decomposition is the key analysis task in co-evultionary studies. explorative analysis can then be used for hypothesis creation  <cit>  on the origin of such influences. we applied the software package to a sequence set of variants of the acetylcholinesterase  .

future trends & intended use
the implemented routines can be used in studies on molecular evolution by working on provided fasta-files. the mi computation can be run in batch-mode to allow for compute cluster usage. the output of computed mutual information values and their weighting by z-scores can be opened by the interactive matrix visualization software provided. there, as described above the user can navigate the vast amount of data, applying filters in sequence space and in value space, and using z-scores  to estimate and visualize the statistical significance of the mutual information values.

typically, the visual analytics approach does not guarantee to reveal all relevant features of empirical data. however, in a generic biological application one does not know beforehand what signals to look for. this renders automatic processing ineffective and one has to resort to visual and interactive inspection. future work includes extending the functionality of the visualization software with additional functionality. first, additional matrix sorting algorithms with user-settable sorting criteria should be included, allowing the user to take suitable views on the data set. the matrix display should be extended by side views showing the similarity of rows and columns as well as the reordering  index in case the matrix has been sorted. in the long run, the system should be integrated with additional relevant meta data, and linked with additional viewing components such as 3d molecular viewers. our software is provided as java bytecode. the sourcecode can be made available upon request. we are also open for collaboration aiming at improving the functionality of the software and applying it to new use cases.

CONCLUSIONS
in the mimatrixviz package we provide routines to compute mutual information of evolutionary dynamics in molecules. the package is capable of normalizing those values and therefore accounts for finite-sized data sets. the visualization part is separated from this to allow batch-usage on servers and clusters for sufficient statistics. the visual approach allows to interactively explore the data, and investigate patterns, structures, and particular interesting spots within the mutual information matrices.

the user can generate graphics and filtered data sets with the package in publication ready quality. to this end, the application allows the user to export matrix images in the lossless png file format, and to export selected data subsets as plain ascii files.

other matrix-oriented data, as e.g., obtained by dna microarray experiments, can be visually analyzed with the tool, too. external knowledge can be incorporated by the weight matrix to augment the insight one gains from the expression levels detected at the feature sites. potential scenarios include phylogenetic likelihoods for particular hits on reporters, gauging bias to cope with potential shortcomings in the production and/or binding processes.

availability and requirements
project name: mimatrixviz

project home page: http://www.gris.informatik.tu-darmstadt.de/projects/vsa/matrixvis/

operating system: platform independent  on the target system)

programming language: java

requirements: java runtime environment ≥  <dig> 

license: gpl for academic users.

any restrictions to use by non-academics: for commercial applications of mimatrixviz, please contact the authors.

authors' contributions
sb, pb, and ts implemented the visualization software. sh tested the software. kh formulated the project and tested the software. all authors wrote the paper. all authors read and approved the final manuscript.

