BACKGROUND
many interesting problems in bioinformatics require the integration of experimental data from different sources. examples include merging two independently created protein-protein interaction networks in cytoscape <cit>  and visualizing microarray data on a collection of biological pathways in genmapp <cit>  or pathvisio <cit> . more often than not, data of different types and from different sources are annotated with different identifiers. thus, an important step in the analysis workflow is deducing which identifiers from one set correspond to which identifiers in the other set.

this problem of identifier mapping has been recognized, and a number of resources have been developed to solve it, including dict <cit> , cronos <cit> , matchminer <cit> , aliasserver <cit> , picr <cit> , synergizer <cit>  and ensembl biomart <cit> . for the most part, these resources accurately map identifiers and provide an interface, usually a web site, to the mappings. however, each resource necessarily has a focused domain of application based on limitations in resources and in the interest of its developers. mapping services differ in aspects, such as coverage of species, coverage of identifier types, access speed and frequency of database updates. this has created two challenges for developers of bioinformatics applications. the first challenge is to develop software that is not tied to a single identifier mapping service. tools that are built around a single service would have to be adapted with considerable effort if a more suitable service comes along. optimally, switching should be a simple matter of configuration. the second challenge is to combine mapping services to get the benefits of each. for example, one could combine a small mapping table of probe identifiers of a custom microarray with a large mapping resource, such as ensembl biomart, or one could combine metabolite mappings and gene mappings when assessing experimental data from a combination of different omics platforms.

the key to both challenges is to create a standard interface between tools and mapping services. here we present bridgedb, a framework that provides such a standard interface. bridgedb is a software library intended to be used by bioinformatics tool developers. the overall architecture is described in figure  <dig>  bridgedb makes is possible to write shorter and simpler code to handle identifier mapping. this framework has already been incorporated in several bioinformatics applications.

concepts
to explain the features of the bridgedb framework, it is necessary to define some concepts. we use the term data source to describe a database of biological entities, indexed by unique identifiers. usually, these identifiers are assigned and maintained internally by an independent organization. examples of data sources include ensembl, uniprot, chebi, and the gene ontology.

an internal identifier is an identifier that is valid within the namespace of a data source. a good identifier must be unique, stable, and preferably free of semantic information. an internal identifier is not necessarily globally unique because a given identifier may be valid for two different data sources .

in contrast with identifiers, we use the term symbol for a string that is a human readable representation of a biological entity. symbols are not necessarily guaranteed to be unique or stable over time. a symbol can be a gene name such as insr or tp <dig> for example. a biological entity might have several synonymous symbols or aliases. since these symbols have a biological meaning, they are not semantic-free and do not serve as good identifiers. semantics should be avoided because the information can be found to be "wrong" by new evidence. for example, the caenorhabditis elegans gene symbol rad- <dig>  was replaced by clk- <dig>  after additional experimental evidence was collected and reinterpreted  <cit> .

a global identifier is a globally unique identifier based on the combination of data source and internal identifier. importantly, for the exchange of data, global identifiers must be standardized. for the representation of global identifiers, bridgedb relies on the miriam uri standard  <cit> . miriam describes a minimal set of information to define a biological model and requires that biological identifiers be sufficiently descriptive. a valid miriam uri contains both the data source and internal identifier .

we use the term mapping service to describe a resource for mapping information among identifiers from two or more data sources. this broad definition could include simple tables in a text file as well as complete relational databases or online web services such as ensembl biomart and picr.

transitivity
bridgedb allows stacking, or combining, of different mapping sources both in transitive and non-transitive modes. transitivity means the inference of second- or even third-degree mappings from direct mappings. transitivity becomes an important issue especially when combining mapping services in a stack. in general it is preferable to make use of global resources such as ensembl biomart for annotation of microarray data, but this is not possible for custom microarrays that are not distributed widely. in those cases, custom annotation files must be used. a custom annotation file can be produced to map custom identifiers to all other biological identifiers that one might wish to consider. but bridgedb allows an alternative approach, where one only needs a very simple mapping of custom identifiers to one gene identifier, and can rely on ensembl biomart to provide the rest. for example, if the custom annotation file defines relations between custom identifiers and entrez gene, and ensembl biomart provides mapping between ensembl and entrez gene, then mappings between the custom identifier and ensembl can be inferred. in this way, the task of creating custom annotations is much simpler, while at the same time enabling broader coverage of data sources. this process is depicted in figure  <dig>  in the same way two specialized mapping services could be chained together. for example, picr is specialized in proteins and is not normally capable of mapping gene identifiers. however, picr can be combined with ensembl biomart, using the latter to translate gene identifiers into protein identifiers that the former can understand. in principle, transitive mapping from genes to transcripts to proteins could be achieved.

implementation
the implementation of bridgedb is described here for each of the three layers of figure 1: tools, interface and mapping services, starting with the interface.

implementation of the interface layer
the application programming interface  of bridgedb takes two different forms. the first form is based on java and is suitable for java applications. the other is based on representational state transfer  and is suitable for all other programming languages.

bridgedb java api
the structure of the java api is represented in figure  <dig>  the central bridgedb class keeps track of all available idmapper implementations and provides uniform access to them through the static connect method. this method takes a connection string, which contains the requested mapping service and all parameters for configuring that service. to access a completely different mapping service, only the connection string has to be modified, the rest of the program can stay the same. the connect method returns an implementation of the idmapper interface. this interface provides methods for mapping identifiers, as well as free text search and capability introspection. the mapid method of idmapper performs the actual mapping job. it takes an xref object as argument. xref is a combination of a data source and a local identifier; these two are combined to form a global identifier. the xref class also provides methods for generating valid web links to pages describing a biological entity, and for generating a valid miriam uri. data sources are themselves represented by datasource objects, which also hold extra information such as web links to the main page of a data source. we have created a simple example in java that shows how to map identifiers through webservices using bridgedb . to illustrate the usefulness of the standardized interface, we recreated the same functionality in a program without using bridgedb . in the latter case specialized code had to be written for each webservice, which makes the code more complex, and less flexible. for a full description of the api and more examples, see the developer documentation on the bridgedb website  <cit> .

bridgerest api
in addition to the java api, we provide a rest-based interface. the required software can run in the background and can be embedded in non-java applications. each function is accessed by a url that specifies the address of the service and query parameters. for example, http://localhost/human/search/ensg <dig> includes the following query parameters: 'search' specifies the type of query, 'human' is the organism database being searched, and 'ensg00000122375' is the query input. in this example, a list of identifiers and data sources corresponding to the query would be returned in the form of tab-delimited plain-text. developer documentation for bridgerest is also available on the bridgedb website  <cit> .

implementation of the mapping services layer
the mapping services supported by bridgedb can be broadly categorized in three groups: flat files, relational databases, and online web services. flat text files are great for custom annotations. local relational databases provide the fastest access. they are stable and make long-running analyses repeatable. web services are not as fast as local databases but potentially provide the broadest range of data and if well maintained, are more up-to-date.

in addition to supporting a number of third-party mapping services, bridgedb also provides its own mapping services, in the form of bridgederby databases for efficient mapping of genes, proteins and metabolites, and in the form of a webservice named bridgewebservice. thus, bridgedb can be used as a complete identifier mapping solution out-of-the-box for common bioinformatics applications. see table  <dig> for a list of supported mapping services and by whom they are provided.

the bridgederby mapping service is based on the derby <cit>  relational database management system. its advantage is that it can be used to create local databases that consist of just a single file. these files can be downloaded, copied and installed easily. this system, along with the database schema, has been described before <cit> . the schema can be briefly summarized as follows. each database consists of three tables. the datanode table contains a list of local identifiers plus a short two-letter abbreviation for the data source. the link table contains a list of relationships between identifiers. each link has a left part and a right part; each part refers to a unique data source and identifier in the datanode table. finally, the attribute table contains symbols and other attributes for datanode entries.

we create database files per species for genes and proteins. we also created a database file for metabolites, which is species-independent. using the stacking mechanism, the metabolite database and a species-specific gene and protein database can easily be combined to form a complete database for biological entities of a given species. the procedures for creating these two types of database files are described below in more detail.

ensembl-based gene and protein database files
the database files for genes and proteins are based on ensembl <cit> . relevant mysql tables from ensembl are locally installed and accessed via ensembl's perl api. identifiers, annotations and cross-references are extracted, transformed and ultimately loaded into apache derby databases. the derby databases are rebuilt and released after each ensembl database release. each derby database contains information for a single species. currently, databases are only produced for species of interest, including  <dig> different animal, plant, fungal, and bacterial species. however, derby databases can readily be generated for any species supported by ensembl or that has been effectively "ensemblized" . depending on the species, a selected subset of data sources are extracted from ensembl and maintained in the derby databases. typically, these include ensembl, entrez gene, uniprot, unigene, refseq, mirbase, rfam, pdb, tigr, ucsc genome browser, and wikigene, as well as a representative model organism database, such as mgi, wormbase, zfin, ecogene or tair, and annotations from gene ontology, omim, biogrid, affymetrix, agilent, and illumina.

the same information as contained in the derby databases is also stored in mysql databases, using the same schema. this form of the data is maintained for web service accessibility. practical limitations on the size of the distributed derby databases are not an issue for mysql. thus, additional identifier systems, annotations and cross-references can be stored in the mysql databases. furthermore, with greater capacity, this system will be able to support additional types of information such as exon, transcript, and protein domain alignments, polymorphisms, and homology, which are also available from ensembl.

hmdb-based metabolite database files
currently, the database files for metabolites are based on hmdb metabocards <cit> , because they provide free and easy-to-parse access to mapping information. each metabocard contains cross-references to cas, chebi, pubchem and kegg. each metabocard is parsed by a script and identifiers are added to the datanode table. mappings between them are added to the link table. this database assumes symmetry and transitivity . the official name and all synonyms are stored in the attribute table as symbols.

implementation of the tool layer
broadly speaking, bridgedb can be useful whenever an application needs to make use of multiple mapping services or wants to enable the user to choose among different services. to demonstrate this, we have integrated bridgedb into a number of bioinformatics tools. these implementations are described below illustrating four different occurrences of the identifier mapping problem.

use case 1: annotating biological pathways
wikipathways is a collection of biological pathways open to community curation <cit> . pathways are networks of genes, proteins and metabolites that serve as a model for the actual biology of a cell. pathway components must be properly annotated to maintain the consistency and integrity of the model for data mapping, updating and exchange. the common names of genes, proteins and metabolites are usually not suitable, because they can be ambiguous and can change over time. identifiers from various data sources can provide exact and unambiguous references. bridgedb is used by wikipathways to provide integrated access to the most relevant identifiers by stacking species-specific databases for genes and proteins with a generic database for metabolites. the free search mechanism of bridgedb helps curators find the correct identifiers for a broad range of biological entities. and bridgedb also provides link-out urls to all cross-references to help confirm the validity of an annotation and access more information from primary data sources.

use case 2: merging biological networks
the network merge plugin for cytoscape <cit>  can align, compare and merge networks. a common scenario for network merge includes two networks that represent overlapping biological components . there are many valid ways to annotate such networks, but to align, compare or merge them they must be annotated with identifiers from a single data source. to solve this problem, the cytoscape network merge plugin utilized bridgedb to unify identifiers of the biological entities when merging networks, so that overlaps among networks can be recognized.

use case 3: mapping experimental data onto biological pathways
pathvisio <cit>  is a pathway visualization and analysis tool which has recently gained the capability to import genomics data and link it to pathways. to ease the process of importing biological datasets, bridgedb is used to map microarray reporters to the corresponding genes and proteins. the standard ensembl-derived bridgederby databases contain information about a number of common chip designs. each identifier in the experimental data is mapped to an identifier in the pathway if possible, and if a match is found, that part of the pathway can be colored depending on the measured gene expression.

use case 4: identifier translation
the cythesaurus plugin for cytoscape can perform large-scale identifier translation on biological entities in cytoscape networks using bridgedb. the plugin can be used for different purposes. for example, when multiple identifier sources are used in the networks of interest, this plugin can be used to translate different types of identifiers to a common identifier type so that identities of the biological entities in the networks will be unified. alternatively, to export cytoscape networks for use in other tools that require different identity types, one can utilize cythesaurus plugin to translate the identifiers into identifier types that other tools can understand.

RESULTS
once bridgedb has been incorporated in a bioinformatics tool, it will be possible to choose a suitable identifier mapping solution for the job at hand. there are a few considerations when choosing the right service. first, when should two identifiers map to one another? what is the basis for a mapping? an identifier is a reference to a database record about a biological entity. if two databases describe the exact same biological entity, then certainly the identifiers should map to each other. but most applications require a broader definition of identifier mapping. when aligning microarray data with a pathway model based on genes, for example, there is a need for mapping microarray reporters to genes and gene products even though these are different biological entities.

the facile switching of mapping services makes it easy to compare them programatically. in a simple test we found that most web services integrated in bridgedb are in agreement to a high degree. four different webservices were able to map successfully more than 80% of a set of  <dig> random affymetrix probeset identifiers. for 72% of the total set, the result was identical for each webservice. for a given set of  <dig> ensembl gene identifiers, each webservice was able to map over 91%, and the identical subset was 86% . the source code of bridgedb includes the script used for this comparison . in short, webservices differ in coverage of species and identifier types, but when two webservices are both able to translate the same set of identifiers, they agree to a large degree.

a second issue that affects the choice of mapping service is a preference for local or remote access. the first option is more efficient in the case of high-intensity usage. another advantage of a local system is that a source of data can be frozen to make analysis reproducible. a local system will not change in the middle of a long-running analysis procedure. alternatively, the web service approach can be more up-to-date, is centrally managed and requires fewer resources  from the end-user.

theoretically, it would be good to do away with the multiplicity of biological databases and designate a single universal identifier for each biological entity. however, this would not eliminate the need for identifier mapping, as there would still be a need to relate different biological entities such as transcripts and reporters. that fact, combined with the current situation of multiple gene databases, means that we have to deal with the identifier mapping problem in the best possible way. we believe that standardizing on a framework used by several programs in unison provides a robust and extensible solution.

importantly, identifier mapping should be performed as late as possible in a given workflow or annotation scheme. gene databases change over time as more information becomes available. experimental datasets, on the other hand, are fixed once the experiment is done. the experimental data should be annotated as closely as possible to the experimental conditions. consider for example microarray data. perez-iratxeta et al.  <cit>  have found changes to 5% of reporter annotations over a two-year timespan. the mapping of reporters to genes is not static, and the data should be linked directly to the reporter sequence that was measured rather than to a gene or genomic location. replacing probe identifiers with gene identifiers in a microarray dataset would limit future analyses to potentially outdated associations. the importance of bridgedb in this context is that experimental data can be annotated and linked in a consistent manner over time, ensuring that the integrity of the data is maintained while the analysis utilizes the most up-to-date information about genes and gene associations.

several mapping services supported by bridgedb are provided by us . we consider these good default choices that are applicable to a broad range of situations. the local databases for genes and proteins provided by bridgedb are based on ensembl. we find that ensembl defines reliable homology-based mappings that are frequently updated and available for a large number of species and, thus, provides a reasonable default choice. however, some authors  <cit>  have noted that high thresholds of sequence similarity lead to a failure to detect all correct mappings, so extra information derived from gene nomenclature should be used. the bridgedb interface does not dictate what constitutes a correct mapping; this is determined by the underlying mapping services. the flexible architecture of bridgedb makes it possible to switch to a service that employs a different basis for identifier mapping if desired.

the bridgedb concept derived from our experience as developers of different bioinformatics tools. the application programming interface  was designed to be used by multiple tools and has proven its usability for a combination of applications with different uses.

we believe that it is better to build identifier mapping into a tool rather than requiring users to perform identifier mapping manually or with separate tools. burdening the researcher to perform identifier mapping ignores the problem and dramatically limits the usability of the tool. relying on external solutions also introduces unknown factors into the workflow that can lead to unreliable analysis results. by integrating a mapping service directly in the bioinformatics software tools, error-prone data preparation steps are avoided.

different software packages solve the identifier mapping problem in different ways. we propose to modularize the identifier mapping problem into a single library. this has several advantages. using a shared library means that developers can pool efforts, rather than investing considerable effort into maintaining isolated solutions. tools that currently do not implement identifier mapping could do so with very little effort by just adding a module to the project.

CONCLUSIONS
bridgedb frees bioinformatics tools from compromising on solutions to the identifier mapping problem. by providing a standardized layer through which different mapping services can be used, bridgedb makes it easy for tool developers to support and switch between multiple services. bridgedb can also be used to combine or merge mapping services to support multi-omics experiments or integrate custom resources.

availability & requirements
project name: bridgedb.

project home page: http://www.bridgedb.org.

operating systems: platform independent

programming language: implemented in java, compatible with any programming language.

other requirements: java runtime environment version  <dig>  or higher.

license: apache  <dig>  license. source can be found at http://svn.bigcat.unimaas.nl/bridgedb. a snapshot of the code is available as additional file  <dig> 

any restrictions to use by non-academics: none.

authors' contributions
mi drafted the paper. tk developed the first derby databases. ap developed the ensembl etl process for mysql and derby database production. mi and jg designed the bridgedb api. ih improved the ensembl etl process and developed the rest web service. jg developed both cytoscape plugins. ap and kh contributed to the original genmapp identifier mapping strategy. ce and bc provided valuable feedback and support. all authors have read and approved the final manuscript.

supplementary material
additional file 1
bridgedb example in java. this is a simple example script that demonstrates how the bridgedb library can be used to map an identifier using two different mapping services.

click here for file

 additional file 2
counter-example not using bridgedb. this is a counter-example that does the same as additional file  <dig>  without using bridgedb. because specialized code has to be written for each webservice, this script is more complex and less flexible.

click here for file

 additional file 3
raw results of the comparison of four different webservices. the script used to extract this data is included in additional file  <dig> 

click here for file

 additional file 4
source code of the bridgedb java library version  <dig> . for the latest version we recommend to use our subversion repository at http://svn.bigcat.unimaas.nl/bridgedb.

click here for file

 acknowledgements
we acknowledge david states for useful feeback, and the gramene project for providing plant identifier mappings for bridgederby.

this work was supported by the google summer of code program, transnational university limburg , the biorange program of the netherlands bioinformatics consortium , the netherlands consortium for systems biology , the national institutes of health , the european nutrigenomics organization  and the dutch scientific organisation 
