BACKGROUND
protein identification is one of the hardest tasks in proteomics and over the years many high-throughput technologies and methods have been developed for improving it. mass spectrometry has become a key tool for protein identification, being able to measure with high precision the mass/charge ratio  of charged molecules such as peptides. however, due to the large amount of generated data, protein identification represents from a computational point of view one of the major challenges in proteomics  <cit> .

protein identification by mass spectrometry can be performed following two approaches: the peptide mass fingerprinting , relying on single-stage ms, and the peptide fragment fingerprinting , which is based on tandem mass spectrometry  <cit> . this paper only copes with the former approach. pmf allows the identification of a protein by combining ms data with searching strategies on a suitable protein database, provided that the amino acid sequence of the protein in the biological sample is already known and stored in the database. therefore de novo protein identification cannot be performed by pmf. as illustrated in figure  <dig>  the pmf workflow can be subdivided in the following three steps:

 <dig>  sample preparation and spectrum acquisition;

 <dig>  reference protein database generation;

 <dig>  matching of the acquired spectrum against the generated reference protein database.

 <dig>  sample preparation and spectrum acquisition
proteins are separated from other cellular components and resolved by gel electrophoresis on the basis of either molecular weight  only  or both isoelectric point  and mw . protein bands  are excised from the gel and digested with a protease that cleaves the protein at specific peptide bonds depending on the amino-acid sequence, generating a pool of peptides  <cit> . the mixture of peptides obtained by enzymatic digestion is then analyzed by mass spectrometry, often in maldi-tof configuration, for obtaining the mass spectrum of the whole mixture.

 <dig>  reference protein database generation
the enzymatic digestion of all the known proteins of interest is reproduced in silico. the result of this task is the generation of a database of all the theoretical peptide masses grouped by proteins .

 <dig>  matching of the acquired spectrum against the generated reference protein database
from the acquired spectrum a list of peptide masses  is extracted  <cit>  and compared with those of each protein contained in the reference protein database. due to the intrinsic measurement error, the comparison between reference masses and experimental data has to be made considering a tolerance window around the experimental mass value, expressed in term of absolute or relative mass. the evaluation for each protein of the agreement between experimental and theoretical spectra can be done by several algorithms available in the literature  <cit>  and in some cases already implemented in software tools . the output of these algorithms is a ranked list  of all the proteins of the reference database, which have at least one peptide whose mass matches against those of the query mass list. finally, a statistical validation of the results should be performed, leading to the retrieval of a very short list of proteins  that match with high confidence the protein actually contained in the sample  <cit> .

even if pmf is conceptually simple and fast, it presents some liability, mainly due to the occurrence of false positives in the final list, especially when the sample is a mixture of proteins and the reference database is wide. the available tools do not provide complete satisfactory strategies. all tools present some limitations and no one implements all the best solutions proposed in the literature. they have a closed architecture and than they are not modifiable by adding other more effectiveness solutions. the main problems concern the possibility of choosing the reference protein database and to update it, of choosing an adeguate maximum number of missed cleavages or the post-translational modifications of interest . usually, masses of contaminants detected by the spectrometer are not removed before identifications or contaminant proteins cannot be specified by the user. ranking algorithms can be improved and statistical evaluation of the results are frequently lacking. this paper presents a complete perl procedure for the analysis of mass spectrometry data by pmf, starting from the creation of the reference protein database and ultimately providing the statistical validation of the results. the three scoring methods reported in  <cit>  were chosen and implemented in the mspi perl tool. their performance has been tested on an experimental dataset acquired on ten protein bands. the refined output provided by mspi has been benchmarked to the results obtained on the same dataset using two on line available tools, piums and mascot, and this evaluation will be presented in this paper. while mascot is one of the most commonly used software tools for protein identification, its scoring method, however, could not be implemented into mspi because of the lack of documentation.

methods
this section describes the procedure proposed in this paper to analyze pmf data and implemented into the mspi perl scripts. it includes the downloading from the web of a protein database and its in silico digestion to build a reference protein database, the removal of contaminants from the query mass list, the definition of a ranked candidate protein list and the extraction of a shorter significant candidate protein list.

reference protein database
a reference database, containing the masses of all possible peptides obtained by the enzymatic digestion of all known proteins with a selected protease, is created. first of all a suitable protein database is downloaded and then elaborated as described in the following paragraphs for obtaining the theoretical spectra of every protein stored in the database. for example, in this work the swiss-prot database, available on the european bioinformatics institute web site  <cit> , was considered. release  <dig>  of september  <dig> contains  <dig>  complete protein sequences belonging to different organisms . a perl script was created for automatically downloading the last available release .

amino-acid sequences of swiss-prot protein entries are provided in a fasta format file. to make the matching phase more efficient, the number of proteins submitted to in silico digestion is reduced by restricting the search to those protein entries belonging just to one or few organisms of interest. in addition, the information coded in the header line of the fasta format is decoded and efficiently organized through a perl regular expression. moreover, mspi completes the downloaded database with several additional information, such as protein mws and pis. these data can help further reducing the candidate proteins on the basis of the "qualitative" information about the mw and the pi coming from the electrophoretic gel, thus speeding up the searching step and/or decreasing the number of false positives.

computation of molecular weight and isoelectric point
in the considered version of the swiss-prot database, the mw and the pi of proteins are not part of the annotations, so that they have to be computed by mspi. the mw of a protein can be computed on the basis of its amino-acid sequence, knowing the average mass of each amino acid. in fact, it is sufficient to add, in accordance with the protein sequence, the average amino-acid weights reported in table  <dig> to the average mass of one water molecule  to take into account that the amino- and carboxyl- terminals are not involved in any peptide bond.

therefore:

  

where amwi is the average mass of the i-th amino acid and n is the total number of amino-acid residues of the protein.

the pi of a protein is the value of ph at which the molecule does not carry any net charge  <cit> . it depends on the molecular composition of the protein and in particular on the presence of amino-acid residues carrying a charge. therefore, the pi does not depend on the whole amino-acid sequence, but only on the seven amino acids that have ionizable groups in the side chain and on the amino- and carboxyl- terminals. for computing pi, the pkr value of each amino acid must be known. the pkr is formally given by:

  

where kr is the acid dissociation constant of the residue, that is the degree of dissociation of the molecule in water solution. the determination of the pkr coefficients is not a trivial task. in fact, as reported in table  <dig>  there is not a wide consensus in the literature and in the different software tools about the pkr values  <cit> . fortunately, the computation of the pi value of a protein is not a crucial step of the identification procedure, because it does not affect the ranking in the candidate list. in fact, pi is used to filter out some of the false positive identifications on the basis of its experimental value read from 2d gel. due to the uncertainty in its computation and the experimental noise the comparison is usually made with a wide tolerance. in the mspi package, in accordance with other tools, the values suggest by lehninger were adopted, but the user can set the values proposed by the other authors as well.

for the amino acids with positive polarity, the fraction of charged molecules can be computed as:

  

whereas, in case of negative polarity the fraction of charged molecules can be computed as:

  

the total net charge of a protein is then given by the sum of all the charges carried by all the amino-acid residues. therefore:

  

where the greek letters represent the number of occurrences of each kind of amino acid. the pi can be then computed letting qprot =  <dig> and resolving the equation with respect to the variable ph. this equation does not admit an analytical solution, then it has to be solved through an iterative algorithm .

in silico enzymatic digestion
after mw and pi computation, the in silico enzymatic digestion is performed. in the "real world", the enzymatic digestion is a chemical reaction that causes the fragmentation of the protein at specific positions of the peptide chain. there are several proteases that catalyze this reaction. in mspi the model of trypsin , one of the enzymes most frequently used in pmf, was implemented, but other proteases can be easily added. as a rule, trypsin cleaves the protein when it meets the c-side of the amino acid lysine  or arginine  involved in a peptide bond. nevertheless, there are some cleavage exceptions due to the presence of particular amino acids around the cleavage site   <cit> . a perl regular expression was implemented to simulate the cleavage rules.

for each peptide obtained by in silico digestion, the theoretical monoisotopic mw is then computed as:

  

where  <dig>  is the monoisotopic weight of one water molecule, mmwi is the monoisotopic mass of the i-th amino acid and n is the total number of amino-acid residues of the peptide. additional information required by pmf identification procedure is associated to the peptide: a peptide identification code  and its position in the "parent" protein , which will be used for computing the total amino-acid coverage.

missed cleavages and post-translational modifications
being the protein digestion a stochastic process, the protease does not cleave the peptide bond at every occurrence of the cleavage rule and therefore some cleavages along the protein can be randomly missed . so, after the digestion process there are some longer peptides, those which have some mcs. they include, in a single peptide, two or more consecutive short peptides of the protein. therefore, the digestion of a protein that contains n -  <dig> cleavage sites, can theoretically produce n/ <dig> different peptides. even if the database should contain all the possible generated peptides, to avoid an uncontrolled growth of the database size and consequently of the computational complexity of the search, it is reasonable to fix the maximum number of admitted consecutive mcs, considering that a great number of consecutive mcs is hardly probable. note that fixing this number to m, the database grows of about a factor m instead of a factor / <dig>  being in general m <<n the advantage is evident.

furthermore, the reference protein database has to take into account also the post-translational modifications , i.e. chemical modifications of specific amino acids affecting the mw, which occur in cells  or are introduced during the sample preparation procedure . usually, ptms can be considered either fixed or variable: in the former case, the ptm is present at every occurrence of the respective amino acid, whereas in the latter one the modification occurs randomly and then may or may not be present. a ptm causes the variation of the peptide mw, increasing or decreasing it. for example, when the carboxyamidomethylation of the amino acid cysteine occurs, the mw of this amino acid increases of about  <dig>  da. again for computational reasons, the maximum number of variable ptms that can occur on the same peptide has to be fixed a priori.

to create a database that reflects the "real world" as much as possible, all the combinations of mcs and ptms have to be generated and included in the reference protein database.

database files
after in silico digestion of all the stored proteins, the resulting peptides are in turn stored into a new suitable reference protein database. to speed up the pmf searching step, this new database is split into multiple files grouping together the peptides with similar mws, following heuristic rules based on the distribution of the peptide mws. for example, for the mw ≤  <dig>  five files are created, one for peptides whose mws range are from  <dig> to  <dig> da, one for peptides from  <dig> to  <dig> and so on.

this strategy allows to read during the searching step only those files that could contain peptides matching one of the masses of the query mass list.

from the query mass list to the ranked candidate protein list
to identify the proteins in the biological sample, the masses obtained after the pre-processing and the peaks extraction of the acquired spectrum  <cit>  have to be matched against those in the reference protein database. however, the direct use of the mass list is not appropriate, because some contaminant masses introduced during sample preparation could be present. as reported in  <cit>  the main contaminant sources are:

• the protease used in the enzymatic digestion ;

• human skin and dandruff keratins:

 <dig>  k <dig> – keratin, type ii cytoskeletal  <dig> ;

 <dig>  k2e – keratin, type ii cytoskeletal  <dig> epidermal ;

 <dig>  k <dig> – keratin, type i cytoskeletal  <dig> ;

 <dig>  k <dig> – keratin, type i cytoskeletal  <dig> ;

• the maldi matrix and the electrophoresis dye.

the enzymatic contaminants come from the autolysis process of the protease itself used to digest proteins. they depend on the total amount of protease used and on the reaction time. the keratins, instead, come from the scientist performing the different sample preparation steps and often they are the most important contaminants. the exclusion of these contaminant masses from the query mass list is often fundamental for a successfully identification.

contaminant mass removal
the removal of contaminant masses is not a trivial task and a well-established procedure is not yet available in the literature. the main difficulty is that the removal step may eliminate also an important part of the "true signal", sometimes leading to a worsening of the overall identification capabilities. in fact, a contaminant mass could be isobaric to that of a peptide of the sample. therefore, starting from these considerations, in this paper the following procedure is proposed and was implemented in the software tool. first of all, the list of the possible contaminant masses was generated by the in silico digestion of the considered contaminants . to limit the risk of removing some masses belonging to the proteins under investigation, only those masses in the removal mass list that are not very frequent in the reference protein database  were really removed from the query mass list. the problem became the quantification of this probability threshold. even if this threshold can be considered as a design parameter that can be tuned by the user, a simulated analysis was performed in order to define a reasonable value. a set of  <dig> simulated human proteins was generated: each protein item was randomly extracted from the database and the corresponding peptides were considered. for every protein, a set of contaminant peptides was included and, finally, a gaussian noise was added to each peptide mass. the  <dig> new proteins were then identified by applying a mass tolerance equal to the standard deviation of the above gaussian noise and the frequency threshold was varied from 10- <dig> to 10- <dig>  on the basis of the simulated analysis just described and of the experience, a reasonable value for the threshold relevant to human protein identification seems to be 10- <dig>  conversely, because contaminant masses due to the ionization of the maldi matrix and electrophoresis dye are present in the spectrum at lower values , where only short peptides are present, usually, the lower mass values are discarded. similarly, because long peptides  generated by trypsin are extremely rare and then the acquired signal is mainly due to the noise, an upper bound value  is also fixed in the spectrum acquisition mass range.

scoring methods
after the contaminant mass removal, the query mass list is ready to be compared with the masses of the reference database . a match between the query mass xl and the reference mass yj occurred if:

  

where δl is the mass tolerance for mass xl. for each protein in the reference database the number of matches is calculated and a scoring function is used to evaluate the global similarity between the candidate protein and the experimental data. in a probabilistic context, this function represents the probability that the considered protein has generated the experimental data . in the literature there are many papers that propose several scoring methods for the pmf approach. in this work the methods proposed by samuelsson and colleagues have been considered and implemented  <cit> . they define three different scores, based on different hypotheses on the mass tolerance and on the distribution of the peptide masses in the reference database. the mass tolerance is assumed as either absolute  or relative , whereas the mass distribution can be either uniform or not uniform. table  <dig> summarized the hypotheses made by the three scoring methods.

note that an implementation of samuelsson's scores already exists within the piums software tool  <cit> . however, as declared in  <cit> , only the first scoring method has been really implemented and tested. therefore, it is wrongly used by piums when the relative mass tolerance is chosen by the user. to fill this gap and to better explore all the possible situations, all the three scores were implemented in the mspi software tool.

method 1
the probability to have at least r matches out of l query masses can be computed by the binomial distribution, so that:

   

p is the probability that for a given protein a mass matches at least once in the reference database. since method  <dig> assumes an absolute tolerance  and a uniform distribution of the masses in the whole acquisition mass range , p does not depend on the specific query mass as required by the binomial assumption and it is equal to 2δ /Δ.

method 2
the likelihood for an observed set of matches against a random protein can be computed as:

   

where pl is defined similarly to the p of the method  <dig> and ϕl is equal to  <dig> if the mass xl has at least one match in the reference database,  <dig> otherwise. note that, in this case, pl depends on the specific query mass, so that the binomial distribution cannot be used. in fact, since method  <dig> assumes a relative tolerance  and a uniform distribution of the masses, pl is equal to 2δl/Δ or equivalently 2ppm xl/Δ.

method 3
it does not assume that the distribution of the peptide masses in the reference database has to be uniform, instead in general it can be a function of the peptide masses and of the number n of peptides in the same protein. the probability that r of the n peptides of a protein match the query mass list can be again computed by the binomial distribution:

   

where λ is the probability that a peptide of the candidate protein matches at least one of the l query masses and it is given by:

  

with pl equal to the probability of randomly matching the mass xl. it can be computed by integrating the mass density probability function ρ as:

   

the global similarity score on which candidate proteins are ranked is finally computed as minus the natural logarithm of the  or  or , so that a protein with a low probability for random matches has a high score. the higher the score, the greater is the probability that the considered protein is really present in the sample.

note that after defining δl and Δ, scores  <dig> and  <dig> are immediately computable, while score  <dig> requires to define ρ and to compute the integral . in this paper, two strategies are proposed to this aim: the first one assumes ρ to be uniform on all the considered range of masses  and independent from n, the second one tries to model the dependence of ρ from the two variables. in the first case it is trivial to verify that pl = 2δl/Δ, whereas in the second case the ρ has to be learned from the reference database, discretizing both the mass variable and n. therefore, a discretization grid  was built up and several classes were defined. to obtain a reasonable distribution among the classes they were defined considering the percentiles of each of the two variables. then the probability of the  class was computed as:

  

and then the probability density as:

  

where Δmj and Δni were the ranges in the  class of the masses and of n, respectively. given xl, δl and n, the probability pl is given by:

  

where bj is the mass value that separates the classes j and j+ <dig> 

statistical significance of the score
the protein list generated in the previous step ranks all the proteins in the reference database that match at least one query mass on the basis of one of the similarity score chosen by the user. however, the score itself does not provide a threshold in order to retrieve a reasonable subset of candidates. sometimes, this is done by fixing an arbitrary threshold in order to obtain a "short" list of the desired length. in a statistical framework, this problem becomes to define a threshold score that is able to reject with a desired degree of certainty the null hypothesis that the score is not greater than the one obtained by chance  <cit> .

to this aim a database of random sequences can be built up. then, the identification process already performed in the reference database, has to be repeated on this random database for assigning a significance value to each score in the ranked candidate protein list, as proposed in  <cit> . starting from probability prnd, i.e. the probability that a score greater than or equal to a fixed value is obtained when the query mass list is compared with a protein of the random database, two indexes are defined: the p-value and the quality index. the p-value is the probability to achieve in a random database of the same size of the reference database a score greater than or equal to that considered. the p-value is given by  <dig> - d, where d is the number of proteins of the reference database. the quality index, instead, indicates how much the random database should be larger than the reference database to observe the same number of proteins with a score greater than or equal to a fixed value. the score, the p-value and the quality index can be computed for each of the candidate proteins.

given the reference database of d proteins, the random database of drnd sequences is generated in the following way. first, drnd proteins are sampled with replacement from the reference database, then they are digested in silico and the peptide masses derived from the protein items having the same number of peptides are pooled together. finally, for each extracted protein a random protein is built by randomly sampling with replacement the associated pool of peptide masses. for obtaining an accurate evaluation of the p-value, the random database size drnd must be chosen sufficiently large. drnd is another use parameter.

RESULTS
the mspi software tool, described in details in the appendix, was tested using a sun w1100z workstation with linux suse distribution and the results have been compared with those obtained using two other software tools available on line.

dataset
the dataset used for testing mspi contains  <dig> gel bands of human proteins, already analyzed in a previous work by troiani and colleagues  <cit>  using both pmf and pff approaches. the proteins in the biological sample were separated by a 1-d gel following a standard protocol and the enzymatic digestion was performed with bovine trypsin. the peptides obtained were then analyzed with a maldi-tof mass spectrometer using the workstation voyager de_pro  and the acquisition mass range was set to 900– <dig> da. the peak list of each band of this dataset was stored in an ascii file.

reference protein database
the reference protein database was generated starting from swiss-prot release  <dig>  .

in accordance to  <cit> , protein identification was carried out imposing these conditions:

• organism: homo sapiens;

• up to two consecutive mcs allowed;

• fixed carboxyamidomethylation of the amino acid cysteine;

• variable oxidation of the amino acid methionine .

the fixed ptm at cysteine causes an increase of the amino acid mass of about  <dig>  da. the oxidation at methionine causes a mass increase of about  <dig>  da.

as discussed in the methods section, the mass range considered in the analysis was 800– <dig> da, which is quite similar to the mass spectrometry acquisition range set by troiani and colleagues.

the random database generated for the validation contains  <dig>  proteins . these two databases take up  <dig> mb and  <dig> gb of disk space, respectively.

contaminant mass removing
the contaminant masses were removed from the query mass list in accordance to the implemented procedure. in addition to keratins k <dig>  k2e, k <dig> and k <dig>  the bovine trypsin was included in the contaminant list. the frequency threshold was set to 10- <dig>  the number of query masses of the  <dig> bands before and after the contaminant mass removing are shown in table  <dig>  results depend on the mass tolerance used, even if a fixed tolerance of  <dig>  da or a relative tolerance of  <dig> ppm provide very similar results. it is interesting to note that, when the protein identification procedure was applied to the removed masses, keratins k <dig>  k2e, k <dig> and k <dig> were identified as significant. that proves the real presence of these contaminants in the analyzed samples as discussed in  <cit> .

protein identification
all the scoring methods implemented were tested and results were compared with those achieved by piums and mascot. both absolute and relative mass tolerance were used. in particular, they were fixed to  <dig>  da and  <dig> ppm, respectively. the p-value cut off imposed for the statistical validation of the results was  <dig> .

the query mass list obtained after the contaminant mass removing was used as input for both piums and mascot, because they do not implement contaminant removal capabilities. a summary of the results of the overall analysis is shown in table  <dig>  where for each band is indicated the position in the ranked list of the "true" protein, the number of statistical significant proteins when the mw of the gel band was either considered or not, the mw and the pi of the "true" protein estimated by the software tools, the number of matched masses, and the sequence coverage defined as the ratio of the number of amino acids of the matched peptides to that the whole protein. for each band, the sequence coverage was between 25% and 50%, independently from the considered score and tool, except for band nine that had a higher coverage .

note that, since the electrophoretic gel of this study is 1-d, no information about the pi was available.

comparison between mspi and piums
in piums only the scoring method  <dig> was implemented. it supposes an absolute mass tolerance and a uniform distribution of the peptide masses, even if the implemented user interface wrongly allows the user to set a relative tolerance. in addition, piums does not allow to consider two mcs: only one mc can be set. moreover, the swiss-prot protein database available within the tool is an old version  and it cannot be updated.

using an absolute mass tolerance of  <dig>  da, mspi with the scoring method  <dig> includes in the list of the significant proteins the "true" protein nine times over ten, while piums reaches the same result only for four bands. the lower performance of piums is probably due to the fact that only one mc is allowed. moreover, as table  <dig> shows, piums does not provide the user with the mw and the pi of the candidate proteins. this could be a problem for the analyst that cannot use the electrophoretic information to better identify the band.

comparison between mspi and mascot
looking at the results obtained when the mass tolerance was fixed to  <dig>  da, mspi with the scoring method  <dig> and mascot  include nine times over ten the "true" proteins in the significant candidate protein lists. the number of significant proteins included in the list is in general higher for mspi than for mascot , but if the significant results are filtered in accordance to the mw read from the gel, the lists shorten mainly for mspi, reaching an overall length of  <dig> and  <dig> for mspi and mascot, respectively.

the results obtained using mspi  and mascot  with a relative mass tolerance  show that both methods include nine times over ten the "true" proteins in the candidate lists and that mascot finds less significant proteins than mspi. however, also in this case, when the mw is used to reduce the size of the candidate lists, mspi obtains less significant proteins  minimizing the number of false positives.

as a final remark, note that, at least in this study, the significant candidate lists obtained by mspi and mascot share only the "true" proteins showing that the two identification algorithms are quite different.

comparison between the mspi scoring methods
comparing the scoring methods implemented in mspi on our dataset, the following considerations can be made. first of all, scoring method  <dig> with a not uniform distribution of peptide masses seems to be not very effective, because it attributes higher scores to very long proteins. in fact, no band was correctly identified, i.e. the "true" protein was never included in the significant candidate lists . scoring method  <dig> shows a reasonable performance, in fact it includes seven times over ten the "true" protein in the significant candidate lists. in this study, score  <dig> and  <dig> show the best performances, correctly "identifying" nine band over ten.

note that band  <dig> was not identified by any of the software tools tested  and actually a more informative analysis using the pff approach was required to identify it  <cit> .

for seven bands mspi indicates only one significant candidate when the mw information was considered, allowing a complete determination of the unknown protein. conversely, in two cases  the lists include more than one candidate. interestingly, the significant candidate proteins have similar characteristics both for the mw and pi and they belong to the same family. in fact candidate proteins, when aligned by the needleman-wunsch algorithm implemented in the bioinformatics toolbox of matlab , showed a high similarity: for band  <dig> the identity between the two candidates was 86% and the similarity was 96%, while for band  <dig> they were about 99% and 100%, respectively.

computational performance of mspi
the routines swiss2mspi.pl, create_database.pl and create_database_random.pl, used to create the reference protein database and the random database, took  <dig>   <dig> and  <dig> seconds, respectively . they have to be executed once or when the main parameters of the analysis are modified . in fact, the generated databases are stored in the db subfolders.

for what concerns the third step of pmf, the time required for the identification of a band depends on the number of query masses and on the scoring method adopted. in the study considered in this paper, after a careful optimization in the implementation of the searching procedure band identifications took about one minute on average, whereof 2/ <dig> of the time was used for the evaluation of the statistical significance of the results. scoring method  <dig>  which uses a variable mass tolerance and a uniform database distribution, employed more time than the other two methods . the estimation of the peptide mass distribution made by the routine make_grid.pl and used for the implementation of score  <dig> required  <dig> seconds for the reference database and  <dig> seconds for the random database. for this reason it is stored after its first computation.

CONCLUSIONS
in this paper, a complete procedure for protein identification by pmf has been proposed. this procedure starts from a query mass list leading to the generation of a candidate protein list and includes the removal of contaminant masses and the statistical validation of the results. the procedure has been fully implemented in a perl software tool, called mspi, available for free downloading and briefly described in this paper. the principal goal of mspi is to implement an exhaustive procedure that:

 <dig>  creates a reference database in which the unknown protein is searched;

 <dig>  performs that search;

 <dig>  computes a similarity score for each protein hit retrieved;

 <dig>  creates a random database for a statistical validation of the results.

many software tools are available in the literature for solving the problem of protein identification, however, all of them either do not implement all the above described steps or present some limitations in their applicability. the software tool proposed here attempts to provide a complete and customizable solution to this task.

the reference protein database is created with particular attention to the in silico reproduction of all processes that occur during the enzymatic digestion and the sample preparation. for example, maximum flexibility is left to the user in the definition of ptms and of the maximum number of mcs.

several scores, based on different hypotheses, were made available in the tool for ranking the proteins that have one or more matches with the query mass list. in particular, both an absolute and a relative mass tolerance can be specified for the evaluation of the matches/mismatches between two masses. since the problem was formulated in a probabilistic context, it is also possible to associate a level of statistical significance to each protein in the candidate list.

a software tool called piums was already present in the literature and it implements a similar probabilistic score. however, the comparison between mspi and piums has highlighted that mspi is more flexible, in that the reference protein databases can be updated and more than one consecutive mc can be considered. moreover, piums does not allow to set relative mass tolerance using a suitable score and it is not customizable by the user . further, at difference from piums, mspi provides the user with the mw and the pi values of all the candidate proteins, helping the analyst to identify the correct proteins in a gel band or spot.

some comparisons were made also with respect to mascot, one of the most popular softwares in this field. the overall performance of mspi and mascot were very similar, even if some differences were present in the candidate lists. mspi retrieves a higher number of significant results, and consequently more false positives, than mascot, nonetheless by exploiting the knowledge about the mw of the band mspi provides a lower number of candidate proteins. as mspi, mascot also computes the mw and the pi of the candidate proteins, even if some slight differences were found.

since the two softwares implement different algorithms and their candidate lists shared in general only the "true" protein, running both methods on the same query list and then comparing the output could be an interesting opportunity. the intersection of the two candidate lists should improve the quality of the results.

while mascot and piums do not implement the relevant utility, the removal of the contaminant masses from the acquired spectra is however an important step of the pmf analysis. in fact, by performing the protein identification analysis on the masses removed from the query mass list by the right mspi algorithm we could highlight the real presence of keratin contaminants in the biological samples. moreover, the analysis performed with mascot on the whole query mass list without removing contaminants showed that many bands were identified as mixture of keratins and other proteins, confirming again the sample contamination.

comparing the different scoring methods implemented in mspi, it turns out that scoring methods  <dig> and  <dig> with a uniform distribution have the best performances, identifying nine bands over ten. the scoring method  <dig> identifies seven bands over ten, whereas the method  <dig> with a not uniform distribution shows some liability.

mspi provides for each candidate protein the significance of the score allowing a natural cut off on the candidate list. mascot, instead, defines a threshold on the score on the basis of the number of sequences of the reference database: if the score is above this threshold, the considered protein is significant. moreover, it optionally provides the number of proteins over this threshold in a randomly generated database.

when the statistical validation process is performed, four cases could show up:

 <dig>  the protein with the best score is the only significant one;

 <dig>  more than one significant proteins are in the list and one of them is the "true" protein;

 <dig>  the "true" protein is not significant, but there are other significant proteins;

 <dig>  there is no significant protein.

when case  <dig> occurs, the electrophoresis experiment can be crucial for protein identification in mspi, since often the proteins identified as significant and yet wrong have a high mw. so, the electrophoresis information allows to reasonably drop some of the candidates. conversely, in mascot it was observed that the hits marked as significant often have the same mw of the "true" one, therefore the gel information becomes less useful.

when either the "true" protein is not included in the list of significant results or no statistically relevant results are obtained, the failure in the identification process may be due to different reasons, such as issues with sample preparation or the presence of a substantial number of contaminant peaks in the spectrum. in order to get an answer and preferably the right one in these cases, the analyst can resort to a pff experiment, which relies on reconstructing the sequence of a defined number of product peptides to identify the parent protein.

availability and requirements
project name: mspi

project home page: 

operating system: platform independent

programming language: perl

other requirements: the following modules are required: cwd, lwp, io::zlib, math::bigint, math::bigfloat 

any restrictions to use by non-academics: a written authorization has to be required to the correspondent author.

appendix
mspi implementation
mspi  is the perl software tool that implements the methodology described in this paper. perl was chosen to implement the second and the third steps of pmf, for its capabilities in alphabetic strings manipulation, which are the main structure for representing proteins and peptides, thanks to the power of its regular expressions. mspi is a collection of several perl scripts and ascii files distributed in several directories. the directory tree created by mspi is shown in figure  <dig>  the data folder contains the query mass list and a configuration file specifying some user-dependent parameters required by mspi. details are reported on the mspi web site in the readme file included in the software distribution.

the tmp folder contains some compressed temporary files created from perl routines, such as the protein database downloaded from the network.

the db folder contains the subfolders within the reference and random databases created in accordance to the user's choices. several databases with different characteristics can be present at the same time in different subdirectories.

the results folder contains the output of the identification procedure, that is the candidate protein list. the src folder contains the perl routines and some additional ascii files that can be complemented or modified by the users. for example, it is possible to add some ptms to those already present. the additional ascii files are the following ones:

• table_mw.txt – it contains the list of the average and monoisotopic weights of the amino acids deprived of a molecule of water ;

• table_pi.txt – it contains the amino acids involved in the computation of pi, their charge polarities and pkr values ;

• table_ptm.txt – it contains the names of all the considered ptms, the involved amino acids, the mws  and the typology of ptms ;

• organism.txt – it contains the complete list of the organisms for which a reference database can be created.

moreover, in the src folder there is a setting file  that contains some parameters necessary to run the mspi scripts .

the main routines of the mspi perl tool are the following: swiss2mspi.pl, create_database.pl, create_database_random.pl, score_pmf.pl and make_grid.pl. these routines run from the command line and interact with the user in the command line environment asking some parameters and options. they are briefly described in the following paragraphs.

swiss2mspi.pl
the swiss2mspi.pl script uses the lwp-download program to download the database from a specific ftp address and saves the downloaded compressed file in the tmp directory. in the current version of the tool, the routine downloads the last version of the swiss-prot database. the ftp address is read from the settings.ini file and the database downloaded is renamed as swissprot_rel.xxx.fasta.gz, where xxx indicates the swiss-prot release.

create_database.pl
the create_database.pl routine reorganizes the downloaded database and creates the reference database as illustrated in the methods section. the user-dependent parameters necessary to create the new database are read from the settings.ini file. this routine includes also two subroutines for the computation of protein mw and pi. it first reads from the tmp folder the downloaded protein database and since it is stored in a compressed file, the perl package io::zlib is used to read it at the fly without a preliminary decompression. the organisms to be considered are read from the file organism.txt and consequently proteins are selected. mws and pis are computed and the in silico enzymatic digestion is performed considering also the mcs and the ptms as specified in the settings.ini file. the last step of this routine is the creation of a file containing the contaminant masses that should be removed from the query mass list. the accession numbers of the contaminants to be considered are placed in the settings.ini file. during the reference database creation, the number of times that a same peptide mass occurs is counted through a hash table to compute its frequency afterwards. this information is used by the routine score_pmf.pl to decide if to remove or not the contaminant masses from the query mass list on the basis of a user-defined threshold.

create_database_random.pl
the create_database_random.pl routine creates the random database for the statistical validation of the ranked protein list obtained by the identification procedure. on the basis of the number of proteins in the reference database, the routine suggests to the user the "optimal" size of the random database supporting the choice of the drnd parameter.

score_pmf.pl and make_grid.pl
the score_pmf.pl script reproduces the third step of pmf, i.e. the search of the acquired spectrum in the reference protein database. the perl packages used by this script are io::zlib, math::bigint and math::bigfloat. the two latter allow to limit overflow and underflow problems. they are used in the computation of the similarity score when binomial coefficients are too large.

first, the m/z contained in the input peak list are transformed into masses to be comparable with those of the peptides in the reference database and then, if the analyst wants to remove contaminants, the algorithm proceeds with the removal step. the list of the contaminant proteins is stored in the contaminants.txt file. the script selects which masses to remove from the query mass list on the basis of the protein accession number and of the peptide mass frequency in the reference database. note that if a query mass matches that of a contaminant, it is removed from the query mass list and consequently the list shortens affecting the l parameter of the scores .

if the mass range chosen by the user for a specific analysis is not equal to that stored in the settings.ini file and used to build the reference database, the identification takes longer because the number of peptides of each protein in the new mass range must be re-evaluated. conversely, the routine directly reads this information in a suitable file created during the reference database building step.

in the searching step, the routine compares the query masses with the theoretical peptides which have an id that satisfies the ptms and mcs conditions imposed by the user, opening the right database files. when a match occurs, a hash table storing the total number of matches for that protein is updated. moreover, further hash tables are created for computing the protein sequence coverage and for updating the protein mw on the basis of the mcs and ptms that occur in its peptides. when all the database files are examined, mw and pi information on the unknown protein are used, if provided, to select the candidate proteins to be scored. they can be derived, for example, from the electrophoresis experiment. the tolerance window for mw is fixed to ± 20% while for pi it is fixed to ±  <dig>  both tolerances can be modified by the user.

on the basis of the scoring method chosen by the user  a different algorithm is used to score each selected protein. in particular, in score  <dig> and  <dig> the binomial coefficient is computed using a specific subroutine and if required and possible the binomial distribution is approximated with a gaussian distribution using a subroutine that evaluates the complementary error function as described in  <cit>  and reported here in the next paragraph. if score  <dig> is chosen, the peptide mass distribution in the reference database is estimated if it is not assumed to be uniform. to this aim the routine uses the script make_grid.pl which creates the discretization grid described in the methods section. if a grid file already exists in the database subfolder, the routine score_pmf.pl directly reads it and computes the parameter λ. when all the proteins have a score, they are ranked according to this score and the ranked candidate protein list is generated. if required, the p-value is computed thanks to the random database. this list is written in an output file, whose name is chosen by the user, and stored in the results folder. this file contains for all the candidate proteins the accession number, the id, the organism, a description, the mw, the pi, the total number of amino acids, the number of query masses, the number of matches, the score, the p-value , the quality index , the protein sequence coverage and the list of matched peptides.

the gaussian approximation
the computation of scores  <dig> and  <dig> required the evaluation of the binomial coefficient that, in some cases, can become so big to cause overflow. this problem can be overcome implementing the gaussian approximation of the binomial distribution. a binomial distribution can be well-approximated with a gaussian distribution of mean μ = lp and variance σ <dig> = lp  if:

  

this approximation is correct from a statistical point of view, because for l tending to infinite, the binomial distribution is asymptotically gaussian.

the cumulative gaussian distribution probability is:

   

being to binomial distribution a discrete distribution and the gaussian distribution a continuous distribution, to approximate the binomial distribution with the gaussian distribution it is suitable to apply the so called continuity correction defining:

   

this correction is less accurate in the tails of the gaussian distribution and it introduces some numerical errors in the evaluation of , being the gaussian cumulative probability distribution not available in closed form by elementary functions. nevertheless, the integral at the second member of the  can be computed by a numeric way through the error function erf:

  

there is a connection between the error function and the standard gaussian cumulative distribution p, because they differ only for translation and scaling  <cit> :

  

the probability can be computed using the error function, but typically the complementary error function is used, because it is more accurate for x values greater than  <dig> , especially in the gaussian tails and, moreover, it is reported in the literature  <cit> :

  

from a computational point of view, the probability of a gaussian random variable is calculated by the rational chebyshev approximation for the erfc  <cit> . the erfc approximation is made considering three intervals and using rational polynomial on the basis of the interval where x falls. in particular:

  

where the random gaussian variable x is standardized and the coefficients pj e qj are reported in the literature. in this work, the maximum polynomial degree was used.

competing interests
the authors declare that they have no competing interests.

authors' contributions
at led the design and the implementation of the perl procedure, the software tool comparisons and drafted the manuscript. nb helped to define the analysis procedure. st and lr designed and performed the pmf experiments, led a first analysis of the data with commercial software tool and contributed to the definition of the overall procedure. pm supervised the design and the implementation of the perl procedure and finalized the manuscript. all authors read and approved the final version of the manuscript.

