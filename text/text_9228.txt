BACKGROUND
whole-genome sequencing has enabled investigations into the gene content of living many organisms and forms the foundation for further study of gene expression, proteomics and epigenetics. after assembly of a novel genome, gene annotation is often the first step in analysing the gene content of an organism. accurate annotation of the exonic structure of genes is crucial to the success of all subsequent functional and comparative analyses.

problems that can potentially be caused by incorrect gene annotation are numerous and can lead to incorrect assessments of the lifestyle and ecology of an organism. in comparative genomics where orthologous genes or conserved functional domains are compared between species/isolates, the estimated numbers of such genes/domains can be distorted by less than perfect annotations . prediction of extracellular secretion, which can be determined by a short signal peptide at the n-terminus, can miss secreted proteins if the start codon of a gene has been incorrectly annotated. mis-annotating the start of protein translation could either cut off the signal peptide or bury it within the annotation. while a seemingly benign annotation error, the consequences for downstream research could be detrimental, particularly as the biotic interactions or industrial applications of microbes are largely determined by their secretomes. additionally, translated protein sequences of novel species are often submitted to databases such as ncbi  <cit>  and uniprot  <cit> . it is commonplace to use these database entries to support the annotation of related species or isolates, meaning errors present in the pioneer annotation may be repeated. when these new annotations based on false assumptions are added to databases, there is not only a propagation of errors, but also a perceived strengthening of homology evidence for incorrect protein sequences.

in recent years, correction of in silico predicted gene annotations with rna-seq derived transcripts and read alignments has enabled vastly improved genome annotations and corrections of annotated gene structures  <cit> . short read and/or assembled transcript alignments are typically used to correct the coordinates of intron-exon boundaries in existing gene annotations or predictions  <cit> , to train gene predictors  <cit> , and can also be incorporated directly into gene prediction by hybrid gene predictors  <cit> . since their initial application to gene prediction  <cit> , generalised hidden markov models  have played an important role in genome annotation. various ghmm gene predictors  <cit>  continue to be incorporated into annotation pipelines  <cit> , some of which are capable of making use of rna-seq data. for example, augustus  <cit>  allows the user to generate hint files from rna-seq read/transcript alignments that are then used to improve prediction accuracy. more recently, a new version of genemark-es  <cit> , named genemark-et  <cit>  allows the incorporation of rna-seq data into its automated gene model training. these gene finders are both applicable to a broad range of eukaryotic genomes. a number of pipelines have also been developed that utilise available gene prediction software and rna-seq data to generate annotations. some examples of such pipelines are maker  <cit> , evidencemodeler  <cit> , jamg  <cit> , snowyowl  <cit>  and the insect genome annotation pipeline omiga  <cit> . the continued development of pipelines such as these relies on the availability and development of component software such as ghmm gene predictors.

fungal genomics has applications in areas such as agriculture  <cit> , medicine  <cit> , biomass conversion  <cit>  and food/beverage production  <cit> . this broad industry relevance and the continued growth in the number of new fungal species with sequenced genomes emphasises the importance of fungal gene annotation. fungal genomes differ from those higher eukaryotes in that they are gene dense with short introns  <cit> . they also exhibit less alternate splicing when compared to other eukaryotes, with a higher proportion of mrna isoforms arising from retained introns  <cit> . manual annotation is considered to be the most reliable method of producing a high quality genome annotation, but this is time consuming and can be a bottleneck in genome studies  <cit> . consequently fungal genome annotations are typically derived from ab initio predictions, spliced est/transcript alignments and protein homology  <cit> . for many fungi, closely related species have either not been sequenced or their genomes have not been annotated in detail. this can mean that sets of homologous proteins for use in protein homology annotation are either small or unreliable. in such cases, gene prediction relies more on est/transcript alignments and ab initio predictions.

currently available gene prediction software and pipelines are typically intended for application across a broad range of eukaryotes, with comparatively few being specific to fungi. gipsygene  <cit>  is a ghmm gene predictor that was developed for fungi, with particular attention given to modelling fungal introns correctly. a version of genemark-es  <cit> , a self-training ghmm, also uses an intron model designed for fungi. however, neither of these incorporates rna-seq data. snowyowl  <cit>  is a recently developed pipeline designed specifically to annotate fungal genomes using rna-seq data and homology information. although designed for fungi, snowyowl selects from ghmm predictions made by augustus  <cit> , a gene predictor that was optimised for application across a broad range of eukaryotes.

in this study we present the gene prediction tool codingquarry. it is designed to make protein-coding gene sequence predictions through the use of assembled or aligned rna-seq transcripts in both ghmm training and prediction. codingquarry is differentiated from other gene predictors by the combined use of gene predictions made directly from both transcript and genome sequences.

the choice to tailor codingquarry to the prediction of fungal genes and to use assembled, aligned transcripts rather than raw read alignments relates to some key differences between fungal genomes and those of higher eukaryotes. firstly, fungi exhibit significantly less alternative splicing than higher eukaryotes. consequently, the task of transcript assembly is simpler, resulting in a higher proportion of correctly assembled full-length transcripts  <cit> . secondly, fungi have smaller introns than higher eukaryotes  <cit> . recent studies indicate short introns are reconstructed in transcript assembly with a higher success rate than long introns  <cit> . these transcript assembly advantages make it feasible to generate coding sequence annotations directly from assembled transcript sequences, a process that is more likely to be error prone in higher eukaryotes.

a major consequence of the high gene density observed in fungi is a high proportion of instances whereby the untranslated regions  of adjacent transcripts overlap in terms of their positions on genomic dna. overlap can be between 3′ and 5′ utrs of adjacent genes on the same strand, or between 5′ and 5′ or 3′ and 3′ utrs of adjacent genes on opposite strands. overlaps from the latter example, particularly in the case of 3′ to 3′, are referred to as sense-antisense  overlaps. s-as overlaps have been observed to occur rarely in many species, but are widespread in fungi  <cit> . essentially this means that in gene-dense fungal genomes, mapped rna-seq reads belonging to adjacent genes may support regions of coverage that span two or more loci. this is a more severe problem when ‘unstranded’ rna-seq chemistries are used, as s-as overlaps can be distinguished through the use of stranded rna-seq data. codingquarry is designed to work with assembled, aligned transcripts derived from either stranded or unstranded rna-seq data and to specifically address the problem of merged transcripts, such that these transcript assembly errors do not translate to coding sequence annotation errors or omitted gene loci.

for the purpose of demonstrating codingquarry’s performance we have selected two exemplar fungal species, which possess highly reliable sequence and annotation resources: saccharomyces cerevisiae and schizosaccharomyces pombe. s. cerevisiae, commonly known as baker’s yeast, has long been a model organism and is important to the wine making, baking and brewing industries. sc. pombe, commonly known as fission yeast, is also a model organism. these two species are estimated to have diverged from a common ancestor up to  <dig> million years ago  <cit>  and are representative of distantly related fungal sub-phyla. in this study we have used the high-quality annotations of these fungi to benchmark the sensitivity and specificity of codingquarry, and compare it to other gene predictors.

implementation
data sets for benchmarking
to test the accuracy of predictions made by codingquarry and other gene predictors, we utilised assembled genome sequences, rna-seq reads and up-to-date gene annotations of two model fungi: s. cerevisiae and sc. pombe.

the sc. pombe  genome, annotation and protein sequences were downloaded from pombase  <cit>  and rna-seq reads  were downloaded from ncbi  <cit> . the reads were trimmed using cutadapt  <cit> , aligned to the genome using tophat  <cit>   and assembled using cufflinks  <cit>  . the rna-seq data used for sc. pombe was stranded . to simulate a transcript assembly from unstranded rna-seq data, tophat and cufflinks were also re-run as above with the modified parameter ‘–library-type fr-unstranded’.

the s. cerevisiae  genome, annotation and protein sequences were downloaded from the saccharomyces genome database  <cit>  and rna-seq reads  were downloaded from ncbi. reads were trimmed, aligned and assembled using the same method as described above for sc. pombe .

although both sc. pombe and s. cerevisiae are annotated to a high standard, it was desirable to identify a stringent subset of their genes that are of very high-confidence. this is because not all genes are verified to the same degree, and some are therefore more likely to be accurate than others. it is still possible that the full annotations contain errors that are artefacts of the prediction tools, data and methods used to generate them. comparing predictions against a high-confidence set excludes some annotations that are lower confidence, and is likely to give a better assessment of the accuracy of gene predictors. annotations within these high-confidence subsets were required to exactly match sequences in uniprot’s  <cit>  reviewed database and to be listed and as possessing protein level evidence. there were  <dig>  of these for sc. pombe and  <dig>  for s. cerevisiae. nevertheless, as codingquarry’s intended purpose is to predict genes across entire fungal genomes, we also report its performance benchmarked to the less stringent full datasets of  <dig>  sc. pombe genes and  <dig>  s. cerevisiae genes.

codingquarry prediction method outline
codingquarry predicts genes in  <dig> stages. the first stage involves prediction of genes directly from transcript sequences derived from regions of the genome supported by rna-seq in gff   <cit> , such as derived from cufflinks  <cit> . the second stage complements the first and involves additional predictions based on genomic sequences. in both stages ghmms are used to predict genes, however, these differ in their structure and in how they incorporate rna-seq data into their predictions. the ghmms used in both stages are also trained automatically using the rna-seq data. the final predicted annotation produced by codingquarry is a combination of predictions made in stages  <dig> and  <dig> 

stage 1: training and prediction from transcript sequences
the coordinates of transcribed regions  relative to the assembled genome sequence are used to extract the sequences of a set of virtually spliced transcripts . a generalised hidden markov model  is used to make gene predictions directly from this set of transcript sequences. predicted coding-sequences are then converted back to their relative genomic coordinates, with transcript splicing being accounted for in this process.

the ghmm used in stage  <dig> uses fixed length states to describe the gene start and kozak sequence  <cit>  and gene stop codon, and variable length states to describe gene coding sequences, utrs, and non-coding transcripts. to address the issue of merged transcripts, this model allows a single transcript sequence to contain multiple genes, via the creation of a “middle utr” state. where utrs of adjacent transcripts overlap in terms of their relative corresponding positions on the genomic dna, a single transcript sequence as derived from rna-seq can contain multiple gene loci. a pictorial example of this is shown in figure  <dig>  section bi, in which the middle utr state is used to allow the correct prediction of two genes on the same strand within a merged transcript sequence. in the case of unstranded rna-seq, prediction errors arising from transcript sequences merged due to s-as utr overlap are corrected in stage  <dig> figure  <dig> 
codingquarry flow diagram. examples are shown of correct annotations of coding sequences,  and a typical codingquarry input; assembled transcripts aligned to the genome . the stages used within codingquarry to predict coding sequences are shown . firstly, coding sequences are predicted from transcript sequences  using a ghmm . possible prediction errors after this step are coloured red, and notes show how these are identified . these error prone predicted genes are discarded , and regions are selected for prediction from genome sequence . the resulting prediction is output by codingquarry , which merges the retained predictions from transcript sequences  with the predictions from selected areas of the genome sequence . sections of the example genome sequence and annotations have been labelled i-x in each part of the diagram , and marked with vertical dotted lines. these sections are labelled to facilitate in-text references to the diagram in the implementation section of this manuscript. labels i-x correspond to the same genome sections through a-g.



the coding regions are modelled using a fifth-order, three-periodic markov chain. the 5′, 3′ and ‘middle’ utrs, as well as non-coding transcripts are modelled using a fifth-order  markov chain. a second-order weighted array matrix over a region of  <dig> nucleotides up to and including the atg start codon models the kozak sequence and gene start. length distributions of the coding region state, utr states and non-coding transcript state are modelled using smoothed length frequencies.

a self-training method is used, where parameters are initially estimated from the longest open reading frame  in each transcript. the ghmm is then successively run and retrained twice to refine the parameters. there are some restrictions placed on the sequences that are used for retraining, based on the general principle of preferential exclusion of some correct sequences rather than risking including false-positives. training of the “gene” state is therefore restricted to coding sequence lengths greater than or equal to  <dig> nucleotides to guard against the inclusion of false-positive predictions in the training set. similarly, open reading frames in utr regions greater than or equal to  <dig> nucleotides are removed from the utr training set to guard against the inclusion of coding sequences. where there are overlapping genes in the prediction, the longer gene is retained in the training set and the shorter overlapping gene are discarded.

importantly, this method is distinct from methods where the transcript/est alignment is used to inform a ghmm prediction from genome sequence. the main advantage of the initial prediction from transcript sequences is that the predicted annotation will have intron boundaries that agree exactly with the intron boundaries in the transcripts to genome alignment. another advantage is that where the transcript assembly indicates that there is an alternative splicing, prediction from transcripts allows the coding sequences splicing alternatives to be predicted.

stage 2: prediction from the genome sequence
after the prediction from transcript sequences is carried out in stage  <dig>  there may still be a number of errors and omissions in the predicted annotation . these predictions are therefore added to, and in some cases replaced by predictions made from genome sequence.

the stage  <dig> predicted gene set is used to train a second, different ghmm which is designed to make predictions from assembled genome sequence. this genome based ghmm includes additional states to model introns, a feature not previously required in the spliced transcript-based ghmm used in stage  <dig>  another difference is that the ghmm used for transcript sequences models the 5′ and 3′ utr regions, whereas the ghmm used for prediction from genome sequence models these regions as part of larger “intergenic” regions. the stage  <dig> ghmm intron model used has fixed length states for the donor, acceptor and branch point sequences, modelled by first-order weighted array matrices. variable length states are used to model the regions between these fixed length states. the intron model is based on research showing that fungal introns have high information content in the 5′ splice site, 3′ splice site and branch point regions  <cit> , and is similar to the intron model used by genemark-es  <cit> . during training, the acceptor/donor lengths are automatically adjusted by codingquarry to suit the fungi being predicted on. the acceptor/donor is extended to the furthest out nucleotide position  with a statistically significant difference in nucleotide composition when compared to the adjacent intron region. a chi-square test  is used to test for statistical significance. the acceptor and donor are taken to extend  <dig> nucleotides into the adjacent exon, and can be up to a maximum length of  <dig> nucleotides. during prediction, the lengths of these states is fixed. the maximum intron size is set as 10% longer than the longest intron evidenced by the transcript alignment, unless this value is greater than  <dig> , in which case the maximum is limited to  <dig> . the user can choose to disable the intron model length restrictions of codingquarry in order to allow it to be used for species with longer intron lengths.

in prediction from transcript sequences , the location of introns is inferred from the transcript to genome alignment, and the assembled transcript sequences are used to model the utrs. when predicting genes from genome sequence in stage  <dig>  rna-seq data is also incorporated in ghmm prediction, but in a different way. where there is supporting evidence from rna-seq data, the prediction of introns is restricted by the transcript alignment. intron boundaries  are disallowed in areas where there is an aligned transcript sequence on the same strand. this restriction is relaxed within  <dig> nucleotides of the transcript end, where introns may be predicted ab initio, in the same manner as in regions without evidence of transcription. introns are only allowed to occur where the first  <dig> nucleotides of the intron donor and last two nucleotides of the intron acceptor sites are gt and ag respectively.

after the stage  <dig> genes are used for training, certain predicted genes that are likely to be inaccurate are discarded and areas of the genome are selected for prediction from genome sequence. discarded stage  <dig> predicted genes include single-exon genes and genes suspected to be incomplete . the areas selected for prediction from genome sequence are the areas flanking the retained stage  <dig> genes, as well as loci where alternative splice forms may exist. these steps, and the motivation for them, are discussed in more detail in the following paragraphs, and figure  <dig>  sections d, e and f give examples and summarise this process.

where an assembled rna-seq transcript, aligned relative to the genome sequence, overlaps another assembled transcript on the opposite strand, the transcript’s predicted utr can contain all or part of the coding sequence from the adjacent transcript on the opposite strand. in stage  <dig>  genes are predicted in a single direction in a single transcript, that is, although multiple genes are permitted to be predicted in a single transcript, they must all be in the same direction. as a result, where prediction from transcript sequences is carried out on utr regions containing coding sequence on the opposite strand, we have observed a tendency to predict small false-positive single-exon genes . this is because the reverse-complement of a coding sequence has a slightly higher g:c content and contains fewer stop codons than typically occur in utrs, therefore these regions are often a closer match to the coding sequence model. this problem occurs even more frequently when unstranded rna-seq is used and adjacent transcripts on opposite strands are assembled into a single locus. to correct this, all single-exon genes from stage  <dig> are discarded and predictions from genome sequence are carried out in those regions. although single-exon genes are used for training, this is restricted to coding sequences over  <dig> nucleotides so that these small false-positives do not contaminate the training set. when genes are predicted from genome sequence in step  <dig>  the prediction is allowed to be on either strand and these false-positive predictions therefore do not occur, leading to better results.

transcript assemblies are likely to contain some low coverage, incomplete transcripts . attempting to predict a complete gene from an incomplete transcript sequence can lead to errors due to absent start or stop codons . if the transcript is incomplete at the 3′ end and the gene’s stop codon is outside the transcript sequence then it is likely that no gene will be predicted from the transcript. if the 5′ end of the transcript is incomplete then the predicted gene will have an incorrect start codon, or be completely missed . in these circumstances, a prediction from genome sequence is likely to be more accurate. where the open reading frame of a coding sequence predicted in stage  <dig> can be extended beyond the bounds of the supporting assembled transcript, there is the possibility that the assembled transcript sequence and resulting predicted coding sequence are incomplete at the 5′ end. such genes are therefore identified as genes that are suspected to be incomplete. therefore, the stage  <dig> prediction is removed and stage  <dig> genome-based predictions are then carried out . any intron sites supported by the partial transcripts will restrict the location of introns predicted in step  <dig> and the gene prediction is thus operating as an rna-seq informed predictor, rather than completely ab initio.

in an effort to identify alternate splicing during stage  <dig>  if the removal of an intron can extend an orf across it without terminating at a stop codon, additional predictions from genome sequence in stage  <dig> are allowed in these regions . this process allows correct predictions to be made where a transcript has been assembled with a false-positive intron, or where an alternatively spliced transcript retaining the intron sequence was not included in the transcript assembly, possibly due to low rna-seq abundance.

in addition to correcting some of the inaccuracies in gene prediction from transcript sequences, prediction from genome sequence allows ab initio prediction of any genes that were not expressed under the experimental conditions used . gene predictions of this kind are ab initio and therefore subject to greater uncertainties. in light of this, the final outputs of codingquarry make note of whether a final gene prediction was derived from transcript  or genome-based  prediction processes.

post prediction filtering
the final stage of annotation that codingquarry carries out is the removal of genes likely to be false-positive predictions. any gene with a coding sequence that translates to less than  <dig> amino acids is removed from the annotation. where alternative splice variants are predicted, only variants with at least one unique intron, or  <dig> or more unique amino acids are retained. finally, any gene predicted overlapping a larger gene on the opposite strand is removed where less than 20% of its coding sequence lies outside the bounds of the larger gene. as discussed earlier, false-positive predictions of this kind a common where transcripts overlap one another. while nested genes of this kind are known to occur, they are considered to be rare  <cit> .

gene discovery
often one of the key interests of rna-seq studies for annotation purposes is to discover previously unannotated genes in areas with evidence of transcription. for example, laterally transferred genes, which are of high relevance in fungal genomics  <cit> , may be missed in homology or ghmm-based predictions due to a lack of homologs in closely related species or atypical codon usage patterns. to assist in this process, codingquarry forces a gene prediction in transcripts that have no overlapping gene prediction after the complete annotation run. this uses the same hidden markov model as in stage  <dig>  however the probability of a state transition to a non-coding transcript state is set to zero. these genes are not intended to be included in the main set of predicted annotations and are output separately as a set of “dubious” genes. further efforts to verify which of these genes are genuine could include searches for pfam/anti-fam domains  <cit> , blast searches to databases or experimental verification. however, this set is certain to contain a high proportion of false-positive genes, in part due to open reading frames occurring by chance within non-coding transcripts.

merged transcripts
one of the final outputs of codingquarry reports the ids of assembled transcripts suspected to be instances of transcripts merged in assembly due to overlapping utrs. this output is based on the genes predicted by codingquarry, and reports the number and dna strand orientations of the theoretical constituent transcripts. reporting the orientation is important for unstranded rna-seq data, where instances of sense-antisense  overlap between utrs can lead to transcripts on opposite strands assembling into single loci.

training and running other gene predictors for benchmarking
comparisons were made with augustus  <cit> , and transdecoder  <cit> . augustus  and transdecoder both leverage rna-seq data and as such have comparable features with codingquarry. though genemark-et also uses rna-seq data to assist annotation, comparisons were not possible at the time of submission due to its application to fungi being under development. it is important to note that genemark-et uses rna-seq data to assist in automated training, rather than to also subsequently inform and influence predictions.

augustus was trained using the online training server  <cit>  taking a fasta file of assembled transcripts  and the genome sequence as input. this pipeline uses pasa  <cit>  to generate a training set of genes from the transcript data, aligns the transcripts to the genome and uses hints generated from the alignment to assist in gene prediction. this pipeline does not train an untranslated region  model from assembled rna-seq transcripts. intron hints were also generated directly from the read to genome alignment generated by tophat, however predicting with the hints produced by the training server produced predictions with better sensitivity and specificity when compared to the accepted annotations, and these results were therefore used for comparisons with codingquarry.

transdecoder predicts genes from transcript sequences and uses the transcript-to-genome alignment to place predictions on the genome. pfam domain searches are also used by transdecoder to support gene predictions. transdecoder was run using the tophat/cufflinks transcript assembly as per the instructions on the cited web page  <cit> .

quantifying gene prediction accuracy
measures of nucleotide, exon, intron and gene sensitivity and specificity, as described by burset and guigo  <cit> , were used to compare the high-confidence sets with the various predictions. sensitivity is the proportion of a given feature  in the high-confidence set that are correctly predicted. specificity is the proportion of features in the predicted set that are correct . a correct nucleotide prediction was defined to be a nucleotide within a predicted coding region that is also within a coding region of the high-confidence set. an incorrect nucleotide prediction was defined to be a nucleotide within a predicted coding region that is within an intron or intergenic region in the high-confidence set. a correct exon/intron was defined to be where the exon/intron boundaries in the predicted set were an exact match to the exon/intron boundaries in the high-confidence set. an incorrect exon/intron was defined to be where the exon/intron boundaries in the predicted set did not exactly match one of the exons/introns in the high-confidence set. a gene was defined to be correctly predicted if the gene was exactly the same as in the high-confidence set, and incorrect if the high-confidence set did not contain gene that matched exactly.

where comparisons were made with the full set of genes in the annotation, all genes in the prediction and in the annotation were used to calculate the values of sensitivity and specificity. where comparisons were made with the high-confidence annotation subsets, the region over which each of these values were calculated was bounded by the high-confidence set gene boundaries, and any overlapping gene in the predicted set.

RESULTS
sensitivity and specificity values were calculated at the nucleotide, exon, intron and gene-level for codingquarry predictions and predictions made by transdecoder and augustus. comparisons were made between predictions and high-confidence subsets , and the full sets  of sc. pombe and s. cerevisiae gene annotations. codingquarry can be seen to outperform the other gene predictors in many of the measures. impressively, codingquarry achieved a ~90% gene-level sensitivity when comparing predictions with the high-confidence subsets. this means that codingquarry predicts around 90% of the high-confidence set genes perfectly, which is around 4-5% more than the next best gene-level sensitivity result, belonging to augustus , and around 10% better than transdecoder, which also makes predictions from transcript sequences.table  <dig> 
comparisons between predictions and high-confidence gene sets for
sc. pombe
and
s. cerevisiae


nucleotide
exon
intron
gene
sn
sp
sn
sp
sn
sp
sn
sp

sc. pombe 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

s. cerevisiae 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
sensitivity  is the proportion of a given feature  in the high-confidence set that are correctly predicted. specificity  is the proportion of features in the predicted set that are correct. sensitivity and specificity calculations for nucleotides are made on nucleotides within coding regions. further descriptions of these measures are given in the implementation subsection titled “quantifying prediction results”. the highest scores in each column for sc. pombe and s. cerevisiae are shown in boldface.
whole-genome comparisons between predictions and current
sc. pombe
and
s. cerevisiae annotations


nucleotide
exon
intron
gene
sn
sp
sn
sp
sn
sp
sn
sp

sc. pombe 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

s. cerevisiae 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
sensitivity  is the proportion of a given feature  in the annotation that are correctly predicted. specificity  is the proportion of features in the predicted set that are correct. sensitivity and specificity calculations for nucleotides are made on nucleotides within coding regions. further descriptions of these measures are given in the implementation subsection titled “quantifying prediction results” the highest scores in each column for sc. pombe and s. cerevisiae are shown in boldface.



an important consideration is that although both codingquarry and augustus both use ghmms, codingquarry operates very differently to augustus. the main difference is that codingquarry combines predictions made initially from transcript sequences together with predictions from genome sequences. we assert that this is an important point in favour of codingquarry being considered for wider incorporation into automated annotation pipelines. consensus between the predictions of different programs/tools can strengthen the confidence in the gene structure, particularly where genes are predicted by different methods. for example, codingquarry and augustus predict  <dig>  genes sc. pombe genes identically,  <dig> % of which exactly match the sc. pombe annotation. in the case of s. cerevisiae, codingquarry and augustus predict  <dig>  genes identically,  <dig> % of which are correct. this demonstrates that these subsets of genes have a higher specificity than either of the programs do individually, and can be considered higher confidence. if gene predictors operate in very similar ways, the fact that predictions agree is less significant.

the improved accuracy of codingquarry over alternative gene predictors is not achieved through protein homology-based prediction or refinement. accurate gene predictions are therefore achievable when reliable sets of homologous proteins are not available. such situations can arise when considering newly sequenced fungi, where closely related fungal species have not been sequenced or well annotated. however, if reliable homology evidence is available, codingquarry’s results have the potential to be further refined and improved by post-prediction annotation tools that merge predicted annotations with multiple sources of supporting evidence, such as evidencemodeller  <cit>  or maker <dig>  <cit> .

the closest competitor to codingquarry is augustus, which derives all its gene predictions from genome sequences. however, when predicting genes from gene-dense genomes, the short intergenic distances make it possible for an intergenic region between two adjacent genes to be falsely annotated as an intron thus predicting a single merged gene where there should be two or more separate genes. we observed  <dig> and  <dig> instances of this in the augustus predicted gene sets for sc. pombe and s. cerevisiae respectively. when predicting directly from transcript sequences with codingquarry this is unlikely to occur, as introns are not predicted during stage  <dig> and adjacent genes would therefore need to be separated by an orf to be falsely predicted as a single gene. as such, we see just one case of this error occurring in codingquarry predictions for s. cerevisiae, and two for sc. pombe. this demonstrates an advantage to using codingquarry when annotating gene-dense fungal genomes. notably, this advantage is also observed for transdecoder, which also predicts from transcript sequences, with no cases of this error in the s. cerevisiae prediction and just one in sc. pombe. however, transdecoder achieved a much lower overall quality of prediction, with a ~10% lower sensitivity and ~10-20% lower specificity than codingquarry when compared to the high-confidence subsets and full sets of annotations . transdecoder is intended to be used as part of a prediction pipeline and generates a set of genes to be used for training gene predictors. it is important to note that for its intended purpose, transdecoder performs extremely well. however, based on the results shown in tables  <dig> and  <dig>  codingquarry was able to generate a larger and more accurate training set of genes.

as explained in the methods section, the predictions made by codingquarry are a combination of predictions from transcript sequences , and predictions made from genome sequence . a filtering step then removes genes likely to be false-positive predictions. the gene-level sensitivity and specificity of codingquarry, when compared to full sc. pombe datasets, after each of these stages is displayed in figure 2a. figure 2a shows that the initial step of creating a training set using the longest orf in each transcript has low values of sensitivity and specificity. an ~8% gene-level sensitivity and ~6% specificity improvement to predictions is made in stage  <dig>  where these annotations are replaced by ghmm predicted genes. part of the reason for this is that during stage  <dig>  multiple genes predictions are allowed to be made within a single transcript, allowing a large number of genes residing in incorrectly “merged” transcripts to still be predicted. the second prediction stage again results in a jump in prediction accuracy, this time improving the gene-level sensitivity by ~8% and specificity by ~2%. this is due to the addition of genes predicted ab initio in regions without rna-seq transcript coverage and the prediction of genes in regions where the transcript assembly is incomplete. single-exon genes are also re-predicted stage  <dig>  the final filtering step gives the final output codingquarry prediction. this step serves to improve specificity via the removal of false-positive genes, and therefore had little effect of the gene-level sensitivity .figure  <dig> 
changes in codingquarry prediction accuracy at various stages of prediction of
sc. pombe
genes. the gene-level sensitivity and specificity is shown at various stages  within a codingquarry run. results show comparisons with sc. pombe where a)  rna-seq data strand information was used and b)  strand information was ignored. longest orf is the initial training set, found by taking the longest open reading frame in each transcript to be a gene, stage  <dig> predictions are made from transcript sequences, stage  <dig> adds to and replaces some of stage  <dig> predictions by predicting from genome sequence. filtering of likely false-positive genes  takes place before a set of predicted genes is output as the “final output”. this output is the annotation generated by codingquarry.



we observed variation in the accuracy of gene predictions made by all assessed gene predictors when comparing the results for sc. pombe with those for s. cerevisiae. fungal species have many complex differences relating to characteristics such as the number and size of introns  <cit> , prevalence of alternative splicing  <cit> , and gene density  <cit> . it is therefore reasonable to expect that gene prediction accuracy may vary across differing fungal species, and this can be seen in occurring in other published studies  <cit> . for predictions generated by codingquarry, a possible explanation is the contribution of rna-seq evidence and how this could influence prediction accuracy. in the case of sc. pombe, around 84% of the predicted genes result from a stage  <dig> transcript based predictions. however, the stage  <dig> component of the predicted genes is around 5% lower in s. cerevisiae. as these predictions rna-seq driven, they are expected to be higher confidence, and it is therefore reasonable to expect the results to be better for sc. pombe than s. cerevisiae.

although stranded rna-seq data is now readily available, a large quantity of non-stranded rna-seq data is publically available. it is therefore important that codingquarry can deal with transcript assemblies resulting from either stranded or unstranded rna-seq. figure  <dig> shows gene-level sensitivity and specificity of s. pombe gene predictions made at stages within codingquarry with rna-seq data where stranded information was ignored , and where stranded information was included . gene level sensitivity and specificity for codingquarry’s final output predictions on sc. pombe were less than 1% and 2% different between unstranded and stranded runs  . this result supports of the efficacy of codingquarry in overcoming issues in unstranded rna-seq datasets. comparisons between figure 2a and b show that codingquarry predictions using the unstranded transcript assembly showed a ~25% improvement in gene level sensitivity going from stage  <dig> to stage  <dig> – further supporting the validity of the various processes employed in stage  <dig> to correct for annotation errors. we surmise that this is a direct result of sense-antisense  transcript overlap resulting in merged transcripts composed of transcripts on opposite strands. this confounds prediction from transcript sequence, where genes are expected to be in the same direction as the transcript. as explained in the methods section, and evident from figure 2a, this is corrected in stage  <dig> leading to comparable final outputs.

codingquarry reports on assembled transcripts which, according to the coding sequence predictions, may be multiple transcripts merged together in the assembly process. where stranded rna-seq is used, this is only a problem for overlapping transcripts on the same strand. for the sc. pombe stranded rna-seq experiment, there were  <dig> instances reported by codingquarry of likely transcript fusions. of these,  <dig> were suspected to be the result of fusion of more than  <dig> transcripts. for s. cerevisiae there were more fusions detected:  <dig> , with  <dig> of those suspected to result from the fusion of more than  <dig> transcripts. given that different organisms of the same phyla can have very different gene densities and spacing, the higher number of fusions present in the s. cerevisiae transcript assembly is not surprising. where transcripts are assembled from unstranded rna-seq, there is the possibility of merged transcripts arising from s-as transcript overlap. although the splice sites in the transcript-to-genome alignment can help to separate these transcripts, it remains a problem where one or more of the transcripts align without introns. for sc. pombe, the version of the transcript assembly generated without using strand information contained  <dig>  instances where one transcript was suspected to be the fusion of multiple transcripts.  <dig> of these were suspected to be instances of transcripts fusions involving transcripts on opposite strands.

codingquarry has been designed for and tested on fungal genomes. it achieves a higher level of accuracy than competing methods by mixing predictions made from assembled transcript sequences with predictions made from assembled genome sequences. in theory, changes to the intron model used for prediction to allow the prediction of longer introns when predicting genes from assembled genome sequence would allow codingquarry to be applied to higher eukaryotes. however, in practice, the transcript assembly quality for rna-seq datasets from higher eukaryotes does not result in enough correctly assembled full-length transcripts for this method to be advantageous. the limitations of transcript assembly quality to gene prediction have been previously noted  <cit> . examples of factors contributing to this are the rna-seq alignment/assembly being complicated by larger introns, and a higher prevalence of alternative splicing, as discussed in the background section of this manuscript. it is therefore the opinion of the authors that it is unlikely that codingquarry would deliver similar improvement in genomes of higher eukaryotes as in fungal genomes, however this is something that may be explored in future studies.

codingquarry also outputs an additional set of “dubious” genes, as candidates for gene discovery. as described in the methods section, these genes are forced predictions in transcripts that, after running codingquarry steps  <dig> and  <dig>  do not have an overlapping coding sequence prediction.  <dig> “dubious” genes are predicted for sc. pombe, and  <dig> for s. cerevisiae. of these,  <dig> and  <dig> overlap a gene in the annotation of sc. pombe and s. cerevisiae respectively in the same coding frame. blast  <cit>  was used to search for alignments between the protein sequences of dubious genes predictions with no coding sequence shared with genes in the annotation, and ncbi’s non-redundant database. seven of these sc. pombe genes aligned to an entry in nr with a protein level identity of 40% or better and e-value less than 10− <dig>  of these, six lay completely within a gene annotation on the opposite strand. for s. cerevisiae,  <dig> novel genes aligned to an entry in nr with a protein level identity of 40% or better and e-value better than 10− <dig>   <dig> of which lay completely within a annotated gene on the opposite strand. this result can either be viewed as the possibility of unannotated proteins in the test genome annotations, or, possible contamination of the nr database with translated sequences from non-coding rna. we hope that this feature will assist researchers in gene discovery, however these predictions should be treated cautiously and we do not recommend their inclusion in a formal annotation dataset or submitted to databases without further validation.

CONCLUSIONS
we have demonstrated the success of our method of using rna-seq derived data in ghmms for fungal gene prediction. for researchers studying the genomes of newly sequenced fungi, for which protein homology resources are absent or unreliable, codingquarry can be used as a single step in predicting protein-coding gene sequences with high accuracy. for more detailed annotation efforts, codingquarry offers an appropriate starting point for further refinement of annotations with additional supporting evidence.

availability and requirements
project name: codingquarry.

project home page:https://sourceforge.net/projects/codingquarry/.

operating system: platform independent.

programming language: c++.

other requirements: openmp.

license: gnu.

any restrictions to use by non-academics: no.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

act and rpo designed the study. act developed the software, performed bioinformatics analysis. act and jkh wrote the manuscript. rpo, sre and jkh revised the manuscript. all authors read and approved the final manuscript.

