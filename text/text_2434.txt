BACKGROUND
searching a database of protein structures for structures that are similar to, or contain substructures that are similar to, a query structure is a significant problem in structural biology and bioinformatics. we can classify methods for protein structural searches into four categories. first, methods that align proteins directly at the level of residues. dali and dalilite  <cit>  fall into this category. second, methods that align proteins at the level of secondary structure elements . tableausearch  <cit> , prosmos  <cit> , and the tops-based methods  <cit>  fall into this category. third, methods that perform an initial alignment at the level of sses, and then extend it to a residue level alignment. vast  <cit> , ssm  <cit> , lock <dig>  <cit> , and sarf <dig>  <cit>  fall into this category. fourth, methods that do not perform an alignment at all, but use some other means of providing a similarity score. yakusa  <cit>  and pride  <cit>  fall into this category. methods in the first category tend to be the slowest, since they are not necessarily designed solely or primarily for database scanning, but also to provide a set of correspondences between residues. since the number of residues is naturally much larger than the number of sses, these methods must solve problems of a larger size than sse-based methods.

sheba  <cit>  and yakusa both use a one-dimensional representation of protein structure to accelerate structural searching. sheba uses "environmental profiles" containing information about sequence homology and residue-dependent information such as solvent accessibility, hydrogen bonds, and side-chain packing, which is then refined for three-dimensional geometry by dynamic programming. yakusa is a fast method that uses a one-dimensional representation based on protein internal angles.

we note that the classification just described is not strict or even exclusive. for example, we place sheba in the first category since it provides a residue-level alignment, but it does not do so directly , so it could be considered as partly belonging to the fourth category, with an extra stage bringing it into the first category. however sheba certainly does not belong to the second or third categories since it does not perform matching at the sse level. note also that any method in the second category  can be transformed into a method in the third category by adding to it some method of extending the sse alignment to a residue alignment.

some recent methods use information about sse orientation to match proteins by global geometric information. tableausearch and ir tableau  <cit>  make use of tableaux  <cit>  to perform rapid and accurate comparison of whole protein structures. qp tableau search  <cit> , another tableau-based method, is closer to the original quadratic integer programming  formulation defined by konagurthu et al.  <cit>  and  allows substructure  searching and non-sequential matchings. the latter refers to sets of correspondences between sses in which the sequential order of corresponding sses is not preserved. it is, however, considerably slower than most other  methods. prosmos  <cit>  also makes use of sse orientations, but takes quite a different approach from most other methods. it does not compare structures against each other, but rather a query motif is defined by the user as a "meta-matrix", which is then used to find structures that contain a substructural motif which matches the query motif thus defined.

methods that use sses require some method for assigning secondary structure to proteins. that is, some method to classify residues in the protein as belonging to helices  or strands , or not part of an sse. this can be done by a variety of methods, such as pattern recognition of hydrogen bonds and geometrical features, as in probably the best-known method, dssp  <cit> , or by hydrogen bonds and statistically derived backbone torsional angle information as in stride  <cit> . assignment of secondary structure is not an exact procedure, with various methods disagreeing about the exact beginning and end of sses, and particular sses depart significantly from the "ideal" model of pauling and corey  <cit> . in addition, using only sses means that regions of protein structure not defined as being part of an sse are not used at all, which can lead to less sensitive results. in some cases, this excludes a structure from being processed at all, if the method of assignment determines that it contains no sses. at least a partial solution to this can be to use a method of defining sses that assigns a larger fraction of the structure to sses, as is done by prosmos, which uses the palsse method  <cit> , specifically designed for use in protein structure similarity searching.

another protein structure comparison method is maximum contact map overlap , which consists of finding an alignment of residues in two proteins that maximizes the overlap between their contact maps. that is, it maximizes the number of contacts where residues that are in contact in one protein are aligned with residues that are also in contact in the other  <cit> . since max-cmo operates at the level of residues, it belongs to the first of the four categories we have described.

max-cmo has been solved exactly by various methods including lagrangian relaxation  <cit>  and branch-and-bound  <cit> , but these methods are often impractically slow and so heuristics have been used to approximate the solution  <cit> . however, compared to the msvns4maxcmo heuristic  <cit> , it has been shown that a tableau-based method is faster and has equal or greater accuracy in ranking protein similarity  <cit> .

in this paper, we demonstrate sa tableau search, a new heuristic for tableau-based protein structural and substructure searching based on simulated annealing  <cit> , and a parallel implementation of it on a modern general-purpose graphics processing unit . we compare its accuracy as a fold classification method with the existing methods dalilite, sheba, vast, yakusa, sarf <dig>  lock <dig>  tops, tableausearch, qp tableau search, and ir tableau on three different data sets: a set of  <dig> queries in the astral scop  <dig>  95% sequence identity non-redundant database  <cit> , all-against-all queries in the fischer data set  <cit> , and the cops benchmark  <cit> . because sa tableau search has a parameter, the number of restarts of its simulated annealing schedule, that can be adjusted as a tradeoff between speed and accuracy, we perform these comparisons with a number of different values of this parameter.

three of the methods we compare sa tableau search with are also tableau-based methods: tableausearch, qp tableau search, and ir tableau. although the tableau-based methods generally belong to the second category described above, since tableaux are defined in terms of sses, ir tableau is an exception, belonging instead to the fourth class. by reducing the tableau representation to feature vectors which consist of counts of the number of different sse orientation relationships in a structure's tableau, ir tableau can compare structures by cosine similarity, that is, just the cosine of the angle between the feature vectors. this is extremely fast, but results in no alignment of sses, only a similarity score. tableausearch is described in the original tableau-based protein structure searching paper as an approximation to the maximally-similar subtableaux extraction problem, which is an np-hard problem  <cit> . it uses an alignment-like approach with two phases of dynamic programming, and is fast , but is inherently sequential , and cannot find substructure matchings . unlike ir tableau, however, tableausearch is capable of providing a set of correspondences between sses. qp tableau search is another method of approximating a solution to this problem, by relaxing the original qip to a quadratic program   <cit> . this means that some of the desirable properties of the original  formulation are retained, specifically that non-sequential and substructure matches can be found. in addition, qp tableau search introduces an additional constraint, that the difference in the distances between matched sses cannot exceed a threshold, which is found to increase accuracy when used as a protein structural database scanning method assessed on fold classification.

of the methods described so far, only prosmos, tops, qp tableau search and sa tableau search are capable of substructure  queries, and in fact prosmos is designed specifically to search for manually defined motifs in a database of structures, rather than structure similarity searching. in both these cases the motifs are defined at the sse  level. none of the residue-based methods  are designed to allow a motif  query, as they assess structural similarity to find common regions between two structures and find an optimal superposition. as discussed in the description of prosmos  <cit> , motifs, in contrast, are defined by "the main-chain topology, and general orientation and packing of secondary structural elements" . tops allows specification of such motifs, but operates on topological similarity only, while the qp tableau search and sa tableau search algorithms use tableaux, which are based on sse orientation, and distance matrices. prosmos makes use of "meta-matrices" which include information on sse orientation and contacts including hydrogen-bonding. graphics processing units  have recently been used for several bioinformatics applications, such as sequence alignment  <cit> , molecular dynamics  <cit> , microarray data analysis  <cit> , mass spectrometry data analysis  <cit> , and phylogenetics  <cit> . however, despite the large variety of protein structural search methods and their computationally intensive nature, to the best of our knowledge this is the first use of gpus to accelerate protein structural or substructural searching.

RESULTS
protein structure search 
area under the roc curve  and elapsed time for different methods on the  <dig> query set against the astral scop 95% sequence identity non-redundant database. the table is sorted by auc descending.

in the platform column, either a gpu card is described, or cpu, which is a single core of an amd quad core opteron  running linux.

sarf <dig> is not present in this table, as it is unable to process a data set this large, and dalilite is not present as it exceeds the cpu time limit.

difference in auc relative to sa tableau search  for different methods on the  <dig> query set against the astral scop 95% sequence identity non-redundant database. the table is sorted by Δauc, so that methods with lower auc than sa tableau search  are at the bottom of the table. methods for which there is no statistically significant difference in auc from sa tableau search  at p-value  <dig>  are shown in a single row with Δauc =  <dig> .

considering now the gpu implementation of sa tableau search, we can see that on average the gtx  <dig> card provides a  <dig> times speedup , and the tesla c <dig> card provides on average a  <dig> times speedup. sa tableau search run with  <dig> restarts on the gtx  <dig> takes  <dig> hours and  <dig> minutes, making it not only one of the most accurate methods considered, but also one of the fastest. figure  <dig> shows that, while elapsed time obviously increases linearly with the number of restarts , the accuracy as measured by the auc figure increases much more slowly, and there is no significant difference between the value for  <dig> and for  <dig> restarts . hence, although changing the number of restarts allows a user-selectable tradeoff between accuracy and speed, one runs into rapidly diminishing returns for numbers of restarts beyond a certain point; on this evaluation data set, using more than  <dig> restarts does not increase the auc, and  <dig> restarts  is enough to achieve the same accuracy  as sheba but in just  <dig> minutes  <dig> seconds on the gtx  <dig>  on the host cpu, this takes  <dig> hours  <dig> minutes, and sheba takes over  <dig> hours.

area under the roc curve  and elapsed time for different methods for all-against-all comparisons in the fischer data set. the table is sorted by auc descending. in the platform column, either a gpu card is described, or cpu, which is a single core of an amd quad core opteron  running linux.

difference in auc relative to sa tableau search  methods for all-against-all comparisons in the fischer data set. the table is sorted by Δauc, so that methods with higher auc than sa tableausearch  are at the top of the table, and those with lower auc than sa tableau search  are at the bottom of the table. methods for which there is no statistically significant difference in auc from sa tableau search  at p-value  <dig>  are shown in a single row with Δauc =  <dig> .

area under the roc curve  and elapsed time for different methods on the cops benchmark data set. the table is sorted by auc descending. in the platform column, either a gpu card is described, or cpu, which is a single core of an amd quad core opteron  running linux.

difference in auc relative to sa tableau search  methods on the cops benchmark data set. the table is sorted by Δauc, so that methods with higher auc than sa tableau search  are at the top of the table, and those with lower auc than sa tableau search  are at the bottom of the table. methods for which there is no statistically significant difference in auc from sa tableau search  at p-value  <dig>  are shown in a single row with Δauc =  <dig> .

the fischer and cops data sets have quite different properties. the fischer data set was designed to benchmark fold recognition methods, independent of the structural similarity score being tested. that is, it was originally constructed to benchmark methods for assigning a sequence of unknown structure to a known fold. part of this benchmark consists of an assignment of protein sequences to their most compatible fold, on purely structural criteria, independent of the protein representation and similarity scores used by the fold recognition methods to be assessed  <cit> . this benchmark has since been used, as we do here, for the somewhat different purpose of benchmarking methods that compare two known protein structures, for example in pelta et al.  <cit> . no two proteins in the data set have sequence similarity over 35%  <cit> , and it is quite small, consisting of only  <dig> structures. we perform all-against-all queries in this data set, resulting in  <dig> pairwise comparisons. the cops benchmark, in contrast, was designed to benchmark sequence similarity database searches, and true positives in this benchmark are defined by the cops classification  <cit> . this classification is defined by structural similarity according to the topmatch structural alignment algorithm  <cit> , and so the cops benchmark in fact assesses a method according to its agreement with topmatch.

we note that in these last two benchmark data sets , in both cases, four methods have a statistically significantly higher auc than sa tableau search. however, it is a different set of four methods in the two cases, with sheba and dalilite in common. hence, given the different purposes of the fischer and cops benchmarks, it would seem that sheba and dalilite are superior for both "difficult"  and "easy"  database searching tasks. yakusa and sarf <dig> perform better only on the more closely related searches , and lock <dig> and qp tableau search perform better on the more distantly related searches.

in summary, over the three benchmark data sets we tested, no one method is consistently the best performing, although sheba is consistently in the top two methods measured by auc, and it is considerably faster than dalilite, the only method that has a higher accuracy on one of the benchmarks. all the other methods tested appear at different ranks in different benchmarks. sheba and sa tableau search are the top two ranking methods, with no statistically significant difference in auc , in the astral 95%  <dig> query benchmark. this data set is the largest one, but it also contains many similar structures and sequences. in all three benchmark data sets, sa tableau search has a  higher auc than tops and tableausearch, and in all but cops , it has a higher auc than vast.

it is worth noting that qp tableau search and sa tableau search use exactly the same formulation of the protein substructure search problem as the extraction of maximally-similar subtableaux first described by konagurthu et al.  <cit> , enhanced by distance difference constraints introduced in stivala et al.  <cit> . the difference is in the method of approximation: qp tableau search relaxes the problem to a qp to find a  optimal solution, while sa tableau search, described here, uses simulated annealing. not only is the latter method faster and often more accurate  on the host cpu than qp tableau search, but its simplicity allows parallelization on gpu cards, which are currently quite restricted in some respects, such as availability of sophisticated math libraries. for example, the complexity of qp tableau search in its use of an interior point solver makes it impossible for us to implement a gpu version. as will be described in detail in the methods section, there are two levels of parallelization in our implementation: first, each restart of the simulated annealing schedule for a single comparison of two structures is run in parallel, and second, multiple comparisons between a single query and multiple database structures are run in parallel. any database scanning method can be trivially parallelized in the second way, since each pairwise comparison is independent; to implement this at all on a gpu requires that the method is capable of being implemented within the limited computational and fast memory resources of the gpu. since there is no recursion and no dynamic memory allocation in the nvidia cuda programming model  <cit> , this can make implementing sophisticated algorithms such as those required for pattern searching in yakusa  <cit> , for example, extremely difficult, if not impossible. even where this is possible, since the gpu is essentially a data-parallel architecture  <cit> , efficient implementations require that essentially the same code path is run simultaneously in a large number of threads, just with different data. the more threads diverge in their code path, the less efficient the parallelization will be, another reason why very simple algorithms are more suited to such parallelization. an efficient parallel implementation on a gpu requires in addition a "fine-grained" level of parallelization, in order to maximize the usage  of the thread multiprocessors  <cit>  and the small amount of fast shared memory that this finer level of parallelization has access to. sa tableau search is ideally suited to this architecture since its data  are shared between the threads running each restart of the simulated annealing schedule independently, and are usually small enough to fit in the fast shared memory. it may be possible to parallelize sheba in a similar manner. however, assuming a similar two-level parallelization, where the coarser level is to run multiple comparisons independently in parallel, and the finer level is to parallelize each comparison, this would require a parallelization of both the dynamic programming procedure and the three-dimensional translation and rotation procedure used iteratively by sheba  <cit> . this is a much more challenging task than simply running the multiple restarts of sa tableau search in parallel.

substructure queries
evaluating the accuracy of substructure  queries in a quantitative and objective way such as auc is quite challenging; there is no database such as scop to provide a set of all true occurrences of a motif in general. we therefore provide two examples where we can provide such an evaluation: the β-grasp motif from ubiquitin  <cit> , and the serpin  b/c sheet substructure  <cit> . we perform these queries in the astral scop  <dig>  95% sequence identity non-redundant database.

in evaluating the accuracy of a substructure query for the β-grasp motif, we use the data from table  <dig> of shi et al.  <cit>  as the gold standard. a hit is considered a true positive if it is in the same scop superfamily as the exemplars listed in table  <dig> of shi et al.  <cit>  for the β-grasp core and gregarious fold  <cit>  categories, or if it is one of the structures considered by shi et al.  <cit>  to contain the β-grasp motif by structural drift  <cit> . we demonstrate two queries for this test. first we use ubiquitin , an exemplar of the β-grasp fold, as the query. second, we use a subset of the sses, namely the four largest strands and the α-helix in d1ubia_, chosen to represent the essential part of the β-grasp motif. this motif query is based on that defined by shi et al.  <cit>  as a "meta-matrix" for prosmos. these query structures are illustrated in figure  <dig> 

the serpin b/c sheet substructure  is such a large and specific structure that we can be confident it is truly present only in instances of the serpin fold. therefore, in evaluating the accuracy of a substructure query for this substructure, we consider a hit a true positive if it is a member of the serpin fold in scop, and a false positive otherwise. we choose the b/c sheet of the canonical active serpin, α1-antitrypsin, pdb id 1qlp <cit>  as the query structure.

of the protein structure comparison methods benchmarked in this paper, only qp tableau search, sa tableau search, tops and prosmos are also substructure  finding methods. however, comparison using auc with prosmos is not possible as prosmos does not rank all database structures. instead, it returns a set of structures that contain the query motif. the web server version  <cit>  provides a ranking within this set only, the downloadable version provides no scores or ranking.

area under the roc curve  and elapsed time for some motif  queries on the astral scop 95% sequence identity non-redundant database. in the method column, qp refers to the qp tableau search method, sa refers to sa tableau search. in the platform column, either a gpu card is described, or cpu, which is a single core of an amd quad core opteron  running linux. the results for each query are sorted by auc descending.

it should be noted that , d1ubia_ is one of the queries used in tuning the simulated annealing parameters. for that purpose it was evaluated as a fold recognition task, rather than as a substructure query. hence sa tableau search could not be expected to perform badly on the d1ubia_ query as it has been in some part optimized for this query. this is not the case, however, for the serpin b/c sheet substructure.

CONCLUSIONS
we have demonstrated a simulated annealing heuristic for tableau-based protein structure and substructure searching, that is as fast or faster, and comparable in accuracy, with some widely used existing methods when run on a standard cpu. in addition, we have provided a parallel implementation on modern gpu cards that achieves a speedup of up to  <dig> times over the cpu implementation, making it one of the fastest available methods. to the best of our knowledge, this is the first application of gpus to the protein structural search problem.

there may well be scope for application of this technique to other optimization problems in bioinformatics that can be approximated by relatively simple optimization heuristics capable of being parallelized by implementation on a gpu. for example, the multistart variable neighborhood search  heuristic for maximum contact map overlap  <cit> , or some other heuristic such as simulated annealing for the same problem, could benefit from parallelization on the gpu. another candidate problem of much current interest is biological network alignment, a highly computationally intensive problem that has previously been solved by quadratic programming  <cit> , and has recently been approximated by local search heuristics  <cit>  amongst other methods.

