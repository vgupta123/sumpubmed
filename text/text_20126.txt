BACKGROUND
functional genomic analysis of species lacking a reference genome involves the integration of heterogeneous data sources including transcriptome assembly and annotation, along with gene expression and genetic variants. ngs data analysis results requires the development of a user-friendly tool to manage, visualize and analyze a large amount of results in a comprehensive and integrated manner. in the last few years, many applications for conducting functional genomic studies have appeared  <cit> . a typical de novo rna-seq pipeline involves;  sequence quality control  transcript assembly,  functional and structural annotation of those transcripts,  discovery of molecular markers  and single nucleotide polymorphisms , and  differential expression of transcripts between the conditions assayed . all these steps produce large and complex structured results which need to be handled properly. most of the applications performing these steps in a de novo rna-seq pipeline greatly aided small research groups but, usually, these same groups lack data management capabilities and know how.

atgc transcriptomics relies on the ability to store data in an orderly manner, by using an ontology-based and modular database schema such as chado  <cit> . our web application allows a broad interpretation of the produced data and the formulation of data-driven hypotheses to test biological questions. thus, ontology-driven databases provide a flexible and adaptable schema capable of extracting complex relationships arising from the data structure. chado is a relational database schema designed by the generic model organism database consortium  to handle complex representations of biological knowledge. the gmod introduces the concept of computational ontology as applied to the management of the information structure in a way that accounts for the tacit knowledge of ontology. computational ontologies, such as the gene ontology project  <cit>  and sequence ontology  <cit> , not only allow users to sort data by introducing a structure with terms and definitions, but also provide a common language to store and share information. the chado schema, which was originally designed by flybase, has been widely used to develop databases of specific organisms  <cit> . several software packages import or export data using the chado database schema: gbrowse  <cit> , maker  <cit> , apollo  <cit>  and ergatis  <cit> .

however, the administration, management and analysis of large databases lacking a graphical interface may be complicated and non-intuitive for non-informatics users. in this context, web applications emerged as the best choice due to user’s familiarity with this kind of tools, their simple installation and shared access to databases. recently, tripal has appeared as a solution to develop web front-ends for chado specifically designed to manage genomic and genetic information  <cit> . tripal is a toolkit for the construction of biological, scientific research-oriented websites that is based on the drupal content management system  <cit> . this toolkit provides an application program interface  that makes the application more flexible, thus allowing complete customization of data. this option, however, requires informatics expertise, for example in a de novo transcriptomic assay .

here we present the atgc transcriptomics, a web-based application that arose from the need for genomic data management of small research groups. in parallel, during the development process, we used this new web-based application to integrate and analyze data from different projects that involve diverse data sources .

atgc transcriptomics is a free and open-source application available on-line designed to visualize, explore, analyze and share de novo transcriptomic data generated by ngs platforms using the chado database schema to store data. the atgc application allows users to integrate heterogeneous datasets such as structural annotation, genotype information, experimental designs, gene expression, functional annotation and other computational analyses, into a single database with a user-friendly interface. atgc transcriptomics has support for storing data in several modules and implements different ontologies for classification and further analysis of data through ontology-based searches, graphics, and detailed tables.

implementation
the atgc application was built using the chado database schema implemented in postgresql  <cit> , a web interface based on web2py  <cit> , and an in house developed python module called pychado, which was created as an interface between the web application and the database.

the chado schema is partitioned into modules, thus creating a scalable model with the addition of specific modules that provide support for additional data types including those from novel technologies, without modifying the actual schema. the database schema consists of five core modules, which are named sequence, general, publication, audit and controlled vocabularies . moreover, atgc transcriptomics incorporates the following modules: organism, companalysis, phenotype, strain, genetics, stock, and expression, to store data from a wide variety of biological experiments and research fields, such as comparative sequence analysis, gene expression studies, genetics, taxonomy, biological collections and phenotypic diversity.

for the database interface, we used and implemented the model – view – controller  pattern that web2py provides, as to access the modular schema, separating the data representation , data presentation  and application logic . we used an internal web2py database to store configuration data related to the user interface and the chado database administration. the application appearance can be easily changed or customized since all web pages inherit styles from an application-wide cascading style sheet , and since overall page layout is controlled by a single html layout file to have a global control over the views. the atgc web interface is designed to handle a variety of application tasks. database navigation is from a set of drop-down lists including home, data loading, search, ontology annotation, download, software, modify and delete and setup . the lists are configurable by the authorized user in a straightforward way using the web2py administration interface.

the pychado module makes the connection of the application with the chado database using the psycopg python package  <cit> . pychado contains a structure of data classes and methods to insert, modify or delete data entries and get information adapted to the chado modules and tables. furthermore, taking into account the ontology-driven storage, we worked in modeling ontology terms and structures to go through the ontology graph to save data and enable searches and queries.

atgc transcriptomics permits the storage of sequence-related data, including structural annotation , sequence alignments obtained by blast  <cit> , functional annotation results using blast2go and interproscan and classification of other database features using any other ontology that can be loaded . this application allows users to load data from genotypes or strains, genetic variants, molecular markers, sequence relationships . moreover, it is also possible to load and analyze diverse experimental approaches. for example, users can load differential gene expression studies, including the assay structure with replicates and the experiment characteristics specified using ontological classification  <cit> .

for small scale projects, a typical desktop computer can be used to install and run atgc transcriptomics. the application was tested and works correctly in a virtual machine with  <dig> cpu and 1gb of ram and requires an average of  <dig> mb of ram together with the linux operating system  <cit> . the complete installation from source code requires a unix operating system  with a minimum set of software packages and a single administration user with basic unix skills . additionally, a pre-installed self-contained virtual machine is available. users using any operating system  may download the complete virtual machine to bypass the installation steps. detailed instructions for different types of installation are provided in additional files  <dig> and  <dig> 

atgc transcriptomics is structured in four main components that are accessible through the web browser: the components are  database administration and management,  data loading and results of software analysis,  searches and queries, and  data sharing .fig.  <dig> application schema. schema illustrating how the four main components interact with the chado database through the pychado module. each component contains a set of functions  and views which enable users to access to the database content




database administration and management
we developed an interface for database creation, administration, update, backup, restore and ontologies loading. we generated a template for database schema in sql format, with all the modules to be used including small modifications to load rna-seq data . the interface allows users to load ontologies using files in obo and xml format and also load data with relationships between ontologies and several classification systems, in a section called dbxref2ontology . atgc transcriptomics allows user to have several databases on the same application instance, with the option to switch between them and maintain the original environment settings automatically. moreover, it is possible to keep the information updated and curated in the database by using the modify and delete section. these processes take into account data types and the database schema. furthermore, the backup and restore components allow users to create a complete database backup in sql format. for this reason, the user can restart the database to a previous state when required.

load data and results of software analysis
the application is capable of loading data to the chado database using standard file formats and of adding information one at a time or with bulk loader. atgc implements loading methods for different types of sources and software results, such as fasta format for sequences, gff for structural annotations, xml for blast results, annot or raw for blast2go or interproscan functional annotations and vcf for molecular markers and genetic variants. moreover, several outputs from specific software  and simple file formats  are implemented to load additional information . the csv or tab files can be created from flat text files using a web interface, such as galaxy  <cit> , or exporting directly spreadsheets. from the chado stock and genotype modules, we included the concept of genotype  with its characteristics that are associated and defined by ontology terms. as a consequence, we give the possibility to load the alleles of different types of molecular markers to each genotype. finally, using the chado modules: expression, stock, and library, we created an accessible way to load the complete structure of rna-seq experiments. the load includes the characteristics of the conditions defined by the ontology terms and the experimental design with replicates. the user can load different measured values to a sequence in a replicate-specific manner from a particular experimental condition, including genotype identity, transcript expression values measured as reads per kilobase of a million of mapped reads , among others. detailed information on all steps in load data and database administration are in the additional file  <dig> 

searches and query
the application supports different options of data searching and querying. on the one hand, the user can browse data with a text search . atgc queries include unique feature names, lists of feature names, ontology terms  or descriptions retrieved from blast hits. figure 2b shows a search output obtained using a gene name. the result is summarized in a user friendly table containing the gene characteristics and the functional annotation from all isoforms transcribed from the gene. on the other hand, the user can explore the data from the ontologies using pie charts and a graph-structured view . it is possible to move through the ontology for exploring the features annotated in each term, taking into account the ontology structure and the relationships between terms. we implemented an algorithm for navigating through ontology graphs, thus reducing the amount of ram memory used. we merged the two ways of data exploration, to allow users to search and query the result table. they also have the option to explore the ontology pie chart and the graph structured view solely for the features present in the result table. moreover, blast searches can be performed using external sequences as query and database features as subjects.fig.  <dig> screenshot of atgc views. a drop down menu displaying all available options. b search output by gene name. the table shows the transcript inferred functional annotation. tools to define table setting and internal searches are provided at the table header. c search output by ontology terms; the table displays direct and indirect annotated features and contains a link to deploy the members associated to the feature names. d pie charts and structured graph to explore annotation from any loaded ontology. the pie chart shows the distribution of annotation in direct children terms. the sequence counts associated to each classification take into account the possible multiple annotations; users have links to obtain the lists of sequences annotated under each term




regarding the result table view, the user has several options to display the feature details depending on the feature type. we worked on four display formats including sequence, marker, experiment, and genotype. the sequence report has a general and a detail view. the general report only has a relationship section ready for features without nucleotide sequence. the detail sequence report comprises six sections containing the nucleotide sequence, non-positional relationships, structural annotation, functional annotation, blast results, and gene expression results. the nucleotide sequence has a download option in fasta format. the relationships section contains a table that describes connections with other features . the structural annotation is displayed in a graphical browser and uses a detailed table . the functional annotation is represented by the ontology terms on a reduced ontology graph showing only terms and connections involved in the annotation of the specific sequence . the blast results are shown in a detailed table including cross references to ncbi databases. the expression profiles are represented using dynamic figures obtained from the experiment structure and separated by genotypes and statistic values . the detail marker report contains the location of the marker and the alleles of the marker on different genotypes. finally, the experiment report includes the experiment design with libraries and experimental conditions and the genotype report has the genotype characteristics and the alleles of all the reported markers.fig.  <dig> feature details. a graphic representation of a transcript with a detailed description of exons, cds, mrna, utrs, molecular markers and protein domains. the table below the graphic shows the features relationships with reference positions. b dynamic expression graphics, taking into account the experiment structure; users can select the conditions to plot and generate graphics divided by statistical value and genotype. the charts display the mean and standard deviation values of replicates in each condition. c go acyclic graph shows functional annotation terms related to the feature annotations. the lists contain direct and inherited associated ontology terms with links to detailed information about each term




data sharing
regarding data sharing, the users can share information with colleagues  with a simple machine or server, by using the application through the network connection with the apache http server  <cit> , or directly with the web server included in web2py framework. the users can adapt the drop-down menu to show the chosen options and hide the parts of the menu where they can modify the database. optionally, with small modifications the users have the choice to use the web2py access control mechanism to manage the permissions for the external users to perform restricted operations . furthermore, we created several points for data access, inside the download section  or particular downloads in other places .

RESULTS
in the last years, the use of ngs in biological projects has enhanced the needs for data management and storage. several researchers have adopted chado database to integrate sequence data, annotations, publication, strains, genotypes and several other data types and they have also created web-accessible databases to manage and analyze their data . simultaneously, different tools to manage genomic information providing an interface to chado databases have become available. one example is the gmodweb  <cit> . this tool is based on a mvc web framework based on perl for the construction of online websites called turnkey  <cit> ; however, it is no longer supported by the gmod project. chadoonrails is another framework  <cit>  that provides a ruby on rails interface to help developers create the web  interfaces into chado, but does not provide data loaders and view pages. badger  <cit>  is a genome exploration environment implemented using the grails web application framework  <cit>  mainly oriented to explore genomic data. gmodweb and chadoonrails require informatics expertise and need to develop some views and interphases. today, the most popular tool for this purpose is tripal, which provides an interface that extends the content management features of drupal to the data housed in chado. this application has a web-based database installer, data loaders, and extensions that support to basic data visualization. tripal is specifically designed to manage genomic and genetic information but not all the chado modules are integrated. for instance, tripal does not allow working with expression related data, because the chado expression module is not incorporated into the default templates provided  <cit> . moreover, tripal lacks an “out of the box tool” with easy installation and pre-configured framework for de novo rna-seq projects . in this sense, atgc constitutes the single chado framework to integrate transcriptomic data with expression studies taking into account the genomic and genetic context.table  <dig> tools capability comparison

gmodweb, chadoonrails, and badger cannot be included in the comparison because could not be installed and tested for lack of documentation or support. ✓ - computer expertise required; ✓✓ - moderately easy to complete; ✓✓✓ - straightforward; ni not implemented




de novo rna-seq case study
we will test the atgc transcriptomics application and will show different ways to respond to several biological questions arising from rna-seq data. for this purpose, we will use an training dataset from the transcriptome sequencing and differential expression assay of diachasmimorpha longicaudata  <cit> . three conditions are analyzed . the main objective of this project was to identify new transcripts involved in the sex determination mechanism and develop new molecular markers for those transcripts to study them in natural populations. the data consist of reads obtained from  <dig> sequencing, assembled into “isotigs”  with the newbler assembler  <cit> . moreover, specifically in this project, we ran a battery of applications to our original dataset to obtain the following:  structural annotation of all transcripts: using transdecoder  <cit> ;  functional annotation: the blast2go suite and the interproscan software;  ssr discovery: the misassr software;  snp discovery: ssahasnp tool; and  transcript expression: relative expression level for a given transcript was calculated normalizing the read counts by the length of that transcript and divided by the number of sequence reads in the library.

firstly, we create a new database and load the ontologies the user specifies . in this case, they will be the go, so, and the hymenoptera anatomy ontology   <cit> . we load the data using the web interface as explained in the tutorial. we create an organism and then we load the contigs  using a fasta file and the genes  using the section “load features from list file”. we proceed in this way, since we do not have sequences for these “isogroups” . next, we load the structural annotation using “load features and relationships from gff <dig> file”, the functional annotation using “feature -> cv associations”, and the blast results used for the annotation with the section “blast run results ”. molecular markers in vcf format  are loaded using “load markers”. to load the differential expression data, first, we create the structure of experiments and libraries. we load a set of three experiments using the section “create experiment” called: “male_larvae”, “male_adult”, and “female_adult” with one rna-seq library for each. to assign the features to describe the experiments , we use the hymenoptera anatomy ontology. finally, we load the expression data using a read pseudocount values for each contig using the section “feature -> library associations”.

after all information has been saved properly, we can begin to query the database. the first question that was raised in this project was which contigs have functional annotation related with “go:0003006: developmental process involved in reproduction” as well as microsatellites markers associated, and which was the expression of these transcripts among the three experimental conditions. to achieve this, the user goes to the section “search -> features by name” and obtain a result table with all microsatellites stored in the database, using only ‘%’ as search expression in the microsatellite pull down menu . afterwards, the simplest way for the analysis is to navigate using the go exploration at the bottom of the page where you will be able to navigate all go terms associated with the list created above. hence, you can explore your way to any go term using the full capacity of the controlled vocabulary. when the user reaches the go term: “developmental process involved in reproduction”, he can click in “feature list ” and explore those transcripts with that go term and at least have one ssr associated . from a total of  <dig> transcripts with at least one ssr, we find that  <dig> transcripts have the go: <dig> associated. in each detailed view of each transcript the user can examine the expression patterns of that transcript in all conditions. exploring the “feature report” of the transcripts, you found one “isogroup” with three “isotigs” which are highly expressed in the larvae stage and not in adult . this putative “isogroup”  is probably one of the target to further investigate.

CONCLUSIONS
in brief, this application provides non-expert computer users with accessible biological data management and simple data integration, as it can be used without any prior knowledge of programming, database administration, and/or management. atgc transcriptomics presents a more comprehensive interface for ontological storage and browsing as a method to explore information and relationships between transcripts and other features of interest, such as the concept of alternative splicing, and relationships between transcripts and genes  with functional annotation. atgc offers the opportunity to expand the database schema by adding other modules that store information from different data sources . moreover, the web-interface can easily be improved via python modules that can be automatically copied and distributed with the application. overall, atgc is a user-friendly application which allows small research groups to handle their de novo transcriptome data as a whole.

availability and requirements

project name: atgc transcriptomics.


project home page: http://atgcinta.sourceforge.net.


project demo site: http://atgc-sur.inta.gob.ar.


operating system: platform independent, source code installation or using complete virtual machine.


programming language: python.


software requirements: postgresql, ncbi-blast+, emboss, python, python packages: matplotlib, pygraphviz, biopython, psycopg <dig>  perl, perl packages: bioperl, libgo, libpg, libdata-stag, libdbix-dbstag, libsql-translator and apache <dig> .


license: atgc transcriptomics is freely available under the terms of the gnu public license.

additional files

additional file 1: an installation guide for atgc. 


additional file 2: user’s guide for atgc 


additional file 3: search strategy to obtain the complete list of microsatellites and results table containing isotigs associated to each molecular marker and your functional annotation. below the table there are a three links to explore gene ontology information of the isotigs in the table. 


additional file 4: pie chart of “biological_process” go term from links in additional file  <dig>  in the feature annotation tree, we explore until arrive to “developmental process involved in reproduction” term and go to obtain the list of features annotated with this term. 




abbreviations
apiapplication program interface

blastbasic local alignment search tool

csscascading style sheet

csvcomma-separated values

gffgeneral feature format

gmodgeneric model organism database consortium

htmlhypertext markup language

httphypertext transfer protocol

mvcmodel-view-controller

ncbinational center for biotechnology information

ngsnext generation sequencing

oboopen biomedical ontologies

ramrandom access memory

rpkmreads per kilobase of a million of mapped reads

sqlstructured query language

vcfvariant call format

xmlextensible markup language

we would like to acknowledge julia sabio y garcia for the manuscript correction.

funding
this work was supported by the instituto nacional de tecnología agropecuaria ; agencia española de cooperación internacional y desarrollo ; consejo nacional de investigaciones científicas y técnicas; ﻿b﻿bsrc﻿, institute strategic programme grant bb/j004669/ <dig> and marie curie irses project deann .

authors’ contributions
sg and bc design and wrote the software, setup the implementation and wrote the user guide. sg, mr and np drafted the manuscript. mr, pm, pf and np collaborated with the software design. jd and np conceived and financed the project. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
