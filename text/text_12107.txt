BACKGROUND
the advent of high-throughput techniques has generated new types of large-scale molecular interaction data, conveniently represented by graphs or networks. examples include metabolic networks formed by enzymes and metabolites
 <cit> , gene co-expression networks with edges between pairs of genes indicating a certain correlation between their expression levels
 <cit> , residue contact maps as representations of protein structures
 <cit> , and protein-protein interaction networks, where edges between vertices indicate a physical interaction between proteins
 <cit> . for an introduction, see reference
 <cit> .

cross-species analysis of bio-molecular networks aims to identify sub-networks which are evolutionarily conserved as well as network parts that have evolved rapidly. similarly to comparison of biological sequences
 <cit> , alignment of biological networks is an important tool for quantitative evolutionary studies
 <cit> . however, such alignment poses a challenging computational problem, which goes beyond the well-established concepts and methods of sequence alignment and of subgraph matching 
 <cit> . it involves an evolutionary process in which a pair of networks derives from a common ancestor , and each network has since evolved independently .

here, we define the alignment of two graphs as an injective one-to-one mapping from a subset of vertices of one graph to vertices of the other graph, see figure
1a. an alignment of vertices also induces the alignment of edges; the edge in one network is said to be aligned to the edge in the other network if the vertices they connect are aligned to one another. the aim of a graph alignment is to align vertices that descend from a common ancestor.
a between two graphs is an injective one-to-one mapping  between the vertices of two graphs . b) the interpretation of vertices and edges depends on the type of biological networks in comparison.

several graph alignment methods have been proposed towards this goal, based on three main ideas: the alignment can be based on the similarity of vertices, and map vertices onto each other that, e.g., share a certain sequence similarity  or if aligned enzymes catalyze the same reaction . this approach allows identification of ancestral networks
 <cit> , network parts enriched in conserved edges
 <cit> , or selection between paralogous genes
 <cit> .

a second and complementary approach focuses on the topology of the graphs and disregards sequence information or other properties of the vertices. it searches for similar topological structures in two graphs, for instance by maximizing the number of aligned edges. this approach has been used, for example, to detect common regulatory motives in gene regulatory networks
 <cit>  or to perform global network alignment
 <cit> .

a third strategy relies both on information encoded in vertices and in edges. this “hybrid” and more comprehensive approach compares graphs based on the evolution of both vertices and edges. the key problem is the relative weight given to the similarity of vertices and to the similarity of edges when constructing the alignment. several algorithms have been proposed
 <cit> , which generally use ad hoc scoring parameters. two exceptions are graphalignment <cit>  and græmlin  <dig>  , which use parameters inferred from a training set or from an initial alignment of high-fidelity vertices , or in an iterative scheme . here we describe a software package implementing the graphalignment algorithm.

the scoring parameters may indeed be inferred from a training dataset formed by a library of known orthologous genes and their interactions. this approach would be conceptually similar to the inference of the blosum matrices
 <cit>  used for biological sequence comparison. as bio-molecular networks differ in many aspects, including experimental techniques and post-processing methods, no such parametrisation is available for their comparison. the parameters, however, can be also inferred from the actual data being aligned, similarly to the inference of the optimal affine gap penalties from the sequences being compared
 <cit> . the ability to infer principled scoring parameters directly from the data is essential.

further methods are developed that incorporate additional information resources to perform network alignment. the global network alignment method pinalog
 <cit>  incorporates functional annotation of proteins in addition to their sequence and network topology. domain algorithm uses protein domains, rather than proteins, to form the interaction network
 <cit> . several above mentioned methods perform also multiple-species alignment and either use or infer phylogeny . methods for querying large networks for small subgraphs, e.g, pathways or protein complexes, have been also developed
 <cit> , reviewed in
 <cit> .

graphalignment differs from the above approaches
 <cit>  by two key features:  an explicit model of network evolution is used to infer alignment parameters from the data.  based on this evolutionary model, networks are aligned using a probabilistic scoring system. we compare our software and græmlin as the only algorithms that can automatically score both sequence and network information. to that end we perform the simplest task, pairwise alignment.

for case studies applying our approach to mammalian gene co-expression networks and to herpesviral protein-protein-interaction networks, see
 <cit>  and
 <cit> . an overview of related methods for probabilistic network analysis is given in ref.
 <cit> .

implementation
the input of the algorithm are two networks, and mutual similarities of their vertices. the algorithm treats the networks g and g′ symmetrically, thus comparison of g with g′ will result in the same alignment as comparison of g′ with g. each network g is represented by an adjacency matrix a, whose entries aspecify the edge between vertices i and j: the entries of the adjacency matrix may be binary, with aij =  <dig> indicating the presence of an edge between i and j, and aij =  <dig> its absence. they may be continuous, e.g., to describe weighted edges in gene co-expression networks. adjacency matrices may be symmetric, thus describing undirected networks , or asymmetric for directed networks . the mutual similarity between vertices in the two networks is specified by matrix Θ, whose entries
θii′ quantify, for example, the overall sequence similarity between the gene represented by vertex i in one network and the gene represented by vertex i′ in the other. any other measure of the vertex similarity is possible and may be given in arbitrary units . the algorithm will infer appropriate scoring automatically based on available data.

the alignment scoring is based on an explicit model which incorporates evolutionary dynamics of both edges and vertices. we first focus on the evolutionary dynamics of the edges. consider a pair of vertices i,j in one network and its orthologs i′,j′ in the second network. at speciation, the edge states a ≡ aij and
a′≡ai′j′′ in the two networks take on the same value. subsequently, their correlation will decay and the joint probability qτ will tend to a product of independent probabilities pp′ in the limit of large times τ.  the corresponding log-likelihood score contribution from the pair of edges 

  sedge≡logqτpp′ 

tends to zero in the limit
τ→∞, as then the edge states carry no information on their shared ancestry, and, hence, the edges states a and a′ carry no information on whether i should be aligned with i′and j with j′.

analogous considerations for the evolutionary dynamics of the similarity of vertices leads to a scoring function for vertex similarity
 <cit> : at speciation, vertex i in one network and its ortholog i′ in the second network do not differ. with increasing time τ since speciation, their vertex similarity θ will decrease and the distribution function
qτo will approach some background distribution p. likewise, with divergence of the two networks, the distribution function
qτu of the similarities
θij′ between unrelated vertices i and j′will approach p. as
τ→∞, the corresponding log-likelihood scores 

  saligned≡logqτop, 

which reflects vertex similarity of the orthologs i and i′, and 

  snot-aligned≡logqτup, 

with j′ ≠ i′, which weighs the presence of vertex similar pairs that are not orthologous, tend to zero, and the vertex similarities
θii′ and
θij′ convey no information on alignment of i and i′. the background distribution p may be obtained as the distribution of vertex similarities between vertices that emerged or disappeared in one of the networks after the speciation. the similarity of vertices itself may be evaluated as sequence similarity for vertices representing genes or proteins  or by the measure of functional similarity for vertices representing enzymes .

given an alignment
a , the total alignment score
s=se+sv is formed by contributions from all aligned vertices and edges. the edge score
se sums contribution of aligned edges: 

  se=∑sedgeaij,aaa′. 

the vertex score
sv sums contributions from the aligned vertices and the contributions from the pairs of vertices that are not aligned
 <cit> : 

  sv=∑isaligned)+∑i,j′≠asnot-aligned. 

the parameters of the scoring function, i.e, sedge, saligned and snot-aligned, depend on the evolutionary dynamics of both edges and vertices since speciation. to infer these parameters from the data, we use a simple iterative approach
 <cit> : starting with an initial alignment, parameters are estimated so that the likelihood of the alignment is maximised. the algorithm then iterates the steps of  aligning the graphs using the estimated parameters and  estimating the maximum likelihood parameters until convergence. upon convergence, the algorithm returns both the optimal scoring parameters and the corresponding best alignment of the networks. the package graphalignment features built-in functions that establish the maximum-likelihood scoring parameters according to this scheme. the ability to find the appropriate scoring parameters from the studied graphs is unique to graphalignment, with a notable exception of græmlin
 <cit> .

to find high-scoring graph alignments in step , we use an iterative heuristic described in
 <cit> . this procedure is based on mapping to the quadratic assignment problem, solved iteratively by calls to a linear assignment solver, with added noise to help the alignment to escape from local score maxima, as in simulated annealing
 <cit> .

RESULTS
in berg and lässig
 <cit>  and kolář et al.
 <cit> , our algorithm has been applied to gene co-expression networks and small protein-protein interaction networks. here, we concentrate on evaluation of the computational complexity of the algorithm and comparison of its accuracy to the græmlin algorithm
 <cit> , which is the only other algorithm able to infer principled scoring parameters automatically. we use both simulated and empirical bio-molecular data.

alignment of simulated networks
while experimental data provide the ultimate test set for the algorithms, and we will use them in the following section, we do not know the true evolutionary history of the networks and thus, we cannot assess the accuracy of the aligners fully. to that end we use simulated data. in the numerical experiment, pairs of orthologous vertices  are assigned from the outset and, depending on the level of divergence, may have retained their vertex similarity , interaction similarity  or both.

graphalignment and græmlin are able to infer the scoring parameters either from a training set of known orthologous genes and their interactions or from some valid initial alignment of the actual network data being aligned. here, we concentrate on the latter option. both algorithms are given the same initial alignment of the networks that is formed by vertices with high vertex and topological similarity, and the parameters are inferred from this initial alignment.

we assess the computational cost and accuracy in three different scenarios which test three different aspects of the algorithms. in all the scenarios, we construct pairs of networks which contain 80% of orthologous vertices and 50% of all possible edges present. in scenario  we compare two networks with a substantial proportion of vertex homologs and a smaller set of analogous vertices, i.e., vertices that do not have any vertex similarity, yet they are, by their interactions, well anchored to the subnetworks consisting of vertex-orthologous vertices. thus this scenario tests the ability of the algorithm to identify analogous vertices by properly evaluating the edge  similarity. we implement the scenario  by networks with 60%-interaction similarity between the orthologous pairs and with  <dig> % of the orthologous pairs  having also a high vertex similarity. the interaction terms are randomly chosen from a uniform distribution and may be interpreted as edge weights or probabilities of the edge existence. we also assessed the scenario  with interaction terms selected from a normal distribution and obtain similar results . an example of the corresponding Θ matrix of vertex similarities and correlation matrix of interaction similarities is given in additional file
1: figure s <dig> 

in scenario , we test whether the algorithm is able to decide on an ortholog between two paralogous vertices. specifically, we ask whether the algorithm is able to decide between two vertices in g′ with equal vertex similarity to i in g, one of which has also interaction similarity with i  and the other shares no interactions . we implement this scenario similarly to scenario  with  <dig> % of the orthologs  having a paralog with no topological similarity. an example of the corresponding similarity structures is given in additional file
1: figure s <dig> 

scenario  derives from scenario  but adds spurious weak vertex similarity between randomly chosen pairs of vertices. thus, this scenario tests the robustness of the algorithms to intrinsic noise in the biological data. an example of the corresponding similarity structures is given in figure
 <dig> 

computational complexity
to evaluate the typical computational costs of graphalignment and græmlin, we generate pairs of symmetric random networks of the same size, n∈ <cit> , and the corresponding similarity structures. then, we test the two algorithms on the same dataset and measure the total cpu time used to fit the scoring parameters and to find the optimal graph alignment. both algorithms are run on a linux box with intel xeon at 3ghz with standard parameters . the results are summarised in figure
 <dig>  in scenarios  and  græmlin’s computational costs scale roughly quadratically ) with the network size n, while graphalignment’s costs grow as
o) and
o, respectively. the algorithms finish the calculations of networks with the size n =  <dig> within the same time period, with græmlin being faster on larger networks and graphalignment on smaller ones. however, addition of the spurious weak vertex similarities in scenario  severely compromises græmlin’s performance by changing its typical-case complexity to
o, so that a calculation for networks of size n =  <dig> has not been concluded in two weeks. the performance of graphalignment remains good, with all calculations finished within a week of cpu time.

the typical-case computational cost of graphalignment is smaller than its theoretical worst-case complexity, which is dominated by the computational costs of the linear assignment solver
 <cit>  and by conversion of the edge score to an instance of the linear assignment problem. the overall worst-case complexity of the algorithm is
o.

accuracy
both algorithms studied here rely on the initial alignment of high-fidelity vertices, which in our numerical experiment are represented by the orthologs with high vertex and topological similarity, and on inference of the scoring parameters from this initial alignment. thus, it is not surprising that both algorithms correctly identified these orthologs in virtually all cases . the algorithms differ, however, in their ability to align analogs ) and to decide on the true ortholog between two paralogs in scenarios  and .

while graphalignment performs pairwise alignment of the networks and its results are straightforwardly interpretable, græmlin groups the vertices from both networks into equivalence classes which may contain several vertices from each network. when interpreting græmlin’s results, there are two options to consider the vertices correctly aligned. we can consider the matching vertices of the two networks to be correctly aligned when they are in the same equivalence class and there is no other vertex in the class , or we can consider them correctly aligned whenever they are in the same equivalence class . it is worth noting that in scenarios  and  the relaxed rule will consider the vertex correctly aligned even if the equivalence class contains both its homologous paralogs and the alignment actually does not decide on the correct partner. a vertex is considered misaligned when it is in an equivalence class  where its matching vertex is not present. if the class contains vertices from a single graph only, these are not considered misaligned.

in scenario , there are only three types of vertex pairs: pairs with strong vertex and topological similarity, pairs with topological similarity only and pairs with no similarity between the networks. the first two groups, the orthologs, can be aligned thanks to the information stored in the similarity matrix Θ and the correlations of the adjacency matrices a and a′, see additional file
1: figure s <dig>  thus we call them alignable vertices. it is not possible to align the other vertices as there is no information available on those vertices. figure
 <dig> shows the accuracy of the algorithms in scenario : græmlin, according to both strict and relaxed rules, aligns only orthologs with both vertex and topological similarity and no other vertices. graphalignment aligns a large proportion of the analogous vertices and in the case of networks of size greater than  <dig>  all of them. none of the algorithms misaligns any vertices.

paralogous vertices in scenario  can be considered an easier task to resolve, as among n possible alignment partners, there are only two partners with some vertex similarity and, of them, just one also shares topological similarity with its ortholog. graphalignment aligns the matching vertices in virtually all tested instances of the problem. on the other hand, græmlin correctly forms equivalence classes for the three vertex-similar vertices, as revealed by perfect performance according to the relaxed rule; however, it does not decide between the paralogous vertices as in the equivalence classes all three vertices are always present, figure
 <dig>  also in the second scenario graphalignment does not misalign any vertex, figure
 <dig>  while græmlin misaligns 5% of the vertices due to unresolved paralogous vertices.

addition of the spurious terms into the vertex similarity matrix θ in scenario  does not influence the accuracy of graphalignment but decreases accuracy of the græmlin algorithm, which is not able to form the equivalence classes correctly anymore and misaligns many vertices, see figures
 <dig> and
 <dig> 

alignment of empirical bio-molecular networks
to compare the performance of graphalignment and græmlin on diverse bio-molecular networks, we have downloaded publicly available datasets of bacterial and eukaryotic protein-protein interaction networks  and gene co-expression networks. we let the algorithms compare pin of proteobacteria escherichia coli, caulobacter crescentus and campylobacter jejuni, and of yeast saccharomyces cerevisiae, mouse and human. next, we employ the algorithms to compare gene co-expression networks of gamma-proteobacteria escherichia coli, salmonella enterica and shewanella oneidensis and a firmicute, bacillus subtilis. the specificity and coverage of the resultant alignments are tested against the orthologous groups defined in the eggnog database v <dig> 
 <cit> .

protein sequences of all species have been downloaded from the eggnog database. pin of the bacterial species have been downloaded from the string database v <dig> 
 <cit> . human and murine pin have been obtained from the intact database v <dig>  . only high-confidence experimental interactions are kept . to diversify the entering data, the pin and protein sequences of human have been downloaded from the additional file of the reference
 <cit> , and the yeast pin and protein sequences from the additional file of the reference
 <cit>  and the saccharomyces genome database 
 <cit> , respectively.

to create the gene co-expression networks, we have downloaded large gene expression compendia of escherichia coli, salmonella enterica and bacillus subtilis from the colombos database . the database contains  <dig>   <dig>  and  <dig> carefully normalised expression profiles, respectively. further, we use gene expression compendia of escherichia coli and shewanella oneidensis downloaded from the many microbe microarrays database , which contain  <dig> and  <dig> expression profiles, respectively. gene–gene co-expression levels are estimated by absolute spearman rank correlation. values lower than  <dig>  are hard-thresholded to  <dig>  except for the datasets from m3d, which are thresholded at  <dig>  and  <dig> , respectively. all final correlation coefficients are statistically significant . only the genes detected in at least 75% of the profiles are evaluated.

the sequence similarity is estimated for each comparison by a pairwise local sequence alignment of protein sequences using blast
 <cit> . all hits with e-value lower than 10− <dig> are considered. the blast scores are used as the measure of vertex similarity Θ provided to graphalignment and græmlin. the orphan proteins/genes that both have no blast hit in the other species and are not connected in the bio-molecular network are not considered in the analysis. table
 <dig> summarizes the resultant networks.

bsubt: bacillus subtilis, ccres: caulobacter crescentus, cjeju: campylobacter jejuni, ecoli: escherichia coli, hsapi: human, mmusc: mouse, scere: saccharomyces cerevisiae, sente: salmonella enterica, sonei: shewanella oneidensis.

computational complexity
we evaluate the overall cpu time used by the algorithms to fit the scoring parameters and to perform the actual alignment. to define the training set for the parameter estimation, we find the eggnog orthologous groups present in both aligned species. from these groups we randomly select one half. the proteins belonging to the selected orthologous groups and the interactions between them are then used as the training set. both algorithms are allotted the same set and the scoring parameters are estimated by standard routines, as in case of the simulated networks. to align the networks, the algorithms run with standard settings, see additional file
1: figures s <dig> and s <dig>  figure
 <dig> summarizes the computational complexity of the computations: as in the case of the simulated networks  and ), græmlin’s computational costs scale roughly quadratically ), while graphalignment’s costs grow rather cubically as
o). the algorithms finish the calculations on small bacterial networks within comparable intervals; græmlin is significantly faster on larger eukaryotic networks.
 <dig> 

accuracy
to determine the quality of the resultant alignments, we estimate their sensitivity and coverage. as there is no gold standard with which to compare the results, we define sensitivity as the fraction of the aligned pairs, or græmlin equivalence classes, which share the eggnog orthologous group among all aligned pairs or classes. this measure of sensitivity is intrinsically biased, as the eggnog orthologous groups are based on sequence comparison. thus, the vertices which are orthologous, yet their sequences have diverged beyond recognition by the methods used to construct the eggnog orthologous groups, do not contribute to this measure. we define coverage as the fraction of the eggnog orthologous groups shared by the two species and correctly identified by the network alignment. specifically, for graphalignment, let na be the number of aligned pairs and nc be the number of the correctly aligned pairs in which the vertices  belong to the same orthologous group as defined by eggnog. let nobe the total number of orthologous groups shared by the vertices of the networks being compared. then, we define the sensitivity as nc/na and coverage as nc/no. for græmlin, we define naas the number of equivalence classes in which both species are represented. as in case of the simulated networks, we consider two rules for counting the number of correctly aligned equivalence classes nc: an equivalence class is correctly aligned either when all vertices are in the same eggnog orthologous group and there is no vertex belonging to a different orthologous group in the class , or we consider the class correctly aligned whenever any two vertices belong to the same orthologous group . as the relaxed rule cannot decide between protein families, we will concentrate on the strict rule. definition of the sensitivity and coverage remain the same.

we summarize the results on pin in table
2: on the bacterial networks graphalignment slightly outperforms græmlin both in sensitivity and coverage, considering the strict rule. both algorithms reach sensitivity of more than 65% and coverage of more than 90%. while comparing the eukaryotic pin, græmlin outperforms graphalignment on the intact-derived human and murine networks. further, graphalignment significantly lags behind græmlin comparing the human and yeast literature-based networks. considering the contributions of the edge and node score, see table
 <dig>  we see that the alignment provided by graphalignment is in that case dominantly driven by the edge score. this contrasts with the situation in comparing the other pin networks, where the contributions are either even or dominated by the node score. the algorithm clearly overestimates the edge conservation rate between vertices with low sequence homology, which is inferred from the edge conservation rate between the orthologous vertices in the training set. that may have two reasons: either the protein interaction data are biased in a way that is not compatible with the graphalignment bayesian model, or different rates of interaction divergence occur between high-confidence orthologs  and proteins with low sequence similarity. different rates of protein-protein interaction conservation depending on sequence similarity have indeed been documented recently
 <cit> . the situation does not appear in the alignment produced by græmlin, which places more weight on vertex similarity, as we saw in the previous section.

protein-protein interaction networks. for græmlin, the values are calculated using the strict rule. values obtained following the relaxed rule are given in parentheses. for graphalignment, the relative contributions of the edge and node score are also given. results obtained using blast bidirectional best hit are provided for comparison.

when considering the gene co-expression networks, we observe very similar performance of graphalignment and græmlin. the former algorithm provides better coverage , while the latter shows slightly better sensitivity, with the exception of the comparison of escherichia coli and salmonella enterica, in which graphalignment has both better coverage and sensitivity. see table
 <dig> and additional file
1: table s <dig> for the summary of the results.

gene co-expression networks. see table
 <dig> for details.

CONCLUSIONS
here we describe a software package for alignment of biomolecular networks based on a hybrid method developed in
 <cit> , graphalignment, and compare it to the algorithm græmlin  <dig> . we find advantages on both sides: the standalone græmlin is able to perform multiple network comparisons and provides additional functionalities, e.g., clustering. as revealed on simulated data, graphalignment outperforms græmlin in the use of interaction information for network alignment. we attribute the observed differences to the full use of interaction information: when an edge between a pair of aligned nodes is absent in both networks, graphalignment will typically reward the alignment of the nodes by a small score; græmlin does not consider this piece of information. consequently, græmlin tends to align dense conserved clusters. this behaviour is advantageous for detection of such clusters, but may not be optimal in global alignment of sparse networks.

comparison of empirical bacterial protein-protein interaction networks shows that graphalignment performs slightly better than græmlin considering both sensitivity and coverage. comparing the interaction networks of human and mouse based on the intact database, the situation is reversed. moreover, we have observed limitations of the graphalignment algorithm in comparison of yeast and human protein-protein interaction networks, where the performance of the algorithm is decreased, most probably because the bayesian scheme cannot deal with biased data or with the heterogenous rate of edge dynamics. on bacterial gene co-expression networks, graphalignment provides better coverage than græmlin, while the sensitivity of both algorithms is similar. considering the computational complexity, graphalignment is as efficient as græmlin on small bacterial networks, while it lags significantly on large eukaryotic networks.

the simplicity and generality of graphalignment edge scoring makes this algorithm an appropriate choice for global alignment of networks. the underlying model is independent of the interpretation of edge weights, i.e., whether these weights represent probabilities of interaction between adjacent vertices or measure interaction strength. since the algorithm is based on a well-defined evolutionary model, its parameters can be optimized by bayesian methods. the graphalignment procedure of data input, estimation of scoring parameters and alignment of the networks is thoroughly documented in the package vignette, which also contains example sessions. furthermore, we have shown that graphalignment is more robust to noise, an intrinsic factor of biological data, which is represented in our simulated data by spurious vertex similarities.

availability and requirements
the graphalignment algorithm is provided as an r package available from bioconductor
http://www.bioconductor.org and runs on all major platforms. computationally intensive routines are coded in c. the software package can be used freely and with no restrictions for non-commercial purposes. it contains a code implementing the jonker-volgenant algorithm
 <cit>  to solve linear assignment problems. the code was written by roy jonker, magiclogic optimization inc. and is copyrighted,  <dig> magiclogic systems inc., canada. the code may be used freely for non-commercial purposes. for full details see the package vignette, the web page
http://www.thp.uni-koeln.de/∼berg/graphalignment and the case studies
 <cit> .

competing interests
authors declare no competing interests.

authors’ contributions
all authors contributed equally to the work. all authors read and approved the final manuscript.

supplementary material
additional file 1
the additional file  <dig> contains the codes used to generate the network instances and to find the optimal alignment bygraphalignmentandgræmlin  <dig> , figures s <dig> and s <dig>  further, it contains figure s <dig> with the matrix of vertex similarities Θand the matrix of correlations between the edge weights of vertices i in g and i′ in g′ for the scenarios  and . figures s <dig> and s <dig> give the computational complexity and accuracy of the graphalignment and gæmlin algorithms in scenario  with the edge weights drawn from the normal distribution. finally, table s <dig> compares the graphalignment and græmlin performance on empirical gene co-expression networks.

click here for file

 acknowledgements
this work was supported by deutsche forschungsgemeinschaft ; and by the academy of sciences of the czech republic .
