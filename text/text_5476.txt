BACKGROUND
the stochastic simulation of chemical and biochemical reaction networks, also known as kinetic monte carlo, has been successfully used to accurately predict the intracellular dynamics of biological organisms  <cit> , including behavior that is not captured by deterministic methods, such as noise-induced oscillations  <cit> , transitions between stable states  <cit> , population heterogeneity  <cit> , stochastic focusing and resonance  <cit> , and smoothing of critical bifurcation points  <cit> . because these probabilistic effects alter both the quantitative and qualitative dynamics of a system, the use of stochastic methods is critical to understanding natural biological systems and designing synthetic ones. the original stochastic simulation algorithm  <cit> , or its improved variants  <cit> , have been primarily used because they produce exact realizations of a jump markov process with discrete states. this mathematical representation capably describes how the number of molecules of each unique chemical species in a well-mixed single cell changes over time, including the fluctuations arising from thermal noise. the same mathematical description can also be extended to reaction-diffusion systems describing heterogeneous intracellular dynamics  <cit> .

however, since these methods individually execute reaction or diffusion events, the computational cost increases proportionally to the total number of occurrences of reaction or diffusion events. in order to capture the long time behavior of a system with both 'fast' and 'slow' reactions, such as a signal transduction network coupled with gene expression, these methods will spend the majority of their computational time simulating the occurrences of the fast reactions in the signalling network while only rarely executing a reaction event related to gene expression. the costs only increase when diffusion events are included. because most biological systems feature widely disparate timescales, it becomes impractical to use the exact method to simulate a large, realistic biological system with many reactions and chemical species. this obstacle has motivated the development and use of approximate and hybrid stochastic methods.

hy3s , or hybrid stochastic simulation for supercomputers, is an open sourced software package written for the development, dissemination, and productive use of hybrid stochastic simulation methods. the goal of the software is allow users to utilize the most recently developed stochastic methods to simulate extremely large, realistic biological systems. the software package includes multiple different hybrid stochastic simulation methods and a simple matlab  driven gui. it uses the netcdf   <cit>  interface to store both model and solution data in an optimized, platform-independent, array-based, binary format. by combining matlab's built-in scripting language and data analysis functions, netcdf's ability to quickly read or write terabytes of data, and our recently developed mpi-parallelized hybrid stochastic simulation method, it is now straightforward to simulate the stochastic dynamics of any extremely large, arbitrary biochemical reaction network with widely disparate time scales. the targeted production platform is an mpi-enabled intel itanium <dig> computing cluster running linux, but the simulation programs have also run on x <dig>  ibm, cray, and sgi altix computing platforms. the average user will most likely be a scientist, engineer, or mathematician who is already familiar with computational modelling.

many approximate or hybrid stochastic methods that decrease the computational cost of stochastic simulation have been proposed  <cit> . here, we focus on hybrid stochastic methods. a good hybrid stochastic method for simulating chemical kinetics partitions a system of reactions into multiple subsets, describes the time evolution of each subset as a different valid mathematical representation, and self-consistently merges all of the representations in order to produce an accurate solution and minimize the computational costs. because the subsets of reactions are usually coupled, the challenge is to simultaneously solve different types of mathematical processes, including the coupling effects. in recent years, a few hybrid stochastic methods have been proposed  <cit> . while these methods each advance the state of the art, the goal of creating a replacement for the original stochastic simulation algorithm that quickly and accurately simulates large arbitrary reaction networks, possibly featuring dynamical stiffness or widely disparate timescales, has not been achieved. in general, many software packages have been developed to simulate the dynamics of biochemical networks, using both deterministic and stochastic methods  <cit>  .

in our recent work on developing hybrid stochastic methods, we have progressed much closer to this goal by efficiently and accurately simulating a coupled jump/continuous markov process  <cit>  with many thousands of reactions and unique chemical species. importantly, the method uses the recently derived differential jump equations, a type of stochastic differential equation , to compute the times at which the slow reactions occur. these jump equations tie together a jump and continuous markov process by computing both the fast and slow dynamics through the simultaneous solution of a system of sdes. the established connection between the solution of a hybrid jump/continuous markov process and the well developed theory of stochastic differential equations places the numerical method on solid ground, enables the usage of implicit, higher order, and adaptive numerical integration methods, and allows characterization of both the local and global error of the solution. without such a connection, it is difficult to escape the usage of hand waving. we briefly describe the details of the numerical algorithm in the methods section. here, we will focus on the features of the newly developed software package and its capabilities.

implementation
overview of the software design
the main component of the software package is the collection of simulation programs written in fortran95/ <dig> k and parallelized using mpi. each simulation program accepts a netcdf input file containing all of the model data, simulates the stochastic dynamics of the model, and places the solution data back in the netcdf file. the netcdf file format is open, self-describing, and has apis in numerous programming languages, allowing anyone to create the input model data or analyze the output solution data using a variety of different programs. to assist users in quickly creating biochemical networks, we include a simple matlab-driven gui to create netcdf input files. users may also use matlab's scripting language to compose netcdf files, allowing for the complex construction of large networks. for data analysis and plotting, one may read the solution data back into matlab and use its capable functions. importantly, while we use matlab for creating biochemical networks and analyzing data, both the simulation programs and the netcdf file format are completely open. this enables us to focus our research and development on creating the fastest and most accurate hybrid stochastic methods while using existing or future tools to create complex biochemical networks and analyze solution data.

the simulation programs
the collection of simulation programs include four different numerical implementations of a hybrid jump/continuous markov stochastic simulator  <cit> , abbreviated as hyjcmss, and also the next reaction variant of the original stochastic simulation algorithm  <cit> . each simulation program is parallelized with mpi, creating a total of ten different simulation programs. extensive accuracy and speed testing has demonstrated that hyjcmss is currently the most efficient and accurate hybrid stochastic numerical method, especially when simulating extremely large reaction networks. we will briefly cover the different numerical implementations of the algorithm. we emphasize, however, that each program can be effectively treated as a 'black box' and used for productive research by those who are not interested in the details behind each numerical method.

overview of numerical methods
the hybrid jump/continuous markov stochastic simulator dynamically partitions a system of reactions into 'fast/continuous' and 'slow/discrete' subsets, describes the effects of the fast/continuous reactions using the chemical langevin equation  <cit> , and computes the times of the slow reactions using the zero crossings of a system of jump equations  <cit> . the chemical langevin equation and the differential jump equations are both itô type stochastic differential equations  and are numerically integrated using stochastic numerical integrators. the approximation of fast/continuous reactions as a continuous markov process greatly increases the efficiency of simulation when compared to an exact jump markov simulation. the accuracy of the approximation is controlled by two parameters, ε and λ, which completely parameterize the continuity approximation for any reaction network.

in addition, by allowing multiple occurrences of slow reactions in between numerical integrations of the chemical langevin equation, the efficiency of the simulation of large biochemical networks is dramatically increased. however, when using this 'multiple slow reaction'  approximation  <cit>  on systems with highly mixed timescales, the accuracy of the solution will be affected. we include an msr tolerance that determines the maximum effect of the msr approximation. the tolerance slides between zero and one, from turning off the approximation to the blind use of it. for efficiently and accurately simulating systems with possibly mixed timescales the default value of 1/ε provides an optimal trade off.

the numerical theory behind the integration of sdes differs significantly from deterministic differential equations, especially for higher order, implicit, and adaptive integration methods. for an excellent reference, see kloeden & platen  <cit> . for our purposes, the system of sdes is typically non-linear, multiplicative, non-commutative, and contains multiple wiener processes, which are also known as brownian paths. we compute the solution of the system of sdes using four different numerical methods of the strong type. specifically, we include a fixed time step euler-maruyama method, a fixed time step milstein method, an adaptive time step euler-maruyama method, and an adaptive time step milstein method. however, we only include the adaptive euler-maruyama method for educational purposes because it may converge to an incorrect solution  <cit>  and demonstrates the danger of glossing over the differences between stochastic and deterministic numerical methods.

the euler-maruyama method includes only the drift and diffusion terms of an itô-taylor expansion around the solution, giving the method a local strong error of o. the milstein method includes the drift, diffusion, and also a third term that requires the strong approximation of multiple two-dimensional wiener integrals, decreasing the local strong error to o. however, because the evaluation of these two dimensional wiener integrals is computationally intensive, the efficiency of the simulation may be decreased.

while fixed time step methods for stochastic numerical integrators are better characterized, it is possible to use an adaptive time step method to increase the efficiency of simulation, especially when dealing with dynamically stiff systems. adaptive time step methods dynamically determine an optimal time step for the numerical integrator and are preferred when solving a system of sdes that feature transient or intermittent dynamical stiffness. an adaptive time step method will decrease the time step of the numerical integration when dynamical stiffness exists, but will increase it when the system is no longer stiff. adaptive time step methods for computing strong solutions of sdes differ significantly from their deterministic counterparts. for example, when computing an optimal time step, the paths of the brownian process must be conditioned on previous and future realized points of the paths. otherwise, the solution will use a new brownian path whose increments will be biased by the criteria for time step selection, resulting in a loss of accuracy. the criteria for optimal time step selection require a measure of the local error of the solution. we use previously proposed criteria  <cit>  that measure the local error in both the drift and diffusion terms. we also apply an additional criterion that requires the fast/continuous reactions to remain validly approximated as a continuous markov process during the time interval of numerical integration. we use the evaluation of the criteria to either decrease or increase the time step, as needed. a more detailed description of adaptive time step methods for sdes is also available  <cit> . an overview of the advantages and disadvantages of each numerical method is shown in table  <dig>  we briefly describe both the fixed and adaptive forms of the euler-maruyama and milstein methods below.

each simulation program has a number of command-line parameters that enable the user to tailor the accuracy and efficiency of the simulation for a particular system. however, the user may elect to use default values of the parameters and obtain a reasonably accurate and efficiently computed solution. a description of the parameters is shown in table  <dig> 

optimizing data structures
in the simulation programs, there are three types of numerical operations where an optimized data structure increases computational performance. when solving the system of sdes, we take advantage of the sparseness of both the stoichiometric matrix and the system of two dimensional stochastic integrals. by creating indexes and inverse indexes that map the full system to a reduced one, we minimize the computation of the solution of the sdes. we also use a dependency graph to only compute reaction propensities and the derivatives of reaction propensities when they may have changed, similar to the dependency graph of the next reaction variant of the stochastic simulation algorithm  <cit> , but extended to include the presence of fast/continuous reactions and special events, which are described below. finally, we use an indexed priority queue to determine the reaction time corresponding to the next zero crossing of the differential jump equations and a sorted queue to determine the next special event time that may occur. these optimizing data structures increase the efficiency of simulation, especially for systems with numerous reactions and chemical species.

mpi parallelization
each simulation program is embarrassingly parallelized using mpi. typically, numerous independent realizations of the stochastic dynamics of a biochemical network are desired. each processor is allocated a number of independent trials to simulate. if the number of independent trials is divisible by the number of processors then the efficiency of the implementation is near 100%. parallel write and read access is utilized so that no processor writes to the same portion of the netcdf at any time and all processors may read the netcdf at any time. for example, if  <dig>  <dig> independent stochastic simulations of a biochemical network are desired and  <dig> processors are allocated to the simulation program then the computational time of the program will, in fact, be reduced by about  <dig> times. computing clusters with thousands of processors, such as the nsf supported teragrid  <cit> , enable this high level of research productivity.

because we use mpi as our underlying programming model for processor-to-processor communication, we can also readily extend each simulation program's usage to a grid computing environment, such as one utilizing mpich-g <dig>  <cit> . a grid computing environment allows a program to utilize computing processors from multiple different computers. the computers may be geographically separated and joined with a high bandwidth, but relatively high latency, communications connection. due to the high latency, it is important to minimize the blocking processor-to-processor communication, which is achieved with our current implementation. running a program on a previously configured grid environment can be as simple as constructing a short script and executing a command.

solution of a hybrid jump/continuous markov process
consider a homogeneous system of m reactions and n species with a stoichiometric matrix, v, a vector of reaction propensities, a, and a state vector, x, consisting of the number of molecules of each species. the system is dynamically partitioned into fast/continuous and slow reaction subsets with mfast and mslow reactions, respectively. the jth reaction is classified as fast/continuous if and only if the following is true:

aj  ≥ >> 1

xi  > ε·|vji| i ∈ {reactant or product of jth reaction}'     

where ε and λ are the parameters described in the above sections. the above criterion is evaluated with each iteration of the algorithm. the reaction propensities for the fast/continuous and slow reactions are respectively labeled af and as.

the fast/continuous reactions are approximated as a continuous markov process by performing an Ω-expansion of the governing master equation and deriving a multi-dimensional fokker-planck equation  <cit> . the fokker-planck equation describes the evolution of the probability distribution of the system considering the effects of only the fast/continuous reactions. or, equivalently, one can determine a system of itô stochastic differential equations that describes how the state of the system evolves over time, ignoring the occurrences of the slow reactions. for chemical reaction networks, the system of itô stochastic differential equations is named the chemical langevin equation  <cit> , stated as

dxi=∑j=1mfastvjiajf)dt+∑j=1mfastvjiajf)dwj,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazcqwgybawdawgaawcbagaemyaakgabeaakiabg2da9maaqahabagaemoday3aasbaasqaaiabdqgaqjabdmgapbqabagccqwghbqydaqhaawcbagaemoaaogabagaemozaygaaogaeiikagiafmiwaglba0bacqggoaakcqwg0badcqggpaqkcqggpaqkcqwgkbazcqwg0badcqghrawkdaaewbqaaiabdaha2naabaaaleaacqwgqbgacqwgpbqaaeqaaowaaoaaaeaacqwghbqydaqhaawcbagaemoaaogabagaemozaygaaogaeiikagiafmiwaglba0bacqggoaakcqwg0badcqggpaqkcqggpaqkasqabaaabagaemoaaomaeyypa0jaegymaedabagaemyta00aawbaawqabeaacqwgmbgzcqwghbqycqwgzbwccqwg0badaaaaniabgghildaaleaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgnbqtdaahaaadbeqaaiabdagamjabdggahjabdohazjabdsha0baaa0gaeyyeiuoakiabdsgakjabdefaxnaabaaaleaacqwgqbgaaeqaaogaeiilawiaaczcaiaaxmaacqggoaakcqaiyagmcqggpaqkaaa@74cc@

where the dw refers to a vector of wiener increments of the multidimensional wiener process.

the slow reactions are described as a jump markov process, whose events have waiting times that are distributed according to a time-dependent probability distribution. the time dependence arises from changes in the state vector due to the numerical integration of the chemical langevin equation. in order to explicitly account for this time-dependence, we have previously derived  <cit>  a system of differential jump equations,

drjdt=ajs,rj=log⁡,j= <dig> ..mslow,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqabeqadaaabawaasaaaeaacqwgkbazcqwgsbgudawgaawcbagaemoaaogabeaaaoqaaiabdsgakjabdsha0baacqgh9aqpcqwghbqydaqhaawcbagaemoaaogabagaem4camhaaogaeiikagiaemidaqnaeiykakiaeiilawcabagaemouai1aasbaasqaaiabdqgaqbqabagccqggoaakcqwg0baddawgaawcbagaem4ba8gabeaakiabcmcapiabg2da9igbcygasjabc+gavjabceganjabcicaoiabdwfavjabdkfasjabd6eaonaabaaaleaacqwgqbgaaeqaaogaeiykakiaeiilawcabagaemoaaomaeyypa0jaegymaejaeiola4iaeiola4iaeiola4iaemyta00aawbaasqabeaacqwgzbwccqwgsbabcqwgvbwbcqwg3bwdaagccqggsaalaagaaczcaiaaxmaadaqadaqaaiabiodazagaayjkaiaawmcaaaaa@62eb@

which describe the rate of change of a system of reaction residuals, r. a slow reaction occurs when its corresponding reaction residual performs a zero crossings from a negative to positive value. by numerically integrating the system of differential jump equations along with the chemical langevin equation and monitoring the zero crossings of the reaction residuals, one can account for the coupled nature of the jump and continuous markov processes and accurately compute the times of the slow reactions. one can also perform an itô-taylor expansion around each reaction residual to predict the time of the next zero crossing. note that, because of their dependence on the state vector, the system of differential jump equations are also itô stochastic differential equations, but do not contain a wiener process. in addition, if the jump and continuous markov processes are uncoupled or if there are only slow reactions, then the system of differential jump equations simplify to the next reaction variant  <cit>  method of computing the reaction times.

by using stochastic differential equations to describe both the effects of the fast/continuous reactions and the times of the slow reactions, we now have a considerable amount of numerical integration theory at our disposal. we have implemented four different stochastic numerical integrators to compute the solution of eqs  and , both fixed and adaptive schemes. when we use a fixed scheme to numerically integrate eqs  and  we must include the multiple slow reaction  approximation criteria in a special fashion. an efficient method of including the tolerance is to numerically integrate eq.  forward in time until either the number of zero crossings has maximally satisfied the msr tolerance value or the time step is equal to the chosen fixed time step. one then uses the same time step to numerically integrate eq. . if the msr tolerance is small, the time step may change during the simulation. however, the method still has the properties of a fixed scheme because the wiener increments are only evaluated once and no conditional probabilities are required. the global error of this scheme is no worse than a normal fixed scheme because enforcement of the msr tolerance always decreases the utilized time step, generating a smaller local error. when using an adaptive scheme to solve eqs.  and , we simply half or double the time step based on the msr criteria in addition to the other criteria.

we now briefly describe each numerical integration scheme we use, but note that more comprehensive derivations of these methods are available <cit> .

the fixed euler-maruyama method
the euler-maruyama method is an explicit stochastic numerical integration method with strong accuracy of order o. it is derived from the itô-taylor expansion around the solution, truncating after the diffusion term. applied to the chemical langevin equation, it is stated as

xik+1=xik+∑j=1mfastvjiajfΔt+∑j=1mfastvjiajfΔwj,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgybawdaqhaawcbagaemyaakgabagaem4aasmaey4kasiaegymaedaaogaeyypa0jaemiwag1aa0baasqaaiabdmgapbqaaiabdugarbaakiabgucarmaaqahabagaemoday3aasbaasqaaiabdqgaqjabdmgapbqabagccqwghbqydaqhaawcbagaemoaaogabagaemozaygaaogaeiikagiafmiwaglba0badaahaawcbeqaaiabdugarbaakiabcmcapiabgs5aejabdsha0jabgucarawcbagaemoaaomaeyypa0jaegymaedabagaemyta00aawbaawqabeaacqwgmbgzcqwghbqycqwgzbwccqwg0badaaaaniabgghildgcdaaewbqaaiabdaha2naabaaaleaacqwgqbgacqwgpbqaaeqaaowaaoaaaeaacqwghbqydaqhaawcbagaemoaaogabagaemozaygaaogaeiikagiafmiwaglba0badaahaawcbeqaaiabdugarbaakiabcmcapawcbeaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgnbqtdaahaaadbeqaaiabdagamjabdggahjabdohazjabdsha0baaa0gaeyyeiuoakiabgs5aehqaaiab=dfaxnaadaaaleaacqwfqbgaaeaacqwfoaakcqwfxaqmcqwfpaqkaagccqggsaalcawljagaaczcaiabcicaoiabisda0iabcmcapaaa@7b6e@

where Δwj is a normal gaussian random number with a mean of zero and a variance of Δt. applied to the differential jump equations, the scheme is simply

rjk+1=rjk+ajsΔt.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgsbgudaqhaawcbagaemoaaogabagaem4aasmaey4kasiaegymaedaaogaeyypa0jaemouai1aa0baasqaaiabdqgaqbqaaiabdugarbaakiabgucariabdggahnaadaaaleaacqwgqbgaaeaacqwgzbwcaagccqggoaakcuwgybawgaqhamaacaaaleqabagaem4aasgaaogaeiykakiaeyildqkaemidaqnaeiola4iaaczcaiaaxmaacqggoaakcqai1aqncqggpaqkaaa@4943@

the fixed milstein method
the milstein method is an explicit stochastic numerical integrator with strong accuracy of o. the increased accuracy originates from retaining terms of o in the itô-taylor expansion around the solution. these additional terms contain two-dimensional stochastic integrals, which are defined as

i=∫tt+Δtdwj1dwj <dig>      
mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgjbqscqggoaakcqwgqbgadawgaawcbagaegymaedabeaakiabcycasiabdqgaqnaabaaaleaacqaiyagmaeqaaogaeiykakiaeyypa0zaa8qcaeaacqwgkbazcqwgxbwvcqggoaakcqwg0badcqggpaqkdawgaawcbagaemoaaomaegymaedabeaakiabdsgakjabdefaxjabcicaoiabdsha0jabcmcapmaabaaaleaacqwgqbgacqaiyagmaeqaaogaeiola4iaaczcaiaaxmaacqggoaakcqai2agncqggpaqkasqaaiabdsha0bqaaiabdsha0jabgucariabgs5aejabdsha0bqdcqghrii8aaaa@549e@

the two dimensional stochastic integrals are used to describe the time evolution of a random variable that is dependent on multiple wiener processes. for a single wiener process or when j <dig> = j <dig>  a single realization of eq  simplifies to the evaluation of

i=12{2−Δt}.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgjbqscqggoaakcqwgqbgadawgaawcbagaegymaedabeaakiabcycasiabdqgaqnaabaaaleaacqaixaqmaeqaaogaeiykakiaeyypa0zaasaaaeaacqaixaqmaeaacqaiyagmaawaaiwaaeaadaqadaqaaiabgs5aejabdefaxnaabaaaleaacqwgqbgacqaixaqmaeqaaagccagloagaayzkaawaawbaasqabeaacqaiyagmaagccqghsislcqghuoarcqwg0badaiaawuhacagl9baacqgguaglcawljagaaczcaiabcicaoiabieda3iabcmcapaaa@4af6@

however, for multiple different wiener processes, there is no analytic expression for realizations of eq . instead, once can fourier expand eq.  in terms of gaussian distributed coefficients and generate strong approximations, using

i=Δt{12ξj1ξj2+ρ p}+Δt2π∑r=1p1r{ζj <dig> r−ζj <dig> r}     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakqaabeqaaiabdmeajjabcicaoiabdqgaqnaabaaaleaacqaixaqmaeqaaogaeiilawiaemoaao2aasbaasqaaiabikdayaqabagccqggpaqkcqgh9aqpcqghuoarcqwg0baddagadaqaamaalaaabagaegymaedabagaegomaidaaggaciab=57a4naabaaaleaacqwgqbgacqaixaqmaeqaaogae8nvdg3aasbaasqaaiabdqgaqjabikdayaqabagccqghrawkdagcaaqaaiab=f8aynaabaaaleaacaamc8uaemiuaafabeaaaeqaaowaaewaaeaacwaja+hvd02aiwigbaaaleacmcoamwigdqgaqjadmciixaqmaeqcmciakiadmc4f+oaedgajaubaasqaiwigcwajaooaaomamwigikdayaqajwigaogaeyoei0iae8hvd02aasbaasqaaiabdqgaqjabikdayaqabagccqwf+oaedawgaawcbagaemoaaomaegymaedabeaaaogaayjkaiaawmcaaagaay5eaiaaw2haaaqaaiabgucarmaalaaabagaeyildqkaemidaqhabagaegomaijae8hwdahaamaaqahabawaasaaaeaacqaixaqmaeaacqwgybgcaawaaiwaaeaacqwf2ogedawgaawcbagaemoaaomaegymaejaeiilawiaemocaihabeaakmaabmaabawaaoaaaeaacqaiyagmasqabagccqwf+oaedawgaawcbagaemoaaomaegomaidabeaakiabgucariab=d7aonaabaaaleaacqwgqbgacqaiyagmcqggsaalcqwgybgcaeqaaagccagloagaayzkaagaeyoei0iae8ntdo3aasbaasqaaiabdqgaqjabikdayiabcycasiabdkhaybqabagcdaqadaqaamaakaaabagaegomaidaleqaaogae8nvdg3aasbaasqaaiabdqgaqjabigdaxaqabagccqghrawkcqwf3oaadawgaawcbagaemoaaomaegymaejaeiilawiaemocaihabeaaaogaayjkaiaawmcaaagaay5eaiaaw2haaawcbagaemocainaeyypa0jaegymaedabagaemiuaafaniabgghildgccawljagaaczcaiabcicaoiabiida4iabcmcapaaaaa@ac39@

with a p-dependent constant ρ p=112−12π2∑r=1p1r <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwfbpgcdawgaawcbagaagpavlabdcfaqbqabagccqgh9aqpdawcaaqaaiabigdaxaqaaiabigdaxiabikdayaaacqghsisldawcaaqaaiabigdaxaqaaiabikdayiab=b8awnaacaaaleqabagaegomaidaaaaakmaaqahabawaasaaaeaacqaixaqmaeaacqwgybgcdaahaawcbeqaaiabikdayaaaaagccqggsaalasqaaiabdkhayjabg2da9iabigdaxaqaaiabdcfaqbqdcqghris5aaaa@4649@

where ζj,r, ηj,r and μj are independent normal gaussian random numbers, n, and ξj is related to the wiener increments via ξj=ΔwjΔt
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwf+oaedawgaawcbagaemoaaogabeaakiabg2da9maalaaabagaeyildqkaem4vac1aasbaasqaaiabdqgaqbqabaaakeaadagcaaqaaiabgs5aejabdsha0bwcbeaaaaaaaa@3843@, for j =  <dig> ... mfast and r =  <dig> ... p. the constant p arises from the number of retained terms in the fourier expansion and controls the accuracy of the approximation. we set p to  <dig> to generate reasonably accurate realizations of the two dimensional stochastic integrals without requiring an excessive number of normal gaussian random numbers.

applied to the chemical langevin equations, the milstein scheme is stated as

xik+1=xik+∑j=1mfasstvjiajfΔt+∑j=1mfastvjiajfΔwj+12∑j <dig> j2=1mfast∑n=1nvj1nvj2iaj1aj2∂aj1∂xni,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqadegabaaabagaemiwag1aa0baasqaaiabdmgapbqaaiabdugarjabgucariabigdaxaaakiabg2da9iabdifaynaadaaaleaacqwgpbqaaeaacqwgrbwaaagccqghrawkdaaewbqaaiabdaha2naabaaaleaacqwgqbgacqwgpbqaaeqaaogaemyyae2aa0baasqaaiabdqgaqbqaaiabdagambaakiabcicaoiqbdifayzaadawaawbaasqabeaacqwgrbwaaagccqggpaqkcqghuoarcqwg0badasqaaiabdqgaqjabg2da9iabigdaxaqaaiabd2eannaacaaameqabagaemozaymaemyyaemaem4camnaem4camnaemidaqhaaaqdcqghris5aogaey4kasyaaabcaeaacqwg2bgddawgaawcbagaemoaaomaemyaakgabeaakmaakaaabagaemyyae2aa0baasqaaiabdqgaqbqaaiabdagambaakiabcicaoiqbdifayzaadawaawbaasqabeaacqwgrbwaaagccqggpaqkasqabagccqghuoarcqwgxbwvdawgaawcbagaemoaaogabeaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgnbqtdaahaaadbeqaaiabdagamjabdggahjabdohazjabdsha0baaa0gaeyyeiuoaaoqaaiabgucarmaalaaabagaegymaedabagaegomaidaamaaqahabawaaabcaeaacqwg2bgddawgaawcbagaemoaao2aasbaawqaaiabigdaxaqabawccqwgubgbaeqaaogaemoday3aasbaasqaaiabdqgaqnaabaaameaacqaiyagmaeqaasgaemyaakgabeaakmaakaaabawaasaaaeaacqwghbqydawgaawcbagaemoaao2aasbaawqaaiabigdaxaqabaaaleqaaogaeiikagiafmiwaglba0badaahaawcbeqaaiabdugarbaakiabcmcapaqaaiabdggahnaabaaaleaacqwgqbgadawgaaadbagaegomaidabeaaasqabagccqggoaakcuwgybawgaqhamaacaaaleqabagaem4aasgaaogaeiykakcaaawcbeaakmaalaaabaaccigae8naiyraemyyae2aasbaasqaaiabdqgaqnaabaaameaacqaixaqmaeqaaawcbeaaaoqaaiab=jgi2kabdifaynaabaaaleaacqwgubgbaeqaaaaakiabdmeajjabcicaoiabdqgaqnaabaaaleaacqaixaqmaeqaaogaeiilawiaemoaao2aasbaasqaaiabikdayaqabagccqggpaqkasqaaiabd6gaujabg2da9iabigdaxaqaaiabd6eaobqdcqghris5aawcbagaemoaao2aasbaawqaaiabigdaxaqabawccqggsaalcqwgqbgadawgaaadbagaegomaidabeaaliabg2da9iabigdaxaqaaiabd2eannaacaaameqabagaemozaymaemyyaemaem4camnaemidaqhaaaqdcqghris5aaaakiabcycasiaaxmaacawljawaaewaaeaacqai5aqoaiaawicacaglpaaaaaa@c3e5@

where the first summation of the third term is taken over all possible combinations of a pair of fast/continuous reactions. conveniently, because the stoichiometric matrix is typically sparse, there will be many zeros in the summations of the third term. after classifying reactions as fast/continuous or slow we create an index of all non-zero values and only compute the needed two dimensional stochastic integrals and coefficients. because the differential jump equations lack a wiener process, the milstein scheme applied to them is the same as in eq. .

adaptive methods
our implementation of an adaptive time step scheme involves a three step process: evaluation of criteria that measure the local error of the solution, the halving or doubling of the time step according to the value of the criteria, and the determination of the wiener increments corresponding to the decreased or increased time step. we restrict ourselves to only halving or doubling the time step for two reasons. the first is that the structure of the brownian bridge becomes a brownian binary tree and allows for easy storage and retrieval. the second is that, because the chemical langevin equation contains multiple, non-commutative, multiplicative noise sources, it is not straightforward to calculate the necessary 2d stochastic integrals without simplifying the time step selection scheme.

we use a previously proposed set of criteria  <cit>  that measure the local error in both the drift and diffusion components of the solution. the drift local error is measured by computing the difference between the euler and heun methods, which is

ed=‖Δt2)−f′)‖∞,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrdawgaawcbagaemizaqgabeaakiabcicaoiabdifaynaadaaaleaacqwgpbqaaeaacqwgrbwaaagccqggsaalcqghuoarcqwg0badcqggpaqkcqgh9aqpdaqbdaqaamaalaaabagaeyildqkaemidaqhabagaegomaidaamaabmaabagafmozaymbauaadaqadaqaaiqdmc4gybawggaja2badgajaybaasqajwigbgajakadmc4grbwaaagccqghrawkcqghuoarcqwg0badcuwgmbgzgaqbamaabmaabagafmiwaglba0badaahaawcbeqaaiabdugarbaaaogaayjkaiaawmcaaagaayjkaiaawmcaaiabgkhitiqbdagamzaafawaaewaaeaacuwgybawgaqhamaacaaaleqabagaem4aasgaaagccagloagaayzkaaaacagloagaayzkaaaacagljwuaaypcsdwaasbaasqaaiabg6hilcqabagccqggsaalcawljagaaczcaiabcicaoiabigdaxiabicdawiabcmcapaaa@667b@

where f′
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwgmbgzgaqbaiabcicaogqaaiqb=hha4zaadagaeiykakcaaa@3161@ is the matrix, ∂ajxi| x¯
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaggaciab=jgi2kabdggahnaabaaaleaacqwgqbgaaeqaaagcbagaemiwag1aasbaasqaaiabdmgapbqabaaaaogaeiifaw3aasbaasqaaiaaykw7cuwg4baegaqhaaqabaaaaa@38a3@. the drift local error is of order o. the diffusion local error is measured by performing an itô-taylor expansion of the milstein scheme and selecting an o term that is most efficient to compute. the diffusion criteria is

e=112‖)•‖∞‖vji∂aj∂xi|x¯k‖∞.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrcqggoaakcqwgybawdaqhaawcbagaemyaakgabagaem4aasgaaogaeiilawiaeyildqkaemidaqnaeiykakiaeyypa0zaasaaaeaacqaixaqmaeaacqaixaqmcqaiyagmaawaauwaaeaadaqadaqaamaalaaabagaeyildqkaem4vac1aa0baasqaaiabdqgaqbqaaiabiodazaaaaoqaamaakaaabagaemyyae2aasbaasqaaiabdqgaqbqabagccqggoaakcuwgybawgaqhamaacaaaleqabagaem4aasgaaogaeiykakcaleqaaaaaaogaayjkaiaawmcaaiabgkci3oaabmaabagaemoday3aasbaasqaaiabdmgapjabdqgaqbqabagcdawcaaqaaggaciab=jgi2kabdggahnaabaaaleaacqwgqbgaaeqaaagcbagae8naiyraemiwag1aasbaasqaaiabdmgapbqabaaaaogaeiifaw3aasbaasqaaiqbdifayzaadawaawbaawqabeaacqwgrbwaaaaaleqaaagccagloagaayzkaaaacagljwuaaypcsdwaasbaasqaaiabg6hilcqabagcdaqbdaqaaiabdaha2naabaaaleaacqwgpbqacqwgqbgaaeqaaowaasaaaeaacqwfciitcqwghbqydawgaawcbagaemoaaogabeaaaoqaaiab=jgi2kabdifaynaabaaaleaacqwgpbqaaeqaaaaakiabcyha8naabaaaleaacuwgybawgaqhamaacaaameqabagaem4aasgaaawcbeaaaogaayzcslaawqa7amaabaaaleaacqgheispaeqaaogaeiola4iaaczcaiaaxmaacqggoaakcqaixaqmcqaixaqmcqggpaqkaaa@7f1a@

the max norm is taken to be the maximum absolute sum along the j dimension. a third criterion is that the numbers of molecules of all species affected by fast/continuous reactions must remain above a certain threshold, which is arbitrarily taken to be  <dig> molecules. the latter criterion will force the fast/continuous reactions to remain reasonably approximated as a continuous markov process during the interval of numerical integration. we evaluate eqs.  and  and also the third criterion for each species in the system and consider the local error to be small only when eqs.  and  are less than the user-defined tolerance value and when the third criterion is true.

time increments are described using a binary tree structure. the top node, or row, is the initial time step of the simulation. additional nodes and rows are created by halving the time step of parent nodes. the number of nodes of each row is always 2r- <dig> and the current time step is always Δto/2r- <dig>  where r is the row number, starting at one, and Δto is the initial time step. if the local error is large, we halve the time step and move down a row. if the local error is small, we may double the time step and move up a row, but only if the number of the current node, or branch, is divisible by two. if the branch is not divisible by two, we simply maintain the time step. as we successfully numerically integrate forward in time, we increment the branch number.

the main reason for using the binary tree described above is to efficiently compute the brownian bridges. at the top row of the tree, the wiener increments for the initial time step are computed. when the time step is decreased we may not re-evaluate a wiener increment for the halved time increment because the value of the wiener process at the final time has already been evaluated. instead, we must compute the wiener increment of the halved time step, conditioned on the value of the beginning and ending wiener process. to generate the intermediate wiener increments, we use

Δw2pr=12Δwpr−1+γprp= <dig> , <dig> ,...2r−2−1Δw2p+1r=12Δwpr−1−γprr= <dig> ,...,rγpr=n,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqabewacaaabagaeyildqkaem4vac1aa0baasqaaiabikdayiabdchawbqaaiabdkhaybaakiabg2da9maalaaabagaegymaedabagaegomaidaaiabgs5aejabdefaxnaadaaaleaacqwgwbacaeaacqwgybgccqghsislcqaixaqmaagccqghrawkiigacqwfzowzdaqhaawcbagaemicaahabagaemocaihaaagcbagaemicaanaeyypa0jaegimaajaeiilawiaegymaejaeiilawiaegomaijaeiilawiaeg4mamjaeiilawiaeiola4iaeiola4iaeiola4iaegomaizaawbaasqabeaaieaacqgfybgccqghsislcqaiyagmaagccqghsislcqaixaqmaeaacqghuoarcqwgxbwvdaqhaawcbagaegomaijaemicaanaey4kasiaegymaedabagaemocaihaaogaeyypa0zaasaaaeaacqaixaqmaeaacqaiyagmaagaeyildqkaem4vac1aa0baasqaaiabdchawbqaaiabdkhayjabgkhitiabigdaxaaakiabgkhitiab=n7annaadaaaleaacqwgwbacaeaacqwgybgcaaaakeaacqwgybgccqgh9aqpcqaiyagmcqggsaalcqaizawmcqggsaalcqgguaglcqgguaglcqgguaglcqggsaalcqgfsbguaeaacqwfzowzdaqhaawcbagaemicaahabagaemocaihaaogaeyypa0jaemota40aaewaaeaacqaiwaamcqggsaalcqaiyagmdaahaawcbeqaaiabgkhitiabdkhaybaaaogaayjkaiaawmcaaaqaaaaacqggsaalcawljagaaczcamaabmaabagaegymaejaegomaidacagloagaayzkaaaaaa@8cc9@

where n is a gaussian random number with mean m and standard deviation σ.

in this way, previously generated wiener increments are always reused and new intermediate wiener increments are always conditioned on previously generated ones. in addition, realizations of the two dimensional itô integrals for a particular time increment must never be generated twice. the values of the wiener increments, the current time step, and the two dimensional itô integrals are then inputted into either the euler-maruyama or the milstein numerical integrators and a trajectory of the system's dynamics for the next time step is obtained.

the graphical user interface
the graphical user interface allows users to quickly create biochemical networks, set the necessary parameters and model data, and create the input netcdf file. we use the open source project mexcdf  <cit>  to create and compose netcdf files from within matlab. the graphical interface consists of one main window  with multiple auxiliary windows. two of the auxiliary windows are shown in figures  <dig> and  <dig>  the model data includes the system of chemical or biochemical reactions, the initial conditions of species, the initial volume, the start and end times, the number of save time points, and the number of independent trials. users may also add special discrete events, including cell replication events, gamma-distributed reactions, and timed perturbations to both the numbers of molecules of any chemical species or the kinetic parameters of any reaction. finally, to help perform a simple sensitivity analysis, users may also create multiple models within a single netcdf file, where each model has a different set of initial conditions or kinetic parameters of reactions.

adding reactions and setting initial conditions
for each reaction, the user enters the stoichiometry of the reactant and product species, the rate law, and the kinetic parameters . there are eleven different rate laws currently available and instructions for adding more are included. besides the commonly used mass action rate laws, we included other rate laws that have been shown to be useful, such as generalized power law kinetics  <cit> , special gamma-distributed events  <cit> , and michaelis menten  type rate laws  <cit> . to make the process of adding reactions more efficient, the gui will assume mass action kinetics and fill in the appropriate information in the species boxes . the user can then enter in the kinetic parameters for the reaction or select an alternate rate law from the list and fill in the necessary information. by separating the stoichiometry of the reaction from its rate law, the software gives the user increased flexibility in adding a wide variety of reactions. the initial conditions for each chemical species are entered in units of molecules. species may be selected to 'split on division'  so that, with every cell replication, the number of molecules of the selected species are distributed to two daughter cells. because one is typically not interested in the stochastic dynamics of every species in a model, the software also allows users to discard or save the solution data of each species.

adding special events
biological systems often exhibit behaviours that are not easily modeled by a system of biochemical reactions. to aid in better simulating such behaviour, we include multiple types of special events, each describing a specific biological process. while sometimes ignored or approximated as a continuous rate of dilution, cell replication is more accurately modelled as a discrete event that disperses soluble molecules to daughter cells. the times at which cells divide are not constant, but typically fluctuate around an average with a gaussian distribution. on the main gui window, users may enable cell division special events and enter the mean and standard deviation of the cell replication times . the volume of the cell, starting from the initial value, increases exponentially with a rate equal to the inverse of the mean cell replication time and is reset to the initial volume when cell replication occurs.

transcriptional and translation elongation is another process that is typically ignored, but may significantly affect the qualitative dynamics of the system through the introduction of both a delay in mrna and protein production and an increase in stochasticity. one may describe the movement of the rna polymerase or ribosome inchworming across the dna or mrna as a system of n first order reactions, where n is the number of base pairs or codons. however, because n is typically very large and decreases the efficiency of the simulation, one can assume that the rate of elongation, k, is constant and derive a single gamma-distributed event for the entire process of elongation  <cit> . when adding reactions, users may elect to describe the transcriptional and translation elongation events as gamma-distributed with rate k and n steps, providing an effective balance between accuracy and efficiency.

it is often convenient to modify the kinetic parameters of a reaction or the number of molecules of a chemical species mid-way through a simulation in order to test the system's response to an external perturbation or model some complex phenomenon. for example, one can model the addition of an inducer at some time by either increasing the number of molecules or increasing the rate of influx of the inducer midway through the simulation. one can also increase the influx of a receptor-binding ligand at some time to determine the response characteristics of a signal transduction network. multiple perturbations to the system can model complex external behaviours. system perturbations are added in an auxiliary window, reachable from the main window.

specifying multi-model netcdf files and simulations
while studying a natural biological system or designing a synthetic one, scientists and engineers would often like to vary a kinetic parameter or initial condition of the biological model and determine its effect on the dynamics of the system. instead of constructing numerous separate netcdf files, each containing one set of model and solution data, hy3s allows users to create a multi-model netcdf file. a multi-model netcdf file may contain multiple different biological models, each containing different kinetic parameters of reactions or initial conditions. if a simulation program is given a multi-model netcdf file it will simulate the stochastic dynamics of each model, including the specified number of independent trials, and place the solution data back in the netcdf file. the solution data is then four-dimensional  and can be wholly or partially read into a data analysis program, such as matlab. one can then perform a simple sensitivity analysis of a biological model by varying one or more parameters, simulating the stochastic dynamics of each model, and analyzing the dynamics as a function of a parameter.

in order to specify a multi-model netcdf file, the user may select an experiment type of  <dig> or 'combinatorial variation of kinetic parameters and initial conditions' and add variations by pressing the newly named button below the drop down menu . kinetic parameters or initial conditions may be varied from a start to end value with any number of either linear or logarithmic steps. adding two or more variations will cause the gui to compute all combinations of each specified kinetic parameter and initial condition and place the appropriate information in the netcdf file. users may also construct an arbitrary list of kinetic parameters and initial conditions and place the information in the netcdf file, which is helpful if one would like to vary one kinetic parameter and apply some constraint to others. for example, one may want to vary a backward kinetic constant while keeping the equilibrium constant unchanged. creating multi-model netcdf files helps to combine multiple models into a single, compact form, containing all of the model and solution data and enabling faster data analysis.

creating complex biochemical networks and analyzing data with scripts
the graphical user interface provides a fast way to create small to medium sized biochemical networks. however, one would often like to create a very large network which has some special structure or characteristic. while one could enter in these reactions by hand, it is often more convenient to write a short program, or script, that constructs the biochemical network and places the necessary information in the netcdf file. because the netcdf format is open and contains apis in many different programming languages, many scientific applications may read and write netcdf files. these scientific applications often contain miniature programming languages with many useful pre-built functions and enable users to program highly complex tasks in a small amount of time. we use the open source project mexcdf  <cit>  to enable matlab to read and write netcdf files.

by combining the easy-to-use gui with the capabilities of scripting, one can create any arbitrary biochemical network, possibly with thousands of reactions and chemical species, to answer a wide variety of research questions. because of the variety of possible biochemical networks, it is not feasible to write a user interface to include everything. instead, users may use the gui to begin constructing a biochemical network and use scripting to extend that network for any particular purpose. for example, one can examine the effects of gene dosage on the dynamics of a gene network by using the gui to construct a single copy gene network and a script to duplicate all dna sites and their corresponding reactions to a specified copy number. one can also use scripting to quickly construct signal transduction networks which often have a combinatorially large number of chemical species due to numerous protein-protein interactions. we include a few example matlab scripts that read and write hy3s netcdf files to help users write their own.

the obstacles to simulating large, realistic biological systems include not only construction and simulation of the model, but also the analysis of the solution data. because the solution data set can be large, especially for multi-model netcdf files, it is often necessary to read in only a portion of the solution at a time. not all file formats allow one to read in a subset of data. however, netcdf is specifically optimized for direct access mode. one can easily read or write hyperslabs of data using a netcdf api, such as mexcdf in matlab. for example, if one wants to compute a probability distribution of a particular species at a single time point then only a very small subset of the data needs to be read, which is easily performed and saves a tremendous amount of time. in addition, when constructing multi-model netcdf files, one can extract the solution data along the model dimension, allowing for the easy analysis of the effects of a kinetic parameter or initial condition. combining the optimized netcdf format, the mexcdf interface, and matlab functions, one can quickly analyze solution data using a variety of techniques, create figures, and achieve high research productivity.

RESULTS
we present three examples to examine different characteristics of hy3s. the first example is a simple one that thoroughly analyzes the accuracy of the hyjcmss numerical method. the second example is a large scale system benchmark with up to twenty thousand reactions that explores hy3s's ability to simulate large biochemical networks. the third example, a bistable multiscale biochemical network with spontaneous escape, demonstrates hy3s ability to simulate complex, realistic networks. all reported computational times are from simulations run on itanium <dig>  <dig>  ghz processors.

an extensive test of accuracy
when we first proposed the numerical method simulating a hybrid jump/continuous markov process  <cit>  we analyzed the method's accuracy with numerous examples, including a simple reaction network consisting of a linear three-cycle of fast/continuous reactions and two non-linear slow reactions, named the 'cycle test'. however, we would like to demonstrate that the method's accuracy is not limited to linear fast/continuous reactions. here, we use a 'non-linear cycle test', containing three fast/continuous and two slow reactions  and perform a series of accuracy measurements to determine how the error in the probability distribution, mean, and variance of the solution changes with the system size. the system size is a parameter in the reaction network that describes how well the fast/continuous reactions may be validly approximated as a continuous markov process. here, we take the system size to be the number of initial reactant and product molecules in the fast/continuous reactions.

the hybrid jump/continuous markov stochastic simulator has two sources of error. the first is the approximation of the fast/continuous reactions as a continuous markov process. the second is the numerical integration of the chemical langevin and differential jump equations. as the system size is increased, we expect that the first component of the error to decrease. as we decrease the time step of numerical integration, the second component of the error should also decrease. the magnitude of the second error is proportional to Δtγ, where γ is either the strong or weak order of accuracy of the stochastic numerical integration method, depending on the definition of the error. by varying the time step of numerical integration, we can measure the contribution of the second error source.

ideally, to compare the hyjcmss method using either the euler-maruyama or milstein schemes, one should compute the strong error of the solution by comparing the differences in the trajectories between the hybrid approximate and exact solutions. to compute the strong error of the numerical solution of a system of stochastic differential equations , one fixes the brownian paths of the system and compares the evaluation of the solution using either different numerical schemes or, if available, an exact analytical solution. however, because we are simulating a coupled jump/continuous markov process, it is more difficult to 'fix' the random process and evaluate the strong error. consequently, we will only compute the weak mean and variance errors and, for easier comparisons, normalize them with respect to the exact mean and variance, so that

Δmeani=|e−e|eΔvar⁡i=|var⁡{xissa}−var⁡{xihy3s}|var⁡{xissa}.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqabegabaaabagaeyildq0aa0baasqaaiabd2gatjabdwgaljabdggahjabd6gaubqaaiabdmgapbaakiabcicaoiabdsha0jabcmcapiabg2da9maalaaabawaaqwaaeaacqwgfbqrdawadaqaaiabdifaynaadaaaleaacqwgpbqaaeaacqwgtbwucqwgtbwucqwgbbqqaagccqggoaakcqwg0badcqggpaqkaiaawufacagldbaacqghsislcqwgfbqrdawadaqaaiabdifaynaadaaaleaacqwgpbqaaeaacqwgibascqwg5bqecqaizawmcqwgtbwuaagccqggoaakcqwg0badcqggpaqkaiaawufacagldbaaaiaawea7cagliwoaaeaacqwgfbqrdawadaqaaiabdifaynaadaaaleaacqwgpbqaaeaacqwgtbwucqwgtbwucqwgbbqqaagccqggoaakcqwg0badcqggpaqkaiaawufacagldbaaaaaabagaeyildq0aa0baasqaaigbcaha2jabcggahjabckhaybqaaiabdmgapbaakiabcicaoiabdsha0jabcmcapiabg2da9maalaaabawaaqwaaeaacygg2bgdcqgghbqycqggybgcdagadaqaaiabdifaynaadaaaleaacqwgpbqaaeaacqwgtbwucqwgtbwucqwgbbqqaagccqggoaakcqwg0badcqggpaqkaiaawuhacagl9baacqghsislcygg2bgdcqgghbqycqggybgcdagadaqaaiabdifaynaadaaaleaacqwgpbqaaeaacqwgibascqwg5bqecqaizawmcqwgtbwuaagccqggoaakcqwg0badcqggpaqkaiaawuhacagl9baaaiaawea7cagliwoaaeaacygg2bgdcqgghbqycqggybgcdagadaqaaiabdifaynaadaaaleaacqwgpbqaaeaacqwgtbwucqwgtbwucqwgbbqqaagccqggoaakcqwg0badcqggpaqkaiaawuhacagl9baaaaaaaiabc6cauiaaxmaacawljawaaewaaeaacqaixaqmcqaizawmaiaawicacaglpaaaaaa@a92e@

both the hybrid approximate and the exact mean and variances are computed by running at least  <dig>  <dig> independent trajectories of the system. by using the weak definition of error, we should find that both the euler-maruyama and the milstein numerical schemes have an order of accuracy of  <dig> . we also compute the probability distributions of the exact and hybrid approximate solutions and the average, normalized weak mean and variance errors, where the average is taken over all time points and species.

for all of the following simulations, we use the default values of the hyjcmss parameters, which are  = , where msr tol is the maximum tolerance for the multiple slow reaction approximation. we begin by using the euler-maruyama scheme with a fixed time step of  <dig>  seconds. as we increase the system size of the non-linear cycle test from  <dig> to  <dig>  <dig>  the ratio between the standard deviation and the mean of the solution goes to zero, indicating that we are effectively going towards the thermodynamic limit. the probability distribution of the solution is accurately captured for all system sizes and for both types of species, ones which are and are not affected by fast/continuous reactions . at a system size of  <dig>  the hyjcmss method treats at least two of the putative fast/continuous reactions as slow because the numbers of reactant or product molecules are so few. as the system size increases to  <dig> and larger values, all of the fast/continuous are, in fact, fast/continuous. notice, however, that there is no noticeable difference in the solution between the system sizes of  <dig> and  <dig>  the hyjcmss method dynamically classifies reactions as fast/continuous, approximating them as a continuous markov process only when it will produce an accurate solution. if there are no fast/continuous reactions, the method automatically reverts to the next reaction variant of the stochastic simulation algorithm. this combination of dynamic classification and algorithm switching makes the hyjcmss method a drop-in replacement for the original stochastic simulation algorithm and its variants.

while increasing the system size, the stiffness of the chemical langevin equation also increases. stiffness is a measure of the disparity of timescales in a system of differential or other time-evolution equations. in figure  <dig>  we show the normalized weak mean and variance errors for increasing system sizes. by keeping the time step constant even as the system becomes more stiff, the second source of error increases, arising from the numerical integration of the sdes. notice that only the weak variance error increases with increasing system size while the error in the mean marginally decreases. this observation indicates that the stiffness originates from the terms containing the wiener process, such as the diffusion term, and not the macroscopic terms, known as the drift. in order to obtain an accurate solution in terms of both the variance and the mean, we must use a time step that accounts for stiffness in either the drift-dominated or diffusion-dominated regimes. by decreasing the time step of numerical integration, we reduce the weak variance error with little change in the weak mean error .

it would be highly useful to automatically and dynamically determine a time  step that produces only a small amount of numerical error, in terms of both  the weak mean and variance. here, we use our implementation of the adaptive  milstein method to examine how the user-defined tolerance affects the  accuracy of the solution of the non-linear cycle test. using a system size  of  <dig>  <dig>  we vary the user-defined tolerance from 10- <dig> to 10- <dig> , showing  the weak mean and variance errors in figure  <dig>  while  alleviating the user from determining an accurate time step, adaptive time  stepping schemes have a higher overhead than fixed step ones and may require  more computational time. however, if the system only exhibits transient or  intermittent stiffness, then an adaptive time stepping scheme may be more  computationally efficient by using a smaller time step when the system is  stiff and a larger one when it is not.   further work in this area is anticipated.

one important characteristic of the hyjcmss method is that it converts the solution of a hybrid system governed by both master and fokker-planck equations into the solution of a system of stochastic differential equations. the theory behind the numerical solution of sdes has developed well enough that one can describe the asymptotic convergence properties, leading orders of accuracy, and numerical efficiency of a variety of numerical schemes that solve a large class of wiener process driven sdes, including the chemical langevin and differential jump equations. by testing the accuracy of the method on a small, but fully non-linear, example, we can demonstrate that the method's accuracy is fully governed by the numerical integration of the sdes and that the accuracy may be controlled with a small number of user-defined parameters, such as the time step of numerical integration or the maximum tolerance of the local error.

benchmarks
the non-linear cycle test is a toy system that demonstrates the accuracy of the hyjcmss method. however, realistic systems contain many thousands of reactions and chemical species. we use a large-scale system benchmark to test the computational efficiency of hyjcmss when simulating large biochemical networks. the large-scale system benchmark is a system of rf bi-molecular 2nd order fast/continuous reactions coupled to another set of rs bi-molecular 2nd order slow reactions. the total number of reactions and chemical species are, respectively, rf + rs and 3rf +  <dig> rs. the minimum degree of the dependency graph of the reaction propensities is always greater than ⌊rs/rf⌋ +  <dig>  making this network less sparse than most biochemical networks. we increase rf and rs and measure the computational times of a simulation of a single trajectory using the hyjcmss method with either the euler-maruyama or milstein schemes with fixed time steps and also the next reaction variant of the stochastic simulation algorithm. because the system is relatively non-stiff, we set the time step of numerical integration to  <dig>  seconds. in table  <dig>  we show the computational times when varying both rf and rs from one to  <dig>  <dig> reactions. the largest benchmark reaction network then has  <dig>  <dig> reactions and  <dig>  <dig> chemical species. it is clear that the hyjcmss method is much faster than the stochastic simulation algorithm and that, to simulate large biochemical networks with only a few fast/continuous reactions, it is highly necessary to use a hybrid stochastic method.

the computational times of a large-scale system benchmark using the fixed euler-maruyama  and milstein implementations of the hyjcmss algorithm and the next reaction variant of the stochastic simulation algorithm . nd: not determined

a complex bistable biochemical network with multiple timescales and spontaneous escape
hy3s can also speed up the simulation of complex biochemical networks that exhibit interesting stochastic phenomena. to demonstrate its capabilities, we construct a hypothetical reaction network that features commonly found biological processes and generates behavior unique to random dynamical systems. the proposed biochemical network exhibits bistable behavior with spontaneous transitions between stable states and contains multiple timescales, including fast/continuous, fast/discrete, and slow/discrete reactions whose classification change during the simulation. the reactions in the network are extracted from three different types of biological processes: regulated gene expression, protein-protein binding interaction networks, and a hypersensitive enzymatic futile cycle commonly found in signal transduction cascades. this example shows that hy3s is capable of accurately reproducing time-evolving multimodal distributions affected by disparate timescales, while consuming much less computational time. the biochemical reaction network consists of  <dig> reactions and  <dig> species and contains five coupled reaction modules:

• a protein-protein interaction network with monomers s <dig> through s <dig> each capable of binding to a protein scaffold, p. a scaffold bound to a monomer may also dimerize to another bound scaffold to form a four-count complex.

• the polymerization of s1:p2:s <dig> with itself to form both  <dig> and  <dig> 

• a futile enzyme cycle consisting of two enzymes, ef and eb, that rapidly deactivate and activate the scaffold, p.

• the schlogl reaction network which generates bistability and spontaneous transitioning in the number of molecules of ef.

• the transcriptional and translational initiation and elongation of a gene which is activated by  <dig> and produces the scaffold protein, p.

the reaction rate laws are all mass action kinetics with parameters set to physiologically possible values. the dynamical behaviour is qualitatively similar over a broad range of kinetic parameters. the full biochemical reaction network and its initial conditions and kinetic parameters are listed in table  <dig> 

the computational times of a large-scale system benchmark using the fixed euler-maruyama  and milstein implementations of the hyjcmss algorithm and the next reaction variant of the stochastic simulation algorithm . nd: not determined

we simulate  <dig>  <dig> trajectories of the biochemical network between  <dig> and  <dig> seconds using the hyjcmss algorithm with a fixed step euler-maruyama numerical integration method and a parameter set of  = . the hybrid method requires only  <dig>  seconds per trajectory while the next reaction variant of the stochastic simulation algorithm requires  <dig>  seconds per trajectory for a total speed up of  <dig> . clearly, it would be highly impractical to run  <dig>  <dig> trajectories of this system with the original method. by using hy3s, one can obtain the entire time-evolving probability distribution of the system in about  <dig> cpu hours. by using multiple processors, the actual time to produce the solution may be reduced by up to  <dig>  <dig> fold.

the dynamics of the biochemical network are both interesting and complex. starting from a single initial condition, the schlogl reaction module causes the number of molecules of enzyme ef to rapidly converge to a bimodal distribution  with peaks at around  <dig> and  <dig> molecules and also to spontaneously transition from the low to high stable states and vice versa  with a specific rate of about  <dig> e- <dig> sec- <dig> for either transition. while ef fluctuates within its low stable state, the number of active scaffold proteins is high, resulting in larger numbers of bound scaffold complexes, complexed dimers, and also complexed trimers . while ef fluctuates within its high stable state, the number of active scaffold proteins is much fewer and all scaffold-containing complexes are reduced in number. because the complexed trimer,  <dig>  activates transcriptional initiation, the expression of the gene is also bistable, including the numbers of mrna transcripts and active scaffold protein . the expression of the gene produces more active scaffold protein which results in greater numbers of scaffold-containing complexes, including the activator, and causing a general positive feedback loop. a modest amount of leaky gene expression counters some of the bistability in gene expression. trajectories of ef which undergo a spontaneous transition between stable peaks will quickly and dramatically change the number of active scaffold proteins . the main point of this example is that hy3s enables the simulation of highly complex biochemical networks in a practical amount of computational time. a realistic biochemical network will be at least as complex as this example and will contain multiple disparate timescales. hy3s can simulate these systems whereas, in a practical amount of time, the exact stochastic simulation methods can not.

discussion
hy3s, or hybrid stochastic simulation for supercomputers, enables scientists and engineers to simulate the stochastic dynamics of arbitrary homogeneous chemical and biochemical reaction networks. these models can accurately capture the intracellular dynamics of biological organisms at the single-cell level and may be used to both study natural biological systems and design synthetic ones. we have implemented our recently developed hybrid jump/continuous stochastic simulation method  <cit>   into a fully functional, robust software package, capable of simulating models of biological systems with thousands of fast/continuous or slow reactions and chemical species. we use four different stochastic numerical integrators with either fixed or adaptive time stepping and with different orders of strong accuracy. the simulation programs utilize optimizing data structures and are parallelized using mpi, enabling efficient simulations on multiple processors. multiple types of special events are included, such as cell replication and transcriptional and translation elongation, and additional ones are easily added. the simulation program code is open source and licensed under the gnu general public license . we have also created a simple, easy to use gui that allows scientists and engineers to quickly create biochemical networks, add special events, and create multi-model simulations. the netcdf data format is open, self-describing, and has apis in numerous programming languages. the apis can access the data in direct access mode, enabling fast read and write access to hyperslabs of data. netcdf files may be read and written in popular scientific applications, such as matlab, allowing complex biochemical networks to be constructed and solution data to be efficiently analyzed and plotted. overall, hy3s provides a high level of research productivity throughout the entire process of model composition, simulation, and analysis.

in the first public version of hy3s, we have concentrated on simulating homogeneous biological systems with many fast/continuous and slow/discrete reactions. however, much of the theory behind the solution of a coupled jump/continuous markov process may also be applied to heterogeneous systems. in addition, we and others have recently developed an 'equation-free' probabilistic steady state or partial equilibrium approximation that speeds up the simulation of arbitrary biochemical networks with 'fast/discrete' and 'slow/discrete' reactions  <cit> . a reaction is fast/discrete when it frequently occurs, but may not be validly approximated as a continuous markov process. the method dynamically determines when the effects of a subset of fast/discrete reactions have converged to a quasi-stationary distribution, samples from the underlying distribution, and uses those samples to compute the time of the next slow/discrete reaction along with the state of the system at which it occurs. the method may be used in conjunction with hyjcmss to treat homogeneous systems with many slow/discrete, fast/discrete, and fast/continuous reactions. robust implementations of these and other advanced hybrid stochastic methods will be added to future versions of hy3s.

open source possibilities
by releasing the source code of hy3s under the gpl, we are offering the computational biology community the ability to copy, modify, and distribute the hy3s source code with one main restriction: all distributed or published modifications of the source code must also contain the source code and follow the other restrictions of the gpl. we are releasing the code in this fashion for a few reasons. most research projects have questions that a pre-built software package may not specifically answer. by modifying the source code to fit one's needs, one can tailor the program for a particular research project. we have designed the software to be as modular as possible to allow the easier reuse of code segments. for example, each simulation algorithm is encapsulated as a propagator, or a single subroutine that is given the current state of the system and returns the state of the system at some specified future time. one can greatly modify the program without touching the innards of the simulation algorithm. in addition, the simulation algorithms themselves are structured to allow the easy insertion of additional rate laws and special events. instructions for adding additional special events and rate laws are included.

perhaps the best reason for opening up the source code is that the field of stochastic chemical kinetics is still an immature one. new algorithms are frequently published and new techniques continue to be explored. by building on top of hy3s, one can accelerate the pace of algorithm development and implementation while making newly developed methods useful to the general public. newly developed algorithms can be fairly compared to current ones and the ones with the highest merit can be immediately used by the community. participation and collaboration are always welcome. in this way, the software itself will quickly improve and mature to the highest standards.

CONCLUSIONS
hy3s allows scientists and engineers to compute the stochastic dynamics of large, realistic chemical or biochemical networks with thousands of reactions and chemical species. by using a recently developed hybrid jump/continuous markov stochastic simulator , an accurate solution is obtained using much less computational time, as compared to the next reaction variant of the stochastic simulation algorithm. the software is also parallelized with mpi with near 100% efficiency, enabling high research productivity on relatively inexpensive linux computing clusters, and contains numerous useful features to more accurately model biological systems.

availability and requirements
project name: hy3s, hybrid stochastic simulation for supercomputers

project homepage: 

operating system: platform-independent 

programming languages: fortran95

other requirements: netcdf v <dig> . <dig> or higher, 

license: gnu gpl

any restrictions on use by non-academics: none

authors' contributions
h.s wrote the manuscript and developed the initial source code. h.s and v.s expanded the source code to include the milstein and adaptive time step schemes. y.k conceived of the study, coordinated, and helped draft the manuscript. all authors read and approve of the final manuscript.

links


