BACKGROUND
ensemble modeling is a promising approach for obtaining robust predictions and coarse grained population behavior in deterministic mathematical models. it is often not possible to uniquely identify all the parameters in biochemical models, even when given extensive training data  <cit> . thus, despite significant advances in standardizing biochemical model identification  <cit> , the problem of estimating model parameters from experimental data remains challenging. ensemble approaches address parameter uncertainty in systems biology and other fields like weather prediction  by using parameter families instead of single best-fit parameter sets. parameter families can be selected based upon simulation error, along with other criteria such as diversity or steady-state performance. simulations using parameter ensembles can estimate confidence intervals on model variables, and robustly constrain model predictions, despite having many poorly constrained parameters  <cit> . there are many techniques to generate parameter ensembles. battogtokh et al., brown et al., and later tasseff et al. generated experimentally constrained parameter ensembles using a metropolis-type random walk  <cit> . liao and coworkers developed methods to generate ensembles that all approach the same steady-state, for example one determined by fluxomics measurements  <cit> . they have used this approach for model reduction  <cit> , strain engineering  <cit>  and to study the robustness of non-native pathways and network failure  <cit> . maranas and coworkers have also applied this method to develop a comprehensive kinetic model of bacterial central carbon metabolism, including mutant data  <cit> . we and others have used ensemble approaches, generated using both sampling and optimization techniques, that have robustly simulated a wide variety of signal transduction processes , neutrophil trafficking in sepsis  <cit> , patient specific coagulation behavior  <cit> , uncertainty quantification in metabolic kinetic models  <cit>  and to capture cell to cell variation  <cit> . further, ensemble approaches have been used in synthetic biology to sample possible biocircuit configurations  <cit> . thus, ensemble approaches are widely used to robustly simulate a variety of biochemical systems.

identification of biochemical models requires significant training data perhaps taken from diverse sources. these real-world data sets often contain intrinsic conflicts resulting from, for example, the use of different cell lines, different measurement technologies, different reagent vendors or lots, uncontrollable experimental artifacts or general cross laboratory variability. parameter ensembles that optimally balance these inherent conflicts lead to more robust model performance. multiobjective optimization is an ensemble generation technique that naturally balances conflicts in noisy training data  <cit> . multiobjective optimization has been used to identify signal transduction models  <cit> , for the design of synthetic circuits  <cit> , to design the folding behaviors of novel rnas  <cit> , to design bioprocesses  <cit> , and to understand bacterial adaptation  <cit> . thus, it is a widely used approach for a variety of biochemical applications. previously, we developed the pareto optimal ensemble technique  algorithm to address the challenge of competing or conflicting training objectives. poets, which integrates simulated annealing  and multiobjective optimization through the notion of pareto rank, estimates parameter ensembles which optimally trade-off between competing  experimental objectives  <cit> . however, the previous implementation of poets, in the octave programming language  <cit> , suffered from poor performance and was not configurable. for example, octave-poets does not accommodate user definable objective functions, bounds and problem constraints, cooling schedules, different variable types e.g., a mixture of binary and continuous design variables or custom diversity generation routines. octave-poets was also not well integrated into a package or source code management  system. thus, upgrades to the approach containing new features, or bug fixes were not centrally managed.

implementation
in this software note, we present an open-source implementation of the pareto optimal ensemble technique in the julia programming language . jupoets takes advantage of the unique features of julia to address many of the shortcomings of the previous implementation. julia is a cross-platform, high-performance programming language for technical computing that has performance comparable to c but with syntax similar to matlab/octave and python  <cit> . julia also offers a sophisticated compiler, distributed parallel execution, numerical accuracy, and an extensive function library. further, the architecture of jupoets takes advantage of the first-class function type in julia allowing user definable behavior for all key aspects of the algorithm, including objective functions, custom diversity generation logic, linear/non-linear parameter constraints  as well as custom cooling schedules. julia’s ability to naturally call other languages such as python or c also allows jupoets to be used with models implemented in a variety of languages across many platforms. additionally, julia offers a built-in package manager which is directly integrated with github, a popular web-based git repository hosting service offering distributed revision control and source code management. thus, jupoets can be adapted to many problem types, including mixed binary and continuous variable types, bilevel problems and constrained problems without altering the base algorithm, as was required in the previous poets implementation.

jupoets optimization problem formulation
jupoets solves the k−dimensional constrained multiobjective optimization problem: 
  <dig> minpo1x,p⋮okx,p 


subject to the model equations and constraints: 
 ft,x,x˙,u,p=0g1t,x,u,p≥0⋮gct,x,u,p≥ <dig> 


and parameter bound constraints: 
 ℒ≤p≤u 


the quantity o
j denotes the j
th objective function , typically the sum of squared errors for the j
th data set for biochemical modeling applications. the terms ft,x,x˙,u,p denote the system of model equations  where p denotes the decision variable vector e.g., unknown model parameters . in typical biochemical modeling applications, the model equations f are a system of continuous real-valued non-linear differential equations that comprise a kinetic model, but other types of models e.g., stoichiometric models are also common. the quantity t denotes time, x denotes the model state , and u denotes an input vector. the decision variables  can be subject to bounds constraints, where ℒ and u denote the lower and upper bounds, respectively as well as c problem specific constraints git,x,u,p,i= <dig> …,c. the decision variables p are typically real-valued kinetic constants, or metabolic fluxes in the case of stoichiometric models. however, other variables types e.g., binary or categorical decision variables can also be accommodated.





jupoets integrates simulated annealing   <cit>  with pareto ranking to estimate decision variables on or near the optimal tradeoff surface between competing objectives . a tradeoff surface defines the best possible performance for every conflicting objective, such that an increase in the performance of one objective does not decrease the performance of at least one other objective. pareto rank is a scalar measure of distance away from the optimal tradeoff surface . thus, the central idea underlying poets is a mapping between the value of the objective vector evaluated at p
i+ <dig>  and the scalar pareto rank . traditional simulated annealing uses a scalar performance value e.g., simulation error to make a probabilistic decision to keep or reject a set of decision variables; decision variables with better performance are always accepted, while those with worse performance are sometimes accepted depending upon a parameter called the temperature. on the other hand, jupoets makes this same decision using the pareto rank instead of a single performance objective. the problem of estimating biochemical model parameters from experimental data is typically posed as an error minimization problem over continuous real-valued decision variables  subject to the model equations. a parameter set p
i+ <dig> lies along the optimal tradeoff surface if no other parameter guess leads to decreased error for every objective. jupoets calculates the performance of a candidate parameter set p
i+ <dig> by calling the user defined objective function; objective takes a parameter set as an input, evaluates the model equations, and using this solution, returns the k× <dig> objective vector. candidate parameter sets are generated by the user supplied neighbor function; the default implementation of neighbor is a random perturbation, however other perturbation logic can be implemented by the user. the error vector associated with p
i+ <dig> is ranked using the builtin pareto rank function, by comparing the error at iteration i+ <dig> to the error archive oi . parameter sets on or near the optimal trade-off surface between the objectives have a rank equal to  <dig> . these rank zero parameter sets define the pareto optimal group for the ensemble, wherein pareto optimality is defined as a parameter set not being dominated by any other sets within the ensemble. sets with increasing non-zero rank are progressively further away from the optimal trade-off surface. thus, a parameter set with a rank = <dig> is better in a trade-off sense than rank > <dig>  we implemented the fonseca and fleming ranking scheme in the builtin rank function  <cit> : 
  <dig> rankoi+1pi+1∣oi=r 
fig.  <dig> schematic of multiobjective parameter mapping. the performance of any given parameter set is mapped into an objective space using a ranking function which quantifies the quality of the parameters. the distance away from the optimal tradeoff surface is quantified using the pareto ranking scheme of fonseca and fleming in jupoets




where rank r is the number of parameter sets that dominate  parameter set p
i+ <dig>  and oi+1pi+ <dig> denotes the objective vector evaluated at p
i+ <dig>  we used the pareto rank to inform the sa calculation. the parameter set p
i+ <dig> was accepted or rejected by the sa at each iteration, by calculating an acceptance probability ppi+1: 
  <dig> p≡exp−rankoi+1pi+1∣oi/t 


where t is the simulated annealing temperature; the temperature provides control over how strictly decreasing pareto rank is enforced. as rankoi+1pi+1∣oi→ <dig>  the acceptance probability moves toward one, ensuring that we explore parameter sets along the pareto surface. occasionally,  a parameter set with a high pareto rank is accepted by the sa allowing a more diverse search of the parameter space. however, as t is reduced as a function of iteration count , the probability of accepting a high-rank set decreases. parameter sets could also be accepted by the sa but n
o
t permanently archived in si, where si is the solution archive. only parameter sets with rank less than or equal to a threshold  are included in si, where the archive is re-ranked and filtered after accepting every new parameter set. parameter bounds were implemented in the neighbor function as box constraints, while problem specific constraints were implemented in objective using a penalty method: 
  <dig> oi+λ∑j=1cmin <dig> gjt,x,u,pi= <dig> …,k 


where λ denotes the penalty parameter . however, because both the neighbor and objective functions are user defined, different constraint implementations are easily defined.

to use jupoets, the user specifies the neighbor, acceptance, cooling and objective functions along with an initial decision variable guess. default implementations of the neighbor, acceptance and cooling functions can be used directly, or they can be overridden by user defined logic. however, the user must provide an implementation of the objective function and provide an initial decision variable guess. lastly, if the user is operating jupoets in hybrid mode, then a refinement function pointer must also be specified. hybrid mode temporarily switches the search from a multiobjective to a single objective problem, where the sum of the objective functions can be used to update the best  parameter guess. the specific hybrid mode search logic is up to the user; by default hybrid mode is off, and the default refinement implementation is simply a pass through function. however, we have shown previously that poets operated in hybrid mode  had better performance that poets alone  <cit> . thus, hybrid mode is generally recommended for most applications. in addition, there are several user configurable parameters that can be adjusted to control the performance of jupoets: maximum_number_of_iterations controls the number of iterations per temperature ; rank_cutoff controls the upper rank bound on the solution archive ; temperature_min controls the minimum temperature after which jupoets returns the error and solution archives ; show_trace controls the level of output shown to the user . after the completion of the run, jupoets returns the parameter solution archive s, objective archive o and rank archive r. the parameter solution archive s contains is an d×a array, where a denotes the number of solutions in the archive when jupoets terminated. on the other hand, the objective archive o is an k×a array containing the performance values for each objective corresponding the columns of s. lastly, jupoets returns the rank archive r which is an a× <dig> array of pareto ranks corresponding to the columns of s. one technical note, if jupoets is run from multiple starting locations, and the archives from each of these runs is combined into a single collective archive, the combined parameter rank archive may become invalid. in these cases, it is required to re-rank the parameter sets using the built-in rank function to produce a collective parameter ranking.

RESULTS
jupoets identified optimal or nearly optimal solutions significantly faster than octave-poets for a suite of multiobjective algebraic test problems . the algebraic test problems were constrained non-linear functions with bound constraints and additional non-linear constraints on the decision variables in one case. the problems had up to three-dimensional continuous real-valued decision vectors, and each case had two objective functions. the wall-clock time for jupoets and octave-poets was measured for  <dig> independent trials for each of the test problems. the same cooling, neighbor, acceptance, and objective logic was employed between the implementations, and all other parameters were held constant. for each test function, the search domain was partitioned into  <dig> segments, where an initial parameter guess was drawn from each partition. the number of search steps for each temperate was i =  <dig> for all cases, and the cooling parameter was α =  <dig> . on average, jupoets identified optimal or near optimal solutions for the suite of test problems six-fold faster  than octave-poets . jupoets produced the characteristic tradeoff curves for each test problem, given both decision variable bound and problem constraints . thus, jupoets estimated an ensemble of solutions to constrained multiobjective algebraic test problems significantly faster than the current octave implementation. next, we tested jupoets on a proof-of-concept biochemical model identification problem.
fig.  <dig> the performance of jupoets on the multi-objective test suite. the execution time  for jupoets and poets implemented in octave was measured for  <dig> independent trials for the suite of test problems. the number of steps per temperature i =  <dig>  and the cooling parameter α =  <dig>  for all cases. the problem domain was partitioned into  <dig> equal segments, an initial guess was drawn from each segment. for each of the test functions, jupoets estimated solutions on  or near  the optimal tradeoff surface, subject to bounds and problem constraints


fig.  <dig> representative jupoets solutions for problems in the multi-objective test suite. the number of steps per temperature i =  <dig>  and the cooling parameter α =  <dig>  for all cases. the problem domain was partitioned into  <dig> equal segments, an initial guess was drawn from each segment. for each of the test functions, jupoets estimated solutions on  or near  the optimal tradeoff surface, subject to bounds and problem constraints


o
1=x
2
o
2=2
o
1=4x
2+4y
2
g
1=2+y
o
2=2+2
g
o1=1−exp−∑i=1nxi−1n2
o2=1−exp−∑i=1nxi+1n2



jupoets estimated an ensemble of biochemical model parameters that were consistent with the mean of synthetic training data . four synthetic training data sets were generated from a prototypical biochemical network consisting of  <dig> metabolites and  <dig> reactions . we considered a common case in which the same extracellular measurements of a
e,b
e,c
e and cellmass were made on four hypothetical cell types, each having the same biological connectivity but different performance. network dynamics were modeled using the hybrid cybernetic model with elementary modes  approach of ramkrishna and coworkers  <cit> . in the hcm approach, metabolic networks are first decomposed into a set of elementary modes  . dynamic combinations of elementary modes are then used to characterize network behavior. each elementary mode is catalyzed by a pseudo enzyme; thus, each mode has both kinetic and enzyme synthesis parameters. the proof of concept network generated  <dig> ems, resulting in  <dig> model parameters . the synthetic training data was generated by randomly varying these parameters.
fig.  <dig> proof of concept biochemical network study. inset right: prototypical biochemical network with six metabolites and seven reactions modeled using the hybrid cybernetic approach . intracellular cellmass precursors a,b, and c are balanced  while the extracellular metabolites a
e,b
e, and c
e are dynamic. the oval denotes the cell boundary, q
j is the jth flux across the boundary, and v
k denotes the kth intracellular flux. four data sets  were generated by varying the kinetic constants for each biochemical mode. each data set was a single objective in the jupoets procedure. a ensemble simulation of extracellular substrate a
e and cellmass versus time. b ensemble simulation of extracellular substrate b
e and c
e versus time. the gray region denotes the 95% confidence estimate of the mean ensemble simulation. the data points denote mean synthetic measurements, while the error bars denote the 95% confidence estimate of the measurement computed over the four training data sets. c trade-off plots between the four training objectives. the quantity o
j denotes the jth training objective. each point represents a member of the parameter ensemble, where gray denotes rank  <dig> sets, while black denotes rank  <dig> sets. ensembles were generated using poets without employing local refinement




the general form of the biochemical test problem was given by: 
  <dig> minpo <dig> …,ok 


subject to model and bounds constraints. we considered four training data sets , each of which contained time-series measurements of a
e,b
e,c
e and cellmass. each objective oj,j= <dig> …,k quantified the squared difference between the simulated  and measured extracellular species abundance  in the j
th data set: 
  <dig> oj=∑i∑τxi−yi2j= <dig> …,k 


where, i denotes the species index and τ denotes the time index. the abundance of extracellular species i , the pseudo enzyme e
l , and cellmass were governed by the model equations: 
 dxidt=∑j=1r∑l=1ℒσijzjlqle,p,xci= <dig> …,ℳdeldt=αl+relp,xul−βl+rgell= <dig> …,ℒdcdt=rgc 


where r and ℳ denote the number of reactions and extracellular species in the model and ℒ denotes the number of elementary modes. the quantity σ
ij denotes the stoichiometric coefficient for species i in reaction j and z
jl denotes the normalized flux for reaction j in mode l. if σ
ij> <dig>  species i is produced by reaction j; if σ
ij< <dig>  species i is consumed by reaction j; if σ
ij= <dig>  species i is not connected with reaction j. extracellular species, cellmass and pseudo-enzyme were subject to the initial conditions x=x
o, c=c
o and e
l= <dig> , respectively. the term q
l denotes the specific uptake/secretion rate for mode l where e denotes the pseudo enzyme vector, p denotes the unknown kinetic parameter vector , x denotes the extracellular species vector, and c denotes the cell mass; q
l is the product of a kinetic term  and a control variable governing enzyme activity. flux through each mode was catalyzed by a pseudo enzyme e
l, synthesized at the regulated specific rate r
e,l, and constitutively at the rate α
l. the term u
l denotes the cybernetic variable controlling the synthesis of enzyme l. the term β
l denotes the rate constant governing non-specific enzyme degradation, and r
g denotes the specific growth rate through all modes. the specific uptake/secretion rates and the specific rate of enzyme synthesis were modeled using saturation kinetics. the specific growth rate was given by: 
 rg=∑l=1ℒzμlqle,p,x  where z
μl denotes the growth flux μ through mode l. the control variables u
l and v
l, which control the synthesis and activity of each enzyme respectively, were given by: 
  <dig> ul=zslq¯l∑l=1ℒzslq¯l 


and 
  <dig> vl=zslq¯lmaxl= <dig> …,ℒzslq¯l 


where z
sl denotes the uptake flux of substrate s through mode l. each unknown kinetic parameter was continuous and real-valued, and subject to bounds constraints: ℒ≤p≤u.

jupoets produced an ensemble of approximately dims≃  <dig>  parameter sets that captured the mean of the measured data sets for extracellular metabolites and cellmass . jupoets minimized the difference between the simulated and measured values for extracellular metabolites a e, b e, c e and cellmass, where the residual for each data set was treated as a single objective . the 95% confidence estimate produced by the ensemble was consistent with the mean of the measured data, despite having significant uncertainty in the training data. jupoets produced a consensus estimate of the synthetic data by calculating optimal trade-offs between the training data sets . multiple trade-off fronts were visible in the objective plots, for example between data set  <dig>  and data set  <dig> . thus, without a multiobjective approach, it would be challenging to capture these data sets as fitting one leads to decreased performance on the other. however, the ensemble contained parameter sets that described each data set independently . thus, jupoets produced an ensemble of parameters that gave the mean of the training data for conflicting data sets, while simultaneously estimating parameter sets that performed well on each individual objective function.
fig.  <dig> experiment to experiment variation captured by the ensemble. cellmass measurements  versus time for experiment  <dig> and  <dig> were compared with ensemble simulations. the full ensemble was sorted by simultaneously selecting the top 25% of solutions for each objective with rank ≤  <dig>  the best fit solution for each objective  ± 1-standard deviation  for experiment  <dig> and  <dig> brackets the training data despite significant differences the training values between the two data sets




currently, jupoets does not consider parameter identifiability when constructing parameter ensembles. although jupoets produces parameter estimates that give model performance similar to the training data, we do not have strict statistical confidence that the true parameter values are contained within the ensemble. however, despite this, ensembles produced by poets can be predictive  <cit> . thus, jupoets produces a collection of parameters that are constrained by the performance of the model, and not by specific hypotheses regarding the individual values of the raw model parameters. of course, knowledge of specific parameter values, or the relationship between parameter combinations, can be used to inform the search through either bounds or problem specific constraints .

CONCLUSIONS
in this software note, we presented jupoets, a multiobjective technique to estimate parameter ensembles in the julia programming language. jupoets is open source, and available for download under an mit license from the jupoets github repository at https://github.com/varnerlab/poets.jl. we demonstrated jupoets on a suite of algebraic test problems, and a proof-of-concept ode based biochemical model. while jupoets outperformed  than the previous octave implementation, there are several areas that could be explored further. first, jupoets should be compared with other multiobjective evolutionary algorithms  to determine its relative performance on test and real world problems. many evolutionary approaches e.g., the non-dominated sorting genetic algorithm  family of algorithms, have been adapted to solve multiobjective problems  <cit> . however, since there is a lack of open source julia implementations of these alternative approaches, we did not benchmark the relative performance of jupoets in this note. one advantage that jupoets may have when compared to a strictly evolutionary approaches, is the inclusion of a local refinement step , which temporarily reduces the problem to a single objective formulation. previously, poets run in hybrid mode led to better convergence on a proof-of-concept signal transduction model compared to the same approach without the hybrid refinement step  <cit> . other hybrid multiobjective methods have also been shown to be more efficient than evolutionary approaches alone, for a variety of biochemical optimization problems  <cit> . thus, there are several different algorithms that we can use to benchmark, and improve the performance of jupoets, after we implement them in julia. another strategy to improve the performance of jupoets is to reduce the number  of function evaluations that are required to obtain optimal or near optimal solutions. for example, in many real world parameter estimation problems, the bulk of the execution time is spent evaluating the objective functions. one strategy to improve jupoets performance could be to optimize surrogates  <cit> , while another would be parallel execution of the objective functions. currently, jupoets serially evaluates the objective function vector. however, parallel evaluation of the objective functions e.g., using the parallel julia macro or other techniques, could be implemented without significantly changing the jupoets run loop. taken together, jupoets demonstrated improved flexibility, and performance over poets in parameter identification and ensemble generation for multiple objectives. jupoets has the potential for widespread use due to the flexibility of the implementation, and the high level syntax and distribution tools native to the julia programming language.

availability and requirements
jupoets is open source, available under an mit software license. the jupoets source code is freely available from the jupoets github repository at https://github.com/varnerlab/poets.jl. all samples used in this study are included in the sample/biochemical and sample/test_functions subdirectories of the jupoets github repository. jupoets can be run on all common.operating system environments: .

