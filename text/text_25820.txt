BACKGROUND
recent developments in biosciences have created a dramatic change from the analysis of a few genes to large gene lists. these lists are usually selected at the genomic level by criteria such as activity in a stress treatment  <cit> , importance to cell survival in a specific growth condition  <cit> , or as a result of clustering genes by expression profiles  <cit> . as current high throughput methods produce a vast amount of data as gene lists, the subsequent analysis tends to be a bottleneck due the size of the data set and the high probability of false positive genes among the lists.

one solution to analyse a gene list is to draw information either from the existing literature or from the databases representing whole genome  <cit>  or proteome annotations  <cit> , and then using these to guide the analysis. most of these databases simplify the analysis by classifying genes to the biological categories or classes that present their function, localization, or partnership in some protein complex. a further step is to estimate the statistical significance of associations between the classes and genes of the obtained list. several applications have been recently reported for such analysis  <cit> . most of these applications compare the frequency of gene classes in the user supplied gene list, obtained by various criteria, to the remaining genes that did not fulfill the criteria. the latter often includes the rest of the genes from the whole genome. the usual outcome from these methods is a sorted list of biological classes considered important. these methods have been beneficial to data analysis by guiding the process towards the most important features in the gene list  <cit> . in addition, the observation of multiple genes from the same functional class increases confidence in results obtained from high throughput methods.

while these methods are useful, several weaknesses are associated with this approach. a gene list can have a heterogeneous structure with multiple dissimilar gene groups such as stress response, a specific metabolic pathway, and protein degradation. the basic statistics used by the previously mentioned methods are often insufficient to reveal this kind of heterogeneity from the associated functional classes. rather, they have a tendency to be biased toward the gene sub-group associated with the most over-represented functional classes within the analyzed list of genes. this overwhelms many important, but less over-represented, classes that are associated with the rest of the genes in the list. therefore, it could be hypothesized that there exists other interesting biological functions among the genes that are not members of the best scoring classes. as such, the existing methods do not address this question and thus there is a need for an approach that would concentrate on the possible heterogeneity in the gene list. in the current work, we propose the clustering of a gene list for finding gene groups that differ in functional class annotations.

RESULTS
principle of the method
our method takes, as input, the user given gene list chosen by some selection criteria. the selected list is referred to as a sample gene list, and the gene list that did not meet the criteria is referred to as a reference gene list. the aim is then clustering the sample gene list for finding gene groups with different functional class annotations. the clustering is solely based on the gene associations with functional classes obtained from gene ontology  database  <cit> , and the measurements like gene expression level or sequence similarity are not used. as a clustering method, we use non-negative matrix factorization   <cit>  to create a k-means like partition. the well known weakness with this type of clustering approach is the requirement to select the number of clusters and the initialization for the algorithm. we circumvent this weakness by using a non-nested hierarchical clustering scheme, which allows parallel visualization of several different clustering results. here, a gene list is repeatedly divided into a growing number of clusters by clustering from random starting initializations. the different clustering results are presented in consecutive levels ordered with the number of clusters, with the first level presenting the gene list without any clustering. strongly correlating clusters between the consecutive levels are connected by edges forming a non-nested hierarchy . the output graph highlights the clusters that stay similar through the different clustering levels despite the varying number of divisions and different random starting initializations. the resulting visualization can be used either for obtaining suitable grouping for a gene list, or identifying individual clusters that are of interest.

in the non-nested clustering hierarchy, the cluster contents are described with the most representative functional classes. for this, a combination of three different measures was used to show over-represented classes within each cluster. the measures are positive/negative signed ten based logarithmic transforms  <cit>  of p-values calculated with fisher's test  <cit> , which compares class frequencies between two sets of genes. the first measure, "original log" ), makes a comparison between the whole user given sample and reference gene lists. it reports class over-representation that was observed before any clustering. because of the wide usage of this measure reported in the literature  <cit> , it is suitable for method comparison. as a comparison, the second measure, "sample log" ), concentrates fully on clustered sample gene list by comparing a single cluster against the other genes in the sample list. it highlights the classes that contributed most to the formation of the cluster. the third measure, "complete log" ), compares a single cluster against the other genes of the sample gene list and reference. it takes into account both the contribution to the formation of a cluster and the over-representation in the sample list before clustering, and thus we use it for reporting the contents of a cluster. c.log is partly dependent on the preceding clustering, and thus can report some classes that are not over-represented in the whole user given sample gene list, which we are aiming to analyze. therefore, such hits are filtered by excluding the classes with weak o.log from the report. similarly, classes that have not contributed to the formation of the analyzed cluster are removed by discarding the classes that do not show even slight over-representation with s.log. as a result of filtering, the remaining classes are over-represented in both the analyzed cluster and in the original sample list. in this description, only o.log gives statistically analyzable results because c.log and s.log are both based on the same data with the preceding clustering. nevertheless, the latter two are suitable for highlighting the classes that are over-represented within the clusters. a more detailed description of the non-nested clustering scheme is given in the methods section.

software implementation
in order to make the method applicable for others, we have developed an end-user program called generator  for the windows 2000/xp environments. it takes, as input, the sample and reference lists of genes that can be comprised of gene names or identifiers supported by go database. the list of available species and allowable naming systems are described more in generator user manual  <cit>  and in go web site  <cit> . alternatively, generator can be used to analyze existing binary data matrices like in-house created functional gene classifications or other similar binary data analysis problems consisting of sample and reference groups. the first outcome from the program is a non-nested hierarchical clustering tree, which shows the discovered gene sub-groups from the user given sample gene list. the content of each cluster is described by the two most over-represented classes. a more detailed analysis is also possible for each cluster by viewing the sorted list of over-represented classes or by viewing the clustered genes. the program can create multiple cluster trees, produce statistical evaluations for clustering divisions and single clusters, and provide flexibility in changing the parameters for clustering execution and visualizations. results can be saved as graph figures and tab-delimited files describing different gene groups or class contents within them. these functions are further described in the program manual. generator will be updated twice in a year including the go database within it and is freely available  <cit> .

analysis with generator
gene list from yeast under h2o <dig> stress
we have analyzed the data obtained from growing yeast deletion strains during oxidative stress  <cit> . yeast deletion strains have deletions in genes not needed in normal growth conditions . the research aims to find new genes and functionalities that are important for the cells to survive and grow in the presence of oxidative stress. we limit the analysis to the gene list obtained from hydrogen peroxide stress . this was used as a sample list for generator and it included  <dig> genes of which  <dig> were recognized by the go database. the remaining  <dig> non-essential yeast genes were used as a reference list of which  <dig> were recognized by the database. the use of a whole genome as a reference here might cause some error in the results as it is natural to assume that different functional groups have different proportions of non-essential genes. the principal observation when analyzing the results as one group in the original article is the clear association with mitochondrion  <cit> .

clustering was done with  <dig> to  <dig> groups. in the first step the obtained clusters were analyzed against the other clusters using s.log values to determine which functional classes contributed most to the formation of each cluster. the obtained graphical view is shown in figure 1a. the figure shows a cluster of ribosome genes that forms the clearest separate group  and remains although the number of clusters changes from  <dig> to  <dig>  the strong link between the different clustering results  highlights this. similarly, a cluster of genes with rna associated function  is clearly separated and is shown on several levels. also, a small cluster of 'mitochondrial inner membrane' genes , a cluster of genes with unknown function , and a cluster associated with 'transcription regulation' and 'nucleus'  can be seen. all of these five clusters stay similar over many levels of the visualization despite the changing number of clusters and different random starting points. the whole cluster tree step was also replicated four times, each showing similar results. these replications are detailed below.

the previous information obtained by s.log explains the clustering, but it does little to help understand the original sample list. this is due to the exclusion of the reference list from the analysis. for example, the previous results do not provide emphasis on mitochondrial functions although it is the most significant theme when analyzing the data as one group . figure 1a also presents 'molecular function unknown' class, although it is under-represented in the original sample list. therefore, the second step of the analysis is to take the reference gene list into account. here, classes are sorted with c.log values and o.log and s.log are used as cut-offs to remove non-relevant information. the rationale of using the cut-offs and the purpose of the different values is discussed more in the methods . this is also the default view of generator. the resulting graph is presented in figure 1b. now the obtained view is different showing 'mitochondrial ribosome' cluster , 'trna ligase' cluster , 'mitochondrial inner membrane' cluster  and 'transcription regulation' cluster  and a 'mitochondrial genome maintenance' cluster . the clusters are the same as the ones shown in the figure 1a but now each one of the clusters shows the functional classes, over-represented in the original sample list, that are associated with the clustered genes. the over-represented classes for clustering with  <dig> clusters from figure  <dig> are shown in table  <dig>  in order to see how robust the results are, the non-nested hierarchical clustering was replicated four times. the replications are in figure  <dig> and show that similar clusters can be obtained with each.

analysis of the results in figures  <dig> and  <dig>  shows that within the group of genes that first seem homogeneous, there are sub-groups differently associated with the mitochondrial functionality. the strongest feature in the obtained results is the group of mitochondrial ribosome clusters that stays similar whether clustering from  <dig> to  <dig> clusters. analysis of this cluster actually reveals that there are two genes  that are reported as hypothetical mitochondrial ribosome proteins. the fact that the mitochondrial ribosome proteins are strongly over-represented in the dataset support the notion that they are mitochondrial ribosomal proteins.

one small group, not mentioned in the original analysis  <cit> , is the group of trna ligases . although this group only includes  <dig> members, its o.log was  <dig>  making the over-representation significant. a more detailed analysis reveals that the genes in question are mitochondrion associated trna ligases and one of them is a hypothetical mitochondrial trna ligase. again its importance for the growth of yeast cells in oxidative stress further confirms its association with mitochondrial function. the rank of these ligase associated categories starts at  <dig> in the sorted class list for the original sample gene list  and therefore this group can go easily unnoticed if the sample list is analyzed without clustering. the rest of the cluster ii  includes proteins that link to rna processing and to translation, for example, nam <dig>  two mitochondrial elongation factors, and ydr194c.

cluster v shows 'mitochondrion organization' and 'genome maintenance'   <dig>  and  <dig> ) but the analysis of the cluster content shows no clear common theme. instead, most of the genes have no known function, and therefore this cluster does not seem to contribute to the analysis. indeed the unknown function was associated to this cluster in figure 1a. a separate cluster of unknown genes is an expected behavior for our method as these genes have highly different go classification profiles from the known genes. we have also observed it regularly with other datasets. still, this cluster was able to highlight the small group of genes associated with mitochondrion genome maintenance.

cluster iv shows nucleus-associated functionalities . when the actual cluster content is analyzed, the cluster includes: rna polymerase ii holoenzymes, transcription factors, and transcription regulators. this cluster of genes was unexpected and seems to show a link from nucleus driven functionalities to mitochondrial functionalities. clusters ii and iv show nicely mitochondrion linked functions elsewhere in the cell, but at the same time these groups are harder to detect when analyzing the data as one group . in summary, generator has shown that within the mitochondrion associated gene list, the main members are mitochondrion ribosomal proteins, mitochondrion membrane genes, trna ligases, unknown genes, and genes associated with transcription regulation.

gene list from drug treated yeast
another dataset that was analyzed includes the gene expression differences in yeast during itraconanzole treatment, a drug known to affect sterol biosynthesis and normal growth  <cit> . both up and down regulated genes were used for the analysis. these contained  <dig> genes of which  <dig> were recognized by the generator go database. the remaining  <dig> non-regulated yeast genes constituted the reference list of which  <dig> were recognized by our database. when the obtained gene list is analyzed normally with the sorted class list, the most significant feature observed is the massive over-representation of the 'aminoacid biosynthesis' and related functional classes .

similar to the previous analysis, two steps were used and the classes that contributed most to the clustering were monitored first. the results show the 'carboxylic acid biosynthesis' associated cluster  a cluster associated with 'cellular process' class ; a 'macromolecule biosynthesis' associated cluster ; and a cluster associated with unknown functionality . with a larger number of clusters, 'nucleobase metabolism' and 'transcription' associated cluster  can be seen.

when the clustering view is changed to show the over-representation reported by c.log , the previous clusters obtain different annotations . this analysis step was again repeated four times to see how similar the results remained . cluster i, that showed in fig. 3a carboxylic acid biosynthesis, is now associated with amino acid and carboxylic acid biosynthesis. it forms the most stable cluster and it is seen regularly on several clustering levels also in the replications. cluster ii  is now associated with steroid biosynthesis. genes in the cluster represent sterol biosynthesis associated functions and other macromolecule biosynthesis functions . steroid synthesis is a known target of the drug and that it is now nicely separated from other functionalities that are likely more secondary responses to the drug. third, a regularly seen cluster is one enriching the plasma membrane and cell wall associated functionalities . the genes in this cluster show many membrane associated functions, like transporting activities. unexpectedly, another cluster, associated with cell wall  can be regularly observed. a detailed analysis of these clusters still reveals that they are different. cluster iii is associated strongly with 'plasma membrane' and 'cell wall'. the other cell wall cluster  is more connected to unknown cellular component than to cell wall and the connection to cell wall is also very weak. even a slight raise of the cut-off for s.log would filter this link. a more detailed analysis of the cluster iv reveals that  <dig> out of the  <dig> genes in the cluster have biological process unknown. moreover, molecular function is unknown for  <dig> of these genes. therefore this cluster does not contribute to the analysis of the gene list. cluster v does not seem as stable as the earlier clusters. still, it is observed in most of the replications . it groups together genes associated with nucleobase metabolism and transcription. detailed analysis shows transcription factors associated with regulation of transcription from the pol ii promoter. among these genes, some of them are reported to be important for drug resistance  and to stress response  and to two associated with copper uptake . in summary, we observed with generator an amino acid biosynthesis associated group, steroid and lipid biosynthesis associated group, a group of unknown genes, and genes associated to membrane and transport.

comparison with competing methods
sorted class list
generator was also compared to existing methods. one of the simplest ways of analyzing a gene list is to take it as one single group, analyze how over-represented different classes are, and to report the results as a sorted list. sorting is based on the p-values calculated for the observed over-representation in order to show the best results at the top of the list. this method does not take into consideration the heterogeneity in the list, but otherwise it is similar to analysis done with each of the generator clusters. actually, the first level of the generator cluster tree graph does this analysis. therefore we compared generator clustering to the sorted class list using the results from the first level. we changed the default settings so that the number of reported functional classes was not limited.

the comparison used the two previously analyzed data sets. the results from sorted class list were compared to generator clustering summaries shown in tables  <dig> and  <dig>  when the number of classes was limited only by the p-value, an immediately observed drawback of the sorted list method was the amount of information  obtained. for the h2o <dig> dataset, we obtained  <dig> classes and for itraconanzole  <dig> with -log >  <dig>  > 3). the resulting sorted lists are shown in tables  <dig>  and  <dig> . this can be corrected by raising the cut-off for the included genes. this is also reasonable as we have not used here any correction for increased risk of false positives due to multiple testing. strong filtering with p-values or limiting the number of reported classes leaves the most over-represented functional classes. in the example datasets, the most over-represented functional classes were all associated with the same gene group. with h2o <dig>  the first  <dig> functional classes were associated with mitochondrial ribosome proteins . with itraconanzole, the first  <dig> classes  show functions associated with amino acid biosynthesis .

when the generator results were compared to a sorted class list, many classes were omitted from the results. with default settings, generator shows at maximum ten classes for each cluster in the output text file. this filters out the repetitive occurrences of functional classes associated with the same gene group. in the h2o <dig> dataset, classes like macromolecule biosynthesis, protein metabolism, and large ribosomal subunit were excluded in this way. this seems acceptable as many similar classes are shown in the results by cluster i. the omitted classes can be still viewed with the sorted list available for each cluster. another group of classes that are not reported by generator with h2o <dig> were very broad classes, such as intracellular, cell, or physiological process. these contribute very little information to the analysis. similar observations were also seen with the itraconanzole dataset, where many amino acid biosynthesis associated classes were excluded from generator clustering results. as an exception, itraconanzole showed some broad classes in the results .

direct acyclic graph
another way to analyze the obtained gene list is to map the over-represented functional classes into a tree like structure that is behind the go classes and visualize the results as a graph structure. the benefit to the sorted list presentation is that the hierarchical structures are now visible, highlighting the over-represented functional classes occurring repetitively in the same part of the go graph. also, if there are different branches showing over-represented functional classes in the go structure, they are clearly separated. the major drawback is the large size of the obtained visualization. the graph obtained from amigo server  <cit>  using the whole list of over-represented classes from h2o <dig> dataset was simply too large for analysis . instead we selected a graphical output from go term finder at saccharomyces genome database  <cit>  for comparison. the go term finder adds color coding to show which of the classes showed strongest over-representation. it also tries to make the obtained graph smaller by discarding some branches. as the graph for each ontology is obtained separately, we combined the obtained three graphs to the same picture for a better view. we used generator clustering summaries shown in tables  <dig> and  <dig> for comparison.

in order to compare the obtained go graphs with the generator results, we flagged each class that was reported significant if it was included in the generator result table . we first observed, in the comparison, that the graphs obtained from sgd go term finder are still large for analysis. also, the important features are scattered over three graphs, in comparison to the single table from generator. it was observed that some classes in the h2o <dig> data were not shown in the sgd go graph even though their log-p-value results were highly significant . some of these classes were: aerobic respiration   <dig> ), cellular respiration , and mitochondrial genome maintenance . this might be an artifact caused by the limited size of the go graph. sgd graph, on the other hand, showed classes that were not reported by generator. these classes were the same classes discussed when comparing generator with the sorted lists. some of the differences between the results might be explained by the usage of binomial test for calculating significance of the functional classes in go term finder. it should be noted that the fisher's exact test used by generator is a more correct method  <cit> , although we observed similar p-values with both methods. also the whole genome is always used as a population by go term finder, which might also cause bias in the results with some datasets .

comparison to gotoolbox
during the preparation of this manuscript, we also observed another method that performs similar go clustering. go-proxy in gotoolbox  <cit> , takes the user given sample gene list, creates the go classifications for each gene and clusters the obtained matrix by using czekanowski-dice distance and hierarchical clustering. the reported clusters  are selected from the different levels of tree with two parameters, defined by the user. one parameter defines how similar genes have to be inside the cluster and the other defines the minimum size for the cluster. the principal difference between the methods is that generator  reports only the go-classes that display over-representation in both the original sample gene list and in the obtained cluster, whereas gotoolbox concentrates its analysis to the obtained cluster. also, generator gives an overview of the clustered data with visualization.

in the analysis for h2o <dig> and itraconanzole datasets, gotoolbox, with default parameters, created more and smaller clusters when compared to generator . the cluster number is probably larger because the same clusters with minor changes are selected from different levels of the hierarchical clustering tree which causes repetition in the results. the small clusters in gotoolbox results tend to give a scattered view of the data but could be also useful when analyzing details from the obtained gene list. however, by setting a larger minimum cluster size they can be filtered. with larger clusters gotoolbox reported nonspecific functional classes like cellular process, cell, or metabolism in addition to the same go-classes that were previously reported by generator . with the default settings, gotoolbox found also some small clusters that were not reported by generator . these clusters were quite small and the most associated functional classes did not show any over-representation in the original sample list  as gotoolbox does not filter the results with o.log. generator could be also run with a larger maximum cluster number in order to obtain similar smaller clusters.

discussion
we have presented a method that groups a user provided gene list into functionally dissimilar gene clusters. the grouping is done with varying numbers of clusters, which are used to create a tree-like graphic visualization. despite the emphasis on clustering, our method also analyzes the gene list as a single entity . the obtained graph presents the main output of the method showing the most important simultaneous gene groups that occur in the data in a single figure. the graph can be created multiple times to see how stable it remains when different random initializations are used for clustering. our results from clustering replications show that the most visible gene groups remain, thus increasing confidence in the method.

there are two alternative methods previously used to obtain an overview of the over-represented functional categories. methods like ease analyze the gene list as one entity and output the functional categories as a sorted list according to the significance of the over-representation. other methods, like sgd go term finder, give the over-represented functional categories as a directed tree-like graph by using the hierarchical structure of go. graph methods create a much more complex representation with the danger of overwhelming the user with unimportant details. the sorted list gives an impression of a homogenous gene group. as an example, we showed the results from sgd go term finder, amigo visualization, and the sorted list of functional classes for the gene list as one entity. these methods do not group the gene list before analyzing it. a positive unexpected observation was that results from the other methods seemed more informative after we marked them with the corresponding generator clusters. for example classes in a sorted list can be marked according to which cluster they belong to . marking the corresponding clusters enables the opportunity to combine generator clustering results and results from other methods.

we also compared the generator results to another gene clustering tool, gotoolbox. the principal difference in methods is that generator provides the cluster description by using filtering procedure which discards the go-classes with no over-representation in the original sample gene list and with weak association to the genes of the cluster. generator includes also visualization for viewing the optional clustering results. despite the differences we were able to obtain also similar go-classes with both methods when analyzing the h2o <dig> and itraconanzole datasets.

since partitive clustering has an inherent weakness in the initialization, we present a novel solution. instead of selecting a single clustering number, we monitor the results with a range of clustering numbers. as a result, we obtain correlations between the clusters that highlight those features that can be obtained even though the cluster number would change. the replication of the whole cluster tree visualization was done in order to further highlight those features that are conserved. it should be noted that these ideas could also be used with other clustering applications. similar work was done by heger and holm  <cit>  by replicating nmf many times and looking for the conserved features in the obtained matrix factorizations and by brunet et al  <cit>  where optimal cluster number was selected by replicating nmf clustering many times.

we analyzed the obtained clusters by concentrating on those functional categories that were over-represented in the cluster when compared to the rest of the gene list and also in the original list of genes when compared to a reference list of genes. if the over-representation in the cluster only would be monitored, the obtained cluster would be well explained, but the drawback would be that the obtained categories could at worst be such that they were under-represented in the original gene list and therefore produce erroneous conclusions. if the over-representation in the original list would be only monitored, the clustering would not be informative to the analysis. the current way of combining these two over-representations highlights those features that are common between the original list and the obtained cluster. as the data is grouped to separate clusters, each of them will represent different features from the list of over-represented functional classes for the original gene list. the reporting method therefore separates those functional categories from the original gene list that are not associated to the same genes and groups together those functional categories from the original gene list that are connected to the same genes. a good example of genes that were associated to the same function were the members of the same protein complex that were often seen as a separate cluster.

the selection of the reported functional categories requires the definition of the cut-off for the significant over-representation. here the threshold was purposely selected to be liberal  >  <dig> ). this is known to be too weak a threshold when the analysis includes multiple testing as it increases the possibility of the false positives. therefore the emphasis was placed in the later analysis on those functional categories that showed clearly stronger over-representation than what the cut-off was and the p-values larger than  <dig>  were monitored with caution. similarly we also discarded classes with s.log <  <dig> from our analysis. the p-value borders could be selected more precisely by doing repetitive testing with a similar sized sample list with randomly selected members . the evaluation of the results using runs with randomized samples from the analyzed data is one of the planned additions to the generator software.

the associated software uses a reference list to calculate over-representation for the original cluster. although the whole genome for the organism could be used, the reference list will ensure that the biases towards some functional groups in the test situation do not affect the analysis.

the method demonstrates that a drugs primary target can be identified within a separate group among different regulated genes and different cellular functions. work shown here was done with yeast allowing the use of detailed annotation of the yeast genome. still, we have also obtained encouraging results from human cell line and c. elegans gene expression datasets . as more information is being gathered from the gene functions, this method should be able to perform even better. nonetheless, accuracy in the used gene annotations is the weak link for our method. this should not necessarily be a hindrance, as the randomly classified genes should distribute randomly also among the observations. another limitation is the recognition of the analyzed genes. gene identifiers can be problematic when working with different naming systems that originate from various databases or high throughput methods, like gene chips. these are also the problems faced by other methods.

the presented software includes the possibility of using it also with binary matrices. the reference group can be given as a binary matrix or as a vector that represents a number of members of each category and also the size of the reference group. this should enable the analysis of other similar binary data sets, like snp datasets, word occurrences in abstract texts etc. these are being currently tested as future applications.

CONCLUSIONS
we have presented an analysis method and associated software, generator, for analysis of large gene lists. our aim has been to fulfill the need for an analysis tool to separate and identify functional gene groups from gene lists that would otherwise be difficult to find. the method should be useful especially as larger and more complex gene lists are produced due to the increased use of high throughput genomic methods.

