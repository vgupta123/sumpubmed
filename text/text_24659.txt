BACKGROUND
the illustration of information in biology is frequently made using diagrams. therefore, having a standard notation is very beneficial as it facilitates interpretation and forgoes the need for long and detailed explanations
 <cit> . motivated by this, a large community of biochemists, modellers and computer scientists proposed the systems biology graphical notation 
 <cit> . sbgn is an established effort for a standard graphical notation in biology. it leverages previous efforts, including molecular interactions maps
 <cit>  and kitano process diagrams
 <cit> , and extracts the best of graphical standard notations in other fields, such as unified modelling language in software engineering.

sbgn is subdivided into three different and complementary languages: process description , entity relationship  and activity flow . this subdivision allows sbgn to be accurate and assures an unambiguous representation
 <cit> . pd focuses on the representation of temporal changes occurring between biochemical entities. all molecular processes and interactions and their results are depicted in pd diagrams. in contrast, the er language depicts the effects among entities, emphasizing the influences that each entity has on each other and disregarding the transformations on itself . finally, af graphically shows the influence of activities such as inhibition or activation. to better represent these influences the diagram is simplified by ignoring biochemical details of the process and entity states, reducing the number of nodes when compared to an equivalent pd. these three languages together enable the users to represent all types of biological information from biochemical interaction maps to cellular signalling networks.

a graphical notation can only be shared and analysed if it is supported by network visualization tools. sbgn is currently supported by a list of  <dig> software packages , including celldesigner
 <cit> , pathvisio
 <cit>  and vanted
 <cit> . cytoscape
 <cit> , arguably the most popular tool in bioinformatics for visualization and analysis of biological networks, has support for the systems biology markup language 
 <cit>  natively and via the cysbml plug-in
 <cit> , and biopax
 <cit>  via the binom plug-in
 <cit> . however, it currently has no support for sbgn. the ability to import sbgn diagrams into cytoscape would be very beneficial, as it would enable the use of all the network analysis features of cytoscape and its plug-ins in sbgn maps. these include the analysis of the network properties , visualization of expression data, and pathway modelling.

motivated by this, we have developed cysbgn, a new plug-in for cytoscape that enables the full support of sbgn diagrams. cysbgn allows one to import and visualize sbgn diagrams stored in sbgn-ml format using the libsbgn library
 <cit> . it is also possible to export small changes made in the sbgn diagram, such as node positions. full integration with cysbml
 <cit>  and systems biology format converter
 <cit>  is available, allowing the user to automatically generate sbgn diagrams from sbml models. to validate the rendering of the diagrams with the plug-in, we tested it with a suite of sbgn diagrams that covers the three sub languages as well as all its shapes and connections. the plug-in applicability is also demonstrated by applying network analysis methods, in particular shortest path and motif discovery, from two different plug-ins in a pd diagram of the central plant metabolism.

implementation
cysbgn enables the importation of sbgn diagrams into cytoscape and it is compatible with the latest version of cytoscape, version  <dig> . <dig>  all the entity and relationship nodes shapes defined in sbgn specifications for each language are supported.


using libsbgn library and sbgn-ml format
the success of a widely used notation is also dependent on the digital storing format, since it determines how easily the notation can be shared and interpreted. hence, a digital format should be easy to understand, capable of capturing accurately all the information and save it for further access. to face this challenge the libsbgn library and the sbgn-ml format were recently presented
 <cit> . libsbgn is a java library that provides an api to save, load, query and validate sbgn-ml files, that are structured as an extension of the xml file format. cysbgn makes use of these technologies to display pd, af and er diagrams in cytoscape. the diagrams are loaded and then converted into cytoscape’s network structure. in order to represent the sbgn graphical notation a vizmapper visual style is applied according to the attributes of the nodes and the edges .

all the information from the sbgn-ml file used to create and display the sbgn diagram is stored as node and edge attributes. therefore, information such as node type , node width and edge type  is available to the user through the data panel in cytoscape.

cysbgn stores in the sbgn-ml files the coordinates of all entities in the diagram, allowing the user to export a defined layout. thus, one can use cysbgn to take advantage of the several cytoscape automatic layout algorithms and then share the generated layout among other sbgn compliant tools.

implementing sbgn in cytoscape
some of the specifications of sbgn are directly representable in cytoscape, while some need to be represented in different ways . this comes at the price of more complex networks.

 cytoscape offers nine different node shapes, and therefore it is not possible to represent all the sbgn entities based on this list alone . to overcome this we use the custom node graphics feature in cytoscape , which renders any specific image above the nodes. thus, cysbgn encompasses all the sbgn shapes by loading a previously created image in the respective type of node.

similarly to the node shapes, not all the relationship node shapes  are directly represented in cytoscape. in particular, absolute stimulation, necessary stimulation, and absolute inhibition relationships lack a representation . we noticed that the edges that are not directly supported may be split into two sub edges, e.g. the necessary stimulation edge may be subdivided into an inhibition edge followed by a stimulation edge. taking advantage of this, cysbgn handles all unsupported relationship nodes through a composition of two supported edges linked by a small invisible auxiliary node . it should be noted that adding auxiliary nodes may affect the network topology analysis methods, since they consider these nodes for analysis even if they do not contain any biological meaning. we address this issue by allowing the user to simplify the network . moreover, the edges layout is not exactly the same as the one adopted by sbgn. the differences are mostly in the filling colour of the edge’s shape, which in sbgn is white and in cytoscape is black. a full comparison between the edge shapes of sbgn and the corresponding shapes in cysbgn is depicted in figure
 <dig> 

in order to increase the rendering performance cytoscape disables the rendering order of the nodes. in other words, nodes do not have a z coordinate, and therefore when two nodes are overlapping each other it is not possible to identify which node is in the front or back. consequently, nodes are randomly ordered . this brings some representation problems mostly when the sbgn diagrams contain nodes that enclose other nodes, as is the case of compartments. to avoid rendering the compartment above the enclosed nodes and therefore hiding them, cysbgn draws every compartment node with transparent filling. this ensures that the enclosed nodes are visible when the compartment is not selected. however, it is not possible to guarantee the transparency of a node when it is selected.

sbgn diagram simplification
implemented methods in cytoscape are optimized to work with simple network structures similar to sif files. hence, we created a simplification method that becomes useful in cases when the sbgn diagram structure does not fit the cytoscape features, such as applying a layout algorithm to a sbgn diagram with cloned entities. in sbgn, a clone marker  identifies nodes that appear duplicated in the network. typical examples of clone entities are adp or atp, because they are present in more than one reaction. in these cases the hierarchical layout is wrongly affected by the presence of the cloned entities. another example is when a necessary stimulation arc is present: due to its unsupported shape cysbgn represents it as an aggregation of two edges . this composition of edges affects the layout analysis of the network. the simplification feature duplicates the original diagram but disregards all nodes that are not supported by cytoscape, such as compartments, tags or cloned entities. in addition, the edges that need to be drawn as a composition of other edges  are simplified into a single edge . using the simplification feature the diagram information is retained, since the edge type attribute is preserved and only the edge shape is changed. moreover, the simplification is represented in another diagram keeping the original one unchanged. in the cysbgn tutorial  an example of a simplification of a map kinase cascade diagram is provided.

sbml to sbgn converter
to increase the interoperability of cysbgn we developed an integrated feature between cysbgn and cysbml
 <cit>  that enables the users to automatically generate a sbgn diagram based on a sbml model. taking advantage of the features made available by the sbfc
 <cit> , cysbgn generates a sbgn-ml file from a previously selected sbml model and consequently imports it into cytoscape. this allows the sbml model visualization to be complemented with the respective sbgn diagram, providing the users the possibility to generate the most convenient visualisation of the model, store it, and share it among users and tools. the cysbgn tutorial  provides a step-by-step guide of this feature, it also provides information on how to obtain sbml models from the biomodels database
 <cit> .

RESULTS
the accuracy of diagram rendering in cysbgn was validated by running a varied and extensive number of test cases containing maps from the three complementary languages of sbgn. for each case, we imported a sbgn-ml file and compared the generated diagram with the expected layout. the af language was tested with  <dig> diagrams, the er with  <dig> and the pd with  <dig>  leading to a total of  <dig> different maps, covering almost all shapes and connection types. this suite of test cases is shared among other sbgn compliant tools, such as pathvisio
 <cit>  or sbgn-ed
 <cit>  . hence, it is possible to compare the results obtained by cysbgn with the original  diagrams and the ones obtained in other tools.

to perform automatically this comparison we developed a python script that generates a html page containing a side-by-side comparison showing the expected pictures of the sbgn maps and those obtained by cysbgn . the resulting maps are displayed in a matrix structure where the columns correspond to different applications and the rows to the different test cases. the first column refers to the original and correct drawing of the map and the last column is the drawing obtained by cysbgn. due to its large size the comparison table is available as a supplementary file  and can also be visualized at http://libsbgn.sourceforge.net/render_comparison/.

cysbml allows users to import sbml models directly from biomodels database
 <cit> , visualize and analyse them. we used this feature to test the automatic generation of sbgn diagrams from the sbml models. this allows one to pick a pathway from biomodels, download the respective sbml model and then generate the sbgn diagram that can be further used as a publication diagram or simply shared with other users. the plug-in’s tutorial is available on the cysbgn web page  and provides detailed step-by-step guides to all cysbgn features. additionally, the plug-in’s applicability is illustrated by using two different cytoscape plug-ins to apply network analysis methods to sbgn diagrams. the first example shows the identification of the shortest path between pyruvate and succinate in a large metabolic network using the cytohubba plug-in . the second example demonstrates how users can identify network motifs using the netmatch
 <cit>  plug-in. both examples use a large sbgn diagram of the plant central metabolism .

future steps in cysbgn will focus on:  further integration with other cytoscape plug-ins , and  improving the diagram export feature to allow a full mapping of the changes made to the sbgn diagram . furthermore, we will upgrade cysbgn compatibility to the upcoming version of cytoscape, cytoscape  <dig>  when it is released.

CONCLUSIONS
here we presented a new plug-in for cytoscape, cysbgn, that provides support to sbgn diagrams. cysbgn allows one to load and visualize sbgn-ml models in cytoscape and leverage all its repertoire of features and plug-ins. among other features it also establishes a connection with the cysbml plug-in and sbfc, allowing the automated generation of sbgn diagrams of any imported sbml model. a detailed tutorial containing several step-by-step guides covering all cysbgn features is made available in the plug-in web page .

cytoscape’s active community allows the development of the plug-ins to be processed smoothly. thus, features like extending cytoscape’s supported edges and nodes shapes may be added in near future, consequently improving cysbgn. moreover, there is an increasing number of plug-ins available
 <cit> , thus we expect more synergies of cysbgn with other plug-ins in the future.

availability and requirements
•project name: cysbgn

•project home page:http://www.ebi.ac.uk/saezrodriguez/cysbgn/

•operating system: platform independent

•programming language: java

•other requirements: java  <dig>  or higher, cytoscape  <dig> .3

•license: gnu gpl v3

•any restrictions use by non-academics: only those imposed already by the license

competing interests
the authors declare that they have no competing interests.

authors’ contributions
jsr and mvi proposed the idea, initiated the project and evaluated the software by pointing out errors and improvements. eg and mvi designed the software architecture. eg implemented cysbgn. eg and jsr wrote the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary materials  <dig> cysbgn rendering validation and comparison. exhaustive multi-page table containing the rendering comparison of cysbgn with other sbgn compliant tools and the original drawing of the  <dig> validation test cases proposed in the manuscript.

click here for file

 acknowledgements
we would like to thank nicolas rodriguez for helping integrating sbfc library into cysbgn and francesco iorio for drawing the cysbgn logo. we acknowledge the financial aid received from the eu through project “biopredyn” , and from the llp/erasmus programme.
