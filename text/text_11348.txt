BACKGROUND
during the last years, genomics and proteomics have deeply changed the scientific approach to the study of the molecular basis of cells and tissues behaviors both in physiological and pathological conditions, giving a new comprehensive view to the research community.

as the interest on these fields has been more and more increasing, innovative and more suitable technologies have been developed. at present, one of the most promising and reactive fields is certainly the microarray technology, which has had, so far, a great scientific impact and a wide application area. in fact, several types of micorarrays have been developed and proposed, each focused on a specific type of analysis, from genetic screening to proteomics and from biological research to diagnostics.

through the comparison of genomic profiles it is possible to study gene expression differences among cross-correlated conditions, thus understanding their meaning. thanks to the microarray technology a large number of genes may be investigated at the same time to find which are differentially expressed on a certain cell type. quantitative researchers have proposed a variety of methods for handling probe-level data from affymetrix® oligonucleotide arrays. such methods employ different procedures for adjusting background fluorescence, normalizing data, incorporating information from "mismatch" probes, and summarizing probe sets.

even if microarrays are a powerful instrument, studies on these data are often conditioned by technological limits, thus decreasing their capabilities. the most relevant limitation concerns the analysis of large datasets. in fact this kind of analysis requires long computational times rather than the availability of specific hardware. a huge availability of memory and computational power is required for analyzing microarrays and often researchers cannot succeed in performing their studies because of the impossibility to access suitable resources.

several tools and algorithms had been developed in order to analyze microarray data, all of them consisting in standalone applications. two of the most known free analysis software packages are the r-based bioconductor and dchip  <cit> .

this work is not aimed at replacing those systems, but it provides researchers with a new method to analyze large datasets without any hardware or software constraints, by simply using a common web browser. to reach this aim, dchip software has been modified by using appropriate parallelization strategies, to permit its execution on both cluster environments and grid infrastructures, exploiting existing computational and storage capabilities. since dchip is a wide application containing a large number of functionalities, this work is related to the computation and the analysis of gene expression.

implementation
the goal of this work is focused on the design and development of a tool for the analysis of gene expression to be included in a more general grid-enabled software application for the analysis of microarray data. as an added value, the use of grid technologies makes it possible to exploit both computational and data grid infrastructures to analyze large datasets of distributed data.

dchip, an existing analysis tool for microarray experiments, was originally a free and open source windows application. starting from the original source code , several versions of the software have been implemented, in order to fit different kinds of resources :

• standalone linux version

• parallel cluster implementation

• parallel grid implementation

the execution is supported on  <dig> bit computers too.

with regard to the user interface, as a first release, the application was implemented in a command line version to permit the execution on remote computing elements. two input files are used: the first one contains specific options for the execution; the second one contains the list of the microarray files used for the analysis. as a second step, in order to simplify the use of above mentioned dchip versions, the executables have been integrated within a biomedical portal  <cit>  which provides a simple graphical user interface to run the application. such a portal integration allows unpractised users to store their experimental data on a complex storage system and access distributed data and services in a transparent way. furthermore users can easily run the application from any computer or location with only internet connection, without loosing time in installation and maintenance procedures. moreover, users can use the software through a simple web interface and launch their analyses taking advantage of the possibility to orchestrate different portal services in a workflow strategy. thanks to the ease of the web interface, users are not required to know technical dchip details.

the new software version has been designed to be modular, i.e. the original software has been divided into several independent modules, each performing a different part of the analysis. this approach has allowed to improve  optimization, by implementing the most appropriate parallelization strategy for each part of the analysis and  scalability, by replacing in a transparent way one or more modules with other, more powerful, ones or with modules providing different functionalities. the application has been structured in three different modules that have to be executed sequentially :

• module 1: opening, reading and normalization of cel files

• module 2: computation of expression levels

• module 3: filtering, extraction and clustering of differentially expressed genes

each of them has been designed as a standalone program working in an independent way. data and overall information are moved through the modules using csv  file format. the final output is composed of three main files containing respectively: the expression values in an r compatible format, the list of the differentially expressed genes and the cluster tree.

using large datasets, long execution times and great computational efforts are required. parallelization strategies are necessary to improve performances and to allow the analysis of a large number of arrays in a short time. a first accurate analysis of dchip algorithm revealed the possibility to parallelize both the first and the second module that implement the most data intensive algorithms from a computational point of view. the applied parallelization does not affect the original algorithms of dchip but it is related to a data access strategy. since the algorithms for normalization and expression calculation work in different ways, two different parallelization approaches have been adopted.

the normalization algorithm is based on the invariant set method. it works by processing each array separately with a baseline chosen as the median intensity array. therefore the module  <dig> has been parallelized according to the number of microarrays. each parallel execution opens a restricted number of files, normalizes them against the baseline and writes the related csv output files.

dchip algorithms concerning the calculation of gene expression  work in a different way, since they need all genes from all microarrays to work. so the module  <dig> has been parallelized into a number of executions, each reading all cvs files of all normalized arrays but performing the calculation only on a restricted group of genes. the execution results of each subset are then merged and the output thus containing the expression levels of all data is produced.

the third module reads the csv file containing the gene expression values and allows to perform the filtering over genes, the extraction of differentially expressed genes and some clustering operations by using the dchip unmodified algorithms.

two different modalities of parallel execution are available: with or without mpi  libraries. the second approach allows the execution on environments not supporting mpi technology, but requires specific scripts for the management, the submission and the monitoring of parallel jobs.

finally the code has been modified to enable the submission to the grid infrastructure. for this purpose the glite  <cit>  middleware has been considered. in order to allow to read and to write files on remote and distributed storage elements, gfal api  <cit>  has been used. in this way it is possible to access data, reading the whole files, or a part of them, directly where they are stored without moving them to grid elements that actually run the calculation. thanks to a public key infrastructure   <cit> , which provides x. <dig> certificate based authentications, this solution allows to preserve user privacy and data security.

RESULTS
an application able to perform the computation and the analysis of gene expression on large datasets of microarrays has been developed using dchip algorithms. in details, concerning pre-analysis, the invariant-set method has been used for normalization and pm-mm difference model or pm-only models can be chosen for genes expression calculation. original dchip functionalities like filtering, differentially expressed genes  discovery and clustering are provided by module  <dig>  customized analyses can be performed by setting specific parameters inside the input file.

by modifying the makefile with the appropriate options it is very easy to obtain different versions of the application depending on the kind of infrastructure chosen for the analysis: standalone linux, mpi or grid-enabled versions.

starting from the developed application different tests have been performed in order to validate results and compare performances obtained on different infrastructures. to this goal, tests have been divided into two different categories:

• validation tests

• performance tests

validation tests
in order to validate the results obtained with the developed software, a small dataset coming from a published study  <cit>  has been used for the analysis. the considered case study concerns the comparison of results obtained from separated analyses of huvec  and fibroblasts, derived from same donors, treated with interferon-α , to the purpose of identifying interferon's effects on transcriptome of endothelial cells.

the dataset is divided in two parts with the following features:

• chiptype: affimetrix genechip hu-133a

• origin: huvec, human umbilical vein endothelial cells

• genes: 22283

• dataset dimension:  <dig> mb

• number of microrarrays: 10

• chiptype: affimetrix genechip hu-133a

• origin: fb, human umbilical fibroblasts

• genes: 22283

• dataset dimension:  <dig>  mb

• number of microrarrays: 5

the datasets are both composed by baseline and experiment arrays  and for each of them the following steps, according to the original analysis, have been performed:

• normalization: invariant-set method

• model-based expression: pm only model  <cit> 

• extraction of differentially expressed genes: fold change with threshold  <dig> 

as a first test, microarrays have been analyzed using both original and modified versions of dchip . the same options have been set in all tests in order to compare final results.

tables  <dig> and  <dig> and figures  <dig> and  <dig> represent the mean values of gene expressions, computed respectively on the baseline and experiment arrays on huvec data, coming from developed and original dchip versions. we notice that all the new dchip versions give the same results. there is a really small difference between windows and linux versions of dchip. this is probably due to the different approximations between compilers on windows and linux platforms. however, these little differences do not affect the global final result that can be considered pretty much the same.

as a second test, the same analysis has been performed by using r/bioconductor software using both gcrma  <cit>  and rma  <cit>  algorithms and results have been compared with the previous obtained with dchip.

this comparison is principally for completeness purposes since the dataset was published with results coming from an r/bioconductor analysis.

although there are currently many different methods for processing and summarizing probe level data from affymetrix oligonucleotide arrays, r/bioconductor and dchip are two of the most popular methods that consistently produce the best agreement between oligo array and rt-pcr data for medium and high intensity genes  <cit> . it is known that often expression values computed with dchip and rma algorithms show similar results, while results are different for gcrma.

tables  <dig> and  <dig> and figures  <dig> and  <dig> show the comparison between dchip linux and r/bioconductor results obtained on the former data. it's observable that dchip and rma present similar trends conversely to gcrma results.

ultimately, results of the entire analysis related to differences between huvec and fb are illustrated. we have found that using all dchip developed versions, in huvec,  <dig> genes were up-regulated  by ifn, including genes involved in the host response to rna viruses, inflammation, and apoptosis. interestingly,  <dig> genes showed a > 4-fold higher induction compared with human fibroblasts. obviously, because the results of the published study had been obtained using gcrma algorithm, they are not exactly the same of dchip's. these show  <dig> genes up-regulated by ifns in huvec and  <dig> genes with a > 5-fold higher induction compared with human fibroblasts. however it's interesting to notice that quite similar results have been found.

in particular  we have found that cxcl <dig>  ligand 11) is selectively induced by ifn-α along with other genes associated with angiogenesis regulation, including cxcl <dig>  trail, and guanylate-binding protein  <dig> 

the induction of ifn-α on huvec respect to human fibroblasts is shown. in particular the up-regulated huvec genes with fold induction more then  <dig> higher compared with fibroblast's are shown. the genes associated with angiogenesis induction are marked with bold text. as we expected, results show that cxcl <dig> gene is the most discriminator.

performance tests
these tests, although far from any biological meaning, have the only purpose of comparing performances using a large dataset on different environments. in details several application tests have been performed on both cluster and grid environments using different values of parallelization rate and final results have been compared.

in order to create a large data set for testing purposes, the on-line public repository geo  <cit>  has been used. a dataset of  <dig> hg-u133a breast cancer microarrays has been made available. it shows the following features:

• chiptype: affimetrix genechip hu-133a

• origin: breast cancer

• genes: 22283

• dataset dimension: ~ <dig> gb

• number of microrarray: 1000

the performance results have been obtained by calculating the average of the execution times of three independent executions of the application on the same dataset.

the tests on the cluster environment have been performed using the mpi implementation of dchip on michelangelo, the litbio project cluster  <cit>  dedicated to bioinformatics applications requiring great computational efforts.

grid tests have been performed using the glite middleware on the biomed virtual organization  <cit>  of the egee  infrastructure  <cit> . in this case data had been previously uploaded on several remote and distributed storage elements and have been analyzed submitting more parallel jobs through opportune strategies.

concerning grid tests, a not-mpi parallel implementation has been used, because mpi jobs are unstable on the glite middleware, at the present time. more parallel jobs can be submitted and monitored using ad hoc scripts.

two kinds of test have been carried out:  scalability on the number of parallel jobs,  scalability on the number of microarrays.

as a first test, a subset of  <dig> microarrays has been analyzed to compare the performances of the two parallel modules in changing the parallelization rate, both on cluster and grid implementation. in detail, four tests have been run using respectively  <dig>   <dig>   <dig> and  <dig> parallel jobs. by comparing results, we can observe that module  <dig> has a better scalability  due to the different parallelization strategy adopted. in fact, while in the first module there is a reduction in time for all the three execution steps , in the module  <dig>  we have a reduction only for gene expression calculation whereas file opening and output writing remain constant. through the comparison of cluster and grid executions we can notice that this trend is approximately the same in both conditions. eventually, the speedup ratio  = t/t, where t is the execution time on a single processor and t the execution time on n processors), has been calculated for the cluster tests with the purpose to estimate the parallelization efficiency. as shown in table  <dig>  it is worth noting that for  <dig> microarrays the parallelization has a quite good result up to  <dig> parallel jobs.

the table shows the mean execution times coming from three different execution of dchip mpi version run on litbio cluster using respectively  <dig>   <dig>   <dig>   <dig>   <dig> parallel jobs to compute the expression values of  <dig> microarrays. to estimate the parallelization efficiency, the speedup ratio  = t/t, where t is the execution time on a single processor and t the execution time on n processors) was calculated.

as a second test, the whole  <dig> microarrays dataset has been analyzed on the grid, by running the parallel dchip version using  <dig> parallel jobs, in order to investigate the trend of performances according to the dataset dimensions. in figure  <dig> we can see the results concerning respectively the module  <dig> and module  <dig> executions. cluster performances show better results than the grid ones.

actually the great advantage for researchers in using grid is the possibility to store a large amount of data, to run complex algorithms and to access all data shared by grid virtual communities, using remote resources.

this feature has a great relevance especially for small laboratories or for researchers that, due to the high cost of producing microarray data, cannot perform analyses using large datasets . the access to a grid environment makes it possible to get access to all the datasets made available by the community and to perform more accurate analyses.

as previously said, the grid provides several advantages related to security aspects as well. using the grid certificate-based authentication data are safe from possible attacks to privacy and security.

finally, the integration of this application into a grid-enabled portal provides a simple graphical user interface to run the application. in this way, researchers do not need any particular hardware or software installed locally but only a web connection to the portal.

actually, besides the cost of producing data, another relevant issue concerns the analysis of large datasets using standalone applications running on local hardware. the use of such applications implies the existence powerful computers available locally, and, often, this is not possible, even in large laboratories. the previously explained analysis related to  <dig> microarrays is an example of experiment that could not be performed using standalone applications, even on the most recent powerful computers.

our solution resolves this problem and provides users with a web-based service able to launch more analyses in a parallel way, easily monitoring the status of executions directly from the portal.

CONCLUSIONS
a scalable way to analyze large microarray datasets has been presented. to do that, we have ported existing tools to high performance and grid computing environments. dchip software has been ported on linux platforms and modified, by using appropriate parallelization strategies, to permit its execution on both cluster environments and grid infrastructures. the added value provided by the use of grid technologies is the possibility of exploiting both computational and data grids infrastructures to analyze large datasets of distributed data. the software has been successfully validated through the comparison with the original standalone windows version of dchip. performance tests were performed in order to investigate the improvements on performances related to the adopted strategies for parallelization. moreover these tests have been used to compare cluster and grid performances too. as result we found that parallelization gives quite good results in terms of execution times, especially for the first module. furthermore we found that grid executions have longer execution times rather than cluster ones. but it is worth noting that the relevance related to the use of grid computing for the presented application is principally focused on the opportunity of sharing data. this is done through different research groups and exploiting distributed computational resources rather than on the improvement of performances.

availability and requirements
• project name: grid-dchip

• project home page: 

a web-portal version of the software is accessible within the litbio portal.

• operating system: linux

• programming language: c++

• other requirements: mpich <dig> library 

• license: gnu gpl

abbreviations
gfal: grid file access library; api: application program interface; inf: interferon; huvec: human umbilical vein endothelial cells; fb: human fibroblasts

authors' contributions
lc developed the code, participated in the software design and tests definition, ran validation and performance tests and helped to draft the manuscript, mf helped to draft the manuscript, ip participated in the software design, helped to define the performance tests and to draft the manuscript, ss helped to define the validation tests and to draft the manuscript, lt participated in the grid-design of the software, helped to define the performance tests and to draft the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
source code. the archive contains the source code of modified dchip.

click here for file

 acknowledgements
this work is developed within the italian firb project litbio .

thanks are due to ulrich pfeffer and his bioinformatics group at the advanced biotechnology centre of genoa, italy for their collaboration and for provision of microarray data as well as of their expertise.

thanks are due to cheng li for his collaboration and for provision of the dchip source code.
