BACKGROUND
high-throughput pyrosequencing technologies have enabled the widespread use of metagenomics and metatranscriptomics in a variety of fields  <cit> . this technology has revolutionized the possibilities for unbiased surveys of environmental microbial diversity, ranging from the human gut to the open ocean  <cit> . the trade off for high throughput sequencing is that the resulting sequence reads can be short and come without information on organismal origin or read location within a genome.

the most common way of analyzing a metagenomic data set is to use blast  <cit>  to assign a taxonomic name to each query sequence based on "reference" data of known origin. this strategy has its problems: when a query sequence is only distantly related to sequences in the database, blast can either err substantially by forcing a query into an alignment with a known sequence, or return an uninformatively broad collection of alignments. furthermore, similarity statistics such as blast e-values can be difficult to interpret because they are dependent on fragment length and database size. therefore it can be difficult to know if a given taxonomic assignment is correct unless a very clear "hit" is found.

numerous tools have appeared that assign taxonomic information to query sequences, overcoming the shortcomings of blast. for example, megan   <cit>  implements a commonancestor algorithm on the ncbi taxonomy using blast scores. phylopythia  <cit> , tacoa  <cit> , and phymm  <cit>  use composition based methods to assign taxonomic information to metagenomic sequences. recent tools can work with reads as short as  <dig> bp.

phylogeny offers an alternative and complementary means of understanding the evolutionary origin of query sequences. the presence of a query sequence on a certain branch of a tree gives precise information about the evolutionary relationship of that sequence to other sequences in the tree. for example, a query sequence placed deep in the tree can indicate how the query is distantly related to the other sequences in the tree, whereas the corresponding taxonomic name would simply indicate membership in a large taxonomic group. on the other hand, taxonomic names are key to obtaining functional information about organisms, and the most robust and comprehensive means of understanding the provenance of unknown sequences will derive both from taxonomic and phylogenetic sources.

likelihood-based phylogenetics, with over  <dig> years of theoretical and practical development, is a sophisticated tool for the evolutionary analysis of sequence data. it has well-developed statistical foundations for inference  <cit> , tests for uncertainty estimation  <cit> , and sophisticated evolutionary models  <cit> . in contrast to distance-based methods, likelihood-based methods can use both low and high variation regions of an alignment to provide resolution at different levels of a phylogenetic tree  <cit> .

traditional likelihood-based phylogenetics approaches are not always appropriate for analyzing the data from metagenomic and metatranscriptomic studies. the first challenge is that of complexity: the maximum likelihood phylogenetics problem is np-hard  <cit>  and thus maximum likelihood trees cannot be found in a practical amount of time with many taxa. a remarkable amount of progress has been made in approximate acceleration heuristics  <cit> , but accurate maximum likelihood inference for hundreds of thousands of taxa remains out of reach.

second, accurate phylogenetic inference is not possible with fixed length sequences in the limit of a large number of taxa. this can be seen via theory  <cit> , where lower bounds on sequence length can be derived as an increasing function of the number of taxa. it is clear from simulation  <cit> , where one can directly observe the growth of needed sequence length. such problems can also be observed in real data where insufficient sequence length for a large number of taxa is manifested as a large collection of trees similar in terms of likelihood  <cit> ; statistical tools can aid in the diagnosis of such situations  <cit> .

the lack of signal problem is especially pronounced when using contemporary sequencing methods that produce a large number of short reads. some methodologies, such as  <dig>  <cit> , will soon be producing sequence in the 600- <dig> bp range, which is sufficient for classical phylogenetic inference on a moderate number of taxa. however, there is considerable interest in using massively parallel methodologies such as solid and illumina which produce hundreds of millions of short reads at low cost  <cit> . signal problems are further exacerbated by shotgun sequencing methodology where the sequenced position is randomly distributed over a given gene. applying classical maximum-likelihood phylogeny to a single alignment of shotgun reads together with full-length reference sequences can lead to artifactual grouping of short reads based on the read position in the alignment; such grouping is not a surprise given that non-sequenced regions are treated as missing data .

a third problem is deriving meaningful information from large trees. although significant progress has been made in visualizing trees with thousands of taxa  <cit> , understanding the similarities and differences between such trees is inherently difficult. in a setting with lots of samples, constructing one tree per sample requires comparing trees with disjoint sets of taxa; such comparisons can only be done in terms of tree shape  <cit> . alternatively, phylogenetic trees can be constructed on pairs of environments at a time, then comparison software such as unifrac  <cit>  can be used to derive distances between them, but the lack of a unifying phylogenetic framework hampers the analysis of a large collection of samples. "phylogenetic placement" has emerged in the last several years as an alternative way to gain an evolutionary understanding of sequence data from a large collection of taxa. the input of a phylogenetic placement algorithm consists of a reference tree, a reference alignment, and a collection of query sequences. the result of a phylogenetic placement algorithm is a collection of assignments of query sequences to the tree, one assignment for each query . phylogenetic placement is a simplified version of phylogenetic tree reconstruction by sequential insertion  <cit> . it has been gaining in popularity, with recent implementations in  <dig>  <cit> , and more efficient implementations in this paper and by berger and stamatakis  <cit> . a recent hiv subtype classification scheme  <cit>  is also a type of phylogenetic placement algorithm that allows the potential for recombination in query sequences.

phylogenetic placement sidesteps many of the problems associated with applying traditional phylogenetics algorithms to large, environmentally-derived sequence data. computation is significantly simplified, resulting in algorithms that can place thousands to tens of thousands of query sequences per hour per processor into a reference tree on a thousand taxa. because computation is performed on each query sequence individually, the calculation can be readily parallelized. the relationships between the query sequences are not investigated, reducing from an exponential to a linear number of phylogenetic hypotheses. short and/or non-overlapping query sequences pose less of a problem, as query sequences are compared to the full-length reference sequences. visualization of samples and comparison between samples are facilitated by the assumption of a reference tree, that can be drawn in a way which shows the location of reads.

phylogenetic placement is not a substitute for traditional phylogenetic analysis, but rather an approximate tool when handling a large number of sequences. importantly, the addition of a taxon x to a phylogenetic data set on taxa s can lead to re-evaluation of the phylogenetic tree on s; this is the essence of the taxon sampling debate  <cit>  and has recently been the subject of mathematical investigation  <cit> . this problem can be mitigated by the judicious selection of reference taxa and the use of well-supported phylogenetic trees. the error resulting from the assumption of a fixed phylogenetic reference tree will be smaller than that when using an assumed taxonomy such as the commonly used ncbi taxonomy, which forms a reference tree of sorts for a number of popular methods currently in use  <cit> . phylogenetic placement, in contrast, is done on a gene-by-gene basis and can thus accommodate the variability in the evolutionary history of different genes, which may include gene duplication, horizontal transfer, and loss.

this paper describes pplacer, software developed to perform phylogenetic placement with linear time and memory complexity in each relevant parameter: number of reference sequences, number of query sequences, and sequence length. pplacer was developed to be user-friendly, and its design facilitates integration into metagenomic analysis pipelines. it has a number of distinctive features. first, it is unique among phylogenetic placement software in its ability to evaluate the posterior probability of a placement on an edge, which is a statistically rigorous way of quantifying uncertainty on an edge-by-edge basis. second, pplacer enables calculation of the expected distance between placement locations for each query sequence; this development is crucial for uncertainty estimation in regions of the tree consisting of many short branches, where the placement edge may be uncertain although the correct placement region in the tree may be relatively clear. third, pplacer can display both the number of placements on an edge and the uncertainty of those placements on a single tree . such visualizations can be used to understand if placement uncertainty is a significant problem for downstream analysis and to identify problematic parts of the tree. fourth, the pplacer software package includes utilities to ease large scale analysis and sorting of the query alignment based on placement location. these programs are available in gplv3-licensed code and binary form http://matsen.fhcrc.org/pplacer/, which also includes a web portal for running pplacer and for visualizing placement results.

to validate pplacer's phylogenetic placement algorithm we implemented a framework that simulates reads from real alignments and tests pplacer's ability to place the read in the correct location. as described below, a primary focus of this effort is a simulation study of  <dig> cog alignments, where  <dig> reads were simulated from each taxon of each alignment, placed on their respective trees, and evaluated for accuracy. these tests confirm both that pplacer places reads accurately and that the posterior probability and the likelihood weight ratio  both do a good job of indicating whether a placement can be trusted or not. we also use these simulations to understand how the distance to sister taxon impacts placement accuracy.

RESULTS
overview of phylogenetic placement using pplacer
pplacer places query sequences in a fixed reference phylogeny according to phylogenetic posterior probability and maximum likelihood criteria. in bayesian mode, pplacer evaluates the posterior probability of a fragment placement on an edge conditioned on the reference tree topology and branch lengths. the posterior probability has a clear statistical interpretation as the probability that the fragment is correctly placed on that edge, assuming the reference tree, the alignment, and the priors on pendant branch length. because the reference tree is fixed, direct numerical quadrature over the likelihood function can be performed to obtain the posterior probability rather than relying on markov chain monte-carlo procedures as is typically done in phylogenetics  <cit> . in maximum likelihood  mode, pplacer evaluates the "likelihood weight ratio"  <cit> , i.e. the ml likelihood values across all placement locations normalized to sum to one.

because the reference tree is fixed with respect to topology and branch length, only two tree traversals are needed to precompute all of the information needed from the reference tree. from there all likelihood computation is performed on a collection of three-taxon trees, the number of which is linear in the number of reference taxa. therefore the fragment placement component of our algorithm has linear time and space complexity in the number of taxa n in the reference tree . it is also linear in the length of the query sequence, as described in the section on algorithmic internals. note that the fixing of branch lengths in the reference tree is an approximation that permits the linear time operation in n .

the pplacer binary is stand-alone; a single command specifying the reference tree, the reference alignment, a reference statistics file, and the aligned reads suffices to run the core pplacer analysis. pplacer does not optimize sequence mutation model parameters, and instead obtains those values from phyml  <cit>  or raxml  <cit>  statistics output files. when analyzing protein sequences the user can choose between the lg  <cit>  or wag  <cit>  models, and nucleotide likelihoods are computed via the general time reversible  model. rate variation among sites is accomodated by the discrete Γ model  <cit> . for posterior probability calculation, the user can choose between exponential or uniform pendant branch length priors. each pplacer run creates a .place file that describes the various placements and their confidence scores; analysis can be done directly on this file, or the user can run it through placeviz, our tool to visualize the fragment placements. the pplacer code is written in the functional/imperative language ocaml <cit>  using routines from the gnu scientific library   <cit> .

to accelerate placements, pplacer implements a two-stage search algorithm for query sequences, where a quick first evaluation of the tree is followed by a more detailed search in high-scoring parts of the tree. the more detailed second search is directed by pplacer's "baseball" heuristics, which limit the full search in a way that adapts to the difficulty of the optimization problem . the balance between speed and accuracy depends on two parameters, which can be appropriately chosen for the problem at hand via pplacer's "fantasy baseball" mode. this feature places a subset of the query sequences and reports the accuracy of the parameter combinations within specified ranges, as well as information concerning runtime for those parameter combinations. the user can then apply these parameter choices for an optimized run of their data.

quantifying uncertainty in placement location
pplacer calculates edge uncertainty via posterior probability and the likelihood weight ratio. these methods quantify uncertainty on an edge-by-edge basis by comparing the best placement locations on each edge. such quantities form the basis of an understanding of placement uncertainty.

the expected distance between placement locations  is used to overcome difficulties in distinguishing between local and global uncertainty, which is a complication of relying on confidence scores determined on an edge-by-edge basis. this quantity is computed as follows for a given query sequence. pplacer first determines the top-scoring collection of edges; the optimal placement on each edge is assigned a probability defining confidence, which is the likelihood weight ratio  or the posterior probability . the edpl uncertainty is the weighted-average distance between those placements , i.e. the sum of the distances between the optimal placements weighted by their probability . the edpl thus uses distances on the tree to distinguish between cases where nearby edges appear equally good, versus cases when a given query sequence does not have a clear position in the tree. these measures of uncertainty can then be viewed with placeviz as described below.

visualizing placements using placeviz and placement management using placeutil
our package includes tools to facilitate placement visualization and management: placeviz and placeutil. placeviz converts the placement files generated by pplacer into tree formats that are viewable by external viewers. the richest visualizations make use of the phyloxml format  <cit> , which can be viewed using the freely available archaeopteryx  <cit>  java software. less information-dense visualizations are also available in the standard "newick" format  <cit> .

as shown in figure  <dig>  placeviz extends previous work on visualizations  <cit> , representing placement density  and uncertainty  on a single tree. specifically, it draws the reference tree such that the thickness of the branch is a linear function of the number of placements ; the weighted average edpl uncertainty for the placements on the tree is expressed as a color gradient from the usual branch length color  to red, with 100% red representing a user-defined uncertainty maximum. yellow is used to denote edges whose average edpl uncertainty is above the given maximum level. an example placeviz visualization can be viewed interactively at http://matsen.fhcrc.org/pplacer/visualization.html.

placeviz also offers other visualization options, such as individually placing the query sequences on the tree, which is useful for a small number of placements. it also can sort query sequences by their best scoring edge into a .loc.fasta file; inspection can reveal if any specific features of the query sequences lead to placement on one edge or another. this sorting can also group query sequences as potentially coming from similar organisms, even if those query sequences do not overlap.

placeutil is a utility for combining, splitting apart, and filtering placements, which can be useful when doing large scale analysis. for example, when a collection of query sequences are split apart to run in parallel, their placements can be brought back together using placeutil, while checking that they were run using the same reference tree and model parameters. conversely, if a number of samples were run together, they can be split apart again using regular expressions on their names. placements can also be separated by likelihood weight ratio, posterior probability, and edpl.

a pplacer application: psba in the global ocean sampling  database
to demonstrate the use of pplacer for a metagenomic study, we analyzed the psba and psbd gene for the d <dig> and d <dig> subunits of photosystem ii in cyanobacterial and eukaryotic chloroplasts  <cit>  from the global ocean sampling  dataset  <cit> . the gos database is the largest publicly available metagenomic database, and has been the subject of numerous studies. we choose the psba and psbd genes because they are well defined, are found across domains, and can be used to differentiate cyanobacteria from eukaryotic phototrophs in a data set assuming sequence reads are accurately identified  <cit> . in addition, it has been shown in a number of studies that cyanophage virus genomes contain both psba and psbd sequences  <cit> , and that viruses are the source of a substantial number psba and psbd sequences in gos  <cit> . blast searches using either a eukaryotic psba query or a cyanobacterial psba query sequence can yield the same collection of reads from gos with similar e-values - even very low values on the order of 10- <dig> or smaller in some cases . this can make taxonomic assignment even at a high level difficult using blast-based comparisons. the use of pplacer on the closely related psba and psbd genes demonstrates phylogenetic placement on closely related paralogs.

to identify psba and psbd genes in the gos dataset, we performed a hmmer  <cit>  search of the gos dataset using a  <dig> nucleotide reference alignment containing  <dig> reference sequences of cyanobacteria, eukaryotic plastids, and virus. the reference alignment included all possible reference sequences for psba and psbd from published genomes, which is important for confident phylogenetic identification of new clades or strains. a total of  <dig> metagenomic sequences were recruited by hmmer with an e-value cut off of 10-5; these were then placed on the reference tree using pplacer . the expanded region of the trees shown in the figures highlights the prochlorococcus clade, known to be one of the most abundant phototrophs in the global ocean. there are many sequences placed sister to the sequenced representatives but also many sequences placed at internal nodes, that could represent some as yet unsequenced strain of these cyanobacteria.

simulation
simulation experiments were conducted to verify overall accuracy and to determine the relationship between confidence scores and accuracy. the simulation removes one taxon at a time from a given reference tree, simulates fragments from that taxon, then evaluates how accurately the placement method assigns the simulated fragments to their original position. in order to evaluate the accuracy of the placements, a simple topological distance metric is used. we have not simulated homopolymer-type errors in the alignments, because such errors should be treated by a pre-processing step and thus are not the domain of a phylogenetic placement algorithm. furthermore, the emergence of more accurate very high throughput sequencing technology  <cit>  re-focuses our attention on the question of speed rather than error problems. further details are given in the "methods" section.

a broad simulation analysis of pplacer performance was done using  <dig> cog  <cit>  alignments. the cog alignments had between  <dig> and  <dig> taxa, with a median of 41; they were between  <dig> and  <dig> amino acids in length, with a median of  <dig> . reference phylogenetic trees were built based on the full-length gene sequences for each of these genes using phyml  <cit>  and the lg  <cit>  protein substitution model . each taxon from each gene alignment was eliminated one at a time from the reference set as described in "methods"; ten reads were simulated from each, leading to a total of  <dig>  simulated reads, which were aligned to a hidden markov model of the reference alignment. as is commonly done when analyzing a metagenome, the reads were filtered by their hmmer e-value . two normal distributions were used for read length: a "long" read simulation with amino acid sequence length of mean  <dig> and standard deviation of  <dig>  and a "short" read simulation with mean  <dig> and standard deviation of  <dig>  after the hmmer step, the "long" read simulation placed a total of  <dig>  reads, and the "short" one placed a total of  <dig>  reads on their respective phylogenetic trees.

the best resulting maximum likelihood placement edge was compared to the placement with the highest posterior probability to determine how well the confidence scores reflect the difference between accurate and inaccurate placements . both methods provide similar results, implying that the likelihood weight ratio appears to be a reasonable proxy for the more statistically rigorous posterior probability calculation, although posterior probability does a slightly better job of distinguishing between accurate and inaccurate placements for the short reads. overall, accuracy is high and there is a strong correlation between likelihood weight ratio, posterior probability, and accuracy. many of the placements were placed with high confidence score and high accuracy in large and small trees . reads from more closely related taxa are easier to accurately place than more distantly related taxa , although good placement is achieved even when sequences are only distantly related to the sequences in the reference tree.

error analysis for the cog simulation with the error metric described in the text. as in figure  <dig>  simulated reads had a normally-distributed length with a mean of  <dig> amino acids, and a standard deviation of  <dig>  this table pools the results, and shows mean  and standard deviation  of the error, the fraction placed correctly , and the number of reads placed for pplacer run in maximum likelihood  and posterior probability  modes. for example, the "ml" columns in the row labeled  <dig> - <dig>  shows error statistics for all of the reads in the simulation that had likelihood weight ratio between  <dig>  and  <dig> : there were  <dig> such reads of which 32% were placed correctly, and the corresponding error mean and standard deviation of about  <dig>  and  <dig> , respectively. this table demonstrates the effectiveness of the confidence scores- as the confidence scores increase, the error decreases. we note that the ml and pp methods have very comparable performance for this length of read, and thus the quickly-calculated ml weight ratio can act as a proxy for the more statistically rigorous posterior probability calculation.

similar analysis as table  <dig>  but with a normally-distributed length with a mean of  <dig> amino acids, and a standard deviation of  <dig>  in this case, the posterior probability calculation shows slightly superior ability to distinguish between accurate and inaccurate placements than the likelihood weight ratio.

discussion
likelihood-based phylogeny is a well developed way to establish the evolutionary relationships between sequences. phylogenetic placement is a simplified version of likelihood-based phylogenetic inference that enables rapid placement of numerous short query sequences and sidesteps some of the problems inherent in applying phylogenetics to hundreds of thousands or millions of taxa. phylogenetic placement is by no means a replacement for classical phylogenetic inference, which should be applied when query sequences are full length and moderate in number.

phylogenetic placement software sits in a category distinct from taxonomic identification software such as megan  <cit>  or phymm  <cit> . first, phylogenetic placement software does not assign names to query sequences, and instead returns an assignment of the query sequences to edges of a phylogenetic tree. second, phylogenetic placement is designed to work with a single reference phylogenetic tree built on a single alignment. thus it is well suited for fine-scale analysis of query sequences to provide detailed comparative and evolutionary information at the single gene level. this poses no problems when looking at a single marker gene such as such as  <dig> s, but some scripting and automation is necessary when there are many genes of interest. these challenges are somewhat mitigated through program design and pipeline scripts  <cit> , but phylogenetic placement methods may always require more work than general purpose taxonomic classification software.

phylogenetic placement is also different from packages that construct a phylogenetic tree de novo in order to infer taxonomic identity by clade membership. such packages, such as carma  <cit>  and sap  <cit> , combine sequence search, alignment, and phylogeny into a complete pipeline to provide taxonomic information for an unknown query sequence. because different query sequences will have different sets of reference taxa, these methods are not phylogenetic placement algorithms as described above. also, because they are performing a full phylogenetic tree construction, they either use distance-based methods for faster results  <cit>  or are many orders of magnitude slower than phylogenetic placement methods  <cit> .

pplacer is not the only software to perform likelihood-based phylogenetic placement. the first pair of software implementations were the "phylomapping" method of  <cit> , and the first version of the "mltreemap" method of  <cit> . both methods use a topologically fixed reference tree, and are wrappers around existing phylogenetic implementations: protml  <cit>  for phylomapping, and tree-puzzle  <cit>  for mltreemap. neither project has resulted in software that is freely available for download . also, by using a general-purpose phylogenetic computing engine, they miss on opportunities to optimize on computation and the resulting algorithm is not linear in the number of reference taxa. both methods equip placement with a statistically justifiable but non-traditional confidence score: phylomapping adapts the rell bootstrap  <cit>  to their setting, and mltreemap uses the "expected maximum likelihood weight ratio," which has been discussed in  <cit> . amphora also uses a hybrid parsimony and neighbor-joining strategy to place query sequences in a fixed reference tree  <cit> .

the only other software at present that performs likelihood-based phylogenetic placement at speeds comparable of pplacer is the independently-developed "evolutionary placement algorithm"   <cit>  available as an option to raxml  <cit> . pplacer and the epa both cache likelihood information on the tree to accelerate placement, and both use two-stage algorithms to quickly place many sequences. the two packages use different acceleration heuristics, but only pplacer offers guidance on parameter choices to use for those heuristics via its "fantasy baseball" feature as described below in the section on algorithmic internals. the epa allows for one parameter more flexibility than pplacer for branch length optimization, and can perform placement on partitioned datasets and inference on binary, rna secondary structure, and multi-state data. the epa offers single-process parallelization  <cit>  . the epa leverages the efficient memory representation of raxml, such that an equivalent run using the gamma model of rate variation will use half the memory of pplacer, and a run using the cat approximation will require one eighth of the memory. the epa comes without a visualization tool such as placeviz, although it can be visualized if run on their webserver, or within the new mltreemap suite of perl scripts for visualization  <cit> .

we have compared the performance of epa and pplacer in a study designed jointly by ourselves and the authors of  <cit> . pplacer and the epa showed comparable speed in placing metagenomic reads on reference trees of different sizes . for accuracy, we simulated from the  <dig> s alignments used for accuracy evaluation in  <cit> . as in their paper, we simulated nucleotide reads of normally distributed length with mean  <dig> and standard deviation  <dig>  the error was evaluated using the same topological error metric in two ways: first, the error of the placement with the highest likelihood , and second, the total error weighted by the normalized likelhood weights . each program was run with the four-category gamma model of rate heterogeneity. there was no clear difference in accuracy between epa and pplacer for these alignments with either of these ways of evaluating the error. this is despite the fact that the "correct" placement was chosen to be that assigned by the epa with the full length sequence.

in contrast to the epa, pplacer placements all sit on a single reference tree with its associated branch lengths fixed. thus it is easy to compare the relative location of placements, and to consider all placements on a single tree. placement locations along a branch are useful in cases such as classification, where a placement close to the root of a clade may be assigned membership to that clade, whereas placements in the middle of the same edge may not. the epa, on the other hand, optimizes the length of the branch of the reference tree as well as the placement location along that branch; thus each placement is done onto a slightly different reference tree. presumably because the placement location does not happen on a single reference tree, the placement location is not reported by the program and this information is lost  <cit> .

we did not compare the raxml parsimony insertions wrapped by amphora to these likelihood placements, because we would be scoring a parsimony insertion algorithm according to the original positions in a maximum-likelihood tree. the difference between these optimality criteria would naturally lead to some differences, which would be viewed by the scoring metric as error. the innovative bootstrap-based taxonomic assignment procedure in the amphora package produces a name rather than a phylogenetic placement, and thus cannot be directly compared to the output of pplacer.

CONCLUSIONS
pplacer enables efficient maximum likelihood and posterior probability phylogenetic placement of reads, making likelihood-based phylogenetics methodology practical for large-scale metagenomic or  <dig> s survey data. pplacer can be used whenever a reference alignment and phylogenetic tree is available, and is designed for ease of use for both single-run and pipelined applications. "baseball" heuristics adapt to the difficulty of the phylogenetic placement problem at hand, and come with features which guide the user to an appropriate set of parameter choices. the edpl metric helps users decide if edge uncertainty is a substantial problem for downstream analysis. pplacer offers tightly integrated yet flexible visualization tools which can be used to view both the placements and their uncertainty on a single tree. large-scale simulations confirmed the accuracy of the pplacer results and the descriptive ability of the confidence scores. pplacer is freely available, comes with a complete manual and tutorials, and can be used via a web service.

pplacer forms the core of a body of work we are developing to facilitate and extend the utility of phylogenetic placement methodology. we have shown recently  <cit>  that phylogenetic placements  fit perfectly into a statistical framework generalizing weighted unifrac  <cit>  allowing for statistical comparison and visualization of differences between samples. in collaboration with another group, we have also implemented a preliminary version of software which automates the selection of appropriate reference sequences, as well as the assignment of taxonomic names based on phylogenetic placements.

