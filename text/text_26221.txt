BACKGROUND
even years after the sequencing of the human genome, its annotation is far from complete. the current scale-up phase of the encode project aims to bring us closer to this goal in a collaborative effort between research groups across the world. the output of the gencode project within this framework  <cit> ,  <cit>  is a set of genes assessed by a number of different methods and considered to be a reference set for other genome analysis. this set includes protein-coding loci with alternative isoforms, non-coding loci with transcript evidence, and pseudogenes. gencode includes ccds project annotation  <cit>  and its output has become the human gene set displayed in ensembl  <cit> . eight groups in europe and the us directly contribute data to this project along with numerous additional sources of evidence used for the annotation.

like any large-scale project, the project and data management of gencode require substantial effort to allow sufficient progress within the given time frame. it requires specialized software solutions to allow the tracking of different types of annotation and addition of complementary pieces of information over time. various project management and error tracking programs exist, but the requirements are more specific here:

• information about genomic localisations needs to be stored in a consistent and searchable way

• the hierarchy between loci, transcripts and exons should be represented

• the different transcripts need to be tracked through a defined process of prediction, annotation and verification

• multiple heterogeneous data sources have to be integrated

• various annotation problems should be flagged and then resolved using controlled terms

we could not identify existing software that would allow us to accomplish all these goals. software in use for similar projects are the genome reference consortium report system  <cit>  and the mouse genome annotation report system  <cit>  which are based on the jira  <cit>  software. however they haven't been developed to offer an interface rich enough for example to allow the user to quickly find selected types of problems or regions of interest, to use controlled problem descriptions and solutions, and to monitor all past changes. these systems are also not available as open source projects unfortunately. here we therefore describe the development and application of annotrack, a data tracking system for genome annotation with the hope that similar projects can use and build on it.

implementation
annotrack's user interface and underlying database is based on an open-source ticketing system called redmine  <cit> , a community-organized ruby on rails project.

there a number of other good open-source tracking systems available, e.g. rt  <cit> , bugzilla  <cit> , trac  <cit> . the main functionality of tracking issues from projects through a defined flow is the same between all of these. our choice of redmine was based on the framework  and the possibility to easily modify major parts of the system.

most of redmine's functionality of data tracking, user management and user interface is still in use in annotrack. the following changes and additions have been made with a genome-annotation specific focus. the concept of issues or tickets  belonging to projects  has been replaced by the concept of transcripts belonging to a genomic locus. fields and logic to store genomic locations were added to both levels. as an additional layer "subfeatures" have been introduced to describe coding exons or other parts of transcripts. the option to highlight specific features in the system has been re-introduced as a flexible concept of "flags" .

where possible changes have been introduced encapsulated in form of a plugin separated from the original redmine code. a perl api  has been developed as an abstraction layer on top of the database. this provides an easy and safe way to insert and query tracking data. annotrack's perl scripts use the higher-level functions provided by this api to integrate heterogeneous data sources and perform data updates and analysis.

RESULTS
data integration
all gencode partners are providing real-time access to their annotation and analysis results via das servers . das defines a protocol for client-server communication heavily used in the bioinformatics community  <cit> . a single client can integrate annotation data from multiple distributed servers on a common coordinate system. the application of das to supply genome-wide annotation on this scale is new, however, and poses challenges concerning the number of features, the different annotation formats and the interconnection between them. we addressed these issues by

• querying the genome in windows of  <dig> kilobases and filtering out duplications from features overlapping the borders

• specifying a tight format with a verification web script  <cit>  of the data served by the projects' das servers, based of the most recent das specifications of the time 

• setting up data parsers and analysis modules for the specific types of annotations  and data access .

das servers and other data sources  are accessed by the annotrack system using automated perl scripts in regular intervals; their data is compared to existing annotation and integrated into the database . this includes comparing the genomic coordinates as well as the textual descriptions. specific tags are assigned to the features, indicating the status within the whole process . the software identifies disagreements between new and existing data and flags these cases using different levels of priority. alternatively flags can be set using the web interface or flat files.

accessing the data and resolving conflicts
the typical flow of information to resolve differences in annotrack is outlined in figure  <dig>  the web interface is the main entry point to the system for users. the list of entries can be reviewed and filtered or searched for specific keywords, status information or genomic location. new flags can be set and existing ones can be reviewed. flags are manually resolved by annotators using controlled vocabulary or automatically resolved if the next data update does not trigger the same conflict. the solution can either be an update of the existing annotation using the new external evidence or a rejection of the external data. date and user information is automatically stored as a history. along with general statistics per chromosome or category generated by annotrack, the information on resolved flags is also used to monitor the progress of the entire annotation project itself.

specific flags can also be set to select transcripts for the experimental verification pipeline  within gencode. the list of verify cases and the results can be browsed specifically. high priority transcripts as well as the verify cases are read by one of our das servers and can be displayed in the annotation software and other systems. resolved problems also feed back into the general genome annotation process itself.

typical workflow
a typical workflow example for an annotator is shown in figure  <dig> and can be described like the following: existing manual annotation was analysed with an external computational pipeline by a collaborator. dubious splice sites were detected and loaded as a defined sets of flags into annotrack using the annotation ids with an annotrack parser module set up to read tab-delimited files. an automated script will pick up the new flags in the database, raise the priorities of transcripts affected and update the statistics. an annotator working on human chromosome  <dig> can filter the list of annotrack entries to show all "splice" flags in the region . selecting one of the transcripts shows more details . the annotator would now view and edit the actual annotation externally and update the transcript's splice sites if he/she agrees with the suggestion. clicking on the "accept" or "decline" icons on the annotrack transcript page will load a screen showing all controlled terms applicable, e.g. "annotated_splicing_corrected" . the history of the transcript will display all changes to the transcript and give the annotator the option to add additional comments . summary statistics can be shown to monitor which problems were resolved in what ways 

using the software
the system is designed to work with any project where there are one or more sets of gene annotations with identifiers and genomic coordinates and other analysis referring to these using either lists of ids or the same coordinate system. where required, instead of the gene-transcript-exon organisation, all transcript-level entries can be linked to one categorical gene entry and sub-features can be omitted. links and gene model image sources  can be defined in the settings. additional instructions on how to set up annotrack for a new annotation project are given on the website. running the system does not require knowledge of the redmine code or ruby programming skills, but adjustments to parsers will require knowledge in perl.

CONCLUSIONS
during the last year annotrack has proven to be a valuable tool to organize the data-intensive task of genome annotation using various data sources and prioritize datasets where manual annotators should re-visit the annotation. more than  <dig> issues have been resolved this way in the last year. the information of how the cases were solved helps to improve the data-generating methods and is also used to analyze the progress of the gencode project itself. providing access to the tracking data of some of the manual annotation underlying the gencode/ensembl gene set used here also gives researchers working with these gene sets the chance to quickly learn about known problems or additional information that might be of interest to their research. feedback from its users is continuing to help improve the application. future improvements will address better response time , automation of additional tasks  and creation of further report pages about the progress.

the abstraction and modularity allows the system to be easily adapted and should be of interest to groups working on similar tasks. besides the main installation described here we have already set up tracking systems internally in a similar way to assist with the annotation of the zebrafish and mouse genomes. the main benefits of this approach are the possibility of

• highlighting different problems occurring during genome annotation

• identifying and displaying conflicts within the data along with annotation information at the particular locus

• providing mechanisms to resolve these conflicts using controlled terms

• recording a history of all changes and monitoring the overall progress

• enabling the analysis of how issues where resolved in order to improve the annotation and the external analysis at the same time

the perl api is documented, data and all source code is available as open source software on our website along with general documentation and screen shots.

availability and requirements
- project name: annotrack.

- project home page: http://annotrack.sanger.ac.uk

- operating system: independent, tested on unix and mac os x

- programming language: ruby , perl 

- other requirements: mysql database ; rails , bioperl , ensembl perl api . please refer to website for full listing.

- license: open source gnu gpl 2

- any restrictions to use by non-academics: none

authors' contributions
fk designed and implemented the annotrack system, jh and th conceived and advised, all authors read and approved the final manuscript.

