BACKGROUND
high-throughput gene interruption projects have greatly increased the number of loss-of-function knockout genes available for study  <cit> . correct identification of these genes provides a necessary foundation for their use for biomedical discovery, including minimizing the number of time-consuming phenotype experiments that need to be undertaken. until recently, interrupted knockout genes have been identified primarily using the alignment program blast  <cit>  to match gene trap sequence tags, which represent the region of an interrupted gene near the site of disruption, with gene transcripts. while transcript identification can generally provide high confidence gene annotation information for over 75% of such knockouts  <cit> , transcript databases do not provide full coverage of the genome, limiting the number of genes that can be identified. redundancy in transcript databases also makes it difficult to obtain a unique identification for sequence tags, which are relatively short.

sequence quality can also be an issue with gene trap sequence tags, since the prevalent method of generating these tags often results in relatively low-quality sequence. baygenomics  <cit>  and other members of the international gene trap consortium   <cit>  typically use 5' race  <cit> , a common method for amplifying sequence from gene insertion events. this method generates sequence from only one strand of dna, and often generates only relatively short sequences, with sequencing errors accumulating especially towards the 3' end. to obtain sequence tags that are sufficiently long to uniquely identify most genes, baygenomics, for example, uses a limit for the acceptable quality of a base call that is lower than the generally accepted threshold   <cit> . the consequence of using such a low threshold is that nucleotides are assigned incorrectly somewhat more often than with the default threshold value. this problem can interfere with annotation.  additionally, sequence tags generated by 5' race occasionally have non-templated nucleotides at their termini  <cit> . in one large-scale 5' race experiment, only 57% of clones generated sequences that were sufficiently long and unambiguous to be identified by alignment with a gene transcript  <cit> .

as curation of the mouse genome has improved, direct localization has become the strategy of choice for associating sequence tags with specific genes. this has an advantage in minimizing imprecise and confusing annotations arising from redundancy in mrna databases. moreover, this approach reflects the biological reality of the insertion of a reporter gene into genomic sequence and provides a more context-based view of the gene by associating it with the many types of information available at the genome browser web sites.

the choice of alignment program is a major consideration in localizing sequences on the genome. blast, which was developed for comparison of evolutionarily diverged sequences, is prohibitively slow in this application. several newer algorithms have been developed to rapidly align nearly identical sequences. implementations in common use are megablast  <cit> , the sequence search and alignment by hashing algorithm   <cit> , and the blast-like alignment tool   <cit> . each is currently in use at one of the primary genome browser sites and, in addition, each is available for stand-alone use. megablast is used at the national center for biotechnology information   <cit> , ssaha is used at ensembl  <cit> , and blat is used at the university of california santa cruz   <cit> . while all of these algorithms have been individually benchmarked for the genome browsers with which they are used, their performance with sequence tags has not been established, nor have the results from the stand-alone versions of these programs been compared with the gene annotations available at the genome browser sites. establishing the effect of low quality and short sequence length on gene localization protocols is beneficial to research groups that work with gene tag and similar sequences, including other types of expressed sequence tags  or genomic tags.

megablast is similar to blast in that it splits a query sequence into non-overlapping fragments and searches for exact matches to the genome to find the regions of highest identity. these perfect matches are then expanded to align the longest region of significant similarity. megablast uses a greedy algorithm that incorporates simplified gap and insertion/deletion penalties relative to blast and limits the number of alignments to be explored in extending the alignment beyond a perfect match seed. these alterations are justified because of the high levels of similarity expected between query and database sequences and the expectation that the alignment will not contain many mismatches or gaps. for sequences with greater than 97% identity, megablast is an order of magnitude faster than blast without any loss of alignment accuracy  <cit> .

ssaha uses a different approach to take advantage of the high similarity expected between a query sequence and the genome. an index of all non-overlapping fragments of a set length  is created from the genome sequence and stored with the associated positions. the query sequence and its reverse complement are broken into all possible fragments of length k, including overlapping fragments, and compared with the genome index to identify exact matches. matches are sorted to find contiguous matching segments that are reported if they exceed a threshold, set by default to 2k. ssaha is extremely fast, but due to the need to store the genome index and fragment locations, has relatively large memory requirements.

blat uses a multi-stage algorithm which searches for regions of similarity, aligns those regions, aggregates aligned regions in close proximity, and adjusts the boundaries of aligned regions to correspond with canonical splice sites. the initial search stage operates in a manner very similar to ssaha. the genome database is broken into non-overlapping fragments of length k, then all k-length fragments of the query sequence and its reverse complement are associated with matching locations in the genome. the matches are sorted and grouped by proximity and those regions of the genome with a minimum of 2k contiguous matches are aligned with the query sequence. the alignment stage extends matching regions as far as possible, merges overlapping matches, links matches that fall in order on the genome into a single alignment, and fills in regions of the alignment corresponding to gaps of identical length in the query and genome sequences. positions of gaps in the alignment, which may correspond to introns, are matched to the consensus splice site gt/ag whenever possible.

the work reported here provides a comparison of the performance of the stand-alone versions of ssaha, megablast, and blat for a set of mouse gene trap sequence tags. the sequence tags were generated through untargeted gene-trap experiments, which detect instances where the insertion vector interrupts an intron of a gene expressed in embryonic stem cells  <cit> . as the genome coordinates of our sequence tags are not known, the localizations of their cognate genes were used as a proxy. these genes were identified by using the blast program to align the sequence tags with gene transcripts .

the genome coordinates of many genes in the mouse genome are defined differently depending on which genome browser site provides the information. this is because each browser uses a different combination of localization programs, sequence analysis tools, and manual curation to arrive at their final annotations. additionally, the localization program used in the annotation protocol may differ from the localization program provided to users of the genome browser. for example, ensembl uses the exonerate program  <cit>  to generate localization coordinates reported at their site. however, when a user seeks to localize a gene at the ensembl site, the ssaha algorithm is used to perform that task. this differs from ncbi and ucsc, where the localization algorithms used to generate annotations for the genome, megablast and blat respectively, are also used by the genome browser to localize sequences input by users. in order to provide a fair comparison between the algorithms, only sequence tags matched with genes having exactly the same coordinates at ensembl, ncbi, and ucsc were used in this study. to determine whether errors in the localization of sequence tags using the stand-alone versions of these programs was due to the nature of the sequence tags themselves or to differences in how the stand-alone programs perform relative to the protocol in which they are used to localize full-length genes at each browser site, we also localized the set of gene transcripts matched with sequence tags as a control. our sequence set consisted of  <dig> sequence tags associated with  <dig> genes with uniformly assigned coordinates on the mouse genome.

RESULTS
our results show differences in the localization performance with respect to recall and precision at each of three levels of granularity investigated, gene, exon, and nucleotide . the recall score indicates the percentage of true positives that were detected. precision indicates the percentage of matches reported which correspond to true positives.

localization to the correct gene
with respect to recall, our study shows that researchers who wish to link a sequence with information associated with the genome may confidently use any of the three localization programs considered in this study. ssaha, megablast, and blat successfully localize each of the  <dig> full-length genes in the test set to a genomic region that fully or partially matches the known coordinates of the corresponding gene . sequence tags fare nearly as well, with all programs reporting localization to the correct region of the genome for >98% of the  <dig> sequence tags used in this study.

repeat-masking of the genome accounts for the majority of the small number of failures in localizing sequence tags to the correct genes. online localization is performed against masked genomic sequence by default as this ensures that results are returned quickly and that relatively few correct localizations are missed, despite the fact that as much as 50% of the genome consists of repeated elements  <cit> . in this study, less than 2% of sequence tags in the test set returned no localization results with one or more programs because they overlap fully or partially with regions removed by masking. additionally, five sequence tags that localize to repeat regions have erroneous matches that exceed the minimum score required by each program, and so are localized incorrectly. in contrast, use of an unmasked version of the genome results in 100% recall for the test set of sequence tags, but increases the number of incorrect localizations by as much as ten-fold. moreover, using an unmasked version of the genome increases computation time substantially .

a reported computation times for ssaha and blat do not include pre-indexing of the genome .

b results using the repeat-masked genome are listed first, followed by results from the unmasked genome in parenthesis.

in contrast to the near-perfect recall exhibited by the localization programs, the precision of the programs suffers from a substantial incidence of false positives . at the genic level, 46% of all reported full-length gene localizations and 16% of sequence tag localizations by ssaha do not overlap with the known gene localization. for megablast, 43% of reported gene localizations and 15% of sequence tag localizations are false positives. blat shows similar performance, with 38% of reported gene localizations and 15% of sequence tag localizations falling outside the region of the known gene. generally, the false positives score significantly lower than the true positives.

false positives at the level of the gene may not be problematic, however, since the most common method of interpreting localization results is to accept the highest-scoring match as correct rather than analyzing all returned matches. correct localizations generally exhibit long, high percent-identity matches, which contribute to higher scores compared with incorrect matches, which are generally short or contain mismatches. the strategy of taking the top hit is largely successful with both full-length gene queries and sequence tag queries . the ssaha localization with the highest score is almost always correct, as it overlaps with the known localization of a gene for 99% of full-length gene queries and 98% of sequence tag queries. the megablast localization with the highest score is correct for 93% of full-length gene queries, and 95% of sequence tag queries. the blat localization with the highest score is correct for 99% of full-length gene queries and 99% of sequence tag queries.

erroneous matches are also less likely to group together on a chromosome than correct matches, which track with exon ordering. while all three programs report matches grouped by chromosome, only the blat algorithm incorporates matches in close proximity into a single multi-part alignment, which is given a score that combines the scores of the individual matches in the alignment. this ensures that the top-scoring match is a composite of all matches likely to be exons of the same gene. another consequence of this grouping is that the scores of correct and incorrect matches are more widely separated than with ssaha or megablast.

pseudogenes
the presence of pseudogenes can confound rules for separating correct from incorrect matches at the genic level for both full-length genes and sequence tags. pseudogenes are regions of the genome that are very similar in sequence to known genes, but are usually rendered non-functional by mutations or missing elements that prevent transcription or translation. about 80% of pseudogenes are processed pseudogenes, which resemble partial or full-length mrna sequences that have been integrated into the genome  <cit> . these are caused by the retrotransposition of double-stranded dna, read off of single-stranded rna, into the genome. as processed pseudogenes lack introns, alignments can be constructed between pseudogenes and query sequences that are longer than individual exons. such alignments may be sufficiently long that penalties accrued for mismatches are more than offset by this longer match length, allowing them to outscore correct matches to exons. in the case of our sequence tags, these alignments are invariably incorrect, since with our method of gene trapping, disruption of a gene is only detected when the vector is inserted into an intron  <cit> . figure  <dig> gives an example that illustrates the difficulty in distinguishing localization to a processed pseudogene from localization to a true gene. more rarely, pseudogenes can be caused by duplications of chromosome segments. these unprocessed pseudogenes contain introns and are therefore less likely to result in high-scoring  matches based on alignment length alone. in addition, a recent duplication can result in a pseudogene with so few mutations that it may be difficult to distinguish it from the coding gene. although it is possible for a gene-trapping vector to insert into an unprocessed pseudogene containing introns, none were detected in our data set, and thus all localizations to pseudogenes were considered false positives.

as shown in figure  <dig>  genic localization is compromised by the presence of pseudogenes to varying degrees. ssaha identifies only exact matches, rather than very similar matches, lending the algorithm a distinct advantage in terms of distinguishing correct matches from pseudogene matches. blat alignments can contain mismatches accrued during the alignment extension stage, which increases the likelihood of a high-scoring match to a pseudogene. however, the blat score reflects all matches in a region of the genome so that short perfect or near-perfect exon matches in aggregate are likely to outscore longer imperfect matches to pseudogenes. megablast is the most susceptible to pseudogene matches, as it is relatively tolerant of mismatches and does not have a mechanism for favoring short perfect matches over long imperfect ones.

in this study, pseudogenes may have been the cause of over  <dig> top-scoring matches that are incorrect, despite high sequence identity between the query sequences and the genome. it is difficult to determine the exact number of incorrect localizations to pseudogenes as relatively few mouse pseudogenes have been annotated. as many as  <dig> mouse pseudogenes are predicted to exist  <cit> , and in the closely related human genome, a careful study of an early build of chromosome  <dig> revealed that 19% of sequences defined as coding likely belong to pseudogenes instead  <cit> . the distribution of pseudogene matches among the programs varies as might be expected from their algorithmic differences. ssaha reports a top-scoring match to a region annotated as a probable pseudogene for  <dig> full-length genes and  <dig> sequence tags, while blat incorrectly localizes  <dig> genes and  <dig> sequence tags to probable pseudogenes. megablast reports top-scoring matches to probable pseudogenes for  <dig> genes and  <dig> sequence tags.

localization to the correct exon
with respect to recall, all three algorithms perform similarly well in localizing query sequences to the exons of their corresponding genes. for full-length gene queries, ssaha, megablast, and blat all have exon recall of about 99% . the sequence tags used in this study are generally substantially shorter than the full-length genes, averaging  <dig> nucleotides in length, versus  <dig> nucleotides for genes, and it is rare that all exons of a gene will be matched in a sequence tag alignment. thus, exon and nucleotide recall for sequence tag queries should be viewed in a comparative manner, rather than as a direct measure of the accuracy of each algorithm. ssaha detects 22% of control exons, megablast detects 22% of control exons, and blat detects 23% of control exons.

many of the exons that are not detected overlap with regions of the genome removed from the search space by repeat masking. two examples of the effect of repeat masking on exon localization are illustrated in figure  <dig>  which depicts the genome alignment of the full-length gene encoding chromatin assembly factor  <dig>  subunit a , ncbi accession nm_ <dig>  and the sequence tag bg-rrr <dig>  each program localizes nm_ <dig> to the left-most exon shown in figure 3b by detecting perfect matches on either side of the repeat mask region. blat connects these matches because its default parameter settings allow alignments adjacent to a masked region to be extended into the masked sequence while ssaha and megablast, whose default settings do not allow alignment to masked regions , show the masked region as a gap. the middle exon in figure 3b does not contain enough unmasked sequence for any algorithm to seed a match, and is thus entirely undetected.

precision in exon localization is similar for full-length genes and sequence tags, despite the discrepancy in the number of exons matched by the two query types . this indicates that although the short sequence tags do not contain regions matching all exons of their cognate genes, those with adequate length to be associated with a unique transcript generally contain sufficient information to be localized with high precision. for genes, 78% of ssaha localization results overlap with known exons, compared with 85% for sequence tags. megablast has exon precision of 86% for genes, and 87% for sequence tags. blat has exon precision of 75% for genes, and 76% for sequence tags. very rarely, the coding region of a gene contains an intron so short that megablast will align through it, including the intron in the alignment. this results in errors for four genes in the control set which contain introns of either  <dig> or  <dig> nucleotides in the upstream untranslated region. as a source of error, this had only a minimal effect on the overall precision for megablast and had no effect on the results for blat and ssaha.

an interesting result that is not reflected by measures of recall and precision is that each program occasionally returns multiple correct localizations to the same exon. the full-length genes used in this analysis average  <dig>  exons, but each program averages more than  <dig> correct localizations per gene. ssaha returns  <dig>  localizations per gene, with each localization corresponding to an exon or a false positive. on average,  <dig>  of these aligned segments overlap with  <dig>  exons. megablast returns  <dig>  localizations per gene, with  <dig>  of them correctly identifying  <dig>  exons. blat returns  <dig>  localizations per gene, with of them  <dig>  correctly identifying  <dig>  exons. multiple localizations to a single exon can occur because masking or mismatches within exons can split what should be one long matched segment into two or more smaller alignments. in addition, blat can generate more than one localization to the exact same region of the genome, as illustrated in figure 3c. this is a known idiosyncrasy of the blat program, and is resolved at the ucsc genome browser web site by removing such repeat matches  <cit> . this problem results in no appreciable increase in exon or gene recall compared to ssaha and megablast, and also no great loss in precision, as most duplications appear to provide a correct localization . although we cannot ascertain with certainty how many exons and partial exons each sequence tag spans, we expect that they too generate multiple localizations to a single exon.

localization to the correct nucleotide
as expected, the greatest variation in the localization results reported by the three programs is at the nucleotide level . recall is diminished for ssaha and megablast, but remains high for blat. ssaha detects 77% of control nucleotides for gene queries and 7% for sequence tag queries, megablast detects 89% of control nucleotides for gene queries and 9% for sequence tag queries, and blat localizations detect 93% of control nucleotides for gene queries and 9% for sequence tag queries . again, recall for sequence tags is so low only because these represent short fragments of genes and so do not contain sufficient information to allow matching a large proportion of the nucleotides comprising the cognate genes.

diminished recall at the level of individual nucleotides reflects several types of problems, including failure to match to very short exons, misalignment over gaps, and errors in either the query or the genome sequence. the principal cause, however, is difficulty in aligning sequence, using either genes or sequence tags as queries, at the edges of exons. although failure to accurately align a query to genomic sequence at the edges of exons only slightly lowers the recall levels for each program, each of the three algorithms compared in this study exhibits characteristic problems in localization at the edges of exons, as illustrated in figure 3c. figure  <dig> provides a summary of the performance of each algorithm in exactly matching exon boundaries.

ssaha correctly matches only 6% of exon boundaries, and only  <dig> % of exons  are perfectly matched at both exon edges. the reason for this is that the algorithm splits the genome into non-overlapping fragments that may or may not correlate with exon boundaries. if the edge of an exon does not overlap with an indexed fragment of the genome with a length sufficient to meet the threshold for reporting a match, that fragment will not be included in the match that is returned. thus, in figure 3c, ssaha fails to align  <dig> nucleotides of both the full-length gene and the sequence tag bg-rrr <dig> at the 3' edge of the exon because the match does not meet the minimum length of  <dig> nucleotides. similarly, small gaps or mismatches that often occur at the ends of sequence tags can interrupt a match, resulting in a minimum loss of  <dig> nucleotides in the match alignment. 

in contrast to ssaha, megablast often extends alignments beyond the edges of exons. megablast localizations align up to, but not beyond, exon boundaries in 35% of attempts, with only 11% of exons receiving perfect alignments at both edges. moreover, the algorithm generates the longest alignments possible, making no attempt to ensure that each nucleotide in the query sequence is matched only once. thus, megablast may extend a match beyond the edge of an exon whenever the adjacent intronic sequence coincidentally matches the query sequence .

blat localizations are the most likely to correctly match exon edges, due to the extra steps the algorithm takes to compute correct exon splice sites and match each nucleotide in the query sequence only once. blat localizations match exon edges in 87% of attempts, with 79% of exons perfectly aligned at both edges. it is possible that these rates are slightly inflated by counting multiple overlapping correct localizations that occurred in our automated analysis . even so, blat has a clear advantage over ssaha and megablast in regard to correct identification of exon boundaries.

with respect to precision at the nucleotide level, ssaha performs the best, achieving the correct localization 92% of the time for both genes and sequence tags. precision for megablast and blat is also high, with 85% of both sequence tag and full-length gene localizations matching control nucleotides.

algorithm speed
computation times were collected for each localization run. all sequence tags or full-length genes were passed to the localization program as a single file in fasta format  <cit>  . localizations performed with the unmasked genome were not used in the preceding analysis as this had generally only a small negative effect on recall, but had a large negative impact on precision and analysis speed.  ssaha was the fastest program by about five-fold. megablast and blat were comparable in speed, with blat showing an advantage in aligning longer sequences, and megablast performing more quickly with shorter sequences. not shown in the table is the time required for genome indexing, required by both ssaha and blat. this step requires  <dig>  seconds for ssaha, and  <dig>  seconds for blat, but needs only be run once per genome build.

CONCLUSIONS
overall, analysis of stand-alone versions of the three localization algorithms, ssaha, megablast and blat, show that all perform well in localizing both full-length genes and sequence tags to the mouse genome. the differences in performance for sequence tags and full-length reference sequences were surprisingly small, with no program exhibiting significantly diminished performance with sequence tags, despite their generally low quality when compared with full-length reference sequences. while recall and precision performance differ minimally among the programs at the level of gene and exon localization, at a more detailed level, and focusing especially on nucleotide recall, greater variations are found, with different types of characteristic errors associated with each program. therefore, the choice of the appropriate localization program depends on the specific purpose of the researcher.

as localization to a general region of the genome is performed equally well by all three programs, considerations such as the ease of use of the program and computational speed may become important considerations in choosing which program to use. ssaha is the fastest program and has the simplest output, so it would seem to be a natural choice for localizing large data sets for general purposes. for automated applications requiring correct localization at the nucleotide level, such as snp detection or evaluation of alternative splicing, blat is currently the best option, as it is distinctly better at aligning the edges of exons. additionally, the process by which blat groups together proximal matches improves the separation between the scores of correct and incorrect matches, increasing confidence in the result. these advantages come at a cost of speed, with blat being significantly slower than ssaha, though comparable in speed with megablast. for our purpose of localizing gene trap sequence tags to the mouse genome, blat was chosen as the program to incorporate into our local annotation pipeline, although use of multiple programs may eventually be implemented to ensure the highest levels of recall and precision.

