BACKGROUND
ever since its discovery by nirenberg and matthaei  <cit> , the structure  <cit>  and evolution  <cit>  of the genetic code from nucleotide triplets in dna to amino acid residues in proteins has been studied extensively. in structure-based studies--in terms of a snapshot of what codes to what--similar codons have for instance been found to be associated with amino acids with similar properties  <cit>  and amino acids with simple structures are typically coded by more codons  <cit> . however, amino acids may be grouped with respect to several different properties, and it is difficult to quantitatively judge the relative and actual relevance of these properties. by studying the effective evolutionary dynamics of codons and amino acids one avoids this problem. in dynamic-based approaches the substitution process is often modeled as a markov chain, where the distribution of substitutions of a given residue is independent of neighboring residues as well as prior residues at the same site. these assumptions are clearly not strictly correct, but are still meaningful as approximations. dayhoff and coworkers pioneered markov modeling by estimating substitution frequencies empirically from alignments of orthologous sequences  <cit> . from inspection of log odds scores they concluded that amino acids with similar properties indeed tend to form groups that are conserved. in other words, members of a group usually substitute to each other, rather than to external residues. in subsequent work  <cit> , conservation has been turned into a criteria used for defining and inferring amino acid substitution groups. an interpretation of these results is that the substitution process hierarchically operates on multiple levels, from nucleotides to codons to groups of codons  <cit> . however, one relies on strong assumptions when aiming to infer hierarchical levels in terms of certain biochemical properties or explicit conservation criteria. ideally, one would instead like to "blindly" infer levels purely from the observed dynamics. in this paper we present such an approach, which is based on recently developed methods for identifying hierarchical levels in dynamical systems  <cit> . the methods are derived from first principles, and only rely on the assumption that the dynamic process can be described as a markov chain; there are no assumptions regarding for example amino acid conservation or group isolation. in fact, the techniques presented here are not limited to the substitution process, but may also be applied to the broad range of biological systems that can be represented by networks or transition matrices. in this presentation, however, we will concentrate on the substitution process by applying the techniques on an empirically derived codon transition matrix provided by schneider et al.  <cit> .

in the next section we will present our methodology. the underlying theory is only introduced briefly here, and will have a focus on markov chains. a more thorough presentation  that covers a broader class of systems can be found in ref.  <cit> . we will then report on the results when applying our techniques on the codon transition matrix. after discussing the acquired results and their possible relation to the evolution of the genetic code, we conclude the paper with a few closing remarks about the methods relation to biological modeling in general, and possible future directions.

methods
hierarchical organization is an intrinsic property of complex systems as it is a prerequisite for a system to stably evolve complexity  <cit> . formally, a hierarchy can be viewed as a set of levels at which the system operates, where each level approximately has its own closed dynamics. each level is defined by an aggregation  of states. aggregating a markov chain, which we consider here, means that the state space is partitioned into macro-states. the original dynamics and the partition of the state space then defines a new stochastic process on the coarser level. however, in general such an aggregation does not define a proper level of description in the hierarchy since the partition introduces memory on the aggregated level. put differently, the dynamics on the aggregated level is not closed. in the special case when the aggregated dynamics indeed is closed, the stochastic process over the partitions constitutes a markov chain with the same order as the original process. in such cases, the aggregation is termed lumping in the literature, and the markov chain is said to be lumpable  <cit> . see figure  <dig> for a schematic illustration of markov chain lumping in the context of the codon substitution process.

the degree by which a coarser process fulfills the markov criteria  can be measured for example as the expected mutual information, denoted ⟨i⟩, between the process' past and future states, given its current state. let {s <dig>  s <dig>  ..., sn} be the state space of an aggregated process, pi a stochastic variable of the preceding state of si, and fi a stochastic variable of the subsequent state of si . the mutual information between past and future states, given a current state si is   

where h is the shannon entropy   

of pi. h and h of the joint distribution of pi and fi are defined analogously. then   

where pr is probability that the system is in state si. the criterion can be used to test whether or not a given partition defines a lumping, but it is typically not useful for constructing the partitions that define lumpings. since the number of possible ways to partition a state space of n states is astronomical even for relatively small n it is not feasible to evaluate all partitions. instead, we employ two novel techniques for identifying aggregations that enables one to analyze systems with a large number of states . the first technique is based on the following observation : consider n eigenvectors of a transition matrix. these will define n points in an n-dimensional space, where each point is associated with a state in the markov chain. if the n points form n clusters, these clusters define an aggregation, where aggregates of states are given by corresponding points within clusters. the task of finding aggregations is then reduced to the problem of finding n eigenvectors that respect the same n clusters of eigenvector elements. we will illustrate this with an example. consider a markov chain whose dynamics over some state space {a, b, c, d} is given by a transition matrix   

where p and q are probabilities. we can determine if the states can be aggregated by examining p's eigenvectors. these are given by the columns in   

where r = p/q and . we see that there are two clusters in the second eigenvector . since the first eigenvector respects the same clusters , the first and the second eigenvectors define an aggregation, namely {{a, c}, {b, d}}. there are also two trivial aggregations: {{a, b, c, d}}  and {{a}, {b}, {c}, {d}} . due to the conservation of probability in a markov process, the trivial aggregations where all states are in the same aggregate always exist.

identifying n eigenvector constitutes a constraint satisfaction  problem. we have implemented a backtracking algorithm that in the typical case identifies aggregates in polynomial time. it is beyond the scope of this paper to describe the algorithm here. instead we refer to  <cit> , where we specify the algorithm in detail and provide pseudocode.

the spectral method works best for inferring large aggregates, but in order for small aggregates to be identified, they need to be distinct. therefore we also use a second technique akin to agglomerative clustering. it works in the following:

 <dig>  initialize an aggregation  as the partition where each partition element consists of one element.

 <dig>  evaluate every partition where two elements of  are merged by calculating the expected mutual information hii  / <dig> partitions to test).

 <dig>  let ℬ be the partition that resulted in the lowest ⟨i⟩.

 <dig>  replace  with ℬ and repeat from step  <dig> 

that is, initially each state is in a separate partition element, and the state space is then successively aggregated by joining the pair of aggregates that result in the lowest mutual information. the agglomeration method gives good results on the first levels in the aggregation hierarchy, but becomes less accurate at coarser levels. since the spectral method works best in the latter case, the techniques complement each other.

we have applied the two techniques on a markov chain of codon substitutions, whose transition probabilities have been empirically derived by schneider et al.  <cit> . the codon substitution frequencies have been estimated from  <dig>  pairwise alignments of orthologous sequences from human, mouse, chicken, frog and zebrafish. for this purpose, they aligned  <dig>  million codons, counted the substitutions between codons, and derived the substitution probability matrix from the resulting counts.

RESULTS
a first observation is that the spectrum of the transition matrix provided by schneider et al. has a clear gap after the 21st eigenvalue, figure  <dig>  this gap indicates a time scale separation and that the  <dig> first eigenvectors may reveal an aggregation of the substitution process. by clustering the elements of the  <dig> first eigenvectors of p-- resulting in  <dig> points in a  <dig> dimensional space-- <dig> distinct clusters are acquired. since the number of eigenvectors equals the number of clusters, these define a valid aggregation. as exemplified in figure  <dig> the clusters show as level sets in the individual eigenvectors. the aggregation constitutes the standard genetic code as each cluster constitutes codons that are associated with the same amino acid, with the exception of the codons of serine, which are divided into two clusters . this unique separation is due to that serine is the only amino acid whose codons are not connected with single point mutations .

at the higher order aggregated level of amino acid substitution, lumpings are not as clearly revealed by the eigenvectors. this is expected since the redundancy in the genetic code reflects a much stronger neutrality than possible similarities between the amino acids. if the partitioning of the state space is viewed as an optimization problem aiming to minimize the mutual information defined in eq.  <dig>  then there are many almost equivalent minima. in this situation significant amino acid aggregates are identified by the complementary agglomeration technique. the progress of the procedure is shown in the dendrogram in figure  <dig>  due to that tryptophan  has very low mutability and is the least occurring amino acid, a significant two-state lumping exists where tryptophan forms one aggregate and the rest of the amino acids form another aggregate. to simplify further analysis tryptophan is therefore discarded. the resulting most significant aggregation is given by {a, t}, {i, m, v}, {e, d} and {k, r}, cf. figure  <dig>  if we go back to the spectral view, we see that the same aggregation is indicated by three of the eigenvectors in the transition matrix, figure  <dig>  this exemplifies that one may also identify aggregates by searching for clusters or clear separations of eigenvector elements and then test if these constitute valid aggregates by using eq.  <dig>  for instance, one known grouping is to separate purine-centred and pyrimidine-centred codons  <cit> . inspecting figure  <dig> and figure  <dig>  we can see that the two groups indeed are separated if we exclude the rare amino acids c, y and w, although not forming two distinct meta-clusters. however, a purine-pyrimidine separation is not present in the dendrogram in figure  <dig> 

discussion
we will now compare our results with amino acid groupings that previously have been discussed in the literature. firstly, jiménez-montaño and he have used the same matrix that we employed here to perform hierarchical clustering of codons based on an euclidian distance measure  <cit>  . in their case w also forms its own aggregate and s is split up. other similarities are the grouping of {e, d} and {a, t}. however, a and t are also grouped with p, r and s, and so their groupings do not respect the purine-pyrimidine separation. this is also the case in figure  <dig>  but not on the first aggregation levels. another difference is that the genetic code is not as distinct in their case. the codons of f, for instance, are more separated than some of the amino acid aggregates .

kosiol et al.  <cit>  have estimated a different empirical codon model than the one used here and perform an aggregation with the almost invariant sets  algorithm  <cit> , which aims to find groups of elements that are conserved. they group codons into  <dig> and  <dig> aggregates and first identify the genetic code. in the 7-element aggregation, the aliphatics {i, m, v, l} form one group and the aromatics {y, f} form one group . furthermore, half of the amino acids--those that are hydrophilic and basic--form one large group . this group, however, does not respect the purine-pyrimidine separation. kosiol et al. also apply the same algorithm on an empirical amino acid model  <cit>  and acquire very similar results. one may argue that this is expected, since the ais algorithm identifies the genetic code and since the aggregation of the codon model with respect to genetic code probably is very similar to the amino acid model. if we compare the aggregates acquired by jiménez-montaño et al. and kosiol et al., we see that there is little agreement, with the exception that a, s and t are in the same aggregates in both cases.

johnson and overington have compared dendrograms based on twelve different scoring matrices with respect to a distance measure between scoring distributions  <cit> . in the resulting dendrograms all of our aggregates occur to various degrees . interestingly, all of our aggregates occur both in the dendrograms based on the scoring matrices by gonnet et al  <cit>  and jones et al  <cit> , where w also forms its own aggregate. both these matrices are based on empirical sequence comparisons. in contrast, there is much less agreement with respect to matrices based on chemical or physical properties.

the standard genetic code is quite easily identified since member codons within an aggregate are invariant under mutations as they code for the same amino acid. it is not as clear, however, why the most significant amino acid aggregation is given by {a, t}, {i, m, v }, {e, d} and {k, r}--one of many other possible ways to group together amino acids. one may hypothesize that the aggregated dynamics of codon substitutions provide information about the origin of the genetic code. there are several theories aiming to address the fundamental question on how the code came to be. see ref.  <cit>  for a comprehensive comparison. with the exception of the frozen accident theory by crick  <cit> , these theories couple the evolution of the genetic code primarily with physico-chemical properties of the amino acids or evolved biosynthetic pathways. woese  <cit> , specifically, suggested that the code has evolved by a process of ambiguity reduction. the idea is that a crude primordial version of the code, where groups of codons code for groups of amino acids with resembling properties, evolved into the code's current state by a series of refinements. one may ask if amino acid groups reflect earlier versions of the code. riddle et al.  <cit>  experimentally searched for a minimum set of amino acids capable of forming complex protein folds. they found that the five amino acids a, g, i, e and k  are capable of forming most of the ancient sh <dig> protein domain. consider again the most significant amino acid aggregation and note that a, i, e and k are all members of separate aggregates and that g forms its own aggregate. one could speculate that the aggregates reflect group codons in an earlier version of the code, and that these groups were specialized into present day codons. it is an intriguing hypothesis that is also partly supported by jiménez-montaño's hypothesis on the evolutionary history of the code  <cit> . in the proposed evolutionary tree, which is based on group theory and the thermodynamics of codon-anticodon interactions, amino acids within aggregates {a, t}, {i, m, v} and {e, d} share the same branches up till the two last reassignment of codons, although k and r are separated earlier than that . however, these observations remain speculative and clearly a more careful analysis would be required in order to conclusively relate acquired aggregates to the evolution of the standard genetic code and its deviates.

CONCLUSIONS
we have employed two techniques to identify multiple levels of substitution dynamics. the techniques only consider the raw dynamics of the system and are therefore independent of system dependent assumptions that may be irrelevant or even false. the techniques therefore manage to blindly identify the amino substitution process via the standard genetic code, as well as higher order substitution dynamics via amino acid groups. the techniques are not limited to the codon substitution process, but may be applied to systems that are specified by a state space and a transition matrix. this is a very broad class of systems that for instance include networks . the techniques may therefore be used to identify hierarchical dynamics in seemingly very different biological systems, such as protein interaction networks, genetic regulatory networks, metabolic pathways and food webs. identifying the hierarchical structure of a system does not only increase our understanding of the system, especially if the levels are intuitively difficult to grasp, but it also enables effective coarse graining in simulations. as soon as one hierarchical level is identified, details of lower levels can be discarded if they are not of relevance when simulating the system at the new level. due to the increasing size and complexity of current models that owe to the rapid growth of available biological data, such reductions are of particular value.

authors' contributions
og conceived of the study. og and mnj designed and implemented the algorithms, performed the computational experiments, analyzed the results, wrote the paper, and read and approved the final manuscript.

