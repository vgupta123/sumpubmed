BACKGROUND
it has become standard to apply multiple inference techniques to a given phylogenetic problem. the recent invasion of phylogenetics by bayesian techniques , the ever improving models and algorithms for tree searches under maximum likelihood , and the continuously growing processor speed helped these previously computationally very expensive approaches to become a typical component of most phylogenetic studies, accompanying the widespread parsimony and distance-based approaches. at the same time, no single inference technique has consistently proven to be the single best choice. accordingly, the researcher is well-advised to explore potential method-specific differential results, leaving him or her with the difficulty of visualizing these differences for him- or herself and for the reader. frequently, differences are restricted to the magnitude of various measures of statistical support , rather than being apparent from the topology. in addition, the frequently reported results from topological tests  or tracing of ancestral character states  add further importance to being able to assign a variety of numbers and graphical labels to tree nodes.

to address those needs, the first version of treegraph  <cit>  had been developed, which strongly simplifies the creation of the final tree figure by the automatic positioning and formatting of multiple labels per branch. however, while one support type could directly be imported from the phylogeny inference program output, the newick- and nexus  <cit>  format used by these programs precluded the direct import of more branch labels. for all additional labels , the laborious work of mapping them onto the appropriate nodes remained. the cumbersome drawing part of the publication process was minimized, but it remained the user's responsibility to collect and position all information that was to be displayed at the nodes.

we figured that automating this process would be very useful, particularly so in studies of extensive gene family datasets that may contain several hundred terminals. gene family studies using phylogenetic approaches have become a major focus with the increasing amount of available fully sequenced genomes. typically, gene family trees suffer from weak support  <cit> . the entailed caution required when interpreting gene family trees increases the need for testing alternative inference methods, alignment methods, data partitions, and varying treatment of questionable alignment regions.

similarly, the differential contribution of and potential conflict among different data partitions is frequently estimated by the differential success of resolution and degree of statistical support in various parts of the tree contributed by each partition  <cit> . this has become particularly important since multigene analysis are the rule rather than the exception, a trend further fueled by the growing availability of complete  genomes that provide easy access to a large number of genes that can be concatenated in large data matrices and then subjected to phylogenetic analyses, e.g.  <cit> .

these trends call for a tree editor that is able to compare and ultimately visualize congruent and conflicting evidence from different analyses, while guaranteeing flexible editing and production of high-quality tree figures for publications.

implementation
treegraph  <dig> is written in java and uses swing for its graphical user interface  as well as the apache batik svg toolkit , freehep , java math expression parser  and browserlauncher  libraries. besides its gui, which makes editing and formatting very intuitive, the current version  <dig> adds many features previously unavailable in the command line precursor and introduces an xml-based native file format .

RESULTS
importing data
treegraph  <dig> can read trees in newick or nexus format  as well as phyloxml tree descriptions  <cit>  and can furthermore import annotations from text files generated e.g. with a spreadsheet application. besides that, treegraph  <dig> facilitates combining information from different phylogenetic analyses of a given dataset. this is particularly useful e.g. in the study of extensive gene family datasets with large sets of terminals. the following sections describe this feature in greater detail.

mapping statistical support onto congruent nodes
for each branch of a tree opened in treegraph  <dig>  the corresponding support from other trees can be mapped whenever the topology defined by the current branch is present in them. each of these other trees may represent the result from a different analytical approach or different data partition, and support values from these trees are assigned their own label id by which they are grouped and amenable to future formatting or editing operations. thus, all support values that stem from a particular analysis can be individually formatted e.g. by their relative position on the branch and/or their font and style.

finding conflicting nodes and mapping contradictory support
in some studies not only the support from different analyses has been mapped onto the branches but also the strongest support for a contradictory topology was determined by inspection via eye  <cit> .

treegraph  <dig> uses the following algorithm automate this .

let tree <dig> specify the topology onto which contradictory support from other trees should be mapped . for a given branch branch <dig> in tree <dig>  the maximum support for a conflicting branch branch <dig> from another tree tree <dig>  can be found as follows.

 <dig>  find the branch <dig> which defines a subtree subtree <dig> with the smallest number of terminals that contains all leafs of a subtree subtree <dig> defined by branch <dig> 

 <dig>  inside subtree <dig> find all branches that define a subtree which are on the one hand fully enclosed by subtree <dig> and on the other hand contain at least one terminal which is also part of subtree <dig> as well as at least one leaf which is not.

 <dig>  the highest support value in the set of these branches is added as a conflicting value onto branch <dig> 

this highest conflicting support value can be distinguished from congruent values by user-specified formats, e.g. brackets, asterisks or different colors .

editing and formatting capabilities
the program features versatile editing and formatting options, such as automatically setting branch widths or colors according to the value of any of the unlimited number of variables that can be assigned to each node or branch.

editing of node/branch data
node/branch data imported from spread sheets or other trees , can be copied from and to other internal variables, be kept invisible or set visible and then be freely formatted , filtered according to their values or calculated from each other using an integrated mathematical expression parser which can access all node/branch data columns. figure  <dig> shows a screenshot displaying a tree and its corresponding data table.

editing operations
beyond typical editing operations such as tree rerooting and ladderizing or moving and collapsing of nodes, whole clades can be copied or cut out and placed into new empty files or inserted  into other trees. since nodes can also be manually added, whole trees can quickly be manually constructed starting from an empty file.

the editing operations are facilitated by versatile additive selection options that allow selecting many elements in a tree for subsequent formatting with just a few clicks. additionally, every operation applied to an opened tree can be easily undone or redone using the undo-function.

searching, replacing and translating tree leaf names
searching and replacing is possible across all node/branch data columns .

more restrictive alignment file formats do not allow lengthy taxon names, so names get truncated. in other cases, the often clumsy taxon- or lab ids used during a study survive up to the final alignment, phylogenetic dataset and the trees constructed from it until they need to be adjusted for the final tree to be presented in a paper. treegraph  <dig> can be requested to apply a translation table to use "cleaned" taxon names for the final output. this translation table can be constructed easily with help of the data export feature and any text editor or spread sheet program. furthermore the lab ids  can be saved in a hidden data field to be able to identify the terminals by these lab ids so that additional support values could still be added later on.

formatting document elements
great flexibility is offered by the application as it allows free formatting of line- and text-formats of all document elements like nodes, branches or legends . additionally branches can carry an unlimited number of textual annotations  or icons  the color, text style or size of which can also be freely formatted . all distance values in treegraph  <dig>  are specified in millimeters or dtp-points . this feature, along with the image export function , allows the user to design trees in exactly the size they should appear in print or in the exported graphic file. in addition, treegraph  <dig> offers a feature to proportionally rescale all elements of a subtree or the whole document.

automatically setting line width, text height, and color
treegraph  <dig> allows automatically setting all formats  according to the value of a chosen node/branch data column. this provides a very intuitive way to graphically present the relative magnitude of, e.g., certain types of support or rates assigned to branches .

different view modes
all editing operations are facilitated by a very convenient way to zoom in and out, fitting the zoom to the window size, and a miniature overview  for navigating large trees.

when applicable , trees can be displayed as phylogram or chronogram , with multiple options for adjusting a scale bar .

exporting to graphic formats and printing
treegraph  <dig> outputs various vector and  pixel graphic formats. among these are svg, pdf, or png, supporting transparent background where this applies. using the graphic export function of treegraph  <dig>  the most adequate graphic formats, resolutions, and image sizes for manuscripts, presentation slides, or web pages, respectively, can be specified.

help
an extensive, continuously updated online help system is available under http://treegraph.bioinfweb.info/help and can also be accessed  from within the program. additionally, several video tutorials are offered there to get started with treegraph  <dig> .

comparison to previous software
to date, a variety of tree visualization tools have been released, among which atv  <cit> , dendroscope  <cit> , figtree , the mega tree explorer  <cit> , mesquite  <cit> , phylowidget  <cit> , treedyn  <cit>  and treeview  <cit>  may be the most widely distributed. in spite of their great usefulness for the purposes they have been developed for, none of these software packages allows simultaneously visualizing, freely editing, properly formatting and exporting or printing trees with heavily annotated nodes . although treedyn is able to display multiple annotations on one node it is not able to automatically position them in a ready-to-publish way or to combine them from different analyses. figtree is able to read the special newick annotations generated by beast and therefore can also store several sets of annotations but only offers a limited number of ways to display them . in contrast treegraph  <dig>  can show a nearly unlimited number of textual annotations at a time as well as display data in form of branch widths, line colors or many other formats.

besides importing additional annotations from tables , treegraph  <dig> is the only editor which can combine annotations  from different trees . the information gained this way has a topological component and can therefore not simply be obtained from data in a table.

a feature closely related to the ones mentioned above is the ability to calculate numeric or textual annotations by mathematical expressions which can reference other annotations . to date, a similar functionality is not offered by any other tree editor.

treegraph  <dig> features a multitude of format options which can be combined to every tree element  independently. as figure  <dig> shows, no other tree editor currently provides functionalities like element-specific formats for all types of tree elements in combination with advanced selection options or collision free positioning of the whole tree. moreover, none of the editors that offer at least some of treegraph 2's formatting options allow the user to precisely determine the print layout. in contrast to most other editors, our program offers context help buttons  everywhere in the program, making it very easy for new users to get started.

it should be noted, however, that treegraph  <dig> has been optimized as a tree editor for producing high quality tree figures and not as a viewer for trees with many thousands of taxa which could never be depicted completely in a publication or presentation. the latter is a specialty of software specifically designed for this purpose such as, e.g., dendroscope  <cit>  .

since treegraph  <dig> is written in java and is able to read and write all its supported formats directly from and to streams in would be possible to use it in a web application either on the server  or the client site  to display and manipulate trees. as yet, our application would have to be integrated into such a web application by its programmer manually and we do not yet offer a ready-to-use plug-in solution for this. we do, however, offer a full documentation of our source code  to facilitate such a web integration.

CONCLUSIONS
with its easy-to-use graphical user interface and a number of semi-automatic editing and formatting options, treegraph  <dig> is a graphical editor useful in the context of any phylogenetic study. it is particularly useful where multiple, potentially conflicting trees are being produced, because its automatic combination of information from different analyses helps to identify and graphically present such incongruences. the way in which data can be imported and then assigned to nodes, manipulated or even converted to color tones, line diameters or other formats allows for a great flexibility in visualizing any kind of data associated with different parts of the tree. together with the possibility to manually construct new clades or delete clades and the various graphic output formats supported, treegraph  <dig> greatly reduces the effort during the preparation of tree figures for presentations or publications.

availability and requirements
project name: treegraph 2

project home page: http://treegraph.bioinfweb.info/ 

operating system: platform independent 

programming language: java

other requirements: java runtime environment  <dig>  

license: gnu general public license

restrictions to use by non-academics: none

authors' contributions
bcs developed treegraph  <dig>  wrote the online help and contributed to the concept of the software and the manuscript. kfm was responsible for the conception and design of the software, contributed to its help system, and wrote the manuscript. both authors have given final approval of the version to be published.

