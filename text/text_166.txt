BACKGROUND
one crucial step toward understanding the molecular basis of diseases, such as cancer, diabetes, and cardiovascular disorders, is to identify the predisposing or virulence genes of these diseases, which will lead to early disease diagnosis and effective drug design  <cit> . with the availability of the big biomedical data, researchers tend to get insights into human diseases by identifying genes that might cause or relate to them. given the fact that experimentally identifying of the complete list of disease-related genes is generally impractical due to the high cost, computational methods have been proposed in the last decades to predict the relationships between genes and human diseases . however, these tools, including filtering methods based on a set of criteria  <cit> , text mining of biomedical literature  <cit> , integration of genomic data , semantic similarity  based disease gene prioritization  <cit>  and network analysis based and highly robust approach , remain pre-eminent  <cit> .

a human cell consists of several functionally inter-dependent molecular components. a human disease rarely results from an abnormality in a single gene but reflects the perturbations of the complex molecular network induced by different kinds of factors, such as genetic variations, pathogens and epigenetic changes  <cit> . the molecular network links molecular states to physiological states associated with diseases in a whole system view  <cit> . therefore, network-based approaches may offer better targets for drug development, and may lead to multiple potential biological and clinical applications including disease gene discovery  <cit> .

the network-based approaches for disease gene identification can be loosely grouped into three categories. the simplest approach, named direct neighbor counting, is to check whether two genes are connected directly in a molecular network. the idea is that if a gene is connected to one of the known disease genes, it may be associated with the same disease  <cit> . the experimental result demonstrates that using molecular networks can effectively increase the likelihood of identifying candidate disease genes. the direct neighbor counting method, however, does not consider the situation that two genes are not connected directly but still have certain biological associations. to address this problem, kruthammmer et al. employed the shortest path length approach to measure the closeness between a disease gene and a candidate gene. this method has been successfully applied to predict the genes associated alzheimer’s disease, and the prediction results agree with the manually curated candidates  <cit> . since both the direct neighbor counting method and the shortest path method are local distance measurements, they largely ignore the global structure of the whole molecular network and cannot fully capture the complex relationships between network nodes  <cit> . subsequently, methods have been proposed to predict the gene-disease relation using the global network structure, such as random walk with restart   <cit> , propagation flow  <cit> , markov clustering  <cit>  and graph partitioning  <cit> . the performance evaluation on hprd  <cit> , ophid  <cit>  and omim  <cit>  dataset shows that rwr is the best among the then-existing methods  <cit> .

rapidly evolving bio-technologies promote collecting multiple types of biological data, including diverse genome-scale data, clinical phenotype data, environment data, and data of daily activities  <cit> , making it feasible and attractive to build integrated biomedical networks from multiple sources, rather than focus on one single data set. the integrated network that includes multiple, heterogeneous types of resources, greatly extends the scope and ability for disease gene prediction  <cit> . for example, biograph  <cit>  uses data from  <dig> publicly available curated databases to identify relations between heterogeneous biomedical entities. the work by ganegoda et al. runs rwr on a integrated network, and has successfully identified disease-related genes with significant improved performance  <cit> .

using integrated networks for gene-disease relationship discovery is still a difficult task due to the existence of multiple biomedical entities in the integrated networks. in a network built using a single type of biomedical data, there is only one type of nodes and one type of edges. for example, in a protein-protein interaction network, nodes and edges represent proteins and protein interactions respectively. the integrated network, on the contrary, contains multiple types of nodes and edges representing different biomedical entities  and relationships . in order to differentiate these edge types, edge weights in the integrated biomedical network should be appropriately assigned  <cit> .

in this article, we present a new algorithm called sln-srw  to define edge weights in an integrated network and use the weighted network to predict gene-disease relationships. comparing with the existing approaches, sln-srw has the following advantages: 
sln-srw is the first approach, to the best of our knowledge, to predict gene-disease relationships based on a weighted integrated network with its edge weight being computed to precisely describe the importance of different edge types.

the performance of random walk may be strongly affected by the super hub nodes in an integrated network. sln-srw adopts a laplacian normalization based method to avoid such bias.

to prepare inputs for sln-srw, we constructed a new heterogeneous integrated network based on three widely used biomedical ontologies, i.e. human phenotype ontology  <cit> , disease ontology  <cit> , and gene ontology  <cit> , and biological databases such as string  <cit> . this integrated network combines biomedical knowledge from ontologies that are manually curated and big biomedical data that have been deposited in databases. based on these two distinctively different types of information, this network forms a foundation for disease gene discovery.




methods
we propose sln-srw to compute and model the edge weight of an integrated network and then predict disease genes. to achieve the goal, sln-srw consists of three steps. first, it integrates knowledge and data from multiple ontologies and databases to construct an integrated network g, where v is a set of nodes and e is a set of edges that connect the nodes in v. second, it uses a laplacian normalization based supervised random walk algorithm to learn the edge weight of network g, resulting in a weighted integrated network g
w. third, it employs the rwr method on g
w to predict disease-gene relationships. the diagram of the whole process of sln-srw is shown in fig.  <dig>  we will introduce the key steps of sln-srw in the rest of this section.
fig.  <dig> the framework of sln−srw. framework of sln-srw for estimating the edge weight of the integrated network automatically and predicting disease genes based on it. the second step is the essential part of sln-srw algorithm




step  <dig>  integrating heterogeneous knowledge and data sources for integrated network construction
in the first step of sln-srw, an integrated network is constructed based on eleven heterogeneous data sources in four distinct forms, i.e. ontologies, networks, unified vocabularies, and relational databases. the data sources are listed in table  <dig>  and they are mainly used for relation extraction, name mapping, and unified vocabulary. the data sources can be grouped into two categories: 1) curated data that were collected from literature and other high quality data sources, such as search tool for the retrieval of interacting gene/proteins  and online mendelian inheritance in man , and 2) curated ontologies that constructed manually by the domain expert, such as gene ontology  and disease ontology .



the workflow for constructing the integrated network out of the heterogeneous data sources is shown in fig.  <dig>  specifically, the network construction process has the following four steps: 

extracting information from heterogeneous data sources. ontology parser and database parser have been developed for ontology and database data extraction respectively. the ontology parser processes the obo file and the ontology annotation file, since hpo, do and go are all in open biomedical ontologies  format. the database parser processes files in tab separated values , comma separated values , and extensible markup language  format. the outputs of the two parsers are pair-wise relations and their properties between two biomedical entities.
fig.  <dig> the workflow of constructing the integrated network. work flow of constructing the integrated network based on multiple data sources





unifying biomedical entity ids. the same pair-wise relation may be extracted from multiple data sources with different identifiers. to avoid confusion, we provide a distinct id number for each biomedical entity by mapping all types of identifiers to the ones provided in the unified medical language system . the challenge is that some types of identifiers cannot be direct mapped to umls. for example, only a small part  of hpo and do term can be mapped to umls. therefore, we adopted clinvar  <cit>  to map all the hpo terms to umls, and utilized sidd  <cit>  to map all the disease names in do to mesh id, provided that there are direct mappings between mesh id and umls. please see additional file  <dig> for more details. after unifying the entity ids from multiple data sources, each entity only has one identifier in the database. we removed the identifiers that cannot be mapped to umls.


constructing the integrated network. the binary relations extracted from multiple data sources form an integrated network g, in which nodes are biomedical entities , and edges are the relationships between the entities, which have seven different types: go term - go term, go term - gene, do term - do term, do term - gene, hpo term - hpo term, hpo term - gene, and gene - gene.


edge initial weight assignment. we assign the initial edge weight t to every edge <u,v> according to its edge type and the evidence code associated to the edge, where both u and v are nodes in g. specifically, for the edge types that have edge confidence scores in the source databases, we use the confidence scores directly. for the edge types that do not have confidence scores but are associated with evidence codes, we manually assign initial edge weights based on their edge evidence codes . the edge initial weights are between  <dig> and  <dig>  and the experimentally verified edges have higher initial weights than computational predictions. for example, an edge between a go term and a gene with evidence code “exp” has a high weight , whereas an edge with “iea” code has a low weight , since “exp” indicates the go-gene relationship has been experimentally verified while “iea” means computational prediction. note that for the edges that have two or more evidences in e, the initial weights are calculated as the maximal weight of all the valid evidence codes.




step  <dig>  weighing the importance of different types of edges in integrated network
given an integrated network g with manually assigned initial edge weights, the aim of this step is to automatically re-assign all the edge weights, such that the weighted network g
w can be used for more precise disease gene prediction. to achieve this goal, we develop a new edge weight optimization algorithm based on supervised random walks   <cit> . srw combines the information from network structure with the node and edge level attributes, which can guide the random walk on the network. by running srw, we expect to re-assign weights to all the edges, such that the random walker from a disease node is more likely to visit the nodes representing the associated genes. however, the training process of supervised random walks  can be significantly affected by the hub nodes in the network. to solve this problem, we propose a laplacian normalization method to weigh the importance of different types of edges in an integrated network described as follows.

given an integrated network g, let node v
d∈v represent a kind of disease and let v
g⊂v be the set of the candidate genes of v
d, then the disease gene prediction problem can be converted to a problem to predict all the new edges between v
d and a subset of nodes in v
g, where a critical step is to weigh the edges such that a random walker from v
d has higher probabilities to reach the known disease genes in v
g than to reach the other genes. to provide the training set for learning the edge weight, we generate a positive set v
p and a negative set v
n for every disease node v
d, where v
p includes known disease genes associated with v
d and v
n includes genes not associated with v
d.

the approach to weigh the importance of different edge types consists of the following three steps: 

laplacian normalization on edge weights. to avoid the biases caused by the hub nodes in the integrated network, we adopt the laplacian normalization method  <cit>  to normalize all the edge weights. given a edge ∈e, the edge weight of edge  is normalized by all the edges connecting to node u or node v. mathematically, the laplacian normalized edge weight a is defined as: 
  <dig> a=f∑i∈nf∑j∈nf 


where n is the set of neighbors of node x; f=1/); w is the edge type importance vector for graph g that we will learn in the next step using an optimization process, and its length is equal to the number of possible edge types ; t is the vector of the initial weight of edge <x,y>, which has the same length as w. t is all zero except one cell because each edge can have one and only one kind of edge type. note that the edge type is decided by the type of nodes connected by it. for example, gene - gene and hpo term - gene are two different types of edges in the integrated network. a integrates and normalizes both the edge type importance w and the initial edge weight t; it can be used to model the random walk transition probability.


edge weight optimization - problem formation. in order to learn the optimal w for all the seven edge types in an integrated network, we minimize an optimal function defined in eq.  <dig>  such that the random walker in the network is more likely to reach the genes in v
p than the genes in v
n. 
  <dig> w=argminwo=argminw12||w||2+λ∑vd∈d∑vp∈vp,vn∈vnhsvn−svp 


where ||w|| is the euclidean norm; and d is a set of starting nodes representing the diseases in the training set. for each disease node v
d∈d, v
p and v
n representing the positive training set and the negative training set respectively. svp  is the association value between v
d and v
p∈v
p , which can be calculated by running rwr on g  <cit> . λ is the weight penalty score deciding to what extent the constraints can be violated. given the value of svn−svp, h() is a loss function that returns a non-negative value: 
  <dig> h= <dig> x<011+e−xb,x≥ <dig> 


where b is a constant positive parameter, x=svn−svp. the smaller the b is, the more sensitive the loss function is . if svn−svp< <dig>  the association between a disease and a gene in the positive training set is stronger than the association between the same disease and a gene in the negative training set, so h()= <dig>  otherwise, the constraint is violated, so h()> <dig> 


edge weight optimization - our solution. to optimize edge type importance parameter w to minimize eq.  <dig>  we adopt a widely used meta-heuristics method called the gradient based optimization method  <cit> , which has been successfully adopted to solve the link prediction problem in social networks and collaboration networks  <cit> .

to make the story complete, we briefly describe the gradient-based optimization method in the following text.

first, we construct a stochastic transition matrix quv′ of rwr using eq.  <dig>  
  <dig> quv′=a∑wa,if∈e <dig> otherwise 


and then, based on the transition matrix quv′, rwr can be described as: 
  <dig> quv=quv′+α <dig> 


where u and v represent two arbitrary nodes in g; α is the restart probability, which is a user given threshold ; and node s is a disease node, which is the starting node of random walk. let pi be the probability to reach node i from s after k iterations. the probability vector at the kth iteration can be represented as p=,p <dig> ...,p|v|)t. the stationary probability vector p, which can be obtained after certain iterations, is the solution of the following equation: 
  <dig> pt=ptq 


the next step is to apply a gradient based method to identify w to minimize o in eq.  <dig>  the derivative of o can be calculated as follows. 
  <dig> ∂o∂w=2w+∑vn,vp∂h∂w=2w+∑vn,vp∂h∂∂svn∂w−∂svp∂w 



∂svx∂w can be calculated as follows: 
  <dig> ∂svx∂w=∑viqvivx∂svi∂w+svi∂qvivx∂w 


this derivative can be repeatedly computed based on the estimate obtained in the previous iteration. the iteration stops when ∂svi∂w and svi do not change. the initial value of ∂svi∂w is  <dig>  the svi is initialized as 1|v|. the initialization process is the same as the traditional srw method. ∂qvivx∂w can be calculated as follows.

particularly, ∂qvivx∂w= <dig>  if edge  does not exist in the network. 
  <dig> ∂qvivx∂w=∂a∂w∑vja−a∑vj∂avi,vj∂w∑ka <dig> 



  <dig> ∂a∂w=∂f∂wπ)−f∂π)∂wπ) <dig> 


where π) and ∂π)∂w are: 
  <dig> π)=∑vj∈nf∑vy∈nf 



  <dig> ∂π)∂w=∑vj∈n∑vy∈n∂f∂wfvy,vx+∂f∂wf2∑vj∈nf∑vy∈nf 


where n is the set of neighbors of node v. after we get the solution of eq.  <dig>  we can apply a gradient descent based method and minimize o.




practically, the process of obtaining w has four steps . firstly, we initial the o based on the initial parameters. secondly, the derivative ∂o∂w is calculated in step  <dig>  the power iteration is applied to calculate ∂svi∂w and ∂qvivx∂w respectively. thirdly, based on the derivative, we can update the gradient to obtain an updated parameter w. fourthly, taking the updated w as input, step  <dig> calculates the stationary probability of the rwr. in the process, the iteration for derivative calculation  and the rwr algorithm  are the two key steps. after estimating the edge weight of the integrated network, we can directly apply rwr on the weighted integrated network to predict the relation between diseases and genes.
fig.  <dig> the process of training the the parameter w. the steps of training the the parameter w





RESULTS
we compare sln-srw with srw and rwr, where the latter has been widely used in network-based disease gene prediction, on a real and a synthetic data sets. sln-srw was implemented with java  <dig> in linux.

data preparation
as shown in table  <dig>  eleven data sources, i.e. string  <cit> , ctd  <cit> , omim  <cit> , clinvar  <cit> , hgnc  <cit> , mesh  <cit> , umls  <cit> , sidd  <cit> , do  <cit> , hpo  <cit>  and go  <cit> , are used to construct the integrated network g, which has  <dig>  nodes and  <dig>  edges.

to test the performance of sln-srw, we select  <dig> disease-gene edges from the integrated network as the positive set. the rules for data selection are similar to the rules used in  <cit> . in the positive set, there are  <dig> diseases, each of which has at least five known disease-associated genes in the integrated network. more detail about the positive set is listed in additional file  <dig>  the disease-gene pairs included in the negative set are generated in two steps. first, we select a disease d from the positive set. second, we repeatedly and randomly select genes that do not connect to d in the integrated network g. the number of the randomly selected genes is the same as the number of genes that connect to d in the positive set. we repeat the process until all disease nodes in the positive set are elected. note that the positive set is removed from the integrated network in the testing process. both positive and negative sets are evenly divided into two parts randomly, one for training and the other for testing.

a synthetic data set is generated following the rules in  <cit> . specifically, we generated a scale-free network with  <dig>  nodes using the copying model  <cit>  the generation process starts with three connected nodes. we connect a new node u to any of the existing nodes, which are selected at random with probability  <dig>  or with probability proportional to the node degree. parameter b is equal to  <dig>  in all the experiments. for each edge in the network, we set w={ <dig> −1} as the gold standard labeled as w
′. then, we randomly choose one of the original three nodes as the start point v. based on the edge strength determined by w
′, we run rwr starting from v and ranked the other nodes via the stationary probability. we select the top  <dig> nodes that directly connect with v as the positive training set, and select the nodes that do not connect with v are the negative set. note that both the positive set and the negative set are removed from the integrated network in the testing process. in the subsection “performance evaluation on synthetic data set”, we test whether w
′ can be estimated precisely.

disease gene prediction
the parameters in sln-srw and srw method are estimated based on the training set. the rwr method does not need the training set for edge weight assignment. alternatively, the training set is used to estimate the best restart probability in rwr. finally, the performance of all the three methods is tested based on the testing set.

varying the restart probability α from  <dig>  to  <dig> , the auc  scores  <cit>  of all the three methods are shown in fig.  <dig>  if α= <dig> , sln-srw method reaches the highest auc score  <dig> , whereas srw and rwr have the highest auc scores if α= <dig> , indicating that sln-srw can find the disease genes which are far from the disease node. based on the edge weights learned using the training data, we predicted the disease-gene relationships in the testing set. we compared the performance of all the three methods using the receiver operating characteristic  curve. in our test, the auc score of sln-srw  is the highest . especially, the true positive rate of sln-srw is significantly higher than rwr and srw while its false positive rate keeps low. this is important for disease gene predict, since researchers usually select candidate disease genes with a stringent threshold, which corresponds to a low false positive rate.
fig.  <dig> he auc score for each given restart probability for three methods. the auc score for each given restart probability for three methods. the red, blue and yellow lines are represent sln-srw, srw and rwr method respectively


fig.  <dig> roc curves for the experimental results on testing set. roc curves for the experimental results on testing set. roc curves for the experimental results calculated with sln-srw , srw  and rwr 




finally, we ranked the predicted disease genes to check whether the true disease-related genes have higher ranks than the other genes. figure  <dig> shows that the prediction result of sln-srw contains more known disease-related genes than srw and rwr at a majority of the top k levels, indicating that the edge weighing process in sln-srw has contributed significantly to the high recall of the results.
fig.  <dig> true disease-gene pair rates. true disease-gene pair rates at different top k levels




performance evaluation on synthetic data set
to compare sln-srw with srw, we ran both methods on synthetic data, following the method described in below  <cit> . for srw and sln-srw, we estimated the edge-type parameter based on the synthetic network and the training set described in the “data preparation” subsection, resulting in w
∗. we measure the performance of srw and sln-srw by comparing the true edge-type parameter w
′ with w
∗, using error=∑i|wi′−wi∗|. after repeating the experiment  <dig> times, we find that the error of sln-srw is statistically significantly lower than that of srw  indicating that sln-srw performs better than srw . the error of sln-srw is also lower in the first and third quartile.
fig.  <dig> the boxplot of the error score. the boxplot of the error score for sln-srw and srw




CONCLUSIONS
identifying the relationships between diseases and genes is vital for disease diagnosis and drug design. recently, researchers have started to employ integrated biomedical networks to extend the scope and ability for disease gene prediction. in this article, we proposed a novel network-based method named sln-srw to define the weight of edges in an integrated network and then use it to predict the gene-disease relationships. sln-srw has the following advantages: 1) it can estimate edge weight by differentiating different edge-types; 2) it adopts a laplacian normalization based method to avoid the bias caused by the super hub nodes in an integrated network; 3) three widely used biomedical ontologies are used to construct a new heterogeneous integrated network. to demonstrate the advantages of sln-srw, we compare it with two existing methods srw and rwr. the experiment on a real data set shows that sln-srw performs best among all the three methods. furthermore, the experiment on a synthetic data set indicates that the edge weights predicted by sln-srw are more precise than srw. comparing with the existing methods, sln-srw has the unique function to identify disease genes, which are not close to any disease node in the disease-gene networks. this could benefit clinicians on discovering new disease-associated genes that have not been identified by the existing methods. besides, sln-srw provides a novel approach to automatically assign weights to the heterogeneous edge types in the disease-gene networks, whereas the existing methods can only define the edge weights manually.

in the future, sln-srw will be applied to networks with different edge densities and qualities to test its robustness. furthermore, we will apply sln-srw on more recent datasets and examine the results using both biological experiments and literature.

additional files

additional file  <dig> process of mapping different types of ids. additional file  <dig> is a figure to illustrate how different types of ids are unified. 





additional file  <dig> initial weight for difference evidence code. additional file  <dig> is a table that lists the weight values for different evidence code. 





additional file  <dig> relation between parameter b and loss value. additional file  <dig> is a figure showing the relation between parameter b and loss value. 





additional file  <dig> diseases selected as the evaluation set. additional file  <dig> is a table of diseases selected as the evaluation set. 




we would like to thank dr. qingcai chen, professor at harbin institute of technology, shenzhen graduate school, for invaluable comments and suggestions to the project.

declarations
this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2016: proceedings of the 27th international conference on genome informatics: genomics. the full contents of the supplement are available online at http://bmcgenomics.biomedcentral.com/articles/supplements/volume-18-supplement- <dig> 

funding
this project has been funded by the national natural science foundation of china ; the start up funding of the northwestern polytechnical university ; the fundamental research funds for the central universities ; the national high technology research and development program of china grant .

the publication costs for this article were funded by northwestern polytechnical university.

availability of data and materials
the datasets during and/or analysed during the current study available from the corresponding author on reasonable request.

authors’ contributions
jp, jc and yw conceived the project; jp, kb and jc designed the algorithm and experiments; jc and jp wrote this manuscript; xs, gw, hx, sj and lc helped to test the algorithm. all authors read and approved the final manuscript.

competing interests
the authors declare that there are no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
