BACKGROUND
the diversity of computational tools needed in genomics presents many challenges  <cit> . the most sophisticated algorithms and methods might as well not exist if the programs implementing them are not accessible to the biologist. biologists need to understand the tasks with which they are faced, find software tools that will help them with these tasks, and be able to evaluate the validity and significance of the results.

many packages provide a large set of programs and functions, and to different degrees, try to promote usability through graphic interfaces, hierarchical desktop menus, and organization of documentation files. to simplify comparison with birch, a few representative packages will be cited as examples. packages such as emboss  <cit>  and staden  <cit>  are available for many platforms. there are numerous other packages specific to linux. biorpms is a collection of packages that can be installed on an existing linux system  <cit> , while nebc bio-linux  <cit>  is a complete linux distribution with bioinformatics applications pre-installed. in some cases, graphic interfaces are available to tie together sets of applications. two examples include jemboss  <cit> , a java front end for emboss, and the kaptain extensions to emboss  <cit> , which utilize kaptain, a system for generating graphic interfaces for commandline programs using grammar scripts  <cit> . similarly, web-based interfaces to over  <dig> applications have been generated using pise, which creates html interfaces from xml definitions of program parameters  <cit> . the taverna workbench takes a different approach. taverna is a java application in which complex data workflows can be created by linking together icons representing web services available at both local and remote sites  <cit> .

bioinformatics packages such as those described above can be made available to users throughout a lab, department, or campus on network-centric unix/linux systems. network-centric systems allow users to login from any computer and be presented with the same desktop, programs, and filesystems  <cit> . this avoids some of the problems associated with individual pcs, because users don't have to be worried about which software is installed on which pc. while installing programs and databases can be a major effort, transforming them from a mere collection into an integrated system is far more difficult  <cit> .

the birch system consists of a core of commonly-used programs for most typical bioinformatics tasks, set within a portable framework that allows for seamless integration of locally-installed programs so that each birch site can be tailored to the needs of the local user-community. gde  <cit>  as updated by eric linton  <cit>  provides a powerful graphic interface unifying both core birch programs and locally-installed software. the birch documentation system provides a merged view of both core and locally-installed documentation. birch also contains numerous tools that make it easier for the system administrator to manage, update and customize the system for the local user base.

implementation
i. the user' perspecitve
a seamless view of the software
the birch core distribution comes with a wide range of commonly-used software packages pre-configured and ready to run. these include ncbi network blast, cn3d, and sequin  <cit> , fasta  <cit> , phylip  <cit> , tcoffee  <cit> , and taverna  <cit> . all programs can be run from the command line, and most can also be launched from gde.

gde can be thought of as a program that runs other programs. the flexibility of gde makes it possible to have gde interfaces specialized for different types of data. in the current implementation of birch, there are four gde interfaces:

• gde – sequence data

• dgde – list data 

• mgde – molecular marker data 

• tgde – phylogenetic tree data

the functions of these interfaces will be illustrated in two examples. gde lends itself to complex tasks in which data is pipelined from one step to the next. figure  <dig> shows a simple example of how to create a dataset of sequences for a specific gene family, beginning with a single amino acid sequence. figure  <dig> shows an example of building a phylogenetic tree from molecular marker data, using mgde and tgde.

with interfaces such as jemboss, kaptain, or pise, input and output files for a given program are selected within the menu that launches the program. a program is selected from a list, one or more datafiles are chosen, parameters are set, and the program is launched. thus, at each step in the analysis, the user must ensure that an input file, of the type expected by the program, is available. in contrast, data need only be read into gde at the first step. data items  are displayed in the gde window, and can be selected individually, or in any combination, prior to launching a program. even parts of sequences can be selected with the mouse. gde automatically converts data into the format required for each subsequent step. finally, whereas gde can send output to a new gde window for further processing, jemboss and kaptain require that output be saved to a file before it can be used as input for the next analytical step.

birch uses gde in several ways to overcome the learning curve usually associated with trying a new program. first, all of the "overhead" tasks associated with running a program  are automated in wrapper scripts. as well, wrappers can prevent errors by checking the validity of the parameters set by the user. long-running programs that are cpu intensive are run in the background at lower priority, minimizing the impact on system performance. when jobs are run in the background, the user can logout and review the results at a later time when the job is complete.

gde is a programmable interface
by itself, gde is a small program that can read and write datafiles, display the data as a set of character strings, and create menus. all programs that gde runs are completely external to gde, and are not compiled as part of the code.  when gde is started, it reads a set of menu items for each program. each menu item has a template for a unix command to be executed, along with parameters that are displayed in menus as buttons, sliders, choosers, or text. in this regard, the gde menu syntax is analogous to the acd command definition syntax used for describing program input, output and parameters in emboss, or the xml program descriptions in pise. in most cases, the program called by gde is a wrapper script, which might execute a single command, or a complex series of commands needed to accomplish a task. to run a program from gde, the user reads in a datafile , selects the data to be analyzed, and then chooses a program from the menus. next, the user sets parameters and clicks on the ok button. parameter settings are substituted into the unix command template, and the command is executed. programs launched by gde do not even need to be running on the same login host or workstation to which the user is logged in, because anything that can be run from a script can be run by gde, including web services on remote systems. in the core birch distribution, blast searches are run remotely at ncbi using the ncbi blastcl <dig> client.

wrapper scripts can also enhance the presentation or content of the output. for long-running programs, scripts will add the name of the login host and time and memory resources utilized, as a guide for scaling up to larger jobs. some programs, as written, do not include in the output potentially important information needed for interpreting the results. in such cases, birch wrapper scripts will add more detailed information on parameters and input files used in each run.

any user can do anything from anywhere
birch is scaleable from a single workstation to a server cluster. figure  <dig> illustrates a typical campuswide system. by choosing binaries and libraries at login, birch makes it transparent to the user which platform they are actually using. most importantly, a unix graphic desktop can be redirected from the server to be displayed anywhere. birch has been successfully tested on x-terminals, sunray terminals, pcs running x <dig> clients such as xwin <dig>  <cit>  and cygwin  <cit> , sun secure global desktop  <cit>  and various versions of vnc  <cit> . birch has also been tested on several graphic desktops, including cde, gnome, sun java desktop and kde. in our laboratory, it has been possible to eliminate pcs entirely, and instead do all work, both common office tasks and specialized bioinformatics tasks, from low-cost terminals.

ii. local customization of a birch system
no software package does everything, and each lab, department, or institution has different needs. birch has numerous mechanisms for adding programs and documentation that are not part of the birch core, and for customization to take advantage of the strengths of a local local unix/linux system, and to work around problems specific each system.

the $birch/local directory
birch is downloaded as a hierarchical directory structure which is usually installed in the $home directory of an account specifically used for administering birch. this directory is referred to by the $birch environment variable. local customization is made possible through the $birch/local directory. analogous to /usr/local in unix, $birch/local is a part of the system that does not change when an updated version of birch is installed. during an update the birchconfig install wizard automatically merges programs, documentation, and settings from $birch/local into the new version of birch. for example, to add a program to a birch system on linux, the binaries would be added to $birch/local/bin-linux-intel, and the documentation added to $birch/local/doc. at the same time, software packages already in place prior to installing birch can be integrated into birch simply by creating symbolic links to them from $birch/local.

automatic updating of gde interfaces
$birch/local contains directories for adding menus to each of the four gde interfaces . to add a program, the binary file is copied to $birch/local, and then a gde menu file is written, typically by modifying an existing menu file. a script merges the new menu into the existing menus. subsequently, when birch is updated to a new version, the menu is automatically added to gde. for example, the core birch distribution runs blast remotely at ncbi. when birch was installed at the university of calgary, symbolic links were made to binaries for the already existing paracel® blast system  <cit> , and menus for launching paracel blast were added by copying the ncbi blast menus to $birch/local and modifying them.

working in a heterogeneous computing platform
birch has unique design considerations for working in a heterogeneous operating environment consisting of workstations and hosts with different operating system/hardware platforms. for example, the unix system at the university of manitoba is configured as shown in figure  <dig>  users can log into machines running either linux, solaris-sparc or solaris-amd <dig>  at login, birch determines the os/hardware platform. depending on the platform, birch then chooses binaries and libraries appropriate for that system. the birch implementation of gde can also handle cases in which a program is not available on all platforms. for example, if a program is only available for solaris-sparc, the user will see that program in the gde menus when logged into a solaris-sparc host, but not when logged into a linux-intel or solaris-amd <dig> host.

in a heterogeneous system, some hosts may have single cpus and others multiple cpus. at login birch sets environment variables specifying whether or not threaded applications can take advantage of multiple cpus.

setting the user environment
unix/linux systems achieve a high level of flexibility through use of environment variables, which are used by the shell  to store information such as the locations of programs and files. when a user logs in, birch reads startup scripts that set numerous environment variables for the duration of the session. for example, $birch_platform tells the os/hardware platform of the machine to which the user is currently logged in. since a wide variety of shells are available in unix/linux, birch has startup scripts appropriate for most of the major shells . this simplifies things especially for new users, who in most cases don't even know which shell they are using.

some of the startup scripts are found in $birch/local. because almost any code could be added to these scripts, the system administrator has great flexibility in tailoring birch to the needs of the system and the user base. for example, the default pdf viewer is set by the statement 'gde_pdfview=acroread'. on a system that did not have adobe reader, the statement could be changed to a different pdf viewer eg. 'gde_pdfview=ggv'.

first time users run the 'newuser' script to set their accounts to read the birch startup scripts. consequently, birch does not have to be installed in system directories, but instead, can be administered through a regular user account in a world-readable directory. therefore, root permissions are not required to install and manage a birch system. eliminating the need for root access also provides added security.

a single view of all documentation and datafiles
one of the problems facing users on a system with many bioinformatics packages is that documentation is often scattered across many locations on the system. the software included with birch is from a wide variety of authors, and documentation is written in different styles , and in many formats   <cit> . to make documentation easy to find, documentation for the core birch programs is catalogued in the birchdb database, and documentation for locally-installed programs is catalogued in the lbirchdb database. both databases are implemented using acedb  <cit> , a small database engine which includes an easy-to-use graphic interface. when birch is installed or updated, the contents of both databases are merged, and a hierarchical set of web documentation pages is generated, including programs listed by category, programs listed by package, and a program index. for each program a separate web page is generated, listing the name and short description of the program, information on how to launch the program, links to documentation and sample datafiles, a listing of os/hardware platforms for which the program is available, as well as a link to the web page describing the package to which the program belongs. an example is seen in figure  <dig> 

the user doesn't care whether programs are part of the birch core, or are locally-installed. one of the goals of birch is to make the documentation web pages appear as if they were written specifically for the local birch site. this is particularly useful because most first-time birch users will also be using unix for the first time. rather than giving the user a generic set of web pages, the birch documentation pages have sections earmarked for system specific information, such as how to log in or which desktops are available. during installation and updating, these sections of the birch web pages are replaced with local content. for example, the email address for the birch administrator at the university of manitoba is "psgendb@cc.umanitoba.ca". at another site, the email address would be changed in all web pages to that of the local birch administrator eg. "birch@myhost.org".

many sections of the birch web site can be automatically replaced with html code specific to the local system. these sections include links to local pages for obtaining and setting up a unix account, descriptions of local databases, locally-installed software, as well as institutional logos, announcements, and links to local web sites. for example, at the university of manitoba, both cde and sun java desktops are available. the birch home page contains a set of links to documentation for these desktops as shown in figure  <dig>  during installation and updating, birch will replace this section with html code found in $birch/local.

simplifying birch system administration
birch provides for the system administrator an organizational framework and tools that ensure that programs and documentation remain easily accessible to users. because startup scripts are read from a central location, the user never needs to perform configuration steps when new software or databases are installed. by the same token, installation and updating of a birch site is automated by birchconfig, the birch install wizard. the birch administrator's guide spans numerous topics, including customization of the birch web site, managing systems with multiple servers or operating platforms, installing and merging 3rd party applications into birch, and setting default applications for viewing and displaying data.

birch tries to minimize the skill set needed for being a birch administrator. where a computer specialist is not available, a biologist with basic knowledge of perhaps  <dig> of the most common unix commands, some knowledge of how to write and edit web pages, and some knowledge of shell scripting should be able to install and update a birch system for a lab or working group. minimizing this skill set has guided the design of birch. recognizing that tutorials are as important for the system administrator as they are for the user, the birch administrator's guide covers all aspects of local customization and addition of new programs with step-by-step instructions, illustrated with screenshots.

RESULTS
one of the problems with the decentralized pc model of computing is that it implicitly makes every user a system administrator. birch frees biologists from system administration tasks, allowing them to focus on being users.

it could be argued that the single biggest limiting factor in bioinformatics is not hardware or software or algorithms, but the high learning curve needed to work with all but the simpler tools. by handling the minor technical details, the learning curve is shortened, allowing the user to concentrate on the theoretical considerations of running the program. for tasks such as phylogenetic analysis, in which numerous steps are required, analysis pipelines can be built into a single menu. at the same time, inclusion of programs in a pipeline does not negate the ability to use each of them as standalone programs, where finer control is needed for intermediate steps.

while gde is not itself an object-oriented application, the birch implementation of gde uses some oo strategies, within the limitations imposed by the diverse ways in which different programs represent the same types of data. most importantly, four gde interfaces allow data to have some of the behavior of objects. for example, a phylogenetic tree, regardless of how it was generated, will appear in a tgde window. the 'methods' of a tree object would be implemented in the menus that appear in tgde. at a lower level of implementation, where there are commonalities in data types, a single script or program often handles input or output for many programs. for example, a single program parses the ids for hits from blast or fasta, and sends output to files, viewers, or even dgde. in the latter case, the ids are in the form of a list, which could be used as input for databases queries.

birch is flexible enough to accommodate programs written any language, and documentation in many different formats. while it is straightforward to install many software packages side by side on any computer system, there are usually few mechanisms for integrating them into a single view for the user. in principle, programs and documentation could be added to a local copy of any bioinformatics package. depending on the package, it might be necessary to revise programs and documentation to be added to adhere to a specific requirements, such as an api, or documentation format, respectively. these changes would have to be re-integrated each time the package was updated. birch follows the opposite strategy. since integration of local add-ons is a standard part of a birch update, updates do not break local changes.

as described above, birch is also unique in supporting a heterogeneous computing environment with multiple os/hardware platforms coexisting. to make this possible, there is only one version of birch, not one for each platform. birch is organized around a core of platform-neutral scripts and java programs. platform-specific binaries and libraries are downloaded separately. while birch currently supports three platforms  it would be straightforward to support other platforms. in fact, adapting birch from solaris-sparc to solaris-amd <dig> required less than one person/week.

CONCLUSIONS
birch is designed from the perspective of the biologist, keeping in mind that ease of use is highly dependent on ease of system management. for labs or institutions interested in setting up a central bioinformatics system, birch is a quick way of getting started. at the same time, the organization and administration of an existing collection of programs could be improved by integrating these into a local copy of birch.

availability and requirements
project name: birch

project home page: 

operating systems: solaris, linux

other requirements: sh, csh, python, java

restrictions: none

