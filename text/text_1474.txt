BACKGROUND
lipids and their metabolic derivatives play a crucial role in the biology of many living organisms. imbalance or abnormality in lipid metabolism often accompanies diseases such as alzheimer's disease, mycobacterium infections, and cancer. in order to attain a better understanding of the role of lipids in physiological processes, scientists have turned to high throughput technologies and system-level approaches to analyze the lipid composition of living organisms, in a field broadly termed lipidomics  <cit> . lipidomics generates a large amount of heterogeneous chemical and biochemical data that must be integrated and analyzed in a systematic manner. such efforts are, however, hampered by the lack of consistent lipid classification.

classification is a core activity in biomedical investigation  <cit>  and the robustness of a classification scheme clearly has profound consequences on the interpretation of scientific experiments and data analyses. it is important to distinguish between annotation and classification within this study, since the lines between the two activities may effectively vanish in certain contexts. while the results of classification can be used to annotate chemical entities with class membership information, in this work we shall regard annotation as a distinct activity from classification because we shall use molecular annotation information that is not an outcome of classification in order to enable automated classification of molecular entities.

for lipids, as for many other chemical entities, classification is extremely important because it helps predict the biological activity of a given molecule based on that of related molecular classes, since biological functionality is a direct consequence of molecular constitutional and structural configuration. this knowledge can be used when searching for drug targets, bio-transformation candidates, or in constructing metabolic and retro-synthetic pathways  <cit> . in current practice, lipids can be systematically classified according to various features, such as atomic connectivity, physicochemical properties, characteristic functional group presence, biological activity, biosynthetic pathway, or organism/system of origin. few of these classification schemes have explicitly stated consensus criteria or rigorous definitions for membership of specific lipid classes, let alone machine-understandable ones. this further exasperates the existing challenges in the understanding and sharing of lipid-related knowledge. consequently, lipid nomenclature has yet to become a robust research tool for lipidomics and lipid-related fields.

the de facto standard central repository of lipid molecule data, lipid maps  <cit> , primarily uses is-a relationships to categorize lipids, with many definitions describing lipid maps lipid classes remaining implicit. moreover, when classes within this database  are defined, it is often done with a diagram in the form a molecular graphic that requires a trained lipid expert to be able to interpret and use it for manual classification tasks. no definition, independent of the diagram and corresponding chemical structure, exists and the diagram is not flexible, or extensible. a rigorous definition demands a declaration of minimal necessary and sufficient conditions for class membership that could adequately describe a lipid without referring to a molecular structure diagram. to constructively address the absence of a formal definition, lipids must be defined in a manner that is systematic, yet at the same time explicit and machine-interpretable. while numerous languages are available to represent knowledge, the emergence of the semantic web as a collection of standards that extend current web technology is finally allowing us to represent, publish, share, reuse, query, interconnect, and reason about both data and expert knowledge. of particular interest is the web ontology language  which provides an expressive and decidable subset of first order logic that enables the construction of formal ontologies for executing automated reasoning tasks that require inferences to check data consistency, undertake classification and answer queries. recent progress in the development of formal ontologies for lipids in owl  <cit>  has made it possible to define lipids in a manner that is systematic, yet at the same time semantically explicit, enabling machine reasoning about lipids.

semantic web technologies for lipidomics
the lipid ontology, lipro  <cit> , captures knowledge about lipid types and their structural features. in lipro distinct combinations of functional groups underpin the axiomatic definitions of lipid types, and they are asserted as both necessary and sufficient  in order to support automated classification. the lipid ontology contains approximately  <dig> lipid definitions that rely on the precise combinations of functional groups, based on the mereological relationships  between a compound and its functional groups  <cit> . for example, in lipid maps, hydroxy/hydroperoxyeicosatrienoic acids are defined as molecules containing exactly three alkenyl functional groups, as well as a hydroxy or a peroxy functional group, a carboxylic acid group, and a primary alkyl chain. by formalizing these class restrictions as an equivalent class axiom, it becomes possible to use automated reasoning to infer class membership for an instance of a lipid, based on functional group annotation data.

however, a framework consisting solely of functional group annotation and chemical classification alone, our primary use case, does not adequately address the full spectrum of problems in lipidomics. for instance, a lipid researcher may not only be interested in the class of a given lipid, but also its biochemical role, putative interacting proteins, and various chemical metrics useful for rationalizing the biochemical activity of the lipid. the ability to integrate, analyze, and synthesize disparate information on the fly is especially desirable in investigations where rapid screening of thousands of novel compounds is necessary to identify entities of potential commercial or practical significance.

the problem of integration of disparate data in cheminformatics and bioinformatics has, to some extent, been addressed by the encoding of chemical and biological data using the resource description framework   <cit> , a base-level formal language for the semantic web. in rdf, knowledge is captured in the form of collections of statements represented as subject-predicate-object triples. repositories of triples, or triple stores, contain explicit relationships between the various biochemical entities , as well as information about their measured and computed characteristics. using the sparql query language, triple stores can be queried for entities that have a particular combination of attributes and relationships. taken together with a formally defined ontology of types and relationships, new facts can be inferred using automatic reasoning. already, several early applications have successfully demonstrated the power and the versatility of this approach to knowledge integration in the life sciences as well as assisting drug discovery  <cit> .

in the vast majority of cases, however, relational databases remain the predominant storage medium for life sciences data and difficulties in answering a particular query from such biochemical knowledgebases may sometimes arise due to missing data or insufficient concept mapping. such data and relations could potentially be derived automatically, but the poor connectivity and interoperability of the various software packages required for such data repopulation frequently necessitates the involvement of human experts. another manifestation of semantic web technologies provides a solution for problems of software interoperability, specifically for integration of biomedical resources, using semantic web services. the semantic annotation, discovery, and integration  framework  <cit>  makes it possible to automatically integrate database queries with semantic web service-enveloped computational components and automatically construct elaborate computational workflows through a single sparql query, with no additional programming or manual software matchmaking on the part of the researcher.

semantic automated discovery and integration framework
sadi is a framework for creating semantic web services. it comprises of a set of conventions that make it possible to create http-based services that are semantically described and that can be automatically discovered and orchestrated. two key features are that i) sadi services work by providing additional information about the input data they consume and ii) they use rdf documents as the medium of exchange. service inputs and outputs are described semantically as classes described using the web ontology language . the service responds to an input rdf document if the subject can be inferred to be an instance of the service's specified input class. the service is then expected to generate new information, as specified by the output class, which it associates to the subject. thus, the output class specifies what new annotations may be added by the service.

an important part of the sadi framework is a freely accessible and expandable registry in which services and their descriptions are indexed and through which services are exposed for discovery and automated composition. because the input class, the output class, and the predicates corresponding to the annotation placed upon the subject in the input are known and formally defined, it is possible for an external client to automatically reason over the available services and identify services that have to be called in order to complete a given query. for example, consider a service that receives as input a protein identifier  and produces as output its corresponding protein sequence. the inputs of the sadi service will correspond to a class 'protein' in an external ontology  which has a 'uniprot identifier' as an attribute. the output of the sadi service will have 'amino acid sequence' as an attribute.

formal semantic service descriptions in sadi facilitate completely automatic discovery and composition of sadi-compliant web services by clients with machine reasoning capability. share  <cit>  is one such experimental client designed to perform automated discovery and service orchestration. share receives sparql queries as input and executes them by first discovering and then invoking suitable sadi services from an online sadi registry. for example, a query to compute the molecular weight of a protein given its uniprot identifier may involve the retrieval of the corresponding amino acid sequence based on the identifier from uniprot, followed by the calculation of the molecular weight of this sequence. if available, services and/or data will be used to form an uninterrupted chain linking the instance of the input class to the desired output class or annotation requested in the sparql query.

a typical share user must first determine the entity  they are starting with or asking about, and then determine what information they would like to obtain. the user then composes a sparql query using the types and relations present in the sadi registry. the share engine decomposes the query and identifies the set of services that are relevant to the query, and then generates and executes a query plan. thus, the user needs only to formulate a coherent query. in recent work we leveraged the interoperability and facile integration of sadi services using the web-based share client in a bioinformatics use case in the domain of mutation impact mining  <cit> .

in this work, we explore the construction of a prototype lipid classification and annotation pipeline to support lipidomics research by integrating small molecule structural and physical annotation, classification, and knowledge mining services within the sadi framework. we describe the automated classification through  the invocation of a service which is capable of annotating and enumerating the functional groups present in a given input molecule through substructure searching on the molecular chemical graph structure, as represented by the corresponding smiles string  <cit> , and  a classifier service that assigns chemical entities to appropriate ontology classes by reasoning over class description in the lipro ontology and checking them against the set of chemical subgroups provided by the structure annotation service. overall, our framework takes as its input an rdf-encoded description of the chemical graph of an arbitrary lipid and provides as output rdf functional group annotation information on this lipid, as well as its class membership information, also encoded in rdf. the utility of our functional group annotation and lipid classification services lies in the ability to provide a semantic description for newly discovered lipids for which no class is currently assigned. moreover, these services also provide the opportunity to review existing classifications based on expert manual curation, such as that of the lipid maps, which in our automated system are based exclusively on structural attributes.

RESULTS
overview
our work is motivated by the need for integrated query access to distributed services that compute information about lipids. here we describe services that, starting with a smiles representation of the lipid molecule, provide functional group annotations of molecules, and classify molecules according to these annotations . we illustrate, in conjunction with auxiliary sadi services, the integration of inferred class information with  information relating to proteins that interact with lipids belonging to the inferred lipid types and  literature references relevant to the class of the lipid under investigation. to assess the quality of our framework, we document the performance of our classification service on a small subset of lipids, namely of eicosanoids, found in the lipid maps database. finally, for each analyzed lipid maps eicosanoid molecule, we contrast the semantic definition of lipid classes in our ontology, with the class description in the lipid maps database.

integration of lipid resources with sadi and share
the first and the most important step in constructing our prototype pipeline is the development and integration of sadi-based annotation and classification semantic web services. the functional group annotation service  <cit>  consumes a molecule whose structure is specified as a smiles string  and annotates it with the set of unique occurrences of functional groups found in the molecule through subgraph isomorphism detection . in the input, a molecule is related to its smiles descriptor through the 'has attribute' relation  as defined by the semantic science integrated ontology   <cit> . here and elsewhere in this work, the sio prefix shall refer to this ontology . the descriptor itself is an instance of the type cheminf_ <dig>  and is linked to its string value through the 'has value' datatype . in the output of the functional group annotation service, a molecule is related to a given functional group through the 'has proper part' predicate .

listing  <dig>  a fragment of n <dig> rdf input to the functional group annotation service.

@prefix ss: <http://semanticscience.org/>.

@prefix sio: <http://semanticscience.org/resource/>.

ss:lmfa <dig> sios:sio_ <dig> ss:lmfa03010001smiles.

ss:lmfa03010001smiles

rdf:type sio:cheminf_000018;

sio:sio_ <dig> "ccccc/c=c/1c1ccccccco".

listing  <dig>  a fragment of n <dig> rdf output of the functional group annotation service.

<http://semanticscience.org/lmfa03010001>

sio:sio_ <dig> .

sio:sio_ <dig> .

. . . . .

sio:sio_ <dig> .

in turn, the lipid classification service  <cit>  consumes a molecule annotated with functional groups and produces annotation in the form of its lipro classification through the predicate lipidhasliproclass which is a subproperty of rdf:type and is defined in the supporting service ontology  <cit> , abbreviated as ont:

<http://semanticscience.org/lmfa03010001> ont:lipidhasliproclass lipro:lc_prostaglandin.

while one could write a script to sequentially call the two services, this can also be automatically carried out by the share client with an appropriate sparql query . please note that in the interest of clear presentation, the queries presented here are truncated. the full, functioning queries, along with detailed instructions for executing them, are available  <cit> .

listing  <dig>  a fragment of sparql query for classification of a lipid using the share client. full query is available  <cit> .

 select distinct ?liproclass ?lmclass ?lmclassid

 from <http://unbsj.biordf.net/lipids/service-data/lmfa <dig> rdf>

 where

   {

      <http://semanticscience.org/lmfa03010001> lco:lipidhasliproclass ?liproclass.

      <http://semanticscience.org/lmfa03010001> lmo:lipidhaslmclass ?lmclass.

      # 'has attribute'

      ?lmclass sio:sio_ <dig> ?lmclassidres.

      # 'identifier'

      ?lmclassidres rdf:type sio:sio_ <dig> 

      # 'has value'

      ?lmclassidres sio:sio_ <dig> ?lmclassid

   }

to execute the query, share first obtains the smiles information from the rdf file identified in the "from" clause . it then calls the annotation service with the smiles string found in the input and obtains the functional group annotation. having detected the compatibility of the annotation service output and the classification service input type, the client then calls the classifier service by providing the functional group annotations and obtains the identifiers of the lipro classes that match the given lipid. in addition, it discovers the lipid maps classes that would apply to the lipid being classified . this is achieved by calling a third service  <cit>  that simply consumes the identified lipro types and maps them to the corresponding lipid maps types. there is absolutely no programming involved, nor any computer-aided workflow composition: the query is declarative and can be created by a user with no programming experience.

this query returned the molecule classified into two lipro classes, lc_prostaglandin and lc_isoprostane. the definitions of these classes match the structure of the original molecule in terms of participating functional groups and conform to the informal definitions of the corresponding lipid maps types fa <dig> and fa <dig>  although rigorous query performance evaluation is not among the goals of our exploratory study, we would like to mention, for illustrative purposes, that the execution of the query as indicated took less than one minute. most of this time was spend by the share client automatically constructing the workflow, whereas each of the service calls took less than one second.

integration of lipid class information with reference literature
given lipid class information, it is now possible to identify the biological significance of the lipid under investigation by automatically mining the relevant literature for the roles of lipids belonging to this class. in a related effort, we have been exploring the use of text mining for the extraction of information from scientific literature as it pertains to lipids and related biological entities, such as proteins. we created a sadi service to carry out text mining , making it possible to identify lipids mentioned in text corpora composed of the latest scientific literature. this service consumes the document location  and annotates it with corresponding lipro lipid classes using sio's 'is referred to by' relation that links entities to sources of information about them. to support our experiments, text mining has been performed for a small set of published work in lipid-related research and stored in an rdf triple store, which will be later extended to accommodate a more comprehensive body of literature. an additional service, the lipid literature db service, provides the lipro annotation for a given publication by retrieving the text mining results from this triple store  <cit> . this service accepts a lipro lipid class as input and can identify the instances of this class and its subclasses within published documents. by combining all these services, it becomes possible to not only classify a given lipid, but also find information about its potential biological activity within published literature. for example, starting from a simple smiles description of an eicosanoid, we can identify it as eicosapentaenoic acid, an essential fatty acid, and find the relevant literature .

listing  <dig>  a truncated literature retrieval query. full query is available  <cit> .

 select distinct ?liproclass ?document ?lmclass ?lmclassid

 from <http://unbsj.biordf.net/lipids/service-data/lmfa <dig> rdf>

 where

   {

      <http://semanticscience.org/lmfa03010001> lco:lipidhasliproclass ?liproclass.

      <http://semanticscience.org/lmfa03010001> lmo:lipidhaslmclass ?lmclass.

      #      'has attribute'

      ?lmclass sio:sio_ <dig> ?lmclassidres.

      #            'identifier'

      ?lmclassidres rdf:type sio:sio_ <dig> 

      #         'has value'

      ?lmclassidres sio:sio_ <dig> ?lmclassid

      #         'is referred to by'

      ?liproclass sio:sio_ <dig> ?document.

   }

identification of related proteins based on lipid type
our final use case considers linking the lipid under investigation to potentially related proteins in metabolic or signalling pathways. this is achieved by formulating a share client query that automatically discovers, invokes, and integrates the output of five very different sadi-compliant services. for protein interaction information, we rely on the lipid maps proteome db   <cit> , which links lipids to proteins that are involved in lipid metabolism or interactions.

we created a service that simply uses lmpd to provide uniprot entries for proteins related to a specified lipid category  <cit> . this service links a lipid within an identified high-level lipid maps category  to its protein interaction partner through the sio's 'is related to' relation. however, this service is not strictly semantically interoperable with our classifier service. while the classifier service produces the closest matching lipro lipid class and another service maps lipro type annotations to lipid maps type annotations  <cit> , the higher-level lipid classes required by the protein retrieval service are not explicitly stated. to address this, we have created another lipid maps-based service to take a uri denoting an arbitrary class in the lipid maps nomenclature, for example, a lower-level class like prostaglandins , and to compute the lipid maps higher-level category that contains this class, which for prostaglandins is fatty acyls   <cit> . a simple sparql query prompts share to integrate this higher-level class information with inferred lipid classification information .

listing  <dig>  a truncated sparql query to identify proteins related to the lipid under investigation. full queries are available  <cit> .

 select distinct ?liproclass ?lmclass ?lmclassid ?lmcategory ?uniprotrecord

 from <http://unbsj.biordf.net/lipids/service-data/lmfa <dig> rdf>

 where

   {

      <http://semanticscience.org/lmfa03010001> lco:lipidhasliproclass ?liproclass.

      <http://semanticscience.org/lmfa03010001> lmo:lipidhaslmclass ?lmclass.

      #      'has attribute'

      ?lmclass sio:sio_ <dig> ?lmclassidres.

      #         'identifier'

      ?lmclassidres rdf:type sio:sio_ <dig> 

    #    'has value'

      ?lmclassidres sio:sio_ <dig> ?lmclassid

      ?lmclass rdfs:subclassof ?lmcategory.

      #      'is related to'

      ?lmcategory sio:sio_ <dig> ?protein.

      #      'is about'

      ?uniprotrecord sio:sio_ <dig> ?protein }

here, lines up to  are our base case: we essentially obtain a lipid maps low-level class uri in the variable lmclass. line  maps this class to the corresponding higher-level lipid maps category and line  subsequently retrieves related instances of related proteins, which is done by calling the corresponding service  <cit> . the auxiliary constraint in line  extracts the url of the corresponding uniprot record from the protein description returned by this service. a test run with share terminates in less than a minute and returns a list of  <dig> proteins corresponding to fatty acyls , which is the common lipid maps category for prostaglandins and isoprostanes to which the lipid is classified. for this input, we have received, among others, the urls for the uniprot records p <dig>  a palmitoyltransferase, and p <dig>  a lipooxygenase, both of which are known to be involved in fatty acid metabolism. thus, we have been able to integrate five different services to take our prototype pipeline from a simple smiles specification of a lipid to its biological roles found in literature and the potential protein partners.

evaluation of lipid classification performance
the accuracy of lipid classification that we are capable of achieving defines to a great extent the applicability of our entire prototype lipidomics infrastructure. within a randomly selected but representative sample of  <dig> eicosanoid lipids, our combination of annotation and classification services assigned a class consistent to the lipid maps asserted classes in 96% of lipid entities considered. this figure includes about 8% of all lipids that received classification to a more general class in the classification hierarchy than the target class, while still being a correct classification. furthermore, approximately 4% of lipids received a classification that was entirely incorrect, and 7% of all lipids were classified into a lipid maps-consistent and lipid maps-inconsistent class simultaneously. for instance, in case of the lipid maps record lmfa <dig>  that was correctly classified as a lipro:lc_prostaglandin and the corresponding lipid maps class fa <dig>  this lipid was also classified as a lipro:lc_isoprostane , which is incorrect. this is because additional non-structural information is required, namely synthetic route, to differentiate the two classes.

misclassification was not always a reflection of insufficient class definitions in the supporting ontology. despite manual curation of the lipid maps database, it appears that the database is not currently entirely error-free. for instance, compounds lmfa <dig> and lmfa <dig> were classified as epoxyeicosatrienoic acids by our automated classification framework and as hydroxy/hydroperoxyeicosatrienoic acids in the lipid maps database. in the lipid eicosanoid ontology, hydroxyl/hydroperoxyeicosanoic class  is specified using the following equivalent class expression.

'has proper part' exactly  <dig> 'primary acyl chain'

and 'has proper part' some 'carboxylic acid'

and 'has proper part' some 

and 'has proper part' exactly  <dig> 'alkenyl_group'

similarly, the class of epoxyeicosatrienoic acids, equivalent to lipid maps class of the same name  is specified in leo with the following expression.

'has proper part' exactly  <dig> primary_acyl_chain

and 'has proper part' some epoxy

and 'has proper part' some carboxylic_acid

and 'has proper part' exactly  <dig> alkenyl_group

using our functional group annotation service, both of these acids were found to contain  a combination of three alkenyl functional groups, a carboxylic acid functional group, and one epoxide on the main chain, without the alcohol, hydroperoxide, or peroxide functional groups necessary to classify them into fa <dig>  this suggests that these two fatty acids should, in fact, be reassigned into a different class in the lipid maps database, namely into the epoxyeicosatrienoic acid class, fa <dig>  thus, explicit class definitions in our lipid ontology have allowed us to efficiently and automatically identify and correct an error in the expert-curated database.

discussion
fuelled by massive amounts of data derived from disparate experimental procedures, research in biology and chemistry has become increasingly interdisciplinary. in contrast there are relatively few examples of consensus data and knowledge representation formats or frameworks that can truly integrate the computational, literature, and experimental resources necessary for success in interdisciplinary fields like systems science. the prototype framework presented in this paper has demonstrated the power of self-organizing semantic web services in addressing a highly interdisciplinary problem. in this work, we have been able to successfully integrate computational and informational resources from disparate disciplines to produce a single prototype framework for lipidomics research that requires no special skills from the end user, other than the ability to formulate standard sparql queries. in the process, we have been able to make the case for the use of owl ontologies in the construction of consistent, reproducible, and flexible chemical hierarchies that leverage an advanced range of logical constructs from the owl language.

integration with broader web service networks
the prototype pipeline we have described has significant potential for extension and further refinement, as additional services become available. for example, the current chemical classification service need not be constrained solely to structural measures since the integrative nature of sadi allows for the flexible definition of chemical classes based on multiple features of the classes in question and subsequent automated invocation of the appropriate set of sadi-compliant services. a library of sadi services computing many chemical metrics and properties is already available  <cit>  and can be readily invoked to define a wide range of chemical classes  <cit>  if these properties are stipulated in the formal class definitions in the lipid ontology. furthermore, additional services can be integrated into this framework to address queries involving predicted lipid metabolism, retrieval and clustering with similar chemicals, or even rapid docking of lipids to the collection of the potentially interacting proteins that we are capable of identifying with this prototype pipeline. in short, the applications and extensions of this work are only bounded by the knowledge and the services that can be represented and implemented consistently within the context of the semantic web.

limitations of the proposed approach
the experiments with the lipid classification services presented here have confirmed some of the limitations of the sadi framework identified and discussed elsewhere  <cit> . one key limitation is the challenge of query composition, specifically construction of sparql queries using the share client. while recent work has significantly eased the burden of creating sparql queries for ontologies that use alphanumeric identifiers by using the more human friendly labels during query formulation  <cit> , more work is necessary to abstract this powerful, but technical interface so that it becomes more user-friendly to life scientists. in this respect, rdf graph browsing, possibly faceted, may offer a friendlier alternative to sparql query composition by allowing the user to dynamically migrate from one entity to another via incoming or outgoing properties. sadi is compatible with this approach because one can view the entirety of rdf data that can be generated by the collection of sadi services within a given repository, as one virtual rdf graph  <cit> . practically, when a user visits a node, in addition to the links to catalogued data, the available properties that can be attached to the node by the services in the repository are also presented. if the user tries to follow such a link, calls are made to the appropriate services, and the generated data is added to the currently existing part of the rdf graph. although this approach is not conducive to rapid automated classification of large amounts of lipids, it is efficient in informing the creation of integrated queries and the identification of the limitations and capabilities of the services present in a given sadi repository, in a user-friendly fashion. this approach has already been implemented as a plug-in to the sentient knowledge explorer, a commercial data exploration and visualization system from io informatics  <cit> .

another viable possibility is manual or computer-aided composition of sadi services into workflows: an activity that can be characterized as programming without coding. this can be beneficial in fine-tuning service composition. a plug-in for the taverna workflow management system that supports such use of sadi services is available  <cit> . with this plugin, the task of service composition is greatly facilitated: mapping of available starting data to service inputs in taverna is semi-automated, and the system also suggests services that can apply to a piece of data returned by a service present in a given workflow, consequently the user only needs to look through short lists of applicable services. this allows the user to create complex queries and workflows that can potentially draw on services other than those already provided within the sadi framework. in short, the availability of such query tools increases the practical value of sadi as an integration medium for lipidomics resources, and bioinformatics resources in general.

the second aspect of the sadi framework that limits its rapid adoption is the challenge of creating semantic descriptions of services by sadi service providers  <cit> . this includes finding relevant ontological primitives in existing ontologies and making the chosen form of semantic description  compatible with the way related services are described, to ensure that new services can be seamlessly integrated with existing ones. in the current study this problem has been much less significant than it is for cases where semantic descriptions must facilitate the integration of services generated as a result of multiple disparate efforts. we attribute this to the consistent use of sio predicates in all service descriptions generated as a result of this study. being an upper level ontology, sio provides for many of our practical semantic modeling needs, such as expressing parthood on molecules, specifying attributes and identifiers of entities, citing publications and db records, among others. more importantly, being currently de facto the central ontology of sadi services, sio provides a common vocabulary for many services in the sadi service network, and thus greatly alleviates the problem of semantic integration. consistent use of sio also greatly simplifies query formulation, identified earlier as an ongoing challenge  <cit> , since the user needs to know few property predicates and classes specific to the lipid classification task - other more general primitives used in our queries can be used in many different contexts and thus are easier to remember.

the third feature of the sadi framework that is worthy of discussion is that sparql querying over a network of distributed sadi services is essentially a special case of data federation and is likely to exhibit some performance problems common to other data federation implementations. for example, in relational database federation, indexing remote tables in order to facilitate rapid relational algebra joins is a significant challenge. even in cases where the resulting join of two tables may be small, computing the join may require sending a lot of data over the network. the sadi approach to service integration is not immune to this problem: there are services that may potentially generate large outputs and only fractions of these data may have to be sent as input to other services, which is a close analog of relational joins. although this may become a significant potential limitation to the sadi approach in some cases, as our first and last use cases suggest, the majority of queries of relevance to lipid classification are computed rapidly because they only call services that generate small output. even the query retrieving all proteins related to a lipid is computationally inexpensive since the sadi service producing the long list of proteins is called last and the size of its output is not multiplied by the computational cost of any downstream service calls.

finally, there are several limitations to lipid classification that are specific to the pipeline presented here. of particular note is the tight coupling of the functional group annotation service to the lipid ontology. whenever novel patterns are identified as essential in formulation a lipid class definition, the functional group annotation service would have to be updated. for example, if a certain substructure is defined in the lipid ontology and is used in formulating the definition of a given class, the absence of the capacity of the functional group annotator service to detect this substructure in the input molecule will translate into classification inaccuracies with respect to the newly defined lipid class. fortunately, it is not necessary to continually refine the existing annotator service, as new functional group annotator services with the same semantic definition of their functionality as the existing service could be generated and automatically integrated into the classification pipeline with sadi. this is afforded by the controllable capacity of sadi to call multiple services that are capable of producing similar annotations on a given entity, followed by a seamless integration of such annotations from disparate services. this allows third parties to extend our lipid ontologies, introduce novel annotations and functional groups that may be essential in lipid class definition, and still be capable of classifying lipids in the fashion demonstrated here, provided they also create supporting sadi services to expand the range of annotations necessary.

improving lipid ontologies and databases
although we have made resource integration a primary focus of this work, the novel chemical classification functionality and the opportunity to start evaluating established manually curated knowledge in public databases are also significant developments in this work. for the first time, and with minimal effort, we have been able to produce consistent, coherent, and logically rigorous definitions of chemical classes, which can transform the way chemical classification is carried out within the major chemical knowledge repositories. we illustrate that a shift in focus from the manual classification of individual molecules to the logical definition of the nature of chemical classes is not only feasible but that existing chemical ontologies and hierarchies can be dramatically expanded, improved, and potentially reused with relative ease. in addition our initial tests on a limited set of chemical entities are highly promising with respect to demonstrating the feasibility of this approach and with further expansion of our ontology, with formally defined classes, we shall be able to maintain and improve the accuracy of classification we have already achieved.

moreover, we have also been able to identify cases where our simple structure-based approach was insufficient in producing an accurate classification. this is not an insurmountable problem, and explicit requirements for the integration of additional information can be easily addressed by adding to the class definition in owl and supporting services or knowledge bases to ensure a correct class inference is made. in fact, the ability to identify cases where classification cannot be achieved by chemical structure characterization alone is a positive feature of our approach which drives the specification of a rigorous, unambiguous, and error-free chemical classification. as the lipid ontology matures and more data and web services are available to complement the solely structure-based definitions of lipid classes introduced here, we anticipate that the accuracy of the classification will improve.

we have also seen that our classification framework helps identify the exact compounds that have been misclassified, letting the chemical curator find and correct either the definitions used for classification or the asserted class membership. in the process of creating the lipid eicosanoid ontology used for classification here, we have experienced first-hand the instant feedback that the classification results provide for the refinement of chemical class definitions, correcting and improving our classification results to the level of accuracy reached here. we surmise a yet higher accuracy is within reach, however the current performance is sufficient for the purposes of demonstrating the methodology with the prototype classification and annotation pipeline presented here.

sadi in perspective: evolution of web service-based resource integration
the use of web services for integration of distributed resources is a relatively popular research topic that can be discussed at length, so we shall only refer the reader to some related work that is either closely related to sadi or is based on well-known web service technologies, such as soap and rest. the approach most closely related to sadi is that of biomoby  <cit>  - a direct predecessor of sadi. many core features of sadi were already present in biomoby. for example, in biomoby, messages exchanged between clients and services carry their own semantics and the decentralised use of ontologies is enabled. one of the advantages of sadi over biomoby is the use of rdf for the data model and format for service io, whereas biomoby defines its own xml-based format. as a consequence, sadi service providers and consumers can choose from a variety of rdf api and tools to use in combination with the sadi software.

the key advantage of sadi is that the relation between service inputs and outputs is explicitly ontologically defined, in contrast to biomoby which merely allows to semantically categorise service operations and io by specifying the ontological type of the service operation and the ontological types of the data the service expects as inputs and produces as output. such categorisation  allows querying of service registries for services that provide functionality of specified types and acting on data of specified types, and  helps identify services that can be combined, based on their io types. biomoby's categorization of service operation is however insufficient to support absolutely automatic service discovery and invocation for query execution. although all our use cases can be solved by writing biomoby services and combining them in pipelines, the creation of the pipelines would require manual work by a bionformatician who would first identify the types of operations based on the use case requirements, and select the appropriate services, based on their textual description. for a more detailed comparison of sadi with biomoby and some other related approaches, we refer the reader to  <cit> .

it is also appropriate to mention the two best known attempts to extend traditional web service technologies with semantic descriptions. sawsdl  <cit>  extends the web service description language , typically used to provide machine-processable descriptions of soap services - with references to classes from external ontologies. likewise, sa-rest  <cit>  specifies a way to assign such annotations to restful services. these frameworks are gaining popularity in the bioinformatics community because they are supported by the biocatalogue  <cit>  registry of life science web services. both approaches implement semantic categorisation in the same fashion as biomoby, so they also suffer from the corresponding limitations described earlier. moreover, in comparison with biomoby, they have an additional problem - the necessity for data mediation. since neither sawsdl nor sa-rest standardise the io data formats, they require service providers to write special xslt rules for converting native service io data to and from rdf to enable composition of services with incompatible io data types.

finally, we would like to mention the possibility of wrapping existing soap and restful services as sadi services. when service migration to sadi is impossible or impractical, one can sometimes write a proxy sadi service that converts the input rdf into a native input for the soap or restful service being wrapped, and converts the output of the service back to rdf. this kind of conversion may be easier for services with sawsdl or sa-rest descriptions because they already have semantic types assigned to input and output and, possibly, rdf conversion rules in xslt, albeit the relation between input and output still needs to be specified.

future developments
a limitation of our classification scheme is the inability to handle molecular classes that are defined in part by some feature of chemical functionality . we have only demonstrated an efficient framework to handle structure-based classification here, and would like to handle functional classification in a separate work. however, functional classification is still possible with our approach; it merely requires a different set of molecular annotations in order to adequately support classification. for instance, the class of oestrogen receptor agonists may involve some consistent chemical substructures or properties, but the underlying feature of the class is the presence of an ec <dig> value annotation on a given molecule and the location of this value within a given numerical range. our framework allows for formulation of classes with respect to a broad range of annotations, so functional classification is only a matter of adequately formulating the definition of a given functional class, and seeking the appropriate underlying molecular descriptors. we understand that some molecules may be inconsistently classified by human experts for historical reasons , or due to the broad definition of chemical classes that may invite ambiguities or inconsistencies. however, we do not foresee this as an insurmountable challenge; it merely awaits careful consideration and contribution to the specification of formal definitions by the relevant communities of researchers. given the flexibility, the ability to improve accuracy, and the extensibility of class definitions in owl, as well as the ease of integration of these logical definitions into chemical classification with sadi-enabled service interoperability, we believe that our approach can be successfully expanded to include all of lipid maps and many other primarily structure-based classification schemes. in the future, we intend to expand our framework to adequately treat the entirety of the lipid maps hierarchy and to enable automated classification for the entire lipidomics domain, further expanding and contributing to the ecosystem of novel in silico applications in this domain  <cit> .

CONCLUSIONS
chemical classification and facile integration of disparate computational and information resources is of immense value to the interdisciplinary and highly interlinked future of life sciences research, especially -omics and systems level investigations. the framework presented here provides a potential means for the integration of computational and informational resources and leaves room for further expansion and improvement of chemical knowledgebases and ontologies. given our results, we strongly believe that the principles and approaches we demonstrate here can form the foundation for future knowledge integration and integrative analysis in life sciences.

