BACKGROUND
finding homologous region is one of the most important tasks in current biological works. it is a task to find similar regions between biological molecular sequences. this task is translated into local alignment which scores the similarity between sequences with an edit distance. the state-of-the-art scoring method for the local alignment is smith-watermann dynamic programming algorithm  <cit> . the main drawback of this algorithm is that it is impractical with large-scale search tasks due to its high computational complexity.

one practical approach to speeding up local alignment algorithms is filtering out non-homologous regions before aligning sequences. this process consists of a filtering step and an extension step in general. at the filtering step, short fixed-length common words that are found at both query and target sequences are selected. then at the extension step, it is determined whether each word can be extended into a significant alignment. blast  <cit>  and fasta  <cit>  are the most popular programs among the filtering-based programs for homology search. both of them use fixed-length continuous matches as a template for finding common words, and the template is called a seed. this approach has a drawback of sacrificing sensitivity for speed. the bigger the seed size is, the higher the risk of missing true alignments gets. at the same time, small-sized seeds tend to generate more random hits, and then result in computational slowdown. patternhunter  <cit>  enabled more sensitive homology search than blast by introducing a non-continuous seed such as 111*1**1*1**11* <dig>  so-called a spaced seed.

after the notion of non-consecutive seed was presented, the spaced seed has been studied by many researchers in aspects of computational complexity. the studies of evaluating the performance of spaced seeds over consecutive seeds were investigated by  <cit> . among these researches,  <cit>  and  <cit>  showed that finding the optimal spaced seeds is np-hard, but the sensitivity of a seed can be computed in polynomial time. several algorithms  <cit>  have been proposed to compute the sensitivity of a seed exactly. in addition, these algorithms can be accelerated by several heuristic methods  <cit> . the extension of spaced seeds was achieved by adapting the seeds for more specific biological sequences  <cit>  or building models to understand the mechanism which makes spaced seeds powerful  <cit> .

although many advanced evaluation measures are proposed as measures of spaced seed's sensitivity, hit probability proposed by ma et al.  <cit>  is still being used as a notion equivalent to the seed's sensitivity. the hit probability of a seed is defined as a probability of finding the seed at a random sequence at a specific similarity level. the limitation of hit probability is that it is computed only at a specific similarity level even though homologous regions actually have various similarity levels. as a result, an optimal seed for a specific similarity level could not be optimal for other similarity levels. for instance, the seed presented by patternhunter  was only optimal at the range of similarity levels from 61% to 73%  <cit> . however the homologous regions of genome comparison have more diverse range of similarity levels. therefore, a new measure of seed's sensitivity is needed which covers a range of similarity levels of homologous regions.

this paper proposes an algorithm of computing integration of hit probabilities at a range of similarity levels. in order to reflect a range rather than a point, the integration of hit probabilities is used, and it is named as hit integration since it is considered as an accumulation of hit probabilities. we also prove that hit integration is computable by expressing the integral part of hit integration as a recursive formula which can be easily solved by dynamic programming. the experimental results show that hit integration reveals the seeds more optimal than those by patternhunter. the seed 111**1*11**1*1* <dig> is found to be an optimal seed for hit integration at the range of similarity levels from  <dig> to  <dig>  this seed results in about 2% higher sensitivity than patternhunter seed.

the rest of this paper is organized as follows. hit integration is first introduced and dynamic programming algorithm to compute hit integration is presented formally. next, the optimal seeds under hit integration is compared with the seeds recommended by other probability models. then, the quantitative comparison between seeds is explained. in methods after conclusion, the way of the experiment using biological data follows.

RESULTS
hit integration
hit probability of a seed is defined as the probability of finding the seed at a l-length bernoulli random sequence at a similarity level p. it has been used as a synonym of the sensitivity of a seed. however, hit probability is tightly linked with a specific value of similarity level, whereas sensitivity refers to the probability that a seed hits a region without consideration of the similarity level p. we define a more general probability model to measure sensitivity than hit probability by extending a specific value of similarity level to a range of similarity levels.

definition of hit integration
as the sensitivity covers a range of similarity levels, hit integration is defined to be the integration of hit probabilities over a range of similarity levels. the cumulation of the hit probabilities over a range of similarity levels is illustrated in figure  <dig>  the gray area below the curve represents integration of the hit probabilities from similarity level  <dig> to p. it indicates clearly hit integration of a seed below a similarity level p. therefore, hit integration can be computed by integration of hit probabilities. in order to simplify the expression of hit integration, we denote hit integration over a range of similarity levels from a to b as hi  where  <dig> ≤ a <b ≤  <dig>  because the presented algorithm in this paper can compute the hit integration from similarity level  <dig> to p, hit integration for an arbitrary range of a and b is defined as below. given both hi  and hi , hi  is computed by /. a special case of hit integration is when it covers all similarity levels, from  <dig> to  <dig>  in this case, the similarity parameters a and b are not needed. we will call it as similarity-level-free sensitivity.

computing hit integration
the computing algorithm for hit integration is derived from the dynamic programming algorithm of hit probability. at least to our knowledge, it is impossible to obtain an integral form directly from the hit probability because of its recursive form. we propose a novel idea of integrating the recursive form. before describing our novel algorithm, we briefly describe the algorithm to compute hit probability proposed by keich et al.  <cit> . and then extend the algorithm to compute hit integration.

notations
the notations for defining hit integration follow from those in  <cit> . a spaced seed q of which length is m is a string consisting of 1's and *'s.  <dig> stands for a 'require match' and * for a 'don't care'. the number of 1's in q is called as its weight denoted as w. conventionally, the first and last letter of q are defined as  <dig>  for example, the length and the weight of a seed 111*1**1*1**11* <dig> are  <dig> and  <dig> respectively. from this point on, a seed is assumed to be a spaced seed for convenience. a homologous region r with a length l is represented as a binary string in which  <dig> stands for a match and  <dig> for a mismatch. r  represents a subregion of r from i-th to j-th position. we assume that r is a bernoulli random string. then, the probability of occurrence of  <dig> in a position r  is denoted as p, and this p is called as the similarity level of r. for a seed q and a homologous region r, q is said to hit r if r has a substring r  which satisfies r  =  <dig> whenever q  =  <dig>  given a homologous region r with a length l and a similarity level p, the hit probability of a seed q is the probability that q hits r at or before the position l.

computing hit probability
for a seed q, a string b is said to be compatible with q if b  =  <dig> when q  =  <dig> for all  <dig> ≤ j ≤ min. let b be a set of all b's compatible with q. for a string b ∈ b, let f be the probability that q hits region r  which has b as its suffix. in case of |b| = m, f is  <dig> since q always hits b if b belongs to b. that is,   

in the cases where i is smaller than m, f is always  <dig> since q can not hit any region shorter than |q|. thus,   

when  <dig> ≤ |b| ≤ m, there are two cases:  the position before b has value  <dig>  and  the position before b has value  <dig>  thus, f can be recursively expressed as   

the hit probability of q on r is then equal to f , where l is the length of r and is an empty string. that is, f  is the probability that q hits the region r when a suffix is not given. the suffix 1b is always within b if |1b| ≤ m, but the suffix 0b could not be within b. keich et al.  <cit>  showed that f  is equivalent to f , where b' is the longest prefix of an element in b. when b is the longest proper prefix of a string that is in b, this relation is written as follows.   

computing hit integration: the integration of hit probabilities
hi  is the integration of hit probabilities of similarity levels from  <dig> to p where  <dig> ≤ p ≤  <dig>  the integral form is derived from the recursive function of hit probability by following modifications. according to equation , the integration of f  can be represented as a linear combination of other integral forms.   

let in  be an integral of the multiplication of pn and the hit probability function f , where n is the degree of the function i. that is,   

i <dig> is equivalent to the integration of hit probabilities. therefore, i <dig> with length l and an empty suffix ϵ gives the exact solution of the integral of hit probabilities. from the equation i <dig> = ∫ fdp and equation , equation  is expanded as   

this function corresponds to equation . equation , equation , and equation  are also translated into the following forms.         

mathematical proofs of equation ~ are described at additional file  <dig> 

dynamic programming of hit integration
the dynamic programming algorithm for hit integration is obtained from the dynamic programming of hit probability by substituting equation ~ for equation ~. the algorithm to compute the hit integration of a seed q is given below. the goal of this algorithm is to find i <dig> , since it is equivalent to hi .

input seed q, positive probability p, length l 

output hit integration of q

 <dig>  compute the suffix set b compatible with q.

 <dig>  for i =  <dig> to l do

 <dig>    for b ∈ b from largest to shortest do

 <dig>       nmin = the number of 1's in b

 <dig>       nmax = l - i + |b|

 <dig>       for n = nmin to nmax do

 <dig>          if i < |b| then

 <dig>             in  = 0

 <dig>          else if |b| = m then

 <dig>             

 <dig>          else

 <dig>             in  = in  where 0b' = b

 <dig>             i  = i  where 0b' = b

 <dig>             in  = i  + in  - i 

 <dig>          end if

 <dig>       end for

 <dig>    end for

 <dig>  end for

 <dig>  return i <dig> 

the suffix set b need to be obtained before entering the first loop at line  <dig> since b is not changed during the execution of the algorithm. b can be easily obtained by getting all combinations of binary suffix strings. all strings b ∈ b have to meet the following constraints. for all  <dig> ≤ i ≤ |b|, b  =  <dig> if q  =  <dig>  and b  is  <dig> or  <dig> if q  =  <dig>  for each suffix b, its longest prefix b need to be computed in advance. the computational procedure for b is same as that in the dynamic programming for hit probability. thus, the details of computing b is skipped in this paper. refer to  <cit>  for this procedure.

the algorithm has three nested loops. line  <dig> is the outer-most loop which increases the region length parameter i from  <dig> to l. the second loop at line  <dig> considers all suffixes b ∈ b. this loop also runs in descending order from the longest to the shortest suffix, an empty string. line  <dig> and  <dig> are the bound of all possible degrees of a function i where i and b are given. the minimum bound of the degree is limited to the number of 1's in a suffix b. the maximum bound of the degree is limited to the size of l - i + |b|. line  <dig> is the inner-most loop for a degree of n which computes in. line 7~ <dig> compute equation , and line 9~ <dig> compute equation . at line 12~ <dig>  in for 0b and i for 0b are obtained from the previously computed i's by following equation . line  <dig> computes in  using equation . this algorithm finally returns i <dig>  at line  <dig> 

time complexity
the following proof will show that hit integration can be computed exactly with only l additional time in compare with hit probability. time complexity of this algorithm is derived by the loops of three variables, i, b, and n, and the precomputation time of the suffix set b, the longest prefix set b, and all possible values of equation . the number of all elements of b is  where bw is the number of 1's in a suffix b, and |b| is the length of suffix b. it is bounded by m· <dig> where m is the length of the seed q and w is the weight of q since the maximum length of b is equal to the length of q. therefore the suffix set b at line  <dig> is computed at o). all possible values of equation  at line  <dig> can be computed within l + m times because it is bounded by the variable n and its maximum value is l + m. for all b, the longest prefix b at line  <dig> and  <dig> can be computed in advance in time o). the time needed to compute the three nested loops at line  <dig>   <dig>  and  <dig> is o·). the number of iterations of the outer-most loop for variable i at line  <dig> is l +  <dig>  since the loop for variable b at line  <dig> iterates the number of all elements of b, it runs at most m·2times. the innermost loop for variable n at line  <dig> iterates l + m times. notice that the time complexities of all precomputations are less than the time complexity of the loops. therefore, the total time complexity of the algorithm is o). because the time complexity of dynamic programming of hit probability is o)  <cit> , hit integration can be computed exactly with only l additional time in compare with hit probability.

validity of the proposed algorithm
the proposed dynamic programming can be validated by comparing it with another accumulation methods, riemann sum and gaussian quadrature. riemann sum is a well-known method for approximating the total area underneath a curve on a graph  <cit> . gaussian quadrature is also well-known approximation method of the definite integral of a function, usually stated as a weighted sum of function values at specific points within the domain of integration  <cit> .

thus, for the validity of the proposed algorithm, hi  is compared with riemann sum of hit probabilities. if a range  is partitioned into n sub-ranges, riemann sum of hit probability is defined as  

where pi is a similarity level within . the difference between the outcome of hit integration and riemann sum is averagely lower than 10- <dig> when n is set to  <dig>  for instance, the riemann sum of the hit probability for the default seed of patternhunter at the range from  <dig> to  <dig> is  <dig>  whereas the hit integration is  <dig> . this small difference is believed to be made by the approximation error of the riemann sum.

the proposed algorithm is also compared with gaussian quadrature of hit probabilities. when a range  and the sequence length l are given, we compute l-point gaussian quadrature where lower limit is  <dig> and upper limit is p. first, the weights and similarities are calculated for l points. and then all integrands are computed by multiplying the corresponding weights after computing hit probabilities for the similarities, respectively. the integration is the sum of the integrands. the approximation of integration using gaussian quadrature gives nearly identical result by comparing with the result of hit integration. the approximation error is lower than 10- <dig> . therefore the integration using gaussian quadrature is a good alternate method of the dynamic programming of hit integration, whereas the integration using riemann sum is inadequate to be used in practical because it needs much more computing time.

identification of optimal seeds
in this subsection, we identify optimal spaced seeds under hit integration. then the performance of this model is compared with those of the other probability models which compute sensitivities in their own way. on a random region with length  <dig>   <dig>  seeds of weight  <dig> and length at most  <dig> are studied by three probability models to measure sensitivities: hit integration model, patternhunter's model, and markov model for non-coding regions  <cit> . one thing to note is that both hit integration and patternhunter are based on bernoulli random sequence. the models based on bernoulli random sequence has a characteristic of estimating a seed and its reversed seed with the same sensitivity. therefore we selected the  <dig>  seeds in order not to include the reversed seeds. we tested three ranges of similarity levels for hit integration: p = 0~ <dig>   <dig> ~ <dig>   <dig> ~ <dig> . the first range covers all similarity levels, from  <dig> to  <dig>  it is selected for getting the performance of similarity-level-free sensitivity. the second is selected to evaluate the hit integration over the actual similarity range of the genome alignments, from  <dig>  to  <dig>  in accordance with the biological data used in the experiment. the last range,  <dig>  to  <dig> , is the range which shows the best average performance among several range of similarity levels. these three instances are indicated as hi  <cit> , hi , and hi  respectively. patternhunter's model is equal to the hit probability at a similarity level  <dig> . it can be denoted as ph  which means patternhunter's model at similarity level  <dig> . to indicate briefly the last model, markov model for non-coding regions will be denoted as markov.

sensitivities of the identified optimal seeds
we identified the optimal seeds by computing sensitivities according to hit integration and compared the sensitivities calculated by different probability models. table  <dig> shows top  <dig> optimal seeds according to a hit integration hi  <cit>  and four additional seeds which are chosen from the other models. the sensitivities of the seeds listed in the table  <dig> are computed by the five evaluation measures: hi  <cit> , hi , hi , ph , and markov. the three measures of hit integration hi  <cit> , hi , hi  were used to evaluate the sensitivities with the dynamic programming of hit integration. the measure of patternhunter ph  was used to estimate the sensitivities with the dynamic programming of hit probability. as the measure of markov, we used the latest version of mandala provided by buhler et al.  <cit> . it is a sensitivity estimation software based on markov model, and we used 5th-order non-coding model which is included in the software.

top  <dig> optimal spaced seeds with weight  <dig> which are identified by hit integration are listed. the  <dig> seeds are ordered by hi  <cit> . each value indicates the sensitivity of the seed at the same row which is determined by the sensitivity measure at the same column. the number in the parentheses indicates the rank of the seed for each measure. the descriptions of the labeled seeds are as below; a: the optimal seed of hi  <cit>  and hi , b: the default seed of patternhunter, c: the optimal seed of hi , d: the optimal seed computed by mandala, e: the seed representing 5th-order non-coding markov model in  <cit> , f: the seed representing 0th-order non-coding markov model in  <cit> , g: the default seed of blast.

noteworthy seeds of the table  <dig> are listed below. the first seed marked with 'a' is the optimal seed of the hit integration hi  <cit>  and hi . the second seed marked with 'b' is the optimal seed of patternhunter ph  as well as the default seed of patternhunter. the fifth seed marked with 'c' is the optimal seed of the hit integration hi . although it is ranked fifth among the top  <dig> seeds, it is ranked at the relatively high position in markov. we added four seeds 'd ~g' to compare with the top  <dig> seeds. the seed marked with 'd' is the best seed of the 5th-order non-coding markov model using mandala. seed 'e' and 'f' are the representative seeds in buhler et al.  <cit> ; the former is the seed representing 5th-order non-coding markov model in  <cit>  and the latter is the seed representing 0th-order non-coding markov model in  <cit> . the last seed marked with 'g' is the blast's default seed. we need to point out the difference of the seed 'd' and 'e' which are representing the same model. the former is computed from the software provided by buhler et al.  <cit>  whereas the latter is proposed by the authors' paper. we conjecture that the markov model in the software was updated after published the paper. another notable point is the difference of the seed 'a' and 'f'. they have very similar forms such that the latter has one additional don't care position at  <dig> by comparison with the former. however the performance of the two seeds are not similar. the seed marked with 'a' showed better performance in theory and in practice than the seed 'f'.

we compared the ranking of the seeds for each model because the sensitivities between models are so different to compare quantitatively. the seeds which are ranked high in hit integration are also ranked high in patternhunter's model. it is caused by the fact that both models compute sensitivity based on bernoulli random sequence. although hi  <cit>  and ph  gave similar ranks to the seeds, they chose different seeds as an optimal seed. despite of the wide superior range of similarity levels, ph 's optimal seed was ranked second under hi  <cit> . therefore, considering all range of similarity levels, it reflects the cumulative sensitivity of ph 's optimal seed is lower than that of hi  <cit> 's optimal seed. markov model showed the very different estimation ranks comparing to the models based on bernoulli random sequence. the markov model usually adapts to some domain-specific information. thus, its performance is dependant on the contents of the biological data. it means that the performance is fluctuated by different data sets. we ascertained the existence of the fluctuation from the experimental results.

testing on biological data
to validate that the optimal seeds show really good performance for real biological data, we computed for each seed how many alignments from the biological data set contain at least a hit of the seed. it means that the alignment can be potentially found by an alignment program using this seed. therefore the percent of the hit occurrences for a seed from a set of biological data is considered as the experimental sensitivity for the seed. we tested the optimal seeds of the evaluation models on the following five biological data sets: mm <dig> and mmx are selected from human and mouse genomes, gal is selected from human and chicken genomes, pan is selected from human and chimp genomes, and mixed is the cumulative data set of the four prior data sets. as we want to test the performance of the optimal seeds for similarity search in various genomic comparison, we randomly chose the data sets at the alignments of the genomes which have various genetic distances . the similarities of the alignments are distributed widely over the similarity levels from 50% to 100% . detailed explanation of the data sets and the experimental process is described in method.

the experimental sensitivities of the optimal seeds are calculated from the five biological data sets. the tested seeds are listed as below: a: the optimal seed of hi  <cit>  and hi , b: the default seed of patternhunter, c: the optimal seed of hi , d: the optimal seed computed by mandala, e: the seed representing 5th-order non-coding markov model in  <cit> , f: the seed representing 0th-order non-coding markov model in  <cit> , g: the default seed of blast.

the seed 'a' is the optimal seed in considering all data sets because it is ranked first or second for all data sets. the 'a's average sensitivity is superior to that of the patternhunter's seed 'b' by the amount of 2% and that of the blast's seed 'e' up to  <dig> %. another seed of hit integration marked with 'c' shows also good performance against the seeds of the other models. in spite of the regular superiority of hit integration, markov model's seeds 'd' and 'e' show irregular performance according to data sets. the seed 'd' records the best average sensitivities for gal and pan data sets, but shows the worst sensitivities for mmx data sets except the consecutive seed. it is even worse than the seed 'b' for this data sets. consequently, the seed chosen by hit integration shows good performance for all data sets, and outperforms both the seed chosen by hit probability and the blast's seed. in a word, hit integration shows regularly good performance for real data sets compared with patternhunter and markov model.

quantitative comparison of seed sensitivity
a recent work by mak and benson  <cit>  presented the notion of dominance between a class of seeds with the same weight and length. this work showed that the similarity levels can be partitioned by two or more dominant seeds. for instance, a seed is said to dominate another seed if the former hits at least as many homologous regions as the latter. in this situation, the latter can never be an optimal seed. mak and benson also proposed a method to determine the dominant ranges of similarity levels by comparing a seed with another. however, they did not show how much dominant the seed is. hit integration enables quantitative evaluation of the seeds over the range of similarity levels.

when hit integration is presented as a graph, it can be easily known which is the best seed at a specific range. figure  <dig> shows the quantitative comparison of the five seeds at two dominant ranges,  <dig> ~ <dig>  and  <dig> ~ <dig> . because the differences of the other ranges are too small to compare graphically, we omitted them in the figure. in order to see the results more clearly, the lowest probability at each range is set to be  <dig> and the others are substituted by the lowest probability. a noteworthy observation is that the amount of the difference between seed b an c at the range of  <dig> ~ <dig>  is much smaller than at the range of  <dig> ~ <dig> . although the dominant range of seed c is much larger than that of seed b. therefore, it can be concluded that the optimal seed under hit integration is a better seed in practical use than the patternhunter's seed since the former's performance is much better than the latter's over the entire range of similarity levels and the range of actual biological data.

CONCLUSIONS
we introduced hit integration, a novel idea of estimating the sensitivity of a seed at a range of similarity levels, and proposed a new algorithm of computing hit integration which is equivalent to the accumulation of hit probabilities at a range of similarity levels. hit integration is successfully formulated as the integration of hit probability. from this formula, a dynamic programming algorithm of hit integration was developed. we identified the optimal seeds for hit integration and evaluated them for real biological data. in our experiments we studied  <dig>  seeds of weight  <dig> and length at most  <dig>  through experimental studies of real biological data, the optimal seed recommended by hit integration, 111**1*11**1*1* <dig>  showed better sensitivity than patternhunter's seed. moreover the average sensitivity of this seed was always superior to the patternhunter's seed. an alternative evaluation measure, 5th-order markov model for non-coding regions, showed fluctuating performance depending on the different data set. therefore, the optimal seed of hit integration is really optimal when the the similarity level of homology region is unknown.

although we presented an exact algorithm of evaluation hit integration of a seed, it has a room to improve and optimize. the computing time increases quickly as the number of don't cares in the seed increases. we are now studying for more efficient algorithm to accelerate the computing time without loss of information. hit integration is a newly proposed measure of seed's sensitivity. therefore we expect that many possible extensions and applications for hit integration will be studied in near future.

