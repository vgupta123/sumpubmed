BACKGROUND
the break-through of bioinformatics provided biologists with overwhelming amounts of publicly available data. to a large extent, biological research has been transformed from being hypothesis driven to data driven in the past few years.

the distributed annotation system   <cit>  is a simple, lightweight network protocol built on top of the hypertext transfer protocol . in some cases, this configuration benefits access to remote servers through firewall protected connections. the client fetches data from the das server by sending requests with urls following a certain command specification. the server responds with a rather simple extensible markup language  message, which follows a strict and well-formed structure. at the time of this writing, the das  <dig>  complete specification  <cit>  supports a wide range of commands.

several networks of excellence  such as biosapiens, embrace and enfin, whose purpose is to create distributed data infrastructures, have recently received funding from the european union. these collaborating networks are similar in aim but slightly different in biological content. biosapiens  <cit>  is a large scale and concerted effort to provide genome data annotation from both informatics tools and from experimentalists. enfin  <cit>  develops infrastructure, tools and methods to enhance integrative systems biology. the goal of embrace  <cit>  is to integrate the major databases and software tools in bioinformatics using existing web service methods and emerging grid service technologies.

these noe encourage data providers to offer data, results or analysis utilizing diverse communication protocols approved by technical committees rather than building big centralized repositories. discovery and communication with these services, and possibly custom visualizations, should be facilitated to the end user.

das is especially suited for:

providing an easy way to share annotations for a wide range of data types.

data integration regarding a given reference coordinate system.

access to the latest version of data while avoiding data mirroring.

the server classification that distinguishes between reference and annotation servers is part of the foundation of the das system. das relies on a reference object  onto which annotations can be mapped. every reference object is represented as an entry point named after a stable identifier, such as a chromosome or scaffold name from assemblies, a protein sequence identifier, the name of a gene or a molecular structure identifier. therefore reference servers can be queried for both the list of entry points they provide and the sequences corresponding to entry points which can be fetched with the sequence command. after sequence retrieval, annotations may be collected from a pool of annotation servers which provide data corresponding to the referenced object with the features command. das clients can collate this information by positional coordinates and display it to the user in an integrated view of the different annotations. with this procedure, as the application logic resides in the client, no coordination among the various information providers is needed. for a better understanding of das commands, entry points to reference objects and arguments, see the das  <dig>  specification  <cit> .

the separation between server and client application tiers in the protocol architecture allows a large number of servers supporting various kinds of data and a large variety of clients which collect and display annotations in customized views. examples of das-enabled clients include popular websites like ensembl  <cit> , wormbase  <cit>  or gbrowse  <cit> ; applications like igb  <cit>  or omnigene  <cit>  and programming libraries like biojava  <cit>  or bioperl  <cit> . on the server side, the number of das providers increases: affymetrix, wormbase, flybase, ebi genomic and proteomic, ensembl, kegg, sanger, tigr, ucsc and uniprot offer data through das. as the number of data sources grows, so does the effort required by end users to locate and keep track of information about the contents and locations of various servers. for this reason, a central registry based on the sources command of different das services was recently established  <cit> . the das registration server  <cit>  implements the protocol and provides information on various das sources and their annotated data types, grouping of these sources into coordinate systems, as well as validation and testing of das sources. currently it contains a listing of more than  <dig> das sources.

das is heavily used in the genomics bioinformatic community because the original specifications were adapted for working with genomic sequences. an extension   <cit>  to the das  <dig>  specification was proposed  <cit>  to make the protocol suitable to other types of data. consequently, coordinate systems were created  <cit>  within this extension. these are normalized reference systems that aid mapping between reference and annotation objects. their availability provides das clients with translation mechanisms into other reference systems and thus capabilities to map information from different data type sources. its creators thought it to be as a sort of "namespace"  <cit> . the different parts for defining a coordinate system are authority, type and organism. for a detailed description of these concepts and the possible values to assign, see  <cit> . moreover, with the extension commands for server meta information , alignments or mapping between reference objects , and coordinate data of objects such as protein structures  were added. several protein and structure oriented clients such as dasty <dig>  <cit> , spice  <cit> , proview  <cit> , the cbs das viewer  <cit>  and a das compliant jalview  <cit>  were released. other new commands supporting molecular and protein domain interaction  and volume map data  resulted in new disciplines getting involved into the development of server backends and clients, such as pepper  <cit>  for electron microscopy data and dasmi  <cit>  for molecular interaction annotation. additionally, a protein feature ontology  <cit>  was proposed and adopted by biosapiens partners.

in spite of the aforementioned developments, there are still genome annotations to unveil. recent analyses of recently and already sequenced genomes have contributed with annotations such as endogenous retroviruses  which are a substantial part of the different genomes. ervs are estimated to constitute 7% to 8% of the human genome  <cit>  and, together with retrotransposons and solitary ltrs, sometimes over 50% in grain and legume genomes   <cit> . most scientific sources agree on ervs being remnants of external infective retroviruses which integrated into the germ-line  <cit> , and are passed on to the offspring in a mendelian manner. after millions of years since the integration, ervs could be seen as genome parasites and not as direct players in the biological process of evolution due to highly mutated or removed genes  <cit> . however, mobile genetic elements  have also conferred greater plasticity to different genomes through transposition, translocation and recombination  <cit> . in addition they can generate genomic deletions  <cit> , are implicated in causing disease by transposition  <cit>  or xenotransplantation between hosts  <cit> , and can even create new genes or gene families  <cit>  or alter gene expression  <cit> . for a review to gain insight into the biology of retroviruses and their different functional parts, see  <cit> . for a review including also a brief background on the different erv detection tools, see  <cit> .

the study of retroviruses and the importance of their contribution to genomic plasticity may shed light over species development and the establishment and role of endogenous retroviruses in their hosts. with public and open resources such as the proposed das annotation server, which is easily integrable along genomic data as reported here, we aim to contribute to the knowledge base of ervs, enhance retrovirological understanding and facilitate any distributed analysis of human ervs.

RESULTS
implementation of a das annotation server
we have extended a das server implementation called proserver  <cit> , written in perl  <cit> , with an adaptor module to support retroviral annotation stored in an underlying mysql relational database. proserver implements the das  <dig> e extension and it is actively supported and developed. source adaptors are plugins into the proserver interface and produce the response for the various das commands. the commands implemented in our server were features, in order to respond to a request for annotation data, and stylesheet, which gives instructions to guide the client on the visualization of a retrovirus. these commands were programmed in the adaptor class to support the retroviral data being served.

proserver also facilitates at a higher level the necessary mapping between well formed xml das formats and the internal perl data structures. source adaptors manage and return data within perl data types whereas the proserver stub mechanism converts these structures into the correct xml format.

the visualization style was categorized into types according to the different parts that a retrovirus may incorporate . a description of our das source, the different categories and types for annotations is given in figure  <dig>  every category and type was named according to the latest das style specification  <cit> . inside each category, glyph forms and colors were chosen following the document type definition   <cit>  stylesheet as accurately as it is possible to graphically represent retrovirus parts. features are annotated at a chromosomal level for the ncbi_ <dig> assembly of the homo sapiens .

the das server consults a mysql relational database containing erv sequences annotated by virtue of an in silico genomic retroviral detector called retrotector  <cit> . the source module retrieves the retroviral chains in the genome segment being investigated and their information is computed. thereafter, the relevant data structure is returned to the server which translates and packages it into an xml response.

to test the well-formedness of the xml messages and the integration with a standard das client, we added our data source to the ensembl genome browser. the process to add a das source to ensembl is explained in  <cit> . for the purpose of visualizing the different parts of a retrovirus, several well characterized ervs were tested. specifically the provirus with highest score assigned by retrotector in the ncbi <dig> assembly. this herv is an hml2-like erv located in chr3: <dig>  .

implementation of a das visualization client
to best support the capabilities of the das stylesheet command and bring accuracy to the annotations that our server provides from the different erv parts, an application was modified to support visualization of das  <dig> e sources. at the moment of writing, only visualization of genome oriented sources - like erv annotations - is possible.

our application, called ebiox , is a user friendly desktop program delivering a suite of open source bioinformatics programs and utilities in a easy to use manner for the non computer literate researcher.

the application already supported a catalog of database services, where references to external data sources could be added by the user, but this catalog has been extended to support das servers and repositories. a das repository can be added using any http url pointing to the service. the added services are automatically queried for information regarding available das sources and the associated stylesheet. this information is periodically updated and cached locally for quick access. users can select a subset of the sources that will be active when retrieving reference sequences or annotations . a few valuable repositories come pre-configured in the default installation.

when the data sources configuration is completed, our application is ready to obtain a reference sequence. for that purpose, the "fetch entry" command will show a drop down menu to interrogate a list of possible sources . at this stage only reference sources are shown and queried. parameters for the reference server should adhere to the usual das location format: stable_identifier: start_position, end_position  <cit> . a window containing the retrieved sequence will appear. annotations can now be added by choosing "annotate..." from the "sequence" menu. the program iterates through the sources selected in the database catalog, and finds those matching the coordinate system with the downloaded reference sequence. only matching annotation sources are shown in a drop down menu  where any individual source can be selected. the corresponding server is then queried for annotations which apply to the sequence, and retrieved annotations will be outlined in a new visualization window in front of the reference sequence. several annotation sources can be selected in this way to enhance or compare annotations.

with help of this extension in ebiox, we downloaded the genome area corresponding to the same previously annotated retrovirus  from the reference server; an erv that is likely the most complete erv in the latest human assembly. finally, we annotated the sequence using the reported das source and displayed it along our reference sequence .

applications
simons et al. state that the human genome contains  <dig> transposon-free regions  with a size over  <dig> kb and  <dig> tfrs over  <dig> kb  <cit> . a complete erv ranges between 7– <dig> kb long and is flanked on both sides by two long terminal repeats  formed during reverse transcription. our aim was to review if there would be any of the detected erv among the predicted tfrs that would have been treated as a tandem repeat with all the internal provirus coding regions being considered as a simple tfr. in particular, we had our reservations about the predicted  <dig> kb tfrs since their size is very similar to typical ervs. we downloaded a file linked at  <cit>  describing human transposon-free regions  in .bed format, parsed the hg <dig> coordinates reported and combined them into a request as a final test to our server, aiming to determine whether there were erv annotations overlapping onto their predicted loci. the  <dig> kb regions were totally transposon free, none of our annotations overlapped. interestingly, we found  <dig> ervs which overlapped over as many  <dig> kb tfrs regions distributed in  <dig> different chromosomes . these ervs had an average score of  <dig> assigned by retrotector. one of them, scoring as high as  <dig>  herv: <dig> is placed in  chromosome  <dig> and it is a typical herv-h with gag, pol and env which indeed contains a fairly long open reading frame . the ltr divergence of the herv-h element  indicates an old integration in the genome. the human area , including the  <dig>  kb tfr identified as hs <dig> , is depicted in ensembl  containing our annotation track by the .bed file annotations .

the performance of our server during the tfr search was measured as the time  from the moment the request was made until the moment the response arrived. the resulting time was corrected for the network latency and divided among the number of requested tfrs as a measure of the internal server performance . a search for  <dig>  <dig> kb regions had an averaged delivery time of  <dig> ms per request whilst the  <dig>  <dig> kb tfrs were interrogated at  <dig> ms per query.

discussion
the data source described here serves our aim to provide a comprehensive array of resources for the study of ervs, with additional plans to develop a future database supported by a reference server and to offer a broader range of species' annotations. when this database is ready, our past annotations will be updated. the investigation presented here is also directed towards making erv annotations available, like the public genome databases, and contribute to their visualization along genomes in order to understand the function of mobile elements and mammalian genome evolution. similar efforts to create an erv database are hervd  <cit> , retrosearch  <cit>  compiling annotated herv orfs in the human genome  <cit> , plus the repeatmasker  <cit>  track at the ucsc genome browser  <cit> , which builds on repbase  <cit> . repbase is a repeat-based annotation system, which annotates repeated sequences by following a nonsystematic nomenclature and containing rather little retroviral information. retroviral sequences are often fragmented after a repbase classification so it is hard to see the whole proviral structure. however, repbase is a useful repository once these limitations are understood.

our data set contains annotations by retrotector  <cit>  which fairly accurately resemble the real endogenized proviral structure.

the reported  erv server builds upon das, a lightweight protocol for data exchange and distribution.  it facilitates the integration of our erv data set with visualization applications and the most common das-compliant genome browsers.  the das protocol has reached a good level of technological maturity and wide acceptance by the community, especially by bioinformaticians. das continues to be extended  <cit>  with the support of different framework projects facilitating the adoption by new research communities. both electron microscopy  <cit>  and protein interaction  <cit>  groups have committed themselves to develop new extensions recently. before the  <dig>  extension, a group working in the astrophysics field  <cit>  used das to exchange annotations of reference entities such as celestial objects.

we extensively support the specification of das/ <dig> in the development of our resource. we also appreciate the idea of coordinate systems as introduced with the  <dig> e extension because it has the potential to improve integration and standardization of the different das sources concerning authority, type and organism names. however, we have foreseen some possible conflict between authorities among the various protein databases and, especially, nucleotide databases containing the same sequence but use different accession numbers, identifiers, assembly names or versions. we realize how important it will be that a client can correctly identify mappings between annotation sources and reference sources without user intervention to automatize the data annotation process. ebiox does this task by taking the coordinate system information into account when fetching annotations though this approach fails for some third party annotation sources with missing or misleading coordinate system information. furthermore, several important das servers still support only the legacy command dsn  <cit> , which provides no coordinate system information. no effort has been yet made to integrate das servers using this deprecated command into ebiox. these obstacles prevented ebiox from using the whole annotation power of the das system, but there are potential solutions to this situation. one could build an ontology on top of the coordinate system similar to the one already implemented by biosapiens regarding the protein feature annotation  <cit>  in order to relate the different reference providers. moreover, biosapiens proposed to use md <dig> digests instead of an incremental version number to reflect sequence changes  <cit> . an md <dig> digest would be equal for the same sequences in two different authorities regardless of naming practices. consequently, both the reference object and the corresponding annotations would be related by an identical digest. unfortunately we have not seen this mechanism implemented in any server at the time of this writing.

the das protocol seems to have a promising and sustainable future as a protocol for data exchange. a newly released version called das/ <dig> began in july  <dig> funded by a  <dig> year nih grant  <cit> . several data services supporting das/ <dig> are already available. our client should be able to read and understand das/ <dig> meta-information about data sources as the extended command sources follows the das/ <dig> specification. since november  <dig> the retrieval part of the das/ <dig> protocol is considered stable but our client is not compatible yet. the das/ <dig> protocol itself is not backward compatible with the das/ <dig> version and a proxy server under development will facilitate the task of accessing das/ <dig> servers by das/ <dig> clients. meanwhile, existing das software will continue supporting das/ <dig> 

although das sustainability and usage seems to be granted, a broad array of technologies specialized for data distribution such as xml remote procedure call , representational state transfer , simple object access protocol  and extensible messaging and presence protocol   <cit>  are alternatives to das. das is a variant of rest with restrictive well-formedness in its xml responses. both rest and das could be seen as subsets of xml-rpc which is in turn a subset of its successor soap.

protocols that are based on http  allow for easy communication through proxies and firewalls compared to previous remote procedure protocols , which favors integration of resources between organizations. das is a good option to replace most of the data stored in flat files and databases because of its easy implementation and availability of many public clients, servers and libraries. therefore das is well adapted for serving pre-calculated data, while soap is frequently used to request remote calculation of data and message exchange. the embrace technical recommendation  <cit>  adopted soap as model for a communication protocol and message exchange. the data types in soap are based on fixed contracts between servers, using web service description language  and xml schema definition , which enables automatic validation of syntactic correctness of the messages. soap specifies a strict envelope/header/body message structure which is serialized by a client peer and deserialized at the server side. because of its verbosity in the xml format, soap can result in a performance reduction when transmitting large messages. typical scenarios of large data messages in bioinformatics comprise, for instance, when assembled  genome sequences or result from analysis tools are sent. in general, the usage of xml syntax in messages has both advantages and drawbacks. whereas it facilitates error detection and avoids interoperability problems such as byte-order , the processing time is increased in the serialize and deserialize steps and the logic to achieve the conversion can be cumbersome. several options to overcome these problems are under discussion and several alternatives are emerging; attachments, mtom  <cit>  or external links are possible improvements for the performance when large data files are transmitted.

on the other hand, the stateless nature of the http protocol may provoke time out responses when requests take too long to process, i.e: a typical grid use case of very intensive and lasting calculations. asynchrony is necessary in those situations but the inherent statelessness of every request requires to implement some kind of polling mechanism to ensure that the results are retrieved back. an asynchronous response for das which also allows longer lasting computations and polling for results has been implemented within the dasobert java library  <cit> . a protocol based on http cannot rely on it to manage state information, which in turn must be handled by the application layer, and until now das, rest or soap cannot be considered inherently asynchronous.

in contrast to the stateless rpc protocols that have been discussed, the xmpp protocol was initially considered for instant messaging applications.  but the usage of xmpp has been broadened to the whole realm of message oriented middleware. xmpp is an open standard promoted by many organizations and companies. the standard describes a flexible and extensible message passing mechanism which can be secured and encrypted. other technologies, such as voip and file transfer signaling, have been based on xmpp. however, the protocol does have some perceived weaknesses: overheads associated to inefficient encoding and redundant transmission of presence data, as well as scalability issues that may emerge as the number of actors taking part in the communication increases. these could possibly harm the performance of the protocol, but in our opinion constitutes a relatively minor problem. presence data are scarcely sent during the execution of distributed bioinformatics applications and instead users could be provided with real-time information about service availability. xmpp with io data  is an interesting initiative that aims at delivering asynchronous, discoverable cloud services on top of xmpp, with services providing their own xml-schema defining input output, and thereby eliminating the need for wsdl files.  finally, a base <dig> encoding issue exists but could be overcome with any of two tcp/ip file transfer specifications over xmpp  <cit> .  in general, sending large files still remains a cumbersome aspect of any communication protocol and a 'pass-by-reference' mechanism would be the most technically adequate.

in our future development plan for ebiox we have contemplated support for new commands of the das/ <dig>  specification as well as das/ <dig>  an effort towards the integration of different reference servers and their annotations with the help of ontologies or md <dig> will be carried out. the user interface for the input of parameters, visualization features and memory management will be improved as well.

CONCLUSIONS
we have reported the creation of an annotation server to distribute erv data using the das protocol. our preliminary tests prove the capabilities of the protocol and demonstrate the viability of combining reference and annotation servers. our erv data distribution can contribute to a better annotation of the retroviruses which remain widely unannotated or previously annotated as simple repeats. as with the tfrs areas, a rapid analysis of areas protected from transposon insertion was also facilitated by our server. furthermore, considering that several human ervs are interesting for their potential to cause alternative transcription or affect gene expression, distribution of erv data using das could be used to gain insight into the retroviral adaptability. finally, in order to understand the function and evolution of genomes, this server publicly releases an interesting dataset and makes erv annotations easily integrable with genomic views at the same time. in that respect, we used ebiox, supporting a subset of the das/ <dig> e protocol, to provide visualization of erv data as well as annotations from other sources. with this new das extension, ebiox gains the ability to participate in a service oriented architecture including annotation and reference providers.

availability and requirements
the source code of the das-erv adaptors is available under the lesser general public license  from . requirements for installing these adaptors are a perl interpreter and several modules including proserver  <cit> . ebiox is available under the gpl license and can be downloaded from , where installation requirements are also stated.

competing interests
the authors declare that they have no competing interests.

authors' contributions
amb implemented the das-erv extensions to the das proserver server and wrote the paper. el is the main ebiox developer, implemented the code of the das extension with help of amb and helped writing the paper. gs and jb, main designers and authors of retrotector, provided the erv data and substantial advice and guidance during all phases of the project. ebr planned and designed the project. all authors read and approved the final manuscript.

supplementary material
additional file 1
chromosomal coordinates of tfrs with overlapping retroviruses. tab delimited .bed file containing the hg18/ncbi  <dig> chromosomal coordinates  for all human tfrs that overlap one of the annotated retroviruses. this data is also available in a browsable format at: .

click here for file

 acknowledgements
the authors thank the european model for bioinformatics research and community education  network of excellence  for financial support of this work. the european molecular biology network  is acknowledged for providing server facilities. christofer bäcklin is acknowledged for his assistance with figures. authors thank ola spjuth for fruitful discussions about xmpp and nils-einar eriksson for valuable comments over the manuscript. dominic wright proofread the manuscript.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2009: european molecular biology network  conference 2008: 20th anniversary celebration. leading applications and technologies in bioinformatics. the full contents of the supplement are available online at .
