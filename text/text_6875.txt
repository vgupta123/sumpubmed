BACKGROUND
proteins contain one or more domains each of which could have evolved independently from the rest of the protein structure and which could have unique functions
 <cit> . because of molecular evolution, proteins with similar sequences often share similar folds and structures. retrieving and ranking protein domains that are similar to a query protein domain from a protein domain database are critical tasks for the analysis of protein structure, function, and evolution
 <cit> . the similar protein domains that are classified by a ranking system may help researchers infer the functional properties of a query domain from the functions of the returned protein domains.

the output of a ranking procedure is usually a list of database protein domains that are ranked in descending order according to a measure of their similarity to the query domain. the choice of a similarity measure largely defines the performance of a ranking system as argued previously
 <cit> . a large number of algorithms for computing similarity as a ranking score have been developed:

pairwise protein domain comparison algorithms compute the similarity between a pair of protein domains either by protein domain structure alignment or by comparing protein domain features. protein structure alignment based methods compare protein domain structures at the level of residues and sometime even atoms, to detect structural similarities with high sensitivity and accuracy. for example, carpentier et al. proposed yakusa
 <cit>  which compares protein structures using one-dimensional characterizations based on protein backbone internal angles, while jung and lee proposed sheba
 <cit>  for structural database scanning based on environmental profiles. protein domain feature based methods extract structural features from protein domains and compute their similarity using a similarity or distance function. for example, zhang et al. used the 32-d tableau feature vector in a comparison procedure called ir tableau
 <cit> , while lee and lee introduced a measure called wdac  that is used in the protein domain comparison context
 <cit> . both these methods use cosine similarity for comparison purposes.

graph-based similarity learning algorithms use the traditional protein domain comparison methods mentioned above that focus on detecting pairwise sequence alignments while neglecting all other protein domains in the database and their distributions. to tackle this problem, a graph-based transductive similarity learning algorithm has been proposed
 <cit> . instead of computing pairwise similarities for protein domains, graph-based methods take advantage of the graph formed by the existing protein domains. by propagating similarity measures between the query protein domain and the database protein domains via graph transduction , a better metric for ranking database protein domains can be learned.

the main component of graph-based ranking is the construction of a graph as the estimation of intrinsic manifold of the database. as argued by cai et al.
 <cit> , there are many ways to define different graphs with different models and parameters. however, up to now, there are, in general, no explicit rules for choice of graph models and parameters. in
 <cit> , the graph parameters were determined by a grid-search of different pairs of parameters. in
 <cit> , several graph models were considered for graph regularization, and exhaustive experiments were carried out for the selection of a graph model and its parameters. however, these kinds of grid-search strategies select parameters from discrete values in the parameter space, and thus lack the ability to approximate an optimal solution. at the same time, cross-validation
 <cit>  can be used for parameter selection, but it does not always scale up very well for many of the graph parameters, and sometimes it might over-fit the training and validation set while not generalizing well on the query set.

in
 <cit> , geng et al. proposed an ensemble manifold regularization  framework that combines the automatic intrinsic manifold approximation and semi-supervised learning 
 <cit>  of a support vector machine 
 <cit> . based on the emr idea, we attempted to solve the problem of graph model and parameter selection by fusing multiple graphs to obtain a ranking score learning framework for protein domain ranking. we first outlined the graph regularized ranking score learning framework by optimizing ranking score learning with both relevant and graph constraints, and then generalized it to the multiple graph case. first a pool of initial guesses of the graph laplacian with different graph models and parameters is computed, and then they are combined linearly to approximate the intrinsic manifold. the optimal graph model with optimal parameters is selected by assigning larger weights to them. meanwhile, ranking score learning is also restricted to be smooth along the estimated graph. because the graph weights and ranking scores are learned jointly, a unified objective function is obtained. the objective function is optimized alternately and conditionally with respect to multiple graph weights and ranking scores in an iterative algorithm. we have named our multiple graph regularized ranking method multig-rank. it is composed of an off-line graph weights learning algorithm and an on-line ranking algorithm.

methods
graph model and parameter selection given a data set of protein domains represented by their tableau 32-d feature vectors
 <cit> x={x <dig> x <dig> ⋯,xn}, where
xi∈r <dig> is the tableau feature vector of i-th protein domain, xqis the query protein domain, and the others are database protein domains. we define the ranking score vector as
f=⊤∈rn in which fi is the ranking score of xi to the query domain. the problem is to rank the protein domains in
x in descending order according to their ranking scores and return several of the top ranked domains as the ranking results so that the returned protein domains are as relevant to the query as possible. here we define two types of protein domains: relevant when they belong to the same scop fold type
 <cit> , and irrelevant when they do not. we denote the scop-fold labels of protein domains in
x as
l={l <dig> l <dig> ..,ln}, where li is the label of i-th protein domain and lqis the query label. the optimal ranking scores of relevant protein domains {xi},li = lq should be larger than the irrelevant ones {xi},li ≠ lq, so that the relevant protein domains will be returned to the user.

graph regularized protein domain ranking
we applied two constraints on the optimal ranking score vector f to learn the optimal ranking scores:

relevance constraint because the query protein domain reflects the search intention of the user, f should be consistent with protein domains that are relevant to the query. we also define a relevance vector of the protein domain as
y=⊤∈{ <dig> }n where yi =  <dig>  if xi is relevant to the query and yi =  <dig> if it is not. because the type label lq of a query protein domain xq is usually unknown, we know only that the query is relevant to itself and have no prior knowledge of whether or not others are relevant; therefore, we can only set yq =  <dig> while yi, i ≠ q is unknown.

to assign different weights to different protein domains in
x, we define a diagonal matrix u as uii =  <dig> when yi is known, otherwise uii =  <dig>  to impose the relevant constraint to the learning of f, we aim to minimize the following objective function: 

  minfor=∑i=1n2uii=⊤u 

graph constraint f should also be consistent with the local distribution found in the protein domain database. the local distribution was embedded into a k nearest neighbor graph
g={v,e,w}. for each protein domain xi, its k nearest neighbors, excluding itself, are denoted by
ni. the node set
v corresponds to n protein domains in
x, while
e is the edge set, and
∈e if
xj∈ni or
xi∈nj. the weight of an edge  is denoted as wij which can be computed using different graph definitions and parameters as described in the next section. the edge weights are further organized in a weight matrix
w=∈rn×n, where wij is the weight of edge . we expect that if two protein domains xi and xj are close , then fi and fj should also be close. to impose the graph constraint to the learning of f, we aim to minimize the following objective function: 

  minfog=12∑i,j=1n2wij=f⊤df−f⊤wf=f⊤lf 

where d is a diagonal matrix whose entries are
dii=∑i=1nwij and l = d − w is the graph laplacian matrix. this is a basic identity in spectral graph theory and it provides some insight into the remarkable properties of the graph laplacian.

when the two constraints are combined, the learning of f is based on the minimization of the following objective function: 

  minfo=or+αog=⊤u+αf⊤lf 

where α is a trade-off parameter of the smoothness penalty. the solution is obtained by setting the derivative of o with respect to f to zero as f = −1uy. in this way, information from both the query protein domain provided by the user and the relationship of all the protein domains in
x are used to rank the protein domains in
x. the query information is embedded in y and u, while the protein domain relationship information is embedded in l. the final ranking results are obtained by balancing the two sources of information. in this paper, we call this method graph regularized ranking .

multiple graph learning and ranking: multig-rank
here we describe the multiple graph learning method to directly learn a self-adaptive graph for ranking regularization the graph is assumed to be a linear combination of multiple predefined graphs . the graph weights are learned in a supervised way by considering the scop fold types of the protein domains in the database.

multiple graph regularization
the main component of graph regularization is the construction of a graph. as described previously, there are many ways to find the neighbors
ni of xi and to define the weight matrix w on the graph
 <cit> . several of them are as follows: 

• gaussian kernel weighted graph:ni of xi is found by comparing the squared euclidean distance as, 

  ||xi−xj||2=xi⊤xi−2xi⊤xj+xj⊤xj 

and the weighting is computed using a gaussian kernel as, 

  wij=e−||xi−xj||22σ <dig> if∈e <dig> else 

where σ is the bandwidth of the kernel.

• dot-product weighted graph:ni of xi is found by comparing the squared euclidean distance and the weighting is computed as the dot-product as, 

  wij=xi⊤xj,if∈e <dig> else 

• cosine similarity weighted graph:ni of xi is found by comparing cosine similarity as, 

  c=xi⊤xj||xi||||xj|| 

and the weighting is also assigned as cosine similarity as, 

  wij=c,if∈e <dig> else 

• jaccard index weighted graph:ni of xi is found by comparing the jaccard index
 <cit>  as, 

  j=|xi⋂xj||xi⋃xj| 

and the weighting is assigned as, 

  wij=j,if∈e <dig> else 

• tanimoto coefficient weighted graph:ni of xi is found by comparing the tanimoto coefficient as, 

  t=xi⊤xj||xi||2+||xj||2−xi⊤xj 

and the weighting is assigned as, 

  wij=t,if∈e <dig> else 

with so many possible choices of graphs, the most suitable graph with its parameters for the protein domain ranking task is often not known in advance; thus, an exhaustive search on a predefined pool of graphs is necessary. when the size of the pool becomes large, an exhaustive search will be quite time-consuming and sometimes not possible. hence, a method for efficiently learning an appropriate graph to make the performance of the employed graph-based ranking method robust or even improved is crucial for graph regularized ranking. to tackle this problem we propose a multiple graph regularized ranking framework, that provides a series of initial guesses of the graph laplacian and combines them to approximate the intrinsic manifold in a conditionally optimal way, inspired by a previously reported method
 <cit> .

given a set of m graph candidates
{g <dig> ⋯,gm}, we denote their corresponding candidate graph laplacians as
t={l <dig> ⋯,lm}. by assuming that the optimal graph laplacian lies in the convex hull of the pre-given graph laplacian candidates, we constrain the search space of possible graph laplacians o linear combination of lm in
t as, 

  l=∑m=1mμmlm 

where μm is the weight of m-th graph. to avoid any negative contribution, we further constrain
∑m=1mμm= <dig> μm≥ <dig> 

to use the information from data distribution approximated by the new composite graph laplacian l in  for protein domain ranking, we introduce a new multi-graph regularization term. by substituting  into , we get the augmented objective function term in an enlarged parameter space as, 

  minf,μomultig=∑m=1mμms.t.∑m=1mμm= <dig> μm≥ <dig>  

where μ = ⊤ is the graph weight vector.

off-line supervised multiple graph learning
in the on-line querying procedure, the relevance of query xq to database protein domains is unknown and thus the optimal graph weights μ cannot be learned in a supervised way. however, all the scop-fold labels of protein domain in the database are known, making the supervised learning of μ in an off-line way possible. we treat each database protein domain
xq∈d,q= <dig> ⋯,n as a query in the off-line learning and all the items of its relevant vector yq =⊤ as known because all the scop-fold labels are known for all the database protein domains as, 

  yiq= <dig> ifli=lq <dig> else 

therefore, we set u = in×n as a n × n identity matrix. the ranking score vector of the q-th database protein domain is also defined as fq =⊤. substituting fq, yq and u to  and  and combining them, we have the optimization problem for the q-th database protein domain as, 

  minfq,μo=⊤+α∑m=1mμm+β||μ||2s.t.∑m=1mμm= <dig> μm≥ <dig>  

to avoid the parameter μ over-fitting to one single graph, we also introduce the l <dig> norm regularization term ||μ|| <dig> to the object function. the difference between fq and yq should be noted: fq∈{ <dig> }n plays the role of the given ground truth in the supervised learning procedure, while
yq∈rn is the variable to be solved. while fq is the ideal solution of yq, it is not always achieved after the learning. thus, we introduce the first term in  to make yq as similar to fq as possible during the learning procedure.

object function
using all protein domains in the database q =  <dig> …,nas queries to learn μ, we obtain the final objective function of supervised multiple graph weighting and protein domain ranking as, 

  minf,μo=∑q=1n⊤+α∑m=1mμm+β||μ||2=tr⊤+α∑m=1mμmtr+β||μ||2s.t.∑m=1mμm= <dig> μm≥ <dig>  

where f = is the ranking score matrix with the q-th column as the ranking score vector of q-th protein domain, and y = is the relevance matrix with the q-th column as the relevance vector of the q-th protein domain.

optimization
because direct optimization to  is difficult, instead we adopt an iterative, two-step strategy to alternately optimize f and μ. at each iteration, either f or μ is optimized while the other is fixed, and then the roles are switched. iterations are repeated until a maximum number of iterations is reached. 

• optimizing f: by fixing μ, the analytic solution for  can be easily obtained by setting the derivative of o with respect to f to zero. that is, 

  ∂o∂f=2+2α∑m=1mμm=0f=−1y 

• optimizing μ: by fixing f and removing items irrelevant to μ from , the optimization problem  is reduced to, 

  minμα∑m=1mμmtr+β||μ||2=α∑m=1mμmem+β∑m=1mμ2=αe⊤μ+βμ⊤μs.t.∑m=1mμm= <dig> μm≥ <dig>  

where em = tr and e =⊤. the optimization of  with respect to the graph weight μ can then be solved as a standard quadratic programming  problem
 <cit> .

off-line algorithm
the off-line μ learning algorithm is summarized as algorithm 1

algorithm  <dig> 
multig-rank: off-line graph weights learning algorithm.

require: candidate graph laplacians set
t;

require: scop type label set of database protein domains
l;

require: maximum iteration number t;

construct the relevance matrix y =n×n where yiq if li = lq,  <dig> otherwise; initialize the graph weights as
μm0=1m, m =  <dig> ⋯,m;

for t =  <dig> ⋯,t do

update the ranking score matrix ft according to

previous
μmt− <dig> by ;

update the graph weight μt according to

updated ft by ;

endfor output graph weight μ = μt.

on-line ranking regularized by multiple graphs
given a newly discovered protein domain submitted by a user as query x <dig>  its scop type label l <dig> will be unknown and the domain will not be in the database
d={x <dig> ⋯,xn}. to compute the ranking scores of
xi∈d to query x <dig>  we extend the size of database to n +  <dig> by adding x0into the database and then solve the ranking score vector for x <dig> which is defined as
f=∈rn+ <dig> using . the parameters in  are constructed as follows: 

• laplacian matrix l: we first compute the m graph weight matrices
{wm}m=1m∈r× with their corresponding laplacian matrices
{lm}m=1m∈r× for the extended database {x <dig> x <dig> ⋯,xn}. then with the graph weight μ learned by algorithm  <dig>  the new laplacian matrix l can be computed as in .on-line graph weight computation: when a new query x <dig> is added to the database, we calculate its k nearest neighbors in the database
d and the corresponding weights w0j and wj <dig>  j =  <dig> ⋯,n. if adding this new query to the database does not affect the graph i n the database space, the neighbors and weights wij, i,j =  <dig> ⋯,n for the protein domains in the database are fixed and can be pre-computed off-line. thus, we only need to compute n edge weights for each graph instead of  × .

• relevance vector y: the relevance vector for x <dig> is defined as
y=⊤∈{ <dig> }n+ <dig> with only y0 =  <dig> known and yi, i =  <dig> ⋯,nunknown.

• matrix u: in this situation, u is a ×diagonal matrix with u00 =  <dig> and uii =  <dig>  i =  <dig> ⋯,n.

then the ranking score vector f can be solved as, 

  f=−1uy 

the on-line ranking algorithm is summarized as algorithm 2

algorithm  <dig> 
multig-rank: on-line ranking algorithm.

require: protein domain database
d={x <dig> ⋯,xn};

require: query protein domain x0;

require: graph weight μ;

extend the database to  size by adding x <dig> and compute m graph laplacians of the extended database; obtain multiple graph laplacian l by linear combination of m graph laplacians with weight μ as in ; construct the relevance vector
y∈r where y0 =  <dig> and diagonal matrix
u∈r× with uii =  <dig> if i =  <dig> and  <dig> otherwise; solve the ranking vector f for x <dig> as in ; ranking protein domains in
d according to ranking scores f in descending order.

protein domain database and query set
we used the scop  <dig> a database
 <cit>  to construct the database and query set. in the scop  <dig> a database, there are  <dig>  protein domain pdb entries and  <dig>  domains, belonging to  <dig> classes and  <dig>  scop fold types.

protein domain database
our protein domain database was selected from astral scop  <dig> a set
 <cit> , a subset of the scop  <dig> a database which was released in march  <dig>  2012
 <cit> . astral scop  <dig> a 40%)
 <cit> , a genetic domain sequence subset, was used as our protein domain database
d. this database was selected from scop  <dig> a database so that the selected domains have less than 40% identity to each other. there are a total of  <dig>  protein domains in the astral scop  <dig> a 40% database belonging to  <dig>  scop fold types. the astral database is available on-line at
http://scop.berkeley.edu. the number of protein domains in each scop fold varies from  <dig> to  <dig>  the distribution of protein domains with the different fold types is shown in figure
 <dig>  many previous studies evaluated ranking performances using the older version of the astral scop dataset  that was released in 2008
 <cit> . 

query set
we also randomly selected  <dig> protein domains from the scop  <dig> a database to construct a query set. for each query protein domain that we selected we ensured that there was at least one protein domain belonging to the same scop fold type in the astral scop  <dig> a 40% database, so that for each query, there was at least one ”positive” sample in the protein domain database. however, it should be noted that the  <dig> protein domains in the query data set were randomly selected and do not necessarily represent  <dig> different folds. here we call our query set the  <dig> query dataset because it contains  <dig> protein domains from the scop  <dig> a database.

evaluation metrics
a ranking procedure is run against the protein domains database using a query domain. a list of all matching protein domains along with their ranking scores is returned. we adopted the same evaluation metric framework as was described previously
 <cit> , and used the receiver operating characteristic  curve, the area under the roc curve , and the recall-precision curve to evaluate the ranking accuracy. given a query protein domain xq belonging to the scop fold lq, a list of protein domains is returned from the database by the on-line multig-rank algorithm or other ranking methods. for a database protein domain xr in the returned list, if its fold label lr is the same as that of xq, i.e. lr = lq it is identified as a true positive , else it is identified as a false positive . for a database protein domain
xr′ not in the returned list, if its fold label
lr′=lq, it will be identified as a true negative , else it is a false negative . the true positive rate , false positive rate , recall, and precision can then be computed based on the above statistics as follows: 

  tpr=tptp+fn,fpr=fpfp+tnrecall=tptp+fn,precision=tptp+fp 

by varying the length of the returned list, different tpr, frp, recall and precision values are obtained.


roc curve
using fpr as the abscissa and tpr as the ordinate, the roc curve can be plotted. for a high-performance ranking system, the roc curve should be as close to the top-left corner as possible.

recall-precision curve
using recall as the abscissa and precision as the ordinate, the recall-precision curve can be plotted. for a high-performance ranking system, this curve should be close to the top-right corner of the plot.

auc
the auc is computed as a single-figure measurement of the quality of an roc curve. auc is averaged over all the queries to evaluate the performances of different ranking methods.

RESULTS
we first compared our multig-rank against several popular graph-based ranking score learning methods for ranking protein domains. we then evaluated the ranking performance of multig-ranking against other protein domain ranking methods using different protein domain comparison strategies. finally, a case study of a tim barrel fold is described.


comparison of multig-rank against other graph-based ranking methods
we compared our multig-rank to two graph-based ranking methods, g-rank and gt
 <cit> , and against the pairwise protein domain comparison based ranking method proposed in
 <cit>  as a baseline method . the evaluations were conducted with the  <dig> query domains form the  <dig> query set. the average ranking performance was computed over these  <dig> query runs. 
 <cit>  roc curves of the different ranking methods;  recall-precision curves of the different ranking methods.

the figure shows the roc and the recall-precision curves obtained using the different graph ranking methods. as can be seen, the multig-rank algorithm significantly outperformed the other graph-based ranking algorithms; the precision difference got larger as the recall value increased and then tend to converge as the precision tended towards zero ). the g-rank algorithm outperformed gt in most cases; however, both g-rank and gt were much better than the pairwise ranking which neglects the global distribution of the protein domain database.

the auc results for the different ranking methods on the  <dig> query set are tabulated in table
 <dig>  as shown, the proposed multig-rank consistently outperformed the other three methods on the  <dig> query set against our protein domain database, achieving a gain in auc of  <dig> ,  <dig>  and  <dig>  compared with g-rank, gt and pairwise rank, respectively. thus, we have shown that the ranking precision can be improved significantly using our algorithm.

we have made three observations from the results listed in table
1: 

 <dig>  g-rank and gt produced similar performances on our protein domain database, indicating that there is no significant difference in the performance of the graph transduction based or graph regularization based single graph ranking methods for unsupervised learning of the ranking scores.

 <dig>  pairwise ranking produced the worst performance even though the method uses a carefully selected similarity function as reported in
 <cit> . one reason for the poorer performance is that similarity computed by pairwise ranking is focused on detecting statistically significant pairwise differences only, while more subtle sequence similarities are missed. hence, the variance among different fold types cannot be accurately estimated when the global distribution is neglected and only the protein domain pairs are considered. another possible reason is that pairwise ranking usually produces a better performance when there is only a small number of protein domains in the database; therefore, because our database contains a large number of protein domains, the ranking performance of the pairwise ranking method was poor.

 <dig>  multig-rank produced the best ranking performance, implying that both the discriminant and geometrical information in the protein domain database are important for accurate ranking. in multig-rank, the geometrical information is estimated by multiple graphs and the discriminant information is included by using the scop-fold type labels to learn the graph weights.

comparison of multig-rank with other protein domain ranking methods
we compare the multig-rank against several other popular protein domain ranking methods: ir tableau
 <cit> , qp tableau
 <cit> , yakusa
 <cit> , and sheba
 <cit> . for the query domains and the protein domain database we used the  <dig> query set and the astral scop  <dig> a 40% database, respectively. the yakusa software source code was downloaded from http://wwwabi.snv.jussieu.fr/yakusa, compiled and used for ranking. we used the “make bank” shell script  which calls the phipsi program  to format the database. yakusa compares a query domain to a database and returns a list of the protein domains along with ranks and ranking scores. we used the default parameters of yakusa to perform the ranking of the protein domains in our database. the sheba software  source code was downloaded from
https://ccrod.cancer.gov/confluence/display/ccrlee/sheba, complied and used it for ranking. the protein domain database was converted to “.env” format and the pairwise alignment was performed between each query domain and each database domain to obtain the alignment scores. first, we compared the different protein domain-protein domain ranking methods and computed their similarity or dissimilarity. an ordering technique was devised to detect hits by taking the similarities between data pairs as input. for our multig-rank, the ranking score was used as a measure of protein domain-protein domain similarly. the ranking results were evaluated based on the roc and recall-precision curves as shown in figure
 <dig>  the auc values are given in table
 <dig>  

the results in table
 <dig> show that with the advantage of exploring data characteristics from various graphs, multig-rank can achieve significant improvements in the ranking outcomes; in particular, auc is increased from  <dig>  to  <dig>  in multig-rank which uses the same tableau feature as ir tableau. multig-rank also outperforms qp tableau, sheba, and yakusa; and auc improves from  <dig> ,  <dig>  and  <dig> , respectively, to  <dig>  with multig-rank. furthermore, because of its better use of effective protein domain descriptors, ir tableau outperforms qp tableau.

to evaluate the effect of using protein domain descriptors for ranking instead of direct protein domain structure comparisons, we compared ir tableau with yakusa and sheba. the main differences between them are that ir tableau considers both protein domain feature extraction and comparison procedures, while yakusa and sheba compare only pairs of protein domains directly. the quantitative results in table
 <dig> show that, even by using the additional information from the protein domain descriptor, ir tableau does not outperform yakusa.

this result strongly suggests that ranking performance improvements are achieved mainly by graph regularization and not by using the power of a protein domain descriptor.

plots of tpr versus fpr obtained using multig-rank and various field-specific protein domain ranking methods as the ranking algorithms are shown in figure
 <dig>  and the recall-precision curves obtained using them are shown in figure
 <dig> . as can be seen from the figure, in most cases, our multig-rank algorithm significantly outperforms the other protein domain ranking algorithms. the performance differences get larger as the length of the returned protein domain list increases. the yakusa algorithm outperforms sheba, ir tableau and qp tableau in most cases. when only a few protein domains are returned to the query, the sizes of both the true positive samples and the false positive samples are small, showing that, in this case, all the algorithms yield low fpr and tpr. as the number of returned protein domains increases, the tpr of all of the algorithms increases. however, multig-rank tends to converge when the fpr is more than  <dig> , whereas the other ranking algorithms seems to converge only when the fpr is more than  <dig> .

case study of the tim barrel fold
besides considering the results obtained for the whole database, we also studied an important protein fold, the tim beta/alpha-barrel fold . the tim barrel is a conserved protein fold that consists of eight α-helices and eight parallel β-strands that alternate along the peptide backbone
 <cit> . tim barrels are one of the most common protein folds. in the astral scop  <dig> a % <dig> database, there are a total of  <dig> proteins belonging to  <dig> different superfamilies and  <dig> families that have tim beta/alpha-barrel scop fold type domains,. in this case study, the tim beta/alpha-barrel domains from the query set were used to rank all the protein domains in the database. the ranking was evaluated both at the fold level of the scop classification and at lower levels of the scop classification . to evaluate the ranking performance, we defined ”true positives” at three levels:

fold level
when the returned database protein domain is from the same fold type as the query protein domain.

superfamily level
when the returned database protein domain is from the same superfamily as the query protein domain.

family level
when the returned database protein domain is from the same family as the query protein domain.

the roc and the recall-precision plots of the protein domain ranking results of multig-rank for the query tim beta/alpha-barrel domain at the three levels are given in figure
 <dig>  the graphs were learned using the labels at the family, superfamily and the fold level. the results show that the ranking performance at the fold level is better than at the other two levels; however, although the performances at the lower levels, superfamily and family, are not superior to that at the fold level, they are still good. one important factor is that when the relevance at the lower levels was measured, a much fewer number of protein domains in the database were relevant to the queries, making it more difficult to retrieve the relevant protein domains precisely. for example, a query belonging to the family of phosphoenolpyruvate mutase/isocitrate lyase-like  matched  <dig> database protein domains at the fold level because this family has  <dig> protein domains in the astral scop  <dig> a % <dig> database. on the other hand, only  <dig> and four protein domains were relevant to the query at the superfamily and family levels respectively.

CONCLUSIONS
the proposed multig-rank method introduces a new paradigm to fortify the broad scope of existing graph-based ranking techniques. the main advantage of multig-rank lies in its ability to represent the learning of a unified space of ranking scores for protein domain database in multiple graphs. such flexibility is important in tackling complicated protein domain ranking problems because it allows more prior knowledge to be explored for effectively analyzing a given protein domain database, including the possibility of choosing a proper set of graphs to better characterize diverse databases, and the ability to adopt a multiple graph-based ranking method to appropriately model relationships among the protein domains. here, multig-rank has been evaluated comprehensively on a carefully selected subset of the astral scop  <dig>  a protein domain database. the promising experimental results that were obtained further confirm the usefulness of our ranking score learning approach.

competing interests
the authors declare no competing interests.

authors’ contributions
jw invented the algorithm, performed the experiments and drafted the manuscript. hb drafted the manuscript. xg supervised the study and made critical changes to the manuscript. all the authors have approved the final manuscript.

