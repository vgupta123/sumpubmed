BACKGROUND
gene expression matrix
data from microarray experiments  <cit>  is frequently given as a large matrix showing expression levels of genes  under different experimental conditions . the so-called gene expression data can thus be written as a matrix of size m × n where m is the number of genes and n is the number of experimental conditions. typically m is much greater than n. for example,  is  and  respectively for the time series yeast samples  <cit>  and lymphoma specimens  <cit> . one of the challenges in microarray data analysis is to identify groupings of genes with similar behaviours/functions. several clustering algorithms have been applied to dna gene expression data to identify biologically relevant groupings based on similarity in expression profiles  <cit> . however, traditional clustering techniques are global in nature in which the expression patterns are grouped either along the entire row or along the entire column  <cit> . this implies that one would find the grouping of genes that would express similarly for all conditions, or the groupings of conditions in which all genes exhibit similar behaviour. however, in practice only a subset of genes is highly correlated under a subset of conditions. this requires simultaneous clustering along both the row and column directions, and is often called biclustering  <cit> . a bicluster often exhibit certain kinds of homogeneity, for example constant level of expression throughout the whole bicluster , constant level of expression along either rows or columns , and rows/columns that are related by additions or multiplications  <cit> , as shown in figure  <dig>  we have recently shown that the different bicluster patterns have a simple geometric interpretation as linear objects in a high dimensional feature space  <cit> . a comprehensive survey on different biclustering algorithms was given in references  <cit> .

parallel coordinate plots
the parallel coordinate  technique is a powerful method for visualizing and analyzing high-dimensional data under a two-dimensional setting  <cit> . in this technique, each dimension is represented as a vertical axis, and then the n-dimensional axis is arranged in parallel to each other. by giving up the orthogonal representation, the number of dimensions that can be visualized is not restricted to only two  <cit> . studies have found that geometric structure can still be preserved by the pc plot despite that the orthogonal property is destroyed  <cit> . in gene expression matrix, each gene is represented by a vector of conditions  and each condition is considered as a vector of genes . since gene expression data always involves a large number of genes as well as a certain number of experimental conditions, the pc technique is well suited to their analysis. moreover, visualization of gene expression data is an important problem for biological knowledge discovery  <cit> . thus, the pc plots have been studied for gene expression data visualization  <cit> . further details about visualization of biclusters using pc plots are provided in additional file  <dig>  in section "method", a new greedy algorithm for bicluster identification is presented. meanwhile, an interactive approach of parameter determination for the proposed biclustering algorithm based on pc visualization is discussed.

methods
identification of biclusters from difference matrix
the biclusters given in figure 1– can be described by an additive model in which each pair of rows has the same difference in all the related columns or each pair of columns has the same difference in all the related rows. thus, a difference matrix, each column of which represents the column differences between a pair of columns in a data matrix, provides useful information for identification of additive-related biclusters. consider the data in figure  <dig>  there are two biclusters: the first one  is a constant bicluster while the second one  is an additive-related bicluster. as the rows in a bicluster is supposed to correlate in a subset of columns, the column difference between every two columns is computed so as to identify this column subset. there are altogether 6/ <dig> =  <dig> permutations as shown in the difference matrix in figure  <dig>  in the difference matrix, we can find special features that are related to the biclusters. for example, consider column "c5-c3". there are only three distinct difference values:  <dig> ,  <dig> ,  <dig> . this suggests the existence of three biclusters formed between "c5" and "c3":

• the first bicluster is for rows r <dig>  r <dig>  r <dig>  r <dig> and r <dig> in which the difference between "c5" and "c3" is zero, i.e., a constant bicluster;

• the second bicluster is for rows r <dig>  r <dig>  r <dig>  r <dig> and r <dig> in which the difference between "c5" and "c3" is two, i.e., an additive bicluster; and

• the third bicluster involves row r <dig> only, thus it is not considered to be a valid bicluster.

analyzing the distribution along the column direction in the difference matrix thus helps to identify possible biclusters. in the above example, we have two valid biclusters. thus, c <dig> and c <dig> are merged to form two groups as shown in figure  <dig>  the analysis can be repeated for each of these two groups to find out whether any other columns can be merged to {c <dig>  c5}, i.e., using either c <dig> or c <dig> as a reference, we check whether c <dig>  c <dig>  c <dig> and c <dig> can be merged with {c <dig>  c5}. in particular, if c <dig> is used as a reference, two difference matrices as shown in figure  <dig> can be obtained. note that their difference values can be read directly from the original difference matrix of figure  <dig>  by examining the first difference matrix in figure  <dig>  we see that two paired columns, "c1-c3" and "c2-c3", show a single bicluster with a difference value equals to zero. this suggests that columns c <dig> and c <dig> can be merged to {c <dig>  c5} for rows r <dig>  r <dig>  r <dig>  r <dig> and r <dig>  the second difference matrix also has a single cluster with a difference value equal to  <dig> at paired column "c6-c3". therefore, c <dig> can be merged to {c <dig>  c5} for rows r <dig>  r <dig>  r <dig>  r <dig> and r <dig>  thus by this repeated bicluster growing process – expanding the column set and refining the row set, we can identify possible biclusters embedded in the dataset. also, note that the difference matrix needs to be calculated only once. this greatly reduces the computational complexity of our algorithm.

proposed algorithm for additive models
additive-related biclusters can be found by progressively merging columns through studying the data distribution along each column in the difference matrix. if there is just one bicluster between two columns in the gene expression matrix, the distribution will have a single peak in one of the columns of the difference matrix. related rows for this bicluster can then be identified. if there are multiple biclusters formed between two columns in the gene expression matrix, we can separate the rows into different groups by examining the distribution in the corresponding columns of the difference matrix. therefore, by analyzing the distributions of difference values along columns of the difference matrix, peaks that correspond to different biclusters can be identified.

an overview of the procedure of our proposed biclustering algorithm is shown in the flow chart provided in figure  <dig> while the details are described in the pseudo-code in figure  <dig>  there are four parameters in our algorithm: noise threshold ε, minimum number of rows nr, minimum number of columns nc and maximum bicluster overlap in percentage po. the parameter ε specifies the noise tolerance as well as the homogeneity in the identified biclusters. on the other hand, nr and nc set the lower bounds of the number of rows and columns of the identified biclusters respectively. po determines the maximum degree of overlap between identified biclusters. more specifically, no overlap exceeding po percentage in both the row and column dimensions simultaneously is allowed. in this paper, a bicluster with a subset of rows r and a subset of columns c is denoted by . at the beginning, the first-level difference matrix d <dig> is calculated for the input expression matrix e as described in line  <dig> in figure  <dig>  supposed that e has size m rows by n columns. there is altogether n/ <dig> different number of permutations so the size of d <dig> is m × n/ <dig>  in order to derive possible biclusters, a simple clustering algorithm can be applied to identify clusters for each column . let x = {x <dig>  x <dig> ...,xn} be a set of n expression values. by comparing xi with all values in x, a set of values si similar to xi can be found as follows,

  si = {a ∈ x :|xi - a| <ε} 

where i =  <dig>   <dig>  ..., n. also, the set of indices qi associated with the values in si can be obtained. qi can be expressed by

  qi = {p ∈ { <dig>   <dig>  ..., n}: xp ∈ si} 

as an example, given that x = { <dig>   <dig>   <dig>  3} and ε =  <dig>  s <dig> = { <dig>   <dig>  3} and q <dig> = { <dig>   <dig>  4}. a clustering algorithm based on equation  would generate n clusters but these clusters may be very close to each other and have large overlap. in order to reduce unnecessary clusters, we adopt a two-step clustering approach presented in lines 56– <dig>  in addition to the definitions in  and , let us denote the current collections of clusters and corresponding sets of indices by s and q, which are both set to be empty initially. in the first step , for i =  <dig>   <dig>  ..., n, xi and its associated cluster si are tested for the following three conditions with each sj ∈ s:

 |xi - s¯j| ≥ ε where •¯ denotes the average operation of a set.

 |si| ≥ nr, where |•| denotes the cardinality of a set.

 |s¯i−s¯j|≥ε.

if the above three conditions are satisfied for all sj ∈ s, si and qi are added to s and q respectively. in the second step , the clusters are refined. denote the sets of output clusters and the corresponding indices by s' and q' respectively. first, s' and q' are set to be empty. for each sj ∈ s, a new cluster s'j is derived as

  s'j={a∈x:|a−s¯j|<ε} 

the corresponding set of indices q'j is given by

  q'j = {p ∈ { <dig>   <dig>  ..., n}:xp ∈ s'j} 

s'j and q'j are added to s' and q' respectively if |sj'| ≥ nr. for the first-level difference matrix d <dig>  each q'j contains the row indices of the cluster s'j. each column of d <dig> consists of difference values between column i and j of the original expression matrix. define the collection of row indices sets of the clusters to be uij. after finding all uij for all distinct column pairs , the row indices set of the clusters and their associated column pairs are collected to form a list of possible biclusters l <dig> which can be expressed by

  l <dig> = {): uij ≠ φ, rij ∈ uij, i =  <dig>   <dig>  ..., n -  <dig> and j = i +  <dig>  i +  <dig> ...,n} 

as one always tries to find the biggest bicluster, a sorting is performed for the possible biclusters in l <dig> based on the number of rows in line  <dig> so that a bicluster with the largest number of rows can be processed first.

starting from the biggest bicluster l <dig> in the sorted list of possible biclusters l <dig>  the second-level difference matrix d <dig> is formed as in line  <dig> in which one of the bicluster columns  is compared with all the remaining columns on those chosen rows . note that the second-level difference matrix d <dig> can be obtained directly from the first-level difference matrix d <dig>  before d <dig> calculation, early termination can be introduced as presented in lines 17– <dig> as an optional step. in the early termination, the biclusters in l <dig> which significantly overlap with the identified biclusters are skipped as they are unlikely to derive a well-distinguishable bicluster according to the given parameter po. similar to the clustering done for d <dig>  clustering and sorting are performed for d <dig> as described in lines 26– <dig>  as a result, a list of possible column segments h <dig> for growing the current bicluster is obtained. in lines 34– <dig>  a possible bicluster  is constructed based on the row intersection with each column segment in h <dig>  initially,  is set to be the current bicluster lk in l <dig>  if the size of the row set r does not fall below the user-defined threshold nr after the row intersects with a column segment, the column is included in c and r is updated. otherwise, the process is moved to the next column segments until the last one is examined. finally, the bicluster is validated with respect to the given requirements in bicluster size and degree of overlap as depicted in lines 42– <dig>  only a valid bicluster is output .

relation to existing δ-pcluster approaches
the proposed algorithm identifies biclusters which are homogeneous in each column pair. in this section, we show that the biclusters can be expressed as δ-pclusters  <cit> . hence, any sub-matrix in an identified bicluster has similar homogeneity to that bicluster and the problem of outliers as in cheng and church algorithm  <cit>  can be avoided. denote a bicluster with a subset of rows u and a subset of columns v by b = . the bicluster b is a δ-pcluster if for each  <dig> ×  <dig> sub-matrix m, the following condition holds

  |aij - ain - | ≤ δ 

where m=, aij denotes a value of the expression matrix at position , i, m ∈ u and j, n ∈ v. in our algorithm, the clustering  performed in the second-level difference matrix ensures that there exists a column k ∈ v such that

  |aij - aik -ljk| <ε for ∀j ∈ v and some constant ijk 

where ε is the noise threshold parameter of the proposed algorithm. hence, for any i, m ∈ u, we have

  |aij - aik - | = |aij - aik - ljk - | ≤ |aij - aik - ljk| + |amj - amk - ljk| < 2ε 

where the last inequality follows from inequality . for a column n ∈ v with n ≠ k, using inequality , it is shown that

  |aij - ain - | = |aij - aik -  + aik - ain - | ≤ |aij - aik - | + | - | < 4ε 

this means that the bicluster b is a δ-pcluster with δ = 4ε. although the biclusters identified by our algorithm are δ-pclusters, it should be emphasized that our algorithm is not designed specially for detecting δ-pclusters but rather is based on the clustering results in the difference matrix. hence, there are some differences between our biclustering strategy and the other δ-pclusters algorithms like pcluster algorithm  <cit>  and s. yoon et al. approach  <cit> . specifically, our algorithm takes into account the cluster density in which cluster centroids are considered. in contrast, the other two δ-pcluster based algorithms rely only on the inter-distances between elements in the difference matrix as defined by the inequality . this results in an exponential-time complexity in the worst case. our proposed algorithm can be regarded as a greedy version of the other two algorithms. in particular, for each column-pair bicluster, our proposed algorithm derives a possible bicluster by greedily finding a larger column set through sequential intersection with other column-pair biclusters. the large column-pair biclusters usually contain the whole or a large part of the true gene set. on the other hand, these simplifications significantly reduce the complexity from exponential-time to polynomial-time.

complexity estimation
in general, a biclustering problem is np-complete  <cit> . however, we have adopted a simple clustering algorithm and bicluster growing strategy to reduce the complexity. given a matrix of size m × n, the complexity of obtaining the difference matrix is o. the simple clustering algorithm applied on each column requires operations on the order of o because it involves comparing the value of each element with the others and the centroids of the found clusters. in addition, the total number of clusters found would not exceed m. therefore, the complexity in obtaining clusters in the difference matrix is o and the number of clusters is at most mn/ <dig>  the sorting of the clusters requires a complexity of o. after that, each identified cluster is used as a seed to construct a bicluster. in the biclusters growing process, a seed is first checked if it has significant overlap with other identified biclusters for early termination. the overlapping in rows can be checked by sorting followed by element-wise comparison. the complexity is thus o. for columns, as a seed has only two columns, the complexity is o. note that the number of identified biclusters is bounded by the number of seeds. thus, the complexity for checking overlaps in all identified biclusters is o). if the seed is valid, a sub-matrix of the difference matrix is extracted as the second-level difference matrix. this step requires no arithmetic operations due to data reuse. clustering and sorting procedure are then performed on this second-level difference matrix. as the matrix has n- <dig> columns only, the clustering and the sorting processes need operations on the order of o and o), respectively. note that there are at most m clusters detected in the second-level difference matrix. in the bicluster construction, row intersection is performed. in total, the complexity is o. finally, the new identified bicluster is validated  with respect to the number of columns and degree of overlap with other biclusters. the validation requires an additional complexity of o). among the operations for obtaining each biclusters from the first-level difference matrix, the validation step dominates. so the entire processing for bicluster formation from seeds is o). since this cost dominates all other costs in previous steps, our algorithm has a polynomial-time complexity of o). the above estimation shows the worst case complexity, in which the validation process dominates. in practice, the number of biclusters is far less than mn/ <dig>  moreover, some of the validation steps can be avoided through early termination of invalid biclusters. elimination of invalid biclusters reduces the number of potential biclusters and this in turn reduces the complexity inside the validation step.

modification for multiplicative models
as seen in figure  <dig>  a multiplicative-related bicluster is a bicluster in which any two rows are related by the same ratio in all the related columns or any two columns are related by the same ratio in all the related rows. in order to modify the proposed framework for multiplicative models, the difference matrix is replaced by a ratio matrix which is in the form of ci/cj or cj/ci for all the n/ <dig> distinct combinations between columns i and j where ck represents the values in the k-th column. in practice, we select the column which has the largest average magnitude as the denominator because quotient is sensitive to noise when the divisor is small. thus, the major change for detecting multiplicative-related biclusters is to replace the difference matrix by a ratio matrix. note that the complexity for multiplicative models is essentially the same as that for additive models.

interactive adjustment of noise threshold using pc plots
the setting of the noise threshold ε is important for the proposed algorithm as it balances the homogeneity requirement and the noise tolerance in the identified biclusters. the noise threshold is determined through visual inspection of the homogeneity of the detected biclusters in the pc plots  <cit> . the pc visualization for a data matrix embedded with biclusters can be found in additional file  <dig>  consider a noisy  <dig> ×  <dig> dataset which contains uniformly distributed values between - <dig> and  <dig> embedded with a  <dig> ×  <dig> additive-related bicluster shown in figure  <dig>  furthermore, an additive gaussian noise with variance of  <dig> , which was chosen empirically for clear demonstration, was introduced. in this example, we varied the values of the noise threshold ε while fixing the values of the minimum number of rows nr, the minimum number of columns nc and the maximum overlap with other biclusters po to be  <dig>   <dig> and 20%, respectively. figure  <dig> shows a bicluster found by our algorithm when ε is set to  <dig> . the four columns are found correctly, however, three rows are missed. figure  <dig> shows the four columns but with all the rows in the original data while figure  <dig> shows the difference between the last three columns with respect to the first column. figures  <dig> and  <dig> illustrate the inconsistency between the identified bicluster and the true bicluster using pc plots of expression values and difference values respectively in which the three missed rows are displayed in blue. we can see that these three rows are missed because the noise threshold is not large enough. in practice, since we do not know the bicluster in advance, we should adopt an exploratory approach for setting the parameter ε. start with the current value of ε, we gradually increase ε while visualizing the bicluster using the pc plot. initially, we would see more and more related rows being included into the bicluster. then, at some point, unrelated rows start to creep into the bicluster. when this is observed in the pc plot, we stop increasing the noise threshold. using this procedure, we found that when ε is set to  <dig> , all the rows are correctly detected. this example shows that the pc plot can be a powerful visualization and interactive tool that allows us to examine the biclusters found.

RESULTS
evaluation methods
we analyze the performance of our algorithm on both artificial datasets and a real dataset. for artificial datasets, biclusters information is known in advance. so accuracy in bicluster discovery can be measured using the overall match score  <cit> . the overall match score of a set of biclusters m <dig> with respect to another set of biclusters m <dig> is defined as,

  s∗=su∗×sv∗ 

where su∗ and sv∗ are gene and condition match scores respectively. su∗ is calculated as,

  su*=1|m1|∑∈m1max⁡∈m2|u1∩u2||u1∪u2| 

where a bicluster with a subset of genes ui and a subset of conditions vi is denoted by . sv∗ is defined similarly with u replaced by v. let m be the set of detected biclusters and mt be the set of true biclusters embedded in the artificial expression dataset. the overall match score s* quantifies the average relevance of the detected biclusters to the true biclusters. conversely, s* measures the average recovery of the true biclusters in the detected biclusters. to unify the two measures into a single quantity for evaluation, their average is computed as the biclustering accuracy.

the performance of the proposed algorithm for artificial datasets has been compared with two existing algorithms with the additive model assumption, namely the cheng and church  algorithm  <cit>  and the pcluster algorithm  <cit> . we considered the biclustering accuracy together with other measures such as number of biclusters, bicluster size and processing time. the programs for both algorithms are publicly available  <cit> . the proposed algorithm was implemented in a c mex-file and ran in matlab  <dig> . all the experiments were conducted on the window xp platform in a computer with  <dig>  ghz intel pentium  <dig> cpu and  <dig> mb ram. in identification of multiplicative-related biclusters, since c&c algorithm and the pcluster algorithm are designed for additive models, logarithm operation was applied to the expression data so that the multiplicative models become additive models. for comparison, we also applied the proposed algorithm for additive models to the logarithm values. henceforth, the proposed algorithm for additive models and multiplicative models will be referred to as pa and pm respectively while the proposed algorithm for additive models with the logarithm operation as pre-processing will be referred to as pal.

the evaluation on real datasets was performed on three aspects: biological, homogeneity and statistical assessment. in the biological assessment, we used the gene ontology  annotations  <cit>  to determine the functional enrichment of biclusters. the measure was the percentage of overrepresented biclusters in one or more go annotation. a bicluster is said to be overrepresented in a functional category if it gives a small p-value. given that a bicluster b with k genes is identified in a gene expression matrix with a gene set s of size n. for a functional category with c genes in s, the bicluster b possesses r genes. the p-value is defined as the probability of choosing k genes from s with r genes in that category  <cit> , i.e.,

  p−value=/ 

in other words, the p-value is the probability of including genes of a given category in a cluster by chance. thus, the overrepresented bicluster is a cluster of genes which is very unlikely to be obtained randomly. the annotations consist of three ontologies, namely biological process, cellular component and molecular function.

for the homogeneity aspect, mean squared residue score   <cit>  and average correlation value   <cit>  were computed. for an m × n bicluster, the msrs is defined as

  msrs=1mn∑i=1m∑j=1n <dig> 

where aij is the value of the bicluster at position , a˜i• is the average of the i-th row, a˜•j is the average of the j-th column and a˜ is the overall average. acv is defined by

  acv=max⁡{∑i=1m∑j=1m|c_rowij|−mm2−m,∑i=1n∑j=1n|c_colij|−nn2−n} 

where c_rowij is the correlation coefficient between rows i and j and c_colpq is the correlation coefficient between columns p and q. acv is applicable to additive models as well as multiplicative models but the msrs is valid only for additive models. in order to measure homogeneity of multiplicative-related biclusters, logarithm was applied onto the expression values before calculating msrs values so that a multiplicative-related bicluster can be formulated using an additive model. in order to avoid confusion, the msrs for the logarithm of expression values is denoted by msrsl. a bicluster with high homogeneity in expression levels should have a low msrs/msrsl value but a high acv value. the minimum value of msrs/msrsl is zero while acv has a maximum value of one.

the statistical properties of the biclustering results refer to quantities including the number of discovered biclusters and the bicluster size. comparative studies were performed in the three aspects with several existing biclustering algorithms such as c&c, iterative signature algorithm   <cit> , order-preserving submatrix  approach  <cit>  and xmotifs  <cit> , which are available in  <cit> . in addition, the computational complexity of the proposed algorithm and other approaches is estimated using processing time as done for the artificial datasets. despite the dependence of factors such as programming language and parameter settings, a rough comparison in complexity can still be achieved.

datasets
two types of artificial datasets were considered, one for the additive models and the other for the multiplicative models. the first type of dataset td <dig> had a size of  <dig> rows by  <dig> columns. uniformly distributed random values were first generated. then four biclusters were embedded. their details are as follows:

• bicluster a is a constant row bicluster of size  <dig> × 7;

• bicluster b is a constant row bicluster of size  <dig> × 10;

• bicluster c is a constant column bicluster of size  <dig> × 8; and

• bicluster d has coherent values related by additions of size  <dig> ×  <dig> 

biclusters a and b have two columns in common but in different rows; bicluster b overlaps with bicluster c in five rows and three columns; biclusters c and d have one column in common but in different rows. finally, gaussian noise with different standard deviation  was added to the dataset. at each non-zero noise level, five expression matrices were generated. figure  <dig> shows the dataset td <dig> with  <dig> embedded biclusters before noise was added.

the second type of dataset td <dig> consists of  <dig> ×  <dig> positive values embedded with two  <dig> ×  <dig> multiplicative-related biclusters. the two biclusters overlap in two columns. a positive-biased gaussian noise was added to the dataset so that all the values in the resultant datasets remained positive. the positive-valued dataset was essential for cheng and church algorithm, the pcluster algorithm and our proposed algorithm for the additive models pal due to the use of the logarithm operation. it should be noted that the proposed algorithm for multiplicative-related biclusters pm can be applied on datasets with negative values because no logarithm operation is needed. figure  <dig> shows the dataset td <dig> with two embedded multiplicative biclusters before noise was added. these two artificial datasets allowed us to test the performance of our algorithm in realistic situations as real expression data often involves various types of biclusters with overlaps  and noise.

the real dataset used was the yeast saccharomyces cerevisiae cell cycle dataset as used in  <cit> , which contains  <dig> genes and  <dig> conditions. the non-missing values were all non-negative. as multiplicative models were also investigated, those zero non-missing values were set to some small positive values. the missing values were filled with positive uniformly distributed random values to minimize the influence to our analysis.

performance on artificial datasets
for the artificial datasets with additive-related biclusters, biclusters with rows and columns more than or equal to  <dig> and  <dig> respectively were identified. it was further required that any detected bicluster cannot have more than 50% overlap with another bicluster simultaneously in the row and column dimensions. since the cheng and church  algorithm and the pcluster algorithm cannot be directly configured to discover biclusters with all the given requirements, a post-filtering procedure was adopted to eliminate those invalid biclusters. the post-filtering parameters are provided in table  <dig> together with the parameters of the biclustering algorithms. note that parameters for noise tolerance  were determined for optimal performance under different noise levels. the biclustering accuracies are plotted against various noise levels in figure  <dig>  as can be seen, the proposed algorithm always has higher biclustering accuracy than c&c and the pcluster algorithm. for the expression dataset with noise of standard deviation at or below  <dig> , we detect the four embedded biclusters perfectly. the pcluster algorithm did not attain perfect discovery even in the noise-free case because more than one maximal δ-pcluster ) exists for one or more column pair due to column overlap between some biclusters in the datasets  <cit> . in more noisy case such as when the noise s.d. is  <dig> , the biclustering accuracy of our algorithm still has a high value of  <dig> . in contrast, the accuracies of c&c and the pcluster algorithm are  <dig>  and  <dig>  respectively.

* the definitions of parameters ε, nr, nc and po follow those defined for the proposed algorithm, i.e. noise threshold, minimum number of rows, minimum number of columns and maximum percentage in overlap allowed in biclusters respectively. furthermore, m denotes the maximum number of biclusters required and δ of c&c and the pcluster algorithm is defined as in the original publications  <cit> .

statistical properties of the biclustering results before filtering are given in table  <dig>  unlike the pcluster algorithm, the number of biclusters identified by the proposed algorithm is insensitive to noise level. on average, there were  <dig>  biclusters identified at the highest noise level which was close to the true number  <dig>  for the pcluster algorithm, a large number of biclusters with high overlap were detected under noisy situation. the post-filtering procedure was therefore necessary for the pcluster algorithm to extract the significant biclusters. the number of biclusters identified by c&c was  <dig> which is the same as that specified in its parameter setting. in fact, this parameter setting was necessary to acquire high biclustering accuracy. with respect to the biclusters size, the proposed algorithm shows the closest agreement to those embedded in the datasets. the average numbers of rows and columns in the biclustering results are always around  <dig> and  <dig>  respectively while the actual average numbers of rows and columns are  <dig> and  <dig>  respectively. the pcluster algorithm also produced good results. c&c gave the worst performance as it does not allow any constraints to be imposed on the biclusters dimensions. therefore, the post-filtering procedure is essential for c&c to find the embedded biclusters.

for the datasets with two multiplicative-related biclusters, a bicluster was considered to be valid if its size is no smaller than  <dig> and  <dig> in row and column dimensions respectively and the overlap with other valid biclusters is less than or equal to 25%. the settings for the biclustering algorithms and the post-filtering procedure are also included in table  <dig>  the biclustering accuracies of the proposed algorithms pal and pm, together with c&c and the pcluster algorithm  at various noise levels is shown in figure  <dig>  at all the noise levels, our two proposed algorithms outperform c&c and the pcluster algorithm. both pal and pm can exactly detect the true biclusters in the noise-free case while the other two algorithms fail to do so. in particular, the failure of perfect discovery in the pcluster algorithm can be attributed to the column overlap in the datasets. the performance of pm is slightly better than that of pal in general. the biclustering accuracy decreases when the noise level increases except in the case of c&c when noise level changes from  <dig>  to  <dig> . it was probably because outlier is less likely to be included in biclusters at high noise levels. in terms of the statistical properties given in table  <dig>  the two proposed algorithms exhibit closest match to the true embedded biclusters, with pm performs slightly better than pal. similar to the case of the additive models, the proposed algorithms can return more reasonable number of biclusters with similar dimensions to those embedded than the other two algorithms without any post-filtering procedure.

in order to justify the efficiency of our proposed algorithms, processing time for the artificial datasets with noise s.d. of  <dig>  was measured and provided in table  <dig>  the proposed algorithm pa required an average of  <dig>  sec for the artificial datasets with additive-related biclusters. this showed substantial improvement over the pcluster algorithm which needed  <dig> sec to finish. the reduction in computational complexity is achieved by the bicluster growing strategy in which similar patterns in column-pair are combined to form biclusters through row intersection. the proposed algorithm is also more efficient than c&c by a factor of  <dig> . for datasets embedded with multiplicative-related biclusters, the matrices sizes are smaller than those used for additive-model experiments so less processing time was obtained in all the algorithms. however, it can be seen that the proposed approach pm has the lowest computational complexity. the average processing time was  <dig> ,  <dig> and  <dig>  sec for pm, c&c and the pcluster algorithm respectively. in conclusion, the results on artificial datasets demonstrate that our proposed algorithms have high accuracy in detecting additive-related and multiplicative-related biclusters, even in the presence of overlap and noise contamination. the computational complexity of the proposed algorithms is lower than several biclustering algorithms with similar model assumption.

performance on a real dataset
experiments have been conducted on the yeast cell cycle dataset using the proposed algorithms and cheng and church  algorithm  <cit> , iterative signature algorithm   <cit> , order-preserving submatrix  approach  <cit>  and xmotifs  <cit> . post-filtering was applied to the biclustering results in order to eliminate insignificant biclusters as well as impose common constraints for comparison. the parameter settings of various algorithms and post-filtering are provided in table  <dig>  these values were selected based on the guideline in  <cit>  and our experimental work. the functional enrichment was studied over a number of upper bounds on p-value, p <dig> and illustrated in figure  <dig>  compared with c&c which possesses the same model assumption as the proposed algorithm for additive model , higher percentage of functionally-enriched biclusters were identified by the proposed algorithm at p <dig> ≥  <dig> × 10- <dig>   <dig> × 10- <dig> and  <dig> × 10- <dig> in the biological process, cellular component and molecular function ontologies respectively. in particular, at p <dig> =  <dig> × 10- <dig>  the percentage of functionally-enriched biclusters found by pa is  <dig> %,  <dig> % and  <dig> % which correspond to an improvement of  <dig> %,  <dig> % and  <dig> % to c&c in the biological process, cellular component and molecular function ontologies, respectively. at the lowest value of p <dig> =  <dig> × 10- <dig>  our proposed algorithm pa outperforms c&c in the cellular component ontology but not in the other two ontologies. however, the reduction in the percentage of functionally-enriched biclusters is less than  <dig> % in the biological process ontology and  <dig> % in the molecular function ontology, which is relatively small compared with the improvement at the large values of p <dig>  the homogeneous analysis provided in table  <dig> shows that the biclusters identified by pa are more homogeneous than c&c with the average msrs lower by  <dig>  and the average acv higher by  <dig> . from the statistical results in table  <dig>  it can be found that pa can also avoid identification of very large bicluster as is in the case of c&c. the largest bicluster size found using pa is  <dig> ×  <dig> while that found using c&c is  <dig> ×  <dig> 

* the definitions of parameters ε, nr, nc, po and m follow those defined in the experiments on artificial datasets. the other parameters in c&c, isa, opsm and xmotifs are as defined in their original publications  <cit> .

* msrs is evaluated for all the algorithms except pm and c&c  which use msrsl.

* the size of a bicluster is determined by its number of values, i.e. product of numbers of rows and columns.

when multiplicative model is concerned, i.e. the proposed algorithm for multiplicative model  and c&c applied on log value ), the functional enrichment drops in general. at first glance, pm gives poorer performance in term of functional enrichment. nonetheless, if the number of identified biclusters is also considered, pm actually outperforms c&c  by identifying more significant biclusters. the total number of biclusters identified by pm was  <dig> but cc only found  <dig> biclusters. in addition, the biclusters identified by pm exhibit higher homogeneity. the average values of msrsl and acv are  <dig>  × 10- <dig> and  <dig>  for pm respectively. in comparison, the average values of msrsl and acv are  <dig>  × 10- <dig> and  <dig>  for the c&c  respectively.

in addition to c&c based algorithms, figure  <dig> shows the comparative results of isa, opsm and xmotifs for different values of p <dig>  although opsm shows high percentage of functionally-enriched biclusters at large values of p <dig>  there are only two biclusters found which are far from expectation. thus, the proposed algorithms actually identify more functionally-enriched biclusters. also, the percentage of functionally-enriched biclusters of opsm drops to zero at low values of p <dig>  at low values of p <dig>  the results of isa are the best in most cases. for p <dig> ≥  <dig> × 10- <dig>  the performance of the proposed algorithm pa, however, is close to or even better than that of isa. for both opsm and isa, the identified biclusters are less homogeneous in terms of average msrs and acv because their bicluster models are different from those studied in this paper. pa and pm show better performance than xmotifs in the percentage of functionally-enriched biclusters despite that our algorithms have lower average value of acv. the reason is that xmotifs is designed to find biclusters with coherent state in each gene, which is only a subclass of additive models. the homogeneity analysis suggests that the difference in biological relevance of identified biclusters between various algorithms such as the proposed algorithm pa and isa is not merely due to implementation architecture but also due to the model assumption.

in addition to the identification of biologically-significant biclusters, the efficiency of the proposed algorithm is justified by the processing time provided in table  <dig>  pa and pm require  <dig>  and  <dig>  sec respectively to finish. the results are the best and show improvement by a factor of at least  <dig>  compared with the others. this implies that our algorithms have low computational complexity.

details of annotation results of the proposed algorithms pa and pm are shown in tables  <dig>   <dig>   <dig> and tables  <dig>   <dig>   <dig> at p-value <  <dig>  respectively. in these tables, bonferroni correction of p-value which adjusts the probability of random annotation for multiple tests  <cit>  is provided. consideration of the corrected p-value is important when multiple terms are tested for annotation in a single bicluster. the 4-th additive-related bicluster identified by pa has the lowest p-value in all the three ontologies. for the biological process ontology,  <dig> out of  <dig> genes are assigned to category "translation" at p-value of  <dig>  × 10- <dig>  the annotation is also significant after multiple test correction as it has a low corrected p-value of  <dig>  × 10- <dig>  for the cellular component ontology,  <dig> out of  <dig> genes are annotated with category "cytosolic small ribosomal subunit " at p-value of  <dig>  × 10- <dig> . for the molecular function ontology,  <dig> out  <dig> genes are associated with category "structural constituent of ribosome" at p-value of  <dig>  × 10- <dig> . for the multiplicative model, the 24-th bicluster found by pm exhibits the lowest p-value in all the three ontologies. in fact, there are  <dig> genes shared between the biclusters with the lowest p-value identified by pa and pm, which correspond to  <dig> % of genes in the bicluster identified by pa. as a result, the 24-th bicluster identified by pm are annotated with the similar categories as the 4-th bicluster found by pa in all the three ontologies. the annotations are also overrepresented in the bicluster as found in the experiments using pa except that the cellular component category with the lowest p-value is "cytosolic large ribosomal subunit ". the p-values are  <dig>  × 10- <dig>   <dig>  × 10- <dig> and  <dig>  × 10- <dig>  while out of  <dig> genes there are  <dig>   <dig> and  <dig> genes annotated in the biological process, cellular component and molecular function categories respectively.

the experiments on the real dataset show that our proposed algorithms pa and pm can identify biclusters with high biological relevance efficiently. furthermore, pa can always give a reasonable number of biclusters, and with a good degree of homogeneity. although go annotation only provides descriptions currently known in the biological community, the results still give a reasonable indication of performance. furthermore, the biclusters which have no go terms assigned should be investigated for any new biological discoveries.

determination of biclusters homogeneity
in previous experiments, the homogeneity parameter, i.e. noise threshold ε of our algorithms is determined empirically. in fact, the aforementioned exploratory approach based on the pc plots can be employed to determine this parameter in an interactive manner for a given dataset. this exploratory approach uses an assumption that the homogeneity decreases monotonically with ε while the biclustering accuracy is a concave function of ε. to see this, we apply the proposed algorithm for additive models to artificial datasets with noise s.d. of  <dig>  over a wide range of ε. figure  <dig> shows the graphs of biclustering accuracy and acv against ε. the biclustering accuracy first rises rapidly to its maximum value when ε changes from  <dig>  to  <dig>  the biclustering accuracy then decreases slightly until ε becomes  <dig> . a steeper drop is found when ε is larger than  <dig> . in other words, the biclustering accuracy is approximately concave with respect to ε. on the other hand, when ε increases, the average acv of detected biclusters decreases as expected. from the graph, it can be observed that the acv decreases faster when ε exceeds  <dig> . meanwhile, the biclustering accuracy remains high for ε between  <dig> and  <dig> . these observations support the use of the interactive approach for parameter determination.

CONCLUSIONS
in this paper, a novel biclustering algorithm for additive models is proposed. first, we performed analysis on the difference matrix computed from a gene expression matrix. it was shown that the column-wise differences of an additive-related bicluster appear as clusters in each corresponding column in the difference matrix. similarly, clusters can be found from the column-wise ratios calculated from multiplicative-related biclusters. these observations were then explored to construct biclusters greedily from the clustering results in column-wise differences or ratios in the proposed algorithms.

the proposed algorithms have been analyzed by comparing with pcluster algorithm. the results suggest that the proposed algorithms can be regarded as a greedy version of the pcluster algorithm. the biclusters found by the proposed algorithms can be expressed as δ-pclusters but clustering density is utilized in pattern discovery. although the identified δ-pclusters is not guaranteed to be maximal, the proposed algorithm is much more efficient. experiments showed that the computational time of the proposed algorithms is lower than that of the pcluster algorithm by a factor of hundreds or more. moreover, we have verified that the worst case complexity of the proposed algorithms is polynomial-time instead of exponential-time as in the case of the pcluster algorithm or other δ-pcluster based approaches.

the robustness of our algorithms to noise and regulatory complexity has been verified empirically using artificial datasets. it was found that our algorithm is capable of discovering overlapping biclusters under noisy condition. biological significance of biclustering results has been verified on the yeast cell-cycle dataset using gene ontology annotations. comparative study shows that the proposed algorithm is the best or close to be the best one among several existing algorithms in terms of the percentage and the number of functionally-enriched biclusters for p-values below a range of value from  <dig> × 10- <dig> to  <dig> × 10- <dig>  in particular, there are  <dig> %,  <dig> % and  <dig> % of the biclusters annotated with p-value below  <dig> . the proposed algorithm can identify biclusters with less deviation from the additive models. the identified biclusters also have reasonable size ranged from  <dig> to  <dig> genes and  <dig> to  <dig> conditions. comparison in processing time suggests that the proposed algorithm has the highest efficiency.

in the proposed algorithm, the noise threshold is a crucial parameter as it balances the homogeneity requirement and the noise tolerance in the identified biclusters. in order to determine an appropriate value for the noise threshold, an exploratory approach based on the pc plots is adopted. we believe that the proposed biclustering algorithm and the interactive pc plots offer an effective data analysis tool for gene expression data. in future, our research will be focused on detecting bicluster types other than additive or multiplicative models, e.g. biclusters of coherent evolution.

availability and requirements
project home page: .

operating system: window xp

programming language: matlab  <dig>  or above

license: free for academic use. for non-academic use, please contact the author.

authors' contributions
koc worked on the proposed biclustering algorithm, implementation and experimental analysis. nfl formulated the biclustering problem and designed the algorithm. wcs initiated the project. awcl worked on the experimental analysis. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary materials. this file contains the content about the parallel coordinate  representation of biclusters given in figure  <dig> in the article, which can serve as preliminary for readers who are unfamiliar with pc plots. it also discusses visualization of biclusters in a data matrix which may help reader to understand the interactive adjustment of noise threshold for the proposed algorithm described in the article.

click here for file

 acknowledgements
the authors thank the anonymous reviewers for their constructive comments. this work is supported by the centre for multimedia signal processing, department of electronic and information engineering and the hong kong polytechnic university . k.o. cheng acknowledges the research studentships provided by the university.
