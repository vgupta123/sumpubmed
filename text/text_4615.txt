BACKGROUND
clustering of protein sequences from different organisms has been used to identify orthologous and paralogous protein sequences, to find protein sequences unique to an organism, and to derive the phylogenetic profile for a cluster of protein sequences. these are some of the essential components of a comparative genomics study of protein sequences across several genomes.

the methods of clustering protein sequences can be either domain-based or family-based. all the clustering methods start with an all-against-all pairwise protein sequence similarity search. the domain-based clustering methods organize the protein sequence universe into domain clusters where domains are the structural units of proteins, e.g., cog  <cit> , prodom  <cit> , and picasso  <cit>  . a multidomain protein may belong to multiple domain clusters.

clusters of orthologous groups  find triangles of mutually consistent genome-specific best hits from distant organisms without specifying a fixed similarity cut-off, thus accommodating both fast evolving and slow evolving genes. it then merges triangles which share a common edge. each cog cluster is further analyzed manually to eliminate false positives caused by multidomain proteins so that each cog cluster represents a domain.

prodom is based on the assumption that short protein sequences are single domain proteins. it first sorts all the protein sequences according to their lengths. it then undergoes a repetitive process: during each iteration, prodom chooses as the query sequence the current shortest protein sequence or its internal repeat unit if it has internal repeats, searches the whole protein sequence set with psi-blast  <cit> , builds the sequence profile, and masks segments covered by the sequence profile for multidomain proteins or removes the single domain proteins completely covered by the sequence profile. the process iterates until there is no sequence left in the protein sequence set.

picasso merges pairwise sequence alignments from the initial all-against-all pairwise sequence similarity searches into multiple sequence alignments of closer homologs, and later hierarchically merges these multiple sequence alignments into representative sequence profiles of remote homologs by profile-profile comparisons. the representative sequence profiles may contain sequences of different domain structures, but share at least one domain. picasso then cuts domains within the representative sequence profiles into individual domain clusters based on the concept of overlapping maximal clusters proposed in systers  <cit> . maximal clusters are clusters not fully contained in any other clusters. two maximal clusters may have not only the overlapping set of neighbour members but also the unique set of neighbour members to these two maximal clusters. thus these two overlapping maximal clusters must be of different domain structures sharing at least one domain which corresponds to the overlapping set of neighbour members. then these two overlapping maximal clusters must undergo domain-cutting to be split into individual domains corresponding to closed neighbours, where no member has any neighbour outside of the cluster, from multiple alignments. however, since it is still a challenging problem to precisely pinpoint the structure domain border based on primary sequence information  <cit> , the performance of the clustering algorithm will be determined by the accuracy of domain demarcations.

family-based clustering methods group protein sequences into families, which contain a group of evolutionarily related proteins that share similar domain architecture , e.g., clustr  <cit> , systers, proclust <cit> , protonet  <cit> /protomap  <cit> , and mcl <cit> . clustr clusters protein sequence with the single linkage algorithm using the z-score as the metric.

systers uses each protein sequence in the dataset as a seed sequence and applies the single linkage algorithm with a stringent threshold. thus, each seed sequence has a cluster associated with it. it then merges all the clusters to maximal clusters. the maximal clusters could be either separate maximal clusters corresponding to single domain protein clusters or overlapping maximal clusters representing clusters having multiple domains, but sharing at least one domain.

proclust uses a different metric to detect whether the aligned two proteins have similar domain structures. the metric value, which scales from  <dig> to  <dig>  is the ratio of the raw score of the sequence alignments to the raw score of one of those two sequences aligned to itself. thus the metric value between two sequences is directional. it assumes that the metric is symmetric if two aligned sequences have similar domain structure and non-symmetric otherwise. it then represents each sequence as a vertex and represents the metric value above the threshold as a directional edge in a directed graph. each strongly connected component corresponds to a cluster  <cit> . it was later improved by building profile-hmms for all clusters having more than  <dig> sequences and merging two clusters a and b into a cluster corresponding to a scop superfamily if the average e-value from searching all the sequences in the cluster a against the profile-hmm of the cluster b is below the threshold <cit> .

protonet applies the hierarchical clustering of protein sequences based on the their pairwise similarity e-values, but adopts different rules for merging clusters: arithmetic mean, geometric mean, and harmonic mean. however, different families may have different levels of sequence conservation. it is not appropriate to choose one e-value threshold. and at the level of higher e-value, it may merge two clusters of different domain structures, but sharing one domain. however, different families may have different levels of sequence conservation. it is not appropriate to choose one e-value threshold. and at the level of higher e-value, it may merge two clusters of different domain structures, but sharing one domain.

transitive homology detection methods have been proposed in the intermediate sequence search, iss  <cit> , and  <cit> . it works by searching the query sequence against the database with a conservative threshold to find the closely homologous sequences and using these homologous sequences as seeds to search the database to find remotely homologous sequences with a less conservative threshold. the method has been shown to be close to the profile based methods and better than a direct pairwise homology search  <cit> . but, it is a challenge to quantify the indirect, transitive homology as opposed to using the e-value for quantifying direct pairwise sequence homology.

the markov cluster   <cit>  algorithm has been successfully applied to clustering protein sequences. mcl represents protein sequences as nodes on a graph where similar proteins are connected by edges weighted according to their blasp e-value. the mcl algorithm works through a series of iterative random walks across the graph and inflations of the edge weights that gradually strengthens the connections between very similar nodes and weakens the connections between less similar nodes. mcl makes no explicit use of protein domain architecture but does leverage transitive homologies in the random walk phase of the algorithm.

compared to the hierarchical clustering family based clustering method, e.g., protonet  <cit> , our method can take advantage of the transitive homologue closure by the third intermediate sequence to detect remote homologues at the superfamily level. compared to single linkage based methods, e.g., clustr  <cit> , our method avoids the problem of merging two unrelated multi-domain cluster sharing a common domain. compared to the iterative clustering method, e.g., systers  <cit> , our method generates clusters where each sequence belongs to only one cluster.

RESULTS
benchmarking
in order to test the performance of clugen, we selected all swissprot  <cit>  sequences with an interpro  <cit>  annotation, which resulted in  <dig> sequences from  <dig> interpro families. the criteria we used to select sequences are that more than one member database from the interpro annotation have the same superfamily or domain assignment and that the aligned region of the swissprot sequence with respect to either profile or hidden markov model is longer than  <dig> amino acids. the benchmarking dataset is available on request. figure  <dig> shows the interpro superfamily/domain size distribution in the benchmarking dataset. there are  <dig> singleton families, that is families that consist of only one sequence. the largest family is ipr <dig>  the rhodopsin-like g-protein coupled receptor  family which comprised of  <dig> protein sequences.

performance measure
we measure clugen's performance by sensitivity, specificity, and goodness. a protein sequence is a false positive  if it is misclassified to a certain interpro superfamily/domain and a true positive  otherwise. a protein sequence in a certain interpro superfamily/domain is a false negative  if it is not classified to that interpro superfamily/domain . let nfp and ntp denote the number of false positives and the number of true positives with respect to a cluster. let n fn denote the number of false negatives with respect to a interpro superfamily/domain.

specificity: the specificity of a cluster is defined as ntp / .

sensitivity: the sensitivity of an interpro superfamily/domain is defined as ntp / .

goodness: the goodness of an interpro superfamily/domain is a measure of how well a cluster corresponds to the mapped interpro superfamily/domain and is defined below  where n denotes the number of generated clusters associated with that interpro superfamily/domain. the area under the roc curve  has been shown to be a better evaluation measure than accuracy within the context of binary classification, where the negative dataset is clearly defined. however, we cluster protein sequences into  <dig> interpro families simultaneously. as a result, using the auc as a measure of performance is not the appropriate metric here. instead, we adopt as the "goodness " the set relative measure as defined in  <cit> . in order to decrease the goodness value when a large number of clusters is associated with an interpro superfamily/domain, a penalty of  is applied in the numerator of the equation.

ideally specificity, sensitivity, and goodness should be 100%.

equation 1:

goodness=∑i=1nntpi−n+1∑i=1nntpi+∑i=1nnfpi+nfn
 mathtype@mtef@5@5@+=feaafeart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwghbwrcqwgvbwbcqwgvbwbcqwgkbazcqwgubgbcqwglbqzcqwgzbwccqwgzbwccqgh9aqpdawcaaqaamaaqahabagaemota40ccqwg0badcqwgwbacdawgaaqaaiabdmgapbqabagccqghsislcqwgobgtcqghrawkcqaixaqmasqaaiabdmgapjabg2da9iabigdaxaqaaiabd6eaobqdcqghris5aagcbawaaabcaeaacqwgobgtliabdsha0jabdchawnaabaaabagaemyaakgabeaakiabgucarmaaqahabagaemota40ccqwgmbgzcqwgwbacdawgaaqaaiabdmgapbqabagccqghrawkcqwgobgtliabdagamjabd6gaubqaaiabdmgapjabg2da9iabigdaxaqaaiabd6eaobqdcqghris5aawcbagaemyaakmaeyypa0jaegymaedabagaemota4eaniabgghildaaaaaa@66da@

overall performance
we evaluated clugen at several threshold values. table  <dig> lists shows the specificity, sensitivity, and goodness as well as the number of generated clusters and the number of orphan clusters as a function of the different threshold values respectively. a cluster can be mapped to an interpro family only if more than 50% of the cluster members belong to that interpro family; and is declared as an orphan cluster otherwise. at one extreme of the spectrum, each cluster is a singleton cluster consisting of only one protein sequence. thus both specificity and sensitivity are 100%. but the goodness value is very low, the reciprocal of the size of the family. clustering based on more stringent threshold values, e.g.  <dig> , generates a larger number of smaller clusters causing a smaller number of false positives, also resulting in a low goodness value. as the threshold values become less stringent, small clusters merge at different levels into larger clusters, therefore a smaller number of larger clusters are generated. at the threshold of  <dig> , there are  <dig> clusters resulting in a specificity of  <dig> %, sensitivity  <dig> %, goodness value of  <dig> %, and the number of orphan clusters is  <dig>  as can be seen from table  <dig>  the threshold value is a compromise of sensitivity, specificity, goodness and the number of orphan clusters. ideally, we would like the clustering results to produce as many clusters as there should be and as few orphan clusters as possible.

for a basis of comparison we also applied the mcl  <cit>  algorithm to the same test dataset with various inflation values. results are depicted in figures  <dig> and  <dig>  at higher specificities, the sensitivity of both methods increases. this is expected because higher specificities are achieved via stricter thresholds that result in more clusters overall and fewer large clusters. in the extreme case one could place each test sequence in its own cluster of size  <dig> and achieve 100% sensitivity and 100% specificity but with a low goodness score. this trade-off between sensitivity, specificity, and goodness is clearly evident in figure 4; as specificity increases, sensitivity increases whereas goodness decreases.

in figure  <dig> we see additional tradeoffs between specificity and overall performance. as specificity increases the number of orphan clusters decreases. this improvement in performance comes with an increase in the total number of clusters. once again the extreme case of one sequence per cluster guarantees no orphan clusters at the cost of many non-informative clusters. ideally one wishes to strike a balance reducing the number of orphan clusters while not drastically increasing the total number of clusters.

the overall performances of mcl and clugen are fairly similar, with clugen demonstrating a clear advantage at specificities below  <dig> . clugen's sensitivity and goodness are better at specificities below  <dig> , whereas mcl's goodness is slightly better at specificities greater than  <dig> . the number of total clusters and orphan clusters generated by both methods are comparable at specificities below  <dig> . clugen tends toward fewer orphan clusters at the cost of more total clusters at higher specificities.

analysis of some clugen generated clusters
in this section, we will give examples of some successfully generated clusters with one-to-one correspondence to specific interpro families, some clusters which have false positives, and some which have false negatives.

as previously outlined,  <dig> sequences with interpro superfamily annotation  were clustered using our algorithm. this results in a total of  <dig> clusters. overall, there are  <dig> clusters that have been correctly mapped with one-to-one correspondence to  <dig> out of  <dig> interpro superfamilies /domains. there are  <dig> orphan clusters. some correctly clustered large protein superfamily/domain examples are:  <dig> cytochrome p <dig> proteins are correctly clustered into family ipr <dig> without false positives and false negatives;  <dig> large chain ribulose bisphosphate carboxylase proteins are correctly clustered into family ipr <dig> without false positives and false negatives;  <dig> short-chain dehydrogenase/reductase sdr proteins are clustered into family ipr <dig> without false positives and false negatives. table  <dig> shows top  <dig> interpro superfamily/domains that have been mapped to clusters with one-to-one correspondence.

we also conducted a detailed analysis of clusters that had false negatives/false positives in order to understand the areas in which the clustering algorithm could be further improved. the following is a description of errors encountered in clustering algorithms with specific reference to the data from our method.

errors from low-complexity and coiled-coil regions
the first type of error is due to the presence of low complexity sequences with repetitive sequence patterns or sequences with coiled-coil structures, since we mask the low complexity regions and coiled-coil regions before the all-against-all pairwise similarity searches. as an example, the interpro family ipr <dig>  tropomyosins, which regulate muscle contraction, are alpha-helical proteins that form a coiled-coil. there are  <dig> tropomyosin sequences in the benchmarking dataset, among which  <dig> tropomyosin sequences are false negative sequences and appear in the following cluster along with members of ipr <dig> atp synthase subunit d.

errors from short sequences or from an abundance of certain amino acid type in the sequences
short sequences with less than  <dig> amino acids could also cause false positives in the clustering results. cluster  <dig> which is mapped to interpro family  <dig>  the metallothionein superfamily, consists of  <dig> short protein sequences with  <dig> amino acids on average in length among which  <dig> false positive protein sequences are from interpro family ipr <dig>  disintegrin, and  <dig> false positive protein sequences are from interpro family ipr <dig>  bowman-birk serine protease inhibitor. the reason these families cluster together is that metallothioneins are small proteins with high content of cysteine residues, while disintegrins and bowman-birk serine protease inhibitors are also short cysteine-rich protein sequences. this suggests that a more stringent threshold should be applied to cluster short protein sequences which are rich in a particular amino acid.

similar domain structures in different superfamilies
sequences that belong to different superfamilies but share similar domain structures may also cluster incorrectly in some cases. for example,  <dig> out of  <dig> sequences correctly cluster into the ipr <dig> rhodopsin-like g-protein coupled receptors family. but  <dig> out of  <dig> sequences from the ipr <dig> rhodopsin-like g-protein coupled receptors which have cysteine-rich n-terminal regions are mistakenly clustered into the interpro  <dig> which is annotated as a cysteine-rich flanking region n-terminal. similarly, members of the ipr <dig> cchc zinc finger domain have been incorrectly clustered into the cluster  <dig> which is mapped to the interpro family  <dig> neurohypophysical hormone because they share the two cysteine residues and other surrounding weak motifs.

CONCLUSIONS
this paper describes a novel method for the clustering of protein sequences based on a new metric derived from prediction using neural networks and further utilizing the metric to model the transitive sequence homologue to detect the remote homologue. good performance with respect to the interpro protein sequence database has been achieved on the benchmarking dataset.

clustering of sequences has many applications in target discovery and gene functionalization. one can identify in silico, antimicrobial drug targets by examining clusters without any eukaryotic member sequence in it. these proteins could be potentially selective targets for infectious diseases due to the absence of any appreciable homolog in the human proteome. such computationally derived targets need to be further validated using experimental data derived from gene expression profiling and proteomics experiments  <cit> . another application is to predict the function for prokaryotic proteins of unknown function by phylogenetic profiling  <cit> , where the phylogenetic profile for a cluster is a vector of binary values, with  <dig> meaning the presence of a genome in that cluster and  <dig> otherwise. the assumption here is that genes with the same phylogenetic profile could have the same function.

