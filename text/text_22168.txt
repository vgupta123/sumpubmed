BACKGROUND
new sequencing technologies are accumulating proteins with no function annotation at an ever-increasing speed. traditional experimental methods for determining protein function have proven to be costly and time consuming. even the use of human curators, who determine protein function from various bioinformatics resources, the literature, and experimental data, will not suffice. therefore, high-throughput computational tools for accurate and automated protein function prediction are perhaps the only plausible alternative.

numerous approaches for protein function inference have been proposed  <cit> . these are based on protein homology determined through sequence similarity, structural similarity, function-related sequence and structural features  <cit> , and more sophisticated methods, such as phylogenetic trees  <cit> . non-homology-based methods  <cit> , also called genomic context-based predictions, use genomic profiles, gene proximity, and protein interactions for function transfer. the complex relationships between sequence/structure and function lead to errors in function annotation, not only at low sequence identity, where homology is difficult to establish, but also at high sequence identity, where mutations in a few functionally-important sites lead to change in function  <cit> . however, due to the readily available and fast-growing protein sequence information, sequence homology-based function inference is still the basis for most protein function annotation methods. compared to direct sequence-based methods, such as function inference through blast search, inference based on function-related sequence features, such as domain profiles or motifs, is more accurate and more sensitive for proteins that have low sequence similarity with proteins of known function. this has led to the development and popularity of a wide variety of feature databases, such as pfam  <cit> , prodom  <cit> , prosite  <cit> , the clusters of orthologous groups   <cit> , and the conserved domains database   <cit> . recently, more specialized feature databases have been developed for the prediction of specific protein functions. for example, priam  <cit>  and eficaz  <cit>  provide profile databases for protein catalytic function predictions. they have proven to be more accurate and sensitive than feature databases developed for general-purpose protein function prediction.

with the existence of many programs and databases that have the capability of inferring different protein functions, a pipeline that properly integrates these resources is able to predict genome-wide protein function with higher accuracy than any individual method. large integrated information systems, like interpro  <cit> , basys  <cit> , gendb  <cit> , puma <dig>  <cit> , mage  <cit> , agmial  <cit> , and img  <cit> , are constantly emerging. they include comprehensive resources that allow curators and users alike to gain insights into protein functions. however, these systems are not designed to algorithmically combine different resources for automated protein function prediction. rather, function information from different resources is usually listed in their original forms, such as accession numbers in a database, and the succinct description of protein functions, reconciling the results from the different resources and eliminating false positive predictions, is edited by human curators. in addition, these systems do not provide tools for database customization to improve the prediction of protein functions of interest.

to address these issues, we describe a new integrated and automated protein function prediction pipeline termed pipa . pipa differs from other integrated systems as it not only integrates existing programs and databases, but it also allows integration of users' data to predict particular protein functions. this is accomplished through a profile generation procedure for user-categorized protein functions. most importantly, pipa combines all integrated resources into a consistent and parsimonious consensus function annotation; a valuable feature that most integrated systems do not provide. the consensus function annotation based on a composite of all resources is potentially able to reduce the effect of false predictions from individual sources, such as databases that are based on protein short motifs, and yield more reliable predictions.

most established profile databases, such as prodom and eficaz, are generated using complex procedures based on either psi-blast  <cit>  or hmmer  <cit> . the main features of these procedures are the control of profile quality and the generation of multiple profiles for each function related with sequence-divergent proteins. multiple profiles can be sequentially and iteratively generated from a set of proteins with a common function. this approach has been used to build the prodom and the priam databases. conversely, eficaz builds multiple profiles simultaneously based on clusters of proteins with similar sequences. this reduces the possibility of separating proteins with very similar sequences in the sequential generation of multiple profiles for one function. pipa adopts the eficaz procedure. however, unlike eficaz, it establishes a cut-off threshold for each generated profile. the profile-specific threshold is associated with a user-defined false-positive rate, and it is determined by applying the profile to search a database consisting of functionally related  and unrelated  proteins. the profile-specific threshold assures the accuracy of the functions inferred by the profile. this is an advantage over a profile database with a single threshold, which only assures an average accuracy of the functions inferred by all profiles. we apply the profile generation algorithm to create an enzyme profile database for accurate prediction of protein catalytic functions, named catfam. catfam is an integral part of pipa.

it is challenging for automated computer programs to perform consensus annotation. this is mainly due to the differences in terminology used by various inference methods and the implicit semantic relationships among terms. for example, the fact that one protein is inferred as a "glucokinase" by one method and as a "hexokinase" by another cannot be reconciled unless the computer program knows the relationship between the two terms. in this case, "hexokinase" is a consensus term supported by both predictions, since "glucokinase" is a special type of "hexokinase." the gene ontology  consortium  <cit>  has addressed this issue and is dedicated to a consistent description of all gene products. it provides controlled terms and organizes them as a directed acyclic graph.

pipa adopts go as a unifying terminology to annotate protein functions. it contains an algorithm to map functions predicted by individual methods using different terminologies  into go terms and an algorithm to make consensus predictions based on go terms.

mappings from some of the most popular databases to go terms can be found in the go website  <cit> . for databases that do not have mappings for thousands of their families, we use an association rule mining  algorithm  <cit>  to automatically generate mappings based on samples of proteins with assigned go terms. the arm algorithm was previously used to map interpro identification numbers to enzyme commission  numbers  <cit> , where the two databases were considered as two "flat" ontologies. alternatively, we take into account the hierarchical topology of go by asserting that: if a go term can be assigned to a protein, so can its ancestors . this helps increase the identification of go terms for protein families in a database, especially when these families are not related with very specific go terms that are often used to annotate proteins.

previously, go-based consensus was proposed for protein function annotation via multiple matches of go-annotated protein sequences from a single method, usually blast search of a single database  <cit> . the general practice is to propagate the go terms of matched proteins into a few common ancestral go terms on the go hierarchical graph. the ancestral terms are more likely to provide the correct function annotation for the query protein and result in good precision. however, they do not contain as much information  as their descendant terms. one way to achieve a balance between precision and recall is to develop algorithms that assign scores to go terms and select those terms with scores exceeding a threshold. for example, both gofigure  <cit>  and gotcha  <cit>  compute weighted scores for go terms from the e-value of blast hits and propagate them to ancestral terms. gofigure uses an empirical threshold to select consensus go terms, while gotcha infers probability measures for scores of each go term from background samples. pipa assigns  likelihood scores for go terms, which indicate the possibility that a go term is the correct annotation for the query protein. our algorithm allows users to choose different thresholds for the selection of different consensus terms.

here, we present the three most important algorithms developed for pipa: the profile generation procedure, the algorithm for the automated generation of go mappings, and the go-based consensus algorithm, which we believe to be the key elements of an integrated and automated protein function annotation system.

RESULTS
pipeline overview
pipa is designed to allow for easy development of new profile databases and integration of various bioinformatics tools. figure  <dig> shows the three modules of the pipeline. the pipeline execution module consists of programs that enable user access to and control of the pipeline's parallel execution of multiple programs. the execution module wraps the core module, containing all integrated methods , the terminology conversion program, and the consensus annotation program. the support module contains the profile database generation program, which creates new profile databases, and the go-mapping generation program, which creates go mappings for the terminology conversion program.

currently, the major integrated methods in pipa consist of the catfam database, constructed by the profile database generation program, the  <dig> publicly-available databases integrated by interpro, the cdd, the database of clusters of orthologous groups , the transmembrane and signal peptide prediction program phobius  <cit> , and the bacterial subcellular localization prediction program psortb  <cit> . table  <dig> gives a complete list of these resources. pipa takes as input protein sequences in fasta format  <cit>  and executes all integrated methods. parameters, such as e-value cut-off, recommended by the developers of each of the integrated methods are used as the default settings. however, the parameters can be modified to control the rate of false positives in predictions. these predictions, based on their original terminologies, are then converted into go terms using mapping files. lastly, the go consensus annotation algorithm takes these go terms to determine consensus terms, which are saved, together with the original predictions, in an output file in the general feature format  <cit> .

*accessed on july  <dig>  2007

+integrated from interpro

pipa currently integrates  <dig> programs/databases that are either developed by our group  or publicly available.

in the framework of pipa, catfam is not only one of its integrated databases that provides catalytic function prediction, but also an example of pipa's profile generation program, which can be used to generate other specialized databases, provided that sufficient number of sequences is available for clustering and profile generation. therefore, the evaluation of catfam's performance in the following section not only demonstrates pipa's reliability in the prediction of protein catalytic functions but also the effectiveness of its profile generation program.

pipa is deployed on a linux computer cluster at the u.s. army research laboratory's major shared resource center. all integrated programs are executed in parallel. using  <dig> computing processors, pipa can annotate a typical bacterial genome consisting of  <dig>  proteins in about six hours.

measures for performance evaluation
there are no universally-accepted approaches to assess the performance of automated function annotation. here, we use precision and recall, two measures widely-used by the machine learning community, to evaluate the performance of enzyme predictions by catfam. precision is the fraction of correctly predicted ec numbers out of all predicted ec numbers, while recall is the fraction of correctly predicted ec numbers out of all ec numbers in the test dataset. in the context of the three-digit ec number prediction, a prediction is considered correct if the first three ec digits match the true ec number.

we evaluate go predictions by considering the ontology's hierarchical structure in the analysis, so that if one go term is appropriate to describe a protein function, all of its ancestral terms are appropriate as well. this is also called the true path rule  <cit> . therefore, if the prediction of a go term is its ancestor term, rather than the term itself, the prediction is counted as precise but less specific. in other words, not all information is recalled. conversely, if a prediction of a go term is its child term, the prediction is counted as specific but less precise. these considerations led to the extension of the standard definitions of precision and recall, and the establishment of hierarchical precision  and hierarchical recall  for evaluations of go term predictions  <cit> . both hp and hr are normalized to lie in the range  <cit> , and are both equal to one when the predicted annotations completely match the true annotations.

enzyme prediction evaluation
we use pipa's sequence profile generation procedure to construct catfam. the data used for catfam development and testing include both enzymes and non-enzymes and are described in the methods section. we apply a total of  <dig>  proteins for the profile generation. we specify a low false-positive rate of  <dig> %  to determine the profile-specific cut-off thresholds, and construct databases for three- and four-digit ec number predictions, catfam-3d and catfam-4d, respectively. we use a total of  <dig>  proteins, not used for profile generation, for catfam testing. the databases catfam-3d and catfam-4d achieve the expected  <dig> % precision with  <dig> % and  <dig> % recall, respectively.

to test catfam's contribution to function prediction for enzymes with low sequence identity to known enzymes, we sort the testing results according to the maximum sequence identity  between the query protein and the proteins used for profile generation. figure  <dig> shows the precision and recall as a function of msi. all curves have a similar trend; both precision and recall increase with increasing msi. both databases achieve more than  <dig> % precision and more than  <dig> % recall when msi is decreased to  <dig> %.

mappings between different ontologies
we develop a procedure that uses the arm algorithm, detailed in the methods section, to automatically generate mappings between two ontologies from sample proteins. we apply this procedure to generate mappings from cog families to go terms. the sample proteins consist of  <dig>  proteins from swiss-prot with annotated go terms. we search these proteins against a cog profile database for matched profiles, determined by a cut-off e-value, that are associated with particular cog families. the arm algorithm analyzes the cog-go links and uses two statistics, support and confidence, to determine a mapping of one cog family to one go term. support is defined as the number of instances in which a cog family and a go term appear, and confidence represents a conditional probability of the generated mapping. the algorithm accepts a mapping if the associated support is greater than  <dig> and confidence is greater than  <dig> %.

we apply a similar procedure to generate cog-to-ec mappings, using the sample proteins employed in catfam generation. these mappings are expected to increase the number of subsequent cog-to-go mappings through the established ec-to-go relationship.

in order to evaluate the accuracy of the automatically-generated mappings, we perform a 20-fold cross-validation, where we randomly select  <dig> % of the proteins from the  <dig>  sample proteins to generate the mappings and use the remaining  <dig> % for testing. we repeat this procedure  <dig> times, each with different partitioning of the dataset. table  <dig> shows the result. the cog-to-go mappings achieve moderate average precision  and low average recall  for go annotation. however, the cog-to-ec mappings, evaluated in a similar cross-validation procedure, achieve excellent performance with  <dig> % precision and  <dig> % recall.

the accuracy of the automatically-generated mappings is evaluated by a 20-fold cross-validation process using  <dig>  sample proteins. the cog-to-go mappings achieve moderate average precision  and low average recall  for go annotation. however, the cog-to-ec mappings, evaluated in a similar cross-validation procedure, achieve excellent performance with  <dig> % precision and  <dig> % recall.

the comparison of cog-to-go and cog-to-ec mappings indicates that the number and quality of the automated mappings strongly depend on the annotation accuracy and completeness of the sample proteins used for mapping generation. for example, if a go term is assigned to only half of the proteins that should have that go annotation and all of these proteins match one cog family, the observed confidence for the mapping of this cog family to the go term would be only  <dig> %, and this mapping would be discarded. actually, we find cases in which the correct go terms are not assigned to proteins, especially for enzyme annotations in the swiss-prot database. the absence of go terms could explain the fact that the number of automatically-generated cog-to-go mappings is much smaller than the number of cog-to-ec mappings generated in a similar way . more go mappings are expected to be generated with the addition of new curated go annotations to the swiss-prot database.

evaluation of go-based consensus annotations
we determine consensus go terms for protein predictions from distinct individual sources by considering the mapped go terms and their ancestral terms. initially, our algorithm assigns scores to each go term for each individual source that infers that go term. for consistent scoring across the different prediction algorithms, each individual score is calculated based on the e-value of the prediction and is scaled between zero and one using the corresponding cut-off e-values e <dig> and e <dig>  respectively, as explained in the methods section. a minimum score of zero is assigned to a prediction if the corresponding e-value is equal to or greater than e <dig>  and a maximum score of one is assigned if the e-value is equal to or smaller than e <dig>  each go term acquires a final score based on all of its individual scores and composite scores propagated to it from its descendants through the go topology. the terms with final scores greater than a pre-selected score acceptance threshold  are included in the consensus prediction.

we employ the  <dig>  proteins from swiss-prot with annotated go terms to test the consensus algorithm. the hierarchical precision hp provides a measure of the accuracy of the go-term predictions, and hierarchical recall hr provides a measure of the coverage of the predictions. figure  <dig> compares the performance of go annotations with and without the consensus algorithm for all three go categories: molecular function, biological process, and cellular component. data points corresponding to the consensus algorithm are obtained by changing parameters e <dig>  e <dig>  and sat. without consensus, adjusting the performance of go annotations is achieved by changing the cut-off e-value. the figure suggests a significant trade-off between precision and recall. however, for a given recall, the application of the consensus algorithm yields higher precision than when consensus is not used. precision is improved by up to  <dig> % for both molecular function and cellular component, and by up to  <dig> % for biological process. the highest precision is achieved for the parameters set as e <dig> =  <dig> , e <dig> = 10- <dig>  and sat =  <dig>  for all three go categories, which are highlighted in the figure with larger-size markers.

the results suggest that the consensus algorithm effectively integrates different function inferences to improve the precision of go annotation. the low hr, which indicates a low coverage of go terms predicted by the pipeline, is likely due to the incompleteness of the go mappings that link individual databases with go terms and the limited coverage of the integrated databases for the prediction of biological processes and cellular components. the existing mappings to go terms from pipa's two major sources, interpro and catfam, cover a total of  <dig>  molecular function terms,  <dig>  biological process terms, and  <dig> cellular component terms, whereas the  <dig>  testing proteins contain  <dig>  molecular function terms,  <dig>  biological process terms, and  <dig> cellular component terms. this means that no more than  <dig> % of the biological process terms and  <dig> % of the cellular component terms associated with the testing proteins can be covered by existing go mappings. we expect that the addition of go mappings for existing databases and the integration of new methods, capable of predicting currently underrepresented protein functions, will increase the coverage of go annotations in pipa.

current limitations and plans for improvement
perhaps, one of pipa's main limitations is that all of its currently integrated resources to predict protein function use annotation transfer based on sequence homology. sequence homology is the most established approach for protein function prediction. however, we are planning on expending pipa's function prediction capabilities by incorporating comparative analysis approaches, e.g., phylogenetic tree analysis, to prevent function transfer errors caused by gene duplication or gene loss. future work may also include the incorporation of non-homology-based prediction methods. for example, de novo function prediction based on machine-learning algorithms with sequence-derived features seems very promising  <cit> . they may provide valuable resources for predicting orphan proteins, which do not have significant sequence similarity with known proteins. however, such methods require substantial training data and are thus limited to well-populated gene ontology categories. function prediction methods based on protein-protein interaction networks  <cit>  are also becoming important due to the increased availability of protein interaction data. however, experimental uncertainty of protein interaction data makes these methods unsuitable for automated, large-scale implementation, at this stage of development.

another perceived limitation of pipa relates to the potential false-positive predictions inferred by integrated methods that are based on short motifs. in its current configuration, pipa has some mechanisms to alleviate this problem. first, for methods that are dependent on short motifs and systematically yield excessive false positives, pipa can reduce them by restricting the e-value cut-offs. second, because pipa's function annotation is based on the consensus of different integrated approaches, most of which are not based on short motifs, the effect of false-positive predictions from individual methods is mitigated. however, the consensus algorithm cannot completely eliminate false predictions introduced by short motifs prevalent in different function domain databases. in future developments, we will explore alternative solutions based on data mining  <cit> , which are similar in spirit to the approaches that we have already applied to generate mappings between ontologies.

CONCLUSIONS
we have developed methods for an integrated and automated protein function annotation pipeline. the three main algorithms presented here improve annotation accuracy by providing the means to develop customized profile databases and by exploiting and consistently consolidating protein function information from disparate sources based on different terminologies. an added benefit is that the consolidated function predictions are given in go terms, which is becoming the de facto standard in the community.

we show the effectiveness of the profile generation procedure for particular protein functions through the development of catfam, which not only achieves overall excellent precision and recall but also performs well for enzymes with low sequence identity. the clustering procedure and the use of negative samples have contributed to the quality of the generated profiles. in addition, the use of profile-specific thresholds ensures equal accuracy for each profile and avoids the problem of having a single e-value threshold for all profiles, which yields good overall results but poor performance for some profiles. moreover, the introduction of negative samples allows users to set a false-positive rate for the resulting database.

although pipa achieves very good performance for catalytic function annotation with the catfam databases, its overall performance for other categorical functions is dependent on the various integrated resources. pipa's profile generation algorithm may be helpful in developing methods to annotate some of these functions, however, for other functions, such as protein subcellular location inferred with psortb and transmembrane proteins inferred with phobius, highly specialized methods are irreplaceable.

we adopt go as the unifying protein annotation terminology to fuse various functions inferred from different sources. we demonstrate that mappings between terminologies used by different sources and go can be generated by the arm algorithm from samples of annotated proteins. the significantly increased number of identified mappings suggests that go's hierarchical topology must be considered during the mapping generation. it provides the opportunity to link a broad functional category in a database with a generic go term that is infrequently used to annotate proteins.

concise and more accurate go annotations can be obtained by the proposed consensus algorithm. the ability to optimize the algorithm's parameters and the future availability of additional reliable go mappings will further improve consensus predictions.

it should be noted that pipa is more than a readily available comprehensive protein function annotation pipeline. it is an open framework for incorporating different function prediction methods, homology-based or non-homology-based, whenever they become mature and available. as additional computational methods are incorporated, pipa will expand the functional categories of annotated proteins. this will improve annotation reliability through the consensus procedure, which mitigates potential false predictions from individual methods. in addition, pipa's modular parallelization framework will maintain the pipeline's high-throughput capability after integration of any number of resources.

