BACKGROUND
the large number of ongoing genome and est  sequencing projects provides a massively increasing amount of protein data. the physiological role and function of almost all proteins identified by these projects is not known. due to the large number of newly identified proteins, it is not possible to annotate their function using conventional experimental approaches or manual data analysis, as demonstrated by any paper reporting a newly sequenced organism. since the 1970s numerous tools have been developed in order to perform automated analyses of sequence data and to annotate functions of proteins based on these analyses. the interpretation of results derived from these automated analyses is also a daunting task due to the complexity of the information revealed.

phylogenetic analyses of large protein datasets are of prime importance because these analyses often yield better functional predictions than homology searches  <cit> . moreover, they yield insight into the evolution of single proteins or protein families. therefore, large amounts of phylogenetic data have been generated and analyzed in recent years. the aim of these studies was, for example, to investigate microbial evolution  <cit>  or to predict the physiological function of experimentally uncharacterized proteins  <cit> .

sicheritz-ponten and andersson  <cit>  automated phylogenetic analysis of microbial genomes in a tool called pyphy. they introduced crude tree structure schemata called „phylogenetic connections". using these, for each gene in a bacterial genome the users of pyphy can then determine e.g. whether it features nearest neighbors only from the archaeal kingdom. given the set of gene trees calculated for the genes of an organism , it would be worthwhile to postprocess these to check whether genes in certain subtrees were subject to gene duplication, or not. for example, the subtree of the archaeal neighbors of a bacterial gene may just feature diversification according to species phylogeny, without duplications, and be simplified accordingly.

frickey and lupas  <cit>  describe an automated "phylome generation and analysis" tool that is inspired by pyphy and includes improvements on the generation of the multiple alignments. moreover, they maintain a database of the gene trees constructed and enable extraction of all phylogenies that match specific constraints on tree structure. presenting the entire database as well as specific extracts to the user would benefit from a tree postprocessing step that makes trees more digestible by the human expert.

gouret et al.  <cit>  report an "intelligent automation of genomic annotation" which calculates gene trees, guided by an expert system. for each protein family, three different phylogeny reconstruction methods are used, and a consensus is calculated. again, postprocessing steps that simplify all these trees would be valuable.

fuellen et al.  <cit>  generated a large tree of  <dig>  abc  protein sequences, which they investigated for evolutionary patterns of function and domain arrangement. in a major manual effort, they produced a simplified "cartoon tree" which was then annotated by function and domain arrangement.

in summary, there is a strong demand to ease the analysis of phylogenetic data. specifically, simplifying gene trees to their essential core information content is of maximum importance. the treesimplifier tool described in this paper has been designed in response to this need of generating "cartoon trees" from large gene trees. it relies primarily on the simplification of those parts of the gene tree that follow species phylogeny. the main features of the software are described in table  <dig>  overall, gene trees are compressed in a way that is meaningful, fast and effective.

implementation
the main components of our treesimplifier tool are the following:

• a parser for a gene tree in standard newick  <cit>  format, with labels that include hugo  gene classification codes  <cit>  and species designations.

• a set of formal rules to reduce the complexity of the gene tree.

• a graphical user interface that allows the user to customize and execute the rules, to visualize the result, and write it to a file.

treesimplifier is designed as an open framework and it is distributed as java open source. new rules can easily be integrated. we now describe each component in turn.

gene tree parsing
the input file format for the treesimplifier application is a gene tree represented by a bracketed expression in newick format, e.g. , gene3) in the simplest case. more generally, the newick format describes a species or gene tree by representing the tree structure as pairs of corresponding parentheses around leaf labels that represent the species or genes. our simplification rules rely on hugo gene name nomenclature and auxiliary species tree information. therefore, the leaf labels representing the genes include the following information .

• the gene name, enclosed by pipe  symbols .

• the species designation, enclosed by square brackets .

• optionally, a user-defined discriminator, enclosed by curly braces.

useful tree simplification is possible if at least some of the gene names follow the hugo gene classification system. the gene tree may also include bootstrap values and branch lengths, following newick format. the discriminator can be used to control the simplification process on a leaf-by-leaf basis. in particular, the user can instruct the software to block the execution of simplification rules in those parts of the gene tree where the discriminator of the leaves does not match. an example for the use of the discriminator is given in the results section on abc proteins .

our leaf label specification follows standard definition line  format, as can be seen from the examples in table  <dig>  so that trees automatically generated from sequences found in databases like the nr  database  <cit>  can be processed easily. our parser uses regular expressions to recover the necessary leaf information from the leaf labels. there are three regular expressions. expression  <dig> matches the gene name, expression  <dig> matches the species designation, and expression  <dig> matches the discriminator . in each case, only the first match is considered. if a leaf label includes, say, two gene names enclosed by pipe symbols, the second gene name is ignored. matched parts of the leaf label are highlighted in the examples of table  <dig> 

our tool is designed to process a gene tree including only genes from a single protein family. for this protein family, the hugo stem symbol must be known  <cit> . this symbol is an alphanumerical string that is associated uniquely with the protein family. the stem symbol is considered to be case-insensitive, permitting e.g. use of lower case for mouse genes. it is needed as part of the configuration input. in abstract terms, for a stem symbol xxx, a typical hugo gene name is xxxa1a. for concrete examples, see the abc protein example below, part . for a given hugo gene name such as xxxa1a, the stem symbol enables identification of the start position of the hierarchical gene classification . this hugo gene classification is denoted by a string of letters and numbers that follow the stem symbol. to parse the gene classification, the stem symbol is deleted from the gene name. then, the remainder is read step-by-step, going deeper in hierarchy whenever a switch from an alphabetical character to a numerical character is encountered. for some genes, in particular non-human ones, or newly discovered ones, the gene classification may be missing  or incomplete. .)

genes classified consistently
our approach is motivated by gene trees that feature subtrees with a mix of  genes with a hugo-based gene classification and  genes where the classification is missing or incomplete. for examples, see fig.  <dig>  genes in a subtree of the gene tree have a consistent classification if all gene classifications are prefixes of the longest gene classification found in the subtree, as in fig.  <dig>  panel i. here, "xxx" is the stem symbol, and xxxa <dig>  xxxa1b, xxx and xxxa are all prefixes of xxxa1b. if a subtree features only consistently classified genes, it is called a consistently classified subtree. in a consistently classified subtree, a gene name that is missing classification information completely or partially  is assumed to feature the longest classification. a consistently classified subtree may be of maximum size. then, it cannot be extended without including gene names with an inconsistent gene classification that is not a prefix of the largest gene classification in the subtree. in fig.  <dig>  panel ii, the subtree marked in bold is consistently classified and of maximum size. for real-world examples, see the abc protein example below ).

if a subtree is not classified consistently, there are two possibilities. firstly, the subtree may indeed feature two distinct subfamilies or subsubfamilies. an example for a subtree with two distinct subfamilies a and c can be found in fig.  <dig>  panel iii. secondly, we may have identified misplaced or misnamed genes in the gene tree. distinguishing these cases is not automated, and correct interpretation of the situation is left to the user. in case of fig.  <dig>  panel ii, it is possible that xxxc <dig> is a misplaced or misnamed gene. evidence for this interpretation is that the genes in the subsubtree marked in bold as well as the gene xxxa at the root of the entire subtree are members of the a subfamily. alternatively, however, gene xxxa may be misplaced or misnamed. for a real-world example, see the abc protein example below, part . by default, genes  with a different discriminator cannot be classified consistently. only subtrees that feature genes with a consistent classification are candidates for simplification into single leaves by the compression rules to be described.

the user can specify that the classification is ignored from a specific level onwards. for example, the tool can be instructed to classify consistently all genes that share the same subsubfamily, ignoring the next level. .) on the other hand, it is up to the user to fine-tune the a-priori classification information given by the hugo gene names, manually adding further levels that are known. the more detailed the classification, the more exact the identification of misplaced or misnamed sequences, but the fewer simplification can take place. usually, the best compromise is to stick to the classification implicit in the hugo gene names, which is well established so that it is unlikely to label genes as misplaced that are in fact placed correctly, and which allows for a high degree of simplification. in specific cases, e.g. in detailed investigations of a single subfamily, or in global analyses of a large gene family, it may be necessary to adjust the degree of resolution.

species tree
for gene tree simplification, we need a species tree of all the species that contribute genes to the gene tree. the gene tree can be provided by the user, or the tool uses the ncbi taxonomy  <cit> .

gene tree simplification
we will describe three rules for simplifying gene trees. these are a formalization of the rules described in the appendix . some concepts adapted from phylogenetic systematics are defined along the way. gene trees are assumed to be bifurcating and rooted. the cenancestor of a group of species is the most recent common ancestor, also known as "least common ancestor". the cenancestor of a bifurcation in a gene tree is the cenancestor of the species found in the labels of its subtrees. to ease the description that follows, the cenancestor of a single species is the species itself. the consistent classification  of a bifurcation is considered to be defined if the genes in its subtrees are classified consistently. if it is defined, it is the longest classification found in the subtrees.

rule  <dig>  monophyletic compression 
this rule uses species information to summarize those parts of the gene tree where a subtree follows species phylogeny. a subtree follows species phylogeny if its branching pattern does not contradict the species tree. that is, the subtree features a single gene that evolved according to species phylogeny. the gene does not need to be present for each species in the species tree. moreover, gene duplications after the last speciation event in some part of the subtree are allowed, as in fig.  <dig>  panel i. here, a gene from a single species c <dig> duplicated. simplification into a single node is possible if the classification of the gene names in the subtree is consistent. obviously, such a simplification cannot contradict the species tree. fig.  <dig>  panel ii covers the standard case where a single gene found in species c <dig>  c <dig> and c <dig> evolved according to the species phylogeny ,c3). this case may be considered to be different from the case where a gene has duplicated, but the first copy still exists in species c <dig> and c <dig>  and is lost in species c <dig>  whereas the second copy is lost in c <dig> and c <dig>  and still exists in c <dig>  however, as long as the classification is consistent, both cases cannot be distinguished. therefore, in both cases, we will simplify the subtree to a single node, assuming that the gene evolved according to species phylogeny.

let a species tree of all species be given. we will simplify the gene tree step-by-step, beginning at the single-species leaves. we will replace bifurcations of single-species leaves by single leaves, if the classification is consistent. a new leaf is labeled by the cenancestor and the consistent classification of the bifurcation it replaces. if a new leaf involves more than a single species, we call it a group-of-species leaf . we will also replace bifurcations involving group leaves if they do not contradict the monophyletic groupings given by the species tree, nor the classification.

in general terms, traversing the gene tree towards the root, only monophyletic bifurcations are replaced. a bifurcation is monophyletic if its two outgoing edges are either i) leading to two single-species leaves classified consistently, or ii) leading to two leaves classified consistently and labeled by two cenancestors that are in distinct subtrees of the species tree. if the two cenancestors are in distinct subtrees of the species tree, species phylogeny is followed. if the two cenancestors are in the same subtree of the species tree, a duplication must be assumed to match the gene phylogeny with the species phylogeny. an example involving abc proteins is mentioned below, abc example part .

as described, the label of a new leaf consists of the cenancestor of the two leaves deleted, and their consistent classification, that is the more detailed one of the two classifications of the leaves deleted.  repeated replacement of monophyletic bifurcations in a post-order traversal  of the gene tree implies that a whole subtree, where a gene follows species phylogeny, can be summarized into a single leaf. post-order traversal ensures that no bifurcation is considered for replacement before its underlying bifurcations have been processed, see fig.  <dig> 

rule  <dig>  paraphyletic compression 
the goal of paraphyletic compression is to allow a further limited amount of simplification in some parts of the gene tree even if species phylogeny is not followed. an outgoing edge e of a bifurcation α, leading to a bifurcation β, is paraphyletically redundant if the other outgoing edge f of α leads to a leaf with exactly the same label as one of the outgoing edges g and h of β. the other outgoing edge of β may lead to a node with a different label . in systematics, a paraphylum is defined as an incomplete monophylum, represented by the remainder of a subtree of the species tree caused by ignoring a subsubtree. in our case, f and g correspond to a paraphylum, and h corresponds to the ignored subsubtree. however, only redundant paraphyla are considered for simplification, limiting simplification to those cases where f and g lead to leaves with the same label, and replacing the paraphyletically redundant edge e, together with edges f and g, by f. .)

both theoretical and empirical considerations support the deletion of a limited amount of paraphyly to simplify a gene tree. on one hand, such paraphyly is often caused by well-known branch attraction artifacts in phylogenetic reconstruction, in at least two ways. first, g and h may be long edges that got attracted  <cit> . second, g and h may be short edges that got attracted, held together by ancestral character states . in any case, the correct grouping features a bifurcation joining f and g. on the other hand, we made the empirical observation that large gene trees feature many cases of series of "orphan" genes splitting off one by one at the root of a subtree. however, according to our background knowledge, they should have been included together in one subsubtree at the root of that subtree.

rule  <dig>  treating species as equivalent
treesimplifier finally supports tree simplification by leaf re-labeling. for example, the user may unify all yeast species by giving them a single label "yeast". replacing the different yeast species designations in the gene tree by a single common one, and truncating the species tree so that the new designation becomes a leaf, all bifurcations leading to two leaves labeled "yeast" can be compressed by monophyletic compression. in other words, all yeast species are now treated as equivalent, and subtrees consisting of these yield a single leaf if the genes are classified consistently. 

abc protein example
the abc gene/protein family  <cit>  serves as an example for the method presented in this study.

 a typical hugo gene name is abca <dig>  here, "abc" is the stem symbol of the abc gene family. in table  <dig>  gene abca <dig> belongs to the abca subfamily and it makes up the single-member abca <dig> subsubfamily. the mouse abca8b together with abca8a  is forming the proper subsubfamily abca <dig>  the f02e <dig>  gene of c. elegans is an unclassified abc protein without any further information.

 in case of abca <dig>  deleting the stem symbol leaves 'a6'. 'a' is taken as the subfamily letter. the number  that follows is taken as the subsubfamily number. an example for a gene with missing gene classification is the f02e <dig>  gene of c. elegans, for which even the stem symbol is missing. an example for a gene with an incomplete gene classification is a d. melanogaster gene annotated as abcc.

 an example of an abc subtree that has a mix of genes with hugo names and genes with missing or incomplete classification is shown in fig.  <dig>  panel iv. here, the longest gene classification is abcc <dig>  and the other gene names are all prefixes of this classification. the classification of the fugu and anopheles genes is missing. therefore, the subtree is consistently classified and the other genes can all be considered to be abcc <dig> genes, and compression can be carried out under this assumption. in contrast, neither abca and abcc nor abcc <dig> and abcc <dig> would feature a consistent classification. as another example, if abca8b is the longest classification in a subtree, a consistent classification allows only abc, abca, abca <dig> as well as abca8b as well as any gene name not starting with 'abc'.

 an example of a subtree without a consistent classification is given in fig.  <dig>  panel v. here, the gene abcc <dig> from subsubfamily c <dig> of mouse  is probably misplaced because the subtree to the right features subsubfamilies c <dig>  c <dig> and c <dig> 

 to classify consistently all genes which share the same subsubfamily such as abca <dig>  ignoring the next level, and, therefore, classifying abca8a and abca8b consistently, we instruct the software to truncate the classifications after the subsubfamily level .

 a simple example for an application of monophyletic compression to a subtree of the abc gene tree is shown in fig.  <dig>  panel iii.

 a simple example for an application of paraphyletic compression to a subtree of the abc gene tree is shown in fig.  <dig>  panel ii.

gene tree implementation and visualization
the visualization component of our tool employs the hyperbolic tree implementation hypertree  <cit> . thus, our tree is represented by a double-linked tree structure that interfaces to the hypertree visualization package using java. however, it can be easily modified to interface to any other phylogenetic tree visualization package written in java, such as walrus  <cit> . this may be important for non-academic users in the us, since commercial use of hypertree may be problematic there, cf.  <cit> . the simplification rules are separated from the rest of the software using inheritance from a java abstract class. several generic methods are part of this class; among these is the application of a rule to the tree. to integrate new rules without recompiling the software package, a runtime loader for rules is provided. the application generates output trees in newick format, reversing the operation of the parser and using the fields for the classification, the species name and the discriminator to generate the leaf labels.

graphical user interface
using the awt and swing frameworks , a graphical user interface was developed, including a „simplification rules" menu that dynamically lists all the rules available, giving the user the ability to apply them to the current tree in a specified order, and to add new ones. a text field lists the number of leaves in the current tree. it is possible to switch back and forth between the original and the simplified tree, and to search for certain labels in both trees. nodes containing matching labels are centered. a screenshot is given by fig.  <dig> 

RESULTS
we report use of the treesimplifier for the compression of a tree of abc proteins  <cit>   and a tree of pou transcription factors  <cit>  . the resulting simplified gene trees are 65% and 47% smaller, respectively. they are much easier to comprehend, even though their essential information content is preserved.

application to an abc gene tree
the treesimplifier application was at first developed to perform simplifications of gene trees generated by automated pipelines such as the ripe  analysis pipeline  <cit> ,  <cit> . ripe performs an evolutionary analysis of a protein family, e.g. the abc proteins of  <dig> model organisms. generally speaking, abc  proteins are a family of proteins that transport substances across membranes, powered by atp  hydrolysis. most eukaryote abc proteins can be classified into a number of subfamilies , which can be further divided into subsubfamilies. most subsubfamilies consist of a single member. functional abc proteins  consist of two similar atp-binding cassettes , and two less similar transmembrane regions , in the order atατ, or in reverse order taτα. the two fragments are also called "halves" and they are due to an internal tandem repeat of the two domains. a detailed discussion of how the tandem repeat structure affects tree simplification is given in the appendix .

comparison of a manually compressed tree with an automatically compressed tree
first, the output of treesimplifier was compared to a manual compression of a large gene tree of abc proteins generated from  <dig> model organism proteomes by ripe  <cit> , and differences between both simplified trees were investigated. towards this aim, we took the full tree, the cartoon tree and the species tree published by  <cit> . simplification rules for the cartoon tree were published together with the tree, and they are summarized in the appendix . in fact, formalization of these rules yields the three rules described in the "implementation" section, that are monophyletic compression , paraphyletic compression  and treating species as equivalent. in the abc example, the species treated as equivalent are the two yeast, plant  species, respectively, and the abc classification hierarchy is ignored after the subsubfamily level.  overall, a tree of  <dig>  leaves is compressed to a tree of  <dig> leaves, in  <dig> milliseconds on an intel pentium  <dig> .

compression is detailed for five subtrees in figs.  <dig> to  <dig>  treesimplifier provided almost the same simplification result as the manual analysis. the manually compressed tree was occasionally further simplified, in a way that made sense from the biological point of view, but which violated the formal simplification rules . in one case, the order in which the rules are applied turned out to be important . moreover, manual compression corrects erroneous input data very easily while an algorithm cannot do so . in turn, human processing introduces some errors . in some cases, creative application of rules was made in the manual compression . we were able to explain all remaining differences between the automatic and the manual simplification in one of the five ways just described . thus, automation by treesimplifier saves many hours of manual work and it yields a result of comparative quality.

pou transcription factor tree
a further example of a gene tree simplification, using pou transcription factors  <cit> , is given in the supplementary material .

information loss by simplification
the qualitative nature of the information loss is different for each of the three rules we introduced. using the first rule , a group leaf is created and labeled with the designation of the group of species to which the proteins did belong, and the information is lost on "which species exactly" were represented. using the second rule , we instead ignore some of the information about the structure  of the gene tree. the effect of the third rule  combines both losses of information; tree topology as well as species distribution are glossed over as long as the species are in the set defined as equivalent by the user.

future work
future work includes consideration of bootstrap confidence values and branchlengths, a command-line interface, export of vector graphics, coloring of labels  and a generic user-friendly rule editor.

CONCLUSIONS
an automatic simplification tool for gene trees was described that is fast, effective, and less prone to errors than manual simplification. given the huge amount of data generated by genome sequencing efforts, our tool should be valuable as an automatic aid for phylogenetic studies of protein families.

availability and requirements
• project name: treesimplifier

• project home page:



• operating system: platform independent

• programming language: java

• other requirements: java  <dig> . <dig> or higher

• license: gnu gpl/mit license 

• any restrictions to use by non-academics: none; a patent on hyperbolic tree visualization  is believed to be invalid, but may nevertheless pose a problem to commercial users in the us .

abbreviations
• abc, atp-binding cassette

• pou, acronym derived from three mammalian transcription factors, the pituitary-specific pit- <dig>  the octamer-binding proteins oct- <dig> and oct- <dig>  and the neural unc- <dig> from caenorhabditis elegans

• hugo, human genome organisation

• est, expressed sequence tag

• ripe, retrieval-induced phylogeny environment

• ncbi, national center for biotechnology information

authors' contributions
pll, mm and cs wrote the software. mm wrote the website and the documentation. sl contributed parts of the manuscript and was involved in the design of the study. gf conceived the study and wrote the manuscript. all authors read and approved the final manuscript.

appendix  <dig>  abc proteins  <cit> , hugo gene names and internal repeat arrangements
the two fragments, or "halves"  of many human abc transporters are very similar. for a given abc subfamily, they are most similar amongst themselves . they are not most similar for each member of a subsubfamily, nor do they globally cluster together in two big subtrees, one per half  <cit> . therefore, it is assumed that a tandem gene duplication took place at the origin of most full-transporter subfamilies, yielding abc full transporters that consist of two halves. abc gene trees include two fragments per full transporter, and simplification must consider which half we are dealing with. for example, a subtree of abca first halves should not be classified consistently , if a single sequence from the second half is included. in terms of hugo gene names, a hypothetical naming scheme considering gene fragments due to  duplications would include the corresponding classification information at the appropriate level of the family hierarchy, such that abca <dig> would be the subsubfamily of all first halves, and abca1a would be the first half of what is known as abca <dig>  and abca2c would be the second half of what is known as abca <dig>  etc, see table  <dig> 

more generally, we want to deal with cases where a gene sequence consists of subsequences that are repeated such that the gene must be represented by several leaves in the gene tree that each correspond to one of the internal repeats . these need to be analyzed phylogenetically as separate units. however, as we have seen, hugo gene names do not include any information with respect to the duplication history of the main repeat arrangement. while the user may encode her expert knowledge in a set of appropriate names for the gene fragments as in the hypothetical gene names of table  <dig>  our tool offers a workaround for the two most likely cases: either the issue is ignored and gene fragments are classified consistently no matter what their position  is, thus assuming that they should be classified consistently since all duplications arose at the lowest level of the classification. or, gene fragments from different halves are never classified consistently, thus assuming that all duplications arose at a higher level. as described in the "implementation" section, this functionality is implemented by parsing in a "discriminator" string that may be present in leaf labels, and, by default, using this string to establish that whenever it is different, the leaves cannot be classified consistently.

appendix  <dig>  simplification rules for manual gene tree compression
the abc gene tree obtained by ripe was simplified manually by the following set of rules . the automation of these rules is accomplished by treesimplifier.

 <dig>  monophylum compression. subtrees with sequences classified consistently that follow the species phylogeny, or that belong to a single species, were replaced by a single label designating the  species to which they belong.

 <dig>  unclassified sequences mixed with classified ones are assumed to have the same label as the classified ones, and they are ignored except that they contribute their species designation to the labels.

 <dig>  we distinguish anopheles gambiae and drosophila melanogaster as single leaves. but if sequences from both species occur in the same subtree, the annotation is "fly".

 <dig>  we do not distinguish arabidopsis thaliana and oryza sativa proteins. both species are designated as "plant".

 <dig>  we do not distinguish saccharomyces cerevisiae and schizosaccharomyces pombe. both species are designated as "yeast".

paraphylum compression. as long as consecutive edges in a subtree make up a backbone to which subsubtrees are attached that feature sequences classified consistently and that belong to the same species/clade, these edges are deleted and a single subtree that subsumes all subsubtrees is introduced.

supplementary material
additional file 1
supplementary material. pou transcription factor gene tree simplification.

click here for file

 acknowledgements
we thank a. auch, tübingen, for contributing the ncbi tree in newick format.

figures and tables
