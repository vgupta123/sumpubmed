BACKGROUND
genomic prediction using genome-wide single nucleotide polymorphism  has become a powerful approach to capture genetic effects dispersed over the genome for predicting an individual’s genetic potential of a phenotype . genomic estimation of variance components using genome-wide snp markers is a powerful tool for estimating the genetic contribution of the whole-genome to a phenotype and for addressing the missing heritability problem where a large number of causal variants explained only a small fraction of the phenotypic variation. dominance effects of quantitative traits are measured as the deviation of the mean value of the heterozygote genotype of individuals from the averages of the two alternative homozygous genotypes  <cit> . the inclusion of dominance in the prediction model may improve the accuracy of genomic prediction when dominance effects are present . however, currently available software packages for genomic prediction and variance component estimation either are designed for additive effects only , or require users to prepare a dominance-specific file to estimate dominance effects . user-friendliness of the computing tool affects the efficiency of data analysis for genomic prediction and estimation. in order to fill these gaps, we implement two computationally complementary computing strategies with identical results and various definitions of genomic relationships in the gvcblup package that has a wide-range of flexibility and functionality for broad applicability of genomic prediction and estimation of additive and dominance effects.

implementation
gvcblup currently has three main programs and a graphical user interface  named gvceasy that integrates the three main programs with an existing program for graphical viewing of snp effects. the three main programs are greml_ce, greml_qm, and gcorrmx, which are developed using shared memory parallel computing technology. gvceasy supplies users a user-friendly platform to run gvcblup.

two complementary computing strategies
two sets of formulations with complementary computing advantages and identical results based on two equivalent mixed models are implemented: the ce set for large numbers of snp markers and the qm set for large numbers of individuals  <cit> . using notations in  <cit> , the mixed model and its variance-covariance matrix for the ce set of formulations are:
  <dig>    <dig>  

where x = n × c model matrix for fixed non-genetic effects, b = c ×  <dig> column vector of fixed effects, z = n × q model matrix allocating phenotypic observations to snp marker genotypes of individuals, tα = q × m normalized model matrix for gene substitution effects of snp markers, α = m ×  <dig> column vector of gene substitution effects of snp markers, tδ = q × m normalized model matrix for dominance effects of snp markers, δ = m ×  <dig> column vector of dominance effects of snp markers, a = tαα = q ×  <dig> genomic breeding values, d = tδδ = q ×  <dig> genomic dominance deviations, ag = q × q genomic additive relationship matrix = tαtα ', dg = q × q genomic dominance relationship matrix = tδtδ ', and ,  and  are additive, dominance and residual variances, respectively. the mixed model and its variance-covariance matrix for the qm set of formulations are:
  <dig>    <dig>  

where z <dig> = ztα and z <dig> = ztδ. computing difficulty is the v− <dig> and p = v−1 − v−1x−x’v− <dig> for the ce set of equations 1– <dig> and is the inverse of the coefficient matrix of the mixed model equations after absorbing fixed non-genetic effects  for the qm set of equations 3– <dig>  the ce set has the best potential for using large numbers of snp markers because the size of the v− <dig> and p matrices is determined by the number of individuals  and does not change for different numbers of snps. similarly, the qm set has the best potential for using large numbers of individuals because the size of the c− <dig> matrix is determined by the number of snp markers and does not change for different numbers of individuals.

em-reml and ai-reml
two algorithms for restricted maximum likelihood  estimation of variance components are implemented in both greml_ce and greml_qm: em type algorithm  and ai-reml algorithm  <cit> . ai-reml generally is much faster than em-reml but is not as robust as em-reml and may be sensitive to initial values of variance components in the iterations. we require at least two iterations of em-reml and the user may specify a larger number of em-reml iterations to produce better initial values of variance components than the user provided initial values before switching to ai-reml. when ai-reml yields a negative estimate for any of the variance component estimates, the program automatically returns to em-reml, which yields non-negative estimates of variance components. this strategy is designed to guarantee greml_ce and greml_qm estimates of variance components to be positive.

shared memory parallel computing
gvcblup is programmed in c++ language using eigen  <cit>  and intel math kernel libraries   <cit> . eigen is a c++ template library for linear algebra, supports large dense and sparse matrices and supplies easy-to-use coding expression for linear algebra. intel mkl provides blas and lapack linear algebra routines and is optimized for intel processors with multiple cores by using shared memory parallel computing technology, which is used for dense matrix inversion including v− <dig> and c− <dig> as well as dense matrix multiplications involving those two matrices in gvcblup.

calculation and graphical viewing of snp effects and heritabilities
both greml_ce or greml_qm can output additive and dominance marker effects as well as additive and dominance marker heritabilities for every snp. snp additive and dominance effects for greml_ce are calculated at the last greml iteration using the following formulations:
  <dig>    <dig>  

where  = gblup of snp average effects of gene substitution,  = gblup of snp dominance effects, p = v−1 − v−1x−x’v− <dig>  and where v is defined by equation  <dig>  snp effects for greml_qm are obtained directly from the mixed model equations for the qm model . according to the em-reml formulation of additive or dominance variance component  <cit> , we calculate the variance of each snp marker as the marker contribution to the whole-genome snp variance defined by its em-reml formula. let  = additive variance of the ith snp, and  = dominance variance of the ith snp. then, for greml_ce, additive and dominance variances of the ith snp are calculated as:
  

and for greml_qm,
  

where  = additive gblup of the ith snp,  = dominance gblup of the ith snp, r = rank of the coefficient matrix of the mixed model equations, , , , and cαα and cδδ are defined by equation  <dig> in  <cit> . for the ith snp marker, additive heritability or heritability in the narrow sense (), dominance heritability () and the total heritability or heritability in the broad sense () are:
  <dig>    <dig>    <dig>  

where  = phenotypic variance,  = total additive heritability of all snp markers, and  = total dominance heritability of all snp markers. the output file for the snp effects and heritabilities of equations 5- <dig> is designed such that the snp effects and heritability estimates can be directly used as the input file for graphing and graphical viewing by snpevg <dig>  <cit> .

simulated test data
two simulated datasets are supplied in gvcblup package for testing purpose. one data set  has  <dig> genotyped individuals with  <dig> snp markers and the other  has  <dig> genotyped individuals with  <dig> snp markers. the parameter files to run gvcblup programs for the simulated datasets are also included in the package. these simulated data are designed for gvcblup exercises and for showing the complementary advantages of the ce and qm sets of formulations. users interested in gvcblup exercises using large datasets could use a publically available swine dataset with over  <dig>  snp markers on  <dig> individuals  <cit>  that was used for comparing greml estimates by gvcblup with the corresponding reml estimates using pedigree relations  <cit> .

RESULTS
the structure of the gvcblup package with three main programs of greml_ce, greml_qm and gcorrmx is shown in figure  <dig>  and details of each program are described below.figure  <dig> 
structure of the gvcblup package. .



greml_ce and greml_qm programs
the greml_ce and greml_qm programs calculate greml estimates of additive, dominance and residual variances, additive and dominance heritabilities, as well as heritability in the broad sense as the summation of the additive and dominance heritabilities. gblup and reliability of breeding value, dominance deviation and genotypic value  of each individual in the training or validation population are calculated at the end of variance component estimation. greml_ce and greml_qm offer complementary computing advantages with identical greml and gblup results: greml_ce for large numbers of snp markers and greml_qm for large numbers of individuals. assuming one observation per individuals, greml_ce is more efficient than greml_qm if 2 m > q and is less efficient than greml_qm if q > 2 m, where q = number of individuals and m = number of snp markers. the example in table  <dig> shows the complementary computing advantages of greml_ce and greml_qm. both programs produced identical results  and required the same numbers of iterations . for  <dig> individuals and  <dig> snp markers, greml_ce required 5 seconds and greml_qm required 69 seconds, whereas for  <dig> individuals and  <dig> snp markers, greml_ce required 32 seconds and greml_qm required 6 seconds . given q = 2 m, the required memory storage of greml_qm is approximately  <dig>  times larger than greml_ce, but greml_qm is faster than greml_ce due to the fact that greml_ce requires twice as many matrix multiplication between large dense matrices. the shared memory parallel computing of greml_ce and greml_qm achieved excellent scalability on itascasb cluster with two eight-core sandy bridge e5- <dig> processor chips  per node,  <dig> gb memory, and linux operating system . scalability refers to the stability of average performance of a parallel program as the number of processors increases. ideal scalability is achieved when the efficiency of k processor-cores  is ek = sk/k =  <dig>  where sk = the ratio of the execution time with one processor-core to the execution time of the parallel algorithm with k processor-cores  <cit> .table  <dig> 
computing time  using greml_ce and greml_qm for simulated datasets
1


time for snp input, a
g and d
g

1the two programs were run on a personal computer  with intel core i7- <dig>  of  <dig>  ghz and memory of  <dig> gb.
excellent scalability of shared memory parallel computing of greml_ce  and greml_qm .




greml_ce and greml_qm each has three output files for results of greml, gblup, and snp effects and heritabilities, in addition to screen displays . the greml output files contain estimates and standard errors of variance components at each iteration, and the final estimates of variance components, heritabilities and their standard errors. the gblup output file contains gblup of breeding values, dominance deviations, genotypic values, and the corresponding reliabilities for both training and validation populations. these gblup results are calculated using the greml estimates at the last iteration. both greml_ce and greml_qm have a user option to output snp additive and dominance marker effects and heritbilities for every snp. the snp effects and heritabilities can be readily graphed and displayed by snpeveg <dig>  <cit>  including manhattan plots and graphs by chromosome using the original snp gblup values , or the absolute snp gblup values , or snp additive and dominance heritabilities in the scale of percentages , or snp additive and dominance heritabilities in the log <dig> scale . the procedure to generate the manhattan plots and chromosome figures is shown in figure  <dig> figure  <dig> 
graphical viewing of snp additive and dominance effects and heritabilities. a: manhattan plot of the original gblup values of snp additive effects. b: chromosome  <dig> graph of the original gblup values of snp additive and dominance effects. c: manhattan plot of the absolute gblup values of snp additive effects. d: chromosome  <dig> graph of the absolute gblup values of snp additive and dominance effects. e: manhattan plot of snp additive heritabilities in percentage scale. f: chromosome  <dig> graph of snp additive and dominance heritabilities in percentage scale. g: manhattan plot of snp additive heritabilities in log <dig> scale. h: chromosome  <dig> graph of snp additive and dominance heritabilities in log <dig> scale. dominance gblup values were all virtually zero, consistent with the fact that the phenotypic values for fat percentage were pta values of additive effects. the highly significant chromosome  <dig> region is the dgat <dig> region, and the graphs of c-f are similar to those using stratification corrections reported in ma et al.  <cit> . the total additive heritability of snp markers in the 1675278–4606904 mb region of chromosome  <dig> that includes dgat <dig> was  <dig> . although additive heritabilities of other snps were much smaller than those in and near the dgat <dig> region, those additive heritabilities were still considerably larger than dominance heritabilities, which were all virtually zero for all snps.
procedure of using snpevg <dig> to generate graphs and interactive graphical views. this procedure can be summarized as: 1) open snpevg <dig>  2) load the ‘mark_effect.snpe’ file using ‘browse’ tab on the gui of snpevg <dig>  3) click ‘setting’ and check ‘original value’ for y <dig> axis, 4) change ‘original value’ to user defined title for y <dig> axis, 5) click the button pointed by the green arrow to define pixel size and to select color template for the graphs, 6) click ‘run’, 7) view the graph by scrolling up and down in the top right window, 8) save ‘all graphs’ or ‘current graph’. snpevg <dig> is included in the snpevg package that is freely available at: http://animalgene.umn.edu/.



numerical evaluations showed that the ai-reml algorithm for both greml_ce and greml_qm had fast convergence rate, requiring between 12– <dig> iterations to converge with a strict tolerance level of 10− <dig>  compared to 295– <dig> iterations using em-reml . the snp input and the calculation of genomic relationships matrices  required more computing time than per-iteration of the estimation step. greml_ce was able to use  <dig>  individuals with 400 k snp markers with total computing time about 23 hours for  <dig> iterations. for  <dig>  individuals and one million snp markers, greml_ce only required  <dig>  hours. greml_qm was highly efficient for using low-density snp markers, requiring only 2 hours for  <dig>  individuals with 10 k snp markers. for  <dig>  individuals with 50 k snp markers, greml_qm required about 46 hours for  <dig> iterations . although ai-reml was fast, extreme heritability levels  generally would cause failure of ai-reml. for eight of ten replications with null heritability, ai-reml failed, but the variance components still could be estimated with em-reml . ai-reml was successful for all ten replications with heritability of  <dig> .table  <dig> 
capacity and speed of gvcblup for genomic estimation of additive, dominance and residual variances  and itascasb supercomputer


1
time for snp input, ag and dg

1computing time for calculating gblup reliabilities is not included.
comparison of iteration numbers of em-reml and ai-reml  using simulated data with different heritability levels


h
α
2 =  <dig> , h
δ
h
α
2 =  <dig> , h
δ

1ai-reml failed.



in addition to the tests in table  <dig> using the simulation datasets we provide with the gvcblup package, greml_ce and greml_qm programs were extensively evaluated using simulation data under various assumptions, and the greml estimates were compared to the reml estimates of additive heritabilities of five traits using pedigree relationships in a publically available swine dataset of  <dig> pigs with the 60 k snp data  <cit> . greml and gblup generally were able to capture small additive and dominance effects that each accounted for  <dig> - <dig>  of the phenotypic variance and greml was able to differentiate true additive and dominance heritability levels  <cit> . the inclusion of dominance in the prediction model resulted in improved accuracy of genomic prediction  <cit> , and the genomic models with additive and dominance effects were more accurate for the estimation of variance components than their pedigree-based counterparts  <cit> . in a study of trout propensity to migrate, genomic-predicted additive effects completely separated migratory and nonmigratory fish in the wild population with  <dig> % additive heritability and  <dig> % dominance heritability, whereas genomic-predicted dominance effects achieved such complete separation in the dam-blocked population with 0% additive heritability and  <dig> % dominance heritability  <cit> , showing the importance to account for the exact effect type in the prediction model.

gcorrmx program
the gcorrmx program is designed to calculate measures of genomic similarities among individuals. this program currently calculates the ag and dg matrices for six definitions  <cit> . an example of the gcorrmx output files is given in additional file 1: supplementary output files.

gvceasy: graphical user interface  for gvcblup
the three main programs of gvcblup are command line programs. gvceasy is a java program developed as a user-friendly gui with a capability to run gvcblup by mouse clicks, providing considerable convenience for users not familiar with command line operations. gvceasy can lunch any of the three main programs of gvcblup and provides a capability of editing the parameter file for each main program . in addition, snpevg <dig> can be launched from the greml_ce or greml_qm window of gvceasy for graphical viewing of snp additive and dominance effects. to run gvceasy, the programs of gvceasy, greml_ce, greml_qm, gcorrmx and the snpevg package that includes snpevg <dig> need to be placed in the same directory. gvceasy is applicable to windows, linux and mac os x versions of gvcblup.figure  <dig> 
gvceasy graphical user interface  for gvcblup. a: the main control of gvceasy. any of the three main programs may be launched from here and the same program may be opened multiple times. b: the gui for greml_ce with a tab to lunch snpevg <dig> to graph and view snp additive and dominance effects. c: the gui for greml_qm with a tab to lunch snpevg <dig> to graph and view snp additive and dominance effects. d: the gui for gcorrmx.



CONCLUSIONS
the gvcblup package is a powerful and user friendly computing tool for assessing the type and magnitude of genetic effects affecting a phenotype by estimating whole-genome additive and dominance heritabilities of a phenotype using genome-wide snp markers, is a full featured computing tool for genomic prediction of breeding values, dominance deviations and genotypic values for both training and validation data sets, and provides an important computing utility for research and education in the area of genomic prediction and estimation.

availability and requirements
project name: gvcblup

project home page:http://animalgene.umn.edu/

operating system: windows, linux and mac os x

programming language: c++, java

license: none

electronic supplementary material
additional file 1:
supplementary output files.


 abbreviations
snpsingle nucleotide polymorphism

blupbest unbiased linear prediction

gblupgenomic blup

remlrestricted maximum likelihood estimation

gremlgenomic reml

emexpectation-maximization

ai-remlaverage information reml

guigraphical user interface

mmemixed model equations.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

cw is the author of versions  <dig> - <dig>  and  <dig> - <dig>  using shared memory parallel computing, and initiated and implemented the ai-reml algorithm. hbr initiated the use of the mkl libraries, and dp and hbr implemented the linux versions  <dig>  and  <dig>  using mkl. dp performed the testing of the mac os x version of gvcblup  <dig> . sw is the author of version  <dig>  of gvcblup using serial computing, and cw and sw conducted simulation studies to evaluate gvcblup. sp is the author of gvceasy  <dig>  and  <dig> . cw and dp are the authors of gvceasy  <dig> . yd is the project leader and the lead writer of the manuscript. all authors read and approved the final manuscript.

