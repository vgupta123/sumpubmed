BACKGROUND
identification of orthologs constitutes the basis for comparative analysis of multiple genomes. it provides not only a foundation for inferring the evolutionary history of genes and genomes but also an important clue for inferring protein functions  <cit> . originally, orthologs were defined as a pair of genes diverged from the same ancestral gene by speciation, whereas paralogs are a pair of genes diverged by gene duplication  <cit> . because the functions of orthologs are typically more conserved than those of paralogs, orthology relationships are often used to transfer functional annotations between organisms  <cit> . the concept of orthology has been extended from pairs of organisms to multiple organisms by clustering orthologs into ortholog groups  <cit> . ortholog groups are a vital resource for comparative analysis of multiple genomes and provide a basis for phylogenetic profile  analysis  <cit> .

owing to rapid progress in sequencing technologies, an increasing number of genomes have been sequenced. in particular, accumulation of microbial genome data is remarkable  <cit> ; several thousand genomes across diverse taxa have already been sequenced, and even more data have been generated as metagenomes from various environmental samples. a reliable method for identifying ortholog groups among multiple genomes is needed for comparative analysis of this huge amount of microbial data. in prokaryotes, the prevalence of horizontal gene transfers  makes accurate ortholog inference infeasible  <cit> . therefore, a relaxed condition, i.e., closest homologs in different species regardless of hgts, is usually used as an alternative definition of orthology for prokaryotic genome comparison  <cit> .

several previous studies have developed orthology inference algorithms and ortholog databases  <cit> . one of the most basic algorithms to identify orthologs is the bidirectional best hit  approach for a pair of species  <cit> . the bbh approach was extended to deal with multiple species by applying clustering methods to the graph of bbh relationships; this approach for creating ortholog groups is known as a graph-based method  <cit> . the clusters of orthologous groups  database is a pioneering study of graph-based methods and is still one of the most popular ortholog databases, although it is no longer updated  <cit> . the eggnog database was later constructed by extending cogs incrementally using a computational method  <cit> . another approach for creating ortholog groups is based on the phylogenetic tree of genes and is called a tree-based method. such a method produces more reliable results than graph-based methods but at the expense of higher computational costs  <cit> . the domclust algorithm  <cit> , which is used to create ortholog groups in the microbial genome database for comparative analysis   <cit> , adopts an intermediate approach, where ortholog groups are identified on the basis of hierarchical clustering trees created from a graph of all-against-all pairwise similarity relationships.

among numerous methods proposed to create ortholog groups, only a few methods consider orthology relationships at the sub-gene level. figure 1a is a schematic illustration of ortholog clustering at the domain level, where fusion proteins comprising originally distinct proteins are included. with a simple clustering method that does not consider sub-gene level classification, a fused protein will be assigned to exclusively one of the clusters . however, considering that each domain in the fused protein can have a distinct function that is shared among the corresponding orthologs, a natural method of grouping them is to split the fused proteins into domains and treat them separately . such a clustering procedure, called domain-level ortholog clustering, is a challenging problem because not only the cluster members but also the set of fusion proteins and domain boundaries within them must be identified. some methods such as hops  <cit>  use information of known domains such as those included in the pfam database to identify domains and then identify orthologs within each domain. however, such approaches are unsuitable for comprehensive ortholog classification of the entire set of proteins because of their dependency on the existing domain database.

the orthologous domains considered here are orthologous gene subsequences that have been stable  during evolution after speciation from a common ancestor. to clarify the difference between orthologous domains and conventional homologous domains, let us consider the following evolutionary scenarios . in figure 1b, a gene fusion event occurred after speciation. in this case, the fused gene is split into two subsequences in the orthologous domain classification. in figure 1c, a gene fusion event occurred before speciation. in this case, full-length fused genes are classified in the orthologous domain group because the fused form is stable after speciation. in either scenario, there are two homologous domain groups: one is the blue domain and the other includes both the red and pink domains that are paralogous to each other. these examples illustrate that orthologous domains can be longer than homologous domains if domain reorganization occurs before speciation.

note that the full length of a gene can be an orthologous domain. if the domain-reorganization event after speciation is either gene fusion or gene fission, the orthologous domain should correspond to the full length of a gene in at least one of the species . thus, the orthologous domain defined here is a suitable unit for functional annotation in comparative genomics, with gene fusion/fission events taken into consideration and seems well consistent with manually curated ortholog databases such as cogs, although there are no clear-cut criteria for splitting genes into subsequences in the cog construction procedure  <cit> . domclust automatically detects a domain-reorganization event and splits a cluster into orthologous domains during the process of hierarchical clustering  <cit> .

in practical applications, the determination of orthologous domains becomes more complicated because of several factors, including insertions/deletions of promiscuous domains and random disruption of coding sequences due to loss of function. these factors fragment orthologous domains into smaller pieces than expected as a unit of functional annotation. to avoid this over-splitting problem, the domclust algorithm tries to split genes into the minimum number of domains required for ortholog clustering, i.e., a gene is split only when a different set of genes is putatively orthologous to each split segment with sufficiently large scores  <cit> . moreover, domclust merges two adjacent domains in its final step when genes in the fission form are much fewer than those in the fusion form  <cit> . however, such approaches do not always work well. figure 1d illustrates a simple but typical example, where domain boundaries determined by domclust are inconsistent in a multiple sequence alignment. such inconsistent alignment boundaries are problematic because they not only cause incorrect sequence grouping but also lead to failure of the above mechanisms of domclust to avoid over-splitting. this problem arises presumably because domclust determines the boundaries using pairwise, rather than multiple, sequence alignments. thus, utilizing multiple alignment information supposedly improves the accuracy of domain-level ortholog clustering .

in this study, we present a method for improving domain-level ortholog classification using multiple alignment information. we designed a scoring scheme to evaluate the inferred domain organization on the basis of multiple alignments and developed procedures to improve the inference by optimizing the score. the improvement procedures included the merge of adjacent domains to fix the over-splitting problem and determination of optimal domain boundaries. in addition, a phylogenetic tree was created for each cluster to check the cluster members in terms of orthology relation. to evaluate the improvements, we compared the obtained ortholog groups with the original ones by examining the agreement with cog and tigrfams, which are the manually curated reference databases.

RESULTS
overview of the method to improve domain-level ortholog clustering
in this study, we assumed domclust results as the input to our method, although any other domain-level clustering could have been applied. as illustrated in figure 1a, a split of a protein sequence during domain-level ortholog clustering leads to the creation of adjacent domains that belong to different clusters . pairs of adjacent clusters were the targets of our refinement procedure. for each pair of adjacent clusters in the input, a multiple alignment of protein sequences contained in either cluster was created and used in our refinement procedure. a domain-specific sum-of-pairs  score was introduced to evaluate the domain organization. the dsp score is based on the sum-of-pairs  score  <cit> . however, it is calculated for each domain and inconsistencies in domain boundaries are evaluated as gaps so that the sum of the dsp scores in the alignments of adjacent clusters reflects the quality of domain classification. we defined five basic operations to modify and improve the domain organization by maximizing the dsp score and compiled them as a pipeline named domrefine . the first two procedures in the pipeline  were designed to solve the over-splitting problem; merge determined whether two adjacent clusters should be merged, whereas merge_divide_tree temporarily merged the adjacent clusters and then divided them into two groups . the next two procedures  determined the optimized boundaries between the domains: the move_boundary procedure moved existing domain boundaries, whereas the create_boundary procedure introduced new boundaries. all the four procedures improved the domain organization on the basis of the maximization of the dsp score. in contrast, the last procedure  is a type of conventional tree-based approach for ortholog classification; it divided a cluster into subgroups along with the phylogenetic tree if the subgroups shared intraspecies paralogs.

figure  <dig> illustrates the examples of improved domain organization obtained by domrefine. in the original classification by domclust , several proteins are split into domains, but the splitting pattern is inconsistent in the multiple alignment. in this case, canceling those splits to merge two clusters seemed to produce better classification. indeed, the merge procedure merged these clusters because of the increase in the dsp score after merge, which resulted from the gain of the sp score between the newly aligned residues in the merged alignment and the disappearance of gaps owing to inconsistent domain boundaries. figure 3b illustrates another example where the inconsistent domain boundaries were modified to lie at more appropriate positions. as a reference, the regions determined by the tigrfams models are also illustrated. in the original classification, some proteins are split into domains, but the resulting domain boundaries did not coincide with the region detected by tigrfams models. in addition, two proteins that also matched the same tigrfams model are not split in the original classification. the move_boundary procedure moved all the existing boundaries at the same time in the multiple alignment to the best position on the basis of the dsp score. the subsequent create_boundary procedure created new boundaries, and the creation of these boundaries increased the dsp score. as a result of these procedures, we obtained domain boundaries that perfectly matched the region detected by tigrfams models .

overview of the results of domain-level ortholog clustering
our method was tested on proteome sets retrieved from the cog and mbgd databases. the protein sequences from the cog <dig> dataset  were clustered into ortholog groups by our method, and the results were compared with the manually curated cog clusters for evaluation. to test the utility of our method in a more practical situation, we also constructed a larger dataset  by selecting a representative organism from each taxonomic family of the mbgd database. for each of the cog <dig> and family datasets, we first applied domclust to classify genes into ortholog groups and then applied the domrefine pipeline to improve the classification. for the family dataset, we compared our results with eggnog, which was constructed by computationally extending cog. in the comparison with eggnog, we extracted the common proteome between family and eggnog .

table  <dig> summarizes the statistics of the ortholog clustering results. although domrefine had limited effects on the total number of clusters , it caused significant changes in the number of split clusters. for the cog <dig> dataset, the number of split clusters produced by domclust alone was higher than that in the original cog, reflecting the over-splitting problem of domclust. after domrefine was applied, however, the number of split clusters decreased drastically  to approximately the same number as cog. this result was in line with expectations, given that domrefine was designed to fix over-splitting problems. similarly, in the family <dig> dataset, the number of split clusters was decreased from  <dig> to  <dig> . in contrast, the number of split clusters in eggnog was remarkably small  compared with the number in cog, domclust, and domrefine . in particular, the number of split clusters in eggnog is considerably lower than that in cog, on which it is based, presumably because of the lack of a procedure for splitting clusters into domains when creating new clusters not included in cog, i.e., non-supervised orthologous groups  during the construction of eggnog.

n


clust

n


clust



split

n


clust

n


clust



split

n
clust
 denotes the total number of clusters. n
clust

split
 denotes the number of clusters that include proteins split into domains. the ratio of split clusters to the total number of clusters is shown in parenthesis.

for more detail, we also examined the distribution of the cluster size  . in general, the distributions of the cluster size show a near-linear relationship on a log–log plot, indicating that cluster sizes approximately follow a power-law distribution. for the cog <dig> dataset, the distributions of cog and domclust show similar trends: the distributions deviate downward from the linear relationship at cluster sizes lower than  <dig>  as observed previously  <cit> . this is because they retain only ortholog groups that have more than three members from  different species . however, this trend is considerably prominent in cog than in domclust, probably reflecting the feature of the cog classification that ortholog groups often contain small paralog groups that should be separated according to a rigorous definition of orthology.

for the family dataset, the domclust distribution follows a linear relationship in the log–log plot , whereas the eggnog distribution deviates from a linear relationship . when the eggnog clusters are separated into cog-derived clusters and nog, their distributions are substantially different . the cog-derived cluster exhibits a curved distribution, deviating downward from the linear relationship at cluster sizes lower than  <dig>  the nog distribution has a steeper negative slope than domclust  and deviates downward at cluster sizes greater than  <dig>  in summary, domclust, a fully automated clustering method, exhibited a power-law distribution in cluster size, whereas eggnog, a combined approach of manual and automated methods, produced two different types of clusters and thus exhibited a relatively skewed size distribution.

assessment of the refinement procedures through the cog reconstruction test
to assess our refinement method, we examined whether our fully automated procedures could recover the manually curated cog database . to quantify the agreement of the clustering results between two methods  at the domain level, we first identified corresponding clusters as cluster pairs sharing at least one overlapping domain of the same protein and then extracted only those cluster pairs that had one-to-one correspondence . the number of one-to-one corresponding cluster pairs against cog  was then used as an indication for the agreement between two clustering results. figure  <dig> presents the changes in n
cog

1to1
 during the domrefine procedures. we observed an increase in the agreement with cog during the merge and merge_divide_tree procedures . these procedures exhibited greater changes than the subsequent procedures to modify boundaries . this is probably because increasing one-to-one relationships by moving a boundary requires exact matches of boundary positions; thus, nccog1to <dig> is not a sensitive measure for capturing a moderate improvement in boundary positions. on the other hand, the consistency with cogs was decreased in the last procedure, divide_tree, which divides a cluster into subgroups to separate paralogs rather than modifying the domain organization. however, this result does not necessarily mean that divide_tree failed to improve ortholog classification, considering that a cog cluster often includes obvious outparalogs as members, resulting in a larger cluster than that produced by more rigorous ortholog grouping .

next, we examined the contribution of the dsp score to the refinement in the merge procedure. to quantify moderate agreement between two clustering results, we calculated the mean overlap ratio of corresponding domains . for each pair of adjacent clusters, we calculated the changes in the dsp score and the changes in r¯over after the merge for  <dig> pairs of adjacent clusters and examined the correlation between them . we observed a positive correlation between them . this observation supports an assumption that the dsp score is able to quantify the quality of domain-level ortholog classification in terms of consistency using the cog database as a reference. we drew a lowess curve to reveal the details of the relationship between the score changes and r¯over changes. when the score changes were positive, r¯over changes were mostly positive . thus, we could safely merge clusters if the resulting score change was positive. in contrast, when the score changes were negative, r¯over changes varied, spanning positive  and negative , meaning that some cluster pairs that should be merged may show negative score changes after the merge. in fact, the lowess curve demonstrated that when the score changes were small negative values, r¯over changes were slightly positive on average , suggesting that the threshold of the dsp score change for merging adjacent clusters should be a negative value rather than zero. this was desirable for avoiding the over-splitting problem because in this case, a domain split was introduced only when the splitting caused a sufficient score gain. on the basis of figure  <dig>  we used − <dig>  as the threshold for the dsp score change to decide merges.

practical application of the refinement procedures
to demonstrate the utility of our method in a more practical situation, we applied the method to the family dataset that covers the diversity of currently sequenced microbial genomes, in addition to the cog <dig> dataset. we here used the tigrfams database instead of the cog database to evaluate the clustering result. tigrfams is a database containing the profile hidden markov models  constructed from manually curated multiple alignments of functionally equivalent protein families   <cit>  with “trusted cutoff” information for searching sequences with hmm using the hmmer program  <cit> . thus, tigrfams can be used to classify any set of protein sequences using the hmmer program. in addition, equivalogs defined in tigrfams are a suitable reference classification for evaluating our ortholog classification, in that the main aim of the ortholog classification is to infer gene functions.

we applied our method  to the cog <dig> and family datasets to classify genes and evaluated the resulting clusters using the tigrfams database as a reference. as in the previous section, we considered the number of one-to-one corresponding cluster pairs against tigrfams  as a measure of consistency between two classifications. we examined the changes in n
tigr

1to1
 during the domrefine procedure  and again observed gradual increases during the domrefine procedures in both the cog <dig> and the family <dig> datasets. in total, n
tigr

1to1
 was increased from  <dig> to  <dig> for the cog <dig> dataset and from  <dig> to  <dig> for the family <dig> dataset .

n


tigr



1to1

n


tigr



1to1

the ratio of n
tigr

1to1
 to cog or eggnog is shown in parenthesis. *number of tigrfams models with hits in the corresponding dataset, which is the possible maximum number of n
tigr

1to1
.

however, some differences were observed between the results of this test  and that of the previous test , where the same cog <dig> dataset was used as a classification target, but cog instead of tigrfams was used as the reference database. in particular, n
tigr

1to1
 was increased by the divide_tree procedure , whereas n
cog

1to1
 was decreased in the previous test . in addition, n
tigr

1to1
 was less increased in the merge and merge_divide_tree steps, but more increased in the move_boundary step. changes in the number of one-to-one ortholog relationships, illustrated in figure  <dig>  were analyzed in more detail by decomposing the change into gains and losses of one-to-one relationships . although occasionally a one-to-one relationship can be lost during the procedure, the gain of new relations significantly  exceeds the losses in total and in most steps that have sufficient numbers of modifications .

to compare the classification performance, we also evaluated the cog and eggnog classifications in terms of the agreement with the tigrfams models . for the cog <dig> dataset, n
tigr

1to1
 of the original cog classification was  <dig>  whereas for the family <dig> dataset, n
tigr

1to1
 of the eggnog classification was  <dig> . both these values were even lower than those of the domclust classification before refinement . thus, our domclust/domrefine classifications showed better agreement than the cog/eggnog classifications when evaluated on the basis of the agreement with the tigrfams classification.

to examine the inclusion relationships between corresponding ortholog groups in different ortholog classification systems, including domclust/domrefine, cog/eggnog, and tigrfams groups, we considered three additional concepts, equivalent, supergroup and subgroup that were introduced in our previous work  <cit>  . the inclusion relationships among them tend to be cog > domclust/domrefine > tigrfams > nog, where a > b indicates that clusters in a tend to be supergroups of clusters in b. note that a tigrfams group can be a subgroup of a real orthologous group because of a strict trusted cutoff value, but the evaluation measure n
tigr

1to1
 is effective even in such a case, provided that there is a one-to-one relationship between the tigrfams group and the corresponding target group.

examples of the resulting ortholog clusters
on the basis of the resulting number of clusters for family <dig> , the domrefine result included a larger number of split clusters than eggnog . we here focused on the genes split in the domrefine result but not in eggnog. figure 8a presents an example of the clusters containing such genes, where two adjacent clusters corresponded to tigrfams domains tigr <dig> and tigr <dig>  respectively, both of which were functionally uncharacterized protein families. although domclust split a fused gene, nam:namh_ <dig> , into two domains, it failed to split another plausible fused gene, ftu:ftt_ <dig>  . however, domrefine corrected the classification . when the members of the clusters were compared to eggnog, they overlapped three nog clusters: nog <dig> , nog <dig> , and nog <dig> , where n indicates the cluster sizes in the family <dig> dataset. eggnog did not split the two plausible fused genes, ftu:ftt_ <dig> and nam:nam_0533; it assigned ftu:ftt_ <dig> to nog <dig> and nam:namh_ <dig> to nog <dig>  as a result, proteins with the same tigrfams hits were separated into different clusters. in contrast, nog <dig> was the largest eggnog cluster containing proteins with many different tigrfams hits , indicating that it is too large in terms of grouping corresponding genes among organisms.

figure 8b presents another example, where the proteins had hits to tigr <dig> . here genes of family <dig> were extracted to demonstrate the subset of the alignment . of  <dig> proteins,  <dig> had two domains both of which correspond to tigr <dig>  whereas in several species, these domains are coded as two separate genes. some other species, such as methanocaldococcus jannaschii, contain only one gene consisting of one domain . it is known that the two tandemly repeated domains, n-terminal repeat  and c-terminal repeat , have distinct functional roles and were suggested to have arisen by gene duplication and subfunctionalization  <cit> . thus, it is reasonable to cluster these homologous domains into two distinct ortholog groups. when we created a phylogenetic tree using both the domains, we discovered distinct clusters corresponding to nr and cr. domclust successfully clustered these domains except for two genes , but domrefine failed to refine these, in that the boundary modification reduced the agreement with tigrfams hits . one reason for this failure could be that the presence of tandemly repeated domains confounded the alignment, and domrefine based on an incorrect alignment may fail to refine the domain boundary. in fact, in this case, single-domain proteins of nitrosopumilus maritimus, nmr:nmar_ <dig> and nmr:nmar_ <dig>  which were assigned to the nr and cr clusters, respectively, were both located in the c-terminal half in the alignment. another problem affecting the alignment was the presence of unconserved sequences in the n-terminal regions of eukaryotic genes, such as cdu:cd36_ <dig> . in domain inferences of domclust and domrefine, these regions are treated as c-terminal groups . influenced by such an unconserved region, regions such as nmr:nmar_ <dig> are prevented from being aligned to the n-terminal region and are consequently aligned to the c-terminal region.

discussion
in this study, we developed a method, domrefine, to improve domain-level ortholog classification and applied the method to refine the ortholog classification created by our previous program, domclust, using the proteome sets extracted from the cog and mbgd databases. we demonstrated that our method was able to achieve improvements when we evaluated the results on the basis of cog and tigrfams, which are the manually curated reference databases. although cog and tigrfams clusters have different characteristics , domclust clusters became more consistent with both cog and tigrfams after the merge procedure of domrefine , suggesting that the over-splitting problem in orthologous domains mentioned in the background section were alleviated.

the tigrfams database consists of hmms constructed from curated multiple sequence alignments and is designed mainly for detecting functionally equivalent homologous proteins  among prokaryotic genomes  <cit> . therefore, validating the obtained orthologous domains by tigrfams models is reasonable in that the main aim of the ortholog database among prokaryotic genomes is to infer protein functions. in addition to the tigrfams database, we used the cog database, a manually curated ortholog database for microbial genomes, as the reference database. however, when the same classification results of the cog <dig> dataset were evaluated using the different reference databases, cog and tigrfams, we discovered different tendencies between them . in particular, the agreement with cog decreased after the divide_tree procedure , whereas that with tigrfams increased . this difference is probably caused by the known cog problem that a substantial fraction of cog groups contain non-orthologous  genes  <cit> ; thus, division of groups using the divide_tree procedure such that paralogous genes are appropriately separated can reduce the consistency with the cog classification. another difference is that the move_boundary procedure improved domain boundaries in terms of their correspondence with tigrfams , whereas it failed to improve them in terms of their correspondence with cog . this was observed because tigrfams is constructed from the hmms of well-conserved and well-characterized protein families, whereas cog was originally constructed from a clustering result based on all-against-all similarities. consequently, the move_boundary procedure modified the domain boundaries to improve the coverage of well-conserved domain boundaries defined in tigrfams, but may not have improved the correspondence with cog boundaries. in either case, we consider tigrfams as a better reference dataset than cog to evaluate orthologous domain classification.

the goal of this study was to construct a fully automated and reliable procedure to create ortholog database, a necessary resource in the era of huge amounts of genomic data. in this respect, the eggnog database, which was constructed by computational extension of cog, is another ortholog database that covers the currently sequenced genomes and is periodically updated. however, eggnog consists of two different types of ortholog groups, i.e., the extension of the original cogs and the remaining nogs, because of the nature of its incremental updating procedure. cog-derived clusters tend to be larger, whereas the nog clusters tend to be smaller . as a result of the mixture of the two different distributions, the cluster size distribution of eggnog appears to be deviated from the power-law distribution, which has been observed in various types of protein clusters  <cit>  .

to compare the classification performance, we also evaluated the cog and eggnog clusters in terms of the agreement with the tigrfams models  and discovered that our method showed better agreement than the cog/eggnog classifications . the original domclust classification already showed better agreement than the cog classification partly because of the abovementioned problem that some cog groups contain non-orthologous genes. in the eggnog classification, additional problems caused by its incremental updating procedure can magnify the difference. in fact, the increasing rate of n
tigr

1to1
 from the eggnog classification to the domclust classification using the family <dig> dataset  was higher than that from the cog classification to the domclust classification  . the increasing rates were further increased when the cog/eggnog classifications were compared to the classifications after refinement .

one of the problems with incremental updating in the eggnog classification is that a new domain split appears to be rarely introduced during the nog classification in contrast to the original cog classification . our domclust/domrefine procedure identified a substantial number of clusters that are not defined in cog, where domain splitting was needed for valid ortholog classification, as in the examples illustrated in figure 8a. as illustrated in figure 1a, a clustering method without domain splitting generally tends to create clusters with smaller sizes than that with domain splitting when fused proteins are included in the dataset. this may partly explain the smaller size distribution of the nog clusters observed in figure 4b.

although numerous methods have been developed for identifying orthologs, few methods have focused on classification at the sub-gene level. our method splits proteins into domains in the course of clustering with the aim of detecting the correct grouping of proteins . the resulting splits of proteins suggest domain fusion/fission events in evolutionary history, which may result in functional divergence among orthologous proteins. in this sense, domain-level ortholog classification provides a valuable source for evolutionary analysis.

theoretically, our system is applicable to eukaryotic protein classification. however, given the abundance of complex multidomain architectures among eukaryotic proteins and the frequent differences in domain composition among apparent orthologs  <cit> , domain-level clustering of eukaryotic proteomes is more challenging than prokaryotic proteomes. in particular, as described in the results section, a tandem repeat of homologous domains within a protein, which is quite common in eukaryotic proteins, may confound the multiple alignment, possibly leading to a failure of domrefine to refine domain boundaries. as far as we tested, handling of tandemly duplicated domains seems to be more or less a common problem in existing alignment programs, although clustal omega used in this study demonstrated a relatively better performance with respect to this point. thus, a special procedure may be required to handle such tandem repeats correctly as a pre- or postprocessing step of an alignment program unless improved versions of the alignment programs are available.

although the current domrefine pipeline requires much larger computational time than that required by domclust, the parallelization technique enables the execution of the pipeline in a feasible time . of the required time, the calculation of the dsp score comprises only a small fraction, and most of the computational time is spent performing multiple alignments. this bottleneck is caused by the repeated calculation of multiple alignments for the same set of sequences and could be partly solved by reusing the multiple alignment information. it is notable that the obtained multiple alignment information will be a useful resource not only for the domrefine pipeline but also for various other applications. therefore, it is worth computing and storing this information for general use.

CONCLUSIONS
we developed a method for improving domain-level ortholog classification on the basis of the optimization of a score and demonstrated the effectiveness of the method using the manually curated reference databases. for this purpose, we designed a score for evaluating ortholog clusters at the domain level on multiple alignments and demonstrated that the method contributes to the improvement of the clusters. this method will enhance the reliability of ortholog databases and thereby contribute to comparative analyses using them.

