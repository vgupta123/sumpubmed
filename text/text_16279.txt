BACKGROUND
based on genome sequence information, comprehensive clone and gene deletion libraries have been created where each gene is individually expressed or deleted. genetic techniques have been developed to exploit these resources, which has led to an explosion in the number of high-throughput biological experiments for many organisms. advances in automation technology are also increasing the efficiency and driving down the costs of performing these experiments. the budding yeast saccharomyces cerevisiae has provided a robust platform for many high-throughput experiments, examples include: yeast-two hybrid screens to discover novel protein-protein interactions  <cit> , chemical genetic screens to determine the target of a particular inhibitory compound  <cit> , and synthetic lethal  and synthetic dosage lethal  screens to discover novel genetic interactions  <cit> . the readout from these screens is typically growth of yeast colonies arranged in a grid on solid media and comparisons are made between experimental and control conditions to evaluate a biological effect.

visual inspection has been used effectively to evaluate high-throughput growth data, but the task is time consuming and subjective  <cit> . raw data may need to be reviewed several times to ensure accuracy, a feat made difficult by the fact that high-throughput screens often produce  <dig>  or more data points, with significant growth differences, or "hits," representing only a small fraction of the total. in addition, without quantitative data the results are typically binary  and therefore, biologically relevant information may be lost.

quantitative data can help identify more biologically relevant information from a screen such as weak vs. strong interactions or even suppressors  <cit> . imaging tools such as imagej  <cit> , cellprofiler  <cit> , or ht colony grid analyzer  <cit>  can be used to quantify colony growth, but these tools can only provide raw colony size data, with no statistical analysis of the data they produce. in addition, imagej and cellprofiler require knowledge of image manipulation and programming to adapt them for use with a particular experiment. statistical analysis can be achieved with programs such as growth detector  <cit> , colony imager  <cit>  and colony scorer  <cit> . however, none of these programs have all of the features expected in a fully automated system. for instance, the analysis methods used in colony imager and colony scorer are not completely described. a transparent system would allow more evaluation, and perhaps, customization of statistical methods. in contrast, growth detector provides source code, so the methods are transparent, however the code must be edited prior to use and requires the proprietary software, matlab, to run. finally, none of these programs provide visualization tools to help evaluate numerical output.

here we present a new software suite called screenmill that overcomes the limitations described above. the methods employed by screenmill are transparent and require no proprietary software or sophisticated programming knowledge for their use. screenmill allows users to obtain quantitative data from high-throughput growth experiments, streamlines the statistical analysis, and offers a novel web-based application to review and visualize data.

implementation
the screenmill software suite is composed of three software tools: colony measurement engine , data review engine , and statistics visualization engine  . the cm engine automates the processing of digital plate images, computes colony areas, and saves the raw growth data to a file. this file is uploaded to the dr engine, which provides a graphic user interface  with a visual representation of the raw data. the gui provides tools for visualizing data and identifying anomalies. the dr engine then calculates population statistics for a dataset and saves the results in a text file. the sv engine accepts the results generated by the cm and dr engines as inputs and uses a gui similar to the dr engine to provide a unique visualization of the statistics for side-by-side comparison of control and experimental plates from a screen. this tool helps to review and refine the list of significant interactions identified in a screen.

colony measurement engine 
the cm engine has been developed as an open-source macro for the freely available program, imagej from the national institutes of health   <cit> . the function of cm engine is to automatically translate into quantitative data, a directory containing digital images of yeast plates with colonies arranged in a rectangular grid. prior to using cm engine, images of agar plates are generated using a flatbed scanner or digital camera. digital images of plates presented in this paper were captured using a scanmaker 9800xl flatbed scanner . plates were scanned in 8-bit grayscale at a resolution of  <dig> dpi using the transparent media adapter. transparency mode scans eliminate many artifacts caused by reflected light and result in higher contrast images than reflected light scans. a black plexiglas mask was cut to make a  <dig> Ã—  <dig> plate grid to align them on the scanner bed and mask the light between them.

cm engine accepts three different image layouts as input:  multi-plate images that contain several plates arranged in a defined array,  "rough crops", in which images are comprised of individual plates where the borders of the image align roughly with the edge of the plate  and  "fine crops", in which the images contain individual plates whose borders align exactly with the edge of the colony grid layout .

upon invoking the cm engine macro within imagej, the user is prompted to select a "parent directory" containing plate images . these images may be in any file format that imagej can open, including jpeg, gif, png, and tiff, although images in a lossless format  at a resolution of at least  <dig> dpi are recommended. cm engine then allows users to enter several parameters: the mode in which they would like to quantify colony growth, the colony array format used in the screen , a label for the file that will store the colony area sizes, and the labels of any conditions .

three quantification modes are available  and are chosen based on how the cells are deposited on the agar plates. for all modes, the fine-cropped plate image is symmetrically partitioned based on the colony array format and growth in each partition is measured. standard and summation modes use binary representations of plate images after applying a threshold filter, whereas background subtracted mode uses grayscale images .

cm engine - standard measurement mode
standard mode is typically used when strains are deposited on plates as discrete points, such as in replica-pin transfers. in these experiments, growth area of a continuous circular colony is measured . standard mode offers robust artifact detection prior to calculating colony areas. in addition, measurements are recorded in standard mode only after passing a quality control step that is based on a comparison of the number of colonies expected on a plate to the number of colonies detected on a plate.

similar to ht colony grid analyzer  <cit>  and growth detector  <cit> , the first step of standard mode applies a binary threshold filter to each image to render plate images as black colonies  with a white background. every particle on a plate is then analyzed using the imagej function "analyze particles", returning the centroid coordinates, particle size , and circularity . this circularity parameter is used to help identify artifacts that may be present in the image. any particle whose circularity is below a threshold value  and whose area measurement is more then one standard deviation from the mean of particle area sizes on the plate is considered to be an anomaly. examples of such artifacts include scratches on the plate or two colonies that have grown together due to excessive moisture on the plate. any anomalies detected in an image are presented to the user in a list indicating the location of the artifact. an editable image of the plate is displayed for the user to manually remove artifacts using imagej's built in editing tools. this artifact detection system is similar to the one offered in growth detector, which analyzes colony circularity to locate artifacts  <cit> . once corrections are made, cm engine assigns colony size values.

the colony assignment algorithm takes advantage of the fact that colonies are positioned on the plate in a regular grid, meaning that the approximate position where each colony should lie can be calculated based on the dimensions of the image. this information is correlated with the centroid coordinates that the imagej particle analysis function returns. for each cell of the grid, every particle whose centroid lies within the cell is analyzed, but only the one with the largest area is assigned as the measurement value of that cell. the information of every other particle within that cell is discarded.

in a feature unique to standard mode, after all particles are processed a quality control algorithm is applied. this algorithm compares the number of particles assigned to the total number of particles in the image and is run to determine if the image has been successfully quantified. if these two values do not deviate more than 25% from one another, then the plate has been successfully quantified and the image is moved into the "measurement_passed" folder. otherwise a quantification error has occurred and the image is moved to the "measurement_errors" directory.

cm engine - summation measurement mode
depending on the way cells are deposited on plates, colony growth may not be represented by the largest particle within a cell of the grid layout, but instead by the growth of several particles within a cell. this type of growth may occur when colonies are pinned onto agar plates using blunt-tipped pins  . in this situation, standard mode is not optimal since it only considers the largest particle within a cell to represent colony growth. to accommodate this type of growth, we developed summation mode. like standard mode, summation mode applies a threshold to make a binary image, however all particles areas within each cell of the grid are summed to derive a growth value . in summation mode, since all particle areas are summed, there is no attempt to remove artifacts .

cm engine - background subtracted measurement mode
cells deposited on agar plates from liquid cultures typically result in colonies having equivalent growth areas and growth differences are manifested by density variation. such density information is lost when a binary threshold is applied, thus background subtracted mode was developed . our implementation of background subtracted mode is similar to a measurement method described by jafari-khouzani et al. for colorimetric assays  <cit> . in our implementation, images are first converted to 8-bit grayscale images. the background gray value of each cell of the grid is then determined by taking the median gray value of pixels in the four corners of a cell. this background gray value is subtracted from the cell and the remaining pixel values greater than  <dig> represent colony growth. the mean gray value of the cell is then reported as colony growth . like summation mode, background subtracted mode has the potential limitation that everything within a cell above the background value will contribute to the growth quantification of that cell, even if this includes stray marks or other artifacts. however, background subtracted mode has the benefit of not having to apply a threshold filter to the image prior to quantification. in addition, since the background value is calculated on a per cell basis, uneven lighting across a plate image does not affect quantification.

cm engine - cropping algorithms
after the measurement mode and other analysis parameters are entered, cm engine examines the structure of the parent directory to determine the format of the images to be quantified . once this determination is made, cm engine processes images in a stepwise fashion, moving them from a starting directory into specific folders as they are processed, eventually arriving in a final directory called "measurements_passed" . multi-plate images are copied to a folder labeled "original_scans" and split into individual plate images, which are placed into a folder labeled "rough_crops". for proper processing the software requires multi-plate image backgrounds to be completely black with plates arranged as detailed in figure  <dig>  cm engine next applies a straightening algorithm to rotate each plate image in the "rough_crops" folder so that every row of colonies lies in a straight line. the straightening algorithm works by analyzing a selection of nine colonies that lie in a 3x <dig> square within the interior of a rough-cropped plate image. the coordinates of the center of each of these colonies  are determined and used to calculate the angles of the diagonals and edges of the square. in a perfect square, diagonals should be  <dig> or  <dig> degrees, vertical edges should be  <dig> degrees, and horizontal edges should be  <dig> degrees. the differences between the angles measured and the ideal angles of a perfect square are calculated and averaged to determine the direction and magnitude to rotate the image to straighten it. this process is repeated eight more times at other positions symmetrically distributed across the image. all resulting calculated angles are averaged and then used to rotate the image appropriately.

following alignment, images are fine cropped so that borders are close to the edge of colony growth, and are moved into a folder labeled "fine_crops". the first step of the cropping algorithm determines the approximate width of a row  of colonies as well as the average distance between the colonies. once these measurements are determined, four rectangular selections are analyzed in the interior of the image. the shorter dimensions of the rectangles are equivalent to the sum of the average colony width and the average distance between colonies . the longer edge of each rectangle encompasses approximately three-quarters of the colonies in a row or column. each rectangle is parallel to one of the edges of the image and is centered over a row or column of colonies. after initial positioning, each rectangle is moved independently towards the edge of the image in a stepwise process by a distance equivalent to the smaller dimension of each rectangle. at each step, the rectangles are queried for the presence of colonies within their borders. once no colonies are found within the borders of a rectangle, its movement stops. the interior edge of that rectangle is considered to be the border of colonies. using these algorithmically defined borders, the images are cropped and will contain a grid of colonies that lie in a specific number of rows and columns based on the density of the screen conducted . the integrity of this grid layout is validated by drawing a thin selection line between each row and column of colonies based on where they are expected to lie if they were properly aligned and cropped. the imagej "measure" command is used to determine if any of these lines significantly overlap colonies. if they do not, the integrity of the grid layout is validated and the image is successfully cropped.

in our tests, over 98%  of plate images were successfully processed into properly rotated, fine-cropped images. if an error occurs with an image during this process , the image is moved into a folder labeled "fine_crop_errors". in this case, the images may be manually cropped, as described below. when fine cropping is completed, the cm engine calculates colony growth using one of the three user-designated processing modes .

after successful colony measurement, images are moved to the "measurements_passed" folder. cm engine produces a text-based log file that lists all colony measurements for every plate that was successfully processed. if errors occur at any point in image processing, additional log files are generated that describe which plates are affected and the type of error that occurs . most images can be manually edited to overcome a particular error. for instance, images in the "fine_crop_errors" folder can be manually aligned and fine-cropped then moved by the user into the "fine_crops" folder. upon re-running cm engine, these manually-adjusted images are detected in the "fine_crops" folder, processed and the measurements are saved to a new log file allowing specific plates to be reanalyzed without having to re-process all plate images. once all plates have been successfully measured, the user may upload the log file to the web-based dr engine program. if multiple log files are present, they must be combined into one "master" log file before proceeding with dr engine.

data review engine 
the dr engine is a web-based application that normalizes raw screen data, provides a visual interface for removing common pinning errors and generates population statistics. the standard input for the dr engine is the log file of growth data generated by the cm engine, but other appropriately formatted quantitative data  can be used. strain information is associated with the log file by specifying a text-based key file with information about the strain library format. key files for several strain libraries are available directly from the screenmill web interface, but custom key files for other libraries can be uploaded prior to analysis .

the dr engine normalizes uploaded data to allow colony sizes to be compared between plates, even if there is a general growth effect due to experimental treatment or media differences. through the web interface, the user may choose to normalize data to the "plate median"  where each raw value is divided by the median growth value from its plate. the plate median growth value was chosen for normalization instead of the mean growth normalization method implemented in other work  <cit> . we chose the median value since it is less sensitive to fluctuation in cases where multiple positions on the plate are blank due to pinning errors or slow growth of specific strains. alternatively, data can be normalized to the median growth value of "designated controls" located at specific positions on the plates. this is the preferred method if the user expects most of the tested strains to show a growth effect . for this option, the positions of designated controls must be indicated in the key file . finally, the user may choose to turn off normalization altogether  so that only raw growth values are used when calculating descriptive statistics. further information about normalization is available in additional file  <dig>  normalized colony values are used by the dr engine to determine the size and color of the circles that depict colonies in cartoon representations of plate images .

dr engine - data exclusion algorithms
plate images rendered by the dr engine are color-highlighted to aid the review process. first, the data is evaluated for colonies that fall below 25% of the plate growth median and these are highlighted with a yellow background . next, two algorithms are run to identify, and highlight in red, colonies to be excluded from statistical consideration. the first exclusion algorithm is employed to identify pinning errors in which a section of a plate was not inoculated . the algorithm recursively selects colonies for exclusion by examining the size of each colony and its adjacent neighbors. if at least six out of eight neighboring colonies fall below 25% of the plate growth median  or at least two neighboring colonies have already been excluded , the program highlights the colony in red for exclusion. we tested values in the range of 2- <dig> for parameters  <dig> and  <dig> prior to assigning "6" and "2" as their optimized values . an additional algorithm to exclude spurious data is applied to plates that have  <dig> replicate samples of each strain arranged in  <dig> Ã—  <dig> arrays . this algorithm starts by comparing the value of each replicate to one another. significant differences are determined by comparing the normalized size of each colony to the median of the  <dig> replicates. if a colony is within 45% of this median value, it is highlighted in red for exclusion. this range for exclusion was empirically chosen after analyzing the performance of many different ranges and determining that it most successfully excluded spurious data without affecting valid data .

we find that these two exclusion algorithms provide an appropriate check on spurious data for many types of pin-transfer experiments and is not available in any of the previously described software  <cit> . however, any algorithmically-defined exclusion can be changed in the user interface using a mouse click on the colony image to toggle the exclusion on or off. in addition, the behavior of the exclusion algorithms can be modified or turned off using the advanced settings of dr engine .

dr engine - statistical methods
after the data review is complete, plate normalized growth values are used to calculate p-values between strains on comparer and experimental plates. p-values are calculated using the normal distribution or t-test for parametric data, or the mann-whitney test for nonparametric data; the user selects the test that will be used at runtime. in addition, p-values may be calculated with or without multiple test correction using the bonferroni method  <cit>  . for small sample sizes,  it is often difficult to determine if data is parametric  or nonparametric. a graphing tool to generate histograms of raw data has been included on the dr engine website to help evaluate data distribution. histogram bin widths are calculated as in shimizaki et al  <cit> .

when the population as a whole  ratios) approximates a parametric distribution, the normal distribution method should be used to calculate p-values. using this method, normalized growth values for the replicates of each strain are averaged and the resulting values are used to compute the log growth ratio. this ratio is defined as log. the population of log ratios for a screen experiment is assumed to exhibit a normal distribution, if they do not, it is up to users to transform their data appropriately before using this method within the dr engine. since the data are assumed to be normal, the mean and standard deviation are easily calculated. from these values, z-scores and two-tailed p-values are calculated. two tailed p-values are calculated from z-scored using "uprob" function of the perl statistical distributions module and multiplying the values returned by  <dig>  <cit> .

the normal distribution method has the added benefit of automatically performing multiple test correction since each p-value is assigned based on the rank of the corresponding z-score within the entire distribution of data. as a result, bonferroni correction of p-values should not be selected for this method.

as an alternative to the normal distribution method, the t-test method may be used when it is known that the value of each set of replicates independently is parametric. for this option, a welch's t-test is carried out between comparer and experimental strain replicates  <cit> . t-test calculations are performed using the unpaired t-test for samples of unequal variances. t-scores and the degrees of freedom are calculated for each set of values using the traditional method  <cit> . a p-value is determined by passing these two values to the "tprob" function of the perl statistical distributions module  <cit> .

finally, if the underlying distribution of the data is nonparametric or unknown, the mann-whitney test should be performed  <cit> . the mann-whitney test was implemented in perl and calculates two-sided p-values. exact p-values calculations are made unless there are more than  <dig> samples, in which case the normal approximation is used to calculate p-values from the u values   <cit> .

for both the welch's t-test and the mann-whitney test it is recommended to apply bonferonni correction the p-values.

dr engine - output
the data generated by the dr engine web application  are merged with the strain position information from the user-selected key file and displayed on a results page. these results are presented to the user in three tab-delimited downloadable text files. the first contains data from every strain that has been screened in the experiment . the second file contains information from those strains whose growth on the experimental plate is 50% or less than the control value . the third file contains information from strains whose growth on the experimental plate is greater than or equal to twice that of the control plate .

statistics visualization engine 
the final element of screenmill is a novel web-based program called sv engine, which has been developed to visualize the statistical data contained within the "screenmillstats-all.txt" file on a plate-by-plate basis. in this application, cartoon representations of a control and a corresponding experimental plate are presented side by side. the user can "mouse" over a set of colonies simultaneously highlighting both the control and corresponding experimental colonies. at the same time, the calculated statistical data for that strain and experimental treatment as well as identifier information present in the key file are displayed. additionally, the tabbed interface enables the user to easily toggle views between plates allowing visualization of data from multiple experimental conditions . the user can then select strains considered interesting by a mouse click. statistical data from the user-selected strains may be downloaded to a microsoft excel file.

the sv engine uses the p-value threshold calculated by the dr engine to determine which strains to highlight as possibly significant. although this value is the default, the user may adjust the threshold via the web interface. for instance, if users are interested in more subtle growth defects  or more stringent defects , they can increase or decrease, respectively, the p-value threshold. upon adjusting this threshold, the webpage is redrawn to highlight only those strains that reflect the changed parameter, thus allowing the user to immediately visualize the outcome.

RESULTS
screenmill has been extensively tested in our lab during the analysis of multiple sdl screens. a bottleneck in these high-throughput screens is the quantification and analysis of results. using screenmill, we are able to eliminate this bottleneck, analyzing the data from up to  <dig> high-throughput screens in less than a day .

one of the advantages of screenmill's first tool, cm engine, is that it contains three different measurement modes to allow accurate quantification of colonies derived from the most common cell deposition protocols . the ability to choose a specific measurement mode is unavailable in any published software and gives the cm engine the flexibility to accurately measure a variety of colonies. to test that cm engine properly quantifies colony sizes we compared the measurement modes of cm engine to those previously described and readily available  <cit> . images were quantified using all three modes of cm engine and then visual comparisons were conducted between cartoons representations of the quantifications generated by dr engine. in all cases cm engine performed as well, and in some situations, much better than the other software .

an additional benefit of cm engine is the ability to accurately align and crop plate images. to validate the alignment and cropping algorithms we ran hundreds of different multi-plate images through cm engine. as previously stated, over 98%  of plate images were successfully processed into properly rotated, fine-cropped images .

to reduce costs to users, the cm engine is written as an open source macro for the nih imagej program. the cm engine source code is extensively commented and it has an accompanying usage document. together, the comments and the usage document clearly define all of the functions and variables contained within the macro . additionally, since the imagej macro language itself is simply structured and well documented, the cm engine source code can be easily interpreted to allow customization. as a result, users may change cm engine as they wish, and submit updates to the code base to improve and extend the functionality of the macro.

the second tool in screenmill is the dr engine, which provides a unique data review process to remove artifacts before generating the descriptive statistics of screen data. this web-based tool automatically renders cartoon representations of plates, greatly reducing the time and computing demands associated with uploading and displaying high-resolution digital images of plates processed by the cm engine. the dr engine also contains novel automatic and manual tools to exclude spurious data thereby improving the quality of the statistics generated. furthermore, parameters of the dr engine affecting plate normalization and exclusion algorithms can be modified through its web-interface to adapt the program to diverse data sets.

the third tool, the sv engine, overlays statistics generated by the dr engine on top of side-by-side cartoon representations of control and experimental plates. the cartoons and statistical calculations are based on normalized colony sizes calculated by the dr engine and allow for comparison between plates, even if their overall growth differs. users may refine lists of statistically significant data by toggling between views of different conditions, while also viewing relevant statistical information and strain identities. for example, the user may wish to limit data to only those having significant p-values across multiple experimental conditions. thus the review process integrates the speed and ease of automation with the accuracy and flexibility of human decision-making to select only data of interest for further study.

CONCLUSIONS
the screenmill software suite provides unique tools to measure, visualize, and review colony growth data from high-throughput screens. all screenmill components have been written using open-source software, eliminating any costs for academic users. since screenmill is not proprietary, all algorithms are transparent and can be judged accordingly. furthermore, the data files used by the individual screenmill components are defined in detail, so that each "engine" can function independently of the others. for example, measurements from other sources can be formatted for use with the dr and sv engines. additionally, data visualization in the dr and sv engines is unique to screenmill and allows users to manipulate and review screen data in a manner previously unavailable. all of these features, combined with a simple user interface, make screenmill a valuable tool for analyzing high-throughput experiments.

availability and requirements
project name: screenmill

web page: http://www.rothsteinlab.com/tools/

operating system: platform independent

programming languages: perl, ruby, imagej macro language, javascript, html and css

other requirements: imagej  <dig>  or higher . dr and sv engines require javascript enabled browsers and have successfully been tested on google chrome  <dig> , safari  <dig>  and firefox  <dig> 

license: gnu gpl

any restrictions to use by non-academics: license needed

competing interests
the authors declare that they have no competing interests.

authors' contributions
jcd designed and developed screenmill and wrote the paper. rjdr contributed to screenmill design and development. rjdr and rr designed the research and aided in evaluation of screenmill and writing of the manuscript. all authors read and approved the final version of the manuscript.

supplementary material
additional file 1
screenmill - instructions for use  this file contains the supplementary information and figures referenced in the main text. this information includes: â€¢ cm engine instructions for use â—¦ provides step-by-step instructions on how to use cm engine. â€¢ cm engine image orientation and naming conventions â—¦ describes how plates must be laid out in images and how to properly name them prior to processing with cm engine. â€¢ cm engine straightening and fine cropping algorithms â—¦ describes the straightening and fine cropping algorithms used when cm engine processed images. â€¢ log and key file format information â—¦ describes the way data is formatted in log and key files used/generated by screenmill. â€¢ dr engine normalization options â—¦ describes the data normalization methods available in dr engine â€¢ dr engine advanced options â—¦ describes the advanced options available when using dr engine.

click here for file

 additional file 2
image formats for use with cm engine . this file includes  <dig> files: â€¢ additional file  <dig> - readme.pdf: included instructions on how to process the example images with cm engine â€¢ additional file  <dig> - multiplate setup.zip: a sample multi-plate image . â€¢ additional file  <dig> - rough crops setup.zip: sample "rough cropped" images . â€¢ additional file  <dig> - fine crops setup.zip: sample "fine cropped" images . â€¢ additional file  <dig> - colonyareas.txt: contains the quantification of the multi-plate image in additional file  <dig> - multiplate setup.zip using cm engine - standard mode.

click here for file

 additional file 3
optimization of the parameters used in exclusion algorithms  this file contains  <dig> files: â€¢ additional file  <dig> - exclusion algorithm parameters.pdf: explains the analysis performed. â€¢ additional file  <dig> - globalexclusioncartoons.zip: contains all of the cartoons generated when optimizing the global exclusion parameters â€¢ additional file  <dig> - replicateexclusioncartoons.zip: contains all of the cartoons generated when optimizing the global exclusion parameters

click here for file

 additional file 4
comparison of measurement modes . this file contains data comparing cm engine's three measurement modes to ht colony grid analyzer  <cit>  and growth detector  <cit> . this file contains data in several files: â€¢ additional file  <dig> - comparison of measurement modes.pdf: a summary of the results and notes on how the analysis was performed. â€¢ cartoons: cartoon representations of raw measurements generated in dr engine . â€¢ cm engine: the original images analyzed by cm engine . â€¢ growth detector data: original images  and results of running growth detector . â€¢ ht colony grid data: original images  and results of running ht colony grid analyzer .

click here for file

 additional file 5
source code for cm, dr and sv engines . this file include two zip files: â€¢ screenmill - cm engine.zip: contains two copies the cm engine. one for imagej version  <dig> , one for version  <dig> + . â€¢ screenmill - dr and sv engines.zip: contains the html, css, javascript, image, and cgi  files needed to run dr and sv engines.

click here for file

 acknowledgements
we thank yan deng and qi feng for help in the initial development of the cm engine. we also thank michael lisby, michael chang and kara bernstein for critical reading of the manuscript. this work was supported in part by national institutes of health grants ca <dig>  gm <dig>  and hg <dig> awarded to r.r., ca <dig> and gm <dig> to j.c.d. and hg <dig> to r.j.d.r.
