BACKGROUND
functional modules are groups of genes or proteins involved in common elementary biological functions. proteins are also known to interact with each other by forming complexes, and each such complex performs an independent and discrete biological function through the interactions of its member proteins  <cit> . single proteins may also participate in more than one complex or functional module. functional modules or protein complexes correspond to modules, which are dense subgraphs within protein interaction networks , and hence, can be discovered by appropriate network clustering approaches. generally speaking, modules in pins refer to highly connected sub-graphs which have more internal edges than external edges. many definitions of modules have been proposed in literature  <cit> , and consequently different community detection algorithms have been proposed based on these different definitions.

module detection in pins is a computationally hard task and conventional clustering algorithms are not well suited for this task  <cit> . efficient, accurate, robust, and scalable methods are therefore required for mining large pins  <cit> . there are generally three classes of modules detection approaches: 1) those based on finding cliques, which are fully connected sub-networks  <cit> ; 2) those based on detecting dense subnetworks  <cit> , not necessarily cliques; and 3) those based on uncovering the hierarchical organization of modules within pins  <cit> . clique techniques are not quite scalable to large pins and the identified modules are too strict in the biological sense of modules since proteins participating in a complex may not all interact with each other. current density-based algorithms commonly misclassify proteins with low degree into small clusters which could be merged to core protein clusters  <cit> . moreover, many biologically meaningful modules are ignored due to their low topological connectivity  <cit> .

hierarchical clustering methods based on global metric over nodes or edges, such as betweenness centralities, are very time-consuming, and thus do not scale well to large pins. the few hierarchical approaches based on local metric also have the common problem of classifying very low-degree vertices into separate clusters, which does not make sense biologically. another major issue in current hierarchical clustering approaches is their inability to perform well on noisy data. this is generally the case when clustering pin data generated from large scale high-throughput experiments. as discussed in  <cit> , such pin data usually contain many false positive interactions, and hence, care must be taken to deal with the sensitivity of hierarchical methods on such data.

the majority of the clustering methods proposed in the literature has focused on identifying nonoverlapping communities. however, it is well recognized that complex networks contain multi-class nodes corresponding to vertices belonging to many communities at once. overlapping clustering algorithms have not been intensively studied nor successful at finding good subnetworks, although they first appeared three decades ago; see an extensive review of over-lapping methods in  <cit> . multi-functional proteins are proteins which perform several functions and interact specifically with distinct sets of protein partners simultaneously or not, depending on the function being performed. thus, such proteins are involved in many functional modules or protein complexes, and hence, it is reasonable to assume that pins have overlapping communities, each containing some multi-functional proteins. few successful hierarchical clustering approaches such as the overlapping cluster generator  algorithm of  <cit>  and the link communities method of  <cit>   have been recently proposed with the aim of identifying overlapping protein communities as well as multi-functional proteins from pins.

in this paper, we propose a fast agglomerative clustering technique, fac-pin, which addresses the issues and limitations discussed above for hierarchical algorithms. fac-pin is based on a local similarity pre-metric of relative vertex-to-vertex clustering value for clustering pins in an agglomerative hierarchical manner.

related works
many hierarchical clustering approaches  have been introduced in literature, since the original publication of  <cit>  for clustering networks. see the excellent survey on graph clustering algorithms in  <cit> . thus, we will present only the few methods that are directly related to our proposed agglomerative approach.

an effective agglomerative technique for clustering large networks was first proposed by  <cit> . the girvan-newman  algorithm  <cit>  first computes the edge-betweenness centrality value of each edge; this is a global metric over the edges and is defined as the number of shortest paths containing a given edge. then, gn subsequently sort and then remove edges with large betweenness values in an iterative manner and in order to detect the communities; since such edges correspond to bridges connecting two modules whereas low-betweenness edges are internal to modules. to increase the computational speed of gn,  <cit>  made a simple but non-trivial modification in the computation of the value of the modularity function used in gn.  <cit>  defined the concept of the degree of a subnetwork s as the number the of edges containing one endpoint inside s and the other endpoint outside s. the degree of subnetworks was used along with the edge-betweenness values to devise an agglomerative method for module discovery.  <cit>  developed a fast agglomerative approach for community detection based on a global centrality measure, the vertex clustering coefficient ; which is defined as the ratio of the number of edges between the neighbors of a given vertex v and the total number of possible edges in that neighborhood, it measures the degree of completeness of the subnetwork defined by v and its neighbors  <cit> .  <cit>  designed an agglomerative technique based on the clustering coefficient of an edge; the edge clustering coefficient extends the vertex clustering coefficient and is a global measure defined as the number of triangles to which a given edge e =  belongs to, divided by the number of triangles that might potentially include . that is:

  cu,v=zu,vmin{}, 

where, ka is the degree of a vertex a, zu,v is the number of triangles containing edge , and min{, } is the maximal possible number of triangles containing . this coefficient has been further generalized to higher-order cycles, cu,v, such as squares for k =  <dig>  cu,v. edges contained in few or no triangles have low clustering coefficients, and hence, correspond to bridges connecting two clusters. the edge clustering coefficient assumes the existence of cycles of length k in a network; which is problematic since a network can have many cycles of different lengths and the length distribution is unknown . for this reason,  <cit>  defined a local node similarity metric over the edges, the edge clustering value, which is not based on cycles but on the common neighbors of the two endpoints of edge . the edge clustering value is defined as:

  ecv=|nu∩nv|2|nu|⋅|nv|, 

where, na is the set of neighbors of a vertex a and its cardinality is defined as |na|. here, endpoints vertices of an edge  with a larger clustering value are more likely to be in the same cluster. using the edge clustering value,  <cit>  devised an agglomerative technique, the hc-pin algorithm, for discovering modules of a pin and which is faster and more accurate than current hierarchical algorithms for network clustering. the edge clustering objectives in equations  and  do not take into account the reliability of interactions in the presence of false positives in pin data, and hence, will yield incorrect clustering results. in this regards,  <cit>  modified the objective of equation  to account for noise in the pin data, as

  ecvw=∑k∈iu,vw⋅∑k∈iu,vw∑s∈nuw⋅∑t∈nvw, 

where iu,v = nu ∩ nv , and  <dig> ≤ w ≤  <dig> is the weight assigned to the edge  and which represents the reliability of the interaction between vertices a and b or the probability of their interaction being a true positive. clearly, equation  is a special case of equation  for weighted undirected graph with w =  <dig> for all edges . in equations -, two vertices connected by an edge with larger objective value are more likely to lie in the same module.

recently, while finalizing this manuscript, we have been made aware of an hierarchical approach introduced in  <cit>  and which focuses on grouping links  rather than vertices, in contrast to the existing literature which has almost entirely focused on grouping nodes. it is well-know that communities in complex networks often overlap such that nodes simultaneously belong to several groups at once, which in turn, are known to be involved into hierarchical structures. it has therefore proved difficult for node-focused community detection methods to accurately identify relevant functional modules because of the hierarchical structures of the overlapping groups. let na+ denotes the set of node a and its neighbors and ea,b denote the edge , then by defining network communities as groups of links rather than groups of vertices,  <cit>  proposed the following similarity function for link pairs that share a node in an undirected unweighted network

  s=|nu+∩nv+||nu+∪nv+|, 

and applied a simple single-linkage hierarchical clustering algorithm to build an link dendrogram from equation  which yields link communities with the best edge partition density. by identifying such non-overlapping link communities,  <cit>  has detected hierarchically organized node community structures with pervasive overlap.

in the next section, we will propose a new criterion for weighted undirected graphs, which is a modification of the relative vertex-to-vertex clustering value which we have first introduced in  <cit>  for un-weighted graph; in  <cit> , however, the unweighted criterion was applied only to the problem of detecting protein complexes in pins  <cit>  whereas here we apply our weighted criterion here for identifying functional modules in pins. it is a local similarity premetric combining the ideas behind the vertex clustering coefficient, the edge clustering coefficient, and the edge clustering value, and which allows to decide when a given vertex can be included into the cluster of another vertex, and which helps address all of the issues discussed above.

methods
network modularity structure
the concept of community is qualitative rather than quantitative; that is, nodes must be more densely connected within the community than with the rest of the network. the quantitative definition of the modularity of a network is still an open debate. here, we use the modularity quality function q which was introduced by the authors of  <cit> , and which is a widely used quantitative measure for evaluating the modular structure of a network. specifically, given an un-weighted undirected graph g =  with |v| = n, its symmetric adjacency matrix a = n × n where au,v =  <dig> if nodes u and v are connected and otherwise au,v =  <dig>  then, the modularity q function is defined as

  q=∑i=1keii-ai <dig>  

where: p =  is a partition of v into k groups; eii=ll is the fraction of edges with both end vertices in the same community i; ai=ll is the fraction of edges with at least one end vertex in community ci; and, l=∑u∈s <dig> v∈s2au,v. larger values of q correspond to more distinct community structures in pins. function q have serious resolution limits which have been discussed at length in  <cit> , and the size of a detected community depends on the size of the whole network; thus, the choice of partition is highly sensitive to the total number of edges in the network. a second partition scoring function Ω which seeks to improve q has been introduced in  <cit>  and is defined as

  Ω=∑i=1keii⋅logai. 

function Ω allows for more diverse cluster sizes than function q and which are not too small and not too large, and smaller values corresponds to better modularity structures. a third scoring function, the modularity density function d of  <cit> , overcomes the resolution limits of q by directly including information on the number of nodes in a community. it is defined as

  d=∑i=1kl-l|ci|, 

where, c¯i=v\ci is the set of vertices not in ci. thus, the aim of function d is to optimize both the modularity and the density of a community. for weighted undirected graphs g =  with weights assigned to edges in e, we propose new modularity functions, qw, Ωw and dw. these three functions are direct generalizations of q, Ω and d above, with l redefined for weighted undirected graphs as

  l=∑u∈s <dig> v∈s2w. 

the problem of community detection is hence equivalent to searching for a k and a partition pk to maximize the value of a modularity function.

the relative vertex-to-vertex clustering value
suppose an edge  in a scale-free network such that u has lower degree than v. we can reasonably assume that u has more likely joined the cluster containing v than v has joined the cluster containing u. this assumption stems from the principle of preferential attachment in power-law networks, which states that a new node u is likely to attach to a high-degree node v than to a low degree node. the edge clustering coefficient cu,v of  <cit>  and the edge clustering value ecv  of  <cit>  are similarity metrics which treat both endpoints of edges  equally, irrespective of their degrees. also, another issue is that both ecv  and cu,v require vertices u and v to be connected by an edge. this requirement is quite restrictive and we aim to extend  to the case in which pair  is not an edge while still being able to decide if both vertices are in the same cluster. finally, hierarchical approaches based on ecv  and cu,v, or other objective functions, have the common problem of classifying low-degree vertices  into separate clusters rather than merging them with their neighboring modules. these criteria tell how likely that both u and v lie in the same cluster, and not which of u or v has likely joined the other's cluster. let na be the set of neighbors of a vertex a in an un-weighted undirected graph g = . we define na+=na∪{a} as the neighbor set of a augmented with a itself. given two vertices u and v, we define the clustering value of u relative to v as:

  r=|nu+∩nv+||nu+| 

to consider the reliability of edges in the presence of false positive interactions in the the pin data, we modify the objective of equation  to apply for weighted graphs, as follows

  rw=∑a∈iu,v+;∈e;∈ew⋅w∑b∈nu+;∈ew, 

where, iu,v+=nu+∩nv+, and  <dig> ≤ w ≤  <dig> is the weight assigned to the edge  and which represents the reliability of the interaction between vertices a and b or the probability of their interaction being a true positive. clearly, equation  is a special case of equation  for weighted undirected graph with w =  <dig> for all edges . for a node a ∈ v, we let ka=∑b∈vaa,b be its degree. for a weighted graph, we define the weighted degree of a vertex a as κa=∑b∈vw, similarly to  <cit> .

rw, with  <dig> ≤ rw ≤  <dig>  is a similarity premetric since it does not satisfy the axiom of symmetry and the triangle inequality but satisfies the axioms of self-similarity and maximality  <cit> ; see http://www.scholarpedia.org/article/similarity_measures and http://en.wikipedia.org/wiki/metric_#premetrics. a vertex u with a larger clustering value given another vertex v is more likely to lie in the cluster containing v. in the following we let c =  denotes the subnetwork cluster containing v and we assume c is a community. below, we describe the properties of rw.

analysis of rw
in the following, we limit our discussions to the case of un-weighted networks, though they also apply to weighted networks. to understand how the similarity premetric rw can be used to determine the communities in a network, we now discuss the relationships between values r and r, and all the four possible cases of connectivity of an edge . the main question we address below is: when should we merge the vertex u with the current cluster c of v?

 <dig> case ku =  <dig>  r =  <dig>  thus it is maximal. r is also maximal when kv =  <dig>  and hence, the connected component c = ) is a community. if on the other hand kv >  <dig>  then we have r >r and therefore u should be merged with the current cluster c of v ).

 <dig> case  <dig> <ku <kv. r >r and r may or may not be maximal. vertex u should be merged with c only when r >  <dig> ; that is, when more than 50% of the neighbors of u, nu+, are in the intersection, nu+∩nv+. this is a reasonable decision since the number of triangles involving the edge  is |nu ∩ nv|, and that the edge  is definitely not a "bridge" connecting two clusters when most of u's neighbors form a triangle with v.

 <dig> case  <dig> <kv <ku. this is the reverse of case  <dig> above: thus, u should not merge with c since r <r.

 <dig> case ku = kv. r = r, and we should consider two possible sub-cases.

 sub-case nu+=nv+. we have r = r =  <dig> since nu+=nv+=nu+∩nv+. hence, u should be merged with c given that the induced subnetwork of g for nu+∩nv+ forms a community.

 sub-case nu+≠nv+. we have r = r <  <dig>  in this case, u should be merged with c, only when r >  <dig> .

given an edge , assume the degrees of vertices u and v in g are such that ku = kv = d are  large and that u and v do not have common neighbors. then, we have r=r=1⋅21+d≤ <dig>  assuming d ≥  <dig>  in this case, the induced subnetwork of g for {u} ∪ cv  is not a community, and likewise for {v} ∪ cu . in general, consider the induced subgraph of g on nu+∪nv+ we define the local betweenness value of edge  as the percentage of paths from vertices in nu \ nv to vertices in nv \ nu going through edge . given the number of common neighbors between u and v, |nu ∩ nv|, the local betweenness of edge  is thus λ=100⋅1|nu∩nv|+ <dig>  given two connected high-degree vertices u and v, the local edge betweenness value λ increases as |nu ∩ nv| decreases, and hence, it corresponds to when both r and r values are both small  at the same time. edges with high local betweenness values are edges which are likely connecting two communities, and therefore, vertices u and v should not lie in the same community. this is not necessarily true since we are making an inference based not on the global edge betweenness metric defined in  <cit> . however, starting with correct initializations and using an appropriate node clustering mechanism, a greedy algorithm can be devised based on the faster local evaluations instead of the costly global evaluations.

r is maximal when |nu+|=|nu+∩nv+|; that is either case  or case  above. in either cases, u contributes only new internal edges in the induced subnetwork of g for cv+={u}∪cv  and contributes no new external edges, and hence, the induced subnetwork of g for cv+ remains a community if cv  is a community. finally, u is more likely to be in the community c and v less likely to be in the community c when both r >  <dig>  and r ≥ r. since r >  <dig>  then ku ≤ kv and |nu+∩nv+|=|nu+|2; that is, more than 50% of the neighbors of u are in the intersection and less than 50% of the neighbors of v are in the intersection. since ku ≤ kv then clearly the induced subnetwork of g for cv+={u}∪cv is a community when nu∩nv⊆c with its modularity increasing with |nu ∩ nv|.

quantitative definition of module
given the four cases above and a user-defined merging parameter μ with  <dig> ≤ μ <  <dig>  the decision to merge a node u with the cluster c of a node v can be summarized into a single test containing all the four cases; that is: include u to c whenever

 rw> <dig> μandrw≥rw. 

the communities  c determined by algorithms which use this merging test are such that the merging condition is satisfied for every internal edge of c and not satisfied for every external edge of c. given a weighted undirected graph g =  and the merging parameter μ, a subgraph c ⊆ g is said to be a μ-module if if the the condition for merging is true for every internal edge of c and false for every external edge of c. different networks modularity structures are obtained by varying the value the merging parameter μ.

the relative vertex clustering value, r implements the ideas behind the edge clustering coefficient, cu,v, of  <cit> , since for a given vertex v and a neighbor u the number of triangles given edge  is exactly |nu ∩ nv|; and u will be included into c whenever most of the neighbors of u  are in nu ∩ nv . this is also true even when  is not an edge; in such case, |nu ∩ nv| relates to the number of squares containing vertices u and v. on the other hand, we break through the limitations of  <cit>  as in the edge clustering value, ecv  of  <cit> , by not assuming the existence of closed loops in a networks, such as triangles or high-order loops. the relative vertex clustering values r and rw also improves ecv  and ecv w  since neighbors u of v which have most of their neighbors forming a triangle with v are considered for possible inclusion in c. searching for vertices u which form a cluster with v is also more efficient than searching for edges  that make a cluster since the number of edges is larger than the number of vertices in dense subgraphs.

the fac-pin algorithm
in a clustering task, we can use rw and rw to decide whether u should be included into c =  ⊂ g = , the current cluster of v. based on the definitions of relative vertex-to-vertex clustering value and quantitative network modularity, we propose a fast agglomerative clustering node-focused algorithm named fac-pin, shown in algorithm  <dig>  the input to algorithm fac-pin is an undirected weighted graph; when un-weighted graph is used, then all edges  are treated equally with weight w =  <dig>  the output of fac-pin is a collection of non-overlapping subnetwork communities.

given a weighted undirected pin g = , we initially consider each vertex as a singleton cluster, and sort the vertices v ∈ v into a queue qv in non-increasing order of their weighted degrees κv. then,

algorithm  <dig> the fac-pin algorithm

require: g = : undirected pin graph;

      a|v| × |v|: adjacency matrix;

      w|v| × |v|: weight matrix;

      μ: merging parameter;

ensure: pk = {c <dig> ,..., ck}: non-overlapping subnetwork communities

{initialization phase}

for all v ∈ v do

      cv ← {v}; {cv = cluster containing node v}

      ev ← ∅;

      κv←∑b∈vw; {weighted degree of v}

      c ← ; {each vertex is a singleton cluster }

                                 {c = subnetwork containing node v}

end for

{community detection phase}

sort v to qv in non-increasing order of κv values;

repeat

   v ← qv; {select highest κv vertex in qv}

   nv ← {u ∈ v|  ∈ e}; {neighbor set of v}

   for all u ∈ nv not yet assigned to a cluster do

      if rw >  <dig> μ and rw ≥ rw

      then

         cz ← cv ∪ {u}, ∀ ∈ cv ∪ {u};

      end if

   end for

   qv ← qv - v; {remove v from qv}

until qv = ∅

{compute the partition pk}

u ← v;

i ← 1;

while u ≠ ∅ do

   v ← randomly select a vertex from u ;

   ci ← c = the induced subgraph of g for cv ;

   u ← u\{u|cu = cv};

   i ← i + 1;

end while

return pk ← {c <dig> ...,ck}; qw  and Ωw ;

{evaluate the modularity of partition pk}

modularity ← dw, qw and Ωw;

in an iterative manner, we select the next highest κv vertex v from qv and then we iteratively apply the merging condition

 rw> <dig> μandrw≥rw 

on each neighbor u ∈ nv of v in order to decide for its inclusion into the current cluster cv of v.

a neighbor u ∈ nv is added into the current cluster cv of v, when the majority of the neighbors of u are in nu+∩nv+. that is when, r >  <dig>  and rw ≥ rw; in which case κu ≤ κv and |nu+∩nv+|>12|nu+| which for weighted graphs is equivalent to ∑a∈iu,v+w>12∑b∈nu+w where iu,v+=nu+∩nv+. by gradually examining each high-degree vertex v from the queue qv and then gradually adding its un-assigned neighbors u to cv, fac-pin agglomerates all singleton clusters into |v| vertex sets cv. the final k communities ci, for  <dig> ≤ i ≤ k, are the induced subgraphs of g for all distinct cv; in the algorithm, we made a distinction between a cluster cv = {v <dig> ...,vn}, a subnetwork c = , and the i-th subnetwork ci. in fac-pin, the merging parameter μ with  <dig> ≤ μ <  <dig> is user-defined. in particular for weighted pins, different modularity results can be obtained by changing the values of μ

most hierarchical methods, with the exception of the hc-pin algorithm of  <cit> , are based on a costly global metric for partitioning a pin network. fac-pin is based on the local similarity premetric rw, which encodes useful information about the local topology around vertices u and v, and which helps make a local decision maximizing the modularity of the final partitioning.

computational complexity of fac-pin
given weighted pin g = , let n = |v|, m = |e|, κmax = maxv∈v κv be the maximum weighted degree in g, and κave=1n∑v∈vκv be the average weighted degree in g. the complexity of computing rw is o, and hence, the complexity of fac-pin is o≪o⋘o. pins are power-law networks, thus the majority of proteins interact with few proteins only, and thus κave is generally small and can be considered a constant  <cit> . the cnm  <cit>  and the hc-pin  <cit>  methods run in o and o steps, respectively; where, h is the depth of the dendrogram describing the network's community structure. these are the currently fastest agglomerative methods. the space complexity of the three algorithms is o. the main achievement with respect to computational complexity is that the cost of fac-pin is dependent on the number of nodes, rather than the number of edges, specially when κave is regarded as a constant in scale-free networks.

RESULTS
we have carried out several computational experiments on nine pin data from eight different species using our proposed fac-pin algorithm. in this section, the data sets and the evaluation methods used in our experiments are described first. next, we discuss the effect of varying the merging parameter μ on the fac-pin clustering results. then, we arbitrarily set the merging parameter to μ =  <dig>  and then proceed to compare and study the clustering results of the fac-pin approach with those of the hc-pin and cnm methods on the same pin data sets; the three algorithms are compared on  the functional enrichment of their predicted modules,  their sensitivity, specificity, and f -score,  the network modularity structure of the partitioning results, and finally,  their execution times.

all computational experiments were performed on an intel machine . the program codes were all written in r.

pin data sets
original un-weighted pin data of eight distinct species was downloaded from the reactome database http://www.reactome.org/download/all_interaction.html and one species from the dip database  <cit> . the eight pin data from reactome are listed here along with their number of proteins and interactions in parenthesis are: b. taurus , t. guttata , x. tropicalis , h. sapiens , o. sativa , s. scrofa , d. rario , and s. cerevisiae- <dig> . the pin data from dip is s. cerevisiae- <dig> . in all these pin data, the number of edges is much larger than the number of vertices.

we also downloaded a list of protein complexes obtained from the mips database, which we consider as a gold standard data. we extracted the protein complexes corresponding to the s. cerevisiae- <dig> pin data from the mips comprehensive yeast genome database-cygd ftp://ftpmips.gsf.de/fungi/yeast/catalogues/complexcat/complexcat_data_ <dig>  we proceeded similarly to  <cit>  and considered only the known complexes  containing at least three proteins. since fac-pin generates non-overlapping clusters, we considered only known complexes which are at the bottom of the mips hierarchy of complexes and subcomplexes. the unconfirmed complexes, that is those in category  <dig>  were excluded.

evaluation methods
in order to study and compare the performance of fac-pin, we downloaded the cnm code http://cs.unm.edu/~aaron/research/fastmodularity.htm <cit>  and implemented the hc-pin algorithm  <cit> . the two methods were applied on the same pin data as fac-pin. for hc-pin, we set the two parameters λ and s as in  <cit> ; cnm has no parameters. of the three algorithms, only fac-pin and hc-pin can cluster weighted pins. there are other network clustering approaches which we could compare fac-pin with, however they are either not designed for clustering weighted pins or they are not hierarchical agglomerative algorithms. it should be noted that  <cit>  compared his hc-pin algorithms with six others pin clustering approaches on the same s. cerevisiae- <dig> pin data; none of them are hierarchical and only three of them can cluster pin data). due to time and space limitations, we are not able to perform computational experiments comparing fac-pin approach with those other six pin clustering techniques; we leave this task as a future work. in  <cit> , hc-pin consistently outperforms those methods in terms of its  functional enrichment of the identified modules  ability to detect both small-sized and large-sized modules,  accuracies of the identified modules,  ability to predict protein complexes, and  clustering efficiency. both hc-pin and cnm are currently the fastest agglomerative methods for clustering pin data.

functional enrichment validations
for the functional enrichment validations, we used david's functional annotation tools http://david.abcc.ncifcrf.gov/ <cit>  to identify enriched biological themes, particularly go terms, and to estimate whether the predicted modules are biologically significant. david uses a set of fuzzy classification algorithms to rank modules based on co-occurrences of their constituent proteins in annotation terms and computes a p-value indicating the significance of the module with respect to go terms. the p-value is computed using an internal ease score  <cit> . we used a p-value cutoff of  <dig>  to find biologically significant clusters. a smaller p-value indicates that the predicted module is more biologically significant than one with a larger p-value

to estimate the performance of a network clustering algorithm in term of its ability to correctly identify the functional modules within a pin, we also compute its recall, precision, and f-measure as mapped to c as

  recall=|c∩fi||fi|, 

  precision=|c∩fi||c|, 

  f-measure=2×recall×precisionrecall+precision 

where, c is a module predicted by the algorithm, and fi is a known go functional category mapped to c and considered as a true predictions. thus, the proteins in c ∩ fi are the true positive predictions. recall measures how effectively proteins with the same fi in the pin are extracted, precision measures how consistently proteins in the same c are annotated, and f-measure is their harmonic mean  <cit> . the accuracy of the method is taken as the average f-measure of the significant predicted modules. as in  <cit> , we also only consider predicted modules of size  <dig> or more.

protein complex validations
protein complex validations proceed by determining the degree of overlap between the complexes identified by network clustering algorithm and the known protein complexes; that is, we want to determine how effectively an identified module matches a known complex. we used the overlapping score function given in  <cit> . the overlapping score, o, between a discovered complex c and a known complex k is defined as:

  o=|c∩k|2|c|×|k|, 

in which a cluster c is considered to match a known complex k whenever o ≥ τ ; where,  <dig> < τ ≤  <dig> is the matching threshold. we have a perfect match only when o =  <dig>  threshold value τ =  <dig>  was used in  <cit>  whereas  <cit>  used τ =  <dig> . we used τ =  <dig>  in our complex validation. after computing the overlapping scores between all pairs  of discovered complexes and known complexes for the pin, we then determined the ability of the method to correctly classify the known complexes. the reason for doing this is that a given complex k <dig> may match many clusters but with different degrees of overlap, while another complex k <dig> may match with a single cluster only. hence, we calculated the specificity, the sensitivity, and the f-score, as our measures of accuracy here; they are defined as follows:

  sensitivity=tptp+fn, 

  specificity=tptp+fp, 

  f-score=2×specificity×sensitivityspecificity+sensitivity, 

where, tp  is the number of the identified complexes c matched by the known complexes k, fn  is the number of known complexes that are not matched by the identified complexes, and fp  is the total number of the identified complexes c minus tp.

modularity and efficiency analyses
all experiments in this paper were performed on an intel machine . we compared fac-pin against hc-pin and cnm in terms of the modularity of their clustering results and in terms of their computational efficiencies. for fac-pin, we ran it with its merging parameter set to μ =  <dig> , then evaluated and reported the modularity of its resulting partition pk . the execution times  are also recorded; the pins are sorted in increasing order of their number of proteins m.

identification of functional modules in the s. cerevisiae- <dig> pins
the computational results in this section are all generated with the merging parameter arbitrarily set to μ =  <dig>   and with the modularity quality function qw.


μ
k
effect of the merging parameter μ
 rw> <dig> μandrw≥rw 

is satisfied for u. hence, the size of a cluster c increases as the merging parameter μ decreases since more neighbors are being merged together with v; and therefore, the number of clusters k also decreases as the sizes of clusters increase.

functional enrichment of fac-pin modules
in table  <dig>  the three methods are compared for their functional enrichment of biological functions. the p- value from david's internal ease score is computed for each predicted module c, and a p-value cutoff of  <dig>  is used to find the biologically significant clusters; a module whose p-value is above this cutoff is considered insignificant. the table shows, in this order, the number  and the average size of significant predicted modules with p-values falling within intervals: <e- <dig>  , , and . although cnm and hc-pin show more enriched modules in the interval , the modules with p-value falling in this range are much larger in cnm and hc-pin than in fac-pin  with an average size of  <dig>  for cnm and  <dig>  for hc-pin compared to  <dig>  for fac-pin. larger modules result in a high number of false positives, reducing the specificity of the highly-enriched modules. figure  <dig> shows this trend. the figure compares the sizes of the modules whose enrichment p-values fall in the range . in the figure, there is a clear shift to the right in the case of cnm, indicating much larger modules. this trend is apparent in all p-values ranges . this indicates that cnm is the worst at predicting enrichment in small modules. hc-pin's highly-enriched modules are also large compared to those produced by fac-pin, but their sizes are less than those of cnm. also, fac-pin has the lowest rate of modules not passing the enrichment p-values cutoff of  <dig> .

predicting large-sized versus small-sized modules
the p-value of a predicted module depends on its size, and hence, table  <dig> and table  <dig> show the accuracy of the methods respectively for predicting large and small modules.

in table  <dig>  we see that more than 96% of the modules predicted by each method are validated to be significant, though fac-pin yields a percentage slightly larger than that of hc-pin or cnm. although cnm gives the highest average -log p-value, it also yields the lowest average f-measure; this is due to the fact that its significant modules are much larger than those of hc-pin and fac-pin, and hence, less accurate. fac-pin, on the other hand, predicted more accurate significant modules than hc-pin and cnm but with the lowest average -log p-value; again, this is due to the smaller sizes of its generated modules.

in table  <dig> however, performed consistently better than cnm and hc-pin in all performance measures; fac-pin seems to be better at producing small-sized modules.

accuracy of fac-pin
identification of functional modules in the s. cerevisiae- <dig> pin
k
3
ks
a
identification of protein complexes in the s. cerevisiae- <dig> pin

p
k
k
km
sensitivity
specificity
modularity and efficiency of fac-pin
tables  <dig>   <dig>  and  <dig> show the network modularity of the partitions obtained by the algorithms on the eight un-weighted pin data downloaded from the reactome database, respectively for the modularity functions qw, Ωw, and dw. the aim of both objectives qw and Ωw is to optimize the modularity of the detected clusters ; the aim of dw is to optimize both the modularity and the density of the clusters.

cnm is a modularity optimization algorithm designed to directly optimize the modularity quality function qw, and hence, it is no surprise that it performed best with this function, as shown in table  <dig>  the modularity maximization process of cnm  <cit>  yields a partitioning containing one very large cluster and many much smaller ones; this because, a node is selected to be included into the currently largest cluster first and to maximize the current qw value. in the columns for rice and yeast in table  <dig>  we see that fac-pin outperforms cnm on qw ; table  <dig> shows a possible reason for this, that the sizes max |ci| of their largest clusters are comparable.

recall that given a currently high-degree vertex v with its cluster cv, fac-pin merges it with all its neighbors u satisfying the merging condition

 rw> <dig> μandrw≥rw. 

the first term in the merging condition guarantees that only edges  which have low local betweenness value λ=100⋅1|nu∩nv|+ <dig> are considered for possible inclusion in the induced subgraph c of cv. the second term guarantees that only those neighbors u which can contribute more edges to c, than v contributes to c, are selected. hence, fac-pin merges neighbors u which contribute low local betweenness edges while optimizing the density of c. also as said before, the relative vertex clustering value rw combines the principles behind the vertex clustering coefficient of  <cit> , the edge clustering coefficient cu,v of  <cit> , and the edge clustering value ecv  of  <cit> . since the objectives of Ωw and dw is to seek for modular partitioning containing dense clusters, we can see that in both tables  <dig> and  <dig>  fac-pin outperformed both hc-pin and cnm on both modularity function Ωw; in seven out of eight pin data for Ωw, and in all pin data for dw. in particular for dw, fac-pin yield much higher modularity values.

CONCLUSIONS
in this paper, we have proposed a new agglomerative clustering approach, fac-pin algorithm, for detecting the communities of a given pin networks, and then compared our method with two fast hierarchical techniques discussed in literature. our approach is based on the use of a new measure, the relative vertex-to-vertex clustering value which helps decide whether a given vertex u should be included within the cluster of another vertex v depending on how many of its neighbors form a triangle with v. our approach is very fast since we are clustering vertices not edges, as in the compared methods. thus our method is appropriate for pin data, which in general contain more interactions than proteins. more study needs to be done, in particular the validation based on random networks, in order to analyze the robustness of fac-pin. comparisons with other methods which are not necessarily hierarchical will also be important. non-agglomerative clustering methods based on the relative vertex-to-vertex clustering value will be investigated. in this current version of fac-pin, a neighbor u is merged with a cluster cvi whenever its rw value satisfies the merging condition and irrespective of whether there is another vertex vj such that rw also satisfies the condition; we, therefore, plan a new variant of fac-pin in which each node u selects the best neighbor v to be merged with. finally, we plan to modify fac-pin for directed  protein interaction networks.

as a final note: we have not made experiments on weighted pins. in our initial submission, we have used the following weighted criterium:

 rw=∑a∈iu,v+;∈ew∑b∈nu+;∈ew 

one of the reviewer of the initial manuscript has pointed out that this formula is incorrect since it depends only on the weights of edges connected to node u, not of the edges connected to v. an important consequence of this error, is that our analysis of rw  will apply to the unweighted case only but will not necessarily apply to the weighted case. we have verified this, both computationally and theoretically, before engaging to experiment on weighted pins. due to time constraint, it is now impossible to perform and complete the experiments on weighted pins using the correct formula in equation . our plan for the immediate future is therefore to perform these experiments.

competing interests
the authors declare that they have no competing interests.

authors' contributions
an proposed the current forms of the relative vertex-to-vertex clustering value, introduced an initial version of the fac-pin algorithm, and suggested the experiments to be performed. zmi proposed and implemented the current version of the fac-pin algorithm, and performed all the suggested computational experiments. an and zmi have equally contributed in writing the paper.

