BACKGROUND
the web has seen an explosion of chemistry and biology related resources in the last  <dig> years: thousands of scientific journals, databases, wikis, blogs, and regular html pages are available containing information relevant to chemists and biologists  <cit> . while each of those resources is valuable in itself, integrating information from these resources increases the value even more: for example, pubchem provides a wealth of data but could be complemented with 3d models to create an even richer information source.

the original goal of the world wide web was to hyperlink individual web pages allowing humans to explore a web of knowledge. for individual web pages these links can be created manually, as is still done in blogs, wikis, and static html pages; for large databases this is, however, not feasible. userscripts are small programs that can alter the html content rendered by web browsers. for example, a userscript may add book prices from competitors to the amazon.com website, or may remove unwanted advertisements from a site. using the same approach, userscripts can also solve the problem of interlinking web resources, by adding to web pages of one resource dynamically generated hyperlinks into another. by selecting a specific set of userscripts, the user can tune a website to provide all kinds of facilities not anticipated by the original author of the site. for example, userscripts have been used in bioinformatics to enhance the ihop web page  <cit> : the script extracts user assigned tags from a third party resource, and shows them as a tag cloud on ihop pages for particular genes.

automatic hyperlinking is only possible though the use of unique identifiers such as the pdb id, the cas registration number and, more recently, the iupac international chemical identifier . while identifiers are easily used to connect databases, such as done in the srs system  <cit>  or in meta database software like biowarehouse  <cit> , the sheer number of web resources makes it impossible integrate all resources. consequently, chemical search engines, such as chemspider  <cit>  and tools to harvest information from web resources, such as chemxtreme  <cit>  and biospider  <cit> , as well as systems that standardize algorithmic access to resources and services, such as biomoby  <cit> , have emerged.

another reason why identifiers do not always allow linking resources is that many of them are database specific, such as the pdb id and the digital object identifier , and sometimes even restricted in being used, as with the cas registration number. open standard identifiers address this problem. such identifiers can be derived from ontologies, dictionaries, encyclopedia, or computed by an algorithm. the gene ontology terms are often used as identifiers  <cit> , indicating that a specific database entry is related to the cited term in the ontology, and therefore related to entries from other databases annotated with that term.

identifiers that can be calculated algorithmically are even better, because they do not need to be looked up in a list of identifiers. instead, anyone can calculate them from the object itself. for example, for molecular structures the inchi  <cit>  is the ideal replacement for database specific identifiers such as the cas registration number, the pubchem compound identifier and the chebi identifier. these all require a look up or conversion table to convert one identifier into another. using the inchi, one can look up information in all databases without having to know the database specific identifier.

in addition to the unique identifier, one additional functionality is needed to create a link to a particular database: the database must provide either an api  which can be queried using the identifier or else provide a uniform scheme for deep linking to a web page containing information about the entry behind the identifier. for example, looking up structures in pubchem is done with a scheme in which the inchi is embedded verbatim. to look up the structure of methane , the url  is used.

the plethora of resources is overwhelming, and both users and database developers may have preferred subsets, e.g. more trusted, resources. it is therefore worthwhile to have a system that allows users to choose which resources they want to have linked with which other resources. userscripts provide the necessary technology to allow this within web browsers. here we describe several userscripts we have developed to create links between web resources of interest to researchers in the life sciences.

implementation
we use the following techniques to link various web resources in this paper: userscripts, unique identifiers, microformats, and web resource interfaces. the following sections describe how these are used in this work.

userscripts
a userscript is a small program written in javascript that is automatically run within a web browser  when the user accesses pages that match a particular url. userscripts allow the user to modify the html content of a web page on-the-fly, by adding or removing elements or by moving them around. for example, userscripts exist that remove pop-up advertisements from web pages, and that alter the amazon.com web page to provide book prices from alternative suppliers. a repository of userscripts exists at userscripts.org/citeuserscriptsdotorg. chemists and biologists can find relevant userscripts by searching with the terms "chemistry" or "biology".

of the popular web browsers, only opera provides built-in support for userscripts . to enable userscript support in other browsers, a third-party extension needs to be installed: greasemonkey  <cit>  for firefox, creammonkey  <cit>  for safari, ie7pro  <cit>  or turnabout  <cit>  for internet explorer. the userscripts presented in the results section are targeted at greasemonkey, although it should be possible to run them in any browser with only minor changes.

the web browser user has full control over which userscripts she wants to have installed, allowing her to customise web pages exactly the way she wishes. once installed, it is possible to individually enable or disable installed scripts. for example, for greasemonkey see the "manage user scripts" option in the tools menu under "greasemonkey", or to disable the extension completely, click on the greasemonkey icon in the status bar. further control is provided by specifying to which web pages the script applies. userscripts define default rules , but the user is normally able to override these.

the userscript has two main methods to find the html content to which to add or remove elements. the most accurate one is to analyse the document object model . this approach is used by the sechemtic userscript to find uses of chemical microformats . the other method is to use regular expressions to find certain strings in the text of the web page. this works particularly well for identifiers with a unique and well described syntax. for example, a regular expression for inchis will have fewer false positives than one for pdb identifiers.

as with any program that you run on your computer, it is important to consider security when installing userscripts. although the security model used by greasemonkey prevents attacks by malicious websites, it is unable to detect or prevent the user himself installing a malicious userscript. such scripts do exist; recently, malicious userscripts were uploaded to userscripts.org that attempted to steal information from users' cookies. in that case, once the problem was discovered the malicious userscripts were easily detected and removed by the administrator. we recommend that unless you are familiar with javascript and carefully inspect the source code, you should only install userscripts from a trusted source.

unique identifiers
recognition of biological and chemistry relevant information on web pages is simplified by using identifiers  <cit> . such identifiers may or may not be marked up with semantic markup such as microformats . identifiers are widely used to make connections between databases, and often identify a specific entry in a database. some examples of this are the pdb identifier, digital object identifiers, pubchem compound identifier, and the cas registry number for, respectively the pdb, doi, pubchem, and the chemistry abstract service databases. in this study we use dois, inchis, and pdb identifiers as our unique identifiers .

emolecules  <cit> 
microformats
microformats  <cit>  are a lightweight specification that extends html to add semantic markup to web pages. for example, hcard is a microformat that allows semantic mark up of address information  <cit> , and hcalendar is a microformat specification for the representation of calendar information about events  <cit> .

a microformat specification has also been suggested for chemistry that would make it much easier to recognise compound names, inchis, smiles and cas registry numbers. userscripts, or indeed any other programs, would then no longer need to depend on regular expressions to find names and identifiers, but could use this markup to accurately extract the identifier.

for example, a web page implementing the inchi microformat would wrap any inchis in a html <span> element with a @class attribute as follows: <span class="inchi">inchi=1/</span>. this information can easily be extracted using the document.evaluate method which takes an xpath  <cit>  expression :

allinchis = document.evaluate;

this code returns all html nodes that mark up inchi strings using the inchi microformat. by iterating over these nodes, the userscript can insert new html elements, such as links to external resources as shown here in code taken from the sechemtic userscript:

for {

      spanelement = allinchis.snapshotitem;

      inchi = spanelement.innerhtml;

      // create a link to pubchem

      newelement = document.createelement;

      newelement.href = "http://www.ncbi.nlm." +

         "nih.gov/entrez/query.fcgi?cmd=search" +

         "&db=pccompound&term=%22" + inchi +

         "%22";

      newelement.innerhtml =

         "<sup>pubchem</sup>";

      spanelement.parentnode.insertbefore;

}

web resource interfaces
web databases are the primary source of information used by the discussed userscripts. while it is easy to have scripts create links to external web resources, it is also possible for them to retrieve information from those resources and include it in the html content of the web page the user is browsing. the latter is, for example, performed by the userscript that adds comments from postgenomic.com and chemical blogspace to journal web pages.

the general approach userscripts use to retrieve information from external web resources uses http just like any web browser itself. to simplify the process, userscripts tend to use a combination of xmlhttprequest, possibly via the greasemonkey gm_xmlhttprequest wrapper method, and the javascript object notation  format  <cit>  for data representation. the xmlhttprequest method retrieves the information using a url that normally points to a data interface, or api. the postgenomic.com software has such an api that returns the blog posts that discuss a particular article, as identified by its doi. chemical blogspace uses the same api, and adds another one to return blog posts that discuss a particular molecule, as identified by its inchi. both database apis can return the information as json objects, which is how they are used in the discussed userscripts.

since our userscripts rely on a particular api or specially-constructed url to access an external resource, they will fail if the external resource changes its api or the url it provides to access it. this will not affect the browsing experience of the user, but the additional functionality provided by the userscript will no longer be available. to deal with this, each of the userscripts described in this article checks once a day for a new version and prompts the user to install it if one is available. this means that when a userscript is updated to deal with a new api or url, every user will quickly have access to the latest version.

RESULTS
this paper introduces userscripts that have been written in our research groups as exemplars of how web resources can be integrated and to outline how they can be used in research. our userscripts can be classified into two broads areas: those that link chemical and biological data to websites, and those that affect how we interact with the scientific literature.

in the following sections, we describe in detail how functionality is added to the web page being browsed. table  <dig> summarises the resources linked to, or accessed, by each script, as well as the unique identifier used.

interacting with the scientific literature
oscar <dig> running on html
published journal articles and other web documents with chemistry content are not normally marked up by the publishers or authors to provide machine readable representations of chemical structures and related information. as a result, there has been active interest in methods which can mark documents up automatically. in particular, oscar <dig>  <cit> , developed at the unilever centre for molecular informatics at the university of cambridge, and used by the royal society of chemistry in their project prospect  <cit> , searches documents for chemical names, spectra, and other chemical information, and automatically marks up the content using xml tags .

we have created a userscript, chemgm.user.js that will automatically run oscar on a web page and provide inline hypertext links to pubchem for chemical structure names that are found in the page . the userscript can be run on any web page, but it is particularly applicable to online journal articles and chemistry blogs. an example highlighting the effect of this userscript is shown in figure  <dig>  note that though the images use an article from chemistry central journal, the script can be applied to any web page, irrespective of its source or content.

add quotes from chemical blogspace and postgenomic to dois
it can be a challenge to keep up with the primary literature in a field. at the same time, there are a large number of scientific blogs, many of which have reviews of the recent literature or highlight interesting papers. the postgenomic web site was developed by euan adie and later hosted by nature publishing group and currently aggregates information from over  <dig> scientific blogs  <cit> . the source code is open and has been used by one of the authors  to establish a similar site, chemical blogspace, for over  <dig> blogs with chemical content  <cit> . both of these sites identify references to journal articles in blogs, and make this information available through an api. compared to the postgenomic website, the chemical blogspace site also identifies molecules referenced in blogs either by microformat markup of inchi and smiles, or by analysing links to wikipedia  <cit> . if the latter link points to a wiki page that contains a pubchem compound identifier or an inchi, then the molecular structure is linked to the blog post.

this userscript uses the aggregated information collected by postgenomic and chemical blogspace. it runs whenever the user accesses the website of a journal publisher. it identifies any dois on the page, and uses the chemical blogspace and postgenomic apis to find out whether those dois have been referenced in a blog post. if so, an icon is added to the web page next to the doi which, if hovered over with the mouse, causes a popup to appear containing the name of the citing blog post, the blog name, and the first few lines of text of the blog. the full content can be accessed by clicking on the title of the blog post. in this way, content from blog articles widely dispersed in terms of the web is brought directly to where it is likely to be of most interest – the journal web site. figure  <dig> shows the effect of this userscript when running on the html version of spjuth et al.  <cit> .

providing reviews of journal articles is only one of the uses of such a userscript. it is also a general way to create a link between the content of a blog post and a particular paper. in this way, bloggers can use blog posts to enhance the original journal website without any intervention required by the publisher. for example, the author of a paper may write a blog post which provides additional supporting information for a journal article or includes the article preprint for those who do not have a subscription. alternatively, the author of a paper may write a blog post and include the dois of all of the references. this would not only promote his/her own paper , but would result in an eventual network of citations which could be used to measure the impact of a paper.

add to connotea
connotea is a social bookmarking site developed by nature publishing group for scientists  <cit> . it allows a user to bookmark websites using either the doi or a url, and to tag those bookmarks. crucially, it also provides an api for retrieving information.

the "add to connotea" userscript has two aspects. firstly, it makes it easy to add papers to connotea from journal webpages, by adding a hyperlink in the form of the connotea logo next to every doi identified on a journal web page. clicking on the logo brings the user to the connotea page for adding new papers. this aspect of the userscript is not entirely novel. a userscript has previously been developed which allows the user to add papers to connotea from ncbi pubmed  <cit> . in addition, a small number of publishers , provide a facility to add papers to connotea directly from their website. our userscript differs in that it will work on the website of any journal publisher where the text contains dois.

the second aspect of this userscript is more interesting in the context of this paper. the userscript queries the connotea api to find out how many people have previously added this paper to their connotea account. it then adds this number next to the connotea icon. clicking on the number brings you to the connotea page for that paper. from here it is possible to access comments on the paper. more useful perhaps, is the ability to find related papers by looking at the other papers a particular connotea user has tagged with the same tag. figure  <dig> shows the effect of this userscript when running on the html version of spjuth et al. <cit> .

this aspect of the userscript has the potential to affect the way we read the literature. the number of times a particular paper has been bookmarked on connotea can be considered a measure of its importance or its interest. in the past, measures such as the number of citations have served this purpose, but this information is generally not shown on journal web pages as it is not freely available. another effect of this userscript is to link the paper the user is viewing to related papers through the connotea website. if a researcher finds that a particular paper has been bookmarked on connotea and is of interest to him or her, he or she can is likely to find other relevant papers by browsing through the other papers bookmarked by the same connotea user with the same tag.

on a technical note, this userscript illustrates some techniques necessary for accessing an api that requires a user name and password and that, in addition, only permits one api request every two seconds or so. note that this userscript requires the user to have a connotea account .

linking to chemical and biological data sources
enhancement of pubchem with 3d structures
the pubchem repository is a public collection of over  <dig> million compounds  <cit> . the database contains 2d structures as well as a number of precomputed properties . the web interface to this database allows a wide variety of queries. the results are usually represented in the form of a summary web page containing images of the 2d structures of all the compounds satisfying the query with links to pages for individual compounds which provide a summary of the properties of the compound. in many cases it would be useful to be able to view an image of the 3d structure of a molecule. however, pubchem currently does not contain 3d structures for the compounds stored in the database.

to address this problem, we developed a database of 3d structures of pubchem compounds as part of our web service infrastructure for chemoinformatics  <cit> . the structures were generated using a two-step process in which the smiles were converted to a set of rough 3d coordinates using stochastic proximity embedding  <cit>  and subsequently geometry optimised using the mmff <dig> force field, using in-house code. a number of compounds were excluded from the final 3d database since the force field did not contain parameters for certain atom types. however the 3d database, known as pub3d  <cit> , contains approximately 99% of the compounds in pubchem. pub3d is wrapped by a set of web services which encapsulate common queries including finding a structure by compound id  or finding structures matching a smarts pattern.

using this web service interface we created a userscript called 3dstructureview.user.js that allows 3d structures from our database to be shown when users visit the pubchem website . the script is designed to work only on the summary and detail pages that a user views after a pubchem search. it parses the page and identifies the compound id which is then used to construct a call to the pub3d database. the return value is a string containing the 3d structure of the compound, in sd format, which is used to construct an appropriate url. the result of this process is that the user can now click on a link titled 3dview, which will cause a jmol applet  <cit>  window to appear showing the 3d structure of the compound in question.

as an example, after installing the script, one can navigate to the pubchem website  <cit>  and search for entries related to aspirin. this should return slightly more than thirty hits. if one then clicks on the compound id for the first hit, one is taken to a summary page which provides various details regarding the molecular structure and biological activity of aspirin. in addition to the data provided by pubchem, the userscript has enhanced the page to add two links: 3dview and sdf format. the former link will bring up an instance of the jmol applet showing a 3d structure of aspirin, while the second link allows one to download the 3d structure in the sd file format .

pdb-jmol greasemonkey script
the protein data bank  <cit>  is a repository of experimentally-determined 3d coordinates of proteins. each entry has a pdb id, which is a unique four letter identification code consisting of a number followed by three characters which can be either letters or numbers; for example, 1abe, 114l and 6nn <dig>  the pdb-jmol greasemonkey userscript identifies all pdb ids on web pages and adds hyperlinks to the firstglance in jmol web page  <cit>  for that protein. this website uses the open source molecular viewer jmol to show the protein as a 3d model which can be manipulated by the user. in this way, the user can instantly view the 3d structure of any pdb id mentioned on a website, and in particular, if the user is reading the html version of a journal article on-line, all pdb ids in the paper will similarly be enhanced. figure  <dig> shows an example of the latter case where pdb identifiers in the the online version of mardia et al.  <cit>  have been identified and links added.

as this userscript runs on all web pages accessed by the user, and since the search term is simply  <dig> characters long, additional constraints are necessary to prevent excessive false positive identification. the userscript only looks for pdb ids if it finds one of the following terms in the web page: "protein", "pdb", or "enzyme".

sechemtic
sechemtic is a small userscript that detects use of microformats  to markup molecular identifiers, as well as regular molecular names. it recognises markup for the iupac inchi and smiles, and creates links for those molecules to web resources like emolecules  <cit> , pubchem  <cit>  and a link to google to search for more information . it should be noted that, in particular with google searches, the links based on inchis are more useful as the same molecule may be represented by several different smiles strings but only a single inchi.

from a technological point of view, these scripts are very simple in nature; the semantic nature of the  microformats is what makes this simple script possible. the semantic markup in html for inchis that is picked up by the userscript looks like <span class="inchi">inchi=1/ch4/h1h4</span> while the markup for a smiles string looks like <span class="smiles">cco</span>.

add quotes from chemical blogspace to molecules
this userscript, quite similar to the one that adds comments to dois, runs on all web pages accessed by the user. using the same method as the sechemtic userscript , it identifies any molecules referenced on a page which have been marked up with the appropriate tags. it also supports the  inchi tags on pubchem. it then uses the chemical blogspace api to find out whether this molecule has been referenced in a blog post. the remainder is as for the previous userscript; an icon is added which contains a popup to the citing blog post. figure  <dig> shows the effect of the userscript on the pubchem page for methane . a full list of molecules with comments in chemical blogspace is available from ref.  <cit> .

a possible use of this script is to link all discussions of a particular drug in the blogosphere to a static page containing information on the drug. another use is to link discussions on syntheses of molecules to pages containing references to the molecule.

discussion
here we have focused on the development of userscripts that enhance web pages for biologists and chemists. if all of these userscripts are installed, any web page with a pdb code will now contain a link to view the structure in 3d, journal webpages will show chemical structure markup and blog comments on articles, 3d structures and links to appropriate blog posts will be available from pubchem, and any use of chemical microformats will be picked up adding links to google, emolecules, chemspider and pubchem.

these examples show that userscripts offer a powerful technology to improve the way we read the scientific literature and access chemical databases. this is done by dynamically combining web resources, and enriching the information content of the primary resources. theoretically, such links can be made on the web server itself, and this is commonly done, but it does not give the user the flexibility to choose what features to install. the crucial point about userscripts is that they do not require the involvement of the web site provider. all of the enhancements are done on-the-fly by the user's browser.

the userscripts combine a number of technologies for data retrieval and communication. information from html pages is extracted using identifiers, regular expressions, xpath queries and microformats. it is noted that the syntax of chemical and other identifiers is generally not distinct enough to detect them with perfect recall and optimal precision. it is easiest to write regular expressions for the doi and the inchi with a high precision, compared to, for example, the pdb id which has a syntax which can clash with other web page content.

microformats offer a solution for such less well-defined identifiers. this technology is used to wrap identifiers with some semantic markup so that the userscript can easily extract the identifiers using xpath queries. however, microformats do not incorporate a mechanism to provide details on what a microformat means. that is, microformats are not backed up by a specified ontology. as a result the chemical 'smiles' microformat, to markup smiles, may collide with a microformat specification to markup moods.

once the identifier is extracted by whatever means, the userscripts can either create links to other web resources, or query those resources and embed results into the html of the web page on which the userscript is run. while any http-based approach can be used for this, the example userscripts show that combining xmlhttprequest with json  <cit>  is a rather straightforward approach.

CONCLUSIONS
we have shown that userscripts are a simple and useful way of integrating bio- and chemoinformatics web resources. in particular, they permit  the augmentation of existing websites with functionality not envisioned or indeed wanted by the original author,  the integration of information from different domains, and  a connection point between the social web  and traditional web tools and sites. we continue to find interesting uses for userscripts, and we hope this manuscript will spur others to do likewise.

availability and requirements
• project name: userscripts for chemistry and biology

• project home page: blue obelisk  <cit>  website  <cit> . download link: 

• operating system: platform independent

• programming language: javascript

• other requirements: firefox with greasemonkey add-on  for userscript support; java is required to view the jmol applet; a connotea account is required for the add to connotea userscript

• license: gnu gpl, bsd

• any restrictions to use by non-academics: none

authors' contributions
nmob, elw, hg and dj have written userscripts mentioned in this text. rg developed and maintains the 3d structure database and contributed to the development of the pub3d userscript. dw and cs devised and tested some of the userscripts. all authors have read and approved the final manuscript.

