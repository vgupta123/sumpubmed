BACKGROUND
the use of computational modelling is becoming widespread within the biological community. models are applied to a diverse array of problems and are now a standard analysis technique used both in academia and industry.

although modelling is now widely used, the methodology that supports modelling remains underdeveloped. in particular, a model will often develop and change over time, giving rise to many model versions but there is very little published work on model version control. some aspects of model version control are similar to the established field of software version control. however, there are a number of significant differences that mean a separate treatment is needed.

many of the differences between software and model version control have at their core a difference in aims. the aim of a piece of software is to address a specific problem, described by its requirements. the aim of a model is the far more vague goal of understanding a biological system, sometimes expressed as specific questions , sometimes as how behaviour might change under different conditions and sometimes as a more general exploration of system properties.

this contrast between the convergent aims of a software project and the more divergent aims of a modelling project make the version control needs fundamentally different. these differences include the need to manage combinations of model versions, giving rise to a much greater branching factor. there is also a need to maintain a larger number of alternatives that are still relevant at any given time.

to address these differences, we have devised a flexible patch-based version control system that differs from existing software patching applications. each patch represents a modification to an existing model: an addition, deletion or replacement of existing pieces. patches can be applied in combination while retaining the original model structure. this allows later patches to work on the original system, or on a configuration created with existing patches. this flexible approach allows a modeller to rapidly explore a wide variety of model configurations without overwriting any previous ideas. we have applied the system to models expressed in sbml  <cit> , to take advantage of the broad support for the language and the regular structure provided by xml documents. working with xml models also means that our system could be easily extended to support other xml modelling tools, such as cellml  <cit> .

in this paper we present details of our patch based system along with a prototype implementation. our method is generic enough to apply to many areas of computational modelling. however, as a motivating example we have developed our methods in conjunction with a specific system: the egf pathway. we illustrate the method with reference to the egf pathway in a variety of versions.

software and modelling version control
software version control
software version control is a mature and established discipline of software engineering. a characteristic progression of versions is shown in the left hand diagram of figure  <dig>  the main features of this progression are:

• versions proceed in a roughly linear fashion working towards a single set of requirements. requirements may change but at any one time there is only one set.

• each new version represents an improvement over  previous versions.

• branching does occur, but features from different branches are usually folded back into an overall 'best' version.

software version control tools, such as cvs  <cit> , svn  <cit>  and git  <cit> , are designed to support these characteristics of software development with features including distributed access and the ability to fork new versions and merge these together.

model version control
although a pathway model is often a software artifact, there is little published material on using version control systems to track model version changes. there are a number of obvious distinctions between the progression of a pathway model and the progression of a software project. a characteristic progression of versions is shown in the right hand diagram of figure  <dig>  the main features of this progression are:

• a model starts as a simple base and then a number of possible extensions to the pathway are suggested, each of which are largely independent of each other.

• each extended version represents part of the pathway which is only present under certain conditions. an extension may also represent an investigation into whether a particular extra section of pathway is important or not. each new version may represent the same part of a pathway under a different hypothesis, but is not necessarily an improvement or replacement for another hypothesis.

• branching generates a combinatoric effect; each new extension can be applied to all the previous combination of extensions.

it may be possible to manage such a progression using a software version control system, but it would not be a natural fit. each combination of extensions would be assigned a version number and a user would have to continually track back and forth along this timeline to locate the setup they were interested in. applying a new extension to an existing set of combinations would require a good deal of extra work.

xml diff and patch
a variety of systems already exist to record differences in xml files and allow these changes to be duplicated. a good review of these technologies can be found in  <cit> . several algorithms  <cit>  have been developed to recognise xml changes  and record these changes. there are implementations of these techniques from ibm  <cit>  and others  <cit> .

simulink
simulink is the modelling component of the mathematical toolkit matlab  <cit> . simulink allows model design based on the connection of components and provides integration with version control systems, so that each component can have its own version history.

simulink is a flexible and powerful system, but the version control mechanisms are still based on traditional software version control; the patch-based combinatoric modification of models we propose is not supported.

RESULTS
case study: egf pathway
to demonstrate our system we have tested it on a suite of models based on the egfr/mapk system. the mitogen activated protein kinase  pathway is at the heart of a molecular signalling network that governs the growth, proliferation, differentiation and survival of many, if not all, cell types  <cit> . it is deregulated in various diseases ranging from cancer to immunological, inflammatory and degenerative syndromes, and thus represents an important drug target. perhaps the most important and intensively studied mapk pathway is the extracellular-signal regulated kinase  pathway, which is typically initiated by the activation  of cell surface receptors, such as the epidermal growth factor  or nerve growth factor  receptors . in essence, there are two distinct pathways leading from activated receptors to erk activation, the ras pathway which proceeds via sos-ras-raf <dig> and the rap <dig> pathway which proceeds via c3g-rap1-braf. activated erk has numerous targets in both the cytoplasm and nucleus, including numerous transcription factors, and can therefore directly effect gene expression and influence cellular outcome. in addition, erk is able to phosphorylate sos  thus forming a negative feedback loop within the pathway  <cit> .

one of the most common cell lines used to investigate erk signalling from growth factor receptors is the pc <dig>  cell line. in pc <dig> cells, egf stimulates a rapid but transient activation of erk, peaking at  <dig> mins and returning to basal levels at  <dig> mins, leading to cellular proliferation  <cit> . in contrast, nerve growth factor stimulates a sustained activation of erk leading to the neuronal differentiation of pc <dig> cells  <cit> . there is now compelling evidence that the duration of the erk signal governs whether pc <dig> cells proliferate or withdraw from the cell cycle and differentiate into a neuronal phenotype  <cit> . although the pc <dig> system has been well studied, it is still unclear how different erk signal dynamics can be robustly controlled by different upstream receptors. furthermore, there is a currently some debate as to which of the two pathways  is utilised by the different receptors to activate erk and relay their signal. some groups have reported that both egf and ngf can only use the ras pathway  <cit> , whilst others report that ngf but not egf can also use the rap <dig> pathway  <cit> , whilst another group has reported that both ngf and egf can use both the ras and rap <dig> pathways  <cit> . over recent years the computational modelling of biological systems has become increasingly valuable and there are now a wide variety of models of the erk pathway available which have led to some novel insights and interesting predictions as to how this system functions  <cit> . however, none of these studies utilised a modular or patch approach in their model design and analysis. this is unfortunate, given that the erk pathway can be utilised by different receptors with different properties, and that there are different pathways that can be used by receptors to activate erk. a patch system would enable one to rapidly build different versions of a receptor system composed of different pathways and feedback loops, as well as enabling the rapid application of the system to different receptors with different properties. this would enable one to rapidly investigate which version best reflects the available biological data, which pathways  are critical for relaying the signal, and also enable the easy comparison of different receptors. to demonstrate the potential of our patch approach, we took the computational model of the erk pathway developed by brown et al.   <cit>  and split it into a number of distinct patches . we investigated the debate surrounding the use of the ras and rap <dig> pathways in ngf receptor signalling by utilising the patch approach to generate and compare three different models of the receptor system. all three models included the core erk patch  and then the following model specific patches:

 <dig>  ras model: this model included the ras pathway patch  and the sos feedback patch .

 <dig>  rap <dig> model: this model included the rap <dig> pathway patch .

 <dig>  ras & rap <dig> model: this model included the ras pathway patch  and the sos feedback patch , as well as the rap <dig> pathway patch .

we first created the ras model by using our patch tool to select our core erk patch  along with the ras , and sos feedback  patches and subsequently launched and simulated the model in copasi. we then used our patch tool to create the rap <dig> model by deselecting the ras and sos feedback patches and selecting the rap <dig> patch instead, then re-launched copasi with the new model whilst maintaining our original simulation and plot settings. the ras & rap <dig> model was then created and simulated in a similar fashion. as can be seen in figure  <dig>  the ras model produces a transient active erk response whereas the other two models, which both include the rap <dig> pathway, produce a sustained active erk response. as ngf is well known to stimulate the sustained activation of erk in pc <dig> cells, our simulation results suggest that the ngf receptor must signal via the rap <dig> pathway in order to achieve this. overall, this example illustrates the potential of our patch approach as it enables one to rapidly create different versions of a system to investigate the role that entire pathways play in the dynamics of signalling and investigate which one best reflects the available biological data. to accomplish this manually can often be a tedious affair where reactions and species are manually deleted to create new model files which are individually named and saved. however, if an error is found or an update/expansion is required, all of the saved files containing the different model versions may well need to be changed, whereas with our approach only the corresponding patch will need to be changed once. the close integration of our patch tool with the simulation tool copasi is also extremely useful as once patches have been selected the model can be rapidly simulated and analysed, especially as both simulation and plot options are maintained as models are updated.

the patch approach can also be used to create dependent patches which are patches that can only be introduced into a model when a specific patch is already present. this is a useful feature when one wants to apply changes to an existing patch, such as kinetic parameter changes or species knockouts. in biological terms, such species knockouts could represent the available rnai's to knockout proteins by knocking down gene expression, enabling one to investigate which proteins play the biggest role in transducing the signal. one interesting area of current research is focussed on how the egf receptor system can be manipulated to give a sustained rather than a transient response  <cit> . using our patch tool to investigate this, we created two species knockout patches which knockout rsk and pi3k, respectively. as can be seen in figure  <dig>  knocking out pi3k has little effect on the active erk plot whilst knocking out rsk has a dramatic effect with the active erk signal switching for a transient to a sustained response. knocking out rsk effectively knocks out the negative feedback loop from erk to sos, which suggests that this feedback loop is essential for signal termination. whilst knocking out pi3k effectively knocks out the whole akt pathway, as no other species can activate akt, which suggests that the akt pathway plays little role in either signal initiation or termination.

our patch approach and tool can also be used to create patches that are mutually exclusive which is a useful feature when investigating cancerous mutations. the erk pathway has long been associated with cancer as mutations to various proteins in the pathway are well known to result in the constitutive activation of erk leading to uncontrolled cell growth  <cit> . for example, one of the most common ras mutations is a glycine to valine mutation at residue  <dig>  which renders ras insensitive to inactivation by ras-gap and thus locked in the active state  <cit> . to illustrate the potential of our patch approach, we constructed a cancerous ras pathway patch containing a constitutively active ras and made it mutually exclusive with the standard ras pathway patch. as can be seen in figure  <dig>  swapping the standard ras pathway patch for the cancerous ras pathway patch results in the active erk signal switching from a normal transient response to a constitutively active response. this example illustrates the potential of the patch approach in investigating the effects of diseases such as cancer where patches representing normal and mutated/modified conditions can be created. one can imagine a situation where patches representing the different cancerous mutations have been generated along with patches representing the most common drug treatments allowing one to test which drug/combinations are the best treatments for each of the different forms of cancer. to illustrate this, we created a parameter change patch to represent a hypothetical drug capable of increasing the kcat value of pp2a by a factor of  <dig>  this means that one can simply select the drug from the list of parameter patches and then simulate the model to analyse it effects. as can be seen in figure  <dig>  such a drug appears to be an effective treatment against cancers caused by rasv <dig> 

discussion
future work
standardised tools
for simplicity and convenience, our tool was based on an in-house implementation of the xml-diff techniques. however, it would be good software engineering practise to base our tool on an established xml technology such as  <cit> .

version control and source code management
in this paper, we are concerned specifically with version control: how to allow a modeller to extend and change their model and revert to previous versions if necessary. this is distinct from source code management , which provides a group of programmers with a means to collaborate on a software project by managing the source code, although most scm systems include a version control facility. our work could easily be extended to encompass elements of source control management. the base model and patches could be uploaded into a scm system such as svn, which would allow users to upload new patches, amend existing patches and access the entire set of patches from a collaborative project. the difficulty with such an approach is defining the granularity of a model amendment. when a change is made to a model, should this be change to the base model, to one of the existing patches or an entirely new patch?

the view of the authors is that an xml patching system should be seen as complementary to existing scm approaches. xml patches make hypothesis testing and combinatorial model changes far easier to manage but are not a replacement for disciplined use of an scm in a collaborative environment.

model repositories
the issue of model granularity also arises when deciding how to submit a patch-based model to a model repository, such as biomodels.net  <cit> . many patch based models will not have a complete amalgamated version since removal patches may remove some of this amalgamated behaviour. one possibility is to upload a number of patch combinations for the model representing some more important configurations. whether this is feasible will depend on the final number of important patch combinations.

ideally, it should be possible to upload a base model and set of patches to allow other database users the flexibility to patch and use the model as intended. in this case, a patch standard should be devised with a reference implementation to allow model databases to support patch upload and application. this would be a more long-term development for this work.

model provenance
it might also be useful to include further methodological provisions to document model development and provenance. the plots resulting from a model run should be stored along with the configuration of patches used to generate those plots. these model reports should be stored in a database for search and retrieval. this infrastructure would leverage the patching approach to improve the efficiency of model development, as described in  <cit> .

however, we believe that the best way to drive further work is to be motivated by ongoing projects. we are working with members of the simap  project at glasgow to develop patching tools specific to the modelling needs of that project to develop the patching approach as it can be most useful to active work.

element name clashes
our patch system relies on unique element identifiers to make unambiguous references into each xml document. in larger projects with many contributors, the patch system should provide some further support to help avoid name clashes.

as a first step, the patch-set should include a name-space summary that shows what names are present in the model and in which parts of the model, base or patches, each name appears. the patch system should also allow annotations to be added to this name-space to provide a more detailed description of each name and how it differs from similar names. new patches should refer to this name list and warn where name clashes exist.

ideally, the names used in a model should be based on a controlled ontology, similar to the gene ontology  <cit> . this would reduce the possibility of ambiguity to a minimum, make it clear what is referred to by each model element and facilitate interoperability between models.

other sbml features
our case study only addresses modifications to species, reaction and parameter elements. however, alterations to other sbml elements should be accommodated. for example, introducing sbml events would be an addition patch of the chosen events. altering the triggers for these events would be replacement amendments for those triggers.

in some cases, the introduction of these new elements may constitute a broader structural change to the model, which would require treatment outside of the patch system .

structural changes
the xml patching system works well where new conceptual features, such as pathway sections, are introduced and removed from a system. however, it is not so appropriate when a model undergos a large structural change.

for example, if an existing model is converted to use sbml compartments, this would mean assigning all species to a compartment, so an appropriate patch would represent the entire model changing. in this case, it would be easier to start again with a fresh model of the new structure.

once a model is built around compartments, new patch sets may be needed to represent common operations on compartment models. these could still be based on the addition, deletion and replacement amendments, but these may need to be mixed in a single patch set. for example, a species may be moved from one compartment to another – a deletion and addition amendment in the same patch set. this would necessitate dependency checking to ensure that other patches do not attempt to delete this species after it has been moved somewhere else.

managing other model types
cellml is similar in structure to sbml and the addition, deletion and replacement patch approach should be applicable here. new cellml components can be added using addition patches or existing ones augmented or reduced using addition and deletion patches. the component framework of cellml might allow a broader application of the patch approach. an addition could be used to represent the insertion of a component and this same patch may be used to insert this component into a variety of base models. some additional information may be required to tailor the component interface to a variety of models, but it may be possible to implement a component approach to modelling in this way.

as with sbml, deeper changes may cause alterations across several elements; these can be represented with a combination of addition and deletion patches but may require dependency checking not to break the application of other patches. again, as with sbml models, deep structural changes might be better represented with an entirely new model.

the addition-deletion-replacement scheme might also work effectively to manage a set of model versions in a broader environment – a matlab model, or one written in c++ for example. these generic models can still be represented as a base and a set of changes, although the implementation of identifying and applying changes will need to address the model representation.

CONCLUSIONS
we have presented a version management system for pathway models. we have shown how using sbml documents can allow the application of separate model amendments in combination by using an xml patch system. we have also presented an implementation of these ideas and their application in a case study.

