BACKGROUND
ontologies constitute an increasingly important knowledge resource. in the biomedical domain the engineering of ontologies is predominantly organised by the open biomedical ontology  foundry  <cit> . ontologies arrange terms hierarchically, connected by relationships in directed acyclic graphs. obo ontologies represent formalised biological knowledge and are broadly used in the analysis and interpretation of experimental results, e.g. by linking gene ontology  terms  <cit>  to gene sets  <cit> . ontologies provide also an important resource to find accurate terms for use in scientific reports.

many tools are available for browsing ontologies . several of them are integrated in systems dedicated to analyse specific data sets . other tools are designed for more general-purpose ontology exploration, such as quickgo  <cit> , amigo  <cit> , or ncbo’s flexviz  <cit> . some of these ontology viewers are text-based, i.e. they use a folder/subfolder-interface to explore hierarchies . however, many ontologies feature multiple-inheritance: they have terms that are linked to more than one parent. this multiple-inheritance is more clearly visualised in a two-dimensional display, with nodes and connectors in between. for instance, the ontology lookup service  offers static images that clarify better how terms are positioned and related to adjacent terms in the hierarchy, and it provides this unified interface for the browsing of  <dig> bio-ontologies  <cit> . also, the ncbo bioportal features the graph browser flexviz, which draws subgraphs from  <dig> ontologies and allows clicking on terms to bring up its local environment   <cit> . flexviz is one of the most powerful viewers currently available. but despite the added flexibility and user-interaction support, this graphical browser may feel rigid and sometimes confusing, because it only shifts between static, pre-calculated, and often sub-optimal configurations. the addition of new terms may therefore result in large graph reorganisations that are often hard to follow.

one can easily experience why we consider the ncbo bioportal’s flexviz not an optimal viewer even in simple use scenarios, by trying for example the following exercise in flexviz: open the ontology ‘gene ontology’, search for ‘mitochondrion’, and then expand some terms upward towards the root, e.g. ‘intracellular membrane-bound organelle’ and then ‘intracellular organelle’. when doing so, one is confronted with terms moving all over and far out of the viewport, with the viewport shifting over large distances. this is caused by many terms being placed next to each other on a too wide hierarchy level. much of the overview is lost, and an attempt to regain some of it back by zooming out will leave the node labels too small to read. using other layout algorithms than the default one  seems also less than satisfactory.

although flexviz constitutes an interesting first step towards a fully flexible and user-friendly browsing experience, it leaves room to explore alternative approaches to ontology visualisation. we therefore investigated if the use of a fundamentally different layout method would give a better user-experience for the general-purpose browsing of ontologies. we chose to implement a real-time, force-based layout algorithm, which can organise nodes and connections globally and dynamically. first, it uses a ‘minimum energy’ principle, ensuring that nodes and connection-structures are distributed optimally relative to each other in the available screen space. second, it immediately responds when  the user interacts with the graph, updating the nodes’ positions continuously until a new optimal configuration is reached.

RESULTS
web-based ontology visualisers are largely used for browsing and to analyse the placement of a given term in an ontology. they help to get a grasp of the local environment of a term of interest or to view terms that form the connection to the root term . as bio-ontologies are getting increasingly complex, browsing through them requires a visualiser that offers more intuitive functionalities such as the autosuggestion of terms, an ‘undo’ function, filtering for relationships and additional functions that facilitate smooth and user-friendly browsing. the visualisers that are currently available only have some of these characteristics, and often show limitations with respect to browsing speed, scalability issues, context-based display of a term’s environment, or overall user interaction support. this prompted us to create the web application olsvis: a fast, interactive visualiser to explore ols ontologies based on minimal and smooth relayouts. olsvis exploits the speed and ease-of-use of the wordvis application  <cit> . inspired by the ontology lookup service, we applied the concept of a term’s local environment  as the basic viewing unit for the visualiser. we illustrate the advantages of olsvis through three use cases, exemplifying both the added functionalities and the enhanced user-experience that olsvis brings to ontology visualisation. use case i demonstrates a general overview of the features of olsvis, highlighting its interactive environment using the gene ontology. use case ii illustrates an approach to view common ancestor terms shared between two gene ontology terms; and use case iii demonstrates the visualisation of the local neighbourhood of a protein.

use case i: browsing ontologies in olsvis
the first use case illustrates how olsvis can make ontology browsing more intuitive: a user is interested in the placement of the term ‘mitochondrion’ in the gene ontology hierarchy. she can proceed in two ways: a) select the ontology of choice and then search for the chosen term, or b) do a direct search for the go term ‘mitochondrion’. autosuggestion enables her to perform a quick selection of the term from the autosuggest list. autosuggestion also highlights the occurrence of the chosen term in other ontologies. the user selects the go entry, in this case ‘mitochondrion’  and olsvis shows the official go term centered in the visualiser, along with its child terms and all paths of ancestor terms up to a go root term . the display of the local environment of the term is dynamic and the visualiser allows the use of various features to further refine the display . for instance, the ‘eraser’ tool can be used to hide unnecessary terms from the display panel. in some cases the relation names are abbreviated for a clearer view and displayed in full by mouse-hovering. parts of the graph can be made less/more compact by increasing/decreasing the length of connectors. also, similar to modern map-applications, olsvis supports moving the graph by dragging its background and zooming by mouse scrolling. furthermore, a ‘filters’ panel is provided to assist the user in narrowing or broadening the search space. in figure  <dig> both ‘is_a’ and ‘part_of’ relations are shown.

other improvements that olsvis provides concern the animation and presentation of terms after specific user actions. for instance, clicking on ‘cytoplasm’ will shift the display into cytoplasm’s local environment . the algorithm switches between local environments by gently pushing out terms and inserting new terms, which allows a user to easily keep track of the changing display. a button on the toolbar may be used to prevent automatic removing of nodes. its dynamic layout algorithm and the additional graph interaction tools all contribute to the user-friendliness of olsvis. furthermore, olsvis allows the user to save the local environment in xgmml format that may be imported in network building tools such as cytoscape  <cit> . alternately, the user can obtain the list of nodes and relationships in the current view in a tab-delimited file.

use case ii: identifying shared ancestor terms between two ontology terms
suppose a user wants to identify the common ancestry between two different terms, in order to assess their relatedness. use case ii shows an example based on the cellular components ‘mitochondria’ and ‘sarcoplasm’. here the user first selects ‘gene ontology’ from the ontology list and then enters two terms in the search box, separated by a comma. olsvis reads both text strings as separate terms, matches them to their respective terms in the selected ontology, go, and then displays a merged view of their local environments. figure  <dig> shows the terms that hereby are displayed, linking ‘mitochondria’ and ‘sarcoplasm’ and showing their shared connections. additionally, for customised visualisation, shared terms could be repositioned and fixed by using the ‘anchor node’ functionality. non-anchored terms will slide to new optimal positions. this example demonstrates the potential of olsvis in displaying environments for multiple terms which is currently not available in any other visualiser.

use case iii: visualising the local neighbourhood of a protein
biologists are often interested in understanding the various attributes of a particular protein such as protein modifications, biological functions, or protein interactions. use case iii illustrates how olsvis can be used for visualising the local neighbourhood of a protein. in this example the protein is cdc <dig> . the user enters the string ‘cdc23’ and the autosuggestion list shows a number of matches from the cell cycle ontology   <cit> . selection of the term ‘cdc23_human ’ displays the local neighbourhood of this term whilst providing a warning message that alerts the user as to the large number of terms associated with the chosen protein. when browsing large ontologies , a user usually has to deal with performance issues as the visualiser may actually fail to load the subgraph due to its size. instead, olsvis loads up to  <dig> terms smoothly and if more it gives a notification to the user. the user is suggested to use the filter panel to narrow the search space for improved performance and viewing. for example, clicking on ‘parents only’ will update the current view with a simplified graph . alternatively, a number of relation types could be filtered away. here we note that cco includes bidirectional relationships, so leaving some out can clarify the intended parent–child hierarchy. the user may then choose to save the current display in formats provided by olsvis. for instance, biologists to a large extent still work on spreadsheets where they periodically associate a particular protein of interest with an ontological term. in such cases, saving the current view in a tab-delimited format makes it easier for them to use the terms associated with a protein in their annotation work.

implementation
for the client-side of the software, we used the modern web technologies of javascript and the new html <dig> standard. in contrast to traditional flash-objects or java-applets, which are isolated objects in the web page, javascript and html <dig> make it possible to create animations that are fully connectable with other elements on the web page, and that require no extra browser plugins. html <dig> defines the < canvas > html-element, basically a rectangular empty space on the web page, onto which javascript code  draws basic shapes like lines, circles, text, etc. note that the older svg  technology requires computationally expensive  dom-updates; therefore only canvas is appropriate for smooth animation of large graphs. because a sufficiently powerful javascript library for animated graph browsing did not exist yet, we wrote one from scratch: graphvis. we first applied graphvis in the webapp wordvis  <cit> , which visualises wordnet, a lexical database of english  <cit> .

layout engine
we applied our graphvis layout module to the exploration of ontologies in olsvis, and upgraded it among others with hierarchical layout for parent/ancestor terms, see figure  <dig>  when the user searches for an ontology term, olsvis will by default show it together with its child terms and parent terms up to the ontology root, see figure  <dig>  after initial placement of ontology terms, olsvis uses a real-time force-based layout algorithm that gently moves the terms towards more optimal positions. the algorithm is explained in  <cit>  and  <cit> . it models nodes as repelling, electrically charged rectangles. this distributes them over the screen, prevents them from occupying the same space , and prevents term labels from overlapping. connections are modelled as mechanical springs, which hold nodes together and which may be given a specific preferred-length in order to create a certain global structure in the graph. connections may also have a preferred orientation . this layout is fully interactive: each time the user makes a change , it smoothly yet minimally reorganises the graph. this assures an optimal viewing experience that minimises each operation’s effect on graph reorganisation, and maximises the user’s ability to keep track of changes and comprehend the new lay-out.

data source
olsvis visualises the contents of the ols database  <cit> , which holds around  <dig> bio-ontologies and over  <dig> million concepts. olsvis uses a local copy of ols‘ publicly available database, in order to provide a smooth visualisation with fast response times. only via a local copy placed on olsvis’ server can the node environments be calculated sufficiently fast. the use of the ols web-service to retrieve data proved to be painfully slow, because each mouse click required several web-service queries, which typically resulted in total query times of several tens of seconds. ebi updates the ols database weekly by polling its ontology providers through the cvs and svn version control systems. olsvis detects ols’ updates automatically and then updates its local copy. in addition, a number of table-indexes and pre-calculated fields are added to enable the speed of olsvis. on the server-side of olsvis, php scripts translate client-side requests into custom queries on the local mysql database. note that the web-application’s front-end is designed independent from the database back-end. given software that would be able to calculate node-environments  in reasonably short times, the visualiser would be usable also for other semantic resources.

term searching
while the user types one  terms or identifiers  in the search box, a selection of best known matches is shown in a pop-out list. this includes preferred terms as well as their synonyms. for each autosuggested term, the ontology’s name and identifier is shown, and mouse-hovering shows its ontology’s full name. autosuggestions can be confined to a single specific ontology by selecting one from the drop-down list. pressing ‘enter’ in the search box will display the term that is selected in the autosuggestion list. if the user has no term selected, olsvis will take the first term .

basic visualisation
the chosen term is then expanded: it is placed in the centre of the graph panel, amidst its local environment of child terms and parent terms, and connected with further ancestors up to the ontology root. this configuration is inspired by ols’ static images  <cit> . child terms are ordered in a half circle under the expanded term; ancestors are put in hierarchical levels above it. relations are shown as labelled arrows; their lengths are adjusted for good hierarchical positioning. after initial placement, the visualiser slides terms to more optimal positions via real-time animation; hereby the graph ‘feels’ and behaves as if terms are repelling electric charges  that are connected over mechanic/elastic springs. this creates a layout that minimises term overlap. in addition, the connecting arrows undergo a small north–south orienting force to enhance a hierarchical alignment of terms. the visible graph is fully customisable: see the toolbar in figure  <dig> or the online description for mouse/keyboard shortcuts. it has undo/redo history, and terms can be dragged and pushed around. clicking on any displayed term will re-centre on that term and expand its local neighbourhood. hereby the graph is subtly reorganised via real-time animation, and is transformed into the new term’s local environment . this enables easy and intuitive browsing through ontologies. the automatic removal of already visible terms can be turned off via the rightmost button on the toolbar. hovering over any term makes its definition pop up. for a relation arrow, its non-abbreviated name pops up. leaf terms  get a slightly orange background. the three most common relations  get a coloured arrow. in the left panel, data for the last expanded term is shown: its identifier  and definition; its synonyms, annotations and cross-references ; and its child terms , to make them easier visible when there are many. when zooming in, olsvis increases distances faster than font sizes; this is more useful and is an extra method  to counteract overlapping terms.

customised visualisation
a click on ‘filters’  brings up a panel to set filters that prune the expanded node’s environment. for instance, any relation type can be excluded; this means that they are omitted when building e.g. the path-to-root. initially the three most common relation types are listed in the panel; this list grows each time the visualiser encounters new types. relation types that are currently in the visualiser are highlighted. the filter that hides obsolete terms also hides them in autosuggestion lists. earlier expanded terms and their environment are by default automatically removed when clicking on a new term, but can be kept in the visualiser by turning off the rightmost toolbar button. several toolbar tools enable further customisation of the graph. connections can be made longer or shorter . terms can be anchored to a fixed position, and anything can be removed manually via the eraser tool.

more features
a ‘roots’ link appears next to the search box after selecting a specific ontology. clicking it shows and expands this ontology’s root term , i.e. showing them and their child terms. this enables easy top-down ontology exploration. multiple terms and identifiers can be searched, separated by commas. therefore in-term commas must be preceded by a backslash, and genuine backslashes doubled. first hits from autosuggestion are then expanded. when a term’s local environment contains too many terms , olsvis will only show the first  <dig> terms and will suggest using filters. olsvis supports url-shortcuts:

 a term or identifier can be expanded directly via urls like: ols.wordvis.com/q = go: <dig>  or …/q = mito. the part after /q = will be put in the search box and the first term that would have been autosuggested will be expanded.

 a specific ontology can be preselected via a url like: ols.wordvis.com/ont = go. the part after /ont = is the ontology’s short name from the selection list. this is a shortcut for users that are mainly interested in a specific ontology.

 ‘q’ and ‘ont’ can be combined like: …/ont = go&q = mitochondrion,sarcoplasm , which also illustrates a multi-term query.

 some ontologies use non-standard prefixes in term-identifiers , so identifiers may be disambiguated by adding their ontology’s short name as prefix, e.g. …/q = newt: <dig>  or …/q = zfa:zfs: <dig> 

terms in the graph can be right-clicked for more options. the visible graph can be exported to an xgmml file  and can subsequently be imported in cytoscape  <cit>  for further analysis. there, node labels will show the term names, and ‘ontid’ attributes store the ontology identifiers. in addition, nodes and relations can be exported to a tab-delimited text file.

comparison with other visualisation tools
the utility and performance of olsvis was assessed in comparison to other tools commonly used for ontology visualisation, including some biological data analysis tools that have visualisation components integrated in them, as listed in table  <dig>  the evaluation addressed a number of criteria, including tool functionality ; scalability ; and some aspects that capture user-friendliness and intuitiveness of browsing . the table shows that some of olsvis’ features are not provided by any other visualiser, and that the other tools only support a subset of what olsvis offers. clearly, olsvis offers the most interactive visualisation environment. flexviz ranks well too, as it also provides a relatively high level of user-interaction; however, olsvis makes more efficient and intuitive use of the available screen space.

1: only shifting between static configurations. 2: also during the several editing functions . 3: each with their own shortcomings, see ‘background’. 4: browser’s back button. 5: the visualiser can optionally clean up nodes that are not in the latest expanded node’s “environment”.

comparison with: ols  <cit> , flexviz  <cit> , ontoviz  <cit> , isaviz  <cit> , gosurfer  <cit> , gominer  <cit> , ontotrack  <cit> , obo-edit  <cit> , quickgo  <cit> , amigo  <cit> ).

CONCLUSIONS
olsvis was created to improve the exploration of bio-ontologies. other visualisers like flexviz, may feel rigid and sometimes confusing, because the addition of new terms may result in largely rearranged term displays. olsvis demonstrates that the user experience for ontology exploration can be substantially improved by using real-time animation of force-based graph relayout, and by providing improved user interaction on the graph’s structure. this new webapp provides the scientific community with a versatile and more user-friendly tool to explore ontologies and to find related and more precise ontology terms.

availability and requirements
· project name: olsvis

· project home page:http://ols.wordvis.com

· operating system: platform independent

· programming language: javascript, php, 

· other requirements: modern browser: recent version of firefox, chrome, opera, safari or internet explorer. . no browser plugin needed.

· license: the web-application is freely accessible for use.

· any restrictions to use by non-academics: no specific restrictions.

abbreviations
cco: cell cycle ontology; cvs: concurrent versions system; ebi: european bioinformatics institute; go: gene ontology; ncbo: national center for biomedical ontology; obo: open biomedical ontology; ols: ontology lookup service; svn: apache subversion; xgmml: extensible graph markup and modeling language.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
sv designed and programmed the software and drafted the manuscript. av helped testing the software and draft the manuscript. mk helped conceive the web application and draft the manuscript. all authors read and approved the final manuscript.

