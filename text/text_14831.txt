BACKGROUND
metabolic engineering  deals with designing organisms with enhanced capabilities regarding the productivities of desired compounds  <cit> . this field has received increasing attention within the last few years, due to the extraordinary growth in the adoption of white or industrial biotechnological processes for the production of bulk chemicals, pharmaceuticals, food ingredients and enzymes, among other products  <cit> .

many different approaches have been used to aid in me efforts, taking available models of metabolism together with mathematical tools and/or experimental data to identify metabolic bottlenecks or targets for genetic engineering. some of these techniques, like metabolic control analysis , use dynamical representations of the metabolism, while others like metabolic flux analysis  or flux balance analysis  apply steady-state stoichiometric models to study the phenotype of microorganisms, under different environmental and genetic conditions .

also based on stoichiometric networks, the field of pathway analysis characterizes the complete space of admissible flux distributions, allowing the analysis of the meaningful routes by dissecting them into basic functional units named elementary flux modes   <cit> . therefore, efms analysis is a valuable tool in me but its application is limited by two issues: the problem of calculating efms in large networks is computationally very hard and, even if this process is successful, their analysis is also difficult, given their high cardinality.

although many nice examples have been described on successful modifications of the microbial metabolism using the above-mentioned techniques , very few methodologies exist that effectively aid in the rational design of microbial strains by, for example, pinpointing the genetic modifications that can lead to enhanced production capabilities, by using available genome-scale mathematical models . this limitation is related with the fact that genome-scale models account for a significant number of genes and reactions, and therefore any resulting me problem will require quite robust optimization tools.

one of the first approaches to tackle this class of problems was the optknock algorithm  <cit> , where mixed integer linear programming  is used to identify an optimum set of knockouts under a metabolic steady-state approximation. an alternative solution was proposed by the optgene algorithm  <cit> , that considers the application of evolutionary algorithms  and simulated annealing  in this scenario. these meta-heuristic methods are capable of providing near-optimal solutions within a reasonable computation time, being also quite flexible regarding the objective function that can be optimized .

however, the application of such optimization algorithms and even the use of genome-scale metabolic models for pure simulation has been limited to the developers of the techniques or experienced bioinformaticians, since a platform that provides a user friendly interface to perform such tasks is not yet available. the computation of efms is also enabled by some applications, but there is the need of proper tools to conduct the required analysis to fully take advantage on the results in an me perspective.

furthermore, the solutions obtained by using those methods or the strategies inferred by model simulations need to be validated before the implementation in the laboratory, because of model uncertainties. this validation is hampered by the complexity of the model itself and of the solutions obtained. in fact, if an me target is most often not obvious, the analysis of a possible solution given by an algorithm is definitely difficult to interpret and validate.

while, in  <dig>  the need for mathematical and computational tools to aid in me efforts was already identified by james bailey  <cit> , by the time of writing of this text very few user-friendly software tools were still available.

besides some tools developed a few years ago, such as fluxanalyzer  <cit>  and metafluxnet  <cit> , recently the cellnetanalyzer  <cit>  , the cobra toolbox  <cit>  and the systems biology research tool   <cit>  have been launched. cobra and cellnetanalyzer are software packages running over the matlab environment. both allow performing many tasks useful in me like fba, flux variability analysis and the simulation of gene deletion mutants. cellnetanalyzer is, however, a more comprehensive software tool that allows to analyse metabolic, regulatory and signalling networks. cobra was built mainly to perform flux and pathway analysis, either with or without experimental data. the sbrt consists of an open-source platform implemented in the java language and allows performing most of these operations, and also includes other capabilities such as data analysis tools. however, the sbrt and cobra present an important limitation, since they do not provide a user-friendly interface.

two other applications have been recently proposed: yanasquare  <cit>  and sna  <cit> . the first is an application developed in java with a user interface, while the latter is a mathematica package. both these tools are essentially focused in calculating the efms of a network and using those to perform the analysis of its metabolic capabilities. however, they are quite limited from a me perspective .

furthermore, none of the aforementioned tools allows to perform strain optimization functions, i.e. they do not per se include algorithms for the identification of potential me targets. additionally, there is also a need for appropriate model visualization tools associated with simulation software.

given the huge potential impact of the growing number of genome-scale metabolic models  <cit> , the availability of open source simulation and strain optimization software would be a key to their further development and exploitation. at present, experimenters from both academia and industry find it very difficult to use genome-scale stoichiometric models for simulation and optimization purposes.

towards the purpose of changing this scenario, we hereby introduce optflux, a software tool that aims to be the reference platform for the me community. the main features of this tool are the following:

- open-source - it allows all users to use the tool freely and invites the contribution of other researchers;

- user-friendly - facilitates its use by users with no/little background in modelling/informatics;

- modular - facilitates the addition of specific features by computer scientists, given its plug-in based architecture;

- compatible with standards -compatibility with the systems biology markup language   <cit>  and the layout information of cell designer  <cit> .

at the current version , the software accommodates several tools and algorithms that have been developed for the manipulation of metabolic models:

• methods for phenotype simulation, such as fba, minimization of metabolic adjustment   <cit>  and regulatory on/off minimization of metabolic flux changes   <cit> ;

• methods for mfa, allowing the introduction by the user of values for experimentally measured fluxes and calculating the effects on the flux space;

• elementary modes analysis, allowing the calculation of the set of efms for the network and its visualization and further analysis;

• strain optimization algorithms: optknock, eas and sa.

• a suitable model visualization tool to facilitate the interpretation of results.

to the best of our knowledge, this is the first tool that allows performing strain optimization in a user-friendly interface and the first effort to create a community-based and community-oriented software for me with such characteristics.

the main concepts used in the development of optflux and its main functionalities are presented in the next sections.

implementation
optflux is fully implemented in the java language, which is being increasingly used by the scientific community. biovisualizer is based on the jung java library  <cit> . the only non-java parts consisted on the gnu linear programming kit   <cit>  used to execute all linear programming and milp computations and the libsbml  <cit>  used to handle files in the sbml format.

to ensure modularity, optflux is implemented in such a way that new features and services are easily plugged in. it is entirely built on top of aibench  <cit> , a software development framework that was born as a collaborative project between the authors and researchers from the university of vigo in spain.

building applications over aibench brings important advantages to both the developers and the users, given its design principles and architecture. the applications incorporate the three types of well defined objects described before: operations, datatypes and datatype views, following the mvc  design pattern. this leads to units of work with high coherence that can easily be combined and reused. furthermore, it is plug-in based: applications are developed adding components, called plug-ins, each containing a set of aibench objects. this allows reusing and integrating functionality of past and future developments based on aibench.

RESULTS
optflux's main capabilities can be grouped into distinct functional areas that will be described in detail below. figure  <dig> shows the high-level organization of optflux, including the main operations that can be performed within the software. in figure  <dig>  a schematic representation of the main functionalities of optflux is given, showing the typical fluxes of information. starting with a stoichiometric metabolic model that can be loaded in different formats , the user can perform simulations under different environmental and genetic conditions , investigate me targets for improving the production of desired compounds, analyze the flux space given a set of measured fluxes with mfa methods or perform the computation and further analysis of the efms.

the full description of the currently implemented features is provided in the application's set of how to's available at the project's website. furthermore, a beginner's tutorial is available for helping first-time users.

model handling
regarding model handling, optflux makes available a number of operations to visualize, import and export stoichiometric metabolic models, including reactions, metabolites, equations and, if available, gene-reaction associations. it allows the loading of models either from flat text files , from text files following the metatool  <cit>  format or from files complying with the sbml standard. the compatibility with sbml allows the use of models stored in public databases, e. g. biomodels  <cit>  or the bigg database  <cit>  or built using other software tools, e.g. cell designer  <cit> . the process of loading a model is facilitated by the development of a wizard that encompasses several steps, where the user can choose from a number of options related to the format of the input files.

external metabolites and biomass formation reactions are automatically identified from the input files based on an explicit definition, compartment information or by patterns in the names. this information can then be validated or edited by the user.

simulation
the simulation area encompasses the metabolic phenotype simulation methods implemented in optflux, i.e. the algorithms that calculate the values for the fluxes over the whole set of reactions in the model. it is possible to perform simulations of the wild-type  and mutant strains. in the first case, the original model is considered with no additional constraints, while in the latter a number of user selected reactions  are removed from the original model before simulation. the simulation results include, besides the flux values, net conversions and shadow price information and are placed in optflux's clipboard area, becoming easily accessible for further analysis or future operations.

one other feature available is the ability to define specific environmental conditions. these are created by selecting a set of drain reactions  and, then, imposing constraints over the values of their fluxes. as an illustrative example, this allows the definition of aerobic or anaerobic conditions by changing the limits in the oxygen uptake reaction. environmental conditions can be used in both wild-type and mutant simulations.

optflux has three available methods for conducting the simulations: fba , moma  <cit>  or room  <cit> . the first method uses a linear programming  formulation to calculate the values of all the fluxes over the reactions and can be used to simulate either wild-type or mutant strains. to reach the fba solution, by default the flux over the reaction that represents biomass formation is the one being maximized, since this has proven to be a good representation of the natural behaviour of microorganisms in many circumstances  <cit> , but it is possible to perform simulations by maximizing or minimizing any flux of the model.

moma and room are appropriate only for the simulation of mutants, since they calculate the minimum distance solution or the solution with minimum number of changes, respectively, for the mutant strain relative to the original "wild-type" solution . moma uses a quadratic programming formulation while room is implemented based both on the original milp formulation and an lp relaxation of the original milp problem   <cit> .

optflux also includes some features for flux variability analysis . currently, there are two tools available, allowing to:

• calculate the maximum possible value of a selected flux, for a range of fixed values for the biomass flux ;

• calculate the maximum and minimum limits for all fluxes in the model, given a constraint imposed by a user-defined minimum biomass value. if this value is zero, this is equivalent to compute the tight bounds of the fluxes for all reactions.

the calculation of the fluxes can also be performed adding experimental data, used to constrain the original metabolic model, using mfa methods. depending on the number of measured fluxes, the resulting system can be classified as underdetermined, determined or over-determined. determined and over-determined systems are solved using the methods described in  <cit> . concerning underdetermined systems, there are no unique solutions for the unknown flux set. thus, an fba problem is formulated and solved as described previously. furthermore, it is possible to compute the tight bounds respecting the measured constraints.

optimization
the strain optimization area provides the users with interfaces to identify sets of reaction deletions  that maximize a given objective function related with a desired industrial objective. the ultimate purpose of the implemented algorithms is to identify genetic modifications that force the microorganism to produce a particular metabolite, while still obeying the physiological aim of maximizing biomass production.

the optknock algorithm  <cit>  and two meta-heuristic optimization methods, eas and sa  <cit> , are currently available. the first was implemented following the original formulation  <cit>  and also the methods described in  <cit> . it should be noted that in our implementation only freely available solvers can be used, while in previous work the commercial cplex solver has been used. also, from our experiments, running optknock in genome-scale models  is quite demanding and can lead to situations of numerical instability in the solver.

on the other hand, the metaheuristics are configured with some default parameters, using set-based representations that can search through fixed-size or variable-size solutions. in the first case, the user specifies the number of allowed reaction/gene deletions, while in the latter the optimization algorithm also performs the automatic discovery of the optimum value for that variable. both methods were implemented by the authors and the results in several case studies have been previously presented  <cit> .

at present, optflux allows to maximize two different objective functions: yield and biomass-product coupled yield. in the first case, the yield on the desired compound is targeted but a minimum biomass level is imposed, while the second searches for mutants that are likely to exhibit higher productivities, since biomass production is also included in the objective  <cit> .

the high number of variables typically involved in a genome-scale metabolic model makes the optimization task computationally hard. thus, it is important to be able to simplify the models without compromising their accuracy and information content. in this context, two alternatives are available: to simplify the model in terms of its structure  and also to simplify the model using simulation, calculating the limits of the reaction fluxes using a simulation method such as fba.

in the structural simplification context, two operations are available: finding zero valued reactions, i.e. reactions that are mathematically constrained to have the value of zero for the corresponding flux and, also, finding equivalent reactions, i.e. reactions that are constrained to have the same flux value and, therefore, can be replaced by a single reaction.

regarding the simulation-based simplification operations, the original bounds can be replaced by the calculated limits. also, this method can be used to identify zero valued fluxes . it is important to notice that this method is dependent on the environmental conditions defined.

another feature provided is an automatic method for the discovery of essential reactions, i.e. reactions that when disabled, make the organism non-viable. if gene-reaction associations are included in the model, a similar operation can be defined for the discovery of essential genes. in both cases, an organism is found to be viable if the value for the biomass flux is significantly larger than  <dig> . the essential genes or reactions are not used as targets for optimization, since they would unnecessarily increase the number of decision variables and therefore the size of the search space.

elementary flux modes analysis
optflux also allows state-of-the-art efm calculation provided by the efmtool  <cit>  that implements one of the most efficient algorithms available. moreover, it provides a simple user interface that allows an intuitive filtering of the results that match given patterns.

after the computation of the efms, the net conversion associated with each efm is calculated . furthermore, for each net conversion, the greatest common divisor is calculated to improve the reading of the conversion equation. to do so, all the coefficients have to be integers and, therefore, the efm calculation is limited to using big integer arithmetic.

in the filtering step, efms can be selected based on the presence/absence of external metabolites in the net conversions. moreover, they can also be sorted by yield, assuming that an input and an output metabolite are provided.

the user can browse through the filtered conversions in a table that presents the conversion equation, yields and provides access to the set of related efms. this viewer also allows row sorting based on any column criteria. the visualization of the efms is presented in a column-wise table, where each column corresponds to an efm and each line to a reaction of the model. each efm, i.e. its flux values, can be exported to cell designer, if the model was created from a cell designer sbml file. for each reaction in the efm, the line in the cell designer layout is represented with a thickness that is proportional to the value of the flux.

visualization
optflux allows the graphical visualization of the pathways through biovisualizer, a visualization plug-in that was developed to represent metabolic networks as graphs, with a number of distinct node types  and connections.

if a cell designer sbml file is loaded as the model source, automatically it will be used by biovisualizer in the visualization operations, using the layout built previously in cell designer. also, if the original model is loaded from flat files or normal sbml, biovisualizer can work if a cell designer sbml file is available, typically representing only a subset of the whole model  with compatible names for the reactions.

one of the major features of this tool is the ability to associate numerical values to the different types of nodes and edges. this allows the visualization of the metabolic network overlapped by the values of the fluxes obtained in a given simulation. moreover, the flux values can be exported to cell designer if the model was created from a cell designer sbml file.

user interaction
optflux development has taken as a first premise to build a tool aimed at biotechnology researchers and not at computational or bioinformatics experts. thus, the primary goal in the development process was to provide good usability, valuing the simplicity and intuitiveness of the tool.

the user interaction is based on three main concepts, used throughout the application:

• datatypes: represent the distinct types of objects holding the relevant data to the application . each type can have multiple instances  within the application.

• views: represent different ways to visualize the contents of data objects. each datatype can have one or more methods to visualize its instances.

• operations: represent the software functionalities or available actions. when an operation is called, its interface is launched and the input data objects are selected. after being triggered, an operation typically changes or creates an instance of the output datatype.

based on these concepts, a user-friendly graphical user interface  was developed. the original layout of the components can be observed in the screenshots presented in figure  <dig> 

the clipboard on the left  keeps all data objects created within the application, in a logical hierarchy, grouped by their datatypes. the root of this tree is the project datatype that keeps all objects related to a given metabolic model and the analysis performed with it.

the components of a project are graphically shown in the form of explicit hierarchical containers, namely:

• the metabolic model, including the sets of metabolites , the set of reactions with their flux bounds and stoichiometry, the steady state equations and, when available, the encoding genes and the gene-reaction association rules;

• a set of simplified models that are the result of model simplification operations;

• sets of simulation and optimization results, including also mfa and flux variability analysis results;

• other optional objects grouped in the project elements list, including: a model graph for visualization to be used by biovisualizer, environmental conditions, lists of essential genes/reactions, results from efms computation, among others.

when an object in the clipboard is double-clicked, the views corresponding to its datatype will be launched on the right side of the working area . examples of two views of a metabolic model are shown in figures 3b and 3c.

all the available operations are easily accessible, either through the menu in the top or by right clicking the item in the clipboard area, an action that displays all operations that work over that type of argument. snapshots of simulation and optimization operations are shown in figures 3d and 3e.

to make the usage of the software easier, a wizard was developed for creating a new model . this wizard is visible in the toolbar and is also available in the menu. it encompasses a number of steps that allow the user to define the setup for each operation in a straightforward way.

all operations are, at the maximum possible level, default-oriented, thus hiding behind scenes their complexity . nevertheless, they allow more advanced users to fine-tune the parameters available to a given operation.

usage example: succinate production with e. coli
to illustrate the main features of the application, a case study is shown here that considers the microorganism escherichia coli and where the aim is to produce succinic acid, with glucose as the carbon source. the genome-scale model used in the simulations was developed by  <cit> , considering the whole e. coli metabolic network with a total of  <dig> fluxes and  <dig> metabolites. a simpler example is given in the tutorial  where a small model of sacharomyces cerevisiae is used.

succinic acid is one of the key intermediates in cellular metabolism and therefore an important case study for me strategies  <cit> . in fact, knockout solutions that lead to improved phenotypes regarding the production of succinic acid are not straightforward to identify since they involve a considerable number of interacting reactions. additionally, it is a chemical used as feedstock for the synthesis of a wide range of other chemicals with several industrial applications . currently, it is mainly produced through petrochemical processes that can be expensive and have significant environmental impacts. e. coli has many advantageous characteristics as a production host, such as rapid growth under aerobic and anaerobic conditions and simple nutritional requirements.

in this case study, the main steps depicted in figure  <dig> were followed and are described next :

- the model was created using the fluxes, metabolites, stoichiometric matrix and gene-reaction rules flat files. a cell designer sbml file is loaded afterwards, for visualization purposes, representing the pyruvate metabolism pathway.

- a simulation of the wild type strain is performed, using fba and maximizing biomass . this results in a flux of  <dig>  gdw/gdw/hr  for the biomass  . the wild-type strain exhibited no production of succinate, as expected.

- a simulation of a mutant strain with four knockouts known to produce succinate  <cit>  was performed and the excretion of  <dig>  mmol/gdw/hr of succinate was obtained . the mutant strain exhibits a growth rate that is 94% of the wild-type. this strain was simulated constraining the oxygen uptake flux to  <dig> mmol/gdw/hr.

- a simulated annealing algorithm was used for identifying additional mutants with succinate production capabilities, with bpcy as the objective function. the best results obtained are shown in figure 4d, where it is clear the great improvement in the secretion of succinate for all the solutions found, as compared with the published strain. the best succinate yield obtained was  <dig>  mol succinate/mol glucose, for a strain that exhibits a growth rate that is around 68% of the wild-type and with  <dig> reactions removed. however, additional solutions have been found showing the ability of the selected optimization algorithms and the chosen objective function to provide a family of near-optimal solutions.

in a real case, the following steps would be the examination and comparison of the mutant strains obtained in silico before the laboratory implementation of the pinpointed knockouts.

other distinct examples can be used to illustrate the implementations of the features of mfa, efms and optknock. those are all available in the project's web site .

CONCLUSIONS
the optflux software is, to the best of the authors' knowledge, the first freely available computational tool for in silico me that supports the set of described methods. still, there are some tools available that are able to perform some of the tasks mentioned above. from all the surveyed software tools, the cellnetanalyzer  <cit> , the cobra toolbox  <cit>  and the systems biology research tool   <cit>  are the most similar to optflux, in terms of the available features. in table  <dig>  a comparison of the four tools  is performed, listing the features available in each application. in all cases, simulation with fba and support to basic standards is included. however, only optflux is able to perform strain optimization, being the first me computational tool to provide algorithms to reach me targets given a user-defined objective function and working with genome-scale models.

notes

 implementation based on linear programming formulation 

 plug-ins under development

 includes some basic graph analysis methods

the table provides a comparison of the main features of optflux with the major alternatives in metabolic network analysis. features have divided into six groups: file formats and standards, phenotype simulation, strain optimization, network analysis, visualization and other features.

furthermore, cellnetanalyzer and cobra are based on a commercial platform  and the latter does not supply any kind of user-friendly interface. the sbrt consists on an open-source platform implemented in the java language, but it provides only a basic gui, merely to launch the execution of its processes. we can, therefore, conclude that optflux provides the first freely available me workbench that addresses the needs of biotechnologists, providing a user-friendly environment.

the remaining efforts in this field are quite distinct from optflux so we will not refer to their features in detail. it should be mentioned that efforts such as cytoscape  <cit> , cell designer  <cit>  and systems biology workbench  <cit>  are considered by the authors as very important projects, although orthogonal to our work, and ways to integrate optflux with those tools are being considered.

since optflux aims at being the reference software tool for the me community, there are some near-future plans for the implementation of additional features useful for the analysis and manipulation of metabolic models. these are being developed as new plug-ins, to facilitate their integration as modules that users can optionally install to enlarge the functionalities of the workbench. the main current efforts are focused on the development of the following plug-ins:

• topological analysis of metabolic networks;

• integration of boolean network-based regulatory models with the existing metabolic models, allowing for phenotype simulation and strain optimization;

• strain optimization approaches based on multi-objective eas.

also, the connection to relevant databases such as kegg  <cit>  or biocyc  <cit>  is a path worth exploring. currently, optflux has a plug-in that supports link-outs, i.e. it allows users to automatically launch searches over relevant databases from the names of entities  present within the viewers of the metabolic models. the databases used in each case can be configured in the setup of the plug-in.

availability and requirements
the software is made available, together with other resources, in the home page given below.

more details:

- software name: optflux - software for metabolic engineering

- project home page: http://www.optflux.org

- operating system: platform independent

- programming languages: java

- other requirements: java jre  <dig> .x, glpk

- license: gnu-gpl, version 3

abbreviations
bpcy: biomass-product coupled yield; dw: dry weight; eas: evolutionary algorithms; efms: elementary flux modes; fba: flux balance analysis; fva: flux variability analysis; glpk: gnu linear programming kit; lp: linear programming; me: metabolic engineering; mfa: metabolic flux analysis; milp: mixed integer linear programming; moma: minimization of metabolic adjustment; mvc: model view controller; room: regulatory on/off minimization of metabolic flux changes; sa: simulated annealing; sbml: systems biology markup language; sbrt: systems biology research tool.

note 1: definition of "wild-type" strains in the context of optflux simulations

we use the term wild-type strain/organism in this study meaning strains that have a  known pre-definable steady-state flux objective function . this terminology is used solely for the purpose of intuitive understanding of the methods and tools and therefore it should not be interpreted in the biological sense of wild-type strains/organisms.

authors' contributions
ir, mr, pm, krp were involved in the conception of the algorithms. ir, mr, pm, pe, pv, ss and jpp were involved in the design and implementation of the software. ir, krp, ecf and jn proposed and prepared the case study. ir, mr, pm and krp helped to draft the manuscript. all authors read, reviewed and approved the final manuscript.

