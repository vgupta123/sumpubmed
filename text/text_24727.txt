BACKGROUND
since felsenstein brought the maximum likelihood  framework to phylogenetic inference  <cit>  the number of supporters of likelihood based estimation has steadily increased, and it is now widely considered the most accurate approach. although ml phylogenetic inference is generally quicker than stochastic optimization inference , the time complexity also of ml-algorithms has been prohibitive for analysis of large phylogenies. recently, however, the field has seen considerable advances in speed of the best methods, among which phyml  <cit>  and raxml  <cit>  are notable, seemingly without sacrificing much accuracy. with these methods phylogenies with tens or even hundreds of taxa  <cit>  are readily examined. after its introduction a decade ago  <cit> , the use of bayesian methods in phylogenetic inference has been a field of active research in which not only the phylogeny itself has been sought, but also additional issues have been addressed, such as substitution rate hypotheses, accuracy of ancestral state inference, and the rooting problem, see  <cit>  for a review. in particular, a number of alternatives to the much debated molecular clock hypothesis  <cit>  have been suggested. among these are models with molecular clocks operating locally  <cit>  and also a range of models with rate variation over lineages; these include auto-correlated models, i.e., the rate distribution for a particular branch depends on the rate value of the parent branch  <cit> , and uncorrelated models where rates are drawn independently from a common underlying distribution  <cit>  .

a fundamental question for the accuracy of bayesian phylogenetic inference is the selection of a prior distribution on trees and branch lengths  <cit> , and several types of such have been suggested. an intuitively appealing choice is to assume that the tree branching follows a birth-death process which is indeed what is exploited by yang and rannala  <cit> . in  <cit> , the authors assumed a molecular clock and used integration over branching times to calculate the posterior distribution of tree topologies, a procedure they reported infeasible for trees with more than five leaves. in order to overcome this, they applied an mcmc methodology to the problem  <cit> , but the time complexity of the algorithm still severely limited the number of taxa that could be analyzed.

one might think that a model containing a birth-death prior on the tree branching would necessarily be consistent with a molecular clock, since the birth-death process generates ultrametric trees. the molecular clock can be avoided, however, by modeling the substitution rates and branching times separately. biologically, the ability to separately infer rates and times is of importance, since the former can pinpoint periods of molecular function changes and the latter enables dating of speciations and other evolutionary events. moreover, as was recognized by arvestad et al.  <cit> , explicit time modeling facilitates integration of separate time dependent evolutionary models into a unified framework.

in a paper on mcmc-estimation of phylogenies and divergence times  <cit> , the authors performed simulations comparing uncorrelated and clock-like models, and concluded that clock-like models only perform well on clock-like data, while uncorrelated models always perform acceptably. furthermore, they investigated parameters inferred from two viral and one marsupial dataset with the result that no significant auto-correlation was detected. one conclusion in the paper was, therefore, that auto-correlated models are not generally suitable. this contrasts with the results presented in a recent paper by lepage et al.  <cit> . they evaluate two auto-correlated models and concludes that they clearly outperform the uncorrelated models tested.

in the work presented here, we make use of a bayesian framework with informative priors on branch lengths. we have investigated solutions to the parameter inference problem, i.e., inference of rates and times, as well as the phylogeny inference problem, where we also infer the tree topology. these problems are analysed with a hill-climbing maximum a posteriori  as well as an mcmc methodology. we further introduce a dynamic programming  algorithm for optimal factorization of branch lengths into rates and times, thereby considerably reducing the computation time needed for hill-climbing as well as mcmc-algorithms. the nucleotide substitution is modeled by a continuous-time markov process and we use a birth-death process to obtain an a priori distribution of phylogenies' branching times. the substitution rates are drawn iid from a Γ-distribution  <cit> . we perform simulations to show that with our method fast simultaneous inference of substitution rates and branching times for a given tree topology is not only feasible on large trees but also largely unaffected by local-optima problems. by comparing our results with mcmc-algorithms based on, in one case, the same model , and in another case, a similar model  <cit> , we show that despite its uncomplicated nature, the presented algorithm delivers parameter estimations with high accuracy. finally, we show that also the phylogeny inference problem is manageable in acceptable time. by using a simulated annealing-inspired methodology, the simulated annealing like -method, where tree topologies are swapped often in the beginning, but henceforth more rarely, we can avoid getting stuck on a particular local optimum tree.

methods
general notation
let s be the number of aligned sequences and n their common length with columns of indels omitted. the data will be represented by an s × n matrix d = {dij}. the topology of the phylogenetic tree relating the sequences is denoted by t. assuming the nucleotide substitution rate to be constant on any particular edge in the tree, we will denote the length, the rate, and the time of the edge connecting node v with its parent by lv, rv, and tv, respectively, where lv ≡ rvtv. we will refer to the complete vectors of lengths, rates, and times, for all edges as l, r, and t, respectively.

the discussion in this paper centers around p , the probability of the rates and the times given the sequences and the tree topology, and p , the probability of the rates, the times, and the tree topology given the sequences. p  is defined by:

  p=∫pppdrdtp. 

we will refer to the factor p  as the data probability and to factors p  and p  as rates prior and times prior, respectively. the probability p  will be referred to as the posterior. the value of the data probability depends solely on the tree's branch lengths whereas the product of the rates and the times prior probabilities, which can be viewed as informative length priors, depends on how these lengths are factorized into rates and times.

three solutions to the parameter inference problem
the dimensionality of the integral in  is  +  for a tree inferred from s sequences, making its numerical evaluation feasible only for relatively small s  <cit> . performing the integration by means of mcmc is the natural remedy, but this is a notoriously computationally intensive methodology. in the following, we will therefore study several aspects of the alternative problem of finding the corresponding map solution:

  arg⁡max⁡r,tppp, 

namely, the most likely complete set of rates and times given the data and the model. we have implemented three algorithms for finding map solutions. as a first alternative, the r × t-method, we explore the entire r × t-space and seek the optimum in that space. as a second alternative, the l-method, we search the l-space and when a supposed l-optimum is found, we factorize the lengths into rates and times. neglecting issues regarding non-global optima, we expect the l-method to find a solution that is optimal only with regard to the data probability, while the r × t-method should eventually find the optimal solution including the priors on rates and times . unfortunately, the r × t-method is impractically slow. to overcome the weaknesses of these two methods, we have developed a dp algorithm, to be described below, which finds the best possible factorization of any given length vector l under the rates and times priors.

by applying our dp algorithm, we can optimize the factorization of the lengths resulting from the l-space search. even so, we may very well end up in a situation where we have found an optimal l but where there is another l with nearly as good data probability but prior value so superior that the posterior is better. that solution cannot be found with the l-method. by instead combining the dp and the r × t-algorithms, it is possible to achieve a better result in a reasonable time. we search the r × t-space as before, but at each iteration, the search is interrupted with probability p . if so, we factorize the current l optimally, and make a desirable jump in the search space that would otherwise have been impossible. this method will be referred to as the combined method.

a dp algorithm for branch length factorization
given lengths for each edge in the tree, the objective of the dp algorithm is to factorize the lengths into optimal rate and time parameter estimates for the edges. to facilitate this, a discretization of the time interval from the leaves to the root is made. we scale this interval in order to give the leaf times and the root times values zero and one, respectively. all s -  <dig> non-root inner nodes are assigned intermediate values corresponding to the equidistant grid that is the result of the discretization . the number of grid intervals is n . for a given node u with children v and w, fu, denoting p p , is calculated for each possible discretized divergence time τu of u, using all possible discretized divergence times for v and w. for the node u, fu is given by the maximum value over τv, τw of:

  pp︸rate priorsp︸time priorcontributionff 

where tv ≡ τu - τv and tw ≡ τu - τw. the values of the rate priors are dependent on the gamma distribution and the quotient between the lengths and the times for the edges leading to u. we use the prior densities for branching times given a tree, derived in  <cit> . this yields values dependent on the birth-death process, τu, and the number of leaves of the subtree tu in which u is the root. we work from the leaves up and, when we reach the root, the optimal froot ≡ p p  and the rate-time factorization of the lengths that gave rise to the optimal value are retrieved.

rate model and hyperparameter values
in this study, we use a rate model described in . briefly, this model averages the rate for each branch as independent and identically distributed  stochastic variables drawn from an underlying Γ-distribution. apart from the edge rates themselves, the model has two hyperparameters, namely the mean m and the variance v of the Γ-distribution, which are both assigned uniform priors in the interval  <cit> . variants of the iid model with respect to the underlying distribution  have been described  <cit> . a comparative study in  found no difference in performance between these variants, while results in  <cit>  suggested that the Γ-distribution might be more flexible in describing rate variation. an alternative approach suggested by sanderson  <cit>  and thorne et al.  <cit> , is to model rates as evolving over the tree, such that there is an auto-correlation between rates at adjacent nodes. in , the differences in performance of the iid model and the evolving model were found to be negligible. in  <cit> , the authors argue that over short time scales inherited factors become small relative to stochastic factors, and that over very long time scales the variation causes the auto-correlation from lineage to lineage to break down.

in the recent paper by lepage et al.  <cit> , the authors perform benchmarking of relaxed clock models. they test various choices of divergence time priors  and variants of both auto-correlated and uncorrelated rate models. this test favors the auto-correlated rate model alternative while the optimal choice of time prior is found to be more data dependent.

in this study, we have chosen the iid-Γ model as an example distribution; it is, however, straight-forward to adapt our methodology to accommodate any of the models described above, with a possible exception for the dirichlet time prior which we have not tested.

the birth-death process generating tree branching times have hyperparameters for birth rate, λ, and death rate, μ, respectively. that is, the set of hyperparameters used in the inference are λ, μ, m, and v. for the simulation analyses, we generated sequences using λ =  <dig> , μ =  <dig> , m =  <dig> , v =  <dig> . we then used these same values during inference. we used the simple jukes-cantor  <cit>  substitution model. when analyzing biological data, we estimated values for λ, μ, m, v during inference and the substitution parameters were estimated with a maximum likelihood analysis using paup  <cit>  and the gtr+Γ model  <cit> .

proposal distributions
the proposal scheme used was developed for the mcmc-algorithm described in . each parameter  has equal probability of being updated, and the new value s' of the updated parameter s is lognormal. the factor σ is a prespecified constant related to the parameter type which was calibrated to optimize mixing and convergence of the mcmc chain.

we present here results obtained with mcmc, as well as a hill-climbing map adaptation of the mcmc-algorithm. in the map case we only accept proposals increasing the posterior, while in the mcmc case the standard metropolis-hastings proposal-acceptance scheme is used.

we further tested a deterministic scheme where a search was performed in all directions, i.e., we perturb each parameter, store all results and then choose the perturbation giving the optimal log-likelihood. in this case, the results were qualitatively the same as with the randomized algorithm described above, although computation times were longer.

the phylogeny inference problem and the sal-method
when we extend our ambition to also do phylogeny inference, the most severe problem with the hill-climbing approach is that the algorithm can get stuck on a particular non-global optimum tree. this problem can, at least to some extent, be resolved by the sal-method, i.e., a methodology where tree topologies are swapped often in the beginning, but henceforth more rarely. for simplicity, we use a linear scheme where the probability of a tree swap is originally k times higher than that of a parameter change . for each tree swap attempt, we decrease k with one unit until k equals unity. the types of tree rearrangements that we use are re-rooting, nearest neighbor interchange  and subtree pruning and regrafting , see  <cit> .

the applicability of the dp-algorithm as well as the sal-method are independent of the way in which we exploit the search space, i.e., they are useful in both the map and the mcmc setting.

RESULTS
parameter inference simulations
we first evaluated the three inference methods described above on fixed trees with respect to their capacity to infer parameters. we generated a tree with  <dig> leaves and generated nucleotide sequences of length  <dig> by evolving them on the tree. figure  <dig> illustrates the performance of the l-method, i.e., map over lengths, relative to the r × t-method and the combined method, i.e., map over rates and times without and with dp, respectively. we note that finding r and t that optimize the prior probabilities requires more than  <dig>  iterations for the r × t-method to converge although the data probability has reached optimum after only  <dig>  iterations approximately. the speedup achieved with the combined method, as compared to the r × t-method, is considerable. we note also that the combined algorithm obtains a solution with higher log-likelihood than does the otherwise fast l-method. when the performances of these methods are compared on a larger set of trees, the conclusions stated above become even clearer. we generated  <dig> trees with  <dig> leaves and  <dig> trees with  <dig> leaves, and generated nucleotide sequences of length  <dig> on each tree. for each of our three methods, we further made two separate parameter estimations on each tree. the aim was to compare the two results and from that evaluate the respective methods' reproducibility. the results in table  <dig> show the methods' performances with respect to optimality, speed, and reproducibility of likelihood, rates, and times. on average the combined method delivers the result with best likelihood, the r × t-method is second, while it is again clear that the r × t-method is by far the slowest. we note in particular that the l-methods' rate and time variance is almost negligible; but this is simply a consequence of the fact that the l-method consistently finds very similar l-optima, and that the optimal dp-partitioning of these l-optima results in very similar r and t. to summarize, the combined method outperforms the others with respect to quickly finding optimal values for branches' rates and times.

1the combined method and the r × t-method infer optimal substitution rates and divergence times. the l-method infer optimal branch lengths which are subsequently partitioned into rates and times. the latter problem is much easier and the inferred rates and times less optimal.

2difference in log-likelihood between two map runs on the same tree.

3difference in substitution rate norm between two map runs on the same tree.

4difference in divergence time norm between two map runs on the same tree.

5approximate computation time relative to the l-method.

evaluation of parameter recovery
to get an indication of what accuracy we can expect for solutions obtained with the hill-climbing approach, we compared the inferred rates and times parameters with the corresponding values used when simulating the sequence data. we generated  <dig> trees with  <dig> leaves and  <dig> trees with  <dig> leaves, then generated nucleotide sequences of length  <dig> on each tree. we recorded the true rates and times for each edge, and we ran the combined method and the r × t-method on each tree while recording the rates and times thereby inferred. we repeated the procedure using different values of v, the rate variance hyperparameter, when generating the sequence data. the rate mean hyperparameter was kept constant at  <dig> .

from figure  <dig> can be seen that for 10-leaf trees and m =  <dig> , v =  <dig> , the inferred rates and times are on average around 5% off the true value. for these m and v the quotient between the highest and the lowest true rate in the tree is approximately  <dig> , showing that the data is fairly clock-like. for m =  <dig> , v =  <dig> , on the other hand, the rate parameters are as much as 45% off and the time parameters around 30% off. here, though, the highest true rate is more than  <dig> times greater than the lowest. the same pattern is seen also for large 100-leaf trees, with the accuracy being very high for fairly clock-like data and declining as the data becomes less clock-like. interestingly, we note that for the 100-leaf trees, the combined method is much more accurate than the r × t-method with respect to both rates and times. with the combined method, the times, in particular, and the rates, are very well estimated even for v as large as  <dig> .

hill-climbing vs. mcmc – a parameter inference performance comparison on a rbcl dataset
we also made a parameter inference comparison on a dataset consisting of rbcl genes from eudicots, a group of flowering plants. we used the tree presented in  <cit> . we compared the rates and times inferred using the combined method, i.e., hill-climbing map with the dp factorization speedup, with the rates and times posterior distributions obtained from an mcmc analysis using the r × t-method . the mcmc-chain was run  <dig> , <dig> iterations, and was sampled at regular intervals . to evaluate the convergence of the mcmc analysis, the gelman and rubin  <cit>  convergence tests, as implemented in the r package coda  <cit> , was used. the mcmc-analysis required a computation time of several days, while the map-optimum is reached after some  <dig>  steps, requiring less than a minute on the same type of computer, the difference mainly being due to mcmc requiring more iterations to accurately describe the posterior distribution while map results in point estimates. figure  <dig> depicts the rates and times posterior distributions inferred using mcmc, together with the corresponding values from the map-analysis. we note that for the  <dig> rate and time variables that we attempt to infer, only one has a map estimate outside of the borders marked out by the 25% and 75% quantiles from the mcmc analysis, and that one is only slightly outside. this is good performance, since it seems clear from the figure that the mcmc analysis gives rather tight parameter inference, i.e., the quantile intervals are small.

phylogeny inference simulations
compared to the parameter inference problem discussed in the previous three sections, the phylogeny inference problem is significantly more difficult. given a set of sequences, the objective is to perform simultaneous inference of tree topology, rates, and times. in figure  <dig> and table  <dig>  we present a simulation study comparing hill-climbing and mcmc, with the result, as expected, that hill-climbing converges quickly but is less reliable than mcmc. in both the hill-climbing and the mcmc case, a run is considered successful when it first visits a state with log-likelihood at least as good as the optimal log-likelihood for the tree generating the data. for mcmc this is despite the fact that if the posterior distribution is non-uniform it cannot have been reached. that is, we underestimate the time required.

1median number of iterations for successful runs .

2median computation time needed for successful runs.

3percentage of runs being successful.

when doing phylogeny inference the local optima problem really becomes an issue. what often happens both in the hill-climbing map and in the mcmc case, is that the algorithm gets stuck on one particular sub-optimal tree, and by optimizing rate and time parameters for that tree we make a move to another tree unlikely. to circumvent this problem, we use the sal-method described in methods; that is, we do tree swaps often early in the chain, while focusing more on fine-tuned parameter changes later. for small trees the effect of the sal-method is minor. out of the  <dig> map estimations we carried out for the 10-leaf trees with the sal-method and the standard method , we finished successfully in  <dig> and  <dig> cases, respectively . when using mcmc on 10-leaf trees, we finished successfully in  <dig> cases with the sal-method and in  <dig> cases with the standard method. for 10-leaf trees, both the standard method and the sal-method require a similar number of iterations to converge successfully, and we conclude that the difference in computation time between the two methods for these small trees is minor.

for inference on larger trees , it is clear that favoring of early tree moves, as in the sal-method, is necessary. out of  <dig> simulations that were performed with the standard method, after  <dig>  iterations only  <dig> map runs have reached a likelihood similar to that of the true tree . this should be compared with the sal-method which finishes successfully in 74% of the cases. also for mcmc, where we expect optimal values to be eventually achieved in all cases, we note the same pattern with the sal-method having much shorter time to success. we finally conclude that the effect of our dp-algorithm is less pronounced when it comes to phylogeny inference than is the case for parameter inference. a comparison between the combined method  and the r × t-method is shown in the right part of figure  <dig>  we record the percentage of runs finding first the true tree and second the optimal log-likelihood for that tree. the combined method finds the true tree in 74% and the r × t-method in 83% of the cases. the combined method is slightly faster needing on average  <dig> iterations while the r × t-method needs  <dig> iterations. now, to find the optimum the combined method needs  <dig> iterations, i.e., another  <dig> iterations after the true tree is found. this should be compared to the r × t-method which needs  <dig> iterations to find the optimum after the true tree is found, in total  <dig> iterations on average.

hill-climbing vs. mcmc – a phylogeny inference performance comparison on a mtdna dataset
to test the phylogeny inference method on biological data, we used a mitochondrial dna dataset originally presented in  <cit> . it consists of the complete cytochrome oxidase ii and cytochrome b genes, altogether around  <dig> nucleotides, in  <dig> species. the authors utilize this and other datasets together with calibration times obtained from fossil records to infer divergence times among the lemurs of madagascar. the model they used is that of thorne et al.  <cit>  which, again, is based on auto-correlated rates. our use of this data was twofold. firstly, we tested whether, and if so how often, we could find a tree with similar or higher likelihood than the one used in  <cit>  . secondly, we used their tree in order to obtain divergence times for comparison.

we partitioned the sequence set into four categories a, b, c, d as shown in figure  <dig>  we ran our tree inference on successively larger proportions of the tree, i.e., subtrees a, a + b, a + b + c, and the full a + b + c + d tree. on each subtree, we recorded optimal log-likelihood values for the tree as given in the figure. we then ran  <dig> separate inferences starting from a random tree to see whether the obtained log-likelihood values differed much mutually and whether we could reach the optimal value for the given tree. note that, in table  <dig>  the success percentage varies over trees in an seemingly unexpected manner. we thus record a higher percentage of successes for the dataset including  <dig> sequences in trees a + b + c than for the smaller subset in trees a + b  and a . a plausible reason for this is that the tree used to compare with  is not necessarily optimal and that the relative effect of this is larger for the smaller subtrees. the distribution of results inferred by our method seems however to be the expected one with wider spread for bigger trees.

1reference log-likelihood value obtained with the tree topology in figure  <dig> 

2log-likelihood value obtained starting from a random tree topology.

3percentage of runs finding a tree with likelihood at least as good as for the tree topology in figure  <dig> 

hill-climbing vs. mcmc – a dating performance comparison on a mtdna dataset
we finally made a comparison between divergence times resulting from our method and those reported in  <cit> . the results in table  <dig> imply that our inference differs considerably from the calibration times used by yoder et al.. all times inferred by us on the laurasiatheria clade  are wildly underestimated as compared to the reported calibrations, although the relative edge lengths on the clade seem to agree. on the other hand, we overestimate the time point for the divergence between pan/homo and gorilla . our results agree with what has been reported by arnason et al. on several occasions,  <cit>  is a recent example, from studies on primate mtdna data. it is possible that the discrepancy between our results and those presented by yoder et al. stems from the fact that we do not include the additional information that calibration times give.

y – mean
1reference node for our estimation.

2mya calibration for c <dig> reported by yoder et al.

3mya estimation for c <dig> by our method.

4mya estimation for n <dig> reported by yoder et al.

5mya estimation for n <dig> by our method.

more to the point, out of the nine inferred time points , we are inside the reported 95% credibility interval on all occasions but one , and in most cases we are close to the means reported by yoder et al.. this is obtained from an inference using a mere  <dig> seconds computation time.

discussion
we have presented new methods for dating analysis and phylogenetic tree estimation using nucleotide sequence data. we use a model with birth-death priors on tree branching and iid substitution rates among lineages, originally developed in a markov chain monte carlo  framework , enabling simultaneous inference of substitution rates and divergence times. we show that use of this model in a maximum a posteriori  framework strongly improves the opportunities to perform biologically relevant analyses on a large scale.

in addition to this, we have developed a dp algorithm intended to meet the computationally challenging problem of optimally partitioning branch lengths into rates and times. this contribution, which works as nicely in an mcmc as in a map framework, limits the computation time of our map-algorithm to nearly that of standard ml phylogenetic inference, i.e., where one does not bother about separating branch lengths into rates and times but only infers the lengths.

the possibility to simultaneously estimate rates and times in an efficient way is of great interest in comparative genomics, as well as in both systematic and evolutionary biology. moreover, the current usage of uniform priors on branch lengths has recently been shown to be problematic  <cit> . modeling branch substitution rates and divergence times separately allows us to use a birth-death prior on the times and still evade a molecular clock.

until now, maximum a posteriori has not been used in this context. it might be that the computational difficulties linked with inference of an optimum in the huge rates and times space, have hampered the development of map-algorithms for this problem. instead, the present trend in the phylogenetic inference field of leaving the strict molecular clock has mainly included mcmc-based methods. this is a class of methods benefiting both from a natural way of including biologically motivated prior beliefs and a natural way of expressing uncertainties in the solutions; but on the negative side must be counted the relative slowness of these methods. compared to mcmc methods, our hill-climbing algorithm has significant computational advantages. first, by accepting only moves increasing the total log-likelihood, our method generally finds a local optimum quicker than does the mcmc variant. second, since we only seek one particular value, i.e., the locally optimal point, we naturally know when to stop the search and we can do without the sampling needed for mcmc-methods to ensure acceptable mixing.

a significant drawback of our method is that it only delivers point estimates of the inferred variables. the standard procedure when inferring tree topologies, nonparametric bootstrapping, cannot easily be implemented in the context presented here. it is probably possible to retrieve uncertainty estimates for a specified time point of interest. one could fix one interval below and one above the map estimate and calculate the summed probability of positioning the node in question in that interval. it is, however, not clear how such an uncertainty estimate would compare to the mcmc equivalent.

we have further shown that, for the hill-climbing algorithm, the all-important local optima problem can be addressed. for parameter inference on a fixed tree, where this issue is not as problematic, we believe that a comparison between results from multiple runs starting from different, randomly selected, positions, will most often be sufficient. the problem gets more noticeable when inferring  phylogenies. we have tested our method on simulated datasets using trees with  <dig> leaves and biological datasets using trees of similar size. we have noted that there is a risk of optimizing parameters for one specific tree topology so much that escaping from that tree is made difficult. this was not unexpected, however, we found that it can often be avoided by using the sal-method, a scheme where tree topologies are swapped relatively more often in the beginning of the inference chain.

the gain of using our methodology, instead of standard ml, for topology inference is twofold. first, if the sequences at hand are of short or moderate length, the influence of the rates and times prior will be considerable, favoring a well-chosen prior distribution. second, when fossil data include known time values, our methodology is the natural choice, since these data can easily be included with our methodology, but not so in an ml inference. if neither of these two apply, the natural procedure is to use ml for topology inference, followed by our methodology for inference of rates and times parameters.

we have noted that when inferring trees with very short edges it would be advantageous for us to locally use a dense grid for the edge times. similarly when doing phylogeny inference it might be of interest to use the dp-algorithm more often right after a tree swap in order to get the factorization of lengths into rates and times correct before investigating the new tree. these are possible directions for further investigations. in the presented analyses on simulated data, we have worked with predefined hyperparameter values for the rate and time priors. such values are generally not known for biological data, for which we instead estimate these values using maximum likelihood. it is straight-forward to extend our method to include estimation of the hyperparameters. we have noted that our method's performance is data-sensitive in the sense that highly non-clocklike data is not handled well and that varying rate hyperparameters might have an influence on results. we suspect from previous results  <cit>  that the influence of the time prior will show that the effect of its hyperparameters on the map-estimates will be low. further studies on this aspect would, however, be interesting. another interesting aspect is the influence of the priors for long sequences. it is clear  <cit>   that the width of the rates and times posterior intervals will decrease for longer sequences but that this is only true up to a point. even for infinitely long sequences there will be uncertainties in these estimations.

CONCLUSIONS
our contribution leaves the field open for fast and accurate dating analysis of nucleotide sequence data. compared to mcmc-methods, our methodology reduces inference time for large phylogenies by orders of magnitude. our novel dp-algorithm is an integral part of the methodology and simulation-based comparisons between our combined method and the r × t-method, i.e., hill-climbing with and without the dp-algorithm, show that the dp-algorithm is most rewarding when difficult problems are attacked. for inference on very large trees it delivers both speed and accuracy. also, the dp-algorithm is superior when the sequence data at hand are non-clocklike.

the method is easily adapted to take divergence time information into account, e.g. from fossil data  <cit> , by restricting a speciation to a specific interval or using a prior distribution on the interval. by including priors on branching times we have introduced irreversibility into our model which at least in principle could be used for tree rooting. since standard ml phylogenetic models are reversible with respect to time, one has to resort to information outside of the model, normally an outgroup sequence, for positioning of the root. an investigation of whether we can do better in this regard is an interesting direction for future research.

availability and requirements
project name: prime – probabilistic integrated models of evolution project home page: http://prime.sbc.su.se/map_dp operating systems: linux, macosx programming language: c++ licence: source code not released yet. binaries are available on the project home page. restrictions for non-academic use: none

authors' contributions
ÖÅ and jl planned the study and wrote the paper. ÖÅ and bs wrote the c++ code for simulating and analysing the data. bs and ÖÅ retrieved the biological data. all authors have read and approved the final version of the manuscript.

