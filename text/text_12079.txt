BACKGROUND
constraint based modeling approaches have been widely applied in the field of microbial metabolic engineering  <cit>  and have been employed in the analysis  <cit>  and, to a lesser extent, modeling of transcriptional  <cit>  and signaling  <cit>  networks. and, we’ve recently developed a method for integrated modeling of gene expression and metabolism on the genome scale  <cit> .

the popularity of these approaches is due, in part, to the fact that they facilitate analysis of biological systems in the absence of a comprehensive set of parameters. constraints-based approaches focus on employing data-driven physicochemical and biological constraints to enumerate the set of feasible phenotypic states of a reconstructed biological network in a given condition. these constraints include compartmentalization, mass conservation, molecular crowding  <cit> , thermodynamic directionality  <cit> , and transcription factor activity  <cit> . more recently, transcriptome data have been used to reduce the size of the set of computed feasible states  <cit> . because constraints-based models are often underdetermined they may provide multiple mathematically-equivalent solutions to a specific question – these equivalent solutions must be assessed with experimental data for biological relevance  <cit> .

we have previously published the cobra toolbox  <cit>  for matlab to provide systems biology researchers with a high-level interface to a variety of methods for constraint-based modeling of genome-scale stoichiometric models of cellular biochemistry. the cobra toolbox is being increasingly recognized as a standard framework for constraint-based modeling of metabolism  <cit> . while the cobra toolbox has gained widespread use and become a powerful piece of software, it was not designed to cope with modeling complex biological processes outside of metabolism or for integrated analyses of omics data, and requires proprietary software to function. to drive cobra research through this avalanche of omics and model increasingly complex biological processes  <cit> , we have developed an object-oriented implementation of core cobra toolbox functions using the python programming language. cobra for python  provides access to commonly used cobra methods in a matlab-free fashion.

implementation
the core capabilities of cobrapy are enabled by a set of classes  that represent organisms , biochemical reactions , and biomolecules . the core code is accessible through either python or jython . cobrapy contains:  cobra.io: an input/output package for reading / writing sbml  <cit>  models and reading / writing cobra toolbox matlab structures.  cobra.flux_analysis: a package for performing common fba operations, including gene deletion and flux variability analysis  <cit> .  cobra.topology: a package for performing structural analysis – the current version contains the reporter metabolites algorithm of patil & nielsen  <cit> .  cobra.test: a suite of unit tests and test data.  cobra.solvers: interfaces to linear optimization packages. and,  cobra.mlab: an interface to the cobra toolbox for matlab.

RESULTS
cobrapy is a software package for constraints-based modeling that is designed to accommodate the increasing complexity of biological processes represented with cobra methods. like the cobra toolbox, cobrapy provides core cobra modeling capabilities in an extendible and accessible fashion. however, cobrapy employs an object oriented programming approach that is more amenable to representing increasingly complex models of biological networks. moreover, cobrapy inherits numerous benefits from the python language, and allows the integration of models with databases and other sources of high-throughput data. additionally, cobrapy does not require commercial software for commonly used cobra operations whereas the cobra toolbox depends on matlab. as the cobra toolbox is in wide use, it will likely be used as a development and analysis platform for years to come. to take advantage of legacy and future modules written for the cobra toolbox, cobrapy includes a module for directly interacting with the cobra toolbox  and support for reading and writing cobra toolbox matlab structures .

in recent years, a number of software packages have been developed that employ stoichiometric constraint-based modeling approaches  <cit> , such as cell net analyzer  <cit> , fasimu  <cit> , pysces-cbm  <cit> , the raven toolbox  <cit> , and the systems biology research tool  <cit> . while there is overlap in functionality between some of packages and cobrapy , the other packages do not currently support the next generation models of metabolism and expression   <cit>  nor integration with the cobra toolbox for matlab. it is worth noting that the other software packages often contain a rich variety of functionality that is targeted towards other research topics, such as modeling signaling networks  <cit> . cobrapy continues the cobra toolbox’s tradition of providing an interactive / programmable framework for constraints-based modeling and is a new initiative of the opencobra project  <cit> . software downloads, tutorials, forums, and detailed documentation are available at http://opencobra.sourceforge.net.

+: feature is available; *: feature is accessible through the cobra toolbox.

core classes: model, metabolite, reaction, & gene
the core classes of cobrapy are model, metabolite, reaction, and gene. the model class serves as a container for a set of chemical reactions, including associated metabolites and gene products . within a model, metabolites are modified by one or more reactions that may be spontaneous or catalyzed by one or more genes . the underlying genetic requirements for a reaction to be active in a model are supplied as a boolean relationship  <cit> , where each gene is referred to by a unique identifier. during the construction of a model, the model and the reactions, metabolites, and genes are explicitly aware of each other. for example, given a metabolite, it is possible to use the get_reaction() method to determine in which reactions this metabolite participates. then the genes associated with these reactions may be accessed by the reaction.get_gene() method.

the object-based design of cobrapy provides the user with the ability to directly access attributes for each object , whereas with the cobra toolbox for matlab biological entities and their attributes are each contained within separate lists. for example, with cobrapy, a metabolite object provides information about its chemical formula and associated biochemical reactions, whereas, with the cobra toolbox for matlab, one must query multiple tables to access these values and modify multiple tables to update these values.

key capabilities
cobrapy comes with variants of the published metabolic network models  for salmonella enterica typhimurium lt <dig>  <cit>  and escherichia coli k- <dig> mg <dig>  <cit> . these models can be loaded with the cobra.test.create_test_model function; with s. typhimurium lt <dig> being the default model. additionally, cobrapy can read sbml-formatted models  <cit>  downloaded from a variety of sources, such as the model seed  <cit>  and the biomodels database  <cit> .

a common operation performed with m-models is to optimize for the maximum flux through a specific reaction in a defined growth medium  <cit> . the s. typhimurium lt <dig> model comes with a variety of media whose compositions are specified in the model’s media_compositions attribute. here, we initialize the model’s boundary conditions to mimic the minimal mgm medium  <cit>  and then perform a linear optimization to calculate the maximal flux through the reaction biomass_irr1083_metals. biomass_irr1083_metals is a reaction that approximates the materials required to support s. typhimurium lt <dig> growth in a minimal medium where approximately  <dig>  grams dry weight s. typhimurium lt <dig> are produced per hour. it is important to note that cellular composition can vary as a function of growth rate  <cit> , therefore, for biological accuracy it may be necessary to construct a new biomass reaction if the simulated, or experimentally-observed, growth rate is substantially different  <cit> .

flux balance analysis of m-models has enjoyed substantial success in qualitative analyses of gene essentiality  <cit> . these studies used simulations to identify which genes or synthetic lethal gene-pairs are essential for biomass production in a given condition. the lists of essential genes and synthetic lethal gene-pairs may then be targeted to inhibit microbial growth or excluded from manipulation when constructing designer strains  <cit> . cobrapy provides functions for automating single and double gene deletion studies in the cobra.flux_analysis module.

because of the presence of equivalent alternative optima in constraint based-simulations of metabolism  <cit> , many reactions may theoretically be able to carry a wide range of flux for a given simulation objective. flux variability analysis  is often used to calculate the amount of flux a reaction can carry while still simulating the maximum flux through the objective function subject to a specified tolerance. flux variability analyses can be used to identify problems in model structure  <cit>  or ‘pinch-points’ in a metabolic network. cobrapy provides automated functions for fva in the cobra.flux_analysis.variability module.

advanced capabilities
because whole genome double deletion and fva simulations can be time intensive with a single cpu, we have provided a function that uses parallel python  <cit>  to split the simulation across multiple cpus for multicore machines. additionally, there are a wide range of legacy operations that are present in the cobra toolbox that can be accessed using mlabwrap  <cit> . matlab is only necessary for accessing codes written in the cobra toolbox for matlab; it is not necessary to run the majority of cobrapy functions.

CONCLUSIONS
cobrapy is a constraint-based modeling package that is designed to accommodate the biological complexity of the next generation of cobra models  <cit>  and provides access to commonly used cobra methods, such as flux balance analysis  <cit> , flux variability analysis  <cit> , and gene deletion analyses  <cit> . through the mlabwrap module it is possible to use cobrapy to call many additional cobra methods present in the cobra toolbox for matlab  <cit> . as part of the opencobra project, cobrapy serves as an enabling framework for which the community can develop and contribute application specific modules.

availability and requirements
project name: cobrapy version  <dig> .1

project home page:http://opencobra.sourceforge.net

operating systems: platform independent, including java

programming language: python  / jython 

other requirements:

python: libsbml ≥  <dig> . <dig>  <cit> . currently supported linear programming solvers: glpk  <cit>  through pyglpk  <dig>   <cit> , ibm ilog/cplex optimization studio ≥  <dig>  , and gurobi ≥  <dig>  .

•  numpy ≥  <dig> . <dig> & scipy ≥  <dig> . <dig>  <cit>  for arraybasedmodel, moma, and double_deletion analysis.

•  parallel python  <cit>  for parallel processing.

•  to directly interface with the cobra toolbox for matlab it is necessary to install mlabwrap  <cit> , the cobra toolbox  <cit> , and a version of matlab  that is compatible with the cobra toolbox.

jython: jsbml ≥  <dig>   <cit> .

•currently supported linear programming solvers: glpk for java  <dig> . <dig>  <cit> , ibm ilog/cplex optimization studio ≥  <dig> , and gurobi ≥  <dig> .

•the cobra toolbox for matlab and arraybasedmodel are not currently accessible from jython.

license: gnu gpl version  <dig> or later.

abbreviations
cobra: constraint-based reconstruction and analysis; fba: flux balance analysis; fva: flux variability analysis; m-model: metabolic network model.

competing interests
this software was used by drh, jal, and bop to develop the method that is the subject of a provisional patent application u.s. provisional application serial no. 61/ <dig>  filed on may  <dig>   <dig> entitled “method for in silico modeling of gene product expression and metabolism”.

authors’ contributions
drh conceived cobra for python. ae, jal, and drh contributed to various aspects of development and testing. all authors read and approved the final manuscript.

