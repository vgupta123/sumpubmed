BACKGROUND
identifiers  composed of alphanumeric and other symbols are commonly used for tagging protein and nucleotide sequences and associated annotation in genbank  <cit> , uniprot  <cit> , and other sources that either use these sequences or deal with molecular properties of associated biological entities . for instance in uniprot, the primary accession number is the sole uid. in genbank three fields, locus, accession and version, carry four different ids, but only gi number  and accession number combined with version form unique ids . each uid is assigned to a single entry. in contrast, a particular non-unique id may be found in numerous entries. the uids ensure efficient computer-mediated data storage, maintenance and processing. to facilitate data mapping and transfer between different databases, in which id inter-conversion plays important part, several specialized resources including gominer  <cit> , erminej  <cit> , source  <cit> , resourcerer  <cit> ; idconverter and idclight  <cit> , and david  <cit>  have been developed.

ensembl
1)

2) 

3)  <cit> 

4) 

5) 

6)  <cit> 

7) 

8) gene and transcript part of ensembl, 

9) some replaced or removed records in genbank have no accession number but they can be retrieved from genbank with the primary id.

sequence ids are used for tagging sequences also in multiple sequence alignments and sequence-based phylogenetic trees in various presentations including publications  <cit> ). notwithstanding uniprot/swissprot  <cit>  entry names , these machine-readable ids are not very informative in human communications. consequently, sequence ids are commonly replaced by biologically meaningful names and acronyms, e.g. species names in trees and gene/protein names in alignments. when a large-scale dataset is to be processed, manual replacement of ids with names could be a tedious task prone to mistakes and omissions.

by some considerations, the id-to-name conversion for viral sequences is both of particular relevance and of considerable complexity. first, a large body of results in virus research can be linked to underlying sequences, owing to relatively small number of known viruses and comparatively small sizes of their extensively characterized genomes. second, the virus naming, at the species level and below, is not governed by either the binomial latin name convention traditional for cellular organisms or another broadly accepted nomenclature  <cit>  that complicates communication in virology. for species, naming viruses is under auspices of the international committee of virus taxonomy   <cit> . at the isolate and strain level, it is left up to individuals or groups of researchers to decide how to proceed  <cit> . researchers studying few economically most important viruses developed nomenclatures restricted for these viruses  <cit> . in contrast, each decision about naming that concerns a majority of viruses is an ad hoc and, often, lengthy process. likewise, naming viruses with artificially designed genomes, which are not product of natural evolution  <cit> , is formally outside of the ictv authority and completely unregulated.

the problem of id-to-name conversion has been partially addressed in the nexus alignment format  <cit> , which has a reserved part  for converting names in a predefined manner, and in the stand-alone tool phyutility  <cit>  that allows combining a limited number of genbank characteristics with a custom separator to form sequence names. here we introduce a dedicated web tool dubbed sequence name annotation-based designer  that provides a versatile facility with user-friendly interface for automatic conversion of sequence uids into biologically informative names and acronyms in controllable manner using annotation associated with sequences. several examples are provided to illustrate how snad can be used to generate names for practical purposes, particularly in virology.

implementation
snad  is accessible at . snad code is written in perl , javascript , java  and html for snad web site pages . snad can be used as a web server with apis in perl and java available on snad web site. snad recognizes input as alignment or tree with the use of bioperl drivers . if the input is not recognized as alignment or tree, snad processes it as a list of identifiers separated by one or more of the following symbols: space, new line, tabulator, or comma. to map ids on database entries, bio::db:: drivers and bio::ensembl::dbsql::dbadaptor are used. snad uses standard bioperl functions from bio::seq for extracting features/annotation from the database entries  or functions from database programming interface . detailed description of all available functions is presented in "introduction" page of the web site. snad code is available for downloading by non-commercial users per request sent to snad@lumc.nl.

RESULTS
the diagram of snad dataflow is shown in figure  <dig>  the user submits sequence ids, defines a format of conversion, and selects a database to be searched. currently available databases include genbank/refseq/genpept, uniprot, embl, seqhound and ensembl . snad extracts ids from the input and queries the database with these ids to locate associated annotation. after retrieving annotation, snad designs names according to a name template that defines name structure and annotation-based content for submitted entries. the final step of the snad-mediated processing is substitution of submitted ids in the input with the designed names to return results to the user.

the snad web site has six pages including a detailed guide to snad with examples , program execution page , guided access to java and perl apis , frequently asked questions page , list of the snad versions , and "reference" page. snad execution page has three vertically arranged sections: "before unique id  conversion" for uploading input, "names/format designer" for choosing and refining pre-compiled name templates, and "after uid conversion" for accessing output .

the input can be either copy-pasted or uploaded from a file. snad accepts ids from five databases  including genbank  and uniprot  that are automatically recognized in and extracted from the input data prepared in several formats: as part of tree  and alignment  or supplied as a plain list . examples of ids, unique and non-unique, in alignment, tree, and plain list are available for testing purposes. snad may accept input with non-unique ids, e.g. genbank accession number or locus name, that are most popular among researchers. since these ids may be associated with multiple entries, snad must decide which entry is to be used to retrieve annotation. the adopted approach is to use the most recent entry that might be not the one the user aimed at to retrieve annotation. the user may request automatically generated id-to-name log  for checking the quality of the conversion. to ensure unequivocal id processing the user must use uids in input. uids from one database can be used to query another non-cognate database in which it may be not recognized at all or recognized as non-unique ids . for instance, uids from uniprot  are recognized as non-unique ids in genbank  while all uids from genbank  are not recognized as valid ids in uniprot.

*with the use of standard bioperl drivers for genbank, uniprot, embl and seqhound  and api drivers from ensembl web site , uids from source db can be used for searching in target db. in some target dbs they are recognized as uid, in others as non-unique ids  or not recognized as identifiers . although same five dbs make the source and target db lists, the table is not symmetrical.

**, only gi's from genbank are recognized as uid in seqhound.

the user has a choice of reading snad output either on the "execution" web page, or at a separate web page in plain text mode, or receiving it via e-mail. for tree input, snad generates, additionally to the standard output, a respective tree drawn to facilitate visual inspection of the generated names in graphic format. the web page output can be enhanced with links to cognate entries accessible through the generated names.

there are two ways of defining format of the uid conversion: using either precompiled or user-defined name templates. the user is currently provided with several precompiled templates for name generation, which can be used "as is" or after refinement . each template is accompanied with examples of input to illustrate its usage. "entry name" template can be useful for identifying misspelled identifiers, as well as for comparative inspection of basic information about the entries in uniprot. two other templates  can be used for converting uids into gene and species names, respectively, as they are specified in genbank. the "complex species name" template combines full species name with primary id  that are neatly separated. the "complex protein name" includes primary id, condensed species name, protein description and cds, and locus tag, in a size restricted manner to facilitate reading a complex name structure. these templates are suited for producing names of sequences originated from a wide range of organisms. "acronym" template converts genbank organism name annotation into acronym. three templates were designed specifically for viruses to address specifics of this group for which the naming remains a matter of debate  <cit> . for several medically important viruses with large sampling from the natural diversity, e.g. influenza and noroviruses  <cit> , names conventions were accepted by the field to include reference to serotype, host species, country of isolation, strain or isolate name, collection date and, for influenza viruses, subtype. these names are part of the genbank entries where from they can be readily extracted. to demonstrate that similar names can be also generated on-the-fly from two components, using the isolate/strain and serotype fields in respective entries, a separate "influenza virus name" template is provided. we extended this approach by designing two other virus templates, "complex virus name i" and "complex virus name ii", that could generate names with complex structure for majority of other viruses for which no consensus on the naming has been reached. these templates combine information from up to six separate entry fields, each keeping an elementary record e.g. about date or place of virus isolation. "complex virus name ii" additionally includes reference to protein function. these templates could help researchers studying many viruses, e.g. coronaviruses and picornaviruses  <cit>  communicate their sequence-based data in a name format similar to that accepted for influenza virus. snad-mediated solution to the generation of complex virus names reinforces the role of diverse fields in sequence entries as the primary source of information. if these fields are completed with records as expected, virus names can be readily generated under different and evolving conventions. thus, snad provides a tool for exploration of different name arrangements that could facilitate the development of conventions for naming different viruses by the virology community.

snad users can initiate refining of any of the provided templates  or generate de novo templates by choosing "user defined" template that automatically activates the refining mode. in both instances, the advanced template-building facility becomes available for the user. it empowers the user with fine control over the output name format, including the number of independently designed parts of the name, characteristic of each part, parts order, size of each part, and type of delimiter preceding each part . design of each part in the name is controlled by a separate row. the name parts – from left to right – are defined by respective rows in the template-building facility from top to bottom. rows can be moved up and down or deleted and inserted with a respective effect on the name structure and content. for retrieving sequence characteristics from database entries snad uses bioperl scheme with internally controlled vocabulary of annotation  <cit> . information from two or more annotation fields can also be combined in a single characteristic in a template. for instance, for virus name templates, a combination "strain or isolate" may be used to form a characteristic. for name designing, the user can choose from a dropdown menu of sequence characteristics and features that were derived from available databases. these characteristics can be used separately or in combination to design a name format that can combine, for instance, unique reference to the original database with a concise biological description of the entry . for characteristics which values are described with several words, first letters of these words can be combined using characteristic's "abbreviate" option to produce acronyms. if a selected characteristic is not available in annotation for a sequence, it is replaced in the sequence name with a symbol that the user selected from a separate drop-down menu. due to gaps in annotation, names designed with the templates may not be complete for every entry.

snad has a menu that controls output display interactively. by default, output includes id-to-name log in which selected information about generated names is detailed in table format that can be downloaded as an excel file. this table can be useful for controlling the name generation procedure and preparing legends to accompany an alignment or a phylogenetic tree in publication. the user can also extract ids from submitted alignment or tree by activating "names only" option, or retrieve annotation from cognate entries in table format. in the current implementation of snad, the most time-consuming stage is data retrieval from databases. for large queries and complex name formats, also using api, it is therefore advisable to start with less than  <dig> sequences to design a format to be used for the full query. queries containing up to  <dig> ids and including sequence alignments up to  <dig> characters can be processed through snad web page. for queries containing more than  <dig> ids, the user is advised to use one of the snad apis.

the availability of description for characteristics in a particular set of entries from databases is a major factor determining how well names designed with snad match expectation. the amount and accuracy of annotation in sequence databases vary markedly between entries that has been a major concern for the bioinformatics community continuously working toward improving this critical aspect of sequence databases  <cit> . involving other researchers in this effort, especially those who submit original sequence annotation in the first place, could accelerate the process. we hope that through using snad service, researchers could see immediate benefits from better annotation for their research that may create impetus for contributing quality annotation to public databases. to improve the user experience with snad, we plan to expand the diversity of databases and templates upon future upgrades of snad. any template that the users designed and considered useful could be included in the future snad releases.

CONCLUSIONS
a tool for controllable annotation-based conversion of sequence uids into biologically meaningful names and acronyms has been developed and placed into service, fostering links between quality of sequence annotation, and efficiency of communication and knowledge dissemination among researchers.

availability and requirements
project name: snad, sequence name annotation-based designer. project home page: . operating system: web service, platform independent. programming languages: java, javascript, perl, html. restrictions to use snad web site by non-academics: none.

authors' contributions
aeg conceived snad; ias, dar, and aeg developed snad design and performed testing; dar and ias carried out programming; ias and aeg wrote the manuscript. all authors read and approved the final version of the manuscript.

