BACKGROUND
protein sequences from model organisms are generally well annotated. the situation is different for non-model species where often the core of available sequence data comes from expressed sequence tags . to date almost one thousand of the species represented in dbest  <cit>  have at least  <dig> sequences deposited. many of these smaller est sequencing projects are generated by laboratories that do not have the bioinformatics infrastructure available to genome sequencing centers, and there is a need for user-friendly and easy-to-use tools to assist in the functional annotation of sequences for non-model organisms on this scale. traditionally, annotation for such projects has been based on the descriptor of the best blast hit. to go beyond this, tools for the identification of known domains in the sequences of interest, for example interproscan  <cit>  as a meta-domain search tool, are widely used. for comparative analyses, whether cross-species or cross-libraries, systematic annotation descriptors are very powerful. gene ontology  provides a controlled vocabulary to describe gene products  <cit> . enzyme commission  numbers are a long-established hierarchical classification scheme for enzymes based on the reaction catalysed  <cit> . the kyoto encyclopedia for genes and genomes  provides annotation of biochemical pathways for species where the genome has been sequenced  <cit> .

we have developed annot8r, a software tool that facilitates the annotation of new sequences with go terms, ec numbers and kegg pathways based on similarity searches against annotated subsets of the embl uniprot database  <cit> . annot8r is a generic tool that can be used for automated annotation of any protein  sequences, but it has been written predominantly for the annotation of est datasets. the annotation of est datasets has some inherent problems, such as redundancy and incompleteness of sequences. we therefore recommend the clustering and the generation of consensus sequences for each cluster before annotation, for example using the partigene est pipeline  <cit> . furthermore we would recommend the use of robust peptide translations such as provided by prot4est  <cit>  to correct error-prone est datasets for frame shifts. annot8r has been used for the annotation of est datasets from a wide taxonomic range of organisms including  <dig> species of free-living and parasitic nematodes in nembase  <cit> , the earthworm est project presented in lumbribase  <cit> , lepidopteran ests in butterflybase  <cit>  and ests from the atlantic halibut  <cit> .

implementation
installation and overview
annot8r has been tested on both linux and mac os x darwin platforms. the software is written in perl and requires a standard perl installation  and the bioperl module  <cit> . on some platforms additional perl modules may be required  which can be retrieved via cpan  <cit> . ncbi-blast  <cit>  and postgresql  need to be installed before running the program. to assist the novice user the annot8r user guide includes a list of faqs covering questions related to the installation of tools annot8r depends on such as ncbi-blast, bioperl and postgresql . once the external tools are installed annot8r is very easy to use via a text-menu driven interface.

annot8r is started from a terminal window and takes the user step-by-step through  the download of relevant files,  the extraction of data from these files,  the preparation for blast searches,  running blast searches and  the actual annotation . in principle steps ,  and  need only be performed once as they prepare the reference databases for the annotation process. however, we recommend updating the reference databases from time to time, in particular before starting major annotation projects. protein or nucleotide sequences to be annotated are required, in multi-sequence fasta text format, as input at step four. the resulting annotations are saved as text files  and in a relational database. as we assume that the user of annot8r will be a bench biologist with experience in bioinformatics rather than an experienced bioinformatician, the program comes with an extensive user guide. a step-by-step tutorial covers in detail how to use the program and also gives examples of useful sql commands to illustrate the power of relational databases for more advanced comparative analyses.

retrieving files and generation of the reference database
annot8r offers the user an automated download of the latest versions of all relevant files. all entries of uniprot  <cit>  are downloaded from embl in fasta format and stored as the core protein sequence resource. in addition, files linking go, ec and kegg annotations to uniprot identifiers are retrieved. go annotations for uniprot sequences are provided by the goa consortium  <cit> . for go pie-charts annot8r uses the more general go-slim terms as defined by the goa consortium  <cit> . a list of ec annotations of uniprot sequences is available from the swiss institute of bioinformatics enzyme project  <cit> . the kegg consortium provides a complete set of uniprot proteins that have attached a kegg orthology category. all information from these files relevant for the annotation process is read into a postgresql reference database for efficient look-up. based on this reference database, annot8r builds three distinct blast-searchable subsets of uniprot. each of these subsets is significantly smaller than the full uniprot resource and contains exclusively entries for which go, ec or kegg information is available. this strategy has two major advantages. it reduces the time required for similarity searches compared to a blast search against the full uniprot or ncbi nonredundant database. it also ensures that only informative sequences, i.e. sequences that can be used to derive go, ec or kegg annotation, are present in the database and therefore avoids the risk that informative hits may be lost in a sea of non-informative hits.

similarity searches and generation of the results database
to start the blast searches against each of these three uniprot subsets the user has to provide the sequences to be annotated as an input file in multi-fasta format. while we recommend the use of robust peptide translations of est datasets, annot8r also accepts nucleotide sequences as input . the entire annotation process is fully automated, but the user is encouraged to provide input regarding the stringency of the annotation. blast score or expect value based cut-offs  are set by the user to define the minimum similarity for hits to be considered. the "number of hits per sequence" defines the maximum number of hits to be considered for annotation. to increase the coverage, but at the risk of an increased number of false positives, we allow, but do not recommend, the inclusion of electronically inferred annotation  in the go reference database.

in the analysis step the results of these blast searches are parsed and relevant information is retrieved from the reference databases. for each sequence annotation entries that are supported by one or more hits and match the defined cut-offs and limits are collected. for each of these entries  annot8r records the best hit supporting this particular annotation and the corresponding score and e-value for this hit. in addition the number of additional hits also supporting this annotation is recorded. furthermore, the fraction of hits out of all collected hits for a particular sequence that support this annotation is calculated. this calculation accounts for terms where the maximum number of sequences in the database for a certain annotation is smaller than the number of hits collected, so that in all cases a fraction of  <dig>  means maximum possible support.

the annotation results are stored in comma-separated value text files that can easily be read into spreadsheets, and in a relational postgresql database. a relational database facilitates more advanced queries, for example the identification of annotation terms which are present in one species, but not in another species, or, annotation terms which are present in all species investigated. detailed examples illustrating this are given in the tutorial part of the user guide.

RESULTS
speed and accuracy of predictions
removing non-informative entries from the uniprot database and splitting it into three significantly smaller databases specific for go terms, ec numbers and kegg pathways before running blast searches reduces the time required for the sequence similarity searches compared to a full uniprot search by a factor of ~ <dig>  on a single processor  <dig>  ghz intel pentium workstation the blast searches for a set of  <dig> typical est-derived proteins take ~ <dig> minutes against the annot8r databases  as compared to ~ <dig> minutes for the complete uniprot database.

the 'correctness' of annotations based on sequence similarity will depend on factors such as the quality of the annotations in the reference dataset, the specificity of the annotation, whether the sequence belongs to a protein family, and the level of similarity to the reference. this makes estimates of the quality of annotations difficult. to provide the user with some ideas of best-practice cut-offs, we have analysed the relation between sequence similarity and annotation quality for ec annotation. ec annotations have four hierarchy levels. the top level describes the general type of the enzyme reaction. the three sublevels classify the biochemical reaction in ever-greater detail. the uniprot subset containing ec annotations was subjected to a blast search against itself. after removing self-hits, the sequences were assigned ec numbers and the annotations sorted according to the underlying blast score. figure  <dig> shows the fraction of correct ec predictions as a function of blast similarity scores. three categories were defined: all four ec levels being correct, the top three ec hierarchy levels correct, and incorrect. the total number of annotations for each group is given in figure  <dig>  even at relatively low blast score levels  annot8r achieves over 96% accuracy in assigning ec annotation to the top three levels.

collecting not just the first hit, but also a list of top-scoring hits can give rise to alternative or conflicting annotations. we believe that the best strategy in cases such as these is to provide the user with all relevant information necessary to make an informed judgement. therefore, to assist the user in the assessment of the quality of a particular annotation, annot8r also considers alternative annotations. based on the e-value or blast score cut-off and number of hits that are set by the user, annot8r records for each putative annotation the best hit and its respective scores that suggest this annotation term, the number of additional hits which are also in support of this annotation term, and the fraction of hits better than cut-off supporting each alternative annotation. this allows the user to consider alternative or conflicting annotations and gives guidance as to the distinctness and accuracy of the annotation. for example, if for one particular sequence two ec numbers have a similar score and share the three top ec levels, but display diversity at level four the prediction of the specific substrate used will require a more in-depth analysis while the more general reaction is likely to be correct.

comparison with other tools
other tools are available for the annotation of sequences from non-model organisms with go terms . the most widely used are probably gotcha  <cit> , which provides quality scored go-annotation, and interproscan  <cit> , which along with its annotation of domains and protein motifs also provides high level go annotation. to our knowledge only a few of these tools annotate with all three ontologies: go terms, ec numbers and kegg pathways. blast2go  <cit>  uses ncbi-blast via the internet against the ncbi nonredundant protein database and provides go, ec and kegg annotation. autofact  <cit>  also offers all three  annotations based on blast searches against the full uniprot database as part of an annotation package that also covers domain annotation.

the most time consuming step of the annotation procedure is similarity searching. here annot8r follows a unique route. instead of searching the full databases  annot8r uses a pre-screening step to generate subsets of uniprot specific to go, ec and kegg annotation. the benefit of this is two-fold. as the databases to be searched against are significantly smaller, search times are reduced. we intend to exploit this gain in speed to set up an annot8r web-server in the future. also, removing non-informative sequences from uniprot before running the blast searches avoids the risk of having only non-informative hits in the top hits.

an additional strength of annot8r is the provision of the results in a relational database in addition to flat-files. this enables a skilled user to run more complex search queries on the results. to encourage users with little bioinformatics experience to use this feature, we have given detailed examples in the tutorial part of the user guide .

CONCLUSIONS
annot8r is an easy to install and easy to use tool that allows high throughput annotation at low computational cost. it enables the researcher to annotate non-model species sequences with go, ec and kegg terms. a relational database makes annot8r particularly suited for comparative studies.

availability and requirements
project name: annot8r

project home page: 

operating system: linux

programming language: perl

other requirements: bioperl, cpan, postgresql, blast

license: gnu gpl

restrictions: none

authors' contributions
rs developed the software and drafted the manuscript. mlb initiated the project and assisted with testing and documenting the software. both authors contributed to writing the manuscript.

supplementary material
additional file 1
zipped tar archive that contains the program, the user guide and sample files needed for running the tutorial.

click here for file

 acknowledgements
the authors would like to thank ann hedley, james wasmuth and alexie papanicolaou for testing and helpful comments. the development of annot8r was supported in part by the environmental genomics thematic programme of the nerc .
