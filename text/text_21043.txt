BACKGROUND
as the use of next-generation sequencing  technologies for studying human disease continues to grow, defects in the cancer genome and their association with disease progression and treatment options are being reported at an astonishing rate. single nucleotide variants , one of the most prevalent mutation types, often occur in cancer related genes and can result in amino acid changes and nonfunctional proteins. accurate prediction of any possible downstream consequences to the amino acid residue is one critical analytical requirement for any robust ngs pipeline. without accurate variant annotation, further exploitation of the ngs data in both research and clinical contexts can be compromised  <cit> .

it has been observed that certain cancers present a signature pattern of mnvs where substitution mutations occur at consecutive bases  <cit> . this phenomenon may reflect pathological history such as tobacco usage or ultraviolet light exposure . although mnvs can be identified by common variant callers, development of corresponding annotation tools has been lagging behind. most existing variant callers report a mnv as individual snvs  <cit> . as a result, the predicted amino acid change is likely incorrect when a mnv occurs at multiple bases within the same protein codon . existing annotators can predict the amino acid change for mnvs, but must rely on user-provided, mostly manually curated, mnv data sources. for mutations automatically called by snv-based pipelines, there is a pressing need for automated tools to identify and fix any incorrectly annotated mnvs.fig.  <dig> amino acid predictions for two neighboring snvs scenarios.  two consecutive snvs in gene tp <dig> codon  <dig>  the fact the two snvs are present on the same read suggests they are originated from the same chromosome.  incorrect annotation based on prediction of individual snvs. the first and second snvs were predicted to introduce e285v and e285q, respectively.  the correct amino acid change based on mnv is e285l.  two snvs are located in gene or6y <dig> codon  <dig> but on different reads, suggesting they originated from separate chromosomes.  the two snvs in b <dig> were correctly predicted to introduce v252v and v252i based on individual snvs. the sequencing reads are displayed in igv viewer  <cit> 



the challenge in distinguishing a mnv from neighboring snvs from separate chromosomes resides in haplotype phasing and the ability to determine the combination of alleles found on the same chromosome . retrieving haplotype information from ngs reads is not entirely new, but most published methods specialize in germline polymorphisms and typically rely on population genetics information  <cit> . to date there has been no published program to identify mnvs from existing snv calls and to restore incorrectly predicted amino acids.

here we present mac, a software designed to automatically correct mnv annotation generated from any existing snv-based variant pipeline. by processing a list of previously detected snvs and the corresponding raw data in sequence alignment/map  format  <cit> , mac builds a multigraph containing snvs with haplotype phase and codon information to identify connected components defined as a block of mutation within codon , a structural unit containing a potentially mis-annotated amino acid. for every bmc, mac further extracts every existing haplotype and annotates it using a user-specified variant annotator. for convenience, we have precompiled mac to work with three popular annotators: annovar, snpeff and vep . to be flexible with other annotators, mac also provides a ‘no-annotation’ mode. under this mode, mac will output raw haplotype phase information which can be used as the input for any user preferred annotation tool. the accessibility of this tool, together with its flexibility and robustness, should facilitate accurate annotation of these infrequently occurring but potentially significant variant subtypes.

implementation
mac is implemented in perl and can be run on any linux/unix-like environment with installation of perl and bio-samtools package. an overview of the mac pipeline is provided below.

input
mac requires  a list of previously called snvs and  the corresponding bam file. to be flexible with all existing pipelines, the snv list can be generated from any caller and only basic information is required: mutan/mutant alleles.

selection of the annotator by the user
the overall process of correcting mnv annotations occurs as two steps: 1) haplotype phasing, and 2) determining the protein codon . mac can be run with either ‘no-annotation’ mode or one of three pre-compiled genetic variant annotating tools . mac will output explicit haplotype phasing information either way so that users have full flexibility in annotator selection. if the ‘no-annotation’ mode is specified, mac will output any identified bms by reporting haplotype phase information and the corresponding read counts. the user can then select their own annotating tool to annotate each haplotype, and fix any co-located snvs with overlapping codons . if the user chooses to use one of the three pre-compiled annotators, mac will incorporate the codon information with the haplotype phase to identify snvs with overlapping codons within each bm. therefore, our motivation for not using a simple codon-based screening approach is to provide explicit haplotype phasing information so that the users have more flexibility in annotator selection.

output
the report of mac is based on the identified bmcs. each bmc may contain multiple haplotypes and each row corresponds to one haplotype in a certain bmc. the following columns are included: 1) bmc id consisting of all snvs in the bmc; 2) an index number of the haplotype in current bmc; 3) the status of each snv in the current haplotype: mutant, non-mutant, or unknown; 4) the number of unique ngs reads supporting current haplotype; 5) corrected annotation including gene, mrna transcript and amino acid change for any haplotype containing at least one snvs.

RESULTS
to evaluate the mac software, a test data set containing  <dig> somatic snvs detected by whole genome sequencing in breast cancer specimens  was used . after initial sequencing read extraction and grouping,  <dig> block of mutations  were identified containing  <dig> total snvs. the sizes of the  <dig> bms, in terms of the numbers of snvs, range from  <dig> snvs ,  <dig> snvs ,  <dig> snvs  to  <dig> snvs . upon manual review, the bm with  <dig> snvs is located near a structural variation and appears to fit the previously described phenomenon of “kataegis”  <cit> , a pattern of confined hypermutation co-localized with structural variations in cancer . a total of  <dig> bmcs were identified after selecting for snvs with overlapping codons. all  <dig> bmcs are dinucleotide variations, and a mini bam file containing all these  <dig> bmcs is available in the mac package. a detailed comparison for the  <dig> identified dinucleotide variations shows that the mnv-based amino acid change prediction is different from the amino acid change predicted in the snv-based set . specifically,  <dig> of the  <dig> snvs were predicted to cause different amino acid change after re-annotation. in one particular case of znf <dig>  a missense mnv was annotated as nonsense in the previous snv-based annotation.fig.  <dig> depiction of mac workflow  and a mac test run . left:  a list of snvs identified by any variant caller;  reads extracted from the bam file for all snvs to identify block of mutations;  identify block of mutations within codon within each subgraph using an annotation tool. right: mac test run using  <dig> input snvs from a breast cancer data set identified  <dig> bms and  <dig> bmcs containing  <dig> snvs. after re-annotation,  <dig> of  <dig> snvs were classified as mnvs with different amino acid changes than the original snv-based annotation


athe underscores indicate difference between snv- and mnv- annotations



one of these  <dig> identified mnvs resides in the tumor suppressor gene tp <dig>  the two snvs occur at consecutive base pairs , both in codon  <dig> glutamic acid  in tp <dig>  . the first snv  was predicted to replace glutamic acid  by valine , while the second snv  was predicted as a change to glutamine  . however, neither of these two predictions was correct because these two mutations are co-located on the same chromosome. the actual amino acid product, after translating the two snvs simultaneously, is leucine  . therefore, to accurately assess the functional change of this tp <dig> mutation and others, it is important to determine the exact haplotype prior to annotating the amino acid change.

CONCLUSIONS
we developed mac, a program to support users of snv-based callers to restore potentially incorrect amino acid change predictions by mnvs. the current approach employed by most ngs variant pipelines, i.e. treating a mnv as unrelated snvs and annotating each variant separately, often leads to inaccurate results. despite the overall low prevalence in most cancers, mnvs can happen at much higher frequency in certain cancer types. accurate mnv annotation is especially important for correctly understanding the tumorigenic mechanisms in such cancers. correcting these annotation errors requires haplotype phase information, which is not retained by most variant callers. our program mac solves the problem by retrieving the haplotype phase information from the bam file, identifying and fixing any potentially mis-annotated protein codons. as the amount of sequencing data grows rapidly, this automated pipeline provides a convenient solution to bridge the gap between the commonly used snv-based variant callers and the need for correct mnv annotation. although the development of mac was motivated by more frequently observed dinucleotide substitutions, mac can also provide annotation correction for trinucleotide or other complex substitution mutations.

we foresee a variety of extensions to the applications of mac. in addition to known cancer types with a high frequency of mnvs, mac can provide accurate annotation for any genomic locations involving multiple haplotypes such as mutation hot spots. when running under the ‘no-annotation’ mode, mac can also provide haplotype phase information for neighboring snvs. this function can be useful in determining biallelic mutant status or characterizing tumor heterogeneity.

