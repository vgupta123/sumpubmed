BACKGROUND
the biological function on the molecular level emerges from the complex interaction of biological entities of a cell  <cit> . specifically, different types of molecules, e.g., proteins, metabolites, mirna or tirna, can interact in many various ways with each other in dependence on the tissue type and the environmental condition of an organism. the interactions among biological molecules can be broadly categorized into three types of networks: metabolic networks, transcriptional regulatory networks and protein interaction networks . these networks need to be inferred from experimental observations generated by different high-throughput platforms, including next-generation sequencing , proteomics and microarrays.

nowadays, it is generally accepted that biological networks are not randomly connected but follow certain structural patterns that give rise to  a scale-free topology,  a hierarchical organization and  a modular structure . especially modularity is one of the most important features of biological networks, because it suggests that nodes, which are tightly connected with each other as a community, are most likely to be a part of the same biological function or pathway. this may also be reflected in the evolution of the organisms . as a complicating factor, in reality, these pathways are not discrete, but each gene may take part in multiple biological functions, and therefore can be a part of multiple communities. hence, a biological network with a modular structure can contain multiple overlapping communities, which might also contribute to the fact that biological networks are robust  <cit> .

for protein interaction networks  it is known that there are two types of modular structure that are of significant importance. these modules can be either formed by protein complexes or dynamic functional units  <cit> . also the modules in pins of different species have been explained as the efficient functioning of a cell and the basis of evolution in order to adapt the changes to the environment quickly  <cit> . in  <cit>  the existence of two further types of structural components of modules in protein networks has been revealed, which have been termed core components and ring components. the core components are more conserved and perform key biological functions, while the ring components performs certain specialized functions under particular circumstances potentially triggered by environmental changes. furthermore, several methods have been developed to identify and integrate protein networks along with gene expression or other datasets such as disease-gene association to identify the functional activity of modules in different disease conditions . finally, in  <cit>  the algorithm clusterone has been developed to identify overlapping nodes in modules in protein networks. these examples demonstrate that any systems-based analysis on the genomic level is incomplete without a network understanding of interactions on the molecular level.

our study has four major objectives. the first objective of our study is to compare community detection algorithms for benchmark networks as well as  <dig> protein interaction networks. second, we provide an in depth analysis of the biological meaning of the predicted networks across a variety of different biological aspects. third, due to the fact that all pins are inferred from experimental data they carry a certain uncertainty with respect to the correctness of the inferred interactions. for this reason, we are performing a robustness analysis of the predicted modules by perturbing the pins by edge deletions. finally, we investigate overlapping pathways that may form functional bridges between more specialized modules.

for the community detection analysis, we are using the  <dig> most popular module detection algorithms, fast-greedy  <cit> , walktrap  <cit> , label propagation  <cit> , spinglass  <cit>  and multi-level community  <cit> , that have been developed for application to large networks and propose in addition  <dig> correlation-based module prediction methods. briefly, for our approaches, we assign weights to each pair of nodes depending on the distance between them in the network and utilize this for the module prediction. this provides competitive modularity measures for artificial and biological networks in comparison to other community detection algorithms. the details about all measure will be given in the methods section.

typically, for large real networks there is only limited information available about the true module structure within these networks because of our lack of understanding of the underlying phenomena. however, for protein networks we can make use of the gene ontology  database  <cit> , which provides a comprehensive overview of thousands of biological processes in a variety of different organisms. utilizing this information allows a biologically meaningfully assessment of the predicted modules. specifically, in our analysis, we use protein networks of  <dig> different species to investigate the modularity predicted by the different community detection algorithms.

this paper is organized as follows. in the next section, we describe all methods, measures and data sets used for our analysis, including a description of the protein interaction networks. in the results section, we present our numerical findings and this paper finishes with the conclusions section summarizing and discussing our results.

methods
modularity
the module detection algorithms studied in this paper, optimize the modularity in a network. the measure for the modularity has been introduced in  <cit>  and is defined as follows. 
 q=Σieii− <dig>  where eij is a fraction of edges between communities i and j, 
 eij=12mΣv∈i,w∈javw 

avw is the adjacency matrix element between v and w and ai is the fraction of edges which is connected to the nodes in community i, i.e., 
 ai=12mΣv∈ikv 

here kv is a degree of node v∈i.

fast-greedy algorithm
this method was proposed in  <cit> . the algorithm starts with the assumption that each individual node is an independent community and assigns modularity score, Δqij, to each pair of nodes, and ai for each community. the Δqij and ai are defined as follows: 
 Δqij=12m−kikj2if i, j are connected;m is the total number of edges0otherwise.ai=ki2m 

the algorithm starts by calculating Δqij. then it merges the two communities for which Δqij is largest. after that, it updates Δq and ai for each community and repeats all steps until all communities are merged into one community. when two communities, i and j are merged the Δq is updated as follows: 
 Δq=eij+eji−2aiaj 

walktrap algorithm
this method was proposed in  <cit> . the algorithm starts with the assumption that if two vertices, i and j, are in same community, then the random walk of length t from i and j to the nodes of other communities would be similar, pikt∼pjkt. the random walk starting at vertex i to j through a path of length t is described as follows: 
 ∀i,limt→+∞pijt=dΣkd  where d is the degree of vertex i.

in the first step of the algorithm, all nodes are considered as individual communities. in the second step, the two closest communities are merged based on the distance between them, and the community structure is updated. then the second step is repeated until all communities are merged into one community.

the distance between communities is calculated as follows. suppose there are c=c <dig> c2…ck communities in the network. 
 σk=1nΣck∈cΣi∈ckri,ck <dig> σk is a mean square distance between two communities. the r is defined as follows: 
 rcicj=Σk=1npcikt−pcjkt2d 

label propagation algorithm
this method was proposed in  <cit> . in this approach, a node x chooses to community to which the maximum numbers of its neighbours belong to. there are following steps to identify communities in the network. 
assign a unique label to each node.

order nodes randomly.

label the selected node with the same label which is in maximum number in its neighbourhood.

if all the nodes have the same label, which is in maximum number in their neighbourhood, then stop the algorithm, otherwise repeat step  <dig> 



spinglass community algorithm
this method was proposed in  <cit> . in this approach the community detection is mapped to finding the ground state of an infinite ranged potts spin glass model, by combining the information from both present and missing links, where the clusters are represented as the number of occupied spin states. in the spinglass algorithm, existing edges within a community and non-existing edges between communities are rewarded while the edges which are not present in the community and edges between communities are penalized.

multi-level community algorithm
this method was proposed in  <cit> . this algorithm is divided into two phases. in the first phase, all nodes are considered as independent communities. then communities are merged into a larger community if the modularity of the network increase. the first phase is stopped if there is no further increase in the modularity. in the second phase each community is represented in the form of a node and edges between and within communities are replaced by weighted-edges. the number of edges between two nodes  are replaced by a single weighted edge and all the edges in a community are replaced by a self-connecting weighted edge. after the construction of a new weighted network, first phase is repeated to obtain an improvement in modularity. these two phases are iterated until there is no further improvement in the modularity of the network.

correlation based hierarchical clustering
in this approach, we start with the assumption that if two nodes are the part of same community then their shortest path distance to all other nodes are positively correlated. we first calculate the shortest path distance, s for a graph g, between all pairs of nodes an calculate correlation between each pair of nodes. here we provide some shortest path based measures to calculate correlation between pairs of nodes. let s is the shortest path distance matrix, and the correlation matrix is ρ), then the distance between each pair of node is described as follows: 
 dsp=1−ρ) 

the second measure for correlation is described as follows: let a and s are adjacency and shortest distance matrix for a graph g, then the weight matrix of pairs of nodes. 
 m=a×s 

m is an asymmetric weight matrix where each row represent nodes and columns represent weights between each other. if the nodes are from same community then their weights w.r.t other nodes are strongly correlated. the distance matrix is defined as follows: 
 dm=1−ρ 

we use these two different distance measures for hierarchical clustering . to get an optimal number of cluster we use modularity measure by newman  <cit>  described in the “modularity” section.

data
in the results section, we first analyze the performance of the community detection algorithms with artificially generated benchmark networks, and then we study protein interaction networks of different species. a description of these networks is provided in the following subsections.

benchmark networks
the benchmark networks are generated by an algorithm proposed by  <cit> . it has been introduced with the purpose to generate benchmark networks for testing module detection algorithms. the generation of the network proceeds along the following steps. 
the degree, d, of each node is randomly assigned from the power law distribution with exponent γ, in our case it is  <dig>  the degree distribution is assigned depending on the maximum degree dmax={ <dig> } and the average degree, davg= <dig>  selected as an input.

nodes are assigned a fraction of edges, μ, that are shared with nodes of other communities and the remaining fraction, 1−μ, is shared within the community.

a community-size kmin and kmax is assigned in a following way, where kmin>dmin and kmax>dmax so that each node can be assigned to a community. the community size is decided based on the power law distribution so that the sum of the nodes in all communities is equal to the number on nodes in the network.

first, nodes are not assigned to any community and than nodes are assigned randomly to a community if the community-size exceeds the number of neighbours of the node in the community. this step is repeated until all nodes are assigned to a community.

in order to ensure that each node has a right approximation of μ and 1−μ for external and internal edges several rewiring steps are iterated.



for our analysis, we generated networks of vertex-size, |v|= <dig>  by varying different parameters for non-overlapping communities which are average degree, maximum degree, minimum cluster size, maximum cluster size and mixing parameter μ= { <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> }.

protein interaction networks
the protein interaction networks  we use for our analysis are obtained from biogrid database  <cit> . in total, we use  <dig> pins from  <dig> different species. the details are described in table  <dig>  these networks are pre-processed using the r package igraph  <cit>  by extracting the giant connected components  of the networks.


as one can see in table  <dig> these biological networks show a large variety in the network parameters such as number of nodes and number of edges.

normalized mutual information 
in order to assess the predicted modules of the algorithms qualitatively, we use the normalized mutual information  .

the normalized mutual information is defined as follows. suppose we have two community detection algorithms, u and v and they predict |r| and |c| communities in a network. the overlap between the two predicted communities is shown in the contingency table  <dig>  i.e., community u <dig> and v <dig> share n <dig> nodes. then the nmi  is calculated as follows. 
 nmimax=ih+h  where 
 h=−Σi=1rainlogainh=−Σi=1cbinlogbini=Σi=1rΣj=1cnijnlognij/naibj/n <dig> table  <dig> a contingency table which defines overlap between two communities, u and v


v
1
v
2
v
c

u
1
n
11
n
12
n
1c
a
1

u
2
n
21
n
22
n
2c
a
2

u
r
n
r1
n
r2
n
rc
a
r
b
1
b
2
b
c
n


RESULTS
benchmark networks
we start our analysis investigating the performance of community detection algorithms by application to benchmark networks. the benchmark networks are generated by an algorithm  <cit> , as described in the methods section, that result in networks with a predefined modularity structure. hence, it is know that the networks have a module structure and can be used as a reference to quantify the performance of the community detection algorithms in an objective manner.

in the following, we study various parameters of the benchmark algorithm to generate benchmark networks. specifically, we set the network size to |v|= <dig> nodes, for the average degree of the vertices we use diavg= <dig> and for the maximum degree, dimax= <dig>  the minimum community-size parameter, we vary for kmin={ <dig> , <dig> , <dig> } and the maximum community-size parameter for kmax={ <dig> , <dig> , <dig> }. for the mixing parameter, we study values in the set μ={ <dig> , <dig> , <dig> , <dig> , <dig> , <dig> , <dig> , <dig> }. for each parameter combination, we generate  <dig> networks, resulting in a population of benchmark networks with the same characteristics but random variations. this allows an assessment of the robustness of the results due to stochastically ocuring structural changes in the networks.

as performance measure for assessing the predicted modules of the community detection algorithms we are using the normalized-mutual information ; see methods section. the nmi evaluates the comparison of the true communities and the predicted communities, as identified by the different algorithms. the distribution of nmi values for different community detection algorithms is shown in fig.  <dig>  the parameters studied are:  mixing parameter μ= <dig> , average number of modules is  <dig>  mixing parameter μ= <dig> , average number of modules is  <dig>  mixing parameter μ= <dig> , average number of modules is <dig>  mixing parameter μ= <dig> , average number of modules is  <dig>  mixing parameter μ= <dig> , average number of modules is  <dig>  mixing parameter μ= <dig> , average number of modules is  <dig> 
fig.  <dig> normalized mutual information of different module detection algorithms for the benchmark networks



overall, the figure shows that as the mixing parameter, μ, increases the performance of all module detection algorithms deteriorates. compared to all algorithms, the label propagation algorithm underperforms throughout all values of μ and the spinglass community algorithm performs better than all other algorithms, except for low values of the mixing parameter. this indicates that the method has an optimal working point for intermediately connected modules, which is a counterintuitive behavior. furthermore, our distance measure-based approaches, notably a*sp pearson and a*sp spearman, are showing in general a good performances, and compared to fast greedy and walktrap they show even a favourable performance.

performance of module detection algorithms by adding random edges
in this analysis, we test the robustness of different module detection algorithms against noise by adding a certain percentage of edges randomly to the network. specifically, in the first step we generate synthetic networks, g=, with n modules as described in section benchmark networks. then we add a certain fraction of random edges resulting in g′=, where, e′=e∪e′′ with e′′ is a randomly chosen set of edges between vertices in v of the benchmark network g. we then compare the modularity of the modules predicted by different module detection algorithms in g′ with the modules in g. the main objective of this analysis is to test the robustness of the module detection algorithms with respect to the addition of random edges to the network. the results of the performance of different module detection algorithms are shown in fig.  <dig>  in this figure we generated plots between modularity and mixing parameter . from this analysis we find that the modularity of the modules predicted by different algorithms decrease as the percentage of added edges increases. the decrease in modularity is larger when the mixing parameter is higher. however, a small fraction of added edges do not effect the modularity, which can be seen in fig. 2a and b. from this analysis we find that the fast greedy and label- propagation algorithms are the worse performing algorithms, for higher values of the mixing parameter  the label propagation performs worse and for lower mixing parameter  the fast greedy performs worse compare to other algorithms. the spinglass algorithm performs best in all cases, the multi-level algorithm also performs better but for higher mixing parameter  the walktrap community and the clustering algorithms show a slightly better performance than the multi-level algorithm.
fig.  <dig> a comparison of modularity of different module detection algorithms by showing plots between modularity and mixing parameter  in synthetic networks. the synthetic networks are modelled by adding certain percentage of random edges in the networks. a  <dig> %   <dig> %   <dig> %   <dig> %   <dig> %   <dig> % additional edges of total edges are randomly added in synthetic networks



biological networks
next, we extend our investigation to biological networks. specifically, we use  <dig> ppi networks from different species. details of these networks can be found in table  <dig> 

modularity in ppi networks
first, we estimate the modularity, q, and the number of modules in these ppi networks for the  <dig> community detection algorithms. the results of this analysis are shown in tables  <dig> and  <dig> respectively.
dmpearson
dmspearman
dsppearson
dspspearman
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the bold values show two highest modularities of the modules predicted by module detection algorithms

dmpearson
dmspearman
dsppearson
dspspearman


the first observation we make is that the best performing algorithms are the multilevel and the spinglass community algorithms. interestingly, for some organisms, e.g., schizosaccharomyces pombe and homo sapiens, the label propagation algorithm almost fails entirely to detect communities. in contrast, fast-greedy and walktrap are also finding acceptable modularity values for the networks for which the label propagation algorithm has problems. among the distance-based measures, dmpearson, is the best performing method.

for the predicted number of modules, the walktrap algorithm results in many more modules than any other method, whereas the remaining methods predict a comparable number of modules. for instance, for the ppi network of homo sapiens , walktrap predicts  <dig> times more modules than fast-greedy and  <dig> times more modules than the spinglas method. this is interesting because this is not beneficially reflected in the modularity values q, see table  <dig>  in a way that this would lead to superior modularity values.

aside from the number of predicted modules, it is important to know the size distribution of these, i.e., how many proteins belong to the corresponding modules. the distributions of the sizes of the modules for the studied organisms are shown in fig.  <dig>  here one can see that there is a considerable variation among the methods. for instance, the variation of module sizes predicted by walktrap are generally smaller for all organisms. this is understandable because the predicted number of modules is for this method by far the largest, which leads in general to rather small modules. in contrast, the variations for the correlation-based methods depend crucially on the organism. overall, the largest variability is observed for the label propagation algorithm.
fig.  <dig> distribution of the size of modules detected in ppi networks by different module detection algorithms



considering the agreement among different methods, the module structure of candida albicans is least different and, hence, shows the highest level of consensus. for this organism, even walktrap results in a moderate number of predicted modules, which is comparable to all other methods.

in fig.  <dig> we combine the results from tables  <dig> and  <dig> as a scatter plot between the number of modules and the modularity. for reasons of clarity, we show only results for four out of the nine methods because the other algorithms add nothing for the following discussion. the interesting observation is that fast greedy displays a curious behavior because for an increasing number of predicted modules in the networks, the modularity decreases. in order to quantitatively confirm this observation we fit a polynomial regression of second order by the least squares method minimizing the residual sum of squares . for the linear and the quadratic term we obtain p-values of  <dig>  and  <dig> , which are significant for α= <dig> . this confirms our observation statistically. in contrast, multilevel and spinglass can be approximated by a linear regression model, with p-values of 10− <dig> and  <dig> .
fig.  <dig> scatter plot between the number of modules and the modularity. each method is color coded by a different color. the shown curves correspond to least squares regression models. for a*sp pearson, no statistically significant model could be fit that would be different from a horizontal line



interestingly, the a*sp pearson algorithm is somehow located between these models in the sense that the best linear fit would only use an intercept but no slope and the quadratic regression is barely not significant with p-values of  <dig>  for both the linear and quadratic term but higher values of adjusted r <dig> values. for this reason, we do not include results form the regression in fig.  <dig> 

comparison of algorithms
in order to investigate the similarity of the identified modules for different algorithms in detail, we use again the nmi measure. however, this time we use the nmi to compare the predicted community structure of one method with the predicted community structure of another method. in this way, the similarity of the predicted communities is assessed. in other words, this analysis will provide us with information about the consistency of results among different methods but does not allow to gain insights into the absolute quality of the predicted module structures, because the ground truth does not enter this analysis.

the results of this analysis are shown in the form of level plots of the nmi values between different community detection algorithms in fig.  <dig>  the color code of the nmi values goes from violet  to blue , see fig.  <dig> for the different scales for the different organisms. in general, there is a good agreement among different methods, however, on a moderate level. for instance, for drosophila melanogaster the nmi values are around ∼ <dig> . similarly, for house mouse and homo sapiens. in contrast, for norway rat the nmi values for a*sp spearman are succinctly lower than from all other algorithms. also label propagation stands out in a similar way for plasmodium falciparum and yeast.
fig.  <dig> similarity of the predicted module structures in ppi networks assessed by the nmi. the values of the nmi are color coded, as indicated by the color bar in each figure, showing the range of assumed values



by looking at the scale of the nmi values, one can see that for candida albicans the lower values of the scale assumes higher values than for all other organisms, ranging from  <dig>  to  <dig> . this indicates that the similarity among all community detection algorithms is for this ppi networks highest, confirming our observation in fig.  <dig>  where we have seen that the variation of the size of modules is for all methods similar and quite small. finally, we want to note that, in general, the distance-based measures are showing a higher similarity among each other than to the other community detection algorithms.

robustness of module detection regarding perturbations
our next analysis investigates the robustness of the predicted modules for perturbed ppi networks. specifically, we test how a module detection algorithm changes its performance if some interactions in a ppi network are randomly deleted. the rationale of our analysis is based on the assumption that biological networks, and the interactions they are made of, are not known with absolute certainty. instead, some interactions present in our ppi networks may be false positives due to measurement errors. since all ppi networks we are using are inferred from experimental data, we think this assumption is very reasonable.

in order to study the effect of false positive interactions, we generate  <dig> perturbed networks for each ppi network, g1sub,g2sub…g20sub, by deleting randomly  <dig> % of the edges in a ppi network. in order to make sure the the resulting networks are still connected, we remove only edges from nodes having a degree of d≥ <dig> and prevent removal of the last remaining edge. then, we apply the community detection algorithms to the networks, g1sub,g2sub…g20sub, and compare the predicted modules with the results from the unperturbed ppi network by using the nmi.

the results of this analysis are shown in fig.  <dig>  the first observation we make is that in all but two cases the nmi values are considerably smaller than  <dig> , indicating a large change in the predicted communities. one exception is the label propagation algorithm for saccharomyces cerevisiae and the other is for all algorithms but label propagation and spinglass for candida albicans. for all other algorithms and the remaining organisms, the obtained nmi values are much smaller, with the lowest value observed for label propagation for plasmodium falciparum. in general, compared to other methods and across the organisms, the most robust method appears to be walktrap.
fig.  <dig> robustness of module detection regarding perturbation of the ppi networks. distribution of nmi values comparing communities obtained from the unperturbed and perturbed ppi networks generated by randomly deleting  <dig> % of the edges



overall, the results show that even a moderate change in a ppi network leads, usually, in quite large changes of the predicted module structure, regardless of the algorithm or the organism.

biological meaning of predicted modules
as far, we focused on more technical aspects of predicted modules. now we switch gears by investigating the biological meaning of these modules. we do this by using external information, not included in the network structure itself, for assessing the predicted modules. as source for this external information we are using the gene ontology  database  <cit>  that provides comprehensive information about the involvement of genes across many organisms in diverse biological processes.

specifically, we performed an enrichment analysis of biological pathways obtained from the go database for the modules detected by the community detection algorithms. in order to test the statistical significance of biological pathways, corresponding to an over-representation of genes from a particular biological process, we use fisher’s exact test. since we are conducting 1000s of hypothesis tests, we need to apply a multiple testing correction. for this reason, we apply a conservative bonferroni correction for a significance level of  <dig> . the results of this analysis are shown in table  <dig> 
dmpearson
dmspearman
dsppearson
dspspearman
949
903
315
311
78
98
834
869
1019
993
203
203
249
837
863
1863
the bold values show the respective number modules predicted by them



in the last column of this table, the total number of tested biological processes is shown as a reference. overall, the multilevel and spinglass community detection algorithms have the largest number of enrichment biological pathways. but in general, these numbers are not too far apart from the remaining methods, with some exceptions. it is interesting to note that for plasmodium falciparum  none of the algorithms predicts modules that contain at least one enriched pathway. the reason for this may be in the very small number of total pathways  tested for this organism.

in table  <dig>  we show the the percentage of enriched pathways. the highest percentage is observed for arabidopsis thaliana , saccharomyces cerevisiae  and drosophila milanogaster  for different module detection algorithms. in contrast, norway rat  leads to the least percentage ∼ <dig> %.
dmpearson
dmspearman
dsppearson
dspspearman


the results in tables  <dig> and  <dig> provide us with an overview of the enriched pathways, but they do not tell us if a pathway is enriched in just one predicted module or in several. this information is shown in fig.  <dig>  in this figure, we color-coded the number of pathways showing enrichment for multiple modules, ranging from  <dig> to  <dig> modules. the maximum number of modules is also shown as a number in the barplots, for each algorithm. from the shown results, we see that most pathways are only enriched in one module  indicating a biological specification of these modules. in general, the number of enriched pathways decreases with an increasing number of modules for all methods and across all organisms. these observations support the hypothesis that modules are used as functional units to carry out specific biological functions. in general, the modules predicted by the walktrap community algorithm have a larger number of enriched pathways to multiple modules. furthermore, the pathways of house mouse and arabidopsis thaliana have a higher maximum number of pathways that are enriched for the maximum number of modules. the label propagation algorithm predicts the lowest number of pathways enriched to multiple modules, except for arabidopsis thaliana, which is a potential indicator of a poor predictability of modules in ppi networks. another interesting aspect to remark, is that the algorithms multilevel and spinglass, which predicted modules with the highest modularity, are having in general the largest number of enriched pathways to the maximum number of modules.
fig.  <dig> bar plots of the number of pathways that are enriched in multiple modules. the numbers inside each bar correspond to the maximum number of modules to which pathways are enriched



next, we study the significant pathways that are common across different organisms. specifically, in fig.  <dig>  we plot a distribution of common pathways. the multilevel and spinglasss have three and ten pathways respectively in common among  <dig> organisms; see table  <dig>  these processes are mostly involved in metabolic processes and cell communication. other algorithms, except label propogation, predict pathways common in four to five organisms, while label propagation, has pathways that are common in only three organisms. overall, the walktrap community algorithm predicts the largest number of  <dig>  pathways that are common in at least two modules.
fig.  <dig> bar plots of pathways which are enriched in two or more organisms. the numbers in each figure are showing the total number of pathways that are enriched



subnetwork analysis of homo sapiens obtained from different experimental methods
we extend our investigation to the subnetworks of homo sapiens. specifically, we use the  <dig> largest connected ppi sub-networks from different experimental methods. details of these networks can be found in table  <dig>  we estimate the modularity, q, and the number of modules in these ppi networks for the  <dig> community detection algorithms. the results of our analysis are shown in tables  <dig> and  <dig> respectively. the modularity of the subnetwork obtained from affinity chromatography technology showing a slightly higher modularity for fastgreedy, multilevel and spinglass algorithms. however, for other subnetworks the modularity is considerably higher compared to the complete ppi network of homo sapiens. the modularities of of subnetworks highlight the fact that different subnetowrks obtained from different experimental methods provide a mixture of different structural properties of the complete ppi network. the analysis also highlights the fact that multilevel and spinglass algorithms are consistently performing better than other algorithms and walktrap community predicts more number of modules compare to other algorithms. also the clustering based algotrithms and label propogation algorithms which perform better in synthetic networks are showing lowest modularity. in the next step of the analysis we performed enrichment analysis of pathways obtained form the corum complex database  <cit> . the results of this analysis are shown in tables  <dig> and  <dig>  the percentage of enriched pathways of corum complex database are higher compare to the go pathways for individual organisms except the subnetwork obtained from two hybrid experimental data. in the next step we predicted that if a pathway is enriched in just one predicted module or in several. this information is shown in fig.  <dig>  in this figure, the color-coded barplots show the number of pathways showing enrichment for multiple modules, ranging from  <dig> to  <dig> modules. in this analysis a large fraction of pathways are enriched to just one modules and a few pathways are enriched to two or three modules predicted by different module detection algorithms. a list of pathways which are enriched to more than one modules predicted by multilevel and spinglass algorithms are shown in table  <dig> 
fig.  <dig> bar plots of the number of pathways  that are enriched in multiple modules of ppi subnetworks of homo sapiens from different experimental types. the numbers inside each bar correspond to the maximum number of modules to which pathways are enriched

dmpearson
dmspearman
dsppearson
dspspearman
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
the bold values in show two highest modularities of the modules predicted by module detection algorithms

dmpearson
dmspearman
dsppearson
dspspearman
dmpearson
dmspearman
dsppearson
dspspearman
193
214
28
28
52
148
152
108
105
the bold values show the respective number modules predicted by them

dmpearson
dmspearman
dsppearson
dspspearman


time complexity of the algorithms
finally, we show results for the time complexity of the community detection algorithms. in table  <dig> the run time in seconds for the analysis of the ppi networks are shown. overall, the fastest algorithm is label propagation that provided for all studied networks the quickest results, below one second. for all other methods, even when they are in general fast, there is at least one network that requires much more time. for instance, fast-greedy is in general quite fast and comparable to label propagation, but for the networks saccharomyces cerevisiae  and homo sapiens  it takes over  <dig> respectively  <dig> times longer than for label propagation. a similar observation can be made for walktrap.
dmpearson
dmspearman
dsppearson
dspspearman


discussion and 
CONCLUSIONS
in our analysis, we used  <dig> community detection algorithms to predict modules in ppi networks of  <dig> different organisms. overall, our analysis provides a comprehensive understanding of the performance of large community detection algorithms. also, our analysis highlights organism-specific differences of ppi networks and the biological meaning of the predicted modules.

overall, from our analysis of these networks we found that the spinglass, multilevel and fastgreedy algorithm preform in general much better than the other algorithms. furthermore, the multilevel and fast greedy algorithm have, in addition, a good run time  that allows to obtain results for large networks within seconds. interestingly, despite the fact that these three algorithms are performing better, there is no complete similarity among these algorithms in terms of the predicted modules, but the results are to a large extend method-specific. another interesting fact about the multilevel and spinglass community algorithm is that the number of modules and the modularity are linearly correlated, while the performance of fast greedy decreases as the number of modules increases . at this point it is unclear which behavior reflects the modularity vs number of modules dependency best for biological organisms. however, it appears reasonable to assume that there is a limiting factor in the growth of modularity of biological networks, which would suggest that the behavior of fast greedy is a reflection of biological properties of the networks rather than a technical property or a bias of the method.

although, we studied extensively the performance of modules in biological networks and found high modularity for some organisms, still, for some organisms, such as homo sapiens and saccharomyces cerevisiae, we find a low modularity. this is especially surprising for homo sapiens. one reason for the low modularity in these networks could be the existence of many overlapping nodes between communities giving raise to overlapping modules and pathways. therefore, the standard non-overlapping community prediction methods may not be optimally suitable for detecting communities in such organisms. this would suggest that more effort needs to be placed on the development of such algorithms, because only in this way one could shed light on the nature of the overlapping modular structure of ppi networks. another explanation could be that the ppi networks contain incomplete information. one reason for this argument is because the highest modularity is predicted by the spinglass algorithm for arabidopsis thaliana , which is a less complex organism, and for this reason is easier to study. also the modularity of arabidopsis thaliana  is constantly predicted higher by all other algorithms.

by studying the biological meaning of predicted modules, we found that a large proportion of pathways is enriched in only a single module, in all organisms and for all algorithms. this underlines the role of biological pathways as part of a special functioning component in an organism. however, a small set of biological pathways is enriched in more than one module, and an even smaller proportion of pathways is commonly enriched to multiple modules in all organisms. in general the classification of these pathways can broadly be grouped into the following categories: 
pathways which are part of a single module only across many organisms.

pathways which are part of multiple modules across many organisms.

pathways which are part of a single module and a single organisms.

pathways which are part of multiple modules and a single organisms.



it would be interesting to see what biological processes they contribute to and what role they play in different organisms in order to see changes in an evolutionary perspective or the emergence of a higher level of functioning in different organisms.

in summary, the identification of modules in networks is a very complex problem and more work needs to be done. a potential future direction could be to extend the analysis for identifying communities with overlapping proteins/genes. this would be a major step forward because it would require the inclusion of the hierarchy among the modules and as such, require fundamentally different algorithms.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

st performed the analysis, interpreted the results and wrote the manuscript. sm, md and fes conceived and designed the study, supervised the analysis, interpreted the results and wrote the manuscript. all authors approved the final version.

