BACKGROUND
deciphering complex genetic regulatory networks encoded in a genome is a challenging problem in the post-genomic era  <cit> . identifying cis-regulatory binding sites recognized by transcription factors  in a genome is the first step towards this goal  <cit> . since any segment of genomic sequence can be potentially a cis-regulatory binding site, a binding site motif  can only be predicted by comparing multiple sequences that potentially contain the cis-regulatory binding sites sought after, based on the assumption that cis-regulatory binding sites are usually more conserved than their flanking non-functional sequences  <cit> . therefore, the motif-finding problem is usually formulated to identify overrepresented segments of sequences from a set of input intergenic sequences that can be obtained by using a group of co-regulated genes in the same genome  <cit> , or obtained by using a group of orthologous genes from multiple appropriately related genomes. the latter procedure is also called phylogenetic footprinting  <cit> . the motif-finding problem has promoted a large number of studies due to the importance of cis-regulatory binding sites in gene transcriptional regulation. here we can only briefly review some of recently developed methods that are relevant to our method, for more intensive reviews, see  <cit> .

motif-finding algorithms can be largely categorized into "word enumeration" based and "pattern recognition" based methods. the former methods use different strategies to exhaustively enumerate k-mers in the input sequences. for example, mdscan  <cit>  employs a deterministic greedy algorithm and weeder  <cit>  uses a suffix tree for the enumeration. moreover, winnower  <cit> , cubic  <cit> , cwinnower  <cit>  and motifcut  <cit>  use graph-theoretic methods for the enumeration. particularly, motifcut represents each k-mer in the input sequences as a vertex and searches for maximum density subgraphs as motifs using a minimum-cut algorithm  <cit> . the more recently developed mosdi algorithm  <cit>  attempts to identify iupac motifs by exhaustively searching a fraction of the motif space according to a compound poisson approximation of the distribution of the number of motif occurrences. the major drawback of word enumeration based methods is their computational inefficiency and application limitation to short motifs.

on the other hand, pattern recognition based methods often employ a probabilistic model for the representation of binding sites in the form of position-specific scoring matrices  and an optimization procedure to find motifs. for example, gibbs sampler  <cit> , alignace  <cit> , motifsampler  <cit> , and bioprospector  <cit>  use a gibbs sampling strategy to search the pssm space, whereas meme  <cit>  uses an expectation-maximization  strategy to find overrepresented sequences as possible binding sites. however, these optimization methods are known to be affected by local optima and can be very sensitive to small changes in the input sequences  <cit> . recently, deme  <cit> , seeder  <cit>  and moan  <cit>  were developed to find "discriminative" motifs, in which a motif is treated as a feature that leads to a good classification between a positive set of sequences containing binding sites and a negative  set of sequences  <cit> . however these algorithms are limited because they can only find motifs that exist in one group of sequences but not in another group of sequences. furthermore, when the distribution of nucleotides in a motif is not significantly different from that of the background sequences, the probabilistic model based algorithms may fail to find the binding sites .

in addition, it has been shown that a consensus sequence and pssm may not fully capture all the subtleties of a dna binding motif of a tf, while more complex models that incorporate position-dependence of binding sites may over fit the input sequences  <cit> . furthermore, the binding sites of a tf can be so degenerate that they can be divided into multiple distinct sub-motifs. for example, the experimentally verified  <dig> binding sites of the tf crp in e. coli k <dig> can be divided into at least three sub-motifs; i.e., a more information content-rich canonical palindromic sub-motif, a t-rich sub-motif, and an a-rich sub-motif although both the latter sub-motifs share a certain number of elements with the canonical sub-motif  <cit> . therefore, instead of predicting all the binding sites of a tf as a single motif, one should predict the binding sites of a tf as multiple sub-motifs and then merge them if possible. since individual binding sites in such a sub-motif are likely to be highly similar to one another, if we treat each binding site in a sub-motif as a vertex of a graph, and connected two binding sites by an edge if their similarity is above a cut-off value, then these binding sites are likely to form a clique . in other words, a sub-motif can be modelled as a clique from a graph-theoretic perspective. therefore, finding sub-motifs of a tf is equivalent to finding some maximal cliques in a graph that represents the similarity of k-mers in a set of intergenic sequences. in this paper, we present a polynomial-time algorithm, motifclick, for the problem based on this formulation while considering the distributions of nucleotides in binding sites and their background sequences as well as other statistical properties of binding sites . we have tested motifclick using both synthetic and real datasets of prokaryotes and eukaryotes, and found that our algorithm almost always outperforms existing leading algorithms in prediction accuracy on all datasets tested and is more computationally efficient than other graph-theoretic based algorithms such as motifcut  <cit> . in addition, motifclick seems to be the best among the leading algorithms at balancing the prediction sensitivity and specificity. more importantly, motifclick is more likely than the existing tools to identify binding sites that have a similar nucleotide distribution to that of their background sequences.

overview of the motifclick algorithm
before giving a formal description of the motifclick algorithm in methods, we first outline its basic idea. to find a motif with length k in a set of sequences, motifclick first converts each of the input sequences into a collection of  <dig> -mers . specifically, for each sequence, we extract all 2-mers with a step size k - <dig> ), so that two adjacent 2-mers have an overlap of k- <dig> bases . we construct a graph g = , in which the vertices in v represent the 2-mers from all the input sequences. we connect each pair of vertices u and v by an edge with a weight w if w is above a cutoff Î±. the weight measures the maximum similarity of all local gapless alignments of k-mers between two  <dig> -mers. clearly, if the binding sites of a tf are highly conserved, then they can be represented by a clique or a high-density subgraph  <cit> . however, as we mentioned earlier, a tf can bind a few distinct motifs with little similarity. this fact promoted us to re-define the motif-finding problem as the search for multiple maximal weighted cliques in the graph g =  followed by merging them if possible.

furthermore, to measure the significance of difference between a binding site and its background sequence, we define the sum of squared distance  between the nucleotide distribution {p} of each binding site and that of its background intergenic sequence {q} as . through analyzing the motifs collected in five databases, sgd  <cit> , regulondb  <cit> , dbtbs  <cit> , redfly  <cit>  and jaspar  <cit> , we found that a considerable portion of binding sites in the five databases have an ssd <  <dig>  . therefore, some binding sites in both bacteria and eukaryotes may not have a significantly different distribution of nucleotides frequency from that of their background intergenic sequences. this might explain why it is often difficult to find motifs whose elements have a small ssd using existing motif finding tools  <cit>  . to overcome this shortcoming of existing tools, we take ssd into account in our algorithm.

RESULTS
to evaluate the performance of motifclick, we first compared it with four leading general purpose motif finding tools: bioprospector  <cit> , meme  <cit> , motifcut  <cit> , and weeder  <cit>  on both synthetic and real datasets. we selected these tools for the comparison based on recent survey studies  <cit>  and our own evaluation of multiple motif-find tools  <cit> . for instance, tompa et al.  <cit>  assessed  <dig> motif-finding tools for the discovery of binding sites in eukaryotes using a dataset from the transfac database, and found that weeder outperformed the others for most measures, and that meme also performed well although not as good as weeder. in another survey study, hu et al.  <cit>  evaluated five tools, alignace  <cit> , meme, bioprospector, mdscan  <cit> , and motifsampler  <cit> , for the prediction of binding sites in prokaryotes using a dataset from regulondb  <cit> , and found that meme often achieved the highest sensitivity, while bioprospector often had the highest specificity. we included motifcut for the comparison in the current study because it is also a graph-theoretic algorithm and is claimed to discover more known yeast motifs than do meme and bioprospector. we also evaluated an option  of our motifclick program for finding more degenerate binding sites than the default setting. we excluded a few new methods, seeder  <cit>  and deme  <cit> , because they do not support the mode 'any-number of repetitions' ; moan  <cit> , because it requires a large and reasonable negative set; and mosdi  <cit> , because its output format is iupac, making the comparison difficult.

furthermore, with the availability of increasing numbers of sequenced genomes, phylogenetic footprinting has proved to be a powerful method for predicting cis-regulatory binding sites in both eukaryotic  <cit>  and prokaryotic genomes  <cit> . in this approach, one identifies well-conserved segments of sequences as potential binding sites from the intergenic sequences of a set of orthologous genes from a group of appropriately related genomes based on the assumption that binding sites of orthologous genes are largely conserved in closely related genomes. several existing general purpose motif-finding algorithms such as alignace, gibbs sampler, meme, and consensus  <cit>  have been used for phylogenetic footprinting in both eukaryotes and prokaryotes  <cit> . we  <cit>  have recently evaluated six tools, bioprospector, consensus, cubic  <cit> , mdscan, meme and motifsampler for the prediction of binding sites in prokaryotes by phylogenetic footprinting, and found that meme and bioprospector recovered more known binding sites than the others. therefore, we also compared the motifclick algorithm with the four leading general purpose motif-finding tools for phylogenetic footprinting on both prokaryotic and eukaryotic datasets.

in addition, motif-finding algorithms that are specifically for phylogenetic footprinting have also been developed, such as footprinter  <cit> , weederh   <cit> , phylogenetic gibbs sampler  <cit> , phylogibbs  <cit> , phyme  <cit> , and compareprospector  <cit> . these algorithms typically take into account the phylogenetic relationships of the input sequences when identifying the most conserved k-mers. thus, besides the four leading general purpose motif-finding tools mentioned above, we also compared our algorithm with footprinter and weederh. however, we excluded other phylogenetic motif-finding tools such as phylogenetic gibbs sampler, phylogibbs, phyme, and compareprospector, because their input orthologous intergenic sequences need to be aligned by a multiple alignment tool, but many orthologous intergenic sequences are not alignable. we also excluded phylogenetic motif-finding tools such as phylocon  <cit>  and priority  <cit>  because they were designed to search for motifs that are both overrepresented in a set of sequences from a genome and conserved across related organisms .

evaluation on synthetic datasets
in order to obtain accurate false positive rates and avoid possible overtraining of the algorithm parameters, we evaluate motifclick along with the four selected general purpose tools using the synthetic datasets.

 <dig>  motifs with a length of eight bases
we first evaluated our algorithm for identifying motifs with a length of eight bases implanted in the synthetic background sequences. in order to assess the ability of the tools for finding motifs with different ssds, we selected two motifs from the sgd database  <cit> , cin <dig> and phd <dig>  each contains  <dig> binding sites, with an average ssd of  <dig>  and  <dig>  respectively. we selected these two motifs for the evaluation since the majority of yeast binding sites have an ssd =  <dig>  or ssd =  <dig>  . binding sites are implanted in 400-base background sequences. as shown in figure  <dig>  for the motif cin <dig>  weeder has the highest sensitivity, while motifclick achieves the highest specificity, performance coefficient, and f-measure. however, for the motif phd <dig>  motifcut outperforms the four other methods. notably, motifclick is the best at balancing specificity and sensitivity for both motifs. furthermore, motifclick and weeder have a more consistent performance than the other methods on both motifs. this result might suggest that motifclick performs better when the ssd is small. to further confirm this speculation, we evaluated motifclick with the ssd option set to  <dig>  and the other tools on more 8-mer motifs with an ssd â¤  <dig>   that are implanted in synthetic background sequences. as shown table s <dig> in additional file  <dig>  motifclick generally has the smallest log-odds ratios with respect to the other programs, suggesting that it is able to find the most binding sites that are missed by the other tools.

to further compare motifclick with other tools for their ability to find binding sites located in different sizes of background sequences, we selected six motifs with a length of eight bases from sgd and six motifs with a length of eight bases from redfly for the evaluation. all these motifs have an ssd <  <dig> , and are available at http://motifclick.uncc.edu. each binding site was implanted in a background sequence of a length of  <dig>   <dig>   <dig> and  <dig>  bases. the average performance of each tool on the  <dig> motifs in each background sequence size  is shown in figure  <dig>  again, motifclick achieves the highest specificity, performance coefficient, and f-measure while weeder has the highest sensitivity, but the lowest specificity on each dataset among the programs. it should be pointed out that the default parameters were used for all the programs; however, we noted that the default of weeder could search eight-base motifs with two mutations while the other programs did not specify the number of mutations allowed, so it may be unfair to the other programs.

 <dig>  motifs with a length of  <dig> bases
we then evaluated our algorithm for identifying binding sites with a length of  <dig> bases taken from regulondb and dbtbs and implanted in background sequences of different sizes. now that the vast majority of motifs in regulondb and dbtbs have an ssd <  <dig>  , we chose  <dig> motifs from regulondb and eight motifs from dbtbs with an average ssd <  <dig> . these motifs and background sequences are available at http://motifclick.uncc.edu. weeder was not evaluated on these datasets, because it only accepts motif lengths of even values between  <dig> and  <dig>  as shown in figure  <dig>  motifclick achieves the highest sensitivity, performance coefficient and f-measure, while motifcut has the highest specificity for all the datasets of different background sequence sizes.

to evaluate the noise tolerance of our algorithm, we added  <dig> and  <dig> additional background sequences  of size  <dig> bases to each of the sequence sets in the  <dig> Ã  <dig> datasets constructed above for the  <dig> motifs, to form two datasets denoted as  <dig> Ã  <dig>  and  <dig> Ã  <dig> , respectively. no binding sites were implanted in any of these  <dig> or  <dig> additional sequences; therefore, they increased the noise levels in the original sequence sets. as shown in figure s <dig> in additional file  <dig>  with increasing levels of noise, motifclick almost constantly outperforms the other programs, and the noise levels have only a small effect on its performance for all the evaluations. therefore, besides its outstanding performance for prediction accuracy, our program is also rather noise-tolerant, comparable to the best tools evaluated such as meme.

furthermore, we found that all the motif-finding tools can accurately indentify motifs with an ssd >  <dig> , such as crp, lexa, and phob in regulondb, because they are easy to be separated from background. however, when evaluating motifclick with the ssd option set to  <dig>  and the other tools on the synthetic datasets implanted with the 16-base motifs having an ssd â¤  <dig> , such as argr, cpxr, h-ns, gere, and phop, we found that motifclick outperforms the other tools for identifying these motifs with an ssd â¤  <dig> , and can predict the most binding sites that are missed by other tools as indicated by its smallest log-odds ratios with respect to the other tools .

we evaluated the running time of motifclick on an intel xeon processor using all the synthetic datasets described earlier with motifs of lengths  <dig>   <dig>  and  <dig> implanted in sequence sets with nucleotide sizes  <dig> Ã  <dig>   <dig> Ã  <dig>   <dig> Ã  <dig>  and  <dig> Ã  <dig>  as shown in figure s <dig> in additional file  <dig>  the running time of the program is from several seconds to a few minutes on these datasets, and increases almost linearly with the size of the input sequences. thus, motifclick's computational efficiency is also comparable to that of the other algorithms; especially it runs much faster than motifcut though both are based on graph theory. for instance, it only takes motifclick a few minutes  to find a 16-mer motif in each dataset consisting of  <dig> Ã  <dig> nucleotides , while motifcut needs more than  <dig> minutes, on the intel xeon processor. the main reason is that motifclick only searches a portion of 2-mers while motifcut uses all possible k-mers as vertices.

evaluation on real datasets
 <dig>  sequences from the same genome
to evaluate our algorithm on real datasets, in addition to the  <dig> motifs that we have selected , we selected another  <dig> motifs with lengths of 8~ <dig> bases from jaspar  <cit> , each contains at least five binding sites. these  <dig> motifs were placed back in their original locations of genomic sequences of a maximum length of  <dig>  bases. to make the datasets more coherent, we removed binding sites that contain more than 30% degenerate bases and have an ssd >  <dig> . however, we kept all binding sites in each sequence if there are two or more binding sites in it. these motifs and genomic sequences are available at http://motifclick.uncc.edu. as shown in figure 6a, motifclick achieves the highest pc and f-measure, while weeder has the highest sensitivity, and motifcut has the highest specificity. therefore motifclick is also the best at balancing sensitivity and specificity on the real datasets.

in order to evaluate the sensitivity of our program to the values of the option '-ssd' specified by a user, we ran the program on the  <dig> real datasets using eight different '-ssd' values in the range of . as shown in figure s <dig> in additional file  <dig>  although the binding sites of the  <dig> motifs have an ssd in the ranger of , the performance of motifclick only slightly decreased when the value of the option '-ssd' deviated from that of the motifs in the dataset, in particular when the former is larger than the latter. however, one should avoid using a smaller value of '-ssd' when the motif to be found may have a higher ssd. to further evaluate the ability of motifclick to identify motifs with a low ssd that may be missed by other algorithm, we ran motifclick with the ssd option set to  <dig>  and the four other algorithms on  <dig> motifs with an ssd â¤  <dig>  from the  <dig> motifs of real datasets. as shown in table  <dig>  motifclick generally had the smallest log-odds ratio with respect to each of the other algorithms. therefore, motifclick is indeed the best at predicting motifs with a low ssd that are missed by other algorithms .

 <dig>  phylogenetic footprinting datasets from fungi and bacteria
to benchmark the performance of our algorithm for phylogenetic footprinting on real data, we compared motifclick with the four general purpose motif-finding tools as well as two phylogenetic motif-finding tools, weederh and footprinter, on orthologous intergenic sequence sets from the yeast  genome and other six closely related fungal genomes, as well as orthologous inter-operonic sequence sets from the e. coli k <dig> genome and other  <dig> closely related Î³ -proteobacterial genomes.

 <dig>  yeast data
because almost all of the seven motif-finding tools require to specify a length of the motifs to be predicted, and the majority of known binding sites in yeast have a length of about eight bases, we chose eight bases as the fixed motif length for motif-finding for all the tools except for weeder and weederh, for the former we used the option 'medium' as the motif length, and for the latter we used the default options. we applied each program in the 'anr' mode if available to the  <dig>  orthologous intergenic sequence sets from the fungal genomes , and considered the best predicted , top  <dig>  top  <dig>  top  <dig>  and top  <dig> motifs for the evaluation. we used the predictions from the yeast genome for the evaluation, because there are  <dig>  known binding sites belonging to  <dig> tfs from the genome in the input intergenic sequences sets. however, since not all binding sites in the intergenic sequences in yeast are known, to evaluate prediction specificity, we define the low bound of specificity  as the number of recovered known binding sites divided by the number of predicted sites. as shown in table  <dig>  weeder recovers the highest number of known binding sites, but achieves the lowest lbsp, and bioprospector achieves the highest lbsp but recovers the fewest number of known binding sites among these programs for most of the top numbers of predictions. on the other hand, the results in table  <dig> clearly show that motifclick outperforms meme and motifcut in terms of both the coverage of known binding sites and lbsp. furthermore, although weeder recovers more known binding sites than does motifclick for each top number of predictions, this is at the cost of its low prediction specificity. for instance, the number of predicted sites  in the best motifs  returned by weeder is very close to that  of the top  <dig> motifs returned by motifclick, but motifclick recovers more known binding sites in its all top  <dig> motifs than does weeder in its all best motifs . therefore, weeder is likely to have much more false positive predictions than the other tools, and motifclick is the best at balancing the true positives and false positives. as shown in table  <dig>  the two phylogenetic motif-finding tools weederh and footprinter do not perform very well on our dataset. the possible reason for weederh could be that it only has the 'oops' mode  while some of our input sequences contain more than one binding site.

bs, number of recovered known binding sites; mf, number of recovered motifs; ps, number of predicted sites; lbsp = bs/ps, lower bound of specificity.

 <dig>  bacterial datasets
to compare our program with the other programs for phylogenetic footprinting using the orthologous interoperonic sequence sets from e. coli k <dig> and other  <dig> Î³-protoebacterial genomes, we chose  <dig> bases as the fixed motif length for the motif-finding tools as most bacterial binding sites have a length of 12- <dig> bases  <cit> . weeder, weederh, and footprinter were not evaluated here as they are not designed to find a binding site longer than  <dig> bases. as shown in table  <dig>  motifclick and bioprospector achieve the highest lbsp in most cases among these tools, but motifclick recovers more known binding sites than does bioprospector. moreover, motifclick and meme recover the largest number of known binding sites in most cases among these tools, but motifclick has higher lbsp than does meme. therefore motifclick is the best not only for binding site coverage but also for lbsp.

bs, number of recovered known binding sites; mf, number of recovered motifs; ps, number of predicted sites; lbsp = bs/ps, lower bound of specificity.

in addition, we also evaluated the complementary effects of motifclick with other two best performers meme and bioprospector. as shown in the last four rows of table  <dig>  the combination of motifclick and meme recovers more binding sites and motifs than the combination of meme and bioprospector, suggesting again that motifclick is well complementary with other tools.

CONCLUSIONS
we have developed a novel graph-theoretic algorithm, motifclick, for cis-regulatory binding site prediction, and have demonstrated that it outperforms several current leading motif-finding tools on both synthetic and real datasets, especially when the nucleotide distribution of a motif is similar to that of its background sequence. furthermore, motifclick is the best at balancing the prediction specificity and sensitivity among the tools evaluated. in addition, motifclick is well complementary with a few other leading motif-finding tools, thus can be used in combination with these tools to improve binding site predictions in ensemble algorithms such as webmotifs  <cit> , emd  <cit> , gleclubs  <cit>  and egleclubs <cit> .

in the perspective of algorithm design, motifclick has several main advantages over most existing methods in general:  besides largely reducing the graph size, our use of  <dig> -mers avoids the drawbacks of directly using k-mers by other algorithms, caused by the fact that two binding sites of a tf may sometimes have fewer matches than one of their neighboring k-mers.  the merged cliques generated by our algorithm can capture more binding sites of a tf than the consensus and pssm models, in particular, when the binding sites of a tf can be divided into distinct sub-motifs.  although each clique is found by a greedy strategy, the enumeration of maximal cliques can guarantee our algorithm not to be trapped in a local optimum. and  since we ignore some k-mers that are less likely to be true binding sites, although motifclick is a word-based method, it does not exhaustively enumerate all the k-mers.

