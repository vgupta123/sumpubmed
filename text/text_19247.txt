BACKGROUND
with the increased availability of whole genome sequence assemblies, the estimation of species trees based upon the entire genome is now possible. the most frequently used approaches for estimating species phylogenies compute alignments on each gene, concatenate these alignments into one super-alignment, and then estimate a tree from the super-alignment. however, these “combined analysis” methods do not have good statistical properties because different regions of the genome can have different evolutionary histories. more generally, it is increasingly clear that gene trees can be different from species trees due to a number of biological processes. one of the dominant causes for this incongruence between gene and species trees is incomplete lineage sorting   <cit> , a population-level process where lineages “coalesce”  <cit>  deeply in the species phylogeny, so that the gene tree can be different from the species tree. thus, coalescence is a “backwards-in-time” process, which is mathematically equivalent to a forwards-in-time process called “lineage sorting”, whereby alleles within an ancient population diverge before a speciation event, and then assort into the two sub-species. ils has been implicated in the different hypotheses for the evolutionary tree on human, chimp, and gorilla  <cit> , but ils is quite generally a major problem for species tree estimation  <cit> .

several methods have been developed that estimate species trees from estimated gene trees under the ils model. one main approach is to find the species tree that implies the fewest number of deep coalescent events, a computational problem called “mdc” , a problem that is np-hard when the gene trees can be on different taxon sets  <cit> , but of unknown computational complexity when the gene trees are constrained to be on the same taxon set. heuristics for mdc have been implemented in various packages, including phylonet  <cit> , igtp  <cit> , and mesquite  <cit> . optimal solutions to mdc are not guaranteed to be statistically consistent, meaning that even with true trees for an unboundedly large number of genes, the species tree optimizing the mdc criterion may not converge to the true tree  <cit> . similarly, standard consensus tree methods have been shown to not be statistically consistent  <cit>  .

alternative techniques that are based upon statistical models for ils include glass  <cit> , stem  <cit> , *beast  <cit> , best  <cit> , and bucky  <cit>  . glass is a polynomial time distance-based method  that is statistically consistent when all genes evolve under the same rate; thus, when given a sufficient number of correct gene trees, glass will return a correct species tree with high probability. stem is a statistical method that requires that all input gene trees be properly rooted, and also has statistical guarantees  <cit>  when the gene trees are correct. *beast, best, and bucky  <cit>  are bayesian methods that produce a distribution of species tree topologies based upon ils from gene sequence alignments; bucky also explicitly considers causes of discord other than ils .

other new methods have been developed and studied for estimating species trees from incongruent gene trees, among them the method by yu et al.  <cit>   for a variant of the mdc approach, which we call “constraint-mdc”. the input to constraint-mdc is a set of estimated gene trees, where the trees can be unrooted and only partially resolved, and the objective is to find a species tree and rooted binary refinements of these estimated gene trees so as to optimize the mdc criterion with respect to the rooted binary refinements of the estimated gene trees. thus, each estimated gene tree topology is considered to be a constraint on the topology of the true gene tree.

simulation studies to evaluate these methods have examined performance on datasets in which the gene trees can differ from the species tree due to ils. these studies have shown that the methods in phylonet for constraint-mdc produce highly accurate species trees  <cit> , and that statistical species tree estimation  can produce more accurate tree than the combined analysis method that computes trees directly from the concatenated sequence alignment  <cit> . they have also shown that *beast produces more accurate trees than best  <cit> , that best and bucky produce more accurate trees than stem  <cit> , and that stem produces more accurate trees than mdc-based analyses  <cit> . however, all these studies are substantially limited because of the restriction to small datasets , the use of only substitutions  in the sequence evolution models, and the limitation to ils for causes of incongruence. a recent study  <cit>  addressed this last limitation, and compared best and bucky on datasets in which the gene trees could differ from the species tree due to hgt  as well as ils, and found cases where bucky gave more accurate reconstructions.

however, the other restrictions are still too limiting, for the following reasons. first, the restriction to small datasets does not allow us to evaluate relative performance on larger datasets, and does not help us understand the computational limitations of the methods, some of which are quite intensive. the restriction to substitution-only sequence evolution models means that alignments do not need to be estimated, and this reduces errors in estimated gene trees . the two conditions together make accurate gene tree estimation easier than for the general case, and especially easier than for larger datasets with high rates of indels and substitutions for which accurate alignment estimation is particularly challenging.

in this paper we report on a simulation study using rose  <cit>  in which we explore the performance of a large number of species tree estimation methods on nucleotide sequence datasets with  <dig> to  <dig> taxa that evolve with substitutions as well as indels. we report results for two experiments. the first experiment explored performance on datasets with multiple genes on  <dig> or  <dig> taxa in which the true gene trees can differ from the true species tree . in the second experiment, we explored performance on datasets with multiple genes on  <dig> and  <dig> taxa in which the true gene trees are topologically identical but can have different branch lengths. thus, the first experiment evaluates performance when the estimated gene trees can differ due to ils as well as estimation error, while the second experiment focuses on performance when all incongruence between estimated gene trees is due to estimation error.

our simulation protocol is substantially more complex  than most prior studies. except for the 17-taxon datasets , all our datasets evolve under a model that includes indels  as well as substitutions. we use a more general substitution model, gtr+gamma   <cit> , using gtr+gamma parameters estimated for a biological dataset , instead of jukes-cantor. we examine 100- and 500-taxon datasets, thus greatly exceeding the maximum taxon dataset size  used in prior studies.

for datasets that evolve with indels, we estimate alignments using the default setting for mafft v.  <dig> b  <cit> , a multiple sequence alignment method that is established to be among the most accurate  <cit> . we estimate gene trees using the default setting for fasttree  <cit>  v.  <dig> . <dig> to produce a fast and approximate solution to maximum likelihood under gtr+gamma. we estimate distributions of gene trees using the default setting for raxml  <cit>  v.  <dig> . <dig> with  <dig> rapid bootstrap replicates and a bayesian method . the raxml analysis includes a “best” ml tree resulting from its search, as well as a set of gene trees, allowing us to produce bootstrap support values for the edges of its best tree. for our default mrbayes analysis, we ran mrbayes for  <dig> , <dig> generations with a burn-in of 25% under the gtr+gamma+i model; all other options were left as defaults. with two runs and a sampling ratio of 1: <dig>  this is designed to produce  <dig>  trees per gene sequence alignment input. we varied the number of mcmc iterations used within mrbayes analyses, and we also varied the number of the sampled trees from the mrbayes analyses used in the bucky analyses.

although mrbayes and raxml with rapid bootstrapping produce a sample of different trees, we also use them to produce point estimates of the gene tree for those species tree estimation methods that require single trees for each gene. in the case of the mrbayes  analysis, we output the majority consensus tree  , and the maximum a posteriori probability  tree. for the raxml analysis, we use raxml-75%, the 75%-bootstrap tree . finally, fasttree outputs support values for every branch in the trees it produces; thus, we can also use ft-75%, the tree produced by contracting all branches with support less than 75% in the fasttree output. note that the mp-maj, raxml-75%, and ft-75% trees are not likely to be fully resolved; therefore, these point estimations of gene trees can only be used with species tree estimation methods that permit unresolved gene tree inputs.

we explore seven methods for estimating species trees from estimated gene trees or gene tree distributions. four of these are based upon ils, and include glass , phylonet-mdc v.  <dig>  , igtp-mdc v.  <dig> , and bucky v.  <dig> . <dig>  the other three methods are greedy, igtp-dup v.  <dig>  and igtp-duploss v.  <dig> . all of these methods, except bucky, take as input a single tree for each gene. in contrast, bucky operates in two steps: first it uses a technique  to produce a distribution of estimated gene trees for each gene, and then it uses these distributions to infer the species tree. in fact, though, bucky produces two different trees–the “concordance” tree  and the population tree   <cit> . the key difference between these two outputs is that the population tree is based upon a statistical model for incomplete lineage sorting while the concordance tree is not, and thus the concordance tree is designed to be used under more general conditions than ils. the three igtp methods  each uses the same basic algorithmic search strategy within igtp but seek to optimize different criteria . finally, “greedy” is the greedy consensus technique  using paup*  <cit>  v.  <dig> b10; it begins by computing the majority consensus , and then adds bipartitions  to the consensus tree, in an order reflecting the frequency with which each bipartition appears. note that phylonet and greedy can be applied to incompletely resolved gene trees, and that when we use phylonet on unresolved gene trees, it attempts to find optimal solutions to the constraint-mdc problem. as discussed earlier, we produce incompletely resolved gene tree estimations either by contracting low support branches in fully resolved estimated gene trees, or by computing the majority consensus tree of the distribution produced by mrbayes.

we describe methods for species tree estimation by indicating the technique used to estimate the gene trees  and the technique used to compute the species tree from the gene trees. for example, greedy refers to the method that computes the ft-75% tree on every gene sequence alignment, and then combines these  trees using greedy. similarly, bucky-pop refers to bucky-pop run on a sparse sample of the mrbayes distributions for each gene, bucky-con refers to bucky-con run on the full sample of the mrbayes distributions, and phylonet refers to phylonet run on the map trees from the mrbayes distributions. not all species trees we compute are fully resolved; hence, the robinson-foulds distance , is inappropriate for evaluating accuracy, as it is biased in favor of unresolved trees  <cit> . therefore, we report tree error using the missing branch rate, which is the proportion of internal branches in the true tree defining bipartitions that are missing in the estimated tree, also known as the “false negative”  rate. however, many of the estimated species trees are fully resolved, and for these trees, this measure is identical to the robinson-foulds metric. these error rates range from  <dig>  -  <dig> , with error of  <dig>  indicating that the estimated tree is identical to the true tree.

RESULTS
computational issues
we began by exploring the computational performance of the methods we studied on  <dig> 100-taxon datasets, half with  <dig> genes and half with  <dig> genes. these studies showed that these different pipelines  vary substantially in terms of computational effort.

the most computationally intensive methods we explored use mrbayes or raxml to estimate distributions on gene trees, but mrbayes analyses are particularly expensive. our analyses  indicated that enforcing a requirement that all mrbayes analyses reach convergence was not achieved on any dataset we examined, even after at least a week for each alignment . therefore, each 17-taxon 32-gene dataset we examined could easily require a year  of analysis in order for each mrbayes analysis to reach convergence.

restricting the mrbayes runs so that each gene is analyzed in at most a day greatly reduces the running time, and allows the first step  to complete in as many days as there are genes . these analyses will still be computationally intensive, but not as intensive as waiting for all mrbayes analyses to converge. however, early terminations of mrbayes analyses are likely to make the analyses “invalid”, and potentially therefore reduce the accuracy of the resultant estimated species phylogeny. raxml with bootstrapping can also be computationally intensive, so that analyses of single 100-taxon datasets with  <dig> bootstrap replicates took on average almost  <dig> hours, making an analysis of  <dig> genes require  <dig> days just to obtain the initial set of tree distributions. limiting raxml to only  <dig> bootstrap replicates greatly reduces the running time to  <dig>  hours on average per sequence alignment with  <dig> taxa, thus making it possible to obtain raxml distributions on  <dig> genes in about  <dig> days.

the only computationally intensive method for estimating species trees from gene trees is bucky . bucky’s computational challenges are very much impacted by the total number of taxa and total number of trees in its input. we compared bucky analyses based upon sparse samplings  from the mrbayes distributions as input to bucky, in comparison to larger numbers of trees  on six 100-taxon datasets with  <dig> and  <dig> genes. this modification resulted a tremendous reduction in the computational effort, especially for the  <dig> gene datasets. the bucky analyses of these  <dig> gene datasets with this sparse sampling of mrbayes trees completed on average in about one day and had peak memory usage averaging  <dig> gb, while bucky analyses using the “full” mrbayes runs averaged one week per analysis and had average peak memory usage of  <dig> gb. several of the bucky analyses of the full mrbayes sample used more than  <dig> gb of main memory, but no analysis of the sparse sample used more than  <dig> gb. the memory requirement for these full mrbayes analyses is truly prohibitive, since most investigators will not have computational resources of this scale available, but the sparse mrbayes analyses are computationally much less troublesome.

except where indicated, the analyses in this study are based upon “fast” versions of mrbayes and raxml with bootstrapping, as follows. mrbayes analyses were performed with only 1m iterations and we used only  <dig> bootstrap replicates for raxml. under these settings, single 100-taxon sequence alignments could be analyzed using mrbayes in under a day and using raxml in about  <dig>  hours. therefore, analyses of  <dig> gene sequence alignments could be performed in 1- <dig> months using mrbayes and in about  <dig> days using raxml. these settings made it possible to perform analyses of multiple datasets, each with tens of genes, in reasonable timeframes.

the fast methods we studied are all based upon fasttree, a method that is deterministic and very fast on even very large datasets. in our studies, even on the 500-taxon datasets with  <dig> genes, all the fast methods finished in under two hours and used less than  <dig> mb of peak memory.

evaluation of algorithm design choices
we begin the study with examining two specific algorithm design choices that were made in order to improve topological accuracy and/or running time.

recall that phylonet was designed to solve the mdc problem, and that when used with incompletely resolved gene trees, it is designed to solve the constraint-mdc problem. the motivation for the constraint-mdc problem is that low support edges are often not reflective of true history  <cit> . the hypothesis is that contracting the low support edges and solving constraint-mdc will improve accuracy. since ft-75% refers to the result of contracting all edges in the fasttree output with support below 75%, the hypothesis is that phylonet should be more accurate than phylonet. this is what we set out to test.

we also wished to evaluate the consequences of using only a sparse subset of the mrbayes distribution as input for bucky, instead of the full distribution. the advantage of using the sparse distribution is the decrease in running time and memory usage ; however, the concern is that using a sparse distribution might reduce accuracy of bucky analyses. we therefore wish to determine whether there is a statistical difference between bucky and bucky.

in each experiment below, we began by comparing phylonet to phylonet to see if there was a statistically significant difference. for those datasets in which we ran bucky analyses, we also compared bucky-con to bucky-con and bucky-pop to bucky-pop. these pairwise comparisons were performed using wilcoxon signed-ranks tests. other comparisons between methods were performed using wilcoxon signed-ranks tests, and then corrected for multiple tests using bonferroni’s correction.

phylonet vs. phylonet
we compared phylonet to phylonet on every dataset we generated, and there was a statistically significant improvement obtained in every model condition . we observed a statistically significant improvement of phylonet over phylonet on all the datasets without ils datasets for both true and mafft alignments . for the ils datasets, we observed a statistically significant improvement for all 17-taxon ils datasets . on the ten 100-taxon ils datasets, we also saw a statistically significant improvement of phylonet over phylonet .

since phylonet shows a statistically significant improvement over phylonet in every model condition, it seems likely that contracting low support edges in fasttree trees does improve the species tree accuracy produced by phylonet.

bucky vs. bucky
we now evaluate the statistical significance of changes in tree error that result from using bucky to analyze a sparse subset of the mrbayes distribution instead of the full distribution. these comparisons were done on only a few datasets . of these three model conditions, there was only one condition  in which there was any statistically significant difference for bucky-con , and no condition that resulted in a statistically significant change for bucky-pop.

this suggests that neither bucky-con nor bucky-pop is particularly impacted by using a sparse subset of the mrbayes distributions, and that the computational advantages of using the sparse distributions may be worth the risk involved in using fewer trees. however, it is also possible that the lack of statistical significance is a result of the small sample size, and that more extensive testing will demonstrate that the difference is statistically significant; thus, further research will need to investigate the impact of sparse sampling.

experiment 1: gene trees that can differ from the species tree due to ils
we continue with the experiments we performed on 17-taxon and 100-taxon datasets where the true gene trees can differ from the true species trees due to ils.

17-taxon datasets
we begin the discussion with the results for 17-taxon datasets with  <dig> and  <dig> genes per dataset. these data evolved under jukes-cantor, the simplest substitution-only model , and so there was no need to estimate the alignment on any dataset.

we begin with a discussion of glass’s performance. first, glass can be run on distance matrices estimated directly from an alignment or from a tree computed on an alignment. we evaluated the accuracy for trees returned by glass on  <dig> datasets, each with  <dig> genes per dataset, using three different ways of calculating distances on  <dig> datasets: the logdet  <cit>  distances, computed using dnadist from the phylip package   <cit> , calculated directly from the alignment, and distances computed on the fasttree and map tree from the mrbayes analysis. the best results were obtained from the logdet distance matrix  with the other two distances having much higher error rates . these results are all very poor, indicating that although glass gives the best results on logdet distances, it is much worse than the other methods. therefore, we omit glass from any further discussion in this section.

among the “fast” methods , phylonet, greedy, and greedy are the best three for both numbers of genes, and igtp-dup the least accurate for both numbers of genes. finally, for both numbers of genes, the most accurate of the igtp methods was igtp-duploss.

we now compare six representative methods, bucky-con, bucky-con, bucky-con, phylonet, greedy, and igtp-duploss. the difference in error rate between the best fast method and the best slow method is about 5%, which in relative terms is large – but for datasets of this size, this is about  <dig>  of an edge on average .

after using bonferroni’s correction for multiple tests, we observed that only one pair of representative methods  and bucky-con) had a statistically significant difference on  <dig> genes. for  <dig> genes, we saw some additionally statistically significant pairwise comparisons, all involving bucky-con or bucky-con. however, all the other methods could not be distinguished from each other. furthermore, three fast methods–greedy, phylonet, and igtp-duploss–were statistically indistinguishable from bucky-con, bucky-pop, and bucky-pop.

100-taxon datasets
for the 100-taxon datasets, in order to run the computationally intensive methods, we explored performance on only  <dig> datasets, each with  <dig> genes. because these datasets are large, we only evaluated bucky, terminating mrbayes at 1m iterations, and giving a sparse sample of  <dig> trees for each gene to bucky. these datasets evolved under a model with substitutions as well as indels, and so we discuss results for both the true and mafft alignment on each dataset.

glass, run on the logdet distance matrix computed directly from the sequence alignments, had very high error rates for both true and mafft alignments , much higher than any other method . error rates did not vary much between the mafft and true alignments, so that with the exception of glass, error rates did not change by more than half a percent. therefore, we focus our discuss on the results for the true alignment, and omit results for glass. on the true alignments  all the methods had relatively low error rates that varied between  <dig> % and  <dig> %. interestingly, there were several methods with error rates in the  <dig> - <dig> % range, each based upon a different technique for estimating the gene trees–bucky-pop with  <dig> %, bucky-con with  <dig> %, and greedy with  <dig> % error. these observations suggest that these gene trees were relatively easy to estimate, in contrast to the 17-taxon datasets we studied earlier, where even the most accurate species trees based upon fasttree had distinctly higher error than the most accurate trees based upon either raxml or mrbayes. several fast methods have very good accuracy , including greedy, greedy, and phylonet, the three fast methods that had the least error for the 17-taxon datasets.

after correcting for multiple tests using bonferroni’s correction, there were no statistically significant differences between the representative methods on the true alignments for these datasets, and only one statistically significant difference on the mafft alignment  and bucky-pop).

experiment 2: analyses when no ils occurs
since a systematist will not always know the cause for incongruence between estimated gene trees, species tree estimation methods that are designed to handle ils need to be able to reconstruct species trees when incongruence is due to other causes. here we examine the case where all incongruence between estimated gene trees is due to estimation error.

the true gene trees for these datasets have identical topologies but different branch lengths, thus allowing us to investigate the ability of methods to reconstruct the true species tree from gene tree estimates when no ils occurs. these datasets evolved with indels as well as substitutions, thus requiring the estimation of alignments for the gene sequence datasets. when alignments are not highly accurate, however, gene trees will also have error, leading to the estimated gene trees exhibiting increased incongruence. we explored this question on datasets with  <dig> and  <dig> taxa. trends for  <dig> taxa were very similar to those we observed for  <dig> taxa, and so we focus our discussion on the  <dig> taxon datasets. as before, glass had very high error, and we omit glass from further discussion. the most striking observation is that the error rates of fast methods on the mafft alignment are much higher than error rates on the true alignment  suggesting that alignment estimation error greatly impacted gene tree estimation error. the other general observation is that igtp-dup has the highest error rates of all fast methods on both true and mafft. therefore, for the rest of this discussion, we will only address the remaining methods.

all fast methods ) have excellent accuracy on the true alignment, with error rates that vary from  <dig> - <dig> %; thus, the difference between the most accurate method ) and the other fast methods ) is very small. however, we note that the three fast methods with best accuracy are the usual ones – greedy with  <dig> % error followed by greedy with  <dig> % error and phylonet with  <dig> % error. after correcting for multiple tests, all but two comparisons are statistically significant; the only ones that aren’t are greedy vs. greedy and igtp-duploss vs. phylonet.

the situation changes for the mafft alignments, where error rates for the fast methods are much higher  which has 29% error), and the differences between methods somewhat greater. on these alignments, the most accurate method is greedy at  <dig> %, followed by igtp-duploss at  <dig> %, and then by greedy at  <dig> %. phylonet is in fourth place with  <dig> % error. thus, the results for the mafft alignment are similar, but show greater differences between methods, and also show that igtp-duploss can give very good results as well. after correcting for multiple tests, we find that the top three methods, greedy, greedy, and igtp-duploss, cannot be distinguished statistically, nor can igtp-mdc be distinguished from phylonet or phylonet.

in order to evaluate the computationally intensive methods, we used a subset of  <dig> datasets . average error rates on the six datasets with the true alignment ranged from  <dig> - <dig> % when based upon mrbayes distributions , from  <dig> - <dig> % when based upon raxml bootstrapping analyses, and from  <dig> - <dig> % when based upon fasttree . thus, using mrbayes and raxml instead of fasttree did improve the error, but not dramatically. the best accuracy for methods that use mrbayes was obtained by greedy , followed closely by bucky-con at  <dig> %. the best accuracy for methods based upon raxml was bucky-pop at  <dig> % fn, followed closely by bucky-con at  <dig> %. the most accurate methods that use fasttree were phylonet, greedy, and greedy, with error rates of  <dig> %,  <dig> %, and  <dig> %, respectively. igtp-duploss had the lowest error of the three igtp methods , and igtp-dup had the worst accuracy of all methods . not surprisingly, after correcting for multiple tests, none of the differences were statistically significant.

results for the six datasets with the mafft alignment were much higher, but showed similar relative performance . the best results for mrbayes analyses were obtained by bucky-con , the best results for raxml-based analyses were obtained by bucky-con , and the best results for fasttree-based analyses were obtained by greedy . here, too, igtp-dup had the worst accuracy  of all methods, and igtp-duploss had the least error of all three igtp methods . again, not surprisingly, after correcting for multiple tests, none of these differences were statistically significant.

overall summary of performance
the experiments we reported have datasets that range in terms of the causes for incongruence between estimated gene trees , rates of evolution , presence of indels, number of taxa, and type of alignment . thus, the relative performance between methods varies with the models. however, certain trends hold throughout.

the first observation is that bucky analyses of mrbayes or raxml distributions produces highly accurate trees, either tied with the best or close to the best, even for the suboptimal way in which we ran these methods .

the second observation is that several fast methods , phylonet, and greedy) provide very good results, coming close to bucky analyses of mrbayes and raxml distributions , and with greatly reduced computational requirements. furthermore, these fast trees have very low computational requirements, completing in at most two hours and with peak memory usage of at most  <dig> mb, even on our largest datasets containing  <dig> genes and  <dig> taxa. therefore, there are feasible alternatives to methods like bucky, which offer statistically-based estimation and high accuracy but at a computational cost that may be prohibitive.

the fast methods we studied are all based upon fasttree, a heuristic for ml that uses a deterministic hill-climbing heuristic to find locally optimal solutions to ml, and thus is likely to end up “stuck” in local optima. it is therefore possible that even better accuracy might be obtained, albeit at a computational cost. the remaining observations have to do with algorithm design. first, our study shows that methods, like phylonet and bucky, that by design explicitly accommodate error in the input gene trees can produce more accurate trees than methods that assume all the input gene trees are correct. we have also shown that modifications to mrbayes  can be made without compromising the accuracy of bucky’s estimated trees. these, and other approaches, could easily result in additional improvements for species tree estimation methods.

CONCLUSIONS
our study evaluating the computationally intensive methods was necessarily limited in number and in scope. nevertheless, the experiments we performed show that some very fast methods for estimating species trees from gene sequence alignments can come close to the accuracy of the best methods, while taking dramatically less time , and with much smaller peak memory requirements . furthermore, while we observed differences in accuracy between methods, some of which were substantial, the data suggests that in many cases, the differences between the best fast methods and the best computationally intensive methods we studied are not statistically significant. additional experiments are clearly needed in order to evaluate whether this is true, or whether this is a consequence of the limited number of datasets we evaluated. it is also important to determine if these trends hold generally, or if there are conditions where the computationally intensive methods offer substantially improved accuracy.

our study has many ramifications for simulation studies. because alignment estimation error has an impact on both the absolute and relative performance of methods, future simulation studies should include indels in their models and use both estimated and true alignments. gene tree estimation error has a very large impact on species tree estimation, and so the best methods for estimating gene trees should be used. this study shows that relative and absolute performance is also impacted by the number of taxa, and so datasets with larger numbers of taxa ought to be included. finally, since simple methods  are often quite accurate, these methods should be included in the methods that are compared.

although we initiated the study in order to evaluate methods for estimating species trees in the presence of ils, the observations in this study are also relevant to estimating species trees in the presence of gene duplication and loss. in particular, the poor performance of igtp-dup for non-ils datasets, in comparison to simple methods like greedy, suggests that there is need for substantial improvement in methods for estimating species trees in the presence of gene duplication and loss. perhaps the improvements for species tree estimation we observed by developing methods that explicitly handle error  can be obtained for gene duplication and loss scenarios as well.

materials and methods
all datasets  used in this study are available at http://www.cs.utexas.edu/users/phylo/datasets/ils.

simulated datasets
17-taxon datasets with ils
the 17-taxon datasets with  <dig> and  <dig> genes are from  <cit> , and were provided to us by yun yu and luay nakhleh. these datasets were generated by simulating jukes-cantor evolution  down gene trees that evolved within species trees under a coalescent process, and each alignment contained dna sequences of length  <dig> 

100-taxon datasets with ils
we simulated ten 100-taxon 25-gene datasets that evolve with ils as follows. a single 100-taxon model tree from  <cit>  was used as the species tree. we uniformly scaled down its branch lengths by  <dig>  to produce a model tree with short enough branches so that ils would occur. we evolved  <dig> trees within this species tree using ms  <cit> , starting with an island model of  <dig> separate taxa, and then joining the lineages backwards in time based on the species tree. the ms command we used is:

ms  <dig>  <dig> -t -i  <dig>  <dig>  <dig> ...  <dig> -ej <t> <from> <to> ...

this produces  <dig> gene trees, each with branch lengths. we simulated sequence evolution down each gene tree under a gtr+gamma+gap model  using rose, with the root sequence having length  <dig>  the gtr+gamma+gap parameters of model trees in  <cit>  are based upon biological datasets, and the tree topologies and branch lengths are based upon a random birth-death model, and are generated using r8s  <cit> .

100- and 500-taxon datasets without ils
we used model species trees from  <cit>  . each dataset contained  <dig> or  <dig> genes. half of the datasets were generated by model trees that were identical to the species tree, and half were generated by model trees that were identical topologically but had different branch lengths. to produce the modified gene trees, each branch length in the species tree was multiplied by a different random number with expected value  <dig>  and then rescaled so that all trees had the same total treelength. we then generated sequences on each model gene tree under gtr+gamma+gap using rose  <cit> , using the model parameters given in  <cit> , and with sequence length  <dig> at the root.

competing interests
the authors declare that they have no competing interests.

authors' contributions
tw conceived and designed the study; jy implemented the analysis tools, produced the data, and created the figures and tables; tw and jy analyzed the data; tw wrote the paper.

