BACKGROUND
introduction
sharing of microarray data within the research community has been greatly facilitated by the development of disclosure and communication standards. the introduction of the minimum information about a microarray experiment  standard  <cit>  has been a great success, while the development of a common data representation format ,  <cit> ) has enabled researchers to exchange data between laboratories and with public repository databases. however, the complexity of the mage-ml format has made its use impractical for laboratories lacking dedicated bioinformatics support. to address these needs, we propose a simple spreadsheet-based format for representing primary data and experimental details  from microarray investigations. we refer to this format as mage-tab . using mage-tab, investigation design, array descriptions, and processed data are described by using tab-delimited files, or spreadsheets in the broad sense of the word. additionally, the raw data, such as affymetrix cel or genepix gpr files, can be provided in their native formats. protocols are described using free text. documents in this format can be created, viewed and edited in essentially any spreadsheet software , which is typically familiar to biologists, who commonly use spreadsheets to maintain notes and track data. mage-tab is designed for data collection and annotation, as well as for data communication between tools and databases, including submissions to public repositories.

one of the central concepts this paper will use to illustrate the proposed format is the investigation design graph . this idg is a directed acyclic graph  representing relationships between samples , arrays and data objects. an example of such a graph describing a simple one-channel microarray investigation is shown in figure  <dig> 

the information in this graph can be represented using a spreadsheet  in a simple and natural way, as shown in table  <dig> 

each initial sample has a sample id  and characteristics – organism  and organismpart . the terms used to annotate the characteristics can be obtained from the mged ontology  <cit> , another suitable source of controlled vocabulary terms, or provided as user defined terms. the fourth column gives a reference to a relevant protocol, while the fifth gives the ids of the three hybridizations performed. the reference to the array design type  is given as a hybridization property, which is followed by the data file names, a reference to the data normalization protocol and the normalized data file.

although the example in figure  <dig> and table  <dig> relates to a one-channel experiment, two-channel experiments can be represented similarly, as demonstrated in the implementation section below. the following principles guided the design of the mage-tab format:

 <dig>  the format should be simple, but should also provide an explicit, structured representation of the details required by the miame standard.

 <dig>  the format should support concise description of the most frequently used experimental designs in a fashion familiar to biologists.

 <dig>  it should be possible to easily create, read, understand and edit documents in this format using only commonly available tools, and requiring no special training in bioinformatics or computer programming.

 <dig>  the format should have a formal definition, it should be machine-readable to the level of granularity defined by the miame structure, and it should be usable for communicating microarray data between different databases, data analysis tools and other software packages.

 <dig>  the formal definition should be based on the mage object model and for documents that can be expressed in mage-tab there is a unique mapping to and from mage-ml. at the same time no general mage knowledge should be needed to use mage-tab format.

the mage-tab specification defines four different types of files to fully describe a microarray investigation:

 <dig>  investigation description format  – a tab-delimited file providing general information about the investigation, including its name, a brief description, the investigator's contact details, bibliographic references, and free text descriptions of the protocols used in the investigation.

 <dig>  array design format  – a tab-delimited file defining each array type used. an adf file describes the design of an array, e.g., what sequence is located at each position on an array and what the annotation of this sequence is. if the investigation uses arrays for which a description has been previously provided, cross-references to entries in a public repository  can be included instead of explicit array descriptions.

 <dig>  sample and data relationship format  – a tab-delimited file  describing the relationships between samples, arrays, data, and other objects used or produced in the investigation, and providing all miame information that is not provided elsewhere. this is often the least trivial part of the experiment description due to the complex relationships which are possible between samples and their respective hybridizations; however, for simple experimental designs, constructing the sdrf file is straightforward, and even complex loop designs can be expressed in this format.

 <dig>  raw and processed data files – ascii or binary files, typically in their native formats; alternatively, data may also be provided in a specially defined tab-delimited format termed a "data matrix", described below.

background and rationale
microarray investigations can be interpreted only in the context of the experimental conditions under which the samples used in each hybridization were generated. moreover, microarray data are highly dependent on the particular experimental and data processing protocols. this makes the use of microarray data considerably more complicated than, for instance, genome sequence data, and was the primary motivation for the development of the miame standard by the microarray gene expression data  society  <cit> . as the title suggests, miame describes the data and metadata that authors must provide to support conclusions drawn from a microarray investigation, so that the data obtained in the investigation can be interpreted unambiguously and the investigation can be reproduced. the miame concept has been highly successful. it has not only guided the development of many software tools and databases, but has also been accepted by most of the major scientific journals as a means of making microarray data reported in publications available for scrutiny and for secondary analysis  <cit> . the fact that most journals now require miame-compliant data release as a condition of publication  <cit>  has created a substantial data flow to public repositories. the two major databases, gene expression omnibus   <cit>  and arrayexpress  <cit> , now house more than  <dig>  hybridization experiments, representing over  <dig>  investigations.

the main goal of miame is to make these data as useful as possible. miame provides the conceptual structure for the representation of microarray data including:

 <dig>  general information about the investigation and its design;

 <dig>  designs of the arrays used in the investigation;

 <dig>  characteristics of the samples used in the investigation;

 <dig>  experimental and data processing protocols;

 <dig>  raw and processed  data.

an important concept in miame is that of the experiment or investigation design – the description of the relationships between different samples, arrays to which they have been hybridized, and the resulting data. another important concept is that of experimental factors, such as time, dose, compound, or cell type. experimental factors are typically the variables of interest in the investigation. experimental factors enable the concise annotation of data – each column in the final data matrix can be annotated by the values of the most important factors characterizing the particular experimental conditions . logically, there may be one or more experimental factors per sample, where the samples for which all experimental factor values are identical are replicates. for more information about miame see  <cit> .

although miame identifies the details necessary to describe a microarray investigation, it does not provide a precisely defined format for data representation. such a format is needed to cope with the growing flood of microarray data, and to facilitate automated communication between different microarray laboratory information management systems , databases and data analysis tools. mage-ml was proposed by mged in  <dig>  <cit>  and accepted as the gene expression specification standard by the object management group  <cit> . it has been successful in that it has provided a platform for bioinformaticians and software engineers to understand and communicate information about high-throughput experiments in a precise language  <cit> . moreover, many tools and databases have implemented mage-ml either fully or in part . data generated by more than  <dig> different tools, representing more than  <dig>  hybridizations, have been provided in the mage-ml format and deposited in arrayexpress, and several fully automated data deposition pipelines have been established in both public and private organizations 

mage-ml was the first nontrivial format developed for communicating high-throughput functional genomics experiment descriptions, and was developed at the same time as the community was first attempting the large-scale interchange of these functional genomic data. nevertheless, mage-ml has not been accepted universally, for several reasons. one shortcoming is that mage-ml is ambiguous in that it permits encoding of the same semantic information in different ways . however, the main drawback has been the complexity of the mage-ml files, making it difficult to interpret or produce mage-ml files in the absence of a dedicated software development effort, which is seldom available for all but the largest laboratories.

in addition to mage-ml and mage-tab, there are other specifications that support miame-compliant microarray data. from a repository perspective the most popular are the tab-delimited soft and the more recently introduced xml-based miniml. these formats were introduced by geo  <cit>  and are designed to offer miame-capable data encoding with little object modeling expense. they are miame-supportive in the sense that they allow required information to be represented as free text descriptions. free text is a powerful, highly flexible means for representing any information, but extracting the desired information – such as experimental factors and their values – may require some text mining. miniml does not support structured, machine-parseable encoding of investigation design at the level of granularity required by miame; furthermore, the included free text descriptions are difficult to check for miame compliance, and not easily used in computation.

we believe that there is a need for a miame supportive format that is more structured than soft or miniml, but offers a less complex implementation than mage-ml. with support from the national human genome research institute  and the national institute of biomedical imaging and bioengineering , the mged members are developing the next generation microarray data standard, mage version  <dig> . it has been proposed that magev <dig> should consist of several inclusive layers of increasing complexity, where simple cases can be represented by simple constructs. the proposed mage-tab format will be related to the simple layer of magev <dig>  and will be a sufficiently explicit, structured representation of information required by miame for almost all types of investigations. although mage-tab will be part of magev <dig>  it is important to note that no knowledge of object modeling is required to use mage-tab and a substantially smaller set of documentation is necessary to learn mage-tab.

implementation
investigation design graphs and their representations
a key recommendation of the miame standard is the description of how biomaterials and data objects relate to each other within an experiment. such relationships are most easily represented in graph form. a dag in which nodes represent biomaterials  or data objects, and in which edges represent the relationships between these objects, can be represented as an idg. for instance, an idg can show which samples are hybridized on which array, producing which data files, as shown in figure  <dig> 

nodes and edges in this graph can be annotated with information about the respective objects, such as sample characteristics. edges  can be annotated by pointers to the respective experimental or data processing protocols, or by protocol parameters . more complex investigation design graphs are shown in figures  <dig> and  <dig>  the idg is a general concept applicable to any investigation description, and not restricted to microarray investigations. effectively, the idg represents the workflow of the investigation. the level of detail in this workflow description can vary; here we aim at the level of detail corresponding to the miame requirements. two basic notions we use in defining the idg are biomaterial and data object. the first intuitively represents a physical material such as a sample, rna extract, array, or hybridized array. a protocol, when applied to a biomaterial, can generate a new biomaterial as its result. biomaterials can also be split or pooled. for instance, one can take two samples, apply an rna extraction/labeling protocol to each of them, labeling with cy <dig> in the first case and with cy <dig> in the second case, mix them and hybridize them on the array . data objects can be created from biomaterials by applying a 'measurement' protocol, for example, by scanning a hybridized array to obtain feature intensities. data objects can be transformed into new data objects by applying a data transformation protocol; for precise definitions of these objects mage-tab will refer to the functional genomics experiment  object model that provides a higher-level class model for extension by technology-specific models such as magev <dig>  <cit> .

each node in an idg has an identifier and a list of labels. for instance, a node corresponding to a sample has the sample identifier and the sample properties, e.g., 'organism'  and 'organismpart' . a label can be either a simple character string or a reference to an external object such as an ontology entry. for instance, 'organism' will normally be described by an external ontology , 'organismpart' can be either a character string or an ontology entry obtained from an anatomy source of controlled terms. edges in this graph can be labeled by protocols  that have been used to derive one biomaterial from another. if protocols have parameters, these parameter values can be shown as labels on the respective edges . finally, each node in the graph has a type, e.g., 'sample', 'extract', 'hybridization', 'data'.

a question arises: how granular should the graph be? for instance, should one represent samples, extracts and labeled extracts within the same node, or using three different nodes? note the differences between idgs in figures  <dig> and  <dig> – figure  <dig> illustrates a two-channel experiment comparing a series of rna extracts with a common reference extract, while figure  <dig> represents a much simpler single-channel experiment. an additional layer of 'extract' nodes have been used in figure  <dig> to better indicate the point at which pooling occurred. in practice, the degree of granularity used in the idg largely does not matter, unless one of the 'intermediate' objects is being split or pooled. nodes in the graph that have only one incoming and one outgoing edge can be contracted into their predecessor nodes, by adding extra labels. thus, unless extracts are pooled or split, it is sufficient to show which sample is hybridized to which array. viewing a complex investigation design as a graph may be helpful, even if the graph is not drawn at the most granular scale possible. the graph representation makes the replicate structure in the investigation clear, and is even more valuable for developing software for data export/import from a database or tool. the possibility to represent an investigation design graph at different levels of granularity may seem to introduce ambiguity. however, the investigation design graph is an informal concept, and it is neither possible nor desirable to prescribe exactly how a particular investigation should be represented. for our purposes, the general guideline is that the graph should reflect the level of granularity defined by miame. we will show in the next section that this flexibility in the representation of an idg does not substantially affect the investigation design representations in the resulting spreadsheets, as all these different graphs will result in essentially the same spreadsheet and encode the same semantic information. a labeled graph can be encoded in various ways; in mage-tab, we use a tabular format for the following four reasons:

 <dig>  the observation that large investigation designs typically have a regular structure, i.e., the same sub-graph is repeated many times ; moreover, the replicated structure is simple. this observation was supported by analysis of the structure of over  <dig>  different investigations in the arrayexpress database.

 <dig>  the degree of nodes in these graphs , is small , except for a few specific nodes which are related 'reference' samples or extracts .

 <dig>  the observation that dags which correspond to commonly used investigation designs have a property that their nodes can be grouped in consecutive layers, i.e., the source nodes  are in layer  <dig>  the nodes that are connected to source nodes by an edge are in layer  <dig>  etc. furthermore, the grouping can be done so that each layer only contains objects of the same type, e.g., for the graph in figure  <dig>  we have sample layer  <dig>  extract layer  <dig>  hybridization layer  <dig>  raw data file layer  <dig>  and processed data layer  <dig> 

 <dig>  similar tabular formats have been used successfully in the biosciences and are familiar to many practitioners. for examples, see  <cit>  for a spreadsheet approach to microarray data management, or  <cit> , which describes the application of spreadsheets to the problem of data acquisition in the field of biochemical network modeling. in addition, the pride database  <cit>  is also developing a spreadsheet-based system for the submission of mass spectrometry data.

once a dag of a regular structure has been represented in such a layered fashion, it is natural to encode it as a tab-delimited file or 'spreadsheet'. each node in a dag is represented by entries in a contiguous set of columns within the spreadsheet. the first column within each set contains the id of the node, with subsequent columns containing the labels attached to that node, followed by the labels of the edges leading from the node. note that the labels in each list have a particular order. objects of the same type  are all contained within the same column set, thereby capturing the layered dag structure within the spreadsheet. each row in the spreadsheet corresponds to a path in the graph from one of the source nodes to one of the 'sink' nodes. thus if there are two or more edges leaving or entering a node, this node will appear in the spreadsheet once for each path passing through it. for instance, the dag given in figure  <dig> is represented as a spreadsheet in table  <dig> 

each 'layer' in the graph is represented by an id column in the spreadsheet, followed by columns for each of the labels. each path in the graph is represented by one row in the spreadsheet.

note that use of idgs provides a powerful mechanism to describe the pooling or replicate structure of the investigation precisely and unambiguously. one can easily distinguish between biological replicates  and technical replicates on various levels, such as several samples from the same source, or dye swaps .

mage-tab definition and examples
as described in the introduction, a mage-tab document includes four different types of files:  investigation description format ;  array design format ;  sample and data relationship format ; and  raw and processed data files. in this section we will describe each of these in more detail. here we describe the main concepts and ideas upon which the format is based; the full mage-tab specification is available online  <cit> .

investigation design format
an overall description of an investigation, including protocols and contact details, consists of a relatively small amount of information with few or no repetitious elements, and fits naturally into a single top-level document. table  <dig> shows an example of an idf document. values for certain fields such as "replicate types" and "protocol type" may be drawn from the mged ontology  <cit>  providing for a shared vocabulary of terms across files. where fields may contain more than one term, these terms are separated using a semicolon delimiter.

the first column represents the qualifier name, while their values are given starting from column  <dig> .

array design format
the aim of the adf component is to describe an array design in a spreadsheet or a set of spreadsheets. conceptually, microarray designs are devised to measure presence and/or abundance of molecular  entities in biological samples. each sequence of interest is represented by one or more reporter sequences on the array, each of which in turn is present in one or more physical locations on the two-dimensional microarray surface. thus three levels of hierarchy are required to describe the array design:

 <dig>  a feature on the array – a location  on the array where nucleic acids are spotted or synthesized.

 <dig>  a reporter sequence – the sequence of the molecules present at a particular feature on the array. note that the same reporter sequence can be present at different features, i.e., there is one-to-many relationship between reporter sequences and features.

 <dig>  a composite element – a set of reporter sequences designed to measure the same biological entity, such as a gene or an exon.

in the simplest case there may be a one-to-one relationship between reporter sequences and the biological objects they are measuring. however, in a more general case, there may be a set of reporters measuring the biological entity. for instance, on short oligonucleotide arrays , many reporters are used to measure the expression of the same gene. in the most general case there may be a many-to-many relationship between the reporters and the biological entities they are measuring . these concepts are derived from the mage object model. to describe a microarray layout fully, information about composite elements, reporter sequences, and features on the array, and the relationships  between them, must be provided. the adf has been designed to provide the means to do this. an example of an adf document is shown in table  <dig> 

note how the information about reporter and compositeelement is duplicated to indicate the fact that every synthetic sequence is spotted more than once on the array.

sample and data relationship format
the least trivial part of an investigation description is in the relationship between sample and data objects, as represented in the sdrf file. as already mentioned, an investigation design can be described as a dag, and the sdrf is a spreadsheet-based representation of such graphs. tables  <dig> and  <dig> show sdrf examples representing the investigation design graphs shown in figures  <dig> and  <dig>  respectively. similarly, figure  <dig> shows a simplified experimental design graph of replicated design, dual channel with dye swap , and its spreadsheet representation is shown in table  <dig>  in the next example , sources are split into samples, which are then pooled into extracts as shown. the idg in figure  <dig> can be represented by the sdrf in table  <dig> 

the bold highlighting indicates the materials linked to a single hybridization for ease of viewing this example.

there are several conventions that can be used to make the encoding of dags into spreadsheets more concise. first, not every path in a dag has to be represented on the spreadsheet to encode the dag unambiguously; it is sufficient to represent every edge only once. for instance, in the graph shown in figure  <dig>  there are four possible paths , , , and . however, it is enough to present only two full paths, e.g.,  and , to represent all the relationships between the nodes in the graph, as shown in the spreadsheet in table  <dig>  the second 'compaction' rule allows an sdrf spreadsheet to be split vertically on any id column. more precisely, it is permitted to end an sdrf table at any id column, and then start a subsequent table with the same column. it is not necessary to duplicate lines for any id in the second part. for instance, the sdrf in table  <dig> can be represented by the two spreadsheets in tables  <dig> and  <dig> 

to describe the idg in figure  <dig>  only two of the possible four paths need be shown; redundant edges in the graph may be omitted.

such splitting of an sdrf spreadsheet can be done on any id column, which becomes the last column in the first spreadsheet  and is repeated as the first column in the second spreadsheet .

see the legend to table  <dig> for discussion. because each hybridization id only needs to be represented once, the second partial spreadsheet has three rows instead of nine .

for a detailed description of rules for encoding an arbitrary investigation design graph as an sdrf file, see the mage-tab online documentation  <cit> .

data files
the mage-tab specification requires that raw data files are provided as binary or ascii files in their native formats, such as affymetrix cel files, agilent txt files, or genepix gpr files, whereas processed data files may be communicated in tab-delimited text format as data matrix files. normally, a mage-tab document will have one data matrix where rows typically represent genes , and columns typically represent samples or experimental conditions. one can think of such a matrix as containing the data that are typically published as supplementary information for a given paper and on which the author would perform analyses such as clustering.

the main feature of data matrices, that distinguishes them from arbitrary data files, is that columns in such matrices have references to id objects in sdrf files, for instance to particular raw data files or particular samples. this enables mapping from biomaterials and their characteristics  to individual processed data columns by following the edges in the investigation design graph. syntactically, each data matrix file has two header rows, as shown in table  <dig>  the first header row contains references to id objects in an sdrf file. all the ids should come from one particular column in the sdrf. that is, each column in the data matrix is marked by unique ids from a particular column in the sdrf. the second row contains the names of the quantitation types, such as 'signal', 'p-value', or 'log_ratio' . an example is shown in table  <dig> 

the first row gives references to objects in an sdrf file, for instance to arraydata uris in the sdrf in table  <dig>  the second row specifies the names of the quantitation types that are represented in each column. the first column gives the names of the biological objects these 'expression' measurements relate to, for instance the ids of the reporters or composite elements in the adf file or files describing the design of array on which these measurements have been performed. alternatively, this column may contain identifiers from public sequence databases, or chromosome coordinates from a specified genome build.

using this mapping each column in the summary data matrix can be automatically and concisely annotated by the most important characteristics, such as experimental factor values .

RESULTS
experimental factors and their values
experimental factors and experimental factor values are important concepts in miame. the experimental factors are the principal variables in the investigation, for instance "time" in time series investigations, "dose" in dose response investigations, "compound" in compound treatment investigations, or "disease state"  in disease studies. the same investigation may have several experimental factors; for example, compound, dose and time may all be experimental factors in a dose response investigation in which several compounds are added to the samples over a time course. experimental factors and their values can appear in the sdrf file in any column , and are annotated as such by being listed in the idf file. for example, the idf linked to the sdrf in table  <dig> would include the mged ontology term "time" in its list of experimental factors , indicating that the "parametervalue " column represents an experimental variable. biological replicates are represented by distinct biological sources, grouped together by common experimental factor values. in contrast, technical replicates are represented by branching of the investigation design graph at intermediate steps of the experimental processing.

the experimental factor values are the values of the respective experimental factors in a particular sample. for instance, in a time series the values are the time points at which each measurement was taken.

experimental factor values provide a means of annotating investigations concisely – the most important experimental variables are clearly and accessibly defined. moreover, one can easily represent biological replicates: these are samples which have different sources, but exactly the same values for all experimental factors. by propagating the factor values down to data columns in the processed data, one can annotate data concisely. for instance, if we have two experimental factors compound and dose, each of which have two possible values, e.g. compounds c <dig> and c <dig>  and low dose and high dose, then the data columns will be annotated by combinations of these values: , , , .

applications of mage-tab
mage-tab can be used in either of two ways:

 <dig>  creating mage-tab documents using spreadsheet templates provided in the main specification document  <cit>  or creating them 'from scratch';

 <dig>  developing mage-tab export or import functionality for microarray databases or tools.

details of the second use depend on the particular structure of the database or tool; as this is mostly aimed at software developers and professional bioinformaticians it will not be discussed here. the first approach may be used by biologists to keep track of data, to submit the data to either public or private repositories, or to exchange data. use of existing template sdrf documents can simplify this approach. the mage-tab specification document provides templates for several 'standard' experimental designs for one- and two-channel investigations including:

 <dig>  simple replicated design;

 <dig>  replicated design with technical replicates;

 <dig>  replicated design with pooling;

 <dig>  replicated designs for dual channel investigations;

 <dig>  dual channel replicated designs with dye swap;

 <dig>  dual channel replicated designs with a reference sample;

 <dig>  dual channel replicated design with a reference and dye swap;

 <dig>  dual channel replicated design with a pooled reference;

 <dig>  loop design;

 <dig>  loop design with dye swap;

 <dig>  time series investigations.

this list is by no means exhaustive; in fact, mage-tab does not prescribe any particular investigation design. rather, the purpose of this template collection is to help users to create an sdrf file for their particular design. idf and adf files are quite straightforward to create; moreover, for experiments that are done on standard arrays, such as affymetrix or agilent, biologists do not need to create the adf files, as they are provided by the manufacturers and public databases.

CONCLUSIONS
mage-tab is designed to serve as a format for data collection, presentation, and communication. some may argue that the data communication format should be separated from the collection and presentation format, on the grounds that the data communication format is designed solely for computers, whereas data collection and presentation depend upon human-computer interactions. this convention has been used in mage-ml with some success. however, the separation of these formats can only work well if there are good tools to interconvert the data collection and communication formats. because tool development has proven to be expensive and time consuming, a format that is simple enough to be usable without any specialized tools is needed at present. mage-tab serves as such a format.

a valid caveat regarding spreadsheet-based formats relates to the limitations of currently-available spreadsheet software. at present, the maximum number of rows allowable in a microsoft excel or openoffice spreadsheet is  <dig> ; it is anticipated that many array designs will exceed this number of features, rendering such software packages less useful for constructing adf files. in addition, these software packages often implement automatic date format and floating point conversions which can silently alter values entered into a spreadsheet to render them invalid  <cit> . care must therefore be taken when using these programs, for instance by formatting the entire spreadsheet as plain-text prior to entering any data. 

some would argue that xml-based formats are more appropriate for data exchange than tabular formats. however, this is not universally true – xml is most appropriate for representing tree-like structures, whereas investigation design graphs are dags. it can be quite cumbersome to represent a dag in an xml-based format. our observation that the dags corresponding to investigation graphs are regular, layered and have a small node degree , has enabled us to find a natural way to represent such dags in a spreadsheet format. as far as array designs are concerned, their representation as spreadsheets is straightforward since such data are naturally encoded in a tabular format. 

moreover, since the level of granularity in mage-tab is consistent with that of miame, it also offers a formal model for representing miame-compliant data that is simpler than the full mage object model. we propose that mage-tab becomes a platform-specific implementation of the 'simple layer' of mage. as such, mage-tab will be more limited in expressivity than mage-ml. for example, protocols are described as free text with optional parameters, rather than as a series of discrete steps. 

the arrayexpress database is planning to accept submissions in the finalized mage-tab format as soon as practically possible. in effect, a prototype called 'tab2mage'  <cit>  which uses spreadsheets similar to the mage-tab format has already been implemented and proven to work. . arrayexpress will also provide data export in mage-tab format. in the next 12– <dig> months we will gather feedback on how well this format works in practice, and make the necessary revisions, as part of the magev <dig> development process. nevertheless, we expect that the format will be stable, and even if some changes are needed in the future, we aim to provide software for interconverting the formats. 

in conclusion, we note that mage-tab has been designed to address the needs of the microarray community, by providing a simple format for representing and communicating miame-compliant data in a structured way with minimal investment.

authors' contributions
all authors contributed to the design of mage-tab through participating in one or more of the five mage workshops held during  <dig> and  <dig>  or via e-mail discussions. tr designed and implemented the tab2mage prototype, and wrote the final draft of the manuscript. pr-s designed the adf component of mage-tab. af, eh and hp participated in testing and evaluation of the tab2mage prototype, and documented the core use cases for mage-tab. cb and us helped to design the idf component. ps was the main organizer of the mage workshops, and was leading the critical discussions. af implemented a visualization tool for idgs and analyzed their structure in arrayexpress. ps, hc, cs, jw, ri and dm contributed also to different drafts of the manuscript. jl, kp, mm, pw and us helped in relating the format to mage-ml and the mged ontology. ab initiated and coordinated the design process for mage-tab, and wrote the first draft of the manuscript. all authors read and approved the final manuscript.

