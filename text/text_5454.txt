BACKGROUND
genome-scale metabolic reconstructions from a variety of organisms have become available in recent years  <cit> . at the same time, data from different organism-specific networks has been collected into "universal" metabolic databases such as kegg  <cit>  and biocyc  <cit> . this has enabled comparative analyses of metabolism over multiple organisms  <cit> , and proven useful in drug discovery  <cit> , metabolic flux analysis  <cit>  and metabolic engineering  <cit>  tasks.

a typical way to query a metabolic model is to ask whether a biologically realistic connection exists in the model from a metabolite to another. we may ask this question in different contexts, depending on the task at hand. for instance, when reconstructing a metabolic network for a novel organism  <cit> , we are interested in discovering if a previously characterized pathway is present in the organism under study  <cit> . further, we may ask whether the organism possesses the ability to produce a substance, for example a particular amino acid, from available nutrients  <cit> . this is often either to verify that the reconstructed model has the expected structure or to predict a novel phenotype. unfortunately, genome-scale reconstructions often contain errors, even after manual curation, which need to be taken into account during path finding  <cit> . in this paper, we introduce a novel method for inferring biologically relevant pathways in metabolic networks. first, we review the current methods for metabolic pathway analysis and describe our contribution. section methods introduces methodology, path finding problem, algorithm and its implementation. in section results, we report the results of computational experiments. finally, the paper ends in conclusions.

review of methods for metabolic pathway analysis
two complementary approaches have been used to answer the questions discussed above, constraint-based and graph-theoretical path finding methods. in constraint-based methods  <cit> , one tries to infer a pathway where the intermediate metabolites are balanced in a  steady-state. in a steady-state, the net production of each intermediate metabolite is zero. pathways satisfying this constraint can be branching, in general consisting of one or more linear paths enabling the production of the target metabolite from sources.

on the other hand, in graph-theoretical methods, one typically wants to find a number of shortest paths leading from the source to the target metabolite  <cit> . methods usually deal only with linear, non-branching pathways. thus, graph-theoretical methods are often restricted to one source and one target metabolite. two recent survey articles discuss the relationship between the two approaches  <cit> . results from graph-theoretical path finding and steady-state pathway analyses complement each other. graph-theoretical approaches tend to generate a large number of alternative pathways, which need to be filtered and ranked according to some realistic criteria to produce meaningful results. on the other hand, the computational complexity of steady-state analyses hinders the analysis of large metabolic models, though recent studies have improved the efficiency of methods  <cit> . particularly, graph-theoretical analyses could be used to produce a moderate-sized representation of a genome-scale model containing only the parts relevant to the task at hand, making the steady-state analysis feasible.

in the arm method, information on the mapping patterns of carbon atoms in metabolic reactions was utilized  <cit> . in arm, a graph is first constructed where nodes corresponded to atoms of metabolites while edges described how the atoms were transferred in reactions from metabolite to metabolite. then, to answer a path query, an algorithm returning k shortest paths was invoked to return pathways that transfer at least one carbon from source to target metabolite. such pathways were shown often to correspond to biologically relevant pathways. moreover, the algorithm scaled up well with the network size. however, arm was unable to deal with branching pathways and pathways transferring more carbon atoms were not prioritized over those transferring less carbons.

until more recently, other graph-theoretical approaches have avoided the use of atom mapping information. this is probably due to the fact the obtaining reliable mapping data is a hard problem, both computationally and biochemically. in arm, atom mappings were computed for a number of kegg reactions using a heuristic method based on matching of maximum common subgraphs  <cit> . later, atom mapping information was added also for a subset of kegg reactions as the kegg rpair database  <cit> .

certain metabolites appear in many different reactions in metabolism carrying out tasks such as providing energy for reactions and maintaining redox balance. such metabolites are commonly called pool or currency metabolites. examples include atp, nad and water, which indeed have a high degree of connectivity in metabolic networks. if a pool metabolite appears in a reaction in its typical role, the metabolite is usually said to be a side metabolite in the particular reaction. however, assignment of metabolites to side metabolites is context-dependent. for instance, atp appears in side metabolite role in addition to being the end product on the pathway responsible for synthesizing atp.

in simple shortest path analysis, pool metabolites often cause false positive pathways to be identified, as the shortest paths often traverse via them  <cit> . a popular method to deal with the problem is to remove pool metabolites from the metabolic network. then, we are faced with assignment of metabolites as pool metabolites, which is a task that depends on the pathway queries we would like to ask. taking again atp as an example, by removing atp from the metabolic network, we lose the opportunity to obtain results involving pathways which synthesize atp.

there have been attempts to avoid the problem of assigning a list of side metabolites altogether in pathway analysis tasks. rahman et al. utilized information on metabolite structures in pathway hunter tool   <cit> . in pht, metabolite structural similarity is first used to identify reactant pairs in reactions which resemble each other most. path finding is then performed on a graph consisting only of reaction connections between the most similar metabolites. for instance, in reaction glucose + atp → glucose 6-phosphate + adp one can find out that glucose and adp do not resemble each other, and thus no pathway should use the connection glucose → adp. of course, the method is dependent on molecular structure data. for some metabolites such data is not available. however, exact atom mappings are not required, and it is possible to approximate molecular similarity with an appropriate heuristic.

a method has been proposed by croes et al. to avoid side metabolites in path finding by weighting the edges of the metabolic network graph by the metabolite degree  <cit> . in this method, metabolic pathfinding, highly connected metabolites such as pool metabolites receive a high weight. therefore, when searching for the lightest paths between the query metabolites, the method tends to generate pathways that avoid pool metabolites. it is still possible for a pool metabolite to appear in a result pathway as it has not been removed from the network. moreover, some metabolites such as pyruvate have a high degree without appearing as side metabolites in most reactions. as a downside of the method, routes through such metabolites will be penalized.

blum and kohlbacher combined atom mapping information with metabolic graphs weighted by metabolite degrees  <cit> . in their approach, k lightest linear paths are first sought for in a graph corresponding to a metabolic network, where two metabolites are connected if there is a reaction where at least one atom is transferred between the metabolites. to this end, the authors computed atom mappings for a set of reactions using a minimum cut algorithm. the quality of atom mappings was then improved by taking into account the structure of the ec hierarchy. finally, when a set of pathways had been found between the query metabolites, a check would be made to ensure that at least one atom is actually transferred from source to target. the method has been implemented as the tool metaroute  <cit> .

subsequently, also metabolic pathfinding was improved by faust et al. by taking advantage of the annotations for reactant pairs in kegg reactions contained in the rpair database  <cit> . rpair describes how the atoms are transferred from a substrate to a product in reactions. moreover, each reactant  pair has been annotated with the inferred role of the reactant pair in each reaction  <cit> . roles include "main", "trans", "cofac", "ligase" and "leave". pairs assigned as "ligase" and "leave", often indicate a connection irrelevant to typical path finding queries. for instance, in reaction glucose + atp → glucose 6-phosphate + adp, reactant pairs  and  have been annotated as "main" pairs while  is a "trans" pair. since no atoms are transferred from glucose to adp, this reactant pair has not been annotated.

faust et al. evaluated the accuracy of different combinations of path finding parameters in retrieving  <dig> known reference pathways in three organisms   <cit> . different method variants were constructed, for instance, by choosing whether to remove highly connected metabolites, whether to assign weights to metabolites according to their degree and whether to assign weights to reactions according to their annotated role in rpair by favoring "main" pairs. the extensive statistical testing performed by the authors demonstrated that the inclusion of rpair annotations together with metabolite weighting improves the path finding results significantly.

the graph-theoretical methods discussed above only find non-branching pathways. as many important pathways are best understood by considering the different branches leading to the target metabolite, it can be argued that a metabolic path finding method should incorporate support also for non-linear pathways. some methods, such as metaroute  <cit>  offer the possibility to view a graphical representation of the combination of the linear paths leading from source to target. however, in such representations unrelated linear paths may be shown together, making drawing conclusions about the branching pathway structure more difficult.

these concerns can be addressed in constraint-based modelling framework. a prominent concept in this framework is elementary flux mode . an elementary flux mode is a minimal set of enzymes capable of operating in a pseudo steady-state, with reactions respecting irreversibility constraints  <cit> . elementary flux modes have proven to be useful in analysis of small to medium-scale metabolic models  <cit> . in particular, efms can accurately describe the branching nature of many pathways, such as pentose phosphate pathway.

without additional constraints, both graph-theoretical and constraint-based methods produce a very large number of pathways for typical queries. for instance, about  <dig> linear pathways of length at most nine reactions were found from glucose to pyruvate  <cit> , while roughly the same number of elementary flux modes were found in a metabolic network of  <dig> reactions connecting glucose, acetyl, glycine and succinate to co <dig>  acetyl, formate, ethanol and lactose  <cit> . in particular, the large number of efms in typical settings has prohibited the analysis of genome-scale models  <cit> . to analyze a genome-scale model with efms in a constraint-based modelling framework, one effectively needs to limit the complexity of the model, either reducing the model size or imposing constraints. a particular problem is how to assign the external metabolites which are excluded from the pseudo steady state constraint. of course, this task depends on the intended use of the model. popular tools which can be used to compute elementary flux modes include metatool  <cit>  and yana  <cit> .

a recent case study  <cit>  compared path finding approaches to elementary flux mode analysis in producing sugars from fatty acids. in that work, the system under study was relatively small, consisting of the reactions of the krebs cycle, glycolysis and gluconeogenesis. the question asked was whether it was possible for the system to produce glucose 6-phosphate  from acetyl-coa . two different models were considered. first, a model with no glyoxylate cycle was demonstrated to not to be able to perform the desired conversion in steady-state. second, when the glyoxylate cycle was added, a steady-state conversion from accoa to g6p was possible. then, the authors queried two methods, metabolic pathfinding  <cit>  and pathway hunter tool  <cit> , for paths connecting accoa to g6p. the methods failed, according to the authors, to provide realistic pathways corresponding to the steady-state pathways found by elementary flux mode analysis. in particular, many resulting pathways did not carry any carbon net flux, a necessary property of a biosynthetic pathway. however, the authors criticize the pathways found by pathfinding and pht for not necessarily being balanced at steady-state. this can be argued against in a general path finding setting, as biologically important but unbalanced metabolic pathways exist  <cit> . moreover, an unbalanced pathway might be important in its own right, demonstrating a mechanism for the net carbon flow, for instance.

in previous work, we introduced the concept of feasible pathways  <cit> . in this graph-theoretical approach, the metabolic network is viewed as an and-or graph where and nodes correspond to reactions and or nodes correspond to metabolites. a feasible pathway is a set of reactions where each reaction is reachable from a set of source metabolites. two procedural rules define reachability of reactions and metabolites: a reaction can be made reachable if and only if all its substrates have been made reachable, while a metabolite can be made reachable if and only if either at least one of reactions producing has been made reachable or the metabolite is a source metabolite. in other words, a feasible pathway is branching when there is a reaction with two or more substrates. in this approach, pool metabolites are dealt with by removing them from the network before analysis.

our contribution
in this paper, we introduce a new graph-theoretical method, retrace, for finding branching pathways in large-scale metabolic networks. our method builds on the observation utilized in the previous works of arita  <cit>  and blum and kohlbacher  <cit>  that a biologically interesting pathway should transfer at least one atom from source to target metabolite.

our method tries to overcome the problem of irrelevant connections faced by most path finding approaches by searching for pathways at atom level instead of reaction-metabolite level. retrace searches for pathways in an atom-level representation of the metabolic network in contrast to most other path finding methods discussed above. particularly, the method improves arita's arm method  <cit>  by being able to find branching pathways that transfer as many as possible of the atoms in the target metabolite from precursors. to our best knowledge, this is the first path finding method which explicitly tries to maximize this quantity. favoring pathways which transfer as many atoms as possible can be justified by considering a pathway that fails to transfer all target metabolite atoms. in order to operate, such pathway necessarily involves reaction or reactions, which bring the missing atoms into the pathway from dangling substrates. specifically, a dangling substrate is a metabolite consumed but not produced by a reaction on the pathway. the number of dangling substrates invariably decreases, as more atoms are transferred to the target metabolite by the pathway. we argue that to find plausible pathways, a path finding method should either minimize the number of dangling substrates or transfer as many atoms as possible to target. particularly, retrace is designed to do both at the same time.

to this end, we introduce a scoring function for pathways taking into account the number of target atoms transferred from source atoms. we then formulate the problem of finding high-scoring branching pathways, study its complexity and give an efficient algorithm to solve the problem. the algorithm operates at the atom-level representation, finding a number of shortest paths  <cit>  between source and target metabolites and combining paths into branching, high-scoring pathways. consequently, we retain the scalability of other graph-theoretical path finding methods and thus enable the analysis of genome-scale metabolic networks without any model restriction done prior to analysis.

in particular, our method avoids the context-dependent problem of defining side metabolites in each reaction. for instance, atp is a typical side metabolite that participates in a large number of reactions. however, as discussed earlier, by removing atp from analysis we at the same time lose the possibility to analyze the atp synthesis pathways. operating in an atom-level representation of the metabolic network, retrace disregards side metabolite connections automatically being unable to transfer atoms from source to target metabolite.

the ability to incorporate measurement data into analysis is vital in discovering condition-specific pathways. in order to achieve this, in addition to the scoring function discussed above, retrace allows scores to be assigned to reactions. pathway search is then guided by the scores to favor pathways which utilize reactions with high scores. thus, by encoding measurement data into reaction-specific scores, one can obtain pathways which were active in the measured conditions, for instance. in this paper, we describe an application where we incorporated sequence similarity data into retrace analysis  <cit> . in general, one can consider incorporation of data from other sources, such gene or protein expression data, or enzyme function prediction  <cit>  data obtained with machine learning methods.

we have implemented the method in python  <cit> . the software is released under gpl and is freely available for academic purposes.

methods
we begin by defining some key concepts, a scoring function for pathways and a computational problem of finding branching, high scoring pathways. then, we describe an algorithm, retrace, for solving the path finding problem.

first, we define ℳ to be a collection of metabolites and ℛ to be a collection of reactions which utilize the metabolites in ℳ. a metabolic reaction r ∈ ℛ is defined by giving its substrate and product metabolite sets i, o ⊆ ℳ, respectively. for instance, the reaction glucose  + atp → glucose 6-phosphate  + adp could be given by i = {glc, atp} and o = {g6p, adp}. each metabolite m ∈ ℳ consists of atoms, b ⊆ , where  is the set of atom positions over all metabolites. the atoms in different metabolites are distinct. for example, we could assign six  atoms to both glc and g6p, and let b = {a <dig> ..., a6} and b = {a <dig> ..., a12}. we deal with bidirectional reactions by considering the reverse direction as a separate reaction , e.g., i() = o and o() = i. unidirectional reactions are then naturally taken into account by leaving the reverse reaction out of the model.

further, we define the atom mapping  <cit>  for a reaction r ∈ ℛ to be a relation Γ: ℛ →  ×  specifying how substrate atoms are transferred to product atoms. to give an example, let  = {a <dig>  a <dig>  a <dig>  a4} and ℳ = {m <dig>  m <dig>  m3}, with metabolite structures defined by b = {a <dig>  a2}, b = {a3} and b = {a4}. we can now define a reaction r with i = {m1} and o = {m <dig>  m3} and the atom mapping associated with r to be Γ <dig> = {, }. alternatively, atom mapping can be defined as Γ <dig> = {, }. we say that the reaction r consumes atoms   = {a| ∈ Γ } and produces atoms   = {a'| ∈ Γ }.

for a collection of reactions ℛ with associated atom mappings Γ, we define a directed atom graph g  = , induced by atom collection  and atom mappings Γ with vertices v and edges e as follows. for each atom a ∈ a, we have a vertex va ∈ v. each pair  ∈ Γ , r ∈ r, corresponds to an edge  ∈ e. note that if reaction directionality is not explicitly constrained, the atom graph will contain the edge  for each edge  due to reverse reactions being treated as separate reactions. the example reaction r, atom mappings Γ <dig>  Γ <dig> and the induced atom graphs are shown in figure  <dig> 

in this section, we discuss only reactions with simple or 0- <dig> stoichiometry, that is, reactions where each substrate and product either appears exactly once or does not appear in i and o, respectively. briefly, one can relax this assumption by replicating atoms and involved edges in metabolites which appear in a reaction more than once but this topic is not pursued further here. for a reaction r involving only simple stoichiometries, we assume the relation Γ to be bijective, i.e., there is an one-to-one correspondence between substrate and product atoms. however, if a reaction consumes or produces two units of a metabolite, for example, there is necessarily an atom that is either mapped from or mapped to more than once. as an example, consider the reaction m <dig> → 2m <dig> having Γ = {, } with atom a <dig> of metabolite m <dig> appearing twice in the relation. hence, atom mappings of reactions involving stoichiometries different than zero or one, are not bijective.

a subset p = {r <dig> ..., rk} ⊆ ℛ is called a pathway. a pathway transfers an atom s ∈  to an atom t ∈  if and only if there is a path s → t in the atom graph g. we denote by fp  the set of atoms to which atoms in s are transferred by the pathway p. figure  <dig> shows examples of fp  in the context of a small example pathway.

as discussed in the previous section, metabolic pathways which transfer a large fraction of their source atoms to product atoms should be prioritized over pathways transferring a lesser number of atoms. in particular, we are interested specifically in carbon atoms, as their supply is often the limiting factor in cellular functions. yields of other atoms such as nitrogen or sulfur may also be of importance, depending on the role of the pathway in metabolism.

to take these considerations into account, we define a scoring criterion for pathways, given source and target atoms, s, t ⊆ , respectively. for instance, source and target atoms can be defined as sets of single atoms, all atoms in some metabolites, or all carbon atoms in some metabolites. if a metabolite contains atoms in the source or target atom set, we denote it as a source or target metabolite, respectively. we define our pathway scoring criterion as the fraction zo of target atoms t which are transferred by the pathway p from source atoms s,  

a pathway with zo =  <dig> is called a complete pathway. intuitively, a pathway with high zo is able to produce a large fraction of target atoms from source atoms, and does not require a high contribution from atoms in other than source metabolites. figure  <dig> shows four example pathways and zo scores corresponding to them.

it is easy to see that zo is maximized on the pathway p = ℛ. instead, we study the following problem where the pathway size is involved.

computational problem 1
. given a set of reactions ℛ, sets s, t ⊆ , l ∈ ℤ+ and w ∈ ℝ, find all pathways p ⊆ ℛ such that zo ≥ w and |p| <l.

in find-branching-pathways, we aim to find pathways that transfer enough atoms from sources to targets while using less than some specified amount of reactions. it is possible that a pathway p is branching, or non-linear. for instance, the top right pathway in figure  <dig> illustrates a simple branching pathway. it is easy to see that find-branching-pathways is computationally hard by considering a related problem, find-minimal-pathway, where we try to find the pathway p with minimal size such that zo ≥ w.

computational problem 2
. given an instance of a find-branching-pathways problem, find a pathway p satisfying the constraints of find-branching-pathways such that |p| ≤ |p'| for any other pathway p' satisfying the constraints.

lemma  <dig>  find-minimal-pathway is np-hard
proof. we show that find-minimal-pathway is np-hard  <cit>  by a reduction from the minimum-set-cover problem. let  be a collection of subsets of a finite set . in minimum-set-cover, we seek the minimal subset  ⊆  such that every element in  belongs to at least one member in . now, we construct an instance of the find-minimal-pathway problem as follows. for each element si ∈ , we assign two atoms ai,  into a. we then assign a reaction ri to r for each subset ci ∈  such that Γ = {|sj ∈ ci}. finally, we set s = {aj|sj ∈ ci, ci ∈ }, t = {|sj ∈ ci, ci ∈ } and w =  <dig>  a solution to minimum-set-cover can be reconstructed in polynomial time from the solution to find-minimal-pathway by assigning ci ∈  for each ri ∈ p. as minimum-set-cover is np-complete  <cit> , it follows that find-minimal-pathway is np-hard.   □

subsequently, we can conclude that the original problem find-branching-pathways is np-hard, because we can solve find-minimal-pathway by finding the  solution pathways to find-branching-pathways and choosing the smallest pathway. figure  <dig> illustrates how a small minimum set cover instance is reduced into an instance of the find-minimal-pathway problem.

corollary  <dig>  find-branching-pathways is np-hard   □
when solving find-branching-pathways in practice, we would like to benefit from information from other sources to help us evaluate the pathways found. as an important example, we discuss the use of genome-level evidence in the pathway context in section implementation.

algorithm
due to the computational complexity of the find-branching-pathways problem, we develop next an efficient heuristic algorithm for it.

first, we observe that to maximize zo we should seek a pathway that is able to transfer an atom to each target atom from source atoms. further, to achieve a pathway smaller than l reactions, we should prefer reactions which are able to transfer many atoms at the same time. to illustrate this, let us first define a reaction path p as a sequence of reactions p = , ri ∈ r, such that there is a path from an atom s consumed by the first reaction, s ∈ , to an atom t produced by the last reaction, t ∈  , in the atom graph induced by the reactions in p. clearly, such reaction path is able to transfer at least the atom s to atom t but the path may be to transfer additional atoms as well. analogously to the definition of a pathway, we denote by fp the set of atoms to which atoms in s can be transferred by the reaction path p in this fashion. as more source atoms are transferred via a reaction path to targets, higher zo is achieved. thus, we observe that reaction paths with large fp sets should be preferred.

second, we are able to achieve higher zo with combinations of pathways. consider a pathway p with zo <  <dig>  now, since not all target atoms can be transferred from sources, there must be a target atom t ∈ t which is not connected by a path from any source atom in the atom graph g. we should thus consider an addition of a pathway p' such that a path s → t exists in pathway p ∪ p' from some s ∈ s. to minimize the size of the combined pathway, we should utilize reactions already on the pathway p, and find an addition that is able to provide the target atoms not already transferred. in particular, we should look for branching points on the pathway p where an atom u in one or more substrates is not already connected to the sources but there is a path u → t in g. in such case, connecting a source atom to u by an addition of a pathway p' such that u ∈ fp' guarantees that zo > zo. however, it should be noted that certain path combinations yield pathways, where necessarily more than one instance of target molecule is produced. consider the two pathways illustrated in figure  <dig>  in the pathway on the left, two reaction paths merge in a reaction junction. a reaction junction occurs, when two paths share a reaction  but the reactions preceding the shared reaction  do not share any product metabolites. the shared reaction is then a reaction junction. in the example presented in figure  <dig>  atoms in products of r <dig> and r <dig>  m <dig> and m <dig> respectively, are transferred to the same molecular instance of metabolite m <dig> 

on the other hand, in the pathway on the right, the two paths meet in a metabolite junction m <dig>  a metabolite junction is a metabolite shared by two paths such that both paths contain the same reaction consuming the metabolite. in figure  <dig>  metabolite m <dig> is the shared product of r <dig> and r <dig>  the atoms in substrates of r <dig> and r <dig> are in this case never transferred to the same instance of m3: instead, the atoms always end up in different molecules of m <dig>  although the pathway is unable to provide all source atoms in the same target molecule, the score zo does not differentiate between these two cases. we would, however, like to avoid pathways with metabolite junctions, because such pathways in reality can be split into two or more pathways, each transferring source atoms to a single instance of the target metabolite.

these ideas lead into the following recursive algorithm, retrace, where we find paths leading to target metabolites from sources in the atom graph, and combine these paths to achieve a higher zo score. to discover alternative pathways, a number of paths are generated at each recursion level. furthermore, in order to to reduce occurences of metabolite junctions, retrace only considers combinations which add reaction junctions to the pathway.

the description of the retrace method is divided below into procedures retrace, findpath and findpathstart, where procedure retrace  prepares an atom graph instance, procedure findpath  solves find-branching-pathways recursively and procedure findpathstart  finds the first node of the given path. the operation of retrace is explained with a small example in figure  <dig>  procedure retrace first constructs the atom graph g induced by reactions r. nodes vΔ and vu which represent all source and unresolved atoms are added to the graph. an atom node u is unresolved, if there is no path vΔ → u on the pathway and addition of a such path would create a path vΔ → t to some t ∈ t for which no path already existed. each target atom is considered at this step an unresolved node. subsequently, the algorithm attempts to resolve the unresolved nodes by adding paths to the pathway. additional edges are added to g to connect vΔ to source atoms. finally, procedure findpath is called, which recursively adds paths to the pathway until all nodes have been resolved or there are no more paths to add which would resolve nodes.

in procedure findpath, the graph is first set up to reflect the current set of unresolved nodes by adding edges  for each u ∈ u . then, the algorithm computes k shortest simple paths from vΔ to vu in the atom graph g by calling the subroutine findkshortestsimpleatompaths. a simple  path is a path where no node is repeated. to implement findkshortestsimplepaths, any algorithm developed for the k shortest simple path problem  <cit>  can be used. for instance, yen's algorithm takes o) time to compute k shortest simple paths in a graph with n nodes and m edges  <cit> . after the shortest paths have been computed, the graph is restored by deleting the edges added in step  <dig>  by finding paths from vΔ to vu, retrace aims to discover additions to the current pathway p which would increase the zo score. further, the additions should be as small as possible because of the maximum pathway size constraint. to this end, retrace computes explicitly simple paths in contrast to finding shortest paths where cycles are allowed: a cyclic path can always be transformed into a smaller acyclic path which transfers the same set of atoms from sources to target as the cyclic path.

note that algorithms for the more general case of computing of k shortest paths which are allowed to be cyclic, are considerably faster than algorithms for computing only the simple paths. for instance, the running times of eppstein's algorithm  <cit>  and rea  <cit>  are o and o), respectively. however, because the atom graphs considered in this study contain cycles, we would have to remove cyclic paths from the pathways returned by the k shortest path algorithm. furthermore, to compensate for the cyclic pathways generated, we would have to increase the number of shortest paths computed at each step according to the expected number of acyclic paths. due to these considerations, we have adopted yen's algorithm in our current implementation of retrace.

then, the reactions involved in the shortest atom path q are assigned as the reaction set p' in step  <dig>  function Γ- <dig> :  ×  → ℛ gives each atom graph edge the reaction that induced the edge. each set p' is considered as an addition to the current pathway p in steps 5- <dig>  if the combined pathway p ∪ p' meets the zo and pathway size requirements, and it has not been already generated, it is reported as a result. the computation of zo score of the current pathway in step  <dig> can be done in o = o time by breadth-first search in the atom graph g. next, the algorithm considers the atoms which remain unresolved after addition of path p'. in steps 9- <dig>  the algorithm backtracks from each atom u ∈ u using the procedure findpathstart and checks whether path p' transfers a source atom to u. if this is not true, the atom u is an unresolved atom.

lastly, in step  <dig>  findpath is called recursively to find additions to the pathway p ∪ p' by looking for paths from vΔ to the new set of unresolved nodes u '. the recursion depth is at most |t|, because during each call at least one unresolved atom is resolved, at most one atom is added to the set u' per atom u ∈ u and u = t at depth  <dig>  as a maximum of k paths is generated in each findpath call, and findpath is recursively called at most once for each, in total findpath is called o times.

lemma 2
retrace takes o + |t|)) time, assuming yen's k shortest simple paths algorithm in step  <dig> of procedure findpath.   □

implementation
we have implemented retrace in python  <cit>  as a command-line program. the software is freely available for academic use at http://www.cs.helsinki.fi/group/sysfys/software/retrace. implementation details and user guide are available in additional file  <dig> and in the above web page.

retrace requires that python  <dig>  has been installed. in addition, if available, retrace calls graphviz dot tool http://www.graphviz.org/ to draw the pathway diagrams. internet connection is recommended, because an external web program  <cit>  is called to draw molecule structures. finally, retrace assumes that a local install of the kegg ligand database in flatfile format is available.

our implementation of retrace utilizes atom mapping data from the kegg rpair database. during startup, retrace parses rpair entries and constructs an atom graph corresponding to the data. details on atom graph construction are given in additional file  <dig> 

the atom graph constructed is unweighted by default. it is possible to assign weights to atom graph edges by a command line option. three weighting schemes are currently supported: unweighted, rpair size-weighted and reaction score weighted. in rpair size-weighting, edges from substrate atoms to rpair nodes are assigned weight , where α is the number of atoms mapped by the rpair associated with the edge. edges from rpair nodes to product atoms are assigned weight  <dig>  for instance, if an rpair entry maps six atoms from a substrate to a product, then the six edges from substrate atoms to rpair nodes each receive the weight , while the edges from rpair nodes to product atoms receive weights  <dig>  thus, in rpair size-weighted graphs, path finding tends to favor pathways which utilize reactions where a large number of atoms are transferred at the same time.

retrace supports also the option of specifying arbitrary scores c to reactions. the edges are assigned weights , where  is the highest-scoring reaction associated with the edge and β is a constant.

therefore, a reaction having a high score causes atom graph edges corresponding to the reaction to receive a low weight, increasing chances that shortest paths visit its edges, and finally, that the reaction appears in result pathways.

reaction scores provide a mechanism to easily incorporate measurement data to guide pathway search. in section results, we discuss the application of retrace in reconstructing biosynthesis pathways on basis of genomic evidence.

retrace reports query results as a set of generated html files. figure  <dig> shows an excerpt from a pathway result file for a query from erythrose 4-phosphate  and phosphoenolpyruvate  to phenylalanine . the figure shows the carbon atoms involved on the pathway as green circles. further, results include pathway diagrams for each pathway found . in pathway diagrams, source and target metabolites are colored green and yellow, respectively. if reaction scores have been provided, reactions with zero score and low score are colored red and blue, respectively. reactions with scores above a user-given score threshold are colored green.

RESULTS
this section is organized into four parts. first, we describe the properties of an atom graph constructed from data obtained from the kegg database. the atom graph was used in all experiments reported in this paper. second, we summarize results obtained in a study where amino acid biosynthesis pathways in trichoderma reesei were reconstructed with retrace  <cit> . in particular, we discuss how experimental data can be incorporated into retrace analysis; in  <cit> , sequence similarity data was used to guide retrace search. we then report results of a performance evaluation of our method. finally, we discuss finding pathways for synthesizing inosine 5'-monophosphate  from glucose.

atom graph construction from kegg rpair
we constructed an atom graph corresponding to  <dig> reactions in the march  <dig> version of kegg ligand  <cit> . the atom graph was constructed by considering the  <dig> entries in the kegg rpair subdatabase. each rpair entry specifies an atom mapping for a reactant pair, or substrate and product, in one or more reactions. for instance, rpair entry rp <dig> describes the mapping of atoms between nadph and nadp+ in those  <dig> reactions, where the mapping for this reactant pair is identical. a total of  <dig> rpair entries where two or more entries were found to refer to the same atom number by different type  were discarded from further analysis. unfortunately, the rpair data fails to map many reactions with non-1-0-stoichiometries correctly, mapping usually only one instance of reactants and leaving others unmapped. confronted with such cases, retrace fails to find pathways utilizing the unmapped portions of the reactions.

the atom graph contained  <dig> nodes corresponding to  <dig> carbon,  <dig> nitrogen and  <dig> phosphorus atoms. in particular, it consisted of a large number of components, i.e., disconnected subgraphs. figure  <dig> shows the distribution of component sizes in terms of number of components. the largest carbon, nitrogen and phosphorus components contained  <dig>   <dig> and  <dig> atoms, respectively. therefore, a significant amount of atoms were not included in these giant components  <cit> ,  <dig>   <dig> and  <dig> atoms for carbons, nitrogens and phosphorus, respectively. considering a common pathway query from glucose, which completely resides in the giant carbon component in the graph constructed, a large fraction of the atom graph remains inaccessible. in particular, attempts to find carbon pathways to metabolites which do not reside in the giant carbon component entirely result in incomplete pathways. we assume that a majority of the unconnectivity observed follows from errors in kegg rpair and do not pursue the issue further. we computed the pairwise shortest path distances with dijkstra's algorithm  <cit>  for atoms in the three subgraphs induced by atom mappings for carbons, nitrogens and phosphorus . interestingly, the length of the longest shortest path between carbons was nearly  <dig>  while lengths of nitrogen and phosphorus shortest paths were only about  <dig> and  <dig>  respectively. the mean of the carbon distance distribution, however, was  <dig>  . for nitrogen and phosphorus subgraphs respectively, the average distances were  <dig>  and  <dig>  with standard deviations  <dig>  and  <dig> . it should be noted that the data contains pairwise pathways from all components, and not only the largest components. this reduces the average path length considerably compared to the case where we studied only pathways in the giant carbon component, for example. finally, distance distribution for the three atom types showed markedly different shape than what was observed in a previous study  <cit> . particularly, in  <cit> , the mean pairwise distance in a carbon atom graph was only  <dig> , in addition to lacking the long tail showing in figure  <dig> 

distances in the atom graph from atoms in the same metabolite can vary significantly. for instance, consider the distribution of distances from some of the carbon atoms in acetyl-coa shown in figure  <dig>  as expected, distances from acetyl carbons  are very low compared to other atoms, particularly to carbons  <dig> and  <dig>  as acetyl participates in a large variety of metabolic functions.

reconstruction of trichoderma reesei amino acid biosynthesis pathways
in  <cit> , amino acid pathways in the filamentous fungus trichoderma reesei were reconstructed with retrace and subsequent manual curation. t. reesei is a recently sequenced organism  <cit> . currently, there is no good-quality curated metabolic network for it. in  <cit> , reconstruction of amino acid synthesis pathways was required, however. to this end, we performed a series of pathway queries to amino acids from their respective precursors. pathways found were then manually curated.

first, the edges of atom graph were weighted to correspond sequence-level evidence on existence of each reaction derived from blast  <cit>  alignments. specifically, we assigned scores to each reaction in kegg database so that the scores reflect the likelihood that the reaction is catalyzed by some enzyme in the metabolic network. to accomplish this, we performed a pairwise blast to query the genome sequence s of t. reesei against the uniprot  <cit>  database d, which contained the known enzymatic sequences and their respective functions. then, we assigned scores to reactions with the formula,  

where ed is the set of sequences in database d which have been annotated to have function  r and b is the blast score for aligning sequences s and d. in other words, the score of reaction r corresponded to the best blast hit to the sequence of an enzyme known to catalyze r. the higher the blast best-hit score was for some reaction, the lower weights the corresponding edges received in the atom graph accordingly to the formula described in implementation. thus, shortest paths in a graph weighted in this fashion tended to favor plausible reactions. in addition to the study described in  <cit> , a similar scoring scheme has been employed in a recent method for reconstructing metabolic networks with mixed-integer linear optimization  <cit> .

in  <cit> , retrace was able to find a plausible biosynthesis pathway supported by sequence similarity evidence for a majority of amino acids. we observed that reaction score weighting in particular proved important in increasing the amount of pathways that existed in t. reesei according to manual curation in contrast to the unweighted case.

performance testing
we studied the performance of retrace and effect of different parameters by querying the atom graph described previously.

first, we evaluated the effect of increasing the number of paths computed at each search level to the total running time and number of pathways found. a total of  <dig> molecules with different number of carbon atoms were selected for the experiment. only carbon atoms were utilized in searches and maximum search depth was not constrained. pathways were computed from each molecule to every other molecule in the query set. any pathway found with zo >  <dig> was accepted. queries were computed in a cluster of  <dig> computers running intel pentium  <dig>  <dig>  ghz dual-core cpus. because the current implementation was not parallelized, each query was run on a single core. full result data is presented in the additional file  <dig>  two experiments were performed. first, the number of paths at computed at each search level received values  <dig>   <dig>   <dig> and  <dig>  in the second experiment, the number of paths at first and second search level was varied from  <dig> to  <dig> while computing only one path at third and subsequent search levels. specifically, the option -k was given values , ,..., .

retrace computation time varied significantly with respect to the complexity of the target metabolite and the number of pathways found for each query. as shown in figure  <dig>  computation of pathways to cmp-n-acetylneuraminate , pyruvate  and cobamide coenzyme  took the longest time.

biosynthesis pathways from glucose to 5'-inosine monophosphate
lastly, we computed pathways from glucose to 5'-inosine monophosphate  to validate usefulness of the method in generation of alternative biochemically realistic pathways. on a general imp biosynthesis pathway as described in  <cit> , imp receives its carbons from ribose-5-phosphate, glycine, 10-formyl-thf, co <dig> and aspartate. it is thus interesting to find out whether retrace is able to discover alternative, complete pathways to imp from a single carbon atom source. in such scenario, the pathways found need to contain branches able to produce the different precursors to imp.

we searched for pathways from glucose to imp with retrace. maximum search depth was set to  <dig> and the number of shortest paths computed at each step to  <dig> and  <dig> for search depths  <dig> and  <dig> and to  <dig> for depths  <dig> ...,  <dig>  atom graph edges were given uniform weights. to assess the complexity of this pathway query, we stored also partial pathways in addition to those pathways with zo =  <dig> and pathways which could not be extended any further because maximum search depth was encountered. in summary, a total of  <dig> pathways were found in  <dig>  hours on a intel xeon x <dig>  <dig>  ghz cpu. additional file  <dig> contains retrace html output from the query.

result pathways utilized enzymes with  <dig> distinct ec numbers. table  <dig> shows the  <dig> enzymes which occurred in more than half of the pathways. for instance, three enzymes occurred in more than three fourths of the pathways, namely hexokinase, xanthine oxidase and xanthine dehydrogenase. figure  <dig> shows a diagram of a complete result pathway, which utilizes enzymes that were included in other result pathways as well. specifically, the pathway shown utilized enzymes which were commonly present in other result pathways as well and was thus picked as a representative pathway to demonstrate here.

enzymes which occurred in more than half of the pathways found for the query glucose → imp.

the representative pathway corresponds to a prokaryotic pathway for synthesis of imp described in  <cit> . the pathway consists of three "main" branches. first, the branch shown leftmost in figure  <dig> produces d-ribose for inosine ribohydrolase, which combines it with hypoxanthine to produce imp. the second branch first converts glucose to glycine and then further to hypoxanthine. lastly, the third branch, shown rightmost in the figure, starts from glucose and ends in co <dig>  it should be noted, that the third branch is required to achieve a complete pathway: imp receives carbons from carbon dioxide and retrace explores also branches that produce carbon dioxide from glucose. if such behavior is not required, it is possible to study further only results with zo <  <dig> 

in addition to the representative pathway, where imp is synthesized via inosine, retrace found complete pathways where imp is produced from amp. however, no complete pathway was found which would produce imp through 1--5-formamido-4-imidazolecarboxamide , although such pathways were among the results with scores zo <  <dig>  the imp biosynthesis pathway as described in  <cit>  utilizes faicar as an intermediate, in particular. however, most pathways found by retrace take the shortcut ribose-5-phosphate → 5-phospho-alpha-d-ribose 1-diphosphate → aicar → faicar → imp instead of the longer route via gar.

in summary, a total of  <dig>   <dig> and  <dig> result pathways utilized inosine, amp and faicar, respectively, as the immediate precursor to imp.

CONCLUSIONS
numerous approaches have been developed for pathway analysis in metabolic networks. the two prominent frameworks are constraint-based modelling and graph-theoretic approaches, both having certain advantages over the other. constraint-based methods have been reported to find biochemically more realistic pathways  <cit>  but are difficult to apply to large-scale models. on the other hand, graph-theoretic path finding methods are applicable to very large networks, but are prone to return a large number of false positive, or irrelevant, pathways. in addition, most graph-theoretic methods do not support branching pathways. in both frameworks, one has to deal with the problem of correctly assigning the list of side metabolites, which is both non-trivial and context-dependent.

the method introduced in this paper, retrace, avoids problems with scalability while being able to find biochemically realistic, branching pathways. in contrast to most constraint-based methods, retrace is applicable to very large instances, involving genome-scale or larger metabolic networks. in addition, no explicit side metabolite list is required.

similarly to arm path finding  <cit> , retrace operates on an atom-level representation of the metabolic network. we improve the arm method by adding a support for branching pathways. moreover, our method is a generalization of the arm method as we can simulate arm by setting retrace to find unbranched pathways only. in contrast to metaroute  <cit>  and metabolic pathfinding  <cit> , retrace finds paths in the atom-level metabolic network, instead of using the indirect method of encoding metabolite similarity into graph weights. this allows retrace to find pathways with net atom flow from sources to targets.

it should be noted that the method presented here also generalizes our previous work  <cit> , where we studied branching pathways in metabolic network level instead of atom graphs. if we assign the set of target atoms to contain all atoms of a metabolite instead of just atoms traced back from current targets, we effectively arrive at an algorithm similar to our previous feasible pathways algorithm. in contrast to our previous work, the algorithm would operate at atom graph level, however, arguably resulting in more plausible results. we leave pursuing this topic as future work.

in this paper, we have demonstrated that retrace is able to discover biochemically feasible alternative pathways for complex metabolites in genome-scale networks. further, our method has been applied to a biological problem of validation of metabolic pathways in an organism lacking good-quality metabolic reconstruction, namely trichoderma reesei. as demonstrated in  <cit> , the method lends itself naturally to metabolic reconstruction when we utilize reaction scores from genomic evidence. in general, reaction scores provides a mechanism to easily incorporate measurement data to guide the pathway search supported by experimental data. this broadens the applicability of retrace to a wide range of tasks. for instance, we could encode gene expression data in scores to find pathways active in different conditions.

we also studied the properties of the atom graph constructed from kegg data. the pairwise distances between atoms were found to be significantly longer than in a previous study  <cit> . in particular, we identified a large number of graph components, between which no exchange of atoms is possible. this observation warrants a further study to find out whether the disconnectivity stems from errors in kegg database, a biological phenomena, or both.

the availability and quality of atom mappings is of great importance to the method. currently, methods for obtaining high-quality atom mappings are actively being investigated by many groups, including ours. fortunately for applications demonstrated in this paper, we are mostly able to ignore the problem of deciding between alternative mappings stemming from apparently isomorphic fragments.

authors' contributions
ep designed, analyzed and implemented the algorithm, performed the experiments and wrote the manuscript. pj and jr contributed to the development of the method and writing the manuscript. pj and ep analyzed the results of the glucose-imp experiment. all authors have read and approved the final version of the manuscript.

supplementary material
additional file 1
retrace user guide and implementation notes. retrace implementation details and user guide. a self-contained web site: unpack archive and open index.html in a web browser.

click here for file

 additional file 2
retrace results from experiments. summary data and html output from retrace runs performed for the queries discussed in the section results. a self-contained web site: unpack archive and open index.html in a web browser.

click here for file

 acknowledgements
we would like to thank ari rantanen and esko ukkonen for their critical comments, and mikko arvas for discussion and support with the t. reesei genome. this work was supported by academy of finland grants  <dig>  and  <dig> , and in part by the ist programme of the european community under pascal <dig> network of excellence, ist-2007- <dig>  this publication only reflects the authors' views.
