BACKGROUND
the advent of flow cytometry  and subsequent enhancements allowing for polychromatic investigation has proved invaluable to those involved in basic research and medical diagnosis. by differentially staining the cell population using dyes specific for various characteristics, each cell produces a fluorescence signature characteristic of the bound dyes. thus, by measuring the fluorescence at multiple wavelengths, a multidimensional quantitative signature can be defined for each cell. however, from the time of introduction the overwhelmingly predominant method for analyzing and interpreting data gathered from flow cytometers has been manual gating. in this process, event data is visualized using bivariate plots such as histograms, contour, scatter, and density plots. users must then peruse the entirety of the data, two channels  at a time and manually isolate sections of the plot by visually applying geometric constructs  to group or separate the data. in this manner, specific cell populations are identified and separated from the mass of data.

with advances in multi-laser flow cytometers, commercial machines are now capable of gathering up to  <dig> channels  of data per event. in addition, current research into adding mass spectrometry capability to flow cytometers  promises determination of up to  <dig> different biomarkers. the number of unique 2d plots needed to cover a dataset is , thus for  <dig> channels of data almost  <dig> plots are necessary, and for  <dig> channels, nearly  <dig> plots.

beyond the great deal of time needed to process such a large number of graphs, it is impossible  for two-dimensional slices to give an accurate picture of the distribution of points in n-dimensional space . furthermore, segmentation using canonically aligned 2d planes in an n-dimensional data space can only correctly isolate a special subset of features where the correct segregation is aligned with the axes. for these reasons, applying the techniques of multivariate data classification  has been the subject of research for the last  <dig> years  <cit> . unfortunately, the published body of research into automating analysis has been spotty over this time period  <cit> . even more disappointing is the fact that the vast majority of this research has never made widespread appearance in analysis software for the end user, thus remaining simply research. it seems clear however, that realizing the true usefulness of flow cytometry is dependent on the development of automated multidimensional classification techniques  <cit> .

the main barrier to the widespread adoption of such tools is a technological one. published research describing classification methods takes one of two routes. authors may write their own processing code and rely on importing analyzed data into generic or fc-specific programs for visualization and data-interaction  <cit> . alternately, some authors have repurposed software intended for analysis of other types of data such as microarrays  <cit> . while ultimately accomplishing their purpose, such methods are far from ideal for reusability and wider adoption. indeed, these approaches expose an underlying need: a user-friendly, purpose-built software platform on which researchers can easily implement analysis techniques, algorithms, and new visualizations. in this paper, we present the development of such a platform with the main goal of easing future development and encouraging widespread use of alternate tools, providing a system that makes complete use of the available data dimensions. consequently, our tool will greatly aid user analysis in time as well as consistency.

existing software
the main analytical focus of the most widely used industry software, such as flowjo and fcs express, is manual gating. flowjo in particular provides one method of algorithmic analysis, based on probability binning  <cit> , however it is currently in beta status and available on only one platform. such software with large user bases are understandably slow to change, and perhaps reluctant to provide users with analysis tools that are not widely recognized.

currently available software providing automated analysis methods include the more generalized analysis packages such as the flow cytometry suite  <cit> , provided as part of the bioconductor  <cit>  project, the stand-alone software flow  <cit> , and specialized tools such as that provided by the authors of the recently published automated analysis technique: flame  <cit> .

the fc analysis libraries available through the bioconductor project are excellent, yet, while being based on r has many benefits, it is at its core a command-line based software. for many users, command-line access is a foreign concept, and this fact alone will prevent them from ever trying it. however, far from being in competition with bioconductor, there is potential for find to make use of bioconductor through a bridge library, rpy, that allows access to r functionality from python programs. the program flow suffers from similar problems in the area of usability. the interface itself can be confusing and tends to be overly technical, as is the documentation which states the program is aimed more at developers than end-users. software in the category of algorithm-specific programs, such as the webservice flame, certainly serve a useful purpose, but offer no generality or measures for comparison to other methods. no algorithm will be appropriate for every dataset, and continuity of interface is important for work-flow efficiency.

implementation
the python programming language was chosen for its high-level syntax, ease of use, multi-platform independence, and the availability of excellent scientific and numerical analysis packages . in addition, python interfaces well with the c++ and java programming languages, allowing code in both to be used from within python programs . our foremost goals while developing find were: user friendliness, and simplicity of design, implementation, and maintenance. in pursuit of these goals, we chose the wxwidgets library which allows true cross-platform development of windowed applications with the native look and feel of the operating system under which the program is run.

the design and implementation of find was guided by the well-known model-view-controller  architectural pattern, in which the underlying data model is separated from the user interface and the controlling system logic. this design paradigm allows for greater flexibility, clean implementation, and simplified overall debugging and maintenance. the other major concerns in design centered around the two user populations we envisioned for this software: normal users of flow cytometry analysis software, and researchers involved in improving the analysis and visualization of fc data. the former target population was represented throughout the development process by five researchers experienced in the design and analysis of fc experiments. the latter population was considered carefully throughout and well-represented by the developer.

finally, we provide pre-built platform specific executables for microsoft windows and mac os x. these packages are entirely self-contained and require no additional software to be installed. additionally, all plugins are located in a folder external to the executables, allowing users to easily "install" extended functionality to the program.

RESULTS
the first concern in the design of find was simplifying the user experience and streamlining the analysis process. thus, find consists of a single window split into a data pane and a display pane. the data pane lists loaded data sets, their subdivisions and clusterings, as well as stored figure sets, in a hierarchical tree. each item in the tree is selectable and has a context menu available with a number of generic and item-specific actions available to the user. for example, all items may be plotted, but plotting methods are specified as applicable to data items alone, clustering items alone, or both.

the display pane is further subdivided into a plotting pane and a dimension-selection pane. the plotting pane may be configured to display a grid of subplots, each selectable and configurable independently. this forms the heart of the display system and was designed to collect data visualizations in one location. by default, all subplots are bound to the user-selected dimensions, and are updated instantly when the selection is changed. individual plots may be unbound via a simple checkbox that indicates the bound status of the currently selected subplot.

in order to ease the issue of commands, at all times the system tracks four "selected items": the currently selected data set, clustering, figure set, and subplot . the selected items in the tree view of the data pane are highlighted by bold text, and the selected subplot is indicated in the status-bar at the bottom of the application . menu options apply to the appropriate selected item, reducing as much as possible the amount of effort required by the user to translate thought into result.

data analysis
a typical workflow begins with the user opening one or more related data files for analysis. these files may be fcs  <dig>  standard files, csv files, or any additional file types that a plugin might be written for. each file is parsed and a display of the first ten rows of data is presented, giving the user a preview of the data as well as an opportunity to alter any of the column labels or their arrangement . having arranged or renamed to their satisfaction, the user can exclude columns of data  from automated analysis procedures . the files are loaded and data and any annotations extracted . each data set is plotted as a 2d scatterplot in a  <dig> Ã— n grid with the selected dimensions set to the forward and side-scatter channels.

before performing automated analysis, the user may wish to begin the analysis with a visual data exploration. currently find provides the following 2d plots: scatterplots, histograms, heatmaps, and side-by-side boxplots of all dimensions selected for analysis. with the simple configurable grid plot structure of the display pane, any or all of these plots can be displayed together for one or more of the loaded data sets . additionally, each plot has its own properties dialog, allowing the user to configure aspects of the plot such as range, data transformation , and other plot-specific options. due to the limiting factor of screen space, find enables users to create groupings of plots, called figures. each figure, represented in the data pane , stores the contents of the display pane such that clicking on a figure set entry switches the display to the plots and selections within that figure. this gives users great freedom to create more plots than would ordinarily be possible, as well as, for example, to focus analysis of different populations to individual figures .

continuing the analysis, find enables users to perform automated population discovery, also known as cluster analysis or automatic classification. find currently includes an implementation of the algorithm created by bakker schut et al.  <cit> . briefly, the user initially specifies a target number of clusters for discovery. the algorithm performs a log transformation and chooses a high number of nonrandom  <cit>  initial centers and uses these seeds as input to the traditional k-means clustering algorithm. the resulting clusters are then iteratively merged together using statistical cluster shape comparison  to discover those most similar, until the user-specified target is achieved . the resulting clusters  are then plotted to the current subplot in a scatterplot overlay color-coded by cluster . statistical information on the clusters is available as a context menu item when clicking on the desired tree item in the data pane. a bar chart visualizing the overall event percentages in each cluster is also available .

one consequence of many automatic classification algorithms is some degree of non-determinism in cluster ordering. this does not negatively impact the resulting analysis, but it does pose an issue for later visualization. the simplest method for visually distinguishing the events belonging to different clusters is through color variation. however, for such differentiation to be more meaningful across multiple runs of an algorithm, whether for the same or separate data sets, similar clusters should be given the same color. thus, we have applied the measure of cluster similarity used in the bakker schut et al. algorithm  <cit>  to reorder the clusters such that those most similar appear with the same color when plotted .

find allows for the isolation and extraction of individual, or combinations of clusters for further analysis. when viewing the clustering summary , any combination of clusters may be selected and copied to a new dataset. these new data sets are attached, as children, to the parent data set from which they were extracted. child datasets can be accessed, analyzed, and visualized using all the means available for one opened from a file, but appear in the data tree as children of the datasets from which they were isolated. a group of child datasets can be created for each discovered cluster, allowing for independent visualization and analysis of each. in this manner, users are enabled to explore as many levels of their data as they desire. additionally, users may wish to perform analysis or visualization with other programs, and find provides the option to export any dataset to an external file type supported by find or available plugins.

analysis completion
while the grid layout display provided by find enables easy comparative visualization and analysis of multiple datasets, it doubles as a figure creation tool. users simply select the 'save figure' menu item in the plot menu, and are able to instantly create usable figures for presentation or publication in the following formats: png, pdf, postscript, eps , and svg . exporting the current visualization grid eliminates the need for additional steps in figure creation and additional complexity in subplot placement, thus saving time and effort .

one of the most important steps in analysis at any point, and especially the end, is saving the work that has been done. find allows users to save the entire state of the analysis as two files: one containing all the qualitative information about data structure, attributes, and visualizations, the second a simple binary file containing all the loaded numeric data. these two files can be packaged and transported in any manner for later use on the same machine or any other machine running find. finally, all of the preceding topics are discussed in more detail and with examples in the user documentation included in additional file  <dig> as well as on the project website.

plugin system
a major component of the find application is enabling researchers and software developers to extend the functionality of the system in various ways. the main focus of the plugin system is automated population discovery and giving researchers a common platform for implementing their research. however, find provides additional access modalities; specifically we have categorized them into the following: graphing, transformations, i/o, and analysis.

graphing plugins offer authors a hook into the plotting subsystem to implement new visualization options. in order to reduce complexity, graphing plugins are visible in the plugins menu , but only usable from the plot submenu in the data tree context menu. furthermore, authors specify graphing plugins as applicable to either datasets  or clusterings. for example, the scatterplot is applicable to both, while the histogram plot is only available for datasets. as a result, the context menu is built dynamically to fit the tree item selected. transformation plugins provide means to transform the data to a more meaningful data space, such as the widely used hyperlog  <cit>  transformation. all transformations  can be called through the find api and applied to given datasets. i/o  plugins allow the import and export of data and automated analysis results. this will enable the inclusion of various data formats from other programs/fc machines, and allow for find results to be saved for later use as needed. the last modality, analysis, is intended to provide an all-purpose means for plugin authors to offer novel analysis or visualization options that do not fall into any of the other plugin categories. on the user side, plugins are easily installed by saving the plugin files into the appropriate subdirectory of the plugins directory located with the find executable. complete details on writing plugins for find, with code examples, are available in the developer documentation included in additional file  <dig> as well as on the project website.

finally, as software engineering is never a flawless science, errors and bugs will occur. thus find catches unexpected errors, and can report these directly to us. this will aid in the development and improvement of find, as well as provide users a more technically specific means of feedback. in addition, find provides a mechanism enabling users to check for updates to the program, allowing them to stay current with fixes and enhancements as development continues.

CONCLUSIONS
it is becoming clear that the advance of biochemical technology will soon outstrip the ability of users to manually analyze flow cytometry data effectively and in a reasonable amount of time. two-dimensional visual analysis is useful, but at the very least should be combined with multi-dimensional mathematical analysis to minimize the risk of losing important information. the answer lies in the direction of intelligent automated analysis tools  <cit> , however, without a user-friendly platform on which to implement, widespread adoption of such tools has been and will continue to be extremely difficult. additionally, it is wasted and redundant effort for researchers to reinvent the wheel or attempt to repurpose existing software each time a new analysis tool is developed.

a more serious problem lies in the fact that, without widespread testing of algorithms on multiple different datasets, it will be difficult to verify the accuracy and usefulness of new software analysis tools. fortunately, these needs are coming to be recognized in the form of calls for increased development and improvement  <cit> , the ieee bioinformatics standards for flow cytometry working group designed to provide data standard proposals, and an assessment competition  similar to the annual protein structure prediction competition casp. find can be very useful in facilitating these efforts, providing a platform upon which to build and test.

finally, it should not be overlooked that automated analysis methods which simply present the researcher with results as a finished product, but which do not facilitate the researcher's comprehension by supporting exploration and evaluation of the results, are almost as non-productive as a total lack of automation. it has been repeatedly demonstrated that human experts either reject and manually re-do automated analyses which are not presented in such a way as to facilitate exploration, comparison and understanding, or come to rely upon these analyses without adequate concern for confirming their ongoing validity  <cit> . even the best-of-breed research algorithms for fc analysis therefore fail to deliver the benefits that they could, because they universally operate in isolation, and do not provide internal comparisons to other methods. such omissions, as trivial as they may seem, critically impede the wide adoption of improved methods, and absorb considerable human resources which could be released for more productive tasks if the improved methods can be incorporated within a familiar comprehensive analysis framework.

to conclude, here we have presented find, a new cross-platform software package that provides a basic visualization and development platform for analysis of flow cytometry data, while maintaining a focus on end-user accessibility. find presents an easy to use integrated interface, behind which exists a powerful plugin system based on the modern, widely used language python, and the excellent numeric and scientific computational toolset available to it.

availability and requirements
project name: flow investigation using n-dimensions

project home page: http://www.justicelab.org/find

alternate page: http://www.mathmed.org/#find

operating systems: platform independent

programming language: python

other requirements: none

license: version  <dig> . <dig> of find is released under the gplv3

restrictions: find is free for academic use only

authors' contributions
smd conceived, designed, and implemented the software, and drafted the manuscript. wcr and ssj supervised and guided the design and implementation, and helped to draft the manuscript. all authors read and approved the final manuscript.

links
flowjo http://www.flowjo.com

fcs express http://www.denovosoftware.com

massively multiparametric mass cytometer analyzer project http://www.stemspec.ca

flame: flow analysis with automated multivariate estimation http://www.broadinstitute.org/cancer/software/genepattern/modules/flame

rpy http://rpy.sourceforge.net

scipy and numpy http://www.scipy.org

boost.python http://www.boost.org/doc/libs/1_45_0/libs/python/doc/index.html

jython http://www.jython.org

wxwidgets http://www.wxwidgets.org

wxpython http://www.wxpython.org

bioinformatics standards for flow cytometry http://flowcyt.sourceforge.net

flowcap - flow cytometry: critical assessment of population identification methods http://flowcap.flowsite.org

critical assessment of protein structure prediction  http://predictioncenter.org

supplementary material
additional file 1
find user and developer documentation. this document provides a complete introduction and tutorial for the find end-user as well as a complete description, tutorial, and code examples on developing plugins for the find platform. this material is also available online at the project website.

click here for file

 acknowledgements
the authors would like to thank dr. santiago partida-sanchez, dennis j. horvath jr., and dr. ashay s. patel for their invaluable input and assistance.
