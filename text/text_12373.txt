BACKGROUND
let Σ be a finite alphabet, and consider v words  w <dig> ..., wv over Σ. for  <dig> ≤ i ≤ v, let ℓi denote the length of word wi, and let σij denote the jth character of wi. a string xi over Σ ∪ {-} is an extension of wi of length m if there exist indices  <dig> ≤ d <dig> <d <dig> < ⋯ dℓi
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdawgaawcbagaes4ehw2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30ed@ ≤ m so that, for  <dig> ≤ j ≤ ℓi, the djth character of xi is σij, and whenever j ∉ {d <dig> ..., dℓi
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdawgaawcbagaes4ehw2aasbaawqaaiabdmgapbqabaaaleqaaaaa@30ed@}, the jth character of xi is -. let ext be the set of all extensions of word wi to length m.

an alignment of two words wi and wj consists of an extension xi ∈ ext and an extension xj ∈ ext. the cost of such an alignment, denoted cost, is determined position by position. in the simplest case, a position contributes a cost of  <dig> if the extensions do not have the same character in that position,  <dig> otherwise. numerous different cost measures are of interest, but for our purposes counting matches of a symbol of Σ against –  and matches of two different symbols of Σ  suffices.

pairwise alignment of sequences wi and wj chooses m, xi ∈ ext and xj ∈ ext, to obtain an alignment with sp cost cost. the alignment with lowest cost has sp cost

 minm≥ <dig> min{cost s.t. xi ∈ ext, xj ∈ ext}. 

the alignment of v sequences w <dig> ..., wv consists of extensions {xi ∈ ext :  <dig> ≤ i ≤ v}. the sum-of-pairs or sp cost is ∑1≤i<j≤v cost, and the multiple alignment with lowest cost has cost

 min⁡m≥0min⁡{∑1≤i<j≤vcost s.t. xi∈ext∀1≤i≤v}.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggtbqbcqggpbqacqggubgbdawgaawcbagaemyta0kaeyyzimraegimaadabeaakigbc2gatjabcmgapjabc6gaujabcuha7naaqafabaacbigae83yammae83ba8mae83camnaemidaqnaeiikagiaemieag3aasbaasqaaiabdmgapbqabagccqggsaalcqwg4baedawgaawcbagaemoaaogabeaakiabcmcapiabbccagiabbohazjabb6cauiabbsha0jabb6cauiabbccagiabdiha4naabaaaleaacqwgpbqaaeqaaogaeyici4saemyraukaemieagnaemidaqnaeiikagiaem4dac3aasbaasqaaiabdmgapbqabagccqggsaalcqwgnbqtcqggpaqkcqghaiiicqaixaqmcqghkjyocqwgpbqacqghkjyocqwg2bgdcqgg9bqfcqgguaglasqaaiabigdaxiabgsmijkabdmgapjabgyda8iabdqgaqjabgsmijkabdaha2bqab0gaeyyeiuoaaaa@743e@ 

one natural objective is to find a multiple alignment that minimizes the sp cost. exact methods have, for the most part, employed dynamic programming. in this environment, the execution time grows polynomially with the length of the sequences, but exponentially in the number of sequences. while improvements in time and space utilization are possible , dynamic programming remains infeasible for large numbers of sequences. indeed, finding optimal multiple sequence alignments under the sp cost metric is np-hard  <cit> . consequently, substantial effort has been invested in finding effective heuristic algorithms . these heuristic methods produce upper bounds on the cost of a multiple sequence alignment with minimum sp cost.

when heuristic methods are employed, how can one assess the quality of the alignment obtained? feng and doolittle  <cit>  argue that the main biological motivation for multiple sequence alignment is to reconstruct phylogeny; see  <cit>  for a recent overview. with this in mind, quality relates to the amount of biological information revealed by the alignment. let us ask a more modest question. how well does the sp cost produced by a specific method compare to the minimum sp cost over all alignments? in other words, what is the accuracy of the upper bound? a precise answer poses a significant challenge; comparison with an optimal solution would require that one be found, negating the need for the comparison. it is natural, therefore, to determine a lower bound on the sp cost, and compare the heuristic method with the lower bound as a measure of accuracy. lower bounds do not provide alignments; instead, when they are in good agreement with an upper bound, they certify that the upper bound is indeed close to optimum. lower bounds are also employed in branch-and-bound strategies for exact alignment  <cit> , but our focus is on tools for comparison with upper bounds. a comparison of an upper and a lower bound simultaneously measures the accuracy of the upper bound, and the lower bound. no matter how good an upper bound is, comparison with a poor lower bound fails to certify that the upper bound is close to optimum. therefore improvements in lower bounds are crucial, not to reveal biological information through alignment directly, but rather to better calibrate an heuristic method that is being developed for biological inferences. determining effective lower bounds on the sp cost of a multiple sequence alignment has been much less studied than heuristic methods, primarily because a lower bound does not provide a feasible alignment. nevertheless, an effective lower bound provides the only real means to assess proximity of an upper bound to the optimum. in this paper, we examine a conceptually simple technique for calculating lower bounds on sp costs for alignments. it is based on the observation that v-way alignments for small values of v can be efficiently calculated by dynamic programming. the specific methods that we propose combines exact 2- and 3-way alignments selected to treat each 2-way alignment exactly once. randomization of the selection of 3-way alignments to examine enables us to improve lower bounds from 2-way alignments without excessive computational cost.

RESULTS
the minimum sp cost, mincost, is

 min⁡m≥0min⁡{∑1≤i<j≤vcost s.t. xi∈ext∀1≤i≤v}.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggtbqbcqggpbqacqggubgbdawgaawcbagaemyta0kaeyyzimraegimaadabeaakigbc2gatjabcmgapjabc6gaujabcuha7naaqafabaacbigae83yammae83ba8mae83camnaemidaqnaeiikagiaemieag3aasbaasqaaiabdmgapbqabagccqggsaalcqwg4baedawgaawcbagaemoaaogabeaakiabcmcapiabbccagiabbohazjabb6cauiabbsha0jabb6cauiabbccagiabdiha4naabaaaleaacqwgpbqaaeqaaogaeyici4saemyraukaemieagnaemidaqnaeiikagiaem4dac3aasbaasqaaiabdmgapbqabagccqggsaalcqwgnbqtcqggpaqkcqghaiiicqaixaqmcqghkjyocqwgpbqacqghkjyocqwg2bgdcqgg9bqfcqgguaglasqaaiabigdaxiabgsmijkabdmgapjabgyda8iabdqgaqjabgsmijkabdaha2bqab0gaeyyeiuoaaaa@743e@ 

a simple lower bound is obtained by treating the alignment as 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaiyagmaaaacagloagaayzkaaaaaa@30a9@ independent 2-way alignments  <cit> :

 mincost≥∑1≤i<j≤vmin⁡m≥0{cost s.t. xi,xj∈ext}
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiegacqwftbqbcqwfpbqacqwfubgbcqwfjbwycqwfvbwbcqwfzbwccqwg0badcqggoaakcqgg7bwecqwg3bwddawgaawcbagaegymaedabeaakiabcycasiabc6cauiabc6cauiabc6cauiabcycasiabdeha3naabaaaleaacqwg2bgdaeqaaogaeiyfa0naeiykakiaeyyzim7aaabuaeaacyggtbqbcqggpbqacqggubgbdawgaawcbagaemyta0kaeyyzimraegimaadabeaakiabcuha7jab=ngajjab=9gavjab=nhazjabdsha0jabcicaoiabdiha4naabaaaleaacqwgpbqaaeqaaogaeiilawiaemieag3aasbaasqaaiabdqgaqbqabagccqggpaqkcqqggaaicqqgzbwccqqguaglcqqg0badcqqguaglcqqggaaicqwg4baedawgaawcbagaemyaakgabeaakiabcycasiabdiha4naabaaaleaacqwgqbgaaeqaaogaeyici4saemyraukaemieagnaemidaqnaeiikagiaem4dac3aasbaasqaaiabdmgapbqabagccqggsaalcqwgnbqtcqggpaqkcqgg9bqfasqaaiabigdaxiabgsmijkabdmgapjabgyda8iabdqgaqjabgsmijkabdaha2bqab0gaeyyeiuoaaaa@856e@ 

by way of example, consider the eighteen sequences given next; these are generated from a sequence of  <dig> bases by random insertions, deletions, and substitutions. our interest is in determining a lower bound on the sum of 
sp costs in an 18-way alignment of these sequences .
using dynamic programming on the  <dig> = 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqaixaqmcqai4aaoaeaacqaiyagmaaaacagloagaayzkaaaaaa@3122@ pairs, the sum of 2-way alignments gives a total cost of  <dig> 

fractional alignment
this decomposition of the 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaiyagmaaaacagloagaayzkaaaaaa@30a9@ simultaneous pairwise alignments into 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaiyagmaaaacagloagaayzkaaaaaa@30a9@ independent 2-way alignment problems can be generalized. to do so, select a number α of classes in the decomposition. then for  <dig> ≤ c ≤ α and pair {i, j} with  <dig> ≤ i <j ≤ v, define a weight μc, {i, j}. it is a decomposition when, for every class c, ∑c=1αμc,{i,j}=1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewaqaaggaciab=x7atnaabaaaleaacqwgjbwycqggsaalcqgg7bwecqwgpbqacqggsaalcqwgqbgacqgg9bqfaeqaaaqaaiabdogajjabg2da9iabigdaxaqaaiab=f7ahbqdcqghris5aogaeyypa0jaegymaedaaa@4032@ for every pair {i, j}. for a given class c in such a decomposition,

 min⁡m≥0min⁡{∑1≤i<j≤vμc,{i,j}cost s.t. xi∈ext∀1≤i≤v}
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggtbqbcqggpbqacqggubgbdawgaawcbagaemyta0kaeyyzimraegimaadabeaakigbc2gatjabcmgapjabc6gaunaacmqabawaaabuaeaaiigacqwf8oqbdawgaawcbagaem4yammaeiilawiaei4easnaemyaakmaeiilawiaemoaaomaeiyfa0habeaaiegakiab+ngajjab+9gavjab+nhazjabdsha0jabcicaoiabdiha4naabaaaleaacqwgpbqaaeqaaogaeiilawiaemieag3aasbaasqaaiabdqgaqbqabagccqggpaqkcqqggaaicqqgzbwccqqguaglcqqg0badcqqguaglcqqggaaicqwg4baedawgaawcbagaemyaakgabeaakiabgigiolabdweafjabdiha4jabdsha0jabcicaoiabdeha3naabaaaleaacqwgpbqaaeqaaogaeiilawiaemyta0kaeiykakiaeyiaiiiaegymaejaeyizimqaemyaakmaeyizimqaemodayhaleaacqaixaqmcqghkjyocqwgpbqacqgh8aapcqwgqbgacqghkjyocqwg2bgdaeqaniabgghildaakiaawuhacagl9baaaaa@7d4d@ 

gives a fractional sp alignment cost, with the contribution of each pair scaled by its weight in the class of the decomposition. indeed

 ∑c=1αmin⁡m≥0min⁡{∑1≤i<j≤vμc,{i,j}cost s.t. xi∈ext∀1≤i≤v}
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaaewbqaaigbc2gatjabcmgapjabc6gaunaabaaaleaacqwgnbqtcqghljyscqaiwaamaeqaaogagiyba0maeiyaakmaeioba4galeaacqwgjbwycqgh9aqpcqaixaqmaeaaiigacqwfxoqya0gaeyyeiuoakmaacmqabawaaabuaeaacqwf8oqbdawgaawcbagaem4yammaeiilawiaei4easnaemyaakmaeiilawiaemoaaomaeiyfa0habeaaiegakiab+ngajjab+9gavjab+nhazjabdsha0jabcicaoiabdiha4naabaaaleaacqwgpbqaaeqaaogaeiilawiaemieag3aasbaasqaaiabdqgaqbqabagccqggpaqkcqqggaaicqqgzbwccqqguaglcqqg0badcqqguaglcqqggaaicqwg4baedawgaawcbagaemyaakgabeaakiabgigiolabdweafjabdiha4jabdsha0jabcicaoiabdeha3naabaaaleaacqwgpbqaaeqaaogaeiilawiaemyta0kaeiykakiaeyiaiiiaegymaejaeyizimqaemyaakmaeyizimqaemodayhaleaacqaixaqmcqghkjyocqwgpbqacqgh8aapcqwgqbgacqghkjyocqwg2bgdaeqaniabgghildaakiaawuhacagl9baaaaa@8478@ 

is a lower bound on the minimum sp v-way alignment cost for any decomposition.

that this is a lower bound on mincost is easy to demonstrate. when the decomposition has a single class, the lower bound given is equal to the sp alignment cost. so consider two classes in the decomposition c' and c". merge these two classes to form a single class c by setting μc, {i, j} = μc', {i, j} + μc", {i, j} for every pair {i, j}, removing classes c' and c". we need only verify that, when m is chosen to yield the best fractional alignment for class c ,

 min⁡xi,yi,zi∈ext∀1≤i≤v≥0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggtbqbcqggpbqacqggubgbdawgaawcbagaemieag3aasbaawqaaiabdmgapbqabawccqggsaalcqwg5bqedawgaaadbagaemyaakgabeaaliabcycasiabdqha6naabaaameaacqwgpbqaaeqaasgaeyici4saemyraukaemieagnaemidaqnaeiikagiaem4dac3aasbaawqaaiabdmgapbqabawccqggsaalcqwgnbqtcqggpaqkcqghaiiicqaixaqmcqghkjyocqwgpbqacqghkjyocqwg2bgdaeqaaowaamwaaeaadaaeqbqaaggaciab=x7atnaabaaaleaacuwgjbwygaqbaiabcuha7jabdmgapjabcycasiabdqgaqjabc2ha9bqabagccqggoaakiegacqgfjbwycqgfvbwbcqgfzbwccqwg0badcqggoaakcqwg4baedawgaawcbagaemyaakgabeaakiabcycasiabdiha4naabaaaleaacqwgqbgaaeqaaogaeiykakiaeyoei0iae43yammae43ba8mae43camnaemidaqnaeiikagiaemyeak3aasbaasqaaiabdmgapbqabagccqggsaalcqwg5bqedawgaawcbagaemoaaogabeaakiabcmcapiabcmcapiabgucariab=x7atnaabaaaleaacuwgjbwygagbaiabcycasiabcuha7jabdmgapjabcycasiabdqgaqjabc2ha9bqabagccqggoaakcqgfjbwycqgfvbwbcqgfzbwccqwg0badcqggoaakcqwg4baedawgaawcbagaemyaakgabeaakiabcycasiabdiha4naabaaaleaacqwgqbgaaeqaaogaeiykakiaeyoei0iae43yammae43ba8mae43camnaemidaqnaeiikagiaemoeao3aasbaasqaaiabdmgapbqabagccqggsaalcqwg6bgedawgaawcbagaemoaaogabeaakiabcmcapiabcmcapawcbagaegymaejaeyizimqaemyaakmaeyipawjaemoaaomaeyizimqaemodayhabeqdcqghris5aagccaglbbgaayzxaagaeyyzimraegimaadaaa@b41a@ 

where y <dig> ..., yv form a best fractional alignment  for c' and z <dig> ..., zv a best for c". in applying this general framework, one must calculate fractional alignment costs, and this appears to necessitate solving many v-way alignment problems. each can be solved by dynamic programming, but unless the decomposition is suitably chosen the resulting subproblems may be no simpler to solve than the original. if, in a given class of the decomposition, most weights are zero, the fractional alignment problem is substantially simplified. in particular, if all pairs containing a particular sequence have weights equal to zero in this class, the sequence does not participate in the fractional alignment. then by choosing weights within each class so that "few" sequences appear in pairs with nonzero weight, the alignment task is reduced to one on the few sequences only, and can be solved efficiently using dynamic programming. indeed when α = 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaiyagmaaaacagloagaayzkaaaaaa@30a9@ and every class c has μc, {i, j} =  <dig> for exactly one pair {i, j}, this is the decomposition of the v-way alignment into 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaiyagmaaaacagloagaayzkaaaaaa@30a9@ independent 2-way alignments discussed earlier. the decomposition framework suggests a means to improve this simple bound, which we pursue next.

improvement by 3-way alignment
there is every reason to expect that the best alignment of two sequences may conflict with the best 2-way alignments of each with a third. for example, aligning the first three sequences of the eighteen in the example optimally, one obtains the alignment

atgggttgcgtcaggagtaaagaagccaagggcccggcactgaagtacca

atgggctgtattaaaagtaaggaagacaaaggaccagcaatcaagtacag

atgggctgcattaaaagtaaacaa---aa-gt-ccagccataaaatacac

between the first and second sequences, there are  <dig> substitutions and no indels. between the second and third, there are  <dig> substitutions and  <dig> indels. between the first and third there are  <dig> substitutions and  <dig> indels. the total three-way alignment score is  <dig> +  <dig> +  <dig> =  <dig>  when exact two-way alignment of each pair among the three sequences is done, the alignment of the first two sequences agrees with that in the 3-way alignment. the optimal alignment of the second and third sequences does not; it has cost  <dig> :

atgggctgtattaaaagtaaggaagacaaaggaccagcaatcaagtacag

atgggctgcattaaaagt----aa-acaaaagtccagccataaaatacac

moreover, the optimal 2-way alignment for the first and third sequences has cost  <dig> :

atgggttgcgtcaggagtaaagaagccaagggcccggcactgaagtacca

atgggctgcattaaaagtaaacaa---aa-gtccagcca-taaaatacac

the sum of the three optimal 2-way alignment costs is therefore  <dig>  while the optimal 3-way alignment has cost  <dig>  hence the use of exact 3-way alignment provides a better bound; thus rather than computing the lower bound by adding the sp scores for the three pairs of sequences, one can employ an exact 3-way alignment for all three sequences. as shown in the example, the difference in sp scores of simultaneous three-way alignment of the three sequences and sum of pairwise scores of the three pairs in this triple is  <dig>  in this example, the best improvement that can be achieved by replacing any three 2-way alignments by the corresponding 3-way alignment is  <dig>  to establish this, all  <dig> 3-way alignments were calculated using dynamic programming, and compared to the sum of 2-way alignments within each.

average 3-way alignment
in v-way alignment, a reasonable goal therefore is to choose many triples of sequences for which the 3-way alignment improves the lower bound, so as to obtain many small improvements that aggregate to form a large improvement in the bound. at the extreme, one could calculate best 3-way alignments for all 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaizawmaaaacagloagaayzkaaaaaa@30ab@ triples of sequences. this corresponds to a decomposition of the v-way alignment into 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaizawmaaaacagloagaayzkaaaaaa@30ab@ classes; in each the three pairs of a triple are given weight 1v−2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabigdaxaqaaiabdaha2jabgkhitiabikdayaaaaaa@3100@ and the remaining weights are  <dig>  in the example, the sp lower bound using all 2-way alignments is 1946; using all  <dig> 3-way alignments improves the lower bound to  <dig>  of the  <dig> 3-way alignments,  <dig> yield no improvement;  <dig> yield an improvement of 1;  <dig> an improvement of 2; and  <dig> an improvement of  <dig>  the average improvement is therefore / <dig> =  <dig> 

there are two problems with this approach. first and foremost, while some triples yield improved cost bounds over the sum of the three pairs of the triple, others may not. simply averaging the contributions of each negates to a degree the improvements attributable to some triples. secondly, in addition to a substantial increase in cost for each alignment, the calculation involves completing o alignments rather than o. it is therefore desirable to reduce the number of classes in the decomposition, both to reduce computation time and to potentially improve the bound.

weighted selection of 3-way alignments
we now employ only some of the 3-way alignments. choose a collection t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ of triples. for a pair {i, j} of sequences, let λij be the number of triples of t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ in which it appears. we form a decomposition as follows. for each t ∈ t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ we form a class c, setting μc, {i, j} = 1λij
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabigdaxaqaaggaciab=t7asnaabaaaleaacqwgpbqacqwgqbgaaeqaaaaaaaa@324b@ when {i, j} ⊂ t,  <dig> otherwise. further, whenever there is a pair {i, j} with λij =  <dig>  form a class in which μc, {i, j} =  <dig> and all other weights are zero. this decomposition requires the determination of fractional 3-way alignments for each triple of t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@, and 2-way alignments for every pair appearing in any triple of t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@.

the determination of fractional 3-way alignments can be avoided by choosing a collection t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ of triples with the property that every pair belongs in either zero or λ of the chosen triples. then the weights for the classes arising from triples are all 1λ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabigdaxaqaaggaciab=t7asbaaaaa@2f67@; a 3-way alignment using weights all equal to  <dig> can be employed, and the result divided by λ, to avoid the solution of fractional alignment. using all 2-way alignments comprises one extreme, when t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ = ∅. using all 3-way alignments comprises the other extreme, when t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ contains all possible triples of the v sequences . other choices of t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ can yield larger increases in the lower bound; indeed, in our example, we can improve the bound to  <dig>  we pursue this next.

let v be a set of elements and t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ a set of subsets of v; we associate v with the sequences, and every set in t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ with a subset of sequences to align. then  is a -packing when |v| = v, every set in t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ has size k, and every pair of elements in v appears in at most λ sets in t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@. the packing is maximal when no set can be added to t
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabawaaegaeaaakeaaimaacqwftepvaaa@3847@ to obtain a packing with the same parameters, and it is maximum when it has the most sets of any packing with these parameters. see  <cit>  for results on packings

packings with λ =  <dig>  i.e. -packings, trivially have the property that every pair appears either in zero or in λ =  <dig> triples of the packing, and hence an sp lower bound can be calculated directly. since every triple in the packing contains three pairs and every pair is in at most one triple, no -packing can contain more than v/ <dig> triples. using such a packing for v-way alignment, we therefore employ only o 3-way alignments, rather than the o to employ all.

the natural question to address is: which -packing should we employ to obtain the bound? to a certain extent, this decision is based on the amount of computational effort that can be expended, and the accuracy of the bound desired. of course, the best outcome would be to achieve the best accuracy at least computational cost. in certain cases, one might be able to anticipate from exact 2-way alignments when a specific 3-way alignment is likely to lead to an improvement. for example, given three sequences w <dig>  w <dig>  w <dig>  if the 2-way alignments have very different patterns of indels and substitutions, one might expect that the 3-way alignment yields higher cost than the three 2-way alignments. this appears to be difficult to quantify.

in the absence of a good guide to the selection of 3-way alignments that yield the best improvements, two alternatives can be pursued. if accuracy is of paramount concern, we again calculate all 3-way alignments. instead of simply averaging their contributions, we assign to each triple a weight consisting of the difference between the sp cost for the 3-way alignment and the sum of the three 2-way alignments involved. the best accuracy from the method is obtained by selecting a -packing of maximum total weight. this can prove more computationally intensive than simply undertaking all 3-way alignments, since choosing a maximum weight packing is np-hard  <cit> . however, there is no need to obtain a packing of maximum weight; one of "large" weight suffices. as a compromise, we develop a simple heuristic  to choose a packing of large but not necessarily maximum weight in the methods section.

in the running example, since an -packing has at most  <dig> triples, one might hope to obtain a relatively large improvement. the best improvement that we found is  <dig>  then the hillclimbing algorithm to maximize weight was executed. it yields a collection of  <dig> triples: four triples with an improvement of  <dig> each, eleven with an improvement of  <dig>  and thirteen with an improvement of  <dig>  while calculating the average of all  <dig> alignments increases the lower bound by only  <dig>  this method is comparable in execution time and provides more than twice the improvement in the lower bound.

this demonstrates that, if one is willing to invest the effort to calculate all 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaceaaaeaacqwg2bgdaeaacqaizawmaaaacagloagaayzkaaaaaa@30ab@ 3-way alignments, a simple strategy can be used to select a packing providing a more substantial improvement than that from the elementary lower bound. nevertheless, it does not save any computation time.

heuristic selection of 3-way alignments
if computation time is the more critical, we choose a maximum -packing at random, and evaluate the bound. we therefore employ the hillclimbing algorithm  to calculate a packing of maximum size, not using any weight measuring expected improvement at this stage. then we calculate the optimal 3-way alignment for each triple of the packing, to determine the improvement in the lower bound. our first attempt gave an sp lower bound of  <dig> , our second a lower bound of  <dig> , and our third a lower bound of  <dig> . there is significant variation in repetitions of the method, as a consequence of the random selections made. naturally, one cannot conclude much from three trials, so we report the distribution of improvements from  <dig>  trials of the method .
it may happen that one is so unlucky as to obtain an improvement of only  <dig>  or lucky enough to obtain an improvement of  <dig>  but one expects, within a very small number of trials, to obtain an improvement of  <dig> or better. admittedly, when comparing to an improvement of  <dig>  none of the improvements are striking. to a degree, however, this misses the point. the computation time per trial is much lower than the cost of computing all 3-way alignments. hence the real benefit is that an improvement can be obtained that is competitive with the average of all 3-way alignments, at a fraction of the cost.

the astute reader can observe that in our  <dig>  trials, the average is slightly less than  <dig>  the average of all  <dig> improvements. this can be attributed to the fact that in a maximum packing on  <dig> elements, there are nine pairs not appearing in any triple; in a similar experiment with a number of sequences v ≡  <dig>   <dig>  , the averages would be in closer agreement. moreover, using a metaheuristic search strategy such as simulated annealing could prove beneficial, again at the expense of a substantial increase in computation time.

CONCLUSIONS
the calculation of v-way alignments that are optimal with respect to sum-of-pairs cost is challenging, and substantial effort has been invested in the calculation of upper bounds on sp costs. exact alignment appears to be computationally out of reach when many long sequences are to be aligned, and lower bounds from sums of exact 2-way alignments are often too weak to be of assistance. in this paper, we establish a generic lower bound using decompositions into fractional alignments. with this we propose two improvements using exact 3-way alignments. the first still calculates all 3-way alignments, but uses a hillclimbing technique to choose a packing among these of maximal weight. this improves on the accuracy of the bound at a similar computational cost to the naive method. the second instead reduces the computation time, by choosing at random a packing, and only then computing the 3-way alignments for the triples of the packing. in our test cases, the improvements are competitive with calculating the overall average, but are achieved at reduced effort in computation.

it remains of interest to determine whether, from exact 2-way alignment data, one can determine which triples are most likely to provide an improvement, prior to calculating the 3-way alignments; see  <cit>  for a related investigation. in our experiment, we did not achieve success better than random by classifying the triples based on features of the 2-way alignments. nevertheless, such a strategy may augment the effectiveness of the hillclimbing strategy if such a prediction is feasible.

