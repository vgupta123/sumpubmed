BACKGROUND
tangles have many applications in modeling protein-dna binding  <cit> . an n-string tangle consists of n strings properly embedded in a 3-dimensional  ball. some examples of 2-string tangles and a 3-string tangle are shown in fig.  <dig>  a protein complex bound to n segments of dna can be modeled by an n-string tangle. the protein complex is modeled by the 3d ball while the n dna segments can be thought of as n strings properly embedded in a protein ball . this is an extremely simple model of protein-dna binding. a 3d ball does not accurately represent the shape of a protein complex, and dna sometimes winds around a protein complex as opposed to being embedded within the protein complex. however, much information can be gained from this simple model.

when modeling protein-dna reactions, it is helpful to know how to draw the dna segments bound by the protein. for example, does the dna molecule cross itself within the protein complex or does it bend sharply? tangle analysis can be used to determine the topological shape of the dna segments bound by a protein complex. tangle analysis does not determine the exact geometry and hence cannot determine the sharpness of dna bending, but it can determine the overall topology. this can be used to infer which dna sequences are likely to be close to each other within the protein-dna complex  <cit>  as well as other information useful for modeling protein-dna reactions.

the focus of this paper is two-fold:  we describe a computational method for solving n-string tangle equations for small crossing solutions;  we apply this method to analyze the topology of the dna bound in the mu transpososome.

although our current c++ program is specific for analyzing the results of  <cit> , we would be happy to make any necessary modifications for solving any other system of tangle equations for small crossing solutions, especially those modeling experimental data. the source code is also available upon request.

the mu transpososome is involved in dna transposition. dna transposition is the process by which a piece of dna can change its location within a genome. the mu transposition pathway involves the formation of a series of protein-dna complexes . the mu transpososome refers to the mu transposase protein complex  and the three dna segments bound by this protein complex. since three dna segments are bound by mu, the mu transpososome can be modeled by a 3-string tangle. an experimental technique called difference topology  <cit>  combined with tangle analysis was used in  <cit>  to determine that some of the mu-dna complexes can be modeled by the five crossing 3-string tangle shown in fig. 1b. there are an infinite number of tangles that mathematically satisfy these experimental results . these other conformations are very complicated and hence biologically unlikely to model the mu transpososome, but they leave open the possibility that there are other biologically relevant models.

we describe a computational algorithm we have implemented which solves for biologically relevant topological conformations of dna bound within the mu transpososome using experimental results from  <cit> . for the purposes of this paper, we will consider a solution to be biologically relevant if it has a 2-dimensional projection with at most eight crossings. observe that the solution found in  <cit>  has five crossings . although we briefly describe in the discussion and conclusions section why we believe the mu transpososome contains at most eight crossings, our main reason for choosing to limit solutions up to eight crossings is computational time. currently our c++ algorithm takes two days on a linux computer with amd opteron processor  to find solutions up through eight crossings. the speed of the algorithm can be significantly improved by, for example, parallelizing the algorithm and running it on a cluster. hence the algorithm can be improved to find solutions with around ten crossings. but as the number of tangles grows exponentially with crossing number, it is unlikely that this method can be used to find solutions with more than fifteen crossings due to computation time.

the experimental technique used in  <cit>  can be applied to any protein complex which stably binds two or more segments of dna  in order to determine the topological conformation of the dna bound by the protein complex. the results of such experiments can be analyzed using a modification of the software we developed for analyzing the mu experiments. in other words, this software can be modified to solve any system of n-string tangle equations for solutions containing up to around ten crossings, including those modeling difference topology experiments applied to a protein complex that stably binds any number of segments of dna.

an example of a tangle equation
a description of the tangle equations modeling the difference topology experiments in  <cit>  is given in  <cit>  without the use of mathematical notation. since we use mathematical notation, we start with an example of a tangle equation. fig. 2a is a tangle equation with one unknown, the tangle t. a solution to this equation is a tangle t such that the conformation of the strands inside t combined with the conformation of the strands outside t must equal the four crossing link on the right-side of the equation in fig. 2a. the tangle in fig. 2b is a solution as shown in fig. 2c. the three crossing tangle in fig. 2d is not a solution to the tangle equation in fig. 2a as shown in fig. 2e.

cre recombinase
cre recombinase was used to obtain the system of tangle equations in  <cit>  and hence we give some background information on cre. cre is a site-specific recombinase that will bind to  <dig> base pair dna sequences called loxp. when cre binds two copies of this sequence, it breaks both sequences and switches the ends before rejoining the dna as shown in fig.  <dig>  if cre acts on a circular dna molecule containing cre binding sites which are directly repeated as in fig. 3a, then the resulting product is a two component link. if the circular dna molecule contains inversely repeated cre binding sites as illustrated fig. 3b, then the product is a one component knot.

difference topology and tangle modeling
we will now describe some of the difference topology experiments as well as the tangle model from  <cit> . the idea behind the experimental technique of difference topology is to use a protein such as cre recombinase to trap crossings bound by the protein under study . this is illustrated in fig.  <dig> where mu is represented by the cyan colored ball. to show how a difference topology experiment works, we will assume the dna conformation bound by mu corresponds to the five crossing 3-string tangle in fig. 1b based upon the results of  <cit> . in this technique, circular dna is first incubated with the proteins involved in mu transposition. the mu complex binds dna, possibly trapping dna crossings within the protein complex. a second protein whose mechanism is well understood is added to the reaction . this second protein, cre, cuts the dna and changes the circular dna topology before resealing the breaks, resulting in knotted or linked dna. the crossings bound by the first protein, mu, will affect the product topology. in fig.  <dig>  four of the five crossings bound by mu are trapped by the action of cre, resulting in a four crossing link. hence, one can gain information about the dna conformation trapped by the first protein, mu, by determining the knot/link type of the dna knots/links produced by the second protein, cre.

note that in the substrate configuration, three loops emanate from the mu transpososome. the two binding sites for cre can be placed in two of the three loops. by choosing on which pair of loops to place the cre binding sites, the location of cre action can be controlled. six different substrates were constructed in  <cit>  by varying the relative positions  of the cre sites as well as their relative orientations . models proposed in  <cit>  of these six reactions are illustrated in fig.  <dig>  the cyan colored ball represents the dna bound by mu transposase while the pink colored ball represents the dna bound by cre.

observe that in fig.  <dig>  the yellow and brown arrow heads in the cre complex point in opposite directions. based on the crystal structure of cre complexed with dna  <cit> , it was assumed in  <cit>  that the two cre binding sites must be in anti-parallel orientation with respect to each other within the cre-dna complex. note that for the configuration in fig.  <dig>  an even number of crossings between cre binding sites are needed to achieve an anti-parallel orientation between the cre binding when the cre sites are directly repeated  while an odd number of crossings are necessary when the cre binding sites are inversely repeated . in the mu/cre models in fig.  <dig>  sometimes an extra crossing not bound by either protein is needed for correct dna orientation within the cre protein complex, depending on the orientation of the cre binding sites on the two loops. when comparing products where the cre sites are placed on the same pair of loops but in different orientations, it was assumed that the extra crossing occurred with the higher crossing product. when this extra crossing exists, it is placed within the green annulus in our figures. hence crossings within the green annulus, if any, represent crossings not trapped by either protein complex.

if we do not assume that the shape of dna bound by mu is the five crossing 3-string tangle from fig. 1b, we can instead enclose the protein-bound dna conformation into an unknown tangle, t. the system of tangle equations corresponding to these experiments is shown in fig.  <dig> where the tangle t represents the unknown dna conformation bound by mu. when the cre sites are directly repeated, the products are four crossing links regardless of the location of the cre binding sites. the chirality of the four crossing links was only determined in one of the three cases where the cre binding sites are directly repeated. but as there is only one four crossing link up to mirror image, the crossings of the two unidentified four crossing link products are either all left-handed or all right-handed. when the cre sites are inversely repeated, the products are three crossing knots in two cases and a five crossing knot in the third case. since there is only one three crossing knot up to mirror image, the crossings of the unidentified three crossing knot are either all left-handed or all right-handed. in methods, we will prove mathematically that the five crossing knot must also contain all left-handed or all right-handed crossings, but for now we will make no assumptions regarding this knot other than that it contains five crossings as experimentally determined.

mathematical model
determining the topological conformation of dna bound by mu is equivalent to solving the system of tangle equations in fig.  <dig> for the 3-string tangle t. a solution is a topological approximation, given as a 2-dimensional projection of a 3-dimensional conformation.

an example of a 3-dimensional reconstruction using 2-dimensional tangle models is given in  <cit> .

in order to find the fig. 1b solution, pathania et al  <cit>  assumed the protein-bound dna is a 3-branched supercoiled structure like those in fig.  <dig>  furthermore, since the substrate was negatively supercoiled unknotted dna, pathania et al  <cit>  assumed that the crossings within each of the three branches is right-handed. pathania et al  <cit>  used the number of crossings in the knotted and linked dna products to determine the number of crossings in each of the three branches in order to find the fig. 1b solution which is repeated in fig. 7a for convenience. next, we illustrate their method for finding the number of crossings in each branch.

there exist four 3-branched supercoiled solutions to the tangle equations in fig.  <dig>  these solutions are shown in fig.  <dig>  they were obtained by solving a system of linear equations. for example, looking at the bottom left tangle equation in fig.  <dig> in which the product is a right-handed three crossing knot, we observe that if the solution is a 3-branched supercoiled conformation with x crossings in one branch containing a cre binding site and y crossings in the other branch containing the other cre binding site, then x + y =  <dig> . if we let z be the number of crossings in the third branch, then the top left equation involving an unidentified four crossing link in fig.  <dig> corresponds to the linear equation y + z = ±  <dig>  while the equation involving the unidentified three crossing knot  results in the equation x + z = ±  <dig>  if we solve the system of linear equations, x + y =  <dig>  y + z = ±  <dig>  x + z = ±  <dig>  we obtain x =  <dig>  y =  <dig>  z =  <dig> , x =  <dig>  y =  <dig>  z = - <dig> , x = - <dig>  y =  <dig>  z = - <dig> , x =  <dig>  y = - <dig>  z = - <dig> .

note that we are actually solving four different systems of linear equations  depending on whether the top left four crossing link is right- or left-handed  and whether the unidentified three crossing knot is right- or left-handed .

the solutions shown in fig. 7b, 7c, 7d contain more crossings than the solution in fig. 7a. also, the solutions in fig. 7b, 7c, 7d contain left-handed crossings. as the substrate dna was negatively supercoiled, one would expect a 3-branched supercoiled structure to contain right-handed twists, not left-handed twists. hence the fig. 7a solution  <cit>  is biologically more likely than the other 3-branched supercoiled solutions .

the solutions in fig.  <dig> are the only solutions if one considers only 3-branched supercoiled dna conformations, but the question remains whether there are any other biologically relevant solutions if we do not assume a 3-branched supercoiled structure. in the next section, we describe colorability, the tangle invariant which we use to search for solutions for t where the only restriction placed on t is that it has eight or fewer crossings. however, a thorough understanding of this invariant is not necessary to understand the main idea behind the algorithm discussed in results.

the coloring invariants
a diagram, d of a knot, link, or tangle t is a projection of t into ℝ <dig>  the 2-dimensional plane, where only double points are allowed at a crossing , and gaps are used to indicate which part of the knot crosses under. two diagrams correspond to the same 3d knot/link/tangle if one diagram can be converted to the other diagram via a sequence of reidemeister moves-ri, rii, and riii .

an m-coloring of a diagram d is a function c : {arcs of d } ↦ ℤ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaatuudjxwak1uy0hmmaehbfv3yslgzg0uy0hgiud3bagabaiab=rsiabaa@3772@m where the elements of ℤ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaatuudjxwak1uy0hmmaehbfv3yslgzg0uy0hgiud3bagabaiab=rsiabaa@3772@m = { <dig> , ..., m-1} will be called colors, and such that at each crossing the relation y + z - 2x =  <dig> mod to holds, where x is the color assigned to the overarc and y and z are the colors of the two underarcs. see fig.  <dig>  a coloring is trivial if the coloring function is the constant map, i.e., all the arcs are assigned the same value or "color". a knot or link, k is said to be in-colorable if there exists a non-trivial m-coloring of d. this is a knot/link invariant in that if one diagram of the knot/link k is m colorable then all diagrams corresponding to k are m-colorable  <cit> . for an elementary introduction to coloring knots see  <cit> . we will more thoroughly define how coloring relates to tangles below  <cit> .

a coloring matrix of a knot/link/tangle diagram, t, is any matrix, mt, which is row equivalent to a coefficient matrix corresponding to the coloring equations. for example, the  <dig> ×  <dig> matrix in eqn.  is a coloring matrix corresponding to the tangle diagram in fig. 9c. each row corresponds to one of the six crossings in the tangle diagram while each column represents one of the eight arcs, x <dig>  x <dig>  x <dig>  x <dig>  x <dig>  x <dig>  x <dig>  x <dig> in the tangle diagram.

×= mod m     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadaqadaqaauaabeqaggaaaaaaaeaacqaiwaamaeaacqaixaqmaeaacqaixaqmaeaacqaiwaamaeaacqghsislcqaiyagmaeaacqaiwaamaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqghsislcqaiyagmaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqaiwaamaeaacqaiwaamaeaacqaiwaamaeaacqghsislcqaiyagmaeaacqaixaqmaeaacqaiwaamaeaacqaiwaamaeaacqaiwaamaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqaixaqmaeaacqaiwaamaeaacqghsislcqaiyagmaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqaiwaamaeaacqaiwaamaeaacqghsislcqaiyagmaeaacqaiwaamaeaacqaixaqmaeaacqaiwaamaeaacqaiwaamaeaacqghsislcqaiyagmaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqaiwaamaeaacqaiwaamaeaacqaixaqmaeaacqaiwaamaaaacagloagaayzkaagaey41aq7aaewaaeaafaqabeacbaaaaaqaaiabdiha4naabaaaleaacqai1aqnaeqaaagcbagaemieag3aasbaasqaaiabiada2aqabaaakeaacqwg4baedawgaawcbagaeg4nacdabeaaaoqaaiabdiha4naabaaaleaacqai4aaoaeqaaagcbagaemieag3aasbaasqaaiabigdaxaqabaaakeaacqwg4baedawgaawcbagaegomaidabeaaaoqaaiabdiha4naabaaaleaacqaizawmaeqaaagcbagaemieag3aasbaasqaaiabisda0aqabaaaaagccagloagaayzkaagaeyypa0zaaewaaeaafaqabeacbaaaaaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaaaaiaawicacaglpaaacqqggaaiiegacqwftbqbcqwfvbwbcqwfkbazcqqggaaicqwgtbqbcawljagaaczcamaabmaabagaegymaedacagloagaayzkaaaaaa@8ea2@

we will call the arcs which have one endpoint on the boundary of the tangle 3-ball endpoint arcs. the remaining arcs will be called interior arcs. notice that we place the four columns corresponding to the endpoint arcs, x <dig>  x <dig>  x <dig>  x <dig>  as the four rightmost columns of the matrix mt . we can solve this system of equations by performing the following row operations:  exchange two rows ;  add a multiple of one row to a different row ;  multiply a row by - <dig> . since we are working in ℤ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaatuudjxwak1uy0hmmaehbfv3yslgzg0uy0hgiud3bagabaiab=rsiabaa@3772@m where to is an arbitrary integer, scaling a row is not allowed.

the first non-zero term in a row is called a leading entry. a matrix is in echelon form if  rows consisting of only zero's occur below rows containing at least one non-zero term;  each entry below a leading entry is zero;  if aih and ajk are leading entries and if i <j, then h <k . an echelon form, ef of the matrix in eqn.  is

ef=     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrcqwggbgrcqggoaakieqacqwfnbqtdawgaawcbagae8hvaqfabeaakiabcmcapiabg2da9maabmaabaqbaeqabyacaeaabaqaaiabigdaxaqaaiabicdawaqaaiabicdawaqaaiabgkhitiabikdayaqaaiabicdawaqaaiabigdaxaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabigdaxaqaaiabigdaxaqaaiabicdawaqaaiabgkhitiabikdayaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabigdaxaqaaiabigdaxaqaaiabicdawaqaaiabgkhitiabikdayaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabiodazaqaaiabicdawaqaaiabgkhitiabikdayaqaaiabgkhitiabigdaxaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabigdaxaqaaiabgkhitiabigdaxaqaaiabigdaxaqaaiabgkhitiabigdaxaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabicdawaqaaiabiodazaqaaiabgkhitiabiodazaaaaiaawicacaglpaaacawljagaaczcamaabmaabagaegomaidacagloagaayzkaaaaaa@6de8@

we define the standard echelon form of a matrix, sf, to be the echelon form in which each leading entry is positive and if aij is a leading entry of the ith row, then  <dig> ≤ arj ≤ aij - <dig>   <dig> ≤ r <i. the standard echelon form of a matrix is unique. note that the matrix in eqn.  is not in standard echelon form, but the lower right hand corner  <dig> ×  <dig> submatrix is in standard echelon form ).

let ml be the lower right hand corner  <dig> ×  <dig> submatrix of mt in standard echelon form. if the endpoints arcs' unknowns, x <dig>  x <dig>  x <dig>  x <dig> correspond to the four rightmost columns, then ml is a tangle invariant. it is a tangle invariant in that if you take two diagrams of the same tangle t and place the endpoint arcs in the same order in the last columns of their respective coloring matrices, then no matter how the interior arcs are labeled, ml will be the same for both diagrams. in addition, the absolute value of the determinant of the upper left  <dig> ×  <dig> submatrix, du =  <dig>  is also an invariant.

ml=,du=3     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbamxvp5wqsxmqhnxajn0bkvguhdwzzbqegyvzyrwyufgarqqtubsr4rnchbgeagqia8vkikvafgielifelkfelk=iy=hhbbf9v8qqaqfr0xc9pk0xbba9q8wqffeay=bilkvclq=jhqvepeea0=as0db9vqpepesp0xe9fve9fve9gapdbaqaaegacagaaiaabeqaamqadiabaagcbaqbaeqabegaaaqaagwabiaa=1eacawfsbgaeiikagiaa8hvaiabcmcapiabg2da9maabmaabaqbaeqabiabaaaabagaegymaedabagaeyoei0iaegymaedabagaegymaedabagaeyoei0iaegymaedabagaegimaadabagaegimaadabagaeg4mamdabagaeyoei0iaeg4mamdaaagaayjkaiaawmcaaiabcycasaqaaiaa=rgadawgaawcbagaa8xdaaqabagccqggoaakcawfubgaeiykakiaeyypa0jaeg4mamdaaiaaxmaacawljawaaewaaeaacqaizawmaiaawicacaglpaaaaaa@5969@

in the above example, the tangle diagram t is a 2-string tangle with six crossings. hence its coloring matrix is a  <dig> ×  =  <dig> ×  <dig> matrix, and we were interested in the  <dig> ×  <dig> matrix ml as well as the determinant of the upper left  <dig> ×  <dig> matrix. in the general case, suppose t is a diagram of an arbitrary n-string tangle with a k ×  coloring matrix mt . let ml be the lower right-hand corner n × 2n submatrix of mt in standard echelon form, and let du be the absolute value of the determinant of the upper left  ×  submatrix of mt . both ml and du are invariants of t  <cit> . note that columns corresponding to the endpoint arcs must be the right-most columns of the coloring matrix, and these columns must be in a fixed order when calculating ml. we will always order the endpoint arcs in a clockwise manner starting with a northwest endpoint arc.

in order to calculate ml where t is an n-string tangle, we must label 2n endpoint arcs with distinct variables. if a string consists of just one arc , we can doubly label the arc, labeling one half of this endpoint arc xi, the other half xj, and adding the equation xi - xj =  <dig>  normally an n-string tangle with k crossings will have a k ×  coloring matrix. but if any arcs are doubly labeled, then the coloring matrix will have more than k rows and  columns.

RESULTS
we describe a computational algorithm we have implemented to solve the system of tangle equations in fig.  <dig>  the full description is given in methods. the majority of the algorithms were written so that this program can easily be modified to solve any system of n-string tangle equations up to around 8– <dig> crossings, including those modeling difference topology experiments applied to a protein complex that stably binds any number of segments of dna.

we first determine how the strings enter and exit the tangle. the parity of a tangle refers to the order in which the strings enter and exit the 3d ball. a solution to the tangle equations in fig.  <dig> can have one of two possible parities: the strings enter and exit the tangle as in fig. 10a or as in fig. 10b. this is easily determined by noting which of the equations in fig.  <dig> involve a knot  versus a two component link. for example, the string entering in at x <dig> cannot exit at x <dig> since the top left equation in fig.  <dig> involves the one component unknot. as discussed in methods, we also use 2-string tangle analysis to simplify the system of equations in fig.  <dig> 

a number of techniques have been used to encode knot diagrams for computational purposes  <cit> . as described in methods, we use coloring matrices to encode tangle diagrams. we generate matrices which could correspond to tangle diagrams up through eight crossings. we check each matrix to determine if it has the correct coloring invariants to be a solution to the tangle equations in fig.  <dig>  as shown in table  <dig>  this eliminates the majority of the generated matrices. not all generated matrices correspond to a tangle. we use an algorithm similar to that described in  <cit>  to remove all matrices which do not correspond to a tangle.

number of matrices with the correct coloring invariants , corresponding to a drawable tangle , and which are potentially non-equivalent . the first column refers to the number of crossings in the tangle diagram. the second column gives the number of matrices generated which could correspond to a tangle with a fixed crossing number. the results in the next three columns assume the parity in fig. 10a while the results in the last three columns assume the parity in fig. 10b. the columns labeled "col" state the number of generated matrices which have the correct coloring invariants to satisfy the equations in fig.  <dig>  however, not all generated matrices correspond to a tangle. the columns labeled "draw" give the number of matrices which correspond to a drawable tangle with the correct coloring invariants. the number of these matrices which may correspond to non-equivalent tangles is given in the columns labeled "non-equiv?". note, however, that the algorithm does not identify all equivalent tangles.

recall that a tangle can be represented by a number of different diagrams related by reidemeister moves. unfortunately, there is no algorithm guaranteed to determine whether two tangle diagrams are equivalent. in fact, in order to simplify a diagram, it may be necessary to first increase the number of crossings in the diagram. thus this software does not determine all tangle equivalences, but does reduce the output sufficiently to handle the remaining possibly equivalent tangles by hand. while generating matrices, we omit matrices where the corresponding diagram can be simplified by ri or rii moves . as discussed in methods, we also perform some other simplifications which involve a combination of ri, rii, and riii moves. as shown in table  <dig>  this leaves us with  <dig> matrices that could correspond to tangles satisfying the system of equations in fig. 6: ten with the parity shown in fig. 10a and three with the parity shown in fig. 10b.

we checked the remaining thirteen tangles corresponding to these matrices by hand. the ten tangles with fig. 10a parity are all equivalent to the five crossing tangle found in  <cit>  . the three tangles with fig. 10b parity are all equivalent to one of the two eight crossing tangles in fig. 7b, c. recall that the two eight crossing solutions were not considered in  <cit>  since the unknotted dna substrate was negatively supercoiled and hence trapping left-handed crossings is biologically unlikely.

discussion
we have developed software to analyze the difference topology experiments in  <cit> . pathania et al  <cit>  needed to assume the basic shape of a 3-branched supercoiled structure  in order to find the solution shown in fig. 1b . with our software, no assumptions regarding the dna conformation bound by the protein complex are needed except for an upper bound on the number of crossings. this algorithm can also be modified to analyze any difference topology experiment regardless of the number of dna segments bound by the protein complex .

a tangle solution is a topological approximation given as a 2-dimensional projection of a 3-dimensional structure. it does not determine sharpness of dna bending, but it does give an important starting point from which other modeling techniques may be applied. limited information regarding the mu-dna conformation existed before  <cit> . since then a partial structure based on scanning transmission electron microscopy  at cryo-temperatures has become available  <cit> , but this involves only a portion of the protein complex and a change in the dna sequences bound by mu. information regarding protein-bound dna conformations can sometimes be obtained via crystallography, stem, or fret , but all these techniques are quite difficult and currently can only be applied to small protein-dna complexes.

recall that in the mu tangle model from  <cit>  , it is assumed that at most one crossing is trapped outside of the protein complexes . since mu and cre bind to specific dna sequences, the length of the dna between the mu binding sites and cre binding sites can be controlled. the shortest length needed for the reaction to take place was determined in  <cit>  in order to prevent trapping extraneous crossings. the difference topology experimental technique can also be applied to proteins that bind to arbitrary dna sequences rather than specific dna sequences, but the results would not be expected to be as clean . it was shown in  <cit>  that if the length of dna between binding sites is not properly controlled, then the number of protein-bound dna crossings may be overestimated. but even if we are left with a topological approximation, it is still a significant improvement over having little or no information on how to draw the dna in a protein-dna complex.

we are not mathematically limited to equations resulting from cre recombination. any protein which can change dna topology could potentially be used in a set of difference topology experiments to obtain a different system of tangle equations. for example topoisomerases change the topology of circular dna by changing dna crossings. it may be possible to obtain a more 3-dimensional model by averaging 2-dimensional projections of tangle solutions from two or more systems of tangle equations or tangle models  <cit> . cre, however, may be the easiest to work with due to its sequence specificity and its simple mechanism.

the software and its applicability to n-string tangle equations
this software consists of  <dig> steps:

 <dig>  matrices which could correspond to coloring matrices of tangle diagrams are generated 

 <dig>  the coloring invariants of each matrix are checked . implementing this part of the software requires that we first mathematically simplify the system of tangle equations via 2-string tangle analysis .

 <dig>  not all the matrices generated in step  <dig> will correspond to a tangle diagram. hence each generated matrix is checked to determine if it actually corresponds to a tangle diagram .

 <dig>  different matrices can correspond to the same tangle. thus we remove some  of the redundant matrices 

no modifications are needed for steps  <dig> and  <dig> in order to apply this algorithm to a different system of n-string tangle equations. for step  <dig>  additional invariants may be needed in addition to or in replacement of the coloring invariants. additional subroutines may also be needed for step  <dig> 

although coloring is not that powerful of a knot invariant, it is a powerful tangle invariant. as our results show, it is the only invariant we need to check to determine if a tangle up through eight crossings is a solution to the equations in fig.  <dig>  however, there is no guarantee that this invariant will be sufficient for a different system of tangle equations. hence we may need to check additional invariants. fortunately, there are a number of other invariants as well as software available for calculating these other invariants which can be used when needed  <cit> . in particular we plan to add the homflypt polynomial knot invariant as an alternative option to the coloring invariant. the homflypt polynomial has been used in other algorithms requiring computational speed  <cit> . knots with nine or fewer crossings are uniquely identified by their homflypt polynomial. hence if the knotted products of the difference topology experiments contain fewer than ten crossings, then checking the homflypt polynomial is sufficient . even if we need to use different invariant, this does not affect any other part of the algorithm. in particular, we can still use coloring matrices to encode tangle diagrams.

our software left us with only  <dig> different coloring matrices which could correspond to tangle solutions to the system of equations in fig.  <dig>  we could have added additional methods to determine if two tangle diagrams are equivalent to further reduce this output, but it was quicker to check these  <dig> matrices by hand. for a different system of equations, additional methods to determine tangle equivalence may be needed to reduce the output to a handful of matrices. we will add additional subroutines to decrease the number of redundant tangles as needed.

the modifications that may be needed are straightforward. in fact they have been used by others for a computationally much more complex problem, knot tabulation  <cit> . the techniques we use are very similar to those used to tabulate knots up through  <dig> crossings. the main difference between knot tabulation and our algorithm is that in tabulating knots, every knot diagram must be fully identified and all redundancies eliminated. in our algorithm, we discard diagrams that do not satisfy our equations, and hence only need to analyze a very small fraction of diagrams compared to the number of diagrams analyzed in knot tabulation. also, since we focus on only a few systems of equations at a time, we can analyze by hand some redundancies among our tangle solutions. hence we don't need to check nearly as many invariants or computationally determine as many tangle equivalences as in knot tabulation where millions of knots have been identified  <cit> . thus our algorithm is computationally much simpler than that required for knot tabulation.

unfortunately, we cannot give a mathematical estimate regarding the number of solutions or the number of redundancies for an arbitrary system of tangle equations. in most cases, any modifications needed to reduce the number of repeated solutions will take at most a few days to implement. however, if the system of tangle equations is under-determined so that it has many small crossing solutions, then determining redundancies computationally will become much more important. an example of an under-determined system would be one modeling a partial set of difference topology experiments. in  <cit> , cre binding sites, in both inverted and direct orientations, were placed on each pair of the three loops emanating from the mu transpososome. hence six different substrates were constructed. if a protein binds, for example, four segments of dna, then four loops will emanate from the protein-dna complex. if cre binding sites are placed on each pair of these four loops in both inverted and direct orientation, twelve substrates would be needed. in general if a protein-complex binds n segments of dna, one would need to contract n different substrates if cre binding sites are placed on each pair of loops in both orientations. an under-determined system would result if cre binding sites are not placed on each pair of loops. we will eventually be able to solve under-determined systems for small crossing solutions as this problem is still much simpler than knot tabulation, but we expect this will take longer to implement.

other mathematical methods
there are many mathematical techniques  as well as software  <cit>  for solving 2-string tangle equations. hence many  biologically relevant 2-string tangle equations can be completely solved. similar mathematics does not yet exist for solving n-string tangle equations for n >  <dig>  some work has been done on 3-string tangles  <cit>  and solving 3-string tangles equations involving the class of 3-string tangles called 3-braids  <cit> . there is also some work on classifying n-string tangles . also techniques in 3-manifold theory can be applied to solve n-string tangle equations for small crossing solutions  <cit> , . however, at the moment, there are no mathematical methods for solving the system of 3-string tangle equations in fig.  <dig> or for most systems of n-string tangle equations.

computational limitations
currently this c++ algorithm takes about two days on a linux computer with amd opteron processor  to find solutions through eight crossings. however, the efficiency of the algorithm can be significantly improved by parallelizing it and running it on a cluster. hence it should be possible to find solutions up to about ten crossings. as the number of tangles grows exponentially with crossing number, this algorithm can not be used to find high crossing solutions. knots have only been tabulated up through sixteen crossings. although our algorithm is computationally much simpler than knot tabulation, there are more tangles with k crossings than there are knots with k crossings. hence we do not expect to be able to get much past ten crossings with a reasonable computation time.

despite this computational limitation, we believe this algorithm is applicable to a wide array of protein-dna complexes. the length of dna bound by the protein limits the bound dna's topological complexity. for example, the three dna segments bound within the mu transpososome are  <dig>   <dig> and  <dig> base pairs. however, we do not know of a theoretical tipper bound on the topological complexity of protein-bound dna.

we believe eight crossings is a reasonable limit for the mu transpososome. in addition to limits imposed by the lengths of the three protein-bound dna sequences, the existence of a five crossing solution implies that a much more complicated solution with eight or more crossing is less likely. however, we have no proof that this is the case.

CONCLUSIONS
the computational algorithm described in this paper can be modified to solve any system of n-string tangle equations for small crossing tangle solutions. a long-term goal is to create software accessible to those without a background in knot theory. eventually this software will be able to draw the tangle solutions. some additional work is needed to handle under-determined systems of tangle equations as discussed above. but in the meantime if the system is not under-determined, we can readily modify this algorithm to solve any specified system of tangle equations up to around ten crossings; hence an experimentalist need not wait for the final version of this software before performing difference topology experiments.

