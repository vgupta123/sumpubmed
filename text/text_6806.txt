BACKGROUND
our knowledge of small non-protein-coding rnas  has considerably evolved during the last decade. in  <dig>  science magazine selected the discovery of small rna with a regulatory function as a scientific breakthrough of the year  <cit> . since, it has been discovered that various forms of ncrna molecules play an important function in regulating gene expression. first examples include small temporal rna, or microrna, that regulates development in c. elegans  <cit> . it is now confirmed that genomes in all kingdoms encode for ncrna playing regulatory roles  <cit> . because it is believed that only a small fraction, corresponding to the tip of the iceberg, has been discovered, different approaches including experimental and computational ones have recently been developed in order to identify more ncrnas.

detecting novel ncrnas by experimental rnomics is not an easy task  <cit> . this has led both to the proposition of alternative computational methods that aim to detect and analyze ncrnas in genomic sequences and, simultaneously, to an increasing development of generalist and specific rna databases. these tools cover a broad spectrum of the needs in the rna field  <cit> . currently, rfam  <cit>  can be considered as the most comprehensive repository of validated ncrna families and the infernal <cit> /rfam pair is used in the framework of the majority of genome annotation projects. in addition to the rfam standard, others databases are available; focusing on one class of molecules , on one genome , or aiming at providing an exhaustive catalogue of ncrnas .

computational methods for ncrna prediction can be classified into four approaches; bias composition analysis, minimization of free energy, searching for homologous rna in the context of conserved family-specific characteristics, and sequence-based homology searches. the first approach analyzes the intrinsic features of the genomic sequence in order to detect ncrna candidates. these ab-initio methods rely on an existing bias in base composition between ncrna and the rest of the genome in order to provide a segmentation of the genomic sequence into ncrna regions and others  <cit> . they are often used in combination with available transcription signals detection, structure prediction and comparative approaches. the second approach makes use of rna folding algorithms in order to select those regions of best free energy. this approach has been very successful in the context of finding mirna  <cit> . candidates are filtered out on the basis of thermodynamic stability estimation  <cit> . a third approach relies on existing ncrna families which can be described by their common sequence and structural elements. this approach uses validated sequence/structure alignments in order to identify the key ribonucleotides involved in the molecule structure. alignments are then processed and modelled in several ways, they can be used to build profiles as implemented in erpin  <cit> , or covariance models that are implemented in the infernal package which is the engine behind the rfam rna database. this approach also includes programs dedicated to one type of ncrna like the widely used trnascan-se  <cit> . more flexible programs are included in this class, providing users with a programming language allowing the description of any ncrna structure . these programs require significant expertise of a family. the last approach makes use of the increasing number of genomic sequences which provide a rich dataset for computational comparative sequence analysis. recent developments such as qrna  <cit> , rnaz  <cit> , msari  <cit> , ddbrna  <cit>  have highlighted a high number of known and new ncrna families.

complementary to the development of detection strategies, many user interfaces have been developed to modify and annotate rna sequences and structures . in addition to these binary resources, the rnaml  <cit>  syntax was defined in  <dig>  the aim of this consensus syntax is to transfer information among the rna community and to ensure a basic interoperability between programs.

after a decade of genome annotation, many powerful protein annotation platforms have been developed . in the framework of annotation projects, these platforms fill the gap between existing gene prediction software and public protein databases. however, they deal very poorly with ncrna genes, relying on limited detection software whose output is displayed in a very crude way.

moreover, numerous rnas identified by rnomics or computational screens lack precise known sequence and structural motifs making them difficult to classify into families.

thus, there is now a clear need for ncrna gene annotation platforms. such a platform should provide an interactive environment for the analysis and annotation of ncrna genes with regard to their sequence and structural conservation within gene families. also, it should be able to rely on a flexible set of detection methods and provide services such as incremental updates and redundancy removal .

the aim of learn, the annotation platform presented here, is to manage the complete process of annotation of ncrna genes. it can incrementally integrate the results of arbitrary detection programs and provides life scientists with user friendly interfaces allowing both structural and functional annotations. in order to facilitate later exploitation of annotations, learn relies on existing standards such as the rfam database and the rnaml data exchange format, thus providing full interoperability with existing databases and software.

implementation
architecture
the general architecture of learn is shared by most annotation platforms . the first component is a perl pipeline which combines the analysis of genomic sequences in fasta format with the integration of results . without further configuration, the current version relies on three different detection programs: rfam_scan.pl to scan the rfam database; blastn to scan a database of large rna molecules, and trnascan-se for trnas. moreover, it can easily be customized in order to add arbitrary detection software generating gff <dig> output files. the data storage layer is implemented both as a repository of rnaml files and as a rfam-formatted database. this redundancy guarantees interoperability with other software using the rnaml syntax as well as with infernal and related programs for searching and building families. the interface layer provides the user with interactive annotation sheets allowing the expert annotation of single rna molecules or rna families. the web server is implemented in perl-cgi. while data access for visualisation is implemented using an xslt processor and xsl stylesheets, perl-object modules are used for repository modification. in addition, the package includes perl templates to provide access to the learn instances via biomoby web-services.

set-up
the package  provides command line programs for setting up and managing learn in the context of annotation projects. these programs  ensure the set-up of a new learn instance by generating site specific configuration files, and check the existence of mandatory binaries;  manage user authentication required for annotation editing;  allow new detection software to be registered in the learn pipeline and  modify the release browsed by the web server.

RESULTS
detection and clustering pipeline
the learn pipeline  integrates the results of detection programs. the integration is performed by a greedy algorithm which iteratively analyses ncrna candidates provided by detection software. in the pipeline, each candidate is tested against pre-existing learn families . when the molecule is detected as a member of an existing family, the family is updated, re-aligned , folded  and a new covariance model is built , otherwise a new singleton family is created. the greedy process stops when all detected candidates have been evaluated.

because of its greediness, and depending on the order in which candidates are evaluated, family identification may be unsatisfactory. if the seed is far from the family consensus, the covariance model is not sensitive enough to capture the other members of the family. this lack of sensitivity may lead to a fragmentation of the families. therefore, a post-process aimed at clustering subfamilies follows the analysis of candidates. this refinement process starts by a blastn search to identify families which are candidates for merging on the basis of sequence similarity. then, pairs of sequence-related families are clustered, aligned and the free-energy of the secondary structure is computed using rnaalifold program. the clustering is validated only if the merged family does not degrade the free energy compared to isolated subfamilies.

redundancy management
the algorithm manages two types of redundancies. the first redundancy is generated by the fact that different detection programs can detect the same type of ncrnas . learn handles this redundancy by prioritizing the detection software in the main configuration file. a second type of redundancy is caused by overlaps between sequences, and this is critical in the context of ongoing bac-to-bac sequencing projects. in order to manage this source of redundancy, learn can rely on an additional file describing pairwise overlaps to avoid artificial over-prediction of redundant ncrna genes.

incremental updates
the software allows for incremental updates of gene and family annotations which is an essential feature for ongoing sequencing projects. incremental updating is made possible by using the rnaml files of the release n- <dig> before starting the greedy analysis of the release n.

parallelization
in order to analyze one or several complete genomes, it is often useful to run detection computations in parallel. to accommodate the parallelization and the greedy algorithm previously described, the program offers the possibility to execute all detection programs beforehand. in this case, a command line is generated for each execution of a detection program. each command line stores the result of its execution in a cache directory using an unambiguous filename based on the program name and version and the md <dig> checksum of the analyzed sequence and can be directly executed in parallel. when the pipeline later requires the execution of a prediction program, it may directly use the cache result instead of running the prediction itself.

customization
the pipeline can easily be customized to integrate arbitrary detection programs providing results in gff <dig> format. in addition to the definition of site specific pipelines, this opens the possibility of using learn as a light-weighted visualisation interface for researchers willing to develop new detection software.

database and interoperability
learn relies on a repository of rnaml documents to store the annotations of molecules and ncrna families. this technical choice is compatible with the limited amount of data generated to annotate ncrna . relying on rnaml documents  provides a native interoperability with the visualisation software which use this standard format;  takes advantage of xslt processors which allow both document transformations and efficient  searches in xml repositories, and  provides users with a light-weight package that does not require any rdbms skill.

user interface
the web interface of learn is structured by the different functionalities it offers: scanning the current database and annotating ncrna molecules or families.

scan/browse
the "browse" tab allows lists of ncrnas and ncrna families to be displayed . by clicking on any id, the user can access the structural and functional annotation of the molecules . in addition, the web interface provides different forms to query the database . the first mode allows ncrna molecules or families to be retrieved that match a given accession, keyword or are from a selected species. the second form runs the rfam_scan.pl search engine on a given sequence using the learn database as the target.

interactive annotation
in order to correct the unavoidable discrepancies and errors generated by an automatic process, the learn package provides the expert user with an annotation interface for editing both structural and functional annotations as well as merging and splitting families. this requires user authentication. after the first login, the user must create his/her own workspace, initially defined by a copy of the public database. at any time, the 'status' page allows the user to select the database he/she wants to use: it can be either the browsable public database or its own editable private one. editing rights are made visible by a change in the background colour. the system allows for the parallel annotation by several experts, but prevents the concurrent annotation of the same family by different experts.

ncrna annotation
in learn, the annotation of a ncrna molecule is a three step process . the first step is the definition of the boundaries of the molecule and its description. then, the annotator must provide the secondary structure of the ncrna which can either be computed by on-line programs  or pasted in a dedicated form when the results of on-line programs do not provide a satisfactory output. optionally, the latest stage of the annotation is the annotation of the molecule itself .

ncrna family annotation
the annotation process for families is similar to the previous one . the first step of the family annotation is the selection of the members belonging to the family. this can be done either by merging rna families or by removing false positive members of an existing family . the second step corresponds to the edition and validation of the boundaries of individual ncrnas. then, the multiple alignment of the family can be computed by on-line software  or pasted in the appropriate form . once the alignment has been validated, the annotator must validate the corresponding secondary structure which is automatically computed  and editable.

case studies
we illustrate learn usage with two case studies on thermoccocales genomes pyrococcus abyssi , pyrococcus furiosus , pyrococcus horikoshii  and thermococcus kodakarensis . for these genomes, the rfam genome browser gives  <dig> srna families in pa,  <dig> srna families in pf,  <dig> srna in families in ph and  <dig> srna families in tk for a total of  <dig> different families. with learn, iteratively built with rfam covariance models, a classification in  <dig> families was obtained. from the original rfam families, only the snor <dig> family disappeared in this classification.

c/d box srna family annotation
we chose the c/d box srna family as the first case study. this family is mainly characterized by the presence of four motifs: c , d' , c'  and d boxes . the region of  <dig> nucleotides downstream of d and/or d' boxes generally interacts with the target of the c/d srna mostly forming watson-crick interactions. for a more accurate annotation, it is usual to further classify these ncrna genes into subfamilies with a common target. in learn, four families were built automatically from the rfam covariance model associated to the c/d box srna family . the largest snopyro_cd family contained  <dig> candidates while the other ones contained only  <dig> candidate. from the family browser, it was possible to select and merge all the four families  into only one  making it possible to analyze all candidates together and to classify them according to the conserved boxes and the sequence similarity at the target interaction site. this was done on the merged family using the edit family function. using the incrementally updated alignments provided by learn, the clustering of sequences into subfamilies based on their targets was straightforward. at the end of the process,  <dig> novel families were proposed. we renamed them according to the archaea srna database  <cit> . three candidates remained in rfl <dig>  remarkably, these three candidates correspond to the three families that contained only one candidate at the beginning of the annotation process. they were classified by the annotator as false positive candidates. another interesting result of this annotation was the classification of sr <dig> in rfl <dig>  indeed in rfam, sr <dig>  which contains both a c/d box and an h/aca srna constitutes the snor <dig> family and contains a candidate for each of the four organisms. the c/d box region of snor <dig>  corresponding to the sr <dig> c/d box srna, is also contained in the snopyro_cd family of rfam. this snor <dig> family was lacking in learn at the beginning of the annotation process. it was manually created by the annotator and named sr <dig>  in learn, all the organisms had a sr <dig> candidate, but only two of them contained both the c/d box and the h/aca srna regions. the remaining ones lacked the h/aca region. thanks to the rna edit function, it was possible to extend the 5' region of srna for which the h/aca region was missing. thus it was possible to verify and validate the presence of the h/aca missing region before the c/d box srna region. once the region had been inserted and validated, each new srna was updated in the family yielding a new alignment and structure for this family. the resulting structure contained the consensus hairpin structure of the h/aca region for the four srna candidates. overall, one should note that  <dig> families were found. among these  <dig> families, one family  is not represented in the full alignment of rfam. but these  <dig> families should be compared to the  <dig> families defined in the archaea snorna database. the missing  <dig> families of c/d box srna, representing probably more than  <dig> srna, are not detected by the rfam tools and therefore do not appear in learn. from this we conclude that more sensitive tools are needed to find members of this family.

h/aca srna family annotation
the second case study concerns h/aca srna. in rfam, hgce, hgcf and hgcg have unknown function but were found to be h/aca srna genes named respectively pf <dig>  pf <dig> and pf <dig>  <cit> . thanks to the graphical representation of the secondary structure associated to the consensus of each family, it was immediately visible that the secondary structure of most of these srna was inaccurate. with learn, we could easily correct the alignment and structure. the structures of pf <dig>  and pf <dig>  were edited to contain three hairpins each, as described in  <cit> . the known structure of pf <dig>  includes two hairpins, as described in  <cit> . in rfam and therefore also in learn, the sequence of members of the hgce family contain only half of the first hairpin and the second hairpin. with the rna edit function, it was simple to extend each srna to include the missing region. it was also necessary to edit the family in order to improve the automatically provided alignment. the result is now a more accurate annotation of sequences, structures and functions of hgce, hgcf and hgcg srna.

to summarize, learn provides a way to complete the gap between existing databases and gene prediction tools. it offers the user a working environment for editing sequence and structure of individual srna, as well as rna families, by using srna dedicated functionalities for automatic and manual annotation operations.

the first case study showed that one of the advantages of learn is to manage redundancy of candidates. the case of srna sr <dig> is a good example. one of the drawbacks of the automatic process of srna identification was the assignment of the sr <dig> c/d box srna to the general snorna family instead of the more accurate snor <dig> family provided by the covariance model of rfam. this is certainly a result of the proposed iterative approach which relies in part on the energy heuristic clustering. despite this wrong assignment and the incomplete sequence for two members of this family, it was possible to group all the sr <dig> candidates and to extend those for which the h/aca region was lacking by using the various functionalities of learn. in both case studies, it was particularly useful to be able to edit a sequence  with regard to the literature and available knowledge of known h/aca srna, candidates of the family, and availability of genomic sequences. the availability of an automatic or manual alignment of srna of the sequence and the structure, and the graphical representation of the consensus secondary structure considerably facilitated the improvement of the structural annotation.

all the annotations were done and saved in the private environment of the annotator which offers a very nice and useful working space for personal annotation. after the annotation, it appears now essential to submit these structural annotations to the administrator to replace less accurate ones. one can also imagine that these annotations could be submitted, in the context of a collaborative annotation process, to any rna database administrator in order to share the annotations with the scientific community. for example, novel sequence and structural annotations of c/d box and h/aca archaea srna could allow new, more accurate rfam covariance models to be generated for future archaea genome annotations.

the demo section of the learn home page provides access both to raw results generated by the automatic process applied on the four thermoccocale genomes , and to the database after the edition of c/d box and h/aca srna families .

CONCLUSIONS
the learn package can be used for ncrna annotation projects for any set of sequences including complete genomes. it integrates tools and web interfaces covering the three layers of the ncrna annotation process: a flexible detection and clustering pipeline, a rnaml database and a web interface to manage the expert annotation. the software has been designed to manage the complete ncrna annotation process in the frame of whole genome annotation projects and to fill the gap between existing detection software and public ncrna repositories. moreover, learn is also an extendible and light-weight package, which can be used as an annotation interface either by life scientists wanting to annotate a single ncrna family or by bioinformaticists who need a simple interface to visually evaluate their results. it can also be used to build training datasets or for any other activity involving ncrna annotation.

availability and requirements
project name: learn

project home page: 

operating system: unix

programming language: perl-oo, xslt

other requirements: infernal  <cit> , vienna package  <cit> , mfold  <cit> , rfam  <cit> , trnascan-se  <cit> , clustalw  <cit> , ncbi-blast  <cit> . the adminguide reports the full list of dependencies.

license: free software license cecill <dig> 

any restrictions to use by non-academics: none

list of abbreviations
xml: extensible markup language

xslt: extensible stylesheet language transformations

authors' contributions
cn designed, implemented and tested the software; jg led the design. jg, cg and ts tested the programs and contributed to the preparation of the manuscript. all authors have read and approved the final manuscript.

supplementary material
additional file 1
learn  <dig> . <dig> tarball. tarball with learn source code. for installation instructions, see .

click here for file

 acknowledgements
this work was supported by the eu/fp <dig> grain legumes integrated project. we thank sébastien carrere for his advice on biomoby. we also thank clare gough for helpful comments on the manuscript and the bioinformatics platform of the genopole toulouse midi-pyrénées for technical support.
