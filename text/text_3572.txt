BACKGROUND
whenever experimental data is gathered to examine a process, researchers will try – implicitly or explicitly – to define a model describing the process. the purpose of building a model is to generalize the experimental data, allowing the prediction of new experimental outcomes, or to gain insights into the experimental process. in the biological sciences, models are often implicitly built and verbally formulated, such as "the proteasome preferably cleaves after hydrophobic amino acids". such a model is easy to understand and often reflects all the knowledge that can be gathered from a few, difficult experiments. however, with the advent of high-throughput experiments to the biosciences, it has become feasible to generate more quantitative, mathematical models, based on large volumes of data. for the purpose of building a model, conducting experiments can be formally described as collecting pairs of experimental parameters x and experimental outcomes . building a model is then equivalent to finding a function f = ypred ≈ ymeas. herein, we call the model function f a prediction tool, and the experimental observations used to generate it its training set t = .

developing a prediction tool is a two step process. first, a general prediction method capable of generating specific tools has to be chosen, such as a certain type of neural network, classification tree, hidden markov model or regression function. this choice is to some degree determined by the experimental data available. however, only a few prediction methods are clearly unsuited for a certain type or amount of data, leaving several potentially appropriate methods to choose from. in practice, the personal experience of a scientist often determines which prediction method he applies, as learning to apply a new method is often more costly than the benefits of a slightly better model.

after a method is chosen, it is applied to the experimental data to generate a specific prediction tool. several different terms are commonly used for this second step, such as 'supervised learning', 'fitting the model' or 'regression'. each method has its own formalism describing how this is done, but essentially a method is capable of generating a certain class of functions, of which one is chosen, that minimizes the difference between measured and predicted experimental outcomes for the training set t.

here we describe a computer program implementing the smm prediction method, which can be applied to model the sequence specificity of quantifiable biological processes. in such experiments, the input parameter × corresponds to a sequences of amino-or nucleic acids, and the experimental outcome ymeas is a real numbers measuring the process efficiency. the method utilizes training sets in which the examined sequences all have the same length.

the smm method was previously applied successfully to predictions of mhc binding  <cit> , tap transport  <cit>  and proteasomal cleavage  <cit> . however, its software implementation was not made publicly available, because it relied on a commercial library with restrictive licensing terms. also, applying the method to a new problem required manual changes in the source code, which is impracticable for an external user. both of these issues are addressed in the software implementation made available here. in addition, this manuscript describes two specific features that we have found to be effective in generating high quality models and which can easily be utilized in other prediction methods, namely handling of bounded data and combinatorial peptide libraries.

the smm software is not meant for 'classical' sequence analysis, which can be roughly defined as aligning related sequences in order to identify conserved residues or in order to generate classifiers which can identify additional related sequences. rather, the typical application is the characterization of a sequence recognition event, such as the sequence specific cleavage efficiency of a protease. this characterization does not assume any evolutionary relationship between different recognized sequences. in terms of scientific fields, that makes the smm software aimed at applications in biochemistry or molecular biology.

implementation
code
the smm algorithm is implemented in c++ code. only standard libraries or freely available external libraries were used. the two external libraries are tinyxml  <cit>  to handle the xml input and output and the gnu scientific library  <cit>  for efficient vector and matrix operations. the source code has been compiled and tested using visual c++ on a windows system and using g++  on a debian and suse linux system. a windows executable is also available. the source code, documentation and examples are available as additional files  <dig> and  <dig> of this manuscript, and on the project homepage at .

on a standard  <dig>  ghz pentium  <dig> pc running windows xp, the creation of a prediction tool from a typical set of training data containing  <dig> 8-mer peptides takes about  <dig> minutes.

input and output
the program expects an xml document as its standard input. a more sophisticated  user interface is not likely to be of great interest for the projected user community, most of which will probably call the executable file from a script or integrate the code into an existing program. the xml input document contains either training data to generate a new tool  or sequences for which a prediction should be made with a previously generated tool. the output of the program is again in xml format. for all types of input and output, xml schemas defining their exact structure are supplied. the schemas contain annotation for each input element, documenting their intended use. a simplified alternative input format exists for the most common application, namely the generation of a scoring matrix from a set of standard amino acid sequences. several example input files are supplied with the program, which should make it easy for users to create similar input files with their own data.

core algorithm
an amino acid can be encoded as a binary vector of length  <dig>  with zeros at all positions except the one coding for the specific amino acid. extending this notation, a peptide of length n can be encoded as an n* <dig> binary vector. the same conversion can be made for nucleic residues, resulting in n* <dig> length vectors. any fixed length sequence can be converted into a fixed length binary vector following similar rules. the smm algorithm expects such a vector as the experimental input parameter 'x'.

for a set of experiments, the vectors tx  can be stacked up resulting in a matrix h. an example for a set of nucleic sequences is shown in figure  <dig>  the matrix h is multiplied by a vector w which assigns a weight to each possible residue at each position in the sequence. this generates a vector of predictions ypred

h w = ypred     

from a given training set of sequences encoded in h with measured values ymeas, the 'correct' values for w can be found by minimizing the difference between the predicted values ypred and the measured values ymeas according to a norm || ||. to suppress the effect of noise in the experimental data, a second term is added to the minimization:

||h w - ymeas|| + tw Λ w → minimum,    

in which Λ is a positive scalar or a diagonal matrix with positive entries. to better understand the effect of the Λ term, consider first minimizing  with Λ set to zero. in this case, the optimal entries for the weight vector w minimize the difference between predicted  and measured  values. minimizing  with a non-zero value for Λ results in a shift of the optimal entries in w towards values closer to zero, especially for entries in w that do not significantly decrease the distance between predicted and measured values. this technique, generally called regularization, suppresses the effect of noise in the measured data ymeas on the entries in the weight vector w. refer to  <cit>  or  <cit>  for a general introduction to regularization. if the || || norm is simply the sum squared error , equation  can be solved analytically for any given value of Λ to:

w = - <dig> th ymeas   

the optimal value for Λ can then be determined by cross validation: the experimental data points corresponding to rows of  are randomly separated into training sets ti = train i and blind sets blind i. for a given Λ, equation  is used to calculate wi for each training set ti. these wi can then be used to make predictions for their corresponding blind sets. summing the distances for all blind predictions gives the cross validated distance Φ:

Φ = Σi || hblind i wi -yblind i ||    

minimizing Φ as a function of Λ therefore corresponds to minimizing the cross validated distance by 'damping' the influence of coefficients in w which are susceptible to noise.

as the resulting optimal value for Λ and the corresponding wi are somewhat influenced by the split into training and blind sets, the same procedure is repeated several times with different splits, which is called bagging  <cit> . the final w is generated by averaging over all optimal wi generated in the cross validation and bagging repeats.

RESULTS
the following sections describe specific properties of the smm method, and are meant to serve as a guideline when and how to apply it. additional data validating the smm algorithm and comparing it with other prediction methods can be found in previous publications  <cit> .

linear model
if no pair coefficients are incorporated, the output vector w of the smm method is a standard 'scoring matrix', which quantifies the contribution of each residue at each position in the input sequence to the prediction. such a matrix is easy to interpret and analyze without requiring any additional software or expert knowledge of how the matrix was generated, which is especially important when communicating results to experimentalists. several methods predicting peptide binding to mhc molecules take this approach, e.g.  <cit> , and a comparative study showed that simple statistical methods to generate matrices can perform better than more complex artificial neural networks if the amount of data is limited  <cit> .

using such a linear model implicitly assumes that the influence of residues at each position in the sequence on the measured value can be considered independent and additive. this has to be a reasonable first approximation in order to successfully apply the smm method, even if pair coefficients are incorporated. this is the main difference to general learning algorithms such as neural networks, which can in principle model any functional relationship between sequences and measurements.

quantitative data
the experimental measurements that serve as input to the smm method and the predicted output are quantitative, not binary. for example, in the case of peptide binding to mhc molecules, ic <dig> values quantifying binding affinities are used, and not a classification into binding and non-binding peptides.

if different representations of the quantitative data are possible, such as either ic <dig> or log values, a representation should be chosen in which the ymeas values approximately follow a normal distribution. otherwise the smm predictions, which are sums of independent contributions and therefore roughly normally distributed themselves, will not be able to fit the experimental data well. in the case of binding affinities, this means log values should be used, as ic <dig> values themselves are usually log normal distributed.

noisy data
experimental measurements inevitably contain noise. this will cause problems when building models that take the measured values to be exact. accordingly, the smm method incorporates a regularization parameter Λ , which corresponds to preferring a simpler solution with 'smooth' values for w to one that exactly reproduces observations. in the first smm applications  <cit> , Λ was a scalar, in which case this approach is called ridge regression or zero-order regularization. choosing a scalar value implicitly assumes that the level of signal to noise is roughly the same at each position in the input sequence. in the current version, Λ can also be chosen as sequence position dependent, which is sometimes called local ridge regression. as shown for an example in figure  <dig>  this makes Λ into a diagonal matrix in which all Λi values belonging to residues at the same sequence position are set to the same value. for a sequence of length n, there are n different Λi values. for a number of training sets containing peptide binding data to mhc molecules, we compared the prediction performance achieved using a position specific matrix Λi to a scalar Λ. the position specific regularization nearly always resulted in better predictions. the difference was especially large if the influence of different sequence positions varied greatly .

bounded data
any experimental technique generates measured values contained within a finite range. for example, in many biological experiments a "zero" measurement usually means that the actual value is below the experimental resolution, not that the actual value is  <dig>  similarly, very large values beyond the expected sensitivity limit are no longer quantitatively accurate. these data points at the upper or lower boundaries of the sensitivity range do not convey the same information as quantified values, but they still do contain information. in the case of mhc binding data available to us, approximately 20% of peptides fall in this category.

the smm method is, to the best of our knowledge, the only method designed to extract information from such boundary values. this is done by means of the novel l2<> norm, illustrated in table  <dig>  for example, if an experimental measurement corresponds to an upper boundary ymeas > z, and the predicted value is greater than z, then the distance between ymeas and ypred is zero. this norm has the useful property that any analytical solution according to the l <dig> norm can be converted into a solution according to the l2<> norm through an iterative process: first, all measurements including boundary values are treated as normal values, and the solution using the l <dig> norm is found. in a second step, for each ypred, ymeas value pair for which the l2<> norm would be zero, the ymeas value is set to its corresponding ypred value. for these ymeas* values, the distance l <dig> = l2<> . these ymeas* values are then used to solve again according to the l <dig> norm. this process is repeated until the ymeas* values no longer change, as illustrated in figure  <dig> 

randomized peptide library data
as stated before, the experimental data used as input for the smm method consists of same length amino-or nucleic acid sequences associated with a quantitative measurement. when designing an experiment, the selection of sequences to test can introduce bias into the training data, for example by over-or under-representing residues at specific sequence positions. one way to avoid this is the use of randomized peptide libraries, also known as positional scanning combinatorial peptide libraries, which are mixtures of peptides of the same length. in a given library, all peptides have one residue in common at a fixed position and a random mixture of amino acids at all other positions. for example, the library xaxxxxxx contains 8-mer peptides with a common alanine at position  <dig>  such libraries can be used to directly measure the influence of their common residue, by comparing their measured process efficiency to that of the completely randomized library xxxxxxxx. in the case of 8-mer peptides,  <dig> library experiments are sufficient to characterize the influence of each residue at each position. the results of such a complete scan can be summarized in a scoring matrix. this approach has been used successfully in many different experimental systems  <cit> 

a novel feature of the smm method is that it can combine data from these two sources. when the smm algorithm is given experimental data from individual peptides and from a randomized library summarized in a scoring matrix matlib, it simply subtracts the values predicted by matlib from each individual peptide measurement. these y'meas = ymeas - ypred,lib values are then used to generate a second scoring matrix mat'. the final smm scoring matrix is simply the sum of the two: matcombined = mat' + matlib. figure  <dig> compares the performance of this combined approach to that of a prediction based on peptide or library experiments alone. if enough peptide data is present , the combined prediction is better than that of the library matrix alone. at all data points, the combined prediction is better than that using the peptides alone. importantly, this simple strategy of subtracting library predictions can be used in combination with any prediction method, and is likely to generate similar results, as it effectively increases the training set size. to visualize the prediction quality associated with the distances reported in figure  <dig>  figure  <dig> depicts a scatter plot of the predicted and measured binding affinity for individual peptides corresponding to the data point with the lowest distance in figure  <dig> 

introducing pair coefficients
pair coefficients quantify the contribution of a pair of residues to the measured value that deviates from the sum of their individual contributions. the form of equation  remains unchanged if pair coefficients are introduced in the same binary notations as the individual coefficients. figure  <dig> gives an example how a set of nucleic sequences is transformed into a matrix h, if two such pair coefficients are taken into account. note that the number of possible pair coefficients is very large. for a sequence of three nucleic acids, there are already  *  /  <dig> =  <dig> pair coefficients. for a 9-mer peptide,  *  /  <dig> =  <dig> pair coefficients exist. to the best of our knowledge, only the smm method and the additive method  <cit>  explicitly quantify the influence of pair coefficients.

since most training sets contain only a few hundred measurements, determination of the exact values of all pair coefficients is not feasible. to overcome this difficulty, the smm algorithm limits the number of pair coefficients to be determined. first, only coefficients for which sufficient training data exists are taken into account. as a rule of thumb,  <dig> sequences containing the same pair of residues at the same positions have to be present in the training set for a pair coefficient to be considered. in a second filtering step, only pair coefficients for which the information in the training set is reasonably consistent are retained. in the previous smm version, this used to be determined by multiple fitting of pair coefficients and discarding those for which a sign change was observed. in the current version, a much faster approach is used. first, a scoring matrix is calculated for the training set without any pair coefficients. then, for each pair coefficient the predicted and measured values for the sequences containing it are compared. only if a large enough majority  of measured values are above or below the matrix based predictions is the pair coefficient retained. the remaining pair coefficients are determined in complete analogy to the scoring matrix itself, but with a scalar Λ value.

we tested the effect of incorporating pair coefficients on prediction quality compared to using a scoring matrix alone for a number of training sets containing peptide to mhc binding data. the pair coefficients showed a consistent positive contribution for large training sets, which comprise more measurements than  <dig>  times the number of scoring matrix coefficients. however, the improvement is rather small, as reported before in  <cit> . this makes it reasonable to ignore pair coefficients if the simplicity of a scoring matrix is more valuable than a small improvement in prediction quality.

if higher order sequence interactions such as those described by pair coefficients are expected to be the dominant influence on experimental outcomes, other prediction methods may be better suited than the smm method. for example, by choosing a different sequence representation than the binary vectors, the information in the training set can be generalized, thereby effectively reducing the degrees of freedom in the input parameters  <cit> . this allows applying general higher order learning algorithms such as artificial neural networks even with limited input data.

CONCLUSIONS
the smm method generates quantitative models of the sequence specificity of biological processes, which in turn can be used to understand and predict these processes. it has previously been shown to perform very well compared to other prediction methods and tools for three specific types of experimental data  <cit> . however, it is difficult to generalize a comparison between different methods, due to two main problems. first, the training data sets utilized in different studies are often not available, so that when comparing tools generated by different methods it is often unclear when good performance is due to a superior method or a better  set of training data. second, generating tools from the same training set can be difficult, because publications that make the tools available, often only describe the basic principle of the method used.

to overcome this second obstacle, we herein presented a computer program implementing the smm method. significant effort was devoted to ensuring that the program is robust, documented, cross platform compatible and generates reasonable output without requiring additional parameters. also, any commercial libraries previously utilized were removed to allow free distribution of the code. this will permit any interested user to apply the smm method with reasonable effort, allowing for the most important validation: application to scientific practice.

finally, we believe that two strategies demonstrated in this manuscript will be valuable in combination with other prediction methods as well. first, our strategy for the inclusion of experimental data gathered with randomized peptide libraries can be directly transferred to any prediction method. when other experimental data is limited and data from a combinatorial library is available, this should always have a positive effect on prediction quality. secondly, the l2<> norm can be applied as an error function for other prediction methods. this will increase the amount of training data effectively available to prediction methods requiring quantitative input, by enabling them to handle experimental boundary values.

availability and requirements
project name: smm

project home page: 

operating system: platform independent

programming language: c++

other requirements: the gnu scientific library  has to be installed

license: none for the smm code, but gsl requires the gnu gpl license

any restrictions to use by non-academics: none

authors' contributions
bp conceived of this study and implemented the software, as participated in the design of the software and helped to draft the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
a .zip file containing the smm source code, documentation and examples for windows systems.

click here for file

 additional file 2
a .tar.gz file containing the smm source code, documentation and examples for linux systems.

click here for file

 acknowledgements
the authors want to acknowledge the help of emrah kostem in adopting the source code to g++ and john sidney for critically reading the manuscript. this work was supported by the national institutes of health contract hhsn26620040006c

figures and tables
