BACKGROUND
when studying medium-sized to large metabolic networks, topological and structural analyses are often the only feasible approach to analyze them, as the required kinetic parameters of enzymes and needed mechanistic details of the underlying reactions are rarely available. steady-state analyses  <cit>  such as elementary mode analysis   <cit> , the associated theory of extreme pathways  <cit>  and flux balance analysis   <cit> , have proven especially useful to study such networks with respect to e.g. minimal cutsets  <cit>  for drug target identification  <cit>  and robustness analysis  <cit>  or estimation of maximal metabolite yield  <cit> .

the algorithm for elementary mode analysis has been implemented  and integrated into a number of tools for pathway analysis such as gepasi  <cit>  or sna  <cit> .

we introduced yana  <cit>  which integrates the field-tested metatool program into a coherent user-friendly interface with several additional useful algorithms for the steady-state analysis of metabolic networks. applying a genetic algorithm, it links gene expression data to estimated flux distributions and vice versa. different approaches for such a calculation and fit have been proposed  <cit> , yana includes a particular robust minimization strategy which minimizes the error for both fits even if noisy data or very few measurements are given  <cit> .

in several interdisciplinary projects we recently combined in-silico pathway analysis and prediction of flux distributions with experimental measurements, such as 13c isotopologue measurements on listeria monocytogenes  <cit> . with our modeling platform we achieve in the present study the rapid setup and analysis of large metabolic networks by combining  a direct java implementation of the elementary mode algorithm for increased platform independence and performance;  a module for the rapid automatic set-up of genome-wide metabolic networks by direct access to the kyoto encyclopedia of genes and genomes   <cit>  including a smart editor for reworking of the results;  algorithms for the visualization and graphical analysis of metabolic networks, including automatic layout routines and  systematic robustness analysis for testing the network's stability towards enzyme deletions.

here a discussion on the limitations of ema is appropriate. our software allows rapid set-up of the network of interest. however, the choice of external and internal metabolites by the user has a strong impact on the results of ema. in general, for large networks also a strong pre-knowledge on how to decompose very large networks based on biochemical constraints is needed, otherwise the results are misleading. similarly, a combinatorial explosion of modes can often be reduced or even avoided by a careful choice of the form of networks and sub-networks. the tutorial in the supplementary material gives for this a number of hints and rules but is of course no substitute for an expert.

as application examples we rapidly set-up and compare genome-scale metabolic networks of different staphylococci, test systematically the systems' robustness against gene deletions as well as analyze and extend complex phospholipid networks in the murine phagosome.

implementation
steady state analysis
to increase platform independence and avoid loss of computation time  we included a java implementation of the well known schuster algorithm  <cit>  which computes the ems through a step-wise satisfaction of the steady state condition for each metabolite. the original version of the algorithm has been improved according to klamt and gagneur  <dig>  <cit>  by representing ems during calculation by bit patterns rather than by their fluxes. this is possible due to the existence of a direct mapping of the set of reactions of an em to the fluxes of these reactions  <cit> . the most frequently called function during the computation, the test for elementarity of an intermediate em, is then reduced to a mere bit operation which drastically improves the algorithm's runtime behavior. this implementation is also used by a software package destinated at the computation of chemical organizations in chemical reaction networks  <cit> .

the current version allows computation of the complete set of ems or only the convex basis, both using either the external metatool or the newly implemented internal ema routine. we tested the algorithm thoroughly for consistency with the metatool results.

kegg browser 
successful analysis of a metabolic network which is expected to give biologically meaningful results heavily depends upon its accurate reconstruction. complete sets of all modeled metabolites and enzymes have to be set up, and system boundaries have to be defined carefully. every enzyme has to be checked for its absence or presence in the actual organism by investigation of genome annotations, homology searches or literature data mining. this task is hindered additionally by the missing or only partially established standardization of compound and enzyme names. public databases such as brenda  <cit> , enzyme  <cit>  or the kegg encyclopedia  <cit>  have eased this process considerably by providing algorithms and interfaces to find the correct subset of enzymes to work on, their associated pathway structures and check for their occurrences in the organism under study. they further aim to unify the different available naming conventions, but so far the actual network setup in the modeling software had to be done manually. to further accelerate and automate the initial setup of a metabolic network we implemented the kegg browser  module in yanasquare. it is capable of connecting directly to the kegg database to browse pathways, reaction lists, metabolites and pathway maps online. organisms or reference pathways can be selected to only retrieve enzymes which have been annotated as present in the selected organism or to obtain the complete set of available reactions respectively. all associated metabolites are collected automatically, highly abundant metabolites such as h+, co <dig>  h2o, adp or atp considered to be well buffered can be filtered out to lower the network complexity in the ema analysis.

one problem when dealing directly with the kegg database entries is that metabolites and reaction names are often long and may contain special characters. for a later visualization of the network, for backwards-compatibility to the metatool input files and most importantly to satisfy the regular expression facets of the sbml <dig> standard which serves as our main file format, identifiers for enzymes and metabolites have to be standardized. we implemented an automatic abbreviation routine capable of shortening chemical names in a standardized way using a dictionary of keyword abbreviations. generated abbreviations are validated so that characters illegal in the context of the sbml <dig> or metatool format definitions will be eliminated. as enzyme names from expasy are generally even shorter, an additional step for the routine is to adapt shorter alternative names from expasy, which can again be further shortened by the abbreviation approach if necessary.

when accessing kegg through a low-bandwidth internet connection the retrieval of large chunks of reactions can be time consuming. we therefore additionally provide an accelerated query method using a local reaction cache . this semi-online mode works significantly faster but the reaction cache has to be updated on a regular basis to assure that the kgb makes use of the latest kegg definitions and annotations, an operation which can easily be performed through the kegg browser's update manager.

once the desired topology has been assembled, the chosen reactions and metabolites can be imported directly into yanasquare for further network analysis.

we used version  <dig>  of the apache axis library, a java implementation of the simple object access protocol  and web services description language  on top of the http protocol to connect to the database server. we developed a user-friendly graphical interface using the swing framework to retrieve the information from kegg . pathways and reactions of interests are specified by the user, all reaction equations are retrieved and listed in a table. a smart editor allows users to edit the results, change metabolite and enzyme names and abbreviations and/or append novel reactions if these are known to the user but not yet reported in kegg. the whole software can also be easily adopted to extract data from another database, if format requirements are adapted or met, e.g. a private in-house metabolite and enzyme database in the kegg format.

visualization
with increasing network complexity the results from a steady-state analysis suffer from the combinatorial explosion of elementary modes. a realistic system comprising of about  <dig> metabolites and enzymes can easily result in over  <dig>   <dig> elementary modes. interpretation of these data is close to infeasible when the results from the analysis are retrieved in form of a tabular listing of all elementary modes. typical questions asked here are how the flux distribution for a specific set of active pathways is distributed across the network, which parts of the network are affected by certain sets of elementary modes or how deactivation of a set of pathways changes the overall network flux.

to circumvent these difficulties we implemented a visualization routine in yanasquare capable of displaying the metabolic network as a bipartite graph, where the two vertex classes correspond to reactions and metabolites, respectively. we added several field-tested layout algorithms  to automatically arrange the nodes and edges of the network in a user-friendly way. while this visualization greatly facilitates the setup of metabolic networks, it is especially useful after performing a steady-state analysis of the network: yanasquare is capable of projecting the flux distribution resulting from the set of em activities onto the network graph, displaying the net flux through a given enzyme next to its vertex and scaling the width of the graph edges accordingly . this gives the user the possibility to directly inspect the network graphically for flux bottlenecks, hub or choke points and to see the overall flux distribution across the network at a glance. individual fluxes through one enzyme for specific modes can also be analyzed and visualized.

robustness analysis
experiments in pharmacology, infection biology or genetics aim to modify or eliminate enzymes to study network stability. to further add to yana's network analysis capabilities for such questions, a robustness test algorithm was implemented, elaborating on earlier ideas  <cit> . for a stoichiometric m × n matrix s with m metabolites and n enzymes, a matrix of elementary modes e  of e elementary flux modes and a vector of flux mode activities v the vector of metabolite productions

 p = sev 

is computed. the algorithm iterates over the enzymes and deactivates all pathways which use the enzyme under question , leading to n vectors of elementary flux mode activities vi, i ∈  <dig> .n. after each step the number of external metabolites which can still be produced by the system is computed into an overall vector of average production

 p=1n∑i=1nℋ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaahaawcbeqaaiabcicaoiabdggahjabdaha2jabdeganjabcmcapaaakiabg2da9maalaaabagaegymaedabagaemoba4gaamaaqahabawenfgdovwbhrxajfwnhbqeg0uy0hwztfgdpnwy1aaceagae83chgkaeiikagiaem4uamlaemyraukaemoday3aasbaasqaaiabdmgapbqabagccqggpaqkasqaaiabdmgapjabg2da9iabigdaxaqaaiabd6gaubqdcqghris5aaaa@5028@ 

of metabolites, where ℋ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaat0uy0hwztfgdpnwy1egaryqthrhal1wy0l2yhvdaiqaacqwflecsaaa@3762@ denotes the heaviside function

 ℋ={1if x>00otherwise
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaat0uy0hwztfgdpnwy1egaryqthrhal1wy0l2yhvdaiqaacqwflecscqggoaakcqwg4baecqggpaqkcqgh9aqpdagabeqaauaabaqaciaaaeaacqaixaqmaeaacqqgpbqacqqgmbgzcqqggaaicqwg4baecqgh+agpcqaiwaamaeaacqaiwaamaeaacqqgvbwbcqqg0badcqqgobaacqqglbqzcqqgybgccqqg3bwdcqqgpbqacqqgzbwccqqglbqzaaaacagl7baaaaa@51f0@ 

and is here defined component-wise.

in the same way we define the total metabolite production vector

 p=ℋ
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbacdaahaawcbeqaaiabcicaoiabdsha0jabd+gavjabdsha0jabcmcapaaakiabg2da9mrthrhal1wy0l2yhvtyaehbnfgdovwbhrxajfwnagabaiab=tqiijabcicaoiabdofatjabdweafhqabiab+fdaxiabcmcapaaa@44e7@ 

of the unrestricted network . the total production indicates what the system produces if no enzyme is impaired. the average production indicates the average system production after knock-out of one enzyme. by summing up over the components of the vectors we get the  total and average production sums s and s as well as the loss l

 s=∑j=1mpjs=∑j=1mpjl=s−s.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqadewabaaabagaem4cam3aawbaasqabeaacqggoaakcqwghbqycqwg2bgdcqwgnbwzcqggpaqkaagccqgh9aqpdaaewbqaaiabdchawnaadaaaleaacqwgqbgaaeaacqggoaakcqwghbqycqwg2bgdcqwgnbwzcqggpaqkaaaabagaemoaaomaeyypa0jaegymaedabagaemyba0ganiabgghildaakeaacqwgzbwcdaahaawcbeqaaiabcicaoiabdsha0jabd+gavjabdsha0jabcmcapaaakiabg2da9maaqahabagaemicaa3aa0baasqaaiabdqgaqbqaaiabcicaoiabdsha0jabd+gavjabdsha0jabcmcapaaaaeaacqwgqbgacqgh9aqpcqaixaqmaeaacqwgtbqba0gaeyyeiuoaaoqaaiabdygasjabg2da9iabdohaznaacaaaleqabagaeiikagiaemidaqnaem4ba8maemidaqnaeiykakcaaogaeyoei0iaem4cam3aawbaasqabeaacqggoaakcqwghbqycqwg2bgdcqwgnbwzcqggpaqkaagccqgguaglaaaaaa@70b9@ 

the odds ratio

 r=ss
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgybgccqgh9aqpdawcaaqaaiabdohaznaacaaaleqabagaeiikagiaemyyaemaemodaynaem4zacmaeiykakcaaagcbagaem4cam3aawbaasqabeaacqggoaakcqwg0badcqwgvbwbcqwg0badcqggpaqkaaaaaaaa@3e35@ 

expressed in percent is finally referred to as the overall robustness score of the network against single enzyme deletions.

additionally, from the average activity of elementary modes

 v=1n∑i=1nvi
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg2bgddaahaawcbeqaaiabcicaoiabdggahjabdaha2jabdeganjabcmcapaaakiabg2da9maalaaabagaegymaedabagaemoba4gaamaaqahabagaemoday3aasbaasqaaiabdmgapbqabaaabagaemyaakmaeyypa0jaegymaedabagaemoba4ganiabgghildaaaa@4175@ 

we compute the average number of active modes after a single gene knock-out

 t=∑i=1evi.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg0badcqgh9aqpdaaewbqaaiabdaha2naadaaaleaacqwgpbqaaeaacqggoaakcqwghbqycqwg2bgdcqwgnbwzcqggpaqkaaaabagaemyaakmaeyypa0jaegymaedabagaemyzauganiabgghildgccqgguaglaaa@3fb2@ 

the average mode loss m is then given via

 m = e - t 

and returned as a result of the robustness analysis .

the values show robustness differences among three staphylococci species when glucose is supplied as the carbon source. the first row shows the average number  of metabolites produced, the second row is the robustness score r.

RESULTS
rapid network setup
a first example of the murine phospholipid network involved in phagosomal signaling illustrates the setup of a complex metabolic network of interest using yanasquare. by querying the kegg pathways "glycerolipid metabolism ", "glycerophospholipid metabolism " and "inositol phosphate metabolism " the complete set of  <dig> reactions and  <dig> metabolites available in the mouse metabolism is set up. after sensible setting of the system boundaries this leads directly to  <dig> elementary modes . next, typical network extensions and modifications can be analyzed and illustrated. for instance, a reduced network with just  <dig> metabolites and  <dig> reactions is more accurate to identify key phospholipid conversions in the phagosome . in particular this reduced network includes as external components a number of phospholipid components which in the meantime have been shown to stimulate or inhibit the phagosome  <cit> .

in this well connected network different conditions can be tested and interesting modes be rapidly visualized applying yanasquare , e.g. those modes yielding a specific phospholipid or those yielding atp. thus, setting atp as an internal metabolite results in  <dig> atp producing actin nucleation modes  involving different phospholipids . certainly this is a simplistic picture of the much more complex processes in phagosomal signaling. however the prediction of atp generating actin nucleating modes identified and motivated experiments for different phospholipids, which are in fact in line with the model predictions. in particular, the modes suggest that the phospholipids phosphatidyl-inositol-phosphate and -bisphosphate  as well as sphingosine-1-phosphate  stimulate the network whereas diacylglycerol  and phosphatidyl-choline  are not in any of the modes and predicted to be inhibitory. this is in line with experimental data  regarding exactly these phospholipids which have been obtained from phagosome actin nucleation assays. in these assays  <cit> , murine phagosomes nucleate gfp labeled actin after phospholipid stimulation and the polymerization is monitored by confocal light microscopy.

applying the kegg browser additional phospholipid conversions involving e.g. phosphatidylethanolamine and phosphatidylsphingosine can easily be added. furthermore, the network can be easily extended to prostaglandines and their conversions .

genome-scale pathway analysis in staphylococci
the capabilities of yanasquare further allow rapid and comparative genome-scale metabolic analyses. the tutorial and examples included in the supplementary material contain helpful hints for the user to achieve this, including network simplification rules to avoid combinatorial explosion of elementary modes. in our illustration example, different staphylococci strains are compared for their main metabolic capabilities: s. aureus col, s. aureus n <dig>  s. saprophyticus and s. epidermidis. note that the comparisons serve illustration purposes and more detailed studies are required for an accurate modeling of these strains. however the examples show how the tool yanasquare allows a rapid first overview and points out metabolic differences.

the kegg browser allows easy establishment of the complete network of interest. regarding the growth equation of s. aureus  <cit> , it is evident that we require the metabolism of central sugars, amino acids, and fatty acids as well as the nucleotide metabolism. this is easily compiled using the kegg browser. two different strains are readily accessed using kegg: s. aureus col and s. aureus n <dig>  the central metabolism of s. aureus col including carbohydrates, nucleotides, amino acids and lipid metabolism is rapidly established applying yanasquare. using the kegg maps  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  a system with  <dig> metabolites and  <dig> modes is obtained . yanasquare shows also quickly that regarding central metabolism, strain n <dig> is rather similar to s. aureus col . clear differences in central metabolism become readily apparent changing to s. epidermidis and s. saprophyticus instead. reading in the kegg maps  we now obtain a system with  <dig> metabolites and  <dig> modes  as well as  <dig> metabolites and  <dig> modes , respectively .

a first comparison of the network models obtained predicts that s. aureus has lower atp production than s. epidermidis, since its tricarboxylic acid cycle  is not complete: one involved enzyme – malate dehydrogenase  – is absent in s. aureus strains. it is a well-known nad-dependent enzyme, which synthesizes oxaloacetate and nadh, the latter metabolite will contribute  <dig> moles of atp through oxidative phosphorylation. a second enzyme, membrane-associated malate: quinone-oxidoreductase  can be expressed at certain stages. as this is then highly expressed in s. aureus, this partially compensates for the lack of mdh. however, the corresponding reaction requires external supply of vitamin k . the model for this can be readily established, e.g. by switching the menaquinol and menaquinone metabolites from internal to external in the software to simulate the synthesis of metabolites if vitamin k is present in the medium. comparing the resulting pathways between the different strains further, we find that the s. aureus strain can bypass the above tca gap via malic enzyme , phosphoenolpyruvate-protein phosphotransferase  and phosphoenolpyruvate carboxylase  to produce oxaloacetate which can take part in the next round of the tca cycle or be used to synthesize amino acids. however, this alternative way consumes atp and requires the energy-consuming pts system .

s. aureus has more functional enzymes and modes regarding amino acid production, whereas s. saprophyticus has fewer modes for certain amino acids. for instance, the absence of threonine aldolase  disrupts the connection between threonine and glycine pathways. even its urea cycle is not complete , as for instance carbamoyl phosphokinase  is not present. s. saprophyticus lacks the capability of producing carbamoyl phosphate directly. instead, this is supplied from amino acids . all missing metabolic capabilities  should potentially reduce the robustness, even though the system can still synthesize all the essential amino acids with an appropriate medium. s. epidermidis lacks arginase  and its urea cycle is incomplete. arginine has to be converted into citrulline by arginine deiminase , forming a shunt . an advantage shared by s. saprophyticus and s. epidermidis is that their native malate dehydrogenase  is present , so that their citric acid cycle is more efficient and produces more atp. these are only some strain-specific differences for illustration and exploiting the new software to show how the full scale metabolic models may be easily and quickly compared. in practice, after this initial analysis in most cases a more detailed study of individual sub-networks has to follow, often in combination with further genome re-annotation as well as experimental tests .

robustness analysis
furthermore, our software provides a systematic test routine to get an estimate of the robustness of a metabolic network. the principle is to validate the flux preservation when a certain involved enzyme is knocked out from the system. our program simulates this evolutionary or genetic event by removing enzymes one at a time and re-inspecting all generated flux modes. these survival modes after a single enzyme gene knock-out are used to predict the number of metabolites which can be still produced in the restricted system. consequently all the enzymes are examined and an average metabolite production is calculated. by dividing the number through the maximum number of external metabolites which can be produced by the complete system, we achieve a percentage, referred to as the robustness score, which is an important feature of the system . table  <dig> illustrates robustness differences among these three systems. from the results , s. saprophyticus achieves the highest score , it is definitely the most robust organism among the three staphylococci compared. this is potentially caused by its flexible living environments, not only in vivo as a pathogen but also outside any host. in contrast, s. aureus has strictly adapted to the host environment so that it requires more complex medium in order to acquire a recognizable growth rate.

discussion
in recent years, a number of stoichiometric network analyzers have been presented. the most prominent include "metatool"  <cit> , "fluxanalyzer"  <cit> , "jarnac", a module for the systems biology workbench  <cit> , "gepasi"  <cit> , "scrumpy"  <cit>  and "copasi"  <cit> . additionally the recent work by urbanczik et al. introduces sna, a stoichiometric analysis package using mathematica  <cit> . these programs include sophisticated implementations of the algorithm for computation of the steady-state flux modes, or link to the efficient metatool implementation. some, for example "fluxanalyzer", even provide a basic graphical view of the network but may require, like the sna, a valid matlab license to run.

with yanasquare we introduce four new components to the previously published software, namely  an integrated ema algorithm implemented in java,  a browser module for direct access to and download of pathways from kegg,  visualization and layout algorithms for metabolic networks and  a robustness analysis algorithm and apply them all here to different example networks.

yanasquare is a standalone open-source software and a 100% platform-independent modeling suite for steady-state analyses of metabolic networks. besides the obligatory computation of the convex flux cone a variety of additional modules and algorithms are included. they tackle some of the most prominent challenges and questions in the analysis of large metabolic networks, such as dealing with the combinatorial explosion of elementary flux modes by application of different dissection strategies  <cit>  or the newly implemented method to analyze network robustness. it directly integrates a graphical visualization of the network using field-tested layout algorithms and powerfully combines this approach with the possibility to query the kegg database directly from the application.

the querying of pathway data is offered in two options, screening a local database or by performing remote calls to the kegg server via the internet. it includes a smart editor for reworking of the results as well as a database driven approach to abbreviate the often complicated and non-standardized compound names found in kegg.

despite its straightforwardness it has to be stressed that importing pathways from kegg has to be done with some caution. even though the ressource is a valuable tool and certainly eases the construction of metabolic networks as shown in our examples, networks should always be double-checked manually. the data offered in kegg is not always reliable and may contain pathway or stoichiometric inconsistencies on which yana performs only some basic checks. additionally thorough literature research is mandatory to find out about variant pathways in the organism under study as the kegg pathways are quite generic. nevertheless it should be noted that the kgb module was never intended to be a replacement for a well-crafted manually set up metabolic network but to ease and guide the process of network reconstruction by quickly providing the user a sound data basis to work on. besides the points mentioned the necessary manual reworking also includes the careful setting of the internal/external status of metabolites and the addition of any needed transport processes  which are not part of kegg at the time. transport processes are easily incorporated into yanasquare using reactions such as "transporter <dig> : substrateext → substrateint" to indicate that transporter <dig> transports the substrate from outside to inside. compartimentalization can also be studied by yanasquare. different compartments are easily incorporated and defined as different subnetworks in the software. each subnetwork contains only those enzymatic reactions actually taking place in this compartment. transport reactions between compartments  are defined analogous to above.

the visualization routine allows easy rendering and drawing even of genome-scale networks, including standard editing possibilities like grid-alignment and zooming into interesting parts of the map. the force-directed lay-out was further improved to avoid overlaps in drawings and sketches.

the implemented robustness routine allows to rapidly investigate the effect of enzyme disruptions in terms of network stability . the question arises how significant the found differences are in robustness for the compared three genome-scale networks. a statistical test is difficult: the resulting elementary mode matrix and the resulting found differences are strictly deterministic. instead one would like to investigate stochastic variation of the input stochiometric matrix. as the landscape for the obtained number of modes is very rugged, aleatoric changes in the matrix require an extreme high number of trials to get sufficient observations for statistical significance. instead we compare here biological meaningful optimized stochiometric input matrices . this does not leave much space for variation here . thus we believe that the found differences correspond to realistic differences in robustness. however, in an applied experimental study we would in any case recommend to complement the prediction data from the routine with some genetic data .

CONCLUSIONS
for each specific question in the field of metabolic modeling different implementations and solutions are feasible and every algorithm and software proposed so far has its own focus  <cit> . the present application develops important basic analysis algorithm further to efficiently tackle even large networks. as a modular open-source java application it is freely available for all academic users and can be further extended or modified according to the needs of the individual users .

we applied yanasquare to model the complex signaling network in the murine phagosome, aiming at making predictions about compounds that activate phagosomal actin nucleation or fail to do so. even though the network model shown here is a strong abstraction from the real signaling pathways in the living cell and the phagosome, most phospholipids indeed performed in experimental tests as activating or inhibiting actin nucleation, as predicted by our software in the simplified model.

s. aureus genome-scale analyses have been recently described  <cit> . we show in our examples that yanasquare does not only allow to rapidly set-up the s. aureus primary metabolism, but that it is also suited for comparison of different staphylococci species. this is by no means a substitute for detailed studies such as the two cited above but used here as an illustration example to stress the advantages of our software for rapid and efficient network setup and analysis where we compiled several clear differences found. in summary, the new capabilities of yanasquare allow rapid setup, comparison and modelling of complex genome-sized networks including robustness tests, modifications and enhanced visualization. future versions might include additional ways of compartmentalization, more advanced layout algorithms specifically suited for bipartite graphs and direct editing through the graph interface.

availability and requirements
• project name: yanasquare

• project homepage: . after acceptance this will be the access for the reader to software and supplementary material. if published, the software application/tool will be readily available to any scientist wishing to use it for non-commercial purposes, without restrictions such as the need for a material transfer agreement.

• operating systems: windows, linux, general unix, macintosh

• programming language: java

• other requirements: java runtime environment  <dig>  or higher

• license: gnu gpl

abbreviations
ema, elementary mode analysis; fba, flux balance analysis; kegg, kyoto encyclopedia of genes and genomes; kgb, kegg browser; soap, simple object access protocol; tca, tricarboxylic acid cycle; wsdl, web services description language

authors' contributions
rs programmed and tested yanasquare and its visualization routines and drafted the manuscript. cl implemented and tested the kegg browser  module. ck provided the java implementation of the elementary mode analysis algorithm. mk and sk designed and carried out experiments on the phagosomal phospholipids and verified our in-silico predictions. mh provided expert advice on staphylococci and analysis of their metabolism. gg guided the study of the phagosomal phospholipids and provided his expertise on phospholipid networks for this work. ss developed algorithms for elementary mode analysis and aided ck in the efficient implementation of the algorithm in java. td advised, organized and guided the present study and drafted the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
network definitions and results. network definitions and results from the steady-state analyses used in this study. contains the network definitions of the extended  and the reduced  murine phagosome system, as well as of the s. saprophyticus , s. aureus col/n <dig>  and s. epidermidis  species. to keep the tables concise only the elementary modes referenced in the text are included for the bacteria systems. the complete set of ems is available from the authors on request.

click here for file

 acknowledgements
we thank dfg  for support.
