BACKGROUND
biological sequences play a major role in genetics and bioinformatics research. they are important in the description of dna, rna and proteins, and are among the basic entities studied in molecular and computational biology. in the realm of biological ontologies, the sequence ontology   <cit>  was developed to describe sequences and their features semantically. although many formal definitions are available for the so categories, several categories remain defined using natural language.

formal ontologies are intended to formally specify a conceptualization of a domain  <cit> , and therefore provide the foundation for data and information integration and exchange. definitions alone are insufficient to achieve this goal. axioms are required to provide meaning for primitive, undefined categories and relations. to provide an ontological analysis of "biological sequence" and to formalize the basic categories used in the so, several ontological questions about sequences must be answered, among them: what kind of entity is a biological sequence? how does it relate to space and time? what are the entities that necessarily have to exist for a sequence to exist? what are the properties of biological sequences? what relations are applicable to sequences? how do sequences relate to other kinds of entities, in particular to molecules, organisms or processes ?

here we provide both an ontological analysis of biological sequence and an axiom system for the so's top-level categories. we use first- and second-order logics for this purpose. the axiom system is intended to serve as a foundation for the so, and as a means to achieve interoperability between the so and other domain ontologies through the provision of an explicit formalization of the basic categories and relations used in the context of sequences. for the construction of the axiom system, we employed the axiomatic method  <cit> . the axiom system is freely available for download from our project page  <cit> .

method
our investigation of the ontology of sequences is based on the axiomatic method and on principles of ontological analysis  <cit> . we consider a formal ontology to be a specification of a conceptualization, i.e., a system of categories representing a particular view on the world  <cit> . a formal ontology uses a vocabulary whose terms denote concepts and relations which refer to things in reality.

one method that is used to specify the meaning of a term is an explicit definition. an explicit definition for a relation or category p provides a sentence ϕ in which p does not occur, such that every occurrence of p can be replaced with ϕ. for example, to define redcircle as an entity which is both red and a circle, we could write the definition:   

because this is a definition, whenever we use redcircle in any statement, we can replace it with the right side of the definition, i.e., red ⋀ circle. this leaves a statement in which redcircle does not occur, but red and circle instead.

when explaining the meanings of a set of terms through explicit definitions, other terms must be used to define the terms in the set, and in turn the meaning of these terms must be specified . therefore, specifying the meanings of terms solely through explicit definitions will either lead to an infinite regress or leave several terms unspecified. in the latter case, the meaning of all terms for which a definition is provided depends on the meaning of the terms without definition.

we call the terms that are not explicitely defined primitive terms. the meaning of all terms in the ontology depends on the meaning of these primitive terms: because non-primitive terms are introduced through explicit definitions, every sentence involving a non-primitive term can be replaced with a sentence containing only primitive terms. for example, the defined category redcircle can be replaced by the right side of equation  <dig> in every statement in which it occurs. subsequently, red and circle can be replaced by their definiens if they are defined. therefore, every statement can be transformed in a statement that consists only of primitive terms.

the problem remains how the meaning of the primitive terms can be described formally. for this purpose, we construct sentences containing only primitive terms. these sentences can be understood as descriptions of formal interrelations between the primitive terms. some of these sentences are chosen as axioms: they are accepted as being true within the domain under consideration. such axioms provide restrictions on the interpretation of the primitive terms, and therefore on the terms defined using these primitive terms. for a formal theory, and therefore for a formal ontology, the axioms are the central component, because only they can give significant meaning to terms used in the theory. furthermore, the axioms are chosen in a way such that further true statements can be deduced from the axioms.

it is important to note that definitions do not add significant meaning to a term as long as the terms in the definition remain unspecified. without axioms, only trival statements hold for the primitive terms, i.e., the logically valid statements. formally, non-trivial meaning can only be established through appropriate axioms for the primitive terms.

RESULTS
the theory of biological symbols and sequences that we propose here is intended to be compatible with the sequence ontology   <cit> . the so uses two basic categories in the characterization of sequences, region and junction. both can have attributes, i.e., properties, and sub-categories. for example, a sequence may be a gene or a base, a junction an insertion site, and a sequence attribute enzymatic.

sequences are linear entities and can come in two facets. sequences can either have a start and an end point or form circles. there are sequence atoms which are usually denoted by single letters. these atoms have no proper sequence parts.

the use of the term sequence in the so permits different interpretations. here, we introduce an important distinction that is currently neglected in the so. the so contains as their only basic category a sequence region, and employs an extensional mereological system on it. however, we will show that it is important to distinguish between "sequence" as abstract, information-bearing entity, the physical manifestation as a molecule and the syntactic representation of a "sequence". to illustrate the difference between an abstract sequence and its physical manifestations , consider all constituents of the sequences acac and caac. the first sequence has as parts - or sequence motifs - the sequences acac, aca, cac, ac, ca, a and c. the sequence caac has as parts the sequences caac, caa, aac, ca, aa, ac, a and c. it is remarkable that, although both sequences apparently have the same length, use the same primitive symbols , and each primitive symbol occurs exactly twice in each sequence, acac has seven sequences as part, while caac has eight. this is due to the fact that, in one sense of "sequence", there is only one ac, which occurs in acac twice. on the other hand, each molecular token of acac and of caac will have at least ten parts: two adenine molecules, two cytosine molecules, three molecules consisting of two nucleotides each, two molecules consisting of three nucleotides each, and the whole molecule .

the problem arises because sequence has different meanings which result in different properties. when a sequence is understood as a pattern, then the parts of a sequence are patterns too. in this case, in the sequence acac or a longer repeat of ac, there are only two subpatterns of length two: ac and ca. both ac and ca are patterns which are a part of the longer pattern acac or a repeat of ac. when a sequence is understood as a molecule, the parts of a sequence are molecules , and any molecular sequence of a length n will have n -  <dig> molecular sequences of length two as part.

overview, primitive categories and basic definitions
the theory we propose here assumes that abstract sequence , syntactic sequence , molecular sequence  and junction  are primitive categories. in particular, they are not defined, but characterized axiomatically according to the axiomatic method.

instances of the molecular sequence category are molecules or residues, the elements in chains of nucleotides or amino acids that are designated by single letters in their representation. a single nucleotide or a single amino acid is an instance of molecular sequence. a nucleotide residue which is part of a dna molecule is an instance of molecular sequence, and so is an amino acid residue which is part of a protein. we consider these entities - single nucleotide or amino acid residues - as atomic instances of molecular sequence; they have no proper parts which are themselves instances of molecular sequence. non-atomic instances of molecular sequence are primary structures of polynucleotides or proteins, i.e., chains of monomeric subunits. molecular sequence does not include chemical molecules that are not nucleotides, amino acids or chains thereof. in particular, it is not equivalent to the category of all chemical molecules, but a proper sub-category.

an instance of abstract sequence is an abstract entity. it is independent of space and time: either the instances of abstract sequence are not located in space and time, or they are located everywhere and at all times. intuitively, an abstract sequence represents an equivalence class of sequence tokens or representations. therefore, an abstract sequence a unites that which all a-tokens have in common. there is only one abstract sequence instance a. abstract sequences can have abstract sequences as parts: the abstract sequence acac has the abstract sequences aca, cac, ac, ca, a and c as proper parts. both a and c occur twice in each token of acac. there is only one abstract sequence a and c . therefore, the abstract sequence acac has the abstract sequence a and the abstract sequence c as part only once.

we use a third category syntactic sequence in our axiom system. instances of syntactic sequence are sequence representations. they are representations in biological databases, textual representations in the form of strings or graph-based representations. they represent the arrangement of the molecules in the molecular sequences, and stand for an abstract sequence. instances of syntactic sequence are usually material entities, such as patterns of ink or configurations of magnetic fields on electromagnetic storage media. an instance of syntactic sequence can be atomic when it does not have proper parts, such as for the syntactic sequence a.

atomic instances are delimited by instances of junction, i.e., boundaries between two atomic parts of a sequence representation. instances of junction represent chemical bonds or binding sites on the level of molecular sequences. the category junction corresponds to the category so: <dig>  of the so, which is "a boundary between regions".

a schematic overview of the layers of our axiom system and their interrelations is illustrated in figure  <dig>  table  <dig> lists the relations and predicates we use in the axiom system.

the table shows the list of predicates used in the axiom system. unary predicates represent categories, all other predicates represent relations. in this table, we included relations that are used in the implementation but are not further discussed. for example, the relations adisjoint and mdisjoint are included in the axiom system and are defined similar to sdisjoint .

the central relations in our axiom system are part-whole relations. we provide axioms for three different kinds of part-whole relations, one for each level of representation. the relation mpo  relates instances of molecular sequence, spo  relates instances of syntactic sequence and apo  relates instances of abstract sequence. additionally, the representation relation  relates instances of molecular sequence to instances of syntactic sequence. the relation sto  relates instances of syntactic sequence to instances of abstract sequence, while the relation mto  relates instances of molecular sequence to instances of abstract sequence.

we use several relations that are more technical in nature to specify molecules and their representations. for this purpose, we use the binds relation that represents a chemical bond between two molecules, and the relations conn, in, between and end to describe instances of syntactic sequence and how they relate to junction. the relation conn holds between two connected junctions in a syntactic sequence. the relation ≡ is a relation between two syntactic sequences that are tokens of the same abstract sequence. in our ontological analysis and the resulting axiom system, we make no commitment to a particular ontological system. the ontology of sequences presented here can stand on its own, and axioms are presented for all relations used in the theory. however, the foundation in a top-level ontology can benefit the interoperability between the presented ontology and other domain-specific ontologies, because the top-level ontology can provide a common interface for multiple domain ontologies. therefore, we discuss options for a foundation in top-level ontologies after presenting our axiom system.

basic axioms
the first part consists of axioms that restrict the arguments of some of the relations. the remaining relations take defined categories as arguments and are introduced later. additionally, an axiom requiring all sequences to have only molecules as tokens is introduced.   

the following set of axioms requires that junction, molecular sequence, syntactic sequence and abstract sequence are disjoint categories, i.e., not two of these categories have an instance in common.   

sequence mereology
the relation spo is a parthood relation that holds for syntactic sequences when one sequence contains the other as a sequence part. based on this relation we first define sppo  and the category of primitive biological symbols  as well as the soverlap and sdisjoint relations.

a syntactic sequence x is a proper part of the syntactic sequence y if x is a syntactic part of y but not identical to y. a syntactic sequence is primitive  if it has no proper parts. two sequences x and y overlap if they have a part in common , and they are disjoint if they do not overlap.   

the relation spo satisfies reflexivity, transitivity and antisymmetry, and therefore forms a partial order.   

the relation spo also satisfies the strong supplementation principle, leading to an extensional mereology for sequences  <cit> :   

syntactic sequences consist entirely of atoms  with respect to the relation spo. the following two axioms require that all sequences have primitive biological symbols as part, and that they are constituted of only primitive biological symbols:   

as a result of these axioms, the relation spo specifies an atomic extensional mereology for the instances of syntactic sequence.

sequences, junctions and connectivity
the second part of axioms pertaining to sequences relates the symbols to junctions. intuitively, junctions are borders between two adjacent primitive symbols and delimiters at the beginning and end of a syntactic sequence.

first, we restrict the arguments for the between, end and conn relations, and introduce the relation in through an explicit definition. a junction is in a sequence s if it is either a junction between two primitive biological symbols within s, or it ends the sequence s and is adjacent to exactly one primitive biological symbol . the relations between and end represent these two cases. the relation conn asserts that two junctions follow each other within a sequence.   

the relations between and end are introduced for technical reasons and are not intended for direct use. they are used to specify a syntactic sequence token as a chain of primitive biological symbols separated by junctions. an assertion between is read as "j is a junction between the primitive biological symbols p <dig> and p <dig> in the sequence s". the relation end serves a similar purpose. both relations are used to define the relation in, and we will make use of the in relation in the following axioms.

the following set of axioms pertains to the conn relation of connectedness between junctions. the relation is used to represent the order of the sequence through an order of junctions.   

the axioms presented so far are first-order axioms, and they do not suffice to state that syntactic sequences must be connected. for this purpose, a second-order axiom is required. equation  <dig> is an axiom in monadic second-order logic and states that the set of all junctions in a sequence, p = {x|in}, is closed under the relation conn. in the axiom  <dig>  p is the set of all junctions in some sequence s  ↔ in). the second part of axiom  <dig> states that every non-empty subset q of p  ⋀ ∀x → p) which contains with every junction u also any junction v that is connected to u  ⋀ conn → q) is a superset of p  → q). because q is by construction both a non-empty subset and a superset of p, p and q are equal. q is closed against the relation conn and p is the set of junctions which are in a sequence. therefore, axiom  <dig> states that the set of all junctions in a sequence is closed under the relation conn.   

several more axioms that relate sequence representations to junctions can be found in the implementation of our axiom system. similarily, a set of axioms that pertains to instances of the molecular sequence category, including a mereological system and the relation to sequence representations, can be found in the full axiom system which is available from the project website.

directed and abstract sequences
in the axioms presented so far, instances of syntactic sequence have no directionality. for many applications, it is useful to make sequence representations directional, i.e., determine a beginning and end. such a definition is trivial for linear sequences. linear sequences have exactly two junctions which end the sequence. when these are distinguished in a first and last junction, i.e., the two end junctions are distinguished, a directionality is immediately given, from first to last. for circular sequences, two arbitrary connected junctions are chosen as first and last. we use the predicate dsseq in our axiom system to refer to directed sequences. furthermore, we use dmseq to refer to directed chains of molecules, which are formally constructed similarily to directed sequences.

abstract sequences are abstracted from the sequence representations, and therefore indirectly from the tokens. primitive biological symbols represent one abstract sequence directly. this can be considered as labelling the sequence representation with single letters representing individual tokens. then, abstract sequences correspond to classes of sequence representations that are labelled with the same sequence of letters, i.e., whose primitive biological symbols each represent the same abstract sequence.

in the current version of the axiom system, we use the predicates aseq, rep and ≡ . aseq means that x is an instance of abstract sequence, sto that the directed sequence x is a syntactic token of the abstract sequence y, mto that the molecular sequence x is a molecular token of the abstract sequence y, and ≡  that the directed sequences s <dig> and s <dig> are equivalent .

first, we restrict the arguments of the token-of relations and the equivalence relation between syntactic sequences.   

we will use the infix notation s <dig> ≡ s <dig> instead of ≡ .

the following axioms ensure that directed sequences are syntactic tokens of one and only one abstract sequence. therefore, the token-of relations are functional. we use the counting quantifier ∃ to represent that there is one and only one y satisfying the conditions in the formula.   

abstract sequences are dependent on their tokens: for every abstract sequences, there is at least one syntactic or molecular sequences that is the token of the abstract sequence.   

in the current state of the axiom system, we use a complex axiom to capture the equivalence between two directed sequences. intuitively, two sequences are equivalent if and only if they are either primitive biological symbols that are tokens of identical abstract sequences or they start with equivalent primitive biological symbols and their proper parts that contain everything except these equivalent symbols are equivalent. this is a recursive definition which takes the form of an axiom in first order logics and is expressed in formula  <dig>    

axiom  <dig> is not an explicit definition, because the relation ≡ appears on both sides of the formula. instead, it represents a recursive definition in which the right side of axiom  <dig> contains only proper parts of the sequences that appear on the left side.

axiom  <dig> can be read as follows: two syntactic sequences s <dig> and s <dig> are equivalent  if and only if they start with the primitive symbols p <dig> and p <dig>  ⋀ first) and both s <dig> and s <dig> are primitive and tokens of the same abstract sequence  ⋀ pbs ⋀ ∀x, y and sto → x = y)) or they start with equivalent primitive symbols  and those proper parts of s <dig> and s <dig> which contain everything of s <dig> and s <dig> except for the symbols p <dig> and p <dig> are equivalent.

with this axiom and based on sto, we can also characterize equivalence between directed sequences as a relation that holds if and only if the syntactic sequences are tokens of the same abstract sequence:   

based on the representation relation sto and its axioms, we can define the relation apo, which is a part-of relation for abstract sequences. an abstract sequence x is the abstract part of the abstract sequence y, if and only if there is a token a of the abstract sequence y, and a has a part  that is the token of the abstract sequence x.   

as a corollary from this definition and the axioms pertaining to the sto relation and the equivalence of sequences, the apo relation for abstract sequences groups tokens based on equivalence classes. in particular, our motivating example of the parts of the sequences acac and caac can be solved with the notion of abstract sequences and the apo relation.

ontological foundation
a question that is not answered with these axioms is how sequences and junctions relate to categories commonly found in a top-level ontology. we believe these axioms to be compatible with most major top-level ontologies, in particular the basic formal ontology   <cit> , the descriptive ontology for linguistic and cognitive engineering   <cit>  and the general formal ontology   <cit> . however, the foundation in these ontologies varies substantially.

in the bfo, molecular sequences should be considered as a subcategory of material entity. since syntactic sequences are also material entities, i.e., ink on paper, they can be represented as material entities as well. junctions are specifically dependent continuants which depend on the syntactic sequences. a category c is specifically dependent on a category d if for every instance c of c, an instance d of d must exist, and d remains the same continuant throughout the life of c. abstract sequences should be considered subcategories of generically dependent continuant. a category a is generically dependent on the category b if and only if for every instance of a, some instance of b must exist. in the framework of the bfo, abstract sequences are generically dependent on either molecular or syntactic sequences. because abstract sequences are generically dependent continuants, the dependency relations must be carefully examined for each sequence: many syntactic sequences considered in biology represent no molecular sequences, partially due to limitations in sequencing technology.

in the dolce, the category abstract is a sub-category of particular. the main characteristic of abstract entities is that they do not have spatial nor temporal qualities, and they are not qualities themselves.

abstract sequences have this property, and can be embedded in dolce with the following axiom:   

both syntactic and molecular sequences are sub-categories of endurant in dolce, while junctions are qualities of syntactic sequences. the main difference between the foundation of our ontology of sequences in dolce and bfo is that, in dolce, abstract sequences are entities in their own right, independent of our creation of representations and independent of molecular manifestations of these sequences, while they are existentially dependent on their tokens in the bfo.

integration of our theory in the gfo can be similar to the scenario described in the dolce, considering abstract sequences as a sub-category of gfo's abstract individual category. however, the gfo also provides the category symbol structure, of which abstract sequences can be a sub-category. symbol structures are higher-order categories in the gfo. higher-order categories are ontological categories that have categories as instances. in this case, the relations sto and mto are sub-relation of gfo's token-of relation, which is a sub-relation of the instantiation relation. the relation sto would relate one kind of tokens of abstract sequences, while the relation mto relates the other kind of tokens to abstract sequences. in the gfo, abstract sequences are entities in their own right, either abstract individuals or sub-categories of symbol structure.

example: the sequences acac and caac
as motivating example for our investigation, we have used the sequences acac and caac and claimed that there are at least two views on these: one in which they each have ten parts, and one where they have different numbers of parts. we can now make this observation precise by distinguishing between the tokens of these sequences and the abstract sequences.

both molecular sequences  and syntactic sequences  have the same number of parts which directly depends on the length of the sequence . a molecule or sequence of length  <dig> will always have  <dig> parts: itself as a reflexive part,  <dig> parts of length  <dig>   <dig> parts of length  <dig> and  <dig> parts of length  <dig>  abstract sequences, however, are based on equivalence classes  of sequence tokens. if multiple parts of a sequence representation represent the same abstract sequence, they are only counted once. therefore, acac has the abstract sequences represented by acac, aca, cac, ac, ca, a and c as part, while caac has the abstract sequences represented by caac, caa, aac, ca, aa, ac, a and c as part.

implementation and evaluation
we implemented the axiom system using the spass first-order theorem prover  <cit> . the implementation can be found on our project webpage  <cit> . due to the restriction of spass to first-order logic, we could not implement the axiom  <dig> requiring connectedness of sequences as well as the condition that ≡ is the minimal relation satisfying axiom  <dig>  these axioms necessitate the use of second-order logics and their implementation would require a theorem prover for higher-order logics.

we employed the spass theorem prover on our axioms and attempted to prove the proposition ϕ ⋀ ¬ϕ. if this logical contradiction can be derived from the axioms we provide, our axioms would be inconsistent.

on the other hand, if our axioms are consistent, we expect spass to never terminate, because, in the general case, an automated consistency proof for first-order theories is impossible  <cit> .

the spass theorem prover could not find a proof for the contradictory statement ϕ ⋀ ¬ϕ in three weeks time on an intel® xeon® with  <dig>  ghz and  <dig> gb of memory. however, this is merely an indication for consistency. a formal proof of the consistency, e.g., through the construction of a model, is subject to future work.

additionally, mere consistency is no indicator for the applicability of the axiom system, or how well it describes the underlying biological reality. in particular, the theory could be consistent yet permit unwanted inferences. we tested the axioms with some basic inferences, i.e. the existence of a sequence, a token, a junction, two non-identical sequences, etc., without detecting an inconsistency.

discussion
three levels of distinction
a corollary from this ontology of sequences is the necessity to distinguish between the abstract sequences and their tokens. abstract sequences are abstract entities, independent from space and time, and they can have tokens, i.e., physical manifestations that exhibit the structure specified by the sequences. abstract sequences are similar to universals or ontological categories. tokens are physical entities that are located in space and time.

the major difference between abstract sequences and their tokens are their identity conditions and the resulting mereology. while there is only one abstact sequence "a", there can be many tokens of that sequence. the tokens can be distinguished in two kinds: syntactic sequences and molecular sequences. the latter are molecules that exhibit the sequential structure determined by the abstract sequence, while the first are syntactic representations of sequences of molecules. the tokens are material objects that are identified, among others, by their position in space and time. therefore, while the abstract sequence "aa" has only the abstract sequence "a" as proper part, there will always be two tokens of "a" as part of a token of the abstract sequence "aa". as a result, the number of parts of abstract sequences is, in general, not the same as the number of parts of the sequences' tokens.

applications of the axiom system
the consequences that can be drawn from the axioms leads to important applications in the development and design of biomedical ontologies. an important consequence is the need for multiple part-of relations. depending on the domain of application, part-of has different properties: different axioms hold in different domains.

in our investigation, the largest difference holds between the tokens  and the abstract sequences. while we employed an atomar extensional mereology for the tokens, the apo relation between abstract sequences does satisfy atomicity, but neither the strong nor the weak supplementation principles. the weak supplementation principle is a consequence of the strong supplementation principle  and states that, if x is a proper part of y, then there must be some part of y which is disjoint from x. for abstract sequences, this would be:   

however, this axiom does not hold for abstract sequences. this is due to the fact that the apo relation is based on equivalence classes  of tokens. for example, the abstract sequence represented by a is a proper part  of the abstract sequence represented by aa, yet there is no part of aa that is disjoint from a.

although our axioms are specific for biological sequences, a parallel can be drawn to other kinds of information objects, such as those covered by the information artifact ontology  <cit> . the part-of relation for information entities, or, more generally, generically dependent continuants  is fundamentally different from the part-of relation between material objects.

this observation shows that axiom systems such as the one we provide for biological sequences help to facilitate interoperability between ontologies. they permit the detection of inconsistencies and help to distinguish between different categories and relations based on the properties these categories and relations have.

representing hypothetical and faulty sequences
any ontology of sequences must permit the representation of hypothetical sequences, i.e., sequences that are not the sequences of a molecule. these sequences play a major role in molecular biology. syntactic sequences that are obtained using current sequencing technologies will often contain errors . therefore, any sequence of sufficient length that is obtained through these sequencing techniques, such as the sequence of the human chromosome  <dig>  will contain errors and there may not be any molecule that exhibits the structure specified by the sequence. furthermore, randomized sequences are generated and used in bioinformatics analyses and the modeling of evolutionary processes. whenever these sequences have sufficient length, they will likely represent no molecule.

in an ontology of sequences, it is therefore important to represent syntactic sequences independently from molecules. syntactic sequences convey information about molecules only if there are molecules with the given structure. for an understanding of biological sequences and modelling of the information they convey, all three levels are necessary.

however, some ontologies explicitly exclude abstract entities. one possibility in these ontologies is to model abstract sequences as dependent entities, which depend on certain physical objects. in this case, care must be taken to select the physical entities on which sequences depend; a hypothetical or faulty sequence which has no molecules as tokens cannot be existentially dependent on molecules with the structure specified by the sequence. the sequence specifies the structure of a molecule only if the sequence has molecular tokens.

use of first and higher order logic
the axiom system that we developed for sequences is based on second order logic. satisfiability of a formula is not decidable in second order logic. on the other hand, logics for which satisfiability is decidable such as propositional logic or certain description logics are not sufficiently expressive for our purpose. in particular, connectedness of a sequence is a second order notion; no axiom in first order logic can completely capture the notion of connectedness. therefore, an expressive logic is necessary to formulate crucial properties of sequences.

while no sound and complete automated reasoner exists for second order logic, theorem provers such a spass  <cit>  can be used to assist a user in the inference of theorems from the provided axioms. the alternative to the use of an expressive logic to represent the axioms of the ontology is to restrict the axiom system to a weaker, decidable logic such as the description logic implemented in owl. however, essential features of the domain would have to be omitted in this case.

it is currently a property of most biomedical ontologies that they use a weak, decidable logic such as the logic defined by owl, and add natural language definitions to the specified classes and properties to provide their intended meaning. this yields a large part of the ontology that remains informal and therefore ambiguous.

on the other hand, an expressive axiom system that captures large parts of the domain can be used to develop weaker representations for specific purposes. we have only implemented the first order fragment of our axiom system in the spass theorem prover. similarily, it is possible to construct theories in owl that are compatible with our axiom system. in addition, based on the axiom system we provide, compliant database schemata, software models or other conceptual representations can be constructed. using natural language for the definition of ontological categories does not permit such a reuse in a consistent manner due to the lack of a formal semantics for natural language.

future work
the axiom system we provide is in its first version and has changed substantially during development. we intend to continue development in close collaboration with ontology developers to both increase the usability of the axiom system and improve its clarity. in particular, we plan to carefully examine the second-order axioms to identify potential first-order axioms or axiom schemata that can be used instead of the second-order axioms. furthermore, the axiom system we present is not complete, and further axioms can be added to increase the strength of the axiomatization.

additionally, we are investigating possibilities for automatically selecting axioms that can be expressed in a weaker subset of predicate logics than used here. while it is trivial to project the axiom system to first order logics by omitting the two second order axioms we described, axioms in an even weaker logics than first order logics are useful. in particular, for an application within the semantic web, we plan to identify a large subset of axioms that can be formulated in the description logic , which forms the basis of the web ontology language   <dig> . furthermore, for the application of the axioms within the obo, a translation to the logic specified by the obo flatfile format  <cit>  could be developed.

CONCLUSIONS
we provide an axiom system for sequences in predicate logics. most of the axioms are available in first-order logics, although some require the use of second-order logics. the axiom system is intended to serve as a foundation of the sequence ontology's top-level categories sequence and junction. as a corollary from the axiom system we developed, we introduced two categories of sequence tokens, which we called syntactic sequence and molecular sequence, and the category abstract sequence. we find that in order to understand sequence, it is necessary to consider the tokens of sequences.

the axiom system we provide is not based on a particular top-level ontology, but is compatible with multiple top-level ontologies. we discuss how to include the theory of sequences in the bfo, dolce and gfo top-level ontologies. depending on the top-level ontology used, sequences and junctions are considered different kinds of entities: from generically dependent continuants over abstract individuals to higher-order categories.

this axiom system for sequences is - to the best of our knowledge - the first extensive axiom system for basic categories of an obo foundry ontology. with increasing demands for semantic interoperability and information flow between obo and obo foundry ontologies, the importance of developing axiom systems likely will increase, because only axioms can provide a formal specification of a category's meaning, and therefore provide the foundation for automated inferences, information flow and integration. the new axioms are implemented for the spass theorem prover and are freely available from our website  <cit> .

authors' contributions
rh conceived of the study; hh, rh and jk discussed and designed the basic ontological framework; hh and rh formalized the ontological framework; rh drafted the manuscript and implemented the axioms; hh and jk supervised the project. all authors read and approved the final manuscript.

