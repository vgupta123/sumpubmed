BACKGROUND
over the past decade, a great number of studies on time course issue have become increasingly important since most clinical/biological events, such as infection-related chronic/acute inflammatory responses  <cit> , drug treatment-related experiments  <cit> , cell cycle-arrest  <cit>  or other important issues  <cit> , require a period of time in which aberrant alterations in gene expression would lead to different outcomes. therefore, through performing a consecutive monitoring of massive gene expressions and discovering their regulations during clinical/biological manifestations, the hidden layer of biological mechanisms could be unveiled. however, to our knowledge, these is no effective method can handle this issue although the high-throughput microarray is a powerful tool and has been widely utilized to efficiently detect differentially expressed genes among a group of patients in a time course experiment  <cit> . these authors only focused on how to identify differentially expressed genes varied with time but actually we did not know whether these genes are associated with each other or not. their results did not show the valuable information.

sequential pattern mining is one of the most important topics in the field of data mining, especially for the database systems. the fundamental meaning of a sequential pattern refers to a set of singleton frequent items/differentially expressed genes that are followed by another set of items/differentially expressed genes in the time-stamp ordered transaction. therefore, once the potential gene regulations occurred in a period of time, it could be identified by mining such sequential patterns from a dataset-converted database. referring to previous studies, several parental algorithms using different computational designs, such as aprioriall  <cit> , spade  <cit>  and prefixspan  <cit> , have been successfully proposed and used for different databases to discover their own sequential patterns. the apriori-like  gsp  <cit>  and pattern-growth-based prefix-growth  <cit>  as well as delisp  <cit>  are evolutionarily designed incorporating with many constraints such as the size of gap among the sequence-involved singleton items, or a time interval within which items are observed as belonging to the same transaction even if they originate from different transactions. besides, any possible subpatterns derived from each parental sequential pattern also satisfy the user-set constraint values. this property is called downward closure  <cit> . therefore, any possible subpatterns of each sequential pattern, particularly for the longer ones, need to be generated during the decomposing process that is time-consuming and space-exhausting. once both shorter and longer sequential patterns have the same occurrence times across all transactions in the database, i.e., closed sequential patterns, the shorter ones will be eliminated from the final resulting patterns. for this purpose, some newer algorithms like incorporating with constraints, ctsp  <cit> , and without constraints, clospan  <cit> , were then designed to tackle this problem. in addition to these traditional algorithms, an increasing number of extended methods have also been performed on some interesting topics. for example, an algorithm called wspan  <cit>  could be used to determine weighted sequential patterns from a transactional database, and the magiic  <cit>  was designed to discover the structure motifs from protein sequences. however, to the best of our knowledge, all of the aforementioned methods are not suitable for the widely used microarray data, as a large-scale dna microarray-based platform normally consists over tens of thousands of probes/genes, e.g., over  <dig>  probes/genes in rice and over  <dig>  probes/genes in human arrays. a set of differentially expressed genes  on a single array could be individually considered as a single transaction. in that way, each transaction  may contain too many significant singleton gene items after converting the numeric datasets into the format  of transactional databases  <cit> . this is called a long transaction issue. however, to date, there exists no method which can efficiently handle such kind of issue. actually, a lot of items would frequently occur at most time points. they are similar to the housekeeping genes, which are very insensible to an extracellular stimulus; instead, they play critical roles as maintenance genes in the basic cellular functions  <cit> . moreover, mining sequential patterns containing too many such items may increase the difficulty in interpreting the resulting gene regulations. the performance of the preceding sequential pattern mining methods would also be limited to these simultaneous items.

in this paper, we propose a new algorithm called ctgr-span  with some biologically designed parameters to solve the issue mentioned above by mining ctgr-sps . the ctgr-span ensures that all of the resulting patterns imply gene regulations, which take place across different time points during the course of biological observations. the method is an extended and improved version of our previous paper  <cit>  presented in the  <dig> ieee international conference on bioinformatics and biomedicine . the most important changes include: first, we designed a new optimal parameter tuning procedure for the proposed algorithm to ideally determine suitable conditions in pattern mining. the procedure has a merit that there is no need to additionally compute the standard deviation of time intervals in a time course dataset. based on this design, then we compared our method with two representative sequential pattern mining algorithms, namely gsp and prefixspan, in execution efficiency and effectiveness. the resulting patterns were validated using a manual literature survey and an automatic gene ontology enrichment analysis  <cit> . finally, more explanations for the proposed algorithm have also been added to this paper like i) providing complete examples for readily understanding both our proposed algorithm and the new parameter tuning procedure, and ii) performing more experimental results on the two publicly available human disease-related time course microarray datasets  <cit> .

the rest of this paper is organized as follows. the proposed method and materials for analysis are described in methods. in results and discussion, we give the experimental results of the proposed method on two time course gene expression datasets. concluding remarks are given in conclusions.

methods
in this section, we introduce how to efficiently discover ctgr-sps  from a time course microarray dataset through  <dig> main parts: i) an introduction to the experimental background of  <dig> input microarray datasets, ii) how to convert a numeric dataset into a transactional database, and iii) the kernel of the ctgr-span  and its required biologically designed arguments.

input microarray datasets
we tested this paper presenting method using the same input datasets as our previous works  <cit> . in brief,  <dig> time course gene expression microarray datasets  were downloaded from the geo database. in gse <dig>  mcdunn et al. attempted to detect  <dig>  transcriptional changes in  <dig> ventilator-associated pneumonia patients' leukocytes across  <dig> time points. for the other gse <dig>  taylor et al. monitored  <dig>  gene expression changes in peripheral blood monocytes of  <dig> hepatitis c virus infected patients across the first  <dig> weeks right after treating with the peg-interferon alfa-2b plus ribavirin.

converting microarray datasets into transactional databases
the sequential patterns could be mined directly from a transactional database if the data are discrete. the microarray-involved probe/gene expression values need to be discretized into singleton items within every transaction. here we show you an example from table  <dig> to  <dig>  table  <dig> shows the probe/gene expression values of  <dig> genes g <dig> to g <dig> over  <dig> time points tp <dig> to tp <dig> with a fixed interval . the experimental design is performed in  <dig> patients. the first time point of this example is regarded as a baseline for deriving the significant items at each time point. all of the values are then divided by the first time point. the divided values can be presented in a fold change matrix as table  <dig>  the absolute fold changes exceeding a fold-change threshold are further defined as the significant genes. suppose that the threshold is set as  <dig> , only the eligible significant genes can be preserved as new items as shown in table  <dig>  take patient  <dig> for instance, up-regulated g <dig>  down-regulated g <dig> and down-regulated g <dig> occur at the second time point that will be presented within the same parentheses . in this example, a set of  <dig> time-ordered transactions for each patient is called a sequence.

tpn: gene/probe reading values at time point n.

tpn/m: gene/probe reading values of time point n relative to m.

<>: a sequence; ()t: a transaction of time point t; g+/-: significantly up- or down-regulated gene item.

however, the content of the converted transactional databases will be affected by different threshold settings. in this study, the threshold of gse <dig> is set as  <dig>  and the threshold of gse <dig> is set as  <dig> , based on the same criteria used for the original datasets  <cit> .

ctgr-span: cross-timepoint gene regulation sequential pattern
since the ctgr-span is designed based on a pattern-growth-based manner  <cit>  for mining ctgr-sps, we will present the kernel procedure and meanwhile show the main differences between the traditional pattern-growth-based and our methods using a readily understood example. finally, we present several extra biologically designed parameters toward more meaningful ctgr-sps in biology.

kernel procedure
the main strength of the ctgr-span is to overcome a problem that the transactions have too many items/significant genes. according to our design, it also has several advantages: i) the items within transactions do not need to be sorted in advance, ii) the mining results will not be affected by different sorting types, iii) more meaningful sequential patterns implying gene regulations in biology can be successfully discovered relative to the traditional sequential pattern mining algorithms  <cit> , and iv) massive repeated redundant patterns will not be identified. the following examples guide you how to trace the mining processes to explore the patterns from a microarray dataset-converted database. a set s of sequences containing  <dig> patients' transactions is shown in table  <dig>  each transaction consists of several significant gene items gn+/-. in this example, we set a minimum support  as 50%, which means if any one of the items occur in at least  <dig> different individual sequences , we call these items as frequent items and further to generate ctgr-sps through a prefix-projection-based manner  <cit>  in the following steps:

<>: a sequence; ()t: a transaction of time point t; g+/-: significantly up- or down-regulated gene item.

step 1: find length- <dig> ctgr-sps

after scanning the s, the frequent items of length- <dig> including <g1+>, <g2-> and <g3+> can be successfully identified since they appear over one half of the sequences. therefore, these  <dig> frequent items are regarded as the lengh- <dig> ctgr-sps.

step 2: divide search space

each item within the set of length- <dig> ctgr-sps is individually considered as a prefix to find its postfixes in which they are also frequent in the s.

step 3: find postfixes of ctgr-sps

for each identified prefix, the subsets of ctgr-sps can be identified using a depth-first search-based manner in the prefixes projected databases.

for readily understanding the above  <dig> steps, here we extend an example shown in table ii of our previous conference paper  <cit>  as table  <dig> and show more descriptions on the comparisons of the traditional sequential pattern-growth-based manner and our proposed ctgr-span. first, for the proposed method, the prefixes within length- <dig> ctgr-sps are shown in the left-most column. only the subsequences prefixed with the first occurrence of the prefixes and started from the next transaction will be presented in the projected databases. as an example, the prefix <g1+> contained in the sequence <1245> of patient  <dig> , only the subsequence <245> will be listed in the projected database for mining longer ctgr-sps. according to the same principle, the sequences in s containing <g1+> are projected to form the <g1+>-projected database, which consists of  <dig> candidate postfixes: <23>, <245>, <3> and <3>. then, by scanning <g1+>-projected database once, the length- <dig> ctgr-sps having prefix <g1+> can be identified including <>:  <dig> > appears  <dig> times) and <>:  <dig>  the ctgr-sps longer than length- <dig> can be further generated from the current length- <dig> ctgr-sps. after constructing their respective projected databases, the <>-projected database consists of two candidate postfixes: <3> and <5>. however, both <> and <> appear only once over the sequences involved in the <>-projected database that is lower than the minsupp . hence, the further processes for mining the <>-projected database will be terminated. on the other hand, recursive mining patterns from the <>-projected database, which contains two candidate postfixes including <3> and <45>, returns one eligible postfix <g3+> to form a length- <dig> ctgr-sps <>. finally, according to the same criteria, we can find the remaining ctgr-sps prefixed with <g2-> or <g3+> by constructing their corresponding projected databases.

<1223>
g+/-: significantly up- or down-regulated gene item; <>: a sequence; ()t: a transaction of time point t; _: indexed prefix; *: redundant patterns derived from traditional pattern-growth-based sequential pattern mining methods.

after mining all of the sequential patterns, apparently, the traditional patterns marked with an asterisk will not be discovered by our proposed method since they contain the simultaneous items at the same time point. for example, in the first row data of table  <dig> one <> out of four traditional sequential patterns contains the simultaneous item g2- and g3+, which do not imply a gene regulation in a time period but a frequent itemset. although the pattern could be disassembled into " → " and " → ", they have overlapped with the other explored sequential patterns including the traditional length- <dig> sequential pattern <> and <>. therefore, a lot of redundant patterns may be identified by the traditional methods. this thorny problem can be avoided by mining ctgr-sps. table  <dig> shows the strength of the ctgr-span and elucidates why ctgr-span is more efficient and useful than the traditional pattern-growth-based methods.

biological parameter designs
as stated above, we have introduced the main differences between the traditional and our proposed method. then we intend to describe how to enrich the patterns with more meaningful in biology. in addition to the inherent parameter minsupp for mining traditional patterns, we additionally introduce  <dig> parameters: minimum timepoint support , sliding window size  and maximum time constraint  to the ctgr-span to mine more meaningful sequential patterns in gene regulation based on some biological characteristics. since the fundamental definitions of these parameters have been shown in the section ii, materials and methods, of our previous conference paper  <cit> , here we briefly describe their main characteristics and followed by some concrete examples.

mintsupp . after converting the input microarray datasets into the transactional datasets, thousands of items are contained in each transaction. the average lengths of the transactions of the two datasets are presented as two bars at the left-most n tick shown in figure  <dig>  the continuously expressed genes at all-time points may not be susceptible to the cellular responses. they may have a propensity for being housekeeping or maintenance genes  <cit> . in this regard, some well-studied housekeeping genes  contained in each transaction will be removed. based on the similar concept, if the items constitutively appear in most time points, these hg-like items can also be further removed from the transactions using the proposed parameter mintsupp. the average lengths of transactions in both input datasets as the functions of varying mintsupp are shown in figure  <dig> 

sws . mining sequential patterns implying gene regulations across fixed time points may cause the resulting patterns inadequate because the response times among a set of genes through transcription regulations are not identical. the sliding window size  parameter can flexibly allow the patterns containing items to be derived from the same/different time points. here we show you an example extended from table  <dig>  table  <dig> shows the projected databases of length- <dig> ctgr-sps when the sws is set as  <dig>  once the time intervals between the transactions contained in the length-1-projected databases and the prefixes not exceed  <dig> , the transactions-involved items and the prefixes may actually take place at the same time point. in this case, the gene items involved in a-prime-symbol-marked transactions indicate that they occur with the prefixes at the same time point even if all of them originate from different time points.

g+/-: significantly up- or down-regulated gene item; <>: a sequence; ()t: a transaction of time point t; _: indexed prefix; *: redundant patterns derived from traditional pattern-growth-based sequential pattern mining methods.

maxtc . normally, the cells need to react quickly to resist adverse environmental changes, massive short-term gene regulations should be more pronounced within a cellular signaling transduction. in this regard, when setting smaller values of the parameter maxtc, a pattern containing two gene items with a big time gap will not be generated. table  <dig> shows the length-1-projected databases and ctgr-sps from an extended example of table  <dig> when maxtc is set as  <dig>  the possible postfixes for generating length- <dig> ctgr-sps only will be checked till the transactions marked with a prime symbol.

g+/-: significantly up- or down-regulated gene item; <>: a sequence; ()t: a transaction of time point t; _: indexed prefix; *: redundant patterns derived from traditional pattern-growth-based sequential pattern mining methods.

RESULTS
in this section, we presented the experimental results of the proposed ctgr-span of two time course gene expression datasets. because performing the program with different parameter values would yield diverse results, all of the parameters used in this study will be tuned according to the biological backgrounds of the datasets. by introducing the tuned parameter values to the ctgr-span, the resultant ctgr-sps will then be evaluated with previous literature and a go enrichment analysis to reveal their reliability in biology. meanwhile, in terms of the performance, the execution efficacy between the traditional and our proposed methods will also be examined in this study.

optimal parameter tuning
in addition to the inherent parameter minsupp of the traditional methods, we additionally introduced  <dig> parameters mintsupp, sws and maxtc to the ctgr-span. however, two questions might arise as to how to set these parameter values for most biologists and whether these parameters are useful for mining gene regulations. in this section, we performed an optimal parameter tuning process to obtain a general rule for setting the parameters without additionally calculating the standard deviations of the time intervals of a dataset in advance  <cit> . based on the impact degree of each parameter setting to the numbers of the resulting ctgr-sps, we examined the parameters in an order of mintsupp , minsupp , maxtc  and sws . several characteristics of the mined ctgr-sps of two input datasets are presented in these tables. however, here arises a question as to how to judge which condition  is more suitable for further exploration - it is a trade-off that higher parameter values would allow fewer patterns to be mined, but lower parameter values would dramatically increase the number of marginal patterns. both quantity and quality of the resultant patterns are necessary to be taken into account in this work. in the first dataset , mcdunn et al. have proven that as the ventilator associated pneumonia  patients recovered from critical illness complicated by acute infection, the general trajectory  converged, consistent with an immune attractor  <cit> . eighty five genes involved in the inflammatory response were identified with consistent changes in abundance during seven days bracketing the diagnosis of vap. for the other dataset , taylor et al. identified  <dig> significantly up/down-regulated genes involved in the immune response from the blood monocytes of hepatitis c patients during the first  <dig> weeks of treatment with the peg-interferon alfa-2b plus ribavirin in peripheral  <cit> . we used a gene ontology  enrichment analysis  <cit>  to test if the longest ctgr-sps-involved at least two genes under the conditions are relevant to the corresponding biological manifestations . we focused on the longest ctgr-sps containing at least two gene items because the longer patterns not only contained more significant gene items but also carried more information in a consecutive gene regulation according to the original design of the algorithm. the testing results are presented as -log in the tables.

%: minsupp value presented as percentage; †: test longest ctgr-sps-involved genes in inflammatory response using go enrichment analysis; ††: test longest ctgr-sps-involved genes in immune response using go enrichment analysis; -: no complete patterns.

d: # of days of sws; †: test longest ctgr-sps-involved genes in inflammatory response using go enrichment analysis; -: no p-values.

d: # of days of sws; ††: test longest ctgr-sps-involved genes in immune response using go enrichment analysis; -: no p-values.

d: # of days of sws; †: test longest ctgr-sps-involved genes in inflammatory response using go enrichment analysis; -: no p-values.

d: # of days of sws; ††: test longest ctgr-sps-involved genes in immune response using go enrichment analysis; -: no p-values.

first of all, if the same significant gene items occur too frequent during a time period, they may be similar to the hgs. then, the significant patterns should occur as frequently as possible in a group of patients. for these two reasons, we tested both mintsupp and minsupp from 70% to 100% as shown in table  <dig> and supplementary table  <dig> to  <dig> in additional file  <dig>  apparently, the longest ctgr-sps revealed no biologically significant when mintsupp was set as 70% or 80% regardless of the values of minsupp. although the mintsupp was set as 90%, the common values of minsupp suitable for these two input datasets were 85%, 80%, 75% and 70%. unfortunately, the number of genes involved in the ctgr-sps was too high . it might be difficult for most biologists to work with the high number. in spite of these limitations, we could still successfully obtain a suitable common condition for the two datasets when mintsupp and minsupp were set as 100% and 95%, respectively.

once the values of mintsupp and minsupp have been decided, we subsequently tested all possible values of maxtc in both two datasets as shown in table  <dig>  and table  <dig> . the maxtc was set from the beginning as largest time interval,  <dig> days  in gse <dig> and  <dig> days  in gse <dig>  to the end as the values which included most transactions bracketing the maximal time interval,  <dig> days  in gse <dig> and  <dig> days  in gse <dig>  for each dataset, the maxtc would be increased with the first minimum time interval,  <dig> day  in gse <dig> and  <dig> days  in gse <dig>  to ensure any possible conditions would be tested. apparently, according to the same criteria mentioned in the above paragraph, there was a suitable common condition for the two datasets when the values of maxtc were set as ∞ days.

finally, we fixed the previous three parameter values and tested the sws as shown in table  <dig>  and table  <dig> . the values of sws in both datasets were set from the beginning as  <dig> to the end as the values which included most transactions bracketing the maximal time interval,  <dig> days in gse <dig> and  <dig> days in gse <dig>  the values of sws were also increased with a fixed interval. then, we could successfully observe a suitable common condition when the value of sws was set as  <dig> days. these tables also demonstrate that these suitable common conditions were neither the rule number nor rule length dependent. incorporating with the domain knowledge of biology to the parameter designs might had a great benefit on discovering the ctgr-sps with potential gene regulations. therefore, these optimal parameter values could be certainly considered as the default settings to most biologists even if they have no any experiences before.

high performance of ctgr-span
in this section, we compared the performance of our proposed ctgr-span and the traditional sequential pattern mining algorithms such as the gsp and prefixspan in terms of execution efficiency. for achieving a fair comparison, we performed the gsp, prefixspan and ctgr-span with same parameter settings on both input datasets. the resultant patterns and execution times are presented in table  <dig> and table  <dig> respectively. however, the traditional algorithms did not allow complete patterns  to be identified in  <dig> weeks. meanwhile, their patterns already have produced tens of millions of patterns. it might be complicated for biologist for find further usage of such massive patters. in contrast, our proposed ctgr-span only needed to take several hours in a worst case that the minsupp was set as 70%. . these results clearly showed the efficiency of ctgr-span.

%: minsupp value presented as percentage; -: over  <dig> weeks.

evaluation with literature
after performing the optimal parameter tuning process, we set the parameter sws =  <dig> days, maxtc = ∞ days, minsupp = 95% and mintsupp = 100% for the further exploration of ctgr-sps in biology. as stated in the section of optimal parameter tuning, the evaluation criteria for go enrichment analysis were based on the experimental backgrounds of those two datasets to preliminarily test which condition with longest ctgr-sps-involved genes is much related to the inflammatory response caused by the ventilator-associated pneumonia  and the immune response after drug treatments in hepatitis c patients . in this section, we attempted to further address whether these patterns contain potential genes/regulations which have not been reported in previous literature yet. we scrutinized and evaluated the longest ctgr-sps derived genes from the two input datasets using a manual literature survey. table  <dig> and table  <dig> show the evaluation results of gse <dig> and gse <dig>  respectively. if the patterns contain same items, they will be presented as a single item from left  to right. for example, in the top- <dig> data rows of table  <dig>  there are  <dig> cav1+-prefixed ctgr-sps: <>, <>, <> and <>. the cav1+ and gng7+ can be individually grouped and presented as a single item in the table.

: pneumonia-associated genes reported in previous literature; in: the nth item in a ctgr-sp; +: expressed genes; -: repressed genes.

: hepatitis c-associated genes reported in previous literature; in: the nth item in a ctgr-sp; +: expressed genes; -: repressed genes.

after the evaluating process, 78%  in table  <dig> and 73%  in table  <dig> of the patterns-involved genes could be successfully referred to some literature. in other words, the remaining genes might play potential roles during the time course. as stated in the previous example, it has been proven that up-regulated caveolin- <dig>  would regulate nf-kappa b activation and lung inflammatory response to sepsis induced by lipopolysaccharide  <cit> . the upregulation of nuclear receptor subfamily  <dig>  group e, member  <dig>  has been revealed by a microarray analysis of mice infected with influenza virus a and streptococcus pneumonia  <cit> . a relation/regulation might exist between these two genes since they were strongly related to the pneumonia  <cit> . coincidentally, in table  <dig>  upregulated chemokine  ligand  <dig>  has also been reported in the original paper that cxcl <dig> would be transiently induced early in treatment with peg-interferon alfa-2b plus ribavirin in peripheral blood monocytes  of hepatitis c patients  <cit> . it could be successfully regarded as plasma indicator for predicting the outcome of antiviral therapy in patients with hepatitis c  <cit> . therefore, via this literature evaluation, we postulated that the remaining unreported genes and their relations of the identified patterns in both datasets are highly valuable to be explored in the future.

CONCLUSIONS
in this study, our proposed ctgr-span overcomes the flaws of the traditional sequential pattern mining methods. although the transactional databases converted from the large-scale time course microarray gene expression datasets have too many items/significant genes within every transaction, the gene regulations over a period of time can still be efficiently identified. the ctgr-span runs dramatically faster than the traditional methods. in addition to the improvement of execution times, we incorporated the characteristics of gene regulation in the parameter designs and further used a go enrichment analysis to yield the ctgr-sps more meaningful biologically. after evaluating with previous literature, the identified patterns correlate very well with the experimental backgrounds of the two input datasets. therefore, we postulated that our approach could provide more biological insights into the underlying mechanisms of certain biological or clinical progresses, and it also could be readily applied to other research topics of interest.

list of abbreviations
ctgr-span: cross-timepoint gene regulation sequential pattern; ctgr-sps cross-timepoint gene regulation sequential patterns; mintsupp: minimum timepoint support; minsupp: minimum support; sws: sliding window size; maxtc: maximum time point support; go: gene ontology.

competing interests
the authors declare that they have no competing interests.

authors' contributions
cpc, ycl, ylt and vst conceived and designed the entire experiments. cpc carried out the computational studies, performed the statistical analysis and drafted the manuscript. ycl participated in the data interpretations and helped to draft the manuscript. ylt carried out the experiments. vst obtained funding and made critical study supervision. all authors read and approved the final manuscript.

supplementary material
additional file 1
characteristics of mined sequential patterns 

click here for file

 acknowledgements
we thank lukas horak  for revising this paper.

based on "ctgr-span: efficient mining of cross-timepoint gene regulation sequential patterns from microarray datasets", by chun-pei cheng, yi-lin tsai and vincent s. tseng which appeared in bioinformatics and biomedicine ,  <dig> ieee international conference on. ©  <dig> ieee  <cit> .

declarations
this research was funded and supported by the national science council of taiwan under contract number "nsc 101-2627-b-006-003" and the national cheng kung university top university project of ministry of education.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2013: selected articles from the ieee international conference on bioinformatics and biomedicine 2012: bioinformatics. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/14/s <dig> 
