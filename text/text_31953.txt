BACKGROUND
molecular biology has made great progress in observing and quantifying the patterns by which amino acids exchange for one another within protein sequences over time. a key motivation here has been to create amino acid substitution matrices , which lie at the heart of mainstream bioinformatics procedures, from algorithms that determine whether  <cit>  and how exactly  <cit>  two proteins are homologous, to those that predict protein tertiary structure by comparison with known folds  <cit> . however, these matrices represent generalized patterns of change "averaged" across all proteins: although they typically encompass the idea that patterns of substitution will vary with evolutionary distance, other systematic sources of variation are overlooked. an increasing literature supports the idea that this generalization may compromise the sensitivity of sequence comparison for various specialized subsets of proteins . thus a worthy challenge is to seek the underlying ontology that can link individually derived, specialized models of amino acid substitution into a common framework: if we can ultimately replace generalized patterns of observed change with a flexible, quantitative model of amino acid substitution, then this offers significant potential to increase the sophistication of standard bioinformatics procedures. such research may in fact be viewed as a subset of current efforts to find a general, chemical ontology for bioactivity  where researchers face the same challenge of unifying diverse observations into a model that predicts molecular interactions from first principles.

in this context, it has long been understood that amino acid substitution matrices reflect a combination chemical and evolutionary factors: most intuitively the biophysical properties  of the amino acids  <cit>  and the mutational distance of their encodings within the genetic code  <cit> . however, establishing accurate, quantitative connections between the outcomes of molecular evolution and amino acids' molecular descriptors remains a complex issue under active research .

in this context, nakai et al. created an innovative database, the aaindex  <cit> , comprising both amino acid substitution matrices  and amino acid indices . in a later publication that expanded this database, tomii and kanehisa  <cit>  suggested procedures for correlating any amino acid molecular descriptor with an observed exchange rate  and for clustering indices together by similarity.

this latter technique of index clustering, is especially useful when exploring the relationship between indices, given that properties of widespread interest have often been measured in many different ways by different researchers.  moreover, this comparison allows easy visualization of non-intuitive correlations . the authors applied similarity-based methods to their aaindex database to build a minimum spanning tree: a graph-theoretic structure that connects discrete elements together based on similarity, by minimizing the overall sum of the distances of the direct connections. the result is a data structure in which elements are grouped together based on similarity . this minimum spanning tree showed the underlying structure  for the  <dig> indices of their database. since this time, numerous further indices and matrices have been developed: some have been incorporated into updates of the aaindex, while others remain isolated in the scientific literature .

in this context, we have developed free, user-friendly, publicly available web-based software that enables researchers to repeat and extend the ideas of nakai et al.,  <cit>  and tomii and kanehisa  <cit>  using interactive data visualization. we thus present the amino acid explorer, a web tool that facilitates quantitative exploration of similarity between physiochemical properties of amino acids and their evolutionary dynamics. our tool allows users to explore the similarity between any of the  <dig> matrices and any subset of the  <dig> indices housed by aaindex version  <dig> , and to include any custom index or matrix . we have embedded this analysis tool within a comprehensive web context: both a moderated user forum  in which to discuss problems, findings or questions and an open wiki  in which the community of those researching the interface of biochemistry and protein evolution may contribute their knowledge.

implementation
our web tool, which may be accessed at , comprises two major parts: one client side, one server side. the client side consists of the graphical interface that runs as a java applet within a user's browser. the server side , is a web application that performs all computations on the data, and is part of a larger computational infrastructure created around umbc aaindex database. figure  <dig> shows an overview of our tool's architecture. additionally, a short paragraph describing umbc aaindex database is located at the end of this section.

user interface and visualization
the user interface of our tool is a java applet that runs in a user's browser. it allows the user to  select any subset of the aaindex indices  to be clustered using the minimum spanning tree method,  choose an appropriate distance calculation method , and  choose a matrix or matrices to compare with the indices of a spanning tree.

specifically, having built a spanning tree, the application can compute distances between all the indices in this tree and a user defined matrix; it displays these distances by shading the elements of the spanning tree with a color-coded scale. additionally, it can use a second color-coded scale to display which of two user-defined matrices each index of the spanning tree is closest to .

drawing the spanning tree
graph drawing and visualization are currently open research topics in computer science  <cit> . although an agreed method exists for creating the graph , finding an optimal spatial positioning for nodes and drawing edges in a readable way  remain active areas of research. a large number of different software packages implement a variety of state-of-the-art graph drawing methods, which differ significantly in speed, quality of the drawing, and interactivity . our visualization tool uses a slightly modified form of the open source-package touchgraph  <cit>  to render the minimum spanning tree that was computed server-side.  a full description of touchgraph can be found at their web site; in essence, it uses an iterative "force-based layout" algorithm  to move, though a series of incremental improvements, from a random graph layout to an optimal representation. the whole incremental process is visible, and the user can intervene at any point by dragging nodes to locations that seem to be better suited. in our application, this is most likely to be useful when users request a spanning tree for a large set of amino acid indices, under which conditions the force-based layout may become stuck at a local optimum, visible to the user as a representation in which one or a few key edges cross one another.

visualizing distances between a matrix and a set of indices
our application represents the distances between matrices and indices in two modes. in the first mode, each node in the spanning tree  is color-coded to represent its measured similarity to a single, user-defined reference matrix. the color scale runs from blue  to red . distances are measured as described below. the second mode  shows how two substitution matrices differ in terms of the amino acid indices of a spanning tree. this mode uses a color-coded scale to denote which of two matrices is closest to each node . in the figures shown here, the color scale is green  to brown  so as to avoid any confusion with mode # <dig> described above. the degree of color saturation denotes the magnitude of the difference .

computations
all significant computation for this tool occurs on the server-side, because it often involves most or all of the data stored in the database .

computation of a minimum spanning tree
the software calculates a minimum spanning tree using prim's algorithm, as described by cormen et al.  <cit> . since this algorithm minimizes the total sum of distances between directly connected indices, the definition of distance here is of prime importance. tomii and kanehisa  <cit>  used a statistical correlation measure between two indices . our software allows users to employ this metric, but also to explore another notion of distance, namely euclidean distance . this approach is often taken to compare normalized vectors in multi dimensional spaces  <cit> . more generally, our software allows users to restrict the set of amino acids that are taken into account when calculating distance , whichever metric of distance is being used.

computation of distance between a matrix and a set of indices
in order to compute the distance between a matrix and a set of indices, our software uses the correlation method described by tomii and kanehisa  <cit> . this method first converts each index  into a matrix by calculating the simple arithmetic distance between each pair of amino acids, as defined by the index. it then calculates the correlation coefficient between these two matrices. while the euclidean distance method may be used to build a minimum spanning tree of indices, which have been normalized to facilitate direct comparison, this method would is inappropriate for matrix/index comparisons because matrix values have not been normalized . therefore, our software always uses the tomii and kanehisa method of simple correlation to compare a matrix with an index. if the user has selected only a subset of the  <dig> amino acids for tree building, then calculations of distance between a matrix and the indices of a spanning tree consider only the appropriate subset of matrix elements.

umbc aaindex database
we created the umbc version of the aaindex database as a local version of the original aaindex data  to facilitate the manipulations required by our interactive software. specifically, our local implementation converted all data of the original aaindex to xml format, generated interfaces that enable precise local and remote access to all aspects of the database, and normalized all amino acid index data.

xml is a standardized language that is designed to simplify sharing of information among independently created systems. in particular, it is easily readable by machines , and thus facilitates conversions to other languages, both to formats that are intended to be read by humans  and to other computer formats. our umbc aaindex database allows direct user access via internet either in "raw" form  or transformed to a web page that is designed to be easily read by a human. in the former capacity, our implementation of this database has been designed for simple access by either programs residing on our server, or by simple http requests from remote machines. when bandwidth for data transfer is an issue for some third-party users, our architecture also allows deployment of programs directly at the server for a more direct access. both of these latter points reflect our aim to facilitate other researchers who would like to expand and improve the functionality we offer for the aaindex data.

the indices in the database have been normalized by linearly scaling all the values of each index from  <dig>  to  <dig> . this simplifies and makes more intuitive the comparison of values between different indices, which may originally have had values expressed using different units. 

RESULTS
here we present three simple, example analyses to illustrate the types of exploration that our software allows. each illustrates a conceptually different question that the tool reduces to a simple "point and click" exercise. we have chosen to focus on the relationship between biophysical properties of amino acids, patterns of molecular evolution, and the structure of the standard genetic code. however, it would be trivial to find an equivalent set of example analyses that focused on protein folding or homology searching. indeed, our visualization software can be used to investigate any area of bioinformatics that builds on understanding how amino acids' molecular descriptors influence the patterns by which amino acids substitute for one another during evolution.

in figure  <dig>  we show an analysis  in which we build a minimum spanning tree of indices relating to amino acid size, charge, and hydrophobicity. interestingly, while measures of charge and size form coherent units , the more numerous measures of hydrophobicity form three major branches. notably, index  <dig>  polar requirement  <cit> , is a measure of amino acid polarity that has been used extensively in developing evidence for the idea that the pattern by which amino acids were assigned to codons within the standard genetic code results from natural selection to minimize the change in amino acid hydrophobicity caused by point mutations  <cit> . although this minimum spanning tree emphasizes the legitimacy of treating polar requirement as a measure of hydrophobicity , the tri-partite spanning tree for the concept of hydrophobicity illustrates the potential dangers of over-emphasizing any one measure of hydrophobicity. in this context, it is helpful to note that a second "branch" of amino acid hydrophobicity measures includes kyte and doolittle's  <cit>  "hydropathy"  which is also strongly reflected by the codon assignments of the standard genetic code  <cit> .

in figure  <dig>  we show a second analysis  in which we measure the similarity of each index in our original minimum spanning tree to a classic amino acid substitution matrix: the pam 74– <dig>  <cit> . here we see that generally, measures of amino acid hydrophobicity correlate well with observed patterns of amino acid substitution, though interestingly, polar requirement is by no means the strongest of these . amino acid volume shows some correlation with substitution patterns, but charge  is by far the least related property. this provides a quick, empirical justification for the general patterns predicted, for example, by grantham  <cit> . it also matches analyses of which fundamental amino acid properties are reflected within the codon assignments of the standard genetic code  <cit> .

in figure  <dig>  we show a further analysis  that explores how the pam74- <dig> matrix differs from fitch's matrix of "mutational distance between amino acids within the standard genetic code"  <cit>  in terms of amino acid size, charge and hydrophobicity. we find that in general, measures of hydrophobicity and volume are closer to the pam matrix , whereas the small cluster of amino acid indices relating to charge correlate more strongly with the genetic code based matrix. on a simple level, this quick analysis shows that the standard genetic code does indeed contain an element of non-random codon assignments with respect to amino acid charge, as reported in an erratum by haig and hurst  <cit>  that replaced their initial rejection of such a link  <cit> . at a deeper level, these results are germane to debates over the flow of causality that links amino acid physiochemical properties to observed patterns of amino acid substitution within proteins – the mainstream view is that physiochemical properties dominate the pattern by which amino acids substitute for one another, particularly over large stretches of evolutionary time  <cit> . however, there has been some debate as to whether  such patterns can be caused by neutral evolution that substituted amino acids based on their mutational proximity within the standard genetic code, given that the code is non-randomly organized with respect to key amino acid properties  <cit> . our quick analysis indicates that physiochemical considerations really are, in fact, more important to long-term protein evolution than can be explained by codon assignments .

this same feature of the aaindex explorer tool could equally well be used to quickly visualize which properties  are responsible for the difference between any two substitution matrices .

CONCLUSIONS
in this paper, we present software that facilitates rapid, interactive exploration of data pertaining to three interconnected topics:  the multidimensional molecular descriptors of biochemical properties for the twenty proteinaceous amino acids,  the correlation of these biophysical measurements with observed patterns of amino acid substitution , and  the causal, biocehmical basis for differences between any two observed patterns of amino acid substitution. this software acts as an intuitive bioinformatic exploration tool that can guide more comprehensive statistical analyses relating to a diverse array of specific research questions.

availability and requirements
project name: amino acid explorer

project home page: 

operating system: platform independent

programming language: java

other requirements:

• use via evolvingcode's website

○ web browser 

○ java  <dig> . <dig> plug-in for the web browser 

• full installation on an independent server

○ java  <dig> . <dig> plug-in for the web browser  on the client side

○ jdk  <dig> . <dig> environment on the server

○ xml database compliant with xml:db api 

○ servlet web container matching servlet api  <dig>  specifications 

○ xalan xslt processor

license: apache-style open source license

any restrictions to use by non-academics: none

authors' contributions
bb created the local implementation of the aaindex database, including xml schemas, coded the spanning tree software, and wrote the computer science aspects of this paper. sjf came up with the concept of this software, supervised software development, and wrote the biological portions of this paper. mdj supervised and provided technical expertise for the computer science involved in this project

