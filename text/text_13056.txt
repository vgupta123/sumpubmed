BACKGROUND
proteins are dynamic molecules and their dynamics are coupled to changes of the internal cavities of the protein. we are particularly interested in understanding how conformational changes that accompany the reaction path of molecular transporters couple to changes in the number, shape, and volume of internal cavities that may host water molecules. classical all-atom molecular dynamics simulations can provide detailed molecular movies - that is, trajectories - of the protein motions for a certain period of time. typically, this period lies in the range of tens or hundreds of nanoseconds. such a trajectory contains the time-dependent cartesian coordinates of each atom in the simulation system. the number of coordinate sets in the trajectory depends on the length of the simulation and on the step size used for solving numerically the classical mechanical equations that describe the interactions between the various atoms of the simulation system  <cit> .

we have developed a tool that allows the user to interactively explore the dynamics of cavities in biomolecules. this tool is based on the computation of voronoi diagrams of spheres from which geometrical molecular paths are derived for a single configuration  <cit> . each molecular path is associated with a cavity that can be represented as the union of a set of empty spheres with maximal radius positioned along the path. in our previous work  <cit> , we extended the method for static molecules to the computation of dynamic cavities in molecular dynamics trajectories. in the current paper, we further extend the analysis of the cavity dynamics. the main improvements we present here are as follows:  interactive computation and visualization of cavity volumes.  computation of the intersection volumes of cavities to improve the visual tracing.  improved tracking of single cavities and the visualization of tracked cavities using volume rendering. for the purposes of the current work, we do not distinguish between cavities and channels . we chose the bacteriorhodopsin proton pump as model system to test and illustrate the usefulness of our method. this choice is motivated by observations that the pumping cycle in bacteriorhodopsin is coupled to changes in the location of internal water molecules . because vectorial proton pumping requires tight control of the accessibility to the bulk of the internal proton donor and acceptor groups, understanding the dynamics of internal cavities large enough to host water molecules is an important step towards analyzing the proton-coupled protein and water dynamics of the pump.

for the analysis presented here, we used the last  <dig> ns of an approximately  <dig> ns molecular dynamics trajectory of a bacteriorhodopsin trimer in a hydrated lipid membrane patch. we took  <dig> equally-spaced coordinate sets of one monomer . details of how the molecular dynamics simulations were performed are given in our previous work  <cit> . note that throughout the current report, we used a molecular dynamics run that differs from the previous one  <cit>  in the starting geometry of an inter-helical hydrogen bond.

related work
numerous approaches for computing cavities in biomolecules have been reported, and a thorough overview of these approaches is given in the works of lindow et al.  <cit> . one of the first approaches is hole  <cit> , which uses simulated annealing to place spheres inside cavities, whereas hollow  <cit>  is based on a grid data structure. recently, a new method was proposed that is based on sampling points around a molecule together with a graph-based approach to identify cavities  <cit> . the approach comes with a brushing and linking visualization system.

other methods for computing cavities are based on geometric molecular paths  <cit> . these approaches are similar to the one used in this paper. briefly, geometric paths are either computed using a grid data structure on which dijkstra's shortest path algorithm is run  <cit> , or by applying the concept of the voronoi diagram, or the delaunay triangulation. using a grid data structure or the classical voronoi diagram  <cit>  gives only an approximation of the geometric paths. in contrast, our approach of using the voronoi diagram of the van der waals spheres of the atoms results in an exact determination of the geometric paths  <cit> .

a key aspect of our method is that we can analyze the dynamics of internal cavities. there exist two other approaches for analyzing cavities in time-dependent data  <cit> . one of these approaches  <cit>  is based on using residence probabilities as means to include the dynamics of the molecule. in the second work  <cit> , one starts with a selection of an internal cavity, which is represented by voxels. these voxels are then interactively traced and analyzed over the trajectory until outside of the molecule is reached. the key limitation of these two previous approaches is the dependence on the resolution of a grid data structure.

this limitation is overcome in our voronoi-based method, since for the representation of the time-dependent molecular paths, we use both an analytic description of the geometry of the paths and their spatial extension.

methods
the computation of dynamic molecular paths consists of two steps. in the first step, the pre-processing step, we compute the static molecular paths for each time step separately. for this purpose, we apply the voronoi-based path computation techniques  <cit> , which we summarize first. afterwards, we describe the computation of the cavity volume and the intersection volume of two cavities before we describe the second stage, in which paths are interactively traced over time.

definitions
before we compute molecular paths and cavities, we define them mathematically and describe their relationship to each other. our definition of a molecular path is based on the geometry of the empty space around the atoms. throughout this paper, a static molecular path is a 3-dimensional continuous curve inside the molecule whose distance to the van der waals surface is maximal and does not fall below a given minimal value rp - the radius of a sphere called probe sphere. from the mathematical viewpoint, a static molecular path is a subset of the topological skeleton of the distance function of the van der waals spheres. it consists of maxima, index-2-saddles, and the connecting separatrices. all static molecular paths of a molecule together represent a graph. we call the connected components of this graph path components. the space around a path component where the probe sphere can be placed without intersecting the molecule is called cavity.

based on the definition above, we can now define a dynamic molecular path as a collection of static path components that are connected over time along the trajectory. to form a dynamic path, the cavities of the static path components of consecutive time steps must have sufficient geometrical overlap. this means, that the probe sphere must be able to move from the cavity of the static path of one time step into the cavity of the static path of the following time step without leaving the intersection of the two cavities.

computation of static paths
the complete topology of the distance function of the van der waals spheres of a molecule is described by the voronoi diagram of the van der waals spheres. consider a molecule with n atoms whose positions are pi∈ℝ <dig> and whose van der waals radii are ri∈ℝ, with i =  <dig>  ..., n. the three-dimensional voronoi diagram of spheres decomposes ℝ <dig> into regions, facets, edges, and vertices. for each atom i, a voronoi region vi is defined as the set of all points, whose distance to the corresponding atom sphere is equal or smaller than to any other atom sphere. mathematically it is given by vi = {p | ||p - pi|| - ri ≤ ||p - pj|| - rj, i ≠ j}. the facets, edges, and vertices are defined as two-, one-, and zero-dimensional non-empty intersections of the voronoi regions. a voronoi diagram is called non-degenerated, if the input spheres lie in general positions, so that each facet is defined by the intersection of exactly  <dig> regions, each edge by the intersection of exactly  <dig> regions, and each vertex by the intersection of exactly  <dig> regions. most algorithms can compute only non-degenerated voronoi diagrams. in order to avoid degenerated cases, each atom position is perturbed by an individual random vector whose length is small enough that the resulting error is irrelevant for the structure analysis. an example of a two-dimensional voronoi diagram is illustrated in figure  <dig>  left. the three-dimensional voronoi diagram of the atom spheres of one time step of bacteriorhodopsin is shown in figure  <dig>  right.

based on the definition of a voronoi diagram, the graph given by the voronoi vertices and edges describes all paths in a molecule, whose distance to the atom spheres becomes maximal. this means, all maxima, index-2-saddles, and the connecting separatrices are described by the voronoi vertices and edges. for this reason, during the voronoi diagram computation, we focus only on this graph. the first algorithm to compute a voronoi graph for three-dimensional spheres was presented by kim et al.  <cit> . a revised and optimized version of this algorithm is described in our previous work  <cit> .

after the computation of the voronoi graph, vertices and edges that are not part of static molecular paths need to be filtered, because these elements are either too close to the atoms or lie outside the domain of the molecule. for the filtering of paths outside the domain of the molecule, we use an ambient occlusion approach. the more a voronoi vertex is surrounded by atoms, the less ambient light is received at its position. we geometrically approximate the ambient light for each vertex and remove all vertices that receive more light than a user-defined threshold. to ensure that the probe sphere never intersects the atoms along the paths, we further filter all vertices and edges whose distance to an atom sphere is smaller than the radius rp of the selected probe sphere. implementation details for this filtering are given in our previous work  <cit> .

cavity analysis
after filtering, the remaining graph of voronoi vertices and edges contains all static molecular paths accessible to the selected probe sphere. remember that each voronoi vertex defines an empty sphere tangent to four atom spheres whose voronoi regions created the vertex. furthermore, each point on a voronoi edge defines an empty sphere tangent to the three atoms whose voronoi regions created the edge. for the further analysis and visualization, we approximate each cavity corresponding to a path component by the union of the empty spheres at the voronoi vertices and a set of empty spheres on the voronoi edges. the quality of this approximation naturally depends on the sampling density along the edges. the empty spheres along the voronoi edges are placed such that the largest circle inside the intersection of neighboring spheres is at least rp. with this criterion, a probe sphere is guaranteed to be able to move along all the paths of a path component without colliding with the surface of the cavity approximated by the set of empty spheres. in the following, we use the term cavity also when we speak about the approximation described in this section.

the analysis of the dynamics of cavities involves computing the volumes of single cavities or the intersection volume of two cavities. a correct computation of the volume of a set of spheres, where the spheres can intersect each other, was described, for example, by gibson et al.  <cit>  and petitjean et al.  <cit> . depending on the input spheres, these algorithms are often complex, difficult to implement, and numerically unstable. we, therefore, compute an approximation of the volume using a discretization of ℝ <dig> into small cubes with side length a. for this discretization, we define the volume of a cavity as the sum of the volumes of all cubes whose centers lie inside at least one sphere of the cavity. if a approaches  <dig>  the approximated volume converges to the correct volume of the cavity. the intersection volume of two cavities can be approximated in a similar way. it is the sum of the volumes of all cubes whose centers lie inside at least one sphere of each cavity. using this discretization, we implemented a highly parallel algorithm in opencl  <cit>  which computes the volumes on the gpu in real time. in the following, we first describe the algorithm that approximates the volume of a single cavity. we then extend the method to compute the intersection volume of two cavities.

the first step is to compute the axis-aligned bounding box of the set of spheres representing the cavity. then, we regularly sample the minimal x-y-facet of the bounding box w.r.t. the user-selected side length a of the cube. for each sample, we create an independent thread that computes the volume along the z-direction. for this, we regularly sample the z-direction again with a from the minimal to the maximal z-value of the bounding box. for each sample, we test if it lies inside a sphere or not. in order to perform this in a fast way, we use a 3-dimensional grid data structure to store the spheres. the grid stores a sphere inside a cell if the sphere intersects the cell or completely lies inside it. in this way, for each sample along the z-direction, we detect the corresponding grid cell. then we perform the distance test of the sample with all spheres inside the cell. because the x- and y-coordinates of the grid cells are constant within a thread, the computation of the cell for each sample is greatly simplified. in figure  <dig>  two images of the same time step are shown, in which the cavities are colored according to their volumes. figure  <dig> shows plots of the accumulative volume of all cavities for each of the three monomers of bacteriorhodopsin.

to compute the intersection volume of two cavities, we combine the two sets of spheres into a single one. the first n spheres represent all spheres of the first cavity followed by the spheres of the second cavity. the rest of the algorithm is similar to the one described above. we only have to modify the condition during the distance tests such that the sample must be inside at least two spheres where one sphere has an index smaller than or equal to n and the other has an index larger than n. the performance can be further improved by reducing the number of samples. instead of the bounding box of the combined set of spheres, we can take the intersection of the bounding boxes of both cavities, which again is an axis-aligned bounding box. then, we reduce the grid according to this bounding box and ignore all spheres that do not intersect the box.

tracing of dynamic paths and cavities
the time evolution of path components can be assessed interactively once all static paths have been computed. therefore, the description of a cavity is again given by the empty spheres of the corresponding path component. the tracing is steered by a manual selection of one or more start cavities of interest in an arbitrary time step. the selected cavities are traced over time while the user proceeds to the next time step. to do so, the assignment between two cavities of consecutive time steps is computed by the largest intersection circle of an empty sphere of the first cavity and an empty sphere of the second cavity. if the radius of this largest circle is greater than a user-defined minimal intersection radius ric, the two cavities correspond to each other, otherwise they do not . in principal, ric should be equal or similar to rp, which is the radius of the probe sphere used for the filtering of the paths. in detail a tracing step is performed in the following way.

for each empty sphere s of each cavity in time step t, we detect all empty spheres of all cavities in time step t +  <dig> that intersect s with an intersection circle larger than the user-defined circle ric. for all pairs of spheres that fulfill this condition, the corresponding cavities are mapped onto each other. in our case, the intersection circle of two spheres is defined as the largest circle inside the intersection volume of both spheres.

in order to illustrate the assignment of the cavities during the tracing, an undirected graph, called 'time graph', is created. each vertex in this graph represents a cavity at a certain time step. two vertices of consecutive time steps share the same edge if the corresponding cavities are mapped onto each other during the tracing. in this way, events like cavity splits and merges are represented by the graph.

in addition to the graph creation, we compute identification numbers for the traced cavities. each identification number is related to a specific color and allows the user to easily visually trace single cavities over time . to represent the assignments of cavities, the identification numbers are computed by the following iterative approach. assuming that we have already computed the identification numbers for all cavities in time step t, we now determine the numbers in t +  <dig>  therefore, we compute a matching in the bipartite subgraph, which contains the cavities of t and t +  <dig> and the edges between them. this matching represents the best mappings of the tracing, so if cavity ct is matched to cavity ct+ <dig>  then ct+ <dig> gets the same identification number as ct. all unmatched components of t +  <dig> are splits and all unmatched components of t are not traced to t +  <dig> or merge into one or more components of t +  <dig>  the main problem is the definition of a matching criteria that represents the best tracing correlations. this is mathematically difficult and might be ambiguous. hence, we propose the following heuristic.

for each edge in the subgraph, we compute the intersection volume of the corresponding cavities, as described above. then we sort the edges according to the intersection volumes, starting with the largest one. let ct and ct+ <dig> be the cavities of the first edge in the list. if one of the two components is already matched, we ignore this edge and continue with the next in the list. otherwise, we match ct with ct+1

. we repeat this procedure until all edges in the list are processed. in the last step, we set the identification numbers according to the matching. for all unmatched components in t +  <dig>  we set new identification numbers so that finally each component in a time step gets a unique number. for the initial time step we just number the cavities consecutively.

a further feature of our algorithm is the detection and removal of dead ends. dead ends are cavities that cannot be mapped to a cavity in the following time step during the tracing. these cavities are identified, removed and traced back in time until a splitting in the time graph is found. this allows the user to focus on stable cavities and to reduce visual clutter. another option in our tracing system is to forbid splits. for this, we keep only the matched cavities of t +  <dig> and remove all unmatched ones. this allows the user to explicitly follow single cavities and analyze their locations and dimensions. in figure  <dig>  we have plotted the absolute volume of a single cavity that was traced over time. the tracing of single cavities together with the volume computation also allow us to compare the volume of the cavity with the actual number of water molecules contained in the cavity .

visualization system
based on the definitions and descriptions given in previous sections, we developed a visualization system for interactive path exploration. this system offers all common molecular representations, such as ball-and-stick, molecular surfaces, and secondary structure. the surface representations include the van der waals surface, the solvent accessible surface , the solvent excluded surface , and the molecular skin surface . since the surface computation and rendering techniques are interactive  <cit> , they are directly suitable for dynamic molecular data. onto all molecular representations, attributes can be mapped using pseudo-coloring. these attributes can represent properties of atoms, residues and functional groups. furthermore, filters can be applied to hide parts of the molecule that are of less interest.

for visualizing molecular paths, we render the filtered voronoi diagram, where each vertex is depicted by a small sphere, and each edge that connects two vertices is depicted by a cylinder. the rendering of a cavity is done using the skin surface  <cit>  of the empty spheres approximating the cavity. we use the identification number to color the cavities. this allows the user to easily trace cavities when going from one time step to the next  <cit> .

timeline visualizations
while the 3-dimensional visualization of cavities provides a good representation of their size and location, it does not necessarily allow efficient detection of splitting and merging events that can occur during the trajectory. for this reason, we developed two different timeline visualizations. these 2-dimensional graph representations show topological and geometrical changes in a user-defined time range . note, that the range of time can be changed interactively.

split and merge graph
the first graph representation shows topological events like splits and merges. therefore, each traced cavity is visualized as a polyline from left to right, representing the direction of time. if during the tracing a cavity splits into two or more cavities, the corresponding polyline also splits. accordingly, polylines merge if the corresponding cavities merge. due to the splits and merges, intersections of polylines can occur over time. we could possibly reduce the number of intersections using an optimized graph layout. currently, however, the cavities are simply rendered from top to bottom. to keep consistency between the 3-dimensional visualization and the timeline graph, the same colors are used for both representations. additional information, like the size of a cavity, can be encoded by the line thickness. figure  <dig>  top, shows an example of a split and merge graph.

evolution graph
the second timeline visualization shows the evolution of the traced cavities along a user-defined direction. especially for membrane molecules, whose main path direction is often along the membrane normal, it is interesting to analyze the geometrical evolution of the cavities over time. similar to the split and merge graph, each cavity is depicted as a polyline from left to right. the main difference is that the position and the thickness of a line depends on the position and expansion of the corresponding cavity along the selected direction. using alpha blending, we avoid occlusion of lines. in addition, we add an orthogonal projection of the molecule to the background of the graph. this helps to identify the location of the cavities and to stay connected with the 3-dimensional view. one can see an example of an evolution graph of bacteriorhodopsin in figure  <dig>  bottom. a single cavity that was traced creates a dynamic channel from the cytoplasm side  to the extracellular side . during the first time steps, only cavities above the retinal get interconnected. then, at time step  <dig>  the cavities on the cytoplasmic side of the retinal connect with cavities on the extracellular side. we would like to stress that within our current analysis tool, the connectivity across the retinal schiff base region is a pure geometrical construct: it does not necessarily imply that a physically stable channel forms through the retinal region.

visualization of cavity dynamics
instead of only animating the traced cavities and the molecular structures over time, we also enable the user to visualize the dynamics of a cavity as compact representation in a single image. let us recall that a dynamic path is a union of static path components that are connected over time. the user can extract an arbitrary dynamic path by selecting a path in the split and merge graph. to assist the selection, the evolution graph can be used for an overview of the progression of penetration. once a time region of particular interest has been identified, the user can select a cavity in the split and merge graph. the end of the dynamic path is given by a further selection of a cavity in a subsequent time step. then the path between these two cavities is computed by a modified depth first search. a different path can be achieved by adding further intermediate selections.

the dynamic cavity corresponding to the selected path can be rendered efficiently using again the skin surface approach. therefore, we compute the skin surface of all empty spheres of all cavities belonging to the dynamic path. thus, we get a static representation of a dynamic process. to still keep track of the path dynamics, we add a color-coding according to the time evolution of the cavities .

residence probability visualization
visualizing the skin surface of a dynamic cavity is suitable to analyze its maximal dimension and dynamic progress, but sometimes the user is more interested in the residence probability instead of a hard boundary. this could be the case, for example, when a single cavity is traced that has a stable core. for the time interval of the dynamic cavity, we approximate its residence probability by the proportion of time in which a point is inside the cavity. in practice, this is done by regularly sampling ℝ <dig> inside the axis aligned bounding box of the dynamic cavity. such a sampling can be visualized using volume rendering or iso-surfaces. for volume rendering, we suggest to use a maximum intensity projection, which highlights fixed cores. in figure  <dig>  the maximum intensity projection  of the residence probability of a single dynamic cavity is shown together with two corresponding static cavities of two time steps. the stable core can clearly be distinguished from the more unstable cavity regions. similar techniques are used, for example, in uncertainty visualization  <cit> .

in order to derive an overview of the cavities throughout the entire trajectory, the user can compute the residence probability for all cavities over the whole time interval of the trajectory .

RESULTS
the algorithms described here require the setting of parameters for the filtering and visualization of molecular paths and cavities as well as for the computation of the cavity volumes.

the filtering of molecular paths requires two parameters. the first parameter is the radius of a probe sphere that approximates the accessibility of a solvent or substrate. if the user is interested in cavities large enough to host a water molecule, a starting value for the radius of the probe could be  <dig>  Å. we used this value for both, the path filtering and the tracing of cavities. the second parameter for the path filtering is the threshold used to remove paths that are outside the molecule  <cit> . here we used a threshold of 15%. visualization of the cavities requires a parameter for the skin surface, called shrink factor. too small values of the shrink factor can lead to intersections between the skin surface and the van der waals surface. our tests indicate that such intersections can be avoided by using values of at least  <dig> . moreover, the error between the skin surface and the correct surface of the cavities becomes very small. the last parameter is used for the computation of the cavity volumes. here, we used a cube length of a =  <dig>  Å.

performance
detailed information on the performance for the computation and visualization of molecular paths have already been reported in our previous work  <cit> . here we present the performance measures for the analysis of one monomer of bacteriorhodopsin  using the  <dig> equally-spaced coordinate snapshots from the last  <dig> ns of the molecular dynamics trajectory. for a single time step, the computation of all paths took approximately  <dig>  s on an intel xenon  <dig> with  <dig>  ghz. altogether, the pre-processing took  <dig> min.

the most expensive step for the visualization is the rendering of the solvent-excluded surface together with a clipping of the surface by cavities. to measure the graphics performance, we rendered the surface using an nvidia geforce gtx  <dig> graphics card with a screen resolution of  <dig> ×  <dig> and an average fill rate of 75%. depending on the view direction and the time step, this visualization was done with  <dig> to  <dig> fps. the dynamic visualizations of consecutive time steps requires updating the molecular and the cavity surfaces; these dynamic visualizations gave lower frame rates of approximately  <dig> fps. in the examples given here for bacteriorhodopsin, the computation of the cavity volumes and of the intersection volumes of two cavities was fully interactive. compared to an implementation that ran on a single cpu, we obtained a speed-up of approximately  <dig> times using opencl  <cit>  on the gpu. given the fast computation of intersection volumes and the use of 3-dimensional data structures, the time for the path tracing is negligible.

paths in the bacteriorhodopsin proton pump
to test and illustrate the usefulness of the tool for biomolecules, we used a segment of  <dig> ns from the end of an equilibrated trajectory of a bacteriorhodopsin trimer embedded in a hydrated lipid bilayer. the starting crystal structure  <cit>  indicates coordinates for water molecules inside the protein. of particular importance are water molecules close to the proton transfer groups. consistent with previous molecular dynamics simulations  <cit>  and reaction path computations  <cit> , during the  <dig> ns of the molecular dynamics simulations, we did not observe events in which water molecules pass across the retinal schiff base region.

the analysis of the cavities using the tools presented here allows us to identify cavities large enough to host water molecules and trace their dynamics. with the criterion used in the current tests, the cavity on the extracellular side of the retinal schiff base appears to be large enough to contain four or even five water molecules, yet only three water molecules are found in the crystal structure and in the simulations . this is an interesting finding that clearly needs further investigation. the cavities on the extracellular side for two time steps together with the contained water molecules can be seen in the upper panels of figure  <dig> 

CONCLUSIONS
exploring the dynamics of internal cavities is of potential interest to the study of protein dynamics. methods that allow interactive analysis of cavity dynamics are scarce. such a method was presented recently in  <cit> . in this paper, we reported a versatile tool that brings the user the advantage of higher geometric accuracy, and advanced path and cavity visualization and analysis. to the best of our knowledge, the set of tools presented here and in our previous work  <cit>  is the first that can be used to compute all possible geometric paths with a user-defined minimum constriction size for time-dependent data.

taking advantage of the advanced interface, the user can apply our tool to identify cavities, trace their dynamics, and compute their time-dependent volumes. a global representation of the accessible regions in a biomolecule can be derived by combining the cavities computed at consecutive time steps into a single representation.

the residence probability of all cavities computed for a certain time range gives a good overview of cavity dynamics and could be used to identify cavities that could be subject to closer investigation. when computed for a single dynamic cavity selected by the user, the residence probability gives insight into the dynamics of a particular region of the protein. the residence probabilities can be easily visualized using isosurfaces or maximum intensity projection volume rendering. in the future, visualization of the cavity dynamics could be further enhanced by adding movement illustrations as suggested, for example, by meyer-spradow et al.  <cit> .

the current implementation of the cavity analysis tools allows the user to exploit the timeline graphs to rapidly identify events where cavities split or merge. this task can become difficult in the case of graphs containing a large number of cavities. to circumvent this limitation, in the future we plan to optimize the layout of the split and merge graph.

furthermore, we aim to refine our tool for the analysis of molecular transporters and protein complexes that catalyze proton transfer reactions. this will involve more stringent tests to map the cavities inside the protein to the actual water dynamics. a further improvement would be the use of the electrostatic protein environment for a more physical cavity detection. of particular importance for the quality of the cavity analysis is the time resolution of the molecular dynamics trajectory. since smooth dynamic cavities could be obtained with smaller step sizes than the used  <dig> ps, we suggest that for high-resolution cavity analysis one should generate trajectories with a smaller step size.

competing interests
the authors declare that they have no competing interests.

authors' contributions
anb motivated this work and provided the data set as well as the biophysical background. nl, db and hch developed the main ideas underlying the presented methods. nl implemented the methods. all authors improved the work with many helpful discussions and contributed to writing the paper.

