BACKGROUND
loop-mediated isothermal amplification  is a dna amplification technique with high specificity, efficiency, and speed, performed under isothermal conditions  <cit> . we are using lamp to perform highly sensitive and specific detection of blood-borne pathogens with a new point-of-care instrument that is in development, targeting pathogens such as staphylococcus aureus, pseudomonas aeruginosa, and streptococcus pneumoniae. this approach has the potential to operate at significantly lower cost than taqman pcr detection because it can be performed with less expensive materials and equipment  <cit> .

the most common method for designing lamp primers is to use primerexplorer v <dig> from eiken chemical co. ltd. http://primerexplorer.jp/e/index.html. while primerexplorer is very useful for lamp signature design, as demonstrated by its widespread use, it has several limitations that reduced its usability for our high-throughput whole-genome analysis. first, primerexplorer doesn't support iupac characters other than "atcg" in the input sequence, which are often used in msa representations, because it was not built to handle msa representations. second, primerexplorer only runs in windows operating systems, in a specific web browser. third, primerexplorer cannot design signatures with loop primers, as discussed in nagamine et al.  <cit>  in a single execution, instead requiring two serial executions, which can prevent more optimal primer combinations from being identified. and fourth, primerexplorer is less suited for high throughput analysis since it is limited to a single execution process on a computer, accepts only up to  <dig>  bp sequences, and outputs only html.

lava is designed to be a flexible tool for custom signature design, so it can fulfill varying signature design needs in a high-throughput informatics environment. lava was implemented in perl because perl interpreters are available for every major operating system, the wide use of bioperl  <cit>  in bioinformatics, and bioperl's support for several different sequence alignment formats. to simplify discussion of signature design, we refer to lamp primers as pairs of nested primers: inner, loop, middle, and outer, as shown in figure  <dig>  all signature results from lava are read in the 5' to 3' direction, even if the opposite strand is used to design a portion of the sequence, and are consistent with the traditional nomenclature in notomi et al.  <cit> .

implementation
this is a multiple-sequence alignment  approach to lamp signature design. lava's processing steps are outlined in figure  <dig>  either a single sequence or a pre-computed msa can be used as input. the individual sequences from the msa are used for primer enumeration, and design parameters can be adjusted for each primer role. once potential primer locations are found, they are usually down-selected based on overlap and relative score, which keeps the number of analyzed combinations down. after primers have been identified that are shared among all the individual sequences, combinations of primers for the roles of inner, loop, middle, and outer, are analyzed to select lamp signature candidates.

find potential lamp primers
msas are read as input with bioperl's bio::alignio module, which understands many different alignment formats. long msas can sometimes be used as input, but have heavy computer resource requirements, and using long msas can result in fewer identified signature candidates.

lamp signatures that cover individual non-msa sequences  <dig> kbp in length can take up to  <dig> minutes on a desktop computer if few design constraints are specified. identification of signatures for msas of this type is usually finished in minutes, because only regions of conservation are considered in this version of lava. msas can have both longer and shorter runtimes, depending on the content of the msa. msas approaching 100% conservation will run similar to single sequences. as the level of conservation decreases, so will lava's runtime up to a point.

we suggest using the lava wrapper slava  for individual sequences and highly conserved msas over  <dig> kbp. slava splits the msa into sections, executes lava for each individual section, and combines the results into a single set of non-identical signatures. running a series of smaller chunks through slava is likely to result in more optimal signature combinations, because each sub-analysis can identify more primer candidate regions.

primer enumeration is performed by modules which implement the oligoenumerator interface. by default, this is done with primer <dig>  <cit> , executed through bioperl's bio::tools::run::primer <dig> module. the primer search is separately run for each primer context of inner, loop, middle, and outer. default primer design parameters, which can be individually customized, were chosen based on our primer design rules for other primer-based amplification techniques  <cit> . lava's default primer design parameters are listed in table  <dig>  along with other relevant parameter defaults discussed in this section. these defaults should only be considered as a starting point for signature identification, because a wide range of parameters yield successful lamp assays.

the first sequence in the msa is the basis for generating primers. the remaining msa sequences are used to filter out primers that are not identically present in every target sequence. sub-sequence with "n" or "-" characters is not considered a valid primer target. primers that are shared among all msa sequences are returned as potential signature components by the oligoenumerator. during primer generation, a maximum poly-base restriction is enforced, limiting number of consecutive identical bases in a potential primer region.

primer analysis and scoring is performed by primeranalyzer modules. penalties get applied to primers and combinations of primers in two separate places. first is as an individual primer, and second is as a combination of primers for a lamp signature. the primeranalyzer penalty for individual primers in this version of lava is simply the primer <dig> penalty score, which reflects how closely the primer comes to the design parameters. for combinations of primers, the penalty also includes factors for for inter-primer spacing. the assessment of the primer by the primeranalyzer is returned as primerinfo objects, which are used to provide primer sequence information for signature output. this may appear redundant because the primers already contain the original sequence information, but since different scores can exist for the same primer in different roles, and some analysis methods may impose context-sensitive sequence restrictions as part of score calculation, relying on primerinfo guarantees that the correct sequence is associated with the analysis result for each context.

filter down by overlap and score
to help control the number of primer combinations that need to be scored, the set of candidate primer regions is down-selected based on overlap. many potential primers often target the same general sequence region. of the available primers, the best scoring primers are given priority during down-selection. the lower scoring overlapping primers are removed from consideration if they overlap the higher priority primers by a given percentage.

evaluate primer combinations
finally, primers are combined into nested sets that can serve as lamp signatures. the overall lamp signature penalty is the weighted combination of inner, middle, and outer pair penalties, plus context-dependent spacing penalties. inter-primer spacing penalty increases as distance increases. the default objective function includes slightly decreasing weights for the penalties of inner primers, middle primers, outer primers, and loop primers respectively.

if the minimum number of signatures is not identified for the target, the entire primer combination process is repeated with different primer overlap cutoff percentages. the amount of overlap permitted is set for each iteration, based on a "schedule" of primer overlap percentages. since these repeat attempts are effectively multiple runs of lava, often with more individually considered primers, regions with difficult to identify signatures will take longer to process. processing time can increase exponentially as the primer overlap restrictions become lighter.

RESULTS
we created lamp signatures with both lava and primerexplorer for comparison. the locus we targeted is an  <dig> base-pair long sequence of staphylococcus aureus, starting at base  <dig> of the rf <dig> genome  at the 3' end of glta through the 5' start of gltb. this locus is interesting to us because it is a place where a kpath  <cit>  run identified a taqman signature candidate that is both conserved among all targets, and is unique to the targets compared to all other known sequence, which makes this candidate region potentially valuable for s. aureus detection. input for signature design was a sequence representation of all the genome sequences in table  <dig> 

eiken's primerexplorer was run with default parameters. lava was run with parameters designed to be similar to the primerexplorer defaults, but with an adjusted melting temperature target range to compensate for the difference in calculated temperatures between primer <dig> and primerexplorer. these parameters specifically allow a wider acceptable tm range from lava's defaults, and a longer poly-base limit. the best scoring signature results from both programs are provided in table  <dig> 

the lava selection for a lamp signature is nearly identical to the primerexplorer selection, as seen in figure  <dig>  we believe the variations between result sets are the result of subtle differences in calculation methods for primer metrics, and would not represent a significant difference in signature behavior. it is likely that lava penalizes tm differences slightly more than primerexplorer. the result is that lava's top signature selection has a slightly smaller range of melting temperatures.

as an additional example case, we've also created lamp signature candidates for mycobacterium tuberculosis, as listed in table  <dig>  using default lava parameters. we have not screened these in the laboratory, but they represent conserved and unique signatures that we believe would make sensitive and specific detection assays, similar to some of the assays in iwamoto et al.  <cit> . a pre-computed msa of all  <dig> completed mycobacterium tuberculosis genomes available was used as input, including known drug-resistant genomes, and non-unique regions were masked out so only unique sequence is used for signature design.

discussion
when developing lava, getting usable lamp signatures was our priority, so we have not spent time on optimizations, or on many of the features we desire. operationally, lava has fulfilled our needs, but there are several components that are worthy of further attention. this discussion explores aspects of lava's design and operation that we believe will improve or augment lava's performance the most.

lava currently excludes dimerization checks during primer selection, which would contribute to the relative scores of signature candidates. this would have been accomplished using the unafold  <cit>  libraries to analyze inter-oligo interactions, and primer self-annealing. this is currently omitted because in some instances, the increase in required processing time to analyze primer combinations was unacceptable. predicting inter-oligo hybridization is still a serious concern with regards to lamp signature design, so we separately perform dimerization analysis on the finished signature candidates, and avoid using candidates with high dimerization potential. we will include dimerization checks as part of the native signature design when possible.

there are two primary options for controlling the number of primer combinations that need to be analyzed. the first is limiting the number of primer candidates that primer <dig> can identify in each execution. this can be accomplished by narrowing the acceptable range of primer design parameters such as length and melting temperature. primer <dig> output can also be limited by explicitly setting a maximum number of primers for primer <dig> to generate. the second option is to set stricter primer overlap limits. stringent overlap limits may make it possible to perform the comprehensive dimerization checks discussed above within reasonable processing times.

we have observed through computer predictions including  <cit> , that an optional linker sequence, used to connect the two components of the fip and bip , has the potential to disrupt the lamp reaction. in general, calculations based on a "tttt" linker sequence predict a slight increase in sensitivity in many of the likely hybridization configurations, because of a slightly longer and more stable base pairing at the 5' end of the hybridization. however, in one instance, this linker greatly increased predicted primer self-hybridization because of an unfortunate co-incidence of self-similar sequence. the chance of this being a problem increases if the number of consecutive identical bases in the designed primers cannot be limited. improper choice of linker sequence can also increase predicted primer dimerization. a more context-aware linker design should yield better results than always using a single linker sequence. one day, we hope lava will suggest the most appropriate linker sequence, or omission of the linker, for each designed signature, to help support desired assay behavior. one potential approach is to design linkers that are the least complimentary to the loop regions adjacent to the f <dig> region in the lamp dumbbell structures as possible. another potential approach is to design linker-free primers like poon et al  <cit> , which is currently the default behavior of lava.

when designing lamp signatures, we found there is a general pattern we fell into of relaxing design parameters to identify signatures for difficult to target sequences. on average, the order which we adjusted parameters were to increase melting temperature range, decrease primer minimum length, and finally to increase signature max length.

the lava wrapper slava was implemented as a serial execution of individual msa segments. this is provided to enable signature design for long sequences such as whole bacterial genomes, and also to demonstrate how a parallel implementation would be structured. during the further development of lava, we hope to transition into a high-performance grid computing environment with a parallel lava implementation.

we are separately developing a oligoenumerator for creating primers with degeneracy, which are primers with base variations designed to accommodate strain variation. so far, we have used a "masked" msa representation of the target to design signatures. however, since primer <dig> does not accept sequence containing the standardized iupac character codes, the msa representation has so far been limited to perfect consensus sequence. the fundamental difference in approach for designing primers with degeneracy, is that primers are enumerated based on all the sequences of the msa, instead of based on only the first sequence. our proof of concept requires different internal representations of sub-sequence msas, but is built using the existing oligoenumerator and primeranalyzer interfaces.

CONCLUSIONS
we have designed and demonstrated new software for identifying signature candidates appropriate for lamp assays. lava is available as open source, downloadable from the project home page. the focus of lava is to improve on other currently available software by accommodating high-throughput signature design, while providing a framework to develop more sophisticated algorithmic and analytical tools. we have used lava to design lamp signatures for several organisms, which are currently undergoing bench screening and optimization for use in a point-of-care detection instrument.

availability and requirements
project name: lava-dna

project home page: http://lava-dna.googlecode.com/

operating system: unix/linux

programming language: perl

other requirements:

bioperl  <dig> . <dig> or higher 

primer <dig>  <dig>  or higher 

license: bsd

authors' contributions
ct wrote the lava software. eav oversaw the pathogen informatics. brb and jmd helped define the optimal assay constraints. sng and mwl contributed to the lava architecture and design. all authors read and approved the final manuscript.

