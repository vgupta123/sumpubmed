BACKGROUND
large single nucleotide polymorphisms  research projects across the human genome are important studies for biological and biomedical science, with many researchers seeking to use snps as predictors for susceptibility to disease. traditional approaches to identify snp interactions usually use bio-statistical methods such as contingency tables combined with k-fold cross-validation, but the vast number of possible combinations makes the application of traditional methods difficult. therefore, current research is aimed at combining biostatistics and machine learning in family-based and case–control association studies .

multifactor dimensionality reduction   <cit>  is a well-known hybrid technology that combines a 2-way contingency table, k-fold cross-validation, and a dimensionality reduction technique. mdr belongs to a group of non-parametric statistical methods used to determine high-order gene–gene interactions in case–control studies  <cit> . typically, multi-locus genotypes are classified into high-risk and low-risk classes, allowing the number of genotype predictors to be effectively reduced from n dimensions to one dimension. this reduction influences the contingency table allowing for the quick computation of statistics including the accuracy rate, odds ratio , p-value, etc. many modifications and extensions to mdr have been proposed and these can be divided into three groups. the first group contains modifications and combinations of biostatistics in mdr; this group includes entropy-based interpretation methods  <cit> , the use of or  <cit> , generalized linear models  <cit> , log-linear methods  <cit> , bayesian posterior probability  <cit> , and model-based methods  <cit> . the second group focuses on particular data problems, such as imbalanced data  <cit> , permutation testing  <cit> , and missing data  <cit> . these extensions and modifications of mdr have been used to address different situations encountered in disease analysis. many disease studies have thus successfully employed mdr to detect interactions between particular genes, including those for coronary artery disease  <cit> , hypertension , bladder cancer  <cit> , and autism  <cit> . finally, the third group aims to reduce mdr computational time, using methods including parallel implementations  <cit>  and the use of hardware graphics processing units   <cit> . although these studies use gpus to reduce mdr running time, the problem of factorial operation in mdr still presents a challenge.

this study seeks to develop a new framework to improve mdr computational times in investigations of high-order gene–gene interaction. the framework retains the significant factors to reduce the number of multi-locus evaluations in mdr. improvements in computational time were measured over  <dig> runs on a simulation data set and a genome-wide analysis of chronic dialysis epistasis.

method
mdr algorithm
mdr is an attribute construction approach that reduces the data dimensionality by seeking to identify combinations of multi-locus genotypes that are associated with either high-risk or low-risk groups. the combination of two or more locus genotypes into a single attribute can be used to effectively estimate the risk associated with gene–gene interactions in relation to a disease. this study uses the imbalanced functions proposed by yang et al.  <cit> . mdr can be divided into five separate processes. in the first step, the data are divided into  <dig> parts for ten-fold cross-validation. nine-tenths of the data are classified as training sets and the remaining 1/ <dig> is used for testing. the second step is the construction of a contingency table. for a given interaction order n, n snps are selected from the data set. l is defined as a set of multi-locus genotypes at n loci and/or environmental factors. l can be represented as an n-dimensional vector:  <dig> l=l <dig> l <dig> l <dig> …,ln 

where l represents an snp factor and/or environmental factor.

next, l is used to calculate the case–control ratios for each multi-locus genotype. the ratio between cases and controls is evaluated by equation .  <dig> fl=n*∑j=1p*ulpjp* 

where ula=1∀l∈a0∀l∉a,∀l∈l 

where the cases are labelled p and the controls are labelled n. p* and n* respectively represent the sizes of cases and controls in the training set. here j represents the index of samples in the cases and controls. pj represents the jth sample among the cases and nj represents the jth sample among the controls. u represents a match  if all multi-locus genotypes l in vector l match p; a mismatch is given a score of “0”. u represents a match  if all multi-locus genotypes l in vector l match n; a mismatch is given a score of “0”. for example, a 2-order interaction model consisting of snp <dig> and snp <dig> has nine multi-locus genotypes, i.e., aa-aa, aa-aa, aa-aa, aa-aa, aa-aa, aa-aa, aa-aa, aa-aa and aa-aa. the aa represents the homozygous reference genotype, while aa represents the heterozygous genotype and aa represents the homozygous variant genotype. in the first multi-locus genotype , the ∑j=1p*ulpj includes  <dig> samples matching aa-aa among the cases and ∑j=1n*ulnj includes  <dig> samples matching aa-aa among the controls. evaluation with eq.  <dig> yields a value of  <dig> , which is computed by /; p* and n* are respectively  <dig> samples among both the cases and controls.

after the ratio calculation, each l is labelled 'h'  if the ratio of cases to controls is equal to or greater than a threshold of t ; otherwise it is labelled 'l' . once all ls are labelled ‘h’ or ‘l’, a new binary attribute is created by pooling the high-risk genotype combinations into one group and the low-risk genotype combinations into another group. this means that the four frequencies  can be computed in a 2-way contingency table. finally, each possible l computes a training classification error rate for each n-way interaction in the training set. the classification error rate is given by equation .  <dig> classificationerrorrate= <dig> ×fntp+fn+fpfp+tn 

among all n snp combinations, the best model with the minimum classification error rate is selected by the training step. the third step evaluates the remaining 1/ <dig> of the original data set . this step creates an mdr attribute for the testing set using the n snps that have the minimum training classification error rate. in addition, the best model in each cross-validation is collected and named the cross-validation consistency . in the fourth step, the procedure is repeated  <dig> times  so that each sample is included in the testing set once, and the resulting classification error rates of each of the ten models in cvc are averaged. in the last step, the best mdr model with the highest frequency in cvc is selected.

fast mdr algorithm 
fmdr proposes a new framework to improve the mdr computational time. figure  <dig> shows the fmdr flowchart consisting of five steps:  data processing,  selection of training and testing sets,  evaluation of all possible combinations,  identifying the best model, and  statistical analysis of the best model. in the fmdr, the number of selected snps is limited to two at the outset. the framework is represented by the thick frame in steps  and  . in step , the framework checks whether or not the number of loci is equal to two. if yes, all available two-order locus combinations amongst the loci are created and regarded as conditions. all these conditions are then used to evaluate the contingency table ), and the classification error rate in each combination is estimated by equation  ). in step , all two-order locus combinations are sorted based on the classification error rate, and then the results of the best n% combinations with the minimum classification error rate are saved into the ith memory where i is the ith-fold cross-validation. when ten cross-validations are computed, the best 2-loci model is output to show related gene–gene interaction information. if the number of order exceeds two , each cross-validation uses the corresponding memory and the recorded results of the best n% combinations to create the available combinations ), i.e., conditions. in step , these conditions are evaluated using the contingency table, and the classification error rates of the conditions are estimated in step . the results are then sorted and the best n% combinations are saved into ith memory to analyze the next interaction order. this process tremendously reduces the number of available combinations. the processes are repeatedly implemented until the defined number of selected snps is analyzed.fig.  <dig> fmdr flowchart



illustrative example to fmdr and statistical analysis
the supplementary additional file  <dig> provides an example to illustrate how the fmdr works, and the supplementary additional file  <dig> explains the statistical analysis method.

RESULTS
results on the simulated data set
all simulated models set the  <dig> attributes with a heritability of  <dig> . the minor allele frequencies  were  <dig> ,  <dig> , and  <dig> . the sample sizes were  <dig> and  <dig>  in which the total number of cases is equal to the total number of controls. the simulation data was generated using gametes, software used for generating complex n-loci models with random architectures  <cit> . the settings and results of the six models are shown in table  <dig>  figure  <dig> shows the power analysis box plots of six models. a summary of the six simulation data set shows that the difference between mdr and fmdr was statistically significant for 4-loci and 5-loci, but there was only a slight difference between the averages of the two methods.table  <dig> a paired t-test comparison of the power analysis between mdr and fmdr for 2- to 5-loci

model1
p-value2

1model 1: maf =  <dig> , sample =  <dig> , model 2: maf =  <dig> , sample =  <dig> , model 3: maf =  <dig> , sample =  <dig> , model 4: maf =  <dig> , sample =  <dig> , model 5: maf =  <dig> , sample =  <dig> , model 6: maf =  <dig> , sample =  <dig> ; 2
p-value were estimated from pairwise t-test; 3-: the same power analyses between mdr and fmdr

fig.  <dig> performance comparison between mdr and fmdr on six simulated models for different minor allele frequencies  and different sample sizes . for all models, heritability h
2 =  <dig> , and maf includes  <dig> ,  <dig> , and  <dig> . for each model,  <dig> datasets are generated by randomly sorted samples. the figures show the box plot, where the boundary of the box closest to zero indicates the 25th percentile, a line within the box marks the median, and the boundary of the box farthest from zero indicates the 75th percentile. error bars near the top and bottom of the boxes respectively indicate the 90th and 10th percentiles



figure  <dig> showed the execution times for the simulation data sets. the mdr execution times in all locus orders were collected in a stand-alone test. the total of all fmdr execution times for all locus orders was collected since fmdr uses a continual analysis strategy. for the six simulation data sets, mdr and fmdr required similar durations to implement the 2-loci analysis. when comparing 2-loci and n-loci  in model  <dig>  the growth times between mdr and fmdr for 3-loci to 5-loci were  <dig>  vs.  <dig> ,  <dig>  vs.  <dig> , and  <dig>  vs.  <dig>  . similarly, figure c <dig> of supplementary additional file  <dig> compares the 2-loci and n-loci in models 3– <dig>  we compared the growth time between  <dig> and  <dig> samples in different mafs. for maf =  <dig> , mdr and fmdr for 2-loci to 5-loci were  <dig>  vs.  <dig> ,  <dig>  vs.  <dig> ,  <dig>  vs.  <dig> , and  <dig>  vs.  <dig> . similarly, figure d <dig> of supplementary additional file  <dig> shows the growth times between mdr and fmdr in other mafs . the results for the simulation data sets showed that fmdr effectively reduces mdr computational time.fig.  <dig> mdr and fmdr execution times on six simulated models for different mafs and different sample sizes . the horizontal axis represents the execution time in log <dig> milliseconds, while the vertical axis represents the number of loci in the model



results on the chronic dialysis data set
the  <dig> mitochondrial snps in the d-loop region of chronic dialysis patients were obtained from investigations conducted by chen et al.  <cit>  that enrolled  <dig> chronic dialysis patients and  <dig> healthy controls from unrelated ethnic chinese in taiwan. the results revealed that chronic peritoneal dialysis patients suffer from higher oxidative stress than healthy subjects; this elevated oxidative stress alters the number of copies of mtdna in peripheral leukocytes. the possible complicated networks with direct or indirect cross-communication among the  <dig> snp candidates were explained. the ratio of controls  to cases  was  <dig> : <dig>  we randomly sorted the samples in the data set to generate  <dig> data sets each of which was then divided into ten groups for ten-fold cross-validation. the ratios of cases to controls amongst  <dig> training sets range from  <dig> – <dig> , with a mean  ratio of  <dig>  . each data set was used once to test mdr and fmdr.

for the  <dig> tests, we summed up the frequencies of the results based on the cross-validation consistency  and the classification error rate in each test. the accuracy and or of the best candidate model was evaluated. table  <dig> shows the best, worst, and mean  in the  <dig> tests for mdr and fmdr. for the 3- –6-loci models producing the best accuracy amongst the  <dig> tests, both mdr and fmdr had the same candidate model, and also had the same accuracy and or. in the models for 3- to 6-loci with the lowest accuracy amongst the  <dig> tests, mdr and fmdr were different slightly, and the accuracy and or also differed. a box plot was used to compare the two methods for 3-, 4-, 5-, and 6-loci interactions. figure 4a and b respectively shows the accuracy and or box plot of mdr and fmdr. paired t-test comparison results indicate that the accuracy and or values for 3- –6-loci analysis over  <dig> test runs were similar for both mdr and fmdr. figure 4c shows the box plot of the power results of mdr and fmdr for four order interactions. as the order of interaction increases, both mdr and fmdr shows increasing power values. all powers of mdr and fmdr exceeded  <dig> . a summary of the  <dig> test runs shows that the difference between mdr and fmdr was statistically significant for 3- and 6-loci, but the average difference between the two methods is very slight, i.e., − <dig>  at 3-loci and  <dig>  at 6-loci. in addition, the powers in the 4- and 5-loci analysis over  <dig> test runs are similar for both mdr and fmdr.table  <dig> analysis results of the chronic dialysis data sets from mdr and fmdr




p-value1

or



1
p-value were estimated from pairwise t-test; 2-: the same accuracies between mdr and fmdr

fig.  <dig> performance comparison between mdr and fmdr for the chronic dialysis data set.  accuracy box plot for mdr and fmdr,  or box plot for mdr and fmdr, and  power analysis box plot for mdr and fmdr for  <dig> tests. for each test, the samples in the data set are randomly sorted, and then applied to mdr and fmdr



in fig.  <dig>  for the real data set, both mdr and fmdr required similar amounts of time to implement the 2-loci analysis. when comparing 2-loci and n-loci , the growth times between mdr and fmdr are  <dig>  vs.  <dig> ,  <dig>  vs.  <dig> ,  <dig>  vs.  <dig> , and  <dig>  vs.  <dig> . these results ind-+icate that the proposed framework can reduce the execution times required by mdr for high-order interaction analysis.fig.  <dig> execution times of mdr and fmdr for the real data set with chronic dialysis. the horizontal axis represents execution time in log <dig> milliseconds, while the vertical axis represents the number of loci in the model



discussion
the substantial computational limits of mdr make it difficult to detect nonlinear interactions of high-order combinations of snps amongst a large number of snps. determining all combinations of snps in mdr entails calculating c × v = n!/ × v combinations, where n is the total number of snps, m is the number of factors considered for a model, and v is the number of cross-validation intervals. in big-o notation, mdr has a time complexity of o.

exhaustive search approaches, e.g., genetic algorithm   <cit>  and ant colony optimization   <cit>  are important for improving mdr computational times. ga and aco use small combinations to find the acceptable n-loci gene–gene interaction model in a huge combination space, thus effectively reducing the computational time requirements. however, all parameters can influence the results of detected gene–gene interaction. the parameters of population size, generation size, random seed, and algorithm setting  are difficult to define to successfully find the n-loci gene–gene interaction model for data sets of different sizes, i.e., sample size and snp size. therefore, current research directions focus on the use of software and hardware to improve mdr computational times.

many researchers employ software  <cit>  and hardware  <cit>  techniques to speed up mdr. bush et al. proposed a framework which divides the mdr processes into three classes:  a data handling class,  a model generation and processing class, and  a result storage class. these three modular classes were implemented in parallel, finding that parallel mdr can be used to analyze high-order interactions of small data sets and can feasibly perform lower-end genome-wide analyses. greene et al. and sinnott-armstrong et al.  <cit>  employed modern computer graphics processing units  to speed up mdr since gpus have a higher memory bandwidth and computational capability than central processing units . still, the factorial increase of time complexity remains an obstacle.

the fmdr procedure is a type of greedy search strategy  <cit> , and is based on joint effect property  <cit> . the joint effect can be divided into the three effects:  overall effect,  n-order interaction effect, and  main effect. in epistasis, overall effect indicates the common effect amongst n risk factors. the main effect indicates any effect could serve as a guide to determining the correct multi-locus interaction. the n-order interaction effect indicates the least proper subset of the loci also interacts epistatically. the highly-associated snps have a high probability of being a significant factor in the next-order interaction. a low classification error rate in an mdr model indicates a high statistically significant risk of n-loci effects. suppose all 2-loci combinations in four snps are sorted according the classification error rate as {snpa, snpb}, {snpb, snpc}, {snpa, snpc}, {snpa, snpd}, …, {snpb, snpd}. the {snpa, snpb} is the best model in 2-loci gene–gene interaction. the {snpb, snpc} and {snpa, snpc} combinations are both probably significant models for gene–gene interaction, but neither is the best model. snpc has the highest probability of joining the 3-loci gene–gene interaction because it’s strong association with snpa and snpb . on the other hand, {snpb, snpd} is the worst model; it means that adding snpd via snpb into the gene–gene interaction network is the least likely scenario. snpd has a high probability of being added via the snpa effect because {snpa, snpd} belongs to the top model with a low classification error rate. therefore, the {snpb, snpd} can be deleted, and all combinations based on {snpb, snpd} in 3-loci combination are not evaluated. these properties allow us to apply the greedy search strategy to find the significant gene–gene interaction model. moreover, fmdr only sets one parameter to select the number of best combinations with the low classification error rate, which are then saved into the memory. we suggest the optimal choice for n is the dynamic adjustment according to the order of interaction, i.e., n =  <dig> with 2-order gene-gene interaction and n =  <dig> with 3-order gene-gene interaction.

the idea behind fmdr is the retention of good results for high-order interaction, indicating the available combinations are generated from n% good results, i.e., n% results × n combinations, where n is the total number of snps. therefore, fmdr has a time complexity of o. the execution time of fmdr is much shorter than that of mdr in high-order gene–gene interactions because fmdr effectively decreases the number of possible unnecessary computations. fmdr includes the following advantages:  fmdr can effectively reduce the computational time required by mdr for high-order interactions,  the best model has a low classification error rate and a high sensitivity for disease prediction, and  fmdr can easily be combined with existing mdr methods.

CONCLUSIONS
fmdr based on the joint effect property reduces mdr computational time by retaining results for higher interactions. the retained number of results can be formularized and improved using statistical methods and mathematic theories in future work. the time complexity can be easily computed by estimation of a function. we suggest that the function be designed as a dynamic adjustment based on the data set size and the order of interaction. the flexible framework underlying fmdr can effectively improve the limitations of existing mdr methods in finding high-order interactions.

additional files
additional file 1: 
example to illustrate the fmdr calculation process.


additional file 2: 
statistical analysis.


additional file 3: 
figure to illustrate the growth times for comparing 2-loci and
n
-loci.


additional file 4: 
the figure for growth times comparing  <dig> and  <dig> samples in three mafs.




competing interests

the authors declare no conflict of interest.

authors’ contributions

chy coordinated and oversaw this study. ydl participated in the design of the algorithm and writing the program. lyc and csy provided the snp background and wrote the manuscript. all authors read and approved the final manuscript.

