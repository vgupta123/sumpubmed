BACKGROUND
the progress in the field of experimental techniques in systems biology in recent years has contributed significantly to the analysis and understanding of gene regulatory networks  <cit> . the simultaneous measurement of the expression levels of thousands of genes has become possible with these techniques. the time series data of gene expression obtained from the high-throughput techniques typically contain comprehensive information about the structure of the system. however, reverse engineering that data for identification of interactions between genes and reconstruction of the regulatory network is still a challenging problem.

a variety of modeling approaches have been developed recently for inferring genetic networks from gene expression data. identification algorithms are dependent on how the network is modeled  <cit> , and include boolean logic  <cit> , bayesian  <cit> , and information-theoretic approaches  <cit> . several approaches use steady state information, the data of which typically coming from “structural perturbations”   <cit> , which might be difficult to obtain for some systems. alternate approaches using time series data include dynamic bayesian networks  <cit>  and differential equation-based models  <cit> . of the latter, initial reports on reverse engineering gene networks assumed linear model approximations  <cit> . while such approximations retain simplicity in the identification algorithm, it may be inadequate in predicting strongly non-linear systems. one way of representing non-linear gene dynamics is the s-system model, a power-law formulation which incorporates both production and degradation terms of the genes. previous studies have looked into network identification of non-linear systems with the s-system  <cit> , which presents a more challenging task than identification of linear systems. in addition to non-linearities, gene regulatory networks are highly noisy and stochastic  <cit>  which can lead to difficulties during network inference. therefore, a strong need exists for robust network identification of non-linear systems in the presence of high system variability, while also being able to incorporate relevant biological information.

in the current report, we model the dynamics of gene expression by s-system formulation. upon doing so, we formulate the network identification algorithm as a bi-level optimization problem, governed by the hypothesis of network sparsity. network sparsity has been experimentally observed in various biological systems such as the visual system of primates  <cit> , auditory system of rats  <cit> , and olfactory system of insects, to name a few. the sparsest gene network has also been eluded to be a robust one  <cit> . governed by the hypothesis of sparsity of network connections, the target of our network identification algorithm is to find the network structure with minimum number of connections that is in agreement with the experimental data at an acceptable level of tolerance. we have earlier proposed an optimization formulation to identify the regulatory network from time profiles of gene expression data  <cit> . the previous algorithm was based on the following approximations:  gene expression dynamics were approximated by linear ordinary differential equations ; and  the system was treated as deterministic by considering only the mean experimental data for the analysis. in the present algorithm, we developed a novel formulism which utilizes bootstrapping to identify robust networks from noisy data. the aforementioned approximations are removed by  representing the gene expression profile with an s-system model and  directly accounting for variability in experimental data. our algorithm, as detailed in the methods section and represented in figure  <dig>  enables identification of robust networks from an inherently non-linear and noisy system. we test the performance of our algorithm in various case studies including in silico and experimental data sets.

RESULTS
the performance of the developed bi-level integer programming algorithm is demonstrated on three case studies. in the first case study, we consider in silico gene expression data generated from a benchmark artificial 5-gene network model. in the second case study, the applicability of the algorithm on a larger network is tested using an in silico 10-gene network. in the third case study, the algorithm is applied to an experimental data set of the sos dna repair system in e.coli.

i case study 1: five gene network model
the purpose of this case study is to validate the algorithm on a small network with and without experimental noise. the chosen 5-gene network model  <cit>  has been used as a benchmark problem by different research groups to test the validity of their algorithms  <cit> .

ia network identification without noise
using the s-system formulation, the 5-gene network model can be represented by the system of five coupled nonlinear ode, shown in additional file  <dig> as equation  <dig>  <cit> . in order to test our identification algorithm on this model we first generate in silico data by integrating these equations, which we use as experimental data for the identification algorithm. to formulate the bi-level optimization problem, n2 =  <dig> binary variables are introduced corresponding to each of the five connections. genetic algorithm , used to solve the upper level integer programming problem, does not have a convergence criterion. standard practice is to evolve the population for enough generations until no significant improvement is observed. figure  <dig> illustrates the convergence characteristics of the ga for this example; at over  <dig> generations, the optimal output remained invariant. the efficiency of the algorithm depends on appropriate choice of starting population, as well as other involved parameters, in addition to the number of generations. the initial population size plays an important role in the quality and efficiency of the algorithm. a small population size may lead to local convergence or extremely large number of generations. to avoid that a population size of  <dig> was chosen and the algorithm evolved for  <dig> generations. the crossover probability is chosen to be at a standard value of  <dig> , and the chosen mutation probability of  <dig>  was expected to maintain diversity in population. since the data contain no noise, the tolerance in the lower level least square optimization problem has been kept at a very low value . typically least square optimization routines are very sensitive to the user defined initial guess. to make sure that the algorithm can identify the underlying network structure even without any a priori information, we deliberately assigned the initial guess values for the least square optimization problem to be largely different from the actual values, and tested the algorithm for various combinations of the initial guess.

1b network identification under data uncertainty
the performance of the algorithm is next analyzed in the presence of experimental noise, generated by adding 5% gaussian noise to the time-course data generated from equation  shown in additional file  <dig>  three different data sets are generated in this fashion to represent three experimental replicates of the samples. these three data sets are then resampled using bootstrapping to generate  <dig> artificial data sets. the network identification algorithm was then applied at each of the data sets to generate  <dig> alternate networks. the presence of noise in the data restricts the accuracy by which the predicted profile can agree with the data. hence, the tolerance was relaxed to  <dig>  and the ga code was evolved for  <dig> generations while retaining the population size of  <dig> the ensemble of alternate networks thus generated was analyzed for frequency of appearance of each of the connections ) which was hypothesized to directly correspond to its robustness against experimental noise.

the expected values of the s-system parameters estimated at 90% confidence level are represented in table  <dig>  and table  <dig> , which demonstrates the excellent performance of the algorithm in identifying network parameters even from noisy data. while the error of the rate constants  is relatively high, it should be noted that the results of the network identification would not be as sensitive to these parameters as to the connectivity values, and therefore the rate constant values could vary significantly and not affect the gene profiles or the recall/precision. furthermore, the error on the reaction orders  is very low, further demonstrating the accuracy of the network identification. the heat map in figure  <dig> further shows the algorithm’s effectiveness in finding a tight range of reaction orders of the robust connections in the network.

to evaluate the accuracy of the formulism under increased uncertainty, the algorithm was tested under various amounts of added noise. as one would expect, the accuracy of the algorithm depends on the level of noise added to the in silico data. table  <dig> shows this trend, with the precision and recall being compared with  <dig>   <dig>  and 10% noise. increasing noise increases the number of false negatives, thereby reducing the recall. interestingly, precision actually improves with increasing noise, indicating less false positives. this trend seems to converge, with both the recall and precision holding constant at  <dig> and 10%. figure  <dig> shows the identified network with a data set incorporating 10% white gaussian noise. the algorithm does not identify any connection which is not in the actual network  and is therefore able to achieve a perfect precision. however because of noise, the algorithm also fails to identify three of the actual connections , hence resulting in a recall of  <dig> . it should be noted that the frequency threshold affects the results, and depending on the system, needs to be tuned. figure  <dig> shows the sensitivity of the recall and precision to this threshold value.

white gaussian noise was added at different amounts to the five-gene network in silico data. each of these data sets was used in the network identification algorithm, with their performance measured by the metrics of recall and precision.

while the analysis is performed on  <dig> bootstrap samples, it is computationally expensive to solve  <dig> network identification problems. hence, we investigated the sensitivity of the identified robust network on the number of bootstrap samples by considering a broad range of samples from  <dig> to  <dig>  figure  <dig> illustrates the percentage of total number of appearances of each identified interaction in every  <dig> bootstrapped samples, using 5% noise. the difference in the maximum and minimum number of appearances is less than 8% for all connections. the clearly shows that as little as  <dig> bootstrap samples can be enough in drawing statistically significant conclusions, which is in agreement with the literature  <cit> .

1c deterministic network identification under data uncertainty
to assess the necessity of this bootstrapping technique, the aforementioned results were compared to a control group which did not utilize bootstrapping. to do this, a more deterministic approach was employed. experimental replicates were generated as detailed: 10% white gaussian noise was added to the 5-gene in silico network. instead of bootstrapping these replicates, the deterministic network identification was performed on the mean of the replicates. this was done for  <dig>   <dig>   <dig>   <dig>  and  <dig> replicates with the resulting precision and recall calculated for each case; results are shown in figure  <dig>  as shown, when the input data is generated from fewer than seven replicates, a solution is not found. even with seven replicates, the results are relatively poor. while the recall is comparable to that generated from bootstrapping , precision is much worse . as the number of replicates is increased, this precision increases; however, even at  <dig> replicates, precision is not perfect . furthermore, in practice, generating this many experimental replicates is often not feasible. this illustrates that the proposed bootstrapping technique offers an accurate way of determining robust connections over a more traditional method, even with limited number of experimental repeats.

ii case study 2: ten gene network model
in this example we investigate the performance of the developed algorithm in a larger network consisting of ten genes, as depicted in equation  shown in additional file  <dig>  for the deterministic case study the tolerance was specified at a low value of 10- <dig>  because the 10-gene network increases the number of binary variables in the upper level to  <dig>  more ga generations are needed to obtain a converged solution; therefore, the number of generations was increased to  <dig>  the identified connections and kinetic parameters are shown in figure  <dig>  with the kinetic orders  depicted over the connections and kinetic rate constants  in brackets over the genes. the comparison of actual and identified time series profiles is shown in figure  <dig>  as evident from the figures, the algorithm correctly identified all the connections, kinetic orders and rate constants with a precision and recall of  <dig> , thus verifying the satisfactory performance of the algorithm in larger systems.

iii case study 3: experimental data of e.coli sos dna repair
the proposed algorithm is next applied to the sos dna repair system of e.coli <cit> , based on the gene data measured by ronen et al. <cit>  which is available online  <cit> . in this model system, the response to dna damage is governed by a few key genes, which in turn regulate the expression of more than  <dig> genes which have specific roles in dna repair. a proposed model is that the reca protein binds to single stranded dna, and this nucleoprotein is integral in lexa cleavage, a transcription factor which is a major regulator of the dna repair genes  <cit> . the work of ronen et al. investigates the michaelis-menten kinetic parameters associated with promoter activity for eight of the major genes in this system. experimental kinetics were measured by first incorporating a gfp reporter plasmid for each of the gene’s promoter. dna damage was induced, and the resulting gfp intensities were measured. the number of gfp molecules is proportional to the promoter activity, and can be taken to be analogous to the rate of transcription  <cit> . we therefore used this promoter activity data  <cit>  to represent gene expression  and used it in our algorithm. among the four data sets provided by the authors, we chose the third and fourth for this case study because these are measured at the same conditions. our objective was to identify regulatory interactions between six genes: uvrd, lexa, umud, reca, uvra and polb.

identification of this  <dig> gene network will require  <dig> binary variables; hence the ga parameters were retained similar to our first case study presented earlier:  <dig> populations evolved through  <dig> generations. the error tolerance, however, had to be relaxed to a higher value of . <dig> because of noise inherent in the experimental data set. figure  <dig> compares the actual experimental data with the predicted profiles generated from the identified algorithm, which shows excellent agreement.

in the next step the robust connections of the identified network are further analyzed by bootstrapping the experimental data set. since our previous analysis on the first case study demonstrated  <dig> bootstrap samples to be adequate, in this example we generated  <dig> artificial data sets from the original experimental repeats. the network identification algorithm was solved at each of the data sets to generate  <dig> alternate networks. the frequency of occurrence of each network connection is analyzed over the array of alternate network and connections appearing with over 45% frequency are considered to be robust. figure  <dig> illustrates the predicted robust network for the e. coli data set along with the frequency of repeat of each connection. the corresponding estimated kinetic orders  and rate constants  with 90% confidence level are shown in table  <dig> and table  <dig>  respectively. the heat map in figure  <dig> further shows how well the algorithm identifies a robust network .

discussion
in this work, we present an algorithm to identify robust regulatory networks from time profiles of gene expression data. our identification algorithm is primarily developed on the hypothesis of sparsity of biological network connections. in our earlier work we established the validity of the hypothesis of sparsity using a simplified linear ode representation of gene expression dynamics in a deterministic system. herein we further advance the algorithm by incorporating more realistic non-linear representation using an s-system formulation of gene expression dynamics. the identification algorithm is formulated as a bi-level optimization problem in which the upper level solves an integer programming problem while the lower level is a continuous parameter identification problem. furthermore, we propose a framework to incorporate noisy experimental data towards identification of a robust regulatory network. this is done by first generating artificial experimental repeats using the bootstrapping technique, followed by solving the identification formulation at each of the bootstrap data sets. from this library of identified prospective networks we isolate the most-repeated network connections which we hypothesize to be a robust connection, having low variability to experimental noise.

the upper level integer programming problem is solved using ga. there are several advantages of using ga to solve the above problem, the most important being that it does not require gradient evaluation. this is a significant advantage for the above problem with non-linear ode as constraint function. in addition, ga starts its search not from a single point in the feasible parameter space, but from multiple locations specified in the starting population. hence, it holds the chance of converging at global minima, although such convergence cannot be guaranteed with ga. however, it also suffers from the disadvantage of increased computational cost. all the computations reported here have been carried out on  <dig>  ghz processer and 16 gb ram server. the computational time for the five gene network without noise was 1 hour and the same network with noise was  <dig>  hours. the computational time for the experimental data was 3 hours. for the  <dig> gene network, the genetic algorithm needed more generations to converge, resulting in computational time of 11 hours. hence, extension of the current solution procedure to a much larger data set will be expensive. while the same formulation will still be applicable in a larger system, alternate solution procedures are currently being investigated for its extension to larger networks.

in the formulation presented in equation , the only user defined parameter is the value of the tolerance which dictates how closely the model prediction must agree with experimental dynamics in order for the network to be considered in the overall algorithm. while for an in silico case study without noise the tolerance may not play a vital role, it will be relevant when evaluating noisy scenarios. specifying a low tolerance value  in our algorithm under noisy data failed to identify any network, as would be expected. moreover, using a low tolerance is not advisable when using data sets with noisy replicates since we are not targeting a profile which exactly fits the noisy data; the target is to identify network profiles which describe all the noisy scenarios relatively well. on the other hand, a relaxed tolerance runs the risk of compromised prediction quality. in order to quantitatively evaluate the effect of specified tolerance on the identified network structure, the bootstrap/ bi-level optimization algorithm was repeated on the same 5-gene dataset with different tolerance values. table  <dig> illustrates how the precision and recall of the identified network changes with altered tolerance values. quite interestingly it is observed that precision is relatively insensitive to the network tolerance, while recall worsens with increased tolerance. this is very encouraging since this implies that even with relaxed tolerance the identified network does not have false positive connections, although false negative connections increase. increase in false negatives can be explained by the nature of the objective function which tries to minimize the number of connections. hence, relaxed tolerance will always lead to a sparser network, as seen in table  <dig>  this analysis indicates that even for a relaxed constraint the algorithm may fail to identify all the connections but the identified connections will always be accurate with low probability of false positivity.

the performance of the developed robust identification formulation is illustrated using three different systems. the first two case studies are based on in silico data which allows for detailed analysis of the performance of the algorithm. overall the algorithm was found to demonstrate excellent predictive capability both in the small 5-gene network along with larger 10-gene network. the proposed bootstrapping scheme was found to adequately capture the precise network from the noisy data as well. encouraged by the in silico results, we applied our algorithm to dynamic experimental data of a 6-gene network responsible for dna damage repair in e. coli <cit> . while verification of the identified network will be difficult for this system, the time profile of gene expression data predicted by the identified network is in good agreement with the experimental data set. a thorough literature search for existing knowledge of network interactions revealed that quite a few of the predicted connections have been reported in parallel studies. our algorithm inferred the regulation of recaumud and uvra by lexa, which is consistent with the findings reported earlier  <cit> . another interesting finding is that our results suggest that polb does not influence any of the other genes in the system , a finding which was also reported by kumura et al. furthermore, our identified network shows the self-regulation of reca. this protein is the main factor responsible for sensing dna damage, and has been reported to promote the transcription of itself, thereby promoting damage recognition, and other repair genes  <cit> .

the current approach offers an improvement on existing algorithms. numerous studies have used the 5-gene network  to test the accuracy and efficiency of their network identification methods. a comparison between the methods is presented by kimura et al.  <cit>  for the five gene network without noise. while most studies do not report the metrics of precision and recall, the accuracy of the results is still commented on. most methods have a shorter computational time than the proposed method. however, our algorithm is able to predict a perfect network , while the other algorithms deviate from this. therefore, there is a trade-off between computational time and accuracy, and selection of the most appropriate method for the system of interest should be chosen judiciously. nevertheless, this comparison shows that recall and precision are an improvement over many existing algorithms when analyzing the 5-gene network. additional improvements could be made on the current approach to decrease computation time, such as parallel programming, or by altering the formulism .

CONCLUSIONS
these results show that our bi-level integer optimization algorithm is able to effectively identify the topology and connection strength of gene regulatory networks, even when the gene dynamics are non-linear and noisy in nature. by using the biological trait of sparsity, the algorithm optimizes the number of connections in the network while maintaining agreement in gene temporal profiles with the experimental input data. even with uncertainty and noise in the data, something which is unavoidable on an experimental level, our bootstrapping/identification combination was able to identify a robust network. while we have demonstrated the effectiveness of our algorithm on in silico and e. coli data, its formulation, biological relevancy, and results are applicable to any gene regulatory network, as long as time-series data is available.

