BACKGROUND
rna is typically produced as a single stranded molecule which then folds intra-molecularly to form short base paired stem structures while the unpaired regions form loops. this base paired structure is referred to as the secondary structure of the rna. base pairs almost always occur in a non-crossing fashion in rna secondary structure. informally, this means that if we draw arcs over an rna sequence connecting base pairs, none of the arcs cross each other. when crossing base pairs occur, they are called pseudoknots. in this paper, pseudoknots are ignored, and therefore no two arcs are allowed to cross. under this assumption, a model was proposed in  <cit>  to calculate the stability  of a folded rna molecule by adding independent contributions from base pair stacking and loop-destabilization. this model has been shown to provide a good approximation of the forces governing rna structure formation, thus enabling fairly accurate predictions of real structures by determining the most stable structure of a given sequence and its corresponding free energy, known as the mfe . based on this model, o time algorithms have been proposed and implemented for computing the most stable rna structure and its mfe, where n denotes the length of the sequences to be folded  <cit> ; accordingly, various tools for rna secondary structure prediction were developed. the tools commonly used today are mfold  <cit> , vienna package  <cit>  and foldrna  <cit> . thus, mapping the entire landscape of a genome of length n looking, for example, at the potential to form ncrna molecules of size l, can be done by a straight forward application of the classical cubic-time rna folding algorithm with a sliding window of size l over the genome, resulting in total o running time. hofacker et al.  <cit>  suggested an elegant algorithm for this task with run-time of o. here, we suggest a more efficient consecutive windows folder, whose expected time complexity is o, and give an implementation of this engine, called rnaslider. this faster solution makes consecutive windows folding practical on a genome-wide level and we envision several possible applications for this program, especially as part of a search strategy for long ncrna molecules. as a demonstration we present an intriguing bias in minimal free energy of genomes depending on their reading direction that we observed by using the program. we also show preliminary results of running rnaslider to characterize long ncrna molecules on a mouse chromosome and discuss this application further.

RESULTS
the fast sliding algorithm
the main recursion used by the current rna folding algorithms is explicated below:

  w=min⁡{v,min⁡i≤k<j{w+w}} 

eq.  <dig>  whose time complexity is classically o, where n denotes the length of the rna sequence s to be folded, computes the optimal folding of substring si...sj, which is the value of the entry in row i and column j of the main, upper triangular two dimensional n × n dynamic programming table, w. the application of eq.  <dig> involves the computation of the two dimensional matrix, v, whose entries are computed via three additional auxiliary equations. we discuss them briefly below and refer the interested reader to  <cit>  for a thorough discussion and time complexity analysis of these additional auxiliary recursions.

  v=min⁡{eh,es+vvbi,vm}} 

eq.  <dig> computes the optimal folding energy of a substring si...sj in which si base pairs with sj, where eh denotes the energy term for a hairpin closed by positions i and j and es denotes the energy term for the stacking of the base pair  in a stem that is continued by the base pairing of positions i+ <dig> and j- <dig>  for the sake of simplicity, assume that v is set to infinity if the base at position i does not pair with the base at position j of the sequence.

  vbi=min⁡i≤i′<j′<j{ebi+v} 

eq.  <dig> computes the score of an optimal folding of substring si...sj given the energy of the bulge  formed at indices .  and  are bounded by a constant and therefore this term is quadratic.)

  vm=min⁡i≤k<j−1{w+w}+a 

where a is a constant multi-branch penalty. we note that, for the sake of simplicity of presentation, the current description neglects the contribution for inner pairs of a multiloop and unpaired bases in a multiloop. however, it can easily be extended to apply these contributions without breaking the triangle inequality property on which our algorithm relies.

definition  <dig> .

a "closed structure" over the sequence sx...sy, is a folding in which sx pairs with sy.

from equations  <dig> and  <dig> it is easy to see that w denotes the optimal  folding energy that can be obtained by folding the sequence si...sj in any possible way. v, on the other hand, denotes the optimal  folding energy that can be obtained by a closed structure over the sequence si...sj. thus, w is computed as the minimum between the lowest folding energy of a "closed structure" v and the lowest folding energy of an "unclosed structure", where the energy of each "unclosed structure' can recursively be computed as the sum of two independent parts: w + w, where index k is denoted a "partition point". since the current rna folding engines bind the size of internal loops  to a constant, the main recursion, described in eq.  <dig>  is the bottleneck recursion. thus, computing all entries in the upper-triangle of w is classically o.

the consecutive windows folding problem
in this paper, we address a variant of the folding problem, defined below.

definition  <dig> . given a predefined window size l and an rna sequence s of size n , the consecutive windows folding problem is to compute the mfe for all l-sized substrings of s.

the consecutive windows folding problem can be naively solved in o by applying any of the classical cubic-time folding algorithms to each of the n-l windows of size l. an o algorithm was described in  <cit>  for the consecutive windows folding problem, which exploits the fact that, when the sliding windows are computed incrementally, in decreasing start-index order, only an l-width diagonal of the original n × n dynamic programming matrix w , needs to be computed.

an efficient rna folding algorithm, which computed the optimal folding in expected time complexity of oψ, where ψ was shown to be constant, on average, under standard polymer folding models, was suggested in  <cit> . this algorithm is briefly reviewed in the next section, and we refer the interested reader to  <cit>  for a more detailed description.

review: rna folding in o expected time
the quadratic-time algorithm for computing an optimal rna folding utilizes the observation that the main matrix w, which is the final output of the rna folding recursion, as given in the previous section, obeys the triangle inequality, i.e.

 ∀i ≤ j <j'   w ≤ w+w 

the above claim is used in the next lemma to show that any sum which yields the minimum of eq.  <dig> can be reformulated as a corresponding, equal-scoring sum, in which the left term is a closed structure .

lemma  <dig>  consider eq.  <dig>  for every entry w, if there exists an index k, i ≤ k < j, such that w = w + w, then w = v + w for some index k' ≤ k.

the proof of lemma  <dig>  based on the triangle inequality property of the rna folding recursion, can be found in  <cit> . according to lemma  <dig>  eq.  <dig> can be reformulated as follows.

  w=min⁡{v,min⁡i≤k<j{v+w}} 

thus, eq.  <dig> could be viewed as a competition between o partition points v, k = i...j, for the sum: v + w that yields the minimum folding energy. furthermore, it turns out that some of the competing closed structure partition points dominate others, as becomes clear by the following theorem.

theorem  <dig>  <cit> .

if v ≥ v + w for some i ≤ k < j then,

 ∀j' > j v + w ≥ v + w. 

the redundancies indicated by theorem  <dig> can be exploited by maintaining a list of only those partition points v that are not dominated by others.

definition  <dig> .a column index j is a candidate in a row i ≤ j iff:

 v < v +w ∀ i ≤ k < j. 

note that the above condition is obtained by applying lemma  <dig> to the condition

 v < w +w ∀ i ≤ k < j. 

the above definition may be applied to speed up the computation of w, as follows: rather than considering all possible o partition point indices for the computation of eq.  <dig>  only partition points v that satisfy the candidacy criterion according to definition  <dig> need to be considered. this is formalized in the following equation:

  w=min⁡{v,min⁡k∈candidate_list{v+w}} 

eq.  <dig> is implemented, in the quadratic-time rna folding algorithm, via a candidate list that is empty at the start of each row and is extended throughout the left-to-right computation of row i by appending only those partition points v which are candidates by definition  <dig> 

to bind the expected size of the candidate list it is assumed, and later confirmed by benchmark analysis, that the folding predictions generated by the classical rna folding algorithm follow the standard polymer-folding model. previous analysis, both theoretical and experimental, has shown that the probability that a closed structure is formed, pairing two positions at distance q monomers apart, is p = bqc where b =  <dig> and c >  <dig>   models for collapsing rna and other polymers and  <cit>  for a saw model for dna denaturation). this fact is explained by modelling the folding of a polymer chain as a self-avoiding random walk in a 2d lattice  <cit> . in this model, the spatial position of each nucleotide in the original polymer corresponds to a random step within the lattice, where edges of the lattice represent possible transition directions. this walk is called "self avoiding", i.e. it assumes that two bases cannot occupy the same lattice point. the query of interest here is the probability of the q-th step in the walk returning to the origin. the theoretical exponent for the 2d saw model has been shown to be c =  <dig>   <cit> .

note that, by definition  <dig>  each candidate corresponds to a closed structure. thus, the probability for column j to be a candidate in row i is equivalent to the probability for the optimal folding of si...sj to form a closed structure, i.e. b·-c. thus, the expected number of candidates in a sequence of length n is ψ = b⋅∑i=1ni−c. for values c ≥  <dig>  which is the case in polymer folding, this series is a partial sum of the riemann zeta function, defined as b⋅∑i=1∞i−c, and is known to converge to a constant. thus, by applying the candidate list approach described above, the computations performed for each entry in the main dynamic programming matrix w are reduced from o to o, yielding the following theorem.

theorem  <dig>  <cit> . applying the candidate list algorithm to the folding of an rna sequence of size n, requires an expected number of o operations.

an o algorithm for the consecutive windows folding problem
hofacker et al.  <cit>  achieved a run-time of o for the consecutive windows folding problem by observing that, in this application, only an l-width diagonal of the original n × n dynamic programming matrix w , needs to be computed. in this section we apply this observation to the candidate list algorithm for rna folding  <cit>  which we briefly discussed above, in order to obtain a faster solution for the consecutive windows folding problem, whose expected time complexity is o. the suggested algorithm also computes an l-width diagonal in the n × n matrix w. the values of this l-width diagonal are computed in decreasing row index order, and then for each row, in increasing column index order. within this order, the candidate list is emptied out when the computation of each row begins, and then incrementally extended, during the computation of values of this row, by appending only those partition points which are candidates by definition  <dig>  each partition point is considered for candidacy once per row, when its column is reached. the algorithm finally returns the vector windowsenergy, where windowsenergy denotes the folding energy of s.

the pseudo-code for the algorithm is given below.

algorithm:

 <dig> windowsenergy ← null

 <dig> for each row i = n-l+ <dig> down to  <dig> do

2    candidate_list ← null

3    for each column j = i up to i + l -  <dig> do

4       w←min⁡∀k∈candidate_list{v+w}

5       if v < w then

6          w ← v

7          append index j to the candidate_list

8       if j = i + l -  <dig> then

9          windowsenergy ← w

theorem  <dig>  the above algorithm computes the optimal folding of n sliding windows, of size l each, in o expected time and o space.

proof: the algorithm fills the l-sized diagonal of an n × n matrix, but needs to maintain only an l <dig> sub-matrix at each step, and thus can be implemented to require o space. for each of the n rows, calculating the value for each of the l entries requires the computation of the minimum among ψ candidates, and possibly the addition of a single candidate to the list. since ψ has been shown to converge to o on average , the algorithm spends a constant time on each of the o entries computed, yielding an o expected time complexity.

a traceback of an optimal solution is supported at the cost of an additional negligible o term, by maintaining, for each computed entry in w, a label indicating whether its score was obtained in eq.  <dig> from the closed structure term v or from one of the partitioning terms v + w, and storing the value k in the latter case. based on this stored information in the computed matrix w, one can recursively recover an optimal traceback for the entire window in o time and in o space, starting from entry w  <cit> .

testing
we implemented our consecutive windows folding algorithm in a program called rnaslider. rnaslider is implemented on top of the publicly available code of michael zuker and rune lyngsψ using its default energy parameters. first, we validated that the running window algorithm gives exactly the same results as running the mfe algorithm on each window separately. then, we ran it on various sequence lengths and on windows of various sizes. the running time was compared with the running time of rnalfold from the vienna package, a program that implements the algorithm of hofacker et al.  <cit> . figure  <dig> demonstrates that the run times of our implementation indeed grow linearly with increasing window sizes, while the rnalfold algorithm has a quadratic running time. we can see that for windows of size of up to  <dig> bp, the running times are quite similar, with a slight advantage to rnalfold. from size of about  <dig> bp and up, rnaslider runs increasingly faster than rnalfold. the difference reaches a three fold speed-up for the longer windows of  <dig>  bp which are relevant for the analysis of long ncrna .

bioinformatic applications
directional bias – comparing histograms of mfe distributions
the ability to rapidly calculate the minimal free energy  values of sliding windows along very large chromosomes enables the probing of mfe landscapes on a genome wide level. first, we explored the mfe landscape of sequences when reading them in the natural 5' to 3' direction, and compared these with the mfes when reading either in the opposite direction  or on the complementary strand. while the first comparison yielded an intriguing systematic difference between mfes computed on the "native" sequences versus the "reverse" ones, the comparison of the two opposite strands yielded almost indistinguishable distributions.

since each nucleotide monomer of rna consists of a ribose backbone and phosphate groups attached to the base, it has an inherent asymmetric direction from 5' to 3'. thus, it is clear for example that the sequence acgug is not identical to the reverse sequence gugca in its ability to fold into secondary structure. however, it is not clear why, consistently in several genomes, the native coding direction should necessarily have a lower mfe than the reverse direction, especially since only a small portion of genome, especially in higher eukaryotes, is believed to be transcribed and expressed as rna. in the rest of this section, we further explore this phenomenon.

definition  <dig> : for a given sequence, s, and a given window-size l, the directionality bias  of s by l is the ratio between the number of l-sized sliding windows in s that have a lower mfe when scanned and folded in the native direction, versus the number of l-sized sliding windows in s that have a lower mfe when scanned and folded in the reverse direction.

for example, in the human chromosome  <dig>  out of  <dig> , <dig> windows of length  <dig> bases,  <dig> , <dig>  yield a lower mfe when folded in the native direction, and only  <dig> , <dig>  yield lower mfe when folded in the reverse direction, resulting in a db of  <dig> . we repeated this experiment with the six chromosomes mentioned earlier, and obtained dbs of  <dig> ,  <dig> ,  <dig> ,  <dig> , and  <dig>  for c. elegans, drosophila, yeast, medaka and anopheles, respectively.

note that the dbs reported here were computed in overlapping windows. similar experiments using different windows sizes  yielded similar results.

in addition, we checked the magnitude of this effect. for all windows of length  <dig> of the human chromosome  <dig>  we made an histogram of the differences in mfe between the native and reverse direction. on average the mfe gap is - <dig>  kcal/mol with standard deviation of  <dig> . the histogram, shown in figure  <dig>  demonstrates that while many of the differences are relatively small  there are still a significant number of windows in which the difference is high .

in order to reveal the origin of this phenomenon we did the following experiment. we created random genomes that maintain the same dinucleotide frequencies of real genomes by using the algorithm described in  <cit> . then, we reversed the random genomes and compared the db of real genomes to that of the random genomes. the comparison shown in table  <dig> suggests that most of the effect that we observed comes from the dinucleotide frequencies since the ratio between the db of real genomes and the db of shuffled genomes is close to  <dig>  in other words, the db bias that is attributed only to the dinucleotide frequencies  can account for most of the db in the real genomes.

despite this fact, we noted that there are some variations in this normalized ratio along different regions in genomes. figure  <dig> shows the db real/db random ratio over several types of genomic regions of the drosophila annotated genome . it is interesting to note that in general the coding regions  have a db ratio greater than  <dig> for all windows lengths, while utr regions  have db ratio less than  <dig>  intergenic regions seem to have ratio that is closer to  <dig>  these results suggest that for functional regions of the genomes there are additional factors, in addition to the dinucleotide composition, that determine the db values.

analysis of long ncrna molecules from the mouse genome
we computed the mfe for the entire chromosome  <dig> of the mouse of length  <dig> , <dig> bp using sliding windows of  <dig>  and  <dig>  nt. we then calculated separately the mfe of the windows that contain ncrna molecules, i.e. we calculated the average mfe of all windows that are contained within each ncrna molecule. for example, for a molecule of length  <dig> , the average is calculated over  <dig>  such windows.

for windows of length  <dig> , the genome average mfe is - <dig>  kcal/mol and the average mfe of the  <dig> ncrna molecules of size longer than  <dig>   is - <dig>  kcal/mol. for windows of  <dig> , the average mfe for the chromosome is - <dig>  kcal/mol and the average over the  <dig> ncrna molecules longer than  <dig>  nt is - <dig>  kcal/mol. the distributions of the mfe values of the ncrna molecules and the mfe values of the windows along the entire chromosome are statistically different: using a two sample t-test, the null hypothesis that the two distributions have the same mean and variance can be rejected with p-values of  <dig> ·10- <dig> and  <dig> ·10- <dig> for window of  <dig>  and  <dig> , respectively.

the histograms for the entire chromosome and for the windows that contain the  <dig> ncrna molecules with length over  <dig>  are shown in figure  <dig>  it is apparent that the population of the mfe values for the ncrna molecules is shifted towards the lower mfe values.

we also computed the average mfe of ncrna molecules of length between  <dig> – <dig>  nt, using a window of  <dig>  nt. in this case we calculated the average mfe over all windows in which the entire molecule is contained. for example, a molecule of length  <dig>  nt is fully contained within  <dig> windows of length  <dig> . although each one of these windows contains regions that are outside the molecule, the average mfe for the  <dig> ncrna molecules in this size range was - <dig> kcal/mol. we noted that the average mfe calculated for molecules shorter than the  <dig>  bp window  is lower than the average mfe calculated for molecules longer than the same size window . a two sample t-test for the two distributions yields a p-value of  <dig> . this observation suggests that there is an advantage in using windows that are longer than the target molecule size and therefore contain the target molecule in its entirety, over using partial windows that do not contain the entire molecule.

the low mfe for windows associated with ncrna applies to group averages and thus it is an observation on a statistical level. for some of the ncrna molecules, there is a correspondence between  peaks of the mfe landscape and the location of individual ncrna molecules. figure  <dig> shows the mfe landscape  of a region of  <dig>  nt on mouse chromosome  <dig>  where four ncrna molecules of length longer than  <dig>  nt reside. for three out of the four molecules there is a peak in the genomic location of the ncrna molecules. we must stress however that this example is not the rule; there are many peaks in the mfe landscape that do not correspond to ncrna molecules, and there are ncrna molecules that do not reside within or near mfe peaks.

discussion
by combining two algorithmic techniques, the sliding window version of the dynamic programming calculation of mfe  and the utilization of a triangle inequality property of the dynamic programming matrix computed by the rna folding algorithm  we are able to provide a fast algorithm to calculate the mfe of windows along long stretches of dna or rna  in a time that is linear in the size of the chromosome/genome.

what are the possible applications of such a fast algorithm? as a simple demonstration we first applied our tool to the analysis of the difference in mfe between the native direction of the genome and the reversed direction. as a second application example, we used the tool to compute the mfe for long ncrna molecules on the background of the mfe landscape of the mouse genome.

directional bias
we have shown that this difference in directional bias is largely due to the dinucleotide frequencies, although within a genome there are differences in the db between different genomic regions. the interplay between the dinucleotide frequency and folding energies is delicate and a source of debate. seffens and digby  <cit>  claimed that mrna sequences tend to have lower free energy than random sequences. workman and krogh  <cit>  claim that this tendency originates from the dinucleotide frequency in the genome. a similar position has been taken by shabalina et al.  <cit> . it was argued that the periodic pattern of nucleotides, which is created by the structure of the genetic code, influences the dinucleotide frequency which in turn influences folding energies and mrna secondary structure formation. our observation that the db is largely determined by the dinucleotide frequency is consistent with this view. however, there is a kind of a "chicken and an egg" problem here: does the dinucleotide bias determine folding energy and influence formation of secondary structure, or does the need to form secondary structure influence the dinucleotide composition? we refer the interested reader to a recent paper of forsdyke  <cit>  that deals directly with this question and highlights the delicate issues in the interplay between dinucleotide composition and folding energies.

long ncrna molecules
recently, there is an increasing interest in very long non coding rna sequences. the fantom project  <cit>  that is dedicated to the study of the mouse transciptome has published  <cit>  a list of  <dig>  non coding rna sequences that are transcribed in the mouse. out of these sequences,  <dig>   are longer than  <dig> bps,  <dig>   are longer than  <dig>  bps, and  <dig>   are longer than  <dig>  bps. a very recent study  <cit>  has demonstrated that such long ncrnas are differentially expressed in the brain and thus are likely to have functional roles, perhaps in memory formation  <cit> . in  <cit>  it was estimated that about 39% of these transcripts have a conserved secondary structure. it is clear that the field of ncrna is moving towards studying these long ncrnas, and for this purpose our rnaslider may turn out to be a helpful component in the analysis toolkit.

we have shown here that the mfe of windows that are contained within long mcrna molecules is lower, on average, from the mfe of windows that are not associated with ncrna molecules. still, as we mentioned above this observation is valid only for large-scale statistics, and it is yet to be determined how it can be exploited, possibly in collaboration with additional rna analysis tools, to identify long ncrna molecules. as discussed above, there is evidence to suggest that ncrna molecules do have lower folding energies than random sequences even when the dinucleotide frequencies are accounted for  <cit> . still, since the accuracy of the mfe prediction is known to be limited  <cit>  and a scan of a fixed-length window is bound to add some additional noise, realistically this signal can not be used as a single source for the prediction. an interesting possible direction might be a careful combination of the signal from windows of several lengths. our observation that mfe values are lower for molecules that are fully contained within a window compared with windows of the same length that cover parts of a longer molecule, suggests that crossing information from different lengths might yield a stronger signal and help to identify approximate borders of suspected molecules. of course other signals, both experimental  and computational  must be combined into a comprehensive strategy to identify novel ncrna molecules.

CONCLUSIONS
we have designed a practical engine that can calculate the rna minimal free folding energy  of windows along complete genomes in a reasonable time. for example, calculating all overlapping windows of size  <dig> of chromosome iv in saccharomyces cerevisiae, a length of roughly  <dig>  million bps, takes about  <dig> minutes on a single xeon  <dig>  ghz cpu, and the entire human chromosome  <dig>  of roughly  <dig> million bps, was scanned in about  <dig> hours. we used this tool to explore an intriguing asymmetry in mfe between the native and the reverse reading frames for both coding and non-coding regions of the genome. we found that the reason for this phenomenon is, largely, the dinucleotide distribution in the genome that apparently prefers, in the native direction, dinucleotides that stabilize folding as reflected in lower mfes.

this study is only a first demonstration of the kind of large scale questions that could be addressed by our efficient "sliding window folder". as rna molecules are receiving increased recognition and attention, we believe that a tool that can efficiently scan long sequences and compute their mfes is likely to be useful for many additional bioinformatic applications, especially when long ncrnas are analyzed.

