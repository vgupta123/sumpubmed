BACKGROUND
high-throughput technologies have led to an accumulation of large amounts of data that can be used to advance scientific inquiry given the appropriate tools. however, our inability to effectively visualize or conceptualize these data, particularly multidimensional data, is one of the factors preventing its integration into the scientific process. one of the promising means of using these data is to develop, train, and validate computational models, preferably those with interactive visual interfaces. advances in computational modeling platforms are beginning to allow simulation of biological systems from the single cell biochemical level to more abstract multicellular environments, such as representative tissues, organs, or even organisms. these emerging computational tools are poised to put the power of bioinformatics and data interpretation back into the wet-bench biologists hands by automatically incorporating data from the aforementioned datasets with tools for visualization, experimentation, and data analysis.

many high-throughput technologies collect large amounts of measurement data that are conducive to being stored in databases. for example, a database can easily house multi-scale gene expression data obtained from a single cell to a whole organism while also documenting the source and experimental methods associated with the data. such repositories are well suited for data consisting of lists of gene and protein abundance, for example. however, new ontologies and formalisms are required for collecting and describing certain kinds of higher-order data. for instance, the outcome of experiments involving shape or morphology can be challenging to describe accurately, particularly in a way that others can search for or interpret computationally. this problem has been particularly challenging in areas of development and regeneration where a description of the organ, appendage, or organism is one of the key reported observations.

the planarian worm is a model organism in regenerative biology that perfectly illustrates the problem of storing shape-based experimental results in a formal database. these free-living flatworms have exceptional regenerative properties that have fascinated biologists for centuries  <cit> . they are able to regenerate aged, damaged, or lost tissues with the help of a large adult stem cell population  <cit> . despite being complex organisms possessing bilateral symmetry, musculature, intestine, and a central nervous system including a true brain  <cit> , fragments smaller than 1/200th of the adult size can remodel and regenerate an intact worm  <cit> . this astonishing regenerative ability has stimulated an effort to understand its underlying mechanisms  <cit> , producing an extensive number of experiments based on amputations  <cit> , drug-induced phenotypes  <cit> , and rnai gene-knockdowns  <cit> . however, despite these important efforts, we still lack a comprehensive model that can explain more than one or two aspects of planarian regeneration  <cit> .

recently, the levin lab has developed a new tool  to aid in the assimilation of these data using a graph-based formalism to describe anatomy and morphology along with a new ontology for describing experimental manipulations and observations  <cit> . the flexible and extensible graph notation allows worm regions and organs to be described as nodes connected by linkages with associated angles and length parameters. based on this approach, the planform database  was designed and curated to include a complete description of the many planarian experiments and outcomes that exist throughout the literature. such a resource does not only make it possible for scientists to search and compare worm morphologies, but it also provides an extractable resource for bioinformatics applications.

we are currently combining planform, agent-based modeling, and an evolutionary search engine to develop an automated system for searching and validating computational models of regeneration. agent-based modeling holds promise for studying the emergent behavior and complex interactions between signaling networks involved in directing regeneration, when multi-scale or multi-cellular systems are supported. to this end, we are using a modeling platform  where the central agents are autonomous cells containing many of the biological primitives necessary for simulating living systems  <cit> . the current version of this software contains a number of useful features to support this endeavor, including a 3-d interface for visualization and tools for performing experimental manipulations within the client-server architecture. the process of developing, testing, and validating a complex model by hand can be a daunting task, particularly when many individual experimental outcomes are combined. to simplify this process, we have incorporated an evolutionary search engine that can automate this process using a genetic algorithm driven by appropriate fitness metrics that are informed by the planform database . our ultimate goal is for this integrated system to identify computational models that can account for many, if not all, of the available experimental outcomes related to planarian regeneration. we believe that this general approach holds the promise to spur biological discovery, develop novel insights into long-standing problems and biases, and elucidate previously unobserved biological behaviors.

this paper presents a novel agent-based planarian model capable of simulating basic biological behavior. the model is suitable for automated and varied experimental manipulations akin to those traditionally performed by wet-bench biologists and represented in the planformdb. this model includes a reaction network that responds to manipulations by initiating appropriate head and tail regeneration. importantly, we describe an algorithm that allows translation of multicellular simulation output into a formal graph representation equivalent to that described by lobo and colleagues  <cit> . this real-time translation is central to the automation of model discovery as it enables use of a fitness metric based upon a graph-edit distance calculation, which quantitatively compares simulation output and target morphologies stored in the planformdb. the combination of the model, translation algorithm, and fitness metric provide the basis for future automated model discovery in regeneration biology.

RESULTS
modeling a classic planaria regeneration experiment
as shown in the classic regeneration experiment presented in figure 1a, when a worm is bisected laterally the resulting fragments will naturally lack a head or tail region. normally, each fragment will regenerate into independent, intact worms with the appropriate shape and architecture over the course of roughly ten days. we sought to develop an agent-based representation of a planarian that could simulate these experiments. such a model would  validate the chosen modeling platform  for this project,  provide a working model for testing our translation algorithm and experimental manipulations, and  provide a starting network description to be used by individuals in the population of automated searches. the model developed was dependent upon competitive inhibition using a signaling mechanism consisting of long-range morphogen gradients emanating from existing head and tail regions. as the morphogen is subject to molecular decay and/or consumption in chemical reactions, its long-term presence is dependent upon the existence of its source  in a given worm fragment. thus, a regeneration signal can simultaneously trigger head and tail regeneration in response to a cut where the morphogens competitively inhibit their own developmental paths. for instance, the morphogen derived from head cells represses head regeneration in worm fragments possessing a head after a manipulation, whereas the lack of a tail will lead to decay of the tail morphogen and allow tail regeneration to proceed. a schematic of the network design used in these experiments is presented in figure  <dig> 

our representation of this work included a simple architecture of  <dig> planar cells arranged as a rectangular abstraction of an intact worm . the number of cells was chosen empirically to provide a robust system that could be reasonably manipulated by one or more simultaneous or sequential cuts. the implementation of our morphogen-based model was represented in cellsim using a series of metabolic and transcription reactions ) where every cell was controlled autonomously by this same network. in response to a simulated cut, a regeneration signal activates a regeneration pathway, which simultaneously promotes head and tail development responses. the head and tail development pathways are constitutively repressed by the presence of a morphogen  emanating from existing head or tail cells in the simulation and spread to neighboring cells through gap junctions. the morphogen gradients will disappear or be diminished following a transverse cut when the source  is physically removed, causing one developmental pathway to be favored over the other. furthermore, the head and tail resources repress each other to ensure a unique cell state is ultimately achieved.

at the start of a simulation, the head, trunk, and tail regions were defined by introducing one of three cell-state resources  into each cell. simulations were then run for approximately  <dig> steps to allow the network to reach homeostasis and provide sufficient time to develop long-range morphogen gradients. as shown in panel  <dig> of figure 1b, worms consisted of head  and tail  regions separated by a trunk . next, a transverse cut was simulated by injecting a resource, lysis, into a cross-section of cells located at or near the mid-line of the worm. the presence of lysis results in a localized cell death response that results in separation of the initial worm into two worm fragments lacking either a head or tail . nearby cells respond to the cut by inducing a localized regeneration signal, which in turn activates a cell’s regeneration pathway. at this point, simulations consisting of two worm fragments were advanced another  <dig> steps prior to evaluating their emergent outcomes. the regulatory network parameters were optimized by hand for the network ), which resulted in proper regeneration of head and tail regions as shown in panel  <dig> of figure 1b. for simplicity, these simulations did not include cell growth, division, or rearrangements, but these properties will be introduced in future studies.

these results showed that we could develop a simple model of planarian regeneration using a long-range morphogen gradient that could faithfully respond to at least simple manipulations. however, it was clear that hand-design and tuning a single model to represent the many experimental outcomes described in the literature would be a daunting task without computational automation. this challenge could be alleviated using an automated method of model creation and evaluation, such as performed by genetic algorithms  <cit> . these algorithms are based upon the principles of evolution where individuals in a population are generationally- modified through random genetic mutations and crossovers during reproduction. individuals chosen to contribute to the offspring of the subsequent generation are selected, in part, based upon a fitness metric, which quantitatively defines how well each individual matches the characteristics of the target. this evolutionary search technique continues in an automated fashion until an individual matching the desired target  is generated.

graph formalism provides a convenient means of storing morphologies and comparing worms
the challenge of automating searches to identify possible planarian regeneration mechanisms was made more tractable by the database and formalism developed to describe wet-bench experiments and outcomes  <cit> . within planformdb, worm morphologies are described using a graph-based formalism as part of a more general ontology for describing regeneration experiments. briefly, a graph defines anatomic regions and organs as nodes where their size, spatial orientation, and connections are defined by parameters and linkages between adjoined nodes. for example, a simple description of the regions within a normal planarian consists of three connected nodes  as shown in figure 1c. although the formalism supports more complex descriptions of worms including organs, those aspects of worm anatomy were not considered in the current work. a particular experiment may include a description of the observed starting, intermediate, and ending morphologies of worms along with the physical or chemical manipulations performed in the laboratory. the database currently describes most, if not all, of the published planarian regeneration experiments for use by this and other projects.

in this study, we extended and adapted an existing genetic algorithm  to fit our needs to model and evaluate planarian regeneration. one of the key adaptations was providing the csga access to the planformdb to facilitate simulation and fitness evaluation. however, the challenge of comparing our agent-based simulation output to a graph-based representation presented a significant challenge. in order to facilitate these comparisons, we chose to convert simulation results into a graph representation for a number of reasons, including increased flexibility as the csga could be extended to support additional modeling platforms as long as their output could also be translated into this graph formalism. more importantly, many methods currently exist for operating on, transforming, and comparing graphs which can be included as part of the fitness evaluation step of an automated evolutionary search  <cit> . included in this repertoire are a number of algorithms suited for measuring similarity between two graphs  <cit> . of these, the graph edit distance algorithm is the most flexible and powerful and was chosen here as it deals with structural errors and any type of graph node and edge labels  <cit> .

the graph edit distance is defined as the minimum number of distortions required for transforming one graph into another. these distortions are referred to as graph edit operations, where each edit has a defined cost associated with it  <cit> . a particular sequence of edit operations is called an edit path, and the total cost of the edit path is the graph edit distance. graphs that are similar to each other typically have small edit distances, whereas dissimilar graphs have large edit distances. the cost of each type of graph edit operation varies and is dependent upon the perceived severity of the operation. for example, the deletion of a node from a graph is generally viewed as having a higher cost than a node parameter change. thus, the graph edit distance can be used as a quantitative similarity measure to compare and order individuals within a population, and thus serve as a metric within a fitness evaluation to guide the evolutionary search process.

design of a connected component analysis algorithm to convert cell simulation output into graph representations
the worms in our simulation are composed of a collection of discrete cells rather than interconnected regions. thus, the initial step in deriving a graph-based representation is to translate cells within a simulation snapshot into discrete regions , and determine how they are interconnected. to this end, we designed and implemented an algorithm based upon connected component analysis similar to methods used in computer vision and document analysis  <cit> .a simulation is processed as a series of discrete steps where each step consists of a complete description of cellular locations and their individual resources . the snapshot associated with each step can be independently analyzed by the algorithm to identify cell states and identify regions over time, or a single endpoint can be examined. the algorithm first iterates through all the cells in a snapshot and assigns each cell a region type . in general, the assignment of a cell type could be complex as there are many different components  associated with each cell. in our case, we decided to simply define each cell’s state based upon the molecular concentrations of three resources, which we labelled hcell , icell , and tcell . our algorithm assigns a region type to each cell based upon the highest total concentration of these indicator resources. for example, a cell is assigned a head state if its concentration of hcell is greater than icell and tcell. in the modeling platform, transcriptional noise and cellular autonomy result in cells with varying concentrations of resources, even those located near each other . since a resource may be found on the cell surface  or internally , the algorithm was designed with the flexibility to allow the user to define whether to consider the total or localized concentrations of resources. we used total cellular concentration of each of the three indicator resources to determine a cell’s state in this work.

once each cell’s state has been determined, the algorithm identifies regions based upon spatially cohesive cells sharing the same state using connected component analysis. all cells located adjacent to cells containing the same state are considered part of the same region, where the outermost cells define the region border. the connected component analysis algorithm  initiates with a call to the processconnectedcomponents function providing a simulation snapshot as a parameter. the processconnectedcomponents function cycles through all cells and calls the gatherconnected function for each unassigned/marked cell. the gatherconnected function recursively collects and marks all other cells in the snapshot that belong to the same spatially cohesive region as the starting cell. a cell is defined to be in the same spatially cohesive region as the starting cell if it is of the same type as the starting cell and is either connected to the starting cell or to some other cell already determined to be in the starting cell’s region. two cells are considered to be connected if the euclidean distance between them is below a user-specified threshold . additionally, if two cells are close enough to each other to be considered connected, but are assigned to different regions because they are of different types, those cells are identified as border cells. border cells are used to determine which regions are linked to each other.   

once each cell in the snapshot is assigned to a specific region, the algorithm determines the number of neighboring regions using the border cells found during the recursive process and establishes links between nodes where regions are considered linked if their border cells are adjacent to each other. other necessary parameters for a complete graph representation include the distance between the connected regions’ centers , orientation with respect to each other , and the border between the two regions . the center of a region is calculated by averaging the spatial centers of every cell within a particular region. the euclidian distance between these points of neighboring regions is used to define the length and orientation of each link. finally, the graph component parameter defining the borders of regions in each direction is calculated from the location of the most distantly located cell in a specific direction. the number of parameters for a region depends on the number of links it has with other regions. figures  <dig> show examples of simulation morphologies that have been converted to a graph formalism using this algorithm.

simulation snapshots are converted to well-ordered graphs using our conversion and graph-edit distance algorithms
during an evolutionary search, large numbers of unique individuals are generated and must be evaluated against the target individual encoded in the database. thus, we sought to evaluate our conversion algorithm manually to ensure the graph representations were intuitive and to evaluate the use of the graph edit distance metric for ordering individuals in the population. to this end, we generated a number of worms with distinct morphologies by hand using the modeling platform and converted their snapshots into graph representations using our algorithm. the simplest individuals that can be represented by the simulation platform include worms with discrete regions, whereas more complicated morphologies consisting of regions contained within other regions could also exist. just considering the basic morphologies, the number of individuals that can be formed and the search space for the genetic algorithm are infinite, and therefore our algorithm was tested using simple individuals before considering more complicated morphologies.as shown in figure  <dig>  we generated a series of distinct worms  for comparison with a desired target . in each case, the worm representations included two fragments to simulate the state of worms following a single transverse cut. each worm was generated by injection of the appropriate cell-state resource  to generate the desired regions within the worm fragments, resulting in different permutations of head, tail and trunk regions. every test morphology was converted to a graph  using our conversion algorithm. we did not find discordance between the graphs generated by the conversion algorithm and those expected upon visual inspection of the simulation output. thus, the algorithm was working as expected on these simple morphologies.during an evolutionary search, the genetic algorithm needs to compare individuals to the target and reward those individuals with morphologies most similar to the target individual as their offspring are more likely to possess the a reaction network capable of proper regeneration. the genetic algorithm thus assigns fitness values based upon how similar the individual is to the target, with more similar individuals getting higher fitness values. a fitness value of  <dig>  is awarded to an individual with a perfect match to the target and is the ultimate goal of a search. thus, we calculated the graph edit distance between each test individual and the target and converted those values into a fitness value .

the graph edit distance penalties used in our algorithm and this manuscript are described in table  <dig>  but can be modified by the user. the penalties are most severe when differences exist between region numbers and connectivity than for region size and linkage parameters. while the optimization of the graph edit costs is beyond the scope of this paper, we will explore methods for automated optimization of the graph edit costs in future work.the target individual, when compared to itself, yielded a value of  <dig> , because when two individuals are identical, the distance between them measured by the graph edit distance algorithm is  <dig>  using equation  <dig>  the distance of  <dig>  translates to a fitness value of  <dig> , which in a genetic algorithm search would indicate the target morphology has been found. morphology  <dig> in figure  <dig> is a slight variation of the target morphology, where its heads are several cell layers thinner than the heads of the target, and as expected, has the next best fitness value . in general, high fitness values for morphologies such as number  <dig> are expected as their regions are connected and oriented the same as the target. when compared to the target, morphologies that consist of three regions in each worm fragment received higher fitness values than morphologies having one or two regions. for example, morphology  <dig> was rated higher than morphology  <dig>  again, this is because the graph edit distance costs included a much larger penalty for the deletion of a region than with a change to the type of region.

conversion of a simulation snapshot into the graph is an o algorithm where n is the number of cells in an individual. the wild type morphology had  <dig> cells, but since the transverse cut removed four rows of cells, the morphologies used in this experiment consisted of  <dig> cells. the conversion algorithm ran in less than  <dig>  seconds for every morphology in figure  <dig>  it is well-known that the run time of the graph edit distance calculation grows exponentially with the size of the graphs   <cit> . however, since the number of regions in each morphology tested was at most  <dig>  the graph distance algorithm finished in less than  <dig> millisecond for all morphologies.

a cell connectivity distance threshold effects region determination
a comparison of more complicated morphologies highlighted the need for a flexible distance threshold in the component gathering algorithm. since the cells in our simulation have radii of  <dig>  units, the euclidian distance between two adjacent cells can be as low as one. however, using a very rigid measure for identifying neighboring cells and determining the borders of regions can have dramatic effects on the graph conversion. for example, consider the morphology of the second individual shown in figure  <dig>  in this individual thin lines of trunk cells dissect the head and tail regions into a number of potentially distinct heads and tails if the borders are considered rigidly. comparison of this individual with the target results in a very high graph edit distance due to the cost associated with having multiple heads. however, in the context of a evolutionary search, this individual may be very close to producing the target morphology.

a flexible threshold parameter was introduced to reduce the rigidity of region definitions, which allowed neighboring regions separated by thin regions to be merged in the final graph representation. increasing the threshold value reduces the stringency by increasing the search distance between cells for neighbors with the same state. thus, in the example just discussed, increasing the threshold value allowed the multiple head regions to be lumped into a single head region. the graph edit distance of this worm is much lower resulting in a fitness value close to one.a second example highlighting the importance of this parameter to component gathering is presented at the bottom of figure  <dig>  this worm represents a classic experiment that involves bifurcating the head region into two fully-developed heads. these two heads are separated physically and should be classified as two-headed. a threshold parameter of less than three results in the desired graph conversion in our algorithm, whereas the larger value results in a worm with a single head.

these two examples show the necessity of a flexible parameter for determining local regions during a ga run. in the first case, a low threshold was shown to penalize a morphology that was very similar to the target, whereas a high threshold inappropriately favored a morphology containing a physical gap between head regions. an optimal threshold will depend upon the modeling platform and project, but in this work and from an evolutionary perspective a threshold of two was optimal.

validation of component gathering and graph edit distance during evolutionary search
as our ultimate goal is the generation of an automated model discovery tool, we tested the utility of our conversion algorithm and the graph edit distance as a fitness metric as part of an evolutionary search for a target described in the planformdb. as shown in figure 6a, we selected an experiment from the database where either the anterior or posterior end of an intact worm was removed. functionality was added to the ga to interact directly with the planformdb so that it could extract the target individual as a graph representation for comparison. the target individual for this experiment was a single normal worm consisting of head, trunk, and tail regions connected in that order .

the starting population of individuals in the ga search contained a version of the hand-designed model description shown in figure  <dig> after it was purposely modified to become non-functional. the regeneration, head development, and tail development resources were removed from the regulatory network, thus preventing proper regeneration . we were interested in whether the ga could find solutions that properly regenerated the tail region using our conversion algorithm and a fitness metric based solely on the graph edit distance calculation. since the ga is designed to evaluate fitness values in the range of  <dig>  to  <dig> , we converted the graph edit value as shown in equation  <dig>  initially, we used the simple inverse function of 1/ to obtain the ga fitness values. however, the fitness function values in such cases tended to be very small even for relatively similar graphs due to sensitivity caused by the large edit penalties in table  <dig>  to reduce the sensitivity to the large edit distance penalties, we introduced a constant  to our equation after empirically testing values between  <dig> and  <dig>  constants below  <dig> were excluded as they yielded very small fitness values, while constants above  <dig> were excluded on the basis of generating high fitness values for individuals with morphologies very dissimilar to the target. although other numbers in this range could have sufficed, the  <dig> value maximized the differences between fitness values and thus was used in this work. 

  fitness= <dig> 

our searches included populations of only  <dig> individuals, but much larger populations are feasible. in order to generate variability in the individuals, a set of mutation and crossover parameters were introduced and applied to each new generation of offspring. these operators and parameters were hand designed for this experiment, but parameter definition will eventually become automated. searches were performed for individuals with proper regeneration of head or tail following removal of the anterior or posterior regions, respectively. during the evolutionary search, the ga pauses each simulation at a predefined step  and requests a simulated experiment be performed . each individual simulation is resumed and continues until the ga requests a snapshot to evaluate . at this point, the simulation snapshot is used to create a graph representation using our component gathering algorithm, which is then compared to the target individual from the planformdb to determine the individual’s fitness value. high scoring individuals were chosen for reproduction to generate the next generation of individuals which were independently mutated to increase variability in the population.the ga was successful in identifying individuals with fitness values very close to the target value of  <dig> . two such regulatory networks are shown in figure  <dig>  the network shown in figure  <dig> is a representative evolved solution when selecting for a worm that properly regenerates head after removal of the anterior region of an intact worm. similarly, the network in figure  <dig> comes from a representative worm that was evolved to regenerate a tail following removal of the posterior end. there are noticeable similarities between the two solutions. in both solutions, a direct connection was made between the cut response to regeneration of the missing region, head or tail, respectively. although each search found a solution to the experiment at hand, the solutions were limited in their flexibility to respond to other permutations. as expected, neither network was capable of solving the reverse problem as their was no selective pressure in the evolutionary search. nonetheless, these results show that our evolutionary search process is capable of finding solutions using our connected component analysis to convert cell-based individuals into graphs, which are compared with the appropriate target extracted from the planformdb using the graph edit difference evaluation metric.

the inflexible network solutions emphasize the importance of searching for solutions using rigorous fitness criteria and why an automated approach is necessary. future experiments will target networks that are capable of handling both anterior and posterior ablations. simulation snapshots contain a detailed description of the current state of the simulation, including a list of all cells, their location, shape, genomes, metabolic equations, environmental conditions, and the concentration of all resources. thus, snapshots provide much richer information about the cells and individuals than the graph formalism and will provide opportunities to develop additional fitness metrics to complement graph edit distance in the future.

discussion and 
CONCLUSIONS
one of the challenges in the biological sciences is the development of new methods for data visualization and integration to provide informative and predictive insight into the scientific process. computer models hold great promise in this area, but often involve significant human interaction and time. in this study, we laid the foundation for a system of automated model discovery and development that incorporates shape-based experimental data from a repository of documented experiments. graphs are a powerful and convenient means of describing morphological data. using comparison methods, such as the graph difference evaluation, one can easily search such a database for results that are similar or identical. we showed that the utility of the graph difference evaluation could be further extended as a fitness evaluation metric during evolutionary search. this method was combined with a cell-based modeling platform to model basic regeneration of the planarian flatworm. agent-based models are particularly amenable to this approach as they are tractable to simulated experimental manipulations combined with fully emergent outcomes. the ability to automate these behaviors fits nicely into an automated discovery system that can be driven by a genetic algorithm search engine. furthermore, simulators that include robust visualization capabilities make it very convenient for the scientist to evaluate or experiment on a set of search results.

planarian worms provide an excellent model system for developing such an automated search process due to the plethora of experimental data in the literature, and now available in a curated database . however, the principles inherent in this design are extensible to any system where shape is an integral component of the observable outcomes. that said, developing model discovery systems that automatically incorporate experimental data is a general and attainable goal that is not limited to systems dependent upon morphological data.the challenge of describing phenotypic outcomes based upon morphological characteristics is challenging for biological systems and cell-based computational models alike. we showed that converting cell-based simulation output into graphs can be achieved using a component gathering algorithm that identifies regions and their juxtaposition to each other and converts them into nodes joined by linkages. the resulting graphs can be stored to a database and easily reconstructed later and/or compared with other graphs using algorithms such as the graph edit distance. these comparisons and the resulting metric were incorporated into an evolutionary search where the genetic algorithm retrieved its target morphology from a data repository of experimental outcomes and used the graph edit distance as a fitness metric to drive development. using a small population size of  <dig> individuals, our mutation and crossover frequencies were sufficient to generate a solution state in as few as  <dig> generations for the experiments shown in figure  <dig> 

the method for converting a simulation snapshot to a graph formulation works well, and the converted morphologies reflected shape and positions of body regions relative to each other in space. the graph-based fitness function thus accurately distinguishes the shapes of different morphologies, but does have difficulty predicting which morphology will more likely regenerate into the target morphology. to improve the effectiveness of our graph-based fitness function, future work will seek to automate the optimization of the graph edit costs to not only reflect the shapes of individuals, but also to favor morphologies that are more likely to regenerate into the target individual. the optimization of graph edit costs needs to be automated since tweaking graph edit costs allows one to achieve a more accurate graph comparison for some cases, but there is no perfect parameter assignment that covers all cases, and so it should be chosen depending on the needs and design of the experiment.

future work will also develop additional morphological based fitness functions to act side by side with the graph edit distance fitness function. this will allow researchers to choose from among multiple morphological fitness operators, possibly combining the output of several evaluators instead of assigning a fitness value based on one fitness function evaluation.

