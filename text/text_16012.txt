BACKGROUND
though recent decades have seen a decrease in mortality related to infectious disease, new dangers have appeared in the form of emerging and re-emerging pathogens as well as the continuing threat of weaponized infectious agents
 <cit> , thus creating a strong need to find new methods and targets for treatment. underscoring the importance of this issue, the national institute of allergy and infectious disease maintains a categorical ranking of disease-causing microorganisms  that could cause significant harm and mortality
 <cit> . broadly, infectious disease remains a global concern and a problem whose impact is most felt in poorer areas of the world. fortunately, many pathogen genomes have been sequenced and continue to be sequenced, and hold the promise of expediting new therapeutics. as a result, genomic and proteomic sequences are available for many bacterial and viral causes of disease. the national microbial pathogen data resource , a curated database of pathogen genomes, lists  <dig> different species and strains bacteria and eukarya infectious to mankind
 <cit> . the availability and dissemination of this data has allowed many new discoveries in virulence research to stem at least partly from computational methods. the challenge is no longer having to work with limited data, but rather how best to exploit the information available and prioritize targets of study.

a critical set of potential genes of interest within a pathogen are those directly involved in pathogenesis. these genes, or virulence factors, can have varying degrees of importance in the initiation and maintenance of infection, and constitute an attractive group of putative targets. concrete determination of a gene’s involvement in disease is generally left to experimental results, and many studies rely on knockouts or mutations of putative virulence genes
 <cit> . resulting attenuation or avirulence would then be strong evidence that the gene is involved in disease, although the exact function or role may still remain a mystery. proper target selection is important, however, given that laboratory science makes the identification and verification of virulence factors a costly endeavor. faster methods are preferred early on that can highlight the most likely targets before experimental assays are carried out.

identifying and annotating these virulence factors is an early and integral part of understanding how a disease causes damage to a host; improvements in accuracy and speed for finding proteins involved in virulence have the potential to increase the analytical throughput of therapeutic research, provide clues towards mechanisms of infection and provide tempting biomarkers for diagnostic techniques. however, prior computational research in quickly identifying virulence factors has been limited, and has only in the last few years become an area of strong interest for researchers. several public databases have recently been released that focus exclusively on pathogenesis. among these include: the virulence factor database , a repository of genomic and proteomic data for bacterial human pathogens
 <cit> ; the argo database, a collection of virulence factors believed to be involved with resistance for β-lactam and vancomycin families of antibiotics
 <cit> ; and mvirdb, a aggregated data warehouse of many, smaller virulence-related databases 
 <cit> . many of these repositories support standard sequence-based searches against their content, facilitating virulence identification via sequence similarity.

classification algorithms have also been applied to the problem of virulence recognition for cases where homologies between virulence proteins may be remote. sachdeva et al., for example, used neural networks to identify adhesins related to virulence
 <cit> . saha used support vector machines to predict general virulence factors via an approach similar to one proposed in
 <cit>  - mapping combinations of the amino acid alphabet to a space such that the presence of a peptide sequence would constitute a classifiable feature
 <cit> . however, the resulting top accuracy for virulence proteins,  <dig> %, was relatively low in comparison to the other protein roles predicted . work by garg and gupta improved on this performance by also relying on polypeptide frequencies in conjunction with psi-blast data in a cascaded support vector machine  classifier
 <cit> . this approach yielded a higher accuracy of  <dig> % and an area under the receiver operating characteristic  curve of  <dig>  for generalized virulence prediction. other methods have directed attention at specific types of virulence proteins; sato et al. developed a model for predicting type iii  secretory proteins within salmonella enterica and generalized to pseudomonas syringae <cit> , and mcdermott et al. compare multiple computational secretory prediction methods to predict t3/ <dig> effectors on completely novel proteins
 <cit> .

the present work expands upon the recent research in computational virulence prediction relying on noisy, weakly-related annotation information rather than direct sequence data, and describes an approach relying on readily available public data for predicting microbial protein relation to virulence. information from multiple biologic databases are returned wholesale using a retrieval approach that constructs an interlinked graph of connected information, providing broad functional coverage.

note that the information retrieved may or may not be specifically relevant or correct with regards to the protein of interest; rather than using that information for direct annotation, the aggregate data are used to build a weighted graph used as input to statistical methods trained to recognize virulence proteins. we apply this approach to both overall and specific virulence, and evaluate its performance against competing methods.

methods
path-based query retrieval
the methodology we adopt relies on retrieving abundant information regarding a protein sequence using a networked query graph. the core of this approach relies on the notion that leveraging multiple sources simultaneously will improve functional coverage of any given query protein.

we describe the basic query and retrieval model here briefly : let a query graph g derived from some schema s be g = 〈v,e〉, where v  are the nodes and e the relations between the nodes. for any concrete instance of a query graph, v  refers to the individual records returned from any protein sequence query, and e the connection between those records  or the protein sequence directly . s constrains v ∈ v to specific resources , and the nature of e ∈ e to specific relations between those resources. in this definition, we allow the assignment of weights onto the edges; in the case of pair-wise sequence comparisons, these weights may represent the quality of the alignment between the query protein and other proteins within a resource. intuitively, a query graph can imagined as a realization of a graph database whose joins are represented by the edges e: vi ⋈d vj, where vi,vj ∈ v and d is some primary key-like attribute . this concept can be illustrated via a simple blast search: a query is seeded with a protein sequence, s0; the results of the query may be n other sequences, s <dig> …,sn, for which pairwise alignments →vi) are identified.

we extend the notion of a query graph to exploratory query graphs, or a query graphs expanded to the limit of connections defined in s such that for any given protein query, all possible connections between records and all records are realized. following the previous example, all sequences aligned to s <dig> may themselves be used as queries against additional databases, generating a larger query graph whose contents may span multiple sources. exploratory query graphs thus represent a materialization of the entirety of s for any given protein sequence query.

notably, the query and retrieval approach we describe has been employed widely in life sciences research for data management and navigation purposes
 <cit> . however, whereas these prior works has focused on the retrieval, curation, and provenance of biological records, this present study is less interested in the quality of each individual datum and instead focuses on the use of the query graphs as a whole to infer  annotations on the initial seeding query that may not be explicitly represented in the query graphs.

constructing weighted query graphs from sequence data
we exploit the notion that within a path-based model, the closer a node is to the initial query, the more relevance it likely has to that query, and that those further from the query itself are theoretically of waning relevance. naturally, the contents of exploratory query graphs will include records that may be quite distant from the initial query. prior work by others in the field of biologic data representation explored various methods of exploiting the graph structure for inferring the relevance of individual nodes and paths. bharat and henzinger
 <cit> , for example, describe several algorithms, such as those that use the in- and out-degree of nodes, for the analogous problem of determining topical relevance of hyperlinked documents; tsuda et al.
 <cit>  use a diffusion-based approach to assign weights within protein networks, a method readily adaptable to query graphs; weston et al.
 <cit>  apply a rank propagation algorithm on sequence similarity graphs generated from psi-blast hit values; and detwiler et al.
 <cit>  test a variety of methods, such as monte carlo simulations and relevance propagation, to rank nodes in similar graphs. in contrast, our interest is less in the relevance of any individual node, and instead in the value of using the graph globally as a representation of the query for classification activities.

after seeding an initial query, retrieving records and fully expanding the query graph, we transform the contents of the graph into a representation more amenable to classification by weighting nodes in the query graphs and representing their records as numerical features that can be used as inputs to statistical classification methods. this approach bypasses the difficulties in comparing query graphs directly, and depending on the weighting scheme used can still leverage the benefits of the graph structure. because the query graph is generated by a series of linkages across databases, groups of nodes that share edges most often or have strong sequence-similarity to the query can be weighed highest. an ideal scheme would heavily weigh nodes that characterize the query sequence more precisely, and lightly weigh nodes that do not, thereby minimizing noise.

begin by letting wt be the weight of node n in the query graph at some iteration t, and that  <dig> ≤ wt ≤  <dig>  for all t,n. this represents the grounding that a user’s posed query is the most confident node within the graph, and that further confidences emanating from resultant queries are derivative of this, and propagate outwards. an illustrative way of representing degradation of confidences between nodes in an exploratory, query sequence-based graph would be expect values from blast-based alignments; let expect represent the expect value from some query p to the result n. thus, the influence of a node’s inward-joining neighbors may be represented as a factor of both those neighbors’ weights ) and their relation to the target node. define ψ as some function that map some value between relations  ∈ e such that ψ is within the domain of . we can then represent weights of nodes within the query graph by: 

  wt←λ1−∏∈e1−wt−1ψ, 

where λ→[ <dig> ) is a path degradation rate and serves a similar purpose as the pagerank damping factor
 <cit> , representing belief that information further from the initial query is of decreasing relevance. for all experiments described in the remainder of this work, λ =  <dig>  was used and ψ is set to: 

  ψ=log10expect <dig>  

the above being an empirically determined from
 <cit> . all nodes were given initial weights of  <dig>  save the query itself, which is given a weight of  <dig>  and the algorithm iterates until convergence. applying weights in this manner takes into account the notion that some nodes will be more well-connected than others. consequently, nodes with more incoming edges will have a higher weight than nodes with less, all other things being equal.

query subgraphs as features
we were primarily interested in the use of query graphs generated from sequences for use as a “fingerprint” in identifying virulent and non-virulent proteins, so once a graph was weighted it was transformed into a feature representation. let v represent a vector of weights from a single data source . we represent any query graph as several feature vectors, depending on the number of sources, and implicitly capture the presumed relevance of the node under the weighting scheme described earlier. transformation of the graph weights to fit the feature vector space model is straightforward, and missing data treated simply. given a data source d with subset of known records h , the feature vector v for g on d is: 

  vt={∀v∈h:v <dig> ⋯,vn}, 

where, 

 n=wifn∈0otherwise. 

in the above, w may take the value of any arbitrary weighting scheme. if v has known classification, it would then be possible to use it as a member instance of a label in classification training.

the query graphs for the evaluation were generated using the sources and schema shown in figure
 <dig>  and of the sources incorporated into the schema all except for entrezgene, entrezprotein and uniprot were tested for classifying abilities. features upon which classifiers were developed were uniquely identifiable database records. for example, features from amigo and gennav were go terms across all three ontologies  ; features from cdd were conserved domains ; features from kegg included pathways , etc. while two sources represent go terms , there was an important distinction between the two: amigo provided only terms directly being referenced by other sources, whereas gennav additionally provided the ancestors of terms. as a result, feature vectors built from gennav reconstructed portions of the go graph within each query instance, allowing us to later compare the utility of discrimination using reference terms versus reference terms within their hierarchical context.
 <cit> , go terms 
 <cit> , interpro domains and families
 <cit> , tigrfam families
 <cit> , biocyc pathways
 <cit> , kegg terms and pathways
 <cit> , and cdd domains
 <cit> . note that gennav is a recursive source - that is, it may re-query itself to recreate the go hierarchy within the query graph.

datasets for general and specific virulence
the above method and implementation provides a means to query a protein, weight the nodes in the query graph and transform the results into a feature representation suitable for training and classification. we evaluated virulence and non-virulent protein prediction using information derived from query graphs using two different datasets – one for general virulence, and one for specific virulence subcategories.

general virulence dataset
we identified a curated set of proteins with which to evaluate the performance of our approach in the form of the non-redundant protein set used by garg and gupta to test their own virulence detection system
 <cit> , and adopt their train-test procedure to allow direct comparison. though composed of virulence proteins with a variety of functions, garg and gupta treated the entire set as ‘general virulence’ test cases. the positive, virulent number of examples in the set was  <dig>  with  <dig> of these acting as training instances for cross-validation and parameter selection, and the remaining  <dig> for testing. likewise, the non-virulent proteins numbered  <dig>  with a division of  <dig> and  <dig> for testing and cross-validation, respectively. this constituted an 80%-20% train-test split, with the larger fraction used to optimize the parameters for each algorithm and the smaller used for final testing.

specific virulence dataset
the dataset developed by garg and gupta lacked the annotation granularity needed to determine specific virulence roles a protein may play, since the dataset was purely binary in classification, and a protein was categorized as either ‘virulent’ or ‘non-virulent’. for a more specific prediction of virulence factors, we relied on a data warehouse of virulence proteins mentioned earlier, mvirdb. in order to transform the protein data in mvirdb into a suitable training and testing set, the first step was curation of the data into a non-redundant, representative set of proteins.

the original mvirdb dataset consisted of  <dig> records. the few dna sequences in this set were translated to protein sequences, beginning at the leading methionine if present, using the longest open reading frame; otherwise, the dna sequence was removed from the set. databases whose contents were viral sequences were removed from the set. these initial filters yielded  <dig> remaining proteins.

for negative training and test instances,  <dig> proteins were randomly drawn from genbank
 <cit>  and filtered for proteins highly likely to be involved in virulence based on regular expression searches on the protein names and annotations. for example, proteins whose names contained ‘drug’ or ‘toxin’ were removed. proteins from known pathogen organisms were otherwise left undisturbed in the negative set under the notion that not all proteins within an infectious organism are involved in virulence. at the same time, hypothetical proteins whose functions were unknown were also removed from the negative set. finally, cd-hit
 <cit>  was used to generate non-redundant protein clusters for the positive and negative sets combined, at 40% sequence identity. this last non-redundancy step ensured that proteins used for the evaluation would be dissimilar overall, and permit validation of discrimination in cases of remote homology
 <cit> . the final sequence dataset consisted of  <dig> proteins,  <dig> of which constituted the negative  set and  <dig> of which formed the positive  classes .

once the datasets were curated for non-redundancy, and possible virulence factors in the case of negative set, the positive set proteins were labeled with specific virulence functions. labeling was done based on the information regarding the protein readily available from the originating virulence data sources; many of the databases that mvirdb integrated used a native classification system. virulence proteins were annotated manually, based on the original classifications and literature references of the native databases.

to illustrate the need for manual annotation over the positive dataset, many databases whose focus is on a specific type or family of proteins, such as in the case of argo and antibiotic resistance proteins, simply annotate all proteins as a single type. as a result, a small number of categories have very many instances. in other cases, annotations appeared idiosyncratic at the deepest level, but may have been subsumed by higher-level annotations. in this regard, the problem faced is similar to that encountered by the curators of the unified medical language system , the foundational model of anatomy  and go
 <cit>  and similarly a solution based on manual comparisons of the various databases’ classifications schemes is used here. this manual annotation process is outlined stepwise in table
 <dig> 

iterative method used to manually align and annotate the virulence classifications for virulent proteins in the training and testing dataset.

manual annotation of the virulence proteins was an iterative process that continued until no further label changes were made to the dataset . as a result of the manual annotation,  <dig> top-level virulence-related labels were derived .

the  <dig> main virulence categories derived manually from the virulent protein data sources with the number of training and testing records, after 40% identity pruning.

general virulence prediction evaluation procedure
query graphs were generated for all  <dig> proteins in the generalized virulence data set with the schema in figure
 <dig> using the path-based query approach described earlier. analysis of the data focused on evaluation of performance via area under the receiver operating characteristic curve, or auc. three learning algorithms were tested to evaluate whether an integrated query approach can be robustly applied to different classifiers: k nearest-neighbor , ridge regression and svms
 <cit> . the above are discriminative methods that have been successfully applied to noisy biological datasets in the past for classification problems, and we refer the reader to the above citations for the mathematical details of each approach. briefly, a knn model makes few assumptions regarding the structure of the data, and the class for an unknown instance is learned directly from the training examples via some distance metric, such that
yi^=1k∑j∈niyj, where members of
ni are dictated by some distance function , this distance function returned an e-value). classifiers based on ridge regression techniques attempt linear separability of the data by obtaining the w that minimizes the function ∑i <dig> + λ||w|| <dig>  in this formulation, w defines the class-discriminating boundary. in the svm the function to minimize is  + c ∑iζi s.t.  ≥  <dig> − ζi, where c represents a cost parameter for the “slack” variable ζ. while ridge regression and svm appear similar, the regularizing functions of ridge regression  and the svm differ  differ. moreover, in the svm ζ permits the presence of an optimal boundary that may not separate two classes. both methods, however, can be formulated in an optimizable dual form, and all three can take advantage of a kernelization function, where the data points are transformed to a space that allows linear separability for otherwise non-linear data. we rely on the kernelized  implementations provided in a open source machine learning package
 <cit> , for all experiments; appropriate free parameters were optimized for each method using grid searches.

for the general virulence dataset, we compared the above classifiers, trained on inputs generated using integrated query graphs, against the bi-layer cascaded svm approach originally employed by garg and gupta . virulentpred relied on amino acid frequencies, sliding window peptide n-grams and a feature set derived from position-specific scoring matrices generated from psi-blast searches against nbci’s non-redundant database. likewise, we included for comparison baseline approaches against which virulentpred was evaluated; namely, single svms trained against amino acid frequencies. in this case, 1-, 2- and 3-mer frequencies of proteins were used as the feature to an svm classifier, resulting in trainable feature spaces of size  <dig>   <dig> and  <dig>  respectively.

specific virulence prediction evaluation procedure
unlike the prediction of generalized virulence in the previous section, the problem of specific virulence is multiclass. each protein was permitted to have multiple virulence labels attached to it, and thus for each classification method and source  <dig> different svms were tested in a one-versus-rest fashion. that is, each virulence category was set as the positive set of interest, and all other proteins  were treated as the negative set. two primary experiments were conducted on the specific virulence set.

first, similarly to how evaluation was conducted for generalized virulence, the dataset for specific virulence was split into training and testing components; 80% of the dataset was used for training the various parameters for the classifiers and 20% retained for final testing. for the integrated query graphs, data was generated as in the generalized virulence experiment, with the same data sources and identical schema. as the svm performed the best overall in the generalized virulence experiment , this kernel was chosen for the specific virulence classification experiment. optimal parameters for the integrated query graph were determined via a grid search using the same procedure as generalized virulence. the parameters selected for each source and for each virulence class were those that provided the best auc performance.

one step utilized in specific virulence that was not done in general virulence was feature selection on the integrated query graphs for the train-test split experiment, in the form of f- scores. this metric, calculated prior to svm training and testing, provides a rough estimate of the predictive value of a feature, independent of the other features, for any given class. the calculation used here follows the formulation outlined in
 <cit> . let i correspond to the ith feature in a data source. then: 

  f=x¯i−x¯i2+x¯i−x¯i21|x|−1∑k=1|x|xk,i−x¯i+1|x|−1∑k=1|x|xk,i−x¯i, 

where, respectively, x and x are the positive and negative datasets,
x¯,
x¯,
x¯i are the averages of the positive, negative and complete sets of the ith feature, and
xk,i,
xk,i are the values of the ith feature of the kth instance of the positive and negative sets. features whose f-scores were in the top 25%, 50% and 75% were tested, per source in the training set. as with the svm parameters, the features that yielded the best auc in training were the features then used for the final test results.

the second experiment involved running six five-fold cross-validations for each class and method with the intention of obtaining measures of variance and deviation for each classifier. for each cross-validation run, the five-fold splits were the same across all classifiers to accommodate direct, paired comparison. in the case of svm-based baseline methods and sources, gaussian kernels were used, as they seemed to have the most consistent performance in generalized virulence prediction ; parameters for the kernel and svm were default and non-optimized, per libsvm
 <cit> . because  <dig> individual values are reported for each classifier per virulence class, paired two-tailed t-tests were used to measure the significance of any mean differences between the sources, and between the sources and baseline methods; p-values were adjusted for multiple pair-wise comparisons via bonferroni correction.

to compare the performance of our methods against the problem of specific virulence, we used several classifiers to establish baselines. the first baseline approach was carried over from the methods used for comparing generalized virulence, and was simply a 3-mer sliding window of amino acid frequency counts. the second baseline classifier was a nearest-neighbor sequence-similarity-based approach, where a blast database of the specific virulence dataset was created, and classification decisions were based on mutual blast results of the dataset proteins against each other. each individual protein i was queried against the created blast database, and its affinity p to any given class c was determined by: 

  pi∈l=∑n∈ni1n|ni|, 

where the set
ni denotes the neighborhood of k-nearest proteins to i , and 1n is the indicator function, which is equal to  <dig> if n ∈ l and  <dig> otherwise; thus, p is the fraction of the k-nearest neighbors of i that have membership in l. this approach was used since each protein in the dataset could take on multiple classes at once and the formulation in  permits the measurement of membership strength for any arbitrary class, given some protein; for present purposes, the cluster size was chosen to be k =  <dig>  the motivation behind this very simple approach is to measure annotation based on data from a single source, and in such a way as to emulate how an annotator may scan the best-scoring blast hits of a sequence to determine function
 <cit> .

the third and final baseline classifier used was also based on blast, but relies on using svms trained on pair-wise hits  against a blast database of the training set. to generate features for this third baseline classifier, each test sequence was queried against the trained blast database, resulting in a vector representation of a sequence’s negative log transformed e-value score to the other sequences within the database. this method is referred to as blast+svm and has been used in prior experiments by others, where svms based on pair-wise blast queries outperformed or were comparable to other methods such as svm-fisher, sam, psi-blast, smith-waterman and motifs with svms in detecting sequences that were remotely homologous
 <cit> .

RESULTS
general virulence
comparison of data sources for predicting virulence
table
 <dig> shows the results of using different data sources extracted from the query graph for predicting virulence. one emergent pattern from the results was that the more coverage a data source provided, the better it performed. the notable exception is the difference between amigo and gennav - both sources use go terms linked from other sources, and have the same coverage. however, gennav links to the parents of the go terms, and the parents of those go terms and so on, up to the top-level of the go hierarchy. despite the similarity in coverage, gennav outperforms amigo by as much as  <dig> . gennav generates more data than amigo via self-reference, and the performance difference suggests that leveraging the ancestry of a go term may be more useful for predictive purposes than just the immediate go term by itself. overall, results imply that the sources oriented around go terms were the best performing, while tigrfam and biocyc were the least predictive.

results by source and method for predicting virulent and non-virulent bacterial proteins given auc. the best performer, gennav was run with a gaussian kernel whose σ =  <dig>  and regularization cost c =  <dig> . for each method, the best performing classification approach is bolded.

to determine if the pattern carried over when empty query graphs  were excluded, the same train-test process was re-ran as before, omitting any query graph from training or testing that did not yield any query results. as the svm approach seemed to do the best on average, that statistical learning approach was used for this follow-up experiment, and the appropriate parameters were optimized for this subset of the training-testing data. omitting empty graphs reduced the number of training and testing instances for each source, in some cases by more than 50%. however, the result was a rough sense of the predictive ability of each source, given records existed for that source in the query graph . though amigo and gennav maintained essentially the same scores, the rest of the sources experienced noticeable increases. despite this overall improvement, the relative ranking of the sources remained the same, again with amigo and gennav outperforming other sources.

above are results by source, when empty graphs  are excluded from training and testing; the scores are thus those of each source given data from that source was available.

comparison with competing methods for predicting virulence
comparing the aucs and accuracies of using weighted and integrated queries with the cascaded svm approach, there is a marked improvement in performance. using the best-scoring single source , the three learning approaches were compared the amino acid frequency baseline and virulentpred . regardless of the statistical learning method used, gennav integrated queries resulted in aucs of  <dig> - <dig>  higher than the cascaded svm approach, and approximately  <dig>  greater than the sequence baseline. accuracies are less one-sided, and in fact the knn approach did only  <dig>  better than the sequence baseline, suggestive of the significant amount of noise present in the retrieved data.

comparison of the top-performing integrated predictor against a sequence baseline and virulentpred; all methods outlined in the table used the same set of proteins.

specific virulence
source-against-source performance
across all specific virulence categories the aucs of the gennav and amigo data sources, whose records were indirectly queried from the seeding protein, outperformed all other methods and data sources, in some cases by very large margins . comparisons of the go-based results to the other sources are further indicative that a learner based on integrated queries provides a better classifier. notably, two other sources that are more lightly integrated, kegg and interpro also perform well relative to the other sources; under kendall’s rank correlation, coverage  was significantly related to auc.

number of features per source used for specific virulence predictions. individual source feature sizes are reported before any feature selection.

further analysis of the roc scores reveals other interesting results. category  <dig>  motility, was relatively trivial to classify not merely by gennav but by other sources as well, including kegg and interpro. one explanation for these results was that the motility of bacterial pathogens, and indeed bacteria in general, is a very well characterized process, and proteins related to bacterial motion are well-annotated and unambiguous. despite its coverage in comparison to sources like tigrfam and biocyc, and contrary to the case in other categories, pdb records failed to predict motility well. this may partly be due to the fact that motility-related proteins, given their high probability of containing transmembrane regions, are difficult to structurally elucidate and thus good exemplars of this class are more absent in this database.

integrated query graph learning versus baseline methods
besides making inter-source comparisons, we compared our query-based learning methods to baseline methods. figure
 <dig> shows the pair-wise comparison results of six five-fold cross validation runs with the sources and baseline methods, with better methods appearing higher in the graph. note that unlike the parameter-optimized results in the previous section, feature selection based on training data for the sources was not performed and classification was done using an unpruned feature set.

statistical significance of pairwise comparisons are also visible in figure
 <dig> via transitive arrows. it stands out that in all but one virulence class, at least one of the queried data sources outperforms all baseline methods; 3-mer performance on the surface factor label was exemplary compared to most sources and the other baseline methods . however, it was also the label with the fewest instances. in eight of the virulence classes, the roc curves of go-term based methods outperform not just baseline methods, but all other sources as well. interestingly, for proteins related to antibiotic resistance, such as drug efflux pumps, interpro does significantly better than all other sources and methods.

it was also important to determine how well virulence classes could be discerned using varying levels of training set sizes. the motivation behind measuring this was to gauge how well known a family of virulence factors may need to be for successful identification ‘in the wild.’ figure
 <dig> displays the aucs of a subset of sources  and all baseline methods from three paired five-fold cross-validations under different and increasing training set sizes -10%, 40%, 70% and 100% of the original training set sizes; testing sets remain untouched.

these findings strongly illustrate that the performance of some classifiers do not significantly change with the number of instances seen. in the case of the motility and secretion classes, both kegg and gennav perform essentially the same and with little change, though for other sources such as interpro the auc increased with the training set size. this led to the conclusion that some data sources may better characterize classes than other sources, and that in the case of gennav and kegg for secretion, there are likely a set of terms or pathways that commonly describe pathogen secretory mechanisms, and that these annotations are widespread across the set of secretion-related proteins. also of note was the performance of gennav under small training set size conditions. other sources and methods generally tend to perform poorly  with training sets less than  <dig> instances, whereas gennav does considerably better in  <dig> of the  <dig> cases often by more than  <dig> . this suggests that heavily integrated sources, such as gennav, may have additional utility over other methods when the number of seen and known instances from which to train are very low, leading to the hypothesis that integrated methods may do better under more ambiguous conditions when compared to competing approaches.

estimating the advantage of multiple features for specific virulence
thus far, results have strongly suggested that some categories are much easier to classify than others. for example, motility was easily predicted across all integrated sources, and for some even at very low numbers of training instances. in comparison, other virulence classes such as invasion and defense remain harder to identify with strong confidence. because many of these nuances in performance are both source- and label-specific, it was of interest to generate rocs without a classifier, and using only the weights determined from the propagation algorithm in the query graphs. for each category and source, the f-score per  was computed, and the highest-performing feature was kept. recall that each feature was assigned a weight from the query graph; this value was used as the thresholding function for the generation of auc scores. the result of this was essentially a very basic classifier, top-f <dig>  which relied only on the single-most discriminating feature of each source for each label. the auc for this classifier represents predictions ignorant of any value in combining multiple features; comparisons of this with other methods would thus illustrate any advantages or disadvantages from using more sophisticated approaches on the query graph data.

figure
 <dig> shows a heatmap of the difference between svm aucs. across all sources and labels, the roc curves using svm-based methods demonstrated added utility over top-f <dig>  colors trending toward the deep blue end of the spectrum represent modest increases in performance, while colors closer to deep red are more marked improvements for the svm method over top-f <dig> it was clear that there is marginal benefit to using a more sophisticated classification method for kegg and gennav on the motility class, although other sources such as biocyc derive a noticeable advantage from using svms for classification; for some sources and labels the mere presence of a single feature can be strongly indicative of membership.

at the same time, other sources benefit greatly from the combination of features, namely interpro and cdd, the two sources that on average have the highest improvement of using svms over top-f <dig>  at the opposite end, tigrfam and biocyc show the least overall improvement, with the go-term based sources  showing moderate improvement. examining the go-term based sources shows interesting differences between using only direct annotation information  and enrichment via traversing the go hierarchy . while most of the changes between the two sources are commensurate, amigo strongly benefits from the use of svms for the secretion category. one conclusion from this is that there are several top-level terms in go that suggest secretion, and that under gennav these terms are retrieved; under amigo, however, this information was not available, but was ameliorated by the availability of terms that may share mutual parents.

CONCLUSIONS
in the case of general virulence, and in the majority of specific virulence classes, a classification approach that used integrated queries as input performed significantly better than the baselines and competing approaches. surprisingly, it was found that the data sources several nodes away from our query were the most predictive, which may at first glance seem counterintuitive. gennav and amigo both are sources indirectly connected to the initial queries in the query graph, yet they were the best performing. a large part of this may be due to their superior coverage, as they are referenced by other data sources, but even when empty graphs are omitted it was found that these data sources still out-scored the other sources directly connected to the query. this reinforces the position that, as it pertains to using biological databases for classifying protein data, shallow queries are generally not sufficient. manually, this information can be difficult to sift through, and using robust methods to cut through the “chaff” is indispensable. this is particularly salient given the results that learning methods more resistant to noise were the best at identifying virulent proteins.

a limitation that is not explored in this work but is self-evident in implementation is that performance will likely be very dependent on the choice of data sources and cross- linkages. moreover, as data sources evolve, are expanded or curated, source-specific findings may vary. this caveat is particularly applicable to sources which are directly queried ; indirect features  may be more robust to this effect as multiple sources are integrated. in either case, query proteins ideally will have some limited sequence similarity to other proteins; truly novel proteins may not provide sufficient results for classification. in such instances, relaxing stringency to provide results with very low homology may be effective, though accuracy and interpretability will likely suffer. another notable limitation involves evaluating the classifications. the circuitous nature of sequence annotation from biological databases makes it difficult to identify annotations that were derived transitively. while we attempted to address this problem by omitting from the query graph any results with 100% similarity to the query sequences and disallowed sequence results from serving as seeds for other sequence queries, it is likely that protein families or domains with go assignments, which may have been curated based in part on the query sequence, were returned and used for classification. based on our analysis of the results, however, we believe the most influential reason for the dominating performance of go terms may be how informative the features are relative to other sources. recall that the auc findings between amigo  and gennav  was greater than the difference between amigo and the top-performing non-go sources ; indeed, interpro performs similarly to linked go, but does not outperform hierarchical go. this leads us to believe that there is inherent value in using a standardized and rich vocabulary for classification beyond coverage alone. we find that there is value in cross-linking across data sources, and that while provenance and quality of data are naturally very important even the most naive retrieval approaches can provide useful information on identifying protein virulence, and perhaps protein class in general.

notably, our method used each data source, weighted via query integration, to serve as separate inputs to individual classifiers. this approach resulted in multiple source-specific classifiers that only utilized a subgraph of the entire query graph. a perhaps preferable alternative would be single classifier that utilized the entire graph. to that end, we explored additional methods of source integration to augment query weighting, and in particular kernel integration, where kernels generated for each source were additively combined before learning. our initial findings using this approach resulted in marginal improvement using naïve equal kernel weighting, at prohibitively high computational cost. achieving full query graph integration for the classification phase is a reasonable extension of this work, however, and further work is needed to explore ways of optimizing kernel weight selection to improve performance and justify the cost
 <cit> .

by presenting a method of exploting this data in the context of virulence and presenting the results, a major insight is that even without extensive manual curation integrated data can be very effective for prioritization of both virulence factors and general function prediction. this approach scales well against both the number of sources incorporated and the amount of ground truth information known, making it an appropriate choice for high-throughput biological research. towards this end, our methods have been incorporated into the target selection pipeline of the seattle structural genomics center for infectious disease  for down-selecting virulence related proteins for structural elucidation
 <cit> . lastly, results produced by this research are possible targets of health-related interest in public health and infectious disease biology; highlighting these proteins for 5itional study may further improve knowledge of pathogenesis and disease.

competing interests
the authors declare they have no competing interests.

authors’ contributions
ec, pth and pjm conceived and refined the methods and study design, drafted the manuscript and reviewed the results. ec wrote the related software and conducted the analysis. work was performed while ec was affiliated with the university of washington, seattle biomedical research institute and lawrence livermore national laboratory. all authors read and approved the final manuscript.

supplementary material
additional file 1
faa — specific virulence protein sequences. this fasta file contains the  <dig> protein sequences used for training and testing the specific virulence classifiers. note that the fasta sequence headers contain only the unique identifiers; labels are located in a separate file.

click here for file

 additional file 2
txt – specific virulence class labels. this tab-delimited file contains two columns. the first column is the unique sequence identifier matched to some protein sequence in the specific virulence fasta file, and the second column indicates the specific virulence label, per table
 <dig>  non-virulent proteins are assigned class ‘12’ in this file.

click here for file

 additional file 3
pdf — statistical significance outcomes of method and source comparisons. a pdf containing tabular results of statistical significance testing from six five-fold cross-validations of integrated data against each other and baselines. data from these tables was used to construct the comparison networks in figure
 <dig> 

click here for file

 acknowledgements
the authors would like to thank ira kalet, william noble and evan eichler for their valuable feedback and suggestions. this research was funded in parts by the national human genome research institute , the national library of medicine , the national institute of allergy and infectious diseases  and the u.s. department of defense . this work was performed under the auspices of the u.s. department of energy by lawrence livermore national laboratory under contract de-ac52-07na <dig> 
