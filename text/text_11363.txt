BACKGROUND
genes operate in complex cellular networks, and elucidating this connectivity is critical for understanding normal physiology and disease. functional genomic screens that combine two perturbations have been used with great success to uncover such genetic interactions, and also to reveal mechanisms of drug action
 <cit> . this is generally done by perturbing a biological system, most often a cell, in a defined manner i.e. by overexpression or knockdown of a gene or by addition of a drug and subsequently administering a second set of perturbations and analyzing the system for non-additive readout 
 <cit> .

these perturbation experiments have traditionally been performed in model organisms such as yeast where genetic manipulation is relatively easy compared to mammalian cells
 <cit> . now, with the advent of technologies including rna interference  and the recent emergence of nuclease-based genome engineering, human cells can also be used to perform functional genomic screens. cellular fitness, often represented by cell number, division rate or death, is used as a proxy for many of these screens since it is a parameter that can be measured with relative ease. this proxy is also of particular relevance in case genetic interactions are sought as potential anti-cancer therapies. here, the aim is to kill only cells carrying cancer mutations by targeting an interacting gene which is in synthetic lethal configuration to the mutation. this can be achieved by targeting this second gene product with a small molecule inhibitor or antibody. the non-cancer cells would remain unaffected from this therapy as inhibiting only one interaction partner will not lead to lethality. indeed, many cancer mutations can be tested systematically against drugs to uncover selective resistance/sensitivity mechanisms, or against small interfering rnas to find potential new drug targets
 <cit> .

a pairwise wise interaction screen yields a matrix of interaction  scores. for two non-overlapping sets of perturbations a and b the number of measurements and statistical tests t required to evaluate all unique pairwise combinations is given by:

 t=a×b 

in practice, the number of data points typically generated is further increased to t x n by the requirement of n replicate measurements. thus, a screen of, for example,  <dig> genes against  <dig> drugs measured in quadruplicate requires  <dig>  measurements. a dataset of this size is usually beyond the limits of what can be conveniently analyzed without the use of dedicated statistics software.

to generate these large datasets, multiplexing strategies greatly improve the throughput of the experiment, by combining genetic perturbations in a single well . a convenient multiplexing strategy is to introduce dna barcodes into the genome of mutant cell lines such that each genetic perturbation corresponds to a single barcode sequence. in this scenario dna barcodes act both as unique identifiers for each genetic perturbation and as a proxy for cell number/fitness. barcodes can be encoded by short hairpin rna sequences themselves or introduced into the genome as non-transcribed dna sequences using lentiviral vectors
 <cit> . practically, a set of barcoded cell lines  can then be pooled together and divided into aliquots that are then screened against the second set  of perturbations.

in our laboratory we have generated multiplexed gene-gene and gene-drug interaction data using two distinct technologies [figure 
1]:

 luminex xmap – a hybridization based multiplexing technology that allows up to  <dig> measurements in a single sample. here, dna barcoded panels consisting of genetically modified cell lines  and an unmodified control from the same genetic background are pooled in a single well of a multiwell plate  and treated with either a drug or a second genetic perturbation . in this case only perturbation set a is multiplexed.

 massive parallel sequencing . in this case, a panel of non-barcoded cell lines carrying perturbation set a from  are infected with a library of lentiviral shrna vectors . here, the shrna sequence that integrate into the genome serves both as perturbation and as dna barcode. further multiplexing can be achieved by indexing the second perturbation in a single sequencing run. for example, a mps run yielding  <dig> aligned reads on average allows  <dig> cell lines to be screened against  <dig> drugs at a reasonable average sequencing depth of  <dig>  reads per dna barcode.

in both cases the abundance of dna barcodes amplified from the genomic dna is measured after a period of exponential cell growth and used as a score for cellular fitness. to deconvolute, analyze and visualize this type of data in a modular and intuitive manner we established tops.

implementation
programming language, external software and system requirements
tops was developed as a graphical user interface for an analysis pipeline that we originally developed in r. in order to make these r scripts accessible to non-expert users, in particular scientists with little background in scripting languages, we took advantage of the r package rjava  to run the scripts from a java based interface. tops can therefore run its r scripts on all platforms for which rjava is available .

the hardware requirements to run tops depend mostly on the volume of data to be analyzed and the algorithm to be used. we have developed and tested tops on two independent datasets derived from different experimental approaches, and on a standard office computer with a  <dig>  ghz dual core processor and  <dig>  gb of ram. we note that for larger datasets the linear model  algorithm provided with this release requires more memory than is usually available on an office computer. therefore, we have provided an alternative that splits the analysis in smaller parts  and later assembles the results. this modification necessitated an adjustment in the data normalization [figure 
2].

output from the r interface, including and error messages, is stored in text files for troubleshooting. the overall progress of a session can be monitored and is logged separately.

user skills and installation
installation of tops consists of unpacking the zipped file into a directory. for tops to run, java, r and the package rjava are must also be installed. upon first launch, definition of the paths in which r and rjava are located may be required. the most common locations for macos, linux and windows are checked automatically and the user will be prompted only if the libraries cannot be found. for convenience, alternative locations to be checked in this manner can be added in libpaths.txt in the tops directory.

tops uses a single semicolon separated values  data input file. this file has to be generated by the user and can for instance be exported from a microsoft office excel spreadsheet. alternatively the example datasets can be used for testing. to use tops no scripting skills are necessary.

RESULTS
example datasets provided
tops comes with two datasets to test the different procedures. thus, users can explore the software without having to generate original data.

example dataset 1: a gene-drug interaction screen in breast cancer
to simulate oncogenic events in breast cancer we created a panel of  <dig> different isogenic cell lines ectopically expressing oncogenes or knocking down tumor suppressor genes commonly found in breast cancer. findings based on this dataset have been published previously
 <cit> .

for multiplexing purposes, each cell line was infected with a vector introducing a genetic barcode  into the genomic dna. the cell lines were then pooled, distributed among multi-well plates and treated with  <dig> individual drugs. after a period of exponential growth, genomic dna was harvested and barcodes were quantified using luminex xmap beads. raw bead data was converted to median measurements per interaction by calculating the truncated mean. the resulting data is in the format ‘cell line ’, ‘drug ’, ‘barcode score ’. the barcode score is a measure of the relative fitness as it is an estimate of the total number of cells for each isogenic cell line under the drug treatment condition.

example dataset 2: a gene-gene interactions screen in breast cancer
we screened  <dig> isogenic cell lines expressing oncogenes against a library consisting of approximately  <dig> shrna vectors covering  <dig> deubiquitinating enzymes . dubs represent an emerging class of cancer targets involved in many different cellular processes with therapeutic potential. after a period of exponential growth cells were harvested and genomic dna was extracted in order to pcr-amplify the shrna barcode cassettes. during the amplification process primers with  <dig> unique barcode sequences corresponding to the  <dig> cell lines in  <dig> replicates were used as described in
 <cit> . the tagged pcr samples were then pooled, a sequencing library was generated and the samples were sequenced on two lanes  of a hiseq  <dig> instrument . the mps raw data were converted to fastq format and split according to the indexing pcr primers with a custom python script. each sample’s ngs reads were aligned to the shrna sequences using shalign
 <cit>  allowing for zero, one, and two mismatches. the output csv file is in the format: ‘cell line ’, ‘shrna ’, ‘number of reads’. number of reads corresponds to shrna abundance and this is the readout for relative fitness.

importing data
a typical input file consists of five columns with the following information:

perturbation a; perturbation b; fitness score; replicate 1; replicate 2

in the provided example dataset  <dig>  perturbation a corresponds to the gene  and perturbation b is a drug treatment. for dataset  <dig>  perturbation b is an shrna vector targeting a specific dub and perturbation a is the gene. fitness score represents the barcode abundance in these examples. replicates  <dig> and  <dig> designate if measurements are replicates of each other. replicate  <dig> identifies multiple perturbations towards the same outcome  while replicate  <dig> identifies the replicate number for a given a-b combination.

tops has custom importers covering both types of files from the example datasets. these importers convert the data coming from luminex or mps to the input file format.

entries with non-unique identifiers for perturbation a and perturbation b are automatically interpreted to be replicate measurements by the importers.

pre-analysis filtering
we implemented a filtering method to allow the user to detect and remove bad replicates or samples before running the analysis as this can result in false positive hits. this filtering is based on the assumption that the frequency of gene-gene or gene-drug interactions is low among all possible combinations
 <cit> . therefore noisy perturbations can be identified by how well they correlate with others. for each perturbation a pairwise spearman correlation is calculated against all other perturbations in the dataset. a poor correlation then indicates a technically noisy sample that the user may wish to exclude from further analysis. we perform this correlation for both a and b perturbations and correlation cutoffs can be chosen for each individually [figure 
3].

analysis algorithms
tops is supplied with two analysis models that are well suited for interaction data of the type that is supplied in the example datasets. however, custom analysis methods can be conveniently plugged into tops. the first method is based on a multiple linear regression model and the second one is based on the mann-whitney u test.

statistical analysis: linear model
linear models have been used previously to normalize
 <cit>  and analyze
 <cit>  high-throughput measurements. accordingly, our analysis is composed of two consecutive linear models: the first one is used for data normalization; the second one identifies outliers that represent "hits" i.e. potentially biologically meaningful interactions that warrant further study.

data normalization relies on the assumption that relative fitness values intensityi as determined by barcode quantification  are constituted of four components:

1) the systematic effect of perturbation a on fitness

2) the systematic effect of perturbation b on fitness

3) the signal that is due to the  combination of perturbation a and b consistent across biological replicates, which is the signal of biological interest

4) noise caused by biological and technical variability between the replicates.

these four components can be modeled as:

 intensityi=βaa+βbb+si 

where intensityi represents the measured fitness score, βa, βb are regression coefficients, a, b are categorical variables representing perturbations a and b respectively, and si is a remaining signal including both noise  and a potential synergistic contribution of a and b perturbations. the model is fit to the experimental data to estimate the first two components from the fitness score corresponding to the systematic, non-synergistic perturbations induced by a and b. the linear model was fit by robust regression using an m estimator  to avoid influence of outliers.

the second linear model further dissects the component si to identify potential synergy. since we want to analyze the effect of each perturbation on the other one, si is dissected twice by fixing either the perturbation a or b first. namely, fixing a first, we can reduce si to the signal observed for each successive value of a, which we denote by si|a. on this reduced data, the effect of perturbation b is estimated by the model:

 ∀a:si|a=βb|ab+ε 

where a, b are categorical variables as above, βb|a the regression coefficient, and ε a term capturing the contribution of noise. the same procedure is applied when perturbation b is fixed first:

 ∀b:si|b=βa|ba+ε 

the coefficients of these linear models  capture the effect of a perturbation within the context of a specific other perturbation. the coefficients combine the signal of replicate experiments and estimate the magnitude of the biological effect thanks to the noise component ε.

the ‘rlm’ function of the r ‘mass’ library is employed to compute a robust estimate of the coefficients of the linear model. this function also offers the possibility to calculate the statistical significance of each coefficient by performing a one-sided t-test . for small sample sizes this test can suffer from false positives due to underestimating variance as described in axelsson et al.
 <cit> .

as both linear models are applied after log transformation of the input data these additive coefficients reflect modeling a multiplicative effect of the fitness response of the pairwise fitness effects βaand βb <cit> .

in the case of the slm split linear model aimed at reducing computation time and memory usage, the dataset is subdivided into groups of  <dig> perturbations , resulting in less data points available for the t-test, hence the reduced statistical power.

statistical analysis: mann-whitney u-test
the second method we implemented to analyze fitness score data is based on the mann-whitney u-test, a more robust alternative to the student’s t-test that does not assume a normal distribution. for this analysis a distinct normalization procedure is employed.

first, numerical data was arranged in a matrix with rows and columns representing perturbations a and b, respectively. next, we calculate a normalized value for each gene-gene or gene-drug "interaction" in the matrix as:

 mij=aijbijmedianajmedianbi 

here, i and j represent row and column positions in the matrix, and aj and bi represent sets containing all values for row j and column i, respectively. thus, each value in a row is divided by the corresponding row median, and each value in a column by the column median across the matrix. each fitness score in the matrix is subsequently log <dig> transformed.

next, the algorithm performs two-sided tests to calculate p-values. the model requires at least  <dig> replicates per interaction to perform this test. as with the linear method algorithm we calculate two p-values for each interaction, corresponding to perturbation set a or b.

combining p-values
both methods of analysis presented above calculate p-values in either direction of the interaction matrix. this means that either the distribution of a’s or b’s for a given a-b interaction matrix is used to derive the significance score. the distributions of a’s and b’s are likely to be different, depending on the assay technology used to generate the data. therefore a pvalue derived from one distribution  is not necessarily equal to the pvalue derived from the second distribution  for the same a-b interaction. to obtain an overall score to rank hits, we tested three methods to combine p-values:  calculating the average of both values,  multiplication of both values with each other, and  brown’s method
 <cit> , a modification of fisher’s method for combining dependent p-values [figure 
4]. taking the average of two p-values strongly penalized fitness scores just below the significance level, potentially resulting in more false negatives while brown’s method rewarded combinations where both p-values are close to significant. multiplication of both p-values gave comparable but slightly more extreme results than brown’s. we therefore selected brown’s method to calculate combined p-values as a conservative middle ground between the other two more extreme methods.

importing analyzed data into the "results browser" and generating plots
once data has been analyzed by either method, the results of the analysis are stored in a text file in the following format:

perturbation a; perturbation b; relative magnitude a; relative magnitude b; absolute magnitude a; absolute magnitude b; p-value a; p-value b; combined p-value by brown’s method.

where perturbation a and b are the identifiers for the tested perturbations, relative magnitude a and b gives an indication of the ratio of treatment versus the median of all treatments , absolute magnitude a and b are the raw signals from the assay and the p-values are calculated as discussed previously. given this format, other datasets not generated with our analysis pipeline can also be imported, filtered and plotted using tops.

post-analysis filtering
after the analysis is complete, the results are displayed in a table in the results browser [figure 
5] and can be sorted ascending or descending by clicking on the column headers. here the user can sort and filter the obtained results before visualization by entering a string of filtering criteria. these criteria can be connected with the and  or or  operator and also allows for partial matches using the tilde  sign or exclusion using a logical not . details on filtering strings can be found in tops’s help files. the optimal filtering parameters vary with the technology used to obtain the data. in our experience, the mean luminex signal  and mean number of reads  are reasonable parameters to use for filtering out false positives. removing the bottom 5-10% of signals sorted by these parameters gave a satisfactory reduction in noise.

user modules
tops has been designed in a way that allows future users to easily write new importers in java to support other input data formats. we have also implemented the possibility to run user-written r-code for the data analysis which can then be called from within tops and fed into the data filtering and visualization [figure 
6]. the r scripts provided with this release can be used as templates to write custom modules as required.

comparison of performance of the analysis models
in order to compare the performance of all three models  we generated a randomized dataset with a distribution based on dataset  <dig>  in this set we generated true positive hits with an average signal of  <dig> ,  <dig>    <dig>  and  <dig>  fold  compared to the average of true negatives.

to estimate false positive and false negatives, we used this dataset to determine receiver operating characteristics  for all three algorithms [figure 
7]. overall, all algorithms show comparable characteristics with the u-test performing slightly better at lower-fitness hits, and the linear models being more sensitive for increased fitness hits. in general, decreased fitness hits were more readily detected by our algorithms due to the non-normal distribution of the data. in terms of run-time performance the u-test and split linear model algorithm are practically identical while the linear model algorithm is slightly more computationally costly [figure 
8].

for dataset  <dig>  interactions have also been validated experimentally. comparing the three algorithms in terms of the verified true positives they can identify from a ranked list of the top  <dig> hits after filtering as described in
 <cit>  shows comparable performance [table 
1] and an acceptable true/false positive rate overall compared to other high-throughput screens 
 <cit> .

the top  <dig> interactions from a ranked hit list are categorized by experimentally validated as true or false positive. hits that were not experimentally tested are indicated as "unverified". the true and false positive rates for the linear model , split linear model  or u-test  algorithms for either p-value a , p-value b  or the combined p-value  are shown.

in [figure 
9a-c] we show a scatter plot of p-values for perturbations a and b with the successful and failed validation indicated. we can observe an increasingly better spatial separation comparing the u-test with slm and lm models, which could be for instance be captured by principal component analysis. however, since the localization of successful versus failed validation data points does not follow a simple pattern according to the original coordinates provided by the two p-values and is likely to be different for distinct datasets, this would necessitate to have available such a validation dataset to train a classifier performing better than simple p-value-based thresholds. as a generic tool tops does not offer this functionality but users might consider implementing it since we release the code of the system as open source. combining the p-values for perturbations a and b does not have a negative effect on discriminative power but allows to provide a single interaction score [figure 
9d-f].

data visualization
data from gene-gene or gene-drug interaction screens can be difficult to inspect visually since the number of hits is comparatively small to the number of interactions. traditional plotting methods from gene expression studies like heatmaps do not perform well in this setting. we therefore designed a circular bubble plot to display the data. an axis for every condition b is drawn on which the scores/p-values for the interactions with each condition a are plotted. the axes are arranged in a radial fashion such that the least significant hits are in the center of the plot and the most significant interaction scores are on the circumference of the circle. this allows the user to quickly spot outliers and problematic/noisy perturbations. in addition the magnitude of the effect can be encoded in the size of each dot, allowing the user to identify hits that are both significant and show a reasonable effect size. the direction of the interaction  is encoded by different colors [figure 
10]. the identifiers of one set of perturbations is plotted at the circumference of the circleplot. the second perturbation can be identified by hovering the mouse over a datapoint in the plot. tops’ plots can be exported as bitmaps in png format or as vector graphics as a pdf file.

CONCLUSIONS
we present a user-friendly software package to analyze and visualize interaction data from functional genomic dual perturbation screens. although multiple tools for analyzing cell viability screens are available
 <cit>  these have their limitations by either being based on commercial software  or requiring command line skills. tops incorporates statistical models designed for the analysis of pairwise interactions of larger gene/drug sets. furthermore it is fully based on free software and provides a graphical user interface. the software is easily accessible and offers a powerful analysis tool for the benchtop scientist while being expandable enough to be attractive to users who would like to run their own analysis methods. importantly, not only luminex xmap and sequencing data can be analyzed with the presented methods but in principle any data from other technologies can be imported as long as the data can be reduced to a "perturbation a", "perturbation b", "score" format and true positives are relatively rare in comparison to true negatives which is a necessity due to the nature of normalization of the in-built analysis. we have included two analysis pipelines based on different methods to demonstrate the versatility of tops. we have also included two importers for luminex xmap data and for pre-processed screening data that makes these two technologies particularly easy to use with the software.

availability and requirements
project name: tops.

project home page:https://sourceforge.net/p/topscemm/wiki/home/.

operating system: win32/osx/linux.

programming language: java and r.

other requirements: java  <dig> or newer. r  <dig>  or newer.

license: creative commons attribution sharealike license v <dig> .

any restrictions to use by non-academics: only those imposed by the license.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
mkm and fg designed and fg wrote the code for tops and the help files. ck and mkm created the datasets. iu, mkm and ck performed wetlab validation experiments. gd and jc designed and gd wrote the linear model based algorithm. fg and mkm designed and wrote the u-test based algorithm. kb and as helped with processing the sequencing data. gd produced figure
 <dig>  mkm produced the remaining figures and together with sn wrote the manuscript with the help and contributions from the other authors. sn, mkm and jc co-supervised the project. all authors read and approved the final manuscript.

