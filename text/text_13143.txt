BACKGROUND
the biopesticides produced by the bacillus thuringiensis  bacterium are a viable alternative for crop pest control using chemical pesticides  <cit>  without the collateral effects of environment contamination, since the toxins synthesized by bt have little effect on non-target insects and vertebrates like birds and mammals . the bt is a bacterium present in the soil and produces a protein called crystal protein  during the sporulation phase. such protein is lethal to various insect orders  <cit> , including coleoptera, lepidoptera and diptera.

to date, about  <dig> genes that encode the crystal protein from different isolates were identified  <cit> . these genes are sorted according to the insect order to which the protein is toxic to . once ingested , the cry protein acts in the insect gut by opening pores in the intestinal membrane , which causes the death of larvae due to starvation and/or bacterial infection . there are two hypotheses regarding how these proteins act  <cit> . both propose the interaction of protein receptors present in the insect’s gut; on both models, the cadherin proteins  are the first receptors to be activated. this interaction between the cry proteins and their receptors occurs in some regions of the gene known as domains i, ii and iii. domain i is involved in the process of membrane insertion and pore formation. domains ii and iii are both related to receptor recognition and binding. the third domain is also related to the role of pore formation  <cit> .
fig.  <dig> cry protein mode of action 



regarding lepidoptera, at least four types of protein receptors are involved in the binding process of proteins to brush border membrane vesicles , beginning the process of pore formation in different lepidoptera larvae: a cadherin-like protein , a glycosylphosphatidyl-inositol -anchored aminopeptidase-n , a gpi-anchored alkaline phosphatase  and a 270kda glycoconjugate  <cit> . the protein encoded by the cry genes from some strains of bt are specific to certain insect orders, while others do not exhibit this specificity and can act on two or more different orders. the reason for this specificity is still unknown, but amino acid changes in this region have been associated with toxicity. tiewsiri and angsuthanasombat  <cit>  made the substitution by an alanine  in four highly conserved aromatic residues  in cry4b gene, that has a toxin that attacks insects of the diptera order. this resulted in a decrease of toxicity to the mosquito stegomyia aegypti. in recent decades, several plants of different species have been transformed with genes of bt to be commercialized . the pattern recognition in the amino acid sequence of these proteins, that may be associated with specificity, could facilitate the use of these genes in the generation of new transgenic plants resistant to different crop pests, as well as the construction of bt pyramided plants  <cit> , which is a reality nowadays.

there are many software tools capable of analyzing protein sequences like mega  <dig>   <cit> , macclade  <cit>  and geneious . mega  <dig> is capable of storing and processing protein sequences in order to align them, generate phylogeny trees and perform other calculations. it can also work with dna sequences. the tool can even search online databases for data of interest that can be downloaded free of charge. like mega  <dig>  macclade is also capable of analyzing dna sequences to construct their phylogeny trees, allowing the user to identify molecular evolution among the tested gens, but it is only available for mac os. geneious is a more complete tool, since it supports the features of mega  <dig> and macclade in addition to having more options for protein and dna analysis. it can also be extended by the use of plug-ins  <cit> ; however it is a paid tool.

in order to support the study of cry proteins, we created a specialized and open-source software tool that is capable of compile the data of cry proteins in a central repository, allowing the retrieval of data related to each protein such as their primary structures, three-dimensional models , related works, etc., allowing the manipulation of such data in alignment algorithms and generation of reports related to the alignments. this tool, called crygetter, is presented and detailed in this work.

implementation
to implement crygetter, we used the java se  platform, version  <dig>  <cit>  and other third party tools and libraries to perform some tasks like protein sequence alignment, alignment visualization  and molecule rendering . in addition, crygetter uses the data of the full toxin list of bacillus thuringiensis toxin nomenclature website  <cit>  and entrez  <cit>   service of ncbi  for automatic retrieval of protein data and cry protein models available at the pdb  <cit>   and the pmdb  <cit>  . the application architecture is shown in fig.  <dig> and each section of this architecture is explained below.
fig.  <dig> crygetter application architecture



the “extraction module”, highlighted in fig.  <dig> using the number  <dig>  represents the data extraction feature of crygetter that is performed by this module of the tool and can be executed pressing the button “extract” highlighted in section a <dig> of fig.  <dig> 
fig.  <dig> crygetter main interface and its features



when pressed, this button triggers the execution of the extraction module that executes four steps: 
btnomenclature site data extraction: first, the extraction module retrieves the data of a particular html  file  <dig> of the btnomenclature website . this file contains a html table with all cry proteins that already studied and cataloged by the website owner;

cry protein data preprocessing: the data from the raw html file gathered in the previous step is then processed using the jsoup  <cit>  library to create a linked list of an adt  called “crytoxin”, which contains only cry proteins entries  that has a ncbi hyperlink related to a protein sequence. this adt and its composition are presented in the uml  class diagram showed in fig.  <dig>  this class composition was modeled this way because we need to serialize this data from java objects to xml  and deserialize it from xml to java objects;
fig.  <dig> class diagram for crytoxin adt and its composition



ncbi data extraction: using the entrez service , all proteins gi numbers of each cry protein entry that was acquired in the previous steps are used to retrieve all data related to each protein. in this case, the url  used to access the entrez service is https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgiand some url parameters need to be passed: 
 tool: the name of the tool that is accessing the entrez service. in this case, “crygetter”;

 email: e-mail of the responsible for the tool. in this case, “davidbuzatto@ifsp.edu.br”;

 db: the database that is being accessed. in this case “protein”;

 retmode: the type of data that will be returned by the service. in this case “xml”;

 id: the set of ids, separated by commas, that represents the proteins. in this case, all cry proteins gi that were retrieved in the previous steps;

 obs: more details about the entrez http  interface can be found in its documentation  <cit> .



the result of the request to the entrez service, in xml format, is processed by the tool, generating a set of temporary files that will later be used in the next step. to process these generated files, the tool needs to parse the returned xml and generate a object composition in memory. to do this, a class composition that reflects the xml structure was created and is shown in fig.  <dig>  for the sake of simplicity, in this diagram we do not show the class compartments for attributes and operations. this composition is used by the tool to store the result of the xml deserialization, allowing the data to be processed and used to further complement the crytoxin adt data;
fig.  <dig> class diagram for the xml structure defined by entrez service return



crygetter extraction data file generation: the last step comprises the creation of a file that will be saved by the user . this file will contain all the data that was obtained and it will be able to be opened by anyone who has the tool. to process the stored data we used two xml parsing libraries: simplexml  <cit>  for serialization and deserialization of crytoxin adt and jaxb  <cit>   for serialization and deserialization of entrez xml data. we chose simplexml to process the tool specific xml data and jaxb to manipulate the entrez return, since the class composition for entrez was automatically generated by the jaxb compiler, available by default in any jdk , using the entrez dtd  <dig> .

to open an extraction file, the user must click on the “load” button highlighted in section a <dig> of fig.  <dig>  by clicking on this button, an open dialog box will appear and the user will choose the file that s/he wants to open. when a file is chosen, the “loader module”  will execute, unpacking the file  and presenting its contents in the main interface  of the tool as showed in section b of fig.  <dig> 



as result, all cry protein data is loaded into the tool and shown in the left list , allowing the user to select the protein that s/he wants to perform tasks like data visualization , protein alignment , protein alignment visualization, protein analysis and fasta file generation . all these tasks use one or more third party libraries or third party tools  and each task is explained hereafter.

cry protein data visualization
the main functionality related to cry proteins is data visualization. when the user selects a protein in the list on the left, like cry1aa <dig>  all of its related data are shown in tabs located on the right, represented in fig.  <dig> by section b <dig>  there are some tabs organized in a hierarchical mode: 
btnomenclature: it presents the data collected in the btnomenclature website. this tab is shown in fig. 6;
fig.  <dig> btnomenclature details tab



ncbi: it presents the data collected in ncbi, through entrez service. this tab is shown in fig.  <dig> and the details are divided into three tabs: 
main: the main data related to the selected protein ;
fig.  <dig> ncbi details tab. a) main tab of ncbi details tab; b) references tab of ncbi details tab; c) sequence tab of ncbi details tab; d) domain  <dig> tab of sequence tab



references: the set of references related to that protein ;

sequence: the amino acid sequence of the selected protein , divided into three domains  and a diagram showing the position of the domains inside the entire sequence. this tab is then divided in four tabs:

– complete protein: the complete amino acid sequence of the

protein ;

– domain  <dig>   <dig> and 3: three tabs containing the data of each domain

of the protein .



3d model: in this tab, the 3d models  of the protein are listed , so the user can use them in some third party visualization tool like vmd  <cit>  , swiss pdb viewer  <cit>  and/or pymol  <cit>  to visualize and/or process them. it’s important to emphasize that, nowadays, there are  <dig> experimental models, related to  <dig> different cry proteins, deposited in pdb and pmdb and all these models are available in crygetter. the table  <dig> shows the proteins that have models available in pdb and pmdb along with their related works. in this table we also list some proteins that have papers reporting the creation of their models, but these models are note available neither in pdb nor in pmdb. it is also important to note that crygetter isn’t able to generate new models by using some protein structure prediction software.
fig.  <dig> 3d models details tab

gastropoda
gastropoda
gastropoda
gastropoda
lepdoptera
lepdoptera
hymenoptera
hymenoptera
coleoptera
diptera
rhabditida
rhabditida
rhabditida
rhabditida
coleoptera
coleoptera
diptera
diptera
coleoptera
coleoptera
hemiptera

athe model ids with  <dig> characters are from pdb while the model ids with  <dig> characters are from pmdb





other features of the tool’s main interface are the extraction details , the color change dialog  and the “fasta gen.” button, used to generate a set of fasta files of all proteins . for each protein, four files are created, one with the complete sequence and one for each of the three domains. in addition of these features, the tool can perform protein alignment for further analysis. this functionality and its sub features are presented in the next section.

cry protein alignment
the “cry protein alignment” interface can be accessed through the “alignment” button located on the top left corner of the crygetter main interface  and it is shown in fig.  <dig> 
fig.  <dig> protein alignment interface



in this interface, the user can perform a set of protein alignment tasks with the cry proteins, generating and/or loading alignment data files . there are some filters that can be used, such as selecting the proteins by the affected orders. the orders affected by each protein are stored in a xlsx  file that is processed by the apache poi  <cit>  library. the user can define what sections of the selected proteins s/he wants to align and the msa  algorithm that should perform the alignment task. in the current version of the tool, three algorithms are available: clustal omega  <cit> , clustal w  <cit>  and muscle  <cit> . these three algorithms, executed by external tools, can also be parametrized in crygetter. as an example, in fig.  <dig> we show the result of the alignment of cry1aa <dig>  cry1aa <dig> and cry1ab <dig> after executing the clustal omega algorithm. when the algorithm finishes its execution, a dialog box is shown to the user, allowing s/he to save the alignment data, which can now be visualized or analyzed.
fig.  <dig> alignment result of cry1aa <dig>  cry1aa <dig> and cry1ab1



alignment results processing
when two or more cry proteins are aligned, crygetter can perform an analysis on the alignment result. when clicking the “analysis” button , a dialog appears and the user is asked to choose the alignment data file that was generated. by doing this, the program reads the data and shows the “protein analysis” interface, as shown in fig.  <dig> 
fig.  <dig> protein analysis interface with the result of the alignment of cry1aa <dig>  cry1aa <dig> and cry1ab1



in this interface, the user can analyze the alignment by choosing two different proteins and clicking on the “analyse” button. doing so, the program will identify the differences between the selected proteins and show them in the differences list. in the example shown in fig.  <dig>  the differences between the proteins at location  <dig> is presented. in this case, cry1ab <dig> has an 205h <dig>  amino acid and cry1aa <dig> has a 205y <dig>  amino acid. the user can even generate a report that summarizes the alignment data. this feature is presented in the next section, where an experiment comprising the analysis of two different cry proteins was conducted.
fig.  <dig> comparison between cry1ab <dig> and cry1aa1



RESULTS
crygetter is currently being used as a support tool for two works related to cry proteins structure analysis. the tool is proving to be useful, since it can automatize the data extraction task and perform a sort of functions related to proteins, drastically reducing possible errors in manual data collection of online sources, since if such task was being done manually, the chance of human error would be enormous, because the process of copy/paste large quantities of data, for example, of protein sequences available through a ncbi web-page to a specific tool, would probably add undesirable and difficult to detect errors like, for example, data truncation, unless all sequences are constantly reviewed. in the next subsection we present a study case of the use of the tool.

using crygetter to analyse two different order specific cry proteins
for this study, two cry proteins were chosen to be analyzed based in their order specificity: 
cry1aa1: this cry protein affects mainly the diptera order;

cry3aa1: the coleoptera order is affected by this type of cry protein.



after loading a generated data package in crygetter, the “alignment” button  was clicked, aiming to show the “alignment interface”. since we wanted to analyse cry1aa <dig> and cry3aa <dig>  these two protein were selected  in the protein list . after the selection, in section b of fig.  <dig> we chose to align only the domain  <dig> of both proteins, since this domain is mainly responsible for receptor recognition  <cit>  and we wanted to study what is the difference between these two proteins that made their specificity occur. in section c of fig.  <dig>  the clustal omega msa was selected and finally the “align” button  was clicked on. doing this, the clustal omega executable performed the alignment of the selected sequences and a file with the result was saved on disk. the execution output of the selected msa is shown in section e of fig.  <dig> 
fig.  <dig> preparing the alignment of cry1aa <dig> and cry3aa <dig>  a) selection of cry proteins to align; b) alignment constraints; c) selection of msa algorithm; d) align button; e) msa algorithms output; f) analysis button



now, we wanted to analyze the alignment. to do this, we clicked on the button “analysis” . after clicking on it, crygetter required an alignment file. we chose the previously generated alignment file. by doing this, the “protein analysis interface” was shown. in this interface, we chose the two proteins that we wanted to analyze. this selection is shown in section a of fig.  <dig>  crygetter was able to infer some results based on the alignment. to do this, we selected the “generate report” check-box . finally, we hit the “analyse” button . a dialog  was presented, allowing the user to insert some textual observation. in this case, we wrote that these results were related to the alignment of the domain  <dig> of both proteins. clicking on ok, a report was then generated.
fig.  <dig> analysing the alignment of domain  <dig> cry1aa <dig> and cry3aa <dig>  a) lists of proteins to analyse; b) analysis options; c) analysis button; d) report observation dialog



this report, created using the jasperreports library  <cit>  and presented in fig.  <dig>  contained the data of both proteins, presented in section a of fig.  <dig>  these details comprised the name, accession number, protein id and nucleotide id of the protein, besides the total length of the protein sequence and the size of the three domains. in section b of fig.  <dig>  a structure diagram of both proteins is presented, showing the disposition of the domains inside the complete sequence, their boundaries and names. in section c of fig.  <dig>  some statistics are shown: 
c: the amount of conserved residues;
fig.  <dig> analysis report. a) protein data; b) structure diagram; c) report statistics; d) alignment diagram



cm: the amount of conserved mutations;

scm: how many semi-conserved mutations;

c+cm: the sum of c and cm;

nc: the amount of non conserved residues.



the percentages shown in columns protein  <dig> and protein  <dig> are related to the amount of each item versus the total number of residues. for example, c is equal to  <dig>  that is  <dig>  % of  <dig> residues of domain  <dig> in protein  <dig> and  <dig>  % of  <dig> residues of domain  <dig> in protein  <dig>  the total number of residues that are used in these calculations is equal to the size of the sequence that it was aligned to. in this example, we chose to align only domain  <dig>  that has  <dig> and  <dig> residues in cry1aa <dig> and cry3aa <dig> respectively. finally, in section d of fig.  <dig>  a complete alignment diagram of the two proteins is shown.

the analysis performed by the tool can be used as a starting point to further analyze two cry proteins. the importance of the tool can be noted, since it simplifies all the process of getting the sequences of interest, aligning them and performing the preliminary inspections in the alignment result.

CONCLUSIONS
in this work we presented crygetter, a tool that aggregates cry protein data, helping researchers of bacillus thuringiensis and its crystal proteins to deal with this data and allowing them to get all the relevant information for their work in a faster way compared to a manual protein data collection. since the tool executes data retrieval and can perform automatic analysis os the protein alignments, it allows their users to generate more accurate results, since using it may prevent the error prone task of manually getting all the necessary data and processing them in various software to get the same result that the tool can generate in a unique automatic environment. the development of the tool is also important since these proteins play a significant role in the agro-industry. we hope crygetter can help the researcher community to improve and accelerate their work with cry proteins, getting preliminary results faster. as a future work, we will work in the generalization of the tool, allowing the users to extrapolate its functionality related to the data retrieval, enabling them to get data from different online data-sources.

availability and requirements
project name: crygetterproject home page:http://davidbuzatto.github.io/crygetteroperating system: microsoft windows®;  <dig> or aboveprogramming language: javaother requirements: java runtime environment   <dig>  <cit>  and perl runtime  <cit>  for mview  <cit> license: gnu general public license v <dig> any restrictions to use by non-academics: none

abbreviations
adtabstract data type

alpalkaline phosphatase

apnaminopeptidase-n

bbmvbrush border membrane vesicles

btbacillus thuringiensis

cadrcadherin-like protein

dtddocument type definition

gpiglycosylphosphatidyl-inositol

htmlhypertext markup language

httphypertext transfer protocol

jaxbjava architecture for xml binding

jdkjava development kit

jrejava runtime environment

megamolecular evolutionary genetics analysis

msamultiple sequence alignment

ncbinational center for biotechnology information

pdbprotein data bank

pmdbprotein model database

sestandard edition

umlunified modeling language

urluniform resource locator

vmdvisual molecular dynamics

xlsxoffice open xml spreadsheetml file format

xmlextensible markup language

