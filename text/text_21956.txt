BACKGROUND
nowadays, researchers in the field of genomics increasingly require greater computational resources to perform their experiments. until recently, typical biological datasets consisted of less than a  <dig> sequences. a well-endowed desktop computer was therefore sufficient to produce a satisfactory multiple sequence alignment with most software. the situation has now dramatically changed with recent progress in large-scale genomics resulting in the availability of biologically meaningful datasets comprising thousands of sequences. one of the most immediate consequence is the need of alignment tools designed for large-scale analysis that are able to process thousands, or even tens of thousands, of sequences. the computational requirements of these problems consists of months of computer time and terabytes of memory, which in turn requires high-performance computing  systems with thousands of processors, also known as supercomputers. unfortunately, most supercomputers still provide only very basic user interfaces based on terminals used over several decades. we address this issue by introducing a user-friendly portal that provides controlled access in a versatile way to an accurate multiple sequence alignment tool--parallel t-coffee  <cit> --that runs efficiently on the required computing resources . thereby we allow large-scale alignments. the web portal was developed with rapid  <cit> --a specialised tool that provides a cost-effective and efficient way of designing and delivering portal interfaces to applications requiring remote computational resources. the aim of rapid is to make the use of remote computing applications as easy as booking a flight or purchasing a book on the internet.

parallel t-coffee
parallel t-coffee   <cit>  is a parallel version of the t-coffee  multiple sequence alignment  program  <cit> . msa programs are meant to align a set of homologous sequences previously gathered using homology search programs such as blast. the main characteristic of tc is that it combines the consistency-based scoring function coffee  <cit>  with the progressive alignment algorithm. the strategy developed for tc now forms the basis of many new generation aligners  <cit> . the main advantage of consistency is to make it less likely for early stage errors to compromise the computation of an accurate msa. in tc, consistency is estimated using a library made of pairwise global and local alignments whose information content is combined within the final msa. although it results in more accurate alignments, the use of consistency also comes at an increased computational cost. so far this limitation has hampered the use of consistency based method in the context of large scale analysis. taking this into account, ptc allows to compute alignments of more than hundreds of sequences, far beyond the capability of the sequential version of tc. ptc is implemented on version  <dig>  of tc and supports most of the options provided by this package. the ptc implementation is based on distributed-memory architectures , using a message passing paradigm and one-sided communication primitives  <cit>  to exchange information among the different tasks. the main stages of t-coffee - library generation and progressive alignment - have been parallelized in ptc in order to be executed in different compute-nodes.

new versions of t-coffee package  <cit>  also allow parallel executions. however, its approach is different, it is based on shared-memory architectures, like multi-core or multi-processor ones. nowadays, due to the fact that distributed-memory systems do not have the memory size limitation imposed by the shared-memory architectures, it can be said that ptc has an increased scalability. therefore, ptc can take advantage of the aggregate resources  of thousands of processors/cores interconnected by high-speed networks. the only inconvenient of this approach is that message-passing paradigm is much more complex than shared-memory one, requiring more development time.

rapid
rapid  <cit>  is a cost-effective and efficient way of designing and delivering portal interfaces to tasks that require remote compute resources. the philosophy of rapid is to deliver customized graphical user interfaces that enable domain specialists to achieve their tasks. these tasks make use of domain-specified applications that run on remote computational resources; a requirement which is satisfied by translating the task into one or several computational jobs to be performed on grids, cloud computing infrastructures, or supercomputers. customized interfaces allow tasks to be performed without referring to terminology about the underlying computational infrastructure. moreover, a customised web portal can make the application itself easier to use by only exposing the functionality required in the task and by adding additional checks to validate input.

implementation
we have chosen rapid to develop the web service because it is an easy and fast way to develop hpc portals. the full process for creating the portlet using this tool is shown in figure  <dig>  in the first phase a specification file using extensible markup language  was created. this file describes the interface, task and resource description and is used by rapid to generate the jsp files containing all the portlet. in other words, from this one file the whole user interface is then generated.

due to xml's limitations, rapid is extended with and interfaced for jython plugins that allows the web designers to add more complex logic and dynamic user interfaces. this functionality has been very useful in the development process of the ptc portal allowing us to create a more friendly and dynamic framework. rapid also generates automatically a java war file used to deploy the portlet in a large variety of portal containers. this file contains all the necessary data and can be generated with the specific requirements of different deployment descriptors for each portal vendor, thus making the deployment process as generic as possible. in this work, we use liferay as the portal container to deploy our ptc portal.

as any standard web interface, the resulting portal directs the user through the submission process of the sequences to be aligned:

 <dig>  basic submission: users can easily upload their set of sequences and apply directly for the alignment without care about several execution options offered by ptc.

 <dig>  advanced options: advanced users can opt for a more personalized alignment by choosing between a multitude of options. actually, the most important options of ptc have been taking into account in the design phase of the portal.

 <dig>  monitor: the job monitor page displays information about submitted data sets, the date of the submission and their state.

 <dig>  results: finally, the results are sent directly by e-mail to the user, so one can exit the web portal once the job has been submitted.

RESULTS
the ptc portal allows users to upload a large number of sequences to be aligned by the parallel version of tc that cannot be aligned by a single machine due to memory and execution time constraints. the main interest here is not so much the portal, but rather the methodology used to generate it, using a collection of tools that allow the seamless integration of a supercomputer environment with an optimised parallel application. yet, the resulting portal also has a concrete application that allows users to compute t-coffee alignments on large datasets in a time comparable to that measured on other servers running faster but less accurate packages. the results showed in  <cit>  have demonstrated that parallel t-coffee can decrease the time required for the alignment of the pfam database by one order of magnitude with respect to the serial version. with this speed-up, parallel t-coffee can reach execution times similar to those obtained with probcons or dialign, taking into consideration the experimentation performed in  <cit> .

for the experimental results, we have used different protein families from pfam database  <cit>  with different number of sequences  and different average sequences lengths . table  <dig> shows the time that ptc takes to align different numbers of sequences depending on the number of cores used in each test. the times have been obtained using the hector supercomputer and using the ptc portal for launching the jobs. the complexity of t-coffee algorithm is o  <cit> , with n being the number of sequences to be aligned and l the average sequence length. this complexity means that the execution time increases quadratically with the number and the length of the sequences. therefore, when the alignment complexity increases, the use of ptc is necessary as it can obtain larger speed-ups. however, it can be seen in figure  <dig> that the speed-up is limited because the latter stages of the alignment have poor parallelism due to their tree structure.

the ptc web service that we present in this paper is currently suited to run on the hector supercomputer located at the university of edinburgh. it can be downloaded and easily adapted to any other cluster or supercomputer that makes use of sge, pbs or condor as the queue manager. figure  <dig> shows the layer architecture of how the ptc web-based interface works over different kinds of supercomputers. as can be seen, the communication with the queue manager is implemented into separate modules. that feature allows developers to adapt in an easy way the ptc portal on clusters running with different queue manager systems. furthermore, this modular implementation also facilitates the adaptation process of the portal into other clusters since the administrators only need to change some properties of these modules without the necessity to know anything about the rest of the code.

CONCLUSIONS
we introduced a web portal created with rapid that improves the use of ptc on supercomputers by making the user interface intuitive. the idea is to provide users who want to align a set of sequence using a high accuracy method, such as t-coffee, an alternative to the tc web service without the single-machine memory limit. furthermore, we have developed this portal taking into account mainstream job queue managers, i.e. sge, pbs and condor. this allows anyone to quickly adapt our web interface to be used on other supercomputers, compute clusters or grids.

availability and requirements
in this section, the main availability and requirements details are provided.

• project name: parallel t-coffee portal

• project home page: http://gcd.udl.cat/ptc

• operating system: platform independent

• programming language: xml + jython

• other requirements: tomcat  <dig>  or higher and a portal container e.g. liferay

• license: gnu general public licence

• any restrictions to use by non-academics: none declared

list of abbreviations
tc: t-coffee; ptc: parallel t-coffee; msa: multiple sequences alignment; hpc: high performance computing; mpi: message passing interface; rma: remote memory access; xml: extensible markup language; war: web application archive; jsp: javaserver pages; sge: sun grid engine.

authors' contributions
jk and jvh developed rapid, which was used for the parallel t-coffee portal and jr was responsible for the implementation process. the validation test of the web-based interface were performed by fc and fs the sequence alignments were done by cn using the ptc portlet. the paper was written by jr and proofread and edited by the co-authors. the supervision of jvh and cn from the conception of the project was essential to its success. all authors read and approved the final manuscript.

authors information
jr received his bs and ms in computer science from universitat de lleida  in  <dig> and  <dig> respectively. currently hi is a phd student in the same university and his research interests are high-performance computing, p2p systems and parallel simulation.

fc received his bs and ms from  <dig> and  <dig>  respectively, and a pdd in distributed multimedia systems from the universitat autonoma of barcelona, spain, in  <dig>  he is an assistant professor in the computer science department of the university of lleida, spain. his research interests include distributed multimedia systems, multimedia and high-performance p2p systems and parallel simulation.

fs received the b.s., m.s. and ph.d. degrees in computer science from the universitat autònoma de barcelona, spain, in  <dig>   <dig> and  <dig> respectively. currently, he is an associate professor in the department of computer science at the university of lleida . his research interest include are distributed processing and hpc.

jvh has a phd in mathematics and physical sciences from the leiden university, the netherlands . he is a project manager at optos--an innovative retinal imaging company with a vision to be recognised as the leading provider of retinal diagnostics. since  <dig>  he is a honorary fellow of the university of edinburgh.

jk is a research associate at the uk's national e-science centre of the university of edinburgh. his research interests are grid computing. he has an msc from university of twente in the netherlands and a phd from the university of the west of scotland  in the uk.

cn is a group leader in the bioinformatics and genomics programme of the crg. he was trained as a bioinformaticist in the lab of des higgins at embl  and later at the ebi-embl . he was awarded his phd in  <dig> and then obtained a junior professor position in marseille university  and in lausanne university . in  <dig> he obtained a junior cnrs scientist position. after  <dig> years in the lab of jean michel claverie  he is currently on leave at the crg  where he is a senior group leader, heading the laboratory of comparative bioinformatics in the bioinformatics and genomics department. his work is focused on the development of multiple sequence alignment methods and the comparison of protein sequences and structures. he has developed and maintained the t-coffee multiple sequence alignment package, one of the most accurate of its kind that has so far received close to  <dig> citations. between  <dig> and  <dig>  he was a consultant for the pharmaceutical industry  providing expertise on the analysis of the human kinome through multiple sequence comparisons.

