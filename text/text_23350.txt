BACKGROUND
large scale genomic studies, especially expression microarrays, routinely identify large genes sets  of interest. researchers are faced with the problem of identifying interesting features in such datasets. a listing of gene annotations  can help identify interesting features, but this is impractical with large sets, due to the labor involved and the difficulty in picking statistically significant trends from large datasets. thus, a user-friendly method is required for the routine analysis of such datasets.

the gene ontology consortium  <cit>  curates the annotations of genes of several model organisms using a controlled vocabulary of go terms. it also places the go terms on a hierarchy called the gene ontology. there are separate hierarchies for molecular functions, cellular components and biological processes. the terms on the hierarchy share a parent-child relationship in which a child term is either a specific instance or a part of its parent term. the terms get more specific the lower they are on the hierarchy  <cit> . each node on the hierarchy can have multiple parents and children.

a small portion of the go molecular function heirarchy around the nucleic-acid binding term is shown in figure  <dig>  this hierarchy can be generated using the go term browser on the gobar website  <cit> . the go term, go: <dig>  which corresponds to nucleic-acid binding, has two children, rna binding and dna binding. rna binding itself has many children, including double-stranded rna binding and single-stranded rna binding. dna binding has double-stranded dna binding and single-stranded dna binding as children.

a single gene can appear in several go terms. for example, dicer- <dig>  has several molecular functions, such as double-stranded rna binding  and bidentate ribonuclease iii activity  which are unrelated to each other. figure  <dig> shows the placement of dicer- <dig> on the go tree.

in figure  <dig>  each node shows the number of genes annotated in the d. melanogaster genome associated with the term. there are a total of approximately  <dig>  genes in the genome. if a hypothetical microarray experiment in d. melanogaster picks out  <dig> significant genes, of which  <dig> are double-stranded rna  binding genes, then it is intuitively obvious that dsrna binding is affected by the experiment and pathways using this function might be responding to the experiment. gobar uses the hypergeometric distribution  to quantify this intuition.

implementation
the basic idea of the algorithm is to compare the distribution of the genes from a set on the go tree against the distribution of all the genes of the genome on the go tree, identify and highlight branches that are improbably enriched by chance alone, and render an image of the go tree that will allow user interactions to further explore the data.

the go tree is first populated with all the genes in the genome, which involves placing genes at all the nodes that describe the gene. this operation is carried out only once, and is redone each time the genomic data gets updated. at each node two sets of counts are maintained, the contribution of genes from nodes that are children of the current node  and the contribution from the genes at the current node . the total count at each node , is divided equally amongst the distributed counts of each parent . to calculate the counts at each node the leaves  are first considered, and the counts are progressively transmitted up in a level-by-level manner, until the root is reached.

for the analysis the go tree is populated with the list of genes to be analysed. once again a set of distributed and bare counts is calculated at each node for this list. the distribution of these counts is compared to the genomic set and significance is assigned to the deviations from the expected counts, using the hypergeometric distribution, which is now described. if there is a collection of n objects of three types, a , b , and c  so that, n = a + b + c, then, a random selection of n objects from these n objects will contain α a objects, β b objects and γ c objects  with a probability given by the hypergeometric distribution



where,



this equation can be generalized to arbitrary collections of objects. using this probability distribution, highly improbable deviations from the expected numbers are highlighted under the assumption that they are likely to have a biological significance.

methods
go data can be downloaded from the gene ontology website  <cit> . the data contains two sets of information that are used, the parent-child relationships for each node and the definitions of each node or term. the data collection and analysis techniques are described in this section.

data acquisition
the downloaded go data is used to populate one table with go ids and the id definitions, and another table with a description of relationships between the go ids, which can use terms such as is_a or part_of to define the relationships.

in order to associate go terms with gene ids , the files gene2go and gene2accession were retrieved from entrez gene  <cit>  for the human and mouse genomes. a similar dataset for d. melanogaster is acquired from flybase  <cit> . each gene can have multiple go annotations, so this is a many-to-many association table.

a table, whose columns are shown in table  <dig>  is used to maintain node information, and to carry out statistical analysis. at each step of the methods listed below, one of the columns gets filled up. the columns in table  <dig> are filled in the following order,

• level : a recursive depth-first search in a bottom-up fashion is carried out to determine the level of go terms associated with the experiment, as explained in figure  <dig> 

• number of trails up: this is obtained from the table of go id relationships by counting the number of parents for a node.

the following two items are calculated once in the beginning for all the genes in the genome and for each analysis of a gene-list.

• bc: bare count  is a number of genes associated with each go term .

• dc: starting from the lowest node in the tree , the total count, bc + dc is propagated to the node's immediate parent. if a node has more than one parent then total count is divided by the number of trails up, which is the same as the number of parents.

populating the tree with the reference dataset
we have populated the go tree with datasets from entrez gene for human and mouse data  <cit> , flybase  <cit>  for fly data and sgd  <cit>  for yeast data. in the case of entrez gene, two sets of maps exist, a gene id to go map and a gene to gene id map. at the end of this process each go node gets a list of genes. the term bare counts denotes the counts of genes at each node. the genes on children nodes also contribute to the counts on any given node, which are tracked separately and called distributed counts. thus, the distributed count of a node is the sum of contributions of the nodes below it in the gene ontology hierarchy. each node contributes the sum of its bare count and its distributed count equally to the distributed counts of each of its parents. this process can be recursively applied, starting from the lowest levels  of the tree and working the way up the tree.

if the accounting of distributed counts is to be done properly, defining the depth of each node in the tree is important. the rule for assigning depth to each node is that, if a node gets multiple levels, then the highest depth is always assigned to it. this can be done by picking the leaves of the tree  and travelling recursively all the way up to the root . for each path to the top, depth is assigned to each node based on the number of steps to the node from the root. if a node already has a depth assigned to it, then the depth is replaced with the current depth only if it is bigger. this is explained in figure  <dig>  once the leaves have been exhausted, all the nodes in the tree will have depths assigned to them.

in order to calculate the distributed counts for each node, the list of nodes is ordered based on their depths. starting from nodes with the highest depths the counts are propagated up, as described above, summing up the bare count and distributed count and partitioning the sum equally amongst all the parents. after exhausting the list of nodes, all the nodes should have a bare count and a distributed count assigned to them.

populating the tree with the experimental dataset
in order to calculate probabilities for a given experimental dataset, we need to first populate the go tree with the experimental dataset. a procedure identical to the one used in the previous section is implemented, resulting in a go tree with just the dataset of interest on it.

calculating the probabilities
let bci, dci be the bare and distributed counts respectively at node i for the genomic dataset and let bci, dci be the bare and distributed counts respectively at node i for the experimental dataset. then, for the node  <dig> in figure  <dig> 

dc <dig> =  +  + / <dig>     

dc <dig> =  +  + / <dig>     

the following are defined for ease of notation:

n <dig> =      

n <dig> =      

n <dig> = / <dig>     

n <dig> = dc <dig> = n <dig> + n <dig> + n <dig>     

n <dig> =      

n <dig> =      

n <dig> = / <dig>     

n <dig> = dc <dig> = n <dig> + n <dig> + n <dig>     



then, the probability that a dataset is a random selection from the genes in the genome is given by the hypergeometric formula 



where



the expected value for n <dig> is given by



we define pd as the deviation of the counts on a node i from its expected number and is given by



we use p and pd to prune the trees, as described in the next section.

pruning the tree
listing all the nodes of the go tree for a given dataset is not very informative, especially if only a few nodes are populated or if a large number of go terms are populated by a small number of genes. this also defeats the purpose of helping users narrow down the go terms of interest.

a node can only be pruned if every node under it also satisfies the pruning condition. the tree is pruned using the following rules to make the viewing manageable,

 <dig>  if n <dig> <nc, stop traversing the tree, that is, do not show anything below such a node. the population cutoff, nc can be set by the level of details option on the gobar webpage at step  <dig>  shown in figure  <dig>  this determines how low the population of genes in a node can go before it gets pruned. less detailed corresponds to a minimum of  <dig> genes, detailed corresponds to a minimum of  <dig> genes and very detailed shows every node.

 <dig>  prune nodes that have p > pth. the threshold pth is arbitrarily set at  <dig> .

 <dig>  if ni deviates significantly up from <ni>, then the path is hightlighted using red color. pd can be set using the deviation stringency option in step  <dig> on the webpage, shown in figure  <dig>  less strict corresponds to a deviation cutoff value of  <dig> , strict corresponds to a cutoff of  <dig>  and very strict corresponds to a cutoff value of  <dig> .

the pruning is done starting with leaves  on the tree, and stops when it reaches a node that should not be pruned according to the rules above. fine variations of the pruning conditions are not allowed as these do not offer useful biological information and make the tool difficult to use.

visualizing the tree and user-interaction
graphviz  <cit>  is used to create the layout of the go tree, and scalable vector graphics  is used to make it interactive. an example of the visualization is shown in figure  <dig>  javascript is used to animate the svg rendering of the go tree. when the cursor is over a node, a window pops up with information on the go term, genes that belong to the node and links to other resources. this window can be locked in place with a mouse click, allowing further exploration of the gene.

data download
the tool also allows the downloading of all the genes in the go tree below any node. the downloaded list is in the form of a comma separated valued  file, which contains the gene, the go terms for each gene and a short description.

in the downloaded list, the uploaded genes are highlighted, since the list will also contain genes that belong to the nodes but are not in the uploaded list.

use of the tool
gobar is accessible at our website  <cit>  and can analyze gene lists from the yeast , fly , mouse  and human  genomes. the front page of the website is shown in figure  <dig>  the list of genes to be studied can be entered into gobar by either uploading a file containing the list, or by entering the names in the text-area provided on the webpage. each gene on the list can be annotated with user definitions, by using a colon to separate the gene name from the annotation . the website offers several options to limit what is rendered in the result page, but using the default settings is recommended for the initial exploration. after the section of the go tree relevant to the uploaded dataset is drawn, the website allows the user to limit the view to specific branches of the go tree . nodes containing genes from the uploaded list are rendered in a green oval. a node is red if it does not contain any genes from the uploaded list but one of its children node has genes from the list. a pop-up window also shows the go terms and their levels in the go heirarchy, that have been highlighted by the analysis. taking the mouse over a go term pops-up an information window that can by locked in place by clicking on the left mouse-button. there are links in this information window that can be used to download all the genes on and below the node on the go tree, with the input genes highlighted in red. if user annotations are given for each gene, then they appear with the gene name in the data downloads. one of the links also allows listing all the go terms below the node of interest on the tree. the genes in the data download that are not from the uploaded list might also be worthy of further study, especially if many of the other genes in the pathway or go term are highlighted in the experiment.

the numbers on the lines between the nodes are the deviation from expected counts . a red line implies that the child node connected to the path in the go hierarchy is over-represented in the uploaded dataset and the corresponding go term might be biologically significant.

if a single gene  needs to be placed on the go tree, then the tree should not be pruned, which is achieved by selecting the "no" option in step  <dig> on the front page. pruning is the removal of branches of the go tree which do not carry much information . the result of placing dicer- <dig>  in d. melanogaster is shown in figure  <dig> 

RESULTS
we will apply gobar to the analysis of results from a genomic study of splicing  <cit> . splicing is the excision of introns from the pre-mrna after transcription  <cit> . broadly, there are two classes of splicing machinery , u2-dependent and u12-dependent, named on the basis of the snrnps involved in the splicing reaction. each of these spliceosomes is involved in the excision of two sub-classes of introns, defined by the consensus sequences of the 5' and 3' ends of the intron, gt-ag-u <dig>  gc-ag-u <dig>  gt-ag-u <dig> and at-ac-u <dig> type splice sites. the number of u12-dependent splice sites in the genome is dwarfed by the number of u2-dependent splice sites, numbering less than 2% of the total  <cit> . the snrnps comprising the u12-dependent splicing machinery are also relatively less abundant. the d. melanogaster, mouse and human genomes have u12-dependent splicing, while c. elegans seems to have lost it. this conservation leads to speculation regarding the reason for the persistence of the u12-dependent splice sites over evolutionary time scales.

if the u12-dependent splice sites persist for some biological reason, then it seems reasonable to assume that only genes with roles in certain functions should contain these splice sites. there has been some speculation, but no rigorous assessment, regarding the functional bias of these genes  <cit> . a comprehensive annotated collection of splice sites for the worm , fly , mouse  and human  genomes has been generated by classifying the known sites with the help of human curation  <cit> . the list of genes with at-ac-u <dig> type splice sites was analyzed using gobar to identify functional themes that might be highlighted. figure  <dig> shows a part of the result of gobar analysis of the human genes with at-ac-u <dig> type splice sites. table  <dig> shows the go terms that are highlighted by the analysis of the human set.

in the molecular function branch, analysis of the mouse set highlighted gtpase regulator activity, cation channel activity and calcium channel activity. the human set also highlighted sodium channel activity and voltage-gated calcium channel activity. in the biological process branch, the analysis highlighted intracellular signalling cascade and actin-filament based process. the drosophila set was too small , to give any detailed statistics, but gobar did highlight transporter activity, which is a parent of the cation channel activity. the highlights that are present in both human and mouse genomes could point to reasons for the persistence of at-ac u12-dependent splice sites over evolutionary time-scales. we believe this might have some basis in the biological control of the rates of splicing reactions of these genes but reaching a firm conclusion requires an investigation that is beyond the scope of this study.

discussion
our proposed method of analysis is mathematically robust and allows visualization and identification of pathways. we can identify sub-groups of genes that cannot be explained by chance alone. this in turn can identify pathways that are of interest in the process under study. identification of the pathways then allows study of other genes in the pathway that are not picked up in the experiment, allowing for a clearer understanding of subtle effects and quantifying the errors in the experiment.

the conclusions we reach using our method of analysis does depend on the accuracy of the gene annotations. thus, if the role of a gene in a pathway were unknown, or if a small set of genes could have a strong phenotypic effect , then gobar will mislead the investigator. such phenomena are, in general, more difficult to study using microarrays and require supplementary biological assays to uncover the underlying mechanisms.

using the go tree allows us to ameliorate some of the problems inherent in gene annotations, so that genes below the term of interest are also counted as part of the function being studied. our method involves a one-time analysis of the whole genome dataset, which then allows us to decide, in a straightforward manner, the significance of any number of datasets and allows easy navigation and analysis of the data. the convenience and robustness of the method are the novel contributions here.

another rigorous approach identifies biological themes from gene lists using go, by calculating the over-representation of categories in the experimental list relative to a background list . a problem with this is the underlying assumption that the go annotations at each node are accurate. in our approach, in order to allow for the fact that genes may be placed at different depths due to human biases, we let every gene below a particular node contribute to the counts on that node, but done in a way that prevents multiple counting. this also allows genes with more specific functional annotations to contribute to the more general annotation. thus, our approach also differs from this one in the way we define hits, by allowing genes that are lower down in the tree to be a part of the node under consideration.

we offer a detailed comparison with gostat  <cit>  available at its website  <cit> . gostat returns lists of significantly enriched go terms and genes in those go terms. in order to see the meaning of the term and its placement in the go tree the user can click on the link to go to amigo  <cit> . the results are comparable, though we do not offer a p value for the significant nodes. they also offer a list of go annotations for each gene in the uploaded list. a list of terms is not human friendly and is not a natural method of presenting data that has a tree-like structure. we feel that our svg based view of the tree is intuitively easier to use and also allows for a quick overview of the data, allowing the user to zoom into relevant sections. also, our listing of the functions in order of their level in the go tree allows a user to pay attention to more nodes based on levels . the goal of the study determines what level of specificity for a node is preferred.

in addition, the go browser offered on the gobar website allows an svg-based exploration of the go tree, simultaneously showing all the branches and relationships between them, which is different from the text based version offered by the amigo website  <cit> . gobar also allows viewing all the go annotations of a gene in a single view, as shown in figure  <dig>  which is also a novel feature of this program.

the analysis of genes with u12-dependent splice sites, given in the previous section, is indicative of the power of this approach. we identified functions that are over-represented in the at-ac-u <dig> set, which in turn can be the starting point of an investigation into the phylogeny of the genes involved. the phylogeny could explain the evolution and the role of at-ac-u <dig> type splice sites.

CONCLUSIONS
gobar is a convenient tool for the analysis of large gene lists. it provides useful guidance to biologists on functions and pathways that need further study and is available freely over the web at  <cit> .

authors' contributions
ravi sachidanandam conceived the algorithm and the project and helped with the coding. gurpreet katari implemented an initial version of the code before leaving his position and jason lee improved and revised much of the code and implemented the web-based front end.

