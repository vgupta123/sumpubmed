BACKGROUND
population structure inference is the problem of assigning each individual in a population to a cluster, given the number of clusters. when admixture is allowed, each individual can be assigned to more than one cluster along with a membership coefficient for each cluster. population structure inference has many applications in genetic studies. some obvious applications include grouping individuals, identifying immigrants or admixed individuals, and inferring demographic history. moreover, it also serves as a preprocessing step in stratified association studies to avoid spurious associations  <cit> .

the association between a marker and a locus involved in disease causation has been the object of numerous studies. in a case-control study, it is possible that the samples or patients are drawn from two or more different populations but the population structure is not observed or recorded. suppose that an allele of a marker appears significantly more frequently in the case than in the control group, we might come to the conclusion that this allele is associated with the disease. however, we have to rule out the possibility that most of the samples in the case group are from a specific population and this allele happens to be the prevalent one at the marker. therefore, inferring population structure before association studies allow us to avoid this problem, lowering the false positive rate.

software structure is widely used in population structure inference. it is specifically designed for genotype data and approaches the problem by careful modelling of allele frequencies, origins of alleles of individuals and origins of individual genomes. as described in section methods, for a genotype dataset of m diploid individuals and n biallelic markers, structure estimates 2kn + km + 2mn parameters using markov chain monte carlo , where k is the number of clusters. inferring population structure using structure is, therefore, very time-consuming since it has to handle large datasets consisting of thousands of individuals genotyped at hundreds of thousands of loci. therefore, we propose an alternative approach to dealing with this problem.

from the perspective of machine learning, when dealing with high-dimensional data, it is natural to preprocess the data with dimension reduction and feature selection techniques. principal component analysis  is a technique of dimension reduction. the importance of a principal component  is proportional to the corresponding eigenvalue, which is the variance of data projected onto this component. deciding the number of pcs to be kept for subsequent analyses is not a trivial problem. fortunately, johnstone  <cit>  showed that with suitable normalization, for large m and n, the distribution of the largest eigenvalue λ <dig> is approximately a tracy-widom  distribution  <cit> . patterson et al.  <cit>  applied pca to real and simulated population genotype data with more than one underlying subpopulation. it is shown that, when the genotype data is projected onto a significant pc, the means of the subpopulations are also significantly different according to an anova test. these empirical results indicate the potential of pca and the tw distribution in discovery of population structure. therefore, we propose to perform dimension reduction on genotype data using pca and apply generic clustering algorithms to infer population structure.

in this paper, we base our study on pca and investigate three generic clustering algorithms – k-means, soft k-means and spectral clustering algorithms. the results are then compared with those generated by structure. we introduce the data, clustering algorithms and evaluation metric in section methods. comparisons and analyses of results are given in section results and discussion. finally, we give the concluding remarks in section conclusions.

methods
data
in this study, we use both real and simulated data to evaluate the performance of clustering algorithms. the real data is obtained from the human genome diversity project-centre d'etude du polymorphisme humain  human genome diversity panel  <cit> , which contains genotypes of  <dig>  individuals sampled from  <dig> populations. the version  <dig>  of the hgdp-ceph database contains genotypes for  <dig>  markers and  <dig>  biallelic ones are used in our study. two subsets of individuals are constructed from the  <dig>  ones. one subset encompasses all the  <dig> individuals in europe and middle east, which are geographically close, and we refer to it as the close dataset. the other subset consists of all the  <dig> individuals in africa, central south asia, east asia and europe, which are geographically far apart from each other, and we refer to it as the distant dataset.

the simulated data is generated using software genome, a coalescent-based simulator written by liang et al.  <cit> . the parameters are set to mimic the real data from hgdp-ceph. the number of chromosomes or independent regions is set to  <dig> since there are  <dig> autosomal chromosomes in human. each chromosome has  <dig>  <dig> -base fragments, simulating linkage disequilibrium within fragments. the recombination rate between two consecutive fragments is set to  <dig>  to simulate the length of human genome. the number of markers per chromosome is set to a fixed number of  <dig>  so the number of markers for each individual is  <dig> . we use four simulated datasets in this study. three of them contain individuals sampled from independent populations. the fourth dataset is generated according to a simple demography shown in figure  <dig>  the details are summarized in table  <dig> 

principal component analysis
principal component analysis  is a technique of dimension reduction. given m samples and n markers or variables, the m samples can be represented as a m × n matrix x. we further assume that the sample mean of each marker is  <dig>  i.e., ∑i=1mxij= <dig>  using another basis of n vectors or axes, represented as column vectors of p, we can project the samples onto the new axes and obtain another m × n matrix y = xp. pca finds a p such that the sample covariance matrix of the n new variables is a diagonal matrix. that is,

 ∑y=1myty=1mtxp=1mptxtxp=pt∑xp=d, 

where d is a diagonal matrix, Σx and Σy are the sample covariance matrices of the original and new n variables, respectively. p can be obtained by the eigen decomposition of Σx. therefore, pca is very simple and easy to implement.

in this study, we use the software smartpca by patterson et al.  <cit> . smartpca is specifically designed for genotype data and it offers options addressing issues such as linkage disequilibrium  in analyzing genotype data. patterson et al.  <cit>  showed that the presence of ld in data distorts the distribution of eigenvalues, which makes selecting pcs according to the tw statistics meaningless. therefore, we follow the suggestion and turn on the option to replace the values of each marker with the residuals from a multivariate regression without intercept on the  <dig> preceding markers. after pca, we keep those pcs with p-values smaller than 5% for subsequent cluster analyses. since structure accepts only genotype data, the input to structure is not processed with pca.

clustering algorithms
in this study, we investigate three generic clustering algorithms – k-means, soft k-means and spectral clustering algorithms. in order to compare these generic clustering algorithms to algorithms designed specifically for population structure inference, we also run structure on the datasets. we briefly introduce the three generic clustering algorithms and structure in the folowing subsections.

k-means
the k-means algorithm is an iterative descent algorithm that minimizes the within-cluster sum of squares  given the number of clusters k.

  wk=∑i=1k∑j∈ci‖xj−μi‖ <dig>  

where xj is the feature vector representing sample j, μi is the center of cluster i, and ci is the set of samples in cluster i. we use the implementation of a variant by hartigan and wong  <cit>  embedded in the r language.

soft k-means
the soft k-means algorithm assumes that samples follow a mixture of k multivariate gaussian distributions ∑k=1kδkn,, where ∑kδk=1; μk and Σk are the mean and covariance matrix for the kth gaussian distribution. therefore, given the number of clusters k, the algorithm estimates the parameters θ =  using the expectation-maximization algorithm, while the unobserved latent variables are the labels of samples. in this study, we use mclust version  <dig>  <cit>  for r language, which offers a wide selection of covariance matrix models.

spectral clustering
the spectral clustering algorithm is based on the weighted graph partitioning problem. considering a graph of m nodes, each node represents a sample and the weight on the edge between two nodes is the similarity between the two samples. we define the total similarity between two clusters a, b as

 sim=∑i∈a∑j∈bsij, 

where s is a m × m similarity matrix. given the number of clusters k, we want to find a partition c* such that the following objective function is minimized.

  c*=arg⁡min⁡c∑k=1ksimsim 

equation  <dig> can be expressed as follows.

  e*=arg⁡min⁡e∑k=1kektekektdek, 

where e =  is a m × k indicator matrix and d is a m × m diagonal degree matrix. the ith element of ek is  <dig> if sample i is in cluster k. otherwise, it is  <dig>  dii=∑j=1msij. since finding the optimal e is np-hard, spectral clustering solves the minimization problem by allowing the entries of e to have real values. this amounts to finding the k eigenvectors of d−12d− <dig> with the smallest nonzero eigenvalues. we implemented the algorithm, described in figure  <dig>  proposed by ng et al.  <cit>  in r. in the last line of the algorithm, one can use any algorithm to perform the clustering. therefore, we investigate k-means and soft k-means, producing two variants of the spectral clustering algorithm. in this study, we use a radial basis function to calculate the similarity between two samples.

  sij = exp, 

where γ is a constant.

structure
given the number of clusters k and genotype data x, structure  <cit>  models the population structure with three vectors of parameters – q, z and p. the genotype data and parameter vectors contain the following elements.

 xl=allele copy a of individual i at locus l;qk=proportion of individual i's genomethat originated from population k;zl=population origin of allele copy xl;pklj=frequency of allele j at locus l inpopulation k. 

in diploid organisms, there are two copies of alleles at each locus on an autosomal chromosome, and hence a ∈ { <dig>  2}. the probability model for  is described by the following equations:

 p=j|z,p,q)=pzllj;p)=k|p,q)=qk;pkl~d, 

where d is the dirichlet distribution, jl is the number of alleles at locus l, and λ <dig> = ... = λjl =  <dig> , giving a uniform distribution on the allele frequencies;

 q ~ d, 

where d is again the dirichlet distribution and α ∈  <cit>  is uniformly distributed. the estimates of z, p, and q are obtained by sampling z, p, q from the posterior distribution p using a mcmc algorithm. in this study, the burn-in length is set to  <dig>  and another  <dig>  samples are collected after burn-in for parameter estimation.

inferring the number of clusters
the number of clusters is always an important issue in cluster analysis. as a model-based algorithm, structure estimates the number of clusters k using the posterior distribution of k

 p ∝ pp, 

where x denotes the genotype data. in this study, we investigate two methods for selecting the number of clusters. one is a distance-based generic method using the gap statistic proposed by tibshirani et al.  <cit> . the other is by using the bayesian information criterion   <cit>  as the model selection criterion with the soft k-means clustering algorithm. we briefly introduce the two methods in the following paragraphs. the gap statistic is a heuristic method based on the wss given in equation  <dig>  given the number of clusters, we expect smaller wss in a dataset that has clusters than in one that do not. therefore, the gap statistic is defined as follows.

  gap=log⁡ee−log⁡wkw <dig>  

where e is the expectation of the wss for the reference dataset, which has no clusters. tibshirani et al.  <cit>  suggested using a uniformly distributed reference dataset. e is estimated by randomly generating b uniformly distributed datasets.

 e^=1b∑b=1bwkr 

we then estimate the number of clusters by finding the smallest k such that

  gap≥gap−s′k+ <dig>  

where s′k+1=sk+11+1b and sk+ <dig> is the standard error of wk+1r. the gap statistic can be used with any clustering algorithm. in this study, we use it along with k-means to predict the number of clusters. it is generally the case that we can better fit a dataset to the model with more parameters, resulting in higher likelihood or lower sum of squared error. therefore, the bic score addresses this issue by penalizing the number of parameters. it is defined as

 bic = 2l - log|θ*|, 

where l is the log likelihood function, θ* is the parameter set maximizing the likelihood and m is the number of observations or samples. the bic score is used in mclust version  <dig>  <cit>  as the model selection criterion.

evaluation metric
in population structure inference, given the number of clusters, each individual in the dataset is assigned an estimated membership coefficient for each cluster. the coefficient indicates the likelihood that an individual descends from a specific population origin. by assigning each individual to the most likely cluster, we have obtained a partition of the individuals in a dataset. a partition is a set of mutually exclusive and collectively exhaustive clusters. given two partitions, we use the algorithm proposed by konovalov et al.  <cit>  to measure the distance between them. the distance between two partitions is defined as the minimum number of individuals that need to be removed from each partition in order to make the two partitions identical. for clarity, we scale the distance measure to  <cit> .

for the simulated datasets, we calculate the distance between the gold-standard partition and the partition generated by each clustering algorithm. the smaller the distance between the two partitions, the better the performance. for the real datasets, we compare the partition produced by structure to the partitions produced by all other clustering algorithms investigated in this study. this is because structure is a widely used algorithm in inferring population structure.

RESULTS
simulated data
evaluating the performance of the clustering algorithms on simulated datasets is straightforward since the gold standard partition for each dataset is available. the performance, in terms of distance between the gold standard partition and the predicted one, is summarized in table  <dig>  the measure of distance is described in section methods. the parameter γ in equation  <dig> is not tuned for all the simulated datasets. it is set to either  <dig> or  <dig>  except for the third dataset. the reason for setting γ = 2- <dig> is because when the algorithm tries to obtain the eigenvalues and eigenvectors of d−12d− <dig>  the r function eigen seems to be caught in an infinite loop for γ = 2-g, g ∈ { <dig>   <dig>   <dig>  3}. for the first two datasets, all the clustering algorithms show perfect results. this is probably because these two datasets contain independent and equal-sized subpopulations. for the third dataset, apart from the two variants of spectral clustering algorithm, soft k-means and structure perform equally well while k-means produces comparable results. moreover, soft k-means performs the best on the fourth dataset while structure gives the worst performance. to better analyze the results, we visually compare the clustering algorithms using bar plots shown in figure  <dig>  the bar plots are generated using software distruct  <cit> . according to the demography in figure  <dig>  population  <dig> does not contain admixed individuals but structure fails to assign the individuals in population  <dig> to only one cluster as the other algorithms do. however, when setting k =  <dig>  structure performs very well and reflects the demography used to simulate the data. the bar plots are shown in figure  <dig>  we can see that individuals in population  <dig>   <dig> and  <dig> are clustered into distinct groups, while individuals in population  <dig> equally likely belong to the two clusters occupied by population  <dig> and  <dig>  soft k-means produces similar results, while the other algorithms group individuals in population  <dig> with individuals in either population  <dig> or population  <dig>  table  <dig> shows the number of clusters inferred by the gap statistic, the bic score and structure. we can see that the bic score with pcs suggested by the tw distribution and structure make identical predictions on the simulated datasets. when the bic score is used with the top- <dig> pcs, it makes the correct prediction on the second simulated dataset but fails on the third one. therefore, these two approaches perform comparably on the simulated datasets. the gap statistic fails to make the correct prediction on all but the first simulated dataset unless only  <dig> or  <dig> pcs are used.

 <dig>  <dig> pcs.  <dig> 2nd k.  <dig> 3pcs, 2nd k.  <dig> structure.

1k-means. 2soft k-means. 3spectral + k-means. 4spectral + soft k-means. 5structure.  <dig> γ =  <dig>   <dig> γ =  <dig>   <dig> γ = 2- <dig> 

real data
in this section, we compare the results generated by the generic clutering algorithms to those produced by structure since no gold standard partitions are available for the real datasets. the results for the distant and close dataset are shown in table  <dig> and table  <dig>  respectively. for the distant dataset, using all the  <dig> significant pcs, the partition given by soft k-means at k =  <dig> is identical to that produced by structure. when only the top- <dig> pcs are used, all the clustering algorithms produce partitions similar to that predicted by structure. this implies that all the distance-based generic algorithms investigated in this study are sensitive to noisy and non-informative variables, which are used in the calculation of distance or similarity.

1k-means. 2soft k-means. 3spectral + k-means. 4spectral + soft k-means. 5γ = 2- <dig>  6γ = 2- <dig> . 7γ =  <dig>  8γ = 2- <dig> . 9γ = 2- <dig>  10γ = 26

1k-means. 2soft k-means. 3spectral + k-means. 4spectral + soft k-means. 5γ =  <dig>  6γ = 2- <dig> . 7γ = 2- <dig>  8γ = 2- <dig> . 9γ = 2- <dig> . 10γ = 2-4

the bar plots of the partitions produced using the top- <dig> pcs are shown and compared to the one by structure in figure  <dig>  we can see that the populations in africa are grouped into one cluster and all the other populations are grouped into the other one. this phenomenon is more evident when k =  <dig>  as seen in table  <dig>  the partitions produced by the generic algorithms using  <dig> pcs are more similar to the one produced by structure than those produced using  <dig> pcs. the bar plots are shown in figure  <dig>  for k =  <dig>  however, the partitions generated by the generic clustering algorithms are very different from that by structure. using the top- <dig> pcs hardly makes the distance smaller. from the plots in figure  <dig>  we can see that structure infers that the genome of individuals in pakistan is the mixture of the blue, yellow and pink clusters and the yellow one makes the most contribution. the other algorithms group the individuals in pakistan and europe into the same cluster.

as for the close dataset, it can be seen in table  <dig> that k-means and spectral clustering with soft k-means produce the most similar partitions to the one generated by structure at k =  <dig> using the top- <dig> pcs. the bar plots for k =  <dig> and k =  <dig> using 3pcs are shown in figure  <dig> and  <dig>  respectively. when k =  <dig>  k-means groups almost all the individuals in israel into one cluster and groups the rest into the other cluster, which is very similar to the results given by structure. at k =  <dig>  although k-means does not produce the most similar partition, it subdivides the individuals in israel into two clusters, which correspond to the druze and bedouin populations. we can also observe a similar pattern in the bar plot produced by structure. the individuals in the bedouin population generally have a higher proportion of genome from the blue cluster than the individuals in the druze population, enabling us to distinguish between the two populations.

it is difficult if not impossible to assess the correctness of the predicted number of clusters for the real datasets. we can see in table  <dig> that, the three methods give completely different predictions on the two real datasets. structure suggests that there are  <dig> clusters in the close dataset. however, the bar plot  at k =  <dig> is very noisy and does not reveal  <dig> clusters in the population. the bic score predicts  <dig> clusters in the close dataset. the bar plot generated by soft k-means at k =  <dig> in figure  <dig>  however, is not convincing, since only one individual is assigned to the yellow cluster. structure and the bic score  suggest  <dig> and  <dig> clusters, repectively. three clusters seem reasonable according to the bar plots in figure  <dig>  however, we can not observe  <dig> clusters in the bar plots generated by structure at k =  <dig> . for both real datasets, the likelihood given by structure increases as k increases, which is a sign of over-fitting. the gap statistic seems to suffer from the presence of noisy and non-informative pcs and either predicts no structure  or a large k of  <dig>  which is not supported by the bar plot .

CONCLUSIONS
in this study, we investigated three generic clustering algorithms on genotype data. we applied pca to genotype data in order to reduce the number of variables. based on the tw-statistic, the significant pcs were kept for subsequent cluster analyses. a p-value of  <dig>  was used in selecting significant pcs. we showed that all the generic clustering algorithms perform as well as structure on the first three simulated datasets. moreover, for the fourth dataset, all these algorithms produce better partitions than the one predicted by structure. we showed that soft k-means and k-means perform comparably well to structure on the distant and close datasets, respectively. however, all the three generic clustering algorithms show different degrees of susceptibility to noisy and non-informative pcs. therefore, the choice of p-value remains an important issue.

we also showed that structure and the bic score produce identical predictions on the simulated datasets. when it comes to real datasets, structure predicts the number of clusters to be the largest k investigated, showing a sign of over-fitting. the bic score is, therefore, a better index in predicting the number of clusters for real datasets, which reinforces the finding by zhu et al.  <cit> . the gap statistic performs poorly due to the presence of non-informative pcs.

while structure is a sophisticated clustering algorithm designed for genotype data, it is very time-consuming because of the nature of mcmc. we believe that the choice of clustering algorithms depends on the purpose of population structure inference. if we want to infer recent demographic events, structure would be a good choice since it even considers the origin of an alelle copy in the model. however, if population structure inference is used as a preprocessing step in association studies, pca with soft k-means would be very handy. in stratified association study, we need sufficient individuals in each cluster to make significant and meaningful associations. hence, splitting two slightly different populations and thus making each cluster smaller may not be helpful to association studies.

based on the results of this study, we recommend choosing suitable clustering algorithms according to the nature of applications of population structure inference. in addition to the proper choice of p-value in selecting pcs, we recommend applying unsupervised feature selection algorithms, such as the one proposed by paschou et al.  <cit> , to genotype data to improve the stability and robustness of the combination of pca and a generic clustering algorithm.

competing interests
the authors declare that they have no competing interests.

authors' contributions
cl conceived the study, collected the real data, carried out the implementation, conducted cluster analyses with the generic clustering algorithms and drafted the manuscript. aa conducted the structure experiments. ch guided the study and revised the manuscript. all authors read and approved the final manuscript.

