BACKGROUND
cancer research is becoming extremely high throughput, using modern methods from microarray to next generation sequencing, where thousands of counts of biological entities are collected in order to address complicated biological questions. gene expression connectivity mapping is a powerful bioinformatic technique for establishing the connections among genes, drugs and diseases  <cit> . there are three key components in the connectivity mapping process: a gene signature representing the biological state of a researcher’s interest, a core database of reference gene expression profiles for a large number small molecule compounds, and a similarity metric quantifying the closeness of the connection between the gene signature and the reference profiles. using a common “vocabulary” of gene expression profiling  <cit> , connectivity mapping allows the establishment/discovery of connections between different biological states via their gene expression patterns or characteristics, with great potential for application in areas like predictive toxicity  <cit> , candidate therapeutics discovery and drugs repositioning  <cit> . the systematic microarray experiments by the broad institute using different compounds, dosages, and cell lines led to the accumulation of drug expression profiles and laid down the foundation for subsequent data exploration and the development of new frameworks. following the introduction of an improved connectivity mapping framework featuring more principled statistical testing procedures and increased sensitivity  <cit> , a standalone java application, sscmap, was developed and released implementing this new algorithm  <cit> , and later enabled with gene signature perturbation capability  <cit> . given a user-supplied query gene signature, sscmap calculates a connection score between the query signature and each of the reference gene-expression profiles in the core database. the program also computes similar scores for a large number of randomly generated gene signatures, and compares the observed score with the distribution of random scores to obtain a p-value. the generation and processing of numerous random signatures is the most time consuming part of the computation, and causes a typical run of sscmap on a standard desktop computer to take around ∼2h to complete. using a larger number of random signatures can lead to more accurate estimations of p-values, but at a cost of requiring overnight or over-weekend runs. since the computational costs will only increase as the number of reference profiles in the database grows, the speed of connectivity mapping will therefore soon become a limiting factor to its wider application. on the other hand, the tasks involved in connectivity mapping are particularly amenable to parallel processing. this has the potential to lead to a significant reduction in processing times required, thereby not only expanding its capacity for wider and novel applications in cancer research, but also allowing a more accurate estimation of statistical significance when desirable. in recent years, graphics processing unit  computing has enabled significant advances in several bioinformatic research areas, eg, the mummergpu  <cit>  which allows increased processing speeds in sequence alignment, and cfmds  <cit> , a software platform for fast dimensionality reduction of genome-scale data. utilising nvidia’s parallel computing architecture cuda  we sought to advance the connectivity mapping capabilities by using multiprocessor technology to harness localised, low cost parallel computing.

implementation
we installed the cuda development toolkit on a selection of nvidia-enabled computers along with the original sscmap software. these machines had various operating systems and differing processing power coupled with varying cuda-enabled gpu cards. these cards have different numbers of available programmable cores, ranging from  <dig> to  <dig>  allowing different numbers of threads that may be run simultaneously . this allows us to demonstrate the speed and flexibility afforded by this parallel architecture.

three of the four machines had cuda capable devices and were tested with cudamap against the sscmap software that ran on the cpu of those machines.

design and algorithms
the key quantity in the connectivity mapping framework is the connection score defined between a query gene signature and a refset, i.e., a set of reference gene expression profiles. to evaluate the statistical significance of an observed connection score, a p-value is calculated by comparing the observed score against the distribution of a large number of random scores. these random scores are obtained by generating a large number of random gene signatures following the procedure described in  <cit> , and then calculating the connection score between the same refset and each of the random gene signatures. additional file  <dig> provides a more detailed description of the algorithm used in sscmap in the form of pseudocode. because the original sscmap handles all these tasks sequentially, the large number of random gene signatures needed for each p-value estimation lead to its long execution time. cudamap here tries to tackle this by parallelizing the process and distributing this heavy computational load across the multiple cores of the gpu device.

in the cudamap application,  <dig> reference profiles are stored in a ‘ref-files’ folder, where each file contains a drug-treated cell line with  <dig> genes and their associated signed ranks. query signature files, each containing a list of gene identifiers  and their corresponding flags to indicate up- or down-regulation, were placed in a ‘queries’ folder. in order to keep the memory footprint small cudamap processes queries sequentially, by reading them one at a time and running through the reference profiles to measure the scoring metrics for each reference against the query signature. the gpu device is used to generate random signatures of the same length as the original query signature .

firstly we can generate a random gene signature of length m using m random real numbers uniformly distributed between  <dig> and  <dig> as u[  <dig> ), and the algorithm to achieve this is shown on page  <dig> of the additional file  <dig>  to generate a large number, say nrdsigs= <dig>  of random gene signatures of length m, we would  need mnrdsigs random numbers with u[  <dig> ) distribution. memory space on the device for an array of mnrdsig real numbers is allocated before a call to the curand library to fill this array with random numbers. the calculation of nrdsigs random scores is carried out on the cuda device. the cuda kernel calls handle the vectorization on the device primarily by the function “__global__ void computerandomconnectionscores” to parallelize operations across an allowable number of threads, to remove the bottlenecks above. the key algorithms used in cudamap are described in additional file  <dig> 

upon execution of the software through the command terminal, users will be guided by selection choices in respect to the analysis they wish to perform. the flexibility in user ref-files selection choices has been maintained in the cudamap version in order to allow users to create metrics against individual drugs or distinct drug-cell-dose combinations. here, users will be prompted to enter their choice of reference-set characterisation, an expected number of false positives to tolerate, and the number of random signatures to generate for each p-value estimation. default parameters are set if the users wish to proceed without modification, as is the case in the original sscmap.

analysis
we tested the software using gene signatures of increasing size, ranging from a small random signature , to intermediate and larger signatures that have been used in describing sscmap previously, namely hdacs  and random <dig> . the latter two signatures are available in the original sscmap software and were used as benchmarks for performance and significant compound retrievals. we varied signature sizes in order to attain differences in processing speeds based on the signature and the random number generations required. we tested the program against three cuda-enabled machines with varying gpu capabilities, with one machine having two different gpu cards installed.

RESULTS
to test the scalability of cudamap, we ran it on several systems with different processor specifications, operating systems and gpus, comparing the results to that of running sscmap. figure  <dig> shows the outcome of running sscmap and cudamap on an opensuse  <dig>  linux machine with an intel i <dig> processor and 24gb of ram and two gpu cards . the gene signature used consisted of  <dig> gene identifiers. the number of random gene signatures to generate for each p-value estimation was varied to compare the performances with increasing computational load. figure  <dig> shows the processing times of running sscmap on the cpus of the four machines listed in table  <dig>  three gene signatures  were tested with the number of random gene signatures per p-value set at  <dig>  <dig>  figure  <dig> reports the processing times for the same set of tasks, but run with cudamap on the three machines with gpu cards. as can be seen from these figures, with the 10-gene signature and  <dig>  <dig> random signature generations per p-value estimation, the time taken to run sscmap on the intel core i <dig> processor was  <dig> minutes or  <dig> seconds . for cudamap, even the least powerful test system, a laptop equipped with a geforce 9200m gs gpu, was able to reduce the processing time of a similar task to  <dig> minutes or  <dig> seconds , demonstrating the effectiveness of parallelization. performance was greatly improved further by using faster gpus, such as the quadro fx  <dig> and tesla c <dig> cards tested, both of which reduced processing times to 30– <dig> seconds  for the same task. furthermore, this improvement was maintained when up to  <dig>  <dig>  <dig> random signatures were generated per p-value . results returned from cudamap for all signatures had exact agreements with the sscmap results in terms of their connection scores. in terms of their p-values, agreements were achieved with regard to calls on statistical significance in all cases, except a few borderlines around the threshold p-value. unlike the connection scores, exact agreement between p-values are not expected due to the way p-values were estimated, ie, by generation of random numbers.

the results here showed dramatic speedups in performance across all cuda capable devices.

the quickest time was just over  <dig> seconds to perform an analysis utilising the tesla c <dig> card, which represented a near 20x speed up over the sscmap software running on the cpu of the same computer. the comparison of the two gpu cards on the same machine also shows the scalability of gpu computing, and in contrast to the i <dig> processor, suggests that using cudamap to run a 10-gene signature with the standard  <dig>  <dig> random signature generations did not tax either card too severely . increasing beyond this point , we start to see the difference between the two gpu cards, although the performance remained acceptable in both cases. sscmap, which runs with the cpu, on the other hand, showed dramatic increases in processing time to the point where it would become unrealistic to run the analysis with a large number of random signatures to generate. in general, higher accuracy of p-value estimation is achieved when more randomizations are used, which is feasible when running cudamap but may not be with sscmap because of the computation time required.

CONCLUSIONS
the cudamap software is open source and free to use with parallel computation harnessing local gpus. it carries out gene expression connectivity mapping tasks in very fast turnaround times with the functionality of running multiple signatures. our tests demonstrated that cudamap even running on a laptop with a small compute capability  could outperform sscmap running on a high-spec desktop computer such as the linux machine with an i <dig> cpu. in most cases and for most signature sizes cudamap performs under the  <dig> second mark on this machine using its nvidia tesla card, a dramatic reduction in computing time compared to running sscmap on the same machine. with its capability of fast gene expression connectivity mapping for robust candidate therapeutics selection, cudamap can serve as a useful tool and resource in modern cancer research, where high throughput ‘omics’ technologies are playing indispensable roles. as the ‘omics’ datasets continue to grow in their sizes and information content, each of these datasets will, in turn, require more sophisticated analysis and demand more computing power. the development of cudamap represents an effort to meet the computational demands of a popular bioinformatic procedure in biomedical research, namely gene expression connectivity mapping to establish connections among genes, diseases and drugs. we believe this accelerated software will be a valuable tool and resource in many areas of biomedical research including drug discovery, drug re-positioning, and biological phenotypic targeting with small-molecule compounds.

availability and requirements
project name: cudamapproject home page:http://purl.oclc.org/net/cudamapoperating system: windows and linuxprogramming language: c/c++/cudaother requirements: cuda  <dig>  and above toolkitlicense: creative commons license by-nc  <dig> .any restrictions to use by non-academics: for commercial use, please contact the authors

competing interests
the authors declare that they have no competing interests.

authors’ contributions
dma, ph and sdz designed the study. dma and pb wrote the software and tested the implementation and pd interpreted and analysed the data. all authors contributed to writing the manuscript and technical input. all authors read and approved the final manuscript.

supplementary material
additional file 1
pseudocode for the key algorithms used in sscmap and cudamap.

click here for file

 acknowledgements
funding: this work was supported in part by the biotechnology and biological sciences research council grant bb/i009051/ <dig> and by the department for employment and learning through its “strengthening the all-island research base” initiative.
