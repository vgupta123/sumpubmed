BACKGROUND
the growing adoption of systems biology and high-throughput experimental techniques increasingly demonstrates the need for quantitative and dynamic measurements to better characterize the complexity of biological systems  <cit> . measurements from a single experimental snapshot in time  can often be misleading. for example, cell growth dynamics are influenced by cell density and nutrient availability, which are continually in flux. it is therefore better to use data across multiple time points when measuring cell phenotypes. on a broader scale, dynamical measurements can help to compare data across labs and identify protocol errors/discrepancies that may go unnoticed if data are only collected at a single time point.

with the increasing availability of high-throughput microscopy and high content screening , one can measure cell counts in many different environmental contexts with high precision over several time points  <cit> . these platforms can be used to link studies on molecular biology to observable, quantitative changes in cell behavior  <cit> . however, as these experimental platforms have advanced, they have allowed the generation of vast amounts of data which, in turn, require sophisticated bioinformatics tools for analysis  <cit> . in order to leverage these bioinformatics tools, a scientist needs to learn how to use complex computer programs  <cit>  or work in bioinformatics-oriented programming environments , often without the benefit of graphical interfaces to assist them  <cit> . the need for specialized knowledge is compounded when the user, for example, may want to test several mathematical models of cell population dynamics  and choose one among them. furthermore, the many ways in which a software package, the operating system in which it runs, and its required dependencies can be configured lead to challenges in data reproducibility . while built-in functions in popular spreadsheet software such as microsoft excel can perform basic analyses on small, simple datasets , the functions cannot easily be extended to fit more sophisticated mathematical models that are better suited to analyzing more complex datasets. furthermore, in the process of implementing more sophisticated mathematical models, a scientist can inadvertently introduce elusive bugs in their calculations  <cit> . therefore, tools which facilitate the replication and implementation of new analyses should be used in scientific computing.

to expedite the quantitative analysis of cellular phenotypes from experimental data while promoting data reproducibility, we introduce cellpd: a user-friendly cell line phenotype digitizer which obtains best-fit parameters and uncertainty estimates for cell birth, death, and population carrying capacity, based upon well-established “canonical” mathematical forms . cellpd has been designed to comply with the multicellds data standard  <cit> , therefore it can be expanded to record additional phenotype parameters, such as pharmacodynamics and cell motility. cellpd uses microsoft excel-compatible spreadsheets containing cell counts and experimental metadata as its sole input. the spreadsheets are also compatible with open source office suites such as libreoffice. it is packaged as both a python script  and standalone executables for windows and osx, eliminating the need for installing and learning any additional software. finally, cellpd generates locally-stored webpage outputs to clearly and intuitively present parameter estimation results with publication-quality tables and graphics as well as machine-readable xml outputs. these webpage reports also rank the quality of each fitted model to help the user choose the appropriate results without specialized mathematical knowledge.  cellpd is a beneficial tool for experimentalists, especially for those without a computational background or an existing partnership with a trained biostatistician or mathematician, as it provides a uniform and precise method for analyzing cellular dynamics data. furthermore, cellpd not only computes growth rates from time series data, but also fits mathematical models in order to gain further insights from time series data, such as discerning between cytostatic and cytotoxic drug effects . while all the tasks that cellpd performs  are in principle possible today with significant custom scripts , no tools available today have already been tailored to these tasks and shared with the scientific community in a user-friendly format. in this article we describe some applications of cellpd and link to its source code  so the scientific community can use it and build upon it.

implementation
cellpd was designed with the following goals in mind:utility for experimental biologists: the main goal of cellpd is to facilitate a quantitative description and analysis of cell population dynamics, using mathematical models that are powerful enough to make full use of increasingly detailed datasets.

ease of learning and ease of use: a scientist with no training in mathematical/computational modeling can learn how to use cellpd in an hour or less.

robustness to sparsity in data: cellpd can fit mathematical models to irregularly and sparsely sampled data requiring a minimum of two data points to fit the most basic mathematical model.

accessibility and shareability: cellpd is open source and free to use with an unrestrictive license.

extensibility: we have planned extensions to cellpd’s capabilities. in addition, its source code may be modified by any member of the scientific community, provided they follow the guidelines of the  mit license.

portability: cellpd’s python code is packaged with a python interpreter and all the required libraries; therefore, a computer running windows, osx, or linux can run it without installing any software.



previous work
there have been numerous efforts to compare and standardize cell line data across labs to ensure reproducibility and accuracy . for example, an early effort by osborne et al. characterized mcf <dig> breast cancer cells grown in four different laboratories  <cit> . their investigation exposed substantial differences in the four labs’ cell population doubling times. however, it can be difficult to discern any irregularities between cell cultures from different labs using doubling times for comparison, especially if those doubling times have not been computed to account for confluency effects.

many tools have been developed specifically to estimate cell line growth parameters. several were written in r such as cellgrowth  <cit> , grofit  <cit> , and minpack.lm  <cit> ; matlab packages include phantast  <cit>  and sbaddon  <cit> ; ruby packages include bgfit  <cit> ; and python packages include abc-sysbio  <cit>  and gathode  <cit> . although these packages are very useful, they are difficult to use for those without formal programming or bioinformatics expertise; moreover, the matlab-based packages require additional, costly software licenses. some of these packages require data to be formatted in an inflexible format, for example requiring the data to be the output of a specific high content screening microscope. none of these tools and software packages are designed for regular use by scientists without extensive training with computational tools . they are also primarily designed for single-lab use. for example, they create outputs with lab-specific formats, rather than a standardized, well-annotated format suitable for curation and meta-analysis. these output formats make it challenging to compare different datasets from multiple laboratories. thus, they do not answer the call for  data sharing  <cit> . while spreadsheet software such as microsoft excel can be used for some basic calculations , fitting more sophisticated models is much more difficult and potentially error-prone. hand-coded spreadsheet formulas and macros can hide subtle but critical errors , sometimes invalidating results or requiring paper retractions  <cit> .

cellpd aims to fill these workflow gaps by providing a user-friendly tool to estimate some key cell phenotype parameters from data acquired using common experimental platforms. in this paper, we lay the groundwork for a suite of tools that can be shared among different labs, that will help to facilitate data sharing and cross-lab meta-analyses. while the first release of cellpd is focused on quantifying cell cycle and death parameters, it has been built from the ground up to allow future extensions to quantify other phenotypic parameters, such as motility and pharmacodynamics, and to leverage anticipated advances in single-cell tracking to test hypotheses-driven phenotype parameters . some early applications of cellpd may include quantification of drug effects on cancer cells , functional analysis of gene and other knockout experiments , quantifying the effect of the microenvironment on cell phenotype , cell culture quality control , data mining  and generation of minable big data , and integration of biological data into computational models .

in order to simplify the user interface, the primary input for cellpd is a microsoft excel spreadsheet that contains the experimental data , metadata related to the experimental setup , and the user information . every cellpd download includes template spreadsheets to guide users through the spreadsheet layout and data formatting. in order to bring mathematical modelling expertise to biologists, the user-supplied data are then parsed and used to calibrate several mathematical models ; the models were designed for extracting biologically-meaningful cell parameters from typical experimental data, such as the cell population growth rate and cell cycle information  with adjustment for confluence effects. see the methods section for details on the mathematical models, their underlying assumptions, and a layperson's description of the mathematical models.

cellpd automatically selects one or more mathematical models for fitting based upon the type and quantity of data supplied by the user. for example, if the user provides cell counts at different time points but no cell viability, then cellpd  will calibrate models which describe cell counts but will omit models which describe cell death. finally, a series of locally-stored webpage outputs are created to report and rank the fitted models  and their parameters. each fitted model includes a layperson’s description of the underlying model assumptions and the biological meaning of each parameter. the results are reported in publication-quality figure  and table formats . for a list of all the outputs, see the additional file  <dig> 

cellpd has been designed to run on both finely-sampled data  and more sparsely . we intend cellpd to be used in a wide range of applications so it is robust to sparse data, but its accuracy improves when given more data points . for a model with n parameters, cellpd requires at least n data points to estimate those parameters and at least n +  <dig> data points to estimate standard error of the mean for each parameter. the simplest model that cellpd can fit is the exponential model ; cellpd can analyze data so as long as there are at least  <dig> data points, in which case cellpd will assume exponential growth in between those two points.fig.  <dig> cross-validation of growth rates. growth rates ± standard error of the mean  of yeast strain seg_07a grown in ypd media computed by cellgrowth , excel  and cellpd  using different number of sampling time points . all three tools correctly estimated the maximum growth rate for high sampling rates. for low sampling numbers , the three tools become less accurate; cellgrowth lacks the necessary number of data points to perform data smoothing, excel becomes inaccurate, but cellpd continues to estimate reasonable growth rates. even at the limit case of only  <dig> sampled data points, cellpd provides a reasonable estimate 



downloading cellpd
cellpd is hosted at sourceforge.net. its source code, windows and osx executables can be downloaded at http://cellpd.sf.net  <cit> . alternatively, tutorials and the most recent version of cellpd can also be downloaded at http://multicellds.org/cellpd/  <cit> .

RESULTS
we first validate cellpd’s parameter estimates by comparing its results against another previously published cell growth parameter estimator, cellgrowth, and excel 2016’s built in functions . after validating the code, we demonstrate some key applications of cellpd by  evaluating its use in cell culture quality control by comparing two cultures of the same cell line  grown in two different media,  demonstrating its utility in hcs experiments by calculating dose-dependent cell birth and death parameters in a simulated drug screening experiment, and  using cellpd to determine whether these drugs are cytostatic or cytotoxic.

to test and quantify user-friendliness, we subjected cellpd, cellgrowth, and excel to a series of timed use cases: installing all necessary software , formatting data  running the software, and analyzing output. the lead author performed this test and recorded them , and a group of  <dig> biologists volunteered to perform this test using cellpd either as individual testers  or in either pairs or groups of three. we also tested robustness by repeating the use cases for sparser data samples.table  <dig> comparison between cellpd, cellgrowth, and excel

 <dig>  h sampling rate  max_growth_rate  h-1
 <dig> h sampling rate  max_growth_rate  h-1
 <dig> h sampling rate  max_growth_rate  h-1
usability benchmark: tt
https://youtu.be/3xr9x_2pbks
https://youtu.be/do-lkvvglig
https://youtu.be/ycycfzl7yfy
https://youtu.be/3xr9x_2pbks?t=276
https://youtu.be/do-lkvvglig?t=272
https://youtu.be/ycycfzl7yfy?t=12
https://youtu.be/3xr9x_2pbks?t=406
https://youtu.be/do-lkvvglig?t=391
https://youtu.be/ycycfzl7yfy?t=158
all three tools correctly estimate the growth rate when provided with a large number of samples. cellgrowth is more precise than cellpd for higher number of samples . however, even with fewer samples , cellpd correctly estimates the growth rate . for fewer samples , both cellgrowth and excel become unreliable. cellpd is slower than cellgrowth or excel for an experienced user, but cellpd does not require prior programming knowledge  and it also creates multiple useful outputs . cellpd is quicker to set up than cellgrowth, but it takes longer to run in order to create the multiple outputs. excel usually requires no set up , and it is often already installed in a research computer. the lead author computed the usability benchmark running a fixed, “clean” windows  <dig> configuration on a virtual machine . this vm included an installation of libreoffice  <dig> . <dig> and was run in a lenovo thinkpad yoga with an intel core i7-4600u cpu with 8gb of ram running windows  <dig> 



cellpd comparison and cross-validation
advantages of cellpd over excel’s built-in fitting functions
some of the computations that cellpd performs automatically can be replicated, albeit not automatically, using a spreadsheet. spreadsheet software can use built-in regression functions to fit an exponential curve to experimental data. while other, more complex, dynamics can be modeled using a spreadsheet , these approaches push the limits of spreadsheet software by requiring hand-coded formulas, macros, or visualbasic coding. such calculations tend to be less reusable and more error prone, occasionally invalidating study results or even contributing to retractions  <cit> . hence, spreadsheets should only be used for minor calculations; more complex applications are best left to well-designed, purpose-built open source scientific software. cellpd is designed to estimate parameters accounting for expected behavior in cell population growth . additionally, cellpd is modular and extensible, thus allowing the user to fit multiple mathematical models at once, modify its current models, or even code new custom models. cellpd also creates high resolution figures which can be used in scientific publications, as well as minable xml reports and intuitive webpage reports.

cross-validating cellpd
in order to cross-validate cellpd’s parameter estimates, we utilized a publicly-available dataset from  <cit> . from this dataset, we selected the strain seg_07a grown in “ypd” medium  and computed the population growth rates using cellpd, excel’s linear regression function , and cellgrowth. not all of the replicates from that dataset have the same number of measurements, so we truncated the longer-time replicates so that they all have the same number of time points. we first computed the maximum growth rate of the data using all three tools, and defined cellgrowth’s estimate  as the ground truth . we then used the three tools to estimate the growth rate using only a subset of the data . we first fitted to the original data, which corresponds to  <dig> samples , then we reduced the number of samples roughly by half , then we used roughly 1/3rd of the number of samples , and so on, until we fitted to only  <dig> data points . figure  <dig> shows the estimated growth rates as the number of samples is varied  using the three tools . cellpd, excel, and cellgrowth correctly estimate the maximum growth rate for largest number of samples. cellpd generates reasonable growth parameter estimates over a broad range of data sampling rates, while both excel and cellgrowth rapidly lose accuracy as the number of samples decreases. in particular, cellgrowth fails altogether when there are fewer than  <dig> samples. cellgrowth relies on smoothing methods arising from signal processing methods in order to provide accurate growth rates. thus, it requires a substantial number of data samples. neither cellpd nor excel perform data smoothing, so they can estimate parameters with fewer data samples. while excel can still compute the net growth rate with very few sampling points, its approach is prone to user bias  and replication errors due to the manual nature of this computation. hence there is a need for tools like cellpd which perform these analyses systematically and automatically. however, even tools which do not perform data smoothing are susceptible to problems caused by low number of data samples. figure  <dig> shows that the uncertainty of the parameter estimates reduced for all three tools as the number of samples is increased, as described in harris et al.  <cit> , two data points are not enough to accurately model the dynamics of cell population growth.

usability comparison testing
in order to quantitatively assess the usability of software package we used the following usability benchmark:

usability benchmark
measures how easily a new user can set up the package, starting from a “clean slate” using data formatted as outputted by a generic high content screening microscope .

use case:step 1: install and setup software 

step 2: reformat data for the software

step 3: run software

step 4: compute means and standard deviations of maximum growth rate



total time  = step  <dig> to step  <dig> 

tanalysis = step  <dig> and step  <dig> 

we recorded times measured by the usability benchmark as rows of a feature comparison matrix described in table  <dig>  we also recorded videos while the lead author performed the usability benchmark. links to the videos are also listed in table  <dig>  to minimize user experience differences between the methods, the lead author spent time learning r and cellgrowth before performing the benchmark tests. thus, the times reported are the minimum times to perform an analysis. for a novice user with no computational expertise, the differences would be larger. in particular, such users would require at least 1– <dig> days to learn introductory r before completing the benchmark use case, whereas users can complete the benchmark use case with cellpd without any additional training. the usability benchmark was repeated for cellpd by multiple volunteers with a wide range of computational experience, these times are also recorded in table  <dig>  the volunteers did not repeat the benchmarks on cellgrowth because using it requires familiarity with r.

using cellpd to compare two cultures of the same cell line
a significant issue in biological experimentation is inter- and intra-laboratory variability . for example, cells are typically grown in various media irrespective of the initial culturing methods. moreover, even when culturing conditions are standardized, the use of biological reagents that are inherently variable in composition ) can dramatically impact cell growth  <cit> . as result, it is important to devise tools such as cellpd to assess cell growth and perform quantitative quality control. we used cellpd and excel  to compute the growth rate of two hct <dig> cultures grown in two different media. in this paper, cells grown in mccoy’s media are labeled “usc” and those grown in dmem are labeled “wfu”. figure  <dig> shows the growth rates and the 95 % confidence interval  as computed by cellpd and excel. with either tool, the 95 % ci of the same hct <dig> cells grown using these two different media do not overlap. this experiment was designed to observe different growth dynamics when culturing the same cell line  in two different media due to differences in glucose concentrations  and other nutrients and growth factors  <cit> . cellpd allows for detection and quantification of such differences. these quantifications can be used to identify potential deviations from the protocol, such as in this case . this result highlights the importance of standardizing experimental conditions within and across laboratories. such a large discrepancy in growth rates as a result of culture media could significantly alter the interpretation of standard tumor cell growth and their response to stimuli or inhibitors, such as chemotherapies.fig.  <dig> using cellpd and excel to identify difference in “single clone cell lines” grown under the same microenvironmental conditions. growth rates of hct <dig> cell cultures grown in two different media . usc cells grow at a rate of  <dig>  ±  <dig>  h− <dig>  95 % ci h− <dig> as estimaded by cellpd. wfu cells grow at a rate of  <dig>  ±  <dig>  h− <dig>  95 % ci h− <dig> as measured for cellpd. the 95 % cis do no overlap , showing that the cell cultures grow at different rates. for the complete cellpd outputs see additional file 1




using cellpd to analyze  high-content drug screening data
cellpd can be used to quantitate cell phenotype under multiple drug conditions using data generated in high content screening platforms. to demonstrate this feature, we first generated a synthetic drug screening dataset typical of high-content screening platforms and tested cellpd against these synthetic data. specifically, we generated synthetic live and dead cell counts for two drugs at  <dig> doses, with  <dig> biological replicates for each experimental condition . each simulated experimental measurement included normally-distributed noise to approximate both instrument and biological variability. see additional files  <dig> and  <dig> for full details on the synthetic dataset, generating code, and the synthetic data themselves. cellpd was able to quantitate the net birth rate for each experimental condition, along with uncertainty estimates, and plot the responses. see fig. 3a. note that these analyses would be difficult to automate with cellgrowth, and would require substantial manual effort when using excel.fig.  <dig> using cellpd to analyze high-content drug screening  data. cellpd’s quantification of a synthetic cell line’s response to two different drugs. the net growth rates a show different responses to each drug. cellpd automatically decouples the birth rate b and death rate c which elucidates the drugs’ mechanisms of action. drug a reduces the birth rate while keeping the death rate relatively constant, drug b mainly increases the death rate



we note that because we used a synthetic dataset with known “true” values, we can assess cellpd’s accuracy and to test its robustness to measurement noise. we found that even with 10 % noise, cellpd was able to recover the correct parameter values for both simulated drugs at all doses, with a mean error of  <dig>  % for the birth rate,  <dig>  % for the death rate, and  <dig>  % for the net growth rate. see additional files  <dig> and  <dig> for more details.

using cellpd to differentiate between cytotoxic and cytostatic drug effects
continuing with the prior analysis, we used cellpd to separately quantitate the cell birth and death rate parameters for each experimental condition. see fig. 3b-c. this additional analysis correctly reproduced the known birth and death rate parameters. moreover, cellpd found that drug a was primarily cytostatic  and drug b was cytotoxic . because cellgrowth and excel only fit the total population curve , they cannot easily repeat this analysis nor help distinguish between cytostatic and cytotoxic drug effects here. in fact, by only examining the dose-dependent net birth rate, it can be  inferred that drug a is cytotoxic because increasing the dose of drug a rapidly decreases its net birth rate to negative values, whereas drug b has a very shallow dose-net birth rate curve, which could be  interpreted as arresting cell birth to maintain a zero or small net birth rate. here, a more detailed analysis  was necessary to discern that counter to intuition from the net birth rate graphs, drug a is cytostatic, and drug b is cytotoxic. more sophisticated mathematical analyses—made possible by the broader class of models encoded in cellpd with straightforward usability—are necessary to discern the mechanism of action of each simulated drug compound.

limitations
cellpd can currently only estimate parameters for predefined models ; it does not currently support user-defined mathematical models except by directly modifying the source code. cellpd can directly analyze a dataset in which multiple environmental conditions are changing, e.g. if a dataset includes experiments where both the oxygenation and the media are changed independently. however, this functionality is under development. currently publication-quality plots can only be generated for a single environmental condition with multiple values . when more than one environmental condition is changing at the same time, cellpd will perform the quantitative analysis and it will create plots, but those plots may not be as intuitive to read as the rest of the output files that cellpd generates. cellpd is designed to analyze population-level phenotypic data and is currently not equipped to provide single-cell dynamic information, although this is a feature that could be added in the future.

future versions of cellpd
cellpd is open source: anyone may modify the code under the terms of the mit license . we plan to update cellpd and release future versions which will include:implement other common mathematical models of cell growth .

implement additional cell cycle models  suitable to flow cytometry data.

automatically handle multiple-condition datasets for a single experimental factor . this function is in active development and testing. a beta version is now included with the main code of cellpd, with a fully-supported version anticipated soon.

automatically handle multiple-condition datasets for multiple experimental factors .

implement pharmacodynamics  models.

interactive web version.

interface with orcid’s api  <cit>  to pull in user details automatically.

black-box optimization, allowing the user to define a custom mathematical model and estimate its parameters.

alternative minimization techniques such as cross-validation, bootstrap, genetic algorithms, and different heuristics for global optimization.



CONCLUSIONS
cellpd is a useful tool for biologists to analyze, quantify, and share phenotypic data. it can be used for data quality control and to identify unexpected changes in cell population dynamics. it can help automate analysis of high-content screening data, while distinguishing between cytostatic and cytotoxic drug effects. in all of its analyses, it makes use of biological and technical replicates to help assess uncertainty. cellpd facilitates integration of experimental data into computational models, rapidly quantifying critical phenotypic characteristics such as a cell line’s net birth rate and producing consistent publication quality data.

