BACKGROUND
protein-protein interaction  networks carry vital information on the molecular functions and biological processes of cells. analysis of ppi networks associated with specific disease systems including cancer helps us to better understand the complex biology of diseases. ppi networks are dynamically modulated in a tissue-specific microenvironment; hence, a set of similarly expressed genes from two types of cancer tumors may exhibit different ppi patterns. a lot of gene expression data has been accumulated on cancer-specific tumors warranting the need for developing effective algorithms to translate the differentially expressed gene lists into functionally coherent modules that are common to all cancers or shared in a given subset of cancers. to achieve this, genes are mapped to corresponding proteins and known ppis are represented as a network graph for further analysis. using graph theory-based algorithms, pairs of networks can be compared to identify common, distinct or frequent sub-networks. these sub-networks containing a set of proteins  with a distinct set of connections  can represent a functional unit in a pathway or in a biological process. similarly, frequent sub-networks  may represent recurring functional units within a network or among multiple networks. in this study, we focus on developing a graph-based algorithm to identify common and frequent network motifs from ppi networks of nine different cancers.

graphs have been widely used to model a variety of data types such as ppi networks  <cit> , biological pathways  <cit>  and molecular structure of chemical compounds  <cit> . graph comparison has a wide range of applications in biological data analysis. for example, by aligning biological pathways represented by graphs, evolutionarily conserved patterns are identified  <cit> . similarly, by measuring the discrepancies between ppi networks of healthy and sickened individuals, interactions that are involved in disease outbreak and progression are determined  <cit> .

existing methods for graph comparison can be categorized into the following three major types: distance-based, alignment-based and kernel-based methods. in a distance-based method, similarity of graphs is measured based on the graphs' common structures  <cit> . the larger a maximum common subgraph  is, the more similar are the two graphs; and thus the smaller the mcs distance between the graphs is. the mcs distance between the graphs is defined to be 1-|vmcs|/{|v1|, |v2|} where |v| is the number of nodes in graph g =   <cit> . the mcs distance method only considers the maximum common subgraph when comparing graph similarity. it will only identify graphs that globally resemble each other and ignore graphs that share many similar but disconnected subgraphs. another distance-based method  <cit>  measures the similarity of graphs based on their edit distance. with substitutions, deletions and insertions for both nodes and edges, any graph can be transformed into another graph by iteratively applying these operations. intuitively the more operations needed, the more dissimilar the two graphs are. with a cost function associated with each operation, the graph edit distance is defined to be the minimum total cost to transform one graph to the other. however, similar to the mcs method, the edit distance methods also measure only the global similarity of the graphs.

the alignment-based methods utilize the idea of graph alignment that is conceptually similar to sequence alignment. in sequence alignment, different scores or penalties are assigned for matches, mismatches and gaps, and the alignment algorithm looks for the best way to arrange the sequences so that the overall alignment score is maximized. in graph alignment, the similarities of graphs are determined by the conservation of interactions, which is measured through the edges and similarity of nodes  <cit> . depending on the requirement, the node-based or edge-based weights are used in calculating the alignment score  <cit> . graph alignment algorithms such as pathblast  <cit>  use the dynamic programming approach to find optimum solutions. graph alignment algorithms can detect global or local similarity depending on the scoring function used by the algorithm. however these algorithms either end up with exponential running time or turn to heuristic methods for solutions when dealing with graphs that contain cycles.

the third approach, using kernel-based methods measures graph similarities through kernel functions. existing graph kernels can be viewed as a special case of r-convolution kernels proposed by haussler  <cit> . the basic idea of a graph kernel is to decompose a graph into smaller substructures, and build the kernel based on similarities between the decomposed substructures. the natural and most general r-convolution on graphs would decompose graphs to all of their subgraphs and compare each pair of the subgraphs. however, it is proven in that computing all-subgraph kernel is as hard as deciding subgraph isomorphism which is np-hard  <cit> . alternative graph kernels include product graph kernel, marginalized kernel, subtree-pattern kernel, and so on. these kernels differ in the way they decompose graphs to substructures and the similarity measure they use to compare the substructures. similar to distance-based methods, kernel methods can only be used to measure global similarity of graphs. there is no information about which subgraphs contribute to the similarities.

one of the most important tasks in the analysis of ppi networks is to predict functional modules that represent either stable protein complexes or groups of transiently interacting proteins that together can accomplish a biological function. these functional modules can be mapped to specific subgraphs in ppi networks. below, we discuss three methods that have been used to extract substructures from graphs:  frequent subgraph identification,  graph segmentation and  core-based clustering. apriori-based approach and pattern growth approach are the two major types of algorithms for identifying frequent subgraphs. the discovery of frequent subgraphs usually consists of two steps that include candidate generation and frequency counting. apriori-based algorithms such as fsg  <cit>  generate candidates of larger size by joining two smaller subgraphs. in order for two frequent k-subgraphs to be eligible for joining, they must contain the same -subgraph. this introduces a lot of overhead, as there are multiple ways to join two subgraphs of size k. the frequency verification step involves subgraph isomorphism test and therefore is not feasible for large graphs. on the other hand, the pattern growth approach  <cit>  extends patterns from a single pattern directly, instead of joining two smaller subgraphs. pattern growth approach needs to deal with the redundancy problem: the same -subgraph can be generated from extending many different k-subgraphs. both apriori-based approach and pattern growth approach are restricted by the graph size due to the subgraph isomorphism problem. heuristic methods such as subdue  <cit>  look for incomplete result set. subdue is an approximate algorithm and finds patterns that can best compress the original graph by substituting those patterns with a single vertex. minimum description length  is used to evaluate how efficient the graph can be compressed.

graph segmentation method extracts substructures by partitioning graphs into disjoint dense subgraphs. k-means clustering  <cit>  aims to partition graphs to clusters that minimize the within-cluster sum of squares. min-cut  <cit>  and a more recent spectral clustering algorithm  <cit>  consider not only the within-cluster density but also inter-cluster distance. king et al.  <cit>  used a cost-based local search algorithm to find highly interconnected subsets of nodes.

in contrast to the graph segmentation method, where the central nodes of the subgraphs are usually randomly chosen, in core-based clustering the central nodes are selected before clustering is performed  <cit> . the central nodes are also referred to as seeds or core of substructures. mcode method  <cit>  selects the central nodes based on the highest k-core of the nodes neighborhood. a k-core is a graph of minimal degree k. all nodes are weighted based on their local network density using the highest k-core of the nodes neighborhood. spici method proposed by jiang and singh  <cit>  chose the nodes that have highest weighted degree as core nodes. after selecting the central nodes, clusters are expanded to maximize the local density of the substructures. the expansion stops when local density stops increasing or when all nodes are exhausted.

due to the np-hardness of many graph problems, most of the previous methods offer approximate solutions to measure graph similarity. in this paper we present a method that produces the exact solutions in graph comparison and pattern identification. our algorithm works in a bottom up fashion. it starts from one-node subgraph, and proceeds to one-edge and multiple-edge subgraph. at each loop the search space is reduced by eliminating parts of networks that are not eligible for next round of comparison. even though the run-time increases exponentially as the size of subgraph increases, in our case the size of the search space, as the base of the exponential, reduces quickly. therefore we can obtain the complete result in a reasonable amount of time. as we look for common substructures across the networks, we also perform graph isomorphism test. graph isomorphism problem is known to be in np; however, it's unknown to be in p or np-complete if p â‰  np. in our specific context of network comparison, we solve this in polynomial time with our pattern-labeling algorithm.

we applied our algorithm on nine cancer associated ppi networks to identify common and frequent patterns in these networks. we collected differentially expressed genes from microarray studies of various solid tumor tissues derived from the oncomine database  <cit> . using the algorithm we identified common frequent subgraphs of up to  <dig> edges in these networks. these subgraphs may correspond to functional modules that play common roles in cancer diseases as they occur multiple times in all the nine cancer networks.

RESULTS
cancer protein interaction networks
our ppi networks are constructed from a comprehensive, non-redundant dataset of experimentally-derived ppis  <cit>  that are collected from five major databases including intact  <cit> , mint  <cit> , hprd  <cit> , dip  <cit>  and bind  <cit> . our goal is to mine for cancer-associated subgraphs from the global interaction networks; however, ppi data that are specific to a cancer tumor do not exist in the public domain. hence, we used all the available ppi datasets for humans from five major databases as the basis for our studies. in our final human ppi network, there are  <dig>  unique proteins representing  <dig>  unique interactions. note that this unique set of proteins exhibit some level of redundancy because splice variants with minimal sequence differences are included as unique proteins due to the fact that ppis are isoform-specific.

we collected differentially expressed genes  between tumor and normal samples from microarray studies of nine different solid-tumor cancer types using the oncomine database  <cit> . oncomine is a cancer microarray database that provides access to degs on most major types of cancer. for each cancer, deg lists are available from multiple experiments, where the q-values  for a gene vary from experiment to experiment. hence, we choose only degs whose average q-values are equal to or smaller than  <dig> . the gene lists are then mapped to protein lists using our in-house mapping tools. the number of proteins is roughly  <dig> times the number of genes due to the multiple mappings between genes and proteins. these proteins are further mapped to the proteins in the human ppi network to create nine cancer-specific ppi networks. table  <dig> summarizes the number of genes and proteins and the corresponding network size associated with each cancer type.

similar to many ppi networks, cancer ppi networks also exhibit power-law degree distributions . such a distribution indicates that most proteins in the network have only a few interactions, while a small number of proteins acting as hubs participate in a large number of interactions. this makes cancer ppi networks resistant to random failure but vulnerable to targeted attacks to the hub nodes. figure  <dig> depicts the degree distribution  of the nine cancer ppi networks we studied. all of the charts exhibit a linear relationship on a log-log scale, which is the signature of power-law distribution.

network analysis
the reason we are interested in frequent patterns is that the presence of these subgraphs in ppi networks constitute an analogy to motifs in multiple sequence alignment. these frequent subgraphs represent conserved functional modules that play significant roles in the disease systems we study. first we look for frequent subgraphs within a network because of the possibility of finding more than one identical subgraph from nodes that belong to the same cluster . then we perform comparative analysis across multiple networks to measure the commonality across networks. these subgraphs must be connected components, which is a prerequisite for forming protein complexes or pathways. our method of frequent pattern extraction involves the following three key steps: identification of node similarity, graph isomorphism test and discovery of frequent patterns.

identification of node similarity
each node in a ppi network represents a unique protein. nodes are considered similar if the proteins they represent have similar functions. we use the sequence alignment algorithm blastclust  <cit>  to cluster protein sequences into mutually exclusive groups. proteins present in the same cluster are deemed functionally similar to each other and they will be assigned the same cluster id. blastclust is a single-linkage clustering algorithm to cluster sequences hierarchically. it begins with pair-wise alignment and places a sequence in a cluster if it matches at least one of the sequences already in the cluster. blastclust uses the blastp algorithm to compute the pair-wise matches. we used stringent criteria of 90% sequence identity over 95% of the length of each sequence and divided  <dig>  proteins to  <dig>  clusters. the cluster id will be tagged to each node in the network and will be used in pattern labeling process as described in the following section.

graph isomorphism test
the basic idea in canonical graph labeling  <cit>  is to represent relational graph data using a sequence of symbols that can uniquely identify the graph. kuramochi et al.  <cit>  proposed to use concatenation of upper triangle of adjacency matrix as canonical label of graphs. for graphs with no edge weights, an adjacency matrix is a binary matrix. every row and column corresponds to a node in the graph. the value at m is  <dig> if there is an edge between node i and node j and  <dig> otherwise. for undirected graphs, the adjacency matrix is symmetric on its main diagonal. therefore we can use upper right triangle of the adjacency matrix to fully represent a graph. the ordering of rows and columns will determine the content of adjacency matrix. we order the rows and columns using protein ids the nodes are labeled with. the adjacency matrix generated in such way unambiguously represents a given graph. to create the canonical label of the graph, we first concatenate the protein ids sorted in order. then we concatenate the upper triangle of the adjacency matrix.

pagerank algorithm  <cit>  is used by google internet search engine to measure relative importance of web pages. the algorithm calculates a numeric value for each node to indicate its ranking in the overall network. based on the ranking information, google can determine which web pages are more important or more relevant and tune their search results accordingly. a similar idea can be applied to compute structural equivalence. in pagerank, all graph nodes are considered of the same type. so the ranking information solely reflects the positions of nodes in the graph. in our case, we want to first differentiate graph nodes based on their cluster id; then differentiate the nodes based on their equivalence class . to achieve this purpose, we assign weights to nodes based on their cluster id. we associate a unique integer value with each cluster. the same integer value will be assigned to all nodes in the cluster as the weight of the node. the magnitude of the weight is not an indication of the functional importance of the cluster. it is solely used to differentiate the clusters.

in figure 3a, all nodes from cluster a are assigned weight 1; all nodes from cluster b are assigned weight  <dig>  etc. in a weighted graph, nodes at either end of an edge are not equal because they may be assigned different weights. therefore we replace undirected edges with two edges going to opposite directions. then we compute the adjacency matrix, denoted as w for the weighted graph.

 wi,j=weightÂ ofÂ nodeÂ i,ifÂ nodeÂ jÂ connectedÂ toÂ nodeÂ i <dig> ifÂ not 

from adjacency matrix, we can compute hyperlink matrix, denoted as h.

 hi,j=wâˆ‘i=1kw,kisÂ numberÂ ofÂ nodesÂ inÂ graph 

the hyperlink matrix generated from the above example is

 w=0011100111220022200233330â‡’h=001/51/51/6001/51/51/62/72/7001/32/72/7001/33/73/73/53/ <dig> 

hyperlink matrix is a stochastic matrix. every column of h sums to  <dig>  the entry h indicates the probability of moving from node j to node i. it can also be understood as the ratio of contribution node j makes to node i among all nodes j connected to. let v be the vector storing relative importance of nodes. v denotes the relative importance of node i. a node's relative importance is determined by the contribution all other nodes have made to it. so we need to solve the equation hv = v. this is actually to find the eigen vector corresponding to eigenvalue  <dig> of matrix h. eigenvalue computation can be performed in polynomial time.

it shows that a <dig> and a <dig> are of the same relative importance. they will be included in the same equivalence class. b <dig> and b <dig> will also be included in the same equivalence class. then we sort nodes based on cluster id at first level and equivalence class at second level. in matrix m when we shuffle nodes in the same equivalence class, the matrix content will not be changed; the canonical label remains the same. therefore permutations are not needed to generate a unique pattern label.

in figure 3b, node a <dig>  a <dig> and a <dig> are from the same cluster. but a <dig> falls into a different equivalence class from a <dig> and a <dig> because their relative importance values  are different. when we sort the nodes, the relative positions between equivalence classes are fixed. the order is based on the relative importance value. the relative position within equivalence classes can be changed without impacting the content of matrix.

using the algorithm described above we can generate pattern labels for graphs. generally it takes o time to compute eigenvalue decomposition. constructing adjacency matrix and hyperlink matrix each takes o time. sorting of nodes takes o time. thus the algorithm to compute pattern labels runs in polynomial time.

discovery of frequent patterns
finding frequent subgraphs is an np-hard problem. when the size of the subgraph is a variant, finding frequent subgraphs takes exponential run-time. therefore, to solve frequent subgraphs problem we need to effectively reduce the search space as subgraph size increases. to accomplish this, we take the bottom up approach to find small subgraphs first and proceed to larger subgraphs. we start with frequent subgraphs of  <dig> node. we look for clusters with size no less than the given threshold in each network. this can be done through a simple counting of nodes within each cluster in each network. among the selected clusters, we look for those present in all networks. nodes belonging to these clusters are kept; the rest are removed from the networks. edges incident to removed nodes are also removed from the networks. on the remaining part of the networks we will discover patterns of next size level.

frequency downward closure is an important property that most of the frequent-subgraph-finding algorithms are based on. it is essential for the computational tractability of most frequent subgraph discovery algorithms  <cit> . frequency downward closure property states that the frequency of subgraphs decreases monotonically as a function of its size. our algorithm also looks for non-overlapping subgraphs when counting the subgraph frequency. counting edge-disjoint embeddings of subgraph patterns can be transformed to maximum independent set  problem. pattern labels are formulated using the canonical labeling algorithm described in the previous section. frequencies of patterns are first computed by counting the occurrence of pattern labels. then mis algorithm will be used to further filter overlapping patterns. finally, we check if the selected patterns exist in all the nine cancer networks. unqualified subgraphs will be removed from the networks. qualified patterns will be kept for next round of pattern finding. using these procedural steps iteratively, we have identified a number of frequent and common subgraphs at each edge-level covering from 2- <dig> edge subgraphs . a complete list of the patterns at each edge-group can be accessed from the additional files  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig> 

each of the patterns listed in figure  <dig> shows the same topology but corresponds to multiple subgraphs, where the subgraphs can vary with one another by having different nodes from the same cluster at equivalent positions. this is illustrated in figure  <dig>  generated in cytoscape  <cit> , for a 4-edge pattern involving myc as the central node with the alpha and beta tubulins and their homologs varying in the same position. similarly, the 10-edge pattern corresponds to  <dig> distinct subgraphs in bladder cancer. note that all the common patterns exist in all the nine cancer networks, but the number of subgraphs in each pattern varies among them due to the cancer tissue-specific expression of the equivalent genes that belong to the same cluster. patterns of smaller sizes exhibit more variations because more subgraphs are available.

performance validation
we compared our method with fsg, which is a frequent subgraph-mining algorithm  <cit> , on analyzing the  <dig> cancer ppi networks. given a set of network transactions, fsg looks for subgraph patterns that exist in at least Ïƒ percent of the networks, where Ïƒ is the support threshold. we ran both programs on our 24-core  <dig>  ghz intel xeon server. we set fsg Ïƒ to  <dig>  which is equivalent to our method of finding common patterns in all given networks. fsg doesn't have the option of setting the subgraph support within each network and its default value is  <dig>  at 2-edge and 3-edge levels, fsg ran faster than our method using less than one second and  <dig> second, respectively; while our method used  <dig> and  <dig> seconds, respectively. at 4-edge level, fsg spent similar amount of time as our method, which is around  <dig> seconds. but fsg was not able to continue the task at 5-and-higher-edge levels and ran out of memory. the running time and resource requirements increased exponentially as the subgraph size increased. our method, on the other hand, showed a much slower rate of increase in time complexity. when support within network is set to  <dig>  our program took  <dig> seconds to find 5-edge patterns. the running time reached the maximum for the 9-edge patterns and then finally reduced to  <dig> seconds at the 10-edge group.

the subgraph patterns identified by us are frequent within each network and also common to all the nine cancer networks. hence, we hypothesize that each subgraph corresponds to an important functional module in cancer. we used go semantic similarity  <cit>  as a metric to quantitatively verify the functional importance of the frequent common patterns, and thus the performance of our method, in detecting the functional subgraphs. semantic similarity provides a quantitative measure of how similar a pair of proteins is, based on the annotations  in a given go concept category. the idea is that the interacting proteins are more likely associated with similar cellular processes and/or involved in similar function. hence, this similarity measure is higher for functionally related proteins, and vice versa. this concept has been very effective in interpreting the functional similarities of genes/proteins based on gene annotation information from heterogeneous data sources  <cit> .

to test this hypothesis, we compared sets of randomly generated subgraphs  against the sets identified by our algorithm . we generated random sets of  <dig> subgraphs for each edge-group of size n  from the human ppi network. in other words, both sets of sgrand and sgcancer subgraphs are derived from the same parent interactome, but they differ in the node and edge topologies they contain. we computed the average semantic similarity scores of sgrand and sgcancer subgraphs for each edge-group. the results of the comparison are shown in figure  <dig>  as expected, the similarity scores of sgcancer subgraphs are substantially higher than those of the sgrand subgraphs at all edge-group levels tested. this result validates that the sgcancer subgraphs identified by our algorithm are functionally coherent modules. still, the question remains as to what kind of a role do they play in cancer. to address this, we have further studied a select set of subgraphs from different edge-groups to understand their role in different cancers.

role of subgraph patterns in cancer
the 10-edge subgraph primarily consists of the glucocorticoid receptor , three of its coactivators  and one co-repressor . in addition, there are three transcriptional regulators  and an rna binding motif protein . all the known direct and indirect interactions among these proteins are shown in figure  <dig>  which is generated by the ingenuity pathway analysis tool  using only the "cancer disease" filter. all nine nodes identified in our 10-edge pattern subgraph are associated with the cancer disease with glucocorticoid receptor  as the central molecule. gr plays a prominent role in apoptosis through genomic  <cit>  and non-genomic  <cit>  mechanisms. due to this action of gr, glucocorticoids are commonly used to treat patients suffering from a wide range of cancers  <cit> . all the three coactivators of gr exhibit histone acetyl transferase activity , and genetic alterations in hats have been linked to various forms of cancer  <cit> . for example, ncoa <dig>  and ncoa <dig>  are members of the p160/steroid receptor coactivator  family that are the most studied of all transcriptional coactivators  <cit> . src genes are subject to amplification and overexpression in some breast and prostate cancers  <cit> . the role of the third coactivator, crebbp , merits special mention: its role in tumor suppression has been well-documented  <cit> , and in a recent study, sequence or deletion mutations of crebbp was found to be highly associated with relapsed acute lymphoblastic leukemia, a leading cause of death due to disease in young people  <cit> . crebbp also regulates the tumor suppressor p <dig> in two ways: in the nucleus, acetylation of p <dig> by the hat domain activates p <dig>  <cit>  through formation of a binary complex  <cit> . in the cytosol, crebpp promotes polyubiquitination and destabilization of p <dig>  <cit> . the rna-binding motif containing gene, rbm8a is also known to interact with ovca <dig>  which is a tumor suppressor gene  <cit> . in summary, the functional module highlighted in this study directly impacts the activity of the glucocorticoid receptor, and its dysregulation, probably through the effect on the gr mediated apoptosis pathway, is a common motif found in the nine cancers included in this study. this functional module also impacts the p <dig> mediated tumor suppressor pathway through the regulation of p <dig> activity by crebbp.

we also looked at some of the smaller subgraphs containing 2- <dig> edges and found a number of network patterns associated with cytoskeletal functions. one of the 8-edge patterns is related to a functional unit consisting of actin  and six actin associated genes, actr1a, cct <dig>  gsn, sptan <dig>  tpm <dig>  dynll <dig> and their homologs, that are differentially expressed across nine cancer types. cct <dig> is a molecular chaperone, and is part of the tcp <dig> ring complex, known to fold various proteins including actin and tubulin. we find that cct <dig> is uniformly up-regulated across datasets. we hypothesize that cct <dig> may play an important role in ensuring the correct folding of cytoskeletal proteins that are produced during cell proliferation in cancer. it is well known that the actin cytoskeleton is substantially modified in transformed cells, and this occurs in concert with changes in a host of actin filament-associated regulatory proteins  <cit> . these changes are thought be integrally involved in the abnormal growth properties of tumor cells, their ability to adhere to tissue, and their increased ability to metastasize  <cit> .

in the 5-edge group of patterns, we have identified a functional module centered on the well-known oncogene myc, and myc binding proteins, max, mycbp <dig> , and sp <dig>  that are differentially regulated in nine cancers. interestingly, this functional pattern also includes Î± and Î² tubulins and their homologs in various subgraphs as shown in figure  <dig>  the myc proto-oncogene family has been the subject of intense scrutiny due to the involvement of deregulated myc genes in a wide range of cancers  <cit> . myc is a short-lived protein that promotes proliferation by regulating the expression of specific target genes. myc requires the constitutively expressed family member max to function. myc and max form heterodimers via basic helix-loop-helix leucine zipper domains and bind to e-box regulatory elements in target genes. myc overexpression up-regulates genes directed towards cell growth: ribosome biogenesis, protein synthesis, and metabolism  <cit> , and myc has also been shown to repress genes that attenuate cell cycle progression  <cit> . high-throughput sequencing of chip dna  has been used to locate  <dig> dna regions bound by myc, 20% of which were up or down-regulated as a consequence of c-myc expression  <cit> . oncogenic activation is known to occur from constitutive and overexpression of the c-myc protein. for example, in burkitt's lymphoma, a translocation of myc, t to a location that falls within the regulation of the strong promoter of immunoglobin genes increases the amount of expression of the myc gene.

CONCLUSIONS
in this paper, we present a novel algorithm for mining frequent and common patterns across multiple cancer ppi networks. the comprehensive ppi datasets used in this study exhibit power-law distribution across all cancer networks. by using effective canonical labeling and adopting weighted adjacency matrices, we are able to perform graph isomorphism test in polynomial running time. the search starts from small patterns of  <dig> node, proceeds by incrementing the subgraph size  <dig> edge at a time, and stops when no frequent patterns are discovered for a certain edge level. as the size increments, the infrequent edges in the original networks are removed, thus reducing the search space for the next round of searching. we applied the algorithm on nine cancer ppi networks and identified frequent and common patterns of different sizes up to  <dig> edges. to validate the performance of our method, we compared these patterns against the randomly generated patterns at each edge-group, using go semantic similarity measure. patterns identified in this study exhibited significantly higher scores compared to the random ones at all edge-group levels indicating that these patterns are functionally cohesive modules. further investigations on the specific role of each module in cancer revealed their intricate association with various cancer-associated processes such as transcriptional regulation, cell growth, cell proliferation, etc. ingenuity pathway analysis of a 10-edge module demonstrated that the cancer-associated functions are tightly dependent among the nodes of the subgraph as evidenced by both direct and interactions. based on these results, we believe that the methodology developed in this study is capable of identifying common and frequent subgraphs from large and multiple interaction networks. while we used cancer ppi networks in our study, this is a generic methodology and hence can be applied to mine subgraphs from many other networks.

