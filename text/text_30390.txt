BACKGROUND
formally, a typical classification problem can be stated as follows: given training data {, ...,}, produce a classifier f: x → y which maps an object x ∈ x to its classification label y ∈ y  <cit> . the xi values are typically vectors of the form <xi,  <dig>  xi,  <dig>  ..., xi, n>. given new x values, the classifier predicts the corresponding y values. for example, if the problem is that of filtering spam, then xi is some representation of an email  and y is either "spam" or "non-spam". this form of machine learning is called as supervised learning where the aim is to establish a rule whereby a new observation can be classified into one of the existing known classes. another class of machine learning is the unsupervised learning where a set of observations are given with the aim of establishing the existence of classes or clusters in the data and the prior distribution of the data is usually not known.

one of the limitations of supervised learning is that examples or instances from both the classes are required to build a classifier. unavailability of sufficiently large set of examples from both classes is quite often the case with biological data due to various reasons: expenses and time required to obtain the data and other experimental limitations. instead of having examples from both the classes, what is usually available is a sizeable set from one class and a much larger number of examples that are unlabeled. this is one of the most common occurrences in pharmaceutics and bioinformatics. for example, usually there are only very few inhibitors/drugs performing a certain function but a much larger number of drugs that have not been tested which would form the unlabeled set. this problem of unavailability of well-annotated examples from both the classes can be addressed by a special class of learning called semi-supervised learning or partially supervised learning. a recently developed approach to execute semi-supervised learning is the positive-unlabeled  learning  <cit>  using two sets: a well-defined positive set, and a much larger set with unlabeled examples. in this paper, we present the first implementation of pu-learning towards a bioinformatics problem: identification of peripheral domains that bind various membranes reversibly .

peripheral proteins target different kinds of membranes  in response to certain signals. these proteins, different from integral membrane proteins, are mainly cytosolic   <cit>  and also play crucial roles in membrane trafficking and in anchoring cytoskeletal structures. their reversible attachment to biological membranes has been shown to regulate the biochemistry of the cell through a variety of mechanisms  <cit> . many of these peripheral proteins have been directly or indirectly involved with many deadly diseases like cancer and aids  <cit> . in various kinds of human cancers, a common signal is the overproduction of a phospholipid, phosphatidylinositol  trisphosphate , by the downstream action of akt  <cit>  that is activated by an interaction between pip <dig> and a very common membrane-targeting domain called ph domain <cit> . similarly, during the late phase of hiv type  <dig>  replication, newly synthesized retroviral gag proteins target the plasma membrane and interact with another phospholipid, phosphatidylinositol  bisphosphate , an event that is essential for viral replication and pathogenesis  <cit> . thus, the medical and molecular importance of these domains and their host-proteins is well established.

structural biology has deciphered the structural basis of specific lipid binding and membrane interactions of membrane targeting domains and peripheral proteins. however, it would be prohibitively time-consuming and expensive to search and identify new peripheral proteins on a genomic-scale by these experimental approaches. therefore, a fast and accurate bioinformatics-based annotation scheme would greatly supplement the effort to identify membrane-binding peripheral proteins on a genomic scale.

although structural genomics projects progressively are gaining speed, it will still take many years before 3d structures of most proteins in the proteome of commonly studied organisms become available. so, for genome-wide prediction of peripheral proteins the need for sequence-based prediction protocols that don't rely on structures and can give reasonable precursor performance becomes inevitable. here we broaden the prediction of peripheral proteins to that based on the features derived from their sequences alone to advance in the direction of whole-genome prediction.

in case of peripheral domains, there is a well defined set of domains which are known to bind the membranes with different affinities. however, there is a much larger set of proteins whose affinities have not been measured. so, there is no such fairly large dataset for the proteins that are known not to bind membrane. one of the common criteria for constructing a negative set is the subcellular localization. for example, the proteins that reside in the cytosol can not perform the dna-binding function. however, this criteria can not be applied in this case as membranes confine many organelles of the cell  and can be accessed anywhere. so, there is no golden negative set of proteins that are known not to bind membrane, thus standard supervised learning can not be applied here directly. so, here in this paper, we address this problem with the first bioinformatics application of pu-learning to identify peripheral domains based on their sequence-derived properties. we will show that pu-learning in combination with other auxiliary binary classification algorithms can be effectively used to build an identification protocol for predicting the membrane binding properties of a large number of modular domains with unknown properties.

previously, there have been attempts to identify peripheral proteins using machine learning  <cit>  that achieved an accuracy of about 90%. however, one major difference between those works and this study is that they were based on structural features of the proteins and so were based on a much smaller set of about  <dig> proteins with 3d structures. the negative set in those studies was also a high confidence one as those structures were well studied and annotated. in this study, on the other hand, we do not require structure of the proteins and use only sequence based descriptors so we have a much larger positive set and a poorly annotated negative set.

methods
in simple words, the machine learning problem being addressed here can be stated as: given a set of membrane-binding proteins, can we identify other membrane-binding proteins from a larger unlabeled set while classifying the proteins in the unlabeled set as positive or negative? the main components of the classification process are feature development, classifiers, validation techniques and performance criteria which are discussed below after explaining pu-learning in detail.

theory behind pu-learning
pu-learning attempts to build a classifier using a two step-strategy  <cit>  :

step 1: identifying a set of reliable negative examples from the unlabeled set.

step 2: building a set of classifiers by iteratively applying a classification algorithm and then selecting a good classifier from the set.

these two steps together can be seen as an iterative method of increasing the number of unlabeled examples that are classified as negative while maintaining the number of correctly classified positive examples. there are a couple of techniques proposed for each step. for the first step, rocchio technique, the spy technique, and the 1-dnf technique can be used. for the second step, any classifier, such as svm, bayes classifier, random forest or decision trees can be used. for the focus of this article, only the spy-technique is explained in great details. the readers are directed to relevant literature  <cit>  for details about the other techniques regarding the first step.

in the spy technique, "spy" examples from the positive set  are sent to the mixed or unlabeled set  . this approach randomly selects s% of the examples from the p set . these examples form the 'spies' set, denoted by s, which is added to the u set. the spies behave identically to the unknown positive examples in u and hence allow us to reliably infer the behavior of the unknown positive examples. the algorithm is as follows:

 <dig>  n = •

 <dig>  s = sample 

 <dig>  u = u ∪ s

 <dig>  p = p - s

 <dig>  assign every example in p the class c1

 <dig>  assign every example in u the class c2

 <dig>  run any classifier

 <dig>  classify each example in u

 <dig>  determine the probability threshold t using s

 <dig>  for each example dj in u

 <dig>    if its probability pr  < t

 <dig>       rn = rn ∪ {dj}

 <dig>       u = u - {dj}

 <dig>  repeat steps  <dig> to  <dig> with rn and u until rn does not change

the first classifier is built using the p set  as positive set and the u + s  as the negative set. this classifier is then tested on the u+s set. a threshold is then determined such that all the spies are classified as positive. the unlabeled examples that are below that threshold form the first reliable negative  set and the remaining examples in u form the q <dig> set. the process is then repeated with p  as positive and the reliable negative  set as negative and the resultant classifier is tested on the q set to further extract reliable negative examples from the q set. the process above is repeated until no more examples in the q set can be classified as negative. the final classifier is then built using the n and the original p set. the pseudo code is as follows:

every example in p is assigned the class label 1;

every example in rn is assigned the class label -1;

i = 1;

loop

   use p and rn to train a classifier si;

   classify q using si;

   let the set of examples in q classified as negative be w

   if w = {} then exit-loop

   else q = q - w;

      rn = rn ∪ w;

i = i+1;

in this article, we also propose and implement a variation of the spy-technique. the spies are added in each iteration as opposed to just the first iteration  <cit> . figure  <dig> shows this technique in a cartoon representation.

so, pu-learning adds an additional layer to the standard supervised learning. in this layer the first set of reliable negative examples is created. using this reliable negative set and the original positive set, more reliable negative examples are extracted in the subsequent steps using a classifier iteratively. for this study, spy-technique was used for the first step and random forests were used for the second step. as we will show, the pu-learning protocol with spy-technique can be effectively used to build an identification protocol for predicting the membrane binding properties of a large number of modular domains with unknown properties.

dataset
for the creation of positive dataset, entire human, mouse and yeast proteomes were downloaded from the swiss-prot database  <cit> . all the sequences of the peripheral domains were then extracted by using their names as keywords resulting in  <dig> cases. the known domains include c <dig>  c <dig>  ph, px, fyve, anth, bar, ferm and tubby domains. sequence identity was then reduced to 40% using cd-hit  <cit>  among all the pairs reducing the number of sequences to  <dig>  for unlabeled set, all the other domains except the positive ones were selected from the three proteomes giving a total of approximately  <dig>  examples. after reducing the sequence identity to 20%, the number of unlabeled examples was  <dig> . a higher sequence identity was used for the positive case as the number of positive examples is few and using a lower sequence identity would result in much fewer examples that might be insufficient for building a reliable classification model.

features
during feature development, a protein sequence is reduced to a fixed set of features encoding the characteristics of a protein. it is always advisable to choose the features that are supposed to be pertinent to the function of a protein and display large variation between positive and negative set.

all intracellular membranes contain varying degrees of anionic lipids with the inner plasma membrane being the most anionic  <cit> . thus, electrostatic complementarity between cationic proteins and anionic membranes should be an important factor in membrane binding of peripheral proteins. thus, on the basis of previous studies on membrane binding proteins, various sequence-based features were selected: the overall charge of the protein; the sum of hydrophobicity, helix propensity and sheet propensity; and the overall sequence composition of the domain . in addition, a new family of features called local environment amino acid composition is also used. this feature representation defines a residue based on both its identity and its environment of found kinds: low helix and high sheet propensity, high helix and low sheet propensity, and so on. this forms  <dig>  distinct counts in the new feature vector.

performance criteria and evaluation technique
the performance of the classifiers is measured using different metrics. specifically, the commonly-used threshold metrics include accuracy and sensitivity. accuracy is the ratio of correct predictions to the total number of predictions.   

sensitivity, also known as recall or true positive rate, tpr, is defined as the probability that a prediction is predicted positive given the example is positive. it is approximated by the fraction of true positives predicted as positive.   

for evaluating the performance of the protocol, the holdout technique was used during testing. during this evaluation,  <dig> positive examples were left out for testing the final classification protocol. these examples were not used for training purposes at any stage of the model building. due to an uncertainty about their classes, no examples from the unlabeled set were left out for testing and so only sensitivity was used for performance evaluation. during training, 5-fold cross-validation was used to optimize the parameters.

classifier
decision trees, specifically, c <dig>  was used as a classifier. a decision tree  <cit>  constructs from the training data a tree model where every internal node represents a decision and a leaf represents its classification. the learning process starts by finding a split on a single attribute that best classifies the training data; then the dataset is recursively split into two parts repeating these steps on each subset. there are a number of loss  functions that are used to find the best split or the split with the minimum loss . specifically, the c <dig>   <cit>  decision tree algorithm developed by quinlan uses a loss function known as the information gain, which is motivated by information theory. the decision tree has several advantages. first, it is fast to train and evaluate. second, the model  learned during the training process is usually compact and easy to interpret. finally, a decision tree does not require much data preprocessing, natively handling most attributes types. note, most machine learning algorithms have tunable parameters. in this work, the results reported using the c <dig>  decision tree algorithm use the default values empirically found to work well on a number of datasets.

RESULTS
during the initial iteration, the first reliable negative set is created by the examples that were classified as negative  from the unlabeled set and the remaining unlabeled data form the q  set. in subsequent iterations, some examples from the q set are identified as reliable negative and are added to the rn set. thus, the rn set keeps expanding with the addition of more proteins from the unlabeled set while the q set keeps shrinking. this process is repeated until no examples from the q set can further be classified as negative.

we selected  <dig> positive examples  and added them to the unlabeled set as spies carrying a negative label . the u+s set and the remaining  <dig> positive cases were then used to build the first binary classification protocol that was tested on the u+s set. based on the threshold so that all the spies are classified as positive,  <dig> examples were identified from the u set as reliable negative examples . with this rn <dig> set and the initial positive examples, more reliable examples were extracted from the q set until no more examples in q could be classified as negative. figure  <dig> shows the growth of the reliable negative set and the shrinking of the q  set. after  <dig> iterations, both rn and q set converged at  <dig>  and  <dig>  examples.

this final model built in the last iteration was then used to classify each example in the holdout set composed of  <dig> positive examples.  <dig> of these  <dig> examples were classified as positive and only  <dig> were classified as negative giving an accuracy of 95% with a sensitivity of 95%. when compared with the fraction of q, which is only 46% of the total dataset, this 95% sensitivity in testing set shows that the classification protocol learnt to identify the positive examples with a high accuracy.

another variation of the spy technique was also tried: the spies were added during each iteration as opposed to just the first iteration implemented before. figure  <dig> shows this technique in a cartoon representation. similar procedure as above was then performed for this spy technique. similar to the first implementation, with each iteration, rn set grows and q set shrinks until convergence. figure  <dig> shows the trend of the two set as a function of iteration. the protocol converged with the same set of rn examples as in the first implementation increasing the confidence in this set. with this modification of the spy technique, the performance of the protocol was evaluated, as above, by testing the final model on the holdout test of  <dig> proteins. similar to the first case,  <dig> domains were correctly classified and only  <dig> were incorrectly classified giving an accuracy of 95% and a similar sensitivity. the two proteins that were misclassified were the same misclassified proteins as in the first implementation: protein pob <dig> and oxysterol-binding protein  <dig>  upon further examination, we found that these proteins have very dissimilar characteristics such as amino acid and dipeptide composition to other positive cases. this is also demonstrated by the fact that both these proteins share less than 15% and 16% sequence identity, respectively, with any other sequence in the set. performances of both the protocols show their potential for genome-scale identification of peripheral domains.

discussion
one of the common issues in building machine learning based classifiers is the unavailability of reasonably large sets of examples from both  the classes in case of binary  class problems. this problem of having partial information is all the more encountered in biological fields where collection of data may not be an easy task. so, what is usually available is a set of examples belonging to one of the two classes and a much larger set of unlabeled examples that might belong to either class. the task of building a classifier with this partial information then falls under semi-supervised learning and can be accomplished through positive-unlabeled learning.

here in this article, we implemented a classification protocol that represents the first attempt to identify and predict membrane-binding domains on the basis of their sequence-derived features using positive-unlabeled learning. the application of pu learning surpasses the unavailability of a well-define negative set consisting of proteins that are known not to bind membranes. this is, to the best of our knowledge, the first application of pu-learning to any bioinformatics problem. prior to this work, it has only been applied to text classification of web pages  <cit> .

we have used simple sequence-derived features of known peripheral proteins to identify other putative membrane-binding proteins also proposed a list of other proteins that, we believe, are highly unlikely to bind membranes. simple sequence-derived features are used to build the protocol. two independent tests demonstrate that the developed protocol can identify peripheral domains with a high accuracy. in both the tests, accuracy achieved was 95% whereas a similar sensitivity was registered. these results combined with the fact that this protocol only uses sequence-derived features without actually depending on sequence homology suggest that our protocol can be used to predict the membrane-binding properties of modular domains, including other membrane targeting domains, with high accuracy. for those proteins without modular domains and homology to known proteins, our protocol can serve as initial screening for potential candidates.

in this article, we also propose a modified spy technique where the spies are added to the unlabeled set in each iteration instead of just the first one. each time, a randomly selected spy set is added that makes the protocol more robust. when the q set converges even after adding a new set of spies during each iteration, it renders more confidence in the final reliable negative  set. also, the fact that the final rn set was the same in both implementations  also boosts the reliability of the protocol's prediction.

as an output of this protocol, we have proposed two sets: a set of proteins that are most unlikely to bind membranes  of ~ <dig> proteins and the remaining q set of ~ <dig> proteins that can not be classified clearly in either class. proteins belonging to both rn and q set were picked by the protocol from the initial unlabeled set of ~ <dig> set. so, essentially, we have reduced the number of proteins which are expected to bind membranes to a representative set of ~ <dig> which would provide a good initial list of proteins to test experimentally for their membrane binding properties for a genome-wide identification of membrane-binding proteins. efforts and collaborations are underway to test the q set to test for their membrane-binding properties .

it should be noted here that a limitation of the method employed above, and of generative machine learning in general, is that it identify new instances on the basis of features learnt from training examples; identification of novel instances that are not similar to any the training instances is difficult. this is particularly the case for peripheral proteins as they use a variety of features to target membranes. so, to partially overcome this limitation, we introduce as much variety in our training/spy set as possible with the given data by using a modified version of pu learning where we randomly use a new spy set in each iteration.

CONCLUSIONS
in this work we applied pu learning to a protein function prediction problem: identifying membrane binding domains. encouragingly, the high accuracy prediction  of the holdout set share very low sequence identity with the training set; 50% of the pairs between these sets have only 6% identity and all the pairs were less than 20% identical. these identities are much lower than the limit for identifying similar cases based on homology searches. this shows that pu method performs better than just identifying novel instances based on sequence homology.

in general, the above protocol can be applied to any bioinformatics problem where a similar issue is encountered. for example, this protocol will especially prove useful in problems like prediction of protein-protein interactions  and quantitative structure-activity relationship  studies where information about the negative set of proteins not related with a biological or chemical activity is highly scarce. we believe in present times when our knowledge is limited and ever-increasing, protocols like the one presented in this article that can make use of only partial information will prove to be very useful.

competing interests
the authors declare that they have no competing interests.

authors' contributions
nb conceived of the study, carried out the data analysis and helped in drafting the manuscript. mg participated in the design of the study and helped in drafting the manuscript. hl conceived of the study, and participated in its design and coordination and helped to draft the manuscript. all authors read and approved the final manuscript.

