BACKGROUND
despite recent advances in the use of computational techniques, solving the structures of large macromolecular complexes by cryo-electron microscopy  is still a painstaking and labour-intensive task  <cit> . it is also a very computationally intensive task. in single-particle cryo-em, large numbers of micrographs containing low-resolution and noisy two-dimensional  images of the particle of interest are recorded. because each micrograph usually contains multiple particles in multiple random orientations, and possibly also in various conformations, the particles are then picked and classified into groups having similar orientations. fast fourier transform  deconvolution and averaging techniques may then be applied to reduce both systematic deformations of the 2d images due to the instrument’s contrast transfer function and the random noise which arises from using low electron intensities necessary to preserve the structural integrity of the samples. once a good set of 2d images has been obtained, a three-dimensional  electron density map of the particle may be constructed using 3d back-projection or radon transform techniques  <cit> , for example. however, the resolution of such maps, which are often calculated from only o molecular images, is low compared to density maps obtained by x-ray crystallography which are typically derived from o molecules. therefore, in cryo-em, the main way to increase the resolution of the final density map is to capture and process many thousands or even several millions of 2d particle images. in the past, the particles in em micrographs were picked manually, but this is not practical to reach sub-nanometre resolution or to resolve conformational changes within molecules. modern digitial imaging technology combined with automated high-throughput data collection techniques now allow both higher resolution and unlimited sizes of 2d datasets to be captured. hence, a major bottleneck in reaching atomic resolution in 3d reconstruction by cryo-em is now the accurate and automated picking of particles from the raw em micrographs.

many methods have been proposed for automatic cryo-em particle picking  <cit> . amongst the most popular are those that use particle templates to facilitate particle recognition. a template is usually a noise-free representation of the particle in a particular orientation. it can be obtained either by projecting a known 3d structure onto a 2d plane or by calculating the average of some representative particles selected from micrographs. some picking methods use mathematical functions for templates such as the difference of gaussians method  <cit> . in general, template-based methods recognise particles by computing similarity scores between the template and similar sized regions of each micrograph. for example, a widely used template-based method employs the normalised cross-correlation technique  <cit>  which calculates an array of matching scores in the form of a 2d correlation map. this approach has been implemented in findem  <cit> , spider lfcpick  <cit> , and signature  <cit> , for example.

some picking methods use machine learning techniques to discriminate between real particles and non-particles such as those due to contaminants and noise. example techniques are cascades of classifiers  <cit> , pyramid of neural networks  <cit> , and support vector machine  <cit> . other methods are based on the observation that 2d images of particles often have rather limited geometric complexity. for example,  <cit>  use a hough transform for particle edge detection. a related approach uses image processing techniques to segment particles directly from micrographs  <cit> . however, methods which do not use templates often require human intervention during the picking process.

because it is difficult to surpass the accuracy of automatic template-based methods when the templates match the particles well, template-based approaches are often preferred although their computational cost is often higher than that of other methods  <cit> . however, in single particle cryo-em, large and diverse sets of both micrographs and templates are usually needed to represent and identify different orientations of particles in micrographs in order to achieve a high resolution 3d reconstruction. there is therefore a need to be able to pick multiple images from multiple micrographs using multiple templates as rapidly as possible. in order to help satisfy this need, we have developed a highly parallel correlation-based particle picking tool called gempicker, which exploits recent advances in high performance computing technology in order to distribute particle picking calculations over multiple nodes of a computer cluster.

nowadays, most research institutions have at least one computer cluster for scientific calculations. each node of the cluster usually consists of several cpu cores, and an increasing number of clusters are configured with a certain number of gpus in order to accelerate arithmetically intense calculations. indeed, in the last few years, gpus have been used to accelerate many scientific calculations  <cit>  in fields ranging from molecular dynamics simulations  <cit>  and quantum chemistry  <cit>  to protein and dna sequence alignment  <cit>  and protein docking  <cit> . recently, gpus have also been used to accelerate single particle reconstruction  <cit> , tomographic reconstruction  <cit> , and subtomogram averaging  <cit> . with these observations in mind, we designed gempicker to be able to adapt easily to different hardware configurations, ranging from a modest workstation with one or two attached gpus to large cpu-based or gpu-based clusters with tens or even hundreds of processors, and we have endeavoured to ensure that its performance increases linearly with the computational resources available. here, we present particle picking speed-up results obtained on four different computational platforms, and we demonstrate the practical utility of the approach using the publicly available keyhole limpet hemocyanin  dataset. to our knowledge, gempicker is the first particle picking program to use multiple modern graphics processor units  to accelerate fft-based ncc calculations.

implementation
ncc-based automatic particle picking
given a set of search images, s
k
 , each of which contains a candidate particle to be picked, ncc-based automatic particle picking involves determining the highest peaks in the correlation maps calculated between these search images and the target image. the overall calculation involves essentially three main steps. the first step calculates the correlation, ncc
k
, between each s
k
 and the target image. ncc
k
 can be efficiently calculated using ffts by exploiting the formulation in  <cit>  . the second step combines all of the ncc
k
 correlation maps into a global correlation map ncc using

  ncc=maxkncck 

for all relative distance v of search images to the origin of target image. in the parallel processing community, the process of gathering results in this way is often called a “reduction” because it reduces multiple result arrays into a single global result array. in large-scale distributed calculations, the efficiency of the reduction step can have a significant impact on the overall speed of the calculation. we return to this point below.

in addition to the global correlation map, it is also necessary to store the identity of the search image that gives rise to each local maximum. hence, a global index map, ind, is calculated along with the global ncc according to

  ind=argmaxkncck. 

assuming that v is the location of a local maximum in ncc, the search image that corresponds to that local maximum is given by k=ind. in other words, the calculation has associated the search image s
k=ind at location v of the target image. lastly, the third step locates the coordinates of local maxima in ncc in order to produce a final list of picked particles. the above procedure is then repeated for each target image in the dataset.

fft size and zero-padding
because almost all of the computational cost in gempicker arises from fft-based ncc calculations, the choice of fft library can significantly affect overall performance. we therefore tested gempicker using the proprietary mkl   <cit> , cufft   <cit> , and the open source fftw   <cit>  libraries. although the theoretical advantage of the fft is that it can perform a calculation that apparently requires o operations in just o time, the actual speed-up that might be achieved can be quite sensitive to the dimension n.

current fft libraries use the cooley–tukey algorithm  <cit>  to reduce recursively a transform of size n into transforms of smaller dimensions which are normally implemented as small “kernels” of dimension  <dig>   <dig>   <dig>  or  <dig>  if the dimension cannot be factored into small prime numbers, a slower general purpose algorithm is used . therefore, if the image dimension is not a natural product of small primes, it is often worthwhile to pad the image with zeros up to a suitable larger dimension. additionally, on current gpus, global gpu memory can be accessed most efficiently if memory request can be factored into similar dimensions, because this can allow the gpu to coalesce multiple memory accesses into a single transaction . consequently, gempicker automatically zero-pads images when it detects an opportunity to improve performance due to the above considerations. this simple trick has demonstrated its effectiveness when the data size does not conform to the library’s recommendation.

parallel processing framework
in parallel processing, it is usual to use the notion of a “thread” to mean one instance of a calculation that will run essentially independently on one cpu core. often, multiple threads are launched from a single parent program, or “process”, on each cpu node. although different threads may run independently, they often still communicate with each other in a controlled way using one or more message passing techniques to send and receive data and results. here, we consider the basic unit of calculation to be the correlation of one template with one micrograph because this operation is relatively expensive yet it does not depend on either the number of micrographs or the number of templates to be processed. with this level of granularity, the particle picking problem can be parallelised quite naturally by distributing the correlation calculations over several threads running in parallel. when gpus are available, it is legitimate for a cpu thread to pass a part or even all of a calculation to an attached gpu.

when running in multi-threaded mode, each thread will calculate the correlation between the micrograph and multiple templates. however, concurrent reading of data by multiple threads could cause contention in the disc storage device and consequently lead to sub-optimal performance. therefore, to avoid this problem, gempicker adopts a producer–consumer pattern  <cit> . the producer’s job is simply to read data from disc, and copy it into a queue. if the number of producers is one, which is the case in gempicker, there is only one stream of data from the storage device, and hence the possibility of contention is completely avoided. gempicker normally uses multiple consumer threads according to a simple thread pool pattern  <cit> . each consumer removes one template at a time from the queue and processes it independently of any other template calculations. in order to avoid race or deadlock conditions amongst the threads, access to the queue is controlled by locks within the “boost.thread” library  <cit> . additionally, if the queue becomes empty, any idle consumer threads will sleep until more data is made available by the producer. on the other hand, if the queue grows beyond a certain size, the producer will sleep in order to avoid exhausting physical memory. the number of consumer threads in the pool can be adapted according to the available resources. typically, the number of threads would be set to the number of cpu cores or the number of gpus per node. thus, the producer-consumer model provides a way to read data smoothly from disc and to process it as quickly as possible.

in order to calculate the global ncc map for a micrograph with a set of templates, gempicker distributes the calculation over a given number of threads, which might ultimately be executed on multiple cpus, gpus, or a mixture of the two. thus each thread t calculates ncc
t
 for a subset of the templates and it maintains ncc
t
 and ind
t
 as its individual correlation map and the corresponding index map. when the queue of templates becomes exhausted, each thread combines its ncc
t
 with ncc
p
 so that ncc
p
 and ind
p
 will contain the candidate picks calculated by the threads belonging to process p. when running on a single workstation, ncc
p
 and ind
p
 will immediately describe all of the picked particles, and all that remains is to identify the local maxima to obtain the final picked list.

cluster implementation
when running on a computer cluster, gempicker parallelises the overall calculation by distributing the work to nodes in the cluster using the mpi  library  <cit> . at this level of parallelisation, gempicker assumes that each node in the cluster has the same hardware configuration so that if the work is divided equally, the main process on each node will finish at approximately the same time. gempicker distributes threads to nodes on either a per-micrograph or per-template basis according to the hardware configuration and the actual number of micrographs and templates to be compared. in the per-micrograph scheme, the correlation and index maps for each micrograph are computed by a single node for all templates. conversely, in per-template mode, all nodes will collaboratively compare all templates with each micrograph. assuming many templates need to be processed, this mode should be more efficient when the number of cpu cores exceeds the number of micrographs to be processed. however, in order to achieve this gain, the thread-level correlation and index maps need to be collected and combined efficiently. thus, cluster calculations require an additional reduction step to combine the correlation and index maps from all processes in order to obtain the global ncc map and global ind map using equations  and . figure  <dig> illustrates the hierarchical parallel structure of gempicker running in a multi-node cluster.

we have implemented both direct and tree-based reduction algorithms in gempicker. the direct reduction algorithm uses the mpi_send and mpi_recv functions to send and receive data between the node and master processes. for a cluster of 2
n
 nodes, this approach requires 2
n
- <dig> data transfers and 2
n
- <dig> reduce operations. the tree-structured reduction uses the mpi_reduce function to propagate results towards the master process at the root of the tree and requires only n data transfers and n reduce operations in a cluster of 2
n
 nodes. such a tree-based approach is theoretically optimal, since the total elapsed time should scale only logarithmically in the number of cluster nodes. it is worth noting that the cluster reduction step is performed only when all node-level processes have finished their correlation tasks. this means that the reduction calculation itself may be accelerated using multi-threading on each node’s main process. because this step mainly involves element-wise processing of large arrays it is easily parallelised using a few fine-grained openmp  <cit>  compiler directives.

the computational platforms
in this study, computational experiments were carried out using four different computational platforms, representing four possible hardware configurations. dirac is a high performance workstation equipped with a contemporary gpu, mbiserv is a modern gpu server , adonis is a small gpu cluster , and griffon is a medium-sized cpu cluster . dirac, adonis, and griffon all have pairs of quad-core cpus, whereas mbiserv has two hex-core cpus. we included mbiserv in our experiments because it was the only machine available to us which is directly connected to four gpus. further details of these machines are given in table  <dig>  although gempicker uses essentially the same code on all platforms, some of the compiler directives will necessarily differ when compiling it for a cpu or gpu cluster. for academic use, binary versions of gempicker are available from the authors on request.

machine
RESULTS
fft-based ncc performance comparison
figure  <dig> compares the relative computational speed of 2d ncc calculations using fftw, mkl, and cufft for a range of micrograph sizes using both single and double precision calculations. this figure shows that while mkl is always somewhat faster than fftw, the speed-up obtained by performing the calculation on a gpu is quite dramatic, especially for large micrographs. for example, for a micrograph of size 4096× <dig> and a template image of size 160× <dig>  using cufft gives ∼47× speed-up for single precision data and ∼30× speed-up for double precision data. thanks to recent advances in imaging technology, it is currently common to have digital micrographs of size 2048× <dig> or 4096× <dig>  and the coming generations of em imaging devices promise to produce even larger sizes. this suggests that the use of gpus for ncc-based particle picking could be even more advantageous in the near future when even larger micrographs become available. because it seems that single precision fft calculations are sufficiently accurate for ncc-based particle picking , all subsequent results will be reported only for single precision calculations.

to evaluate the multi-threading performance in gempicker, the global single precision correlation map between  <dig>  template images of size 160× <dig> and a micrograph of size 4096× <dig> was calculated on our dirac  and mbiserv  machines . the total number of forward and inverse ffts performed in this case is  <dig>  the total computation time was ∼ <dig> s on dirac and just ∼160s on mbiserv. this corresponds to an average rate of  <dig>  templates/cpu-core/s and  <dig>  templates/gpu/s, respectively. figure 3a shows the relative speed-up for these calculations when using different numbers of cpu cores. this figure shows that the speed-up is almost linear for the first four cpu cores , but that using further cores gives an increasingly smaller gain, and using all  <dig> cores of a dual quad-core machine gives a speed-up of only about  <dig>  ×. this effect is presumably due to the operating system overhead of scheduling multiple threads and their independent memory access patterns on a pair of fully loaded quad-core cpus. on the other hand, figure 3b shows that when using up to four gpus, the speed-up increases linearly with the number of gpus with apparently no loss of performance as the number of gpus increases.

multi-node cluster performance
figure  <dig> shows the speed-up factor obtained when performing the above calculation  on the griffon and adonis computer clusters using the per-template mode. in this experiment, only the process correlation maps, ncc
p
, not the cluster’s global correlation map ncc, were calculated because the latter involves the reduction step, which is considered separately below. here, the number of consumer threads in each process is equal to the number of cpu cores per node  or the number of gpus per node . figure  <dig> shows that the gain increases almost linearly with the number of nodes when clusters have a relatively small size, such as in adonis. the sub-theoretical gain in griffon may be due to the use of a network file system to store all template images in a single storage device. since each node has a producer thread to read template images for its consumer threads, this could lead to contention on the disc device, as discussed above. nevertheless, the results in figure 4b also show that the performance of gempicker scales linearly with the number of gpus and the number of nodes in a gpu cluster.

the performance of gempicker’s reduction algorithms in the above calculations on the griffon and adonis clusters is shown in figure  <dig>  it can be seen that the total reduction time increases linearly with the number of nodes in direct reduction  and logarithmically with the number of nodes in the tree-based reduction . these observations agree with the expected theoretical performance of these algorithms. additionally, it can also be seen that using openmp to parallelise the reduction inside each process gives a further speed improvement. in particular, this improvement is significantly greater for adonis  than griffon . this difference can be explained by the higher interconnect speed in the adonis cluster, which reduces data transfer times and thus exposes the benefit of using openmp to accelerate the reduction calculation on each node.

case study: keyhole limpet hemocyanin
this section demonstrates the practical utility of gempicker using the publicly available keyhole limpet hemocyanin  dataseta. this annotated dataset was used previously to assess the performance of several automatic particle picking algorithms in a particle picking “bake-off” experiment  <cit> . this relatively small dataset consists of  <dig> defocus pairs of high-magnification images of size 2048× <dig> of klh particles, the locations of  <dig> side-view particles picked manually by a human expert , and a preliminary 3d reconstruction. each defocus pair contains an image acquired at near-to-focus conditions and an image acquired at far-from-focus conditions.

klh is a homo-oligomeric didecamer with d <dig> point group symmetry  <cit>  and exists in two isoforms, klh <dig> and klh <dig>  klh <dig> has a short cylindrical shape whereas klh <dig>  which is usually an aggregate of klh <dig>  has a longer shape. since the klh <dig> particles usually appear as rectangular side-views with a five-fold axis in the image plane, and as circular top-views with the five-fold axis perpendicular to the image plane, most of the particles in the micrographs may be associated with projections of klh that correspond to these two views. thus, the set of templates used in our experiment is generated by projecting the provided preliminary 3d reconstruction in two orientations to produce one side-view and one top-view template  using eman <dig>  <cit>  and then rotating the two projections through 360° in 4° intervals to produce a total of  <dig> images in the template set. for the masks, one rectangular and one circular mask that match the two initial projections  were created manually. these masks were then rotated through 360° in steps of 4° to make the corresponding masks for the rotated templates. it should be noted that even though we could benefit the klh’s symmetry property to effectively reduce the number of templates and masks to  <dig> without much performance loss, we keep using  <dig> templates and masks to facilitate comparison with the existing benchmark  <cit> .

in order to suppress intensity variations due to noise, the micrographs of the klh dataset were convoluted with a 4× <dig> averaging filter. each filtered micrograph was then correlated with each of the  <dig> templates using the algorithm in gempicker. the final correlation map for each micrograph contains the global maximum correlation scores for the  <dig> templates. finally, gempicker extracts the peaks from the resulting  <dig> global maps using a procedure similar to that of findem  <cit>  to identify the template that appears at each peak location. as an example, figure  <dig> shows two global correlation maps of a far-from-focus micrograph from the klh dataset using side-view and top-view templates separately. in these maps, gempicker calls a picked particle whenever a local minima of such a map  falls below a certain threshold . it is worth noting that a receiver-operator-characteristic  analysis  of the results shows that for the klh dataset using a template rotation step size of 9° gives almost the same level of picking performance as 4°. thus, correspondingly faster picking speeds may actually be achieved in practice.

we then used gempicker to pick particles from the  <dig> far-from-focus micrographs in the klh dataset. this gave  <dig> side-view particles, which contain  <dig>  of mouche’s  <dig> manually picked particles. in comparison, findem, which uses roseman’s ncc algorithm, picked  <dig> side-view particles containing  <dig>  of the manually picked particles. thus, gempicker picked approximately 3% fewer particles than findem from 3% fewer attempts. the small difference in the results between gempicker and findem is due to the different templates and masks used here and the slightly different parameter settings in the final peak extraction procedure. as noted by  <cit> , different human experts can pick different sets of particles, and so it is rather difficult to define a “gold standard” for particle picking. therefore, although findem gave amongst the best results in the bake-off comparison, we would not wish to claim that gempicker is superior to findem. in addition, since the dataset does not provide the coordinates of manually picked top-view particles, we cannot apply a similar performance comparison for the top-view picking results of gempicker. to obtain an independent validation of our results, we uploaded the picks obtained by gempicker to the 3d electron microscopy benchmark  for  <dig> klh micrographs. this generated the following statistics: precision:  <dig> %; recall:  <dig> %; false discovery rate:  <dig> %; f-measure:  <dig> %; average distance from manual pick:  <dig>  pixels.

regarding timing, the total time to compute the correlation maps for the  <dig> micrographs in this dataset was  <dig> s when using one cpu core on dirac compared to 223s using one c <dig> gpu. this corresponds to a gpu/cpu speed-up factor of ∼ <dig>  however, in this case it is probably fairer to compare one gpu with one quad-core cpu, which reduces the speed-up factor to ∼ <dig>  effectively, the  <dig> micrographs in this small dataset may be processed in less than  <dig> minutes using a single gpu or in just over  <dig> minutes using all  <dig> cores of a modern workstation. a higher speed-up is expected using a greater number of templates. in contrast, the findem program requires  <dig> s to compute the  <dig> correlation maps using one cpu core on dirac. thus, the speed-up obtained by using one c <dig> gpu in gempicker when compared to findem is ∼42×.

assuming the almost linear speed-up demonstrated by our cluster calculations , we estimated that the entire klh picking exercise could be completed in about  <dig> minute on our 4-gpu mbiserv machine. however, the actual observed time is almost  <dig> minutes. this is because for micrographs of size 2048× <dig>  the time required to process four templates in four gpus is less than the time required to read four templates from the storage device. hence the consumer threads often have to wait for data to become available. in addition, using multi-threading leads to the additional overhead of combining results at the final step. similar phenomena are also observed on the adonis and griffon clusters. thus, by exploiting gpus for the particle picking problem, the rate-limiting factor is no longer raw computing power but the bandwidth of the hard disk drives.

CONCLUSIONS
we have presented gempicker, a highly parallel multi-threaded cryo-em particle picking tool which implements roseman’s ncc matching algorithm on multi-cpu and multi-gpu computer systems. our results on picking particles in the klh dataset indicate that gempicker performs at least as well as roseman’s findem algorithm. our computational experiments show that gempicker’s automatic particle picking calculation is approximately 30– <dig> times faster on a contemporary gpu than on a single cpu core. compared to a quad-core cpu running four gempicker threads in parallel, the speed-up from using one contemporary gpu is a factor of ∼9×. we have shown that increasing the number of gpus speeds up the calculation linearly with almost no additional overhead. we have also demonstrated how the picking task may be distributed over multiple nodes in a computer cluster. on a cluster with a fast infiniband connection, our tree-based reduction algorithm for combining node-level picks almost eliminates the overhead of distributing the calculation over multiple nodes, and allows the overall calculation speed to increase almost linearly with the available hardware. thus, the very high picking throughput that is now possible with gempicker will help experimentalists to achieve higher resolution 3d reconstructions more rapidly than before.

availability and requirements
project name: gempicker project homepage:http://gem.loria.fr/gempicker.htmloperating system: linux os programming language: c++, cuda other requirements: boost  <dig>  or higher, fftw  <dig>  or higher, cuda toolkit  <dig>  or higher license: unlimited for academic use any restrictions to use by non-academics: license needed

endnote
a available at http://ami.scripps.edu/redmine/projects/ami/wiki/klh_dataset_i.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
tvh - implemented the software, carried out the experiments, made the figures, wrote sections of the manuscript. xc - advised on the parallelisation and reviewed the manuscript. ps - advised on the implementation, proposed the experiments, reviewed and corrected the manuscript. dwr - advised on the implementation and experiments, wrote some sections of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplementary materials.

click here for file

 acknowledgements
this work was funded in part by cnrs and by agence nationale de la recerche, grant reference anr-mnu-006- <dig>  we thank the french grid <dig> network  for access to the griffon and adonis clusters.
