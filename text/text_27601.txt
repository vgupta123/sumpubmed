BACKGROUND
the study of disease-causing and benign variations in the human genome is progressing rapidly. whole genome and exome sequencing continues to expand, and improved tools for variant calling are becoming available  <cit> . cost-effective sequencing, paired with variant discovery, promises to make early detection and intervention accessible for the millions of individuals with genetic diseases.

however, realizing this potential is blocked by the problem of integrating and coordinating the steps towards “a pipeline leading from discovery to delivery”  <cit> . the gen2phen project was initiated in  <dig> to unify human and model organism genetic variation databases, and remove the obstacles to translation of variant data from laboratory to clinic to public  <cit> . this has involved attempting to unify the divergent data representations of various database communities.

the focus of this effort is the locus-specific database   <cit> . lsdbs describe the variants discovered on a single gene, a gene family or a group of genes involved in the similar diseases or traits. as of this writing,  <dig>  lsdbs can be easily searched online  <cit> . lsdbs are curated by experts on their respective loci, and as such are typically the best resources of gene variant information available  <cit> . a comprehensive  <dig> analysis of  <dig>  lsdbs provides a useful overview of the domain, providing encouraging results, such as finding only  <dig> % to be outdated  <cit> . however, the study also found that only 8% provided detailed disease and phenotypic descriptions. lsdbs also vary widely in format, diverging to satisfy the immediate requirements of numerous use cases, making comprehensive, global analysis of data concerning a given variant difficult, if not impossible  <cit> . lsdbs are also typically incomplete, either from a lack of capacity on the part of the data submitters or curators to include all pertinent data, or from the original data lacking key elements altogether  <cit> . it is well recognised that the data will often be incomplete if you ask too much of the submitters  <cit> . into this situation, next-generation sequencing pipelines are rapidly increasing the scale and complexity of data to be managed  <cit> .

methods
undesigning a standard
all terms and abbreviations used are explained in the glossary .

we began by incorporating previous work on data requirements  <cit>  and data modelling activities, such as page-om  <cit>  and its generalization observ-om  <cit> , in the design of varioml lsdbs specification.

varioml was developed by an international collaboration of variation experts, over a series of workshops organised by the gen2phen project. the design has closely followed the work of tyrelle and king  <cit>  on the now defunct bsvm standard, where they proposed using semantically well-defined xml and rdf elements for lsdb data integration. varioml is designed to serve the greater part of lsdb use cases directly, complementing formats such as gsvml  <cit>  and pml/dvar  <cit> , the latter being an implementation of the page-om object model  <cit> . the format is kept consistent with page-om and observ-om by rooting xml element definitions in the same object model. by providing a structured data framework designed close to application domains, varioml complements tabular data formats such as vcf  <cit>  and mage-tab  <cit> , which are designed for high-throughput and manual/spreadsheet-based data handling needs.

the collaboration’s goal was to readdress these requirements by providing simple data structure components for developing use case specific solutions, defined independently using high-level schema definition languages such as schematron  <cit> . while it may sound complex, this approach provides the necessary flexibility to serve simple specifications for straightforward use cases, while simultaneously enabling development of more complex specifications, all the while maintaining a common foundation of terms, logic, and tooling that integrates both.

ontologies: how much meaning is enough?
reducing the inherent complexity of annotation formats began by rooting the semantics of the varioml standard as deeply as possible into base ontologies that underlie science and logic in general. this highlighted the need for a new harmonized model for describing scientific observations in general, providing a common language usable across all domains. for this purpose, a new object model, observ-om  <cit> , was developed.

in observ-om, four basic concept classes represent all elements of any kind of observable data: targets, features, protocols, and observations. the value this model represents for the variation pipeline is hard to overstate, as it represents what is probably the maximum possible simplification of elements common to all usable scientific observations regarding variants and associated phenotypes.

grounded in observ-om, varioml had the task of adding only what is absolutely necessary to provide an intuitive and ‘decision-free’ path for researchers and clinicians: the shortest possible path from variation data in all its current forms, to a unified representation, distributed globally. at the same time, this shortest path had to be extensible to describe non-minimalistic data as needed .

to achieve this, lovd-based lsdbs  <cit>  were used as a content model, in addition to modelling done in previous work  <cit> , and in workshops organized by the gen2phen consortium. this modelling meets the requirements specified previously  <cit> . the specification aims to be minimalistic, but has room for additions where the need arises. despite this simplification, the underlying base schema can be too verbose for many use cases. therefore it is important that the schema can be “narrowed”, using separate validation tools for specific cases. this has been done for the cafe variome pipeline  <cit> , where separate schematron  <cit>  rules are used for defining the content. schematron was chosen because it allows making complex assertions about the content of xml documents, more complex than are possible using the relaxng schema language  <cit>  used for defining the base varioml schema, which has better tooling support for defining initial schema elements.

existing ontologies, such as the human phenotype ontology   <cit> , sequence ontology   <cit> , and variation ontology   <cit> , can be used with varioml. separate skos   <cit>  vocabularies have been provided for elements which do not have online definitions. the semantics of varioml elements are well defined via the observ-om model; content can be relatively easily transformed to rdf representations for linked data approaches  <cit> . an example xslt application is provided for converting cafe variome xml content to an rdf schema, derived using the pharmacogenetics ontology  <cit> .

a leading example of a submission tool that fulfills this standard is the cafe variome platform  <cit>  for announcing and advertising disease-related variations identified by diagnostic laboratories, allowing them to be shared by diverse third parties. this platform, when integrated with diagnostic software, allows push-button submission of data from tables to central databases. for these submissions, the single variant is the agreed-upon central organizing concept  <cit> . variants should be submitted in varioml format, as seen in the example in figure  <dig> 

to date, this functionality has been built into the leiden open variation database  <cit> ; gensearch  <cit> , a tool to detect and interpret variants in dna sequences obtained by capillary sequences; bc|snpmax  <cit> , a data management tool for genomic research; and is currently being testing with alamut  <cit> .

RESULTS
composing the format
varioml is composed from an underlying set of xml elements, which reuse the same structural components. most of the xml elements like phenotype, consequence and evidence_code are so-called ontology terms, which have necessary properties for making cross references to existing ontologies in a flexible way:

<phenotype term = "autoimmune polyglandular syndrome type 1" accession = "240300" source = "omim"/>

all ontology terms can be annotated with comments and database cross-references . elements can be extended by adding new schema elements: phenotype is an example of an observation element which reuse properties from the ontology term element. observation elements have additional information related to the observation, such as date and evidence codes for example, an observed “consequence of mutation” has the evidence code “curator inference,” as defined in the evidence code ontology  <cit> :

<consequence term = "translational frameshift" accession = "so:0001210" source = "obo.so">

<evidence_code term = "curator inference" accession="eco:0000205" source="obo.eco"/>

</consequence>

pathogenicity, on the other hand, is a special case of consequence element, having an optional scope attribute for indicating if the variant has been observed in an individual, family, or population. the pathogenicity element also has an optional phenotype element for specifying causal relationships explicitly, where needed:

<pathogenicity term = "probably pathogenic"

uri = "http://purl.org/varioml/pathogenicity/skos/ <dig> #p_0003"

scope = "family" >

<phenotype term = "osteogenesis imperfecta, type i"

accession="166200" source="omim"/>

<evidence_code term = "curator inference" accession="eco:0000205" source="obo.eco"/>

</pathogenicity>

varioml is currently used as the xml data submission and release format for the cafe variome announcement service. an example of this implementation is given in figure  <dig> 

in the next section, we provide a brief overview of the elements seen in figure  <dig>  an example of the straightforward variant descriptions that make up the bulk of lsdb submissions.

modular elements for variant annotation
to match raw variation data to the standard descriptions specified in ‘guidelines for establishing locus specific databases’ <cit> , users simply match their data to varioml elements. for large data sets, varioml’s validation tools can be used to check converted data. following is a partial list of variant data elements required and validated by varioml, some of which are used in figure  <dig> 

source
the source element stores information on the submitting sources, with attributes for submitting instance or database, contact details, and acknowledgements.

varioml requires submitter identification using the db_xref element, and recommends that an orcid id  <cit>  be obtained for this purpose. orcid  is a platform building towards automation of authorization and access infrastructure for institutions and federations  <cit> . this combination of standardization of data and researcher id are necessary components of a translational information system, in which data discovery, access, and incentives to sharing must be closely integrated, constituting a sustainable ecosystem  <cit> .

variant
the variant element can be used in a straightforward manner, bounding information reported on a variant described using the hgvs naming scheme  <cit> , which has recently been formally described as a scientific sub-language in extended backus-naur form  <cit> .

importantvariant also provides recursive sub-elements, for cases where the reporting variant is composed of other variants located on the same or a sister chromosome.

variant has an optional observation target attribute. for simplicity, the panel element is used as a generic target for variant: panel can be used to describe any number of individuals, with or without group-specific identifiers, such as family or population.

gene
the gene is given as a database cross-reference, where source indicates the database or system , and 'accession' is the gene name . hgnc symbols or ids  <cit>  must be used for the primary name of a gene. gene is a database cross-reference type, which is conceptually similar to ontology term.

when specifying sources, the miriam namespace identifiers should be used  <cit> . for example, the identifier for hgnc gene symbols is hgnc.symbol:

<gene source = "hgnc.symbol" accession = "col1a1"/>

use of database identifiers specified in the miriam registry insures consistent naming of sources  <cit> . examples of miriam in use are given in figures  <dig> 

reference sequence
variants must always be submitted in the context of a reference sequence. lrgs are the preferred form for reference sequences  <cit> . lrg sequences ‘provide a stable genomic dna framework for reporting variations with a permanent id and core content that never changes’  <cit> .

hgvs name
the name element gives the variant name. while name has an optional attribute scheme for indicating the naming scheme used, the primary name of a variant must be given using the hgvs naming scheme  <cit> . to allow machine-processing, the “>” character in an hgvs name must be encoded to “>”, as defined in the xml specification  <cit> .

pathogenicity
pathogenicity has values such as: no known pathogenicity, probably not pathogenic, unknown, probably pathogenic, and pathogenic. these values meet the guidelines for reporting unclassified variants established in  <dig>  <cit> . these and alternative terms are provided in a separate skos vocabulary  <cit> .

genetic origin
the genetic origin of a variation can be given in its own observation element. the vocabulary defined in the varioml skos vocabulary can be used  <cit> .

location
a variant can have multiple locations defined on different reference sequences. the location element provides precise standardized positioning of variants, giving possibility to integrate data easily with das services  <cit>  and genome browsers. in figure  <dig>  the variant position is given using chromosomal coordinates.

sharing policy
the inclusion of the sharing policy element in varioml allows setting fine-grained access control policies per individual variant. possible values are closedaccess, embargoedaccess, restrictedaccess and openaccess, which are defined in the openaire guidelines  <cit> . embargo end date tells when data can be publicly released. use permission is an ontology term which can be used for citing licensing terms. the vocabulary describing these policies is taken from the openaire specification  <cit> .

additional xml elements
additional elements, shown in figure  <dig>  demonstrate a first tier of extensions of the core specification. the following elements are not yet implemented in applications, and may be redefined and modified later according to community needs.

effects on rna and aa sequences
effects on gene products can be given under the seq_changes observation element, which can store information on rna and aa sequences in a recursive manner, using nested seq_changes elements. for example, a top-level variant element specifies a unique position on the genome, which can contain rna level variants in a seq_changes sub-element, which in turn can contain corresponding aa changes in a further nested seq_changes sub-element. consequence annotations can be assigned on these different levels, representing expert agreement about which level is causative of a given consequence.

the variant element also has places for aliases and haplotype sets. aliases are for legacy annotations and variations which have been named using different reference sequences. haplotypes are sets of variants which are in cis relative to one another. these elements can be used if the main variant represents a larger sequence region containing multiple variations. implementation of these extensions will be finalised as more experience is gained in handling such variations.

frequency
variants can have one or more frequency elements, each of which can use one of three formats: decimal number, number of cases, or categorized value. the decimal number type gives frequency as a floating point value; number of cases type gives frequency as a count; and the categorized value gives frequency as an ontology term, for categorized observations such as “exists” or “less than 100”. population, evidence ontology term, evidence code, protocol id and comment attributes provide context for the frequency value.

implementation
xml remains the reference platform of choice, providing a mature specification, and advanced tools such as schema definition languages  <cit> . our use of extensible xml elements encourages implementers to collaborate closely, since extending the format requires formulating a common development strategy. however, we realized that, as the xml schema is extended, a lacuna could easily open between the data model and its implementations. adapting changing xml schema into applications has tended to be laborious. we reasoned that absolving application developers of the need to reinvent the wheel of data translation across formats was fundamental to easing the effort and cost of adopting the varioml standard. we further reasoned that, in biomedicine as well as in other scientific domains, the era of big data likely makes it no longer feasible to develop formats separately from the tooling that transports them bidirectionally across the required data languages .

in practice, this meant that varioml schema elements have to work transparently as xml, json, and possibly in future as rdf, without incurring a cost of translation to the implementer or user. providing support for bidirectional translation to json was a clear way in which we could enable schema extensions to much more quickly and inexpensively be reflected in applications. to this end, varioml comes with java and json apis , which developers can plug into their applications to handle conversion and publication.

json is the common data serialization format now recognized as the lingua franca for data exchange over the web , proven to be faster and consume fewer resources than xml  <cit> . serializing to json facilitates applying programming techniques to data, to create interactive content, user interface components, etc. in formats native to the web, simplifying the provision of data access  <cit> . varioml provides a json implementation, currently defined using jaxb  <cit>  and jackson  <cit>  annotations. this json implementation is made available as a varioml java library  <cit> , which can be used to read and write xml and json versions of the format. an api is auto-generated from xml instances, providing java object representations for all varioml objects. this api will be kept synchronized with the format, and can be used as a helper tool in java applications. a json example of the source element is shown in figure  <dig> 

in addition to json support, the varioml java api supports exi, a binary compression of xml. exi support leverages the varioml xml schema, reducing file sizes and the time required for data processing operations by factors of three to ten  <cit> . while varioml is primarily focused on curated variant entries produced at the end of htp pipelines, the use of exi makes it feasible to use varioml for earlier stages of production pipelines.

the json tooling provided with varioml makes it possible for implementers to develop dynamic user interfaces with substantially less effort and cost  <cit> , expanding on the possibilities demonstrated by the ‘web analysis of the variome’ project  <cit> . a logical next step to contribute to the end-to-end variome pipeline would be to build a variant annotator widget, usable with different database implementations.

discussion
varioml has been designed to immediately serve data exchange needs for lsdb’s, focusing on curated variant entries produced at the end of data production pipelines. however, as an end-to-end variation pipeline comes together, for a common specification to be truly useful, it must be extensible beyond the immediate lsdb use-case. next-generation sequencing pipelines make possible exon-capture scenarios in which tens to hundreds of patients are sequenced in one or more genes, presenting new challenges in variant calling, annotation, and data sharing  <cit> . to meet the holistic data integration challenge and realize the grand variation pipeline, we need to harmonize the data models, data standards, and content specifications in use at each step, to encompass the descriptive needs of all lsdbs, standardizing their quality and accuracy, and enabling more comprehensive and high quality data curation  <cit> . a number of projects have previously attempted to fill these requirements and provide a single multipurpose implementation format for lsdbs, yet have come up against difficulties at multiple levels of design and implementation  <cit> . variation data can be arbitrarily complex, making a single standard specification elusive. lsdb use cases vary a great deal in the depth of detail and structure needed for data capture. complex standards have proven too time-consuming to implement. solutions designed in one format cannot be readily transferred to another. further hampering progress towards a common specification are the multiple strong motivations which labs have to keep variant data private  <cit> .

as work on a unified variome progresses, genetics research faces a paradox: another attempt at a variation standard will not be enough to surmount these obstacles. no matter how comprehensive our current efforts, new standards will inevitably follow. our understanding of genomic variation is rapidly evolving; multiple and often conflicting forms of variant annotation seem to be required to serve differing use cases, implementations, and viewpoints. attempts to comprehensively integrate all such descriptions in a single standard can, at this point, be expected to produce either unmanageable complexity, or inaccurate oversimplification. furthermore, looking ahead, we can be fairly certain that new discoveries and technologies will arise that cannot be presently designed for.

in designing varioml, we therefore turned away from seeking a top-down monolithic solution, choosing instead to make a lightweight framework for composing interoperable, use-case specific ‘micro-standards’ around the generalized concepts of observation targets, ontology terms, and observations, adapted from the observ-om specification  <cit> . the core set of varioml schema elements can be used as building blocks, addressing use cases from the most minimal towards the more complex, while maintaining the underlying interoperability of the data. implementations can use as many or as few of these blocks as needed, and new elements can be added into the specification as needed. however, with this extensibility also comes the danger of the fragmenting specifications into incompatible versions. while elements are utilized in an increasing number of new representations and schema, at the same time, they are also converging all variation data into a unified variome pipeline. yet equalizing these needs for divergence and convergence is a task that cannot be planned by a committee. as next generation sequencing continues accelerating both the scale and complexity of the data produced, all producers of variation data have a stake in decreasing the gap between a general variation annotation standard, and the community it serves. accordingly, varioml is intended less as a ‘completed’ specification, more as a nucleation centre around which new specifications can be developed. all variation data producers are called upon to develop this specification collaboratively.

to this end, varioml development has been turned over to the community. the specification lives inside an open collaboration framework, tightly binding new variation reporting structures to the common schema and tooling, maintaining consistent application generation capability and backwards compatibility with earlier applications and data  <cit> . we chose two forums to realize this collaboration framework: the varioml forum at the science-centered gen2phen knowledge center  <cit> , where format details are discussed alongside immediate access to a unified catalog of lsdbs and other tools for variation data integration; and varioml’s github repository  <cit> , where the schema and xml, json, java, and rdf tools are available, in addition to uml documentation that clarifies the relationships between specification and implementations  <cit> . modified or new compositions using schema elements must be reported in either of these forums and discussed openly, enabling the collaborative extension of the format without breaking existing implementations.

the open-ended nature of the varioml specification means there should continuously be elements under active redefinition and modification by the community. these features should not be implemented in applications until consensus on usage is reached. for example, the variant element allows recursive sub-elements, for cases where the reporting variant is composed of other variants located on the same or a sister chromosome. yet this and other features  are not currently implemented in applications.

CONCLUSIONS
varioml enables researchers, diagnostic laboratories, and clinics to improve the quality of human variation information, and to share that information with ease, clarity, and without ambiguity. varioml resolves the inherent tendency of variation data to diverge in format and meaning through a modular design that lives in an open collaboration framework, composed of two linked community forums.

with this open collaboration framework, the variome community itself closely binds the evolution of the annotation format and its tooling to the science of the study of human mutations. for example, as new configurations and extensions of the format are developed by various implementers, they can be discussed and improved at the gen2phen knowledge center, alongside submissions of relevant data made through cafe variome. as community consensus emerges, this agreement translates to changes in the schema and tooling in the common repository. at each step, the provenance of even small contributions are captured and can be used as microattributions  <cit> .

for such bottom-up, self-organizing management of a common variation standard to work, teams working at critical junctions in the variation pipeline must translate a passion for the vision of the unified variome, into both implementation and development of the shared standard. to date, varioml has been implemented in three applications , and is currently being tested in a fourth . in each case, varioml is used to enable push-button submission of data through the cafe variome service  <cit> .

with consensus on a minimal standard, implementation is the remaining bottleneck. users, from research teams to commercial software producers, need to focus their software-related activity to those tasks in which their resource costs are proportionally smaller than the added value afforded by adopting new tools and data models. varioml has been designed to minimize the effort required for both implementation and extension, framing the specification itself with java and json apis on the one hand, and an open collaboration framework on the other. we hope this approach proves useful throughout the variation science community, as it meets the challenge and potential of next generation sequencing, and quickens to open the path from discovery to delivery.

competing interests
the authors declare no competing interests.

authors’ contributions
mb collated the contributions of other authors, and wrote the body of the manuscript. ifacf was a central participant in defining and refining the varioml format, as a participant in gen2phen and as one of the creators of the leiden open variaton database. ol was a central participant in defining and refining the varioml format, as a participant in gen2phen and as one of the creators of the cafe variome data submission platform. ta participated in defining and refining the varioml format. aab participated in refining the varioml format, as an implementer of the specification in the bc|snpmax application. da participated in refining the varioml format, as an implementer of the specification in the gensearch application. cb participated in defining and refining the varioml format. mc participated in defining and refining the varioml format. rd participated in defining and refining the varioml format. ad participated in defining and refining the varioml format. gp participated in defining and refining the varioml format, as a participant in gen2phen and representing the national ethnic mutation databases in this activity. ms was a central participant in defining and refining the varioml format, as a participant in gen2phen and as one of the creators of observ-om, pheno-om, and the molgenis application platform. pemt was a central participant in defining and refining the varioml format, as a participant in gen2phen and as one of the creators of the leiden open variaton database. gt was a central participant in defining and refining the varioml format, as a participant in gen2phen and as one of the creators of the orcid researcher identification platform. mv was a central participant in defining and refining the varioml format, as a participant in gen2phen and as the creators of the varioation ontology. ab was a central participant in defining and refining the varioml format, as chair of gen2phen and as one of the creators of the cafe variome data submission platform. jm was a central participant in defining and refining the varioml format, as a participant in gen2phen and as the managing creator of the varioml specification. all authors participated in the design and testing of varioml. all authors read and approved the final manuscript.

