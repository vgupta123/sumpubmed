BACKGROUND
with the increasing availability of high throughput "-omics" technologies such as next generation sequencing, proteomics or metabolic profiling an enormous amount of textual data is accessible in the biomedical literature. hence, methods able to structure these heterogeneous data and to extract new knowledge gain more and more importance. learning approaches often focus on the analysis of homogeneous data sets that can be represented as graphs having vertices of a single type only. however, biological networks are complex and highly diverse and therefore often involve objects of multiple types, forming k-partite graphs consisting of different kinds of vertices. we use this representation as it provides a more comprehensive picture of the underlying structure compared to the widely used graph transformations. these so-called projections - e.g. of a bipartite network into an unipartite version - discard important information  <cit> . for instance,  <cit>  shows that in the case of metabolism the use of projections leads to wrong interpretations of some of the most relevant graph attributes, whereas the bipartite view offers a cleaner interpretation of its topological features.

the human disease network presented in  <cit>  is an example for a bipartite graph having two disjoint sets of vertices. here, structural questions need to be addressed outside of the unipartite graph setting. one set of nodes represents all known genetic disorders, the vertices of the other partition correspond to all known disease genes in the human genome. a disorder and a gene are connected if mutations in that gene are implicated in that disorder. other examples of bipartite networks are protein complex or gene-localization, gene-function or microrna-target networks. the integration of such network data then leads to complex k-partite graphs.

a key question is how to interpret the internal organization of these networks. a possible answer may be a modular decomposition, which implies the coexistence of structural subunits associated with more highly interconnected parts. we regard the identification of these a priori unknown building blocks - such as for instance functional modules in protein-protein-interaction  networks - as clustering methods. the clusters and their interconnections are essential for understanding the underlying functional properties. they structure biological data by compressing their information into a condensed form.

most available clustering methods do not treat the single node types  separately and therefore do not represent the global cluster structure of k-partite networks correctly. while this has been addressed in terms of algorithms for some time now  <cit> , not many applications were successfully implemented in bioinformatics yet, although the field commonly deals with such networks  <cit> . a particular issue that may hamper application to biological data is that most existing algorithms identify separated, disjoint clusters by assigning each point to exactly one cluster  <cit> . this is unrealistic for biological systems as e.g. genes or proteins commonly participate in multiple processes or pathways  <cit> . so far, only a few approaches exist that allow the detection of overlapping clusters. these either assign each data point to several hard clusters  <cit>  or determine a degree of membership to each cluster  <cit> . such methods are known as fuzzy clustering, but have not been applied to the common biological case of k-partite graphs.

to overcome these difficulties we developed a novel fuzzy clustering algorithm based on a non-negative matrix factorization  model  <cit> . our algorithm extends a hard clustering algorithm recently put forward in  <cit> . this algorithm clusters each node type of the graph separately and then connects clusters via a smaller, weighted k-partite graph in an alternating minimization procedure. thereby, the cluster assignment in the first step is made in a binary fashion. this disjoint clustering is a feature that is often achieved by soft clustering algorithms when not forcing explicit cluster overlap  <cit> . however, it can be easily seen that the cost function proposed is not fully minimized. our computationally efficient and scalable algorithm avoids this problem. it is similar in structure to multiplicative algorithms for nmf, with the difference that we address a three-matrix factorization problem , and have to deal with a multi-summand cost function. as our cost function is monotonous with respect to the number of clusters, our algorithm allows detection of clusters on different scales. hence, we are able to decompose the network on different resolution levels.

the manuscript is organized as follows. in the first part, we develop the fuzzy clustering algorithm and validate it on a toy example and graphs with known modular structure. then, we apply it to a tripartite disease-gene-protein complex graph representing an expanded view of the human disease network from  <cit>  extended by protein complexes  <cit> . by integrating functional annotation we demonstrate that we are able to structure this complex graph into biologically meaningful clusters on a large scale. finally, focusing on the small-scale architecture, we identify overlapping clusters that give a more comprehensive picture about gene-disease connections rather than looking at disjoint clusters alone. we exemplify how this clustering allows for reclassification, annotation or even detection of misclassified elements on a local level.

RESULTS
a k-partite graph is a graph g =  of edges e between a set of vertices v together with a partition of the vertices into k disjoint subsets vi such that no two vertices in the same subset are adjacent. for k =  <dig> this reduces to the standard graph, where we do not take into account different node types. graphs with two partitions are called bipartite. let ni := |vi| be the number of vertices in the partition i, i =  <dig> ... k. we represent the graph as a set of ni × nj-dimensional adjacency matrices a for all i, j with  <dig> ≤ i <j ≤ k. typically, each matrix element is either  <dig> or  <dig>  but we only restrict the matrices to have non-negative coefficients thereby allowing weighted graphs as well.

approach
we want to approximate g by a smaller k-partite cluster network h which we call backbone network. it is defined on the fuzzy clusters of each g-partition vi. we fix the number of clusters in partition i to mi. we denote a non-negative ni × mi-dimensional matrix c to be a fuzzy clustering of vi, if it is right-stochastic, i.e. ∑l=1mickl= <dig> for all k. its -th element ckl gives the degree of membership of the original node k to the backbone node l.

then we search for a k-partite graph h with mi × mj adjacency matrices b and a fuzzy clustering c := )i =  <dig> ...,k such that the connectivity explained by h is as close as possible to g after clustering according to c. figure  <dig> shows an example graph and its approximation by a backbone network. from the approximation, we can easily reconstruct an edge auv between two nodes u and v from partitions i and j in the original graph. to this end, we have to sum up all edge weights b in the backbone graph that connect the communities u and v are assigned to. of course, in a fuzzy environment these contributions have to be weighted by the nodes' degrees of membership c and c, respectively. taken together, the entry of the adjacency matrix can be reconstructed as the double sum

 auv≈∑x=1mi∑y=1mjcuxbxycvy. 

writing this in matrix notation, we see that the requirement of explaining maximum possible connectivity means that the adjacency matrices a are best possible approximated by factorizations of the form

 a≈cb)⊤. 

we can measure the difference between the two graphs h and g in a variety of ways. in  <cit> , this choice has been circumvented by focusing on arbitrary bregman divergences, see e.g.  <cit> , which still allow efficient reformulation of gradient-type algorithms without knowing the specific formula. this is also possible in our case of multiplicative update rules, as has been shown for nmf by  <cit> . here, we choose the minimum square distance as the cost function. this implies minimization of

 f:=∑i<j‖a−cb)⊤‖f <dig>  

where ‖.‖f <dig> denotes the squared frobenius norm i.e. the square sum of the matrix elements. this cost function is obviously monotonous with respect to the number of clusters in each partition.

algorithm formulation and relation to other work
we aim at minimizing the cost function f using a local algorithm extending gradient descent. in order to avoid the choice of update rates and to ensure positivity of both the backbone network and the degrees of membership of all nodes, we employ multiplicative update rules. this strategy is widely used in algorithms for non-negative matrix factorization   <cit> . we find the following update rules :

 brs←brs)⊤ac)rs)⊤cb)⊤c)rscrs←crsc)⊤)rsb)⊤c)⊤)rs 

we note that these update rules do not increase the cost function . this can be shown via auxiliary functions similar to nmf  <cit>  and multi-factor nmf  <cit> , which has been applied in a related model for co-clustering of microarray data  <cit> . this theoretical result implies convergences of the update rules. however, in contrast to early statements in nmf  <cit> , it does not necessarily imply convergence to stationary points of the euclidean norm ), since the update steps may be too small to reach those points. another possible drawback of such multiplicative updates is the fact that once a matrix entry has been set to zero  or to numerics), the coefficient will never then be able to become positive again during learning. this is one of the reasons, why sometimes alternating least-squares algorithms are chosen  <cit> .

we have not yet taken into account the constraint that the fuzzy clusterings c are required to be right-stochastic. we force this constraint by regularly projecting each row of c onto the sphere of the 1-norm. the final fuzzy k-partite clustering algorithm is summarized in figure  <dig>  implementations are available as additional files  <dig> and  <dig> 

our algorithm has two nested loops over the number of partitions k, hence its runtime depends quadratically on this number. the update rules for c and b however are fully vectorized and contain only matrix operations with non-square matrices. their time complexity is dominated by the occurring matrix products: multiplying two matrices of sizes s <dig> × s <dig> and s <dig> × s <dig> is of complexity o. assuming that the cluster numbers mi are smaller than the largest two partition sizes, the total time complexity of the fuzzy clustering algorithm can then be estimated as

 #iterations×o. 

here, nmax <dig> and nmax <dig> denote the sizes of the largest and the second-largest partition, mmax is the maximum number of clusters within any partition. hence, the runtime grows only quadratically in the total number of nodes in the case of graphs with similarly large partitions. in general, the runtime is linear in each partition's size ni and cluster number mi. we additionally confirmed this theoretical analysis by simulations shown in additional file  <dig> 

algorithm evaluation - toy example
for illustration, we applied our algorithm to a bipartite graph having several vertices connected with all vertices of the other partition . figure  <dig> shows that these vertices are assigned to two clusters with distinct degree of membership, whereas vertices partially connected are element of a single cluster only . this demonstrates the idea and importance of using a fuzzy that allows for overlapping clusters.

another way of illustrating the graph decomposition is shown in . it is clearer especially for larger graphs. first, we plot hierarchical clusterings of the nodes' degrees of membership in partitions v <dig> and v <dig>  and c). this facilitates the identification of overlapping clusters  or hard cluster assignments . the backbone graph b is shown bottom right. this backbone graph is densely connected in our example.

algorithm evaluation - performance analysis
before applying our algorithm to real-world data, we tested its behavior on simulated data with controlled cluster structure. in particular, we compared it to the hard clustering algorithm from  <cit> . we used exactly the same stopping criteria for both algorithms. we generated random, modularly structured k-partite networks as described in the methods section. in order to compare algorithm performance, we determined runtime, final cost function value and the quality of cluster estimation in four different settings. we restricted ourselves to bipartite and layered tripartite graphs with two different noise settings because long et al. provided code for analyzing these special cases only.

we found that while the method of long et al. performed around two times faster, our algorithm produced around 10% lower cost function and was able to estimate the cluster structure better . this difference in algorithm runtime originates from the much more fine-tuning of the continuous degrees of membership compared to hard cluster assignments. these require less update steps until convergence.

algorithm evaluation - stability of clusters
in contrast to deterministic methods like for instance singular value decomposition , nmf-based methods have problems concerning robust computation. even for standard unipartite nmf there is no unique global minimum of the cost function  <cit> . our algorithm aims to minimize the cost function using a local optimization strategy extending gradient descent. this implies that the algorithm only converges to a local minimum. the algorithm is indeterministic, it does not converge to the same solution on each run due to the stochastic nature of initial conditions. thus, following the general proceeding in literature on nmf  <cit> , we compare the local minima from several different starting points , using the results of the best local minimum found.

in order to illustrate the stability of the fuzzy clustering algorithm we applied it to a toy network with well defined cluster structure using multiple restarts. we compared the clustering results of  <dig> runs and quantified the cluster stability using a fuzzy variant of the rand index recently proposed in  <cit> . as we show in additional file  <dig>  our algorithm is able to reproduce the true clustering results in more than 70% of the runs. hence, we can not guarantee that the local optimization finds a global minimum of the cost function, and with this the cluster structure of a graph. this illustrates the critical need for multiple restarts.

structuring biological data
in order to exemplify the analysis of biological networks, we applied our algorithm to a layered tripartite disease-gene-protein complex network, see figure 5a for an illustration. in this graph, a disorder and a gene are connected if mutations in that gene are implicated in that disorder. a complex and a gene are linked if the gene is coding for a protein part of the complex. we constructed this graph by integrating the human gene-disease network from  <cit>  and protein complexes from the corum database, as explained in the methods section.

an important feature of many biological networks is their hierarchical organization, where higher-level structure is composed of multiple instances of a lower-level structures of different types  <cit> . this implies that small groups of nodes organize in a hierarchical manner to increasingly large groups on many different scales  <cit> . to account for this topological characteristic we have to be able to extract relevant information on an appropriate, pre-defined resolution level.

we addressed this issue by analyzing the very global structure and a detailed local level of the disease-gene-protein complex network. in the following, we first present the results of a decomposition into large clusters which demonstrates that our method is generally applicable to biological data. then, we discuss smaller clusters that allowed for a precise interpretation of single elements.

as discussed before, due to its random initialization our algorithm is inherently indeterministic. different clustering results have of course a significant impact on the interpretation of the biological meaning of the results. we show in additional file  <dig> that our algorithm is quite stable on graphs with well defined cluster structure. to avoid analyzing a local minimum, we discuss performance over  <dig> runs and verify that the disease-gene-protein complex network has indeed a defined cluster structure in additional file  <dig> 

dealing with a theoretically monotonous cost function, it is hard to determine the optimal numbers of clusters for each node type in which the graph has to be partitioned. appropriate values are not apparent from prior knowledge about our data set. we therefore chose desired approximate resolutions mg for the gene partition. the number of clusters mc and md in the protein complex and disease partitions were then scaled according to their partitions' sizes . we use this heuristics, since a brute-force sampling of the three-dimensional parameter space is computationally out of reach. then, we looked for plateaus and steep drops in the cost function within a certain range around this value mg and chose a local optimum of the algorithmically found decompositions. in additional file  <dig> we performed simulations showing that the profile of the cost function may indeed indicate for a proper number of clusters in graphs with known cluster structure.

large-scale clustering
first, we focused on the identification of large clusters. figure 5b shows the distribution of the cost function values after algorithm convergence for each parameter setting. in the following discussion, we used  =  as it showed the first steep drop in the cost function. moreover, here we observed a significant local minimum of the cost function values of the algorithmically determined decompositions. from the illustration of the decomposition in figure  <dig> we see that the resulting clusters vary strongly in size. for all partitions, the majority of elements was assigned to a single cluster with degree of membership μ > =  <dig> . this demonstrates that the analyzed graph has a well defined cluster structure at the desired resolution level. the corresponding histograms are given in additional file  <dig>  therein we also discuss an example illustrating that such large degrees of membership are rarely found in graphs lacking any cluster structure. however, there exists also a considerable amount of elements assigned to several clusters simultaneously, e.g. in complex clusters  <dig> and  <dig>  gene clusters  <dig> and  <dig> or disease clusters  <dig> and  <dig>  this confirms the usefulness of our fuzzy approach.

cluster evaluation
to determine whether the resulting clusters are biologically reasonable, we applied go enrichment analysis  to the clusters of the gene partition. we found, for instance, that for the genes in the two overlapping clusters  <dig> and  <dig> significantly enriched go-terms are cell cycle and cellular response to stimulus/stress. genes in cluster  <dig> can be related to e.g. death, cell proliferation and developmental processes, whereas cluster  <dig> represents translation. gene expression-associated go-terms such as rna processing and splicing were detected in cluster  <dig>  this shows that our method was able to identify biologically meaningful functionally enriched clusters. the complete tables for go enrichments in all clusters are shown in additional file  <dig> 

the interconnectivity of the in total  <dig> clusters is sparse . the skeleton for the global cluster structure for both underlying bipartite graphs  demonstrates that locally overlapping clusters also tend to interconnect with the same clusters of the other partition; for instance, disease clusters  <dig> and  <dig> are both connected with gene cluster  <dig>  to evaluate the extracted backbone graph, in the following we tested the hypothesis that interconnected clusters of different partitions are also functionally correlated.

gene-complex interconnections
assuming that the resulting interconnected gene and complex clusters are functionally related, one expects to see a similar profile for funcat annotation and backbone interconnectivity of each cluster. this hypothesis was verified in figure  <dig>  where for instance complex cluster  <dig> and the interconnected gene clusters  <dig> and  <dig> show a high binary funcat correlation. the difference score  between backbone interconnectivity and annotation correlation is  <dig> , resulting in a p-value < 10- <dig>  to compare the results of the fuzzy clustering approach with the results for the disjoint clustering method from  <cit>  we applied the algorithm with the same parameter settings and identical annotation and randomization procedure to the obtained clusters. for hard clustering we achieved a larger difference score of  <dig>  which corresponds to a significant p-value of  <dig> .

gene-disease interconnections
to ascertain that our method is able to detect biological feasible clusters in all partitions, we determined for each gene and disease cluster disorder class profiles. again, we observed a high similarity between backbone interconnectivity and disorder correlation having a difference score of  <dig>  . for instance, gene cluster  <dig> and  <dig> and the interconnected disease clusters  <dig> and  <dig> show a high disorder correlation .

small-scale clustering
we showed that our method is able to both detect and interconnect biologically meaningful clusters. however, due to their size of about  <dig> genes on average the single clusters are hard-to-interpret. the detection of smaller clusters representing biological units enables a precise biological interpretation. in the following, we describe results for  = , where we found the lowest value of the cost function . this setting accounts for an average cluster size of  <dig> genes.

in order to make use of the cluster overlaps, we looked for genes assigned to more than one cluster with a degree of membership of μ >  <dig> . we considered this threshold as significant as it is 50-fold higher than assigning each gene uniformly to all  <dig> gene clusters with equal degree of membership μ =  <dig> .

as a showcase we chose mecp <dig>  a protein that functions as a key factor in epigenetic transcriptional regulation. it is known to be involved in neurodevelopmental and psychiatric disorders such as autism, mental retardation and angelman syndrome  <cit> , and was assigned to three distinct gene clusters:  <dig> ,  <dig> ,  <dig> . these clusters mainly cover neurological , psychiatric  and pleiotropic  genes having a degree of membership μ >  <dig> . this is illustrated in figure  <dig>  where we visualized the backbone interconnectivity and the fuzzy clustering of the nodes in the neighborhood of mecp <dig> 

we then analyzed the nine disease clusters interconnected with the three gene clusters in the backbone network. in total,  <dig> disorders representing mainly psychiatric  and neurological  disorders were assigned to eight disease clusters with a degree of membership of μ >  <dig> ;  <dig> out of  <dig> psychiatric disorders available in the network analyzed are present in three disease clusters.

another large fraction of these disease clusters are disorders classified as multiple. most of them  show also neurological diseases such as mental retardation  <cit> . we also identified the ophthamological disorder blepharospasm, an adult-onset focal dystonia that causes involuntary blinking and eyelid spasms  <cit>  for that a known polymorphism in the dopamine receptor drd <dig> is associated with  <cit> . this is a subform of dystonia and classified as a neurological disorder  by the who  <cit> .

furthermore, we found anorexia nervosa to be present in the analyzed clusters. it is annotated as a nutritional disorder by  <cit> , however it represents a life-threatening complex psychiatric disorder  <cit> . another so far unclassified disease alcohol dependence was assigned to the interconnected cluster. it is classified as a mental and behavioral disorder  and in a broader sense can be considered as psychiatric disorder.

in contrast, applying the hard clustering algorithm, mecp <dig> was assigned to a single gene cluster which is connected to two disease clusters. although all associated disorders were identified correctly, no further information could be obtained from the clusters. however,  <cit>  reports an epigenetic overlap in autism-spectrum neurodevelopmental disorders as mecp <dig> affects the regulation of ube3a expression. these relations became immediately apparent in the cluster result of our fuzzy approach: both genes were mutually assigned to gene cluster  <dig> that identifies the phenotypic and genotypic overlaps, whereas direct links to known connected genes are missing in the hard clustering .

CONCLUSIONS
the widespread application of high-throughput methods such as microarrays or next generation sequencing has considerably increased the amount of experimental data and the information available in biomedical literature that is accessible to text-mining approaches  <cit> . these data can usually be represented in terms of networks. over the last years, networks have emerged as an invaluable tool for describing and analyzing complex systems. however, we need to take into account that network information is commonly available for various types of nodes. especially integrative biological networks are k-partite  <cit> .

another important feature of biological networks is their hierarchical organization, implying that small groups of nodes organize in a hierarchical manner to increasingly larger groups on many different scales  <cit> . this necessitates the analysis of these objects on various resolution levels. furthermore, many proteins or genes are pleiotropic, and often associated with many functions. hence, clustering algorithms that assign elements into several functional modules are essential  <cit> .

we presented a novel computationally efficient and scalable graph clustering algorithm that is capable to deal with all these described issues. further, it does not require any a priori knowledge about the data set. results on a tripartite network, constructed by integrating the human disease network and protein complexes, demonstrated that we could identify and interconnect biologically meaningful clusters on different scales. overlapping modules gave a more comprehensive picture of e.g. gene-disease connections than looking at disjoint clusters alone. summarizing, the proposed fuzzy clustering algorithm is suitable to compress and approximate the underlying topology of heterogeneous biological networks, which facilitates the understanding of such networks on multiple scales. it is freely available and readily applicable to many further problems.

