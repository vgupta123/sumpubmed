BACKGROUND
an essential step in biological text mining, gene normalization  is to link a mention of gene or gene product appearing in a text to a standard database identifier referring to a specific gene entity  <cit> . gene normalization is uniquely challenging for many reasons. first, genes are an evolving concept in biology and gene names are created and eliminated constantly. as a result, there are many nomenclature standards but authors rarely follow the standards strictly. meanwhile, orthologous genes and gene products of different species may share the same names but have different database identifiers and create ambiguity  <cit> .

many gn systems have been developed since the biocreative  1b task challenge evaluation  <cit> . the task is to normalize genes of three selected model organisms. the results suggest that gn performance may be organism-dependent due to the naming conventions associated with each organism  <cit> . the subsequent biocreative ii gn task focused only on human genes. the best team achieved a f-score of  <dig>   <cit> , which is comparable to that of the bc 1b. a typical gn system usually consists of gene mention tagger, dictionary, matcher and disambiguation modules, a two-stage approach where the first stage is to use a tagger to tag all gene mentions in a text followed by the second stage of matching gene mentions to a dictionary and then resolving disambiguation, if multiple entries are matched  <cit> . lau et al.  <cit>  used a rule-based system and achieved a f-score of  <dig>  whereas hakenberg et al.  <cit>  achieved an f-score of  <dig> , also with a rule-based system. geno  <cit>  used both symbolic and statistical methods to achieve a f-score of  <dig>  . all of the above results and many other related gn systems were evaluated on the biocreative ii gn dataset and applied a relatively simple or out-of-shelf gene mention tagger, and emphasized more on dictionary matching and disambiguation. baumgartner et al.  <cit>  and vespoor et al.  <cit>  therefore suggested that with clever dictionary matching and disambiguation, performance of a gn system is largely dependent on the recall but not the precision of the underlying gene mention tagger because false positive gene mentions will be filtered out. since it is straightforward to have high recall if precision can suffer, this conclusion seems to implicitly imply that improvement in gene mention tagging is unnecessary for high performance gn systems. this point of view was further corroborated by the fact that some of the top performing gene mention taggers in the biocreative ii gene mention  task failed to deliver good results in the bc ii gn task, though this is partly because the training corpus of the bc ii gm is incompatible with the bc ii gn task. the gm corpus contains genes and gene products of all species as well as mentions of gene family that have no database ids at all, while the bc ii gn task focused only on human genes.

unlike similar tasks in the past biocreative challenges, the gn task of biocreative iii is particularly challenging because it is not species-specific. moreover, instead of using abstracts, it is required to process full-length articles. these differences make the task closer to the real literature curation tasks by human curators but in such a setting, an ineffective gene mention tagger may produce a huge number of ambiguous false positives that overwhelm subsequent filtering steps while still missing many true positives of gn.

in this paper, we show that improvements in gene mention tagging can indeed contribute to performance in cross-species and full-text gn. we present our gn system participated in the biocreative iii gn task  <cit> . the gene mention tagger in our gn system is an advanced version of aiiagmt   <cit> , which was first developed for the biocreative ii gene mention tagging  task  <cit> . in  <dig>  we built a conditional random fields -based gene mention tagging system  <cit>  by integrating bi-directional parsing with a rich set of features. it achieved a f-score of  <dig>   on the bc ii gm test corpus and ranked the second among  <dig> participants  <cit> . in order to maximize the potential of integrated bi-directional parsing models, we attempted different asymmetric feature settings to establish up to  <dig> models and integrated them according to the crf output scores. the integrated model achieved  <dig>  in f-score , a significant improvement from the original version. this work was incorporated into the biocreative metaserver  <cit>  and distributed independently as aiiagmt  <cit>  since.

we extended aiiagmt further for the gn task. the latest version features soft tagging, in the sense that our tagger tags sets of overlapping gene mention variants with accurately estimated confidence scores. soft tagging allows for a higher chance of precise match in the gene name dictionary. the recall of soft tagging is nearly perfect  and therefore, it is highly likely that one of the overlapping variants is a correct gene mention. soft tagging uses an ensemble of taggers for gn as in  <cit>  but is fundamentally different in that soft tagging makes no attempt to select the best pair of boundaries for overlapping gene mention candidates but retains all high confident candidates for dictionary matching. soft tagging effectively provides soft boundaries of a gene mention. as a result, the need to deal with spelling variations, partial matches and ambiguities can be alleviated.

other key features of our gn system include:

• short form-long form filtering: we have developed an accurate abbreviation definition detector bioadi  <cit>  and we used it to filter out incorrectly tagged gene mentions.

• species resolution before dictionary matching: since ambiguous gene names are rare within a single species  <cit> , our system resolved species first and therefore minimized the need of disambiguation.

• regular expression extension of entrez gene records retrieved by a document retrieval system: we applied a document retrieval system for dictionary matching. we have an idea of a data-driven approach to dictionary matching so that the problem of gn can be solved as information retrieval, but at this moment, we have not collected a sufficiently large corpus of documents to serve as the dictionary. instead, we used regular expression to expand entries in entrez gene records and then used regular expression again to filter out false query results.

our gn system achieved a precision of  <dig>  and a recall of  <dig>   on the biocreative iii gn training corpus and a precision of  <dig>  and a recall of  <dig>   on the biocreative iii gn test corpus with the silver annotation of  <dig> articles. its tap-k scores are competitive to the best results among all participants, never ranked below third in all combinations of test corpora and the selection of k.

methods
data preprocessing
the training and test data of the biocreative iii gn task, provided by the biocreative organizers, consist of two file types for each example article: pubmed central  xml files and pdf files. we parsed the pmc xml files to plain-text files by xpath. then we extracted sections without a sec-type attribute to exclude references, methods, materials, etc. and segmented each remaining section into sentences as our input data for gene normalization. we did not use pdf files.

system organization
• gene mention tagging module  tags variants of overlapping gene or gene product mentions from the input text. these variants are candidate mentions that may overlap with other candidate mentions but have different boundaries.

• gene mention evaluation module  evaluates the quality of gene mentions extracted by the gmt by estimating their confidence scores.

• species designation module  designates a species  to each variant.

• gene normalization module  assigns a corresponding entrez gene record id to each variant.

gmt and gme together accomplish the soft tagging of overlapping high confidence gene and gene product mention variants in our gene normalization system. the system was implemented in java  <dig> . <dig> running on 32-bit linux. implementation of model learning and inference algorithms that we used, including crf and logistic regression, was modified from the source codes of mallet  <dig>   <cit> .

soft tagging: gene mention tagging module
our gene mention tagger was modified from aiiagmt that we developed  <cit> . one of the changes is that we reduced the number of features from ~ <dig> million to ~ <dig> million to improve the computational performance without sacrificing accuracy. the feature types removed were part-of-speech  tags and sliding window features of pos-tags and case-sensitive words.

we then attempted to maximize the recall of our gene mention tagger as suggested in  <cit> , yet maintain the false positives at a manageable level. we used a finding in our previous work that the union of the top most-probable tagging solutions by bi-directional parsing models may achieve a nearly perfect recall  <cit> .

for example, given a sentence as follows:

acetyl-coa carboxylase from yeast is an essential enzyme and is regulated by factors that control phospholipid metabolism.

in this case, “acetyl-coa carboxylase” is the only gene mention tagging acceptable by bio-curators. figure  <dig> shows some of the tagging solutions by a crf model for this example. the sentence will first be converted into a list of tokens using fine-grained tokenization by breaking any non-alphabet/digit characters. then a crf model will label each token using ibo <dig> representation. usually, only the most probable labeling will be selected as the solution. but to maximize recall, we let each model generate the top  <dig> most probable solutions. figure  <dig> shows seven of them. these solutions were inferred by the viterbi “max--lattice” algorithm implemented in mallet  <cit>  based on the given crf model parameters. since we have forward parsing and backward parsing models, combining their solutions gives  <dig> solutions for each sentence. we computed union of these solutions for the bc ii gm corpus and evaluated the result, which showed that recall of such a tagger was  <dig>  with a precision of  <dig> . that is, this result comprises of nearly all true-positives of the corpus.

these solutions tend to overlap and differ in their boundaries. decoding the ibo <dig> representation into human-readable text for the example solutions in figure  <dig>  we obtain five non-redundant gene mentions:

• “acetyl-coa carboxylase”,

• “coa carboxylase”,

• “essential enzyme”,

• “carboxylase”,

• “coa carboxylase from yeast”

these gene mentions can be regarded as variants of the true positive “acetyl-coa carboxylase.” as described above, we expected that one of the variants could be a true-positive. but instead of committing to a single hard choice of the boundaries, we make soft choices by tagging a set of overlapping variants with different boundaries. with these variants, we can avoid putting efforts into manually creating rules to remove descriptive words preceding or following a gene mention to match gene names in entrez gene database, such as {human, rat, mouse, gene, protein, mrna, cdna, oncogene}.

however, these variants will overwhelm the gn performance by abundant false positives. there is a need to evaluate the quality of mentions to set priority among variants. thus, we developed the gme module to estimate a confidence score of each variant. it helps us to remove most false positives without harming the high recall from combined solutions. tagging overlapping gene and gene product mentions with confidence scores is what we refer to as soft tagging. the details of confidence score estimation will be described in next section.

we also used bioadi  <cit>  to filter out false positives. bioadi can automatically identify all pairs of abbreviation and its long form definition in an article. if a long form is not tagged in the sentence but its abbreviation is tagged, all appearances of that abbreviation in the article will be marked as invalid and will be eliminated from the result of the gmt module.

for example, “naa” is a potential gene variant tagged in the following text:

…metabolites in  <dig> patients: n-acetyl-aspartate , creatine…

“naa” is identified by bioadi as the abbreviation of “n-acetyl-aspartate.” suppose that a gene mention tagger mistakenly identifies “naa” as a gene mention. however, from the linkage of “naa” and “n-acetyl-aspartate,” we can infer that naa may not a valid gene mention. therefore, all “naa” tagged in the sentences of the same article will be considered false positives and eliminated from the output. table  <dig> shows the impact of the application of bioadi to the gn task, evaluated on the training corpus of the bc iii gn task. the result shows that it mainly contributed to the precision.

soft tagging: gene mention evaluation module
the gme module assigns a confidence score to each of the variants tagged softly by the gmt module in the corpus to complete the soft tagging process. we did not use scores from the crf model as our previous work  <cit>  for this purpose because crf scores are for the labeling of a whole sentence, where there could be multiple gene mentions. but here we want scores for variants of gene mentions. ideally, these scores of variants of overlapping gene mentions should reflect the probability that a variant is a true positive.

training data preparation
we used a machine learning method to evaluate and score each variant extracted by the gmt module. the training data was extracted from the bc ii gm training corpus  where  <dig>  sentences were used to train a new crf model and the remaining  <dig>  sentences for testing. the crf models tagged  <dig>  unique instances  which were annotated as either bio-curator approved gene mention or not. the annotation is available from the biocreative ii gm training corpus, which includes manually identified gene mentions and acceptable alternatives  by bio-curators. for instance, {“amniotic fluid alpha fetoprotein”, “fluid alpha fetoprotein”, “alpha fetoprotein”, “alpha” } are four variants of “amniotic fluid alpha fetoprotein”, but only “amniotic fluid alpha fetoprotein” and “alpha fetoprotein” are bio-curator acceptable variants. these variants are annotated as positive examples while others are negatives. we therefore created a new corpus of  <dig>  positive and  <dig>  negative examples to train machine learning models.

feature design
we designed a set of features characterizing the distinction between positive and negative examples and divided them into four types as follows:

• frequency of variant: the frequency is a measure of how frequent a variant occurs in the set of combined  <dig> solutions. for example, consider the set of solutions shown in figure  <dig>  “acetyl-coa carboxylase” is tagged three times, “coa carboxylase” and “essential enzyme” twice, and all others once. these counts are then normalized as their frequncy. figure  <dig> demonstrated positive correlation between frequency and precision when tested on the bc ii gm training corpus, suggesting that a variant with a high frequency is more likely to be a true positive.

• morphological features: this type of features describes variants’ morphology to differentiate between common words and gene mentions listed as:

– has uppercase/lowercase/digit

– start with uppercase/lowercase/digit

– end with uppercase/lowercase/digit

for example, “il2r” is an abbreviation of “interleukin  <dig> receptor.” it starts with an uppercase “i” and ends with an uppercase “r.” starting and ending with uppercase letters is rare among common english words.

• content features: content tokens are tokens of gene variants. for example, “alkaline” and “phosphatases” are the content tokens of “alkaline phosphatases.” the content tokens of a variant is the most informative to reveal its identity. for example, the word “gene” is one of the tokens in “beta-galactosidase reporter gene”. the token “gene” is a good indicator that “beta-galactosidase reporter gene” is highly likely to be a gene mention. before extracting this type of features, we normalized each variant to lowercase letters and removed all punctuations, then tokenized it into a list of tokens.

• contextual features: the contextual background is also valuable. we defined two tokens preceding and following gene variants as context tokens. for example, the contextual background of “cat” from a passage “…with the cat gene of the s. aureus… ” clearly shows that “cat” is a gene rather than an animal.

from  <dig>  training examples, we extracted  <dig>  features. most of them are binary features. only the frequency of variant is continuous ranging from  <dig> to  <dig> 

model training and evaluation
we chose the logistic regression model for gene mention evaluation to take advantage of its continuous output between  <dig> and  <dig>  we regarded the output value as a confidence score to indicate the importance of each variant. by using the features described above, we evaluate the performance of the model by 5-fold cross-validation on the training examples. it achieved an average accuracy of  <dig>  with a standard deviation of  <dig> .

we then trained a model with all available examples and regarded it as a scoring function for each variant. to evaluate its efficacy, we tested it on the biocreative ii gm test corpus. by setting different score cutoff thresholds, we can measure the changes of performance related to the thresholds. when tested on the gm test corpus, we designed a recursive algorithm to select exactly one with the maximal score from overlapping variants. figure  <dig> shows the performance with different thresholds. the result shows that the precision keeps growing as the threshold increases, while the recall declines. the number of false positives drops from  <dig> with no threshold to  <dig> with threshold =  <dig> .

the score helps determining the boundaries of variants, which is crucial to dictionary matching. for example, there are two variants of gene mentions in “human na,k-atpase beta subunit,” with their scores: {“human na,k-atpase beta”,  <dig> } and {“human na,k-atpase”,  <dig> }. without “beta,” it would be impossible to retrieve the correct gene id.

in our gn system, we did not select the best variants but only use the threshold for filtering. for the bc  <dig> gn task, we used  <dig>  as the threshold.

species designation module
one of the major causes of gene name ambiguity is sharing of gene names of different species. otherwise, ambiguous names are rare for genes of a single species. the ambiguity mostly comes from homology, gene family, and overlaps and evolving of nomenclature standards. chen et al.  <cit>  reported a study showing that only  <dig> % official symbols were ambiguous within the organisms but for  <dig> organisms combined,  <dig> % of symbols were ambiguous. the dictionary provided for the bc ii gn task contains a large collection of unofficial synonyms of gene names for human. among  <dig>  distinct names for  <dig>  gene entities, only  <dig> , or  <dig> %, are ambiguous, confirming that even if unofficial aliases are considered, ambiguous names are relatively rare for human genes. consequently, a better strategy of gn is to designate species before assigning a gene id for a candidate gene mention.

the species designation module is to designate each variant a ncbi taxonomy database  <cit>  standard identifier . we built a module based on dictionary matching and three heuristic designation rules to achieve the goal. by merging dictionaries of the ncbi taxonomy database and linnaeus  <cit> , which contains dictionary packs for cell lines-species and genera-species reference, we established a dictionary of  <dig>  entries of species names . each entry is linked to a specific taxid. in this dictionary, each taxid has a median of  <dig> variants of species names ranging from  <dig> to  <dig>  .

to assign species to variants, we used three rules as described in  <cit> . the first rule  is to assign taxid of the species mentioned within or preceding the variant . the second rule  is to assign taxid located in the same sentence. lastly, the third rule  is to assign taxid of the species mentioned most often in the entire article. with rule  <dig>  we can assure that all variants will be assigned with one taxid.

gene normalization module
the gn module that we built is to assign a set of overlapping gene mention variants to a specific identifier  of entrez gene records  <cit> . previous works in gn emphasized heavily on disambiguation of multiple matches of a gene mention against a dictionary. however, previous works mostly tried to solve single-species gn from abstracts, while gene name ambiguity in a single species is rare. then where did all the ambiguous matches come from? our answer is that this is because the coverage of dictionaries is not sufficient to cover all gene name aliases and their spelling variants. to deal with this, many gn systems used approximate string matching and created many “artificial ambiguities.”

one of our solutions to deal with this problem is to retain all overlapping variants with confidence scores higher than a threshold by soft tagging. the idea is to increase the chance to find a match in the dictionary. our solutions also include to designate species first and to construct a high coverage dictionary. however, due to time and resource constraints, it was prohibitive for us to construct a high coverage dictionary before the submission deadline. instead, we extended the indexing and retrieval functions of a document retrieval system for dictionary matching as our current solution. the resulting module is composed of two phases: retrieval phase and resolving phase.

retrieval phase
we designed the retrieval phase to speed up the retrieval of the most relevant gene entries and to narrow down the search space to a small fraction of gene entries to reduce the expensive computation in the resolving phase. we used apache lucene  <cit> , a high-performance and full-featured text search engine library, to index the entire entrez gene entries and to retrieve the corresponding gene entries of gene mention variants.

we obtained gene names from the columns of {symbol, synonyms, dbxrefs, description, symbol from nomenclature authority, full name from nomenclature authority, other designations} of gene_info.gz  <cit> . we created an index for each gene name with its sources taxid, geneid and column header and then stored it in lucene. a gene name will be listed with its sources as in this example:

.

before tokenization performed by lucene for indexing, we passed the text of the name through a preprocessing step of five rules given in table  <dig> to cover more spelling variants and changed all uppercase letters into lowercase letters to ignore case sensitivity. besides, { <dig>   <dig>   <dig>  …} and {i, ii, iii, …}, as well as {alpha, beta, gamma, …} and {a, b, g, …}, were regarded as interchangeable. compiling a query consists of two steps:

⌴ is used to represent a character space.

 <dig>  we transform gene variants with the rules given in table  <dig> to obtain a normalized  for gene name search. in this example, the gene name “il1-alpha” will be transformed into the follows: i1⌴⌴

 <dig>  we use the taxonomy id obtained from the species designation module as the second criterion for taxid search. in this case, the taxid will be  <dig> .

to retrieve the most relevant entries against a given set of variants, we compiled a query with each variant text and its taxid to search the indexed entries in lucene. we regarded the top  <dig> search results returned by lucene as the candidates. for example, the search results listed in table  <dig> are lucene’s search results with regard to the query . then a regular expression pattern derived from the query text were used to filter out the results whose names failed to match the pattern before the search results were passed to the next phase. this process is necessary to remove partial matches returned by lucene. in this case, the query text is “il- <dig> alpha” and the query results are given in table  <dig>  the entries with the gene names of {il1a, il1alpha, il-1a, il- <dig> alpha} will be retained because they match the regular expression pattern of “il- <dig> alpha”.

since the gme module retains all overlapping variants unless their confidence scores are below the threshold, for a set of overlapping variants at most a entrez gene id should be returned in the final output. usually different variants will match the same entrez gene id. but still in some cases, they may match different entrez gene ids. for example, “il- <dig> alpha” and “il-1” are two overlapping variants that match two distinct entrez gene ids. to determine a correct entrez gene id, our approach is to choose the match of the longest variant. this is a simple yet reasonable approach to disambiguation.

resolving phase
the retrieval phase produces a list of entries as shown in table  <dig>  if there is only one unique geneid in the list, we assigned the geneid to the given variant. in this example, “il- <dig> alpha” will be assigned to geneid: <dig>  if more than one unique geneid in the list, we used a heuristic approach to geneid assignment: assign the geneid of an entry which was extracted from the columns {symbol, symbol from nomenclature authority, full name from nomenclature authority} in entrez gene records. if none satisfies this prerequisite, we will ignore this list of entries. we used the score of each variant assigned by the gene mention evaluation module as the final score as the gn output.

RESULTS
performance of soft tagging
soft tagging is accomplished by the gene mention tagging module and gene mention evaluation module in our gene normalization system. advantages of soft tagging include: first, we can use the confidence scores to adjust the trade-off between recall and precision by setting a cutoff threshold to remove variants below a threshold. second, the scores of variants are useful to set priority when we are required to make a choice among them. to analyze the performance of soft tagging as a gene mention tagger, we tested it on the biocreative ii test corpus. each variant has a confidence score estimated by the gme module. at first, we did not do any selection of these variants by their scores. we then tested its gene mention tagging performance with different thresholds. the results are shown in figure  <dig>  the results show trade-off between precision and recall. when the threshold is set to  <dig> , the recall is  <dig>  and precision is  <dig> , a  <dig> percent drop in recall from zero threshold but a  <dig> percent gain in precision. compared to our previous work  <cit> , the new gm module with the best f-score  <dig>  performs one percent lower than the best gm f-score of our submission to the bc ii gm task, which achieved  <dig>  f-score with a precision of  <dig>  and a recall of  <dig> . this is mostly because overlapping tagging solutions contain only at most one true positive but the others are all false positives. the precision will therefore suffer much because of these false positives. to alleviate this type of error, we designed a recursive algorithm to select variants with the highest score within a passage of a text. thus only variants with the highest score will be tagged as the gm results. the performance with this selection is reported in figure  <dig>  the f-score was improved to  <dig>  with a precision of  <dig>  and a recall of  <dig>  with  <dig>  threshold. this is  <dig>  percent higher than our previous work. compared to its “without-selection” counterpart, it accomplished nearly  <dig> percent of improvement in f-score from  <dig>  to  <dig> . consequently, soft tagging with estimated confidence scores can improve the performance of gene mention tagging.

evaluation of species designation module
we used three heuristic rules to designate taxid for each variant. to analyze their impact on gene normalization, we tested their combinations on the biocreative iii training corpus of  <dig> full-annotated articles, and regarded rule  <dig> as the baseline. the results are listing in table  <dig>  the use of rule  <dig> achieved a f-score of  <dig> , with the highest precision of  <dig>  among all tests. recall that rule  <dig> is the most intuitive rule to designate a species to a variant when a species preceding the variant. rule 1+ <dig> achieved a  <dig> percent improvement in the recall, but lost  <dig> percent in the precision, suggesting that designating species co-located with variants in the same sentence provides modest contribution when rule  <dig> is not applicable. remarkably, rule 1+2+ <dig> boosts the recall by about  <dig> percent compared to the performance of rule 1+ <dig> and rule  <dig> only turns out to perform better than both rule  <dig> and rule 1+ <dig>  in fact, rule  <dig> only even outperforms rule 1+2+ <dig> in tap- <dig> even though its f-score is worse. this may be due to the fact that the number of output gene ids using rule  <dig> only is larger than that using rule 1+2+ <dig> and tap-k favors a long list of output. performance of rule  <dig> shows that analyzing text is required to designate species for a large proportion of variants. a reasonable explanation is that papers usually focus on a small number of organisms .

analysis of gene normalization module
we submitted  <dig> runs for the biocreative iii gn task evaluation. as we know, the entrez gene database is frequently updated. run  <dig> and run  <dig> used two different versions of entrez gene downloaded in may  <dig> and july  <dig>  respectively. run  <dig> is the union of run  <dig> and run  <dig>  the most remarkable difference between the versions of may and july is that all records of taxid: <dig>  were moved to taxid: <dig> . this change caused a conflict with our taxonomy dictionary, an integration of linneaus and ncbi taxonomy database downloaded in may  <dig>  all variants with taxid: <dig> cannot be correctly designated to entrez gene entries, and must be redirected to taxid: <dig> for the version downloaded in july  <dig> 

to let participants evaluate the performance of these submitted runs, the biocreative organizers released four annotations of the biocreative iii gn test corpus with tap-k  <cit>  evaluation scripts version  <dig> . one of them is annotated by professional bio-curators and the others are annotated automatically by team submissions using the em algorithm  <cit> . table  <dig> reports the performance of our submitted runs on these annotations. we observed that there is no significant performance difference in f-scores and tap scores  between run  <dig> and run  <dig> on these annotations. next, we found that the scores for the silver annotations are usually double of those for the gold annotation of  <dig> articles of the biocreative iii gn test corpus, selected from a total of  <dig> articles. our gn system accomplished high precisions for the silver annotations, suggesting that our results were consistent with other participants’ results.

test <dig> gold: human annotation for the  <dig> articles

test <dig> silver: pooled team submissions for the same  <dig> articles using the em algorithm

test <dig> silver1: human annotation for the  <dig> articles + pooled team results for the remaining  <dig> articles

test <dig> silver2: pooled team submissions for all the  <dig> articles by the em algorithm

in the biocreative iii gn test evaluation, our run  <dig> was ranked the first for the  <dig> articles using the silver standard annotations in tap  among  <dig> submitted runs from  <dig> teams and never ranked lower than the third for any combination of annotations and k settings. we observed that the tap-k scores are usually the same in our system. we suspected that it is because our system produced a short list of records for an article to have less then k false positives to appear and caused the tap scores to freeze at the value of tap- <dig>  table  <dig> shows the min, median and max lengths of the output gene id lists from our gn system and the min, median and max number of false positives, as well as the percentage of the number of missed genes . compared to “truth,” the standard annotations provided by the organizers, apparently our output lists are short but our system produced remarkably few false positives especially for silver standards.

future work
our future work is to improve the gn system in a number of ways. first, our current system is unable to extract gn records from figures  <cit>  and tables. substantial gene information may appear in captions of figures and tables. missing gene mentions in figures and tables contributed to the low recall of our gn system. second, it is still challenging to match entrez gene records with tagged gene mentions without accurate species designation. it is quite likely that improvement in species designation will result in substantial gain in performance. finally, we plan to develop a trainable model for the entire gn process so that the system will improve its performance with more training examples. important progress in biomedical literature mining may be accomplished by the development of models that learn progressively throughout the task  <cit> , that will create a positive feedback loop  <cit> . currently, our gene normalization module is not trainable. it is possible to develop a machine learning method to filter results of dictionary matching and to resolve disambiguation if necessary  <cit> .

CONCLUSIONS
the key feature of our gn system is that we applied a novel soft tagging approach that produces sets of high confidence overlapping gene mention variants to maximize the chance of precise match in a dictionary which is similar to baumgartner et al.  <cit>  while minimizing artificial ambiguities due to the use of approximate string matching to compensate low coverage of dictionaries. disambiguation by considering contextual information is still important to a practical gn system. the lack of use of any contextual information in the disambiguation in our gn system is mostly due to time and resource constraints to meet the submission deadline. despite the lack of clever disambiguation, we show that soft gene mention tagging is sufficient to produce competitive gene normalization results in a cross-species and full-text setting. this evaluation suggests that large improvement is required to make automatic gene normalization practical. however, given this encouraging result, we are confident that by combining soft tagging with trainable species designation and context-based disambiguation, the resulting system will perform much better to actually meet the needs of bio-curation.

competing interests
the authors declare that they have no competing interests.

authors contributions
cjk and mhtl developed methods and drafted the manuscript. cnh was responsible for all aspects of the project and helped revise the manuscript.

