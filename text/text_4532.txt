BACKGROUND
expressed sequence tag  collections represent partial descriptions of the transcribed portions of genomes. they are generated from single-pass cdna library sequencing that is often carried out by small or mid-size sequencing centers and research groups. the research may be aimed at transcriptome expression analysis using microarray, rt-pcr, or hybridization techniques. an increasing number of research centers are involved in sequencing multiple cdna libraries. this is manifest by the exponential growth in the number of ests deposited to dbest at ncbi , and as of the may  <dig>   <dig> update, that number is at over  <dig>  million ests from  <dig> species. small sequencing centers are faced with searching for cost-effective and convenient tools for est management and querying, visualization, public and private user access, and functional classification.

est processing pipelines that transform raw chromatograms into high-quality filtered sequences, and software to cluster and assemble them into contigs are convenient to implement, and various tools are now available to researchers . the tigr gene indices  <cit> , for example, are generated by performing an all-against-all pairwise similarity search of the ests, and then clustered via single-node transitive closure. the clusters are fed into cap <dig>  <cit>  for assembly. we have used the following assembly protocol for in-house sequencing projects such as cattle  <cit>  and honeybee  <cit> . high quality sequences are pooled and run through blastclust  <cit>  to form clusters of similar sequences. then the blastclust output is run through cap <dig>  commercial software  that is targeted for bioinformatics centers equipped with high-performance computing machines is also available.

we describe estima  software that provides a database schema for management of raw and annotated ests, and is coupled with a suite of custom web-based tools that facilitate searching various aspects of ests and contigs, visualization, pairwise searching by blast  <cit> , and functional classification based on the controlled vocabulary defined by the gene ontology  consortium  <cit> . estima accepts assembled sequences from any est processing and clustering software, and has been equipped with password protection so that project researchers can use the estima tool confidentially with academic or industry collaborators.

to form an association between a go term and an est, an organism that has already been annotated with the go terms is selected. the ests are searched against this reference organism's annotated sequences, and the resulting alignments are used to ascribe putative function. the estima database schema provides users the flexibility to use any reference database that has go term association, and any number of external databases, such as ncbi's non-redundant  database or embl's swissprot collections, to annotate ests and their contigs. this flexibility in the schema is critical given the increasing number of sequenced genomes, and specialized reference databases that researchers can download and integrate with existing annotations. other database schemas that house est project and analysis data have been reported  <cit> . but the inherent flexibility of multiple est project management that estima affords, by allowing users to create multiple instances of the project schema within the genome schema , and allowing any number of reference genomes to be added, is unique to estima.

the inputs to estima are the chromatograms, raw and processed ests, clusters and assembled est contigs from any source, reference database annotations of ests, and contigs. all of these get loaded into the tables generated from the estima database schema and loading scripts. the raw and processed data, with their annotations, are made available to users through the estima query interfaces, for exporting, visualization, and further research.

implementation
estima is composed of three major components: an odbc-compliant database, loading scripts and a web application. figure  <dig> shows the relationship of these components.

databases
the heart of the system is a pair of database schemas. figure  <dig> shows an er diagram describing both schemas. the first schema, genome is common to all projects in the installation. it houses tables containing the go structure, gene association information, annotation, and project security. go terms are stored in two tables. each go term has a record in the term table. the term2term table contains one record for each edge in the directional graph linking the terms. the graph can then be searched by starting with a term identifier , finding all child ids, then finding all records where each of the child terms appear as a parent. in this way, the entire graph can be searched with one call per tier below the original term.

term_seq_count contains the pre-calculated counts of ests associated with each term, and all the terms' child terms. pre-calculation saves time at execution, and is handled by a perl script that is rerun each time the go tables are updated.

the gene_association and annotation table contains information that links the ests to the reference genomes. the gene_association table has one record for each reference gene that is associated with an est or contig. the reference gene is then related to a go term in the term table.

genome also contains the blast_all table that holds information regarding the association between the ests and any project-specific dna sequences. the ests are searched against sequences of interest, such as ncbi's nr, and the results are parsed and loaded into the blast_all table.

in addition to the common data, each project has its own schema that contains information such as dna sequences, contig assemblies and paths to the chromatogram files. the project schema is centered on the project table that contains a simple link between the other project tables and the genome schema. this organization has proven useful when the contents of the project schema are to be transferred directly from a sequencing facility to a laboratory information management system .

each project may have several different contig assemblies deriving from different assembly techniques. the assemblies are all housed in the assembly_project, contig, consensus_link and singlet tables. each assembly has a single id that is used by the web application to determine which is "live". after a new assembly is completed and loaded, it can be taken live by simply changing a single number in the web applications configuration file.

finally, the sequence data itself is stored in the dna_sequence table, while related genbank accession numbers are stored in their own table. although accession numbers are not required by the web application, if they are available, then the web application will accept them where a sequence id would be used.

loading
the second major component of the estima system is a series of perl and java applications used to parse and load data into the database. because each project will have its own needs, the loading system was not automated. instead, several dozen separate scripts and applications have been developed to allow researchers to manipulate and analyze large data sets using standard analysis applications.

web application
the third component of estima is the web-application that queries and reports the est information to the end-users.

the estima web application is organized around seven points of entry into the system â€“ the start screen and six query applications. each query application interfaces with the databases, and allow users to query raw and annotated ests and contigs. estima supports password-protection, multiple-projects, and multiple libraries within a project. this is achieved with an xml configuration file with project-specific information that is called by the various applications when project-related information is needed. figure  <dig> shows the relationship between the components of the web application. their implementation is discussed in detail below.

the start screen
the start screen provides a convenient point of reference to the system. the page contains information about each library  in the project. all of the elements of the start page are contained within the configuration file.

go browser
the go browser  allows a researcher to start with a go term, and find all ests associated with the term, and all of the descendent terms. the browser has a term search option that locates terms based on user-defined strings; for example, 'dna%' will locate all go terms starting with dna. once a term has been identified, the browser will provide a map of the go tree both above and below any term, as well as a count of the ests associated with each of the terms displayed. for each term the browser also provides the option of either downloading the sequences of all ests and contigs associated with the term in a single fasta file, or download a spreadsheet of the est identifiers, associated go terms and information about the linkage between the two. alternately, the spreadsheet can be viewed as a web page. in this form the sequence identifiers will link to the appropriate estima page, ests to the sequence id page and contigs to the contig viewer. further, the reference sequence used to form the association will link to the appropriate external web site. the go browser output can be filtered so that only ests from a single library are displayed.

sequence id
ests can be accessed directly from the sequence id interface. more commonly, results from queries on annotations or contigs are dynamically linked to the est sequence information. from these screens users can access chromatograms, and both raw and filtered sequences.

gene association
information about the association between the ests and the reference genome sequences can be accessed through these pages.

blastui
estima provides a blast user interface that allows fasta-formatted sequences to be searched against the est libraries. the libraries that are available for blast  <cit>  can be defined for each project. we usually allow at a minimum, the raw sequences, the clean sequences, and the unique assembled sequences . this allows researchers to rapidly identify those ests associated with any particular sequence of interest. the data sets available for blast searches can be easily extended for specific projects. for example, we make the baylor university honeybee genome assemblies  <cit>  available to the honeybee site  <cit> .

annotations
the annotation page is an optional page, the presence or absence of which is controlled from a configuration file. this page allows additional blast-derived annotations, beyond go annotations, to be displayed and queried in a number of different ways. the web application creates an interface that allows users to query the blast_all table directly. for example, songbird ests  <cit>  were searched against the nr from ncbi, swiss-prot, and chicken database from tigr. a researcher can use this to find all the ests and contigs in the songbird collection that are associated with any term in the sequence description. the term rna binding, for instance, returns  <dig> hits, of which  <dig> are to nr proteins,  <dig> to swiss-prot, and  <dig> to tigr chicken.

contig viewer
the contig viewer provides an image of the assembled contigs showing the relationship of the contig with the ests it contains as members. it provides the contig's consensus sequence, and links to each of the member ests.

the web application maintains a common look and feel to all the pages within a project. this is implemented by having a single block of html stored within a configuration file. as each page is rendered, the same html is called to generate the header block of the page. each project has its own html, so the look of each project's web site can be customized.

the inter-connectivity of the different estima modules allows researchers to engage in a "free form" exploration of the data. users can query the go browser, for example, to find a contig associated with a term of interest, drill down to see the structure of the contig, and then, if desired, drill down to get specific information on each est in the contig. just as easily, the users could take a sequence of interest from their research, and similarity-search it against the assembled ests. then they could drill down on an est that aligned with their sequence, and see the additional information about the sequence, including any annotations.

chromatograms
estima allows users to view the actual chromatograms of the ests. chromatogram files are stored in a file system visible to the web server, while file paths are stored in the database. when a user requests a chromatogram, phred  <cit>  is called to convert the chromatogram to scf format and this is sent to traceviewer  <cit>  that displays the trace in the user's web browser.

RESULTS
estima is independent of an est processing pipeline
estima is unlinked from the backend est processing pipeline, clustering, and assembly of ests. it serves as a stand-alone web application that allows users to store, access, research, and visualize the raw and annotated ests and contigs, including go annotation. the output from a sequencing center's est processing pipeline  gets loaded into databases, and serves as input to estima. .

additionally, researchers may choose to use any reference genome to annotate their sequences. estima comes packaged with a flexible database schema that supports the linking of sequences to go terms, and other user-supplied sequences. the flexibility of the estima database schema becomes more relevant with the increasing number of sequenced genomes. estima provides a flexible, password-protected, multi-project environment to researchers. it facilitates analysis of an unlimited number of ests and contigs linked to go and non-go annotations, and the download of annotated sequences related to any go term. estima comes with an implementation of a go browser that allows users to view the entire child term tree for any term, conveniently from a single query interface.

there can be multiple installations of estima
estima is designed to be a stand-alone application. each installation of the web application has all system dependent information in its own configuration files, including the information needed to connect to the databases. we maintain two instances of the interface, a development and a production copy. as new projects are introduced, they can be tested, and any interface modifications that are needed can be perfected on the development machine, concurrent with the creation of the production version of the databases. the production database can be examined using the development web application and any errors corrected before taking the system "live" to the production version.

estima maintains multiple projects and supports multiple libraries in a project
estima is designed to accept new projects. as new est sequencing projects are finished, they can be easily added to an existing estima installation. a new schema is created for the new project and the loading scripts are used to populate the database. all that is required to activate the web application is the addition of a block of xml code to the configuration file, and a connection string and some html to the system configuration file. xml tags within a configuration file control project- specific issues such as whether the data is password protected, or which blast databases can be accessed from the blast user interface.

there are three public estima projects currently administered through the w.m. keck center for comparative and functional genomics at the university of illinois. the bee-estdb  <cit>  is a resource created from a normalized unidirectional cdna library from which  <dig>  cdna clones were partially sequenced. these sequences were assembled into  <dig>  putatively unique sequences. the contigs were then tested for similarity to sequences in the drosophila genome, and based on these similarities the sequences were tentatively assigned one or more molecular functions and biological processes. likewise, bovest, the cattle est database  <cit> , contains  <dig>  cdnas from a bovine placenta library and  <dig>  from a spleen library, all of which were annotated against the human unigene  <cit> . the songbird project contains  <dig>  sequences from a songbird brain library  <cit>  that were assembled into  <dig>  unique sequences. estima allows multiple libraries within each project. information about each library is stored in the configuration file, and the interface elements dynamically generate the start page and the library filters within the go browser.

practical examples that demonstrate research utility of estima
the presence of multiple projects in estima allows for efficient cross-tissue or cross-species homology searches. for example, a mouse brain est may be used to interrogate the honeybee brain or songbird brain library to test the hypothesis that the gene is expressed as a brain-specific transcript. thus, a mouse brain transcript, ncbi accession number bm <dig>  similar to human tubulin alpha- <dig> chain protein may be used to do a tblastx against the honeybee brain assembled ests from the blastui interface in estima. the blast results retrieve a significant hit, contig <dig>  to the honeybee brain database . the contig identifier is hyperlinked to the sequence id interface in estima from where the consensus sequence may be downloaded. the chromatograms for the ests that make up the contig, may also be checked for quality from the same interface in estima as shown in figure  <dig>  both mouse and honeybee brain sequences, may then be used to do a deeper phylogenetic search with a blastx against non-redundant protein database to test the tissue-specificity hypothesis.

estima projects, as compared to other public web-applications such as tigr gene indices  <cit> , allow access to singlets from the est assemblies, and chromatogram retrieval. these singlets would include rare, novel transcripts and divergent homologs that are increasingly the sole motivation for a research project. since estima includes only high quality sequences in the databases, users may search for and download these novel transcripts, and also efficiently implement a homology search strategy using the web-application. another strength of estima is in facilitating chromatogram and contig viewing from a common interface . any contig may be displayed and chromatograms of the member ests checked for errors in base-calling that may result in a premature stop-codon, or frameshift indels. thus, estima is a valuable genome research tool.

CONCLUSIONS
estima is a full-featured web-application and database, designed to simplify exploring and sharing est libraries and databases. it can be easily adapted to a wide variety of system configurations, and back-end database engines. our installation of estima easily supports three public projects, with five different est libraries, and additionally a growing number of private projects.

availability and requirements
estima is available free to academic users at . under 'downloadable software' section of the web page, detailed installation instructions and a user manual have been included as well. estima is still in active development. new features are constantly being developed to meet the changing needs of the research projects that use it. further, new projects are being added to our estima installation. the system has been written to facilitate its own change, and as such, researchers should find it approachable with a good working knowledge of perl, sql, and html.

system requirements
estima requires perl and a database. all communication with the database is handled through perl dbi, which is extensible to any odbc compliant database. the use of perl dbi and odbc allow the databases to reside on separate servers from the web interface. although many databases may be used, in practice, there are several complex joins in the code that could result in slow performance on large est sets unless a well-optimized database was selected.

estima requires certain additional perl modules, specifically bio, cgi, dbi, and gd. bioperl, the bio module  <cit>  is used extensively. all blast and fasta file parsing, as well as all references to sequence objects in the user interface are handled with bio methods. gd  <cit>  is used to generate the portable network graphics  files displayed in the contig viewer.

we have been using estima throughout its development. our schemas are housed in an oracle 8i database on a silicon graphics origin  <dig>  <dig> Ã—  <dig> mhz machine running irix  <dig> . <dig>  the web application, including the user requested blast jobs are run on a sun microsystems sunfire  <dig> r with dual  <dig> spark v <dig> cpus.

authors' contributions
gg and ll developed the database schemas. cgk, ll and lr developed the initial web application prototype. hal managed project development and contributed to design concepts. rl modified the web application and optimized the code. all authors read and approved the manuscript.

