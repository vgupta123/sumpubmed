BACKGROUND
the importance of reproducibility for the scientific community has been a topic lately discussed in both high-impact scientific publications and popular news outlets  <cit> . to be able to independently replicate results—be it for verification purposes or to further advance research—is important for the scientific community. therefore, it is crucial to structure an experiment in such a way that reproducibility could be easily achieved.

workflows are structured, abstract recipes that help users construct a series of steps in an organized way. each step is a parametrised specific action that receives some input and produces some output. the collective execution of these steps is seen as a domain-specific task.

with the availability of biological big data, the need to represent workflows in computing languages has also increased  <cit> . scientific tasks such as genome comparison, mass spectrometry analysis, protein-protein interaction, just to name a few, access extensive datasets. currently, a vast number of workflow engines exist  and each of these technologies has amassed a considerable user base. these engines support, in some way or another, the execution of workflows on distributed high-performance computing  resources , thus allowing speedier obtention of results. a wise selection of a workflow engine will shorten the time spent between workflow design and retrieval of results.

workflow engines
galaxy  <cit>  is a free web-based workflow system with several pre-installed tools for data-intensive biomedical research. inclusion of arbitrary tools is reduced to the trivial task of creating toolconfig  <cit>  files, which are extensible markup language documents . the galaxy project also features a so-called toolshed  <cit> , from which tools can be obtained and installed on galaxy instances. at the time of writing galaxy’s toolshed featured  <dig> tools. however, we have found that galaxy lacks extended support for popular workload managers and middlewares.

taverna  <cit>  offers an open-source and domain-independent suite of tools used to design and execute scientific workflows, helping users to automate and pipeline processing of data coming from different web services. at the time of writing taverna features more than  <dig> services available on startup and it also provides access to local and remote tools. taverna allows users to track results and data flows with great granularity, since it implements the open provenance model standard   <cit> . a very attractive feature of taverna is the ability to share workflows via the myexperiment research environment  <cit> .

the konstanz information miner analytics platform   <cit>  is a royalty-free engine that allows users to build and execute workflows using a powerful and user-friendly interface. the knime analytics platform comes preloaded with several ready-to-use tasks  that serve as the building stones of a workflow. it is also possible to extend the knime analytics platform by either downloading community nodes or building custom nodes using a well-documented process  <cit> . workflows executed on the knime analytics platform are limited to run on the same personal computer on which it has been installed, thus rendering it unsuitable for tasks with high-memory or high-performance requirements. knime is offered in two variants able to execute workflows on distributed hpc resources: knime cluster execution  <cit> , and knime server  <cit> . these two suites are, however, royalty-based—an aspect that might shy away users of the scientific community.

the grid and cloud user support environment  offers an open-source, free, web-based workflow platform able to tap into distributed hpc infrastructures  <cit> . guse entails a set of components and services that offers access to distributed computing interfaces . the web services parallel grid runtime and developer environment portal  component acts as the graphical user interface. this web-based portal is a series of dynamically generated web pages, through which users can create, execute, and monitor workflows. ws-pgrade communicates with internal guse services  using the web services description language   <cit> . passing documents in the wsdl format between its components allows guse services to interact with other workflow systems. figure  <dig> shows the three-tiered architecture of guse. this complex and granular architecture of guse enables administrators to distribute the installation of guse across resources. a typical set-up is to install ws-pgrade on a dedicated web server, while installing other services and components on more powerful computers.
fig.  <dig> the three-thiered guse’s architecture. the three tiers of guse’s architecture: ws-pgrade acts as the user interface, the service layer handles e.g., file, workflow storage. the job submission and data management layer contains the dci bridge, which is responsible to access dcis. figure based on  <cit> 



in order to provide a common workflow submission application programming interface , guse channels workflow-related requests  through the dci bridge component  <cit> . the dci bridge is fully compatible with the job submission description language   <cit> , thus enabling other workflow management systems to interact with it in order to benefit from guse’s flexibility and dci support. the dci bridge contains so-called dci submitters, each containing specific code to submit, monitor, cancel jobs on each of the supported dcis . figure  <dig> presents a schematic overview of the interaction between the dci bridge and other components.
fig.  <dig> schematic overview of guse’s dci bridge. interaction of the dci bridge with guse services and other workflow management systems is done via jsdl requests. the dci bridge contains dci submitters, which contain specific code for each of the supported dcis in guse. figure based on  <cit> 



designing a workflow in guse entails two steps: creation of an abstract graph, and a node-per-node configuration of the concrete. creation of the abstract graph is achieved via a java webstart  <cit>  application that is launched from ws-pgrade, but is executed on the user’s computer. at this point, users are able to provide only application domain information. after saving the abstract graph, users would direct their web browser back to ws-pgrade, open the concrete for editing, and configure each task comprising the workflow separately. the configuration entails details such as provision of the required command line arguments to execute each task. since guse offers interfaces to several middlewares, it is possible to execute tasks of the same workflow on different dcis. the possible complexity of workflows that could be executed by guse is reflected in the several available fields on the task configuration windows presented to the user while configuring the concrete . the two-step creation of workflows , combined with the steep learning curve that guse poses to new users is an aspect that might intimidate users without much technical experience.


due to the diversity of workflow engines, a variety of workflow representations has arisen. this disparity of representations poses a challenge to scientists who desire to reuse workflows. ideally, a scientist would design and test a workflow only once and it would be possible to execute it on any workflow engine on a given dci. built on this principle, the sharing interoperable workflow for large-scale scientific simulation on available dcis project  <cit>   allows users to run previously existing workflows from different platforms on the shiwa simulation platform. however, privacy concerns might give scientists second thoughts about executing their workflows and uploading their sensitive data on the shiwa simulation platform. tavaxy  <cit> , focusing on genome comparison and sequence analysis, was created to enable the design of workflows composed of taverna and galaxy sub-workflows, and other workflow nodes in a single environment.

there is a clear overlap between the functionalities of the mentioned workflow engines. all offer royalty-free workflow design and execution. however, based on feedback from users and experience in our research group, we believe that the knime analytics platform is an accessible workflow editor, although it lacks on computing power. on the other hand, again based on experience and feedback, we see guse as a great back end framework that taps into several dcis, but we have found that its workflow editing capabilities pose a steep learning curve to its user base.

in this paper we present work that bridges the gap between the knime analytics platform and guse. our work will surely help adopters to significantly reduce the time spent designing, creating and executing repeatable workflows on distributed hpc resources.

workflow representation
formal representation
workflows can be represented using petri nets  <cit> . petri nets are directed bipartite graphs containing two kinds of nodes: places and transitions.

a place represents a set of conditions that must be fulfilled for a transition to occur. once a place has satisfied all its conditions, it is enabled. transitions represent actions that affect the state of the system .

places and transitions are connected by edges called arcs. no arc connects two nodes of the same kind . arcs represent transitions’ pre- and postconditions. in order for a transition to take place, all of its preceding places must be enabled . conversely, when a transition has been completed, a postcondition is satisfied, influencing the state of subsequent places to which this transition is connected to.

whenever a place’s condition is satisfied, a token is depicted inside the corresponding place. figure  <dig> depicts a simple computer process in which a molecule contained in an input file will be modified by adding any missing hydrogen atoms .
fig.  <dig> a workflow as represented by a petri net. petri net modelling a software pipeline to protonate a molecule found in a single input file. places are shown as circles, transitions are depicted as squares. the place
p
 <dig> expects and contains one token, represented by a black dot, and is thus enabled. it follows that p
 <dig> is the starting place and p
 <dig> represents the end of the process



high-level representation
there are several alternatives to represent workflows in a platform-independent way. yet another workflow language   <cit>  was created after extensive analysis and review of already existing workflow languages in order to identify common workflow patterns and develop a new language that could combine the strengths and overcome the handicaps of other languages. the interoperable workflow intermediate representation   <cit>  is a standard adopted by several workflow engines and is the language describing workflows in the shiwa simulation platform  <cit> . more recently a group of individuals, vendors and organizations joined efforts to create the common workflow language   <cit>  in order to provide a specification that enables scientists to represent workflows for data-intensive scientific tasks .

for the sake of clarity and brevity, literature commonly depicts workflows as directed acyclical graphs, in which each vertex represents a place together with its pre- and postconditions   <cit> . each of the vertices is labelled, has a unique identifier and represents a task to be performed. furthermore, each of the tasks in a workflow can receive inputs and can produce outputs. outputs of a task can be channeled through another task as an input. an edge between two nodes represents the channeling of an output from a task into another. edges determine the logical sequence to be followed . a task will be executed once all of its inputs can be resolved. workflow tasks are commonly referred by workflow systems as nodes or jobs and in this manuscript we will use these terms interchangeably.

workflow abstraction
workflows contain three different dimensions or abstraction layers, namely, case, process and resource dimensions  <cit> . mapping these dimensions into concepts used on distributed execution workflow systems, we find that: 
the case dimension refers to the execution of a workflow .

the process dimension, also referred to as the abstract layer  <cit> , deals with the application domain , therefore, technical details such as architecture, platform, libraries, implementation, programming language, etc., are hidden in this dimension.

the resource dimension, often called the concrete layer  <cit> , encompasses the hardware and software used to execute the desired process; questions such as how many processors does a task require?, which software running on which device will perform a certain task?, what are the provided parameters for a specific task?, etc., must be answered in this layer.



given that the focus of our work is distributed workflows, we prefer the use of the abstract/concrete terminology throughout this document. figure  <dig> depicts the abstract layer of the previously introduced protonation process. this workflow is now composed of four tasks  and three edges. the task labelled input has no predecessor tasks, therefore this task is the first one to be executed. in comparison, the task labelled protonate depends on the completion of split, which in turn depends on the completion of input.
fig.  <dig> an abstract workflow. each vertex corresponds to a task and each edge corresponds to the logical sequence to be followed. only application domain information is present


fig.  <dig> a concrete workflow. similar to an abstract workflow, a concrete workflow contains implicit application domain information. however, vertices of concrete workflows are annotated with extra attributes needed to actually execute the given tasks and obtain the needed data

fig.  <dig> comparison of the same pipeline across knime analytics platform, galaxy, guse. the knime analytics platform and galaxy  offer an intuitive workflow creation and there is no perceived boundary between the abstract and the concrete layers. guse, however,  splits the creation of workflows in two phases, creation of the abstract graph and the further configuration of each node in the concrete workflow



workflow conversion
as it has been mentioned before, guse splits the creation of workflows into two steps, creation of the abstract graph and configuration of the concrete. these steps match the abstract and concrete layers we have discussed in the previous section. both galaxy and the knime analytics platform, in turn, represent workflows without this separation. in order to create a workflow in either galaxy or the knime analytics platform, users drag and drop visual elements representing nodes into a workspace. nodes come pre-configured and commonly execute a single task, therefore the user creates both the abstract and concrete layer at the same time. inputs and outputs of nodes are visually represented and they can be connected to other nodes. each node has a configuration dialog in which users can change the default parameters.

it is easy to see how functionally equivalent workflow constructs  are represented differently across workflow engines. furthermore, engines may offer features that are not available on other workflow systems . the proper identification and conversion of these elements is important for the conversion, since they play their part in workflow execution. figure  <dig> displays a schematic comparison of the implementation of our example workflow across three selected workflow engines, the knime analytics platform, galaxy, and guse.

due to the variety of workflow systems—we have mentioned only a few instances, it is not surprising that there are several languages and file formats to represent workflows. a first step towards a successful conversion of workflows is to be able to represent the vertices of a workflow  in a consistent way across platforms. once a platform-independent representation of the vertices has been achieved, it is easier to import tasks into several workflow engines with less effort. conversion of edges is an endeavour that is specific to each of the workflow engines . over the course of the last years, we have developed a series of tools enabling workflow interoperability across disparate workflow engines.

implementation
conversion of whole workflows can be split into two parts, namely, conversion of vertices and conversion of edges. vertices represent tasks that take inputs, parameters and produce outputs. this information can be represented in a structured way.

common tool descriptor files  are xml documents that contain information about parameters, inputs and outputs of a given tool. this information is presented in a structured and human readable way, thus facilitating manual generation for arbitrary tools. since ctds are also properly formatted xml documents, it is a trivial matter to parse them in an automated way. generation of ctds can be either done manually or by ctd-enabled programs. software libraries and suites such as seqan  <cit> , openms  <cit>  and ball  <cit>  are ctd-enabled, that is, they are able to generate ctds for each of its tools, parse input ctds and execute tools accordingly. executing a ctd-enabled tool across different platforms is a process transparent for end users. figures  <dig> and  <dig> display how ctds encapsulate needed runtime information into a single file, and how ctds interact with other languages and platforms, respectively.
fig.  <dig> a ctd in action. the upper section shows all three parameters needed for the tool pdbcutter to be executed. the middle section shows a snippet of a ctd representing a ctd-enabled tool. the bottom section shows how to execute a ctd-enabled tool with the given sample ctd

fig.  <dig> overview of how ctds interact with programming languages and workflow systems. ctds can be generated by ctd-enabled tools  or via ctdopts. once a tool is ctd-enabled, it can be imported into the knime analytics platform or galaxy. we have also developed converters that can import knime analytics platform, galaxy workflows into guse to take advantage of hpc resources and dcis



we have also worked towards making ctds more accessible. taking into account that refactoring tools to make them ctd-enabled might be time consuming, we have developed ctdopts in order to bind an already existing tool via python wrappers. naturally, this interaction is not done automatically without any further input, but this is an easier endeavor than performing a refactoring. ctdopts acts as a wrapper allowing users to execute arbitrary command line tools via ctds. these python wrappers will communicate directly with the tool, thus offering end users an interface to a ctd-enabled tool. of course, manual creation of ctds is always an option. since ctds are xml documents, a text editor is all is needed to manually generate them.

representing a simple vertex using ctds brings users closer to workflow interoperability, but this exercise might not pay off on its own. in order to extend a workflow engine by adding new tools, one could delve into the inner-workings of said workflow engine and import new tools. since this could be a technical effort not accessible to users without the needed experience, we have also developed converters of tasks .

the knime analytics platform is an application based on the eclipse modelling framework   <cit> , allowing the development of extensions. one of these extensions, and perhaps the most interesting for knime analytics platform users, is the ability to develop new knime nodes  <cit> . it is also possible to download so-called community nodes  <cit> .

we developed the generic knime nodes  extension to make use of knime analytics platform’s extensibility. gkn takes a set of ctds as an input and generates the needed resources to implement knime nodes. in order to achieve this, its functionality is split into two main components: node generation and node execution. once a node built via gkn has been generated  and imported into the knime analytics platform, it interacts with other knime nodes via the node execution component. this interaction is transparent for the user.

since galaxy is one of the most popular workflow systems in the bioinformatics community, we felt that providing a suitable conversion would benefit the scientific community, so we developed ctd2galaxy, a set of scripts to convert a ctd into a galaxy toolconfig xml file  <cit> . we also analysed galaxy’s toolshed  <cit>  and we determined that it would be possible to automatically convert around  <dig> of these tool descriptions into ctd files. the rest of the tools in the toolshed contain elements that are not easily translated and are not supported in ctd format .

so far, we have discussed conversion of vertices. different workflow engines represent workflows using a different format. it follows that conversion of edges is an effort that heavily depends on the involved workflow engines. analog to the need of a platform-independent representation of vertices, a first step of workflow interoperability, which is our end target, is the development of a platform-independent representation of workflows.

in spite of the apparent variety of workflow languages, we have focused our efforts in using the knime analytics platform as the source point of workflow conversion. to this end, we have also started work that could translate any knime analytics platform workflow into either an iwir representation or a guse workflow . alternatively, we have also developed a set of scripts that convert galaxy workflows into guse . refer to fig.  <dig> for a brief overview of how our work fits together against workflow systems.

RESULTS
we have implemented a label-free-quantification   <cit>  workflow in the knime analytics platform. lfq is a widely used type of experiment in mass spectrometry based proteomics aimed at quantifying and comparing the abundances of peptides and proteins across different samples. unlike other quantification strategies employing various kinds of chemical labelling of the different samples, lfq does not impose a limit on the number of samples. experiments with tens or hundreds of samples are routinely performed in many labs and, considering the ever-increasing performance of modern mass spectrometers, the number of samples to be analyzed per experiment is very likely to keep growing. this, in turn, gives rise to major computational challenges when analyzing the resulting large and complex data sets consisting of up to several terabytes of raw data. hence, data processing and analysis of label-free quantification experiments can greatly benefit from distributed hpc resources and shall therefore serve as an example use case.

our example workflow is based on tools provided by openms/topp . in addition to label-free quantification, it performs a complete consensus peptide identification  <cit>  using the search engines omssa  <cit>  and x!tandem  <cit> . in essence, so-called tandem mass spectra containing the masses of fragment ions resulting from collision-induced dissociation of selected peptides are compared to theoretical fragment spectra generated from a given fasta database containing protein sequences. afterwards, peptide hits are filtered so that the remaining set of identifications has a false discovery rate of less than  <dig> %. the quantification part starts with two major steps of data reduction and signal detection: peak picking and feature finding. subsequently, the results of the identification and quantification branches of the workflow are combined, and corresponding peptide signals are matched across all samples in a process called feature linking. finally, a normalization step is performed, which is necessary in order to be able to actually compare the relative abundances of peptides across the different runs. it is important to note that each run is executed independently via parameter sweep. furthermore, each run is represented in a different input file, as given by the input files element. the output of the complete workflow is channeled to the textexporter tool, which in turn generates a single comma-separated values  file containing all identified peptides together with their abundances in all given samples.
fig.  <dig> label-free quantification pipeline implemented in the knime analytics platform. the section enclosed by the ziploopstart and ziploopend will be executed independently for each of the given input files 

fig.  <dig> label-free quantification pipeline as imported from the knime analytics platform into guse using the knime2guse extension. note how parameter seep elements depicted in fig.  <dig> such as ziploopstart and ziploopend are not present in guse. this is due to the fact that guse implements parameter seep by setting properties in input and output ports of the corresponding nodes



CONCLUSIONS
throughout this document we have presented our work towards workflow interoperability. we are convinced that investing time and effort in workflow interoperability helps scientists from all fields to expedite retrieval of results, so we tested and analyzed several workflow engines.

based on user feedback and our own usage experience, we noticed that the creation of workflows in the knime analytics platform is straightforward, rapid and user-friendly. the needed amount of previous knowledge of the knime analytics platform or other workflow systems to put together a workflow and execute it is minimal. however, we were not satisfied with the fact that execution of workflows on distributed hpc resources is royalty-based. our search then brought us to guse.

guse is an open-source web-based framework that enables users to execute workflows on distributed hpc resources. it supports several major resource managers and middlewares via the use of so-called dci submitters, which can also be added to extend guse’s support. however, workflow creation in guse is not as straightforward as in the knime analytics platform.

it was apparent that there was a need for a solution that combined the features and overcame the drawbacks of these two framework systems. on one side, a free and easy-to-use workflow editor and on the other side, a free and powerful back-end system connecting to several distributed hpc resources.

we are confident that our work presented in this document, in particular knime2guse, not only provides scientists a way to design and test workflows on their desktop computers, but also enables them to use powerful resources to execute their workflows, thus producing scientific results in a timely manner. we see knime2guse as a potential adopter of cwl: knime2guse could be extended in order to generate a cwl representation of a knime analytics platform workflow.

availability and requirements
project name: workflow conversion.

project home page:http://workflowconversion.github.io/

operating system: platform independent.

programming language: java, python.

other requirements: e.g. python  <dig> , java  <dig>  or higher.

license: e.g. gnu general public license .

any restrictions to use by non-academics: none.



abbreviations
apiapplication programming interface

ballbioinformatics algorithms library

csvcomma separated values

ctdcommon tool descriptor

cwlcommon workflow language

dcidistributed computing infrastructure

emfeclipse modelling framework

gkngeneric knime nodes

gusegrid and cloud user support environment

hpchigh-performance computing

iwirinteroperable workflow intermediate representation

jsdljob submission description language

knimekonstanz information miner

lfqlabel-ree quantification

lsfplatform load sharing facility

opmopen provenance model

omssaopen mass spectrometry search algorithm

shiwasharing interoperable workflow for large-scale scientific simulation on available dcis project

toppthe openms proteomics pipeline

unicoreuniform interface to computing resources

wsdlweb services description language

ws-pgradeweb services parallel grid runtime and developer environment portal

xmlextensible markup language

yawlyet another workflow language

competing interests

we declare that we have no competing interests.

authors’ contributions

ldlg wrote the manuscript, carried out development work for knime2guse, ctd2galaxy and contributed to gkn, ctdopts. jv created, tested the lfq pipeline in the knime analytics platform and was involved in drafting the manuscript. sa, together with mr developed the gkn extension. as has been a major contributor and released the first version of ctdopts. ldlg, sa, mr, as, ok and kr are responsible for the development and maintenance of ctd schemas. sg released the first version of galaxy2guse. ok, kr conceived the study, participated in its design and coordination, and helped to draft the manuscript. all authors read and approved the final manuscript;

authors’ information

we have no additional information about the authors.

