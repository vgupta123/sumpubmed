BACKGROUND
protein sites are microenvironments within a protein structure, distinguished by their structural or functional role. a site can be defined by a three-dimensional location and a local neighborhood around this location in which the structure or function exists. central to rational protein engineering is the understanding of how the structural arrangement of amino acids creates functional characteristics within protein sites.

determination of the structural and functional roles of individual amino acids within a protein provides information to help engineer and alter protein functions. identifying functionally or structurally important amino acids allows focused engineering efforts such as site-directed mutagenesis for altering targeted protein functional properties  <cit> . alternatively, this knowledge can help avoid engineering designs that would abolish a desired function. traditionally, experimental mutation analysis is used to determine the effect of changing individual amino acids. for example, in alanine scanning, each amino acid in a protein is mutated into alanine, and the corresponding function or structural effects recorded to identify the amino acids that are critical  <cit> . this technique is often used in protein-protein interaction hot spot detection for identifying potential interacting residues  <cit> . however, these experimental approaches are time-consuming and labor-intensive. furthermore, there is no information about which amino acids would be tolerated at these positions.

the increase in protein structural data provides an opportunity to systematically study the underlying pattern governing such relationships using data-driven approaches. a fundamental aspect of any computational protein analysis is how protein structural information is represented  <cit> . the performance of machine learning methods often depends more on the choice of data representation than the machine learning algorithm employed. good representations efficiently capture the most critical information while poor representations create a noisy distribution with no underlying patterns.

most methods rely on features that have been manually selected based on understanding sources of protein stability and chemical composition. for example, property-based representations describe physicochemical properties associated with local protein environments in protein structures using biochemical features of different level of details . zvelebil et al. have shown that properties including residue type, mobility, polarity, and sequence conservation are useful to characterize the neighborhood of catalytic residues  <cit> . the feature program  <cit> , developed by our group, represents protein microenvironments using  <dig> physicochemical properties. feature divides the local environment around a point of interest into six concentric shells, each of  <dig>  Å in thickness, and evaluates the  <dig> physicochemical properties within each shell. the properties range from low-level features such as atom type or the presence of residues to higher-level features such as secondary structure, hydrophobicity and solvent accessibility. we have applied the feature program to different important biological problems, including the identification of functional sites  <cit> , characterization of protein pockets  <cit> , and prediction of interactions between protein pockets and small molecules  <cit> , with success.

however, designing hand-engineered features is labor-intensive, time-consuming, and not optimal for some tasks. for example, although robust and useful, the feature program has several limitations  <cit> . to begin with, each biological question depends on different sets of protein properties and no single set encodes all the critical information for each application. second, feature employs  <dig> physiochemical features with different level of details; some attributes have discrete values, while others are real valued. the high dimensionality together with the inhomogeneity among the attributes can be challenging for machine learning algorithms  <cit> . finally, feature use concentric shells to describe local microenvironments. the statistics of biochemical features within each shell are collected but information about the relative position within each shell is lost. the system is therefore rotational invariant but can fail in cases where orientation specific interactions are crucial.

the surfeit of protein structures  <cit>  and the recent success of deep learning algorithms provide an opportunity to develop tools for automatically extracting task specific representations of protein structures. deep learning networks have achieved great success in computer vision and natural language processing community , and have been used in small molecule representation  <cit> , transcription factor binding prediction  <cit> , prediction of chromatin effects of sequence alterations  <cit> , and prediction of patient outcome from electronic health records  <cit> . the power of deep learning lies in its ability to extract useful features from raw data form  <cit> . deep convolutional neural networks   <cit>  comprise a subclass of deep learning networks. local filters in cnns scan through the input space and search for recurring local patterns that are useful for classification performance. by stacking multiple cnn layers, deep cnns hierarchically compose simple local spatial features into complex features. biochemical interactions occur locally, and can be aggregated over space to form complicated and abstract interactions. the success of cnns at extracting features from 2d images suggests that the convolution concept can be extended to 3d and applied to proteins represented as 3d “images”. in fact, wallach et al.  <cit>  applied 3d convolutional neural networks to protein-small molecule bioactivity predictions and showed that performances of deep learning framework surpass conventional docking algorithms.

in this paper, we develop a general framework that applies 3d convolutional neural networks for protein structural analysis. the strength of our method lies in its ability to automatically extract task-specific features, driven by supervised labels that define the classification goal. importantly, unlike conventional engineered biochemical descriptors, our 3dcnn requires neither prior knowledge nor assumptions about the features critical to the problem. protein microenvironments are represented as four atom “channels”  in a 20 Å box around a central location within a protein microenvironment. the algorithm is not dependent on pre-specified features and can discover arbitrary features that are most useful for solving the problem of interest. to demonstrate the utility of our framework, we applied the system to characterize microenvironments of the  <dig> amino acids. specifically, we present the following:to study how the  <dig> amino acids interact with their neighboring microenvironment, we train our network to predict the amino acids most compatible with a specific location within a protein structure. we perform head-to-head comparisons of prediction performance between our 3dcnn and models using the feature descriptors and show that out 3dcnn achieved superior performances over models using conventional features.

we demonstrate that the features captured by our network are useful for protein engineering applications. we apply results of our network to predicting effects of mutations in t <dig> lysozyme structures. we evaluate the extent to which an amino acid “fits” its surrounding protein environment and show that mutations that disrupt strong amino acid preferences are more likely to be deleterious. the prediction statistics over millions of training and test examples provide information about the propensity of each amino acid to be substituted for another. we therefore construct two substitution matrices from the prediction statistics and combine information from the class predictions and the substitution matrices to predict effects of mutation in t <dig> lysozyme structures.

we present a new visualization technique, “atom importance map”, to inspect individual contribution of each atom within the input example to the final decision. the importance map helps us intuitively visualize the features our network has captured.

our 3dcnn achieves a two-fold increase in microenvironments prediction accuracies compared to models that employ conventional structure-based hand-engineered biochemical features. hierarchical clustering of our amino acid prediction statistics confirms that our network successfully recapitulates hierarchical similarities and differences among the  <dig> amino acid microenvironments. when used to predict effects of mutations in t <dig> lysozyme structures, our models demonstrate strong ability to predict outcomes of the mutation variants, with 85% accuracy to separate the destabilizing mutations from the neutral ones. we show that substitution matrices built from our prediction statistics encode rich information relevant to mutation analysis. when no structural information is provided, models built from our matrices on average outperform the ones built from blosum <dig>  <cit> , pam <dig>  <cit>  and wac  <cit>  by  <dig> %. furthermore, given the wild type structure, our network predictions enable the blosum <dig>  pam <dig> and wac models to achieve an average  <dig> % increase in prediction accuracies. finally, the atom input importance visualization confirms that our network recognizes meaningful biochemical interactions between amino acids.




methods
datasets
t4-lysozyme free, protein-family-based training and test protein structure sets
for the  <dig> amino acid microenvironment classification problem, we construct our dataset based on the scop  <cit>  and astral  <cit>  classification framework  to avoid prediction biases derived from similar proteins within the same protein families, we ensure that no structure in the training set belongs to the same protein family as any structure in the test set. specifically, we first retrieved representative scop domains from the astral database. we excluded multi-chain domains, and identified protein families of the representative domains using the scop classification framework, resulting in  <dig> protein families. we randomly selected  <dig> % of the identified protein families  from the  <dig> protein families to form the test family set—with the remaining  <dig> protein families forming the training family set. member domains of a given protein family were either entirely assigned to training set or entirely assigned to test set. in addition, we removed pdb-ids present in both the training and test sets to ensure there was no test chain in a family that was used in training. to enforce strict sequence level similarity criteria between our training and test set, we used cd-hit-2d  <cit>  to identify any test chain that has a sequence similarity above 40% to any chain in the training structure set, and removed the identified structures from the test set.

furthermore, to obtain fair evaluation of our downstream application that characterizes t <dig> lysozyme mutant structures, we removed t <dig> lysozyme structures from both datasets. specifically, pdb-ids of the wild-type and mutant t <dig> lysozyme structures were first obtained from the uniprot  <cit>  database. we then excluded structures containing domains in the same family as any wild type or mutant t <dig> lysozyme structure from both the training and test datasets. we obtained the final selected protein structures from the pdb as of date oct  <dig>  <dig> 

input featurization and processing
to facilitate comparison between deep learning and conventional algorithms built with hand-engineered biochemical features, we created two datasets from the same train and test protein structure sets described in t4-lysozyme free, protein-family-based training and test protein structure sets section.

 atom-channel dataset
ᅟ

local box extraction and labeling
for each structure in the training and test structure sets, we placed a 3d grid with 10 Å spacing to sample positions in the protein for local box extraction. specifically, we first identify the minimum cartesian x, y and z coordinates of the structure, and define the  position as the origin of our 3d grid. we then construct a 3d grid with 10 Å spacing that covers the whole structure  for each sampled position, a local box is extracted using the following procedure: the nearest atom to the sampled position is first identified  and the amino acid which this atom belongs to is assigned as the central amino acid . to achieve consistent orientation, each box is aligned within the box in a standard manner using the backbone geometry of the center amino acid . specifically, each box is oriented such that the plane formed by the n-ca and the c-ca bonds forms the x-y plane and the orthogonal orientation with which the ca- cβ bond has a positive dot product serves as the positive z-axis . a 20 Å box is then extracted around the cβ atom of the central amino acid using the defined orientation . we chose the cβ atom of each amino acid as center to maximize the observable effects of the side chain while still maintaining a comparable site across all  <dig> amino acids. the cβ atom position of glycine was estimated based on the average position of the superimposed cβ atoms from all other amino acids. side-chain atoms of the center amino acid are removed. the extracted box is then labeled with the removed amino acid side-chain type .fig.  <dig> local box sampling and extraction. a for each structure in the training and test structure sets, we placed a 3d grid with 10 Å spacing to sample positions in the protein for local box extraction. the teal spheres represent the sampled grid positions. . b for each sampled position, the nearest atom  to the sampled position  is first identified. c the amino acid which this atom belongs to is then assigned as the central amino acid. the selected amino acids are highlighted in red and the atoms are shown as dotted spheres. d a local box of 20 Å is then defined around the central amino acid, centering on the cβ. for each amino acid microenvironment, a local box is extracted around the amino acid using the following procedure: e backbone atoms of the center amino acid is first used to calculate the orthogonal axes for box extraction. f a 20 Å box is extracted around the cβ atom of the center amino acid using the defined orientation. g side-chain atoms of the center amino acid are removed. the extracted box is then labeled with the removed amino acid side-chain type




local box featurization
each local 20 Å box is further divided into 1-Å 3d voxels, within which the presence of carbon, oxygen, sulfur, and nitrogen atoms are recorded in a corresponding atom type channel  although including the hydrogen atoms would provide more information, we did not include them because their positions are almost always deterministically set by the position of the other heavy atoms, and so they are implicitly represented in our networks . we believe that our model is able to infer the impact of these implicit hydrogens. the 1-Å voxel size ensures that each voxel can only accommodate a single atom, which could allow our network to achieve better spatial resolution. given an atom within a voxel, one of the four atom channel types will have a value of  <dig> in the corresponding voxel position, and the other three channels will have the value  <dig> fig.  <dig> local box featurization. a local structure in each 20 Å box is first decomposed into oxygen, carbon, nitrogen, and sulfur channels. b each atom type channel structure is divided into 3d 1-Å voxels, within which the presence of atom of the corresponding atom type is recorded. within each channel, gaussian filters are applied to the discrete counts to approximate the atom connectivity and electron delocalization. c the resulting numerical 3d matrices of each atom type channel are then stacked together as different input channels, resulting in a  4d–tensor, which will serve as an input example to our 3dcnn




we then apply gaussian filters to the discrete counts to approximate atom connectivity and electron delocalization. standard deviation of the gaussian filters is calibrated to the average van der waals radii of the four atom types. the local box extraction and featurization steps are performed on both the training and test protein structure sets to form the training and test dataset.

dataset balancing
different amino acids have strikingly different frequencies of occurrence within natural proteins. to ensure useful features can be extracted from all the  <dig> amino acid microenvironment types, we construct balanced training and test datasets by applying the following procedure to the training and test dataset:  the least abundant amino acid microenvironment in the original dataset is first identified.  all examples of the identified amino acid microenvironment type are included in the balanced dataset.  the number of examples for the least abundant amino acid microenvironment is used to randomly sample an equal amount of examples from all the other  <dig> amino acid microenvironment types. validation examples are randomly drawn from the balanced training set using a 1: <dig> ratio. this ensures an approximately equal number of examples from all the  <dig> amino acid microenvironment types for the balanced training, validation and test datasets.

data normalization
prior to being fed into the deep learning network, input examples are zero-mean normalized. specifically, mean values of each channel at each position across the training dataset are calculated and subtracted from the training, validation, and test examples.

 feature dataset
ᅟ

feature microenvironments
feature, a software program previously developed in our lab, is used as a baseline method to demonstrate the performance of conventional hand-engineered structure-based features  <cit> . the feature program captures the physicochemical information around a point of interest in protein structure by segmenting the local environment into six concentric shells, each of  <dig>  Å in thickness . within each shell, feature evaluates  <dig> physicochemical properties including atom type, residue class, hydrophobicity, and secondary structure . this enables conversion of a local structural environment into a numeric vector of length  <dig> fig.  <dig> the feature program. feature captures the physicochemical information around a point of interest in protein structure by segmenting the local environment into six concentric shells, each of  <dig>  Å in thickness. within each shell, feature evaluates  <dig> physicochemical properties including atom type, residue class, hydrophobicity, and secondary structure. this enables conversion of a local structural environment into a numeric vector of length 480


description of each property can be found in  <cit> 




dataset construction
following a similar sampling procedure described in  atom-channel dataset section, we placed a 3d grid with 10 Å spacing to sample positions for featurization in each structure in the training and test structure sets , where the 3d grid is constructed using the same procedure as in  atom-channel dataset section. for each sampled position within a structure, the center residue is determined by identifying the nearest residue . a modified structure with the center residue removed from the original structure is subsequently generated. the feature software is then applied to the modified structure, using the cβ atom position of the central residue, and generates a feature vector of length  <dig> to characterize the microenvironment. the generated training and test datasets are similarly balanced and zero-mean normalized, as described in  atom-channel dataset section. validation examples were randomly drawn from the balanced training set using a 1: <dig> ratio.

network architecture
to perform head-to-head comparisons between end-to-end trained deep learning framework that takes in raw input representations and machine learning models that are built on top of conventional hand-engineered features, we design the following two models:  deep 3d convolutional neural network  feature softmax classifier. both models comprise three component modules:  feature extraction stage  information integration stage  classification stage, as shown in fig.  <dig>  to evaluate the advantages of using a deep convolutional architecture versus a simple flat neural network, we also built a third model  multi-layer perceptron with  <dig> hidden layers.fig.  <dig> schematic diagram of the deep 3d convolutional neural network and feature-softmax classifier models. a deep 3d convolutional neural network. the feature extraction stage includes 3d convolutional and max-pooling layers. 3d filters in the 3d convolutional layers search for recurrent spatial patterns that best capture the local biochemical features to separate the  <dig> amino acid microenvironments. max pooling layers perform down-sampling to the input to increase translational invariances of the network. by following the 3dcnn and 3d max-pooling layers with fully connected layers, the pooled filter responses of all filters across all positions in the protein box can be integrated. the integrated information is then fed to the softmax classifier layer to calculate class probabilities and to make the final predictions. prediction error drives parameter updates of the trainable parameters in the classifier, fully connected layers, and convolutional filters to learn the best feature for the optimal performances. b the feature softmax classifier. the feature softmax model begins with an input layer, which takes in feature vectors, followed by two fully-connected layers, and ends with a softmax classifier layer. in this case, the input layer is equivalent to the feature extraction stage. in contrast to 3dcnn, the prediction error only drives parameter learning of the fully connected layers and classifier. the input feature is fixed during the whole training process




 deep 3d convolutional neural network
our deep 3d convolutional neural network is composed of the following modules:  3d convolutional layer  3d max pooling layer  <cit>   fully connected layer  softmax classifier  <cit> . in brief, our network begins with three sequential alternating 3d convolutional layers and 3d max pooling layers, which extract 3d biochemical features at different spatial scales, followed by two fully-connected layers which integrate information from the pooled response across the whole input box, and ends with a softmax classifier layer, which calculates class scores and class probability of each of the  <dig> amino acid classes. schematic diagram of the network architecture is shown in fig.  <dig>  the operation and function of each module are briefly described below. all modules in the network were implemented in theano  <cit> .
3d convolutional layer


the 3d convolution layer consists of a set of learnable 3d filters, each of which has small local receptive field that extends across all input channels. during the forward pass, each filter moves across the width, height and depth of the input space with a fixed stride, convolves with its local receptive field at each position and generate filter responses. the rectified linear   <cit>  activation function consecutively performs a non-linear transformation on the filter responses to generate the activation values. more formally, the activation value ai,j,kl at output position  of the lth filter when convolving with the input x can be calculated by eqs.  and .





  <dig> ai,j,kl=relu∑m=ii+f−1∑n=jj+f−1∑d=kk+f−1∑c=0c−1wc,m,n,dlxc,m,n,d+bl 
  <dig> relu=x,ifx≥ <dig> ifx< <dig> 


where f is the filter size, assuming the filter has equal width, height and depth, c is the number of input channels, w is a weight matrix with size , x is the input, i, j, k are the indices of the output position, and m, n, d are the indices of the input position.

our 3d convolution module takes in a 5d–tensor of shape , convolves the 5d–tensor with 3d filters of shape  with stride  <dig>  and outputs a 5d- tensor of shape . during the training process, the weights of each of the 3d convolutional filters are optimized to detect local spatial patterns that best capture the local biochemical features to separate the  <dig> amino acid microenvironments. after the training process, filters in the 3d convolution layer will be activated when the desired features are present at some spatial position in the input.
3d max pooling layer





the 3d max pooling module takes in an input 5d–tensor of shape , performs down-sampling of the input tensor with stride of  <dig>  and output a 5d- tensor of shape . for each channel, the max pooling operation identifies the maximum response value for each 2*2* <dig> subregion and reduce the 2*2* <dig> cube region into a single 1*1* <dig> cube with the representative maximum value. the operation can be described by eq. .  <dig> mpc,l,m,n=maxxc,i,j,k,xc,i+ <dig> j,k,xc,i,j+ <dig> k,xc,i,j,k+ <dig> xc,i+ <dig> j+ <dig> k,xc,i,j+ <dig> k+ <dig> xc,i+ <dig> j,k+ <dig> xc,i+ <dig> j+ <dig> k+ <dig> 


where i=l∗2j=m∗2k=n∗ <dig> 


*mp denotes the output of the max-pooling operation of x

*l, m, n are the indices of the output position, c denotes the input channel, and i, j, k are the indices of the input position
fully connected layer and the softmax classifier





the fully-connected layer integrates information of neurons across all positions within a layer using a weight matrix that connect all neurons in the layer to all neurons in the subsequent layer. a relu function follows to perform a non-linear transformation. the operation is described by eq. . by following the 3dcnn and 3d max-pooling layers with fully connected layers, the pooled filter responses of all filters across all positions in the protein box can be integrated. the integrated information is then fed to the softmax classifier layer to calculate class probabilities and to make the final predictions.  <dig> hn=relu∑m=0m−1wm,nxm+bn 


where h
n denotes the activation value of the nth neuron in the output layer, m denotes the number of neurons in the input layer, n denotes the number of neurons in the output layer, and w is a weight matrix with size .

 feature softmax classifier
the feature softmax classifier model comprises the same three feature extraction, information integration and classification stages. the model begins with an input layer, which takes in feature vectors generated in  feature dataset section. in this case, the input layer is equivalent to the feature extraction stage since the biochemical features are extracted from the protein structures by the feature program prior to being fed into the model. the input layer is then followed by two fully-connected layers, which integrate information from the input features. finally, the model ends with a softmax classifier layer, which performs the classification.

 multi-layer perceptron
our multi-layer perceptron model takes in the same local boxes input as the 3dcnn model, flattens the 5d–tensor of shape  into a 2d matrix of shape , and has just two fully-connected layers which integrate information across the whole input box, ending with a softmax classifier layer.

we trained our 3dcnn, mlp, and the feature softmax classifier using stochastic gradient descent  <cit>  with the back-propagation algorithm  <cit> . gradients were computed by the automatic differentiation function implemented in theano. a batch size of  <dig> examples was used. to avoid over-fitting, we used l <dig> regularization for all the models, and employed dropout  <cit>   when training the 3dcnn, feature softmax classifier and mlp. we tested different l <dig> regularization constants and dropout rates. we selected the appropriate l <dig> regularization constant and dropout rate based on validation set performance; we did not attempt to optimize the other meta-parameters. we trained the 3dcnn network for 6 days for  <dig> epochs using gpus on the stanford xstream cluster. the mlp model was trained for  <dig> epochs using gpus on the stanford xstream cluster until convergence. the feature softmax classifier took 3 days on the stanford sherlock cluster to reach convergence. the stanford xstream gpu cluster is made of  <dig> compute nodes for a total of  <dig> nvidia k <dig> gpu cards . the stanford sherlock cluster includes  <dig> gpu nodes with dual socket intel xeon cpu e5– <dig> v <dig> @  <dig> ghz; 256 gb ram; 200 gb local storage.

classification accuracies and confusion matrix
individual and knowledge-based amino acid group accuracy
prediction accuracies of the models are evaluated using two different metrics: individual class accuracy and knowledge-based group accuracy. individual class accuracy measures the probability of the network to predict the exact amino acid as the correct class. since it is known that chemically similar amino acids tend to substitute each other in naturally occurring proteins, to further evaluate the ability of the network to capture known amino acid biochemical similarity, we also calculate a knowledge-based group accuracy metric based on predefined amino acid groupings  <cit> . for group accuracy, a prediction is considered correct if it is within the knowledge-based amino acid group as the true class.

confusion matrix
upon the completion of model training, the model weights can then be used to perform prediction for any input local protein box. for a given set of input examples, the number of examples that have true labels i and are predicted as label j is recorded in the position  of the raw count confusion matrix m. to obtain the probability of examples of true label i being predicted as label j, each row i of the raw count confusion matrix m is then normalized by the total number of examples having the true label i to generate the row-normalized confusion matrix n
row, where each number in n
row has a value between 0 ~  <dig> and the sum of each row equals  <dig>   <dig> nrowij=mij/∑jmij 


the above described process is applied to the training and test dataset to generate  <dig> separate row-normalized confusion matrices. the matrices are then plot as heat maps using the matplotlib package.

clustering
to identify amino acid environment groups discovered by the network, we performed hierarchical clustering  <cit>  on the row-normalized confusion matrices of both the train and test dataset. hierarchical clustering with the ward linkage method was performed using the scipy.cluster.hierarchy package  <cit> .

structure-based substitution matrix
conventional sequence-based substitution matrices such as blosum <dig> and pam <dig> are calculated from the log odd ratio of substitution frequencies among multiple sequence alignments within defined sequence databases. using an analogous concept, we construct a frequency-based, structure-based substitution matrix from our raw count confusion matrix m. we generated a second matrix considering the score matrix as a measure of similarity between any two amino acid types. this matrix is derived based on dot product similarities between entries of amino acid microenvironment pairs in the raw count confusion matrix. the two score matrices are denoted as s
freq and s
dot respectively, and are calculated using the following equations.

score matrix i: frequency-based score
the frequency-based substitution scores were calculated using the following equations: pij=mij/∑i∑jmijqrowi=∑jmij/∑i∑jmijqcolj=∑imij/∑i∑jmijsfreq'=logpij/qrowi∗qcolj 


to enable straight-forward comparison to other substitution matrices, we create a symmetric substitution matrix by averaging over the original and transposed s
freq as below. sfreq=sfreq′+sfreq′t/ <dig> 


score matrix ii: dot-product-based score
the dot-product based scores were calculated using the following equations nrowij=mij/∑jmijncolij=mij/∑imijrowi=nrowi:/∑knrowik2rowj=nrowj:/∑knrowjk2coli=ncol:i/∑kncolki2colj=ncol:j/∑kncolkj2sdotij=logdotrowirowj+dotcolicolj 


the two score matrices are calculated for both the training and test predictions and are denoted as s
freq − train, s
freq − test, s
dot − train, s
dot − test, respectively. because similar scores were obtained between the training and the test predictions, s
freq − train and s
dot − trainare used are representative matrices and are denoted as s
freq and s
dot. comparison between the matrices to blosum <dig>  and pam <dig>  and wac were performed using linear least-square regressions using the scipy.stats.linregress module.

t <dig> mutant classification
t <dig> lysozyme mutant and wild type structures
the pdb ids of 40 t <dig> lysozyme mutant structures were obtained from the scope <dig>  database  <cit>  and the corresponding 3d structures are downloaded from the pdb. we categorize the effects of the mutants based on their associated literature, where a stabilizing mutation is categorized as “neutral” and a destabilizing mutation is categorized as “destabilizing”. table  <dig> summarizes the  <dig> mutant structures employed in this study. to compare between the microenvironments surrounding the wild type and mutated amino acids, the wild type t <dig> lysozyme structure  is also employed.table  <dig> summary of the 40 t <dig> mutant structure

forty available t <dig> lysozyme mutant structures were collected and categorized for their effects. each mutant is classified based on the literature, where a stabilizing mutation is categorized as “neutral” and a destabilizing mutation is categorized as “destabilizing”




t <dig> wild type and mutant structure microenvironment prediction
for each of the selected 40 t <dig> lysozyme mutant structures, we extract a local box centered on the cβ atom of the mutated residue, removing side chain atoms of the mutated residue. the same labeling and featurization procedures described in  atom-channel dataset section is applied to the extracted box. wild type counterparts of these  <dig> mutated residues can be found by mapping the mutated residue number to the wild type structure. local boxes surrounding the wild type amino acids can then be similarly extracted and featurized. each pair of wild type and mutant boxes are then fed into the trained 3dcnn for prediction. the predicted labels for wild type and mutant boxes are denoted as wp  and mp , respectively.

t <dig> mutation classifier
we built lasso  <cit>  and svm  <cit>  classifiers with 4-fold cross validation using the following three sets of features for five different scoring matrices , resulting in fifteen different models.

input features for the t <dig> mutation classifiers

 6‐feature=swtwpswtmtswtmpswpmtswpmpsmtmp3‐feature=swtwpswtmtswpmt1‐feature=swtmt 


*s is the similarity score taken from the  element of a score matrix

*wt, wp, mt and mp denote the wild type true label, wild type predicted label, mutant true label, and mutant predicted label, respectively.

the svm models were constructed using the sklearn.svm package using the radial basis function  kernel, and the lasso models were built using the sklearn.linear_model.lasso package.

network visualization: atom importance map
our input importance map shows the contribution of each atom to the final classification decision by displaying the importance score of each atom in heat map colors. importance scores are calculated by first deriving the saliency map described in  <cit> . briefly, the saliency map calculates the derivative of the true class score of the example with respect to the input variable i at the point i <dig>  where i <dig> denotes the input value. the saliency map is then multiplied by i <dig> to obtain the importance scores for each input voxel for each atom channel. by first order taylor approximation, the importance score of each atom approximates the effect on the true class score when removing the corresponding atom from the input. absolute values of the importance scores are recorded, normalized to range  for each input example across all positions and all channels, and assigned to the corresponding atoms in the local protein box. we visualized results using pymol  <cit>  by setting the b-factor field of the atoms to the normalized-absolute-valued importance scores. gradients of the score function with respect to the input variables are calculated by the theano auto differentiation function.

RESULTS
datasets
following the procedure described in section t4-lysozyme free, protein-family-based training and test protein structure sets section, we generate a protein structure set that contains  <dig> training and  <dig> test protein families. this results in  <dig>  and  <dig> training and test structures. atom-channel dataset and feature dataset are built from the protein structure set to enable comparisons between deep learning based features and conventional hand-engineered features. atom-channel dataset is constructed as described in  atom-channel dataset section. the final dataset contains  <dig>  training,  <dig>  validation and  <dig>  test examples, each comprises an approximately equal number of examples from all the  <dig> amino acid microenvironment types. feature dataset is constructed as described in  feature dataset section. the resulting datasets are similarly balanced and zero-mean normalized and the final dataset contains  <dig>  training,  <dig>  validation and  <dig>  test examples.

network architecture
our resulting networks are summarized in table  <dig>  the deep 3d convolutional neural network begins with a 3d convolutional layer, followed by two sequential alternating 3d convolutional and 3d max pooling layers, continued with two fully-connected layers, and ends with a softmax classifier layer. in this framework, the 3d convolution/max pooling layers, the fully connected layers and the softmax classifier correspond to the feature extraction, information integration, and classification stage respectively. in the feature softmax classifier, the feature extraction stage is completed by the feature program in advance. the feature softmax model similarly continues with two fully-connected layers, and ends with a softmax classifier layer. to verify that using a deep convolutional architecture provides advantage over using a simple flat neural network with the same input, we also built a multi-layer perceptron with  <dig> hidden layers. the resulting network architecture is summarized in additional file 1: table s <dig> table  <dig> 3dcnn and feature softmax classifier network architecture

dropout
dropout
dropout
dropout
dropout
the stage column describes the component stages for the deep 3dcnn and feature softmax models. in our 3dcnn, the 3d convolution and max pooling layers, the fully connected layers, and the softmax classifier correspond to the feature extraction, information integration, and classification stage respectively. in the feature softmax classifier, the feature extraction stage is completed by the feature program in advance. the layer column describes the type of layer employed in each stage for each model, where 3d–conv represents 3d convolutional layer, 3d max-pooling represents 3d max pooling operation with stride of  <dig>  dropout represents dropout operation with p =  <dig> , and fc layer stands for fully-connected layer. the size column further describes the parameters used in each layer. for 3d–conv layers, the number of filters in each layer and the size of the receptive fields of the filters are specified. for 3d max-pooling layers, a stride of  <dig> is used. for fc layers, m*n neurons specifies the number of input and output neurons, respectively. the output volume column describes the size of output of each layer. for 3d–conv and 3d–max pool layers, the output is a 4d tensor, where the numbers describe the number of channels, output height, output width, and output depth, respectively. for fc layer, the output is a vector, and the number describes the number of output neurons




 <dig> amino acid classification accuracies and confusion matrix
to classify the  <dig> amino acid microenvironment, we trained the deep 3dcnn and the mlp on the atom-channel dataset and the feature softmax classifier on the feature dataset, respectively. results of the individual and knowledge-based group classification accuracies of 3dcnn and the feature softmax classifier are reported in table  <dig>  comparisons between the performances of 3dcnn and mlp are reported in additional file 2: table s <dig>  to inspect the propensity of each microenvironment type to be predicted as the other  <dig> microenvironment types, fig.  <dig> shows heat maps for the confusion matrices generated from predictions on the training and test datasets using the 3dcnn and the feature softmax classifier, where the ith, jth element of the matrices contains the probability of examples of true label i being predicted as label j.table  <dig> individual and knowledge-based group classification accuracies of 3dcnn and the feature softmax classifier

the deep 3dcnn achieves superior prediction performance compared to models that employ conventional structure-based hand-engineered biochemical features. a two-fold increase in prediction accuracies is achieved by the 3dcnn compared to the feature softmax classifier. 3dcnn correctly predict amino acid types for structures in the test dataset, which are in proteins families different from the ones in the training dataset


fig.  <dig> confusion matrices for predictions of the  <dig> amino acid microenvironments. predictions on the training and test datasets using 3dcnn and feature softmax classifier are summarized into confusion matrices to inspect the propensity of each microenvironment type to be predicted as one another. the  <dig> amino acids are arranged according to knowledge-based amino acid groups, where amino acids known to be biochemically similar are adjacent. the ith, jth element of the matrices shows the probability of examples of true label i being predicted as label j. the probability is represented in heat map colors. a 3dcnn-train. b 3dcnn-test. local block structures in the confusion matrices for 3dcnn demonstrate similarities and differences between amino acid microenvironments. for example, phenylalanine , tryptophan , and tyrosine  form a hydrophobic and aromatic block. similar block structure is observed for test predictions. the captured features are robust across protein families. c feature-train. d feature-test. block structures are less evident in the confusion matrices for the feature softmax classifier




amino acid clustering
in  <dig> amino acid classification accuracies and confusion matrix section, we inspected the group prediction accuracy based on knowledge based amino acid groups. to identify amino acid microenvironment groups automatically discovered by the network, hierarchical clustering was performed on the row-normalized confusion matrices. the results are shown in fig.  <dig> fig.  <dig> hierarchical clustering of normalized confusion matrices. the ith, jth element of the row-normalized matrices shows the probability of examples of true label i being predicted as label j. the probability is represented in heat map colors. hierarchical clustering reveals similarities between amino acid microenvironments in terms of their propensities to be assigned to the  <dig> amino acid types. a 3dcnn-training. amino acid groupings discovered by our 3dcnn generally agree with known amino acid similarities. six clusters were discovered by our network. the first cluster includes phenylalanine, tryptophan, and tyrosine. these are the three amino acids known to be hydrophobic and aromatic. the second and third clusters comprises valine, isoleucine and leucine, methionine respectively, which are all non-polar and aliphatic. the polar amino acids form the fourth cluster. amino acids with known distinct properties, glycine and cysteine do not form local blocks with the other amino acids. b 3dcnn-test groupings generated for the test examples are consistent with the training counterparts. c feature-softmax-training. d feature-softmax-test clustering on the feature softmax classifier generates much coarser amino acid groupings than the ones discovered by 3dcnn. the two major groups, hydrophobic and polar amino acids are separated




structure-based substitution matrix
we derived the 3dcnn-frequency-based  and the 3dcnn-dot-product-based  substitution matrices from our raw count confusion matrix following the procedure described in structure-based substitution matrix section. comparison between the two matrices to blosum <dig>  and pam <dig>  and wac were performed using linear least-square regressions. we also calculate correlations between blosum <dig>  and pam <dig>  and wac for benchmarking purpose. the least square coefficients are summarized in table  <dig> and the scatter plots are shown in fig.  <dig> table  <dig> correlation between deep learning derived substitution matrices and benchmarking matrices

3dcnn- s
freq
3dcnn- s
freq
3dcnn- s
freq
3dcnn- s
dot
 <dig> 
3dcnn- s
dot
 <dig> 
3dcnn- s
dot
 <dig> 
 <dig> 
 <dig> 
we show pairwise comparison of multiple matrices, and report the r-value of the correlation


fig.  <dig> scatter plots of similarity scores between s
freq, s
dot and benchmarking matrices blosum <dig>  pam <dig>  wac. a
s
freq- blosum <dig>  b
s
freq- pam <dig>  c
s
freq- wac. d s
dot- blosum <dig>  e s
dot- pam <dig>  f s
dot-wac. g wac- blosum <dig>  h wac- pam <dig>  i pam250- blosum <dig>  s
freq shows generally good correlations with blosum <dig> and pam250; s
dot shows strong correlation with blosum <dig> and pam250; s
freq and s
dot show no significant correlations with wac




t <dig> mutant classification
forty available t <dig> lysozyme mutant structures were collected and categorized for their effects. each mutant is categorized as either destabilizing or neutral. we use our network to predict the optimal residue type for both the wild type and mutant structures at the corresponding variant sites. each site can be summarized using their true labels and prediction results in the following form: . the results for the  <dig> sites are summarized in table  <dig> table  <dig> predicted and true residue type for the wild type and mutant structures at the variant sites

distinct prediction patterns can be observed between the destabilizing and neutral variants. for the destabilizing variants, our network makes correct predictions with very high confidence on the wild type microenvironments and the predictions on the mutant microenvironments often resemble the true wild type residues, as highlighted in orange. on the other hand, predictions on wild type environment vary significantly. predictions on mutant microenvironment do not resemble the wild type amino acid, but are rather more similar to the mutant amino acid type, as highlighted in blue. for some cases, predictions of the wild type environment even match exactly to the mutant residues, as highlighted in yellow. these findings suggest that destabilizing mutations happens in microenvironments where the wild type amino acid are strongly preferred while the neutral ones tend to be observed when amino acids other than the wild type are tolerated or even preferred




we subsequently built classifiers to predict whether a mutation has a destabilizing or neutral effect. specifically, we first used the s
freq, s
dot, blosum <dig>  pam <dig>  and the wac similarity matrices to generate the 6-feature, 3-feature, and 1-feature sets, as described in t <dig> mutation classifier section. lasso and svm classifiers using the  <dig> sets of features was trained with 4-fold cross validation. the results are summarized in table  <dig> table  <dig> prediction accuracies of t <dig> mutant classifiers

6-feature- s
freq
6-feature- s
dot
6-feature- sblosum
6-feature- spam
6-feature- swac
3-feature- s
freq
3-feature- s
dot
3-feature- sblosum
3-feature- spam
3-feature- swac
1-feature- s
freq
 <dig> 
 <dig> 
1-feature- s
dot
 <dig> 
 <dig> 
1-feature- sblosum
1-feature- spam
1-feature- swac
performances of lasso and svm models built with 1-feature, 3-feature, and 6-feature set from  <dig> different matrices are compared. the 6-feature set comprises the substitution scores indexed by the six pairs of true and predicted class for the wild type and mutant variant microenvironment. specifically, 6-feature set = , where s is the similarity score taken from the  element of a score matrix, wt, wp, mt and mp denote the wild type true label, wild type predicted label, mutant true label, and mutant predicted label, respectively. the 3-feature set is composed of  and the 1-feature set only contains 

sfreq and sdot  matrices show significant advantage with the 1-feature set , when only the wild type true label and the mutant true labels are known. models using the 3-feature and 6- feature sets achieved better prediction accuracies than using the 1- feature set alone. significant boosts of performance using the 3-feature set over the 1-feature set are observed for models built with blosum and pam matrices. the addition information of the predicted label for the wild type structure provides key information that was not captured by sequence derived matrices




network visualization
to gain insights into what the network has learned, we calculate an importance map to inspect the contribution of each atom to the final classification decision. the importance scores are calculated as described in network visualization: atom importance map section. atoms within the local box are shown as sticks. visualizations of importance scores of each input atom are displayed as heat maps. example visualizations are shown in fig.  <dig>  the color demonstrates how each atom within the local box contributes to the decision. atoms with the lowest important scores  are shown in white, and the red to blue heat map spectrum highlights the most important to the least important atoms. transparent light pink spheres are drawn to show the space previously occupied by the removed residue.fig.  <dig> importance visualization of local amino acid microenvironments. visualizations of importance scores of each input atom are displayed as heat maps. the color demonstrates how each atom within the local box contribute to the decision. the importance scores range from  <dig> to  <dig>  atoms with the lowest important scores  are shown in white, and the red to blue heat map spectrum highlights the most important to the least important atoms. transparent light pink spheres are drawn to show the space previously occupied by the removed residue. a microenvironment surrounding a key asp residue at the ef_hand calcium binding site  our importance score map indicates that the correct prediction relies on the two nitrogen atoms, which are in close proximity to the electronegative oxygen atoms of the removed aspartic acid residue. b microenvironment surrounding a prosite insulin motif, with the key cys residue removed  the 3dcnn network made the correct prediction of cys primarily based on the sg atom from a nearby cysteine residue. this sg atom originally forms disulfide bond with the sg atom of the removed cysteine residue. the unique disulfide bond pattern was implicitly captured by our network to facilitate the classification. c microenvironment surrounding a phenylalanine residue . the three highlighted regions in the heat map are the side-chain atoms of val  <dig>  ile  <dig>  val  <dig>  all of which comprise of non-polar carbon atoms. d microenvironment surrounding a valine residue . the highlighted atom groups are the side-chains of met  <dig>  trp  <dig> and ile  <dig>  which are similarly non-polar




discussion
classification accuracies
the deep 3dcnn achieves superior prediction performance compared to models that employ conventional structure-based hand-engineered biochemical features. as can be seen in table  <dig>  we achieve a two-fold increase in prediction accuracies using the 3dcnn compared to the feature softmax classifier. importantly, the 3dcnn can correctly predict amino acid types for structures in proteins families that are different from the ones in the training dataset; features learned by the 3dcnn describe fundamental bio-physiochemical properties and are generalizable to all proteins. the significant gap between prediction performances of our 3dcnn with the mlp model reported in additional file 2: table s <dig> shows that with the same training data, the deep 3d convolutional architecture offers advantages over simple flat neural networks.

among the  <dig> amino acid microenvironments, our 3dcnn network has the highest prediction accuracies for the c, p and g microenvironments. this is likely due to their distinct and conserved structural properties. non-polar amino acids tend to have higher prediction accuracies than the polar amino acids by our 3dcnn. hydrophobic interactions, such as pi-stacking, are often formed within shorter spatial distances than electrostatic interactions between polar amino acids  <cit> . the bottom-up nature of convolutional layers makes 3dcnns better at extracting features describing local interactions than the longer-range ones. in this study, we employ a network that uses  <dig> convolution layers using 3*3*3 Å filters with alternating pooling layers. this creates receptive fields of 12*12*12 Å for each neuron at the final pooling layer. our predictions therefore depend on combinations of the local features that are at most 12 Å in spatial range within the 20 Å input boxes.

confusion matrices and amino acid groupings
our network captures the similarities and differences between amino acid microenvironments. figure  <dig> arranges the  <dig> amino acids according to knowledge-based amino acid groups, where amino acids known to be biochemically similar are adjacent. local block structure in the confusion matrices in fig. 5a and b demonstrates amino acid environment similarities captured by the network. for example, phenylalanine , tryptophan , and tyrosine  form a hydrophobic and aromatic block. similar block structures are less evident in the confusion matrices for the feature softmax classifier although confusion between neighboring amino acids can still be observed.

hierarchical clustering further demonstrates the extent of similarity captured by our networks. clustering on the row-normalized confusion matrix reveals similarities between amino acid microenvironments in terms of their propensities to be assigned to the  <dig> amino acid microenvironment types. figure  <dig> shows that the training and test performances are consistent.

amino acid groupings “discovered” by our 3dcnn generally agree with known amino acid similarities. hierarchical clustering divides the amino acids into six distinct clusters, as shown in fig.  <dig>  it is visible in fig. 6a and b that the polar amino acids histidine , lysine , arginine , aspartic acid , glutamic acid , serine , threonine , asparagine , glutamine  and a non-polar aliphatic amino acid alanine  form a large and weak block, within which k and r; d and n; s and t; and e and q, form smaller and distinct blocks. similarly, the non-polar amino acids, f, w, y, v, i, l, m together form a large weak block, within which the three clusters separate. amino acids with known distinct properties, glycine  and cysteine  do not form local blocks with the other amino acids. clustering on the feature softmax classifier generates much coarser amino acid groupings. the two major groups, hydrophobic and polar amino acids are separated. however, finer grouping within the two groups are less evident.

results from clustering also reveal interesting aspects of amino acid similarity learned de novo from structural data. interestingly, alanine is not grouped with valine, isoleucine, leucine, and methionine, as in many classifications based on hydrophobicity. instead, serine, threonine, and alanine are substituted for one another frequently by our 3dcnn, likely due to their small sizes  <cit> . however, size and molecular volume do not seem to dominate the biochemical similarities; cysteine and glycine are well separated from serine, threonine, and alanine despite of their similar sizes. glutamine, methionine, and lysine are of close molecular weight but do not cluster together while lysine and arginine are different size but are grouped together. isoleucine, valine and threonine are all cβ branched and are substantially bulkier near the protein backbone. it is likely that isoleucine is grouped together with valine instead of leucine for this reason. as expected, threonine is considered much more similar to serine than to isoleucine and valine. thus, size, molecular weight, geometry and biochemical properties all contribute to the groupings.

structure-based substitution matrix
the prediction statistics over our millions of training and test examples provide information about the general propensity of an amino acid to be substituted for another. we used our prediction statistics to construct two amino acid substitution matrices s
freq and s
dot, and compared them to blosum <dig> and pam <dig> as benchmarks. blosum <dig> and pam <dig> are calculated from the log odd ratio of substitution frequencies among multiple sequence alignments within defined sequence databases and are symmetric. we derived s
freq using an analogous frequency-based concept. however, our matrix is not symmetric: substitutability from amino acid microenvironment i to j is different from substitutability from amino acid microenvironment j to i. the expected frequency of confusion from i to j depends on the fraction of examples with true labels i and the propensity of the network to make predictions of j, instead of the fraction of examples with true labels i and true labels j. as a result, the i, j notation in both the numerator and denominator in our odd-ratio equation is not exchangeable, and the resulting matrix is non-symmetric. to enable straightforward comparison to the benchmark matrices, we created a symmetric substitution matrix by averaging over the original and transposed s
freq′. as shown in table  <dig> and fig.  <dig>  s
freq have generally good correlations with blosum <dig> and pam <dig> 

we also compare our matrices to wac, a substitution matrix derived using the feature program  <cit> . the matrix is similarly constructed from the biochemical, biophysical, and structural features around the  <dig> amino acids, but from a human-engineered-features perspective. the more statistically similar the feature profiles for two amino acids, the higher the similarity score. we built our s
dot matrix similarly from similarities in prediction profiles between amino acid pairs. s
dot shows strong correlation with blosum <dig> and pam <dig>  interestingly, s
dot show no significant correlation with wac. this suggests 3dcnn and wac capture different information.

t <dig> mutant classification
the tolerance of proteins to mutation depends on the critical interactions between the lost amino acid and its environment and the ability of the new amino acid to re-establish these interactions. we reasoned that the higher the prediction probability the network assigned to the original amino acid class, the less probable any mutation would be tolerated at the position. conversely, the higher the similarity score is between the wild type and the mutant amino acid pairs, the more likely the mutation will be accepted. a destabilizing mutation may have very strong preference of the wild type amino acid for the wild type microenvironment and low similarity score between the wild type and mutant amino acid pairs. on the other hand, the microenvironment of a neutral variant site may not have a strong preference to the wild type amino acid and might not show a preference between the wild type and mutant amino acids. we tested these ideas by predicting the effects of mutations on t <dig> lysozyme. t <dig> lysozyme was chosen because mutations in t <dig> lysozyme have been deeply investigated  <cit> , and many mutant structures are available in publicly available databases.

we first used 3dcnn to predict the optimal residue type for both the wild type and mutant structures at the variant sites. table  <dig> shows distinct prediction patterns between the destabilizing and neutral variants. for the destabilizing variants, our network makes correct predictions with very high confidence on the wild type microenvironments. strikingly, instead of predicting amino acid classes similar to the mutated amino acid type, predictions on the mutant microenvironments often resemble the true wild type residues. these variant sites microenvironment likely have special structural features uniquely satisfied by the wild type amino acids, as reflected by the high confidence predictions. after the mutation, even with local structural perturbation to accommodate the mutant amino acid, the network is still able to recognize the microenvironment and predict the original amino acid. on the other hand, for the neutral variants, the reverse to wild type is less strong. predictions on wild type environment vary significantly. in some cases, our network even predicts the amino acid to be mutated to as the optimal amino acid choice for the wild type microenvironment. also, predictions on mutant microenvironment do not resemble the wild type amino acid, but are rather more similar to the mutant amino acid type.

these findings are consistent with the idea that destabilizing mutations happen in microenvironments where the wild type amino acid are strongly preferred while the neutral ones tend to be observed when amino acids other than the wild type are tolerated or even preferred. we constructed lasso and svm classifiers to quantitatively evaluate the ability of our predictions to separate the destabilizing variants from the neutral ones. the input features were created using similarity scores from the substitution matrices, indexed by the wild type and predicted class labels. table  <dig> shows the ability of our models to predict outcomes of the mutation variants. notably, our s
freq and s
dot matrices show significant advantage with the 1-feature set, when only the wild type true label and the mutant true label are known. models built from our substitution matrices on average outperform the ones built from blosum <dig>  pam <dig> and wac by  <dig> %. the 1-feature set only uses the similarity score between the wild type amino acid and the mutant amino acid, and does not rely on the predicted class labels of the wild type and mutant microenvironments. the significant gap of performances between our 3dcnn derived matrices and the other matrices suggests that structural data provide information that could not be derived from sequence substitution frequencies alone. although the wac matrix is also structure-based and derived from microenvironment information, the performance was noticeably worse than the deep learning derived matrices.

as expected, models using the 3-feature and 6- feature sets achieved better prediction accuracies than using the 1- feature set alone. importantly, the predicted labels for the wild type structures provide key information for models employing the blosum and pam matrices. when our class prediction of the wild type microenvironment is available, performances of the blosum <dig>  pam <dig> and wac models on average increase by  <dig> %. this is not surprising since the predicted label for the wild type structure provides direct information about the extent the lost amino acid fits the microenvironments. the more “similar” the prediction is to the lost amino acid, the more probable the lost amino acid might have strong interactions with its environment, and the higher the chance a substitution can be harmful, where the similarity is evaluated by the substitution score between the true and predicted amino acids. for the 3-feature- s
freq and the 3-feature- s
dot models, this additional information did not provide as large of a boost as the ones observed for the other matrices. interestingly, including features from the mutant structures did not provide much improvement over the 3-feature set, suggesting that the wild type environment may matter most and our models can provide useful information without the mutant structures.

network visualization
we present four examples of local amino acid microenvironments, including those of charged, polar, and non-polar amino acids. figure 8a depicts the local microenvironment surrounding a key aspartic acid residue at the ef_hand calcium binding site  <cit>   transparent light pink spheres show the space previously occupied by the removed key functional aspartic acid residue. our network correctly predicts the most suited choice of this microenvironment as aspartic acid. our importance score map indicates that the decision relies on the two nitrogen atoms, which are in close proximity to the electronegative oxygen atoms of the removed aspartic acid residue. figure 8b shows a microenvironment surrounding a prosite  <cit>  insulin motif  <cit> , with the key cys residue removed  the 3dcnn network correctly predicts cysteine as the most suited amino acid to place in this microenvironment and the decision was made primarily based on the sg atom from a nearby cysteine residue. this sg atom originally forms disulfide bond with the sg atom of the removed cysteine residue. figure 8c shows an example of a microenvironment surrounding a phenylalanine residue . phenylalanine belongs to the non-polar and aromatic group and its six-member ring can form favorable interactions with other non-polar groups. our network correctly predicts the most suitable residue for the microenvironment as phenylalanine. the three highlighted regions in the heat map are the side-chain atoms of val  <dig>  ile  <dig>  val  <dig>  all of which comprise of non-polar carbon atoms. valine belongs to the non-polar and aliphatic group. figure 8d shows an example of a microenvironment surrounding a valine residue . the highlighted atom groups are the side-chains of met  <dig>  trp  <dig> and ile  <dig>  which are similarly non-polar.

network architecture design
our network architecture consists of three 3d convolution layers, each using an increasing number of 3*3* <dig> filters. we did not experiment extensively with different number of 3d convolutional layers and different filter sizes. small 3*3* <dig> filters are generally preferable given enough computational power because larger features can be composed from smaller features trough a hierarchical manner. more layers can increase model capacity and the spatial receptive field of each final layer neuron since 3d filters in increasingly higher level layers are looking at an increasingly larger spatial section of the original atomic input space. it would be interesting to see if additional layers or larger filter size can help capitulate longer range electrostatic interactions, as discussed in the classification accuracies section. max-pooling layers reduces the dimension of the input and therefore can help reduce the computational expense. more importantly, it reduces the sensitivity of the network to the absolute position of each biochemical feature and therefore increase the translational and rotational invariance of the network. to avoid losing important relative geometry information at the atomic level, the 3d max pooling operation was not used immediately after the first 3d convolutional layer. we delay the employment of the 3d max-pooling layers till the second 3d convolutional stage where the features are more abstract and less dependent on the absolute spatial orientation.

comparing our deep 3dcnn to a simple flat neural network, our results show that the convolution architecture offers advantages. the convolutional architecture enforces the local filters to share weights across different locations in the input space, therefore significantly reducing the number of trainable parameters. the local filters enforce the features to be comprised of local spatial features that are recurrently observed and are important for classification instead of allowing the model to memorize combinations of input. these together reduce the tendency of over-fitting for our 3dcnn and allow better performance.

input featurization
two additional considerations for our 3dcnn performance are the dimension of the local box and input representation. the local box size defines the information accessible by the network and therefore is a hyper-parameter in our framework. here we extract local protein boxes of 20 Å based on our previous experience with the feature program. feature uses a sphere of diameter of 16 Å to define local microenvironment around functional atoms of each of the  <dig> amino acid because beyond a 16–20 Å cutoff, the atomic details do not provide significant additional information. we centered our box on cβ regardless of the amino acid type and enlarged our box by 4 Å to include equivalent surrounding information. for input representation, we divide boxes into grid voxels in this study. the biggest limitation of this design choice is that the grid voxel system is not rotationally invariant. therefore, we aligned all local boxes in a standard manner using backbone atoms of the central residue to ensure similar orientation. the fine-grain feature extraction procedure enabled our network to achieve good performance in characterizing the amino acid environment.

CONCLUSIONS
to our knowledge, this is the first paper that performs head-to-head comparisons between models utilizing hand-engineered features and end-to-end trained deep learning networks in the context of protein engineering. the consistent success of our deep 3dcnn over methods using human-engineered features suggests that the freedom to discover arbitrary features from raw data provides advantages over pre-defined features. our results suggest that 3dcnn framework is well suited for analysis of protein microenvironments, and that many of the benefits of cnns for 2d image analysis accrue in the context of 3d protein analysis. the deep learning framework may hold promise for more advanced protein analyses such as pocket similarity evaluation or predicting protein-protein interactions as more structural data become available.

additional files

additional file 1: table s <dig>  3dcnn and mlp network architecture. table summarizing the network architectures of 3dcnn and mlp. 

 
additional file 2: table s <dig>  individual and knowledge-based group classification accuracies of 3dcnn and mlp. summary of the individual and knowledge-based group classification accuracies of 3dcnn and mlp. the deep 3dcnn achieves superior prediction performance compared to the mlp model, demonstrating the advantage of the deep 3d convolutional architecture over a simple flat neural network with the same input. 

 


abbreviations
3dcnnthree dimensional convolutional neural network

aalanine

blosumblocks substitution matrix

c, cyscysteine

cnnconvolutional neural network

daspartate

eglutamate

f, phephenylalanine

gglycine

gpugraphics processing unit

hhistidine

i, ileisoleucine

klysine

lleucine

m, metmethionine

mlpmulti-layer perceptron

nasparagine

pproline

pampoint accepted mutation substitution matrices

pdbprotein data bank

qglutamine

rarginine

relurectified linear unit

sserine

svmsupport vector machine

tthreonine

v, valvaline

w, trptryptophan

ytyrosine

electronic supplementary material

the online version of this article  contains supplementary material, which is available to authorized users.

