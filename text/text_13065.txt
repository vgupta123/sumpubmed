BACKGROUND
in the recent years, in silico structure based ligand design  has become a major approach for the exploration of protein function and drug discovery. it has been proven to be efficient in the identification of molecular probes, in investigation of molecular recognition, or in the identification of candidate therapeutic compounds . whereas sbld encompasses a wide range of aspects, one approach of importance is structure based virtual screening . in sbvs, one searches, given the structure of a protein, to dock candidate compounds to identify those likely to bind into a candidate ligand binding site .

the identification and characterization of pockets and cavities of a protein structure is a key issue of such process that has been the subject of an increasing number of studies in the last decade. several difficult aspects have to be considered among which:  the candidate pocket identification itself  <cit> . here, one needs methods to identify and delimit cavities at the protein surface that are likely to bind small compounds.  pocket ranking according to their likeliness to accept a small drug-like compound as ligand, for instance. since often several pockets are detected at a protein surface, it is necessary to have some characterization of them in order to select the relevant ones. although the largest pocket tends to frequently correspond to the observed ligand binding site , this rule cannot be generalised. different studies have tackled this problem, see for instance  <cit> . it has in particular been shown that the use of evolutionnary information such as residue conservation helps re-ranking the pockets  <cit> .  last, but not least, there is often an adaptation – the so called induced fit – of the pocket geometry to the formation of a complex with the ligand . this last point creates several issues in terms of pocket detection – the pocket could or could not be properly detected in absence of ligand – and in terms of scoring since scoring functions are strongly dependent on the quality of the pocket identification and delimitation, but also are sensitive to conformational changes. here, we focus on the primary but central aspect of candidate pocket identification from structure.

it is not easy to summarise the diversity of approaches that have been proposed so far for candidate pocket identification. roughly, some are based on pure geometric analysis of the surface of the protein  <cit> , whereas some others involve energy calculations  <cit> . another way of distinguishing between the various approaches is to consider the detection algorithms. these can be classified as grid-based, and grid-free approaches. grid based approaches  <cit>  cover the proteins with a 3d grid and then search for grid points that are not situated within the protein and that satisfy some condition. for instance, pocket  <cit> , and the derived ligsite  <cit>  search for protein-solvent-protein  events on the grids to identify pockets as positions enclosed on both sides by the protein. pocket-picker  <cit>  uses a buriedness index to identify clusters of grid points likely to correspond to ligand binding pockets. laurie and jackson  <cit>  position a methyl probe at grid points and calculate an interaction energy with the protein. an et al.  <cit>  calculate a grid potential map of the van der waals force field using a carbon atom probe. grid free approaches encompass  probe  based approaches as well as methods using the concepts of voronoi diagrams. sphere or probe approaches are based on the positioning of probe spheres at protein surface and to identify clusters of spheres having some property representative of candidate pockets. surfnet  <cit>  positions gap spheres between any pairs of atoms, reduces their radii so that they do not intersect any atom, and retains spheres with a radius more than a given threshold. pass coats the protein using small probes positioned from unique triplets of atoms, and then identifies candidate pockets using a "burial count" – a number of protein atoms within a distance of the probe – to exclude convex parts of the surface. iterative coating of remaining buried parts further allows the detection of "active site points" that represent the centres of potential pockets. more recently, both nayal et al. and kawabata & go have proposed approaches using two different probe sizes to identify cavities. small probes are used to identify a collection of positions at protein surface whereas large probes are used as a means to select the small probes located in depressions at protein surface. among approaches related to voronoi diagrams, cast  <cit>  and apropos  <cit> , extract from the delaunay triangulation of the convex hull the so called alpha-shape – a subset of the triangulation from which voronoi vertices and edges outside the molecule are omitted. the commercial package sitefinder  <cit>  uses the concept of alpha spheres – spheres that contact four atoms and do not contain any atom  – to identify cavities. finally, kim et al.  <cit>  have recently proposed another approach based on the identification of "pocket primitives" from voronoi diagrams.

in terms of availability, several of these approaches can be accessed via web servers , but very few packages are available for distribution. some have been released as binaries , and for instance only the recently released pocketpicker  <cit>  and ligsite  <cit>  are available as open source softwares. there are a lot of research topics for which the availability of a free method can be of interest. concerning this precise field, a part which is of major interest is development of scoring functions. these functions enable ranking of cavities when compared to each other. they are trained usually on descriptors of the binding pocket. next, one has to assess rapidly the performance of these scoring functions. still today, extraction of relevant pocket descriptors as well as assessment of scoring functions is an issue. one generally has to develop automatisation protocols for assessment. available free tools performing these tasks might fasten discovery in computational binding site and drugability prediction. besides, there are several scopes in which flexible software adaptation from source code might be required. for instance, the search for catalytic site pockets might differ from the search for protein-protein interaction effectors or carbohydrate-protein binding sites. finally, speed remains an issue, in a context where the pocketome size keeps increasing. in a general manner, the user should also be able to freely complexify the algorithm, in order to improve its performance and repropose the modifications freely to the scientific community. thus, fast, accurate and high performing development based on a community willing to share their improvements might lead to a leading edge software package for pocket identification. pocketpicker makes one step in this direction. however, it was developed in python and is specially adapted for visual purposes within pymol. thus pocketpicker seems adapted for punctual visual pocket detection, but not really adapted for large scale evaluations, especially due to execution speed limitations.

in this paper, we introduce a free pocket detection software called fpocket. it is based on the alpha sphere theory, an approach that relies on voronoi tessellation that is among others the basis of the commercial software sitefinder available within moe from chemical computing group  <cit> . it has several inherent advantages such as computational efficiency, the direct identification of the atoms of the proteins involved in a pocket, and promising possibilities to combine pocket detection and docking using a unified framework  <cit> . using this approach, we propose a modular package to organise large scale pocket detection, descriptor extraction and benchmarking.

implementation
concepts
fpocket relies on the concept of alpha spheres, introduced by liang and edelsbrunner  <cit>  and also used by chemical computing group in the sitefinder software  <cit> .

briefly, an alpha sphere is a sphere that contacts four atoms on its boundary and contains no internal atom. by definition the four atoms are at an equal distance  to the alpha sphere centre. alpha sphere radii reflect the local curvature defined by the four atoms:  <dig> atoms in a plane would correspond to an alpha sphere of infinite radius, and conversely,  <dig> atoms packed at the apex of a tetrahedron would lead to a value of radius close to that of the van der waals radius. for a protein, very small spheres are located within the protein, large spheres at the exterior, and clefts and cavities correspond to spheres of intermediate radii. thus, it is possible to filter the ensemble of alpha spheres defined from the atoms of a protein according to some minimal and maximal radii values in order to address pocket detection. in practice, alpha sphere identification can be related to voronoi decomposition of space: the centre of alpha spheres correspond to voronoi vertices – points at which voronoi regions intersect.

once having identified a filtered ensemble of alpha spheres, another property of interest is that candidate regions of interest such as clefts at protein surface have larger occurrence of alpha spheres. thus, the search for ligand pockets can be turned as the search for clusters of alpha spheres of proper radius. finally, the knowledge of the spheres also comes with the identification of the atoms of the protein involved. it is thus easy to type the spheres according to some properties depending on the atomic types – such as for instance hydrophobicity – in order to filter the clusters. conversely, knowing a pocket, it is also possible to extract properties for the atoms defining it.

algorithm
the fpocket core can be resumed by three major steps. during the first step the whole ensemble of alpha spheres is determined from the protein structure. fpocket returns a pre-filtered collection of spheres. the second step consists in identifying clusters of spheres close together, to identify pockets, and to remove clusters of poor interest. the final step calculates properties from the atoms of the pocket, in order to score each pocket.

voronoi tessellation and alpha sphere detection
voronoi tessellation is performed using the qhull package and more precisely the program qvoronoi  <cit> . qhull's source code is freely available on . fpocket submits the heavy atom set for voronoi tessellation to qhull. in return fpocket receives a set of coordinates of voronoi vertices, atomic neighbours and vertex neighbours. this list of voronoi vertices is then pruned according to two parameters: a maximum size of alpha spheres and a minimum size. pruning the alpha spheres set by this maximum size and minimum size enables the elimination of solvent inaccessible alpha spheres and too exposed alpha spheres. finally, only alpha spheres defined by zones of tight atom packing are retained and all the other alpha spheres are discarded.

alpha spheres are then labelled according to the atom type they contact. fpocket defines alpha spheres as apolar when they are contacting at least  <dig> atoms with a low electronegativity , typically carbons and sulfur in proteins. subsequently, polar alpha spheres contact  <dig> or more polar atoms .

clustering of alpha spheres
this step has to be performed on several tenth of thousands of alpha spheres. three different clustering steps are applied to the set of alpha spheres. the first one is a rough segmentation pass. in order to perform this step in a reasonable calculation time, fpocket uses the neighbour lists output from qhull that indicates voronoi vertices connected to each other by an edge. fpocket checks if these interconnected vertices are close to each other and identifies a first set of clusters using a simple distance criterion. after this first pass, all clusters having only one sphere – generally large spheres situated at the protein surface – are removed, and the centre of mass of each cluster is calculated. the next clustering step consists in the aggregation of clusters having proximate centres of mass. this way, small clusters of alpha spheres, especially on the surface are aggregated into one single cluster. reducing complexity of an alpha sphere cluster on one single barycentre provides a rapid approach in order to group small clusters together, without performing a loop on all alpha spheres. finally, a step based on a multiple linkage clustering approach is carried out in order to perform final fine clustering. during this step, all vertices of one cluster are compared to vertices of another cluster. if a certain number of alpha spheres of one cluster are near a certain number of alpha spheres of another cluster, both clusters are merged together.

after these three clustering steps, a pruning of uninteresting alpha sphere clusters can be performed. at this stage, small and essentially polar clusters can be dropped from the protein surface. user defined minimum number of alpha spheres and apolar spheres are used in order to influence removal of rather hydrophilic or small putative binding pockets. note that this facility proposed to users is not used in the present study.

characterization and ranking of the pocket
last, clustered pockets were characterised in order to rank pockets according to their ability to bind small molecules. note that the current ranking of pockets does not reflect drugability. it simply reflects the putative capacity of the pocket to bind a small molecule, that might be drug-like, but might also be a sugar, cofactor or coactivator. this rather basic but successful scoring scheme was derived using partial least squares  fitting to some of the currently implemented pocket descriptors in fpocket.

core programs
the fpocket package is made of three components: fpocket  to perform the pocket identification, as described previously. tpocket  is provided in order to organise the benchmarking of the pocket detection algorithm over collections of structures, and dpocket , designed to extract descriptors from collection of pockets from multiple structures. a flowchart of each is reported figure  <dig>  note, that the core of tpocket and dpocket is fpocket, exactly the same as the standalone fpocket program. simply a layer of large scale statistical analysis was added to these two programs, in order to facilitate high throughput pocket detection and assessment of scoring performance.

fpocket
- alpha sphere filtering parameters are related to the minimum  size of alpha spheres: the minimum  size an alpha sphere might have during alpha sphere docking on voronoi vertices. alpha spheres beneath  this size are discarded from clustering.

- alpha sphere clustering parameters: three parameters control the three consecutive clustering steps of fpocket:  the maximum distance between voronoi vertices for the 1st clustering step,  the maximum distance between two cluster centroids for clustering step  <dig>  and  the maximum distance between two alpha sphere centres  for the multiple linkage clustering step.

- pocket pruning parameters: it is controlled by three parameters:  the minimum number of alpha spheres in a putative binding pocket, to prune too small clusters,  the minimum ratio of apolar alpha spheres over the total number of spheres to prune too hydrophilic pockets – currently not in use.

on exit, fpocket will return different files containing information about the identified pockets. first, it will return a pdb file containing all atoms used for pocket detection from the input pdb file , supplemented by the positions of all alpha sphere centres  retained after pocket detection. voronoi vertice positions are added as hetatm in the pdb file. the residue name associated to these vertices is stp . residue numbers are given according to the pocket numbering and thus ranking. one can distinguish two types of voronoi vertices  in the pdb output:  apol, for apolar vertices and  pol, for polar vertices. second it returns a file using the pqr convention that contains only the alpha sphere centres and radii. again, residue numbers correspond to pocket ranks. third, a file containing statistics about each pocket is provided. it lists different characteristics and scores of pockets identified on the surface of the protein. fourth, scripts are provided, intending to render easier visualisation of putative binding pockets using pymol or vmd. finally, a per pocket series of files is also provided. for each pocket, a pdb file containing only the atoms defining the pocket and a pqr containing only the alpha spheres of the pocket are written.

tpocket
tpocket  has been designed as a framework for the evaluation of the performance of the pocket detection algorithm and the accuracy of the implemented scoring function: users trying to implement their own scoring functions can easily assess their performance using tpocket. the general workflow of this framework is presented on figure 1b. generally one wants to assess a scoring function on a collection of pdb structures for which the binding site is known. in addition, it can be of importance to compare the performance of pocket detection for both apo and holo forms of the same protein. tpocket can manage both constraints using an input list file, where each line should contain the information about one pair of related apo/holo structures: "path_to_the_apo_structure path_to_the_bound_structure name_of_the_ligand " and the name of the ligand is specified using the same  <dig> letter code  as in the pdb file. note that when assessing the performance of fpocket using a set of apo/holo structures, the two forms should be superposed prior to the analysis.

the tpocket output is split up in two files. first, global performance for all available evaluation criteria described later is provided in a simple text file. second, more detailed information about pocket detection is written in a separate text file for each structure, including the total number of pockets retained, all evaluation criteria implemented, the rank of the actual pocket detected by fpocket for each criteria, and some other values such as ligand and pocket volume evaluation, number of atoms in the pocket... among other things, this file allows the identification of structures for which the fpocket detection failed  for each evaluation criteria.

the fpocket prediction performance presented in this paper are based on tpocket results. consequently, besides careful manual inspection of pocket evaluation results, they were further validated by an external evaluation script. a svl  script was developed using the moe software from the ccg. this script evaluates fpocket performances based on fpocket output only. tpocket and the svl script gave both exactly the same result.

dpocket
dpocket  is designed to organise descriptor collecting from a series of co-crystallized complexes. it accepts a list of structures to analyse using a file containing the information about one structure per line, on the form:

"path_to_the_structure name_of_the_ligand1"

for each structure, dpocket extracts several simple descriptors using atom, amino acid and alpha sphere information. currently, the set of descriptors implemented is related to  alpha spheres   protein atoms   residues   volume. additionally, some of these descriptors are normalised between  <dig> and  <dig> to allow comparison between pockets of different proteins. although many of these descriptors are basic, users can easily implement more sophisticated analysis of pocket properties. besides, the current scoring function shows impressive performance and is based on only  <dig> of these simple descriptors.

dpocket provides three different output files. first, descriptors extracted from alpha spheres next to the ligand, are written in a separate text file. second, descriptors for correctly identified binding pockets are extracted. last, descriptors for other pockets found by fpocket are extracted in a separate text file. detailed information on each descriptor used in the current version can be found in the full documentation.

parameter optimisation
in order to determine optimal parameters for fpocket, a data set based on the protein test set used by an et al. in  <dig>  <cit>  for the evaluation of pocketfinder was used. the set described by an et al., composed of  <dig> protein ligand complexes and  <dig> apo forms is rather redundant, despite the fact that  <dig> complexes are composed of the combination of  <dig> unique proteins and  <dig> unique ligands. the structural redundancy was eliminated allowing a maximum sequence identity of 50% between different proteins of this set. the pdb blastclust file, available on the pdb website was used for this purpose . this first filter resulted in  <dig> proteins that we further validated by hand, in order to perform training on well defined binding pockets. monomers and homo-multimere containing more than one single binding pocket for the same ligand were removed. no particular filters were applied to the ligand type, as the druglike concept is still a matter of debates. during training, all hetero atoms were dropped from the pdb structure and pocket detection was performed not taking into account hydrogen atoms. only structurally important hetatm recordings, like hemes, zinc etc. were kept in order to detect a "biologically" available binding pocket. a complete list of kept hetatm recordings is available in fpocket manual.

currently, fpocket contains standard parameters determined by an semi combinatorial/empirical optimisation step using this training set. basically, the fpocket parameters allow enough flexibility to obtain many small pockets as well as few very large pockets. during this optimisation, our goal was to clearly identify the pockets using two main pocket identification criteria . pockets found by the algorithm should be neither too small nor too large. to do so, it was intended to obtain a good relative overlap . additionally, we attempted to minimise the number of pockets returned by the algorithm. the resulting fpocket standard parameter values are an alpha sphere minimum  size of  <dig>   Å, a minimum connection distance  <dig>  of  <dig>   Å, a minimum number of alpha spheres of  <dig> 

scoring function
fpocket currently uses a simple  <dig> component pls derived scoring function. this scoring function makes use of the ligand coverage as the dependant variable, and of the five following descriptors implemented in dpocket as independent variables:  the normalised number of alpha spheres,  the normalised mean local hydrophobic density,  the normalised proportion of apolar alpha sphere,  the polarity score  and  the alpha sphere density, defined as the mean value of all alpha sphere pair to pair distances in the binding pocket.

note that the normalisation here means that the basic descriptor was scaled to a 0– <dig> range, so that for example the largest and the smallest pocket within a given protein would have a normalised number of alpha spheres of  <dig> and  <dig>  respectively.

the model was trained using the dpocket output statistics run on the training dataset previously defined. no additional normalisation of descriptors  was used as no difference was shown in terms of prediction accuracy.

site identification assessment
in order to assess pocket prediction performance, one has to compare identified pockets to the real binding pocket. different approaches exist in order to do so. fpocket implements different methods to assess whether a binding pocket was found or not.

pocketpicker criterion : this is the criterion used in the pocketpicker  <cit>  study. here the geometric centre of the pocket is calculated. if the position of this centre is within  <dig> Å from any atom of the ligand, the binding site is considered correctly identified.

mutual overlap criterion : this criterion considers a pocket successfully identified if at least 50% of the ligand atoms lies within  <dig> Å of at least one alpha sphere, and if at least 20% of the pocket alpha spheres lie within  <dig> Å of the ligand. in other words, the first condition ensures that the ligand is at least half covered by the pocket, and the second condition allows the pocket to be quite large, but not too much as a significant proportion of probe still has to lie next to the ligand. note that pockets larger than the effective region of interaction with the ligand have to be considered since several ligands may bind to different regions of the pocket .

the moc is introduced for two main reasons:  to further validate fpocket and see if it's performance remains acceptable using a rather different evaluation criterion and  to address two issues related to the ppc.

firstly, ppc does not ensure that a reasonable fraction  of the ligand lies within the pocket identified. for example, a small cluster of probes  next to the ligand could be considered as a successful identification of the pocket even if none of the ligand atoms actually lies within the pocket volume. secondly, large pockets generally cannot be considered as successfully identified using this criterion. although it ensures that very large pocket , are considered as failure, we believe that this criterion is too restrictive, especially  when the ligand is small and/or not located at the centre of the pocket found,  when the pocket is simply very large  and  when the pocket does not have a simple globular form.

RESULTS
evaluation of pocket prediction accuracy
comparison of results obtained for fpocket and other approaches. for sake of comparison, scores are reported using the ppc, and we present scores at rank  <dig> and  <dig> . for the pocket picker dataset, results are taken from  <cit>  for all but fpocket. for fpocket, numbers within parentheses correspond to scores obtained using the moc.

in table  <dig> are also listed the fpocket performances using the mutual overlap criterion  introduced in this paper. compared to the ppc, no significant differences are observed in terms of performance measures for the pocket picker set, but slightly smaller  performance measures on the cheng  set. however, on average, the performance at rank  <dig> remains more stable, close to 90% using the moc. looking more in detail, the 5% difference of observed for the cheng set only represent one protein, due to the low number of structures in this set. the astex diverse set contains  <dig> proteins for which the moc and ppc disagree, and for all of them, the moc detects the pocket correctly while the ppc does not. pocket size seems to be the major issue. in the astex dataset, the mean number of atoms per pocket is  <dig> . for the  <dig> cases mentioned previously, this number ranges between  <dig> and  <dig>  this illustrates a better behaviour of the moc on larger pockets for which ppc seems unadapted – see methods.

examples of successful identification of binding sites
on figure 2b another interesting feature about fpocket is shown. here the binding pocket of hiv <dig> protease is depicted in complex with the dupont merck inhibitor dmp <dig> . for representative reasons the protein structure was omitted and only the surface of the pocket is shown  with the embedded ligand. the small interconnected spheres are the alpha sphere centres. orange alpha spheres are polar alpha spheres, white alpha spheres are apolar. the same colour code was used for the colouring of the pocket surface. here, one can notice that the positions of alpha sphere centres follow surprisingly well the topology of the ligand . note, however, that this is not a general property of voronoi vertices. next, physicochemical properties of the ligand are reflected by the sourrounding binding pocket. the pocket identified by fpocket seems far longer than the actual binding position of the ligand. however other drug like molecules  are known to make interactions also with residues situated on the edge of the pocket .

these examples show that fpocket is able to detect solvent exposed and very buried binding sites, that bind ligands of a very different nature 

last an example of cyclooxygenase- <dig> indomethacin complex  is depicted on figure 2c. the binding pocket identified using pocketpicker is represented as yellow halo. as red halo one can find the fpocket identified binding pocket. both binding pockets include the actual space of the pocket occupied by the ligand, but the pocketpicker yields a far bigger pocket, including sourrounding channels.

examples of unsuccessful identification of binding sites
computational performance
the algorithm was assessed on a intel celeron m  <dig>  ghz,  <dig> gb ram architecture and performed roughly one structure per less than one to three seconds, depending on the size of the structure. for the sake of completeness, performance of ligsite and pass was compared on the same structures. ligsite performed pocket detection on one structure in  <dig> seconds, pass in  <dig> to  <dig> seconds. thus, fpocket appears particularly well suited for large scale evaluations and is situated among the fastest algorithms in the field.

pocketpicker performs roughly one structure in several hours of calculation depending on the size of the structure.

CONCLUSIONS
we have introduced fpocket, a new open source pocket identification platform. compared to other approaches of the field, fpocket performs well on state of the art data sets. from the complexed protein conformations, fpocket reaches the best performance at rank  <dig>  on the ligand free structures, similarly to other approaches, fpocket performance drops at rank  <dig>  but is much better at rank  <dig>  outperforming other approaches by more than 9%, opening the door to further pocket drugability filtering approaches. interestingly, fpocket is among the fastest algorithms in the field. this makes fpocket particularly well suited for high throughput pocket detection and construction of cavity databases. next, fpocket comes with its underlying programs, tpocket and dpocket, providing powerful research tools for a large scale assessment of own pocket scoring functions and properties of binding pockets, respectively. its open source character provides a useful contribution to the scientific community willing to further develop and research in the pocket identification and specific molecular binding field.

availability and requirements
fpocket source code  is freely available under the gnu gpl license at . the required qhull package is shipped and compiled together with fpocket in the official fpocket release.

authors' contributions
vlg and ps have equally contributed to fpocket development. pt has initiated and supervised fpocket development.

