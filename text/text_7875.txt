BACKGROUND
the advent of the post-genomic era in biology has led to a dramatic increase in the amount of multi-dimensional, quantitative data that must be analysed by the bioinformatician. this is especially true in the case of genome-scale analyses of the transcriptome, proteome and metabolome, particularly when such measurements have been made in parallel using high throughput technologies involving microarrays and mass spectrometry techniques  <cit> . analyses of these data rely on the performance of in silico experiments, involving the inductive detection of patterns in the data to which some phenotypic significance can be attributed  <cit> . such analyses usually rely on statistical testing and linking the results of these tests with information stored in biological databases to summarise and develop conclusions. for example, the analysis of gene expression data generated from microarray experiments consists of a number of steps. the process begins with the normalization and standardization of transcript data, followed by statistical evaluation, and finally, interpretation of the statistical results via the annotation of genes with information relating to their biological function  <cit> .

there are a number of issues associated with the use of computational tools in the analysis of quantitative data. firstly, learning how to use such tools for statistical analyses can require significant time and effort. this is especially true for mathematical tools such as matlab  <cit>  and r  <cit>  which require prior knowledge of their programming languages and the functions within them in order to implement statistical algorithms. secondly, there is the overhead of transferring data between computational resources during each step of a data analysis pipeline which is made more difficult due to the inconsistent nature of the user interface to the tools. for example, a user may access r from the command line whilst the querying of online sequence databases is made through the use of a web browser. piping the output of one resource to another will therefore require intermediate staging of the data so that they may be passed manually amongst multiple tools  <cit> . thirdly, the interoperability of computational tools can be awkward due to the heterogeneity of data in bioinformatics. the output data provided by a database service may be incompatible as input to the next analysis service both in terms of its structure and its semantics. in these cases, data have to be reconciled by a transformation step in order for them to be consumable by the next service.

in silico experiments on bioinformatics data may be realised as workflows consisting of a pre-defined series of tasks that are related to one another by the flow of data between them. such workflows can be constructed and enacted using applications such as kepler  <cit> , triana  <cit>  and pegasus  <cit>  that automatically direct the flow of data between the information repositories and computational tools responsible for performing the tasks within an in silico experiment. these workflow systems enable the use of distributed resources which have been deployed using web services, a distributed computing architecture that uses existing internet communication and data exchange standards to support interoperable application-to-application interaction over a network  <cit> . web service-enabled resources provide a web-based application programming interface  that is published in a machine-processable format such as web services description language   <cit> . interaction of client applications with the web service is independent of the computing platform used to host the service resource. other systems interact with the web service in a manner prescribed by its interface using messages which may be enclosed in a soap envelope and are typically conveyed on the web in the form of xml.

the mygrid project has developed a workflow system called taverna  <cit>  which is capable of invoking several types of local and online tools that can perform the various tasks of a constructed workflow  <cit> . different processor implementations are used to invoke applications depending on the type of invocation mechanism including web services which are described in wsdl documents as well as those deployed using the soaplab  <cit>  and biomoby  <cit>  frameworks. workflows consisting of these and other types of processors are composed in the scufl workflow language using the taverna workbench, typically by an expert user of analysis and data services  <cit> . in this paper, we report on how the taverna workflow system can be used for the statistical analysis of quantitative, post-genomic data. using an example from the transcriptomics domain, we show a workflow which retrieves data using customised maxdbrowse web services from the maxdload <dig> microarray database  <cit> . this workflow then performs statistical analysis on the gene expression data using r to generate a list of differentially-expressed genes which is followed by the annotation of the genes with information stored in biological databases. furthermore, we show how extra functionality can be incorporated into taverna using a plugin mechanism that has been developed into its new software architecture, thereby enabling it to be tailored for use in different scientific domains including transcriptomics.

implementation
microarray data analysis workflow
the taverna workflow system is a java application which is composed of a number of software components including an enactment engine for the execution of workflows. in addition, taverna provides a workbench which acts as a graphical user interface for the construction of data analysis pipelines and this was used to compose the microarray data analysis workflow shown in figure  <dig> . the purpose of this workflow was to discover differentially-expressed genes by t-test analyses between two sets of microarray data followed by the identification of common terms from the gene ontology  associated with these genes  <cit>  . these terms were identified from the biological process, cellular component and molecular function sub-ontologies of the go using a web service wrapping of the gotermfinder tool  <cit>  .

web service access to maxdbrowse
prior to the analysis of the microarray data, the workflow was also responsible for the selection and retrieval of the gene expression data stored in a maxdload <dig> database, part of the maxd software suite for microarray data storage and visualisation   <cit> . microarray data and their associated metadata as defined by miame  <cit>  can be loaded into the database using the maxdload <dig> desktop application, whilst data can be queried and retrieved from a web browser using a php web application called maxdbrowse  <cit> . to enable data in maxdload <dig> to be accessed from taverna workflows, maxdbrowse now provides programmatic access to the database using web services  <cit> . a default set of operations is provided by the maxdbrowse web service, where each operation performs distinct queries providing access to different metadata about the microarray experiments held within maxdload <dig> as well as the actual gene expression level measurements . further operations can be added to maxdbrowse, by a site maintainer, for constructing new queries and customising output formats via a plugin interface. wsdl documents describing the operations for each web service are available and can be imported into the service palette in the taverna workbench from where they can be selected for inclusion into workflows .

use of beanshell scripts for reconciling mismatches in data interoperability between services and implementing user interaction during workflow execution
it is often necessary to transform data during their transfer between services within workflows due to incompatible mismatches in their syntactic format. in such cases, manual intervention is required to convert the data into the correct form prior to their consumption by a service in order for the workflow to enact successfully. to this end, the ability to execute scripts written in the beanshell programming language  <cit> , an interpreted form of java, was incorporated into a taverna processor  <cit> . beanshell scripts can be written to provide a mechanism of transforming data so that the data are consumable to services within a workflow. within the example microarray data analysis workflow, beanshell scripts have been used to merge multiple sets of microarray data retrieved from the maxdload <dig> database prior to their analysis using r. a beanshell script was also used to generate one of the final outputs of the workflow which was in the form of a text file of comma-separated values  containing a list of the differentially-expressed genes identified from t-tests combined with functional information obtained from public databases .

an ad hoc, albeit basic, form of user interaction can also be implemented using beanshell scripts through the use of java swing classes as part of a workflow enactment  <cit> . this was used by the example workflow for the multiple selection of two sets of microarray data for t-test analysis by r .

invocation of r from taverna workflows
the next step in the workflow is the statistical analysis of the two sets of gene expression data once they have been selected and retrieved from maxdload <dig>  a taverna processor called rshell has been developed to invoke scripts in the r computing environment, and was used to perform the statistical calculations for the t-test analyses  <cit>  . this processor acts as a client to r when it has been deployed as a tcp/ip server using the rserve library  <cit> , relaying the script and its inputs to be executed in the r environment . the script contains statements in the r programming language to implement the statistical calculations. in the example workflow, the rshell processor invokes the r server with a script to perform a t-test for every gene expression level, identifying those genes which are differentially-expressed from the data retrieved from maxdload <dig> . the location of the r server to be used for analysis is defined by a hostname and port number declared when configuring the processor. data are fed to the rshell processor via its input ports and are made available to the r script as variables named after the ports . in a similar fashion, the results generated after the execution of the r script are available from the rshell processor via its output ports by reading the last value assigned to the variable named after them . in addition, graphs generated by r can also be returned to taverna in the form of images as outputs by the workflow.

use of plugins for extending taverna functionality
both the beanshell and rshell processors provide taverna with access to generic tools for analysing different types of quantitative data. this is accomplished by these two processors without the need to develop and deploy web services, thereby enabling rapid prototyping without a web services infrastructure. taverna can also be tailored for use in specific scientific domains by extending its functionality with additional source code through the use of software plugins. a mechanism for plugins has been incorporated into taverna following a refactoring of its software architecture effected by the development of a tool called raven. originally inspired by maven  <cit> , raven enables taverna to be run according to information about the jar libraries that taverna components are dependent upon which reside in an xml file called the project object model .

an organisation can deploy a plugin site for taverna using two types of xml files. firstly, an xml file is required which lists the available plugins. secondly, each listed plugin requires an xml file containing information about its version, functionality and from where the pom file for the plugin can be downloaded. based on the information in this pom, raven will then download and install the associated and dependent jar library files for the plugin for use in taverna workflows. further information about the development and deployment of plugins is available online in the developers guide on the taverna web site .

there are interfaces specified in the api of taverna  <cit>  for extending different aspects of its workflow system with plugins including renderers for visualising different types of data which result from workflow outputs, and processors for invoking services with specialised programming interfaces. plugins and their dependencies are shared with the scientific community by their deployment to maven repositories which can be made available on a web server. plugins are installed in the taverna workbench through its plugin manager by providing a url which points to the xml file that lists the available plugins; those required by the user can then be selected for installation and use. in the microarray data analysis workflow, plugins were developed for displaying pdf documents  as well as for visualising quantitative data when formatted as csv as a table. these two renderer plugins can be downloaded and installed for use in taverna  <dig> . <dig> from  using the plugin manager on the taverna workbench.

RESULTS
the example workflow shown in figure  <dig> was evaluated using microarray data originating from a study into the effects of growth rate on the transcriptome of the yeast, saccharomyces cerevisiae, when grown under different nutrient-limiting conditions   <cit> . the data from this study were normalized by gc robust multi-array average background adjustment and then stored in the maxdload <dig> database  <cit> . the enactment of the workflow started with the selection and retrieval of data from the microarray database using the maxdbrowse web service interface and beanshell scripts. this was followed by the invocation of r with a script to perform a series of t-tests to identify the genes that are differentially-expressed between growth rates and culture conditions . common terms from the go associated with these genes were then identified using the gotermfinder web service. the gotermfinder service returns pdf reports of these common go terms which were browsed using the taverna workbench with the pdfrenderer plugin .

using the example workflow, the gene expression levels of yeast cultures growing under carbon limitation were selected for comparison between two different growth rates; those genes whose expression differs at  <dig>  h-1compared with  <dig>  h- <dig>  when the genes identified from t-test analyses at a p-value of less than  <dig>  were subjected to go analysis by the gotermfinder tool with a p-value at the 1% level, only broad go categories relating to the regulation of metabolic processes were identified . however, when the same set of genes was analysed by the go tool with a less stringent threshold , more go terms appeared relevant including those associated with gene expression . the corresponding analysis of go molecular functions for the same set of genes showed that some were involved in transcription regulation as well as encoding for a number of protein kinases.

the same analysis was applied to s. cerevisiae cultures growing at rates of  <dig>  h- <dig> and at  <dig>  h- <dig> under nitrogen limitation by selecting the appropriate data stored in the maxdload <dig> database during the enactment of the example workflow. a different pattern from that of the carbon limitation was observed since t-test analysis  and go analyses  found a higher number of genes whose products are associated with the metabolism of nitrogen compounds . the most over-represented go molecular function categories for this gene set corresponded to a variety of catalytic activities such as oxidoreductases, transmembrane transporter activities, and transferases.

the full set of results from the above analyses can be downloaded from .

discussion
statistical analyses of quantitative data can be constructed and performed in a generic fashion using the taverna workflow system. this was demonstrated by the t-test identification of differentially-expressed genes from microarray data using the workflow shown in figure  <dig>  such generic analyses were made possible by a number of new features present in taverna and in particular the development of the rshell processor which acts as a client to r when deployed as a service using the rserve library. standalone web services can offer specific types of statistical analysis such as clustering for data analysis. however, the development of the r processor means that any type of statistical analysis can be performed on data when implemented as a script in the r programming language within a taverna workflow  <cit> . this is of particular benefit to the transcriptomics domain since this processor provides taverna with access to further tools based on r for analysing microarray data such as bioconductor  <cit>  which was used by fisher and colleagues for the identification of candidate genes associated with trypanosomiasis in workflows  <cit> . a number of tools such as onechannelgui  <cit>  and genepublisher  <cit>  already provide users with access to r and bioconductor from a graphical user interface. however, the advantage of coupling the r tool with an application like taverna is that the workflow system provides an interoperability platform for data to be fetched from distributed services for subsequent analysis using r in a workflow. conversely, the results of an r analysis can be sent for further processing by services downstream in the workflow. the use of distributed data and analysis services in conjunction with r were demonstrated in the example workflow . data analysed by r were provided by the maxdload <dig> microarray database using its web service interface provided by maxdbrowse and the results of this were further analysed by the gotermfinder tool.

the current work on analysing quantitative data extends that by stevens and coworkers who investigated the implementation of gene annotation pipelines as workflows in a previous version of taverna  <cit> . since then, ad hoc functionality can be incorporated into taverna workflows through the use of a processor which executes scripts written in the beanshell language java  <cit> . such scripts provide a method for implementing shim services  <cit>  which, in the example workflow, were used to reconcile data mismatches between services . beanshell scripts were also used to implement a basic form of user interaction using java swing classes to steer workflows during their enactment. in the example workflow, this technique was used to select different pair-wise combinations of classes for t-test analysis. this type of interaction is used by the workflow user to direct the workflow to analyse specific subsets of data which are not known at runtime.

scripts written in the beanshell and r languages provide generic functionality which can be used as tools to analyse specific types of quantitative data from different scientific domains. in addition, domain-specific functionality can be provided for use in scientific workflows through the plugin mechanism now present in taverna's software architecture. the ability to incorporate plugins makes it easier for the scientific community to contribute and share functionality in taverna without the need for their source code to be tightly coupled with the core. in the example workflow , the plugin mechanism was demonstrated by the implementation of renderers for browsing pdf documents  and the display of text files containing quantitative data in csv format as tables. in the context of the current work, an opportunity for developing other plugins for analysing quantitative data might include the ability to invoke analyses in other applications such as matlab  <cit>  and mathematica  <cit>  for those users who prefer these tools to perform their calculations.

an initial investment in time and effort is required to construct data analysis workflows. this was true in the case of the example microarray data analysis workflow since a working knowledge of the r programming language is required to devise the t-test analyses, as well as experience of java programming for writing beanshell scripts to implement user interaction and shim services. a lack of experience in these two languages can therefore prohibit the construction of complex data analysis workflows by entry-level users of taverna. however, the fact that workflows can be saved as xml files in the scufl language allows these analyses to be shared with colleagues and with the wider life sciences community. this is especially pertinent to multi-disciplinary research groups whose expert data analysts use r and other similar tools to develop data analysis protocols, which are then employed by colleagues who are laboratory scientists. this laboratory group of scientists understand the conceptual basis of the analysis performed by the r script but may not have the inclination  to learn the r programming language in order to understand how such scripts have implemented their analyses. since it is often the case that there are many more producers of data than there are experts in data analysis within a research group, it is desirable for the laboratory scientists themselves to perform analyses of their own data by re-using r scripts, that may have been incorporated into workflows, written by the data analysis experts. these workflows can therefore be regarded as standard operating procedures providing a best-practice solution for analysing specific types of data. the automation of analyses afforded by taverna and other workflow software such as kepler  <cit>  enables laboratory scientists to quickly test hypotheses on their data by guiding them through complex statistical analyses, especially when users can steer and interact with the enactment of a workflow. this enables a user to run multiple analyses with different parameterizations which was required for the analysis of the microarray data in this study in order to extract information about what was biologically significant. this benefit provided by a workflow approach to users has been implemented by providers of commercial microarray data analysis software such as genespring  <cit> .

there are still a number of issues highlighted by the current microarray data analysis study associated with the use of web services and workflows that still need to be addressed. firstly, there is the problem of securing analysis services such as that provided by an r server used in the example workflow. such services may have been deployed on powerful compute clusters and so their use by unauthorised users within workflows is undesirable. using the rserve library, the r server can be configured to allow access for those users providing the appropriate username and password combination. however, this information is embedded within the scufl file and so it is not suitable to share this file with anyone other than colleagues. future work on the development of taverna  <dig>  involving the use of distributed agents to handle the security of services during workflow enactment will address this problem. the sharing of workflows within the life sciences community is also an issue that is currently being addressed by the myexperiment project  <cit> . it introduces the concept of social networking web sites for workflows and aims to provide a collaborative environment for scientists to safely publish their workflows with supporting documentation, and share them with a wider group of people as well as addressing concerns relating to their attribution, credit and intellectual property on the web.

CONCLUSIONS
statistical calculations implemented in the r programming language can be combined with the use of other distributed computational tools and databases in taverna workflows for performing bespoke analyses on post-genomic data. in this fashion, the taverna workflow system provides a generic tool for the analysis of quantitative data. together with beanshell scripts and specially designed plugins, workflows can be written for the analysis of data from different scientific domains by data analysis experts. these workflows act as standard operating procedures which guide users in the analysis of the data they have generated, enabling them to quickly test hypotheses against data.

availability and requirements
taverna  and its supporting documentation are available from . supplementary material including the example workflow, its accompanying documentation, and the results of the analyses described in this paper are available from . the example microarray data analysis workflow is also available from the myexperiment web site: .

authors' contributions
pl was responsible for writing the manuscript with the help of dbk. pl also developed the microarray data analysis workflow including the embedded r and beanshell scripts, and the plugins for displaying the results of the workflow in the taverna workbench. jic and sgo interpreted the results from the workflow analyses and revised the manuscript. gv developed the maxdbrowse interface to the maxdload <dig> database. to, mrp, ss–r, dw and so are developers on the taverna and mygrid projects which are led by cag. iw and ss–r developed the rshell processor. all of the authors have read and approved the final manuscript.

supplementary material
additional file 1
workflow.

click here for file

 additional file 2
carbon t-test.

click here for file

 additional file 3
nitrogen t-test.

click here for file

 acknowledgements
pl and dbk thank the bbsrc for financial support, and dbk and sgo acknowledge the financial support of the bbsrc and epsrc in the manchester centre for integrative systems biology . systems biology research in the cambridge laboratory is supported by bbsrc grants to sgo. the work undertaken by iw was part of the biorange programme of the netherlands bioinformatics centre , which is supported by a bsik grant through the netherlands genomics initiative . the authors thank duncan hull and leo zeef for helpful discussions and suggestions on the improvement of the manuscript. we also thank thomas down for his work on raven.
