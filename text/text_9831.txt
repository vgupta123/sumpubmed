BACKGROUND
gene expression signatures are powerful tools that can reveal a range of biologically and clinically important characteristics of biological samples. in recent years, signatures have been developed that can differentiate distinct subtypes of tumors, identify important cellular responses to their environment , predict clinical outcomes in cancer, and model the activation of signaling pathways  <cit> . the power of gene expression signatures derives from their ability to connect an in vitro experimental state with an in vivo one in a quantitative manner. commonly, the term gene expression signature has been used in two ways. in one, the signature is comprised of a set of genes that share a common pattern of expression. sometimes this can be reported as genes that increase or decrease in expression, but the basic characteristic of the signature is the identity of the genes. because of this, these signatures are often called gene sets. gene sets have been curated from the literature and collected into databases such as msigdb and genesigdb  <cit> . tools have been developed that can analyze gene sets by looking for shared function or characteristics such as gene ontology terms  <cit>  or drug sensitivity  <cit> . another tool, single-sample gsea has been previously applied to predict the co-regulation of gene sets from msigdb on gene expression samples  <cit> . evidence of co-regulation is then used to infer the activation of the phenotype embodied by the gene set.

the second type of signature relates the magnitude of increase or decrease in gene expression, in the form of weighted values, to a biological phenotype using a quantitative predictive model  <cit> . these signatures are often developed from experimental conditions that precisely control the phenotype of interest - for instance, the activation of a cell signaling pathway or the response of cells to a defined stimulus. since the signature is comprised of a quantitative measure of the expression levels of genes that define the phenotype, it allows a direct measurement of the phenotype, rather than an indirect inference through co-regulation of genes in a gene set. a limitation of this approach, however, is the complexity of the methods used to derive and analyze the signatures, making it difficult to apply without significant multidisciplinary expertise  <cit> .

three major obstacles hinder the broad use of signatures. first, gene expression signature analysis requires the rigorous application of complex statistical methodologies on gene expression data. second, it requires the acquisition and validation of data that properly capture the biological state of interest. third, it requires a computational infrastructure that makes available the statistical software and data in an easy to use interface. in sum, gene expression signature analysis requires a confluence of expertise across a range of disciplines, including statistics, biology, and computer science.

while others have previously made use of our approach  <cit> , it does require a level of expertise and computational infrastructure not always available in biological laboratories. this bioinformatic investigation, requiring the proper selection and application of statistical algorithms, as well as biological curation and validation of the signatures, can be daunting. therefore, a challenge is how to develop software tools that enable such analyses for the general user. while it has long been recognized that software can target different types of users, a set of principles for software that is biologist-friendly was recently described  <cit> . in short, the recommendations are that the software 1) requires no knowledge of programming, 2) allows application of advanced methods, 3) can be used on different operating systems, and 4) provides a natural language description of the results. while such software has been developed for biological sequence alignment  <cit> , sequence annotation  <cit> , phylogenetic analysis  <cit> , and comparison of prokaryotic genomes  <cit> , no such platform exists for gene expression signature analysis. because of this, and also because of the technical difficulty in performing gene expression analysis, we believe there is a need for a platform that captures a carefully refined analysis workflow, coupling algorithms and data, and enables a researcher to predict gene expression signatures on their samples.

implementation
to address the critical need for a platform for gene expression signature analysis, we have developed a collection of tools over the course of several years. first, we have developed binreg, a statistical algorithm to predict the activation of a gene expression signature on a data set  <cit> . second, we have curated a database of signatures that predict the activation of oncogenic pathways  <cit> . now, we report on the development of a computational platform that combines these in a biologist-friendly interface, using the principles previously established. here we describe the three components of a novel gene expression signature analysis platform, which we collectively call signature.

component 1: the binreg algorithm
the first component of signature is the statistical analysis methodology. we frame gene expression signature analysis as a supervised machine learning problem. at its heart, a signature is a gene expression pattern that distinguishes two biological states . this might be the activation of a cell signaling pathway, the response of cells to various environmental inputs, or the intrinsic sensitivity or resistance of cells to a drug.

to create a signature for a given biological process, we first identify an appropriate training set consisting of gene expression data from samples that clearly distinguish the two desired characteristics , called the train <dig>  and train <dig>  samples. to obtain the best distinction, these signatures are typically based on data collected from well-defined experimental perturbations. using examples of cells in these two states, we select the genes whose expression levels best differentiate them based on a pearson correlation. we then apply a bayesian probit regression model to fit the genes in the training set to the two states. because there are typically more genes than samples, we perform these computations in a reduced subspace. that is, we start with a gene expression data set x where x is a p × n matrix of signal values for p genes and n samples. we then factor x using a singular value decomposition such that x = adf', where a is p × k, d is k × k, and f is n × k. k is the desired dimensionality of the subspace, which we call the number of metagenes. we create a model:

 y=Φ′γ) 

where Ф is the cumulative density function of a normal distribution, y is a vector of the posterior probabilities that the signature is active in each sample, and γ, the parameter to be sampled, is a k -dimensional vector of the contribution of each metagene. for the development of gene expression signatures, the number of metagenes chosen is a configurable parameter, where higher numbers of metagenes increase the complexity of the model, at the risk of potentially overfitting the training data.

the model is sampled using a standard markov chain monte carlo algorithm. it produces the posterior probabilities y as well as a 95% credible interval. y should be interpreted as the probability that the pathway is active in each sample. the credible interval for y indicates the upper and lower bound that can be set for the predictions, with 95% probability. tighter bounds indicate higher confidence in the posterior probability y, and wider ones indicate lower confidence. this statistical model has previously been described in detail  <cit> .

once a signature for a phenotype is developed, it can be used to score the phenotype in a new collection of samples. in all, a gene expression signature analysis requires seven parameters:  <dig> and 2) the train <dig> and train <dig> data, 3) the number of genes in the model, 4) the number of metagenes, 5) the algorithm used to preprocess the data set, 6) whether to apply quantile normalization, and 7) whether to apply shift-scale normalization. the first two parameters are the gene expression data that define the two cellular states. the next parameter specifies the number of genes to include in the statistical model. then, the number of metagenes controls the complexity of the model  <cit> . for parameter five, we support two methods of preprocessing, rma and mas <dig>  <cit> . parameters six and seven concern methods for normalizing the data to account for technical variation between the training and test sets. quantile normalization has been described extensively in the literature. however, we use a variation of the algorithm whereby the quantiles are computed entirely from the training set to preserve independence between the training and test data. finally, shift-scale normalization is an additional normalization method that, in short, adjusts the centroid and variance of the test set to match the training set.

component 2: a database of gene expression signatures
over the past five years, we have developed and curated a collection of gene expression signatures that predict the activation of a large number of important cell signaling pathways, such as ras, myc, p <dig>  and others  <cit> . although this work has focused on developing signatures for pathways relevant to the study of cancer biology, the conceptual framework for this signature development is applicable across a wide range of other contexts. we envision that the current database would be most directly applicable to cancer studies, but there are also clear applications to other diseases with functional aberrations in these common pathways.

to simplify the analyses for general users, we determine empirically the best values for the seven parameters described above. using a leave-one-out cross validation approach, we classify the samples in the training set. to ensure that the model is not over fit to artifacts or confounding factors in the original data, we then validate the selected parameters using an independent biochemical and/or genetic marker of pathway activity. the type of indicator used is specific to a pathway and depends on how it works. for example, to validate the pi3k signature, we compared against relative phosphorylated  p <dig> protein levels, and for the estrogen receptor  pathway signature, the er status in human breast tumors as determined by immuno-histochemistry  <cit> .

our signature database currently consists of  <dig> validated signatures, and we are actively developing and curating additional ones.

component 3a: software tools for signature analysis
for gene expression signature analysis, we have developed software tools to cover two major use cases.

use case 1: predicting the activity of validated signatures
commonly, a user that has generated gene expression data from a set of experimental samples, such as a collection of human tumors, would wish to predict the activation of pathways in those samples. this user may not be familiar with the methodology to create signatures, or the computational algorithms to build a model of pathway activation. to address this case, we have developed a software application called score signatures that can apply the signatures from our curated signature database to a gene expression data set .

to use score signatures, one submits a gene expression data set of interest, such as that from a collection of tumor samples. the application will then apply our bayesian algorithm to predict the activation of the signatures in the database. the output is a series of probability scores for each signature, reflecting the extent to which the signature is represented in each sample from the test data set. these probability scores are depicted in a heatmap that shows the pattern of activation of the pathways across the data set as determined by hierarchical clustering. furthermore, score signatures also provides raw data as tab-delimited text files that can be accessed with standard tools such as microsoft excel and used to develop additional plots. these results are summarized in a human-readable report with a detailed description of the analysis as well as guidelines for interpreting the results.

each score signatures analysis is comprised of bayesian regression calculations that predict the activation of each signature from the signature database. a full analysis is described using a large number of parameters, seven for each pathway in the database. the challenge here is how to provide the analyses so that it is accessible for users that are not familiar with the technical details of gene expression analysis. we solve this issue by storing the validated parameters in the database. as a default, the values are retrieved from the signature database, ensuring that the signature runs in precisely the manner originally defined. however, for expert users, we make it possible to refine each parameter, and if changed, the system will document the deviation from the default. in this way, the needs of both general and expert users can be met.

use case 2: developing a novel signature
score signatures provides a convenient way to apply the signatures from our signature database on a data set. however, it does not have an ability to generate a new signature. to address this, we have produced a second application, create signature, to develop novel gene expression signatures.

while score signatures can be used by investigators with little or no knowledge of the details of the underlying methodology, create signature requires an understanding of the machine learning framework and the parameters used to create the signatures. the user specifies the values for a total of  <dig> parameters. in addition to the seven parameters for the signatures as described above, it also includes parameters that govern the mcmc simulation of the bayesian model, and others  that we have not used in our signatures.

once the parameters are specified, create signature generates a statistical model from the training set and predicts signature activity in both the training set  and the test set . similar to score signatures, create signatures also provides publication-ready plots, raw data, and a human-readable report of the key results, fulfilling a critical requirement of user-friendly software described above.

component 3b: a web interface for gene expression signature analysis
our analysis tools are delivered through genepattern  <cit> . the genepattern platform provides a web-based interface for external programs  via a plug-in architecture. however, one limitation with genepattern is that it does not have the means to provide a context-dependent interface that score signatures requires. that is, the interface for score signatures depends on the current state of the signature database, as well as the requirements of the user. score signatures requires  a total of  <dig> parameters, but only two are likely to be changed by the vast majority of users. in this situation, the system needs the facility to hide rarely used parameters for novice users, but allow advanced users to tune them. this is not currently possible in genepattern.

to address the limitations of genepattern, we have extended genepattern with an interface generator layer. an interface generator is an optional component of a module that is responsible for defining its interface, that is, the parameters that are provided for the user. this is implemented by modifying the genepattern source code so that when a user accesses a module, genepattern can retrieve the interface from the interface generator instead of its own default mechanism. technically, interface generators are cgi scripts, which provide them the ability to access external resources, such as the signature database.

the interface generator for the score signatures module, by default, creates an interface with only three parameters: the rma-formatted gene expression file, the mas5-formatted gene expression file, and a checkbox to show advanced options . if the user chooses to activate the advanced interface, genepattern makes another request to the score signatures interface generator, which then produces an interface that includes parameters that are retrieved in real time from the signature database . in this way, genepattern can provide an interface that is responsive to the needs of the user as well as the current status of other data resources. by having such an ability, we can deploy context-sensitive interfaces whose complexity matches the needs of the user.

RESULTS
we have developed a public software platform signature that simplifies gene expression signature analysis by providing an easy to use genepattern interface on top of a complex infrastructure of analysis software and a signature database. specifically, we have developed binreg, a bayesian probit regression algorithm that has been supplemented with metagenes and normalization functions to handle the idiosyncrasies of gene expression data. also, we have curated and validated a database of  <dig> gene expression signatures for activated oncogenes. and finally, we have significantly extended genepattern by developing an interface generator layer that can produce context-sensitive interfaces to fit the needs of the user.

one limitation of signature is that the predictions are dependent upon the quality of the data. one potential factor that can confound the interpretation of the results is the presence of batch effects or other technical variation after the applied normalization  <cit> . in our experience, we have observed that technical artifacts lead to broad changes in the expression profiles that lead to homogeneous predictions. that is, the predicted scores tend to cluster around the same probability, typically around 0% or 100%. this issue highlights the fact that these predictions should be confirmed with alternate assays. currently, the tools available within signature require expression profiles to be annotated with probe sets from affymetrix u <dig> microarrays. to apply them to microarrays from other platforms, the probes would need to be converted to these u <dig> probe sets. internally, we have successfully applied signature to gene expression data from illumina beadarrays , suggesting a high degree of reproducibility in the gene expression levels between these two platforms, consistent with prior reports  <cit> . however, we have had more limited success in converting signals from cdna arrays, and have not tried applying these analyses to expression data from sequencing platforms. we believe the ability to apply these methods depends on the reproducibility of the expression signals across platforms.

CONCLUSIONS
in conclusion, the signature platform comprises two modules, score signatures and create signature, that are most widely useful in interpreting gene expression data. however, we have also created modules for more specialized analyses that we have previously described . signature provides a general framework that can be used to deliver complex algorithms in a user-friendly manner, putting sophisticated bioinformatic analyses, such as gene expression signature analysis, within reach of a larger audience.

signature includes modules that perform a range of analyses on gene expression data  <dig> <cit>  <dig> <cit>  <dig> <cit>  <dig> <cit>  <dig> <cit> .

availability and requirements
signature is available for public use, without need for a material transfer agreement, at http://genepattern.genome.duke.edu/signature/. this page includes a link to the modules available on genepattern, as well as sample data for testing purposes. the source code and gene expression signature database are also available from this page.

project name: signature

project home page: http://genepattern.genome.duke.edu/signature/

operating system: platform independent

programming language: python, c, r, matlab

other requirements: web browser

license: mit

any restrictions to use by non-academics: none

authors' contributions
jtc and jrn conceived of the project. mlg developed the gene expression signatures. jtc, jel, wtb, and pv developed the software. jtc and jrn wrote the manuscript. all authors have read and approved the final manuscript.

acknowledgements and funding
we thank the members and collaborators of the nevins lab for helping to test and refine the software, in particular jenny freedman, ashley chi, jeff vandeusen, daphne friedman, eran andrechek, holly dressman, and andrea bild. we also thank anonymous reviewers for their helpful comments. jtc is supported by nih r00lm <dig> and grant r <dig> from the cancer prevention research institute of texas. jrn is supported by nih 5r01ca <dig> and nih u54ca <dig> 
