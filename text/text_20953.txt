BACKGROUND
the amino acid sequence constitutes the primary structure of a protein. while this primary structure can already provide useful hints on the function of a protein , the complete understanding of a protein's function is hugely facilitated by the elucidation of its three-dimensional  structure. indeed, 3d structures have long proved to be useful for the understanding of important molecular recognition mechanisms such as enzyme catalysis  <cit> , protein-protein interactions  <cit>  or the role of mutations in human diseases  <cit> . currently, information on a protein's primary sequence is comprehensively stored in the uniprot knowledgebase , which consists of the automatically annotated uniprotkb/trembl section and the manually annotated uniprotkb/swiss-prot section  <cit> . 3d structures, on the other hand, are archived in the protein data bank   <cit> . to gather a comprehensive view of important protein features , users can either consult the "sequence annotation " section of a uniprotkb entry, or look up the 3d atomic section of the pdb file. except for users familiar with 3d structures, it is clearly not a straightforward procedure to retrieve important information from structural coordinate files. a variety of tools and resources already exist to help users to interpret 3d structures  <cit> . however, most – if not all – of these tools provide information relative to a residue number on a protein chain, which unfortunately, does not always match the amino acid number in the corresponding protein sequence in uniprotkb. as a consequence, users are currently facing two challenges to gather useful information on a protein both from the sequence and structure levels. first, they have to identify the exact protein structure which corresponds to their protein of interest; and second, they have to know the correspondence between residues on a protein chain in the pdb file and those on the uniprotkb primary sequence. indeed, it is not at all a trivial task to provide an accurate uniprot-pdb mapping down to the residue level.

in uniprotkb/swiss-prot, the usage of 3d-structures is an important complement to the literature for the high quality annotation of proteins  <cit> . the database also strives to help users to overcome the challenges mentioned above. therefore, manual annotation of protein structures in uniprotkb/swiss-prot involves first, ensuring a complete and accurate coverage of cross-references to these structures in the pdb and second, exploiting the structural data to annotate protein features. cross-references to pdb are indicated in the cross-reference section . each dr pdb line references one taxonomically matched structure available from pdb. the line indicates the pdb entry code, the name of the pdb chain matched to the reference sequence , the experimental method used, the resolution  and the boundaries of these matches on the uniprotkb reference sequence. both the correct association of a pdb chain to a taxonomically-matched uniprotkb entry and the alignment are thus essential for cross-referencing. a precise alignment is also important for residue-residue level mapping which is crucial for the correct annotation of protein features and functions using structural information.

since  <dig>  the macromolecular structure database  has been producing a mapping in collaboration with uniprotkb through the sifts  initiative  <cit> . the mapping is obtained via a rather complex procedure which consists of assembling alignments of resolved segments into full-length alignments . this mapping is used to automatically produce the pdb cross-references  in uniprotkb. throughout the years, the quality of sifts mappings has been improved. however, manual curation is still constantly required to validate or correct these cross-references by adjusting the boundaries of pdb matches on uniprotkb sequence and/or re-attributing a pdb cross-reference to another uniprotkb entry. feedback on such modifications is given to the msd. however, with the increasing number of experimental structures resolved, this curation process is becoming more and more difficult to follow. it is also difficult to pinpoint exactly the source of these errors so that improvement can be made in the sift mapping process. one possible solution to this problem would be the use of an independent mapping resource to identify and compare the differences.

several other mapping resources exist. in  <dig>  martin published pdbsws  <cit> , a new mapping between uniprotkb and pdb, which aimed to be specially fast and up-to-date. the method uses cross-references both in uniprotkb and in pdb to attribute pdb structures to uniprotkb entries. as a result, this mapping is not completely independent from the mapping provided by msd and thus cannot be used to aid in the curation or verify the quality of cross-references in uniprotkb. in the same year, a web resource seq2struct  <cit>  was described to provide links between uniprotkb sequences and pdb structures. this resource, however, does not provide residue-residue mapping and is not updated since september  <dig>  more recently, mmdb introduced a new tool to help users to easily visualize annotated features in refseq sequences on 3d-structures  <cit> . this visualization tool is clearly based on a residue-residue level sequence to structure mapping. the mapping is however not directly available for download in a large-scale manner.

in this study, a new uniprot-pdb mapping, ssmap  was generated. the primary objective of this mapping is to improve the quality of structure-related information in uniprotkb: both at the level of cross-references to pdb and subsequent feature annotation. in order to achieve this, it is worth highlighting several characteristics of ssmap. first, the mapping method used in ssmap diverges from those employed in sifts and pdbsws. the method concentrates on the quality of the reconstruction of the pdb sequence from structures and on the correct attribution of a uniprot entry to each pdb chain by using a series of post-processing steps. because of this difference in methodology, an objective and systematic comparison with other mapping data can be conducted. second, all the alignments made between a uniprotkb sequence and pdb structures susceptible to be mapped  are kept in ssmap for quality verification and curation purposes. third, mappings for alternative sequence forms  are provided to facilitate isoform-specific annotations. finally, the mapping procedure is automated and kept up-to-date with each uniprot release so that accurate information is provided to the users even with the constant increase in sequence and structural data.

in the following text, we present in more detail a comparison between mappings provided by ssmap and the other available resources . the results of the comparison should be able to identify systematically common and different mappings. common mappings could be used as input for -automatic annotation processes, as mappings confirmed by several methods have a higher confidence. different mappings, on the other hand, allow to identify the problems inherent in each mapping and consequently, improve the quality of each of them.

methods
reconstruction of sequences from pdb structures
pdb structures are composed of one or several macromolecular chains. from each chain of amino acids, a one-letter code sequence is derived. the sequence reconstruction program was written to specifically deal with the existence of gaps in pdb structures  as well as to cover and palliate a maximum number of exceptions in pdb files. the process consisted in several steps. in the first step, draft sequences were reconstructed from atom lines. in the event of modified residues, pdb annotation available in modres lines was used to determine the original amino acid type. gaps in sequences were deduced from residue numbering gaps in the structure, backbone n-c inter-atomic distances  and covalent bond angles. for the two latter criteria, the canonical values found in the literature  <cit>  – with a degree of tolerance – were used. in the second step, a pairwise alignment was done between the reconstructed sequence and the sequence extracted from pdb seqres records. the seqres sequence corresponds to the sequence of the protein that was used during the experiment. gaps in this alignment were adjusted to better fit with unresolved regions deduced in the first step. finally, gaps in the reconstructed sequence were filled using the seqres sequence. this transfer of information  helped add in the final sequence the possible unresolved regions as well as the n- and c-terminal unresolved extents. compared to simply taking the sequence from the seqres record, our procedure offered two main advantages. first, the resolved/unresolved status of each residue was recorded during the process; and second, information was obtained primarily from atom lines which are in general more reliable than the seqres records. it is expected that this reconstruction procedure will yield the most probable sequences of the proteins used in the experiment.

mapping
the mapping procedure was outlined in figure  <dig>  the main product of this procedure is a non-ambiguous residue-residue mapping between uniprotkb sequences  and pdb structures sharing at least 90% sequence identity.

searching pdb reconstructed sequences similar to each uniprotkb sequence
the aim of this step is to get all the matches between non-redundant pdb reconstructed sequences and non-redundant uniprotkb sequences sharing at least 70% sequence identity. non-redundancy of pdb chains was defined based on both the amino acid sequence and the unresolved/resolved status of each amino acid. we performed, successively, blast searches of the reconstructed pdb sequences against uniprotkb sequences and then of the uniprotkb sequences against the reconstructed pdb sequences. this cross-blast procedure was necessary to ensure the finding of best matches and to maximize mapping coverage.

in parallel, cross-references to uniprotkb in pdb records  were used to complement the blast search result in order to obtain remote  or short matches.

attribution of pdb chains to uniprotkb sequences
the attribution procedure was specific to uniprotkb sequences  and was composed of four phases. first, pdb reconstructed sequences were divided into fragments when different uniprotkb sequences matched on distinct  parts of the reconstructed sequences . this division of sequences into fragments allowed chimeric proteins to be detected for example. second, for each fragment of pdb reconstructed sequences, best match  which have the highest blast raw score ) on uniprotkb sequences were identified. third, for each pair  flagged as best match, taxonomy data were retrieved from the uniprotkb and pdb entries. only the set of best matches with the best taxonomy matching between the corresponding uniprotkb and the pdb entries was selected. the best taxonomy matching corresponds to the closest distance in the taxonomic tree between the taxons described in an uniprot entry and the pdb entry. finally, among this final set of matches, if only one uniprotkb/swiss-prot entry was represented, then the non-ambiguous attribution was made to it. if there were several uniprotkb/swiss-prot entries, or several uniprotkb/trembl and no uniprotkb/swiss-prot entries, then no automatic attribution was performed and the information was stored separately. when there were no alignments available for a given pdb chain, the attribution was done using the computed dbref matches if there was only one matching uniprotkb entry. this step was especially useful for variable segments of immunoglobulins, mhc proteins, viral proteins and small peptides.

at the end of this procedure, if two uniprotkb alternative sequence forms of the same uniprotkb entry match equally well to a pdb chain, both mappings were considered valid.

post-processing of the mapping
post-processing of mappings aimed to correct special cases for which the attribution method, which relied mainly on the raw blast score, failed to find the correct mapping. the process also identified mappings that were not relevant for annotation. several points were taken into consideration.

first, attributions could be incorrect when a directed mutagenesis resulted in a sequence which mimicked an orthologuous sequence. therefore, in cases where the taxonomy was not the same between pdb and uniprotkb/swiss-prot, we proceeded by searching to see if there was an alignment of lower score in the set of blast alignments or the set of dbref matches that satisfied better the taxonomy match. for these new potential matches, the number of engineered mutations reported in seqadv records of the pdb file header was used to evaluate their relevance.

second, pdb matches of less than  <dig> residues containing poly-histidines  were filtered out because they corresponded to cloning artifacts. for the same reason, pdb matches shorter than  <dig> residues were discarded unless another fragment of the same pdb chain mapped to a uniprotkb entry.

two separate mapping datasets were also created to store cases of pdb matches suspected to be uninformative or uncertain. these datasets were planned to be checked manually later. the first dataset consisted of pdb matches involving short synthetic pdb sequences with an imperfect taxonomy correspondence. the second dataset consisted of pdb matches involving alignments with less than 90% sequence identity.

the final mapping obtained after post-processing was supported by alignment with at least 90% sequence identity.

storing data
all the data necessary for the mapping and its evaluation were stored in a postgresql relational database consisting of  <dig> main schemata.

in the first schema, pdb reconstructed sequences and derived data  were stored with taxonomic data, annotated features and experimental conditions parsed from the pdb files. basic uniprotkb data  were loaded in a second schema. finally, in a third schema, blast alignments were stored in a compressed form and indexed by reconstructed pdb sequence unique identifiers and uniprotkb sequence unique identifiers. final mappings, unsure and ambiguous mappings were stored explicitly in other tables.

incremental updates and update frequency
new uniprotkb sequences and new pdb reconstructed sequences are added to the database during incremental update. equivalent cross-blast procedures, as described above, are then performed only for the new uniprotkb and pdb reconstructed sequences. the attribution of pdb chains to uniprotkb entries  is rerun each time. incremental updates take two days and are performed every three weeks.

evaluation of ssmap
the version of ssmap used for the comparison was built using the public versions of uniprotkb  and pdb . this version of uniprotkb was composed of  <dig>   uniprotkb/swiss-prot entries and  <dig> , <dig>  uniprotkb/trembl entries. pdb contained  <dig>  protein chains in  <dig>  entries.

the mapping was evaluated by comparing with several other mapping data:

1- pdbsws, the mapping provided by martin's group  <cit>  . this mapping is released in a rigid-column format file.

2- the mapping provided by the msd through the sifts initiative  <cit>  . this mapping is released in the form of xml files, where each file corresponds to one pdb entry.

3- the dr pdb lines in uniprotkb .

we note that although msd provides uniprotkb dr pdb lines, dr pdb lines benefit continually from manual verification and correction. the update frequency of dr pdb is not the same as sifts neither. consequently, sifts and dr pdb constitute two different datasets for comparison.

as a starting point, the raw data obtained from pdbsws and sifts  were first processed to generate alignments comparable to those in ssmap. pdbsws residue-residue mapping did not take into account unresolved amino acids in the pdb file. consequently, internal gaps  were filled with xs when reconstructing the alignment. for data from sifts, it was found that some pdb chains were split into several segments. we assumed these to be the equivalent of our pdb fragments and thus, distinct alignments were reconstructed for each fragment from sifts. for both sifts and pdbsws, 3-letter code residues, which did not correspond to standard residues, were replaced by 'x' in the corresponding 1-letter code sequence.

for comparison, the number of common mappings  pairs) between ssmap and the other sources was computed. mappings present only in ssmap were considered either as new or alternative mappings with respect to the resource they were being compared with. 'alternative' means that the pdb chain was mapped to another uniprotkb entry. missing mappings in ssmap were also identified. for common mappings between ssmap and the other sources of mapping, equivalent local alignments  pair) were further compared to check for their quality. alignments were considered identical if there were no differences in gap position and if the sequences were exactly the same. for equivalent but non-identical alignments, both alignment length and boundaries  were compared.

RESULTS
ssmap statistics
sequences of the  <dig>  protein chains in  <dig>  pdb entries were reconstructed. this corresponded to  <dig>  non-redundant pdb reconstructed sequences that were used as input for the blast procedure. from the resulting alignments,  <dig>  mappings  pairs) were computed. the majority  of them were mappings of pdb chains to uniprotkb/swiss-prot entries. the rest  were mappings to uniprotkb/trembl entries. this reflected the effort of swiss-prot curators to preferentially annotate proteins with resolved 3d structures. among these mappings,  <dig>  were specific to splice isoform sequence, and  <dig> were specific to intein processed sequences.

from the uniprotkb perspective, 4%  of all uniprotkb/swiss-prot entries were matched to at least one pdb structure with 100% identity . if one considered all alignments with more than 90% and 70% sequence identity, this percentage increased to 19%  and 28%  of all uniprotkb/swiss-prot entries, respectively. this highlighted the potential wide impact of structural information on uniprotkb/swiss-prot entries. in the final mapping , 14' <dig> uniprotkb/swiss-prot entries are represented.

from the pdb perspective, 89% of all the protein pdb chains  were mapped unambiguously to at least one uniprotkb entry with at least 90% sequence identity . among these  <dig>  mapped pdb chains,  <dig> were mapped unambiguously to several uniprotkb entries. in all these cases, different fragments of pdb chains were mapped to a different uniprotkb entry. these corresponded mostly to immune system or viral proteins with a high conservation , or to fusion proteins . about 2%  of the pdb chains were only supported by alignments with a sequence identity lower than 90%. there was ambiguity for 6%  of the pdb chains, where possible attribution to several uniprotkb entries existed . a small number  of pdb chains were small synthetic peptides not mapped at the taxonomy level to uniprotkb entries. for these  <dig> last pdb chain datasets, associated mappings could not be validated automatically and were thus not included in the final mapping results. the remaining 3%  of protein pdb chains were not found at all among the available ssmap alignments . among these ones, nearly all  chains were shorter than  <dig> residues; the rest  often contained modified/unknown residues or presented unresolved segments.

comparison of mappings
in the following section, we compared the number of mapped pdb chains and the pairwise attribution of pdb chains to uniprotkb entries between ssmap and the other mapping resources. as mappings specific to splice isoform and inteinized sequences were not present in sifts, pdbsws and dr pdb, the comparison was only made at the level of uniprotkb entries.

pdbsws provided the highest number of mappings , both in terms of pdb chains mapped and the mapping pairs. this was followed by ssmap, sifts and dr pdb. in sifts, the number of mappings  pairs) was equal to the number of pdb mapped chains , indicating that multiple mappings of a pdb chain on different proteins  were not supported in sifts. this was in conflict with the literature  <cit> , which reported that sifts dealt with such cases. to verify this observation, we reviewed the  <dig> cases in ssmap where the pdb chains were mapped unambiguously to several uniprotkb entries. we found that in  <dig> cases, the corresponding xml files did not exist in sifts. for the remaining  <dig> cases, the pdb chains were only mapped to one uniprotkb entry in sifts.

mappings correspond to non-redundant pairs of uniprotkb accession number  and pdb chain.

before trying to understand the reasons behind the differences in mappings, we checked if all the mappable pdb chains were present in ssmap. for this, we simply verified if the mapped pdb chains in other resources existed in ssmap's pdb schema. it was found that there were  <dig>   <dig> and  <dig> chains present in dr pdb, sifts, and pdbsws, respectively, but absent in ssmap. all these chains present in dr pdb, sifts and pdbsws were found to be either obsolete or unreleased pdb chains, and thus would probably disappear from these resources in their next update.

in the following result sections, we will try to document the reasons behind the differences in mappings.

comparison of pdb chain attributions in the different mapping sources
we compared the attribution of a uniprotkb entry to a pdb chain, or  pairs, between ssmap and other resources. on average, ssmap had about 80% of common mappings with other resources. the common mapping set was largest between ssmap and pdbsws  . this could be simply due to the fact that there were more mappings in pdbsws than in sifts or dr pdb . in fact, we noted at the same time that there were many more new mappings found by ssmap when compared to sifts or dr pdb .

ssmap was taken as the reference dataset. the number indicated the number of mappings and the percentage was calculated based on the total number of mappings  in ssmap. 1) common: mappings  common in both datasets being compared. 2) alternative: mappings in which a pdb chain was mapped to different uniprotkb entries in the compared sources. 3) new: mappings in ssmap. the pdb chain was not mapped in the compared database. 4) missing: mappings that were missing in ssmap. the total number of mappings that were found as ambiguous/unsure mappings in ssmap was indicated between brackets.

nb: the sum of common, alternative and new mappings was not exactly equal to the total number of mappings in ssmap because of the fusion protein cases. some mappings were counted twice in different categories.

between 5–8% of the ssmap mappings were alternative mappings when compared to other sources. in order to better evaluate the reasons for these alternative attributions, we manually verified random sets of alternative mappings taken from each pairs of resources that were being compared . table  <dig> shows the result of this evaluation. overall, about 60% alternative mappings corresponded to good attributions of ssmap in comparison to other resources. for example, pdb:1qi <dig> chain a  is mapped to uniprotkb:p <dig> ) in sift, but to uniprot:o <dig>  in ssmap. about 20% alternative mappings were ambiguous in that it was not possible to define which mapping was the best only from the data in the pdb files. often, contradictory information in different fields of the pdb file prevented a sure attribution and it was necessary to read the associated scientific article. the last 20% alternative mappings were errors in ssmap. these corresponded mainly to wrong attributions in limit cases. for example, the result of blast alignment sometimes contained one or several mismatched residues at the n-terminal. this increased artificially the length of the alignment and thus the score computed by ssmap. it was also noted in cases where sifts proposed erroneous alternative mappings when compared to ssmap, half of these involved obsolete uniprotkb entries. while it is not possible to draw definite conclusions regarding the quality of each mapping resource with these small data subsets, our results did suggest that ssmap might propose a better solution in cases where the different resources disagreed.

random chosen sets of alternative mappings from each comparison pairs  were evaluated manually.

with regards to new mappings, the number of new mappings in ssmap – as compared to dr pdb – was the largest . these  <dig>  mappings corresponded to  <dig>  pdb entries. as dr pdb has not been updated as recently as ssmap, we analyzed how recent these  <dig>  pdb entries were. surprisingly, it was found that a non-negligible number of the structures  were published before  <dig> and thus should normally be present in dr pdb. as an example, for  <dig>  of the pdb structures released in  <dig>  the corresponding dr pdb lines were still missing in uniprotkb. the reason for this is unclear. this indicated that the new mappings provided by ssmap were not merely the result of a more recent update of ssmap. a random set of  <dig> new mappings was manually analyzed. almost all  were good mappings. the remaining two were due to the fact that the corresponding protein sequences were never deposited in any sequence database  and the mapping process mapped the pdb chain to its nearest taxonomic neighbor  was mapped to uniprotkb: q2hji <dig> , and pdb: 1zoy chain c  was mapped to uniprotkb: q <dig> ).

ssmap was found to have about  <dig>  missing mappings when compared with all the other sources. of these missing mappings, over 90% were deliberately excluded from ssmap because attribution was ambiguous or uncertain . the remaining missing mappings in ssmap were analyzed in more detail. when compared to dr pdb, it was found that  <dig> out of the  <dig> missing mappings were sequences shorter than  <dig> residues. for these cases, the crossed-blast procedure failed. there were  <dig> mappings in dr pdb that involved obsolete pdb chains  no longer present in pdb, and  <dig> mappings with non-amino acid chains or chains with no atomic coordinates . finally, the rest  were mappings with a percentage of identity lower than 70%. similar result was noted when compared to pdbsws. in particular,  <dig> out of the  <dig> missing mappings corresponded to pdb sequences shorter than  <dig> residues, and  <dig> were mappings with a low sequence identity .

comparison of local alignments supporting the mapping
the comparison of alignments was done on common mappings between ssmap and the other sources of mapping.

according to table  <dig>  the majority of the ssmap alignments differed from those in sifts  or pdbsws . most of the time, this was due to the fact that the reconstructed sequences from pdb were not exactly the same in each resource. for example, it was observed that among the  <dig>  non-identical alignments in sifts, 92%  were due to the presence of unresolved or modified residues noted as 'x' in the sifts reconstructed sequences. to be independent of such sequence variations, we proceeded by checking the length differences of those non-identical alignments . it was found that the number of alignments presenting a different length was much higher between ssmap and pdbsws  than between ssmap and sifts . this was due to the fact that pdb reconstructed sequences in pdbsws did not contain unresolved n- and c-terminal regions as in sifts or ssmap. overall, the alignments between ssmap and sifts were of comparable length. alignments with a length difference of more than  <dig> residues represented only 2% of the total non-identical alignments. among these alignment pairs, 2/ <dig> of the cases correspond to a longer alignment in ssmap.

equivalent alignments corresponded to the same  pairs in both mapping sources. mappings involving isoform sequences were not taking into account.

the difference in length was calculated by subtracting the alignment length of the compared resource from that of ssmap. boundaries differences were computed similarly. the percentages between square brackets were computed relatively to the total number of non-identical alignments. the percentages between round brackets were computed relatively to the number of alignment pairs having a different length or different boundaries.

nb: *since dr pdb did not provide alignment, the number indicated as reference was the total number of common  mappings between ssmap and dr pdb.

apart from alignment lengths, the differences in boundaries between alignments were also evaluated. boundaries represented the uniprotkb residue number onto which the end points of the pdb reconstructed sequence fragment mapped. although dr pdb lines did not provide full alignments for comparison, boundaries were indicated in these lines and were included in this comparison . it was found that among the common mappings between ssmap and dr pdb,  <dig>  matches  contained no information on boundaries. for the remaining mappings,  <dig>   presented different boundaries, and only in  <dig>  of them the variation was greater than  <dig> residues. we analyzed manually a set of  <dig> of these extreme cases. in more than half of the cases, the regions covered by ssmap boundaries were longer. often, these corresponded to better-reconstructed sequences in ssmap that allowed the boundaries to be correctly located beyond what was indicated in dr pdb . in other cases, this was due to the fact that artifact sequences  in the n- or c-terminal of the reconstructed sequences were aligned by chance to a uniprotkb sequence. these resulted in incorrect boundaries assigned by ssmap. in cases where the regions covered by ssmap boundaries were shorter, they corresponded often to a split of the alignment into  <dig> distinct ones in ssmap. this happened when, for instance, a linker had been artificially inserted into the sequence to link  <dig> non-consecutive segments of the same protein. for example, in the pdb entry 1mqd chain d, two segments of the uniprotkb protein p <dig> were artificially linked together. while ssmap mapped this pdb entry to residues 413– <dig> and 653– <dig> on p <dig>  dr pdb mapped these to 413– <dig>  to compare the boundary differences between ssmap and sifts, the same kind of analysis was carried out. a new set of  <dig> cases was analyzed. it was found that in  <dig> out of these  <dig> cases, the boundaries indicated by sifts were wrong. ssmap was wrong in  <dig> cases and for the remaining  <dig>  boundaries indicated by both resources appeared to be acceptable. among the  <dig> cases for which sifts was wrong, we found that  <dig> cases were due to the presence of discontinous parts in the sequences. this could either be related to the presence of a long linker as explained above, or in some rare cases, an inversion of the sequence after post-translational modification. for example, the two parts of the concanavalin a  were inversed due to post-translational modification. ssmap correctly mapped the pdb entry 1jui chain d residues 119– <dig> and 1– <dig> to p <dig> residues 30– <dig> and 164– <dig>  respectively. in sifts, 1jui chain d residues 1– <dig> were mapped to p <dig> residues 164– <dig>  the mapping for the rest part of the chain d was missing. finally, for the pdbsws dataset, the difference in boundaries could be once again largely explained by the absence of unresolved n- and c-terminal regions in pdbsws.

discussion
sequence to structure mapping is an essential component for any protein feature analysis in a structural context, and for protein structure analysis or structure modeling using sequence information. in this study, ssmap, a new uniprot-pdb mapping, was built in order to improve the quality of structure-related information in uniprotkb – both at the level of curating cross-references to pdb and subsequent feature annotation. the mapping strategy used in ssmap is different from those used by other resources. as such, ssmap is an independent mapping resource which further allows one to identify and pinpoint current weaknesses or strengths of existent mapping resources.

it was noted that two main steps in the mapping procedures – sequence reconstruction and alignment method – have a profound influence on the final mapping results. the main difference between sifts and ssmap appears to reside in the order of execution of these steps as well as on the emphasis put on them. in ssmap, we believe that the reconstruction of sequences from structures, especially the treatment of unresolved regions, is important for good quality alignments and subsequent mapping. therefore, unresolved residues in pdb files were first deduced from the seqres or modres records, as well as from information in atom lines, so that the most complete reconstructed protein sequence reflecting the one used in the experiment could be obtained. this complete sequence was used subsequently in a standard blast search against uniprotkb  to ensure that the best alignments were found for the subsequent mapping steps. conversely, in sifts, alignments were performed on resolved segments first. these resolved segments were first aligned against either the sequence from the seqres records or the uniprotkb sequence. the respective separate alignments for these segments were then merged to assemble the full-length alignments. the complete residue-level mapping between the sequence of the complete protein from the experiment and its uniprotkb counterpart was only obtained by merging the two composite alignments  . thus, the sifts procedure was relatively complex as multiple separate alignments were assembled and merged. these differences in the methods were reflected in our results. in particular, when we analyzed manually the cases in which the difference in boundaries between sifts and ssmap exceeded  <dig> residues, it was found that where sifts was incorrect, a non-negligible number was due to the fact that pdb chains contained discontinuous sequence segments.

the mapping procedure in pdbsws was less comparable to ssmap as the former partly relied on existing cross-references from pdb  and uniprotkb . however, it should be noted that while ssmap also used the dbref information to post-process the mapping when there was a taxonomy disagreement or when the chains to be mapped were too short, extra care was taken to realign the pdb chain to the referenced uniprotkb sequence and to verify that the resultant alignments were better than those in the initial mapping. wrong or ambiguous taxonomy information indicated in the pdb file was thus identified. although pdbsws's mapping procedure is relatively simple, good quality mappings are generally provided. the mapping, however, lacks the n- and c-terminal unresolved regions, which are both essential to define the correct boundaries in dr pdb.

the quality of the mappings in ssmap was evaluated under several angles. first, the coverage of ssmap was 'indirectly' assessed in terms of the relative new and missing mappings when compared to the other resources . in general, it was found that ssmap provided a considerable number of new mappings as compared to sifts and dr pdb , and these new mappings were not the simple result of a more recent update of ssmap. the manual verification of a subset of data  showed that the quality of new mappings was good. as for missing mappings in ssmap, it was shown that over 90% of these mappings were deliberately removed because of ambiguities and uncertainties in the automatic attribution of the pdb chain to a uniprotkb entry. taken together, the coverage of ssmap could be considered good. second, the quality of alternative mappings provided by ssmap was evaluated by manually checking subsets of data. correct alternative mappings in ssmap were found in about 60% of the cases when compared to all other resources . while the result was promising, it was hard to conclude as the datasets were small. however, this verification did point out that ssmap alternative mappings could help identify problematic cases to be checked manually. in fact, we found that nearly all the cases verified manually were worth inspection. sometimes it was even necessary to read the associated paper to make the correct decision. finally, we assessed if the boundaries provided by mappings in ssmap were of good quality. it was found that few boundaries differed by more than  <dig> residues in n- or c-terminal when one compared ssmap with sifts, or ssmap with dr pdb . for these extreme cases, they were often due to the differences in the methodology as discussed above. therefore, it appears that, overall, ssmap provides mappings of comparable  quality when compared to other resources. more importantly, ssmap constitutes a completely independent mapping. in fact, it is worth noting that while we compared ssmap to three resources, they are all more or less related: most of the dr pdb lines were provided by sifts, and pdbsws used information from dr pdb.

as one of the main objectives of this work is to ensure that uniprotkb provides up-to-date and good quality cross-references to pdb as well as to facilitate the annotation of 3d-structure-derived information, it is worthwhile highlighting certain aspects of ssmap that may help this task. first, in terms of the curation of dr pdb lines, ssmap should be able to provide complementary data  and highlight problematic cases for manual curation. the latter consists of, on the one hand, ambiguous or uncertain mappings deliberately omitted from the final mapping  and, on the other hand, the alternative mappings proposed by ssmap. apart from this, a small number of obsolete pdb chains present in dr pdb  were also identified in this study and they should be removed. second, in terms of annotation of protein features, ssmap provides specific mappings to splice isoforms and inteins . while the number of the mappings specific to splice isoforms is still modest , this number will certainly increase with the rising interest on isoforms. currently, the mapping presents a good starting point for possible isoform-specific feature annotation. it can also be used in more global studies which aim to understand the impact of splicing events on protein structures. besides mappings to alternative sequence forms, ssmap also offers all the alignments between a uniprotkb sequence and pdb structures sharing over 70% sequence identity. this resource is important for the curation process, as well as research aiming to accelerate annotation by deriving rules for automatic features propagation. in a larger scale, the mapping provided by ssmap is currently employed in the internal annotation platform saalsa . this front-end to the ssmap database helps annotators to curate dr pdb lines. moreover, it aids annotators to generate coherent annotation from structural information for a number of features  in uniprotkb/swiss-prot entries. finally, it is important to mention that the update frequency of ssmap ensures that annotators can have access to the most recent structural data.

one of the important observations in this study is that there is no unique solution to the uniprot-pdb mapping problem. depending on the mapping methods used, the results can differ in a fraction of cases. for ssmap, we noted several points for improvement. first, the manual inspection of  <dig> new mappings identified  <dig> cases for which the protein sequences are not yet available in uniprot. this was due to the fact that a certain tolerance in taxonomy matching was allowed in the mapping process. in the future, perhaps only perfect taxonomy matching should be accepted for automatic mapping. second, while comparing the boundaries of different mappings, it was noted that artifact sequences  were sometimes included in the alignment. this error could be avoided by improving the algorithm to detect and rectify these cases. similarly, errors were noted in sifts that could potentially be corrected . indeed, by having a completely independent set of mappings, a more systematic feedback and curation process could now be envisaged with sifts. through this process, the scientific community can benefit from high quality dr pdb lines with minimal errors and inconsistencies.

since uniprotkb release  <dig> , the ssmap uniprot-pdb mapping is used together with sifts to produce updates of dr pdb lines. ssmap is available for download from . a 3d visualization tool based on ssmap alignments is also available to help users visualize annotated features in uniprotkb sequences on related 3d-structures with over 70% sequence identity.

CONCLUSIONS
a new uniprot-pdb residue-residue mapping resource ssmap has been created. a systematic comparison with other existent resources showed that ssmap is able to provide a set of independent mappings which complement the current data. the comparison further allows to identify general problems in uniprot-pdb mappings so that both the accuracy and the coverage of the uniprot cross-references to pdb, as well as the optimal use of structural information for feature annotation can be enhanced. ssmap mapping is currently used to provide pdb cross-references in uniprotkb.

competing interests
the authors declare that they have no competing interests.

authors' contributions
fpad conceived and implemented the ssmap method and did the comparison work. yyl supervised the study, participated in improving the method and in interpreting the results. yyl and fpad wrote the manuscript. all authors read and approved the final manuscript.

