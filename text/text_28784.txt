BACKGROUND
multiple sequence alignment techniques have proven useful for identifying related residues from a set of homologous sequences 
 <cit> . these algorithms provide residue-residue correspondences between sequences in an attempt to identify regions with similar structural, functional, or evolutionary relationships. while useful, these techniques often falter when presented with a set of sequences of low identity. this problem may be overcome using structural information, when available, because structures typically diverge at a rate far lower than sequences 
 <cit> . furthermore, the rich information available from structures has proven useful in constructing a meaningful alignment because of the structural conservation required for a protein to retain its function 
 <cit> . for proteins with similar functions, including those with low sequence identity, there is often a common core, which frequently contains residues required for proper folding and correct function 
 <cit> .

previous approaches to structure alignment can be roughly divided into three groups by their structural representation. 3d methods score structures under rigid-body superposition without allowing flexibility of structures about any hinges. many recent 3d methods use backbone atom positions but allow flexibility at some backbone positions during alignment. mustang 
 <cit>  uses a combination of short fragment alignments and contact maps. posa 
 <cit>  and matt 
 <cit>  both use aligned fragment pair chaining methods. these approaches all belong to the class of sequential aligners. 2d methods describe structures by their tertiary interactions, such as distance matrices in dali 
 <cit>  or contact maps in topofit 
 <cit> . 1d methods reduce each residue to a vector of relevant properties and apply fast string algorithms. clemaps 
 <cit>  uses conformational letters - discretized conformational states of protein fragments. vorometric 
 <cit>  uses voroni tessellations to determine the residue’s environment.

yakusa 
 <cit>  uses α and τ angles, while 3d-blast 
 <cit>  uses κ and α angles. other researchers have used backbone φ and ψ torsion angles 
 <cit> , while tali 
 <cit>  incorporates torsion angles and sequence information and lesk 
 <cit>  uses torsion angles and a reduced residue representation. most 1d methods are designed for fast database searching and have not compared favorably with 3d methods 
 <cit> , with a limited ability to detect structural relationships between proteins 
 <cit> . this is due to the fact that most methods of structure linearization fail to capture the necessary information that encapsulates the full structure of a protein.

the poor relative performance of 1d methods is unfortunate because these approaches allow leveraging a wide variety of existing string algorithms. we introduce an algorithm mstali  that is a hybrid 1d-3d method. it initially treats all structures in a linear fashion to identify an initial alignment and proceeds to refine the alignment using a 3d scoring criterion. this approach yields an algorithm that is efficient enough for large-scale analyses, yet is still competitive with state-of-the-art 3d methods at aligning homologous structures. this is possible due, in part, to the inclusion of additional features from each residue not included in any previous work. we consider torsion angles, backbone cα atom positions, secondary structure designation of each residue, residue type, surface accessibility, and properties of nearby atoms. torsion angles are a useful feature because they allow, to a reasonable approximation, a complete reconstruction of the protein structure in linear time compared to a more common method of contact- maps. it is for this reason that a previous version of mstali, tali <cit> , relied on torsion angles along with sequence information. however, it is only through inclusion of the additional features that mstali is able to meaningfully discriminate between local substructures that would otherwise appear identical. the core computational engine for mstali, which is implemented in c++, and web version of this software can be accessed through the web at: 
http://ifestos.cse.sc.edu/mstali this approach to structure alignment yields three major benefits. the first is that the algorithm proves very competitive compared to existing methods for comparison of homologous structures, and we provide results to that effect using established databases and comparison metrics. the second benefit is that this algorithm can be customized to a large number of problems. a configurable multiple structure alignment program has a wide variety of potential applications, including core extraction 
 <cit> , structural phylogeny, active site identification 
 <cit> , or construction of threading templates for structure prediction 
 <cit> . however, different algorithms are typically required in order to address different applications of structure alignment. customization of mstali for different applications is easily possible due to the inclusion of a variety of relevant biochemical and biophysical features. we illustrate the flexibility of this approach with an example of hinge detection. furthermore, we envision that this framework will create avenues for novel applications of multiple structure alignments such as characterizing the transmembrane regions of membrane proteins with distinctive patterns of hydrophobicity. the third benefit is that mstali has the potential for modifications in order to take full advantage of existing string manipulation techniques such as blast 
 <cit> . extension of mstali in this manner can facilitate its deployment as a structure search technique in application to large databases such as the entire pdb.

we consider three problems in this manuscript in the interest of brevity, and we perform a detailed comparison with current 3d algorithms. the first is an example of using mstali to locate hinges on a structure undergoing rigid-body motion. the second is the common core identification problem, where the algorithm accepts n proteins and identifies a structural core that is common among all of them. we define a common core as a set of residues which can be superimposed, through rigid-body rotation and translation, with low backbone rmsd . finally, we consider the issue of core structural phylogeny. this requires taking a set of highly diverse structures and dividing them into sets of structures, each containing a common core. this task requires a structure comparison score that accurately distinguishes between closely related and distantly related structures. it is for this reason that some algorithms may be advantageous in identifying homologous proteins but perform poorly in reconstruction of evolutionary relations, especially distantly related relations. furthermore, some structures may have some similarities, and yet they may not share a common core. for example, two proteins may have the same secondary structural elements that are arranged differently in space. we show that the mstali score satisfies both requirements.

RESULTS
rigid-body motion detection
one immediate application of mstali is analysis of rigid-body motion 
 <cit> . these motions may be critical to the function of a protein and are of significant interest in pharmaceutical investigations. the first step in understanding the specific nature of an allosteric transformation is locating the exact points of conformational changes that facilitate a rigid-body motion. these studies require aligning multiple structures in various allosteric conformations to arrive at a consensus regarding the critical “hinge” points. while existing tools are capable of producing such alignments over the conserved regions, they fail to provide additional information regarding the conservation of the mobile region. we illustrate this point using an example of three structures of dna polymerase i from thermus aquaticus. this protein has three domains: a palm, fingers, and the thumb. the structure undergoes two primary allosteric changes 
 <cit> , denoted mi and mii. mi closes the fingers around dna, repositioning the o helix and burying ddctp. mii occurs after mi and affects the thumb domain, bringing helices h <dig> and h <dig> closer to the dna. two rotations create mi: a 6° rotation of helices n , o , o <dig> , and o <dig> , and a second rotation of helices n and o. two rotations create mii: a rotation of the thumb domain of 17°, and a second rotation of 12° of the h <dig>  and h <dig>  helices.

the previous analysis 
 <cit>  identifies the approximate regions of motion, but not the exact residues involved. we analyzed three previously reported structures  of this protein simultaneously with mstali to detect the exact points of motion and compared our results to those from stamp 
 <cit>  and matt 
 <cit> . the three known structures represent three instances of structural characterization of this protein with x-ray crystallography in various allosteric conformations. the 6° rotation is a subtle one that is not expected to stand out from the background noise, but the other three should. our analysis of these structures with mstali utilized only torsion angles . we identified points of motion using the final conservation score of the torsion angles. we computed the mean score, and all residues with scores at least three standard deviations below the mean were considered possible points of motion.

tables 
 <dig>  
 <dig> and 
 <dig> illustrate the alignment results of stamp, matt and mstali of the three structures 1ktq, 2ktq and 3ktq respectively. in the interest of brevity, only the relevant portions of the final alignments are shown in these tables. as expected, information obtained from the stamp and matt alignments  is limited to an approximate location of some structural disagreement among the three structures. alignments of stamp and matt provide no additional information, which necessitates a complete manual investigation.

low-scoring residues are highlighted in yellow. secondary structures are annotated below the alignment.

in contrast, results of mstali alignment are far more informative as illustrated in table
 <dig> . based on results shown in this table, all structurally conserved regions across all three structures are identified. in addition to the conserved structural regions, the hinge points that accommodate conformational changes can be identified by observing per-residue score that is provided by mstali. the per-residue score provides information regarding the structural conservation of each residue using the final alignment information. residues with significant deviations in their scores  can be identified as exact location of structural disagreement. figure
 <dig> illustrates the hinge points of motion that are identified for the region between residues  <dig> and  <dig> . residues corresponding to hinges are highlighted in the mstali alignments shown in table
 <dig>  two points of motion for the thumb domain are identified by mstali:residues g <dig> and a <dig> neatly delineate the 12° rotation of the h <dig> and h <dig> helices. the three structures exhibit a backbone rmsd of more than 5 Å over the backbone atoms of residues 479– <dig> after superimposing the remainder of the proteins. the high rmsd indicates the significant local structural change that has occurred over the three proteins. to validate the conservation of local structure, the rmsd of the same region can be obtained by superimposing only the local region , as shown in figure
 <dig>  this exercise yields an rmsd of less than  <dig>  Å, which indicates the conservation of the local region as indicated by mstali. our analysis has also identified two additional hinge regions corresponding to residues t <dig> and a <dig>  this region has been illustrated in gray in figure
 <dig>  the original work also notes that the complete thumb domain undergoes motion, but the delineating residues are not identified by mstali.

the points of rotation for the tip of the fingers domain, helices n and o, are identified as residues i <dig>  the first residue in helix n, and l <dig>  just after helix o. two additional residues, p <dig> and l <dig>  are also identified in the connecting loop as undergoing motion, as are two residues in the o1-o <dig> loop, a <dig> and p <dig>  the delineating residue at the end of the fingers domain is not identified, but this is not unexpected, given the subtle nature of the motion involved. residue a <dig> is also identified as a single point of structural alteration that does not correspond to any previous information reported in the literature.

comparison to previous methods
our experiments have utilized two manually curated libraries of protein structures: homstrad 
 <cit>  and sabmark 
 <cit> . the popular homstrad database is a manually curated set of  <dig> multiple structure alignments, called families, each containing between  <dig> and  <dig> structures. a typical homstrad family falls between the topology and homology levels of the cath 
 <cit>  database. to be consistent with previous analyses 
 <cit> , we report our analysis for only the  <dig> families with at least three structures - that is, those families that constitute a multiple structure alignment. sabmark is a database of  <dig> families, each containing between  <dig> and  <dig> structures. each family represents a scop superfamily. sabmark families are more divergent than homstrad families and represent a more challenging test of the algorithm. we compare mstali’s performance on homstrad and sabmark databases to three of the most recognized multiple structure alignment programs - mustang 
 <cit> , posa 
 <cit> , and matt 
 <cit> . it is important to note that all three comparing algorithms belong to the 3d class of structure determination algorithms while mstali utilizes 1d linearization of structures. we chose to compare to 3d methods because they have proven more adept at identifying common cores 
 <cit> . mustang is based on contact maps, small fragment alignments, and consensus-based methods. posa and matt both use aligned fragment pair chaining methods, and both allow backbone flexibility during the alignment process. all are sequential alignment methods, like mstali. mustang and matt are compared on both homstrad and sabmark, while posa could only be compared on homstrad. homstrad and sabmark alignments for matt were downloaded from the web at 
http://groups.csail.mit.edu/cb/matt/. homstrad and sabmark alignments for mustang were calculated locally after downloading the software from 
http://ww <dig> cs.mu.oz.au/~arun/site/mustang.html. we computed rmsd and core size statistics ourselves for both applications to ensure consistency in calculation of rmsd scores.

although we were unable to obtain results for posa on sabmark, we nonetheless include homstrad results due to posa’s popularity and its emphasis on flexible structure comparison. posa is not available for download, and so the statistics must be computed from available information. posa outputs two structural alignments; one computed with bends disallowed, the other computed with bends allowed. statistics for the unbent homstrad alignments are available online at 
http://fatcat.burnham.org/posa/posavshom.html. statistics for the bent alignments are not available; the numbers from a previous analysis 
 <cit>  are: core size  <dig>  average rmsd  <dig>  Å. posa alignments for sabmark are not available.

we also demonstrate mstali’s ability to create a protein core hierarchy using cath domains. we extracted  <dig> domains and used them to construct a prototype library of protein core domains. we selected a subset of the cath domains for analysis by randomly selecting  <dig> homologous superfamily levels and downloading all domains at the 35% sequence identity level. the chosen levels cover all four structural classifications ; within the α-helical class, we chose representatives that covered multiple categories for the architecture, topology, and homologous superfamily sublevels. structures are compared using the core identification wrapper of mstali, with its final score representing the distance between the core of two structures. our final results were compared to the cath classification with some interesting differences.

common core identification
table
 <dig> shows the performance of mstali compared to matt, mustang, and posa on the homstrad database. this table shows the percentage of the  <dig> homstrad families that mstali outperforms its competitors on both core size and backbone rmsd; the percentage of families that mstali does better on core size only; the percentage that mstali does better on backbone rmsd only; and the percentage of families that the competitor does better on both measures. this detailed analysis shows that mstali outperforms all competing applications by a significant margin.

mstali finds both a larger core and smaller rmsd on  <dig> %,  <dig> %, and  <dig> % of the families analyzed when compared to matt, mustang, and posa respectively. this is true even when the training set families are removed . the results for most of the remaining families are ambiguous, with mstali performing better on one measure but not another. however, the competing applications perform better than mstali on both measures in only  <dig> %,  <dig> %, and  <dig> % of the families, respectively.

figure
 <dig> further illustrates mstali’s performance on homstrad. this figure plots backbone rmsd and core size for mstali compared to matt, mustang, and posa. the posa core size plot is skewed well above the dividing line, clearly demonstrating that mstali identifies many cores with larger sizes. furthermore, a majority of the points in the rmsd plot lie below the line, illustrating the results from table
 <dig> that mstali frequently locates protein cores with smaller rmsds. the mustang rmsd plot is skewed to the right; in particular, a number of mustang cores have rmsds higher than 7 Å, while mstali has only a few. the core size plot is less conclusive; some core sizes are better for mstali while others favor mustang. the matt rmsd plot is centered about the equality line, but the core size plot clearly shows that mstali identified larger cores for a significant majority of the families. sabmark results on the  <dig> superfamily groups are shown in table
 <dig>  posa results are not available for sabmark, so the sabmark analysis includes only matt and mustang. mstali exhibits excellent performance against mustang, outperforming it on both core size and backbone rmsd for  <dig> % of all groups. mstali also outperforms matt on  <dig> % of all families. the results without the training families are  <dig> % and  <dig> % respectively. the competing applications perform better than mstali on both measures in only  <dig> % and  <dig> % of the families, respectively. sabmark contains more challenging structure comparisons, and yet mstali is able to achieve better results than the best competing algorithms.

the data presented in tables 
 <dig> and 
 <dig> and figure
 <dig> conclude that mstali performs significantly better on the two comparison databases used for analysis. however, an example can be informative. here we illustrate mstali on a rossmann fold 
 <cit>  group from sabmark. the alignments produced by mustang, matt, and mstali are shown in figure
 <dig>  the core rossmann fold is known to consist of a β-sheet of at least three strands enclosed by at least two α-helices. mstali has correctly aligned the five central β-strands and the three surrounding α-helices. a fourth α-helix, in the top-right portion of the image, is partially conserved as well. in contrast, matt has only aligned one β-strand and two α-helices. mustang does somewhat better, aligning three β- sheets and two α-helices. however, it has also aligned α-helices from some structures with β-sheets of other structures. furthermore, several of the secondary structures are not properly matched, resulting in a poor fit of the core between structures. the mstali core contains  <dig> residues and a backbone rmsd of  <dig>  Å. this is significantly better than cores identified by matt, which has  <dig> residues and an rmsd of  <dig>  Å, and mustang, which has  <dig> residues and an rmsd of  <dig>  Å. 
 <cit> .

core structural phylogeny
the mstali core and the core identification wrapper use a number of features from protein structures, such as surface accessibility, and a new approach to structure alignment, iterating from a general to a specific alignment. these changes necessitate a careful examination of the algorithm’s performance specifically related to reconstruction of the phylogenetic relationships. we examine the mstali core in detail by using it to construct a phylogenetic tree. constructing a phylogenetic tree of the relationships between structures requires a core that accurately reflects the relationships between two domains, regardless of how distantly they are related. this is a crucial step before performing multiple structure alignment. the phylogenetic tree is used to determine which structures are most similar and are aligned first.

we construct a phylogenetic tree using  <dig> cath domains. this modest-sized sample provides sufficient data for insightful analysis but avoids the “analysis overload” of a large sample. to create the core library, we computed all pairwise distances between structures , then used the results to construct a phylogenetic tree using the neighbor- joining algorithm 
 <cit> .

we emphasize that it is not meaningful to directly compare cath to a phylogeny tree constructed by mstali. our analysis focuses on identifying domains with similar cores, while cath divides domains by class and allows order-independent comparisons at the architecture level. it is therefore not meaningful to perform a strict comparison between mstali and cath. however, we do expect that mstali will cluster domains together at the topology and homologous superfamily levels as identified by cath. in particular, the domains from a single superfamily class should be grouped together.

our approach successfully placed each domain in the tree next to other domains from the same homologous superfamily. for the purposes of analysis, we define a cluster to be a subtree from our phylogeny tree that only contains domains from a single superfamily. we divided the tree into its maximal sized clusters. we expect that for most superfamilies, all of the superfamily’s domains will be contained in a single cluster. this is indeed the case; of the  <dig> superfamilies selected from cath,  <dig> had all domains placed into a single cluster. two superfamilies  were placed into two clusters; these divisions are illustrated in figures 
 <dig> and 
 <dig>  one superfamily  was placed into three clusters. the average cluster size was  <dig> domains, compared to the average cath superfamily size of  <dig> domains. domains in the three divided superfamilies were not evenly distributed among the multiple clusters. the largest cluster for  <dig> . <dig>  contained 94% of all domains from that superfamily, while the largest cluster for  <dig> . <dig>  contained 84% of all domains from that superfamily and  <dig> . <dig>   contained 90% of the domains from that superfamily. while there are few differences with cath at the homologous superfamily level, these differences warranted further investigation. there are two situations under which a superfamily might be divided into multiple clusters. the first is when all domains in a superfamily do not share a common core. the second is when domains from one superfamily have a core in common with another superfamily, and domains from the second superfamily divide the first superfamily into multiple clusters. we present an example of each situation from our results.
 <cit>  and t-rex 
 <cit> .
 <cit>  and t-rex 
 <cit> .

the splitting of superfamily  <dig> . <dig>  occurs because the  <dig> . <dig>  domains have a strong core in common with those from  <dig> . <dig> , dividing  <dig> . <dig>  into two clusters. this splitting is illustrated in figure
 <dig>  the larger  <dig> . <dig>  cluster contains 94% of that superfamily’s domains, and so deviations from cath relate to the smaller  <dig> . <dig>  cluster. we examined the branches containing the  <dig> . <dig>  cluster and the smaller  <dig> . <dig>  cluster in more detail as shown in figure
 <dig>  the protein cores created by cutting this portion of the phylogenetic tree at varying levels of similarity are shown in figure
 <dig>  as more domains are incorporated into the core, some regions exhibit structural diversity, while others are nearly identical between domains. the regions of diversity are almost exclusively located in turns. it is remarkable that domains from the two classes contain substantial overlap between their cores. the core sizes are  <dig>   <dig>   <dig>  and  <dig> residues for the cores labelled , , , and . the nine structures used to generate these cores range in size from  <dig> to  <dig> residues, with an average size of  <dig> residues. the common core size is 80% of the average domain size, lending substantial support to the conclusion that these structures from differing superfamilies are indeed built upon a single common core. furthermore, while five of the seven domains are from  <dig> . <dig> , the two domains from  <dig> . <dig>  do not contain a core that is substantially larger than the common core displayed in figure
 <dig>  the alignment of these two domains separately is shown in figure
 <dig> 
 <dig> by cutting the tree at various levels. the domains shown are:  1w4e and 1w4i  those domains shown in  and 2 eq <dig> and 1w <dig>  those domains shown in  and 1w4h, 1zwv, and 1zy <dig>  those domains shown in  and 1nvm and 2fna. groups  through  are from class  <dig> . <dig> , while the domains included in  are from domain  <dig> . <dig> .
 <dig>  cath class  <dig> . <dig> , with the core identified and displayed separately.

the other reason a cath superfamily could be divided into two or more clusters is that the domains in the superfamily do not share a single common core. this is the case for the domains from  <dig> . <dig> . these split domains are illustrated in figure
 <dig>  one cluster contains  <dig> domains with an average size of  <dig> residues; the other cluster contains  <dig> domains with an average size of  <dig> residues. to examine the reason this class of homologous proteins was split into two clusters, we used mstali to identify the cores for these two groups separately, and also for the groups when combined. these groups are denoted as follows: l for large group , s for small group, and c for the combined group. group l yielded three cores, with core sizes of  <dig>   <dig>  and  <dig>  and rmsds of  <dig>  Å,  <dig>  Å, and  <dig>  Å. group s had a single core, with  <dig> residues and an rmsd of  <dig>  Å. group c yielded a single core with  <dig> residues and an rmsd of  <dig>  Å. the core size for group c, the combined group, has too few residues to plausibly be considered as a structural “core” on which the domains are built. this is clear in light of the fact that the average domain size for group c is  <dig> residues. on the other hand, the cores for groups l and s comprise 76% and 56% of the average number of residues in each. from the stark difference in core size and rmsd between the combined group and the two groups identified by mstali, it is clear that this division of the cath class is necessary to yield meaningful protein cores. to confirm that this observed behavior is not an anomaly related to mstali, we selected one domain from each of the two clusters - 2bcqa <dig> and 1tk5a <dig> - and aligned them using ssap 
 <cit> , one of the tools used in the construction of cath. the two domains have 96% structural overlap , but it comes at the expense of an rmsd of  <dig>  Å. neither ssm 
 <cit>  nor matt was able to produce an alignment with a large core size and significantly lower rmsd . we repeated this exercise for the remainder of the smaller cluster, using ssap to compare each domain from the smaller cluster against a randomly selected domain from the larger cluster. the complete results are shown in additional file 
1: table s <dig>  the average number of residues in common was 96%, with an average rmsd of  <dig>  Å.

CONCLUSIONS
a flexible framework named mstali is introduced in this report. mstali can be customized to address a number of investigations centered around multiple structure alignment. mstali achieves its broad potential by relying on an inclusive set of features that encapsulate a protein's structure and biochemistry. we have demonstrated that mstali's linear representation of a structure combined with a dynamic programming algorithm, results in a fast and effective multiple structure alignment mechanism. the general framework that has been presented by mstali can be of interest to a larger community of investigators. through selection of various weight schemes and development of a relevant wrapper, the core mstali algorithm can be extended to investigate a number of problems such as identification of active site or reconstruction of phylogenetic relationships. using the customized core/wrapper combination, we demonstrated its success on several problems from the literature.

analyzing the performance of mstali on the reference alignments from homstrad and sabmark has substantiated that mstali's performance is very competitive compared to that of the most recent 3d methods such as matt, posa and mustang. in particular, mstali is effective in aligning structures from families where the structures vary widely in size. this is clear from the algorithm’s performance on sabmark, which contains many challenging families with structures of widely varying sizes. an example is illustrated in figure
 <dig>  where the structures vary in size from  <dig> to  <dig> resides. furthermore, we found that mstali is frequently able to identify an alignment that includes fragments with larger cores without sacrificing the backbone rmsd. in particular, residues at the end of secondary structures or in loop regions were more often aligned correctly by mstali . these are critical residues that may be involved in functional activity of proteins and are often time missed during computational modeling of proteins.

mstali is also novel compared to other approaches in that its starting point can be seeded based on results from other algorithms. hybrid approaches can be easily implemented where mstali's initial starting point is “seeded” based on results from another algorithm  in order to achieve an even higher performance than any one of these algorithms alone. for example, the seed alignment might come from an application that excels at aligning more divergent structures, or it might be manually constructed using a priori expert knowledge. another example of seeding the initial condition of mstali is in extraction of the conserved core motifs. we have demonstrated the success of the mstali's internal mechanism of establishing structural relationships in order to guide the investigation of the conserved core motifs. it is entirely possible to confine the extraction of the core motifs to phylogenetic relationships other than the one that is internally calculated by mstali. here one can use relationships dictated by cath or fssp in order to obtain a different set of common cores.

we presented a phylogeny tree based on protein cores from cath. the mstali approach to phylogenetic reconstruction demonstrated strong similarity with the cath classification with some noted differences. such differences are common between standard tools  and further investigation of differences revealed strong evidence in favor of mstali's classification of structures. retrospectively, it should be expected that some α/β proteins or partially unstructured proteins will share common cores with α or β proteins. this type of differences are observed in classifications resulted from mstali as shown in figure
 <dig> 

our future plans for mstali include construction of a full core database from cath domains. in addition, we expect that mstali should perform well at identifying active sites from homologous proteins, whether using a pre-constructed database of homologous structures or by scanning the entire pdb for matches to a known query. finally, we consider the pdb to be large enough that multiple structure alignments will become useful in many research areas, in addition to the ones presented.

implementation
we view the structure alignment problem as consisting of two related subproblems: general correspondence problem and specific correspondence problem. the general correspondence problem identifies corresponding fragments  between structures, but need not exactly align residues of the fragments. the specific correspondence problem is that of precisely aligning residues between structures to minimize backbone rmsd while maximizing the number of residues in the common core. solving the general correspondence problem considerably simplifies the specific correspondence problem. the mstali algorithm is designed to leverage this insight by computing a very effective initial alignment using information that provides an excellent general correspondence; it progresses to using properties that detect the exact residue-residue correspondences.

the algorithm contains two major components: a core and a wrapper. the core utilizes various features  that are extracted from a set of structures in order to accomplish the task of general correspondence. the wrapper extends the capabilities of the algorithm by utilizing the results of the core in order to address a specific problem such as core identification or establishing phylogenetic relationships.

mstali core
the mstali core is a sophisticated structure comparison algorithm. it is an extension of the previously reported tali 
 <cit>  algorithm in two major aspects. while tali is based on torsion angles and sequence, mstali includes additional structural and biochemical properties of the structures. mstali also extends the core to allow alignment of multiple structures.

mstali aligns two structures using a global dynamic programming algorithm and a linear representation of structures, in a manner similar to needleman-wunsch 
 <cit> . it uses an affine gap penalty with a gap opening penalty of  <dig>  and a gap extension penalty of  <dig> . the scoring function is shown in eq.  <dig> 

  s=wtt+wbb+wrr+wss+wdpdp+wspsp+wdsds+wssss 

this scoring metric uses functions that compute the match between two residues i and j: t compares torsion angles, b compares global backbone cα atom positions, r compares residue types, and dp, ds, sp., and ss compare the distance to and sequence types of neighboring residues. each factor has a weight w− and is collected into a weight vector w; the weights are normalized so that they sum to  <dig>  the weights used in our analyses were determined from a small training set, which were used in allsubsequent analyses.

the torsion angle function t takes into account both torsion angles and secondary structure type. torsion angles are compared using the transition cost through ramachandran space as in tali
 <cit> . for a pair of torsion angles i, j from residues ri and rj, the transition cost is t = □∫r□l□dl, where l is the straight l path connecting points i, and j and r is the empirical log density at point p in ramachandran space. secondary structure types are determined using dssp 
 <cit>  and are compared using a fixed penalty for alignment between different types in order to mitigate the effect of aligning incompatible secondary structure types. this penalty was determined using a set of training structures.

the backbone atom function b compares backbone cα positions using the euclidean distance, with a maximum of 13 Å. the residue type comparison function r scores residues using blosum <dig> 
 <cit> . the surface accessibility function s computes the absolute value of the difference in accessibilities and is useful in differentiating between buried and surface residues.

several properties of neighboring residues can play an important role in determining an overall alignment of structures. several features related to relevant neighboring residues are therefore incorporated into the algorithm through the functions dp, ds, sp, and ss to resolve potential ambiguities. an example is a series of antiparallel β-strands that form a β-sheet. if one strand is missing from a structure to be aligned, a flexible alignment algorithm may have difficulty identifying the correct correspondence between β-strands from different structures. we introduce neighboring residues to reduce this type of uncertainty. an example is shown in figure
 <dig>  for any residue i , the closest preceding residue  among all preceding residues is identified, and the residue’s type s <dig> and the distance d <dig> are noted. to ensure that any of the two immediately preceding residues i- <dig> or i- <dig> is not always chosen, the chosen residue must be >  <dig> residues away in the primary sequence. this is repeated for the successive residues , where the residue type is labeled s <dig> and the distance is labeled d <dig> . the comparison functions dp and ds each accept two residues numbered i and j from structures m and n and compute the differences in d <dig> and d2:

  dp=d1i,m−d1j,n 

  ds=d2i,m−d2j,n 

sp and ss compare the residue sequence types between preceding and succeeding residues using blosum30:

  sp=blosum <dig> 

  ss=blosum <dig> 

the corresponding weight for each factor in eq.  <dig> is denoted by w. furthermore, these weights may be specified separately for structured regions  or turn regions. this allows the algorithm, for example, to adjust the contribution of the surface accessibility term. because turn regions tend to be largely exposed, the accessibility is likely to be similar for all residues in a turn. in contrast, the surface accessibility in structured regions is reflective of the hydrophobic forces that affect folding and should be given greater emphasis. the sequence term is another that benefits from separate structured and turn weights. some loops exhibit large structural variations between homologous structures, and emphasizing amino acid type to a greater degree can aid in successfully aligning these regions. given the weights, comparing two residues consists of computing the weighted sum of all factors.

the residue-residue scores are in the range  <cit>  with  <dig> indicating the least similarity and  <dig> indicating the highest level of similarity. the score of a pairwise alignment is the average score over all aligned residues, and so it too lies in the range  <cit> . furthermore, an alignment score is independent of the order in which the structures are provided.

extension to multiple structure alignment
mstali also extends the pairwise tali to allow multiple structure alignment. it does so in a manner similar to clustalw 
 <cit> . a phylogenetic tree containing all structures is computed using the neighbor-joining algorithm 
 <cit> . the tree is computed using scores from the pairwise core. the structures are then multiply aligned, using the tree as a guide. during the alignment, profiles <cit>  - sets of aligned structures - are used; the goal of the algorithm is to build more inclusive profiles until only a single one remains. initially, each structure forms a profile of size  <dig> and is a leaf in the tree. the algorithm selects two profiles that share a common parent node and aligns them, then replaces the parent node with a node representing the aligned profile. this is performed repeatedly until a single profile remains.

alignment of two profiles proceeds in the same manner as aligning two structures. when computing the score between two positions, each residue from one profile is compared to each residue from the other profile. in addition, each initial profile is weighted according to the branch length from the root to its corresponding leaf. these weights are applied to the residue-residue score in order to reduce the contribution of highly similar structures during the alignment process. the final score between two profile positions is then the weighted average over all pairwise scores.

during the course of multiple structure alignment, bb-rmsd is calculated over the backbone atoms of the entire alignment. in instances where some of the structures share alignment but other structures exhibit a gap, the bb-rmsd is calculated based on the available atomic coordinates. therefore the contribution of the gapped regions to the overall bb-rmsd is limited to coordinates of the structures with available atomic coordinates.

core identification wrapper
the core identification wrapper is designed to extract a structural core from a set of homologous proteins. the criterion it optimizes is maximizing the number of residues included in the core with the constraint that the residues  fall under an rmsd cutoff. it is important to observe both of these criteria simultaneously since they are competing objectives. the complete algorithm is shown in figure
 <dig>  this algorithm uses several parameters; the automated method for determining these parameters from a set of training examples.

the wrapper iteratively applies the mstali core to progressively improve the multiple structure alignment. the first alignment computed by the wrapper is a general alignment and is performed using backbone torsion angles, sequence, surface accessibility, and the distance to, and amino acid types of, neighboring residues. it is reasonable to expect that some of these features  will play an increasingly less important role in structure alignment. the weights of these features therefore diminish as the wrapper iterates and more emphasis is placed on cα distances. the final iteration computes a specific alignment and uses only backbone atom distances. this, in effect, treats each structure as a rigid entity, allowing the algorithm to take into account the spatial orientations and geometry of various elements that constitute a folding pattern. these final iterations refine the specific correspondence between structures and enable mstali to often include additional residues in the common core without increasing its backbone rmsd. the parameter determination method determines the initial and final weights. these are denoted wi and wf, respectively. the weights used by the algorithm at iteration i are denoted wi. the weights are updated after iteration i as wi+1 =  <dig> wi +  <dig> wf.

after each alignment is computed, fragments, ungapped stretches of residues, are identified. fragments are merged into motifs, which are sets of fragments which yield a backbone rmsd under a user-defined threshold when considered together. this threshold is currently set to  <dig>  Å, which corresponds to what experimental structural biologists consider as high structural significance. it is important to note that under this definition, some families in the test databases yield multiple motifs that cannot be merged together. from these motifs, the largest  is identified and defined as the main core of a group of proteins. each structure is rotated to minimize the backbone rmsd over all core residues with respect to the first structure. the mean structure is computed over all residues in the core and each structure is rotated to minimize the backbone rmsd between it and the mean structure. rotating to the mean structure moderates the effects of choosing a single structure as the reference structure. the mean structure can then be viewed as the evolutionary conserved core. after this process the wrapper updates the weights and decides whether or not to terminate. the algorithm iterates as long as the core size increases between iterations or the core rmsd decreases.

after the final alignment is computed, each position in the final profile is scored using only the backbone atom distance information. all residues with  scores greater than the experimentally determined cutoff threshold of  <dig>  and  no gaps are considered part of the conserved core, which is the complete family core.

parameter determination
mstali has several parameters that govern its behavior. these are primarily the weights for the various factors, but also include the motif merge threshold. to determine optimal values for all parameters in the core wrapper, ten families were extracted from homstrad 
 <cit>  and ten from sabmark 
 <cit> ; these comprise less than  <dig> % of the total database. the mstali wrapper with hand-set parameters was used to align the families, and the final alignments were examined and confirmed to be satisfactory. all corresponding residue-residue pairs from the alignments were extracted and used to optimize the weights.

the secondary structure transition penalties were computed by observing the frequency of matches between secondary structure types and converting these values to expected probabilities. the values were scaled to be in the range  <cit> . the match scores were computed for the torsion angle comparison function, and the difference from the expected probabilities computed. linear regression was used to determine optimal penalties for the secondary structure transition penalties.

weights for individual factors were set by extracting residue-residue pairs, treating them as ideal matches, and assigning each a target score of  <dig>  a set of negative matches  was generated by repeating the following: randomly select two non-paired residues, assume them to be an undesirable match, and assign them a target score of  <dig>  linear regression was then used to identify optimal weights. the weights for the algorithm’s initial iteration were set by eliminating the atom-atom distances, while the final weights were set by including these distances. the final weights had nearly zero values for all factors except the atom-atom distances, and so these values were zeroed.

the distance cutoff determines which residues are included in the conserved core. it sets the maximum allowed distance between a residue and the corresponding residue from the mean structure. this distance is computed as the euclidean distance between cα atoms. this cutoff controls the tradeoff between the number of residues belonging to the core and the average pairwise rmsd. here the threshold was set using 20% of the homstrad database. the appropriate threshold for a task ultimately depends on the user’s judgment as to whether a larger core size or a smaller rmsd is preferred.

altation of mstali's parameters provides a flexible means of customizing it for a specific task, therefore expanding the scope of mstali's applicability. additional file 
1: tables s <dig> and s <dig> list the parameters that are used for identification of core components of a structure, and flexible structure alignment respectively.

availability and requirements
project name: mstali

project home page:http://ifestos.cse.sc.edu/wiki/html/index.php/mstali

operating system: linux

programming language: c++

other requirements: dangle  and dssp 
 <cit>  must be installed for standalone use

license: gnu gpl

any restrictions to use by non-academics: licence needed

competing interests
there are no competing interests related to this work.

authors’ contributions
ps designed the algorithm, wrote software, performed analyses, and wrote the paper. hv contributed to the algorithm, designed experiments and wrote the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1
the c++ source code for mstali. the readme file contains brief compilation and execution instructions.

click here for file

 additional file 2
table s <dig>  full alignment of the mobile domains of dna polymerase obtained from the stamp analysis software. table s2: full alignment for mobile domains of dna polymerase from matt. table s3: full alignment for mobile domains of dna polymerase from mstali. table s4: configuration for study of polymerase structures based on backbone torsion angles. all parameters not listed have zero values. table s5: a comparison of the domains from  <dig> . <dig>  that were divided by mstali into two separate clusters. the larger cluster contains  <dig> domains , while the smaller cluster contains  <dig> domains . each domain from the smaller cluster was compared to a randomly selected domain from the larger cluster using ssap. domains from the small cluster are on the left , while domains from the large cluster are on the right . these comparisons were performed to validate mstali’s results, ensuring that this division was not related to an anomaly in mstali. table s6: parameters of mstali for core identification. all parameters not listed have zero values. table s7: parameters of mstali for identification for flexible structure alignment. all parameters not listed have zero values. figure s1: per-residue score of mstali for the three dna polymerase proteins 1ktq, 2ktq and 3ktq. residues with scores more than 3s outside of the mean score were identified as the hinge regions.

click here for file

 acknowledgements
thanks to rishi mukhopadhyay for helpful discussions and to the rothberg fellows program at usc for its support to ps.
