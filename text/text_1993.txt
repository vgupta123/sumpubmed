BACKGROUND
pcr-based methods of detection and amplification require that primers be target-specific. pcr is used in single- or multiplexed molecular diagnostics  <cit> , consensus pcr, and target enrichment prior to sequencing  <cit>  with, for example, ion ampliseq™   <cit> , truseq amplicon , and haloplex   <cit> . to predict desired reactions with target and undesired cross reactions, simulate_pcr software is described to calculate the possible primer pairings and products of pcr  or primer + probe triplet reactions  in either single-plex or complex multiplex reactions, as compared to a large sequence database. we use it daily for applications in molecular diagnostic signature development and erosion analysis , and have used it in the process of developing primer panels with more than  <dig> primers for target enrichment prior to sequencing.

simulate_pcr is the only software that 1) finds all possible primer pairings predicted to result in a product from an unordered, unpaired list of primer and probe candidates, 2) can be run from the linux command line for high throughput applications, 3) can calculate products from multiplexed combinations of many primers, 4) predict probes binding to those amplicons, 5) allows degenerate bases, 6) extracts entire amplicon sequences and creates a fasta file of amplicons for downstream analyses, and 7) automatically annotates amplicons with gene information downloaded from ncbi’s genbank for those matches with a gi number.

other tools to simulate pcr exist, like ncbi primer-blast <cit> , fastpcr <cit> , and cspcr <cit> . they are excellent for low throughput analyses where manual inspection and a graphical user interface  is desired, and they offer a number of very useful features not offered by simulate_pcr, such as primer design, and primer tm, secondary structure and primer-dimer prediction. however, when the goal is prediction of target and off-target amplification and probe binding as part of an automated pipeline, with optional amplicon sequence extraction and gene annotation, simulate_pcr provides a unique capability. for example, if a long list of primer candidates has been designed with desired thermodynamic or taxonomically specific characteristics, it can be a chore to identify the best pairings if one has to check all possible pairwise combinations using a tool that considers only one single-plex primer pair at a time to predict products, as with the web tool primer-blast. another tool, fastpcr claims multiplex capabilities, but unfortunately this capability only applies to primer design  but not to amplicon prediction from mixtures of more than  <dig> primers in the same reaction. moreover, it is not freely available except as a trial version for windows and it must be run from a gui, making it unfeasible for large scale unix/linux applications. the cspcr program does predict amplicons from multiplexed primers, but it must be run from a gui, suitable for one-off analyses by non-programmers, but presenting a problem for high throughput automated pipelines. mfeprimer <dig>  has a command line version and can take a batch of primers with unspecified pairings, but requires a large amount of memory so that most users will not have sufficient ram to compare to the ncbi nt database. when we tried several examples on the mfeprimer <dig>  website, which simulate_pcr ran in a few seconds, they never finished after several hours, although this could also have been a web server issue on the days we tried. in summary, none of the currently available pcr target prediction tools have the capability to consider primer + probe triplet reactions, none extract entire amplicon sequences, instead reporting only the positions of primer matches, none annotate gene information that overlaps the amplicons, none handle large numbers of unpaired, multiplex, degenerate primers compared to large sequence databases, and most cannot be run as part of an automated pipeline without a gui or web interface. thus, simulate_pcr addresses an unmet need to aid in the design and assessment of pcr-based molecular diagnostic signatures.

simulate_pcr is an open source, command line perl script that calls the blast <cit>  programs makeblastdb, blastn, and blastdbcmd, and the ncbi efetch utility . it can be run after multiplex degenerate primer and probe design using software such as primux <cit> , which automatically creates a fasta file of primers and probes formatted as input for simulate_pcr.

implementation
approach
the script simulate_pcr predicts pcr amplicons from a sequence database given primers and, optionally, probes. multiplex degenerate primers encoded with iupac characters are blasted against sequences in the database, and amplicons calculated from primer-database sequence matches with no more than the allowable number of mismatches that are in the correct orientation and distance. if the input file contains probes, indicated with “|io”  at the end of the fasta defline, probe matches are reported within the amplicons. if the option -extract_amp is set to  <dig>  then amplicon sequences are extracted with blastdbcmd.

any non-matching blast position is a mismatch, including snps, indels, and degenerate bases. these break up blastn search seeds, so more sensitive detection can result from including all primer/probe variants instead of degenerates. another way to trade sensitivity for speed is by setting the maximum number of blast hits to report per primer with the option -max_target_seqs. this should be as least twice as high as the expected number of sequences targeted, and can be much higher if signature components are highly conserved. the third way to alter sensitivity is to modify the –word_size option. default is  <dig>  the minimum allowable blast seed size, so this value can only be increased for faster speed.

by setting the simulate_pcr –mux option to  <dig> the code predicts specific forward-reverse primer pairings as a singleplex pcr or primer/probe triplet reaction. setting –mux  <dig> predicts amplicons from any combination of primers and probes, as illustrated in figure  <dig> 

with the option –genes  <dig>  if any sequences have gi numbers, annotations which overlap predicted amplicons are automatically downloaded from ncbi genbank with the efetch utility. annotations reported are primary tag, product, gene, note, and protein id, for coding sequences , genes, mrna, mature peptides, miscellaneous features, etc.

inputs are a file of primers and probes and a file of sequences  to be checked for amplicons. additional command line parameters are minimum and maximum reportable amplicon lengths, the maximum number of mismatches allowed per primer or probe compared to a database hit, whether to report gene annotations, whether to run as single- or multiplex, whether to extract amplicon sequences, the number of blastn threads, the maximum number of blast hits to report per query , the blastn word size  and blastn evalue.

output files
a number of output files are produced: an “amplicons” file of tab-delimited text contains predicted targets hit, amplicon sequence, length, position, primer and probe combination, number of degenerate bases and mismatches per primer/probe, probe position on amplicon, probe on plus or minus strand, and gene annotations overlapping the amplicon, with multiple annotations separated by three colons . the “amplicon_distribution” file summarizes fragment length distributions for each target, useful to predict electrophoretic gel banding patterns. a fasta file contains the predicted amplicons, which will be empty if –extract_amp option is  <dig>  the “detection_counts_by_triplet.#mismatches” files list all forward/reverse primer pairs and probe triplets with the number of sequences in the database each is predicted to detect. these detection counts are calculated assuming  <dig> mismatches between primers/probes and the database sequence, or up to  <dig> mismatch per primer or probe, etc. up to the maximum number of mismatches specified in the input –mm option. results from each mismatch count are shown in separate files. the file “one_primer_but_no_amp” lists the database sequences for which one primer matched without a paired primer within the allowable amplicon length. there is a readme and an example at https://sourceforge.net/projects/simulatepcr/files/.

computational examples
primer and probes were predicted for  <dig> target sets: 1)  <dig> coronaviridae genomes; 2)  <dig> hiv- <dig> genomes; 3)  <dig> antibiotic resistance gene sequences . 1) and 2) were the set of all available genomes downloaded from genbank on august  <dig>   <dig>  and 3) was several of the first sequences listed in a download of the genes from the comprehensive antibiotic resistance database  <cit>  plus an ndm- <dig> antibiotic resistance gene sequence from ncbi. primers and probes were designed using the run_primux_triplet script from primux , with the options in additional file  <dig>  primers and probes for hiv are provided in additional file  <dig>  for coronaviridae in additional file  <dig>  and for antibiotic resistance genes in additional file  <dig>  simulate_pcr was run with options –minlen  <dig> –maxlen  <dig> –mm  <dig> –mux  <dig> –num_threads  <dig> -word_size  <dig> -evalue  <dig> , and –max_target_seqs  <dig> for coronaviridae and antibiotic resistance genes or –max_target_seqs  <dig>  for hiv. primers were compared against original genomes to assess target inclusivity and against the ncbi nt database  for off-target reactions.

RESULTS
results are summarized in table  <dig> and available from https://sourceforge.net/projects/simulatepcr/files/. for hiv <dig>  the  <dig> degenerate primers are predicted to amplify all targets in the original fasta file with various combinations of forward and reverse primer pairings. simulate_pcr predicted over  <dig>  unique sequences amplified from nt from the combined set of primers and probes. all of the database sequences amplified are hiv except some synthetic constructs and vectors and  <dig> siv sequences: gi| <dig> isolate lb <dig>  gi| <dig> clone sivcpzmb <dig> c <dig>  and gi| <dig> clone sivcpzek <dig> c <dig>  each of these siv sequences had mismatches to the probe, so should not be detected by a taqman reaction with stringent conditions that exclude hybridization with mismatches. two of the siv sequences had human-specific adaptations in gag  <cit> , so these signatures may be specific for hiv or human adapted siv. the ranked list of triplets from the nt database shows that the combination 1|f, 2|r, 78|io is predicted to detect  <dig> unique database sequences with  <dig> mismatches between the triplet components and the sequence. in total, there are  <dig>  predicted pcr products.
coronaviridae 
and hiv <dig> signatures

*timings using  <dig> cpu on intel xeon  <dig> processor. timings were with options –genes  <dig> -extract_amp  <dig> 

+hit to glaucous-winged gull had  <dig> mismatch in forward primer and no matching probes.

there were ~ <dig>  sequences with one primer match but no paired primer within the reportable length range. a single 18-24-mer with up to  <dig> mismatches is likely to match many sequences. the pcr specificity stems from the requirement for  <dig> matches within priming distance and orientation. however, one cannot always count on primer pairing specificity, making it essential to check for unanticipated primer pairing combinations in a multiplex that could amplify undesired non-target sequences.

for coronaviridae primers, one amplicon from a glaucous-winged gull was predicted if a single mismatch in the forward primer was allowed, although there were no matching probes. this was the only predicted amplicon from nt outside coronaviridae, besides synthetic rna transcription vectors derived from coronaviruses . the run took just over a minute against the coronaviridae genomes database,  <dig>  hrs or  <dig>  hrs against nt with or without amplicon extraction and gene annotation, respectively.

there were  <dig> primers and  <dig> probes for the  <dig> antibiotic resistance genes. simulate_pcr compared to the original target sequences finished in 8 seconds. comparing to nt required 47 minutes or 55 minutes, excluding or including the steps to extract amplicons and annotate genes, respectively. predictions indicate that the primers and probes should amplify  <dig> sequences , including , achromobacter denitrificans, enterobacter cloacae, mycobacterium bovis, acinetobacter baumannii, citrobacter freundii, enterococcus faecalis, shigella dysenteriae, yersinia pestis, pseudomonas aeruginosa, various vectors, plasmids, and uncultured bacteria, and many others.

CONCLUSIONS
a simple script called simulate_pcr is described to identify combinations of primer pairs and primer/probe triplets that detect database sequences, rank the pairs and triplets by the number of sequences they detect, extract amplicon sequences and gene annotations, and predict fragment length distributions from the multiplex. degenerate bases are allowed, as are a user-specified number of mismatches between triplet components and database sequences. the tool allows a user to specify desired primer pairings, or with the “mux” setting it checks all combinations of primers and probes. this enables a user to input an unordered, unpaired list of candidate forward and reverse primers and probes and let the results guide which pairings achieve the desired specificity. simulate_pcr is a command line script, so can be run as part of a pipeline where a gui is not suitable. our group has used this tool to predict products from multiplexed sets with thousands of primers compared against large sequence databases of all available whole finished and draft microbial genomes  and against nt. extracting a fasta file of the amplicon sequences is convenient when analyzing high throughput sequencing data that has undergone target enrichment. for example, running simulate_pcr on an ampliseq™ primer pool with thousands of primers provides an ideal fasta database for read mapping the resulting sequence data.

some changes to alter the sensitivity/speed tradeoff of simulate_pcr could include swapping out blastn with a short read mapper to improve speed, or with more sensitive alignment such as fasta  <cit>  or smith-waterman, at the cost of slower speed. using a k-mer index algorithm to find primer binding sites could improve speed and sensitivity, but requires large amounts of ram for large sequence databases. this is the technique used by mfeprimer, which requires 12 gb ram for a 3 gb human genome database  <cit> , implying that larger databases like nt or a 75 gb microbial genome database would not be feasible with the ram available to most users. however, we have tuned the default blastn parameters in simulate_pcr to maximize sensitivity, and found that with the threaded option it performs very fast for situations with up to several thousand primers and probes. command line options can be adjusted to balance tradeoffs of sensitivity versus speed. blast heuristics may fail to report all matches to short oligos if degenerate bases break matches below the word length of  <dig>  which is only a problem with large numbers of degenerate or mismatching bases. in this case, one could replace degenerate primers with the expanded variant combinations to improve sensitivity at the expense of speed.

the optional steps of amplicon extraction  and gene annotation of amplicons  can be time-intensive, and it is recommended that they be omitted if one expects results with more than  <dig>  amplicons. the advantage of blastdbcmd is that it allows one to extract amplicon sequences from a precompiled blast database  without the extremely large fasta input file from which the blast database was created. the original fasta data may not even be available if only the precompiled nt blast database was downloaded from ncbi.

in summary, a command line perl script was developed to predict products from single- or multiplex degenerate pcr or taqman®/luminex® reactions compared against large sequence databases. simulate_pcr is useful to select primer pairings and probe combinations, check for desired target amplification and non-target cross-reactions against databases tens of gb in size, rank pairs and triplets by the number of sequences they are predicted to detect, predict fragment length distributions from a multiplex, extract amplicon sequences, and annotate genes overlapping them. we use this code daily to predict the specificity and target inclusivity of molecular diagnostic signatures and multiplexes for target enrichment prior to sequencing.

availability and requirements
project name: simulate_pcr

project home page:http://sourceforge.net/projects/simulatepcr

operating system: platform independent

programming language: perl

other requirements: installed and in path: blastdb, blastn, blastdbcmd, and ncbi efetch utility if amplicon annotation is desired

license: bsd

any restrictions to use by non-academics: none

competing interests
the authors declare that they have no competing interests.

authors’ contributions
sng wrote the code and sng and ts wrote the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1
primer and probe design parameters, and table s <dig> listing species or sequence elements from nt that the antibiotic resistance primers are predicted to detect.

click here for file

 additional file 2
primer and probe sequences for hiv- <dig> 

click here for file

 additional file 3
primer and probe sequences for 
coronaviridae.


click here for file

 additional file 4
primer and probe sequences for selected antibiotic resistance genes.

click here for file

 acknowledgements
we would like to thank our colleagues in the pathogen bioinformatics group at llnl and anonymous reviewers for helpful suggestions and catching bugs in previous versions of the code.

auspices
this work performed under the auspices of the u.s. department of energy by lawrence livermore national laboratory under contract de-ac52-07na <dig> 
