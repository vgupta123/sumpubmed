BACKGROUND
researchers in protein biology must often build structural alignments of multiple homologous proteins. generally, both the protein sequence and its 3d structure are available to a structural alignment program. the structural alignment program typically produces both a rigid body transformation that aligns the structures in space, plus a sequence alignment derived from that structural alignment that proposes homologous residue-residue correspondences. for a recent survey of the best current structural alignment programs available, see  <cit> . in the absence of hand-curated gold-standard benchmarks, the quality of protein structure alignment is usually measured based on purely geometric measures: some function of the number of residues declared to be alignable, together with an average rmsd score for aligned residues, plus perhaps a penalty for gaps. similarly, most of the best structural alignment programs in use today begin by ignoring all sequence information, and working only with the geometric location of the cα atoms of the protein backbones. it seems that this extra information could be used to improve protein structural alignment. however, a meaningful way to incorporate sequence information into structural alignment algorithms in order to improve their performance has remained elusive.

one of the reasons it has not been clear how best to incorporate sequence information into structural alignment programs is that it is unclear what the goal is, or rather, the goal might be problem-dependent. when a sequence alignment and a structure alignment of two protein sequences give different answers, which one is correct? if the correct alignment is defined solely based on the geometric location of the cα atoms of the protein backbones, then this alignment can always be computed without ever looking at the protein sequences. at the opposite end of the spectrum, we could imagine a “true” correct alignment to be one that aligns residues that have evolved from residues in a common ancestor protein. ignoring the fact that constructing a gold-standard benchmark to test alignment algorithms according to this standard is impossible without knowing ground truth, such an alignment might result in aligned regions with very little geometric similarity, since there are known examples of proteins with high sequence similarity but markedly different folds  <cit> .

several researchers have developed algorithms, including 3dcoffee  <cit> , promals3d  <cit> , and salign  <cit> , that consider both sequence and structure when constructing protein alignments. as has been demonstrated by kim and lee  <cit> , structure-based methods produce better sequence alignments than methods based on sequence information alone. these algorithms have all, to some extent, had to address the question of what their hybrid algorithm considers a “correct” alignment. however, with the notable exception of salign  most of these papers try to use structural information to improve sequence alignments, whereas the goal of this paper is to use sequence information to improve structural alignments. even though the “correct” alignment in both scenarios is presumably the same, these are two very different problems, because the natural assumptions on the inputs to the two problems are completely different: i.e., sequence alignment programs cannot assume structural information is available for all proteins.

instead of asking if  structural information can help sequence alignment algorithms, this paper instead focuses on what we believe is a substantially easier computational problem: we ask if sequence information can help structural alignment algorithms in the typical setting where purely structural alignment algorithms are employed, specifically when 3d structural information is available for all the proteins in the set. we suspected it would help, because anecdotally, for even the best structural alignment programs, we knew there were always cases where it seemed a human being could hand-“correct” the alignment into something that made more sense from a sequence point of view, with little or no loss in geometric fidelity. the kinds of errors produced by structure alignment programs that do not take sequence into account can be illustrated by an example pair of proteins, aligned by our group’s own structure alignment program, matt  <cit> . figure  <dig> illustrates how the structural alignments produced are quite similar, but the formatt sequence alignment has fewer gaps, and thus fewer non-core residues  than matt . the homstrad gold-standard alignment for these chains  indicates only one gap in this short region. in this instance, formatt more closely matches homstrad both within this short region and for the alignment as a whole. note that while we have chosen to show a bad alignment produced by our matt program, all the other purely structural alignment algorithms that we have tested will sometimes produce similar types of errors. 

to avoid these offset problems, we modify matt to also take into account sequence similarity, in order to correct this type of register error. in particular, we introduce “formatt” which stands for “frame offset repair matt” which uses the same geometric information that matt uses to decide what regions of the protein should be considered alignable. formatt allows matt to construct its bent alignment, which breaks a protein up into small tightly aligned blocks, between which are regions where matt would greedily align the backbone between blocks  using solely geometric criteria. formatt, by contrast, considers both geometric and sequence similarity criteria in choosing which residues to align in these regions.

note that our matt structural aligner is specifically optimized for more distant homology  <cit>  and as we find again in this paper, classical aligners may perform better on highly homologous sequences. however, the hope is the formatt correction will improve matt performance on closely homologous sequences while preserving matt’s performance advantage on remote homologs. we show below that this is indeed the case.

we test the performance of formatt against the original matt  <cit> , against mustang  <cit> , another well-known multiple structure alignment program, and against salign  <cit> , which like formatt incorporates sequence information into a structural alignment. we also considered 3dcoffee  <cit>  and promals3d  <cit> . we were unable to run 3dcoffee successfully on more than a small sample of the homstrad benchmark, because it was incompatible with our network environment and crashed our fileserver repeatedly, but found on that sample that it was not competitive. we also found promals3d not to be competitive, but we were able to run it successfully and report results in tables  <dig> and  <dig>  note that promals3d does not provide a 3d structural alignment, so for promals3d we can only report sequence-based measures of alignment quality. of course, as remarked above, to be fair to 3dcoffee and promals3d, they can also produce alignments  when structural information is only available for a subset of the protein sequences to be aligned, and were not optimized for the full-information structural alignment problem. 

the metrics under which we tested performance on homstrad include the correct gold-standard reference alignments . on the sabmark “twilight zone” benchmark  <cit> , which we chose to capture the alignment of more remotely homologous proteins, there is no gold-standard reference, and so another measure of alignment quality must be devised. we show that formatt alignments are superior to matt alignments according to a purely objective measure that does not require a reference alignment; namely, the “staccato” seq, str, and cons scores as introduced by shatsky, nussinov and wolfson  <cit> . while mustang and salign both produce reasonable homstrad alignments, and in fact their homstrad alignments match the reference alignments slightly better than either matt or formatt, neither mustang nor salign produce sabmark alignments with reasonable rmsd, in contrast to both formatt and matt.

formatt source code is freely available for download under the gnu public license at http://bcb.cs.tufts.edu/formattwhere we also make available homstrad and sabmark benchmark reference alignments aligned by formatt.

methods
matt
the matt structural aligner  <cit>  belongs to the class of fragment-pair chaining method aligners. matt finds blocks of between  <dig> and  <dig> amino acids in each chain participating in a multiple alignment that share close spatial alignment, without regard to the fact that the regions between these blocks may include impossible bends, translations, or twists. matt then extends these aligned blocks, adding adjacent amino acids that do not diverge greatly in spatial alignment. thus, matt aligns protein sequences based on root mean square distance . ultimately, matt chooses an optimal alignment based on a balance of rmsd and the number of aligned residues. clearly, at the extrema, an rmsd of  <dig> could be found for any set of amino acid chains with a length of only  <dig> residue; likewise, maximally long alignments could be achieved without regard to rmsd. matt solves a bi-criterion optimization problem, balancing the length of the aligned cores with the minimization of rmsd. this balance was achieved by finding a linear combination of rmsd and core length that optimally separated sabmark  <cit>  positive from decoy chains at the superfamily level of homology.

improving upon matt
the chief limitation of matt’s approach is that the regions in between the original, closely-aligned, 5- <dig> amino acid blocks are still aligned purely according to this balance between core length and rmsd, and thus the final alignment may choose arbitrarily between different possible alignments of similar rmsd values. this can lead to otherwise obvious sequence similarities being discarded due to negligible differences in rmsd. by preserving sequence information, and allowing the input from a pure sequence alignment tool to influence the final alignment, we aim to improve the alignments of these regions between closely-aligned blocks.

formatt produces an initial “bent” alignment of 5- <dig> amino acid blocks, identically to matt. it then extends each aligned block as follows: given a region of residues between blocks, produce candidate alignments using a sequence aligner , as well as a greedy structural alignment within an rmsd threshold of 5Å using the original matt algorithm. formatt then computes the staccato  <cit>  “cons” conservation score for both the resulting sequence-based alignment and structural alignment, and chooses the alignment for this region based on the lower  conservation score. we describe our implementation of the staccato score below.

we present results for formatt based on all four sequence aligners, but considering our results in the next section, we clearly recommend mafft as the default sequence aligner for use with formatt on closely homologous sequences.

core alignments, partial alignments
both matt and formatt support partial alignments; that is, they allow columns that align only some subset of structures, while other substructures have gaps in these positions. we define the core of the alignment to be the columns in which there are no gaps placed in the alignment; that is, every structure contributes a residue. when evaluating our alignments, some metrics make sense to evaluate over the entire alignments, while other metrics make sense to evaluate only on core positions: in particular, since the optimal structural superimposition based on a particular protein sequence alignment is classically computed based only on core positions, all measures with a geometric component are only defined based on core positions, namely rmsd, staccato str, and staccato cons.

in order to evaluate the effect of partial alignment, we report not only the aligned core length  but also a partial core length. we define partial core length as the total length of the alignment, l, multiplied by a partial alignment factor p, where p is the average, over the length of the alignment, of the number of possible pairs in each column in which both members contain residues, divided by the total number of possible pairs : ∑i=0nmk2n, where n is the number of columns in the alignment and m is |{i,j|i,j←0⋯k∧i≠j}| such that neither i nor j are gaps. similarly, we can report staccato seq scores for both core and partial alignments.

staccato scores
in order to determine whether sequence-based or structure-based alignment performs better for a given region of the multiple alignment, we implement the staccato scores described by shatsky et al.  <cit> .

given a multiple structure alignment a and columns c∈a, let the “seq” sequence conservation score seq=9×/ <dig> ), where seq′=∑c∈a∑in∑j>inwiwjs/w|a| and s=blosum62ifi≠j,∑i=120blosum62otherwise.

let the weights above be defined as wi=∑j≠ind and w=∑in∑j>inwiwj, where d=1−percentidentity <dig>  n is the number of sequences in the alignment a.

also given an alignment a and columns c∈a, let the “str” structural conservation score str=∑c∈ad|a|, where d=∑c∈a9ifrmsd> <dig> Å,1f+1−frmsdotherwise|a|, and f is defined as  <dig>  as it was in  <cit> .

finally, the overall staccato “cons” conservation score is simply ω×seq + ×str, where ω is set as  <dig> , equally weighting the sequence and structure scores, just as in  <cit> .

we diverge from the staccato paper in the way that we compute these scores in one important respect: by default, we only consider core positions in the alignment  when scoring a multiple alignment.

in addition, we also compute a partial seq score identical to the seq score in the staccato paper, treating an alignment of a gap with any residue or with another gap as a score of zero. we report these values alongside the final conservation score.

validation
in order to quantitatively assess formatt’s performance, we evaluate it against two well-known benchmark sets, homstrad  <cit>  and sabmark  <cit> .

the homstrad multiple-alignment benchmark consists of a manually curated set of  <dig>  alignments, each of which contains between two and  <dig> structures. to duplicate the benchmark in  <cit> , we test our methods on the  <dig> homstrad alignments with more than two structures in the alignment . for homstrad alignments, we can assume the manually curated alignment form a gold-standard set of “correct” alignments.

the sabmark benchmark is divided into superfamily and “twilight zone” benchmark datasets, each of which contains subsets of  <dig> to  <dig> remotely homologous protein structures. we test formatt and its competitors on the  <dig> subsets in the “twilight zone” set. note that for these more distant homologs, we do not have a gold-standard set of “correct” alignments, and must determine alignment quality by objective means, such as core length, average pairwise rmsd, as well as the staccato scores, as introduced by  <cit>  and discussed above.

RESULTS
as can be seen in table  <dig>  on the  <dig> homstrad multiple alignments, according to the staccato “cons” overall score, formatt with mafft performs best of all the choices tested . it produces the best rmsd, average sequence, and average structure scores compared to all the methods as well. in fact, it completely dominates the supposed homstrad gold-standard alignment on not only these measures, but also average core length, meaning it is producing longer alignments with better sequence and structural agreement than the gold-standard manually curated alignment. note that formatt  is, however, being more conservative with declaring residues in the common core of the alignment than any of the other alignment programs we tested . the other versions of formatt that we tested  have worse staccato seq, str, and cons scores than formatt , and have a smaller percentage of their residues agreeing with the homstrad manually curated alignment. however, they place an average of about  <dig> more residues in the common core of the alignment. as can be seen in table  <dig>  the other versions of formatt perform much more similarly to original matt . these versions of formatt still have slightly shorter core sizes than original matt alignments, but then achieve slightly better sequence alignment scores, with similar struct and rmsd scores.

discussion
in this implementation, we have followed the example of shatsky et al <cit>  in equally weighting the sequence and structure components of the staccato score, and we have left the choice of longer aligned core versus better alignment quality to the user. we are using the staccato scores, but there are several weaknesses in this approach. first, the combined “cons” score, which we use to decide if formatt should use a sequence- or structure-based alignment for a particular region, equally weights the “seq” and “str” scores, but this seems arbitrary. secondly, and more seriously, staccato scores are not length-invariant – that is, while they are appropriate to compare different alignments of the same length, they will always prefer shorter alignments. in fact, one could worry that the only gain that formatt makes over matt in staccato score is due to formatt preferring shorter, more conservative alignments . to show that this is not the case, we created a ‘truncated’ matt alignment by ranking the columns of the matt alignment by staccato cons score, and, on a structure-by-structure basis, greedily dropped columns from the matt alignment until it matched the formatt  alignment in length. this resulted in an identical average core length of  <dig>  on the homstrad and  <dig>  on the sabmark benchmarks. however, formatt  is qualitatively better than this truncated matt, both in terms of the staccato cons score  on homstrad, and  <dig>  for truncated matt versus  <dig>  for formatt  on sabmark) and in terms of the percent correct on homstrad ). this proves that it is worth considering sequence alignment as formatt does, directly, and not just in terms of staccato score. the problem of how to normalize a staccato measure of alignment ‘quality’ with alignment length remains an interesting question. one way to achieve this normalization is suggested by  <cit> . a plot of aligned core length versus staccato conservation score for one thousand random pairs of same-family and different-family protein domains can illustrate a possible method for trading off between core length and alignment quality . we see that an optimal linear separator of  <dig> ×x− <dig>  divides same-family from different-family domains. thus, given two possible alignments a <dig> and a <dig>  with staccato “cons” scores of c1and c <dig>  and core lengths of l <dig> and l <dig> respectively, we could view these as points in the space defined by “cons” score and core length. we could then compute the y-intercept of a line with a slope of . <dig> through each point; we would then favor the alignment with the lower y-intercept. we suggest that this would be a plausible way to rationally quantify the trade-off between alignment quality and core length. 

we remark that, while results are not shown in the tables above, we also tested promals3d on the homstrad benchmark set. note that promals3d outputs only a sequence alignment without coordinates, so an rmsd or other structural scores were not calculated. however, when we compared the promals3d to the homstrad gold-standard alignments, the average percentage correct was only 43%. we tested a subset of the homstrad benchmark set against 3dcoffee and the results were even worse. thus, we conclude that promals3d and 3dcoffee are not producing competitive alignments on this benchmark.

CONCLUSIONS
we have introduced formatt and showed that incorporating sequence information can improve the quality of structural alignments, both in terms of gold-standard alignment benchmarks, and in terms of objective measures of sequence and structural alignment quality such as the staccato score  <cit> . we were particularly interested in “correcting” matt structural alignments to better capture sequence homology because of our extensive use of the matt structural alignment program in the training phase as we build hmms  <cit>  and markov random fields  <cit>  from sets of solved protein structures that fold into the similar shapes, to learn to recognize new protein sequences that match these models. more consistent alignments lead to better structural templates, and therefore better motif recognition programs. this is the same problem domain that motivated the work on the salign program as well  <cit> .

formatt is a variant of the matt  <cit>  multiple structure alignment program, one of a new generation of structural alignment programs that incorporate flexibility into multiple protein structure alignments. other recent pairwise and multiple structure alignment programs that also incorporate some form of flexibility into alignments include flexprot  <cit> , fatcat  <cit> , posa  <cit> , rapido  <cit> , and flexsnap  <cit> . it would be interesting to see if some form of sequence alignment could be incorporated into these programs as well, and whether it could improve their structural alignments.

the question of what makes a good alignment is not simple to answer. recall figure  <dig>  in which the greater number of core residues in the formatt alignment seems intuitively better than the very slightly tighter rmsd of the matt alignment. in reality, aligning proteins is an attempt to capture the evolutionary history by which those proteins diverged. however, since in general we do not have a history of every mutation in chronological order, we must rely on sequence and structure conservation scores, and infer that the closest alignment, representing the fewest changes, is the most likely. why do we seek to more faithfully reconstruct evolutionary history in protein alignments? we commonly use protein alignments to build profiles for remote homology detection approaches such as profile hidden markov models   <cit>  or markov random fields  <cit> . the match states of an hmm derive from the core positions of a multiple alignment, and the hmm is a probabilistic model which attempts to capture the evolutionary process by which proteins are related. thus, alignments that more faithfully represent evolutionary relationships should lead to more accurate remote homology detection. an interesting, if computationally intensive measure of alignment quality would be to see whether formatt alignments of protein superfamilies lead to more accurate hmm predictions of remote homology than do the comparable alignments produced by existing software such as matt.

as mentioned above, we followed  <cit>  in using a constant ω of  <dig>  when weighting the staccato sequence and structural conservation scores to produce the combined “cons” score, in order to determine whether sequence-based alignment or structure-based alignment performed better in a given region. clearly, this ωrepresents a possible tuning parameter, which a computational biologist aligning proteins known to be of closer or more remote homology might use to adjust the performance of formatt. as the “cons” score itself does not incorporate core length, it favors shorter, tighter alignments. one possible improvement could be to compute a score that trades off this score against core length, as in  <cit> . another possible improvement would be to run all available sequence aligners on each region, and choose the best alignment from among all of them as well, as we now choose between one sequence aligner and the structural alignment. however, as mafft produces the shortest but best-scoring alignments, this would lead to nearly always preferring mafft over the other sequence aligners unless a modified score which incorporated core length were used.

likewise, while formatt performed similarly regardless of the choice of clustalw, probcons, or muscle as a sequence aligner, mafft produced distinctly shorter but more highly conserved alignments, and this distinction was magnified at the more remote level of homology exhibited by sabmark’s twilight zone benchmark. thus, a user may also prefer mafft for more closely homologous alignments, and muscle for more remote homologs.

benchmark alignments produced by formatt with each of the four sequence aligners, as well as the formatt software  are available at http://bcb.cs.tufts.edu/formatt/.

competing interest
the authors declare that they have no competing interests.

authors’ contributions
nd, sn and lc conceived and designed the experiments. nd and sn performed the experiments. nd analyzed the data. nd and lc wrote the manuscript. all authors read and approved the final manuscript.

