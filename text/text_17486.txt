BACKGROUND
proteomics has become an increasingly interesting field in the last decade, allowing the identification, quantification and characterization of proteins and peptides  <cit> . with this increased interest comes an increasing demand for high-performance bioinformatics solutions that help address the various data processing and data interpretation challenges in the field. and while these tools can vary substantially in purpose, a basic set of features are common to most of them. these include the handling of  sequence databases and the heterogeneous headers they employ, protein and peptide sequences, the visualization of  mass spectra and chromatograms, the parsing of various proteomics search engine results, and the storage of all relevant information in relational database systems. developers typically have to spend considerable time and effort on implementing these basic support structures, shifting their focus away from the novel aspects of their tool. in order to provide such basic functionality in ready-made form, several groups have developed and released code libraries that can be reused. in the field of proteomics, proteomecommons released a java-based i/o framework  <cit>  for reading and converting certain file formats, c++ users can make use of the openms  <cit>  or proteowizard  <cit>  libraries, while perl users can make use of insilicospectro  <cit> .

despite the availability of the above packages however, no reasonably comprehensive, fully cross-platform library exists for the widely popular java platform. indeed, the proteomecommons i/o framework is the only java library, and that contains only file access code, and none of the basic processing or end-user oriented visualization that takes up a considerable amount of time in developing user-friendly software. we have therefore been working steadily for several years on a general-purpose, highly reliably java library for our own wide-ranging collection of user-oriented tools, including ms_lims  <cit>  and dbtoolkit  <cit>  for storing and interacting with protein identification data; icelogo  <cit>  for visualizing protein consensus sequences; peptizer  <cit>  for automating manual validation of ms/ms search results; rover  <cit>  for visualizing and validating quantitative proteomics data; mascotdatfile  <cit> , omssa parser  <cit>  and xtandem parser  <cit>  for parsing results from mascot  <cit> , omssa  <cit>  and x!tandem  <cit>  result files, respectively; jmzml  <cit>  for parsing and visualizing mzml files  <cit> ; and fragmentation analyzer  <cit>  for analyzing ms/ms fragmentation data. by consistently building on this key library, and reusing it throughout all our distributed development, we have ensured a uniform way of presenting key user-interface elements, while substantially cutting back on development time through the reuse of shared functionality. furthermore, this broad reliance on a single core library implicitly allows any improvement or addition to the compomics-utilities library to be directly available to all the tools using the library.

given that the compomics-utilities library is already used in numerous software projects, it provides a broad range of functionalities and has been extensively tested and documented over the past several years. the result is a highly robust and simple to use codebase, aimed at component-based development rather than simply providing an amalgamate of methods. the library is here made available to the bioinformatics community as a whole, allowing anyone interested to benefit from its various production-grade features.

implementation
compomics-utilities has been developed in 100% pure java, is completely platform independent and only requires java  <dig>   to work. in addition to the library itself, several demonstration applications showing how the library can be used have also been implemented. the platform independent java binaries, additional documentation, the full source code of both demos and the library itself, along with real-life example code snippets are freely available at http://compomics-utilities.googlecode.com compomics-utilities is released under the permissive apache <dig> open source license  allowing for broad reuse of the code in other settings, including commercial ones.

RESULTS
the compomics-utilities library contains a large amount of functionality, which is summarized in . because it is impossible to describe in detail all functionality offered by compomics-utilities, we highlight three very different yet broadly applicable aspects of the library in the next sections:  interactive spectrum and chromatogram visualization;  automatic generation of data access code; and  the abstract modelling of typical proteomics data and results. together these examples illustrate how the compomics-utilities library can be used to support user interaction, back-end database development, and heterogeneous proteomics data handling. more comprehensive and detailed information on the various functionalities of compomics-utilities, along with short code examples and full source code, is available on the project web page , where a cross-platform binary  can also be downloaded.

spectrum and chromatogram visualization
mass spectra  and chromatograms are essential parts of proteomics data. in both cases the data consists of  coordinates, and visualizing these coordinates in graphical form helps understand the properties of the underlying data. the interactive display of spectra and chromatograms is therefore an essential element in most proteomics software tools, for which the compomics-utilities library contains ready-made components. the interactive display of spectra is handled through the spectrumpanel component, which is created and fully initialized simply by calling its constructor. as a subclass of jpanel, any spectrumpanel can be directly added to a java frame or dialog without further intervention or configuration. an example containing two spectrumpanels is given in figure  <dig>  chromatograms are created in the same way, but now using the chromatogrampanel constructor. in both cases it is possible to add optional annotations  to specific  coordinates as well. both the spectrum as well as the chromatogram widget support a wide array of user interactions using mouse and keyboard, and allow export of their contents in several common image formats . furthermore, these panels can also be linked easily, which means that if multiple panels are displayed simultaneously, zooming on one panel automatically also zooms all linked panels to the same location.

automatic generation of data access code
since relational database access  is a vital part of any type of user-oriented, high data volume application, compomics-utilities also comes with a highly robust code generator that automatically creates table-specific data access components in fully documented java code. these generated components provide programmatic access to a single table in a relational database, wrapping the insert, update, select and delete statements through the implementation of four key interfaces: persistable, updateable, retrievable, and deleteable. these four methods thus define the core behavior of the generated class and completely omit the use of sql in the user's own code. the use of these four interfaces furthermore abstracts the actual nature of the data element or table being persisted, updated, accessed or deleted, allowing highly complex hierarchical structures to be stored in just a few  statements. this cuts back quite substantially on development time, while simultaneously providing a unified and highly robust way of handling data access from an application. this latter point is particularly relevant, since data access is a key part of such an application, and any bugs or errors introduced in this code will have wide-ranging repercussions. for this reason, the ms_lims data management system relies entirely on such generated components for all its communications with the back-end database. in order to generate code for an existing database table, it is sufficient to specify the database access credentials, the table name, and the desired output package for the generated class. the generator auto-detects all relevant table characteristics, including column types,  primary keys, and special auditing columns such as 'creationdate' and 'modificationdate'. the generated classes are transaction aware, and also handle peculiar column types like blob and clob transparently.

abstract modelling of proteomics data
proteomics data is highly heterogeneous, spanning mass spectra, identified peptides and proteins, their quantification, and any and all associated experimental metadata such as sample and experiment information. on top of this complexity in basic data types, each type is often provided in one of multiple representations. typical examples include fasta database headers, mass spectrometry search engine output formats, and reporter-based quantification methods. these issues are addressed in compomics-utilities through abstract modelling of each data type, and this in turn is implemented transparently through auto-detection of supported formats for that data type. as a result, a fasta header will be automatically parsed into its constituent parts without requiring any user or developer interaction, and the information from different search engine output formats can likewise be accessed through an abstracted interface directly without further effort .

this framework thus makes it possible to have abstract access to information from the major parts of a proteomics workflow, saving development time, ensuring compatibility between tools, and reducing the complexity of  data processing.

CONCLUSIONS
by providing the basic building blocks of any proteomics informatics tool as a production-grade and permissively licensed open-source 100% pure java api, the compomics-utilities library greatly simplifies the development of java-based bioinformatics applications within the field of proteomics. because compomics-utilities has been developed over several years, and is used in a large variety of production applications, it is thoroughly tested and reliable. additionally, all code is well-documented and open-source, and is specifically engineered to be straightforward to incorporate into other projects. finally, the fact that the library is already in active use in such a broad range of published software, helps ensure that the library will be both maintained as well as extended and expanded over time.

availability and requirements
project name: compomics-utilities

project home page: http://compomics-utilities.googlecode.com

operating system: platform independent

programming language: java

other requirements: java  <dig>  or newer

license: apache license  <dig>  

any restrictions to use by non-academics: none

list of abbreviations
omssa: the open mass spectrometry search algorithm; ms: mass spectrometry; ms/ms: tandem mass spectrometry; sql: structured query language

authors' contributions
all authors except fsb and as participated in the implementation of compomics-utilities. all authors contributed in the writing of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
compomics-utilities features. a list of compomics-utilities features

click here for file

 acknowledgements
lm would like to thank joël vandekerckhove for his support. lm acknowledges the support of ghent university .

hb and fsb are partly supported by the national program for research in functional genomics , funded by the norwegian research council, and the western norway regional health authority, and are also supported by a grant from the meltzer foundation.

the financial support by the ministerium für innovation, wissenschaft, forschung und technologie des landes nordrhein-westfalen and by the bundesministerium für bildung und forschung is gratefully acknowledged.
