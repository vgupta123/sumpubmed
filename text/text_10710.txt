BACKGROUND
supertree methods amalgamate trees containing information from different, but overlapping, relationships into a larger supertree . the input trees need not have the same taxon sets, but the supertree contains all of the taxa present in at least one of the input trees. with this property, supertrees are applied to combine information present in different gene trees to infer relationships about larger sets of taxa .

supertree methods can be distinguished by the elementary relationships they extract from the gene trees. these relationships can be splits , rooted triplets  or quartets . here, i focus on split-based supertree methods. a split is a bipartition of the taxa and a split of a tree corresponds to an edge in the tree that divides these two sets. splits are compatible if they can occur together in a tree. otherwise they are incompatible. a subsplit of a supertree split is generated by deleting some taxa from the taxon set. thus an input tree split may be subsplit of a supertree split. the definition of compatibility can also be applied to splits on overlapping taxon sets, then the splits are first reduced to the common taxa and subsequently tested for compatibility.

it is natural for split-based supertree methods to first extract the splits from the input trees and code them into a matrix representation . the most widely applied supertree method is matrix representation with parsimony . in this approach, the matrix representation is interpreted as a binary alignment and the supertree is the most parsimonious tree given the alignment. matrix representation with compatibility  searches for the supertree maximizing the number of input splits that are a subsplit of a supertree split. mrc can also be understood as the compatibility method  <cit>  applied to the binary alignment.

coding of the example trees in figure  <dig>  only inner splits are shown.

the task of summarizing trees on the same taxon set, the so called consensus setting, is well studied . supertree methods can be understood as generalizations of consensus methods, that is, when applying a supertree algorithm in the consensus setting, the result should then be equivalent to the consensus. one popular consensus method is the majority-rule  consensus, which produces a consensus tree that contains all splits present in at least half of the input trees. the mr consensus tree is a median tree under the robinson-foulds distance, in that, it is the tree with the smallest sum of the robinson-foulds distances to the input trees  <cit> . the robinson-foulds  distance of two trees is the number of splits occurring in each of the trees, but are not found in the other  <cit> .

study of the consensus setting may also lead to important insights for supertree methods. obviously, if a supertree method does not fulfill a property in the consensus setting, the property does not hold in general. for example, wilkinson et al.  <cit>  studied pareto properties. they show that most supertree methods, including mrc and mrp, are pareto on splits, i.e. the supertree contains a split if it is contained in all input trees. methods are not co-pareto on splits, if the supertree contains splits not supported by any input tree. e.g. mrc is co-pareto on splits, but mrp is not. some supertree methods show a bias in tree shape  <cit> . mrp shows a bias towards unbalanced shapes which is caused by the asymmetry of the underlying distance  <cit> .

mrc and mrp can also be seen as median methods based on an asymmetric distance. the underlying distances are asymmetric since they only evaluate the fit of the input trees on the supertree and not vice versa. mrc is a median tree under the asymmetric rf distance, that is, the number of splits that are in the input tree but not in the pruned supertree. thus, it generalizes the asymmetric median consensus  <cit> . analogously, mrp can be interpreted as a median method based on the asymmetric parsimony distance.

due to the asymmetric distances, mrc and mrp may favor relationships contradicting a majority of the input trees  <cit> . cotton and wilkinson  <cit>  define majority-rule supertree methods as supertree methods generalizing the mr consensus. different variants of mr supertrees exist and have been investigated. the main division among variants is between mr and mr. the first evaluates distances between the pruned supertree and each input tree, while the second evaluates distances between the supertree and extended input trees. here, extension refers to a method that adds missing taxa onto the input trees. since this extension can be defined in multiple ways, multiple variants of mr supertrees exist  <cit> . mrs supertrees, a variant of mr supertrees, can be solved exactly with an integer linear programming formulation  <cit> . mr supertrees are closely related to rf supertrees  <cit>  since both evaluate the rf distances between the pruned supertree and the input trees. conceptually, there is a large difference between rf supertrees and mr supertrees. the aim of the first is to find at least one bifurcating tree of optimal score  <cit> . the approach of the latter, in contrast, is to find all trees of optimal score and to summarize them using the strict consensus method into a potentially multifurcating supertree. this also allows for labelling the mr supertree with values of support in the gene trees. by definition, finding all trees of optimal score also includes searching over multifurcating trees. here a first attempt to solve the problem is performed that only searches for bifurcating trees of optimal score. from now on, i will also call these bifurcating trees of optimal score supertrees, since they contain all taxa from the input trees. they should not be confused with the mr supertrees that are obtained after the consensus step and can thus be multifurcating .

to date, there is only one study comparing the properties of different mr supertree variants  <cit>  and i am not aware of any study on the performance of different mr supertree variants. the aim of this paper is to suggest a general framework for the distance computations underlying the mr supertree methods, to present an implementation evaluating different distance variants, and to compare these by simulation.

RESULTS
algorithm
score computation
i present the computation of majority-rule  supertrees based on bifurcating and unrooted input- and supertrees. these trees contain only nodes with either one adjacent edge  or with three adjacent edges . if an inner node of a tree has more than three adjacent edges, the tree is multifurcating. note that bifurcating trees of n taxa have n -  <dig> inner edges and, in comparison, multifurcating trees of n taxa have fewer edges.

the robinson-foulds  distance is only defined for trees labeled with the same taxa. there are two main ways to compute the rf distance between a supertree and an input tree when the input tree may contain only a subset of the taxa  <cit> :

 <dig>  prune the supertree to the set of taxa in the input tree and compare the resulting tree to the input tree. this distance is called d -.

 <dig>  graft the remaining taxa in all possible ways onto the input tree, compute all distances, and take the minimal distance. there are different variants of grafting taxa onto input trees  <cit> . here, two methods are investigated:  d+ extends an input tree to all bifurcating trees by placing additional taxa onto edges only and by resolving multifurcations in the input trees;   extends an input tree to bifurcating and multifurcating trees by placing taxa onto edges or nodes, but does not resolve multifurcations present in the input tree.

example distance computations are shown in figure  <dig> 

the algorithm to compute the distances proceeds as follows. the matrix representation is a binary coding of the splits in the input- and supertree . next, a relationship matrix is computed from this matrix representation. for each  pair, the relationship matrix has three possible entries: subsplit; compatible but no subsplit; or incompatible. the relationship matrix of the example trees is given in table  <dig>  from this matrix, it is easy to see, whether the i-th input split is incompatible to at least one supertree split, then a binary variable ci is set to  <dig>  analogously, a binary variable bj is set to  <dig>  if the j-th supertree split is incompatible to any input split. for a bifurcating input tree  and supertree , with  and n taxa, respectively, the distance computations can then be simplified as follows :  

the sum over the distances of all input trees  is called the score of a supertree with the respective supertree method, i.e., the score of  with mr is , with mr it is , and with mrg it is . note that the score of mr also applies to multifurcating input trees .

here, d+ and  differ only by the way the taxa are placed because of the restriction to bifurcating input trees. when computing d+, taxa can only be placed onto edges, and when computing  taxa can be placed onto edges or nodes. note that mr does not generalize majority-rule consensus but rather another consensus method called majority-rule consensus  <cit> . here, i deal only with bifurcating input trees. it is easy to see that mr supertrees also generalize mr consensus in this case: for bifurcating input trees on the same taxon set, mr cannot place missing taxa or resolve multifurcations and thus mr directly minimizes the rf distance to the input trees. therefore the distinction between majority-rule consensus and majority-rule consensus is only important for non-bifurcating input trees.

although these respective consensus methods behave differently in the general case  <cit> , they are equivalent for bifurcating input trees, and i will treat all three methods, mr, mrg, and mr as supertree methods generalizing mr consensus for the remainder of the paper.

heuristic algorithm
a heuristic search is necessary to finds upertrees with the minimal score. the three scores and a heuristic to search for supertrees with the minimal score were implemented in the python program plumist . the program takes bifurcating trees as input in the case of mr and mrg, and arbitrary trees in the case of mr. the algorithm to compute a mr supertree proceeds in the following steps :

 <dig>  generation of the starting tree .

 <dig>  supertree computation by minimizing the respective score functions on bifurcating supertrees. a heuristic tree search using the rearrangement operations tdr  and nni  is carried out.

 <dig>  strict consensus tree computation of the best scoring supertrees. the strict consensus contains the splits present in all supertrees.

 <dig>  contracted consensus tree computation by deletion of splits that are contradicted by ≥ 50% of the input trees.

the resulting tree, i.e., the contracted consensus tree, is the mr supertree of the respective mr method. the last step contracts splits that violate the mr consensus property. since the mr consensus tree only contains splits occurring in > 50% of the trees, it cannot contain splits contradicting ≥ 50% of the input trees. note that this step would be redundant if the tree search was over multifurcating trees. i will also present results without the last step of the algorithm. the respective supertree methods are denoted . that means, the  supertree is the strict consensus tree. the  methods are not generalizations of the majority-rule consensus.

testing
several simulations were conducted to assess the performance of plumist. the methods were also compared to mrp using paup*  <cit>  with the following options: maximal  <dig> , <dig> trees in memory,  <dig> replications, and tbr branch swapping.

simulation with compatible input trees
this setting is similar to the setting used in  <cit> . however, i use different model trees generated under a yule model  <cit>  and subsequently prune a fraction of taxa randomly from ten input trees. if the pruning step deleted the same taxon from each input tree, the data set was discarded and a new data set was generated instead. thus each taxon had to be present in at least one input tree. i use the following parameter settings: the number of taxa is  <dig> or  <dig>  and the fraction of deleted taxa in each input tree is 25% or 50%.  <dig> replicates are performed for each of the four possible combinations.

an mr method is successful if a score of  <dig> is found and the resulting strict consensus tree contains only splits present in the true tree. note that this definition of success differs from the one in  <cit> . in their case, the method is successful only if the true tree was the only supertree. however, i think that a method should not return only one best scoring tree if some nodes cannot be resolved. multiple trees with a score of  <dig> are clearly an indication that some nodes cannot be resolved. in the simulations, there was no check for sufficient overlap between the input trees. different measures for this criterion exist . if there is not sufficient overlap, then the supertree cannot be expected to be reconstructed without ambiguity and this should be reflected by multiple supertrees.

with this criterion of success, all three mr methods and mrp were successful in all cases and under all parameter settings. furthermore, in each simulation, all three mr methods returned the same number of trees. paup* may return more trees since it also returns unresolved trees if they have the same parsimony length. however, in all cases, where paup* returned more trees, the strict consensus tree  was the same as for plumist. with a deletion probability of  <dig> , more than one optimal tree is found only three and two times with  <dig> and  <dig> taxa, respectively. in these cases the resulting supertree had one split missing. with a deletion probability of  <dig> , substantially more optimal trees were found which resulted in more multifurcating trees . on average, trees with n =  <dig> contain  <dig>  inner splits  and with n =  <dig>  there are  <dig>  inner splits .

simulation with incompatible input trees
i use the same model trees and input trees as in the previous section. however, the input trees were modified such that each internal edge undergoes a nearest-neighbor interchange  with probability pnni and stays the same with probability 1-pnni. the two alternative nnis are equally likely. the results for n =  <dig> and pnni of  <dig>  and  <dig> , respectively, are shown in figure  <dig> 

since mrp usually performed well in these simulations, its average distance is used as a baseline and i report to what amount the mr methods exceed it. the results for mr are generally comparable to the results for mrp. the difference in the mean distances is less than  <dig> % for  and less than  <dig> % for mr and all simulations with n =  <dig>  in contrast, for the most difficult simulation , the mean distances for mrg and  exceed the ones for mrp by 1% and  <dig> %, respectively, and the mean distances for mr and  exceed the mean distance for mrp by  <dig> % each. the methods show differences when only the number of missing splits is considered: the average number of missing splits for mr, , mrg, and  increases the average for mrp by less then  <dig> % each. in contrast, mr and  miss up to  <dig> % more of the true splits.

mr rarely finds more incorrect splits than mrp. mr and  do not find more incorrect splits on average for pnni =  <dig> , and  <dig> % more for pnni =  <dig> . in contrast, mrg and  find up to  <dig> % more incorrect splits, while mr and  find up to  <dig> % more incorrect splits.

sequence simulation
plumist was also incorporated into a supertree simulation pipeline  <cit> . two simulation settings were carried out: a small simulation with  <dig> taxa,  <dig> input trees, and on average  <dig> % of the taxa deleted and a large simulation with  <dig> taxa,  <dig> input trees, and on average  <dig> % of the taxa deleted. here i present the results for the simplest setting where the true gene trees are subtrees of the species tree and the simulation parameters are the same for all genes. input trees were generated by maximum likelihood reconstruction from simulated alignments.  <dig> simulated data sets were evaluated for the small simulation and  <dig> for the large simulation.

in contrast to the previous simulations, i conducted ten independent replicates for all mr supertree computations and combined trees with the best score over all runs into the final supertree. however, these results were very similar compared to taking one run only . thus, i conclude that the combined search heuristic of tdr and nni is a sufficient exploration of the tree space in these simulations and report and discuss the results for one run only.

the results for the small simulation  are similar to the results from the previous section: mr has a slightly higher distance than mrp:  <dig> % compared to  <dig> %; mrg and mr have higher distances of  <dig> % and 12%, respectively. the differences between the mr methods are more pronounced in the large simulation . here, mr  clearly outperforms mrg  and mr . in both simulations, the -versions of the mr methods resulted in the same trees.

furthermore, mr clearly improves another mrc implementation . in the large simulation, mr also outperforms mrp . both the percentage of missing splits  compared to  <dig> % with mrp) and of incorrect splits  improves.

there are two main reasons why different methods might reconstruct different trees: the scoring function and the search heuristic. to evaluate whether the difference in the scoring functions can explain the distance differences observed for the large simulation , the trees of all four methods, mrp, mr, mrg, and mr were scored with the other objective functions. if a method found multiple trees, all trees were scored and the minimum was taken. in > 90% of the cases the mr supertree had a smaller mr score than any other supertree, and this also holds for mrg. mrp and mr supertrees also usually have a smaller parsimony lengths and mr scores, respectively, than the mrg and mr trees . in 31% of the cases the parsimony lengths of the mrp and mr supertree were equal and in  <dig> % the mr scores of both methods were equal. it was never observed that another method found a lower parsimony or mr score than the respective supertree methods. however, for mr, at least one method resulted in a better mr score in  <dig> % of the cases. in  <dig> % of the cases, one mr supertree had a better mrg score than the mrg supertree.

to summarize, supertrees from different methods usually vary in their scores when evaluated with one objective function , mrg, or mr). the search heuristics implemented in paup* and plumist usually find better scores for the respective objective functions compared to the supertrees found with the other methods.

evaluation of real data sets
the program was also applied to real data sets and compared with mrp using paup*. first, two data sets also used in bansal et al.  <cit>  were analyzed . the seabirds data set  <cit>  contains rooted trees, thus an outgroup taxon was added to the trees. the mammals data set contains "semi-rooted" trees  <cit> , i.e., not all trees are rooted and an outgroup taxon is already present in some of the input trees. some trees were discarded from the mammal data set since they contain no inner splits and thus no information for mr supertrees or mrp. since both data sets contain some multifurcating input trees, only mr was evalutated.

the results are summarized in table  <dig>  the high number of optimal trees for the seabirds data set had already been reported  <cit> . this slows down the last part of the plumist algorithm, because equally scoring trees are explored by nni. the rf supertree method  <cit>  finds a score of  <dig>  but only  <dig> trees of the optimal score for this data set. this score also corresponds to the optimal mr score of  <dig>  but plumist finds  <dig> optimal trees. the runtime of rf supertrees is substantially lower than the runtime of plumist or paup* for two reasons. first, efficient heuristics use the root information, and second, the search does not continue to find multiple optimal trees.

* the search with the seabirds data set was aborted after about  <dig> day, and the optimal trees saved thus far were used. the optimal score of  <dig> was found after 1h <dig> 

the mammal data set has different optima depending on whether the mrp or the mr criterion is used . the full data set could not be analyzed with rf supertrees since not all trees are rooted. lastly, a microbial data set containing  <dig> taxa and  <dig> genes was analyzed  <cit> . bootstrap resampling of the gene trees and computing mrc using clann had resulted in a highly multifurcating majority-rule consensus tree  <cit> . the data set consists of bifurcating unrooted trees and i applied it to the three majority-rule supertree methods and to mrp. all supertrees are completely or nearly completely resolved . there are clear differences in the scores of the optimal trees when evaluated with other scoring functions . none of the trees matches a recent reference phylogeny completely . all of the nine groupings marked by different colors in figure  <dig> are present in the mr and in the mrp tree. both of the mr variants nest the betaproteobacteria inside the gammaproteobacteria. the branching order of these groupings also shows some deviations from the reference tree. first, most of the groupings with only one member in the data set are not correctly placed in any tree: aquifex aeolicus is never a sister of the epsilonproteobacteria, chlorobium tepidum is never a sister of the chlamydiae, the cyanobacterium synechocystis is never a sister of the actinobacteria, and deinococcus radiodurans is never basal. because of these problems, the information about groupings with one member only are ignored in the following points. second, the alpha-, beta- and gammaproteobacteria form a clade in all trees, but the epsilonproteobacteria are not their sister group. in the mr and mr tree, the epsilonproteobacteria form a clade with the chlamydiae and in the mrg tree, they form a clade with the chlamydiae and the tenericutes. in the mrp tree, they are basal to a clade of chlamydiae and the other proteobacteria. third, in both the mr and the mrp tree, the firmicutes do not cluster with the actinobacteria but with the tenericutes. only in the mrp tree, the clade of tenericutes, firmicutes and actinobacteria is basel to the other bacteria. in the mr tree, the clade of epsilonproteobacteria and chlamydiae is basal and in the mrg tree a clade of these two and the tenericutes is basal. the mr tree has more differences; even the archaea are not monophyletic.

scores matching the criterion used for optimization are marked in bold.

taken together there are serious problems in the data set, when groups have only one member. the fewest contradictions to the reference tree are present in the mrp tree followed by the mr tree. note that the deep branching of the bacterial phylogeny and the meaningfulness of a search for a tree like pattern in bacteria is hotly debated . here, the microbial data set is presented as an example how different methods resolve conflict among the input trees and not as a statement about the "true" bacterial phylogeny.

CONCLUSIONS
i present a new framework for the computation of the distances underlying majority-rule supertrees. the basis of this framework is the relationship matrix that stores the possible relationships between an input tree split and a supertree split: subsplit, compatibility, or incompatibility. the distance computations for mr, mrg, and mr are presented for bifurcating input- and supertrees. the distance computation of mr also applies to multifurcating input trees.

these distance computations are implemented in the python program plumist. the program was tested in a simulation study with different settings, in particular with compatible and incompatible input trees. with compatible input trees, all mr methods find a score of  <dig> and the same supertree as mrp and i thus conclude that all methods search the tree space successfully. with incompatible input trees, the results for mr are best, especially when both missing and incorrect splits are taken into account. mrg might miss less splits than mr, however it also finds more incorrect splits. reconstructing incorrect splits which give rise to false conclusions is obviously a more serious problem compared to the exclusion of some splits.

the rf distance to the true tree is often decreased by including splits contradicted by a majority of the input trees . this holds particularly when only a few taxa are deleted and the input trees are highly incongruent . while the  methods are not a generalization of mr consensus anymore, they may still be useful supertree methods. given that  is equivalent to mrc for bifurcating supertrees, plumist can then also be used as a heuristic for mrc.

in a more realistic simulation setting involving more input trees, trees of different sizes and different amounts of missing data and sequence simulation, mr performed very well. it outperformed the mrc implementation in clann and also mrp for the large data set. those differences can be traced back to the differences in the objective functions in paup* and plumist. the trees found with the respective objective function usually have better scores compared to the supertrees found with other methods.

this is also observed when analyzing biological data sets. of the three data sets analyzed, two contain multifurcating input trees, and therefore only mr was compared to mrp and to rf supertrees. for one data set with rooted input trees the score of mr was equivalent to the score to rf supertrees, but mr finds more optimal trees. the microbial data set contains bifurcating trees and was analyzed with all three majority-rule supertree methods. the mr tree recovered more relationships present in the reference tree compared to the mr variants.

in conclusion, the objective function of mr performs best among the mr supertree methods studied here. note that this objective function is also justified in the likelihood setting  <cit> . the mr supertree methods add taxa to the input trees and apply a consensus. at first view, this approach seems to be a natural method for dealing with the supertree problem. however, phylogenetic signal may be confounded by properties of the complex tree space  <cit> .

the problem of distance computations in the general case of multifurcating trees is still open but i suppose that formulas for these cases can be constructed based on the relationship matrix. the generalization of these computations to multifurcating supertrees is an important task. the proof for majority-rule consensus trees  <cit>  only holds for multifurcating consensus trees and was the motivation for majority-rule supertrees  <cit> . note that another variant of mr, mrs supertrees, can be computed via the span and the consensus step and thus also includes multifurcating trees  <cit> .

the current implementation of mr in plumist is similar to the rf supertree method. the approach of bansal et al.  <cit>  is, however, to find at least one tree of the optimal score and not to search for equal scoring trees. this latter property is needed for mr supertrees. this, in addition to the heuristics for rooted trees, makes the rf supertree method fast. in contrast, the advantage of mr is that input trees can be unrooted and that the area around the optimum is searched for equally scoring trees.

furthermore, plumist and the theory presented here comprises a general framework for mr supertrees. the relationships between the distance functions underlying these methods will hopefully help in understanding the similarities and differences of the methods. simulations show that mr usually performs very well, in particular in comparison with the established mrp method and is thus recommended for majority-rule supertree reconstruction.

