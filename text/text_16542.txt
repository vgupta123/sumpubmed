BACKGROUND
semantic generalization of metabolic network models  <cit>  is a theoretical method designed to aid users in understanding complex models. generalization identifies and groups into classes biochemically similar metabolites and functionally similar reactions in the network. while we say “similar” in the commonsense way that a biologist would consider that the entities belong to the same class, we mean precisely that the two concepts are related by is-a relations in the corresponding ontology. for example, in a generalized model we might group all hexoses, and thus group together most hexose transporters, for a study where the differences between these transporters is not pertinent. generalization is a kind of dimension reduction in complex models. it can also be used on several models simultaneously: a challenge in comparing models of related organisms, or in reconciling two models of the same organism, is that different curation standards may have been applied to the different models. generalization can bring disparate models to the same level of abstraction so that they can be compared. to explore the opportunities of model generalization, we implement it here as a practical tool that can be easily adopted and easily integrated into existing workflows.

the zooming user interface   <cit>  paradigm has proven to be a powerful tool for representation of data at different scales. it is being adopted for various domains of applications, including cartographic  <cit> , exploratory data visualization  <cit> , collaborative interfaces  <cit>  and biological data  <cit> . the challenge is how to use zui-based visualization for semantic generalization of metabolic networks.

metabolic network reconstruction and infrastructure
there is a conflict between the level of detail of metabolic models needed for computer simulation and the one that can be easily analyzed by a human curator: genome-scale metabolic models include thousands of reactions that may participate in organism’s metabolism , while human experts understand best small-sized networks, containing up to hundreds of nodes  <cit> .

metabolic network reconstruction can address various objectives. examples include creation of a model for a new organism from its genomic data and a reference model for a similar organism; creation of a larger-scale model by combining several models of different aspects of organism’s metabolism; improving an existing model by incorporating new data and new expertise. to accomplish these objectives the following tasks are used .figure  <dig> 
metabolic modeling workflow. the processes highlighted in yellow represent the model creation cycle: the draft model is created by model inference tools based on models for similar organism, pathway and reaction information extracted from model repositories and pathway and reaction databases; it is then iteratively improved during the process of curation and analysis. the resulting model can in its turn be added to model repositories. the processes highlighted in red show model usages: simulation and knowledge-oriented exploration. the processes highlighted in green describe comparison and combination of several models. as the model creation cycle, they also include the curation and analysis stage. the processes represented with the red arrows require human expert’s intervention, and thus need good visualization tools, ways of splitting models into modules and different levels of abstraction.



inference
the metabolic network reconstruction process is becoming more advanced, and there now exist various tools for semi-automatic model inference, e.g., pathwaytools  <cit> , the raven toolbox  <cit> , keggtranslator  <cit> , coreco  <cit> , subliminal  <cit>  .

starting from a model for a related organism or a collection of pathways, and genomic data, they produce a draft model for the target organism. existing metabolic models can be found in several resources, including biomodels database  <cit> , bigg  <cit> , jws online  <cit> . kegg  <cit>  and reactome  <cit>  provide an extensive collection of pathways.

models are stored and shared using established formats, such as sbml  <cit> , sbgn-ml  <cit> , cellml  <cit> . a model represented in these formats can be further enriched with the knowledge from biological databases and ontologies, e.g., chebi  <cit> , uniprot  <cit> , by annotating elements of the models  with appropriate identifiers. further in this manuscript we will consider metabolic models in sbml format.

although automatic model inference tools and genomic comparison methods are becoming steadily more sophisticated, they may still leave gaps in the model or add erroneous reactions. the intrinsic and extrinsic correctness of the model should be checked during the phases of analysis and curation.

curation and analysis
the inferred draft network needs to be refined during several iterations of analysis, curation and improvement  <cit> . the goal of the model analysis is to verify that the model does not contain inner contradictions and errors, e.g., that the network is connected; the transport reactions between compartments are well defined; the reactions are chemically balanced, etc. various model analysis tools, e.g, fastgapfill  <cit>  for gap filling, cellnetanalyser  <cit>  for for finding dead ends and blocked reactions, subliminal toolbox  <cit>  for reaction balancing, can facilitate model analysis; but human expert’s knowledge on organism’s metabolism still plays an important role.

curation is performed to ensure, first, that all of the knowledge that the experts deem pertinent is recorded in the model, and second, that the knowledge is recorded in a coherent way. the first depends on the requirements of the experts: a model for a cell factory used in an industrial process would need precise kinetics but may only require the reactions active in steady state that participate in the pathway that produces or consumes the target molecule, whereas a whole-genome model used to understand functional dependencies between genes would need to be as complete as possible but may not require reaction kinetics. the second concerns the internal consistency of what is recorded: metabolites and reactions must be annotated with ontology terms from appropriate knowledge bases,

reaction stoichiometry must be consistent, transport between compartments must be assured, and so on. curation and analysis of models is an iterative process, ideally repeated many times to refine the draft model until the needed level of quality is achieved.

the curation by a human expert requires a means of splitting genome-scale models into smaller units that can be checked and analyzed independently. at a higher level, appropriate levels of abstraction need to be found to allow experts to compare whole genome networks. good model visualization tools are also required.

simulation
the improved model, created during the iterations of curation and analysis, can be used for computer simulation to obtain numerical results . we do not exploit simulation in this manuscript.

exploration
the model can also be used for knowledge-oriented exploration to obtain new knowledge about the processes happening in the organisms’ metabolism, and the relationships between them, e.g., the “redundancy” of the model: discovery of similar reactions, and alternative pathways. means of splitting genome-scale models into smaller units, appropriate levels of abstraction and good model visualization tools are as important for model exploration task as they are for curation.

comparison and combination
model comparison and combination is another important task. possible scenarios include comparison to a different model of the same organism, with potential merging into a new, more complete, model; comparison of a model of a healthy organism to the one of a metabolism suffering from a disease to discover disease-specific metabolic adaptations. a genome-scale model can be created by combining several smaller models, describing different metabolic processes in a species  <cit> , where model comparison is needed to detect overlaps. such a model can be used as a draft model, and will need to undergo the analysis and curation phase. finally, a group of models for related species can be compared and combined to produce a concise representation of their common metabolism, to study the common properties of a group, as well as the organism-specific adaptations.

there exist various software facilitating model merging, e.g., semanticsbml  <cit> , orempdb  <cit> , pathcase-sb model composition tool  <cit> , but all of them require human expert’s intervention in cases when the models to be merged are incompatible or contradict to each other, as well as for better discovery of common parts. thereby, after the creation, the combined model becomes a draft and should in its turn undergo the analysis and curation cycle.

by combining these modeling tasks into workflows, as in figure  <dig>  one can accomplish the modeling objectives listed above.

at least three of the aforementioned tasks  require the intervention of a human expert, and thus require methods of dealing with the complexity of the models, e.g., by splitting them into smaller modules, by defining different levels of abstraction, and by visualization.

existing visualization approaches
there exist various modeling tools for metabolic networks that also support visualization. desktop tools include celldesigner  <cit> , vanted  <cit> , and cytoscape  <cit> . they produce reasonably good visualizations of small networks , but become cluttered at the genome-scale level, making the visualization unreadable.

web-based tools allowing for metabolic network visualization are also available. jws online  <cit> , for example, provides a mechanism for network visualization using a force-directed layout algorithm  <cit> . it also encounters the aforementioned issues and thus is not capable of providing a readable representation for large networks.

metdraw  <cit>  is an online tool for genome-scale metabolic model visualization, that makes use of decomposition of the model into compartments and pathways  and duplication of minor metabolites. metabolite duplication reduces clutter, but the huge number of reactions in the compartments of some models and missing subsystem annotations, makes the visualization consume too much space and do not allow a user to grasp the essential structure of the network.

due to the huge numbers of reactions and of metabolites participating in multiple reactions, we have an uncomfortable choice between either many edge crossings in an automatic visualization of a genome-scale network, or over-duplication of various metabolites making the essential parts of the network disconnected and the visualization too large to grasp. therefore an approach different to a simple graph layout algorithm is necessary. zuis, which can change the size and nature of the content displayed at different zoom levels, provide a pertinent alternative. two main types of magnification can be considered: geometric zooming, in which a region of the network is enlarged; and semantic zooming, in which additional properties are introduced with enlargement  <cit> .

semantic zooming was first introduced for biological data visualization in  <dig> with zomit  <cit> , a generic application programming interface for developing servers for zoomable navigation and visualization, and illustrated with an example of zoommap, a prototype browser for hugemap human genome database  <cit> . the work by jianlu and laidlaw  <cit>  evaluates geometric zooming with the google maps interface on five examples , and describes a positive feedback provided by both domain experts and less experienced users. another example of a google maps-based zui is x:map  <cit> , a genome annotation database that supports zoomable data browsing. it does not use semantic zooming, but allows for showing/hiding layers with additional information .

there exist several web-based tools that include a zoomable representation of metabolic networks. genome projector  <cit>  is a zoomable genome map with multiple views, including a pathway map. the pathway map is based on the roche biochemical pathway wall chart available from the expasy proteomics server  <cit> . the roche biochemical pathway wall chart has a large size and shows the collection of biochemically known molecules, enzymes and reactions. genome projector provides a geometric zooming on the map and overlay layers to highlight reactions present in the organism of interest. the list of organisms is fixed to  <dig> bacterial genomes. the full roche biochemical pathway map with the imposed layout is always shown, but only the reactions of interest  are highlighted.

navicell  <cit>  is a web environment that permits exploiting large maps of molecular interactions, including metabolic maps. it allows users to create their own maps, but does not provide a solution to the problem of huge network layout. the map creation is not fully automatic: the user must create a map in celldesigner, export it as an image and partly manually edit it in a graphical designer to produce intermediate views . in addition, navicell permits a user to split the map into submaps called modules.

another web-based tool, the cellular overview  <cit>  creates interactive diagrams for metabolic maps of organisms in the biocyc database  <cit> . it is pathway-oriented, and supports only geometric zooming. another drawback is that it does not show the compartmentalization.

the reactome pathway database  <cit>  browser provides a zommable visualization of manually curated pathways for  <dig> organisms. it has two semantic zoom levels: a general representation of organism’s pathways ; and submaps showing the details of each of the pathways, including compartmentalization. several levels of geometric zoom are available on both semantic zoom levels. reactome is pathway-oriented. inside each pathway the layout is imposed: reactions, metabolites, and compartments common to two organisms have the same layout in corresponding representations. on the other hand, the positions and sizes of compartments might differ between pathways of the same organism.

none of the zui tools for metabolic map representation described above, except for navicell, allow users to input their own models. moreover, as these examples show, not only geometric zoom but also model decomposition and semantic zoom are important for multi-level visualization of huge models. at the general level, the network needs to be decomposed into several meaningful modules . if after such a decomposition the model remains complicated , a further decomposition is required. we address these issues below by combining model generalization with a zui.

implementation
choosing zoom levels
we address the problem of large-scale metabolic model visualization by combining meaningful decomposition into modules with automatic multi-level abstraction. decomposition is performed in the following way: the network is first split into compartments; then the model generalization method is applied to each compartment to detect the generalized modules. thereby, the most appropriate is to adopt  <dig> levels of semantic zooming: the most abstract level represents compartmentalization of the network, and focuses on such questions as: are all the compartments present? are they well connected by transport reactions?

this level shows the compartments of the model, the transport reactions between them, and other reactions happening inside the cytoplasm. if the model does not describe compartments, this level will be missing.

the second level shows the modules inside each of the compartments. the questions that can be addressed at this level include: are all the reactions or more generally pathways desired by the curators present? are the input-output relations of functional modules consistent with what the expert expects from her knowledge? does the model show organism-specific adaptations, seen in the model as shortcuts or meanders?

we use our knowledge-based generalization method to identify the modules inside the compartments. it detects similar metabolites and reactions and clusters them together to represent them as generalized metabolites and reactions with the same structure . the generalized representation reveals the overall structure of the network while hiding the details.

if no similar metabolites/reactions can be detected by the generalization method , this level will be missing.

the most detailed level is intended for computer simulation and represents the inner structure of each of the modules with all the metabolites, reactions and their kinetics, stoichiometries and constraints.

our method places similar metabolites and reactions  next to each other, thus simplifying the analysis of their presence.


three zoom levels. the most general zoom level  shows the peroxisome and a generalized transport reaction. the intermediate zoom  shows the generalized processes inside the peroxisome compartment. the most detailed view  reveals the metabolites and reactions of the initial model.



model generalization
the metabolic model generalization method  <cit> , which we recall here, groups similar metabolites and reactions in the network based on its structure and the knowledge extracted from metabolite ontologies. a generalization is made specifically for a given model and is maximal with respect to the relations in the model; it respects semantic constraints such as reaction stoichiometry, connectivity, and transport between compartments; and it is performed through a heuristic method that is efficient in practice for genome-scale models. the reader is referred to  <cit>  for these technical details, which are beyond the scope of this article.

to make metabolite grouping semantically meaningful, an ontology describing hierarchical relationships between biochemical entities is used. each metabolite can be generalized up to one of its ancestors in the ontology. we use the chebi ontology, as it is the de facto standard for metabolite annotation in metabolic networks. if a chebi annotation for a metabolite is not present in the model, the method attempts to automatically deduce it by comparing metabolite’s name to chebi terms’ names and synonyms.

reactions that share the same generalized reactants and the same generalized products, are considered equivalent and are factored together into a generalized reaction.

the appropriate level of abstraction for metabolites and reactions is defined by the network itself as the most general one that satisfies two restrictions: stoichiometry preserving restriction: metabolites that participate in the same reaction cannot be grouped together;

metabolite diversity restriction: metabolites that do not participate in any pair of similar reactions are not grouped together .



overall, the generalization method is composed of three modules: aggressive reaction grouping based on the most general metabolite grouping , in order to generate reaction grouping candidates;

ungrouping of some metabolites and reactions to correct for violation of the stoichiometry preserving restriction;

ungrouping of some metabolites  to correct for violation of the metabolite diversity restriction.



for instance, -3-hydroxydecanoyl-coa, -3-hydroxylauroyl-coa and -3-hydroxytetradecanoyl-coa have a common ancestor hydroxy fatty acyl-coa in chebi. they can be grouped and generalized into hydroxy fatty acyl-coa, if in the network there is no reaction whose stoichiometry would be changed by such a generalization , and exist similar reactions that consume or produce them .

the method is available as a python library  <cit>  that operates on models in sbml  <cit>  format. it takes an sbml file of level  <dig> or  <dig>  and produces an sbml level  <dig> version  <dig> file with groups extension  <cit>  that contains the initial model plus groups for all non-trivial similar metabolite and reaction sets .figure  <dig> 
representation of a generalized model in sbml level  <dig> version  <dig> format with groups extension. the output sbml file contains the initial model , reactions, etc.) plus the listofgroups section that represents non-trivial quotient metabolite and reaction sets. in the figure, a group representing a quotient metabolite set of hydroxy fatty acyl-coas is shown; it includes -3-hydroxydecanoyl-coa , -3-hydroxylauroyl-coa , etc. each of those metabolites was previously declared in the listofspecies section.



the compression that can be achieved with the model generalization method depends on the model structure and on how well the model is annotated with the chebi ontology . additional file 1: table s <dig> shows the results of the application of the model generalization method to  <dig> metabolic models from path2model project  <cit> . all those models are genome-scale, the average number of reactions per model is  <dig>  <dig>  the average compression ratio r is  <dig> :   r=number of reactions in the initial modelnumber of reactions in the generalized model 

layers layout
to visualize a metabolic network we first represent it as a bipartite graph  <cit>  with two disjoint sets of nodes , and edges that connect the reactions to their substrate and product metabolites. to achieve such a representation, we implemented a converter from sbml to tlp format, that is used by the tulip graph visualization tool  <cit> . tlp format stores nodes and edges of the graph, and associates each node and edge to a list of named attributes: standard ones, such as shape, size, color; and user-defined ones, such as, in our case, element type , chebi identifier, group number, gene association, etc. the sbml-to-tlp converter is implemented in python, using libsbml library  <cit> , and is available as a part of mimoza software.

while layout of large graphs is widely studied  <cit> , the correspondence between the layouts of different semantic zoom levels remains a hard task. to compute the layout for different semantic zoom levels we combine two different approaches.

generalized model layout
in order to lay out the sub-networks corresponding to each of the compartments after the generalization, we use a combination of standard layout algorithms provided by tulip. we divide the compartment graph into connected components , using a method provided by tulip. we then apply an appropriate layout algorithm on each of them. the results are combined together using the connected component packing algorithm , which places the components close to each other while removing the overlaps between them.

regarding each of the connected component subgraphs as a directed graph , we detect their strongly connected components  using path-based depth-first search algorithm  <cit> . depending on the number of cycles in each strongly connected component subgraph, we choose one of the following layout algorithms, provided by tulip: circular layout for the strongly connected components with less than  <dig> cycles   <cit> , with o time and space complexity);

for components with more cycles we use force-directed layout   <cit> , that has the asymptotic worst-case running time of o with linear memory requirements) to reduce the number of edge intersections.



we then represent each strongly connected component as a meta-node  <cit> , apply a hierarchical layout   <cit>  algorithm  in time and of o in space) on the initial connected component subgraph , and then open the meta-nodes.

to avoid clutter we duplicate all the minor metabolites  before applying the layout algorithms, so that there is a copy of a minor metabolite for each reaction in which it is used. we then extract a subgraph, containing all but the minor metabolites, apply the combined layout on it, and then place the minor metabolites next to the reactions in which they participate.

generalization-based full model layout
the layout for the full model is based on the corresponding generalized model’s layout. to allow zooming into the generalized model, we keep the same coordinates as in the generalized model for the minor metabolites and the ungeneralized metabolites and reactions, and place similar metabolites or reactions next to each other inside the space used by the corresponding generalized metabolites or reactions in the generalized model.

an edge in the generalized view might expand into several edges in the full-model view, for example, if it is a generalized edge connecting a generalized metabolite to a generalized reaction. the positions of the edges after such an expansion might slightly differ from the corresponding generalized one.

node colors
a different color is assigned to each generalized metabolite/reaction; and is propagated to the corresponding metabolites/reactions of the full model. minor metabolites are colored grey. mimoza’s interface includes a checkbox that permits to hide/show minor metabolites.

node sizes
the size of the nodes depends on their nature: minor metabolites are smaller than the other ones; a radius of a generalized metabolite/reaction is calculated as a sum of radiuses of the elements that it groups; compartment sizes are defined by the layouts of the elements inside them, so that the compartments are represented as minimal rectangles containing all the corresponding elements. all major specific  metabolites are of the same size; as well as all specific reactions.

relative positions of compartments
metabolic models may include several compartments, nested into each other. for example, the peroxisome compartment is surrounded by its membrane, and contained in cytoplasm; the cytoplasm is part of the cell, which is surrounded by the cell envelope.

sbml allows to represent relative positions of the compartments in the model with an optional outside tag. however, it is not available in all sbml levels, nor is widely used.

to be able to visualize the compartments correctly even for the sbml models lacking this information, we infer their relative positions from the gene ontology   <cit> . we associate each compartment with a term from the cellular component branch of go by using annotations in the model if they are present, or matching the compartments’ names otherwise. we then use the part_of and is_a relationships between the terms in go to infer relative compartment positions. if no term for a compartment could be found, it is placed on the outer-most level.

sbml layout
to store the calculated layout of the model elements we use the layout extension  <cit>  of sbml. it allows to store the coordinates and sizes of the metabolites, reactions and compartments in the model. the tlp-to-sbml layout converter is implemented in python and is available as a part of mimoza software. if the sbml model submitted by the user contains the layout information, our software uses it for nodes’ positions. therefore, it is possible to visualize a model with mimoza, download the resulting sbml with layout annotations, edit it manually or with another software and then revisualize the updated version with mimoza.

zui
the zoomable interactive representation is achieved using leaflet  <cit> , a javascript library for interactive maps.

we export elements of the network graph  as map features in geojson format  <cit>  in order to store their coordinates and metadata . figure  <dig> shows an example of a reaction represented in geojson format. the tlp-to-geojson converter is implemented in python and is available as a part of mimoza software.figure  <dig> 
geojson representation of a reaction. an sbml reaction is stored as a geojson point feature, with its layout coordinates encoded in the geometry section. the identifiers, labels and annotations, as well as the information on the reactant and product metabolites are stored as properties. the “type” property value specifies that this geojson feature is a reaction.



the geojson objects are then added as layers to the map and rendered by leaflet into clickable elements at corresponding zoom levels. we follow sbgn process description language convention  <cit>  to choose the glyphs for model elements’ representation: metabolites are drawn as circles linked by edges to the reactions where they participate; reactions are represented as squares; compartments are drawn as rectangles. on the semantic zoom levels that show compartments, the corresponding transport reactions are connected to compartments. on the more detailed zoom levels, where the metabolites inside those compartments are shown, these reactions are connected to the corresponding metabolites. when a user clicks on a map element a pop-up appears  showing its name, identifier and additional information, e.g., gene associations and formulas for reactions. two overlays allow user to show or hide minor metabolites , and transport reactions.figure  <dig> 
a reaction pop-up.  an example of a pop-up that opens when a user clicks on a reaction: it contains the information on the reaction name, identifier, reactant and product metabolites and their stoichiometries, as well as gene associations.  gene names are hyperlinks redirecting to the ncbi gene database  <cit> .



embedding
after the visualization with mimoza is done, we provide a link for embedding the view in another web page.

download and distribution
one can use mimoza in three different ways: as a standalone application. all mimoza code is open-source and can be downloaded from the project web page  <cit>  and installed on a local server.

on the mimoza web server. mimoza web server  <cit>  lets one test visualization for smaller sbml models, with the possibility to download the result as a combine archive  <cit> , including the sbml file with groups  and layout  extensions, geojson files with the coordinates of model elements, and the html, css and javascript files that are needed to view the visualization in a browser.

as a galaxy  <cit>  project tool, so that generation of mimoza views can be included in a galaxy workflow. the galaxy wrapper for mimoza is available for download from the project web page.



pipeline
the overall mimoza pipeline contains  <dig> steps: the user submits a model in sbml format  via a web form.

if the model does not yet contain groups, it is generalized using the model generalization method, and the resulting sbml file  is made available to the user.

the sbml file with groups of similar metabolites and reactions is converted into a tulip graph: metabolite nodes are connected by edges to the nodes of the reactions in which they participate. the generalized metabolites and reactions form quotient nodes. the tulip graph is split into sub-graphs corresponding to different compartments, and layout algorithms are applied to them.

the compartment sub-graphs are exported in geojson format and rendered by the leaflet library into an interactive map that is represented to the user.

the result can either be browsed on the mimoza web page directly, or downloaded as a combine archive and embedded into a different website.



RESULTS
to illustrate the use of mimoza and compare it with other available zui tools, we visualized the yeast consensus genome-scale metabolic network model  <cit> . the result can be found at http://mimoza.bordeaux.inria.fr/yeast <dig>  mimoza automatically split the network into compartments and created a 3-level visualization for each of them.

we visualized the same model using metdraw with no manual adjustments. the resulting svg filea has only one zoom level with lots of clutter, that does not allow one to see the structure of the network.

cellular overview does not allow one to visualize a model provided by a user, but has a map of metabolism of saccharomyces cerevisiae.b it has a clear non-overlapping representation of various pathways present in the model, but does not show the compartmentalization. it is not automatic and is pathway-oriented, thus is not suitable for models having no pathway metadata. the zoom-in shows additional labels but all the metabolites and reactions are present at all the levels, making the elements at the most general level very small and hard to analyze.

navicell does not allow to visualize an sbml model automatically. genome projector only contains maps for bacterial genomes and does not permit user’s model input.

neither reactome allows users to visualize their own models, but it contains a pathway map for saccharomyces cerevisiae.c it has two semantic zoom levels: a visualization of a list of pathways present in the model, and submaps corresponding to each of them. the representation of each pathways is very clear, and has several geometric zoom levels. however, it is not always space-efficient as it contains gaps due to reactions present in other organisms but absent in s. cerevisiae. another particularity is that while the positions of elements common to different organisms are conserved within a pathway, their positions might differ between different pathways of the same organism. in mimoza, on the contrary, the positions of the reactions and metabolites are conserved between the compartments of the same organisms; but the layout of common processes  in different organisms’ visualizations might differ in the current implementation.
comparison of zuis for metabolic models


semantic
user’s
automatic

tool name
imposed layout
zoom
model
layout
modules


using generalization to compare two metabolic networks makes most sense if they have equivalent generalized nodes that can be placed in corresponding positions in the two layouts. mimoza currently handles this correspondence between zoom levels of the same network, but does not guarantee such correspondence when two networks are laid out independently. to meet this challenge, three strategies can be explored. the first is to use constrained layout  <cit> , to impose the positions of key features in one network on the corresponding features of the second network. the second is also to use constrained layout, with a catalog of standard positions for common motifs in generalized maps; for example, always lay out the generalized β-oxidation of fatty acids as a 4-step cycle, with standard positions for the generalized metabolites common for all the networks that incorporate β-oxidation. the third strategy, which we are in the process of testing, is to learn a common layout by generalizing the union of the two networks. the idea is to combine the reactions into one set, run the generalization procedure on the union to fix the positions of the common features, then to build each of the layouts using only its own set of nodes. each network layout only contains its own nodes, but the common nodes of the two networks will be in common positions.

finally, the api of the leaflet framework used for the interactive navigation can be used to integrate the maps with other web-based tools, such as annotation editors or simulation software.

mimoza is currently targeted to metabolic networks. while it can provide a geometric zooming visualization of a generic sbml model , the knowledge-based generalization, and therefore semantic zooming, depends on the chebi ontology and is intended for metabolic models. a domain-specific adaptation of the generalization method  might allow mimoza to assist in modeling of other kinds of biological networks.

CONCLUSIONS
we have implemented mimoza, a novel software tool for automatically constructing zooming user interfaces for genome-scale metabolic models. by exploiting model generalization, mimoza reduces the dimension of the model’s network at outer zoom levels, and intelligently co-localizes equivalent reactions and molecular species at inner zoom levels. consequently the biological user may efficiently navigate the high-level structure of the model; whether the goal is to understand the model or to search for errors, mimoza exposes the important features at out zoom levels and and hides the specific details in the inner ones. we provide an efficient, useful tool that is easy to adopt and, through the use of standards such as sbml and the chebi ontology, is easy to integrate into existing expert-centered modeling pipelines. by carefully combining model generalization with adaptive layout and open-source cartographic software, the mimoza web server requires just a browser with javascript. mimoza is open source and can also be installed locally, as described on the web page, and depends on libsbml, tulip, and python.

availability and requirements
project name: mimozaproject home page:http://mimoza.bordeaux.inria.froperating system: platform independentprogramming language: python, javascriptother requirements: javascript should be enabled in the web browser. the standalone mimoza application requires python  <dig> ; libsbml-experimental ≥  <dig>  for python with groups and layout extensions; leaflet  <dig> .3; jquery  <dig> . <dig> and jquery-ui  <dig> .4; tulip ≥  <dig>  for python; and model generalization libraryd.license: cecill any restrictions to use by non-academics: no restrictions

endnotes
a metdraw – http://www.metdraw.com/metdraw/bc7df60221ba314c383b1bf6e7dad4c3056f92bb.

b cellular overview – http://biocyc.org/overviewsweb/celov.shtml.

c reactome – http://www.reactome.org/pathwaybrowser/\#species=68322\&diagram= <dig> 

d model generalization – http://metamogen.gforge.inria.fr.

additional file
additional file  <dig> 
table s <dig>  performance of the model generalization method.



competing interests

the authors declare that they have no competing interests.

authors’ contributions

az and djs conceived the study, az developed the software, az and djs wrote the manuscript. all authors read and approved the final manuscript.

