BACKGROUND
the cdao-store is a novel portal aimed at facilitating the storage and retrieval of phylogenetic data. the novelty of cdao-store lies in the use of a semantic-based approach to the storage and querying of data, building on established ontologies for the semantic annotation of data. this approach enables scientists to overcome the restrictions imposed by the use of specific data formats-thus, facilitating inter-operation among phylogenetic analysis applications-and makes it possible to design and implement more meaningful domain-specific queries.

phylogenetic trees have gained a central role in modern biology. trees provide a systematic structure to organize evolutionary knowledge about diversity of life. trees have become fundamental tools for building new knowledge, thanks to their explanatory and comparative-based predictive capabilities. evolutionary relationships provide clues about processes underlying biodiversity and enable predictive inferences about future changes in biodiversity . phylogenies are used with increasing frequency in several fields, e.g., comparative genomics  <cit> , meta-genomics  <cit> , and community ecology  <cit> .

below we highlight some of the core technologies that have facilitated the use of phyloinformatics solutions in various areas of biology and some of the issues faced.

phylogenetic repositories: the development of new knowledge relies on the ability to share and reuse data and results. to meet this goal, several large repositories of phylogenetic data have been developed and deployed. these repositories accepts submissions of diverse types of phylogenetic data, including different types of trees  along with the data  used to generate them. repositories like tree-base  <cit>  store phylogenetic data along with metadata describing publications and published analyses, and offer querying capabilities to retrieve data from different studies, for comparison, combination, and reuse. treebase accepts submissions of phylogenies and associated data in nexus format

another related project is the tree of life web project  <cit> , a collaborative web portal that provides a hierarchical organization, in the form of an evolutionary tree of life, to web pages providing information about characteristics and biodiversity of different groups of organisms.

data inter-operation: data reuse however is not practically possible without data inter-operation. data tied to a particular tool, or worse, a particular version of a given tool, provides limited value to users of a repository. ideally, repositories should supply their clients with results in a maximally compatible format that does not limit the client to the use of a particular piece of software. this issue is of particular interest to the evolutionary biology community. several competing formats, e.g., nexus  <cit> , nexml <cit> , phyloxml <cit> , phylip  <cit> , exist for representing phylogenies and the underlying molecular and morphological character data. additionally, there are no commonly accepted methods for applying annotations to branches in a phylogeny, or for describing evolutionary models. also, other meta-data, such as provenance, are not commonly handled.

observe that the use of automated techniques for addressing the data inter-operation problem requires the availability of the semantics of data, i.e., a formally specified description of the meaning of data. the semantics of data allows software tools to correctly map data items encoded in different formats.

semantics, ontologies, triple-stores: in order to gain full effectiveness, data inter-operability cannot be restricted to exchange of data, but it needs to rely on the exchange of semantics. while data formats capture the syntax of data , explicit semantics is necessary  for interpretation, repurposing and application of phylogenetic data. the presence of an explicit representation of the semantics of data enables the develoment of of provably correct tools to perform data exchange between different data formats, and the integration of data arising from diverse sources. in recent years, semantic descriptions in the biomedical domains have predominantly built on the use of domain-specific ontologies  <cit> -enabling the formalization of domain knowledge in terms of domain concepts and relations among concepts.

a domain ontology for the field of phylogenetic analysis, called the comparative data analysis on-tology , has been recently introduced  <cit> .

a number of technologies and standards have been introduced to enable the representation and use of ontologies. the web ontology language   <cit>  is a formal language that has been developed for publishing and sharing ontologies on the web. owl enables the description of an ontology in terms of a collection of classes of entities , organized in a taxonomy, and a collection of relations among entities . properties are binary relations among two concepts. for example, the cdao ontology contains, among the others, two concepts used in the description of phylogenies, called edge-representing one edge of a phylogeny-and edgelength-representing the length of an edge; these two concepts are related by a property called has_annotation, which associates an element of edgelength to each element of edge.

the instances of an ontology-i.e., the concrete objects belonging to the classes described in the ontology and the specific connections created by the properties-are typically described in the form of triples-depicting two entities being linked by a property. for example, the triple  describes the fact that the entity named node_arabidopsis_thaliana_aad <dig> belongs to the class node; similarly, the triple  describes the fact that the entity node node_arabidopsis_thaliana_aad <dig> is associated to to the edge named edge_aad31_ <dig> in the phylogeny, and it is in the descendant position of the edge.

the world wide web consortium has formalized an xml format for the description of triples, called the resource description framework   <cit> ; being an xml format, rdf provides an unambiguous format for storing and exchanging triples. we refer to a repository of ontology instances, expressed as triples, as a triple-store.

domain-specific querying: domain-specific querying is also an important feature of a phylogenetic repository -i.e., the ability of the repository to provide direct access to queries that are specific to a given application domain, without requiring the user to encode them using a domain-independent query language . this level of query support helps investigators to easily pose questions to the repository that might be otherwise difficult or impossible to express in a general purpose query language. several approaches have been proposed to support domain-specific querying in the domain of phylogenetic analysis. treebase provides six predefined types of searches of their repository- i.e., search by taxon, by author, by citation, by study accession number, by matrix accession number, and by structure. these searches are mostly based on the syntactic content of the data, and not dissimilar from traditional relational database queries.

the study described in  <cit>  identifies six main areas of studies that involve the use of phylogenetic data-general/casual uses, visualization studies, database studies, super-tree algorithmic studies, simulation and contests studies, and comparative genomic studies. a set of standard query types necessary to support the needs of these six classes of investigations have been identified and discussed by the authors of  <cit> .

cdao
the comparative data analysis ontology  http://www.evolutionaryontology.org <cit>  provides a formal ontology for describing phylogenies and their associated character state matrices. cdao has been developed as part of the evolutionary informatics  https://www.nescent.org/wg_evoinfo/main_page working group, sponsored by the national evolutionary synthesis center.

cdao provides the semantic component of a data representation and inter-operation stack for phyloinformatics, known as the evoio stack  <cit> -along with a data exchange format, called nexml <cit> , and a phyloinformatics web services api, known as phylows  <cit> . cdao forms the base of this stack, defining the semantics for the data represented in nexml files, or otherwise supplied by services implementing this set of standards. figure  <dig> illustrates the evoio stack.

cdao is implemented as a formal ontology encoded in owl. it provides a general framework for talking about the relationships between taxa, characters, states, their matrices, and associated phylogenies. the ontology is organized around five central concepts : otus, characters, character states, phylogenetic trees, and transitions. the key concepts and their mutual relationships within cdao are illustrated in figure  <dig>  a phylogenetic analysis starts with the identification of a collection of operational taxonomic units , representing the entities being described . each otu is described, in the analysis, by a collection of properties, typically referred to as characters. in phylogenetic analysis, it is common to collect the characters and associated character states in a matrix, the character state matrix, where the rows correspond to the different otus and the columns correspond to the characters.

in evolutionary biology, phylogenetic trees and networks are used to represent paths of descent-with-modification, capturing the evolutionary process underlying the considered otus. since evolution moves forward in time, the branches of a tree are typically directed. the terminal nodes are anchored in the present, as they represent observations or measurements made on existing organisms. the internal nodes represent common ancestors, with the deepest node as the root node of the tree. the restriction that each node has at most one immediate ancestor reflects the assumption that evolutionary lineages, once separated, do not fuse . branching is considered to be a binary process of splitting by speciation . even with terminal nodes anchored in the present, it may be impossible to infer the direction of each internal branch, in which case the tree may be referred to as an unrooted tree or as a network. even the restriction of single parentage may be occasionally abandoned .

as a general framework, cdao supplies general classes and relations between those classes that can be further specialized to meet the needs of a specific application-beak length might be introduced as a new concept that specializes cdao's standard character type.

nexml

nexml <cit>  is a file format for exchanging data containing character state data matrices and phylogenies. its syntax is defined in terms of an xml schema  and the semantics of its elements are defined in terms of cdao classes-thus allowing an easy mapping of data files to cdao instances. this property is also important to enable the effective use of nexml as a data exchange medium, since its semantics can be agreed upon by both the provider and recipient of a dataset.

a typical nexml specification  <cit>  is embedded within the element <nexml>, and contains the description of phylogenies and character data matrices. the elements <otus> are analogous to the taxa block in nexus, and they are used to describe the identifiers and  labels of all the relevant taxonomic units employed in the investigation. the elements <characters> play a role analogous to the characters block in nexus, allowing the description of the character state matrices. nexml allows the use of different formats, such as molecular sequences, categorical data, or continuous data. a difference from nexus is that more information per character can be specified; depefinding on the format, the matrices can be formed either by <matrix><row> elements or by <states><state> elements. the <tree> element is used to describe a phylogenetic tree, in a manner similar to graphml  <cit> -i.e., by describing each tree as a sequence of <node> and <edge> elements. the <node> elements are used to describe the individual nodes of the tree, while the <edge> elements provide an explicit description of the connections among nodes. the edges of the tree are directed-i.e., each edge has a start point and an end point. a final element that deserves mention is <dict>: this element allows one to set up general attribute/value pairs, that can be attached to most elements of a nexml document, allowing the introduction of arbitrary meta-data for different elements of the data file.

an alternative xml format for the encoding of phylogenetic datasets is phyloxml <cit> ; this format allows the description of phylogenies  described through the recursive use of the element clade. the format supports the description of various specialized properties, such as evolutionary events , and taxonomic information. although cdao-store supports predominantly nexml, it includes a phyloxml converter, which allows exporting cdao-store data into phyloxml files, enabling the use of some of the tools already developed to process phyloxml data .

phlyows
phylows  is a standard for exposing phylogenetic data as web services. web services are tools that can perform certain tasks, and whose execution can be programmatically requested using a standard internet exchange protocol   <cit> . phlyows specifically uses restful style web services, and implements a few well-known operations to relay data  <cit> . this works in a similar way as get or post for http  <cit> . all phlyows uris begin with/phylows/as the standard delimiter. then, based on the phylogenetic information being queried, a data structure will be given, such as taxon, tree, or study. this is followed by any specific identifiers needed for the query. for example, http://purl.org/phylo/treebase/phylows/tree/tb2:tr3099?format=rdf is a way to access in-formation from treebase using phylows: when this url is accessed, it returns the tree with the treebase id equal to 'tr3099' in rdf format  <cit> . a specification for phylows can be found in  <cit> .

cdao-store implementation
cdao-store builds on the evoio technology stack to provide a semantic-based repository of phylogenetic data, accessible through semantic web services and a domain-specific query language. as such, cdao-store primarily builds on the use of cdao for the internal semantic-based representation of data and for the purpose of data querying, on the primary use of nexml for data exchange, and on the use of phylows for the programmatic use of the store. nevertheless, as highlighted next, cdao-store goes well beyond the evoio stack, supporting other data formats and querying mechanisms. the cdao-store platform is open-source and is available as a sourceforge project, at http://sourceforge.net/projects/cdaotools.

the implementation of cdao-store is organized in three interconnected modules, as illustrated in figure 4: a data importer module, a repository module, and an exporter module.

data importer module
the purpose of the data importer module is to import phylogenies and their associated data into the repository, automatically extracting their representations in terms of instances of the cdao ontology. the data importer module can process phylogenetic data encoded in several commonly used data formats. the current implementation provides sub-modules that can extract cdao instances from files encoded in nexus  <cit> , nexml <cit> , phylip  <cit> , and mega  <cit> .

the various parsing sub-modules have been developed either from scratch, using combinations of c++ and xslt style sheets, or using prebuilt libraries, such as the nexus class library . the data importer module is also designed to enable the processing of the content of the treebase http://www.treebase.org repository-a popular repository of user-submitted phylogenies and associated generating data-importing the corresponding cdao instances into the cdao-store.

after reading each input file, the data importer module maps data from these files to an object model that mirrors cdao classes, producing rdf/xml triples that can be deposited in the cdao-store repository . the data importer module is also capable of mapping the object model back into any of the acceptable input data formats; this enables the use of the cdao-store system for conversion among data formats.

repository module
the repository module provides two core functionalities: storage and querying.

storage
the repository module maintains a triplestore, used to store all the cdao instances created, either through submitted user files or through processing of treebase content. the triple-store is implemented in python and uses the rdflib http://www.rdflib.net module to store the rdf serializations of cdao instances in a relational database . the repository modules supports the execution of queries against the triple-store.

rdflib provides an excellent balance between flexibility, simplicity, and power for cdao-store. it is flexible, allowing nearly seamless loading of rdf data from a variety of sources through a uniform interface. it also has a very flexible query interface, providing not only a sparql query processor, but also the ability to perform more complex operations, e.g., iteration over a graph. the sparql interface is also particularly attractive, as it offers very flexible output formatting features, allowing us to customize the output format of each query by simply changing a format string, rather than having to write more extensive output processors. this is particularly important, considering our intention of offering different output formats .

python is also an attractive choice as host language, because of its expressiveness. python allows for a very terse implementation-for example, the entire query processing script is far less than  <dig> lines. this eased the implementation, helping us in moving quickly from concept to a working model, and allowing us to focus our efforts on the particular questions we sought to answer and the features we sought to support. this choice also kept us from getting locked into a particular language or platform for the entire project. in our system, only the query processing is written in python. the user-visible web components are largely php, and a good deal of the phylows interface is coordinated by shell or perl scripts.

with regard to simplicity, rdflib is a nearly zero-configuration system, requiring only the type of database to connect to and some connection information. it automatically manages the creation of tables, indices, and other entities, making it possible to treat the entire store as a persistent graph with almost no custom code. in spite of its simplicity, it also proved to be robust, allowing us to import the entire treebase, encoded in the form of cdao triples, without any difficulty and with good performance.

in addition to rdflib, we considered alternative platforms for the implementation-in particular, we explored the use of owl-api  <cit> , jena  <cit> , and allegrograph  <cit> . the use of owl-api and jena would have required a great deal more effort to manage the configurations and a more extensive implementation to support our queries. the load startup/load time for the system would have made writing a custom server a necessity in order to handle requests in a timely fashion. an experimental comparison with owl-api and jena represents future work, that we intend to perform as soon as we have accumulated sufficient user queries from users of the cdao-store.

allegrograph provides a variety of attractive features, including built-in support for the prolog programming language, but in terms of configuration and licensing was a less attractive option. additionally, while it offers excellent performance, it demonstrated a number of bugs and configuration problems during some preliminary experiments conducted at the tdwg  <dig> meeting.

in our first implementation, we did not consider the use of rdf processors that employ denormalized schemas ; while denormalized schemas provide efficiency, they also appear to increase space consumption, which was one of our concerns-as cdao may lead to very refined and detailed representations  and to a large number of instances. rdflib uses a normalized schema, maintaining tables and views for all objects, associative-box, identifiers, literal-properties, literals, namespace binding s, relations, "relation or associative box," and "uri or literal object." this break-down helps in reducing redundant information and space, and facilitates the use of hashing to reduce column sizes. nevertheless, the literature has recently reported significant performance differences in favor of denormalized approaches , thus suggesting the need to explore in the future one of these alternative platforms  <cit> ; observe that a platform like rap can be introduced in cdao-store with ease.

querying
the querying capabilities of the repository module can be accessed in two ways-through a web portal and through a programmatic interface. the portal is accessible through a standard web browser and provides fillable fields. the programmatic interface is accessible through the previously mentioned support for the phylows web service interface. both interfaces currently support the set of queries discussed next.

this set of queries is primarily drawn from the description given by nakhleh et al.  <cit> , that provides a characterization of a relevant set of domain-specific queries that are desirable for any repository of phylogenetic structures. the repository module supports all the types of queries identified in  <cit>  . this is a diverse set of queries, ranging from queries that require a simple database search, to queries that involve complex reasoning over tree structures. the domain-specific types of queries are:

 <dig>  determine all the phylogenies containing a given set of taxa-e.g., locate all trees containing the taxonomic units named ilex anomala and ilex glabra;

 <dig>  determine the relationships among a set of taxa in all phylogenies ;

 <dig>  determine the minimum spanning tree/clade for a given set of taxa-e.g., locate the minimum spanning clade in the tree tree <dig> for the taxonomic units ilex anomala and ilex glabra;

 <dig>  determine all phylogenies constructed using a given inference method-e.g., locate all the phylogenies constructed using the program paup*;

 <dig>  determine all the phylogenies containing a set number of taxa-e.g., locate all the phylogenies with at most  <dig> clades;

 <dig>  determine all the phylogenies produced by a given tool or author-e.g., locate all the phylogenies published by w. piel;

 <dig>  determine all phylogenies satisfying a given property-e.g., locate all the phylogenies that have diameter equal to 5;

 <dig>  given a phylogeny p , a measure m, and a quantity q, determine all the phylogenies that are at distance q from p according to the measure m ;

 <dig>  given a model of evolution, determine all the phylogenies that have been constructed using such model of evolution-e.g., identify all the phylogenies that have been constructed using jukes-cantor model for estimating distance;

 <dig>  given a measure, return statistics about the measure in the phylogenies present in the repository-e.g., determine the distribution of tree lengths;

 <dig>  given a type of data and a set of taxa, determine all the phylogenies on the set of taxa that have been constructed using the specified type of data-e.g., determine all phylogenies built using dna sequences.

to address these different types of queries, the query system is divided into two primary modules:

• the rdflib has been linked to a sparql  <cit>  engine and an owl reasoner, pellet http://pellet.owldl.com/, enabling the execution of standard sparql queries to access the data in the triple-store. this allows the implementation of queries that require simply searching the content of the repository for triples containing a particular data item.

• other types of queries are beyond the expressive power of the standard sparql query language-due to sparql's inability to query hierarchical structures of unknown depth, to query transitive relations , the lack of support for some aggregate functions , and the relatively limited support provided by reasoners like pellet in handling certain features of owl ontologies .

in order to support queries requiring these features, the repository module has the capability of mapping cdao tree and network structures, stored in the triple-store, to corresponding representations of trees and networks in prolog  <cit> , a popular rule-based programming language for knowledge representation and reasoning. the choice of prolog is suggested by its natural ability to represent and manipulate tree and graph structures, encoded as logical terms, and the ability to elegantly and efficiently address tasks involving transitive closures and aggregations. thus, the remaining types of queries are implemented using prolog rules.

the table illustrates the implementation method employed for each one of the various classes of queries discussed in  <cit> .

exporter module
the goal of the exporter module is to provide interactions with the user. the module provides three main interaction mechanisms: a web portal, a web service interface, and a set of visualization tools.

the web portal offers an html interface to interact with the repository. the interface allows the on-line submission of queries, the ability to browse the content of the triple-store, and forms to submit new data sets to the triple-store. the web portal allows also one to make annotations about a dataset, a general project space, a set of data sets of interest. these annotations can be from cdao, dublin-core, or from a user-supplied source of annotation types .

the web service interface is an implementation of the phylows protocol; this is realized by a collection of scripts, capable of generating the necessary sparql/prolog queries to be submitted to the repository module.

the visual interface, called cdao-explorer, provides two graphical visualization tools; one tool is used to provide a graphical representation of phylogenetic trees and networks, while the second one pro-vides graphical representations of character data matrices. the tools have been implemented using java and the prefuse visualization toolkit prefuse.org. work is in progress to link existing visualization tools  to cdao-store.

the results of the queries can be retrieved as files in one of several data formats; currently, the repository allows retrieval of data in rdf/xml format , nexml, nexus, phyloxml, newick , graphml , and prolog.

RESULTS
web-tools
the web tools provide a variety of querying and data access features for both human and programmatic access to data. it allows one to retrieve data sets by author name, tree identifier, taxon, algorithm, or method. it also supports computing the minimum spanning clade or the nearest common ancestor of a set of taxa. it also allows one to list trees conforming to certain measures. for example, finding all trees larger or smaller than a given size.

our phylows implementation is the basis for all the data access features of cdao-store. the other web components, and the cdao-explorer tool use it to access data. uri's are divided into three conceptual parts. the address of the store site, and path prefix http://www.cs.nmsu.edu/~cdaostore/cgi-bin/phylows, a query type , and a parameters list. the specific parameters depend on the query type. for example, the msc  and the nca  query types expect a list of taxon id's separated by '/'. the listing query takes optional limit and offset parameters to paginate results. the size query takes a direction , a criteria  and a size .

performance
cdao-store, even though in its first release, has already reached a stable and reliable state. the store currently contains  <dig>   <dig>   <dig> triples, contributed by a porting of treebase and by additional user submissions. the performance of the cdao-store on the various queries is dependent on the specific type and parameters of the query, but we have rarely encountered instances that would lead to response times higher than  <dig> seconds-and, for most of the queries provided to us by our alpha-testers, we observed average response times between  <dig> and  <dig> seconds. table  <dig> reports some performance results for some of such queries.

the table illustrates the times, in seconds, for a collection of sample queries provided to the developers by a group of beta-testers.

cdao-explorer
cdao-explorer has achieved a basic level of functionality. it provides search and visualization for both trees and matrices and a set of additional features not currently available in other related tools.

annotation is an important part of cdao-explorer. it allows users to attach arbitrary an-notations to data items, as well as collections of resources. these annotations are expressed as instances of concepts drawn from cdao or from any user-specified ontology. cdao-explorer also allows users to load or save custom data not in the repository and to export pictures of visualizations of trees and matrices.

the cdao-explorer platform is flexible, and in the long term it is expected to be an open platform for the integration of other visualization tools. for example, nexplorer  <dig>  which is capable of processing cdao data, will be integrated with cdao-store. we have also demonstrated an integration of phylobox  <cit>  as an alternative visualization interface, made possible by the ability to export data in phyloxml format.

tree viewer
tree viewer is the graphical application used to display trees. it is built using the prefuse visualization framework. data from the cdao triple-store  is converted into the graphml format  <cit>  and then supplied to the visualization application. figure  <dig> shows a snapshot of the tree visualization.

the tree viewer provides several interesting features. the tool provides two different layouts for the tree to be displayed. by default, the tree viewer uses a force layout, which allows the nodes of the tree to "bounce" around as if pulled by strings until an equilibrium is reached. the second layout is called node layout, which resembles a more standard parent/child structured tree, going from left to right.

another feature provided by the tree viewer is the ability to search the tree using the node and edge label names, highlighting all that successful matches found. for instance, a tree may have many nodes that have as part of its name #ilex_. when this search is performed, all nodes with the label containing that will be highlighted. labels for nodes are generally the taxa name for the corresponding taxonomic unit or, if it is an unknown internal node, will have the convention of being named #nodex where x is some number. edge labels are similar in that they are the labels of the two nodes combined as 'source_destination'.

it is also possible to view more specific details on a specific node or edge. currently, the only detailed information available is the label. finally, the tree viewer provides the option to save the tree visualization as a jpeg or png file.

matrix viewer
we have developed a custom framework for visualizing matrices. it assigns color codes to character states, allowing one to graphically appraise large matrices and quickly discover patterns in the source data. it allows users to scale matrices, select regions of a matrix to see in greater detail, and attach annotations to particular cells of a matrix. figure  <dig> shows a snapshot of the matrix viewer.

related work
treebase
treebase  <cit>  is a relational database that stores phylogenies , the associated alignments and character data used to derive the phylogenies, and several types of meta-data . the content of treebase is community contributed and it is restricted to results of published studies. treebase occupies a unique role, in providing access to both description of trees as well as corresponding generating data matrices. the spirit of treebase is to enable retrieval of trees and data for study comparison, combination, and for reuse. the relational nature of the underlying repository enables a set of standard queries for accessing the repository. the original treebase provided six forms of access to the repository ; the newest release has expanded the submission formats , added support for the phylows api, and connection to the phylowidget visualization tool.

nexplorer
nexplorer  <cit>  is a tool developed to provide combined visualization of phylogenetic trees and associated character data matrices. the input to the nexplorer is in nexus format; this could be either provided as a user-provided file or extracted via keyword search from a set of pre-processed data sets . the strength of nexplorer is the ability to combine the visualization of phylogenies and of the associated data matrices. nexplorer offers the ability to explore both leaves and internal nodes, and customize the visualization focusing on user-selected subsets of data. differently from cdao-store, nexplorer does not provide a direct connection to a repository and does not support data querying.

the latest release of nexplorer  is currently under completion and it will be integrated with cdao-store, being capable of processing data encoded using cdao.

phylowidget
phylowidget  <cit>  is another application to visualize phylogenetic trees; the input is provided in newick, nhx and nexus formats. the user interface enables a large level of interactivity and customization, including the ability to edit node labels and branch lengths, select and copy subtrees, and re-root the tree w.r.t. a selected node. the rendering engine can manipulate trees with thousands of nodes, producing effective representations .

discussion
the cdao-store poses itself as the first semantically aware data repository for phylogenetic investigations. its connection with treebase and the ability to import arbitrary files from several different formats allows the repository to dynamically grow through community-contributed submissions; furthermore, the ability to provide additional annotations, driven by a formal ontology, allows community curation of data and facilitates the reuse of phylogenetic trees in different investigations. the cdao-store provides the ability to integrate data from different experiments, through the use of a domain-specific query interface. in addition, the ability to convert to and from different data formats, using a intermediate semantic-based representation, guarantees semantically correct data format inter-conversion services.

through these features, cdao-store poses itself as a unique tool for data storage, reuse and inter-operation, overcoming limitations imposed by data formats and facilitating the development of workflows and automated protocol implementations. the cdao-store has been validated in preliminary community-driven experimentations ; several inter-operability demonstration projects are in progress, e.g., demonstrating inter-operation between treebase and several visualization environments.

CONCLUSIONS
current state
the cdao-store tool set provides a robust foundation for a semantically aware, phylogeny resource. the query and translation services are well developed and based on an easily extensible framework to easily address additional development of features. the cdao-explorer portion of the store has achieved a good base-line functionality and provides a set of useful features to advance the current state of visualization of large data sets in this field. also it provides a good proof-of-concept for integrating semantic information and other meta-data in a seam-less and natural way.

future directions
several features are currently being implemented to extend the capabilities and applicability of cdao-store. for the web we plan to allow users to submit and execute their own sparql queries to our triple-store, enabling a wider range of queries than those supported by the current interface . cdao-explorer will include tighter integration between the tree and matrix visualizations, and also phase in support for describing processes and work flows, as part of its existing support for annotating sets of tree and matrix files.

we are also exploring mechanisms to provide a more direct integration between cdao-store and treebase, enabling regular updates of cdao-store based on submissions to treebase and enabling treebase users to locate and access cdao-store.

finally, as the size of the repository increases, we intend to investigate whether rdflib is an adequate triple-store system for the needs of cdao-store, or whether alternative platforms  would provide greater stability and performance.

availability and requirements
project name: cdao-store

project home page: http://www.cs.nmsu.edu/~ cdaostore/

operating system: linux, macos x, unix

programming language: c++, java, perl, php, python, prolog

other requirements:

license: gpl

any restriction to use by non-academics:

authors' contributions
bc focused on development of the web and database tools, and the integration of the tree and matrix and tree visualizers into the cdao-explorer application.

bw developed the tree viewer portion of the cdao-explorer tool, as well as updating the translator tool to accommodate the latest changes to the cdao standard.

tl developed the mega format reader for the translator tool, as well as the matrix visualization tool.

tcs guided the development of the project.

ep led the development of the cdao ontology and supervised the development of the project.

all authors read and approved the final version of this manuscript.

