BACKGROUND
in practical data analysis, the observations included in a dataset sometimes form distinct groups—denoted as “batches”; for example, measured at different times, under different conditions, by different persons or even in different labs. such batch data is common in the context of high-throughput molecular data analysis, where experimental conditions typically have a high impact on the measurements and only few patients are considered at a time. taking a more general point of view, different batches may also represent different studies concerned with the same biological question of interest. independently of the particular scenario, in this paper all systematic differences between batches of data not attributable to the biological signal of interest are denoted as batch effects. if ignored when conducting analyses on the combined data, batch effects can lead to distorted and less precise results.

it is clear that batch effects are more severe when the sources from which the individual batches originate are more disparate. batch effects—in our definition—may also include systematic differences between batches due to biological differences of the respective populations unrelated to the biological signal of interest. this conception of batch effects is related to an assumption made on the distribution of the data of recruited patients in randomized controlled clinical trials . this assumption is that the distribution of the  outcome variable may be different for the actual recruited patients than for the patients eligible for the trial, i.e. there may be biological differences, with one important restriction: the difference between the means in treatment and control group must be the same for recruited and eligible patients. here, the population of recruited patients and the population of eligible patients can be perceived as two batches  and the difference between the means of the treatment and control group would correspond to the biological signal.

throughout this paper we assume that the data of interest is high-dimensional, i.e. there are more variables than observations, and that all measurements are continuous. possible present clinical variables are excluded from batch effect adjustment. various methods have been developed to correct for batch effects. see for example  <cit>  for a general overview and for an overview of methods suitable in applications involving prediction, respectively. two of the most commonly used methods are combat  <cit> , a location-and-scale batch effect adjustment method and sva  <cit> , a non-parametric method, in which the batch effects are assumed to be induced by latent factors. even though the assumed form of batch effects underlying a location-and-scale adjustment as done by combat is rather simple, this method has been observed to greatly reduce batch effects  <cit> . however, a location-and-scale model is often too simplistic to account for more complicated batch effects. sva is, unlike combat, concerned with situations where it is unknown which observations belong to which batches. this method aims at removing inhomogeneities within the dataset that also distort its correlation structure. these inhomogeneities are assumed to be caused by latent factors. when the batch variable is known, it is natural to take this important information into account when correcting for batch effects. also, it is reasonable here to make use of the data-cleaning ability of the latent factor-adjustment by applying it within batches. this has the effect of reducing such inhomogeneities within batches, which are unrelated to the biological signal of interest. by doing so it can be expected that the homogeneity of the data is further increased across batches as well.

in this paper we suggest a method, denoted as “fabatch” in the following, where “fa” stands for “factor adjustment”. the method combines the location-and-scale adjustment  with data cleaning by latent factor adjustment . care has to be taken in the latent factor estimation in the context of data-cleaning. inhomogeneities within the dataset are naturally not only induced by sources of unwanted noise but also by the biological signal of interest. if one would not take this interference between batch effects and signal into account, removing the corresponding estimated latent factor loadings would lead to removing a large part of the biological signal of interest. an obvious, yet problematic way, of protecting the signal of interest would be to remove it temporarily before estimating the latent factors by regressing each of the variables in the dataset on the variable representing the biological signal. however, this can lead to an artificially increased signal, as outlined in the section “fabatch”. as a solution for the case of a binary variable representing the biological signal, in our method we fit preliminary l2-penalized logistic regression models and use them to predict the probabilities of the individual observations to belong to the first and the second class, respectively. these predicted probabilities are then used in place of the actual values of the binary variable when protecting the signal of interest during latent factor estimation. see the section “fabatch” for details. in its current form our method is thus only applicable when the signal variable is binary, but extensions to other types of variables are possible, see the section “discussion”.

as an illustration, fig.  <dig> shows plots of the first two principal components obtained by principal component analysis  on a raw dataset  and after running the three different batch effect adjustment methods described above, respectively. the dataset, composed of two batches, contains the gene expressions of  <dig> alcoholics and  <dig> healthy controls. it is downloadable from arrayexpress  <cit> , accession number: e-geod- <dig>  after combat adjustment, the centers of gravity of the first principal components separated into the two batches become very similar . however, the shapes of the point clouds corresponding to the two batches do not change substantially in comparison to the results obtained on the raw data  and the two clouds do not fully overlap. after sva adjustment—as with combat—the two batch centers are also similar . the forms of the point clouds change more strongly compared to combat. nevertheless, there are still regions in the plots with suboptimal overlap between the two clouds. the two batch centers are not distinguishable in the plot showing the result obtained after applying our method . moreover, the overlap between the two clouds is very high. this illustrative example suggests that the adjustment for batch effects can be improved by combining location-scale-adjustment with data-cleaning by factor adjustment.
fig.  <dig> visualization of batch effect adjustment. first two principal components out of pca performed on the covariate matrix of a microarray dataset studying alcoholism: raw, after batch effect adjustment according to combat, sva using three factors and fabatch using three factors. the first batch is depicted in bold and the numbers distinguish the two classes “alcoholic”  vs. “healthy control” . the contour lines represent batch-wise two-dimensional kernel estimates and the diamonds represent the batch-wise centers of gravities of the points



an important area of application for high-throughput molecular data is the prediction of phenotypes via so-called prediction rules. here, the training data used to obtain the prediction rule often constitutes a different batch than the validation data the prediction rule is applied to. batch effect adjustment can be used here to make the validation data more similar to the training data before applying a prediction rule that was previously fitted on the training data. such a procedure, termed “addon batch effect adjustment” in the following, is not specific to our method, but a general concept. here, batch effect adjustment is first conducted based on the available original dataset. some methods require that the values of the target variable are known in this dataset. subsequently, batch effect adjustment for independent batches is performed. to facilitate this, it is required that several observations from each batch are available simultaneously . this second phase does not affect the data prepared in the first phase. see the section “addon adjustment of independent batches” for details. we refer to such scenarios as cross-batch prediction in the rest of this paper. our new fabatch method allows such an addon batch effect adjustment.

the structure of this paper is as follows: in the section “methods” we introduce our new approach and treat addon batch effect adjustment. moreover, we present the design of an extensive comparison study based on simulations and real data applications. in this study our method is compared with commonly used competitors with respect to diverse metrics measuring the effectiveness of batch effect adjustment  <cit> . our main focus lies in studying the performance of fabatch here, but the results of this comparison study can also be used to aid researchers in choosing appropriate batch effect adjustment methods for their applications. the considered methods are: fabatch , combat , sva , mean-centering , standardization , ratio-a  and ratio-g  <cit>  . the results of this study are described in the section “results”. in this section we also present an analysis demonstrating the use of batch effect adjustment methods in cross-batch prediction. moreover, we argue that sva can lead to an artificial increase of the biological signal of interest and demonstrate this using simulated data. the section “discussion” mostly reviews the models behind fabatch and other approaches, and the section “conclusions” summarizes important conclusions from the paper.

methods
fabatch
model
we assume the following model for the observed data xijg: 
  xijg=αg+aijtβg+γjg+∑l=1mjbjglzijl+δjgεijg,zij <dig> …,zijmj∼n,εijg∼n, 

here i is the index for the observation, j the index for the batch and g the index for the variable. the term aijtβg parametrizes the effect of experimental conditions or, in general, any factors of interest aij on the measurements of variable g. in this paper, aij is a dummy variable representing the binary variable of interest yij, with aij= <dig> if yij= <dig> and aij= <dig> if yij= <dig>  respectively. the term εijg represents random noise, unaffected by batch effects. the term γjg corresponds to the mean shift in location of variable g in the j-th batch compared to the unobserved—hypothetical—data xijg∗ unaffected by batch effects. the term δjg corresponds to the scale shift of the residuals for variable g in the j-th batch. as in the sva model , zijl are random latent factors. in contrast to the latter model, in our model the distribution of the latent factors is independent of the individual observation. however, since the loadings bjgl of the latent factors are batch-specific, the latter induce batch effects in our model as well. more precisely, they lead to varying correlation structures in the batches. in the sva model, by contrast, all batch effects are induced by the latent factors. without the summand ∑l=1mjbjglzijl model  would equal the model underlying the combat-method, see appendix a. <dig> .

the unobserved data xijg∗ not affected by batch effects is assumed to have the form 
  xijg∗=αg+aijtβg+εijg,εijg∼n. 

the remaining batch effect adjustment methods considered in this paper are described in appendix a. <dig> .

using estimated probabilities instead of actual classes
as already noted in the section “background”, a further peculiarity of our method is that we do not use the actual classes when protecting the biological signal of interest in the estimation algorithm. instead, we estimate the probabilities of the observations to belong to either class and use these in place of the actual classes, see the next paragraph and the next subsection for details.

this procedure has two major advantages. firstly, it makes the batch effect correction method applicable to prediction problems involving new test observations with unknown classes. secondly, using the actual classes might lead to an artificial increase of separation between the two classes in the dataset. this is because, as will be seen in the next subsection, it is necessary to use the estimated, instead of the true, but unknown, class-specific means when centering the data before factor estimation. due to sampling variance, these estimated class-specific means often lie further away from each other than the true means, in particular for variables for which the true means lie close to each other. subtracting the estimated factors’ influences leads to a reduction of the variance. now, if centering the variable values within the classes before factor estimation, removing the estimated factor influences would lead to a reduction of the variance around the respective estimated class-specific means. in those—frequently occurring—cases, in which the estimated class-specific means lie further from each other than the corresponding true means, this would lead to an artificial increase of the discriminatory power of the corresponding variable in the adjusted dataset.

all analyses which are concerned with the discriminatory power of the covariate variables with respect to the target variable would be biased if performed on data adjusted in this way. more precisely, the discriminatory power would be overestimated. this mechanism is conceptually similar to the over-fitting of prediction models on the data they were obtained on. sva suffers from a very similar kind of bias, also related to using the class information in protecting the biological signal. see the section “artificial increase of measured class signal by applying sva” for a detailed description of this phenomenon and the results of a small simulation study performed to assess the impact of this bias on data analysis in practice.

the probabilities of the observations to belong to either class, that are considered in fabatch, are estimated using models fitted from data other than the corresponding observations. using these probabilities instead of the actual classes attenuates the artificial increase of the class signal described above. the idea underlying the protection of the signal of interest is to center xijg before factor estimation by subtracting the term 
  𝔼=pr+pr. 

note that we perform this adjustment slightly differently in the fabatch-estimation algorithm. see the next subsection for details.

estimation
in the following we detail the estimation procedure of fabatch: 
standardize the values xijg per batch: 
  xijg,s:=xijg−μjg^σjg2^, 

where μjg^=∑ixijg and σjg2^=∑i <dig>  here, the number of observations in batch j is denoted as nj.

using l2-penalized logistic regression, for each observation estimate the probability to belong to class 2: 
  πij^:=pr^. 

here, we employ the following cross-validation related procedure. for batch j∈{ <dig> …,k}: 1) fit a l2-penalized logistic regression model using all observations except those in batch j; 2) use the model fitted in step 1) to predict the probabilities πij of the observations from batch j. by using different observations for fitting the models than for predicting the probabilities we avoid overfitting in the sense of the problems occurring when the actual classes are used as described in the previous subsection. the reason why we perform cross-batch prediction for estimating the probabilities here instead of ordinary cross-validation is that we expect the resulting batch adjusted data to be more suitable for the application in cross-batch prediction . here, for estimating the probabilities in the test batch we have to use a prediction model fitted on other batches. if the probabilities in the training data were estimated via ordinary cross-validation they would be more optimistic—i.e. closer to zero and one, respectively—than those in the test data. this is because in ordinary cross-validation it can occur that observations from the same batch are in training and test data. by doing cross-batch prediction for the estimation of the πij we mimic the situation encountered in cross-batch prediction applications. the only, but important, exception where we perform ordinary cross-validation for estimating the πij is when the data come from only one batch .

the shrinkage intensity tuning parameter of the l2-penalized logistic regression model is optimized with the aid of cross-validation  <cit> . for computational efficiency this optimization is not repeated in each iteration of the cross-batch prediction. instead, it is performed beforehand on the complete dataset. the overoptimism resulting from this procedure compared to that of the gold-standard technique “nested cross-batch prediction” can be assumed to be negligible in the considered context.

calculate the class adjusted values xijg,s,ca, which should contain considerably less class signal than xijg,s: 
  xijg,s,ca:=xijg,s−μg,s^−πij^μg,s^, 

where μg,s^=∑{i∗,j∗}∈lcxi∗j∗g,s with lc={{i,j}:yij=c,i∈{ <dig> …,nj},j∈{ <dig> …,j}} and c∈{ <dig> }.

using xijg,s,ca, estimate the latent factors zijmj∗ and their loadings bjgmj∗ by an em-algorithm presented in  <cit> , again considered by friguet et al.  <cit>  in a specific context for microarray data. for the estimation of the number of factors see  <cit> .

subsequently the estimated factor contributions are removed: 
  xijg,s,fa:=xijg,s−bjg1∗^zij1∗^−⋯−bjgmj∗^zijmj∗^, 

where bjg1∗^,…,bjgmj∗^ are the estimated, batch-specific factor loadings and zij1∗^,…,zijmj∗^ are the estimated latent factors. note that only the factor contributions as a whole are identifiable, not the individual factors and their coefficients.

finally, in each batch the xijg,s,fa-values are transformed to have the global means and pooled variances estimated before batch effect adjustment: 
  xijg∗^=xijg,s,fa−μg,s,fa^σg,s,fa2^σg2^+μg^, 

 whereμg,s,fa^=1/∑jnj∑j∑ixijg,s,fa,σg,s,fa2^=1/∑jnj−1∑j∑i <dig> μg^=1/∑jnj∑j∑ixijgandσg2^=1/∑jnj−1∑j∑i <dig>  

note that by forcing the empirical variances in the batches to be equal to the pooled variances estimated before batch effect adjustment we overestimate the residual variances σg <dig> in . this is because we do not take into account that the variance is reduced by the adjustment for latent factors. however, unbiasedly estimating σg <dig> appears difficult due to the scaling before estimation of the latent factor contributions.



verification of model assumptions on the basis of real data
due to the flexibility of its model fabatch should adapt well to real datasets. nevertheless it is important to check its validity based on real data, because the behaviour of high-dimensional biomolecular data does not become apparent by mere theoretical considerations. therefore, we demonstrate that our model is indeed suited for such data using the dataset breastcancerconcatenation from table  <dig>  this dataset was chosen because here the batch effects can be expected to be especially strong due to the fact that the batches involved in this dataset are themselves independent datasets. we obtained the same conclusions for other datasets . because our model is an extension of the combat-model by batch-specific latent factor contributions, we compare the model fit of fabatch to that of combat.
the following information is given: number of observations, number of batches, number of variables, proportion of observations with disease, biomolecular data type, accession number



additional file 1: figure s <dig> and figure s <dig> show, for each batch, a plot of the data values against the corresponding fitted values of fabatch and combat respectively. while there seem to be no deviations in the mean for both methods, the association between data values and predictions is a bit stronger for fabatch—except in the case of batch  <dig>  this stronger association between fitted values and predictions for fabatch can be explained by the fact that the factor contributions absorb part of the variance of the data values. in the case of batch  <dig>  the estimated number of factors was zero, explaining why the variance is not reduced here in comparison to combat. additional file 1: figure s <dig> and figure s <dig> correspond to the previous two figures, except that here the deviations from the fitted values instead of the data values are plotted against the corresponding fitted values. we observe that for batches  <dig>   <dig> and  <dig> the variance of these residuals depends slightly less on the mean for fabatch in comparison to combat. batchwise density estimates of these residuals divided by their standard deviations are shown in additional file 1: figure s <dig> and figure s <dig> for fabatch and combat, respectively. for both methods outliers are observed. however, the distributions of the residuals differ between the two methods. in the case of combat the distributions are skewed for part of the batches, slightly for batches  <dig> and  <dig> and more strongly for batch  <dig>  in the case of fabatch the distributions are symmetric. a probable reason for the skewness of the distributions in the case of combat is that the residuals still contain the biological signal, as it is not included in the fixed part of the model.

addon adjustment of independent batches
as already described in the section “background”, an important feature of batch effect adjustment methods is that they offer the possibility of making validation data more similar to training data of the same kind studying the same biological question of interest. here, the training and the validation data may themselves each consist of different batches. this feature of batch effect adjustment can be used for prediction purposes in particular. in the following we detail how batch effect adjustment is conceptionally performed for incorporating independent batches in general and treat the respective procedures for the particular methods considered in this paper.

general procedure
a batch effect adjustment method  assumes a specific model for the observed data. one part of parameters involved in this model is connected with the observed data within the batches xijg and another part with the unobserved batch effect free data xijg∗. while the values of the former kind of parameters in most cases depend on the individual batches, the latter kind are the same for all observations, i.e. these are batch-unspecific. when incorporating independent batches after having adjusted the training data, we are interested in transforming the data in the independent batches in such a way that its distribution becomes similar to that of the already adjusted training data without having to change the latter. this is achieved by performing the same kind of transformation on the independent batches with the peculiarity that for the involved batch-unspecific parameters the estimates obtained on the training data are used. we refer to these procedures as addon batch effect adjustment procedures.

using the above definition, for those batch effect adjustment methods, for which the corresponding adjustment does not involve estimated batch-unspecific parameters, the addon procedure is the same as the corresponding batch effect adjustment method. from the batch effect adjustment methods considered in this paper, this is the case for mean-centering, standardization, ratio-a and ratio-g. here the batch effect adjustment is performed batch by batch. the adjustment according to combat, fabatch and sva, respectively, does by contrast involve estimated batch-unspecific parameters.

combat
for combat, luo et al.  <cit>  present the addon procedure for the situation of having only one batch in the training data. the addon batch effect adjustment with combat consists of applying the standard combat-adjustment to the validation data without the term aijtβg and with all batch-unspecific parameters αg, σg <dig> and βg estimated using the training data.

m-combat  <cit>  is a similar method, applicable in the situation of one batch in the training data. this method can be seen to perform a location-and-scale adjustment of the validation data, i.e., in contrast to original combat, this method does not use shrinkage by empirical bayes. according to our definition of addon batch effect adjustment from the previous subsection, m-combat thus represents the addon batch effect adjustment procedure for the following method: location-and-scale batch effect adjustment when having one batch in the training data.

fabatch
the adjustment with fabatch involves estimates of the same batch-unspecific parameters as that with combat ): αg, σg <dig> and βg. however, unlike in the adjustment with combat, in fabatch the term aijtβg is considered additionally. this is achieved—roughly—by estimating 𝔼 and βg using l2-penalized logistic regression. see again the section “estimation” for details. the addon procedure for fabatch is straightforwardly derived from the general definition of addon procedures given above: the estimation scheme in the section “estimation” is performed with the peculiarity that for all occurring batch-unspecific parameters, the estimates obtained in the adjustment of the training data are used.

sva
for sva there exists a specific procedure denoted as “frozen sva”  <cit> , abbreviated as “fsva,” for preparing independent data for prediction. more precisely, parker et al.  <cit>  describe two versions of fsva: the “exact fsva algorithm” and the “fast fsva algorithm”. in appendix a. <dig>  we demonstrate that the “fast fsva algorithm” corresponds to the addon procedure for sva.

in the fsva algorithms the training data estimated factor loadings  are used. this requires that the same sources of heterogeneity are present in training and test data, which might not be true for a test data batch from a different source. thus, frozen sva is only fully applicable when training and test data are similar, as stated by parker et al.  <cit> . nevertheless in the section “application in cross-batch prediction” we apply it in cross-batch prediction to obtain indications on whether the prediction performance of classifiers might even deteriorate through the use of frozen sva when training and test data are very different.

above we have presented the addon procedures for the batch effect adjustment methods that are considered in this paper. however, using our general definition of addon procedures, such algorithms can readily be derived for other methods as well.

comparison of fabatch with existing methods
a comprehensive evaluation of the ability of our method to adjust for batch effects in comparison to its competitors was performed—using both simulated as well as real datasets. the simulation enables us to study the performance, subject to basic settings and to use a large number of datasets. nevertheless simulated data can never capture all properties found in real datasets from the area of the application. therefore, in addition, we studied  <dig> publicly available real datasets, each consisting of at least two batches.

the value of batch effect adjustment contains different aspects, which are connected with the adjusted data itself or with the results of certain analyses performed using the latter. therefore, when comparing batch effect adjustment methods it is necessary to consider several criteria, where each is concerned with a certain aspect. we calculated seven different metrics measuring the performance of each batch effect adjustment method on each simulated and each real dataset.

in the following, we first outline the seven metrics considered in the comparison study described above. subsequently, we introduce the simulation designs and give basic information on the real datasets. the results of these analyses are presented and interpreted in the section “ability to adjust for batch effects”.

performance metrics
here we describe the performance metrics used to assess batch effect adjustment. several of them are, in their original form, restricted to the case of only two batches. for datasets with more than two batches they are extended as follows: 1) calculate the original metric for all possible pairs of batches; 2) calculate the weighted average of the values in 1) with weights proportional to the sum of the sample sizes in the two respective batches.

separation score 
we derived this metric from the mixture score presented in  <cit> . the latter was not applicable here, because it depends on the relative sizes of the two involved batches j and j∗. roughly speaking the mixture score measures the degree of mixing between the observations belonging to the two batches after batch effect adjustment. the separation score by contrast measures the degree of separation between the two batches. at first for each observation in j, its k nearest neighbours are determined in both batches simultaneously with respect to the euclidean distance. here, the proportion of nearest neighbours belonging to batch j∗ is calculated. then the average—denoted as msj—is taken over the nj proportions obtained in this way. this value is the mixture score as in  <cit> . to obtain a measure for the separation of the two batches the absolute difference between msj and its value expected in the absence of batch effects is taken: |msj−nj∗/|. the separation score is defined as the simple average of the latter quantity and the corresponding quantity when the roles of j and j∗ are switched. the number k of nearest neighbours considered was set to  <dig>  smaller values of the separation score are better.

average minimal distance to other batch 
a very similar metric for two batches is the average minimal distance to the other batch after batch effect adjustment, see also  <cit> . for each observation in batch j the euclidean distance to the nearest observation in batch j∗ is calculated. consecutively the roles of j and j∗ are switched and finally the average is computed over all nj+nj∗ minimal distances. to obtain a metric independent of the scale, we standardize the variables before the calculation to have zero mean and uniform variance. here, smaller values are better.

kullback-leibler divergence between density of within and between batch pairwise distances 
this metric, used in  <cit>  in a similar form is again based on the distances of the observations within and between batches. at first the distances between all pairs of observations in batch j—denoted as {distj}—and the distances between all such pairs in batch j∗—denoted as {distj∗}—are calculated. then for each observation in j the distances to all observations in j∗ are calculated, resulting in nj×nj∗ distances denoted as {distjj∗}. consecutively we estimate the kullback-leibler divergence between the densities of {distj} and {distjj∗} and that between the densities of {distj∗} and {distjj∗}—using the k-nearest neighbours based method by boltz et al.  <cit>  with k= <dig>  finally, we take the weighted mean of the values of these two divergences with weights proportional to nj and nj∗. as in the case of avedist the variables are standardized before the calculation to make the metric independent of scale. smaller values of this metric are better.

skewness divergence score 
this metric presented in  <cit>  is concerned with the values of the skewness of the observation-wise empirical distributions of the data. because batch effect adjustment should make the distribution of the data similar for all batches, these skewness values should not differ strongly across batches after a successful batch effect adjustment. the metric is obtained as follows for two batches j and j∗ after batch effect adjustment: 1) for each observation calculate the difference between the mean and the median of the data in batch j and j∗, respectively, as a measure for the skewness of the distribution of the variable values; 2) determine the area between the two batch-wise empirical cumulative density functions of the values out of 1). the value obtained in 2) can be regarded as a measure for the disparity of the batches with respect to the skewness of the observation-wise empirical distributions. again, standardization is conducted before the calculation. smaller values indicate a more successful batch effect adjustment with respect to the homogeneity of the skewness values.

proportion of variation induced by class signal estimated by principal variance components analysis 
principal variance component analysis  <cit>  allows the estimation of the contributions of several sources of variability. here, first principal component analysis is performed on the n×n covariance matrix between the observations. then, using a random effects model, the principal components are regressed on arbitrary factors of variability, such as “batch” and “ class”. ultimately, estimated proportions of variance induced by each factor, and that of the residual variance are obtained; for details see  <cit> . we included the factors “batch”, “class” and the interaction of these two into the model and used the proportion of variance explained by “class” as a metric. naturally, higher values of this metric indicate a better preservation or exposure, respectively, of the biological signal of interest.

performance of differential expression analysis 
this metric is similar to the idea presented in  <cit>  which consists in comparing the list of genes deemed differentially expressed the strongest using a batch effect adjusted dataset to the corresponding list obtained using an independent dataset. having no independent data available here we had to consider a slightly different approach: 1) for each batch j leave this batch out and perform batch effect adjustment using the rest of the dataset. derive two lists of the  <dig> % of variables deemed differentially expressed the strongest : one using the batch effect adjusted dataset—where batch j was left out—and one using the data from batch j. calculate the number of variables appearing in both lists and divide this number by the common length of the lists. 2) calculate a weighted average of the values obtained in 1) with weights proportional to the number of observations in the corresponding left-out batches. note that in the case of the simulated datasets we would be able to estimate the true discovery rate instead of calculating the metric described above. however, for the sake of comparability, we applied the procedure described above for the simulated data as well.

now we describe the procedure performed for estimating those  <dig> % of variables which are most differentially expressed. our original idea to use the p-values of simple two-sample t-tests between the two classes was soon discarded. the reason for this was that this procedure might have favoured batch effect adjustment methods that produce more normally distributed values of the variables. the p-values of classical non-parametric tests, such as the mann-whitney-wilcoxon rank sum test would also not have been suitable here, because of the fact that here the p-values can only adopt a limited number of possible values. therefore, it would have occurred in many cases that more than  <dig> % of the variables adopt the smallest of possible p-values, making a selection of  <dig> % of variables with the smallest p-values impossible. as a solution, for each variable we drew a randomized p-value out of the whitney-wilcoxon rank sum test, see  <cit>  for details. these randomized p-values can adopt any possible value between zero and one and were consequently suitable for ordering the variables according to their degree of differential expression between the two classes. we ultimately considered those  <dig> % variables that were associated with the smallest p-values. higher values of this metric are better.

mean pearson’s correlation of the variable values before and after batch effect adjustment 
this metric suggested by lazar et al.  <cit>  is not a measure for the performance of batch effect adjustment. however, it may be used occasionally to decide between two methods performing similarly: in such cases the method that least affects the data—i.e. that with smaller corbeaf-values—could be preferred  <cit> .

simulation design
three basic scenarios were considered: 1) “comcor”: common correlation structure in all batches; 2) “batchcor”: batch-specific correlation structures; 3) “batchclasscor”: batch- and class-specific correlation structures. for each of these the correlations were induced in two ways : 1) simulating from a latent factor model with normally distributed residuals; 2) drawing from multivariate normal distributions with specified correlation matrices. the second scheme was considered to avoid favouring fabatch and sva by restricting the simulation to factor-based data generation mechanisms. we simulated datasets consisting of four batches with  <dig> observations each. the number of variables was  <dig>  for each of the six  settings  <dig> datasets were simulated. the values of the parameters occurring in the simulation models were based on corresponding estimates obtained from two publicly available microarray datasets: a dataset also used in the real data study, denoted as autismtranscr  and a dataset studying colon cancer, denoted as coloncbtranscr. the latter is downloadable from arrayexpress  <cit> , accession number: e-geod- <dig> 

all six settings can be expressed using the following most general model: 
  xij=α+aijβ+γj+εij∗,εij∗∼mvn, 

with xij=t, α=t, aij∈{ <dig> }, β=t, γj=t, εij∗=t, j∈{ <dig> …,k} and p= <dig> 

the entries of α and γj  were drawn from normal distributions with means and variances based on corresponding estimates obtained from colonctranscr. for details see the corresponding commented r code provided in additional file  <dig>  the vector of the class differences β contains  <dig>  non-zero values. half of these are negative and half positive. the values were drawn from gamma distributions, where the choice of parameters was again based on colonctranscr. here, in the case of the negative entries of β, the sign of the originally drawn values was changed.

the six settings differ with respect to the specification of Σj,aij. the differences are outlined in the following.

design a: simulating from latent factor model
the residuals of the fixed part of the model εij∗ were simulated in the following ways for the corresponding scenarios: 
   <dig>  comcor:εijg∗:=∑m=15b0gmzijm+δjgεijg 

   <dig>  batchcor:εijg∗:=∑m=15b0gmzijm+∑m=15bjgmz∗ijm+δjgεijg 

   <dig>  batchclasscor:εijg∗:=∑m=15b0gmzijm+∑m=15b~aijgmzijm+∑m=15bjgmz∗ijm+δjgεijg, 

where εijg∼iidn and zijm,z∗ijm∼iidn. b0gm, bjgm and b~aijgm were drawn from normal distributions and δjg <dig> and σg <dig> from inverse gamma distributions. the parameters of the latter distributions are again based on corresponding estimates obtained from colonctranscr.

in eqs. ,  and  the factors zij <dig> …,zij <dig> model the biological correlation between the variables. the factors z∗ij <dig> …,z∗ij <dig> in  and  model distortions that affect the correlation in the batches. in setting “comcor” all observations have the same correlation structure—independent of the batch. in setting “batchcor” the correlation structure is different in each batch, due to the batch-specific loadings of the factors z∗ij <dig> …,z∗ij <dig>  in the third setting, “batchclasscor”, the correlations differ not only by batch but also according to which of the two classes the observations are in, i.e. we have batch- and class-specific correlations. in each setting the variances are different in the batches.

design b: drawing from multivariate distributions with specified correlation matrices
in design b, all correlation matrices appearing in the three scenarios were estimated using real data. here we first calculated the approximate positive definite correlation matrix using the r function cor and then applied the r function nearpd from the r package matrix to the result to calculate the nearest positive definite correlation matrix. we used the  <dig> genes from the autismtranscr dataset, which showed themselves to be most related to the binary outcome according to variable-wise two-sample t-tests. before estimating the correlation matrices, the data was further centered by class in each batch to adjust for excess correlations due to class differences. the variances are the same in all three scenarios. they were set to be equal to those in scenario “comcor” of design a, i.e. ∑m=15b0gm2+δjg2σg <dig> 

the correlation matrices were obtained as follows for the three scenarios: 
comcor: a single correlation matrix was used for all batches here. it was estimated from the data of a single batch in autismtranscr.

batchcor: a separate correlation matrix was used for each batch here, each estimated from the data of a batch in autismtranscr.

batchclasscor: a separate correlation matrix was used for each combination of batch and class here, where each was estimated on a corresponding batch-class-combination in autismtranscr.



after obtaining the correlation matrices, the corresponding covariance matrices were calculated. the latter was done by multiplying each entry in the correlation matrices with the respective pair of standard deviations.

datasets
we used  <dig> high-dimensional datasets with a binary target variable and at least two batches. they were downloaded from the arrayexpress database   <cit>  or the ncbi geo database   <cit> .

in searching for suitable datasets on arrayexpress and ncbi geo, we entered the search term “batch” and manually surveyed the search hits. this proceeding was chosen in order to maximise the number of possibly eligible datasets. exclusion criteria were: number of samples too low, abscence of a batch variable, and impossibility of forming a suitable binary target variable. we state that the selection of the datasets was not in any way based on the results they yielded with the different methods, thus following rule  <dig> from  <cit>  .

three datasets featured too many variables to be manageable for our systems. therefore, in these cases, we randomly selected  <dig>  variables. when missing values occurred in the measurements of datasets we took the following approach. first, we excluded variables with too many missing values. consecutively the remaining missing values were simply imputed by the median of the observed values of the corresponding variable in the corresponding batch. this simplistic imputation procedure can be justified by the very low numbers of variables with missing values in all datasets. outlier analysis was performed by visually inspecting the principal components out of pca applied to the individual datasets. here, suspicious samples were removed. additional file 1: figure s <dig> shows the first two principal components out of pca applied to each of the used datasets after imputation and outlier removal.

for further details regarding the background of the datasets and the preprocessing the reader may look up the accession numbers online and consult the corresponding r scripts, respectively, written for preparation of the datasets, which are available in additional file  <dig>  here we also provide all r code necessary to reproduce our analyses.

RESULTS
ability to adjust for batch effects
additional file 1: figure s <dig> to s <dig> show the values of the individual metrics obtained on the simulated data and fig.  <dig> shows the corresponding results obtained on the  <dig> real datasets. additional file 1: tables s <dig> to s <dig> for the simulated and tables  <dig> and  <dig> for the real data, respectively show the means of the metric values separated by method  together with the mean ranks of the methods with respect to the individual metrics. in most cases, we observe that the simulation results differ only slightly between the settings with respect to the ranking of the methods by their performance. therefore, we will only occasionally differentiate between the scenarios in the interpretations. similarly, simulations and real data analyses often yield similar results. differences will be discussed whenever relevant.
fig.  <dig> metric values in real datasets. boxplots of values for all  <dig> datasets separated into method for the following metrics: sepscore, avedist, klmetr, pvca, diffexpr, skewdiv and corbeaf. the grey lines connect values corresponding to the same datasets



sepscore
fabatch
 <dig> 
fabatch
 <dig> 

avedist
fabatch
 <dig> 
fabatch
 <dig> 

klmetr
fabatch
 <dig> 
fabatch
3

pvca
fabatch
 <dig> 
fabatch
 <dig> 
in each row the results are listed in descending order according to mean performance in terms of the original values and their ranks, respectively. the results of fabatch are printed in bold



diffexpr
fabatch
 <dig> 
fabatch
 <dig> 

skewdiv
fabatch
 <dig> 
fabatch
 <dig> 

corbeaf
fabatch
 <dig> 
fabatch
 <dig> 
in each row the results are listed in descending order according to mean performance in terms of the original values and their ranks, respectively. the results of fabatch are printed in bold



according to the values of the separation score  combat, fabatch and standardization seem to lead to the best mixing of the observations across the batches. for the real datasets, however, standardization was only slightly better on average than other methods.

the results with respect to avedist are less clear. the simulation with factors  suggests that fabatch and sva are associated with greater minimal distances to neighboring batches, compared to the other methods. however, we do not clearly observe this for design b other than for the setting with common correlations. the real data results also suggest no clear ordering between the methods with respect to this metric; see in particular the means over the datasets in table  <dig>  the values of this metric were not appreciably improved by batch effect adjustment in general on the real datasets.

the values of klmetric, which is conceptionally very similar to the separation score, allows a very similar conclusion as the latter metric : combat, fabatch and standardization performed best here. while this conclusion could be obtained on both simulated and real data, other results differed between the different simulation scenarios and the real data analyses: sva performed considerably worse here for design a than b and mean-centering performed better on the simulated data in general.

the estimates of the proportions of the variation explained by the class signals obtained via principal variance components analysis  are depicted in the additional file 1: figure s <dig> and fig.  <dig> and summarized in the table s <dig>  and table  <dig>  sva appears to be associated with the highest proportion of variation induced by the class signal. however, the comparison to the other methods is not fair here: sva makes use of the target variable and is therefore associated with an artificially increased class signal. see the section “artificial increase of measured class signal by applying sva” for details on this mechanism related to overoptimism. fabatch performed well only on the simulated data here, but not on the real datasets, where it had the lowest mean value with the exception of no batch effect adjustment. figure  <dig> reveals that those three datasets for which pvca was considerably smaller after batch effect adjustment by fabatch were, at the same time, the three datasets with the highest pvca-values before batch effect adjustment. datasets with high pvca-values are datasets where the biological signal is relatively strong in comparison to the batch effects. our results suggest that for such datasets, batch effect adjustment with fabatch might be counterproductive. the distinguishing feature of fabatch in comparison to a mere location-scale adjustment as performed by combat is that it aims at additionally adjusting for batch effects not explainable by location and scale shifts. while fabatch aims at protecting the biological signal in the factor estimation, it cannot be protected entirely here due to the uncertainty in the estimation of the class probabilities. when reducing the total heterogeneity by fabatch in cases of weak batch effects, the merit of removing heterogeneity due to batch effects becomes smaller in comparison to the harm that affects the signal. combat performed better than other methods here on the real data .

for the performance metric related to differential expression analysis diffexpr  the results for fabatch and sva are quite different between simulated and real data. in the simulation, the two methods performed best compared to the others . however, for the real data they performed worst—even worse than no batch effect adjustment in the mean. for fabatch we examined those datasets which yielded substantially worse diffexpr-values after batch effect adjustment than before. as can already be seen from fig.  <dig>  two of these datasets have high diffexpr-values on the data before batch effect adjustment. this implies that for these datasets the biological signal is well preserved in the batches—in other words they seem to be less affected by batch effects. a possible reason why fabatch performs worse for mild batch effects has already been outlined above. the other datasets connected with worse diffexpr-values than “no batch effect adjustment” in the case of fabatch were those datasets for which some “outlying” batches were very different from the others—according to the pca plots given in . we conjecture that, in this case, pooling the data of the outlying batch with the other batches and estimating the l2-penalized logistic regression model can result in a predictor with bad performance. the combined data might be too heterogeneous for the l2-penalized logistic regression model, which assumes that all observations follow the same distribution. if the predictions of the class probabilities by the l2-penalized logistic regression rule are bad, the biological signal is less protected in the latent factor estimation. therefore, the removal of the estimated latent factor influences will affect the biological signal more. there were no noteworthy differences between the other methods with respect to diffexpr. for the real datasets there were also no improvements over no batch effect adjustment. this indicates that differential expression analysis might not benefit from batch effect adjustment in general.

for the skewness divergence score  no clear ranking between the methods is seen in the case of the simulated data. however, for the real datasets, sva and fabatch clearly outperform the other methods with respect to this metric.

finally, both in the simulated and real data, fabatch and sva have considerably lower corbeaf-values , which is not very surprising considering their high complexity.

application in cross-batch prediction
in this illustrative analysis we apply all batch effect adjustment methods considered above together with the corresponding addon procedures described in the section “addon adjustment of independent batches” in cross-batch prediction in a real data example and using simulated data. a more extensive real data study was conducted by luo et al.  <cit>  who used several datasets to compare all of the methods considered here, except for frozen sva  and fabatch, with respect to their performance in cross-batch prediction.

we use the dataset iugrtranscr. the reasons for choosing this dataset were that it features a relatively strong class signal and is at the same time strongly affected by batch effects—judging from the principal component analysis plot in additional file 1: figure s <dig>  this dataset contains mirna-measurements obtained from  <dig> human placentas using the illumina human- <dig> v <dig> expression beadchip. of these  <dig> samples,  <dig> were obtained from placentas of embryos suffering from intrauterine growth restriction , the remaining  <dig> samples originate from placentas of healthy embryos. the dataset consists of two batches of sizes  <dig> and  <dig>  where in the first batch  <dig>  and in the second batch  <dig>  samples originate from iugr embryos.

as classification algorithm for the dependent variable “iugr ” linear discriminant analysis  using partial least squares  components as covariates  <cit>  was chosen, where the number of components used was tuned on the grid  <dig> , …,  <dig> employing 3-fold cv.

just as luo et al.  <cit>  in their extensive real data study, we use matthews correlation coefficient  as performance metric. this measure has the advantage over the more commonly considered misclassification error rate, that it is independent of the class frequencies in the test data. it takes values in , where a mcc-value of  <dig> would indicate a perfect prediction, a mcc-value of  <dig> would correspond to a completely random prediction and a mcc-value of - <dig> to a total disagreement between prediction and reality.
fig.  <dig> cross-batch prediction—mcc-values. mcc-values out of using the individual batch effect adjustment methods in cross-batch prediction when training on the first and second batch. fsvafast and fsvaexact denote the fast and the exact fsva algorithm, respectively



in additional file 1: figure s <dig> and in fig.  <dig> we used pca plots to visualize batch effects in raw data and in data after batch effect adjustment, respectively. in this section we utilize such plots for a slightly different purpose: to study to what extent the validation batch is similar to the training batch after addon batch effect adjustment using the different batch effect adjustment methods. in each panel of fig.  <dig> the training batch is depicted in bold. in each case pca was applied to the following data matrix: the training batch after batch effect adjustment combined with the validation batch after addon batch effect adjustment using the respective method indicated in each case. the stronger the two point clouds overlap, the closer the validation batch is to the training batch after addon batch effect adjustment. before batch effect adjustment the two batches are obviously grossly disparate. while the shapes of the point clouds are rather similar, their location differs strongly. fabatch lead to the greatest overlap between the training and validation batches. combat and standardization were second place here. note that despite the decent overlap between training and validation batches using standardization, this method delivered bad mcc-values in the analysis above. mean-centering, ratio-a and ratio-g were connected with a worse overlap and the point clouds do hardly differ between these methods. the two fsva algorithms made the two point clouds even more disparate than before batch effect adjustment. the bad performance of fsva observed here indicates that in this example it seems not to be appropriate to assume that the same sources of heterogeneity operate in the two batches—an assumption required for the application of fsva. in section “addon adjustment of independent batches” we noted that for the methods mean-centering, standardization, ratio-a and ratio-g no specific addon batch effect adjustment methods are required, because they treat each independently of the others. therefore, for each of these methods, in the two corresponding subplots of fig.  <dig> the point clouds are identical, irrespective of which batch is used as training and validation batch, respectively.
fig.  <dig> visualization of the assimilation of validation batch to training batch after batch effect adjustment. first two principal components out of pca performed on the following data matrix: the training batch after batch effect adjustment combined with the validation batch after addon batch effect adjustment. the training batch in each subplot is depicted in bold and the numbers distinguish the two classes “iugr yes”  vs. “iugr no” . the contour lines represent batch-wise two-dimensional kernel estimates and the diamonds represent the batch-wise centers of gravities of the points



note again that the above real data analysis is only illustrative. simulations give more accurate results and allow for the study of the impact of specific aspects of the underlying data distribution. in this simulation we are interested in demonstrating that fabatch is best suited in situations with correlated predictors. we considered four simulation settings. these are: the three settings of design b presented in section “design b: drawing from multivariate distributions with specified correlation matrices” and an additional setting in which no correlation between the predictors was induced. design b was chosen instead of design a in order to prevent a possible optimistic bias with respect to fabatch and fsva, since these involve adjustment for latent factor influences. the additional fourth setting was generated by simply setting the correlations in design b to zero. for each setting we simulated  <dig> datasets and proceeded as in the analysis of the real dataset presented above—with two differences. the first difference was that in the simulation we have to consider 42×2= <dig> instead of two combinations of training and validation batches per dataset, because the simulated datasets feature four instead of only two batches. the second difference concerns the evaluation of the results, because the mcc values could not be calculated in cases where both the numerator and denominator in the calculation were zero. therefore for each combination of setting and batch effect adjustment method we summed up the true positives, the true negatives, the false positives and the false negatives over all prediction iterations in all  <dig> datasets and calculated the mcc-value using the standard formula. figure  <dig> shows the results. in many respects the simulation results concur with the results obtained using the real dataset. the most striking difference is that standardization was best here, while it was bad for the real data analysis. the good performance of standardization in the simulation should however not be over-interpreted as it was the least performant method in the study of luo et al.  <cit> . fabatch was the second-best method in all settings except for that without correlation between the predictors. in the latter setting, fabatch is outperformed by combat and mean-centering. this confirms that fabatch is best suited in situations with more correlated variables. ratio-g performed poorly here—other than in the study by luo et al.  <cit>  and in the real-data analysis above. both frozen sva algorithms performed bad here as well.
fig.  <dig> mcc-values from simulation study. the colors differentiate the methods: none (), fabatch (), combat (), fsvafast (), fsvaexact (), meanc (), stand (), ratiog (), ratioa (). for better interpretability the results to the same methods are connected



artificial increase of measured class signal by applying sva
in the section “fabatch” we detailed why using the actual values of the target variable in protecting the biological signal during the latent factor estimation of fabatch would lead to an artificially increased class signal. sva does use the values of the target variable and indeed suffers from the problem of an artificially increased class signal. in the following, we will outline the reason why sva suffers from this problem. a crucial problem with the weighting of the variable values by the estimated probabilities that the corresponding variable is associated with unmeasured confounders but not with the target variable is the following: these estimated probabilities depend on the values of the target variable, in particular for smaller datasets. naturally, due to the variability in the data, for some variables the measurements are, by chance, separated overly strong between the two classes. such variables, for which the observed separation between the classes is larger than the actual—biologically motivated—separation, are connected with smaller estimated weights. this means that such variables are affected less strongly by the removal of the estimated latent factor influences compared to variables which are not connected with such a randomly increased separation. phrased differently, the stronger the apparent—not the actual—signal of a variable is, the less its values are affected by the adjustment of latent factors. as a result, after applying sva the classes are separated to a stronger degree than they would be if biological differences between the classes were the only source of separation—as is required in a meaningful analysis. this phenomenon is pronounced more strongly in smaller datasets. the reason for this is that for larger datasets the measured signals of the variables get closer to the actual signals, wherefore the overoptimism due to working with the apparent instead of the actual signals becomes less pronounced here. accordingly, in the real data example from the previous subsection fsva performed considerably worse when using the smaller batch as training data.

using datasets with artificially increased signals in analyses can lead to over-optimistic results, which can have dangerous consequences. for example, when the result of cross-validation is over-optimistic, this may lead to overestimating the discriminatory power of a poor prediction rule. another example is searching for differentially expressed genes. here, an artificially increased class signal could lead to an abundance of false-positive results.

the observed deterioration of the mcc-values in the real data example by performing frozen sva when training on the smaller batch may, admittedly, also be due to random error. in order to investigate whether the effects originating from the mechanism of artificially increasing the discriminative power of datasets by performing sva are strong enough to have actual implications in data analysis, we performed a small simulation study. we generated datasets with  <dig> observations,  <dig> variables, two equally sized batches, standard normally distributed variable values and a binary target variable with equal class probabilities. note that there is no class signal in this data. then using 5-fold cross-validation repeated two times we estimated the misclassification error rate of pls followed by lda for this data. consecutively, we applied sva to this data and again estimated the misclassification error rate of pls followed by lda using the same procedure. we repeated this procedure for the number of factors to estimate set to  <dig>   <dig> and  <dig>  respectively. in each case we simulated  <dig> datasets. the mean of the misclassification error rates was  <dig>  for the raw datasets and  <dig> ,  <dig>  and  <dig>  after applying sva with  <dig>   <dig> and  <dig> factors. these results confirm that the artificial increase of the class signal by performing sva can be strong enough to have implications in data analysis. moreover, the problem seems to be more severe for a higher number of factors estimated. we did the same analysis with fabatch, again using  <dig>   <dig> and  <dig> factors, where we obtained the misclassification error rates  <dig> ,  <dig>  and  <dig> , respectively, suggesting that fabatch does not suffer from this problem in the investigated context.

discussion
in this paper, with fabatch, we introduced a very general batch effect adjustment method for situations in which the batch membership is known. it accounts for two kinds of batch effects simultaneously: 1) coarse, easily observable batch effects expressed as location and scale shifts of the variable values across the different batches; 2) more complicated batch effects, modelled by latent factor influences, which affect the correlations between the variables in the batches. the model behind fabatch is an extension of the model underlying combat, where the latter is designed to address the first kind of the batch effects described above. fabatch uses latent factors to model batch effects in the spirit of sva. in contrast to sva, however, fabatch assumes that the batch membership of the observations is known and that the latent factor models are batch-specific, i.e. that in each batch different sources of heterogeneity may operate. in appendix a. <dig>  it is shown that in the sva model it is implicitly assumed that the distribution of the vector of latent factors may be different for each observation. this is a very general assumption. however, it is unclear how well sva can deal with specific datasets originating from such a general model, because the link between the singular value decomposition used in the estimation and this model is not evident. our algorithm by contrast was explicitly motivated by its underlying model, which is quite general and reasonable. in cases in which the data in question is approximately uniform with this model, fabatch should perform reasonably well. in the form presented here, fabatch is only applicable in the presence of a binary target variable. however, it can also be extended to other types of target variables. for example, when having a metric target variable one could use ridge regression instead of l2-penalized logistic regression when protecting the biological signal of interest in the factor estimation.

in an illustrative analysis we applied the batch effect adjustment methods studied in the main analyses in the important case of cross-batch prediction. fabatch—other than fsva—performed reasonably well in this example. moreover, by a small simulation study we obtained evidence that the artificial increase of the measured biological signal of interest faced when performing sva can have noticeable negative effects in applications. in fabatch, this artificial increase is prevented by employing the following idea: for each observation the parameters involved in the transformations performed for protecting the biological signal are estimated using training data, which does not contain the respective observation to be transformed. this idea may also be applied in the protection of the biological signal of sva, i.e. when multiplying the variable values by the estimated probabilities that the corresponding variables are associated with unmeasured confounders, but not with the binary variable representing the biological signal. more precisely these probabilities could be estimated in a cross-validation procedure—taking up again the idea also used in fabatch.

all batch effect adjustment methods considered in this paper, together with the corresponding addon procedures and all metrics used in the comparisons of the methods, were implemented/adopted into the new r package bapred available online from cran  <cit> .

CONCLUSIONS
fabatch leads to a good mixing of the observations across the batches in comparison to other methods, which is reassuring given the diversity of batch effect structures in real datasets. in the case of very weak batch effects and in the case of strongly outlying batches, the observed biological signal may be slightly altered by fabatch. in our extensive comparison study of existing and new batch effect correction methods, we found that no method was best with respect to all metrics. it is thus difficult to formulate general recommendations: the choice of the method may primarily depend on the goal of the researcher as reflected by the choice of the metric. performing no batch effect correction at all is in any case not recommended.

additional files
additional file  <dig> 
this file contains all supporting information referenced in the paper. a description of existing batch effect adjustment methods. b plots used in verification of model assumptions. c visualizations of the batch effects in the used datasets. d target variables of datasets used in comparison study. e reasons for batch effect structures of datasets used in comparison study. f boxplots of the metric values for simulated datasets per method and simulation scenario. g tables of the means of the metric values and their ranks for simulated datasets per method and scenario. 



additional file  <dig> 
this folder contains all necessary r-code to reproduce and evaluate the real-data analyses and simulations, as well as rda-files enabling fast evaluation of the corresponding results. 



abbreviations
avedistaverage minimal distance to other batch

batchclasscorbatch- and class-specific correlation structures

batchcorbatch-specific correlation structures

comcorcommon correlation structure in all batches

corbeafmean pearson’

s correlation of the variable values before and after batch effect adjustment; diffexprperformance of differential expression analysis

fsvafrozen sva

fsvaexactexact fsva algorithm

fsvafastfast fsva algorithm

klmetrkullback-leibler divergence between density of within and between batch pairwise distances

pvcaproportion of variation induced by class signal estimated by principal variance components analysis

sepscoreseparation score

skewdivskewness divergence score

competing interests

the authors declare that they have no competing interests.

authors’ contributions

rh wrote most of the manuscript, developed fabatch together with dc and performed the statistical analyses. dc and alb contributed significantly to the manuscript and the study designs. all authors read and approved the final manuscript.

