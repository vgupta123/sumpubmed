BACKGROUND
evolutionary comparative analysis
in comparative biology, inferences are made from patterns of similarities and differences. contemporary genome analysis relies heavily on such comparisons, e.g., as in the way that human genome annotation has relied on comparisons with the mouse and chimp genomes. evolutionary biologists have developed a specialized methodology for comparative analysis that draws on modern methods of statistical inference and that is  widely applicable to all sorts of biological data – from molecular sequences and protein activities to morphologies and behaviours  <cit> .

the evolutionary approach provides a framework to convert problems of how to analyze similarities and differences into well posed questions about rates of various possible evolutionary transitions along the branches of a tree . as genome analysis and other systematic types of comparative analysis mature, and researchers seek to extract the maximum amount of useful information from available data, these methods of "evolutionary comparative analysis" have become increasingly important  <cit> .

the character-state data model
the methodological generality of evolutionary analysis relies on what we refer to here as "the character-state data model", a kind of entity-attribute-value model. in the character-state data model, observations or measurements on a set of entities called "otus"  are represented as the observed values, called "states" , of a set of underlying attributes, called "characters". for a protein sequence alignment, for instance, each otu  is a protein, the homologous characters  are the alignment columns, and the state  of each otu for a particular character is an amino acid or a gap . characters for which the states are finite are discrete characters; continuous characters are also possible . in biology, data sets often are incomplete, thus the state of a character may be denoted as "missing" .

the assignment of characters is based on homology indicative of common ancestry. the presence of different states for the same  character thus implies historical changes  from a common ancestral state. the paths of change are not all independent, but follow the branchings of a phylogenetic tree. that is, in evolutionary analysis, hierarchical clustering of data is not merely a heuristic tool, but reflects a generative model, an explicit or implicit model of character-state transitions that take place along the branches of a tree. the simplest model is that any change from one state to another observed state has the same probability or cost. more complex models may introduce restrictions on allowed transitions, or introduce non-uniform costs for possible transitions, or may relate the rates of transitions to a mechanistically inspired model .

the nexus format
nexus  <cit>  is a data exchange file format for character-state data and trees, used in software such as mesquite  <cit> , paup*  <cit> , and mrbayes  <cit> . the terminology used in nexus files, and in the nexus standard, draws on the implicit character-state data model, e.g., columns of comparative data are referred to as "characters" , for which each otu has a "state". note, however, that the otus in a nexus file are referred to as "taxa"  rather than as "otus". figure  <dig> depicts the relationship between an example nexus dataset  and the character-state-data model.

while the name "nexus" is capitalized by convention, nexus keywords are  case-insensitive. however, for purposes of clarity we capitalize the keywords used to designate nexus blocks, such as taxa, characters, and trees.

although nexus files initially were used mainly for morphological data, the developers of nexus allowed for diverse types of data, including provisions for such things as frequency distributions of states , as well as commands specific for molecular data, so as to specify codon locations and to define alternative genetic codes. as a result, nexus continues to provide a rich way to represent diverse types of data that might be used in a comparative analysis of genes, proteins, or genomes. nexus files often include several types of information, the most common being:

• a discrete character matrix 

• a continuous character matrix

• one or more rooted or unrooted phylogenies, each with  name and weight

• a distance matrix

• a description of constraints on, or costs of, transitions between states of characters

• other assumptions such as weights for characters

within a nexus file, data are organized into blocks, such that  one block corresponds to one type of data. the complete list of blocks is given  in table  <dig>  the most commonly used blocks are taxa , characters  and trees. the use of a data block – essentially a characters block for which the otus have not been pre-defined via a taxa block – is deprecated.

 <dig> the data block format, though commonly used, is deprecated so as to encourage use of a separately declared list of otus in a taxa block.

within a block, information is organized into commands and their arguments, where arguments may either be data or subcommands that refine the scope of the command. for example, a characters block could contain the three command-argument pairs shown below, each ending with a semi-colon:

begin characters;

   dimensions nchar=12;

   format datatype=protein gap=-;

   matrix

      taxon <dig> isptcap--rsv

      taxon <dig> eapkcapgvglv

      taxon <dig> eapkcapgv-lv

      taxon <dig> qkprcppgvslv ;

end;

a nexus file seems well suited for use as both input and output for the analysis of a single coherent data set with an evolutionary history. for example, it would be appropriate to use a single nexus file to store all of the data associated with a set of tubulin genes that are to be analyzed together in a family-wide analysis, including sequences, species source, expression data, activity data, and so on. however, if one is studying both the tubulin gene family and the actin gene family, two nexus files are appropriate.

the original nexus standard provides for extensibility via "private" application-specific blocks. this idea, as successfully used in programs such as paup*  <cit> , is that all of the commands necessary for batch processing of a file can be added to the file itself in a private application-specific block .

benefits of an open-source perl interface to nexus
the nexus file format is used by several programs or packages that molecular evolutionists find useful, including mesquite  <cit> , mrbayes  <cit> , and hyphy  <cit> . as evolutionary analysis becomes increasingly common in bioinformatics workflows, the need will grow for formats such as nexus that store data and trees together.

more importantly, the scope of evolutionary analysis – not merely the number of users – continues to expand. that is, while the mainstays of evolutionary analysis in the past were molecular sequence characters and discrete morphological characters, in recent years evolutionary methods have been applied to the analysis of data on genomic gene content  <cit> , gene expression  <cit> , and even "function", both at the level of a whole gene   <cit>  and at the level of individual sites within a protein  <cit> . thus, it is significant that the nexus file implements  a very flexible entity-attribute-value model , which means that it can be applied to diverse types of data.

existing software that uses nexus is mostly embedded in applications code such as paup*  <cit> . some exceptions are the nexus methods provided by open-source toolkits such as bioperl  <cit> , and by ncl  <cit> , for "nexus class library", a special purpose library written in c++. most such implementations provide limited coverage of the nexus standard, and focus only on input and output of files, without providing a toolbox of methods. more complete implementations of nexus that provide a richer set of functions are needed, as in the java source code included with mesquite  <cit> . a perl implementation would be valuable due to the popularity of perl with biological programmers, who value its ease of use.

implementation
object-oriented perl practices
bio::nexus is written as a set of object-oriented  perl modules. an oo interface is ideal for two major reasons. first, nexus files are syntactically and organizationally complex, and oo perl provides an easy-to-use abstraction. users, for example, can rename taxa throughout a nexus file by using the rename_otus method and providing a map of old names to new names, without worrying about the details of how that object is structured or where the names are stored. by allowing bio::nexus to handle the file formatting, users can focus on manipulating and interpreting data. second, an oo implementation is also useful when data can be organized hierarchically. for example, a bio::nexus::tree  is part of a bio::nexus::treesblock, which is a bio::nexus::block, which is part of a bio::nexus object. in this way, all block types can inherit generic functions  from the bio::nexus::block class. the oo structure also means that a bio::nexus object "knows" what it comprises, so that when a method is called , the api automatically calls all the necessary methods at lower hierarchical levels .

the bio::nexus api contains  <dig> modules in  <dig> files, organized in a way that reflects the structure of bio::nexus objects: within the "bio" directory  are the nexus base package and a directory called "nexus", which in turn contains the remaining  <dig> packages that define parts of the nexus class. in most cases, these  <dig> packages represent different block types, although there are some exceptions, e.g. there are separate tree and node classes that allow tree methods to be separated from the complexities of nexus files.

the  <dig> bio::nexus modules define  <dig> methods, of which  <dig> are public methods, meaning they provide the api. the modules contain  <dig> lines of code,  <dig> lines of pod , and  <dig> lines of embedded comments for a total of  <dig> non-whitespace lines.

nexus parsing and the nexus standard
nexus files may be thought of as a series of commands, where each command ends with a semicolon:

<command_word>  ;

the one exception is that nexus files must begin with the string '#nexus', without quotation. nexus commands may be as simple as 'end;', which is used to indicate the end of a block, or as complex as the matrix command, which can take an entire multiple sequence alignment as its argument list. the bio::nexus parser reads in an entire nexus file and breaks it into tokens, thereby making whitespace unimportant except as a delimiter. spaces, tabs, and newlines are treated equivalently as delimiters, and multiple consecutive whitespace characters are treated as one. it is therefore possible for an entire nexus file, including a multiple sequence alignment and tree, to be on one line. the rare exception is that users who wish to store an interleaved multiple sequence alignment must use newlines to denote the end of each alignment row.

interpreting the nexus file format requires a sophisticated, context-sensitive parser. in the nexus standard, a token is defined as a word  or a single punctuation character {} /\, ; : = * ' ” ' + - < >). single or double quotation marks, however, cause the enclosed to be treated as a single 'word', such as 'human  '. the underscore is taken to be synonymous with a single space; therefore, 'human alpha tubulin' and human_alpha_tubulin are indistinguishable to the bio::nexus parser, although the latter format is always used for output.

when not quoted, square brackets denote comments, therefore, the string

   human  

if unquoted, would be interpreted as three words and one comment. comments may be nested, as in ], in which case all square brackets must be paired, although nested comments have no special meaning per se. bio::nexus attempts to keep track of the location of comments and reassociate them with the correct block when writing output. however, as bio::nexus can be used to add, remove, and alter blocks or commands, it may be impossible to place a comment adjacent to its original command or block. for this reason , comments should not be used as an ad hoc method of storing data.

the nexus format often is extended by application-specific or "private" blocks as allowed in the original format description  <cit> . if the bio::nexus parser encounters an unfamiliar block type , an unknownblock object is created that stores  the content of the unfamiliar block; this content is then included appropriately in the output stream whenever the bio::nexus object is written out.

if the parser encounters an unfamiliar command , however, an error results. this behavior is desirable for two reasons. first, unfamiliar commands often represent syntax errors or misspellings. second, commands may be used to change how data are interpreted, thus ignoring an unfamiliar command without throwing an error could mislead users to assume that the data have been interpreted correctly.

structure of bio::nexus objects
the structure of bio::nexus objects reflects the organization of the nexus file format, as well as the implicit data models used in bioinformatics. for this reason, some information is stored literally, such as the order of blocks in a file or the taxa listed in a taxablock, while some information is interpreted, such as the new hampshire  tree string in a treesblock. the handling and placement of comments in nexus files is defined ambiguously by the standard. bio::nexus keeps track of comment order and position relative to blocks, rather than relative to commands or the data they may contain. the exception is the case of tree strings, where square-bracketed strings are used to store node-associated data .

at the topmost level, a bio::nexus object comprises an ordered list of block objects and block-level comments . block objects may contain comments, simple attributes , and objects . objects are used for data with complex structure or when data may require complex manipulations. both are true of trees.

the organization of the bio::nexus object is based on specific data models. a set of data is defined by a list of otus , or unique identifiers, provided in a taxablock object. all other data provide either relationships between otus , or attributes of specific otus . some components of bio::nexus objects are also based on specific data models. for example, tree objects implicitly represent directed acyclic graphs, and therefore are represented by a hierarchy of node objects with parent-child relationships. charactersblock objects are based on the character-state data model already described: each taxon  is stored as a taxunit object that has an associated sequence, or one state  for each character . characters that are polymorphic c") or unresolved  may have multiple states for each character. if a frequency distribution is known for characters with multiple states, that is also stored.

RESULTS
examples of utility code: re-naming, re-rooting, and format conversion
bio::nexus facilitates rapid development of utility scripts and "glue code" for typical bioinformatics tasks such as creating formatted files, manipulating data in files, converting formats, and developing wrappers. below we provide several examples based on the file "example.nex" , which consists of the following text:

#nexus

begin taxa;

      dimensions ntax=4;

      taxlabels a b c d;

end;

begin characters;

      dimensions nchar=25;

      format datatype=protein;

matrix

   a ikkganlfktrcaqchtvekdggni

   b lkkgeklfttrcaqchtlkegegnl

   c stkgaklfetrckqchtvenggghv

   d ltkgaklfttrcaqchtlegdggni

;

end;

begin trees;

      tree my_tree = : <dig> c:1): <dig> d:1)root;

end;

in the course of carrying out a scientific analysis, researchers will often wish to carry out complex operations that edit, transform or otherwise manipulate data stored in a file. while such steps often can be done "by hand" using a text editor, software tools reduce errors and allow automation. bio::nexus facilitates developing glue code for these operations because, in addition to providing mutators and accessors for the elements of nexus objects, it also provides higher-level methods that perform a composite of operations or that carry out a non-trivial manipulation of data.

re-rooting a tree is a common manipulation that typically is far too complex to carry out by editing a tree string directly with a text editor. in the example of re-rooting shown below, a bio::nexus object is constructed, the manipulation is performed, and the altered object is written out to a new file.

use bio::nexus;

my $nexus_obj = new bio::nexus;

$nexus_obj = $nexus_obj->reroot;

$nexus_obj->write;

datasets can contain multiple trees, in which case this procedure would affect the default tree, unless a different tree is specified by name .

in the example of naming below, a bio::nexus object is constructed, and a translation hash is defined. single letter names are replaced with more meaningful names by calling the rename_otus method. finally, the object is written out to a new file.

use bio::nexus;

my $nexus_obj = new bio::nexus;

my %translate = ;

$nexus_obj->rename_otus;

$nexus_obj->write;

format conversion is a common problem in bioinformatics. formats commonly encountered in evolutionary bioinformatics include phylip, fasta, mega, gcg , and clustalw. although bio::nexus does not does not include high-level methods that directly parse or output formats other than nexus, it simplifies format conversion considerably given that nexus is the most complex format commonly encountered. for instance, in the example below, the protein sequence alignment from example.nex is extracted and written out in fasta format:

use bio::nexus;

$nexus_obj = new bio::nexus;

$char_block = $nexus_obj->get_block;

open;

foreach $otu }){

      print fasta ">", $otu->get_name(), "\n";

      print fasta @{$otu->get_seq()},"\n";

}

in the example below of converting to the format used by the phylip  <cit>  package, an additional line of code is required to get and print the number of taxa  along with the length of the alignment . also, inside the foreach loop that prints the alignment itself, a more complex print command is used to ensure that otu names occupy no more than ten characters, as per the phylip  <cit>  standard .

use bio::nexus;

$nexus_obj = new bio::nexus;

$char_block = $nexus_obj->get_block;

open; # "infile" is the filename phylip requires

print phylip $char_block->get_ntax(). ' ' . $char_block->get_nchar() . "\n";

foreach my $otu  }) {

      printf phylip "%- <dig> s ", $otu->get_name();

      print phylip @{$otu->get_seq,()}, "\n";

}

by calling additional methods, more complex scripts can be developed. for instance, the restriction on name lengths in phylip files may create a problem if the truncated names are non-unique . the problem of preserving long names while using phylip programs can be solved by writing a bio::nexus wrapper that uses nexus as its input and output format: internally the wrapper would use rename_otus to convert otu names to a temporary set of short identifiers , interface with the phylip package, add the phylip-generated results to the nexus object, then use rename_otus again to convert back to the original names before writing out the modified object to a new nexus file.

example of a stand-alone tool: nextool.pl
from the lack of available software tools and the high frequency of non-compliant files in the user community, it is apparent that nexus users typically manage and edit their data files manually using a text editor. however, this is not practical for larger data sets and for large numbers of files. for instance, to re-root a tree by manipulating the tree string directly with a text editor is a daunting task that invites human errors. safe removal of an otu is equally daunting as it is not merely a matter of searching for the otu label and deleting it along with any associated data. as the nexus standard allows taxa to be referenced by a number representing the order in which they were declared, the data for an otu are not always associated syntactically with the otu label; for the same reason, removing an otu changes the system of referencing for all subsequent otus. furthermore, if the otu is the first shown in a character matrix, then--following a convention widely used with sequence alignments – its character states may be used as a reference states such that, for other otus listed below it, only differences are shown . in such cases, deleting the otu is not possible without semantic processing and rewriting of the character matrix.

indeed, the burden imposed by the complexity of the nexus format coupled with the lack of suitable editing tools may be one reason for the under-utilization of nexus files.

to address this problem, we have developed nextool.pl, a script that automates various tasks typically involved in managing, curating and editing data sets in nexus format. the nextool.pl script is found in the exec/directory of the bio::nexus package, and is typically installed in the user's executable path during an automated installation. it operates as a command editor with the syntax:

nextool.pl <input_file>  ]

that is, an output file is generated by carrying out some command on the contents of the input file. useful commands include rewrite , rename_otus , reroot , select, exclude and makesets. the select and exclude commands may operate on blocks, columns , trees, subtrees or otus. for instance, the command

nextool.pl. infile outfile select columns "1– <dig>   <dig>  10–45"

creates an output file "outfile" with only columns  1– <dig>   <dig>  and 10– <dig> selected from the input file "infile". the command

nextool.pl infile outfile makesets bycharstate "isotype a"=" <dig> h"

would add an otu set named "isotype a" including only those otus that have the character state "h" for character number  <dig>  this named set then could be referenced in subsequent operations such as select or exclude. sets can also be referenced in set operations, so that , we could define a set consisting of all otus that have "h" for character  <dig> but do not have "e" for character  <dig> 

example of a web-based application: nexplorer
bio::nexus plays a key role in nexplorer, a web-based program for interactive browsing and manipulation of character state data and trees  <cit> . nexplorer has a 3-tiered design: the front end consists of javascript, html and images, the back end consists of nexus files along with a database of taxonomic information, and the middle layer consists of cgi and bio::nexus, which is used to access and manipulate the data in nexus files. to generate custom views of data or to create subsets of data for further analysis, users need only to upload a properly formatted nexus file to nexplorer. the server responds by generating an image of the data and by mapping such things as javascript pop-up menus to the nodes of tree that allow the user to re-root a tree, exclude or select a subtree, and so on.

discussion and 
CONCLUSIONS
comparison with other implementations
as lewis  <cit>  suggests, developing a library to support nexus fully is difficult due to the flexibility built into the standard. according to maddison et al.  <cit>  writing in  <dig>  "no program can understand more than about 60% of the elements described" by the standard.

to measure the degree of implementation precisely, we have used the backus-naur formalization of nexus provided by iglesias, et al.  <cit>  to generate a list of keywords. the keywords are reserved tokens representing commands and subcommands , some of them  used in several different blocks. the total number of keyword-block combinations is  <dig>  currently bio::nexus provides some support for 80%  of the block types  and 68%  of the keyword-block combinations. the latter number is reflected in the current version number  of the bio::nexus release.

other currently available software libraries to support nexus include ncl  <cit>  and the code available in various bio* toolkits  <cit> . according to the documentation, ncl implements taxa, trees and distances completely, and implements characters and assumptions partially. other implementations typically focus on taxa and trees block, and support common uses of characters blocks without implementing various format options. bio::phylo by rutger vos  <cit>  focuses on taxa, trees and characters. bioperl supports taxa, trees, and characters blocks, but writes data only in the deprecated data block format. the biojava nexus parser handles data, characters, distances, trees, and taxa blocks. the mesquite project  <cit> , also in java, provides a documented nexus api with support for all standard blocks except unaligned.

extensions to the nexus standard
bio::nexus implements a few extensions to the nexus standard. one of these is the convention used in mesquite project files of allowing multiple blocks of the same type, with linking-by-name between blocks. the title command is used to assign a name to a block, and the link command is used to refer to another block by its title, e.g., a trees block with trees inferred from the data in a characters block entitled "gene data" could have the command

   link characters = "gene data";

bio::nexus also implements the nhx  standard of zmasek and eddy  <cit> . nhx expands the original "newick" or "new hampshire" standard, wherein the clades of a phylogeny are represented by pairs of nested parentheses . nhx tree strings incorporate special nexus comments that contain tags specifying additional information about nodes of a tree. the syntax of an nhx comment is , the comment follows the node, and each tag is responsible for carrying specific information about the given node. for example, the "b" tag refers to the branch support  value at the given node, and "t" tag refers to the ncbi taxonomy id. the bio::nexus::nhxcmd module provides the support for reading, manipulation, and writing of the nhx comments. methods in the bio::nexus::node class provide the capacity to add, remove, and edit specific nhx tags and the corresponding values.

future challenges for nexus, bio::nexus and evolutionary informatics
nexus files have been in use for many years. users and developers presumably choose nexus because it is the preferred or required input file for valuable programs , because of the capacity to store trees with data, and because of the expressivity that allows diverse kinds of data to be represented along with constraints or assumptions. as integrative and evolutionary approaches to biological analysis become more common, there will be a growing need for formats that provide the functionality of nexus.

yet serious problems have emerged from the complexity of the standard and the historical lack of software support. first, the standard is so complex that users and developers commonly misunderstand it . because there is no generalized nexus editor, users apparently hand-edit their files using text editors or word processors, leading to typographic errors and to poorly formed files. second, the standard is so extensive, with so many options and so many variations in syntax, that no developer has attempted a complete implementation, except for the developers of a prolog-based parser  <cit> . indeed, some applications support only the deprecated data block format. finally, the nexus grammar is more like that of a natural language and cannot be parsed using conventional scanning-parsing routines, due to the inability to resolve ambiguous tokens prior to extensive semantic processing  <cit> . the next-generation standard to replace nexus should be defined in a formal language, and it should i) be more easily parsed; ii) make use of available technology that facilitates crucial tasks such as validation and editing ; iii) import ontologies for character data ; and perhaps iv) utilize a process-specification language to describe steps in an analysis .

nevertheless, as there is no replacement currently on the horizon, it seems clear that nexus files will continue to be used for years to come. a robust and easy-to-use api such as bio::nexus will make it easier to manage nexus files, to maintain legacy data and convert it to other forms, and– when combined with greater community attention to standards for integrative analyses – will facilitate the transition to future technologies to achieve integration. future plans for bio::nexus, intended to facilitate the ongoing use of nexus and to protect legacy data, include offering  <dig> % support for the standard and common extensions, validation capacity, and object integration with bioperl  <cit> .

availability and requirements
bio::nexus requires perl  <dig> x, available for free download from cpan  <cit> . the current release of bio::nexus is available as an installable package from cpan  <cit> ; the current development version of the source code is available from sourceforge  <cit> . the cpan package includes perl code, test files, documentation, some useful scripts , and examples. on unix-like systems  bio::nexus can be installed using "perl -mcpan -e 'install bio::nexus"'; or on windows systems using ppm . the test suite  comprises over  <dig> test scripts implementing over  <dig> subtests. the documentation, written in pod  format, includes a user manual and a tutorial . the code files also are annotated with pod, hence references for bio::nexus modules and their methods can be generated on the fly using the standard perldoc command.

authors' contributions
tjh helped to design and implement the code, to write the documentation, and to draft the manuscript; cl and wq helped to design and implement early versions of the library and tools; py and vg carried out testing and aided in implementation; as participated in design, implementation and testing, helped to draft the manuscript, and oversaw all aspects of the project; all authors read and approved the manuscript.

supplementary material
additional file 1
figure <dig> nex. the nexus file corresponding to figure  <dig> 

click here for file

 additional file 2
example.nex. a simple nexus file used in the tutorial examples.

click here for file

 acknowledgements
the authors thank john bradley, mark holder, aaron mackey, eugene melamud, and paul lewis for suggestions and bug reports, and mikhail bezruchko for his his work on the test suite. this work was supported by the computational biology program of the national library of medicine , the biological sciences department of hunter college, the howard hughes medical institute undergraduate science education program in biology, and a research centers in minority institutions award . the identification of specific commercial software products in this paper is for the purpose of specifying a protocol, and does not imply a recommendation or endorsement by the national institute of standards and technology.
