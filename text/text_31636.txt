BACKGROUND
experimental high-resolution three-dimensional  structures are available for fewer than one percent of all known proteins of known sequence , and this sequence-structure gap  <cit>  continues to increase. homology modeling  <cit>  or comparative modeling  <cit>  is the only bridge that allows reliable modeling of 3d structure for about 20-40% of the residues in all known proteins  <cit> . this boost of experimental information constitutes an immense achievement of computational biology .

over the last two years, methods have been introduced that for the first time enable reliable de novo prediction of 3d structure for large proteins, i.e. intrudes into realms unreachable by comparative modeling  <cit> . evfold  <cit>  has been succeeding in sustained and reliable predictions of two-dimensional  inter-residue contacts, i.e. the prediction of which residue pairs are near each other in the native protein structure. the success and elegance of the contact prediction through mean-field direct-coupling analysis  <cit>  of evfold  has revived the field . wider application of this new generation of contact prediction tools is enticing, but currently hampered by two problems.

the first problem relates to the amount of sequence information needed, e.g. evfold tends to perform better with 50 k sequences in a family than with 10 k. to put this into perspective: a decade ago, only the 10% largest families had over  <dig> homologues  <cit> , now we have a method for which  <dig> times this may no longer suffice. this is why, e.g. evfold_membrane can predict structures for only tens of families  <cit> . however, these families are so gigantic that they cover some 3-6% of all known sequences.

the second problem pertains to the speed of the new methods and their ease of availability. evfold-mfdca is publicly available, but its implementation requires proprietary interpreter software. psicov has recently been released under the gplv <dig> , but is not optimized for speed . runtimes often exceed tens of minutes . this might be restrictive for large-scale data analysis and for public web service operations such as predictprotein  <cit> . neither evfold-mfdca nor psicov are packaged for convenient installation and usage.

here, we report the release of freecontact, a freely available software that considerably reduces the runtime for evfold-mfdca and psicov and provides convenient debian  <cit>  packages freely, open-source available to all users.

implementation
freecontact is an open-source evfold-mfdca implementation optimized for speed. freecontact can also be parameterized to produce results according to the psicov algorithm, because these two methods share many computational steps. for optimization, we identified the following program components that contribute significantly to runtime: blosum-style weighting  <cit>  of protein sequences in the input alignment , counting pairwise residue frequencies , shrinking the covariance matrix , sparse inverse covariance estimation , and covariance matrix inversion .

speed-up
sequence weights result from computing the percentage sequence identity between each protein pair in a family. our implementation uses standard ×86- <dig> architecture streaming simd instructions  extensions  <dig> . these instructions operate on 128-bit registers, allowing the simultaneous comparison of  <dig> residues . a generic implementation is provided for architectures without sse <dig> instructions. both implementations benefit from multiple cores using openmp  <cit>  to parallelize loops. parallelization of loops through openmp also accelerated the computation of pairwise amino acid frequencies. the usage of single-precision lapack  <cit>  routines accelerated the shrinking of the covariance matrix. we used glassofast  <cit> , a new, fast implementation of the glasso algorithm  <cit>  for sparse inverse covariance matrix estimation, developed in part for its usefulness in protein contact prediction. glassofast was used with single-precision numbers and gnu compiler collection  auto-vectorization . lapack routines  inverted the covariance matrix.

parameters
freecontact is controlled by the following parameters . command-line usage of freecontact is facilitated by bash auto-completion  <cit>  for its parameters and their arguments.

freecontact command-line parameters controlling contact prediction.

we provide the choice of parameter profiles through the “--parprof” command-line option to conveniently set freecontact options to recommended parameterizations of evfold-mfdca and psicov: the “evfold” argument sets evfold-mfdca compatibility mode, while “psicov” sets psicov “improved results” compatibility mode, and “psicov-sd” sets psicov “sensible default” compatibility mode . this allows freecontact to function as an accelerated replacement for both evfold-mfdca and psicov.

differences
one of the differences between the freecontact and the original implementation of psicov is the interpretation of the blosum-style clustering percentage for sequence weighting. the original implementation groups sequences with a similarity larger than  the given threshold, while freecontact groups at larger-or-equal  the threshold. this technical detail matters as it allows freecontact to share this program component between its implementations of psicov and evfold-mfdca. the performance of psicov is affected minimally by this detail .

a novel addition is the optional time limit that freecontact can impose on inverse covariance estimation. the rationale was the observation that this estimation can take exceedingly long. if the time limit is exceeded, the prediction aborts with a dedicated error code.

an important difference between the original evfold-mfdca and its freecontact implementation is the way in which contact scores are computed. freecontact returns improved “corrected norm” scores  <cit>  instead of the original “direct information”. the reason for this is that “corrected norm” scores have been reported to be superior  <cit> .

build
freecontact was compiled with the gnu compiler collection , and it was linked with the threaded version of the linear algebra software atlas  <cit>  . atlas provides a highly efficient machine-specific implementation of blas  <cit>  and lapack  <cit> ; it automatically adapts itself during the build process to the host architecture in order to optimize performance. freecontact can be linked with other blas and lapack implementations. psicov was compiled with the recommended “-m <dig> –o <dig> -mfpmath = sse -msse <dig> -funroll-loops -ffast-math” options.

availability
freecontact is available under the gnu general public license version  <dig> or later . it is available as a c++ library , along with a command-line executable , and modules in perl  and python . the library, executable, modules, and documentation are available as official debian packages for debian and derivative operating systems  <cit>  - such as ubuntu, bio-linux  <cit>  and cloudbiolinux  <cit>  - from debian med  <cit> . all packages can be easily installed with the common package management tools. tar gz downloads are available from the rostlab ftp site  <cit> .

RESULTS
psicov has two notable run modes: “improved results” and “sensible default”. the first  has been reported to be slightly more accurate and 2– <dig> times slower than the second  <cit> . we have tested the runtime of the freecontact implementation  of these modes , and of evfold-mfdca  on  <dig> proteins of the published test set of psicov . we compared runtimes to psicov version  <dig> . the original implementation of evfold-mfdca was unavailable for testing due to its dependency on proprietary software. ten proteins of the complete psicov test set of  <dig> were excluded from the evaluation, because at least one of the methods failed to return results, due to either excessive run time, or insufficient total alignment weight. psicov was allowed to run for at least three hours. freecontact was run with the default 30-minute time limit on the inverse covariance estimation step. all tests of freecontact were carried out using the “freecontact” perl module, on a computer with 32 gb ram and two 6-core amd opteron  <dig> processors running at  <dig>  ghz. freecontact was run on a single thread unless indicated otherwise.

performance
the most time-consuming step of the original psicov implementation is the sparse inverse covariance matrix estimation. in fact, this step is responsible for a large fraction of the runtime. the next most cpu-intensive steps are shrinking the covariance matrix, sequence weighting, and pairwise residue frequency calculation .

sequence weighting in freecontact was accelerated over 12-fold on a single thread, compared to psicov . parallelization yielded further speedup. on the 12-core test machine,  <dig> ,  <dig> , and  <dig> -fold average speedups were observed when using freecontact with  <dig>   <dig>  and  <dig> threads, respectively . the freecontact computation of pairwise residue frequencies was as fast as psicov on a single thread . parallelization yielded  <dig> ,  <dig> , and  <dig> -fold speedup on  <dig>   <dig>  and  <dig> threads, respectively .

our code, taking advantage of the optimized atlas implementation of single precision lapack routines, sped up the covariance matrix shrinking step over five-fold, compared to psicov . fc.psicov performed the inverse covariance matrix estimation step on average 8-times faster than psicov , due to the optimized glassofast routine. overall, fc.psicov, fc.psicov-fast, and fc.evfold were  <dig> ,  <dig>  and 226-times faster than psicov on a single thread, respectively .

precision
we measured the performance of freecontact in the following way. two residues were defined to be in contact when their cβ-cβ distance  was below 8 Å . in this debatable threshold, we followed the procedure introduced by the critical assessment of protein structure prediction   <cit> . it was also used for the original psicov publication  <cit> . similarly, we monitored a score that had also been introduced by casp, namely the precision in contact predictions for pre-defined thresholds in the number of contacts predicted. the thresholds were chosen as the top l/n  contacts, with n = . we distinguished different regions of sequence separation ). all of those choices followed the casp procedure. many readers might argue for problems with those choices. however, for our purpose the casp-like evaluation of contact prediction sufficed to establish that the freecontact implementation of psicov and evfold-mfdca did not come at the cost of performance.

our assessment showed that the re-implementation of psicov and the switching of some calculations to single precision did not significantly affect precision  . the small differences observed were entirely caused by switching the relational operator in sequence weighting from larger  in the original psicov to larger-equal  in fc.psicov . switching back to the original larger  resulted in identical precision .

mean precision values  for the top-l/n, l = length of target protein, n =  contacts divided by sequence separation ranges  > sep, j, i residue positions, sep = , where the cβ-cβ distance  is less than 8 Å.

we could not compare the performance of the original implementation of evfold-mfdca with ours , due to the former’s dependency on proprietary software. we noted, however, that fc.evfold was the fastest of the four methods tested, and assessed on the psicov test set, the immense gain in speed appeared to come with good performance: fc.evfold outperformed the other three methods at certain top-l contact and sequence separation ranges .

interoperability
freecontact is not limited to the command line or c/c++ programs. its full speed and features are available to perl and python scripts as well, through extension modules distributed with the software. freecontact supports bioxsd  <cit>  – the proposed xml data-exchange format for sequences, alignments, and features – as an option for output formats. this facilitates its integration into workflows and incorporation into web services. we plan to support bioxsd input as well, and release a freecontact web service in the near future.

CONCLUSIONS
freecontact is a fast replacement for evfold-mfdca and psicov, offering significant acceleration on common hardware. the implementation takes full advantage of standard ×86- <dig> features such as sse <dig> instructions and multiple cores. the speed increase is important for large-scale protein contact or protein-protein interaction prediction projects, as it leads to significant savings through shorter runtimes. we anticipate providing updates to freecontact as the algorithms are developed.

availability and requirements
• project name: freecontact

• project home page: http://rostlab.org/owiki/index.php/freecontact

• operating systems: unix-like 

• programming language: c++, fortran

• other requirements: autotools, boost c++ libraries, blas, lapack, xerces c++, codesynthesis xsd 

• license: gplv <dig> or later

• any restrictions to use by non-academics: none

abbreviations
2d: two-dimensional; 3d: three-dimensional; bmbf: bundesministerium fuer bildung und forschung; casp: critical assessment of protein structure prediction; ebi: european bioinformatics institute; fc: freecontact; gcc: gnu compiler collection; gplv3+: gnu general public license version  <dig> or later; pdb: protein data bank; sib: swiss institute of bioinformatics; simd: single instruction multiple data; sse2: streaming simd extensions 2; tum: technical university of munich, germany.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
lk programmed freecontact, created extension modules, packaged the software, coordinated the project and drafted the manuscript; tah advised on evfold-mfdca implementation and reviewed the manuscript; mk contributed to the development of the freecontact xml schema, advised on interoperability, reviewed and edited the manuscript; dsm reviewed and edited the manuscript; br contributed to the concept, reviewed and edited the manuscript. all authors read and approved the final manuscript.

authors’ information
lk is a debian developer and an active member of the debian med  <cit>  team.

supplementary material
additional file 1
fc.psicov vs. psicov precision plot. precision of fc.psicov plotted against psicov, for the test set of  <dig> proteins. precision values for the top-l, l = length of target protein, contacts with separation range  >  <dig>  where the cβ-cβ distance  is less than 8Å.

click here for file

 additional file 2
pdb codes of target proteins. list of  <dig> pdb codes of target proteins used for testing. a subset of the test protein set of psicov.

click here for file

 additional file 3
distribution of target protein alignment sizes and lengths. alignment size of the  <dig> target proteins plotted against the target sequence length.

click here for file

 additional file 4
fc.psicov> vs. psicov precision plot. precision of fc.psicov> plotted against psicov, for the test set of  <dig> proteins. fc.psicov> uses “>“ for the sequence clustering threshold, like psicov. precision values for the top-l, l = length of target protein, contacts with separation range  >  <dig>  where the cβ-cβ distance  is less than 8Å.

click here for file

 additional file 5
fc.psicov+ vs. psicov precision plot. precision of fc.psicov+ plotted against psicov, for the test set of  <dig> proteins. fc.psicov+ is fc.psicov , run with slightly higher sequence clustering thresholds to compensate for the “>“ comparison used by psicov. precision values for the top-l, l = length of target protein, contacts with separation range  >  <dig>  where the cβ-cβ distance  is less than 8Å.

click here for file

 acknowledgements
we thank programmers who provide their work under a free license: our work stands upon their shoulders, and would not have been possible without them. we thank timothy karl  for invaluable help with hardware and software and marlena drabik  for administrative support. lk and br were supported by a grant from the alexander von humboldt foundation through the german ministry for research and education . mk was supported by a grant from the research council of norway . we thank rolf apweiler , amos bairoch , helen berman , phil bourne , ioannis xenarios , and their crews for maintaining excellent databases, and all experimentalists who enabled this work by making their data publicly available.
