BACKGROUND
for decades it has been known that parts of eukaryote genomes are repetitive. the major fraction of repeats are transposable elements, which are spread throughout the genomes in an interspersed fashion and make up approx. 50% of the human genome  <cit>  or even higher percentages in plant species. transposable elements are classified in three groups according to their mode of mobilisation : ltr retrotransposons , non-ltr retrotransposons, and dna transposons. they are well described by their sequence features as analysed with molecular genetics methods and by sequence comparison. however, the molecular mechanisms of transposition are in most cases not fully understood and the elucidation of their functions is still a matter of discussion. in addition, there are more questions than answers regarding the origin of transposable elements and their role in evolution, especially their contribution to modification of genomes. the genome wide identification of transposable elements is not only an essential step in the annotation of genomes but also offers an opportunity to obtain in depth knowledge on features of transposable element families.

repeat detection is a well studied problem in bioinformatics. it is mostly based on sequence analysis. a multitude of computational tools have been developed for an automated annotation of repeat families in sequenced genomes. probably the best known program is repeatmasker  <cit> . it screens dna query sequences for interspersed repeats and low complexity dna sequences. precompiled sequence libraries and special scoring matrices are used to detect similar copies in the query sequence. therefore, repeatmasker is the first choice for repeat annotation in genomes, in which repeat families have already been well characterized, although annotating vertebrate genomes takes days of calculation time on a single computer.

transposable element families are reported to be lineage-specific, e.g. half of all human repeats arose after the divergence of mouse and human and most repeats in the mouse genome are not found in the human genome  <cit> . repeatmasker's repeat libraries contain lots of repeat families from model organisms, while repeat libraries for non-model organisms exist with only limited curation  <cit> . in addition, transposable elements within a family might be highly divergent depending on the time of activity of the source repeat and in these cases identification by sequence comparison methods is not always successful. this holds especially when the search is performed over species borders. therefore, automated de novo methods for repeat detection are desirable. once for conducting a fast repeat detection, and additionally to speed up the cumbersome process of generating repeat libraries.

in most cases de novo methods for finding repeats start with a self-comparison to detect sequence similarities, followed by clustering methods to group related sequences into families. a number of widely used programs are already available for this task, e.g. reputer  <cit>  , recon  <cit> , rap  <cit>  and piler  <cit> .

besides their repetitive nature, most classes of transposable elements are characterized by more specific constraints. these can be, for example, distance and length constraints for repetitive sequences within the repeat element or some motif, that is typical for this repeat element. thus, repeats identified by general repeat detection tools additionally have to be screened in order to find candidates satisfying criteria of their specific class of transposable element. to achieve high quality predictions it is necessary to build software for the individual classes of transposable elements.

ltr retrotransposons make up a large fraction of the interspersed repeats and are well classified by several structural attributes  <cit> . the long terminal repeats  are the hallmark of canonical ltr retrotransposons and make them an ideal target for de novo prediction. full length or nearly full length ltr retrotransposons bear the following features that might be suitable for de novo prediction: ltrs appear in a certain size range and distance between each other. in addition, ltrs are flanked by a short target site duplication . in some species, e.g. in yeast, the ltrs contain a conserved dinucleotide motif at their 5' and 3' end. the internal region contains genes important for retrotransposition and some conserved sequence motifs. however, depending on the age of the element, the ltr sequences, the open reading frames, and motifs are degenerated through mutations.

there are already some software programs specifically designed for the de novo ltr retrotransposon detection problem. ltr_struc  <cit>  is the best known of these programs. ltr_struc has been applied to the genomes of the fruitfly drosophila melanogaster  <cit> , oryza sativa   <cit> , mus musculus   <cit>  and recently pan troglodytes   <cit> . the program ltr_par  <cit>  follows a similar approach but uses a faster algorithm than ltr_struc. the de novo prediction of ltrs is also the first step in the recently developed software  <cit>  , and by the program ltr_finder  <cit> . both programs consider further features of ltr retrotransposons in post processing steps to enhance the quality of the predictions.

the aim of this work is the development of a software tool, that efficiently works on large genomes and in addition is flexible in parameterization in order to be used for various species. our program called ltrharvest implements the same ltr model as ltr_par, but uses a different composition of algorithms and features:

1) it allows for fast computation of large data sets, e.g. vertebrate genomes that are in the order of  <dig> –  <dig> gigabases sequences length.

2) flexible parameter settings allows the user to incorporate biological features like ltr length and distance, tsd length and motifs.

3) ltrharvest accepts sequences in multiple fasta format and is therefore able to work on whole genome shotgun  sequencing data, which usually come as multiple unordered contigs.

4) ltrharvest is open source software that can easily be modified and extended to satisfy further needs.

here we present a comprehensive introduction to the software tool ltrharvest and show several benchmarks. ltrharvest was validated on yeast and fruitfly genome annotations with very good results in both sensitivity and specificity of the predictions. we also compare the quality and performance of ltrharvest to existing software tools ltr_struc  <cit> , ltr_par  <cit> , ltr_rho  <cit>  and ltr_finder  <cit> . this benchmark demonstrates that ltrharvest is considerably faster and memory efficient with a prediction quality as good as or even better then the aforementioned software tools.

implementation
features of ltr retrotransposons used for de novo prediction
an autonomous ltr retrotransposon , that bears all features essential for retrotransposition is composed of two nearly identical ltr sequences which are flanked by tsds of usually  <dig> –  <dig> bp. in some species, small palindromic motifs at the 5' and 3' end of the ltrs are observed. the internal region is composed of several open reading frames, for example the pol gene encodes for protease, reverse transcriptase  and integrase  enzymatic functions and the gag gene encodes structural proteins for the virus-like particle. in rare cases, an env-like gene, that is essential for the retroviruses life cycle, is present in ltr retrotransposons although not essential for retrotransposition. finally, conserved sequence motifs, e.g. the so-called primer binding site  that acts as starting point for the reverse transcription and a purine rich sequence called the poly purine tract  is observed at the 3' end of the internal region. all these features may be used for de novo predictions. however, in a particular genome some or most of the ltr retrotransposons may not have these features due to mutations they acquired during evolution. point mutations lead to full length or nearly full length elements with degenerate ltr sequences as well as disruption of the internal open reading frames. large deletions or insertions of other sequences, mainly from other transposable elements, are often observed and lead to truncated or nested ltr retrotransposons, respectively. such ltr retrotransposon elements lack the canonical features to a certain extent and may be missed with de novo prediction software. another common degenerated product are the so called solo ltrs, which consist of only one ltr due to exchange between the two ltrs flanking an element.

for computational detection, structural attributes of ltr retrotransposons are modeled in ltrharvest following the model of  <cit>  and  <cit>  :

- length constraint: the number of nucleotides between the start and end positions of an ltr is bounded within a range .

- distance constraint: the number of nucleotides separating the start positions of the two ltr instances is bounded within the ranges .

- similarity constraint: 5' and 3' ltr sequences normally show a high sequence identity. for newly inserted ltr retrotransposons the ltr sequences are identical due to the specific reverse transcription mechanism. over evolutionary time, the ltrs can undergo mutations and therefore may differ more or less in their sequences.

- target site duplications : the regions 4– <dig> bp immediately upstream and downstream of the 5' and 3' ltr respectively normally show a high sequence identity, but may have aquired mutational variations over evolutionary time.

- ltr motif: often ltr sequences start and end with a short conserved motif consisting of two nucleotides that form a palindromic sequence when joined, i. e. tg...ca.

in summary, ltrharvest is designed to detect ltr retrotransposon candidates that contain at least two ltrs. solo ltrs, truncated elements that lack one ltr, or elements with large insertions do not fulfill the model underlying ltrharvest. however, such copies can be detected in a postprocessing step e.g. by homology searches of the computed ltr retrotransposons in the genome under investigation.

algorithms and workflow underlying ltrharvest
the first step in the work flow of ltrharvest  is the construction of an enhanced suffix array for the genome or chromosome under consideration. as input, ltrharvest can also handle sequences in multiple fasta format, such as those from wgs sequencing data. ltrharvest considers each sequence of a  fasta file independently. that is, it does not search across boundaries of a sequence. ambiguous characters  are treated such that they do not match anywhere .

we use the program suffixerator which is part of the genometools  <cit> . this enhanced suffix array requires  <dig> n bytes of memory, where n is the length of the input sequence. in contrast to other software for ltr retrotransposon prediction the enhanced suffix array is stored on file. thus the most time consuming preprocessing step is separated from the ltr detection phase. this saves considerable time when processing the same genome with different parameter settings.

the software tool ltrharvest maps the enhanced suffix array into the main memory and begins searching for maximal exact repeats, using the linear time algorithm of  <cit> . the minimum length of the maximal exact repeats can be specified by the user. maximal exact repeats satisfying user defined length and distance constraints are further processed to determine degenerated repeats. this is done by extending the seeds to the left and to the right by the greedy dynamic programming algorithm of  <cit> . this algorithm, called x-drop extension algorithm, runs considerably faster than traditional dynamic programming algorithms, while still delivering optimal alignments. the user defined drop-off parameter x allows to prune the search space: the smaller x, the smaller the search space and the more similar the aligned regions are. for maximum flexibility, we implemented the x-drop algorithm with user defined scores for deletions, insertions, and replacements.

the degenerated repeats, called candidate pairs, are then subject to the detection of ltr retrotransposon specific features, namely tsds and palindromic ltr motifs. both features are optional. tsds of a user specified minimum and maximum length are searched in the left and right vicinity of the 5' and 3' instance of a candidate pair, respectively. to efficiently search for tsds, ltrharvest extracts the corresponding two sequence sections from the genome. we consider the smaller of these sequence sections a reference and the larger a query. for the reference, ltrharvest constructs the suffix array in main memory and runs the standard search algorithm of  <cit>  to find all exact matches of the query and the reference with length greater than or equal to the minimum tsd length. the tsd-search  rejects all candidate pairs lacking the tsd. all other candidate pairs are processed further.

the palindromic ltr motif consists of two pairs of two nucleotides and an allowed number of mismatches between these. if the optional tsd filter is switched off, all candidate pairs are searched for this motif using a linear scan of the sequences at the outer boundaries of the candidate pair. in case the tsd filter is switched on, the candidate pairs with tsds are searched by a simple character comparison at the tsd boundaries. a candidate pair without the palindromic ltr motif is rejected. all other candidate pairs are further processed.

finally, ltrharvest checks for each remaining candidate pair whether the user specified ltr distance and length constraints are satisfied. additionally, it is checked whether the ltr sequences including the tsds and motifs  have a user defined minimal sequence identity. this is calculated by the greedy alignment algorithm of  <cit> .

if all filters are passed, then the candidate pair is a predicted ltr retrotransposon. ltrharvest reports its start and end position as as well as some additional information of the prediction  in tabular format, in gff format   <cit>  and/or fasta format.

RESULTS
rationale for usage of ltrharvest
as outlined before, ltrharvest is designed for fast detection of ltr retrotransposons in larger genomes. the computationally expensive step of building the enhanced suffix array is carried out before the search of ltr pairs and reporting of ltr retrotransposon candidates. for example, building the enhanced suffix array for each of the  <dig> human chromosomes  takes approximately one hour. however, searching for ltr retrotransposon candidates takes only minutes. so, the user can easily and within reasonable time run several predictions for different parameter sets.

flexible parameters are of great advantage in case the user has previous knowledge about the common features of ltr retrotransposons in the species under investigation. this knowledge may come from the annotation results of a closely related species or from several ltr retrotransposons already sequenced in the species under investigation. in ltrharvest parameters can be adjusted to meet the species specific attributes of ltr retrotransposons.

the high quality annotations of transposable elements in saccharomyces cerevisiae  <cit>  and of drosophila melanogaster  <cit>  illustrate such species specific constraints. for example, in yeast  <dig> of  <dig> ltr retrotransposons are full length or nearly full length elements  <cit>  and are suitable for de novo prediction. these yeast ltr retrotransposons were identified by sequence comparison to  <dig> ltr retrotransposon families and share > 70% sequence identity to the respective query sequence. average size of the ltrs and of full length copies is quite similar between the ltr retrotransposon families. nearly all of the  <dig> full length or nearly full length elements contain a tsd. in contrast,  <dig> ltr elements were annotated in drosophila melanogaster and grouped into  <dig> families  <cit> .  <dig> of the  <dig> ltr elements were classified as 'full length' elements, while all elements less than 97% of the length of the canonical member of their family were classified as partial elements. pairwise comparison of members within these families showed > 92% sequence identity  <cit> . in another study the comparison of ltr retrotransposon elements to canonical sequences showed higher divergences of up to 17%  <cit> . the size of the canonical elements of the  <dig> families varies between approx.  <dig> and approx.  <dig> bp  <cit> . tsd are observed within all ltr retrotransposon families, but sequence motifs at the 5' and 3' end of the ltrs are present in some but not all ltr retrotransposon families  <cit> . therefore, the adjustment of parameter settings is important for de novo prediction and ltrharvest allows for flexible parameter choices set by the user. of course, all filters can be switched off if desired.

currently there are hundreds of genome sequencing projects for eukaryote species  <cit> . so the number of large sequence sets with unknown species specific features of ltr retrotransposons is increasing. ltrharvest is designed to be used on such genome data sets. it can handle multiple fasta files from whole genome shotgun  sequence projects. in a typical trial on a genome, where limited or no biological features of ltr retrotransposons are known, flexible filter settings are of advantage in order to get an optimal result. the rationale of parameter optimization can be outlined as follows: the length and distance constraints regarding the ltrs should be set first. a major impact on the prediction result is obtained by setting proper parameters for seed length and x-drop extension of initial hits and similarity constraints. the user can either search in a strict manner to predict evolutionary young elements, where ltrs are nearly identical or relax the filters so that degenerated ltrs are also reported. the filters for tsd detection and ltr motifs should only be varied when special features of these parameters are known in advance.

when applying ltrharvest  to genomes with limited previous knowledge, a postprocessing is highly recommended to get rid of parts of the false positives. this can be carried out by various methods:

- sequence clustering of the reported predictions, e.g. by running vmatch, will bin most true positives in clusters while most false positives appear as singlets. the probability for a hit being a true positive prediction is increased if this sequence is located in a cluster. the division of sequences into clusters gives additional information about evolutionary relations of ltr retrotransposon families and their specific features or can serve as a start point for phylogenetic studies.

- sequence based search for ltr specific protein domains  or for sequence motifs .

- sequence comparison of the reported hits to repbase  <cit> .

like other de novo prediction software, ltrharvest predicts only full length or near full length elements showing canonical features like ltrs, tsds and distance constraints. once identified, the predicted ltr elements can be used in sequence similarity searches for the detection of further ltr retrotransposons including old, highly divergent, partial and nested ltr sequences as well as solo ltrs.

outline of the benchmark tests
for the evaluation of ltrharvest we performed two independent benchmarks. as benchmark sets we selected annotations of ltr retrotransposons from saccharomyces cerevisiae  <cit>  and drosophila melanogaster  <cit>  for the following reasons:

- the main body of the reference data was annotated by sequence comparison and not by other de novo prediction programs, that might have biased the reference set for 'easy to predict cases'.

- as the de novo predictions delivered by ltrharvest strongly depend on the detection of the 5' and 3' ltrs, we determine the specificity and the sensitivity of the result by comparison to individual ltr retrotransposons and not by comparison to consensus sequences of ltr retrotransposon families.

- as outlined above, ltrharvest cannot predict partial elements that lack parts of the ltrs or solo ltrs. 'full length' ltr retrotransposon elements were extracted from the reference datasets according to the definitions given in the respective annotations  <cit> .

- for the d. melanogaster we decided to work on the well documented data set of release  <dig>  <cit>  although release  <dig> and  <dig> are already available and additional ltr retrotransposons were described by  <cit> . however, most of the additional elements are small fragments or are located in nested regions and therefore would not have been a target for ltrharvest.

the comprehensive survey of retrotransposons of s. cerevisiae has  <dig> known full length ltr retrotransposons  <cit>  and is available from the voytas lab homepage  <cit> . unfortunately, there is no exact description of which version of the yeast genome was used by kim et al.  <cit> , but the annotation has probably been conducted on sequences released before oct. 1st,  <dig>  archived genome sequences were obtained from the ftp repository of the saccharomyces genome database   <cit>  and can also be found at  <cit> .

the release  <dig> genomic sequences of d. melanogaster were obtained from the berkeley drosophila genome project  ftp server  <cit> . this release is the first high-quality complete euchromatic sequence of the d. melanogaster genome and was used in the comprehensive genome-wide survey of transposable elements  <cit> . the d. melanogaster ltr retrotransposon annotation from kaminker et al.  <cit>  lists  <dig> ltr families with  <dig> ltr elements. assuming that canonical elements represent full-length active copies, kaminker et al.  <cit>  defines any element less than 97% of the length of the canonical member of their family as partial ltr retrotransposons. according to this definition, 55%  of the annotated ltr elements are classified as partial,  <dig> of these are solo ltrs and a large number of ltr elements only comprise one ltr sequence plus parts of the internal region. of course, these elements cannot be found by de novo prediction software based on the prediction of repeats with length and distance constraints. therefore,  <dig> ltr retrotransposons classified as 'full length'  <cit>  served as dataset for the benchmark. these were extracted according to the 'full length' definition of kaminker et al.  <cit> . in addition we used the complete dataset of  <dig> ltr retrotransposons marked as 'all' in our tests .

the data sets provided by kaminker et al.  <cit>  and the annotations provided by flybase  <cit>  were different with respect to the coordinates given for  <dig> out of  <dig> reported ltr retrotransposon insertions. the coordinates differ in most cases only by a few bases in the start or end position. as the specificity and the sensitivity of the predictions were calculated by comparison to individual ltr retrotransposon insertions, we defined an ltrharvest hit as true positive, if the 5' and 3' positions of the prediction and annotation match within a difference of ±  <dig> nucleotides. a half true positive  is a hit with one end matching within a difference ±  <dig> nucleotides and the other end not satisfying the definition of a true positive . this strategy covered all annotation differences except for four cases: two are small partial insertions of <  <dig> bp and two nested hits <  <dig> bp and <  <dig> bp. the ±  <dig> nucleotides difference was also applied to the yeast data, as the annotation could not exactly be matched to the genome sequences.

in a first test ltrharvest predictions were compared to the data sets of annotated ltr retrotransposons in order to assign true positives , false positives  and false negatives . the sensitivity is calculated by dividing the number of tp by the sum of all tps and fns ). for calculating of the specificity, all tps were divided by the sum of all tps and fps ). in a second benchmark, we compared ltrharvest to four other ltr prediction programs in terms of quality and runtime. again tests were carried out with datasets of s. cerevisiae and d. melanogaster. finally, we checked if the different software tools are able to process the largest human chromosome. prediction coordinates and coordinates from the reference annotation were automatically compared by python scripts  <cit> .

parameter choices used for ltrharvest are shown in table  <dig> and described here for the d. melanogaster data set. the parameters for the minimum and maximum ltr length and distance were optimized by plotting the corresponding values of ltr sequences from tps and fns after some test runs . to optimize the initial seed length, fns from test runs were used in an iterative process. reasonable values for a maximal seed length should be within the range  <cit>  bp, since the length of ltr sequences is expected to within the range  <cit>  bp. if the rate of mutation in the host genome is expected to be high, a short seed length, for instance  <dig> bp, should be combined with a large x-drop extension parameter, for instance  <dig>   <dig> or  <dig>  if the rate of mutation in the host genome is expected to be low, a long seed length, for instance  <dig> bp, should be combined with a low x-drop extension parameter, for instance  <dig>   <dig> or  <dig>  table  <dig> shows reasonable values for the match, mismatch, insertion and deletion scores of the x-drop extension algorithm determined in various experiments. it has been known from literature that, in most cases, the distance between the two ltrs of a ltr retrotransposon is bounded by a minimum distance of  <dig> bp and maximum distance of  <dig> bp. for finding evolutionary young elements, the similarity threshold should be set at a high level, for instance 75%. the filters for tsd detection and ltr motifs should only be varied when special features are known in advance. the motif filter was not applied as there are several family specific 5' and 3' end ltrs motifs known in fruit flies.

column 'value s. cer.' = setting for s. cerevisiae

column 'value d. mel.' = setting for d. melanogaster

for a detailed description of parameters, see the manual of ltrharvest  <cit> .

comparison of ltrharvest predictions to reference datasets
all predictions of ltrharvest on the data sets of s. cerevisiae were checked by comparing the genomic positions of the individual ltr retrotransposons and, in addition, by sequence comparison of the tsd and ltr motifs to ensure that these hits are true positives. all parameters settings  were determined by manually optimizing the parameters as outlined in the section above. ltrharvest predicted a total of  <dig> full-length ltr elements . five ltr retroelements were not accurately detected, as they did not pass at least one filter:  <dig> fns do not have tsds,  <dig> fns do not possess the ltr end motif tg..ca and in one case a large insertion/deletion in the ltrs was observed. ltrharvest did not report any fps.

for the d. melanogaster genome ltrharvest predicted a total of  <dig> elements . of these  <dig> predictions were tps with half of these matching precisely at the 5' and 3' boundary coordinates of the corresponding ltr retrotransposon element.  <dig> predictions are htps for which the median difference in distance was  <dig> positions for the boundary coordinate not occurring in the  <dig> bp range. five fns were analysed in more detail. four fns are not flanked by tsds with one of these having additional highly divergent ltr sequences and, therefore, did not fulfil the seed length conditions. finally one fn  mistakenly had been rejected in exchange for a false prediction with a higher similarity value. it should be noted, that  <dig> of the  <dig> fns are annotated as being a 'member of nest'  <cit> , where exact predictions are difficult due to the nested location of several transposable elements. however, ltrharvest located further  <dig> retrotransposons that are 'member of nest' as tp and two elements as htps.

the used options are listed in table  <dig> in column 'value d. mel.'. column 'predictions' gives the number of predicted and column 'references' the number of annotated 'full length' ltr retrotransposons for each chromosome. a prediction is classified as true positive , if the maximum allowed distance between 5' and 3' coordinates of the prediction and the reference is at most  <dig> nucleotides. if only one of the two predicted boundary coordinates lies within the allowed distance of  <dig> nucleotides, the prediction is categorised as a half true positive . all other predictions are labelled false positive . ltr retrotransposons that are missing in the prediction are labelled false negative .

since only the dataset of known full-length elements was used for calculation of sensitivity and specificity, there could be several partial ltr elements among the large amount of  <dig> fps. indeed,  <dig> fps turned into  <dig> tp and  <dig> htps when compared to all  <dig> ltr retrotransposons. thus  <dig> fps are partial ltr retrotransposons. a blast search  <cit>  of the remaining  <dig> fps against a database of all transposable elements of d. melanogaster  <cit>  showed that most of these fps contain in part ltr retrotransposon sequences, but are not predicted with the exact position or show in part sequence identity to non-ltr transposons or dna transposons. in addition some fps contain tandem repeats.

when comparing to the 'full length' annotation, ltrharvest achieved a sensitivity of  <dig> % counting all tps and  <dig> % counting tps and htps, respectively. the specificity is  <dig> % counting tps only, and  <dig> % counting htps and tps. it should be noted, that a considerable portion of fps are partial ltr elements.

when applying ltrharvest on genomes without annotation data regarding transposable elements, a separation of predictions in tps and fps is, of course, not possible. in this case, an automated separation of the predicted sequences by a classification into sequence families is desirable. a single linkage cluster analysis on the set of all  <dig> predictions was conducted using vmatch. the clustering process resulted in  <dig> clusters with  <dig> out of  <dig>  elements in clusters and  <dig> out of  <dig>  elements as singlets. such singlets seem unlikely to contain ltr retrotransposons and would be excluded from further studies. elements in the  <dig> clusters were compared to the reference ltr retrotransposon families reported by kaminker et al.  <cit> , which consist of  <dig> families with at least one full-length member and  <dig> families with only partial elements .  <dig> out of the  <dig> full-length families  were identified by the clustering of ltrharvest predictions, where three clusters consist of more than one reference ltr retrotransposon family. this result demonstrates that ltrharvest in combination with a clustering of the predicted sequences is suitable for de novo detection of ltr retrotransposons. seven clusters consist completely of fps . a blast sequence comparison to the d. melanogaster genome sequences showed that ltrharvest_dmel <dig>  - <dig>  and - <dig> showed a hit on single loci within the genome organised in tandem repeats. ltrharvest_dmel <dig> and - <dig> showed several hits on a single loci with several repeats to regions containing a ltr and a non-ltr retrotransposon, respectively. ltrharvest_dmel <dig> matched to a genomic region containing several nested transposable elements whereas ltrharvest_dmel <dig> showed several hits to the ltr retrotransposon of the family gate. for the predictions delivered by ltrharvest and followed by clustering , the sensitivity is  <dig> % and the specificity is  <dig> % counting tps and htps together.

for clustering the program vmatch was used with the following options: seedlength for minimal length of exact repeats =  <dig>  minimal length of matches =  <dig>  xdrop =  <dig> and matching conditions  that cover at least 80% of the smaller sequence and 28% of the larger sequence.

of  <dig> annotated families  <cit> , this table lists  <dig> out of  <dig> families containing at least one full length member and one family  out of  <dig> families that are entirely composed of partial elements.

comparison of ltrharvest to other ltr prediction software tools
we compared ltrharvest with the de novo ltr retrotransposon prediction tools ltr_struc  <cit> , ltr_par  <cit> , ltr_rho  <cit> , and ltr_finder  <cit> . instead of ltr_par, we obtained a linux-binary ltr_seq from the authors. ltr_seq is the sequential version of ltr_par and delivers the same results . as recommended by the authors, we split the input sequence for ltr_seq into small overlapping parts to improve the run-time. for each tool, the set of genome sequences and annotations from s. cerevisiae and d. melanogaster was used as described in the previous section. all ltr_struc runs were conducted on a windows-xp pc with an intel core <dig> processor . the other test runs were performed on a linux system with an intel xeon processor .

each test-run has a unique 'run-number', that is used in tables  <dig> and  <dig> as well as in the tables b and c of the additional file  <dig>  for completeness, a documentation of the parameter settings used in each run and exact numbers of tps, htps, fps and fns are given in the additional file  <dig>  ltr_finder uses a filter based on a set of species specific precompiled trna sequences by default. the program was run with this filter  and without this filter . ltr_rho additionally uses an hmm search for retrotransposon specific open reading frames to enhance the prediction quality. we used ltrharvest without clustering  and with clustering as a post processing step . prediction coordinates and coordinates from the reference annotation were automatically compared by python scripts  <cit> . the benchmark result is presented in terms of program run-time, sensitivity, and specificity calculated as described above. for d. melanogaster, the sensitivity and specificity was evaluated for the 'full length' and the 'all' dataset. it should be noted, that some ltr retrotransposons are not included in the 'full length' data set. hence for the 'full length' dataset none of the programs achieves 100% specificity. however, the 'full length' data set allows for a fair comparison of the sensitivity, as solo ltrs and highly degenerated ltr retrotransposons not suitable for de novo prediction are excluded.

* = parameters are not adjustable.

details on parameter settings and exact numbers of predictions are shown in table b of the additional file  <dig>  sensitivity and specificity values were calculated as outlined in the s. cerevisiae benchmark counting all tps and htps as true positives. in run-no.  <dig> and no.  <dig>  the program ltr_rho reported an error for some chromosomal sequences. thus the number of annotations and predictions was adjusted to the incomplete data set.

* = parameters are not adjustable.

** = run-time ltrharvest + clustering with vmatch.

details on parameter settings and exact numbers of predictions are shown in table c of the additional file  <dig>  sensitivity and specificity values were calculated against the d. melanogaster annotation counting all tps and htps as true positives.

all tools were first run with their default parameter settings . because these settings varied considerably , we then used parameter settings as similar as possible to the settings specified in table  <dig> . as different parameter settings, especially the seed length, influence the run-times, these are compared for run no.  <dig> –  <dig>  since ltr_struc parameters are not adjustable, the performance of this tool with the parameter settings according to table  <dig> could not be evaluated. in four final runs we used the default settings of the various programs for ltrharvest .

using the default settings of each program for predicting yeast ltr retrotransposons, ltr_finder and ltrharvest show the best sensitivity with 100% and 98% respectively. the specificity of ltrharvest is low compared to the other programs. however, using of the parameter settings according to table  <dig>  the specificity of ltrharvest improves. run-time comparison of the programs  show, that ltrharvest is the fastest program  followed by ltr_finder , ltr_seq , ltr_rho  and ltr_struc . this may partly be due to the fact, that ltrharvest and ltr_finder are completely implemented as a single c and c++ binary, respectively, while ltr_rho is a perl script gluing together several other programs. ltr_struc may be so slow because it uses several brute force algorithms.

the evaluation of the programs for the drosophila genome gives a different picture. when comparing ltrharvest with ltr_struc and ltr_seq , ltrharvest is clearly the best in terms of prediction quality and run-time. the sensitivity of ltr_rho and ltrharvest is in the same range, while the high specificity of ltr_rho is only reached by ltrharvest with the specific parameter settings for drosophila  and a clustering step. however, it should be noted, that ltr_rho predicted  <dig> and  <dig> htps, respectively,  in contrast to ltrharvest with only  <dig> and  <dig> htps, respectively . ltr_rho's inaccurate detection of ltr element boundaries may be explained by a missing tsd search procedure, which seems important for an exact boundary detection.

parameter settings from the different programs of this benchmark were used for ltrharvest . while these settings did not much affect the sensitivity, the specificity of the predictions varied between  <dig> % and  <dig> % for the 'full length' annotation. clustering as a post processing step considerably enhances the specificity of ltrharvest predictions . for the 'all' annotation, the specificity of ltrharvest with clustering  is  <dig> %.

the fastest program for d. melanogaster is ltrharvest and clustering  followed by the ltr_finder . of the test runs producing results with sufficient quality , the second best program is ltr_rho with  <dig> seconds run-time . in summary, using optimised parameter settings and clustering, ltrharvest gave the best results in this benchmark test.

test runs on a complete chromosomal human genome sequence
all software tools were tested to see if they are capable of processing a sequence of size of a vertebrate chromosome. as test sequence, the complete sequence of human chromosome  <dig> from build  <dig>  with a length  <dig> , <dig> bp was used. all programs were run with their default settings. test runs were performed on a pc with  <dig> gb  and  <dig> gb  main memory. only ltr struc, ltr_seq and ltrharvest were able to handle the chromosome sequence and terminated successfully after ~ <dig>  ~ <dig>  and ~ <dig> minutes, respectively. in case of ltrharvest, the construction of the enhanced suffix tree took ~ <dig> minutes and required a maximum of  <dig>  mb of main memory. the ltr prediction took  <dig> seconds using default settings and  <dig> seconds when including the motif search . ltr_rho's binary for the detection of maximal repeats terminated with an error message  most likely indicating insufficient memory. ltr_finder terminated with a 'segmentation fault'.

CONCLUSIONS
the goal of this work was to develop a run-time efficient and space efficient ltr retrotransposon detection software tool delivering high quality predictions. the basic model of the ltr retrotransposon structure was taken from mccarthy and mcdonald  <cit>  and from kalyanaraman and aluru  <cit> . based on this model efficient and flexible filter algorithms, different from those used in  <cit>  and  <cit> , were implemented in the software program ltrharvest. the results from the validation of ltrharvest are encouraging. in all test-runs, ltrharvest showed a sensitivity of at least 90% on the s. cerevisiae genome and more than 96% on the d. melanogaster genome for the detection of full-length ltr retrotransposons. moreover, ltrharvest achieves a high level of specificity  if clustering is carried out as a post processing step. together, the ltrharvest prediction and the clustering process represent a strong method for obtaining a high quality de novo annotation of full length or near full length ltr retrotransposons. as holds true for other de novo prediction tools, short partial ltr retrotransposon copies, solo ltrs and some nested elements cannot be predicted by ltrharvest. however, these copies can be identified by a sequence similarity search using de novo identified species specific ltr retrotransposons. ltrharvest showed fast run-times and low memory consumption enabling de novo prediction for large data sets like vertebrate chromosomes. as the time consuming step of building the enhanced suffix array has to be carried out only once for a dataset, iterative predictions using different parameter settings e.g. for improving sensitivity or specificity are fast and easy to perform.

the source code, a test dataset and the manual of ltrharvest can be found at the homepage of the center for bioinformatics hamburg  <cit> . we provide precompiled binaries for linux and mac os x . the manual includes a detailed description of the filters and their parameters. all parameters can be specified by command line options.

future improvements of ltrharvest will focus on the implementation of further filters checking for the presence of ltr retrotransposon specific open reading frames, primer binding sites  or poly purine tracts .

availability and requirements
project name: ltrharvest

project home page: 

operating system: posix compliant unix systems, for example linux, mac os x, solaris and openbsd

programming language: c

other requirements: gnu c compiler and gnu make for compiling the source code; bash and python for running the example scripts

license: bsd-like open source licences, see 

any restrictions to use by non-academics: none

authors' contributions
uw and sk conceived the concept of the software and the benchmarks. sk suggested the algorithmic structure. de developed the software and performed the benchmarks. all authors wrote and approved the manuscript.

supplementary material
additional file 1
full description of parameters used and results of the comparison of de novo ltr retrotransposon prediction programs. additional file  <dig> includes table a – list of abbreviations, table b – quality validation on the s. cerevisiae genome  and table c – quality validation on the d. melanogaster genome .

click here for file

 acknowledgements
we thank gordon gremme for critical reading of the manuscript and helpful discussions on open source software aspects as well as sascha steinbiss for assistance in setting up the web page. we thank a. kalyanaraman for sending a copy of his ltr_seq program and z. xu for sending a copy of the ltr_finder program.
