BACKGROUND
groups that exhibit similar patterns in large-scale genomic data sets have provided primary biological information. in this regard, identification of natural clusters and their membership has excited a great deal of interest in functional genomics and clinical research. indeed, unsupervised clustering methods applied to microarray data enabled predictions of unknown gene functions   <cit>  and suggested the existence of subtypes of disease   <cit> . the task of cluster identification heavily depends on the property of clusters that are of interest, e.g., compactness, connectedness, and spatial separation. each clustering algorithm has pros and cons for different shapes of clusters, which in turn informs the choice of an appropriate clustering strategy  <cit> .

we are interested in establishing subclasses among microarray samples that might enable specified clinical treatments. in this problem, the data points are distributed in a very high dimensional  space and the geometry of their clusters is mostly uncharacterized, which make it difficult to choose an appropriate clustering method. however, the most widely used clustering methods for this problem have been the hierarchical agglomerative or k-means clustering algorithms  <cit>  that mainly focus on clusters with compact shapes.

when using these methods, various internal measures that represent compactness and spatial separation of clusters have been developed and compared to identify clusters and their members in data sets  <cit> . each of the measures, however, is prone to specific biases  <cit> , and their tests were mainly focused on the ability to identify the number of clusters and not on the accuracy of classification, which is mainly attributed to the clustering strategies used.

one important line of effort to improve the clustering strategy is the development of ensemble or consensus clustering techniques. these methods amalgamate multiple clustering runs to capture robust cluster structures by using multiple clustering algorithms  <cit> , perturbing data values with noise  <cit> , using different gene subsets  <cit> , or choosing the number of clusters randomly  <cit>  and then extract consensus cluster structures. among them, two of the methods  <cit>  have been tested intensively on microarray sample classification and were compared favorably with previous methods.

in this article, we firstly apply a cluster-number-based ensemble technique for microarray sample classification and compare the performance with previously used methods. the advantage of this approach over the single clustering or other methods is the ability to capture complex geometric structures. the rationale is that since some large cluster numbers are chosen during the clustering process, co-memberships among detailed local structures are strengthened. see also  <cit>  for developments of related algorithms. specifically, we use the multiple k-means clustering by ashlock et al.  <cit> , dubbed multi-k, that provides most simple and intuitive procedure for partitioning data. in addition to the original algorithm, we newly devised an entropy-based analysis of clusters, called the entropy-plot, that monitors the distribution of cluster sizes during the partition process. the entropy-plot helps prevent singletons or very small clusters from forming separate clusters, of particular utility when analyzing high-dimensional and noisy real expression data.

multi-k, though it is the simplest among existing ensemble clustering methods, exhibited remarkable performance, surpassing previously used methods in our tests, which suggests its ability to classify complex geometric structures is an important factor for microarray sample classification. in particular, multi-k demonstrated perfect classification for five  gene expression data sets out of eight that we tested.

RESULTS
algorithm
we begin by describing the multi-k algorithm. multi-k is performed by applying the well-known k-means algorithm repeatedly. euclidean distance is always used to measure the dissimilarity between two data points unless stated otherwise. let s = {x <dig>  x <dig> ..., xn} be the data set distributed in rn. the algorithm constructs an edge-weighted graph from the output of multiple instances of the k-means algorithm. multi-k is largely composed of the following two steps.

step 1
apply the k-means algorithm on the data m times. in each instance, we randomly sample a number ki, for the number of clusters, from a pre-determined distribution d. on each pair of nodes  that belong to the same cluster, we add one to an edge weight . after we repeat the process m times, we obtain a weighted graph structure on the data.

step 2
now, we go back to the reverse direction by unweighting the graph m times. in each iteration, we reduce a unit weight for all the edges with positive weights simultaneously. through this reverse process, the initial graph is divided into smaller and smaller sub-graphs . at any point the connected components of the graph are the clusters. the plot between the discrete  time normalized by m and the number of divided sub-graphs, as we call cut-plot, provides the information on the natural number of clusters. if a flat region of the cut-plot is long, we regard the corresponding cluster structure is robust and hence natural. we choose the longest interval in the cut-plot for the predicted number of clusters except for the one-cluster interval. the weighted graph in step  <dig> is equivalent to the averaged co-membership matrix used in other ensemble clustering algorithms  <cit> . the convergence of multi-k  is addressed in methods.

entropy-plot
entropy can be used as a measure of randomness or information in a set of clusters  <cit>  and is defined in terms of a discrete random event x, with possible states  <dig> ..., k as: h = -Î£pilog2pi, where pi = prob , i =  <dig>   <dig> ..., k. let s be a data set with n elements and x = {c <dig>  c <dig> ... ck} be a set of non-overlapping clusters. the empirical probability that ci includes a given data point is |ci|/n, and so the entropy of the clustering x is

  

this entropy measure informs us how the data points are distributed as clusters. the cut-plot summarizes the hierarchical structure of clusters that form as the cut-value  is changed. however, the cut-plot alone does not distinguish between roughly-equal and substantially unequal divisions of clusters within the hierarchy. the entropy-plot is a more informative plot that better summarizes the cluster structure. this plot displays the shannon-entropy of the empirical distribution of points into clusters as a function of the cut-value. in each position where the cut-plot jumps, the entropy-plot jumps as well. the difference lies in the size of the jumps. in the cut-plot, any division of a cluster yields a jump of height one; the entropy-plot has variable height jumps which give the relative informativeness of the partitioning of clusters. an even division of a large cluster is highly informative while the separation of a single point is minimally informative. when working with clean and low-dimensional data, it is not too difficult to detect the separation of small clusters consisting of one or a few points by inspection. when dealing with noisy or high-dimensional data such as gene expression profiles, the entropy-plot is of substantial utility in highlighting the significant divisions within the cluster structure. as a convenience for the user, the partition of small clusters, those for which the increase in entropy is less than a threshold, may be suppressed. this yields a cleaner and more easily interpreted summary of the hierarchical cluster structure. users that wish to see the unmodified cluster structure may reduce the threshold value that triggers suppression. however, we applied a fixed threshold in this paper to compare the performance of multi-k with other algorithms. see additional file  <dig> for further explanation of entropy-plot.

multi-k parameters
since multi-k is an ensemble learning algorithm, it requires some parameters or thresholds. the following initial setting is suggested from our rough estimation and empirical tests, but works well for analyzing real-world expression data. although we suggest varying them around the given values in an explorative study, we used the following setting for the purpose of comparison throughout this study.

the distribution for the cluster numbers, d is simply chosen to be uniform on an interval between two integers in our study. we used the interval , min) for d, where n is the number of samples and  represents rounding x to the nearest integer. we applied the minimum function here because it may be unreasonable to expect five or more classes for very small number of samples. the number of clustering runs m is fixed at  <dig> in this study. this number is sufficiently large for convergence of the algorithm. lastly, we used a threshold for the entropy-plot such that if a jump in the entropy-plot is smaller than  <dig> /, we suppress the separation of the corresponding cluster and merge the two adjacent intervals in the cut-plot. 'increased number of clusters' in the denominator accounts for the case when multiple singleton or small sets are separated simultaneously from a cluster.

experiments
we compare the performance of four kinds of clustering algorithms: multi-k, hierarchical clustering , k-means, and gcc, a gene-subset based ensemble clustering  <cit>  for classifying data points on various simulated and real expression data sets. we used code from the r package for hierarchical and k-means methods as well as for computing silhuette width and gap statistic. we tested the two versions gcc algorithms and denote them gccc and gcck that employ correlation and k-means clustering, respectively. these are all distance-based clustering methods. another important class of algorithms that we did not consider is model-based clustering  <cit> . most model-based methods, however, are designed mainly for gene clustering and may not be reliable for sample clustering because in most cases, the number of samples is not sufficiently high to fit very high-dimensional models. for example, emmix-gene  <cit>  reduces the number of genes when clustering samples, which suffers from significant information loss, and the class prediction is highly affected by the genes chosen.

we predict the number of classes in a data set as well as the cluster-membership of the data points in each algorithm, and then assess the agreement between the predicted and the known partitions using the adjusted rand index   <cit> . let pi = {p1â¢, p2â¢,..., plâ¢} and pj = {pâ¢ <dig>  pâ¢ <dig> ..., pâ¢m} be two partitions of a data set d. let niâ¢ and nâ¢j be the number of elements in piâ¢ and pâ¢j, respectively and , be a l Ã m matrix where nij represents the number of elements in piâ¢ â© pâ¢j, then the ari is computed as follows:

  

where n is the number of data points, i.e. the sum of . this index addresses the degree of agreement between two partitions with possibly different numbers of clusters. ari has a value between  <dig> and  <dig>  which mean a random matching and the perfect agreement between the two partitions, respectively. the index is said to be 'adjusted' because its formulation compensates for the fact that, when there are more than two members of a partition, a majority of the pairs of data items are in distinct classes. we applied the gap statistic and silhouette width to hierarchical and k-means algorithms to predict the number of clusters, and used the inherent indicators for multi-k and gcc, the cut & entropy plot and the modified rand index, respectively.

most existing clustering algorithms are good at finding compact clusters, but not those interwoven among others. combining multiple k-means runs, multi-k aims to find connected components in a data set that are spatially separated among others. intuitive examples that characterize multi-k follow.

comparison for geometrically complicated clusters
we considered three data sets composed of clusters with geometrically complicated structures and named them donut & ball, horse shoe, and spiral, respectively. their shapes and the corresponding cut-plots are shown in figure  <dig>  all the three data sets have  <dig>  data points. although these data sets seem to have little relevance with gene expression data, they may abstract the geometric complexity of microarray data sets and clearly reveal the advantage of multi-k algorithm. the test results are shown in table  <dig>  the optimal number of clusters by multi-k is determined at the longest interval of the cut-plot , and then the corresponding partitions are naturally derived from step  <dig>  multi-k correctly predicted the number of clusters and classified the clusters accurately with ari value  <dig> in all the three examples, while the other methods yielded poor predictions. since most existing clustering algorithms and indicators for the optimal number of clusters are focused on compactness of clusters, they could not identify complicated structures that focused on connectedness and spatial separation of clusters as the above examples.

multi-k
 in each parenthesis is shown the known  and the predicted number of clusters. those ari values that exceed  <dig>  are shown in bold.

the ability of multi-k to trace the complex geometric structure is reminiscent of the nonlinear dimension reduction technique, called isomap  <cit> , which uses the shortest paths between data points to approximate the geodesic distances between points, and may suggest the applicability of multi-k in nonlinear dimension reduction problem.

comparison for high dimensional and noisy clusters
now, we compare the clustering algorithms on high dimensional and noisy synthetic data sets that imitate microarray samples. in the first model, called h <dig>  we considered two clusters in  <dig> dimensions. each cluster is chosen to have  <dig> or  <dig> observations that were independently drawn from normal distributions n and n, respectively, where Î±p denotes the  <dig> by p vector of Î±'s and ip denotes the p by p identity  matrix. the two clusters may overlap in each dimension. in the second model, called h <dig>  we considered three clusters in  <dig> dimensions . each cluster had  <dig> observations. we divided the  <dig> genes into ten groups each of which equally had  <dig> genes. in each block , all the  <dig> dimensional samples were commonly drawn from a normal distribution n independently where Î± is randomly chosen from {- <dig> ,  <dig>   <dig> } in each block. the block structures represent gene sets with co-expression patterns that are commonly up or down regulated under specific experimental conditions.

in each model, we tested the algorithms on randomly generated ten data sets and averaged the ari values. the test results are summarized in table  <dig>  in both models, multi-k showed the highest accuracy. the gcc methods yielded rather good predictions for the h <dig> model, but performed very poorly for the h <dig> model. hierarchical methods performed very poorly for all the cases, which is mostly attributed to the failure in predicting the correct number of clusters. k-means algorithm demonstrated the second best accuracy except for the case of the silhuette indicator applied to the h <dig> model.

the adjusted rand indexes are shown averaged over ten randomly generated data sets. in each parenthesis is shown the number of cases out of ten that correctly identified the number of clusters. ari values that exceed  <dig>  are shown in bold.

classification tests for real expression data sets
we tested the clustering algorithms on eight microarray data sets as summarized in table  <dig>  all the mrna samples in each data set are assigned class labels from laboratory analyses of the tumor samples. these labels establish the known  partitions on the data points. we chose  <dig> genes with higher variances in each data set for data clustering . for randomized algorithms, multi-k, gcc and k-means clustering, we repeated running the algorithms five times and used the median ari and the corresponding clusters.

the test results are summarized in table  <dig>  the ari values in this table represent the agreements between the predicted and the gold standard partitions. multi-k overall performed best in both predicting the number of clusters and the accuracy of classification. to our surprise, multi-k perfectly classified five of them. the cut-plot of the leukemia data  <cit>  ) had intermediately long flat intervals at two, three, and four clusters. however, at the second jump, the entropy-plot showed a very small increase , which was caused by the separation of a singleton set. therefore, we suppressed the partitioning of the singleton set, which merged the second and third intervals. this consequently indicated two major subclasses, which perfectly matched to the two known leukemia classes, all and aml. by the third jump in the cut-plot, the all class was again clearly divided into two known subtypes, all-b and all-t. although the modified cut-plot indicated two major subclasses, multi-k was able to unveil further known subtypes clearly.

 in each parenthesis is shown the known  and the predicted number of clusters. ari values that exceed  <dig>  are shown in bold.

we then tested multi-k on a randomized data set. we randomly permuted each gene's profile of the leukemia data independently. the resulting cut-plot and entropy-plot are shown in figure  <dig>  where no meaningful intervals or jumps are found. this permutation test demonstrates the existence of cluster structure in the real data.

in analyzing the lymphoma data set  <cit> , the cut-plot had the longest interval at three clusters  ). the first jump caused a major increase in the entropy value  and the second jump a minor increase , both of which were meaningful values . in the first jump, the  <dig> samples were clearly divided into two classes, dlbcl and cll-fl groups. in the second jump, the latter group was again clearly divided into cll and fl groups. the split of the small subgroup fl caused a relatively small increase in the entropy-plot.

while the entropy-plot modified the predictions of the number of clusters for the leukemia, st. jude )  <cit> , and the normal ii data sets )  <cit> , the cut-plot alone correctly identified the number of classes for the other data sets. however, the entropy-plot still provides important information on the impacts of new subdivisions in the clusters. for example, the cut-plot of the thyroid i data  <cit>  had two similarly long intervals at two and three clusters  ). between them, however, the entropy-plot indicated much higher impact of the former subdivision, and hence two major subclasses. nevertheless, in the second jump, the cancer class was divided into two subsets with six and three elements so that the latter interval might indicate cancer subtypes.

the colon data had a large difference in the sizes of the two classes such that the cancer class had  <dig> samples while the normal class had only five samples. even in such a case, multi-k clearly separated the two classes. the hierarchical clustering algorithm showed a good performance but the other methods yielded very poor classification rates. the thyroid ii data was the most clearly separated so that multi-k and k-means algorithm as well as the hierarchical-silhuette methods clearly separated the classes. however, gcc methods failed to indicate the correct numbers and hence yielded low classification rates. on the other hand, for the st. jude data set, gcc methods performed the second best, while the usual clustering methods performed very poorly. the cut-plot of st. jude initially indicated six classes but was modified to five after suppressing the separation of a singleton set, though the corresponding jump is too small to be recognized in the entropy graph.

for the last two examples, we chose two data sets with many classes. the normal i data  <cit>  had twelve classes sampled from normal human tissues each of which equally had two samples. the twelve classes in this data set were relatively clearly separated among others so that multi-k, gcck, and hierarchical-silhuette method clearly identified the known twelve classes, and k-means also exhibited good classification rates. the normal ii data had thirteen classes, and multi-k and gcck showed similarly good performances.

tests for real expression data with fixed known number of classes
as seen in the leukemia example, the 'known' classes also had a hierarchical structure so that it is rather controversial to define 'gold standard sub-classes' because they are merely representing the current level of our knowledge. moreover, since most algorithms other than multi-k failed to indicate the correct number of clusters in many data sets, it is not clear at this point to address the accuracy of the clustering strategies themselves. in other words, the tested algorithms could have yielded better performance combined with other possible indicators for the number of clusters. for these reasons, we investigate the performance of the clustering strategies themselves by specifying the 'known' number of clusters in each algorithm. the test results are shown in table  <dig>  in this analysis, most clustering strategies improved the ari values for some data sets, but multi-k still was the best method for all the data sets so that it perfectly classified six data sets. as we have analyzed for the leukemia data, multi-k perfectly classified the three known sub-classes, while the other methods still misclassified some samples. the thyroid ii data set was most clearly classified so that all the algorithms identified the underlying two classes precisely.

ari values that exceed  <dig>  are shown in bold

the hierarchical method, if not perfect, has been known to classify the leukemia data quite well  <cit> , but the ari value was poor  in this test. this was caused by the separation of a singleton set, and hence we tried four clusters and assigned the singleton set to the nearest cluster among the other three clusters. this post-processing yielded a much better classification rate of  <dig>  for the leukemia data set. this also illustrates why data processing such as entropy-plot is required. some other data sets were also better classified by this process so that the lymphoma and normal ii data sets had improved ari values  <dig>  and  <dig> , respectively. however, the modified hierarchical clustering did not outperform multi-k in any data set.

analysis of breast cancer data without gold-standard known subtypes
breast cancer has been frequently investigated of its subtypes using gene expression profiles. different subtypes predicted from hierarchical clustering of expression profiles exhibited different clinical prognoses, which suggests breast cancer is separable into distinct disease. sorlie et al.  <cit>  compiled  <dig> breast tissue samples as well as ~ <dig> genes intrinsic to the disease to predict five cancer subtypes. they also extracted five core sample groups that are most highly correlated in each subgroup. we re-analyzed the breast cancer data set from sorlie et al.  <cit> . because the previous subtypes had been inferred over the 'intrinsic' genes, we used the core sample groups in each subtype as the 'silver' standard. because many kinds of disease are un-informative of such 'intrinsic genes', it is important to reproduce the previous result without functional information of genes. therefore, we chose  <dig> high-variance genes in a fully unsupervised manner and compared the performance of the hierarchical clustering and multi-k. to compare with the previous prediction, we chose four large entropy jumps to partition the data into five clusters. four of the previous subtypes largely agreed with the multi-k clusters but two of them  were merged into one cluster with overall ari =  <dig> . on the other hand, the hierarchical clustering completely failed to reproduce the previous subtypes and yielded ari =  <dig>  at maximum . in this case, very small clusters were continuously separated from large one cluster as we lower the tree-cut value of the hierarchical clustering. see additional file  <dig> for related data.

detecting outliers in multi-k
multi-k basically assigns every point to a cluster. however, outliers in each cluster can be identified by computing the average distance of each data point to other points in the cluster. for a cluster ci = {x <dig>  x <dig> ..., xc}, let dj, j =  <dig> ..., c, be the average distance of xj to other points in the cluster, and meani and stdi be their mean and standard deviation. we regard a data point xj as an outlier if |dj - meani|> Î±Â·stdi where Î± is a positive constant. using this scheme, we analyzed the clusters for the st. jude data set that showed a relatively low ari  in our test. when we set Î± =  <dig> and  <dig> , we identified nine and  <dig> outliers in total, respectively. excluding those data points, we obtained increased ari values of  <dig>  and  <dig> , respectively. this implies class assignment by multi-k can be improved by removing outliers.

overall, multi-k exhibited consistently good performance, while the performance of the other methods varied much depending on the data set, the clustering algorithm employed, or the indicator function chosen.

discussion
identifying subclasses of diseases using microarray data is a clinically important and computationally challenging problem. the basic assumption of the problem is that distinct subtypes, if any, are separated among others in a high dimensional sample space, and hence can be identified through computational methods: although the differences in each dimension may be small, they will achieve clear separations if accumulated in a very high dimensional space: the simulation tests for h <dig> and h <dig> have been designed in this perspective. indeed, as shown in the test examples, the ordinary clustering methods successfully identified the known subclasses in some data sets. to improve the performance, ensemble or re-sampling based clustering techniques have been developed  <cit> . ensemble learning techniques have been widely used in genomic data analysis such as prediction of protein-protein interactions, alpha-membrane proteins  <cit> , protein fold pattern recognition  <cit> , learning the structure of genetic networks from time-series expression data  <cit>  as well as microarray data classification  <cit> .

in this article, we presented a cluster-number-based ensemble clustering algorithm, multi-k, and suggested using it for unsupervised classification of microarray samples. unlike other widely used clustering methods, multi-k was able to identify clusters with complicated geometric structures as well as high dimensional and noisy clusters. it demonstrated outstanding performance in various simulated and real expression data sets for subtype classification. we note that the gustafson-kessel  clustering algorithm  <cit>  also targets clusters with non-compact shapes, but g-k method mainly focuses on linear cluster structures and tends to cause a numerical problem in computing the eigen-structure of covariance matrices for high-dimensional data. moreover, g-k method itself does not suggest the optimal number of clusters.

the average linkage hierarchical and k-means clustering methods are designed to capture compact or relatively simple clusters. however, the geometric features of the microarray clusters are hardly characterized because they reside in a very high dimensional space and are affected by various sources of noise as well as potential gene interactions. our tests showed that previous clustering methods that focused on compact clusters yielded poor predictions in many data sets. on the other hand, the suggested method exhibited significant superiority and perfectly classified five  real expression data sets out of eight, while the other methods perfectly classified at most two. we infer the flexibility of multi-k in both geometric complexity and high-dimensionality enabled the accurate cclassification of gene expression data.

multi-k provides two forms of useful exposition of cluster structure, the cut-plot and the entropy-plot, that inform the hierarchical structure and the natural number of clusters. this pair of indicators is much more informative than other internal indicators most of which suggest only the number of clusters. as shown in the above examples, the cut-plot and entropy-plot give a portrait of the overall cluster organization in a complementary manner, which provides researchers with a rich source of information to decide what the appropriate clusters are. indeed, use of this pair of indicators outperformed other widely used indicators in various tests.

one possible weak point with multi-k is the existence of the free parameter relative to d, the distribution on the number of clusters. however, the algorithm showed reliable performances with the rule suggested in this study. to the authors' knowledge, most ensemble learning methods include free parameters, whose basic principle is that the ensemble methodologies improve the performance for a wide range of the free parameters.

an important related topic about sample classification is the gene selection problem. the performance of clustering usually varies more or less depending on the gene subsets chosen. we have commonly used same number of genes with high variance. one possible method in our ensemble context is simultaneously randomizing the number of high variance genes as well as the number of clusters in constructing the weighted graph. however, this approach has not facilitated some meaningful improvements in our experiments . further extensive tests and investigation on gene selection problem is required.

CONCLUSIONS
we found the geometric complexity is most important feature of clusters for accurate classification of microarray samples, which has been often overlooked by other clustering methods. multi-k exploits the geometric information of clusters very well since it applies ensemble clustering by varying the number of clusters. with its high performance and simplicity, we expect multi-k will become a useful method to uncover the subtypes of disease from expression profiles.

