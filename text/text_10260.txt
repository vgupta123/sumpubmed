BACKGROUND
biological network sources
life scientists commonly use biological networks from online databases in research and teaching. as an example, metabolic pathways are of high interest for exploring organism‐specific metabolism, mapping ‐omics data onto metabolic networks for further analysis, and simulating metabolic processes using techniques such as flux balance analysis.

there are various online repositories for biological pathways, see http://www.pathguide.org/. here we will concentrate on metabolic networks. major databases for metabolism are the kyoto encyclopedia of genes and genomes  pathway  <cit> , a multi‐organism pathway database containing thousands of metabolic pathways, represented as manually drawn pathway maps; biocyc/metacyc  <cit> , a collection of organism‐specific pathway databases; reactome  <cit> , a multi‐organism pathway database initially established with a focus on human biology; and panther pathway  <cit> , also a multi‐organism pathway database. there are also many special metabolic pathway databases covering a specific species or group of species, e. g., plantcyc  <cit>  and metacrop  <cit>  for plants.

kegg provides graphical representations for pathways and the layout information is publicly available for download via the xml‐based kgml file format. as kegg also contains the largest collection of metabolic pathways we choose this database for our work.

biological network visualization
biological network visualization requires  single biological elements to be represented by meaningful graphical symbols , and  the spatial placement  of these glyphs to form a readable map.

exchange of information between humans can often be enhanced by the use of well‐defined unambiguous standards for visual representation. while informal drawing conventions exist for the visualization of biological networks, arbitrary graphical representations are still commonly used. uniform systems of nomenclature describing the components of networks based on a well‐defined set of symbols are well established within fields such as engineering, computer science, and physics. for the visual representation of biological networks and cellular processes the systems biology graphical notation  has been recently introduced  <cit> . similar to wiring maps in electrical engineering, sbgn allows the unambiguous representation of biological knowledge using a limited number of easily recognizable glyphs. the three different languages  covered by sbgn enable the representation of any kind of biological network such as metabolic, regulatory, and interaction networks on different levels of granularity. figure  <dig> shows an example sbgn process description map.

ideally, online repositories for biological networks would provide networks in a variety of notations including sbgn, automatically converting between them as necessary. such conversions should preserve the existing layout as much as possible, since it will often have been carefully chosen by a human expert to emphasize important biological features in the map. unfortunately, this is non‐trivial because the conversion may add, remove or alter map elements, preventing use of the exact same layout.

automatic layout of biological networks can be done with graph drawing algorithms, see the book of  <cit> . these techniques have also been applied to specific biological network layout applications, such as for signal transduction maps , protein interaction networks , and metabolic pathways . however, manually drawn layouts tend to be easier to understand and aesthetically preferable to automatic layouts. furthermore, automatic layout methods often cannot fulfill particular specific layout requirements, such as those given in the sbgn specification. for example, these approaches do not allow specification of positions of enzymes or modifiers relative to processes, layout for reaction groups, or specific bundled routing via certain paths to draw visual attention to particular structures.

here we describe a method to automatically translate the widely used kegg metabolic pathways into sbgn format. we infer important properties of the kegg layout and model these as layout constraints that are maintained during the conversion to sbgn. this allows for style and layout conventions of sbgn to be followed while creating maps that are still recognizably the same pathway.

our approach  relies on  using sbgn as an unambiguous graphical representation for biological objects and interactions, and  solving geometric constraints which capture structural layout requirements  as well as arrangement preferences of the original author  for automatic layout based on the original kegg map.

there are three main steps. the first step is to convert the kegg map into the sbgn process description   <cit>  notation, adding and deleting nodes and edges where necessary. the second step involves finding an arrangement for the nodes in the diagram. it is based on the constraint‐based layout method in  <cit>  which allows a network map to be laid out subject to computed or user‐specified geometric placement constraints, such as non‐overlap, alignment, and containment. in this step we start with the layout of the initial kegg maps to infer important structural constraints, such as relative orderings and alignment. we remove overlap between new or modified nodes while enforcing containment relationships, preserving structural constraints and following the layout guidelines of sbgn. in the third step, we perform orthogonal edge routing to create routes for edges which do not overlap nodes or each other  <cit> . our basic approach of using inferred constraints to preserve existing layout while specifying further constraints to enforce required drawing conventions is a powerful and flexible technique which could easily be adapted for translating between other biological network notations.

constraint‐based layout techniques originate with the early cad tool sketchpad  <cit>  and are now widely used in gui widget layout, cad systems and diagramming tools. they have been used for a variety of purposes: to support parametric objects whose shape changes to different design contexts, automatic adjustment of user interfaces and maps to different viewing contexts , enforcing similarity between consecutive layouts in interactive and other dynamic settings , preserving geometric relationships during editing , and tailoring network map layouts to take into account layout styles and user interests . to the best of our knowledge our use of them to preserve the user’s “mental map” of a layout during translation between two different map notations is novel.

geometric constraints can either be inferred from a map or explicitly imposed by the user. typically constraint inference is based on map elements satisfying a possible constraint within some error tolerance  <cit> , but may also take into account syntactic requirements of the particular map notation  <cit> . a wide variety of different techniques have been suggested for solving geometric constraints in graphical applications  <cit> . our approach utilizes constrained‐satisfaction methods for constrained graph layout  <cit>  in combination with automatic orthogonal edge routing techniques  <cit> .

some of the closest work to ours is research on converting from sbml  <cit>  or biopax  <cit>  formats into graphical formats like sbgn. some examples for sbml are arcadia  <cit> , which uses graphviz  <cit>  for layout and the sbml layout extension  <cit> . biopax to sbgn conversion is done, for example, by paxtools  <cit>  and biouml  <cit> . however, these approaches can’t translate the widely used kegg maps into sbgn, and they mostly compute entirely new layouts rather than utilizing layout information derived from the original  map. tools such as keggtranslator  <cit>  and mgv  <cit>  can load and translate kegg maps but also do not support layout adjustment based on information from the original kegg map.

methods
translation of kegg to sbgn
some pathway database providers have begun to adopt sbgn for the graphical representation of pathways  <cit> . however, the popular kegg database still provides pathway maps in its own representation both as static image files and as kgml files for utilization in software tools.

the kgml files serve as the basis for our translation from kegg to sbgn since they contain all information  necessary to reconstruct a pathway map. note that the static kegg images contain often less edges than the corresponding kgml file as several reactions are often manually reduced to a single reaction in the static image. we will focus on the translation of metabolic pathways from the kegg representation  to sbgn process description  maps.

in general, a pathway map can be considered as a graph g= composed of a set of nodes v representing pathway entities and a set of edges e, where each edge connects two nodes and thus represents a relation between the pathway entities. kegg pathway maps in particular consist of several types of nodes and edges  <cit> a. let gk= be a graph representing a metabolic pathway map from the kegg database. in metabolic pathway maps from kegg all three types of nodes can be found:  gene product, mostly protein but including rna node vgp∈vk,  other molecule, mostly chemical compound node vom∈vk, and  another map node vam∈vk. in addition, two types of edges can be found:  molecular interaction or relation edge emi∈ek and  link to another map edge elm∈ek. a typical drawing of a kegg pathway map can be seen in figure  <dig>  a gene product node vgp is drawn as a rectangle showing a reaction, an other molecule node vom is represented by a circle showing a substrate or product of a reaction, another map node vam is drawn as a rectangle with rounded corners, a molecular interaction or relation edge emi is shown as an edge with a filled arrowhead, and a link to another map edge elm is drawn as a dotted edge with an empty arrowhead.

for all elements of a kegg metabolic pathway map a respective element  in the sbgn process description  language can be found; for a description of all sbgn pd elements see  <cit> . however, to create a valid sbgn pd map the number of nodes and edges increases during the translation as described below. let gs= be a graph representing the sbgn pd map. the translation of an other molecule node, another map node, and a link to another map edge from kegg to sbgn pd is a one‐to‐one translation: an other molecule node vom is mapped to a simple chemical node vsc∈vs, a another map node vam is mapped to a submap node vsm∈vs including the required number of terminal nodes vte∈vs, and a link to another map edge elm is mapped to an equivalence arc edge eea∈es. a reaction in a kegg pathway map shown by a gene product node vgp is translated to a macromolecule node vma∈vs showing the enzyme catalyzing the reaction plus an additional process node vpn∈vs showing the reaction itself. both nodes are connected by an additional catalysis arc edge eca∈es. the translation of a reaction node therefore increases the number of nodes and edges. molecular interaction or relation edges emi have to be translated according to the reaction they are connected to. in case of an irreversible reaction the edge emi from the substrate node to the reaction node is translated to a consumption arc edge eca∈es and the edge emi from the reaction node to the product node is translated to a production arc edge epa∈es. for reversible reactions the translation is simplified, all edges emi are translated to production arc edges epa∈es indicating the reversibility of the reaction. see table  <dig> for more information about the translation process, figures  <dig> and  <dig> for detailed examples and figures  <dig> and  <dig> for the full maps.

the kegg, kgml, and sbgn pd representation is shown for irreversible reaction, reversible reaction, several reactions between compounds, and link to another map.

as an added complication, the kgml files for some pathway maps have errors and do not contain the complete information necessary for a correct automatic translation. typical kgml errors are missing information about  the reversibility of a reaction,  the type of a compound  or  substrates and products of a reaction at all. we automatically detect these rare cases and render the relevant nodes and edges in red to highlight the ambiguity.

layout process
pathway diagrams contained in the kegg database are manually drawn  <cit>  and provide a layout that emphasizes the biological features regarded as important by the author. a reference image for each pathway is available online . these images show the pathways in a simplified manner where the number of edges is reduced. in principle, a reaction taking place between two compounds is shown by an edge drawn from the substance to the reaction node and an edge drawn from the reaction node to the product. if several reactions take place between two compounds there is only one edge drawn between the two compounds and the reaction nodes are drawn together underneath or above the edge.

in contrast, the kgml files provided by the kegg database contain enough information to reconstruct all nodes and all edges but do not include the complete layout information. the files only contain node layout information  but do not contain edge routing information. thus, a kegg pathway map can be reconstructed from a kgml file that preserve the author’s intended layout except for the edge routing ).

the translation of kegg metabolic pathways to sbgn pd maps increases the number of nodes and edges as described in section “ translation of kegg to sbgn ” and thereby breaks the initial layout by introducing node overlaps ).

scaling the space between nodes in both the x and y dimension would be a straightforward solution to eliminate node overlaps but has the disadvantage that the maps become unnecessarily large due to increased whitespace. furthermore, we would still need to produce new routes for edges. for this reason we perform automatic layout of the sbgn pd maps. this process is designed to  preserve the original layout intent of the author, including the use of orthogonal edge routing and  arrange the pathway map according to sbgn layout rules.

the specification for sbgn pd maps describes requirements and recommendations for layout which govern the visual appearance and aesthetics of the process description  language  <cit> . layout requirements and recommendations most important for the translation of kegg metabolic pathway maps to sbgn pd maps are summarized below: 

 <dig>  nodes are not allowed to overlap, except where one node is contained by another;

 <dig>  if an edge crosses a node it must be drawn on top, it is recommended that edges not cross nodes;

 <dig>  edges are not allowed to overlap the border line of nodes;

 <dig>  edges are not allowed to overlap each other ;

 <dig>  consumption and production arcs are attached to the center of opposite sides of a process node;

 <dig>  catalysis  arcs are attached to the two other sides of the process node;

 <dig>  at least a part of a label has to be placed inside the node it belongs to;

 <dig>  labels should be horizontal; and

 <dig>  the number of crossings between edges should be minimized.

conceptually, the layout process is performed in two main steps. the first stage determines a position for the nodes in the sbgn map. it starts with a desired position for each node based on their positions in the kegg map and a set of geometric constraints. then a greedy heuristic is used to find node positions that satisfy these constraints and avoid overlap between nodes . the second stage is to take the resulting node positions as well as edge connection information and compute orthogonal object‐avoiding paths for edges. the paths satisfy requirements 2– <dig>  in the next sections we describe these stages in more detail.

we follow requirements  <dig> and  <dig> when drawing labels, although it is often unavoidable that this results in text that overlaps other objects. the final recommendation of minimizing edge crossings is a known intractable problem  <cit> , but we employ heuristic approaches that give reasonable results.

computing node positions
the first stage of the layout process is to find node positions using constraint‐based layout. this takes sizes and a desired position for each node  as well as a set of constraint relationships that we would like to be satisfied. these constraints are of three types:  recognizability: alignment and separation constraints are used to preserve recognizability of the original kegg layout and the author’s original layout intent;  beautification: non‐overlap and spacing constraints are used to make sure the new layout is not bad; and  style: enforcement of sbgn style using containment and alignment constraints for hierarchical nodes and fixed‐relative‐position constraints to keep macromolecules positioned in relation to process nodes in a reaction and non‐overlap of nodes. these constraints are shown for our previous example in figure  <dig> 

recognizability constraints are determined by analyzing the network to find groups of nodes that are visually aligned in the original kegg layout. when looking for x or y alignment we use a small tolerance to include cases where there was an obvious visual intention to align objects but they are not pixel perfectly aligned. this alignment inference is performed for all compounds  and reactions  regardless of whether or not they are connected. once we have determined the alignment relationships we add separation constraints between each alignment group to preserve the relative orthogonal order of these within the layout. if two compounds are aligned either in x or y direction and several reactions take place between them, additional alignment and separation constraints are defined for these reactions to line them up in horizontal or vertical reaction groups .

beautification constraints are non‐overlap constraints generated between all nodes to stop them from overlapping and to leave enough empty space between them for subsequent edge routing. to achieve this spacing, we specify slightly enlarged sizes for nodes during the layout step.

in order to satisfy the drawing conventions of sbgn we define style constraints for the containment of hierarchical nodes and to keep particular nodes in a fixed position relative to each other.

according to the sbgn specification, submaps contain terminal nodes graphically shown as overlapping nodes contained within them but sharing a border. thus containment constraints have to be defined for submaps and the corresponding terminals to force them to be positioned within their parent node and to prevent overlap constraints being generated between them. additionally, an alignment constraint between a submap and each of its terminals has to be defined to keep the terminals positioned on the border of the submap.

for a macromolecule and a process node connected by a catalysis arc the relative position is fixed by two constraints, either an alignment constraint in x direction and a separation constraint specifying a fixed distance in y direction or vice versa.

for the layout, the high‐level geometric relationships we use are represented at a low level in the solver as multiple separation constraints of the form u+g≤ v, enforcing a minimum  gap g between the positions u and v of pairs of objects in either the x or y dimensions of the drawing  <cit> . for example, a vertical alignment between three nodes would be represented as a position variable for the alignment and three equality constraints that force the x position of each node to be the same as the alignment position. alignment, separation and fixed‐relative‐position constraints are specified at this high‐level. we use the algorithm from  <cit>  to project the desired position of the objects onto the low level separation constraints—this means that objects are placed as close as possible to the desired position while satisfying the layout constraints.

however, not all layout constraints have a direct translation to separation constraints. for instance, non‐overlap of two objects can be modeled by choosing to constrain the first object to be “above”, “below”, “left” or “right” of the second: the best choice depends upon the desired object position and interaction with other constraints. we solve this by using the greedy heuristic described in  <cit> . using this method, we do not specify non‐overlap constraints using individual separation constraints, but instead let the solver compute the choice for how best to resolve overlap. importantly, we give non‐overlap constraints a lower priority, hence considering them after all other constraints have been satisfied. the four alternatives for enforcing each non‐overlap constraint are ranked based on minimizing potential node movement. we try adding each alternative in turn until we find one that does not cause itself or previously added constraints to become unsatisfied. each time we encounter an unsuccessful alternative we backtrack by resetting node positions to their earlier values and try a different alternative.

since we require the non‐overlap requirement to be relaxed for nodes contained within submaps, we extended the method in  <cit>  so that containment hierarchies may be specified. the solver then considers these containment relationships when resolving non‐overlap, and instead generates separation constraints keeping children inside parent nodes as well as non‐overlap constraints between siblings at each level of the hierarchy. an added benefit of this is that nodes at each level of the hierarchy are standard objects within the layout engine, which allows additional constraints between them, such as the alignment of terminal nodes on the boundary of submaps.

edge routing
to achieve high quality layout that follows the drawing conventions of sbgn there are several requirements for the edge routing. we require that edges do not cross or touch nodes other than at the point where they are connected to that node. the edge routes themselves should be orthogonal paths made up of only vertical and horizontal line segments with the minimum cost . we draw these edges with slight rounded corners but this is not a consideration in the routing problem itself. finally, where resultant edge routes share paths with each other, even when connected to a common node, we require that they are nudged apart so that they may be visually discerned, as per the sbgn specification.

edge routing is performed using a technique that generates an orthogonal visibility graph from a set of rectangular obstacles and uses this to generate orthogonal object‐avoiding routes  <cit> . the edge router requires us to give the locations of all nodes as rectangles with positions, as well as the edges and information on the nodes to which they are connected. we are able to specify connection ports on a node, which are specific positions and directions by which an edge must be routed into the node.

for most nodes we require that edges connect from any direction to the center of the node, though are only drawn to its border. for process nodes and macromolecules we define specific ports on the nodes which specify a particular position and direction that catalysis, consumption and production arcs must attach to. we use expanded node dimensions for process nodes and macromolecules, so that no edges cross catalysis arcs. we also specify connection ports on terminal nodes to force edges to connect to them at the boundary they share with their containing submap.

for reaction groups we route edges from each of the two compounds together so they diverge at a common point inside the reaction group, see figure  <dig>  this was done by extending the routing method in  <cit>  to allow specification of checkpoints that must be visited by a route. this effectively involves routing individual sub‐routes between pairs of endpoints or checkpoints along a route while appropriately penalizing bends occurring at the checkpoints.

after routing is performed, we use the nudging feature of  <cit>  to separate overlapping edge routes. we extended this nudging to also include final edge segments attached to nodes. while these would usually be fixed in place due to attaching to a pin or the center of a node, if multiple edges all enter a node from one side we allow these to be spaced apart up to the bounds of the node. we also modified the nudging to take checkpoints into account.

we also found that it was fairly common for fixed‐distance nudging to fail when there were many edges running through a limited space. for this reason we made the fairly simple extension of having the router recursively try increasingly smaller nudging distances for individual bundles of edges when this occurs.

RESULTS
our implementation of the described technique for translation of kegg pathways into sbgn is available in sbgn‐ed  <cit> , an add‐on for the vanted framework  <cit> b. this article describes a complete automated process for translating kegg maps to sbgn, including detection and display of ambiguous informationc. in addition to the translation process, we detail additions to our previous constraint‐based layout  <cit>  to allow containment hierarchies. the article also extends our prior edge routing work  <cit>  with checkpoints and improved nudging, which permit edge bundling for reaction groups.

we have applied this completely automated process to a large number of examples from the kegg database. some examples of the sbgn diagrams along with the original kegg reference images are shown in figures  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig> and  <dig>  it takes an average of four seconds to complete the translation and layout process for an individual pathway. for some larger pathway maps from the kegg database with up to  <dig> nodes the overall process can take up to  <dig> seconds.

notice that layout features and the overall look of the original maps are retained in the produced sbgn examples, including prominent vertical pathways in figures  <dig>   <dig>   <dig> and  <dig>  the tca cycle in the lower half of figures  <dig> and  <dig>  and recognizable reaction loops in all three of these examples. the quality of our produced layouts show that the described method does a good job of translating kegg maps into sbgn maps while preserving important aspects of the layout.

there are also some limitations to our approach. firstly, it can be slow for very large examples. while it is fast for small examples and the layout algorithms have polynomial complexity, they can take up to  <dig> minutes for a network with  <dig>  nodes and  <dig>  edges. we are investigating some possible improvements in this area. secondly, we currently do not focus on producing compact layouts, though it would be possible to adapt the techniques to achieve this and still satisfy all the layout constraints. thirdly, we can sometimes have issues positioning large numbers of edges routed along common paths if there is not enough space between elements for them to be ideally spaced. we could look at moving objects slightly to make space in this case, again taking advantage of the layout constraints so as not to degrade the quality of the layout.

while not necessarily a limitation of our approach, labels on the maps we produce can be difficult to read when they overlap with other elements. the sbgn specification requires that shapes representing compounds have a fixed shape, rather than being sized to fit labels. also, it dictates that labels must be drawn on shapes, which precludes us employing various approaches to map labeling that have been investigated to solve this general problem. the sbgn working group are aware of the problem and these requirements will hopefully be changed in future revisions of sbgn.

CONCLUSIONS
databases of biological networks are widely used in research and teaching by life scientists. while graphical representation of these networks follow some common drawing conventions they still often make use of various somewhat arbitrary notations. ideally, databases containing biological networks should provide these networks in a variety of graphical representations including sbgn.

we have described a method to automatically translate pathway maps from the well‐known and widely used kegg pathway database into a sbgn representation. we employ a constraint‐based layout method to follow drawing and layout conventions of sbgn while preserving important layout features of the kegg layout, allowing the resulting map be easily read and to remain recognizable as the original. the latter is especially important since kegg pathways are manually drawn so that their layout emphasizes biological relationships regarded as important by domain experts.

our proposed constraint‐based layout method could be adapted for use on sbgn maps converted from sbml or biopax formats. similarly, these maps would mainly consist of the sbgn elements simple chemical, macromolecule, process, and the corresponding arcs. the main difference is that position information is not specified in biopax format or in sbml format . thus positions have to be determined from the context of the map, e. g., fixed relative position of a macromolecule and a process node connected by a modulatory arc, or positioned first with more traditional graph layout approaches.

in terms of future work, we would like to investigate doing some form of compaction on the final layout, since our method can still sometimes result in unnecessary white‐space being added into the maps. we would also like to improve the case of detecting otherwise unconstrained reactions that appear to be incorrectly left out of alignment relationships. adjusting the alignment inference tolerance may solve this for individual maps, but we would like to do this analysis by looking at the network structure as well as the inferred constraints so that it works more generally. while not particularly difficult, solving these issue are important since they tend to be examples of the more obvious problems that users will notice in automatically generated layouts. it could also be interesting to translate the large kegg global maps into sbgn using our technique.

availability and requirements
•project name: sbgn‐ed

•project home page:http://www.sbgn‐ed.org

•operating system: windows , linux , and mac os 

•programming language: java 6/7

•license: gnu gpl  <dig> 

endnotes
a for a detailed description see http://www.kegg.jp/kegg/document/{help}_pathway.html.

b sbgn‐ed with kegg to sbgn translation including automatic layout is currently available for windows , linux , and mac .

c in contrast, our previous simple kegg‐sbgn conversion in  <cit>  did not translate all elements , did not highlight errors from the kgml, and included no layout or edge routing other than scaling up the entire diagram to reduce overlaps.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
tc implemented the kegg to sbgn translation, integrated the layout algorithms into sbgn‐ed and wrote the code to infer and specify constraints. mw designed and implemented the extensions to previous constraint‐layout and connector routing algorithms, and advised about constraint specification. km and fs supervised the project and contributed to the intellectual design of the described techniques, km primarily on the layout side, and fs predominantly on the biology and translation side. all authors contributed to writing the article. all authors read and approved the final manuscript.

