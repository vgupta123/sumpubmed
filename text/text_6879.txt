BACKGROUND
atomic structures of biological macromolecules give key insights into their biochemical function and are determined by conformational optimization within the landscape defined by experimentally derived and knowledge-based restraints. molecular dynamics and minimization, implemented in popular softwares like charmm  <cit>  and gromacs  <cit> , play a significant role in this process. however, all-atom forcefields used by these methods give rise to complex and rugged energy landscapes, which often create substantial difficulties in locating meaningful minima. this task can be facilitated if seed conformations are obtained within convergence radii of these minima.

recent studies have illustrated this for proteins in various contexts  <cit> . analyses of high resolution structures have yielded discrete preferred conformational states for protein backbones and sidechains  <cit> . protein loops modeled with weighted sampling of knowledge-based preferences, excluded volume restraints and ideal stereochemistry, when further optimized with an all-atom forcefield, have accurately predicted the native conformation  <cit> . the combination of knowledge-based local preferences  with non-local physical energy terms like hydrophobic burial and hydrogen bonding in a simulated annealing protocol has been effective in protein structure prediction  <cit> , homology modeling  <cit>  and structure determination  <cit> . interpretations of crystallographic data of both high  <cit>  and low  <cit>  resolutions have been achieved by combining discrete and continuous approaches.

the promise of this hybrid approach has not yet been fully exploited; for instance it has not been used to assess conformational ensembles to enhance structure determination with nmr and em data, to explore flexibility of ligands including macromolecules such as rna or to examine diversity at macromolecular interfaces. our approach, encoded in rapper  <cit>  , has been applied succesfully to a range of protein modeling problems where restraints have been introduced from knowledge of structures or experimental obsvservations. but rapper is limited in applicability due to its inflexibility in molecular representation , sampling direction  and search algorithm . these limitations have to be removed if the idea of discrete restraints-based sampling is to be applied to new problems. we found that this was quite challenging within the rapper codebase .

in this paper we describe an alternative framework, rappertk, which  programmatically decouples the logically distinct concepts like search algorithms, knowledge-based confomational preferences, sampling and building techniques and  provides access to them with a scripting language. the former reduces development time by allowing modules to be treated in isolation – e.g. rna sampling and building can be implemented independent of gabb. the latter speeds up the process of adapting the software to new scenarios, say by coding high level tasks like parsing and file manipulations in the scripting language. we show that both impact scientific productivity by allowing faster application of discrete restraints-based sampling to new problems. analogous to md softwares which provide a platform to run md/minimization schedules, rappertk provides a platform for discrete restraints-based sampling and reproduces rapper functionality for proteins as a special case. following sections describe the design, implementation and benchmarking of rappertk. we demonstrate that rappertk has a flexible, robust and easy-to-use software library which generalizes and builds upon the major concepts from rapper methodology in a modular, multi-layered fashion.

 <dig> implementation
fig.  <dig> shows a typical step in rapper-like incremental sampling. this involves three distinct steps : sampling of dihedral angles ϕ, ψ, ω, building coordinates for the next peptide using those of the previous and checking the cα-positional restraint. this suggests the concepts of sampler, builder and restraint. rapper maintains a population of conformers and executes these steps repeatedly on them according to gabb. this can be abstracted as search strategy which is responsible for correct ordering and execution of samplers, builders and restraints. in the modular, layered design of rappertk , application scripts reside at a level higher than search strategies – they carry out the task of preprocessing, creating necessary builders, samplers and restraints for the problem at hand, and passing them to the appropriate strategy.

we have chosen a c++/swig/python style of coding, whereby the interface of c++ code is exposed in python by generating suitable wrappers automatically with swig. such architecture has become popular among academic softwares  as it provides robustness without losing the fluidity needed in academic implementations. we now describe the major concepts in more detail.

 <dig>  coordinates
different sets of coordinates need to be maintained in order to allow for sets of conformers, either for population-based searches or for using ensemble averaged restraints. some coordinates are known and fixed, e.g. secondary structure elements in a loop building exercise. each point has an associated hard-sphere  radius adapted from those used in probe  <cit> . a high-level application script generates the coordinates. builders and restraints operate upon specified indices in given coordinates.

 <dig>  samplers
a sampler chooses a datum from an underlying distribution of conformational preferences by random weighted sampling. well-known examples are weighted ϕ, ψ sampling for protein backbone  <cit> , rna backbone  <cit>  and sidechain rotamer sampling  <cit> , all derived from high quality crystallographic structures. new types of sampling can be easily incorporated by writing a new sampler for the corresponding builder, say tri-ϕ, ψ sampler for tripeptide fragments, substructure sampler etc.

 <dig>  restraints
values of various geometric entities are useful in constraining the conformational space, e.g. internuclear distances derived from nmr noes, electron-density from x-ray analyses, cα positional information from templates in comparative modelling, and so on. a restraint object holds the information of points on which it is to be tested, and the method of testing. a restraint is generally binary; it is either satisfied or violated. a restraint can be also be optional, i.e. it can be discarded if sampling consistently fails due to that restraint.

 <dig>  builders and followers
a builder consists of the indices of coordinates it uses and those it calculates, along with the calculation technique. for instance, the ϕ, ψ-based peptide backbone builder uses coordinates of {ci- <dig>  ni- <dig>  cαi-1} to calculate coordinates of {ci- <dig>  ni, cαi}; {ci- <dig>  ni, cαi, cβi, ci, ni+1} coordinates are used by a backbone-dependent sidechain builder; and so on. thus builder is an abstraction of coordinate calculations operating on input and output indices within a coordinate set. a builder may have an empty input set or may have only known coordinates as inputs, in which case it is called a seed builder . there is a maximum number of trials a builder can undertake to extend a conformation; this will depend upon the conformational space available to sample. in order to avoid futile sampling, the builder may implement a session in which only unique samples are used, thus improving sampling diversity. follower is a concept specific to population-based searches. a builder is another's follower if it is advisable to execute it in the same population-search step as the leading builder. this was an improvisation first used during cα-trace scripting to build sidechain immediately after the relevant mainchain.

 <dig>  sampling strategy
the sampling strategy orchestrates the builders and restraints systematically to generate conformations. the sampling strategy can be divided into ordering and execution of restraints and builders. automatic ordering allows the application script to create builders and restraints in any convenient order. because strategies are coded in python, it is easy to write a new strategy.

 <dig> . <dig> ordering of builders and restraints
a correct strategy must calculate the order of execution for builders and restraints. there is a partial ordering induced on builders due to their input and output coordinates, i.e. a builder may not be executed unless its input coordinates have been computed, except for seed builders. thus there is a digraph of builders, with possibly many seed builders and others depending on one or more builders. restraints can be checked only after all coordinates to be tested have been computed, hence there is restraint-builder dependence. an efficient strategy must test a restraint as early as possible in order to avoid sampling the disallowed conformational space. once a builder succeeds or fails in its task, an efficient sampling strategy must use the builder dependence digraph to identify the builder to be attempted next. the strategy currently implemented in rappertk determines the builder order by topologically sorting the builder digraph, more specifically as follows:

• in case of multiple seed  builders, a dummy builder is assumed to be their parent. a procedure similar to dfs  is used to assign unique parents to all nodes, i.e. convert the digraph into a tree. a node appears as child of another node only if the latter is the only unvisited parent of the former.

• the size of subtree rooted at each node is found.

• using dfs again, an order is established for the nodes. when a node is popped off the dfs stack, its children are pushed onto the stack in the ascending order of subtree sizes.

• the order thus obtained is the final ordering used by the default strategy. if a builder fails, its unique parent builder may be executed, and the results of the parent and all its children discarded. if a builder succeeds, the builder next in order may be called.

• from this builder order, restraints are identified for each builder such that they have all the necessary points computed after the builder. thus every builder has associated restraints to check after it is executed.

as an illustration, consider conformational sampling of a three residue peptide  under the cα spherical positional restraints. four kinds of builders are employed. nanchorbuilder uses the first two cα restraints to anchor the peptide. backbone-dependent sidechain builder is used for sampling sidechains. since this builder requires parts of the backbone from adjacent residues also, two dummy gly residues are added, one each at the beginning and end of the tripeptide. peptidebuilder is used to build peptides in forward and backward directions. nanchorbuilder is the seed builder as it has no input points. reverse peptidebuilder, peptidebuilder- <dig> and sidechainbuilder- <dig> depend on it because their input coordinates are partly or completely contained in its output coordinates. similarly, sidechainbuilder- <dig> depends upon peptidebuilder- <dig> and peptidebuilder- <dig>  restraints carestraint- <dig> and  <dig> depend upon peptidebuilder- <dig> and  <dig>  from these dependences, a directed graph can be constructed with builders and restraints as nodes. topological sort on this graph produces a linear order of the builders, which suggests the builder to be tried after a successful  builder. the backward ordering  determines the builder to be called after an unsuccessful  builder.

 <dig> . <dig> execution of builders and restraints
once the ordering among builders and restraints is established, various search strategies can be used to sample conformational space. the simplest is an exhaustive search, where each restraints-satisfying option available to a builder is explored. rapper uses populationsearch algorithm  as mentioned earlier. gabb limits the number of restraints to be checked at every extension step and provides a pool of fit parents to build upon. each parent is allowed to contribute more than one child and parents compete to put their children in the children pool. in addition to populationstrategy, rappertk provides a minor variation which allows limited backtracking . the number and size of backtrack steps can be specified. in cases where the parents are not extensible at a certain step, the population search is restarted some steps earlier, determined by number and size of backtrack step specified. this saves the cost of starting from first step in case of failure at an advanced step.

 <dig>  spatial grid for checking clashes
steric clashes are a very important restraint on conformational freedom. hence the output of every builder is verified with a 3d grid that uses geometric caching to check the clashes efficiently. a gridhelper is provided to the grid to modify clash-checking functionality according to the application requirements. for instance, in atomic models, first and second covalent neighbours of an atom need not be clash-checked, the van der waals radius of sidechain atoms needs to be reduced due to discrete sidechain rotameric states, etc.

 <dig>  pdb reader, model renderer etc
the i/o functionality is written in python. pdb reader is largely adapted from a previous work  <cit> . modelrenderer is currently a pdb writer, but can be extended to write models in other formats too. modelrenderer is invoked by the strategy when it succeeds in sampling a conformation within given restraints.

 <dig>  application scripts
application scripts are high-level python scripts which generate problem-specific context by preprocessing given information and creating necessary rappertk components to be used by the search strategy. they can be invoked as execution modes from rappertk launcher script. application scripts are assisted by various utility scripts like the one for creating a standard set of builders and restraints.

 <dig> 
RESULTS
 <dig>  benchmarking
as tracing a polypeptide chain is central to all the tasks performed by rapper, we compare rappertk's performance at chain tracing with that of rapper for  <dig> large  proteins from the  <cit>  benchmark set . ensembles of  <dig> models were generated and the average rmsd values for the ensembles calculated. if the conformational search could not generate a model within  <dig> hours of computational time, the search was considered unsuccessful. mainchain-only models were generated using cα restraint radii of  <dig> ,  <dig>   <dig>  and 2Å. the cα restraint threshold defines the radius of the sphere within which the cα atom of the modelled residue is restrained to lie. the centre of this sphere is given by the native cα position. all-atom models were generated under cα restraint of 1Å and 2Å restraint on the centroid of the sidechain atoms. the van der waals radii were reduced by 25% to compensate for the fact that only specific sidechain rotamers were allowed. sidechain centroid restraint places and orients the side chain atoms with respect to the mainchains and affects bulky side chains more than the smaller sidechain groups.

rappertk can trace either from n to c terminal  or in the c to n  directions, with and without sidechains, in guided or standard sampling modes. standard sampling is rapper-like ϕ, ψ sampling which is unaware of the cα restraint to be satisfied. such sampling can be the bottleneck when restraints are tight or only a small portion of the restraint spheres are reachable geometrically. hence we have also incorporated guided sampling in which the sampler is aware of the restraint and produces samples within that restraint. as shown in fig.  <dig>  the location of cαi is defined by ci- <dig>  ni- <dig>  cαi- <dig> and r , α , θ . thus the restraint sphere is sampled spatially by the guided sampler to obtain r, α, θ, samples. corresponding ϕ, ψ, ω values are found using a pre-calculated mapping from r, α, θ to allowed ϕ, ψ, ω. since this mapping is one-to-many, a random sample is taken from available ϕ, ψ, ω values. such sampling ensures that the restraint sphere is sampled efficiently while still using ϕ, ψ values from the allowed region of ramachandran plot.

 <dig> . <dig> mainchain modelling
in addition to comparing the main chain modelling accuracy between rapper and rappertk in standard forward mode, models were built in the backward  mode in order to check whether the performance varies. table  <dig> shows the model accuracy under a spherical positional restraint of radius 1Å on cα atoms. similar values of mainchain and cα rmsds obtained demonstrate that performance of rappertk is comparable to that of rapper and consistent across the whole target set. the low standard deviation values within each ensemble show that all the three approaches produce tight clusters containing models that are all equally acceptable. larger restraint radii result in looser restraints and give models that deviate further from the native structures. rmsd values in table  <dig> demonstrate that both rapper and rappertk perform equally well under different cα restraint thresholds. for the restraint radius of  <dig> Å both rapper and rappertk failed to find complete ensembles for proteins 4enl, 8abp and 8tln. for 8tln, the conformational search repeatedly failed at leu- <dig>  since the conformational search builds one residue at a time, slight errors introduced earlier can sometimes make it difficult to find a suitable conformation for a residue causing repeated failures at the same position. this limitation can be circumvented by building the peptide chain in the reverse direction. using backward building for 8tln,  <dig> models could be found having an average main chain rmsd of  <dig> lÅ  and a cα rmsd of  <dig> Å . models for proteins 8abp and 4enl were built using the guided sampling mode in rappertk.

 <dig> . <dig> all atom modelling
as can be seen from table  <dig>  the model accuracies for rapper and rappertk are comparable and do not vary significantly across the different proteins. the average all atom rmsd for rapper and rappertk for the entire protein set is  <dig> Å and  <dig> Å respectively. on using the guided sampling mode within rappertk there is a  <dig> Å to  <dig> Å reduction in the main chain and a  <dig> Å to  <dig> Å reduction in the all atom rmsd values. the average all atom rmsd over the target set also reduces to l.0Å. the average χ <dig> error is comparable for rapper , rappertk  and guided sampling . the average χ <dig>  values for the three approaches are also similar,  <dig> ° for rapper,  <dig> ° for rappertk and  <dig> ° for rappertk using guided sampling.

 <dig> . <dig> computational cost and quality check
model quality was assessed using procheck  <cit> . all structures have main chain bond lengths and angles within the limits of the standard deviation of their small molecule values and also have good sidechain stereochemistries. computational cost scales with the size of the restraint sphere used to generate the models. as can be seen from fig.  <dig> the computational cost for rappertk is less than that for rapper for restraint radii  <dig> ,  <dig>  and  <dig>  l.5Å. the average time taken by rappertk under a cα restraint of 2Å is only slightly higher at  <dig> s/models compared to rapper which takes  <dig> s/model. there is a visible improvement in speed at the restraint radius of  <dig> Å. this demonstrates that rappertk is more able to find a solution within a very tight restraint network with fewer failed attempts. fig.  <dig> shows the computational cost for all-atom modelling of each protein in the target set. the time taken to build a successful all atom model by rapper is similar to that taken by rappertk. for 5cpa, rapper repeatedly failed at tyr: <dig> which has an unusual ω angle of  <dig> °. rapper takes an average of  <dig> s to find a solution whereas rappertk is able to build a model in an average time period of  <dig> s. on using guided sampling the computational cost siginificantly decreases. the average time taken reduces to  <dig> s/model compared to the average time of  <dig> s/model taken by rappertk and  <dig> s/model by rapper. also on using guided sampling, the cost is nearly the same across the set, irrespective of the stereochemistry of the individual structures.

 <dig>  illustrations
we now describe the use of rappertk to carry out some new sampling tasks.

 <dig> . <dig> protein-ligand interface sampling in electron density
protein ligand interactions are central to understanding the roles of ligands as well as the mechanisms of enzymes. the approximate location of a ligand is often known but small ligands often have poor electron density. this scenario is suitable for automatically fitting various ligand conformations into the density with rappertk, thus creating an ensemble for further refinement. from a recent paper on automatic modeling of ligands  <cit> , we chose a medium resolution  structure  of p <dig> kinase in complex with a quinazoline ligand.

in order to describe the degrees of freedom in a ligand, a file format was devised. it describes the ligand's bootstrapping , rotatable bonds  and internal distance restraints . builders and restraints are created using the information given in this file. covalent bond lengths and angles are not altered from the initial coordinates given as input.

depending on ligand proximity, small sections of protein chains are identified and sampled using a loop sampling and closure procedure. loop closure samples the location of cαi given the locations of cαi- <dig> and cαi+ <dig> as shown in fig.  <dig>  sidechain centroid restraint and cα restraint are lenient close to ligand.

electron density restraints are employed using the excellent clipper libraries  <cit>  for crystallographic computations. the deposited pdb structure is used to phase the structure factor amplitudes and to obtain an electron density map. edrestraint is satisfied by builder outputs which lie in reasonable density  and have good mean density . edrestraints are optional except for the ligand. edrestraints operate on the output of each builder.

this scheme of flexible-protein flexible-ligand yields an ensemble of protein-ligand interface conformations which are consistent with the expected degrees of freedom of ligand, electron density, hard-sphere clash restraints and covalent geometry of the protein . further refinement and ensemble interpretation will be addressed in future work. apart from crystallographic application, such sampling can be used by small molecule docking programs also to generate trial conformers of the ligand and protein.

 <dig> . <dig> protein-rna interface sampling
although rna conformational preferences are harder to identify due to the much larger conformational space , recent analysis has revealed the ro-tameric nature of the rna backbone  <cit> . we use these preferences to extend the rna chain as shown in fig.  <dig>  bootstrapping copies the initial few atoms from the given structure to the region specified by restraints on them. incremental build of the rna chain is done by rnasuitebuilder, which depends on atoms {c5*, c4*, c3*} and builds atoms {o3*, p, o1p, o2p, o5*, c5*, c4*, c3*} along with sugar and base.

in this illustration , we choose protein chain a and rna chain e from a recently solved protein-rna complex . we identify sections of protein chain in close proximity to the rna. these sections are later sampled as loops with loop closure and restrained with cα and sidechain centroid positional restraints. rna bootstrap builder regards {c5*, c4*, c3*, p, o1p, o2p, o5*} atoms of the first nucleotide as a rigid body and translates/rotates it so that c5*, c4*, c3* atoms are within 2Å of native positions. during incremental building, the c3* atom is restrained to lie within 2Å of the native c3* atom. as before, the deposited pdb structure is used to phase the deposited structure factor amplitudes and builders are restrained to build within a mean electron density of  <dig> σ .

generation of multiple conformations of protein-rna interface with rappertk can be useful in deriving multiple interpretations permitted by the crystallographic data. interface diversity thus assessed may lead to novel insights into function. this issue will be addressed in detail in a future study.

 <dig> . <dig> sampling β sheets
in low-resolution crystallographic or em data, salient features of the structure  are more detectable than the terminal regions or loops, making it desirable to start building a model at such features. α-helices are easier to sample than β-sheets because hydrogen bond restraints in helices are sequential unlike those in sheets. hence sequential sampling is inefficient for the later strands in a sheet. as rappertk is not restricted to sequential sampling, a β-hairpin can be built as shown in fig.  <dig>  by bootstrapping at the linker of the strands and extending in forward and reverse directions. the building order is zigzag and helps in maintaining strict hydrogen bond geometry . we observed that this builder order is more efficient in sampling the hairpin under positional and hydrogen bonding restraints, than the simple sequential order.

rappertk extends this scheme of sampling β-sheets to parallel sheets and arbitrarily many strands . if residue positions  correspond to positions  in parallel β-sheets, hydrogen bonding distance restraints are applied on , , ,  etc. in antiparallel sheets, where residue positions  correspond to positions , distance restraints are applied on , , ,  etc. sheets with multiple strands are tricky due to the variable number of hydrogen bonds between adjacent strands. additionally, a strand may be linked to other strands in both parallel and antiparallel arrangements, e.g. in a 3-stranded sheet with corresponding residue positions ,  and , residue j is involved in ,  while residue j +  <dig> forms hydrogen bonds , ; this pattern repeats every alternate residue. this scheme is used in the next example.

 <dig> . <dig> all-atom model generation from approximate secondary structure information and particle shape
techniques like em and saxs are valued for their ability to estimate macromolecular shape and to help in global relative positioning of parts of the particle. automatic identification of secondary structures and prediction of their topology is possible  <cit>  by morphological analysis of em data. coupled with secondary structure prediction from sequence, this generates approximate positional restraints on cα atoms in secondary structures. we demonstrate here that rappertk can combine the shape and secondary structure positional restraints to generate atomic models.

in order to simulate this scenario, we generated an artificially blurred electron density map at 10Å resolution using eman  <cit>  and built into the envelope defined by  <dig> σ contour. 3Å cα positional restraints are placed on residues in secondary structures. there are no positional restraints on sidechains and loops. hydrogen bonding restraints are used for β sheets as described earlier, and also on α helices. ten models thus generated are shown in fig.  <dig>  model variations are large in loops but not in secondary structures due to secondary-structure-specific sampling style used by rappertk.

 <dig> discussion and 
CONCLUSIONS
rappertk's design makes it possible to apply discrete restraint-based modeling to a variety of problems robustly and easily because

• introducing new builders, restraints, samplers and search strategies is easy.

• any level of granularity can be chosen to represent the structure.

• automatic ordering of builders and restraints spares the user from the tedious task, but a preferred order may be imposed if needed.

• any number of coordinates may be known before modelling. they can be used as restraints or to make seed builders or just as steric obstructions.

• ensemble building and average restraints can be introduced easily by adding restraints which check the average value of some property of the conformational pool.

the modularity and flexibility of rappertk makes it an attractive platform for carrying out discrete restraint-based modeling tasks under a variety of restraints, as we have demonstrated here. rappertk can also be useful to generate decoy sets useful in developing energy functions for discriminating between non-native and native conformations.

our immediate goals with this toolkit include exploring protein-ligand and protein-rna interface conformations, aiding automation of x-ray refinement and developing a protocol for interpreting nmr restraints. to address these tasks more effectively, some more features will likely be needed. for instance, non-binary restraints are not at present implemented. to introduce such analog restraints, the population seach strategy will be modified to allow scoring of conformational extensions as well as members of an ensemble of conformations. we also intend to implement coarse samplers to address sparse restraint scenarios, e.g. by analyzing geometric preferences between adjacent secondary structure elements, a coarse-grained secondary structure incremental sampling can be achieved. another concern is that although builder order in rappertk is flexible, still it is a linear order, hence concerted conformational change is not possible. we are working on implementing a strategy inspired by the scwrl algorithm  <cit> , which will operate at the level of side-chains as well as fragments and optimize the conformational possibilities independent of builder order. another strategy under consideration involves simulated annealing and incorporation of conformation-modifiers which tweak the structure in a particular way, e.g. local backbone moves, rigid-body fragment movements, sidechain flips and so on. tweakers will form the move-set for simulated annealing which will be used to obtain a coarse structural framework that will be further explored to get atomic models.

in conclusion, we believe that rappertk will prove to be a useful platform for conformational sampling and searching for a wide range of applications.

availability and requirements
• project name: rappertk

• project home page: 

• operating system: linux

• programming language: python c++

• other requirements: swig

• license: gnu gpl

• academic users can download the source code project home page and also as additional file with this paper. commercial users should contact the authors for a license.

abbreviations
gabb genetic algorithm with branch-and-bound algorithm

pdb protein data bank

dfs depth-first search

swig simplified wrapper and interface generator

rmsd root mean square deviation

authors' contributions
spg designed and implemented the software library and drafted the manuscript. amk performed benchmarking runs and contributed the corresponding section in the manuscript. tlb critically reviewed the manuscript and provided valuable guidance. all authors read and approved the final manuscript.

