BACKGROUND
sequence similarity searches have become an integral part of contemporary life sciences  <cit> . more than two decades have now passed since the basic local alignment search tool  was introduced to the bioinformatic community  <cit> , constituting a breakthrough for rapid similarity search tools  <cit> . despite the staggering changes that have taken place in biology, sequencing and computing technology, blast remains the most common used algorithm for sequence similarity searches  <cit> . this is reflected by the exceptionally high numbers of citations for the two original blast papers . the continued popularity is due to the intuitive appeal of the algorithm  <cit> , its speed and efficiency  <cit> , and being supported by a complete, rigorous statistical theory  <cit> .

blast has been used for most purposes involving biological sequence searches and alignments, some examples being est annotation  <cit> , contig assembly  <cit> , genomic fragment reconstruction  <cit> , orf validation  <cit> , prediction of protein function and origin  <cit> , distant homolog  <cit>  and putative ortholog detection  <cit> , phylogenetic analysis  <cit>  and metagenomics  <cit> .

blast services can be accessed numerous places on the web and are often free of charge; one of most popular is the blast implementation hosted by the national center for biotechnology information   <cit> . it receives hundreds of thousands requests a day  <cit> , and presents blast results as textual reports with graphical representations of the calculated alignments.

such web-based blast implementations are convenient to use for the analysis of a small number of sequences. however, both limitations of computational resources and the way results are presented render this approach unfeasible for large blast searches that might involve thousands  of unique query sequences. in recent years, due to new sequencing technology, high-throughput searches of this magnitude have become a standard situation in many fields of research, such as est annotation  <cit> , genomics  <cit> , metagenomics  <cit>  and phylogenomics  <cit> . in addition, projects without high-throughput sequencing data also exhibit a trend towards increasing query numbers. examples might be all-against-all comparisons useful in est annotation  <cit> , proteome-against-proteome searches in order to identify orthologs  <cit> , or simply pooling diverse queries together so as to minimize the number of job submissions to an external computing resource.

in order to perform the actual high-throughput blast search, it is necessary to use a stand-alone implementation of the blast algorithm rather than relying on web-based public installations such as the ncbi resource  <cit> . many research institutions have solved this by establishing high-performance computing  clusters hosting blast-related databases and pipelines. since blast scales well when parallelized, such hpc installations can handle large high-throughput sequence input in a reasonable amount of time. the results of high-throughput blast runs could still present the user with gigabyte-sized text files, the data volume alone representing a challenge for inexperienced users. for specific research fields, massive blast output can be analysed by specialized, user-friendly programs that run on ordinary desktop computers – such as the megan  <cit>  program for metagenomics. for many other research fields however, scientists find suitable tools missing  <cit> . surprisingly, this includes generic blast output interpreter programs capable of visualizing, analysing and selecting massive blast output data.

this reflects a more general problem in the field of biological data visualization and analysis - contemporary biological data generation has outpaced the traditional data processing approaches  <cit> . some of the important features recently suggested to alleviate the perceived program shortcomings include  improved usability, new visual analytical modes, and multi-scale standardized data representations  <cit> . especially intriguing is the challenge of visualizing massive amounts of data in a suitable way. new, innovative visual representation techniques are needed that provide both an overview over, and facilitates detailed navigation into, the mass of information in these data sets  <cit> . hence, improved visualization technologies are clearly amongst the key aspects of knowledge discovery and data mining  <cit> ; some of which have begun to find their way into mainstream science . suitable analysis tools will be in demand as sequencing technology become even more efficient.

we here present a program designed for the effective exploration of blast output generated from large scale database searches. it is aimed at an audience of computer non-experts not familiar with programming languages, database retrieval or command-line usage. the program facilitates visualization, analysis and selection of data. importantly, the application provides new functionalities including taxonomic ordering of data, text search options, multi-dimensional display and a range of possibilities for filtering and downloading of data from public sequence databases. the program, introduction video and additional utilities are freely available for download at http://www.bioportal.no.

implementation
blastgrabber consists of a downloadable desktop java application capable of visualizing and selecting high-throughput blast output. taxonomic analysis is supported based on mapping of ncbi gi-numbers to taxonomy identifiers, or alternatively parsing the headers of the blast hits. selected blast hits and queries can be exported in text format .

the blastgrabber application
the blastgrabber desktop application is a gui-based java program that will run on windows-, macos- or linux- based computers. apart from the java runtime environment , no other installations are required to run the program. blastgrabber will work on low-spec systems including netbooks. for high-throughput data however, 4 gb of memory and a processor comparable to  <dig> ghz core i <dig> are recommended. blastgrabber is installed by extracting the installation zip file containing the blastgrabber jar file and additional files . in order to maximize memory usage, the program can be started from the command line, explicitly specifying the java heap space parameters. alternatively, double-clicking an included shell file can start blastgrabber with 2 gb of maximum heap spaces.

blastgrabber uses a custom input file format  to represent blast output. this file is produced by an import wizard included in the blastgrabber application . the wizard will recognize blast xml output format, in addition to standard text-formatted blast output from both the current blast + version and the older blast  <dig> .* versions. as taxonomy information is not included in the standard blast output, taxonomy identifiers will not be included when importing blast files.

the *.bgr file is formatted as a text file, and lists the included queries and sequences . multiple hit sequences with identical fasta headers are represented only once. in addition, the file contains blast statistics such as e-values and bit scores. ncbi taxids can be appended to the *.bgr file after importing by using the included taxonomy wizard. these allow a downstream taxonomical representation in the blastgrabber program.

upon loading a *.bgr file, the query, sequence and high scoring pair  attribute objects are instantiated from the *.bgr file and kept in the computer memory until the program is terminated . since all the blast data is directly available in computer memory, most blastgrabber operations complete in a few seconds at the most. therefore installed memory limits the maximum blast data size usable by blastgrabber. for blast output exceeding these memory limitations, it is possible to break apart the offending blast file into multiple smaller parts. these can be imported and opened individually, and possibly merged together again at a later point in the analysis. the effectual maximum blast output size can be doubled using this technique.

the blastgrabber installation folder includes the ncbi taxonomy structure compressed into a custom binary format. in order to keep the start-up time and memory overhead as low as possible, only scientific taxonomy names are included. loading the taxonomy happens automatically at blastgrabber start-up, but can be cancelled by the user in order to preserve memory or improve blastgrabber start-up time. the blastgrabber taxonomy file can be updated by downloading the ncbi taxonomy files and using the included update functionality.

blastgrabber includes text search options; these are implemented using the java regular expression  api. graphical representations of hit alignments are based on hsp attributes describing the start and end of the blast-generated alignments. no mismatches or gaps are indicated since this information is not included in the *.bgr file. however, sequences and alignments for selected hits can be downloaded from ncbi or extracted from the original blast output and query files.

blastgrabber architecture supports third party plugin development not depending on blastgrabber source code. communication to and from the plugin is defined by two specific interfaces; jar folders in the “plugins” subfolder featuring these required interfaces are loaded and activated at blastgrabber start-up .

example datasets
two queries representing the fibronectin- <dig>  and i-set  domains on the drosophila melanogaster “down syndrome cell adhesion molecule” protein  were used in a blast search against the drosophila uniprot reference proteome. these two motifs are found multiple times next to each other in various drosophila multi-domain proteins and are well suited to illustrated sequence alignment visualization in blastgrabber.

the blastgrabber visualization and analysis of the example datasets was compared to the jamblast  <cit>  and blastviewer  programs. as jamblast utilizes a customary csv format  produced by the accompanying noblast  <cit>  blast implementation, identical searches were performed producing the required blast output formats. in addition to the noblast *.bls format required by jamblast, blast xml output is required for blastviewer.

in order demonstrate taxonomy display, a blast search  was performed against the ncbi “nr” database using the two “fibronectin-3” and “i-set” queries mentioned above.

RESULTS
user-friendly visualization and analysis
despite the continuing high popularity of the blast algorithm and ever-increasing data loads, there is a perceived lack of high-throughput-capable, user-friendly generic blast output visualisation tools. blastgrabber is designed to be usable by computer non-experts and implements a truly multi-query mode-of-analysis which is backed by visual displays. the included taxonomy wizard adds taxonomy identifiers to the blast data, allowing the downstream integration of sequence descriptions, origins and hit quality assessment. also, the blastgrabber architecture facilitates the development of third-party plugins, opening new possibilities for blast-related analysis algorithms. some aspects of blastgrabber overlap with the jamblast and blastviewer programs functionalities. just as blastgrabber, both are free and user-friendly java programs that visualize blast files. while supporting many additional analysis features when compared to existing similar programs, we find blastgrabber to perform as well or better in terms of data input capacity and speed, all the time retaining minimal installation requirements and an intuitive and user-friendly interface.

blastgrabber uses a matrix viewer of hits and queries
blast-related programs often display hits and queries as a hierarchical structure, where each query is associated with an ordered list of hits for that query. each hit in turn can possibly contain multiple hsps for that hit and query; often graphical representations of the hit alignments are displayed. ordering of hit and hsp lists is done by some measurement of similarity , such as e-values or bit scores. this analytical structure, which demands the selection of individual queries to inspect associated hits, is so pervasive it has been claimed to be almost without alternatives  <cit> .the visualisation structure adopted in blastgrabber differs fundamentally from this hierarchical approach. using the matrix viewer , hits are distributed in table rows and columns depending on two selected hsp attributes . the cell content thus represents all hits  that conform to the cell specifics . a third attribute statistic is displayed in the cells themselves, the default being the number of hits therein, but other statistics such as average identities are available. heat map rendering based on these values can be applied. row and column sort in response to header clicks; lexicographical sorting is implicitly possible by selecting the desired attributes for row and column intervals, in addition to cell statistics.

this hit-focused  display mode allows the inspection of hundreds of thousands of hits at a glance, distributed across a few table cells only. cell contents  are easily selected, either by manually clicking on cells of interest, or else defining cut-off values for cell statistics . selected cells are “grabbed”, i.e. copied to the blastgrabber clipboards. clipboard contents are persistable as *.bgr files, allowing iterative purifying selection by *.bgr file opening, subset selection and persistence.in contrast to blastgrabber, the blastviewer program displays hits and queries as a hierarchical structure. when using multiple-query blast output each query must be selected before the associated hits are displayed . the hit list is sortable by any hsp attribute by simply clicking a column header; top-scoring hits can be exported to a text editor in csv format. lexicographical sorting  can be accomplished by clicking column headers in the reverse order of the desired priority. blastviewer visualizes all the blast attributes for each of the hits, but because queries have to be selected one at the time without any filtering options, it becomes virtually impossible to use for analysis of thousands, or even hundreds of thousand, queries.jamblast also employs a hierarchical structure but has a slightly different visualization mode than blastviewer, displaying all queries and top scoring hits in the same table . the program supports lexicographical ordering by the explicit selection of the hsp attributes sort order. the best hits for multiple queries can be selected in one go with subsequent export to a text editor program. without clustering multiple hits into fewer categories , it is virtually impossible to extract relevant information from high-throughput data.

alignment visualization
most blast output interpreter programs provide a graphical representation of the blast-generated alignment, i.e. the sequence overlap between query and hit. in addition to displaying hits as they are aligned against a selected query, blastgrabber can also do the opposite; i.e. display multiple queries overlapping one selected hit. thus, for instance the position of multiple genes  along one chromosome  can be displayed.

“grabbing” is integrated across blastgrabber viewers; hits represented by the displayed alignments can be copied to the clipboards just as for the matrix viewer. both blastgrabber and blastviewer support a colour-coding schema reflecting the statistical significance of the hit .blastviewer  restricts alignment visualization to one query/sequences pair, displaying all hsps as coloured bars along the sequence representation. jamblast  includes just one such alignment at the time; multiple hits for one query cannot be included in one graphical representation. neither of these two programs can display multiple queries for one selected hit .all three programs can include the display of alignments in text format . in blastgrabber the alignment is extracted from the original blast output file; the jamblast database includes alignments only if the relevant option was included when running noblast. the blastviewer alignment is read-only and cannot be copied.

text searches with the description viewer
jamblast and blastviewer, like most blast output interpreter programs, do not support text searches in the sequence fasta headers. the blastgrabber description viewer  however, supports flexible text search with subsequent hit selection in both headers and blast query names. using regex search terms, matching entries can be selected and copied to blastgrabber clipboards. suitable regex templates are provided, demanding no prior knowledge of java regex syntax.

in addition to performing searches in the complete headers or query names, these can be split into individual words. this allows determination of the relative frequencies of keywords of interest, such as enzyme or species names. word splitting is regex-based and fully configurable.

taxonomical ordering of data in the matrix viewer
all biological sequences reflect evolutionary events such as adaption, speciation or separation. thus they are best classified according to a taxonomical order believed to fit these events. the classification of organisms has been revolutionized by dna sequence analysis, which has become one of the primary means of taxonomic identification of species  <cit> . besides the obvious goal of constructing phylogenies and an evolutionary tree of life, taxonomical sequence information can be utilized in many diverse tasks. these include ecological studies and metagenomics of un-culturable micro-organisms  <cit> , the removal of contamination  from shotgun or contig datasets, or the study of horizontal gene transfer. taxonomy even facilitates tasks such as protein domain discovery  <cit>  or protein fold recognition  <cit> .in blastgrabber, the ncbi taxonomy is fully integrated into the matrix viewer , displayed as an interactive tree structure. along the matrix viewer vertical axis, taxonomy nodes can be expanded or collapsed at will, facilitating selection or taxonomic annotation at a level higher than the species level. the horizontal axis can harbour intervals for any blast hsp attribute, or even the queries or hit sequences themselves. taxonomic distributions can easily be assessed by ordering the columns according to frequency counts or accumulative distributions, possibly using the heat map display mode. hit selection and “grabbing” is fully supported. for instance hits identified as cnidarian sequences containing the “fibronectin 3” motif can be “grabbed” by selecting the corresponding cell. alternatively, undesired groups such as for instance “nematode” can be excluded from further analysis . neither blastviewer nor jamblast support this mode of analysis.

splitting and merging files
contemporary high-throughput projects may generate millions of sequences used as queries in blast similarity searches . depending on the installed computer memory, blastgrabber can handle blast output containing a few hundred thousand queries. if the relevant data set is too substantial to be imported into blastgrabber, the blast file can be split into smaller parts; each single part can then be imported individually into blastgrabber. subsequently, several *.bgr files can be merged to join previously disjoint data sets.

blastgrabber performance
given ever-increasing blast output sizes, the ability to handle such data on a normal desktop computer will be considered crucial by many users. in implementing blastgrabber, care was taken to minimize the data representation memory footprint. the validity of the approach was confirmed when comparing blastgrabber to the blastviewer and jamblast applications . compared to blastviewer and jamblast, maximum blastgrabber capacity was about twice as high.

*as tested on a laptop computer;  <dig>  ghz core i <dig> 2537 m processor, 4 gb of memory, ssd hard drive. java heap space was set to 4 gb. on average, blast data consisted of  <dig> sequences pr. query.

once blast data has been loaded, all three programs were quite responsive and performed most operations within seconds, even when being used close to their maximum capacities . data loading by itself also executed quite rapidly as long as the input file sizes did not exceed ~ <dig> percent of the maximal capacity.

*as tested on a laptop computer;  <dig>  ghz core i <dig> 2537 m processor, 4 gb of memory, ssd hard drive.

**on average  <dig> hits pr. query; queries without hits were excluded from the blastgrabber input file.

CONCLUSIONS
along with the rest of bioinformatics, performing blast searches has changed substantially over the past two decades. the default textual blast output is well adapted to single-query blast runs, but next-generation sequencing technologies and growing database sizes demand advanced visualization and analysis capabilities. at the same time, an increasing number of biologists without expert knowledge of programming languages or database retrieval techniques need to work with blast and blast-related tools.

we believe that the blastgrabber program can serve as such a tool. it enables the handling of large amounts of data on desktop computers, while at the same time delivering new and advanced visualization styles. in addition, the flexible text-mining options provide easy selection of blast hits or queries. finally, the integrated taxonomy display can add an extra dimension to traditional sequence similarity searches.

availability and requirements
project name: blastgrabber.

project home page:http://www.bioportal.no.

this web address also hosts the blastgrabber user guide and a tutorial video demonstrating the use of blastgrabber. the blastgrabber zip file contains both sample files and the user guide.

operating system: platform independent.

programming language: java.

other requirements: java runtime environment .

license: creative commons attribution-noncommercial-sharealike  <dig>  unported license.

any restrictions to use by non-academics: none.

abbreviations
blast: basic local alignment search tool; csv: comma-separated values; gb: giga-bytes; jar: java archive; hpc: high-performance computing; hsp: high-scoring pair; mb: mega-bytes; ncbi: national center for biotechnology information; regex: regular expressions; uoo: university of oslo.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
concept and design: rsn, sk, kst. programming: rsn, sk. testing: rsn, sk, thah, kst. drafting manuscript: rsn, sk. critical revisions: rsn, sk, thah, kst. final manuscript approval: rsn, sk, thah, kst.

supplementary material
additional file 1
blastgrabber user guide.

click here for file

 acknowledgements
we thank student and researchers at the microbial evolution research group  and section for genetics and evolutionary biology for testing of the blastgrabber program.

funding
this work has been supported by a vista/statoil fellowship to thomas h. a. haverkamp, phd fellowships to surendra kumar and ralf neumann and starting grant to kamran shalchian-tabrizi from the university of oslo.
