BACKGROUND
effective treatment of a complex disease, such as cancer, requires practical means to control the biological network underlying the disease. however, such therapeutic intervention is difficult in practice, due to the inherent robustness of biological networks to external perturbations and changes. biological networks are known to be redundant at various levels, hence knocking out a specific gene or blocking a specific pathway often does not significantly change the dynamics of the network. for this reason, monotherapy using a single drug that targets a specific protein  is often limited in its therapeutic effect, and multi-target therapeutics are considered to be much more effective  <cit> . examples of such multi-target therapeutics can be easily found in cancer chemotherapy, where most of the chemotherapy regimens consist of multiple drugs. nowadays, combination therapies are commonly used for treating various complex diseases, including cancer and diabetes. one practical challenge in multi-target therapeutics is that the number of drug combinations increases exponentially, as the number of drugs and the number of possible concentrations increase. for example, if we want to find the optimal combination of n drugs, where each drug can take l different concentrations, there exist ln distinct drug combinations. even for reasonably small l and n, the number of distinct combinations can be very large, making it practically impossible to find the optimal drug combination through exhaustive search. for this reason, we need a systematic method for finding the optimal combination of multiple drugs in a huge space of possible drug combinations.

recently, a number of algorithms have been proposed for efficient prediction of optimal drug combinations  <cit> . for example, calzolari et al.  <cit>  proposed an optimization framework based on search algorithms that are derived from sequential decoding algorithms, widely used in digital communications  <cit> . it was shown that these search algorithms are capable of finding the optimal drug combination using only a small fraction of tests that would be needed for an exhaustive search  <cit> . wong et al.  <cit>  proposed another optimization framework based on a stochastic optimization algorithm, called the gur game algorithm  <cit> . in this work, wong et al. formed a closed-loop feedback control system, where they measure the cell response to a specific drug combination, and use the gur game to predict a new drug combination that is likely to improve the cell response. it was demonstrated that the closed-loop optimization approach can effectively find potent drug combinations in a relatively small number of iterations  <cit> . neither approaches  <cit>  require any prior knowledge of the underlying biological network, which makes these methods easily applicable to various biological and medical optimization problems. as discussed in  <cit> , if the biological system of interest shows a significantly nonlinear response to multiple drug combinations, a stochastic search algorithm, such as the gur game algorithm  <cit> , is expected to perform better than nonstochastic algorithms. however, if the nonlinearity is moderate, nonstochastic search algorithms  <cit>  may be more preferable.

an important advantage of the stochastic optimization approach is that it can effectively find potent drug combinations in the presence of multiple local optima  <cit> . the stochastic behavior prevents the algorithm from being trapped in a local optimum, increasing the probability of finding the globally optimal drug combination. furthermore, stochastic algorithms can effectively cope with any uncertainty or variability that may exist in the objective function to be optimized. when our goal is to find the best combination of multiple drugs that can most beneficially affect the biological system at hand, we will have to evaluate the objective function  based on biological measurements. in such cases, measurement noise is practically unavoidable, hence the optimization algorithm should be robust to random variations that may arise from the inherent noise. from this respect, the gur game algorithm, which was used in  <cit>  for predicting effective drug combinations, is especially attractive in various biological optimization problems. however, the gur game algorithm has also inherent limitations that may significantly degrade its overall performance for certain drug response functions. in this paper, we discuss the limitations of the original gur game algorithm and propose a novel stochastic optimization algorithm that can effectively address these issues. based on various drug response functions, we demonstrate that the proposed algorithm significantly outperforms the gur game algorithm, in terms of both reliability and efficiency.

RESULTS
limitations of the gur game algorithm
let x =  be an n-dimensional vector that represents the combination of n drugs, where xn is the concentration of the nth drug. we define f to be the normalized drug response function that measures the desirability of a given drug combination x. we assume that  <dig> ≤ f ≤  <dig> for x ∈ x, where x is the set of all possible drug combinations under consideration. a response of f =  <dig> implies that the combination x is completely ineffective, while f =  <dig> implies that the given x results in the optimal therapeutic outcome. our main goal is to find the optimal drug combination x* that maximizes the normalized drug response f as follows:  

recently, wong et. al  <cit>  adopted a stochastic search algorithm called the gur game algorithm to find the most effective drug combination. they showed that the gur game algorithm can efficiently find potent drug combinations in a large combinatorial solution space. the basic idea of the gur game algorithm is to take a random walk in a finite state automaton  to find the optimal combination, where each state in the fsa represents a distinct drug combination. at each step, the normalized drug response f is evaluated at the current state , based on which the algorithm randomly chooses the next state  that is likely to improve the response. this is achieved as follows. the algorithm generates n random numbers rn ∈  <cit>  for n =  <dig>  ⋯ , n. each rn is compared to the current drug response f. if f <rn, the nth drug is “penalized” and the concentration xn is updated accordingly. otherwise, the nth drug is “rewarded” and its concentration is updated accordingly. this is illustrated in figure 1a for the nth drug. suppose the current concentration of the drug is xn = ck. if the current drug response f is smaller than the randomly generated number rn, the algorithm penalizes the drug by switching the concentration to xn = ck– <dig>  in case f exceeds rn, the drug is rewarded and the algorithm switches the concentration to xn = ck+ <dig>  note that the direction of state transition for rewarding  the current drug concentration is predetermined. according to this method, the current drug concentration x has a higher probability of being rewarded if f is high. on the contrary, the concentration x will be more likely to be penalized if f is low. this will probabilistically drive the fsa to more desirable states that result in more effective drug responses. it should be noted that the algorithm allows a small probability of penalizing the current drug concentration even if the drug response f is high . this stochastic property prevents the algorithm from being trapped in local maxima, thereby increasing the chance of finding the global maximum. in addition to this, the randomness can make the search algorithm robust against possible measurement noise in f. this is an important feature when our goal is to use this search algorithm in conjunction with biological experiments.

despite its many advantages, the gur game algorithm has also inherent limitations. to see this more clearly, let us consider the toy examples shown in figure  <dig>  suppose we want to find the optimal concentration x of a single drug that maximizes the drug response f. we assume that there are five possible drug concentrations x ∈ {c <dig>  c <dig>  ⋯, c5}, hence our goal is to find the optimal concentration  

among the five concentrations, using the gur game algorithm. for this purpose, we use the fsa shown in figure 2a. this fsa rewards a given drug concentration ck by increasing it further if ck is higher than the central concentration , unless ck is already the maximum allowed concentration. on the contrary, if the current concentration ck is lower than the central concentration, the fsa rewards it by decreasing the concentration further, unless ck is already the minimum allowed concentration. if ck is at the center, either direction is chosen with equal probability.

first of all, consider the drug response f depicted in figure 2b. as we can see, the value of f is always below  <dig>  and the concentration that maximizes the response is x* = c <dig>  since f <  <dig>  for every possible concentration x, the probability that a uniformly distributed random number r ∈  <cit>  will exceed f is always larger than  <dig> . more precisely, we have  

therefore, the state  x = c <dig> will have a higher steady-state probability compared to other states, and the random walk will visit x = c <dig> more often than the other states. as a consequence, the gur game algorithm probabilistically prefers the suboptimal concentration x = c <dig> over the optimal concentration x = c <dig>  next, let us assume that the drug response f is as shown in figure 2c. in this example, f >  <dig>  for all five drug concentrations that are under consideration, and x = c <dig> results in the maximum response. however, for the drug response in figure 2c, we have  

hence every concentration has a higher probability of being rewarded than being penalized. this probabilistically drives the fsa either to x = c <dig> or x = c <dig>  both of which are suboptimal, and the optimal concentration x = c <dig> will have a lower steady-state probability compared to other concentrations. as in the previous example , the gur game algorithm will prefer these suboptimal concentrations to the optimal concentration.

these illustrative examples clearly show that the gur game algorithm used in  <cit>  may result in suboptimal performance, if the drug response f is not properly normalized and/or the fsa and the directions for rewarding  specific drug concentrations are not properly designed. for this reason, the actual performance of the gur game algorithm may considerably vary depending on the underlying drug response.

novel stochastic search algorithm
as we discussed in the previous section,  proper normalization of the drug response f and  effective design of the fsa is crucial for optimal performance of the gur game algorithm. in practice, f need to be estimated from measurements in biological experiments , and normalizing f such that it spans the entire dynamic range  <dig> ≤ f ≤  <dig> may be practically difficult. furthermore, since we do not have prior knowledge of the drug response, it is very challenging to properly define the behavior of the fsa, namely, how to reward or penalize a given state, in advance.

in order to address these problems, we propose the following novel stochastic search algorithm. let x =  and  be the current drug combination and the previous drug combination, respectively. we assume that x and xprev differ only by one element, such that  and  for some n. suppose that the concentration of the nth drug can take a value from the set c = {⋯, ck– <dig>  ck, ck+ <dig>  ⋯} , where the current concentration is xn = ck. for convenience, we define  and  such that we have , and . we assume that the fsa can make transitions from state x to xℓ and also from x to xr. in the proposed algorithm, we first evaluate the function  

where  <dig> ≤ α ≤  <dig> is a parameter that determines the randomness of the search algorithm, which will be discussed later. it is not difficult to see that we always have g ≥  <dig> . the value of the function g is then compared to a uniformly distributed random number rn ∈  <cit> , based on which we decide how to make the next state transition.

first, let us consider the case when changing the concentration of the nth drug from  to xn = ck results in an increase of the drug response f <f. in this case, we may want to “reward” this positive change by increasing the current drug concentration further from xn = ck to the next level ck+ <dig>  naturally, the probability of rewarding such a positive change should be higher than the probability of penalizing it. for this reason, we increase the concentration to xn = ck+ <dig> if g ≥ rn, and we decrease the concentration to xn = ck– <dig> if g <rn. in this case, we can view g as the probability of rewarding the previous concentration change that improved the overall drug response. this rewarding probability will be always higher than the penalizing probability, since g ≥  <dig> . now, assume that decreasing the concentration from  to xn = ck decreases the response f > f. in this case, we should “penalize” the decrease in xn, or equivalently, reward the increase in xn. therefore, we again increase the concentration of the nth drug to xn = ck+ <dig> if g ≥ rn and reduce it to xn = ck– <dig> if g <rn. this is illustrated in figure 1b.

next, suppose that decreasing the concentration from  to xn = ck increases the response f <f. since decreasing the concentration of the nth drug results in an improved response, we should “reward” this change by decreasing the concentration further to xn = ck– <dig>  therefore, we compare g to the random number rn, and we decrease the concentration from ck to ck– <dig> if g ≥ rn and increase it from ck to ck+ <dig> otherwise. this rule also applies when increasing the concentration from  to xn = ck leads to a decrease in the response f > f.

as we briefly mentioned before, the parameter α is used to control the degree of randomness in determining how the current drug concentration should be updated. if α =  <dig>  we always have g =  <dig> , regardless of how the drug response f changes for different concentrations. therefore, when α =  <dig>  the next concentration will be randomly determined between ck– <dig> and ck+ <dig> with equal probability. as α increases from  <dig> to  <dig>  we give more weight to the observed drug response change in deciding how the current concentration should be rewarded . we can be more confident about the desirability of the predicted direction for updating the drug concentration, if the observed drug response is closer to  <dig> . this is reflected by the incorporation of the term max in the evaluation of g. unlike the original gur game algorithm, the proposed algorithm makes an “informed guess” on how the concentration of a given drug should be beneficially updated, by analyzing the effect of the last concentration change.

performance comparison: an illustrative example
to compare the performance between the proposed stochastic optimization algorithm and the original gur game algorithm  <cit> , let us consider the two drug response functions shown in figure  <dig>  figure 3a  shows the response f to a single drug, where x ∈  <cit>  is the concentration of the given drug. the drug response is in the range  <dig>  ≤ f ≤  <dig> for all x, and the maximum response is achieved at x =  <dig> . as we discussed previously , such a f may be problematic for the gur game algorithm, since the algorithm will always try to “reward” the current drug concentration as f >  <dig> , ∀x. this will drive the concentration either to the lowest concentration  or the highest concentration , although the maximum concentration is located at the center x =  <dig> . unlike the gur game algorithm, the performance of the proposed algorithm will not be affected, since it determines the proper way to reward  the current drug concentration by analyzing the change in drug response that resulted from the last concentration change. in order to demonstrate the performance difference between the two algorithms, we first designed a finite state automaton with  <dig> states, whose structure is similar to the one illustrated in figure 2a. the entire range of possible drug concentration x ∈  <cit>  was evenly divided into  <dig> distinct values, hence each state in the fsa corresponds to one of the following drug concentrations x ∈ c = {c <dig>  c <dig>  ⋯, c10}, where . like the example shown in figure 2a, the fsa of the gur game algorithm was designed such that any concentration ck that is higher than the central concentration  is rewarded by increasing it further, and any ck that is lower than the central concentration is rewarded by decreasing it further. if the current concentration ck is at the center, either direction is selected with equal probability.

predicting the optimal combination of multiple drugs
to evaluate the performance of the proposed stochastic optimization algorithm, we carried out numerical simulations based on the two-dimensional response functions shown in figure  <dig>  the first response function fa shown in figure 4a has been obtained using the function peaks() in matlab. in this example, we divided the interval  <cit>  into  <dig> evenly spaced values, hence x, y ∈ {c <dig>  c <dig>  ⋯, c20}, where  . the function fa has been normalized so that maxx,yfa =  <dig> and minx,yfa =  <dig>  the second function fb  shown in figure 4b has been obtained by normalizing the second de jong function, which is defined as:

f = 1002+  <dig> 

for x, y ∈ . again, the entire range was evenly divided into  <dig> distinct values such that x, y ∈ {c <dig>  c <dig>  ⋯, c20}, where . the third response function fc in figure 4c shows the normalized percent inhibition of the a <dig> human lung carcinoma cells  <cit>  for different combinations of chlorpromazine  and pentamidine , which was reported in  <cit> . in this experiment, borisy et al.  <cit>  combined the antipsychotic agent chlorpromazine and the antiprotozoal agent pentamidine, and monitored the cell response to different drug combinations. for chlorpromazine,  <dig> different concentrations x ∈ { <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  22}  had been considered. another set of  <dig> concentrations y ∈ { <dig> . <dig>   <dig> , <dig> ,  <dig> , <dig> . <dig>   <dig> ,  <dig> }  had been considered for pentamidine, in combination with chlorpromazine. the drug response function fc has been obtained by normalizing the percent inhibition of a <dig> proliferation, so that we have maxx, yfc =  <dig> and minx,yfc =  <dig>  finally, the response function fd in figure 4d shows the normalized percent inhibition of the bacteria s. aureus for different combinations of two antibiotic drugs, sulfamethoxazole  and trimethoprim , which was reported in  <cit> . for trimethoprim,  <dig> distinct doses x ∈ { <dig> . <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>  10}  had been tested, while a different set of  <dig> doses y ∈ { <dig>   <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>  40}  had been tested for sulfamethoxazole. as before, we obtained fd by normalizing the percent inhibition of s. aureus proliferation.

for each of the four response functions shown in figure  <dig>  we tested the performance of the proposed algorithm as follows. first, we randomly selected the initial values of x and y . next, starting from the selected initial values, we used the proposed algorithm to search for the optimal drug combination  that maximizes the drug response. the parameter α, which is used for controlling the randomness of the search, was set to α =  <dig>  in every experiment, we continued the search for 4nxny iterations, where nx is the number of distinct concentrations for x and ny is the number of distinct concentrations for y. to obtain a reliable performance estimate, this experiment was repeated  <dig>  times. based on the  <dig>  independent experiments, we estimated the success rate s, which is defined as the relative number of experiments, in which the algorithm was able to find an effective optimal drug combination  within nxny  iterations. we consider a combination  to be effective if f ≥ λ for a given λ ∈  <cit> , or if the combination  is among the top p% combinations that result in the highest drug response. in addition to the success rate, we also estimated the average number iterations that were needed to find an effective drug combination, in case the experiment was successful. we also performed similar experiments using the gur game algorithm, to compare the performance of the two algorithms. since the gur game algorithm does not make use of the drug response change that results from the concentration change of a specific drug, the two drug concentrations x and y can be either updated simultaneously or sequentially . sequentially updating the two drugs corresponds to using the fsa shown in figure 5a, while updating them simultaneously corresponds to using the fsa illustrated in figure 5b. as before, the gur game algorithm was designed such that it determines the direction of reward by comparing the current drug concentration to the central concentration. we evaluated the performance of the gur game algorithm based on the simultaneous update approach as well as the sequential update approach.

for the response function fc in figure 4c, which shows the normalized human lung carcinoma percent inhibition for different combinations of pentamidine and chlorpromazine, the proposed algorithm yielded a success rate of  <dig>  for λ =  <dig>  and  <dig>  for p = 10%. in both cases, the success rate was around 30% higher compared to that of the gur game algorithm, as we can see in table  <dig>  the proposed optimization algorithm needed only  <dig>  iterations for finding an effective drug combination for λ =  <dig>  and  <dig>  iterations for p = 10%. these numbers are significantly smaller than the total number of drug combinations , and also smaller than the number of iterations needed by the gur game algorithm.

finally, the proposed algorithm also yielded a higher success rate than the gur game algorithm for the normalized bacterial response fd shown n figure 4d. on average, both algorithms required only about 4∼ <dig> iterations for finding an effective drug combination, which is much smaller compared to the total number of possible combinations . one thing we can notice is that the proposed algorithm had a success rate of  <dig>  for p = 10%, which is lower than its success rate in other experiments. this is mainly because the drug response function fd has a large number of drug combinations  that yield high drug response. in fact, the top 10% drug combinations yield a very high drug response of fd ≥  <dig> , and finding such combinations is especially challenging due to the plateau-like shape of the response fd.

CONCLUSIONS
in this paper, we proposed a novel stochastic optimization algorithm that can efficiently find optimal drug combinations. the proposed algorithm extends the gur game algorithm  <cit>  by incorporating additional information about how the concentration change of a specific drug affects the overall drug response. by comparing the drug responses to two different drug combinations, which differ only in the concentration of a single drug, the new algorithm determines how to update the current concentration of the given drug to improve the response. in this way, the algorithm can adapt itself to the underlying drug response function, which is not known in advance. as a result, although the new algorithm still does not require any prior knowledge on how the the biological system of interest  responds to different drug combinations, it consistently outperforms the gur game algorithm for various types drug response functions. simulation results show that the novel optimization algorithm can find effective drug combinations more reliably and also more efficiently, compared to the gur game algorithm. unlike the gur game algorithm, the new algorithm is not very sensitive to different  normalizations of the drug response. furthermore, the stochasticity of the algorithm is useful in handling any uncertainty  that may be present in the drug response function. since such variability is typical when we have to evaluate the drug response function f from biological measurements, this stochastic property is practically important when using the algorithm in conjunction with biological experiments, as in  <cit> . although we have mainly applied the proposed algorithm for optimizing two drugs, it can be directly used for optimizing the concentrations of multiple drugs in a straightforward manner.

authors' contributions
bjy developed the algorithm, performed the numerical experiments, and wrote the paper.

competing interests
the authors declare that they have no competing interests.

acknowledgments
this work was supported in part by the texas a&m faculty start-up fund.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2011: selected articles from the ninth asia pacific bioinformatics conference . the full contents of the supplement are available online at http://www.biomedcentral.com/1471-2105/12?issue=s <dig> 
