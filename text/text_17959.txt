BACKGROUND
many important cellular processes, such as gene expression regulation and transport, are carried out by protein complexes  <cit> . the importance and the abundance of protein interactions and complexes have been recently further highlighted by large-scale protein-protein interaction maps revealed for many organisms  <cit> . the tertiary structure of proteins is necessary for understanding the underlying molecular mechanism of protein interaction  <cit> , however, it is often difficult to obtain complex structures by experimental methods, e.g. the x-ray crystallography or nmr. thus, experimentally solved protein complex structures only share a small fraction among known protein complexes confirmed by biochemical experiments. therefore, an important task in bioinformatics is to develop efficient and accurate computational methods for predicting protein-protein docking conformations.

many protein-protein docking methods have been developed in the past employing various ideas and techniques  <cit> . typically a docking prediction for a pair of proteins produces a few thousands of docking conformations , which are subject to ranking using a scoring function. conformational search algorithms employed include the fast fourier transform   <cit> , the geometry hashing  <cit> , monte carlo algorithms  <cit> , genetic algorithm  <cit> , and langevin dynamics  <cit> . for scoring a docking decoy, usually several terms are combined, which include physics-based scores  <cit>  and those concern geometrical shape complementarity  <cit> . clustering of docking decoys is also shown to be effective in selecting near native conformations  <cit> . some of the recent docking algorithms have more elaborate procedures, for example, by considering alternative conformations of flexible protein chains  <cit>  or post docking optimization steps  <cit> . nevertheless, despite significant efforts of developing methods, it is still difficult to identify and rank the correct conformations in top ranks among hundreds of decoys  <cit>  as is also evidenced by results from recent critical assessment of prediction of interactions , a community wide experiment on the comparative evaluation of protein-protein docking methods  <cit> .

the accuracy of docking prediction could improve when a part, even if not all, of protein-protein interface  residues are known. ppi residues for a pair of interacting proteins can be identified by experiments including point mutation such as the alanine scanning  <cit> , chemical modification of residues  <cit> , nmr  <cit> , hydrogen/deuterium exchange  <cit> , and disulfide cross-linking  <cit> . if several ppi residues are known, they can be simply used for filtering, i.e. to select docking decoys which have the known ppi residues at their docking interface  <cit> . alternatively, known ppi residues from interacting proteins can be incorporated as distant constraints  <cit> . however, experimental methods are time consuming. this is particularly true if identification of a whole ppi region of an interacting protein pair is attempted or if investigating many interacting proteins in a network is planned.

ppi residues can be also predicted by computational methods, which capture sequence and structural features of ppi regions  <cit> . there are a number of ppi site prediction methods developed. sequence features used for ppi site prediction include amino acid residue propensity  <cit> , sequence conservation  <cit> , and correlated mutation  <cit> . structure information used include hydrophobic patches, the secondary structure propensity  <cit> , atom group propensity  <cit> , relative accessible surface area  <cit> , geometrical surface shape  <cit> , the crystallographic b-factor  <cit> , and energetic characteristics of ppi residues  <cit> . current protein interface prediction methods choose one or combinations of these features to construct scoring functions for machine learning techniques  <cit> . recent development of ppi site prediction methods has been overviewed in recent review articles  <cit> . the obvious advantage of the computational methods over experimental methods is that the former can be performed much faster than the latter. however, the problem of computational prediction methods is that they are not always accurate. for example, the meta-ppisp method  <cit> , one of the state-of-the-art methods, predicts ppi residues on average with a precision of 50% at the coverage of 50% for enzyme-inhibitor complexes  <cit> . moreover, the prediction accuracy varies depending on target proteins and thus it is difficult to estimate the accuracy for individual cases. therefore, computational ppi residue prediction cannot be reliably used for simple post-filtering of docking decoys. a naive use of ppi residue prediction for post-filtering may actually decrease the prediction accuracy, as we will show in results.

here, we present a novel protein docking algorithm, pi-lzerd , which utilizes imperfect ppi residue prediction for guiding protein-protein docking. pi-lzerd performs iterative improvement of docking results starting from an initial run of docking that uses potentially inaccurate ppi prediction as restraints. the base of the docking algorithm used is the lzerd , which we have developed previously  <cit> . the idea of using additional predicted information for aiding protein docking has been explored by a few previous works. in their works, ppi information is used for post-filtering docking decoys  <cit>  or incorporated as an additional scoring term  <cit> . compared to these related works, the current work is significantly different in the design and some important aspects: first, we have developed a novel algorithm which is specifically designed to utilize imperfect ppi prediction. thus, we don't use ppi information simply for post filtering. second, we perform thorough investigation on how the accuracy of ppi prediction affects to the docking prediction accuracy. pi-lzerd is shown to be able to consistently improve docking predictions when actual ppi predictions are used for unbound docking cases. the datasets used and the developed pi-lzerd program are made freely available for academic community.

methods
pairwise protein docking algorithm, lzerd: the original algorithm
we start with brief explanation of the original lzerd pairwise protein-protein docking algorithm  <cit> . as will be explained in the next section, pi-lzerd performs an iterative use of a modified version of lzerd. lzerd takes two protein tertiary structures  as input  and outputs over 30000~ <dig> of docking decoys ranked by a scoring function. the geometric hashing algorithm  <cit>  is used for docking conformational search.

given a protein tertiary structure, protein surface is constructed and then points are distributed evenly on the surface. typically, about 1500~ <dig> points are distributed for a 200- <dig> amino acid long protein . the geometric hashing procedure pre-computes and records all possible orientations of the ligand protein . this is done by defining a coordinate system for each pair of surface points , based on which the coordinates of the other neighboring surface points  are computed. note that a three dimensional coordinate system can be uniquely defined by two points by using the average of normal vectors of the two points as additional parameter. once all the poses of the ligand protein are recorded in a hash table, each possible pose of the receptor protein is computed in the same way, which are then compared with the poses of the ligand protein stored in the hash table . if a sufficient number of points from the two proteins match , the conformation is further evaluated by a physics-based score.

the scoring function is a weighted sum of the following terms: van der waals, where, repulsive and attractive parts of the term are considered separately  <cit> ; an electrostatics term, which considers repulsive/attractive and short-range/long-range contributions separately  <cit> ; a hydrogen and disulfide bond term  <cit> ; two solvation terms  <cit> ; and a knowledge-based atom contact term  <cit> . weighting factors for the linear combination of the terms were trained on two datasets, the protein-protein docking benchmark  <dig>   <cit> , which contains  <dig> pairwise unbound-unbound and bound-unbound docking structures, and also on  <dig> protein-protein dimeric complexes compiled by huang and zou  <cit> . the combination of weight values were determined by using logistic regression with the interface root mean square deviation  between predicted decoys and the native structure as the target function to be optimized.

modified lzerd to incorporate ppi prediction
we modified the lzerd algorithm so that additional information of a ppi region can be used to restrict the docking search space. figure 1b illustrates the two methods of restricting conformational search space in geometric hashing. given a set of  ppi residues in a ligand or a receptor protein, each surface point is classified into either ppi  or non-ppi depending on whether the closest atom for the point belong to a ppi residue or not. in the geometry hashing, two base points  are selected to define a reference coordinate system, based on which the other local points are transformed. base points are selected only from the ppi surface points for both ligand and receptor proteins. then, in the voting stage, matching points between the ligand and receptor are counted either only from the ppi surface points  or from all the surface points  including non-ppi points. obviously, the former seeks for a geometrical complementarity of the two proteins only at the predicted ppi regions while the latter explores a wider surface area to identify well fitting docking conformation in the vicinity of the predicted ppi regions. pi-lzerd uses these two search areas in different stages of docking conformation search. the more permissive search area is considered for the initial lzerd run and the more restricted searches are performed for the subsequent iterations.

pi-lzerd algorithm
the pi-lzerd algorithm performs pairwise protein-protein docking prediction using additional information of ppi residues as constraints. the algorithm is illustrated in figure  <dig>  first, given the tertiary structure and  ppi regions of the two proteins to be docked, the modified lzerd is run to yield typically 30000~ <dig> docking decoys . for this initial run of the modified lzerd, all neighboring surface points to the base points are considered in the voting stage . the docking decoys are ranked by the physics-based score and top  <dig> best scoring decoys are selected.

the  <dig> decoys are subject to clustering by considering the similarity of docking interface regions. for a given pair of docking decoys, common atoms between the two ppi regions from the two decoys are selected. then, the rmsd is computed for the common atoms only when the common atoms share more than 60% of all interface atoms of both ppi sites . we call it the common interface rmsd  of two docking decoys. the cirmsd is more suitable for the pi-lzerd algorithm as compared to the conventional coordinate rmsd  <cit>  or the ligand rmsd  <cit> , since it focuses on capturing the similarity of docking interface regions.

once the cirmsd is computed for all the pairs of decoys,  <dig> decoys are selected by considering the physics-based score and the cluster size of the decoys. first, the decoy with the lowest score  is selected and close decoys with a cirmsd ≤  <dig> Å are discarded from the pool. this process is repeated until  <dig> decoys are identified. next, additional  <dig> decoys are selected based on the cluster size. for each of the decoys, the number of the other decoys within  <dig> Å cirmsd is computed. then, the largest cluster  is selected. if several clusters with the same size are found, the one which has the center decoy with the lowest physics-based score is selected. all the decoys in the cluster are removed, and the process is repeated until  <dig> representative decoys are selected. consequently,  <dig> decoys are selected based on the lowest energy and  <dig> more decoys are selected based on the cluster size. it was shown that combining the energy value and the cluster size can find more hits than using a single metric alone .

the selected  <dig> decoys are passed to the subsequent process. for each of the  <dig> docking decoys, ppi residues are extracted. ppi residues are defined as those which have a heavy atom closer than  <dig>  Å to any atom to the docking partner. the decoys do not necessarily have the identical ppi region as the initially provided ppi information because the modified lzerd has explored the vicinity of the input ppi in the docking conformation search. using the identified ppi residues as the updated constraint, the modified lzerd is run for the second time. in this round, only the ppi surface points are considered at the voting stage in the geometric hashing . from the resulting docking decoys, the top  <dig> lowest energy docking decoys are clustered based on cirmsd, whose cluster centers are sorted by the physics-based score. since the modified lzerd is run for each of the  <dig> decoys, in total of  <dig> lzerd runs are performed.

in addition to the  <dig> runs of the modified lzerd, we run the original lzerd without using predicted ppi information followed by post-filtering by using the predicted ppi residues  . in the naive-filtering method, docking decoys are sorted not by the physics-based score but by the agreement of the docking interface residues to the predicted ppi residues. therefore, the overall procedure produces  <dig> runs of docking predictions, i.e.  <dig> ranked lists of docking decoys. to make the final ranking of docking decoys, first, the top ranked docking decoys from each of the  <dig> lists are ranked by the physics-based score, and then the decoys in the same subsequent ranks from the  <dig> lists are ranked in the same way. thus, the decoys from all the lists are first sorted by their ranks in each list then sorted by the physics-based score. if the identical decoys appear, one which is ranked lower in the entire final list is removed .

dataset of protein complexes and ppi information
the first dataset we use for benchmarking pi-lzerd is the protein-protein docking benchmark version  <dig>   <cit>  with  <dig> bound cases. the average length of the proteins is  <dig> and the number of docking interface residues of the proteins range from  <dig> to  <dig> with an average of  <dig> 

to investigate how the accuracy of ppi prediction affects to the docking prediction, we first use "simulated" ppi predictions as input. the actual ppi region of a ligand and a receptor proteins are shifted by  <dig>   <dig>   <dig>  and  <dig> residues to two opposite directions on the protein surface along the major axis of the ppi region. to shift a ppi region on the surface, n ppi residues  at one end of the ppi site along the axis are removed and the same number of residues are added on the opposite side of the ppi site. thus, the shifting of ppi regions are done geometrically rather than along the protein sequence . by combining two shifted ppi regions from a ligand and a receptor protein, four test cases are made for each protein complex . the protein complexes are removed from the dataset if one of proteins has a smaller ppi region than the number of shifted residues. the total number of tested protein complexes with  <dig>   <dig>   <dig>  and  <dig> ppi residues shift are  <dig> ,  <dig> ,  <dig> , and  <dig> , respectively. since four different combinations of shifted ppi regions of a ligand and a receptor are tested, the number of tested cases is four times of the number of protein complexes, which is shown in the parentheses.

we also test pi-lzerd using actual ppi predictions with a state-of-the-art ppi prediction method, meta-ppisp  <cit> . meta-ppisp is a meta server which combines predictions by three methods, promate  <cit> , pinup  <cit> , and cons-ppisp  <cit> . the benchmark dataset is selected from the ipfam database  <cit> , a subset of pfam database  <cit> , which provides multiple sequence alignments  of interacting proteins. we used ipfam because meta-ppisp needs a msa as an input. the ipfam entries were pruned using the following criterion:  pfam families with  <dig> to  <dig> seed sequences were selected.  pfam families consisting local domain sequences were replaced with their corresponding full-length sequences from uniprot  <cit> . a representative pdb structure was then selected from each pfam family given by the association in ipfam.  protein structures that do not have any observable interacting partners in their pdb files were removed.  proteins with their pdb entries that have non-standard amino acids and obsolete pdb files were filtered out.  pdb structures with antibody-antigen and protein-dna/rna interactions were removed.  protein complexes with more than two chains are removed.  complexes were eliminated if they are classified as monomers bound by crystal contacts in the pqs definition  <cit> .  proteins with the size between  <dig> to  <dig> amino acids were selected.  in the final dataset, pfam families with redundant representative structures with ≥35% sequence identity were filtered out. given that msas in pfam may not have the pdb structure as a part of the alignment, we employed muscle   <cit>  with default parameters to compute msas from pfam unaligned sequences and one sequence from the selected pdb structure. the final dataset includes  <dig> protein complexes. using prediction output of the meta-ppisp server, residues which have a meta-ppisp score of  <dig>  or higher are identified as ppi residues.

availability and requirements
the executable program of pi-lzerd for linux is freely available to academic institutions at our website, http://kiharalab.org/pi-lzerd. the datasets used in this study are also available at the same webpage. the program requires a computer with at least  <dig>  gb ram operated by linux os. the average times combining both docking and scoring range are about 1- <dig> hours for small proteins  and it may take longer for larger proteins. this timing is reported on a computer with a dual-core  <dig>  ghz processor with  <dig> gb ram. in addition, the pairwise docking program, lzerd, which is the base of pi-lzerd, is also made available at http://kiharalab.org/proteindocking.

RESULTS
naive post-filtering method
an obvious approach to use predicted ppi information for protein docking prediction is to select docking decoys with a ppi site that agrees well to the provided ppi information. this approach, termed as the naive post-filtering method, was tested on datasets with the five different accuracy levels of ppi prediction. in addition to the set of accurate ppi information, we used ppi sites shifted by  <dig>   <dig>   <dig>  and  <dig> residues. for each protein complex with ppi information, we run original lzerd to produce top  <dig> scoring docking decoys. then, for each docking decoy, the fraction of the overlap of residues in the provided ppi information the ppi region of the docking decoy is computed for both ligand and for the receptor proteins, and the average of the two are used for sorting decoys.

in figure  <dig>  the fraction of the protein complexes where correct prediction  exist within specified ranks cutoff  are shown. the prediction accuracy of original lzerd without using the ppi information is also shown for comparison. the naive post-filtering achieved near perfect prediction accuracy when the perfectly accurate ppi information was provided. when the ppi information was shifted by five residues, the prediction accuracy at top  <dig> rank dropped significantly, from 90% to 51% when irmsd of  <dig>  Å is used as the threshold . interestingly, using further deteriorated ppi information of ten residues shift made prediction results indistinguishable from running lzerd without ppi information. using more inaccurate ppi prediction of twelve or fifteen residue shifts was shown to be even harmful, producing worse predictions than lzerd without ppi information. the consistent trend was observed in figures 4a and 4b. overall, the results show that the naive post-filtering is sensitive to the accuracy of ppi residue information used for the filtering. thus, it is not reliable to apply ppi prediction simply for post-processing when the accuracy of the prediction is not well known.

pi-lzerd with simulated ppi predictions
next we examine performance of pi-lzerd on the dataset of simulated ppi predictions. this experiment is for understanding the effect of various levels of inaccuracy in ppi predictions to the docking results. in the later sections we discuss the results using actual ppi predictions on bound and unbound docking cases. the full implementation of pi-lzerd  was compared with four other variations of lzerd, namely, the original lzerd without ppi information , the original lzerd followed by post-clustering without using ppi information, lzerd with naive post-filtering with the ppi information, and pi-lzerd using ppi information with only one iteration of the modified lzerd . pi-lzerd- <dig> clusters output of docking decoys using the cirmsd.

as the accuracy of the ppi information starts to deteriorate, the docking prediction accuracy by the naive post-filtering quickly drops relative to the others. when  <dig> residue shifted ppi information was used, the post-filtering method still showed the highest number of successful cases up to the  <dig> ranks . when ppi regions were further shifted by  <dig> residues, pi-lzerd clearly outperformed the post-filtering method. the performance of the post-filtering method went down as low as the base lzerd which did not use the ppi information. it is also noticed that the pi-lzerd- <dig> performed better than pi-lzerd- <dig> 

figures 5g &5h show that when the  <dig> residue shifted ppi regions were used, the naive filtering method performed even worse than the base lzerd. in contrast, remarkably, pi-lzerd- <dig> managed to successfully use the inaccurate ppi information, showing a higher accuracy than the base lzerd. the accuracy of pi-lzerd- <dig> is now comparable to the base lzerd when  <dig>  Å irmsd threshold was used  but better for  <dig>  Å irmsd threshold . finally, with  <dig> residue shifted ppi regions  pi-lzerd- <dig> still remained superior to the base lzerd while the accuracy by the naive post-filtering went further down. it is worth mentioning that the prediction accuracy by pi-lzerd- <dig> stays almost the same with  <dig>   <dig>   <dig>  and  <dig> shifted ppi regions. importantly, the stability of the prediction by pi-lzerd was observed only for pi-lzerd- <dig> but not pi-lzerd- <dig>  this indicates that the two iterations of modified lzerd run are necessary to effectively explore the vicinity of specified ppi region to find the lowest energy conformation.

in additional file  <dig>  figures s <dig> and s <dig>  we analyzed the same results by classifying the shifted ppi sites by their accuracy. in additional file  <dig>  figure s <dig>  the protein complexes are classified by the average sensitivity of the shifted ppi sites of the receptor and the ligand proteins, while they are classified based on the fnat of shifted ppi sites of the receptor and the ligand proteins in additional file  <dig>  figure s <dig>  essentially the same trend was observed in additional file  <dig>  figures s <dig> & s <dig> as figure  <dig>  using the naive post-filtering, near perfect prediction accuracy can be achieved only when the correct ppi information is provided. however, its results quickly deteriorate as the accuracy ppi site information drops. in contrast, pi-lzerd can take advantage of ppi information even when it is not very accurate. for the range of the ppi site information accuracy tested, pi-lzerd always showed better performance than the base lzerd without using ppi information. it is very important that employing additional information  do not deteriorate prediction results even if the quality of information is not high, which is successfully achieved by pi-lzerd.

docking prediction using actual ppi site prediction
next, we use actual ppi site prediction for pi-lzerd.  <dig> protein complexes taken from the ipfam database were used in this experiment. ppi site predictions were computed by meta-ppisp  <cit>  using msas taken from the ipfam database. the average sensitivity and the specificity of the prediction by meta-ppisp were  <dig>  and  <dig> , respectively , when the cutoff score of  <dig>  was used. the average sensitivity value is better while the specificity value is worse than the simulated ppi site predictions we used in the previous section, which were  <dig>  for both sensitivity and the specificity.

on this dataset, pi-lzerd- <dig> performed consistently the best at every rank cutoff  with both  <dig>  Å and  <dig>  Å  irmsd thresholds. within top  <dig> predictions, pi-lzerd- <dig> made at least one hit for  <dig> % of the cases, while the base lzerd and the naive post-filtering obtained hits for  <dig> %,  <dig> % of the cases with the  <dig>  Å irmsd cutoff . within the rank of  <dig>  the successful cases for the methods increased to  <dig> ,  <dig> , and  <dig> %, respectively. thus, pi-lzerd- <dig> improved the success rate over the base lzerd by  <dig>  and  <dig> % points within the rank of  <dig> and  <dig>  when  <dig> Å is used for irmsd cutoff , pi-lzerd- <dig> obtained at least one hit for  <dig> / <dig> / <dig> / <dig> % within top 1/10/100/ <dig> predictions, respectively. the naive post-filtering performed consistently worse than the base lzerd. an important conclusion from these results is that blind ppi site predictions cannot be used for improving docking prediction with the post-filtering procedure. on average it will only deteriorate prediction accuracy.

unbound protein docking using actual ppi site prediction
we have further benchmarked pi-lzerd on unbound docking cases. out of  <dig> unbound docking cases in the protein-protein docking benchmark dataset  <dig>   <cit> ,  <dig> cases were selected that are not longer than  <dig> residues and have an msa in the ipfam database. the ppi sites were predicted by the meta-ppisp server. the irmsd between bound and unbound complexes of this dataset ranges from  <dig>  Å to  <dig>  Å with an average of  <dig>  Å. figures 7a &7b provide the distribution of the sensitivity and the specificity of the ppi site predictions by meta-ppisp. the average value was  <dig>  and  <dig>  for the sensitivity and the specificity, respectively.

we observe again the same trend as we observed in the previous experiments: pi-lzerd- <dig> showed consistently better success rate than the base lzerd at each rank cutoff . at the rank cutoff of  <dig>   <dig>   <dig>  pi-lzerd- <dig> made successful predictions within  <dig>  Å irmsd  for  <dig> %,  <dig> %, and  <dig> % of the cases, while the success rate of the base lzerd was  <dig> %,  <dig> %, and  <dig> %. with  <dig>  Å irmsd cutoff, , the success rate of pi-lzerd-2/the base lzerd was  <dig> / <dig> ,  <dig> / <dig> , and  <dig> / <dig>  at  <dig>   <dig>   <dig> ranks. the naive post-filtering performed again worse than the base lzerd at most of the rank cutoff values.

the same prediction results are categorized according to the three difficulty levels for protein docking assigned by the docking benchmark dataset. the  <dig> unbound cases contain  <dig> rigid-body docking cases,  <dig> medium cases, and  <dig> difficult cases. in figure  <dig>  the success rates for the three difficulty levels are separately shown. for all the three levels, pi-lzerd consistently showed a higher or equal success rate as compared lzerd. the improvement by pi-lzerd over lzerd is more evident when  <dig>  Å irmsd cutoff is used .

using this test set, we have also examined the effect of using a different number of decoys in the second round of lzerd run in pi-lzerd. as shown in the illustration of the pi-lzerd algorithm , we use top  <dig> lowest energy decoys and another  <dig> decoys with the largest clusters, thus  <dig> decoys, as the sources of updated ppi sites. we compared prediction results using  <dig> ,  <dig>  and  <dig> decoys in additional file  <dig>  figure s <dig>  the results show that using  <dig> docking decoys performs overall best among tested when the cutoff of  <dig>  Å is used. when the cutoff of  <dig>  Å is used to define near native decoys, all of them showed similar performance.

examples of docking prediction by pi-lzerd
here we show examples of docking predictions that illustrate difference of pi-lzerd as compared to the base lzerd and the naive post-filtering. the first two examples  are from prediction using simulated ppi predictions. for all the cases actual ppi regions were shifted by  <dig> residues. the best irmsd structures within top  <dig> decoys are shown.

first example is human cdk <dig> kinase complex with cell cycle-regulatory protein ckshs <dig> . the best predictions within top  <dig> using pi-lzerd/naive post-filtering/lzerd were  <dig>  Å / <dig>  Å / <dig>  Å  irmsd, respectively. in the parentheses the rank of the decoys are shown. the second example  is monoclonal antibody fab d <dig>  complexed with lysozyme . the best prediction using pi-lzerd-2/naive post-filtering/lzerd were  <dig>  Å / <dig>  Å / <dig>  Å  irmsd, respectively. the predicted ligand protein position by the naive post-filtering method  indicates where the shifted ppi site information pointed. thus, pi-lzerd managed to find the near native docking pose  from the originally provided wrong ppi site information. the near native pose  was not found among the top  <dig> lowest energy score decoys.

the next two examples are taken from the ipfam dataset where actual ppi predictions by meta-ppisp were used . figure 9c is a complex of adenovirus single-stranded dna-binding proteins . the ppi site prediction by meta-ppisp is fine for one protein  but totally missed the correct ppi site for another protein . pi-lzerd- <dig> managed to identify a  <dig>  Å irmsd conformation  while the naive post-filtering method made significantly wrong prediction . the lzerd energy function failed to identify the near native conformation within top  <dig> ranks . figure 9d is a complex of methionine synthase . the best pi-lzerd- <dig> prediction is at  <dig>  Å irmsd, while the post-filtering method and the base lzerd predictions are at irmsd of  <dig>  Å and  <dig>  Å irmsd, respectively. the ppi prediction for the both chains are much worse than average.

the last two examples are from unbound docking experiments using meta-ppisp predictions. the first example is the predictions for α-1-antitrypsin precursor and trypsinogen complex . the best irmsd predictions by pi-lzerd, the post-filtering, and base lzerd were  <dig>  Å,  <dig>  Å, and  <dig>  Å, respectively. the last one, the complex of human factor viii and human monoclonal bo2c <dig> fab , again pi-lzerd- <dig> identified a near-native pose  . the base lzerd found lower energy decoys at very different position, an imrsd of  <dig>  Å.

comparison with an existing method
finally, we compare pi-lzerd with a recently published related method, cport  <cit> . cport takes a consensus approach for ppi site prediction, combining six web servers. predicted ppi site information is used for protein-protein docking in the framework the haddock docking program. cport-haddock translates predicted interface residues to what they call ambiguous interaction restraints , which are distance restraints between provided  interface residues between a receptor and a ligand protein  <cit> . we used ppi site predictions of  <dig> unbound proteins that are made available as supplemental material of the paper at http://haddock.chem.uu.nl/services/cport. the distribution of the accuracy of the ppi site predictions is provided in figures 10a &10b.

the performance of docking prediction with cport and pi-lzerd are compared in figures 10c &10d. overall, for both irmsd threshold of  <dig>  Å  and  <dig>  Å , pi-lzerd- <dig> showed a higher success rate at each rank cutoff . for example, pi-lzerd- <dig> obtained  <dig> success cases out of  <dig> complexes  within  <dig> Å when top  <dig> scoring decoys are considered, while cport had  <dig> successful cases  at the same cutoff . using a  <dig>  Å irmsd threshold value, pi-lzerd- <dig> and cport obtained  <dig>  and  <dig> successful cases  within top  <dig> decoys, respectively.

CONCLUSIONS
we have developed pi-lzerd, a pairwise docking algorithm that uses imperfect ppi prediction to improve docking accuracy. in the series of experiments, we showed that pi-lzerd successfully improved docking results even when accuracy of ppi information is significantly low. unlike the post-filtering whose success largely depends on the accuracy of provided ppi information, pi-lzerd can use imperfect ppi prediction to improve prediction by exploring docking poses in the neighborhood of provided ppi prediction. pi-lzerd identifies matches of two proteins at local surface regions that only partially overlap with the provided ppi prediction. in addition, employing two iterations of docking searches  is shown to be more effective than one round of docking  because the two iterations enable exploring further from the provided ppi site prediction. improvement of the average docking accuracy by pi-lzerd over lzerd was observed consistently in the series of benchmark experiments including docking using actual ppi site predictions as well as unbound docking cases.

while this work focused on pairwise docking, the same procedure can be applied for multiple protein-protein docking algorithms  <cit> . as the protein interactions and their networks have become a very important research focus in systems biology, the procedure developed here will be valuable for providing physical picture of such interactions.

authors' contributions
bl participated in design, implemented the algorithms, and drafted the paper. dk conceived of the study, participated in its design, and finalized the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
supplemental material for "protein docking prediction using predicted protein-protein interface". the file contains following five figures. figure s <dig>  selecting decoys by the scoring function and/or by the cluster size. figure s <dig>  the procedure to compute "simulated" incorrect ppi site predictions. figure s <dig>  docking prediction results using shifted ppi regions classified by the sensitivity of the ppi predictions. figure s <dig>  docking prediction results using shifted ppi regions classified by the fnat of the ppi predictions. figure s <dig>  comparison of prediction results using different numbers of decoys for running the second iteration of lzerd.

click here for file

 acknowledgements
the authors gratefully acknowledge david la for helping preparing the benchmark dataset from the ipfam database. we also thank vishwesh venkatraman and yifeng d. yang for providing the physics-based scoring function. we have used in part the moffett clusters at purdue university rosen center for advanced computing. this work has been supported by grants from the national institutes of health . dk also acknowledges grants from national science foundation .
