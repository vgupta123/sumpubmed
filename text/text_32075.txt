BACKGROUND
an oligonucleotide is a short dna or rna sequence. it is usually designed to hybridize with a unique position in a target sequence. in this way the target sequence can be uniquely identified using the oligonucleotide as a probe. dna oligonucleotides have many applications such as gene identification, pcr  amplification, or dna microarrays.

many software programs have been written to construct good dna oligonucleotides, such as probeselect  <cit> , probesel  <cit> , promide  <cit> , oligoarray  <cit> , arrayoligoselector  <cit> , oligowiz  <cit> , roso  <cit> , goarrays  <cit> , and prodesign  <cit> . one crucial issue in designing good oligonucleotides is to minimize the chance of cross-hybridization. unsuitable regions are filtered out before checking for cross-hybridization. the underlying algorithms of these software programs are based on one or more of the following tools: suffix trees, suffix arrays, sequence alignments, seeds. those based on seeds are very good, due to the increased accuracy and efficiency. however, their performance depends heavily on the seeds they use and our main goal here is to find the best seeds for oligonucleotide design.

seeds were made highly popular by the sequence alignment program blast  <cit> , the most widely used software program in bioinformatics. instead of the quadratic dynamic programming exact algorithm of smith-waterman  <cit> , which is infeasible for long sequences, blast searches for  <dig> contiguous matches between the sequences as an indicator of potential local similarity. it has been noticed first by  <cit>  that considering non-consecutive matches produces better results. the first similarity search program to use this idea was patternhunter  <cit>  where the distribution of the match positions is also optimized. if we denote a match by a  <dig> and a don't care position by a *, then the default seed of blast is  <dig>  representing eleven consecutive matches, whereas the matches of the patternhunter's seed are spaced: 111*1**1*1**11* <dig>  while the distribution of the matches in this latter seed may seem random, it is not. in fact, it is optimal for this particular case, which means that any other distribution of the matches would be less effective in detecting alignments.

it is intuitively clear that several seeds, with different distribution of the matches, may detect more similarities. this idea has been used in patternhunter ii  <cit>  where  <dig> seeds are used. the increase in sensitivity  is impressive. under similar conditions , the sensitivity increases from  <dig>  for the contiguous seed of blast to  <dig>  for patternhunter's seed and then to  <dig>  for the multiple seed of pattern-hunter ii. multiple spaced seeds quickly became the state-of-the-art in similarity search in biological applications. they are used not only by similarity search programs such as patternhunter  <cit> , patterhunter ii  <cit> , yass  <cit>  but also by many tools for read alignment of the next generation sequencing data, such as shrimp  <cit> , perm  <cit> , storm  <cit> . however, there seems to be no software for oligonucleotide design that uses multiple spaced seeds. most of them use blast and we found that only prodesign  <cit>  uses a single transition-constrained seed.

our goal is to show that multiple spaced seeds perform the best for the task of oligonucleotide design. we shall describe a sound framework to evaluate the quality of various types of seeds for oligonucleotide search. two aspects are to be considered: accuracy and efficiency. accuracy is the ability of a seed to distinguish between regions that are similar with a given one and those that are not. efficiency concerns the speed of this process.

to the best of our knowledge, there is only one study on this problem, due to chung and park  <cit> . their conclusion is that "multiple seed selection method is not good at oligo design." this is not only incorrect but also misleading as it argues against what we believe to be the best tool for oligo design. as explained in details in the methods section, their approach has several problems which invalidate their conclusions. essentially, their statistical tests are incorrectly defined. in addition, they tested only some weaker variants of the multiple spaced seeds.

we introduce a different approach here and show that the multiple spaced seeds actually provide the best accuracy. the accuracy increases with the number of seeds but this comes at the price of reduced efficiency. it is interesting to notice that spaced seeds are both more accurate and more efficient than contiguous seeds.

methods
in this section we describe our framework for comparing various types of seeds for oligonucleotide design. we first introduce seeds and describe their working mechanism. we also introduce seed sensitivity and explain the intuitive advantages of multiple seeds.

seeds
a dna sequences is seen as a string over the alphabet Σ = {a, c, g, t } whereas a seed is a string over { <dig>  *}; a  <dig> stands for a match and a * for a don't care position. the number of 1's in a seed is called the weight of that seed and the total number of characters is its length. the ith letter of a string s is denoted by s. a hash of a seed s is obtained by replacing all 1's in s by letters from Σ. if the weight of s is w, then 4w different hashes can be obtained from s. a given hash of s, say h, occurs at position i in a dna sequence d if aligning h with d starting at position i causes all letters of h to match the corresponding letters of d.

an example of a hit is shown in figure  <dig>  assume we have a dna sequence d <dig> and we search for sequences similar with d <dig> in a database, using the seed s. a hit of s in the database is a position j in a sequence d <dig> in the database such that there is a hash of s that occurs both  in d <dig> and at j in d <dig> 

a hit means there is a chance for an actual similarity. the ability of a seed to detect similarities is called sensitivity. a bernoulli model of sequence alignments has been introduced in  <cit>  in order to formally define sensitivity. an alignment is represented as a binary sequence, r, where a  <dig> represents a match and a  <dig> a mismatch between the two sequences. the probability p of a  <dig> is called similarity. a seed s hits r at a positions i if aligning s with r starting at i causes all 1's in s to match 1's in r. the sensitivity of s is formally defined as the probability that it hits r. it depends on both the length n of the random region r and similarity level p. the sensitivity of the contiguous blast seed for n =  <dig> and p = . <dig> is  <dig>  whereas the sensitivity of the spaced patternhunter seed, under the same conditions, is considerably higher:  <dig> .

multiple spaced seeds
multiple spaced seeds are sets of seeds. a multiple spaced seed containing k ≥  <dig> seeds will be called a k-seed. the definition of a hit is naturally extended to multiple seeds: a multiple seed hits when one of its seeds does so. the sensitivity is therefore defined similarly. a dynamic programming algorithm for computing sensitivity for multiple seeds is given in  <cit> . under the same conditions n =  <dig>  p =  <dig> , the multiple spaced seed of patternhunter ii, consisting of  <dig> seeds of weight  <dig>  has sensitivity  <dig> , much higher than a single spaced seed. it is therefore natural to consider multiple spaced seeds as the best candidate to oligonucleotide design.

the sensitivity alone is not sufficient to assess the quality of a seed. that is because we can increase the sensitivity as much as we like simply by decreasing the weight. however, that would cause an increase in the number of random hits. we have therefore a trade off: decreasing the weight increases the sensitivity but also the number of random hits whereas increasing the weight decreases both. weight  <dig> achieves a good balance and this is why it is used in the above mentioned programs.

more precisely, consider a single seed s of length ℓ and weight w. consider also a random region r of length n and similarity level p, as done in the definition of sensitivity. the expected number of hits s has in r is pw, since there are n - ℓ +  <dig> places where s can hit and each has probability pw. if we increase the weight of the seed by  <dig>  then the expected number of hits becomes essentially a fraction p of the old one. assuming that the four bases a, c, g, t appear with equal probability, that means that the number of expected hits is reduced to one quarter of the previous one. less hits means less wasted ones, that is, less false positives and therefore increased specificity. however, increasing the weight of a seed also decreases the true positives, and therefore the sensitivity. in order to increase both, we can increase not only the weight but also the number of seeds. it turns out, as noticed by  <cit> , that simultaneously increasing the weight by one and doubling the number of seeds provides slightly better sensitivity. but doubling the number of seeds only increases the expected number of hits by a factor of two whereas increasing the weight by one reduces it to a quarter. essentially, this is the main reason why multiple spaced seeds are so good.

as an example, in figure  <dig> we plot the sensitivity values for multiple spaced seeds with  <dig>   <dig>   <dig>   <dig>  and  <dig> seeds and weight  <dig>   <dig>   <dig>   <dig>  and  <dig>  respectively. various levels of similarity are used to give a complete picture. as it can be seen from the graphics, the sensitivities increase with the size of the seed set, even if the weights increase as well.

one should be aware however, that more memory is required for a higher number of seeds in order to store more hash tables and this enforces an upper bound on the number of seeds that can be used.

accuracy and efficiency
the oligo design problem requires the ability to construct oligos that will hybridize only at unique positions in a given sequence. that is, for a given sequence , we need to be able to accurately distinguish sequences that are similar with it from those that are not. our setup will therefore include precisely constructed sequences of both types which need to be distinguished.

assume we have a set of sequences, which are divided, as in  <cit> , into groups, each group having a main sequence and a number of secondary ones. a small example  of a single group is shown in figure  <dig>  the first sequence is the main one and the other ones are secondary. the secondary ones are divided into those sequences that are considered similar with the main, called oligos, and those that are not similar, non-oligos. we do not consider at this point the criteria used to distinguish those, we just assume they are given.

we define next a measure of the quality of a given seed. a widely used measure for the accuracy of a test is the f -score, which is the harmonic mean of precision and recall. we define the usual statistical measures of true/false positives/negatives, as follows :

- tp is the number of oligos that are hit,

- fp is the number of non-oligos that are hit,

- tn is the number of non-oligos that are not hit,

- fn is the number of oligos that are not hit.

the precision p and the recall r are defined by ,  respectively, and the

f-score is their harmonic mean:  

we shall define the accuracy of a seed as its f -score.

note that, in binary classification, "recall" is called also "sensitivity." to avoid any confusion, we use the term "sensitivity" only with the meaning of "seed sensitivity" as defined in the "seeds" subsection above.

in our example in figure  <dig> for the seed s = 11*1** <dig>  it is easy to verify that the oligos  <dig>   <dig>  and  <dig> and the non-oligos  <dig> and  <dig> are hit. the oligo  <dig> and the non-oligos  <dig> to  <dig> are not hit. we have tp =  <dig>  fp =  <dig>  fn =  <dig>  and tn =  <dig>  therefore, p =  <dig> , r =  <dig>  and f =  <dig> .

the approach in  <cit>  uses also the f -score as measure of accuracy , however, different definitions for true positives are used for precision and recall, making the f -score irrelevant as it involves the precision and recall of different tests.

the efficiency, e, of a seed is the reverse of the average number of seed hashes needed to detect one oligo. that means, we divide tp to the number of all hits in all secondary sequences:  

in our example in figure  <dig> the oligo  <dig> is hit twice, whereas the other hit sequences are hit only once each. the total number of hits is  <dig>  tp =  <dig> and therefore the efficiency is e =  <dig> .

the efficiency of  <cit>  is defined by an arbitrary normalization of the average number of hits per oligo, where the average considers, incorrectly, all oligos, instead of those that are hit . efficient discriminability, the most significant measure of seed quality in  <cit> , is obtained by multiplying discriminability with efficiency. this measure depends completely on the way normalization of efficiency is done and therefore impossible to interpret. in fact, by changing the normalization, most any seed can be made to appear the best. we shall not mix accuracy and efficiency.

RESULTS
we compare in this section various types of seeds using the framework constructed above and then discuss the obtained results.

data sets
data sets were built using the oligogenerator program of  <cit> . oligogenerator takes as input the number of target  sequences, the number of variations for each sequence , and the length of each sequence. we have generated six data sets, three of 50-mer and three of 70-mer oligos. the number of main and secondary sequences are the same as in the data set of  <cit> . the criteria used were slightly different as we followed the model of he et al.  <cit> . for the 50-mer data set we used the following thresholds:

- identity level with target sequence: 85%

- maximum stretch of continuous matches:15bp

- hybridization free energy: - <dig> kcal/mol

the difference between our data set and the one of  <cit>  is that the latter was built using - <dig> kcal/mol. for the 70-mer data set we used, again from  <cit> ,

- identity level with target sequence: 85%

- maximum stretch of continuous matches:  <dig> bp

- hybridization free energy: - <dig> kcal/mol

seeds
computing optimal spaced seeds is a hard problem; see  <cit> . for a single seed it is feasible to try all seeds and compute the sensitivity of each to determine the optimal. therefore, the single seeds we consider, contiguous, transition-constrained, and spaced, are the same as those of  <cit> . transition-constrained seeds were introduced by  <cit>  and used in their yass software program. such a seed contains, in addition to matches and don't cares, a new character, @, which stands for either a match or a transition, that is, a substitution a↔g or c↔t. the biological motivation for this is that transitions are more common than transversions, that is, a/g↔c/t. the seed used in yass is 1@1**11**1*11@ <dig> 

computing optimal multiple spaced seeds is significantly harder than single seeds. even computing an optimal 2-seed of usable weight and length is infeasible. therefore, many heuristic algorithms have been designed to compute multiple spaced seeds but they are all exponential, with the exception of speed  <cit> , which is based on the notion of overlap complexity of  <cit> . chung and park used two weaker versions of multiple spaced seeds, namely blat and vector seeds.

using speed, we have computed highly sensitive multiple spaced seeds with  <dig>   <dig>   <dig>  and  <dig> seeds. the parameters used by speed for computing the seeds are derived from those of the oligos. that is, n =  <dig> for 50-mer oligos and n =  <dig> for 70-mer oligos. in both cases, p =  <dig> , which is the identity level. 

comparison
for each of the two cases, 50-mers and 70-mers, we have computed the average accuracy and efficiency for all seeds on the data sets generated. the highest accuracy values for each seed type are shown in table  <dig>  both the mean and standard deviation are given, as well as the weight for which the maximum accuracy is achieved. the ranking, in increasing order of accuracy, is the same for both 50-mer and 70-mer cases: contiguous, transition, 1-seed, 2-seeds, 4-seed, 8-seed, and 16-seed. in terms of standard deviation, the results are significant, especially for the 70-mer case. the difference between the transition seeds and 1-seeds is not very large, as expected. also, the differences between the accuracy of multiple spaced seeds essentially decrease when the number of seeds increases.

the highest accuracy for each seed type is given; for the 50-mer data set in the left table and the 70-mer data set in the right table. both the mean and standard deviation are given. the weight of the seed that achieves the highest accuracy in a given category is given in the last column.

a complete picture is given in figures  <dig>   <dig>   <dig>  and  <dig> where the precision, recall and accuracy are plotted for all seed types, for weights between  <dig> and  <dig>  as expected, precision  increases with weight whereas recall  decreases. for high weight the precision approaches  <dig> for all seeds and so does the recall for low weights. therefore, the accuracy will have a maximum in-between. figures  <dig> and  <dig> give the accuracy values, with the complete curves in the left plots and the top part of the curves enlarged in the right plots. it can be seen that more seeds will have a higher maximum, which is achieved for higher weights. 

the increased accuracy comes at a price in efficiency. figure  <dig> shows the efficiency curves for 50-mers in the left plot and 70-mers in the right. increasing the number of seeds decreases the efficiency. notice however that both 1-seeds and transition seeds are more efficient than the contiguous ones. between the former two, the 1-seeds are slightly more efficient than the transition ones.

in the process of designing oligonucleotides, similar regions need to be identified and eliminated in order to keep the unique ones, out of which oligos can be chosen. for this purpose, a very high recall is desired. therefore, we shall also rank the seeds by setting a lower bound on the recall and then considering only the accuracy of those seeds that satisfy this lower bound. the values for the bounds on the recall values are 0: <dig>   <dig> ,...,  <dig> . figure  <dig> shows again the superior accuracy of multiple spaced seeds, as seen from this perspective. the same ranking of the seeds as above is observed. finally, figure  <dig> gives the corresponding efficiency values for the recall lower bounds.

a last comment concerns the transition seeds. a single transition seed is slightly less accurate than a single spaced seed. however, this reason is not sufficient to rule out multiple transition seeds. our analysis focuses on multiple spaced seeds since we were in position to compute very good ones. multiple transition seeds should be investigated further.

discussion
as explained earlier, accuracy and efficiency cannot be mixed. taken separately, they show clearly the ranking. together, they give the trade off: better accuracy comes with a price in efficiency .

CONCLUSIONS
we have presented a sound framework to compare seeds for oligonucleotide design. it is known that multiple spaced seeds perform better than the other seeds in many applications but the requirements of oligo design are different. we have proved that, also in this application, multiple spaced seeds have the highest accuracy. this corrects the conclusion of chung and park  <cit> . we hope that our study will determine researchers in this area to use multiple spaced seeds in software programs for oligonucleotide design. the seeds can be created using the speed program that we mentioned before. the assessment of the seeds can be done using a framework as above.

competing interests
the authors declare that they have no competing interests.

authors' contributions
li and si identified the error in the approach of  <cit> , proposed multiple spaced seeds as the best candidate, and designed the new framework. sk implemented the approach, built the data sets using the programs of  <cit> , and compared the seeds. amb used speed to construct the multiple spaced seeds. all authors read and approved the final version of the manuscript.

supplementary material
additional file 1
this file contains all the seeds used in our tests. the contiguous, transition, and single spaced seeds are the same as in  <cit> . the multiple spaced seeds were computed using speed.

click here for file

 additional file 2
this file contains the complete results of our tests for all the 50-mer data sets.

click here for file

 additional file 3
this file contains the complete results of our tests for all the 70-mer data sets.

click here for file

 acknowledgements
li and si were each supported by a grant from the natural sciences and engineering research council of canada .
