BACKGROUND
with rapid accumulation of gene expression data in public repositories such as ncbi geo <cit> , integrated analysis of multiple studies is receiving increased attention. the integrated analysis increases statistical power, generalizability, and reliability, while decreasing the cost of analysis, since it exploits publicly available data for related studies, which are often from different platforms  <cit> . rhodes et al. identified a set of differentially expressed genes between prostate cancer patients and healthy subjects from an integrated study of four different datasets and discovered that some genes were consistently dysregulated in prostate cancer but were not reported in the individual studies  <cit> . warnat's group performed a classification study of cancer patients with six different datasets and achieved higher accuracy over single-set analysis  <cit> . both studies were conducted across different gene expression platforms.

despite the well-known benefits, conducting a cross-platform analysis of gene expression data involves many intricate issues at different layers. a recent guideline discussed several key issues when conducting an integrated microarray data analysis: annotating probes of the individual dataset, resolving the many-to-many relationship between probes and genes, aggregating multiple measurements into a single gene-level value, and combining study-specific estimates  <cit> . some authors noted that the interpretation of the biological results could be improved with re-annotated and filtered probes in microarray studies  <cit> . these probes would ideally be at no risk of cross-hybridization to multiple genes and would not contain any snps or repeats in its sequence  <cit> .

several tools were developed to resolve the aforementioned hurdles for cross-platform analysis of gene expression data. crosschip http://www.crosschip.org provides comparative analysis between different generations of affymetrix arrays  <cit> . it utilizes architectural information of probe, i.e., the minimum sequence overlap length and the minimum probe pairs per probe-set to enable cross-platform comparison, but the scope is limited to affymetrix platforms. another tool, exalt http://seq.mc.vanderbilt.edu/exalt, allows the user to upload his/her data and searches for homologous data sets obtained from public repositories. however, the user is still responsible for ascertaining the quality of the probe and its impact at the gene expression level  <cit> . furthermore, neither of these tools takes into account the biological characteristics of probes, such as presence of snps or repeat sequences. exalt recommends the use of gds --pre-processed data derived from gse --but the derived measurement values are problematic as they still contain undesirable probes that map to multiple genes, are specific to a certain transcript, or may contain a snp. furthermore, only a fraction of all studies in geo have a corresponding gds. in our recent study of  <dig>  geo microarray samples from six different diseases, only  <dig> % of them were included in gds  <cit> . another available tool, a-madman http://compgen.bio.unipd.it/bioinfo/amadman, performs integration of cross-platform microarray data obtained from geo  <cit> . however, its input is limited to affymetrix platform microarrays and the probe annotation relies on available chip description files, which are known to have errors or are outdated, as biological knowledge is updated  <cit> . cptra http://people.tamu.edu/~syuan/cptra/cptra.html, another tool for cross-platform analysis of gene expression data  <cit> , allows two different platforms to be combined, but the focus of this software is on the species with limited genome information, such as horseweed  <cit> . hence, one of the inputs must be a long-read sequence with proper annotation. in contrast to cptra, our analysis tool, anyexpress focuses on well-studied species like human, mouse, fruitfly or arabidopsis, where reference genome information and the transcriptome database are well-maintained and available.

our approach is to start the analysis from raw files, such as .fastq , .csfastq , or .fasta  to remove undesirable probes before pre-processing. for example, we summarize multiple probe level measurements into a single target-level value, where the target is a user-defined expression unit . none of the existing tools can handle integration of ngs and microarray data from different platforms. thus, we developed a practical, integrated toolkit for cross-platform analysis of gene expression data serving all ngs and microarray platforms for any species. previously, our group demonstrated that sequence-based probe matching improved the consistency of measurements across different platforms, compared to the widely-used identity-based matching method at that time <cit> . we also developed dsgeo, a software collection for analyzing microarray data deposited in geo  <cit> . we now extend our previous work, by integrating a novel interval-matching algorithm  <cit>  and developing a suite of software tools, called anyexpress. our suite of tools automates the matching of ngs, microarray, sage and mpss, and also allows users to define reference target and probe quality filters.

implementation
architecture
anyexpress is a software suite for cross-platform analysis of gene expression data. it allows two sources of inputs:  genomic position files, obtained from the external alignment software and  probe-level sample measurements files. anyexpress returns a target-by-sample text file as an output. we define 'tag' as a string of nucleotide sequences used for measuring gene expression abundance. this string is commonly called 'probe' or 'read' for microarray or ngs platform, respectively. throughout this article, we use tag, probe, and read interchangeably. next we define 'platform' as a set of tags. then, we classify platforms into one of two classes, based on the availability of knowledge in a tag's sequence. when the tag sequence was predetermined, as in a microarray or catalysed reporter deposition  fish, the platform was considered to be closed-platform  <cit> . if the tag sequence is determined at the time of sequencing, as it is in ngs, serial analysis of gene sequence , or differential display , the platform is considered to be open-platform  <cit> . while closed-platform can have multiple samples , the open-platform has a 1-to- <dig> relationship with the sample . anyexpress is capable of dealing with gene expression data from all platforms in contrast to the existing tools that focus on a single platform. a schematic workflow of anyexpress is displayed in figure  <dig>  the gene expression data of one closed-platform  and two open-platforms  are combined. a summarization file is created per platform as a result of the summarize process, then the multiple summarization files are merged into a single gene-by-sample text file through a join process within a combine process. before running core processes of anyexpress , the user needs to build target and reference features  to generate 'system data' and manually perform sequence alignment using external software tools such as bowtie   <cit> .

reference target
we refer to a target as a biologically meaningful expression unit against which tag will be matched using genomic positions. each target is a collection of five attributes: chromosome, strand, start position, end position, and identifier. anyexpress accepts the target as a .bed file where the five fields are separated by tabs. in most cases a single target has multiple associated tags; hence, multiple measurement values will be summarized into a single aggregated value. the target identifier must consist of two substrings concatenated by '@', i.e., targetid = 'superid' + '@' + 'subid'. for 'brca1' gene, its identifier  could be represented as 'brca1@exon2' , 'nc_007294@exon2' , or 'ensg00000012048@exon2' . the target information will be updated as knowledge of the genome and genes evolve. species, source database, and build-date are three factors defining a target. example of .bed format files are as following: 'human_ensembl_feb <dig> bed,' 'human_ucscknowngene_feb <dig> bed,' 'human_refseq_feb <dig> ' and 'human_refseq_mar <dig> bed'. unlike existing custom reannotation data approaches in which the user's analysis is limited by a particular type of target that the annotator has predefined, anyexpress allows users to define their own reference target for any species. in figure  <dig>  refgene <dig> was selected as a target and the corresponding system data was created by running anyexpress build before running anyexpress combine all in a command-line.

exclusion features to identify undesirable tags
exclusion features allow users to apply a biological filter applied against the tags to filter out undesirable ones. previous studies have shown the negative effect of low quality microarray probes on measurement of gene expression abundance and consequently on the interpretation of the results  <cit> . a probe that hybridizes to more than one reference target is referred to as a 'cross-hybridization' or 'multi-target' probe. this type of probe often results in ambiguous interpretation of results, negatively affecting downstream analysis such as statistical testing, clustering, or enrichment analysis on gene ontology or pathways  <cit> . the presence of snps within the probe sequence would cause incorrect estimation of mrna abundance  <cit> . it has been reported that the removal of undesirable tags resulted in increased statistical power to detect differentially expressed genes  <cit> . existing tools or custom cdf files restrict users to a predefined set of filters, sources, and build dates according to external annotators  <cit> . for example, a snp alone can have several characteristics: class of variant , functional category , validation status , and average heterozygosity  <cit> . anyexpress offers flexible solutions where the user can define desired characteristics and selectively apply tag-filters at the time of data integration.

interval matching algorithm
anyexpress takes the outputs of external alignment software as inputs , which consist of a list of attributes of genomic position . probes and reads are matched against targets. matching two entities based their genomic positions is a core part of data integration process in anyexpress. while naïve comparison of all intervals of target and tag  is a computationally-intensive task with time complexity o, anyexpress adopts a fast interval matching algorithm called positionmatcher, developed by our group  <cit> . positionmatcher performs "genomic walking" by iterating linearly along the positional stamp of a genome, keeping track of overlapping intervals in a hybrid data structure of stack and queue to achieve time complexity down to o. in a previous study  <cit> , we showed that the execution time of positionmatcher was over  <dig> times faster than that of all-pairwise comparison methods using the illumina ngs data reported in marioni et al. <cit>  as an example.

platform-level summarization
as illustrated in figure  <dig>  the output of summarize process, per platform, is a target-by-measurement value text file where multiple measurements are aggregated into a single numeric value per target. for a closed-platform, multiple tag-level signals are summarized into a single number per target-sample pair. we used tukey's median-polish algorithm, a widely used summarization technique in microarray data, to introduce the robust multi-array averaging  method  <cit> . for an open-platform, multiple associated tags were aggregated into a single 'reads per kilobase exon model per million mapped reads'  value per tag  <cit> .

auxiliary tools with high scalability to create input data
in early microarray studies, the number of samples for affymetrix was small , so it was easy to create a single column-bound file. but recent studies involve a large number of samples, often exceeding  <dig>  which makes data loading impossible using r, matlab, or stand-alone software due to limited memory size. although the number of tags is relatively lower in microarrays than in ngs , currently, the number of samples is larger due to the maturity and inexpensive cost of this technology. for example,  <dig> affymetrix microarray .cel files were used in a lung cancer classification study  <cit>  and  <dig> .cel files were used in a breast cancer study  <cit> . these individual studies are already large and the integrated analysis incorporating those will evidently be even larger. simple loading of individual .cel files using conventional computers fails even before normalization or summarization. solutions using parallel computing are being proposed, but these are useful only to users with advanced skills and access to high performance computing resources  <cit> . thus, we propose anyexpress as a solution. it is developed to serve the average user, one that has access to  <dig> ~  <dig> gb of memory and a  <dig> ~  <dig> ghz processor.

binding a large number of affymetrix .cel files
we defined the input format of closed-platform samples for anyexpress as a single column-bound, tab-delimited text file where the first column is a probe identifier followed by measurement values of the samples in the second column. this is a common data format for microarrays in non-affymetrix platforms. however, in affymetrix, each sample is a .cel file and needs to get column-bound. anyexpress provides a scalable binding tool, anyexpress bindaffycel , to create this single column-bound file from a large number of affymetrix .cel files. we tested the capability of anyexpress in binding a different number of .cel files downloaded from geo. for binding, anyexpress extracts probe identifier as probeid = 'x-coordinate' + ':' + 'y-coordinate' from the .cel file. the user is required to place .cel files of the same platform in the same directory. only the probe identifiers that are common across all samples will be represented in an output file. in figure  <dig> , four affymetrix .cel files are bound to a single text file '4samples.txt'.

quantile-normalization for a column-bound data of microarray samples
quantile-normalization  <cit>  is a widely used pre-processing procedure for microarray data, but its processing is severely limited by certain hardware. the column-bound file can be directly used in anyexpress combine, but it is highly recommended to perform between-sample normalization of this data to remove systematic bias to enable fair comparison among samples  <cit> . of the different normalization algorithms, the quantile-normalization was shown to be superior  <cit> . quantile-normalization is a rank-invariant transformation of measurement values that have identical distribution of measurement values across all samples once they get processed. the same scalability issue applies to quantile-normalization. a single .cel file contains over  <dig>  probe-level measurement values. when hundreds of samples need to be combined, existing tools can hardly perform quantile-normalization. anyexpress solves this issue with a highly scalable tool, anyexpress normalizecolumnboundsamples.

coverage plot
visualization plays a critical role in data validation, interpretation, and hypothesis generation during analysis  <cit> . software tools for visualization should be able to manage a large number  of tags. we developed a tool that can create a coverage plot along the genome for all the platforms used in a single anyexpress run. the output file is a .bedgraph text file. the user needs to upload this file onto the ucsc genome browser http://genome.ucsc.edu through his/her own web-browser. the user can draw a plot by typing in five parameters: a directory of user, project; chromosome; strand ; start position; and end position. each platform, closed or open, in the user's project is drawn as a track in the .bedgraph file. in each track, vertical bars are drawn along the genomic region of interest. the height of the vertical bar is either the number of the reads covering each base in open-platforms or the average signal intensity of the probe covering each base. as a default reference track, the refseq gene model is displayed at the bottom of the plot. the user can freely add, hide, or modify the plot through the ucsc genome browser, e.g., adjust scales, change color, or add biological reference tracks.

operation
anyexpress is composed of an executable wrapper , a collection of java classes and pre-processed data . once an archived file  is extracted to the user's local machine, anyexpress is ready to execute after environment and path variables are set, as in any other command-line software for a unix-like environment or windows. tools available in anyexpress are summarized in table  <dig>  instructions on installation, configuration, and usage are detailed in the accompanying webpage http://anyexpress.sourceforge.net. among seven tools, combine is the main process that performs data integration. figure  <dig> explains the option parameters by showing an example of running anyexpress combine in a command-line, to combine closed-platform data  and two open-platform data sets . tags from these three platforms were matched against 'refgene2010' using the positionmatcher algorithm. the tags were also matched against targets 'multitarget' and 'dbsnp131' for filtering. the exclusion feature 'multitarget' is automatically generated during the annotate process. for example, in figure  <dig>  tag <dig> is matched to two genes, geney and genez . once such tag-to-target pairs are obtained, a 'multitarget.txt' file that contains a list of undesirable tags, such tag <dig> in figure  <dig>  is created. the final output 'combinedexpression.txt' is created under the user-specified directory  and also contains summary statistics.

tested platforms
anyexpress was implemented in java, shell script, and python and it runs on unix, linux, mac os x, and ms-dos in windows. anyexpress successfully worked with three different configurations:  a 64-bit linux server with a  <dig>  ghz intel core™  <dig> duo cpu and  <dig> gb memory,  a 32-bit imac with a  <dig>  ghz dual-core intel zion and  <dig> gb memory, and  a 32-bit windows  <dig> with a  <dig>  ghz intel core cpu and  <dig> gb memory. the executables, the source code, the example data, and the manual are available at http://anyexpress.sourceforge.net.

RESULTS
combining ngs and microarray data
we applied anyexpress to human gene expression data from marioni et al.  <cit> . it consists of six microarray samples  and six illumina ga ngs samples. we downloaded raw microarray .cel files from the ncbi geo database  and raw ngs .fastq files from ncbi sequence read archive . the six samples, all human tissue, were obtained from kidney  and liver . for pre-processing, six microarray .cel files were bound into a single column-bound file after running anyexpress:

$anyexpress bindaffycel ~/celfiles 6sample.txt

to create a closed-platform .bed file, we downloaded a probe sequence file  of affymetrix u <dig> plus <dig> from the affymetrix support webpage http://www.affymetrix.com and processed it to have a probe identifier as in 'x coordinate' + ':' + 'y-coordinate', used by thompson et al.  <cit> . then we aligned the probe against the genome sequence to obtain genomic positions for the probes using two external tools, bowtie  <cit>  and awk  <cit> :

$ bowtie ~/indexes/hg <dig> -t -n  <dig> -b  <dig> hg <dig> -f u133plus <dig> fasta u133pl <dig> bowtie

$ awk '{ fs="\t"; ofs="\t"; print $ <dig>  $ <dig>  $4+length- <dig> \ $ <dig>  $ <dig> }' u133plus <dig> bowtie > u133plus <dig> bed

bowtie is a fast and memory-efficient algorithm and tool for short sequence alignment  <cit>  and awk is a convenient unix-like environment tool for processing a text file  <cit> . we chose these tools for their popularity and convenience, but users can freely use other tools or their own code to process their .fasta files to obtain the .bed format file. for windows users, we provide an awk-equivalent tool, awk.exe, through the anyexpress webpage. open-platform files were aligned and processed in the same way as closed-platform files. the only difference was to replace the bowtie option from '-f' to '-q' because ngs data used the .fastq format. the following bowtie-awk running was repeated for all six ngs files :

$ bowtie -t -n  <dig> ~/indexes/hg <dig> -q srr <dig> fastq srr <dig> bowtie

$ awk 'begin {fs = "\t"; ofs="\t"} {print $ <dig>  $ <dig>  $4+length- <dig> 

$ <dig>  $ <dig> }' srr <dig> bowtie > srr <dig> bed

we built target and an exclusion features into the system using anyexpress:

$ anyexpress buildtarget refseq_gene.bed

$ anyexpress buildexclusionfeature dbsnp <dig> bed

the resulting files were all created in the '$anyexpress_home/sys/target' and '$anyexpress_home/sys/exclusionfeature' directories.

we combined all  <dig> platforms  of the marioni data with anyexpress, using multitarget and dbsnp <dig> as exclusion features:

$anyexpress combine -c u133plus <dig> bed 6samples.txt -o srr <dig> bed srr <dig> bed srr <dig> bed srr <dig> bed srr <dig> bed srr <dig> bed -t refseq_gene -e multitarget dbsnp <dig> -p /user/jkim/myproject

run-time messages during the anyexpress execution are shown in figure  <dig>  the start and end of tasks are displayed in a step-by-step manner. the final combined file is a target-by-sample text file that can be used in downstream analyses, such as identification of differentially expressed genes, classification, clustering or enrichment analysis on gene ontology and pathways  <cit> . at the bottom of figure  <dig>  coverage statistics of tag and target are added along with the execution time .

we calculated spearman correlation coefficients  for the combined data to assess reproducibility. the within-platform ccs were very high in both kidney and liver , while cross-platform ccs were moderate . these results confirmed the results of the original study  <cit> . the cross-platform cc =  <dig>  is similar to our previous results for cross-platform microarray studies  <cit>  and similar to results from the maqc consortium  <cit> . although we observed lower cross-platform ccs, it is known that a decrease in correlation could be due to tag-effect differences in each platform  <cit> .

for visualization, we drew a coverage plot in the genome regions of gene gpx <dig> :

$anyexpress plot/user/jkim/myproject chr <dig> forward  <dig> 150410551

this gene is shown to have tissue-specific expression, higher in kidney but lower in liver  <cit> . the resulting .bedgraph file was uploaded to a custom track of the ucsc genome browser for visualization. we selected four representative tracks out of the original twelve due to page limitations and adjusted the browser setting for clearer viewing. figure  <dig> displays the difference between the two technologies. as expected from affymetrix's original probe design scheme, microarray probes were only found in the last exon. in contrast, illumina ga reads spread across all exons. figure  <dig> demonstrates that differential expression between two tissues, kidney  vs. liver , is well-conserved within each platform.

effect of exclusion features
we ran anyexpress on the marioni data with four different exclusion feature settings: 'none' = apply no exclusion feature, 'snp'= remove snp containing tags, 'multitarget' = remove tags matched to more than one target, and 'both' = apply both 'snp' and 'multitarget'. we assessed the effect of exclusion features on gene coverage and correspondence of highly expressed genes across the platforms. figure  <dig> displays gene coverage of seven platforms of microarray , six ngs  and the final combined expression . the coverage was calculated as the number of genes that remained after filtering divided by the total number of genes in the refseq transcriptome database . microarray had the highest coverage value and the combined file had the lowest since it only keeps genes from the intersection of the other six platforms.  application of exclusion features resulted in slightly lower coverage per platform. within ngs, overall coverage was higher in kidney  than in liver .

in figure  <dig>  cross-platform agreement for highly expressed genes is assessed with the correspondence at the top  plot, first introduced by irizarry et al.  <cit> . correlation coefficients were shown to be inadequate to assess correspondence between studies or platforms, due to a small number of differentially expressed genes  <cit> . hence, other authors have suggested that cross-platform agreement should be evaluated on genes which are likely to be differentially expressed  <cit> . previously we used this plot in a cross-platform study of microarray and mpss  <cit> . the cat plot has also been used in several similar studies  <cit> . we created lists of highly expressed genes, size n, sorted by fold-change in decreasing order, varying n from  <dig> to  <dig> by  <dig>  for each top-n genes from ngs, we counted the number of genes that were in common with the top-n genes from microarray and divided this number by n . as expected, the proportion that was in common between the two platforms increased with an increase in n. the agreement proportions in 'none' and 'snp' were similar when the list size was smaller than  <dig>  but the proportion was higher in 'snp' than in 'none' when the list size was above  <dig>  'multitarget' and 'both' outperformed 'none' for all list sizes. overall, the cat plot demonstrated that filtering by exclusion features produced higher agreement between the two platforms. we also assessed the cross-platform correspondence with a modified cat plot where genes were ranked by a false discovery rate  adjusted q-value  <cit> , instead of fold-change . 'snp' and 'none' showed similar correspondence, but overall we observed the same effect of larger correspondence with filtering.

execution time with a large number microarray samples
we performed stress testing of anyexpress with a different number of .cel files under different memory sizes . the number of .cel files was increased per memory size until failure . pre-processing processes  took longer than the actual combine process. we found that anyexpress can manage up to  <dig> .cel files with  <dig> gb memory. the user needs to have a memory size larger than  <dig> gb to process more than  <dig> .cel files. at the time of writing this manuscript, the price of a  <dig> gb memory was around  <dig> us dollars. considering the cost of high-performance computing, running anyexpress with additional memory on an average pc or laptop computer is cost-effective for a large-scale cross-platform analysis of gene expression data.

allocated memory
tested on a 64-bit linux server with  <dig>  ghz intel core  <dig> duo cpu,  <dig> gb cache, and  <dig> gb memory.

future work
anyexpress currently has some limitations as it is based on position matching between tag and reference. hence it misses exon-spanning tags during the combine process. in the marioni data, about 4%  of transcript-matched reads were exon-spanning tags. although these were not counted in the current version of anyexpress because of their relatively small representation, we are currently working on developing post-processing modules to rescue these tags.

anyexpress performs within-platform normalization and quantile normalization  <cit>  for closed-platforms, and the rpkm-like method  <cit>  for an open-platform normalization. however, the current version of anyexpress does not offer cross-platform normalization. systematic biases may originate from different platforms, hybridization protocols, time of day when an assay was performed, replicates, and/or amplification reagents. some investigators have proposed pre-processing methods to remove systematic biases: singular value decomposition   <cit> , distance weighted discrimination   <cit> , and an empirical bayes method  <cit> . however, these methods focus on microarray, not ngs, data and only a small number of arrays are considered. or, they perform "over-normalization" to the point that biological variations of interest may be lost  <cit> . ngs technology is still new and a thorough investigation of ngs-specific systematic biases is needed. anyexpress is modular and open-source, so it is easy to extend and modify. the above-mentioned sources of systematic bias can occur in many of the different analysis steps depicted in figure  <dig>  however, we implemented anyexpress in a modular fashion so that users can easily make changes to the current source code to handle the systematic bias in each step. anyexpress targets an audience with some computational knowledge and hardware with at least  <dig> gb memory. we have shown that anyexpress successfully combines  <dig> .cel files and six ngs data. currently, we are extending anyexpress in a distributed computing environment to accommodate a larger study.

CONCLUSIONS
we developed anyexpress, a toolkit that combines and filters cross-platform gene expression data. with sequence-oriented tag mapping and a fast interval algorithm, anyexpress uniquely offers all of the following features:  combine cross-platform gene expression data at a user-defined gene expression unit level ,  process gene expression data from both open- and closed-platforms,  select a preferred custom target reference,  exclude undesirable tags based on custom-defined biological features,  create a coverage plot along the genomic regions of interest,  bind a large number of affymetrix .cel files into a single text file, and  perform quantile-normalization with a large number of microarray samples.

availability and requirements
• project name: anyexpress

• project home page: http://anyexpress.sourceforge.net

• operating system: linux, unix, mac os x, or windows

• programming language: java, shell script, and python

• license: apache license version  <dig> 

list of abbreviations
bed: browser extensible data; card: catalysed reporter deposition; cat: correspondence at the top; cc: correlation coefficient; dd: differential display; dwd: distance weighted discrimination; fdr: false discovery rate; fish: fluorescent in situ hybridization; geo: gene expression omnibus; id: identifier; maqc: microarray quality control; mpss: massively parallel signature sequencing; ngs: next-generation sequencing; rma: robust multi-array averaging; rpkm: reads per kilobase exon model per million mapped reads; sage: serial analysis of gene expression; sd: standard deviation; snp: single nucleotide polymorphism; svd: singular value decomposition

authors' contributions
jk initiated the project, designed and implemented the software, and drafted the paper. kp architected the software and implemented core modules. hj processed data, performed testing, and generated figures/tables. wpk and lom conceived the study and designed and directed the project. all co-authors contributed to manuscript preparation.

supplementary material
additional file 1
at plot based on statistical significance. this cat plot depicts the agreement between ngs and microarray data on the detection of differently expressed genes. the x-axis is the number of top genes in ngs data, ranked by the statistical significance  of kidney vs. liver. the y-axis is the proportion of genes from the microarray that is in common with top-ranked genes from ngs. four cat plots are drawn using none, snp, multitarget, and both  exclusion features.

click here for file

 acknowledgements
we thank erik pitzer for implementing an initial version of the interval matching algorithm, pedro galante for discussions on reference targets, colin clancy for assistance in code development, and michele day for technical editing of the manuscript.

funding: this work was funded by komen foundation  and nih .
