BACKGROUND
multiple sequence alignment
biologists have always tried to understand the basic roles of nucleotides and genes  <cit> . one popular approach in trying to understand the function of a newly found gene or protein is to compare it with already known genes/sequences. a very common practice is to attempt to find one or more sequences in existing literature or databases that are reasonably close to the sequence in question. however, due to the fact that the number of known sequences is rapidly increasing every year, new classes of algorithms that are able to search massive data sets are needed.

sequence alignment algorithms are techniques that are used to find similarity among several dna/protein sequences. these algorithms are classified into two main categories: pair-wise and msa algorithms, each designed for a special purpose. in pair-wise algorithms, the main goal is to find the similar or closely related parts  of two sequences; whereas in msa, the main goal is to find the consensus parts of more than two sequences. therefore, pair-wise algorithms are mainly used to find similar sequences in a database; msas are mainly used to find the relationship among several sequences.

several algorithms and techniques have already been suggested to solve this problem in each of the above two categories. among these techniques, there exist several classical methods, like dynamic programming , that can always find the optimal alignment for any two sequences . however, these techniques cannot always be generalized to msa cases . therefore, using classical methods in the msa case is almost impossible. in fact, because it has been shown that msa is np-complete  <cit> , heuristics are mainly used to solve this problem.

regardless of the solution methodology, msas can be categorized into three main solution categories: exact, progressive and iterative  <cit> . in exact methods, which are usually the generalized methods of the needleman and wunsch algorithm  <cit> , all sequences are aligned simultaneously to find the optimal answer. the main drawback of this class of algorithms is their massive computational need, usually impossible to find the answer in polynomial time. in progressive algorithms, sequences are first aligned two-by-two  before finding the final alignment. then, an alignment guidance tree is generated based on these pair-wise alignment scores. sequences are combined step by step to find the optimal answer by starting from the closest two sequences. in this case, current sequences are modified to get the best fit for new combining sequences. although this class of algorithms normally manages to find reasonable alignments , their main disadvantage is their sensitivity for getting trapped into local minima. in iterative methods, all sequences are aligned simultaneously. by using one or more heuristic algorithms, an initial answer is computed first. then, this initial answer is improved iteratively by using intelligent routines designed for this type of msas. although these algorithms are not as sensitive as progressive algorithm to falling into local minima, however, they have their own drawbacks. for example, the accuracy of the final answer is greatly dependent on the quality of the seed solution.

related works
a number of alignment algorithms have been proposed to solve the msa problem, such as multalign  <cit> , multal  <cit> , pileup  <cit>  and clustalx  <cit> , which provides a graphical interface for clustalw  <cit> . they all use a global alignment algorithm in  <cit>  to construct an alignment for the entire length of the sequences. the main difference among these methods is in the order they combine the input sequences. multal deploys a sequential branching method to align the two closest sequences before building up the final alignment by subsequently aligning the next closest sequence to it. multalign and pileup construct a guide tree using upgma  <cit> . this tree is then used to align larger and larger groups of input sequences. clustalx that uses the alternative neighbor-joining algorithm  <cit>  to construct a guide tree has one of the most sophisticated scoring systems. it considers sequence weighting, position dependant gap penalties, and the automatic switching among scoring matrices based on the degree of similarity among the input sequences. pima  <cit>  uses a local dp algorithm to align only the most conserved motifs. two versions of this method have been developed, ml_pima and sb_pima, and they differ in the way they order the combination of input sequences and maximum linkage and sequential branching algorithms. dialign  <cit>  employs local alignment based on segment-to-segment comparison to construct the final alignment. then, an iterative procedure is deployed to combine these segments toward generating the final alignment. prrp  <cit>  iteratively divides the input sequences into two groups and then subsequently realign them using a global group-to-group alignment algorithm. saga  <cit>  evolves a population of alignments in a quasi evolutionary manner to gradually improve their fitness. mafft  <cit>  identifies the homologous regions by a fast fourier transform  approach. using its simplified scoring matrix, mafft manages to significantly reduce the cpu time and increases the accuracy of alignments even for sequences having large insertions and extensions as well as distantly related sequences of similar length. probcons  <cit> , which computes posterior-probability matrices and expected accuracies for each pair-wise comparison, applies the probabilistic consistency transformation, and then computes an expected accuracy guide tree to progressively generate the final alignment. t-coffee  <cit>  pre-processes a data set of all pair-wise alignments between the input sequences to generate a guide tree for the progressive alignment. t-coffee not only does focus on the next aligned sequences but also on the whole set of input sequences. muscle  <cit>  as one of the very fast algorithms in this field has three stages: draft progressive, improved progressive, and refinement. at the completion of each stage, a multiple alignment is available and the algorithm can be terminated. the first stage builds a progressive alignment, the second stage that might be iterated attempts to improve the tree and builds a new progressive alignment according to this tree, and, the third stage performs iterative refinement using a variant of tree-dependent restricted partitioning. mummals  <cit>  uses probabilistic consistency and improves its alignment quality by using pair-wise alignment hidden markov models . parameters for such models have been estimated from a large library of structure-based alignments. there are also other hmms methods that use statistical models of the primary structure consensus to align input sequences  <cit> . hmmt  <cit>  uses the simulated annealing algorithm to maximize the probability that an hmm represents the sequences to be aligned. rbt  <cit>  is another iterative algorithm that uses the n-dimensional version of the dp table  to find the best alignment among input sequences. the analogy of a rubber band is a unique contribution of this work.

further, ga based algorithms were among the some of the most effective approaches used to solve the msa problem. in  <cit> , a combination of a ga and dp is used with two different distance matrices. the main drawback of this technique is its limitation in performing crossover and mutation operations. in  <cit> , a ga approach is proposed with a description of the so-called center star algorithm . in addition to this algorithm's convergence problems, forcing the ga to work around the csa and the initial population creates a major disadvantage for this approach. it leads to the inability of the main search algorithm to explore all parts of the solution space. in  <cit> , a very different ga approach is presented. in this work, five mutation operators are designed to be randomly selected in each cycle of the algorithm. here, no particular optimization plan is used; therefore, this greedy algorithm just moves toward any potential answer. one of the most appropriate ga approaches to solve the msa problem is presented in  <cit> . although, the authors carefully define their chromosome, crossover and mutation operators, the definition of their scoring function appears to be their main drawback. in  <cit>  a very interesting divide-and-conquer ga based approaches is presented. here, the sequences are divided into smaller sequences and then they are aligned by a ga. if these partial alignments generate better results, they would be replaced by the original ones. although this approach managed to significantly reduce the simulation time, there is no guarantee that the aggregation of these partially optimal strings ends up with the global minimum and/or a reasonable alignment.

in  <cit> , the authors present a very simple implementation of the ga. in this work, the ga's convergence speed is significantly reduced by the simplicity of the algorithm. the fact that this ga approach discards many offspring is the main reason for its slow convergence. in  <cit> , the convergence speed of a ga is increased by combining it with a simulated annealing algorithm. the ga in  <cit>  use quantum mechanics concepts by employing a binary matrix to represent only four chromosomes that are used to solve the problem. in each ga cycle, the best three solutions are directly copied to the next generation and only one of them  is selected for the ga operations. the proposed ga is significantly biased toward good answers, which strongly prevents it from exploring other parts of the solution space. authors of the research in  <cit>  present a ga based approach to find the optimal cut-off-points to divide the large sequences to several smaller ones. each of these smaller sequences is solved by an ant-colony approach. the limited use of the ga just to find the cut-off-points is quite time consuming in this approach.

in this paper, a novel approach, rbt-ga, is presented to solve the msa problem. the rest of the paper is structured as follows. the next section describes the problem, fundamentals of ga and rbt, and shows how rbt and ga are combined to solve the msa problem. this is followed by simulation results, discussion and analysis, and conclusion.

methods
problem statement
let {s <dig> s <dig> ... sn} be n sequences over the alphabet set ψ, which contains  <dig> and  <dig> characters of dna and proteins sequences, respectively. also, let ψ' = ψ ∪ {–} be the superset of ψ with and extra character for a 'gap'. the msa problem can be defined as finding  with the following properties:

 <dig>   = si for all i =  <dig>   <dig> ⋯, n providing that all gaps are removed from .

 <dig>   where || denotes the length of .

 <dig>  the alignment score,  is maximized where  denotes a quotation of similarity between  and , and, g() is related to gaps of .

based on the above, the msa can be formulated as an optimization problem. however, it is important to note that the complexity of the problem increases exponentially as we add more sequences to the input sequences set – finding the optimal answer is not always possible. thus, this is why classical methods like dp and needleman's algorithm can only deal with a small number of short sequences.

genetic algorithms
a genetic algorithm optimizer
metaheuristics are powerful classes of optimization techniques. a popular class among these techniques is gas that are very robust search methods  <cit> . the overall procedure of a typical ga is given in figure  <dig> though in some cases modifications might be needed when targeting certain problems, such as the case in this work.

initial population
a ga is always initiated with a set of possible solutions of the problem, known as initial population. the initial population consists of several chromosomes. each chromosome is formed from a series of binary or decimal numbers representing genes. the initial population is normally constructed by generating several random chromosomes that are supposed to represent the solution space rather homogenously. this attribute is much more important that the quality of the individual chromosomes in the initial population. during the optimization process, the chromosomes are evaluated by the genetic optimizer and the best of them are selected to generate the next population. in fact, obtaining the optimal answer relies on appropriately generating the future populations.

the fitness function
in all optimization problems, the aim is to minimize or maximize a given cost function. similarly, in a ga, a function known as fitness function is used to evaluate the goodness of each chromosome. this function assigns a positive number to each chromosome  to represent the level of its goodness or badness. in maximization problems, the fitness function is usually proportional to the main cost function, while, in minimization problems, it is usually inversely proportional to it.

selecting the best chromosomes
as mentioned earlier, the only way to evaluate chromosomes of a population is by their fitness values. in ga, the best chromosomes from the current population are selected to produce the next population. the chromosomes are selected so that those with higher fitness values have more chances of being selected. to achieve this, a roulette wheel from the current chromosomes is constructed such that the surface  assigned to each chromosome is proportional to its fitness value. then, the wheel is spun and the chromosome that the wheel picks is selected.

recombining parent chromosomes
several operators are used to generate the next population from the current one. in each optimization cycle, one or two parents are used to generate the offspring chromosomes. these combinations consist of three main operations: crossover, mutation, and elitism.

crossover
this operator is used to exchange the genetic materials  between two parents and create one or two offspring. here, two chromosomes are broken at random positions, then, the genes between these breakpoints are exchanged with a given probability.

mutation
in this operation, several genes of a chromosome are randomly selected and their values are mutated .

elitism
it is possible sometimes to lose the best solution that the algorithm has already found after performing crossover and mutation for several iterations. to prevent this, some of the best chromosomes from the current population are directly copied into the next generation without any modification, i.e. crossover and mutation. this ensures the existence of good chromosomes in each generation even if low quality chromosomes emerge for one reason or another.

terminating the algorithm
a criterion  must be selected to terminate the optimization process. the common criteria used in the case of gas are: total time, number of iterations, best chromosome fitness value, minimum improvement of the best chromosome, and minimum relative improvement of the best chromosome.

overall procedure of a ga
rubber band technique
the rubber band technique is an iterative heuristic to solve the msa <cit> . in this approach, which is inspired by the general behavior of a rubber band on a plate with poles, an initial answer is generated before launching the main optimization procedure. using several operators, this initial answer is modified iteratively to obtain better alignment scores. the following definitions are essential for the clarification of this optimization procedure.

grid answer space
the grid answer space , which is the extended version of the grid table used in dp for pair-wise alignment, is a multi-dimensional table with a sequence placed in one of its axes. the use of this table provides a unique one-to-one relationship between any possible answer of a msa and the associated arrowed line as depicted in figure  <dig> 

rubber band
any answer for a msa can be presented by one and only one arrowed line. this unique arrowed line for each answer is called a rubber band . there are two restrictions on each rb to make a valid alignment, they are as follows:

 <dig>  each rb must start from the upper left corner  and finishes at the lower right corner  of the gas.

 <dig>  there cannot be any backward section in each rb. that is, each section can only be diagonal or parallel to the one of its gas' axes.

primary pole
a primary pole  refers to a fixed point in gas that the rb is ought to pass by. in fact, pps are the sections of the gas that force the optimization procedure to align a predefined number of characters  with each other.

secondary pole
secondary poles refer to grid points in gas that a rb passes through one-by-one to generate the final answer. now, pps can be far apart from one other, however, secondary poles need to be adjacent. this type of poles is only used to connect pps to each other. for brevity purposes, secondary poles are referred to as 'poles' for the rest of this paper.

primary pole score
as described earlier, each pp points out predefined locations of input sequences that need to be aligned with each other. if the related to these locations are augmented in a single string, the primary pole score for that particulate pp is defined as the alignment score of that augmented string .

sticky poles
sticky poles  are imaginary poles in the system related to locations in a gas with high primary pole scores. that is, the optimization procedure can have a pole with a high primary pole score if it places a pp on that special place. therefore, each sp is located in a gas to represent a column from the input sequences to align identical or closely related nucleotides from different input sequences with one another.

alignment score
in each msa instant, an alignment score is defined to evaluate the quality of each answer. the sum-of-pairs score  with penalized gap opening is the criterion used in this approach. in sps, each column in an alignment is scored by summing the scores of all pairs of characters in that column. the score of the final alignment is then summed over all column scores. in the penalized gap opening scheme, there are two factors to calculate the score/cost of a gap: opening and extension. gap opening is applied to each gap once and the gap extension corresponds to the length of each gap. the cost of a gap opening is usually considered to be 5– <dig> times more than that of a gap extension  <cit> . the use of two factors in calculating a gap is related to a well-known biological fact that having few longer gaps is more plausible than having several short gaps in an alignment.

combination of ga and rbt to solve msa
the overall procedure of rbt-ga is depicted in figure  <dig>  details are as follows.

chromosomes in rbt-ga
the way the chromosomes are defined represent the most important part of any application of a ga. in rbt-ga, each chromosome consists of a predefined number genes assigned before launching the main algorithm. in rbt-ga, each gene is not a simple binary or decimal number; rather a complex vector representing a pp in the gas. therefore, each chromosome is a set of pps plus two fixed pps  in the rbt framework. the first and last genes are always fixed to the upper left corner and lower right corner of the gas, respectively. these two fixed genes guarantee generating a valid chromosome, and therefore a valid alignment.

generate the initial population
sps of the rbt are used to generate the initial population in rbt-ga. the following procedure is designed to generate n chromosomes, each with the length of m.

step 1: locate all sticky poles and save in arrstickypoles

step 2: for n times, repeat steps 3–8

step 3:   prepare a dummychrm with the length of m

step 4:   for m times repeat steps 5–6

step 5:      select a random sp from arrstickypoles.

step 6:      add sp to dummychrm

step 7: fix dummychrm

step 8: add dummychrm to initial population

in step  <dig>  every dummychrm that is made is modified to generate a valid rb. here, genes of each dummychrm are reordered so that their pp are guiding the rb from upper left corner of a gas to its lower right corner without violating any of the two rb's restrictions. if there were several pps that do not satisfy the mentioned criteria, one or two of them are jammed to each other to fix this problem. this procedure, namely jam primary poles  as shown in figure  <dig>  is borrowed from the rbt framework.

genetic algorithm operators
three ga operators are also used for rbt-ga. for elitism, a predefined percentage of each population is directly copied to the next one. in crossover, two chromosomes are split from a random point to swap genes between. in mutation, each coordinate of each gene  of a chromosome is added by a small random number. note that, after performing crossover followed by mutation operators, pps in each of the generated chromosomes may not satisfy the two major restrictions of a valid rb. therefore, the jam primary pole procedure is launched again to fix every generated offspring, leading to valid alignments.

rbt-ga termination
rbt-ga's optimization process is terminated when no improvement is met for a predefined number of iterations. the best alignment score for the current population is used as the criterion for this purpose.

rbt-ga final tuning
after termination the rbt-ga's optimization process, another procedure is launched for the final tuning of the obtained chromosomes. this process is the final tuning procedure which is borrowed from the rbt framework  <cit> .

RESULTS
normally, when solving msa problems, the optimal answer is unknown and there is no concrete criterion to evaluate the quality of a given algorithm, unlike the case for pair-wise alignment where an optimal solution can always be found. therefore, standard benchmarks, like balibase, are provided to measure the efficiency of msa algorithms.

the first version of balibase  <cit>  was dedicated to the evaluation of multiple alignment programs and was divided into five hierarchical reference sets of:  equidistant sequences with various levels of conservation,  families aligned with a highly divergent 'orphan' sequence,  subgroups with less than 25% residue identity between groups,  sequences with n/c-terminal extensions, and  internal insertions. for release  <dig>  of balibase, these alignments have been manually verified and corrected by superposition of all known three-dimensional structures, using the lsqman program  <cit> . in this benchmark, an open source program is also provided to score the quality of each answer by comparing it with the one found manually. the maximum score is  <dig>  and is assigned to the alignments that are identical to the benchmark's answer; minimum is  <dig>  and is assigned to unrelated/unrealistic answers; and, a number between  <dig>  and  <dig>  for the others. the score would be higher when the generated answer is closer the manually calculated one.

to demonstrate the performance of the approach proposed in this paper, rbt-ga is used to solve all benchmarks from reference # <dig> and # <dig> of balibase  <dig>   <cit> . for all these benchmarks, the blosum <dig> scoring matrix with the gap penalty of  <dig> and  <dig> for the gap opening and gap extension, respectively, is selected. figure  <dig> shows the bar graph representation of the performance of rbt-ga compared with other approaches  formerly designed to solve the stated benchmarks in reference # <dig>  figure  <dig> shows similar results for reference # <dig>  all rbt-i/l/ga are executed ten times to solve each of these benchmarks. each algorithm is run ten times to show the robustness of these optimization techniques although they include stochastic optimization steps. for rbt-l, the maximum, average, and minimum of these ten runs are separately depicted to show the robustness of these approaches. for rbt-i, only the best run of these ten executions is reflected; because the other nine answers were not so apart from the best one ; and therefore omitted in these figures. the reason for obtaining different answers for different runs is significantly related to the nature of this optimization process and its operators, as all of them undertake their optimization steps randomly. therefore, it is not surprising that they will always fall into different parts of the solution space, yet close enough to each other as a sign of the algorithm's robustness and repeatability.

discussion
the results obtained by using rbt-ga were quite different and interesting, covering a vast variety of situations. in summary, similar to other approaches formerly presented to solve this problem, although rbt-ga did not manage to find the identical alignments to benchmark answers, it was generally successful. the following sections explain this in more detail.

alignment score vs. balibase score
the first observation made after analyzing the solution trajectory of the benchmarks was the imperfect relationship between alignment score, which is purely dependent on the scoring matrix , and the balibase score, which is purely based on biological facts. however, they seemed to be fairly related. in several cases, gaining higher alignment scores yields better balibase scores; although, this cannot be always guaranteed. to investigate this relationship further, we executed the algorithm with different scoring matrices, gap opening and extension values. in almost all cases, the alignment score and balibase score showed the same level of uncorrelation. nevertheless, it seems that in most cases, alignments with higher alignment scores have better balibase score as well. figure  <dig> shows a sample of this uncorrelation for  <dig> wit from reference# <dig> 

rbt-ga and reference #2
reference # <dig> of the balibase  <dig>  is dedicated to 'orphan' sequences. these sequences are significantly different in their number of sequences and their sequences' length. for this class of sequences, rbt-ga has shown different performances. as it was shown in figure  <dig>  in several cases , rbt-ga managed to significantly outperform the existing methods. in several other cases, rbt-ga's performance was just fairly comparable to the others, like 1uky, 1tgxa and 2trx. and finally, there were cases that rbt-ga did not significantly outperform the existing alignment methods, like 1cpt, 2myr and 1lvl.

rbt-ga and reference #3
reference # <dig> of the balibase  <dig>  is dedicated to subgroups of sequences with less than 25% residue identity between groups. performance of rbt-ga in this category was quite different compare to reference # <dig>  here, although rbt-ga manages to outperform few of the existing methods, it could not significantly outperform any of them. overall, the performance of rbt-ga was fairly better than several other algorithms.

rbt-ga and balibase score
one of the noticeable facts about rbt-ga answers is its non-zero balibase score at all times. examining figures  <dig> and  <dig>  it can be seen that, several of the existing alignment algorithms have significant performance diversity in their results. for example, figure  <dig> shows that prrp and ml_pima received balibase score  <dig>  and  <dig>  for 1idy and 1r <dig>  respectively. in other words, in these two cases, the final alignment of these two algorithms manifests no biological relationship in one case and almost maximum biological relationship in the other case. in contrast, rbt-ga was always able to identify some biological relationship in the aligned sequences. in some cases, it found the identical answer, such as, 1idy in reference # <dig>  in other cases where the biological relationship in the input sequences was subtle and no method could find a reasonable answer, rbt-ga performed reasonably, like 1ajsa in reference # <dig> 

overall performance of rbt-ga
the rbt-ga had a reasonable performance in almost all cases. although there were instances that some of the existing methods found better solutions, with respect to balibase score, in most cases, the quality of rbt-ga's alignments were as good as or better than the other methods. in some cases, it could even significantly outperform existing methods, such as 1idy and 1ubi in reference # <dig> 

figures  <dig> and  <dig> show the overall performance of rbt-ga as compared with other approaches. in these figures, the alignment algorithms are sorted according to their average balibase score throughout the whole benchmark. figure  <dig> shows that rbt-l-max slightly outperformed rbt-ga-max, while rbt-ga-max significantly outperformed all other methods in reference # <dig>  almost % <dig> better than the fourth best, saga. figure  <dig> shows that rbt-ga-max is ranked fourth based on its average balibase score in reference # <dig>  although its average balibase score is just 7% below the best approach, prrp.

rbt-ga versus rbt-i/l
figures  <dig>   <dig>   <dig> and  <dig> show that rbt-ga significantly outperforms rbt-i. these figures show that even the worse alignment of rbt-ga  is almost 20% and 10% better than rbt-i for references # <dig> and # <dig>  respectively.

rbt-l and rbt-ga on the other hand show very similar performances. however, figures  <dig>   <dig>   <dig> and  <dig> also show that rbt-ga-max is slightly worst  than rbt-l-max in both references. in contrast, rbt-ga-avg is better than rbt-l-avg for almost 6% in both references. thus, the worse alignment that each of these techniques has found is used for the sake of comparison. rbt-ga-min significantly outperforms rbt-l-min for 14% and 17% in reference # <dig> and # <dig>  respectively. also, in both references, the worse alignment found by rbt-ga is better than the average alignment found by rbt-l.

the above comparisons imply that having so many sps, biologically meaningful or not, increase the chance of misleading the main optimization algorithm. this could be the reason why rbt-l managed to perform as well as rbt-ga in the best scenarios and significantly performed less efficiently in the worse cases.

these observations imply that the way in which sps are generated at the start of the main optimization process is the key to better alignments. in conclusion, one can state that the location of an aa is more important than its index in a protein.

CONCLUSIONS
in this paper, a novel approach  based on the combination of rubber band technique and a genetic algorithm is presented to solve the multiple sequence alignment problem. rbt-ga is a population based optimization algorithm that starts from a set of possible answers , and gradually improves it to find the optimal alignment. in this approach, ga is used to gradually improve the quality of different answers in the population . here, genes of each chromosome are in fact rbt's sticky poles that are used to identify locations in the input sequences that are most likely biologically related . rbt-ga is tested by solving several benchmarks from the balibase  <dig> . the results showed great promise of the proposed approach.

based on the promising results obtained from rbt-ga, the future direction is  to investigate more optimization techniques to adopt in this framework, and  to improve the convergence speed of rbt-ga through parallelization.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jt and ayz developed the framework for the new msa method. jt implemented the framework and developed the associated software and simulations. jt and ayz wrote and edited different versions of the manuscript.

