BACKGROUND
methods for finding protein-coding sequences  in prokaryotes and eukaryotes are well-developed. algorithms generally make use of combinations of the following signatures of cdss:  codon or dicodon bias etc.,  conservation between species,  similarity to known sequences,  presence of open reading frames , splice sites etc., and  expression in cdna/est libraries  <cit> .

in virus genomes, however, the situation can be complicated by a number of factors, that may lead to decreased sensitivity:  virus genomes are often too small  to obtain codon usage statistics and, in any case, the compact genomes often contain overlapping coding and non-coding functional elements that can result in unusual codon usage patterns;  regions of high conservation between related sequences may not necessarily be coding and, where cdss and/or non-coding functional elements overlap, conservation may only reveal the presence of one of the overlapping pair;  new virus types often contain novel cdss, dissimilar to previously annotated cds; and  viruses can employ a variety of non-canonical translational mechanisms – e.g. frameshifting, stop codon read-through, leaky-scanning and internal ribosome entry sites.

comparative genomics is a particularly useful way to detect new cdss in virus genomes, because many sequenced virus genomes, covering a useful range of diversity , are available. in its simplest form, a comparative genomics approach consists of looking for genome regions that are more conserved than average between related sequences. such an approach may fail to distinguish cdss from other conserved elements. a more advanced approach is to look for the particular mutation patterns associated with cdss – e.g. the critica software  <cit> , or pair hidden markov models  <cit> . however, previous such algorithms have not dealt adequately with the case of overlapping cdss.

in a previous paper  <cit>  we introduced a probabilistic model for the mutation patterns associated with non-coding, single-coding and double-coding regions of a multiple sequence alignment, and a maximum likelihood statistic – called mlogd – for predicting whether a new query orf is coding or non-coding. here we present  an improved mlogd statistic,  a greatly extended suite of software using mlogd ,  a database of results in virus genomes, and  a web-interface to the software and database.

implementation
the mlogd statistic
given an input sequence alignment, a null model of the cds annotation  and an alternate model , the mlogd statistic is an estimate of the relative probabilities of obtaining the observed pattern of mutations across the alignment under each of the null and alternate models. in this subsection we first describe how the mlogd statistic is calculated for a pairwise sequence alignment. then we describe how this is extended to a multiple sequence alignment. more extensive notes are given on the website.

mlogd statistic for a two-sequence alignment
given two aligned sequences s <dig> and s <dig>  we estimate the probability that s <dig> mutates to s <dig>  after time t, by

log⁡p=∑nnucleotidesk=1log⁡p,     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakqgabeqaagrabagagiibawmaei4ba8maei4zacmaemiuaalaeiikagiaem4uam1aasbaasqaaiabigdaxaqabagccqghsgircqwgtbwudawgaawcbagaegomaidabeaakiabcuda7iabdsha0jabcycasiabd2eanjabcmcapiabg2da9aqaaiaaxmaadaaeabqaauaabaqaceaaaeaacqwgobgtdawgaawcbagaeeoba4maeeydaunaee4yammaeeibawmaeeyzaumaee4ba8maeeidaqnaeeyaakmaeeizaqmaeeyzaumaee4camhabeaaaoqaaiabdugarjabg2da9iabigdaxaaaasqabeqaniabgghildgccyggsbabcqggvbwbcqggnbwzcqwgqbaucqggoaakcqwgobgtdaqhaawcbagaegymaedabagaem4aasgaaogaeyokh4qaemota40aa0baasqaaiabikdayaqaaiabdugarbaakiabcuda7iabdsha0jabcycasiabd2gatnaacaaaleqabagaem4aasgaaogaeiykakiaeiilawiaaczcaiaaxmaadaqadaqaaiabigdaxagaayjkaiaawmcaaaaaaa@7224@

where n1k
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgobgtdaqhaawcbagaegymaedabagaem4aasgaaaaa@304d@ and n2k
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgobgtdaqhaawcbagaegomaidabagaem4aasgaaaaa@304f@ are the nucleotides in s <dig> and s <dig> at the kth alignment position ; p is calculated using nucleotide, codon and amino acid substitution matrices, as described in  <cit>  ; m is the null or alternate model; and mk is the coding status  at the kth alignment position, according to the relevant model m .

we define the pairwise sequence divergence, Λ, to be the total number of point nucleotide differences between s <dig> and s <dig>  and we determine t numerically for each of the null and alternate models by requiring the expected number of mutations between s <dig> and s <dig>  under the model, to equal the observed number of mutations, Λ.

the log likelihood ratio of the two models is

log⁡=log⁡p−log⁡p.     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqaaegadaaabagagiibawmaei4ba8maei4zacmaeiikagiaeeitawkaeeouailaeeykakcabagaeyypa0dabagagiibawmaei4ba8maei4zacmaemiuaalaeiikagiaem4uam1aasbaasqaaiabigdaxaqabagccqghsgircqwgtbwudawgaawcbagaegomaidabeaakiabcuda7iabdsha0jabg2da9iabdsha0naacaaaleqabagaeeyyaemaeeibawmaeeidaqhaaogaeiilawiaemyta0kaeyypa0jaeeyyaemaeeibawmaeeidaqnaeeykakiaeyoei0cabaaabaaabagagiibawmaei4ba8maei4zacmaemiuaalaeiikagiaem4uam1aasbaasqaaiabigdaxaqabagccqghsgircqwgtbwudawgaawcbagaegomaidabeaakiabcuda7iabdsha0jabg2da9iabdsha0naacaaaleqabagaeeoba4maeeydaunaeeibawmaeeibawgaaogaeiilawiaemyta0kaeyypa0jaeeoba4maeeydaunaeeibawmaeeibawmaeeykakiaeeola4caaiaaxmaacawljawaaewaaeaacqaiyagmaiaawicacaglpaaaaaa@7a2c@

if log is positive, then the observed mutations between s <dig> and s <dig> are more consistent with the alternate model. if log is negative, then the observed mutations are more consistent with the null model.

mlogd statistic for a multiple sequence alignment
the mlogd statistic, ∑tree log, is calculated for a multiple sequence alignment using the following procedure. first a phylogenetic tree is constructed using standard software . the  tree is used to select a list of sequence pairs tracing round the outside of the tree . such a set of pairwise comparisons covers each branch of the tree precisely twice. the mlogd statistic, log, is calculated for each of the sequence pairs in the list, summed up over all the pairs, and divided by two, to give the mlogd statistic for the multiple sequence alignment, ∑tree log . similarly, the total number of mutations, ∑tree Λ across the phylogenetic tree is the sum of Λ values for each sequence pair, divided by two.

input data
the required input data for mlogd are a multiple sequence alignment of related sequences, a list of known cdss  in a chosen reference sequence, and a phylogenetic tree. circular genomes are fully supported. for viruses, useful sets of related sequences may be obtained from the ncbi viral genomes project website  <cit> . there are tools on the web-server to help produce a suitable alignment and phylogenetic tree.

operation modes
the mlogd software has three operation modes, described below. the 'test input query cdss' option can be used to test a specific query cds . the 'find and test all non-annotated orfs' and 'six-frame sliding window plots' options can be used to search a whole input alignment for new cdss.

test input query cdss
here mlogd calculates the null versus alternate model likelihood ratio statistics, where the null model is that the query orf is non-coding, while the alternate model is that the query orf is coding .

the output includes:

 <dig>  a table of log statistics for each reference – non-reference sequence pair.

 <dig>  a plot of the log statistic for each reference – non-reference sequence pair and summed over the phylogenetic tree. on the web-server there is a link to generate monte carlo simulated sequences under the same null and alternate models. the simulations are used to estimate confidence limits on the log statistics. 

 <dig>  a nucleotide-by-nucleotide plot of the log statistic for each reference – non-reference sequence pair, the sum over the phylogenetic tree, and running means of the same . on the web-server there are links to zoom in on the plot and/or adjust the running-mean window size.

find and test all non-annotated orfs
the 'find and test all non-annotated orfs' option finds all non-annotated orfs longer than a specified minimum length, and produces the same statistics and plots as the 'test input query cdss' option for each of these orfs. the user may select 'start-stop' orfs or 'stop-stop' orfs.

six-frame sliding window plots
sometimes a cds may be entered through a stop codon read-through, ribosomal frameshift, or splicing event rather than with an aug codon. the 'find and test all non-annotated orfs' option  may not be the best way to locate such cdss, since such cdss generally commence part-way through an orf. the 'six-frame sliding window plots' option calculates the ∑tree log statistic in a window sliding along the alignment in all six reading frames . the user may select the window and step sizes. extended regions of positive signal may indicate potential new cdss, especially where there is an absence of stop codons across the alignment.

RESULTS
sensitivity and selectivity
the software has been previously tested on simulated data and on overlapping cdss in the hepatitis b virus and escherichia coli genomes  <cit> . in a further test on  <dig> virus alignments, all  <dig> known cdss were detected . conversely, the false positive rate for all non-coding orfs of at least  <dig> codons was  <dig>  . in addition, all the false positives had very low mlogd scores .

further tests showed that, for alignments with just  <dig> mutations overall , mlogd can discriminate non-overlapping cdss from non-coding orfs with a typical accuracy of up to 98%, and can detect cdss overlapping known cdss with a typical accuracy of 90% . in general usage, ∑tree Λ is often much greater than  <dig>  with correspondingly lower predicted error rates.

on-line virus database
a database of results for  <dig> virus sequence alignments is available on the website. the database contains multiple sequence alignments, phylogenetic trees, positions of known cdss, six-frame sliding window plots, statistics and plots for the annotated cdss, and statistics and plots for all non-annotated start-stop orfs in the reference sequences of at least  <dig> codons in length.

CONCLUSIONS
we have presented  a new tool for locating and analysing cdss in virus alignments, and  an on-line database of results in  <dig> virus alignments. besides the easy-to-use website and comprehensive output, the main advantage of mlogd over other gene-finding software is that mlogd explicitly takes into account the possibility of overlapping genes – common in viruses. for example, for the hepatitis b, avian hepatitis b, polerovirus, luteovirus and human immunodeficiency virus  <dig> genomes , mlogd successfully finds all  <dig> known cdss, while genemark only finds  <dig> . we have extensively tested the sensitivity of mlogd and shown it to be more sensitive than other methods for detecting overlapping cdss  <cit> .

mlogd can, of course, also be used for cellular organisms. partially overlapping cdss are fairly common in prokaryotes, but it is not clear what fraction of overlaps are functionally constrained. many appear to be the result of the loss of a stop codon, allowing one cds to run into an adjacent cds  <cit> . others may be involved in regulatory mechanisms  <cit> . similarly, many potential ribosomal frameshift sites – leading to overlapping cdss – have been identified in cellular organisms  <cit> , as well as viral genomes. mlogd is a valuable tool for analysing the magnitude of functional constraints on such overlaps, with implications for the annotation of putative frameshift sites, and the evolution of overlapping genes in viruses and in prokaryotes.

availability and requirements
the mlogd software and virus database are available at  . sequences may be entered into the web-interface or the software  may be downloaded and used locally. to install the software locally, the publicly available packages emboss  <cit>  and r  <cit>  must also be installed. the programme codaln  <cit>  is recommended for aligning the input sequences. run-time and resource-use scale approximately linearly with the number of sequences and the length of the input alignment. on a pentium  <dig>  <dig>  ghz processor, analysing a  <dig> nt orf takes ~ <dig> s for a five-sequence alignment, while running six-frame sliding window plots  for a  <dig> nt region takes ~ <dig> s.

authors' contributions
aef: algorithms, programming, website, documentation, manuscript. cmb: intellectual direction, especially with respect to biological background.

supplementary material
additional file 1
archive of the source code. the file sup <dig> tgz is an archive of the source code for the current version of mlogd. unpack it with tar xvfz supl.tgz; then see the readme file in the mlogd directory.

click here for file

 acknowledgements
aef gratefully acknowledges funding from the new zealand foundation for research, science and technology, grant number uoox <dig>  cmb gratefully acknowledges funding from the nz health research council.
