BACKGROUND
with the availability of high-resolution microscopy and high-throughput technologies in molecular biology the amount of cellular images in very good resolution quality increases significantly. such amount of available data consecutively demands for image analysis software adapted to utilize the full capacity of these imaging advancements. the state-of-the-art way of presenting, assessing and evaluating experimental images qualitatively is being increasingly replaced by computational data evaluation. quantification of e.g. light intensities arising from fluorescent protein  expression in different cellular compartments can be ascertained in a spatially resolved manner and enables us to mathematically verify the current understanding of biological systems.

unambiguous and reproducible computational extraction increases the quality and exchangeability of information for subsequent automatic processing steps such as digitization, representation, analysis, and modeling. a variety of image processing-, analysis- or modeling-packages addressing these tasks exist already, either on a commercial basis or as open source software.

recently, several eminent reviews have been published which outline the most common methods and tools addressing biological image processing, analysis and modeling . one of the key conclusions is that these tasks are usually separately addressed. cell segmentation and property extraction, for example, are well established and can be realized by dedicated software such as cellprofiler  <cit> , cell-id  <cit>  or generic image processing platforms like labview  or imaris . a widely used and freely available tool is imagej  <cit> , which comprises standard segmentation algorithms as well as surface or profile plots. also freely available are additional packages for r like ebimage  <cit> , which can be used for the segmentation and analysis steps. when it comes to spatial modeling and simulation in microbiology one can distinguish the following classes of dedicated simulators i) spatially partitioned ode systems  ii) spatially partitioned gillespie systems  iii) particle-based simulators . these techniques differ mostly with respect to the mathematical framework which changes the level of detail represented in the system .

all of these tools offer excellent solutions for the specific problems they were designed to solve. however, it is still difficult to perform a contiguous and intuitive workflow, starting with almost raw data images and resulting in a running mathematical model, that enables to directly compare the simulation results with biological data .

the stse platform intends to close the gaps between various tools or software-packages that are in majority specifically designed for these separate steps . by providing the workflow guidelines and the access to python language, it offers the advantage of stratifying the interaction with different data-structures and thus minimizes the loss of time and information during the manual export and conversion processes. therefore, it should be seen as a set of tools facilitating the intuitive workflow between the image analysis tools and simulators.

additionally, in its current implementation, it provides examples of how to perform such a transition from segmenting tools to simulation engines implemented internally in python . for these purposes stse comprises modules for digitizing and representing microscopy data, enables data analysis as well as manipulation, and can be used for mathematical modeling and simulation of spatial distributions of chemical species. it is a powerful, multifaceted tool for interdisciplinary work.

implementation
the tools are written in python and have a modular design which allows the modeler to extend their functionality according to custom needs. the default stse workflow can be summarized as follows :

 <dig>  preprocessing of microscopic images for the studied object.

 <dig>  definition of a discrete representation of the images.

 <dig>  automatic integration of the information from images into the discrete representation.

 <dig>  analyzing the digitized data.

 <dig>  formulating a model: defining interactions between regions of interest and molecules of interest.

 <dig>  running a model: previously digitized images are used as initial conditions for the evaluation of simulation results.

a detailed use case as well as comparative studies with some of the above mentioned state-of-the-art tools is provided in the additional file  <dig>  additionally, the webpage of the project contains examples, video tutorials, access to a discussion group and other helpful information sources. in the following, we give a concise overview of the fundamental methods used in stse:

spatial segmentation and digitization
the process of digitization generates a data structure, allowing for efficient analysis, representation and modeling. the classical approach is to decompose the microscopy image into physiologically distinguishable compartments  which is called image segmentation  <cit> . usually, image segmentation results in a data structure linking the compartments with pixels. stse differs from this approach by introducing an abstract, intermediate layer composed of so-called subcompartments. to generate this layer, each compartment is divided into subcompartments which have the geometry of polygons and are organized in such a way that they fill the entire compartment and do not overlap with each other. the default geometry is automatically composed of equilateral hexagons. the purpose of introducing this abstract layer is to allow for adjusting the digitization precision separately for different compartments, which is useful when it comes to analysis and modeling. to edit the geometry of subcompartments a voronoi 2d tessellation is used  <cit> . with the help of the graphical user interface  editor, the user may move subcompartment centers  for fine-tuning. this information implicitly specifies the geometry of each subcompartment. since these subcompartments share edges, the representation resembles a polygonal mesh .

each subcompartment has an individual geometry as well as other user-customizable properties such as cellular compartment affiliation, concentrations of specific substances, etc. the gui allows for user-friendly inspecting and editing of these properties. additionally, due to the software implementation design, it is possible to extend the gui editor by adding custom actions as well as to script the gui with python. one of the main goals of stse is to provide the possibility of framework extension and customization to the users.

with stse it is possible to acquire spatial luminosity information from microscopic images, which can correspond e.g. to the inhomogeneous distribution of tagged molecules within the cell. this process is performed on indexed color images . this is an important feature, since it allows for the comparison of simulation results with experimental data.

representation and analysis
image representation is performed implicitly by the conversion of the voronoi-based pm to an internal stse data structure. this design involves less constraints and thus allows for more latitude in defining polygonal geometries  as well as physiological information. it is realized by storing the polygon corner coordinates explicitly in the data structure instead of computing them using the voronoi algorithm. the datastructure may be easily modified or inspected via python. this allows for simulating structures changing in time, which has been, for instance, successfully used in the dynamic modeling of meristem growth  <cit> . the analysis is effected via the stse-gui as well as with python scripts and enables a comprehensive and differentiated overview of topological, geometrical and physiological information. the routines provided by stse allow for visualizing and inspecting compartment properties and can be used for computing different properties and for further, computational analysis of data from images. all structural information can be exported and saved for persistence and dissemination.

modeling
the digitized data can be used directly to perform spatial modeling . stse does not restrict the user with the simulation framework. instead, we suggest a workflow based on the so-called "cell-centered" finite volume method  <cit> . according to this scheme, a mechanistic model of a studied process needs to be formalized using a set of ordinary differential equations  describing the interplay of different actors  and different cellular compartments with specified kinetic rules on diffusion, chemical reactions, transport, etc. in this case a scipy library  <cit>  may be used to solve the system within the stse framework.

due to its design stse is fully extendable via python. the simulation engine can be freely connected with multitude of solutions limited only by the accessibility of these engines via python.

RESULTS
in the following, we demonstrate how to use stse to analyze and simulate biological systems. a typical stse workflow includes the modules for digitization, representation, analysis and modeling is presented using the running example of a mitogen-activated protein kinase gradient formation  in a mating yeast cell  <cit> .

fus <dig> signaling is part of the yeast mating pheromone pathways: upon stimulation with the pheromone Î±-factor, an intracellular signaling cascade becomes activated, which leads to the double phosphorylation of fus <dig>  the fus3pp gets released at the shmoo tip and can diffuse within the cell, which results in an observable fus3pp gradient. when reaching the nucleus, fus3pp is actively transported across the nuclear membrane and regulates transcription factors that modulate mating-specific gene expression. we would like to stress that the focus is set rather on the software specifications and the application scenario than on the biological results. to simplify the analysis and to facilitate the usage of examples in a confirmatory way, we work on test data, inspired by the experiments and explanations presented by maeder et al.  <cit> .

an extended workflow comprising amongst others the following examples is given and discussed in the additional file  <dig>  additionally, video tutorials covering this subject and all python scripts we use to produce the here presented images and results are provided on the project homepage.

in a first step we demonstrate the analysis and characterization of the fus3pp gradient. for this purpose we:

â¢ quantify the ratio of the average cytoplasm/nucleus expression of fus3pp based on fluorescence signal intensity acquired from microscopy images,

â¢ show gradient curves for fus3pp along the x-axis of the cell data image and around the nucleus,

â¢ simulate the process of fus3pp diffusion in the cytoplasm to determine the underlying conditions that lead to the qualitative values captured in the image.

we evaluate the results of the simulations and discuss i) whether the appearance of a fus3pp gradient throughout the cell can be explained by simple diffusion and ii) how to define plausible conditions and model parameters allowing to reproduce the experimental observations.

digitization
a major issue in this context is the task to adapted the polygonal mesh. if, for instance the focus is on a particular protein like the fus3pp in this case, the interesting point is the protein gradient within the cytoplasm but not outside the cell. thus it is necessary and sufficient to adapt the mesh size according to the area of interest. here, it is requested to keep a high precision within the cytoplasmic compartment  in order to capture and depict the gradient correctly. the analysis accounts the hypothesis that the fus3pp distribution is neither outside the cell nor in the nucleus . therefore, we use varying "subcompartment densities" in these compartments as presented in figure  <dig>  the default geometry is automatically composed of equilateral hexagons . the geometry of the subcompartments can afterward be fine-tuned using the gui editor to match different analysis and modeling requirements . another task related to the digitization of image data is the acquisition of subcompartment types . this task can be performed via the gui or a python script. although a subcompartment type can be set manually, in both cases the recommended way is to use an automatic protocol based on binary masks. these binary masks are based on original microscopy images and can be prepared with 3rd party segmentation algorithms . each subcompartment is associated with only one compartment type. when a conflict occures  the user can influence subcompartment types by changing the order of application of the binary masks or by defining subcompartment types manually. here, we use binary masks for localization of the following cell types : the cytoplasm , the nucleus , the cell membrane , the nuclear membrane  and the shmoo tip . these mask files are used to acquire the subcompartment types either by gui  or a python script. both methods are covered in detail in the additional file  <dig> 

the automatic acquisition of the signal from the microscopy image is another demanding task and provides the basis for the subsequent analysis and modeling steps. for this purpose we use indexed color images  corresponding to molecular concentrations of the molecules of interest. in the running example we use test data images inspired by the experiments described in maeder et al.  <cit> , in which the intracellular localization of fus3pp has been reported by fluorescence lifetime imaging microscopy  . in this particular case, since we are interested only in one chemical species , for each time step we provide only one image . in the more general case, a number of images required for each acquisition time step ideally should be equal to the number of species of interests. to summarize the previous steps: the necessary inputs for the digitization procedure are i) the binary masks, and ii), the indexed color images. the output of the digitization step is a feasible amount of abstract sub-compartments that cover the microscopic image. each subcompartment is allocated with a specific compartment type and the average intensity of the protein of interest acquired from input data.

representation and analysis
the analysis in stse is realized via python scripts. our running example demonstrates common tasks performed with stse such as inspecting geometrical, physiological or topological properties of the subcompartments/compartments and removing or resizing the subcompartments. the following information on the fus3pp gradient can be extracted :

â¢ the distribution of fus3pp in the cytoplasm along the x-axis in a central part of the analyzed cell is exponential ,

â¢ the distribution of fus3pp around the nucleus reaches its maximum in the point closest to the shmoo tip ,

â¢ the average fus3pp signal in the nucleus is  <dig>  , which is â 25% of the maximal signal measured in the image,

â¢ the average fus3pp signal in the cytoplasm is  <dig>   ,

â¢ the ratio of averaged fus3pp signal in the cytoplasm to nucleus is equal to  <dig> .

comparative values computed with imagej showed an average fus3pp signal in the nucleus of  <dig>   and an average fus3pp signal in the cytoplasm of  <dig>  , resulting in a ratio of averaged fus3pp signal in the cytoplasm to nucleus of  <dig> . which means the relative error due to approximation  in our example is / <dig>  â 1%.

modeling
the previously acquired, quantified and structured data can be used to create a dynamic model of the fus3pp diffusion. according to the stse dataflow paradigm , the mechanistic model of the studied process needs to be formalized. by focusing on the properties of the fus3pp gradient we can exclude processes such as i) mechanisms of the stimulation of fus <dig> and ii) different mechanisms allowing fus3pp to enter the nucleus. the kinetic model of fus3pp is now defined as follows:

â¢ fus3pp appears in the shmoo tip compartment,

â¢ fus3pp diffuses freely in the cytoplasm compartment,

â¢ fus3pp gets dephosphorylated during the diffusion in the cytoplasm,

â¢ fus3pp is unable to cross the cellular/nuclear membrane compartments.

by applying this kinetic model it is next possible to verify whether or not the qualitative properties of the fus3pp gradient observed in the digitized images can be reproduced. as explained in the background section, stse functionality can be modified and extended by connecting various simulation engines via python. here, for the purpose of simplification, we use a dedicated, explicit simulation, written directly in python. for this purpose the model is translated into a system of differential equations . an equation describing the changes of fus3pp concentration is attributed to each subcompartment.  

where:

â¢ fus3ppi is the concentration of fus3pp in the subcompartment i,

â¢ Î³ fus3pp is the diffusion constant for fus3pp,

â¢ Î±fus3pp is the rate of fus3pp release in the shmoo tip,

â¢ Î²fus3pp is the rate constant of fus3pp dephosphorylation,

â¢ siân is the area of contact surface between subcompartments i and n,

â¢ vi is the volume of subcompartment i,

â¢ i â a /i â b if i belongs to cytoplasm/shmoo tip compartment,

â¢ ni is a set of neighbour subcompartments for subcompartment i,

â¢ ,   <cit> .

to complete the model it is required to define the rate of fus3pp release in the shmoo tip , the rate constant of fus3pp dephosphorylation Î²fus3pp, the diffusion constant Î³fus3pp and the initial conditions. all values can be estimated from the literature or chosen arbitrarily. additionally, initial conditions can be acquired from the digitization step of the image data. an exemplary implementation of the fus3pp model can be downloaded from the project homepage. an animation showing the kinetics of fus3pp distribution obtained with the implemented model is available as additional file  <dig> 

simulations in stse can also be utilized to estimate the values of fus3pp model parameters based on the image data. as an example, the steady state concentrations for two different simulations are presented in figure  <dig> .

a second animation  shows the kinetics of fus3pp evolution. this simulation differs by changing the diffusion constant for fus3pp from  <dig> to  <dig>  for further illustration, figure  <dig> presents the contrast between different initial parameter sets. this difference can be used to discriminate between different parameter sets.

discussion
we present stse, a platform that facilitates execution of spatial simulations based on microscopy images. the application of the stse is demonstrated on the example of the yeast pheromone map kinase cascade, focusing in particular on the distribution of the double-phosphorylated fus <dig> 

we demonstrate how to quantify the ratio of the average cytoplasm/nucleus expression of fus3pp based on fluorescence signal intensity acquired from microscopy images, create gradient curves for fus3pp along the x-axis of the cell and around the nucleus, and simulate the process of fus3pp diffusion in the cytoplasm to determine the underlying mechanism.

the result of the simulations allow us to confirm that a set of hypothesis used in the model allows us to reproduce the experimental observations. we demonstrate also how to use the stse to discriminate between model parameter sets.

the running example model yields the highest error in the nuclear compartment. this is consistent with our expectations: the test data set images suggest that fus3pp is present in the nuclear compartment , but in the specification of the model we skipped the mechanism of fus3pp transport via membranes, which results in the fus3pp concentration in the nuclear compartment being equal to  <dig>  to correct this property, the model should be extended by an assumption of fus3pp transport via the nuclear membrane.

in the additional file  <dig> stse modules are also compared with a selection of other available software tools which allow to perform each of the workflow substeps separately i.e. digitization, representation, analysis or modeling.

results from stse are confronted with results achieved by the use of the software imagej. both tools allow for computing the ratio between the fus3pp signal in the cytoplasm and the nucleus. although stse uses the approximation with subcompartments  the approximation error in this example is below 1%. likewise, the exponential decrease of fus3pp along the cell center as well as the increase in the nucleus can be captured reasonably well with both tools. nevertheless, if one is interested in the distribution of fus3pp over the whole cell, there is no constitutive way to do so in imagej . furthermore, in stse it is possible to plot various profiles for any selected subcompartments.

in imagej basic analysis is performed via the gui, but an extensive analysis again requires the usage of macros, plugins or scripts . stse requires using python in both basic and extensive analysis. in the latter case the automatization of tasks via python allows for faster implementation.

binary masks can be used for automatization in stse. the choice of the segmentation algorithm to generate those binary masks depends highly on the particular problem and there already exist a multitude of advanced software packages dedicated to this task. therefore in the current version of the stse we decided to use already segmented images as the starting point of the proposed workflow and leave the choice of the optimal segmentation method to the user.

stse conceptually differs from selection-based tools by operating on abstract subcompartments rather than on pixels directly. this approach results in the simplification of further processing and it allows for inhomogenous precision in different cellular compartments.

the precision is regulated in stse by decreasing the subcompartment size. however, the increase in precision induces slower execution of the modeling routines. it is the modeler's choice to prepare the grid in such a way that both, the precision and speed of modeling routines is optimal. also it should be kept in mind that, by using larger subcompartments, the assumption of homogeneously distributed molecules within one subcompartment might be disregarded.

in the additional file  <dig> we also compare stse with a selected simulation engine, mesord  <cit> , and discuss the main differences, pros and cons. it is important to understand that the scopes of these softwares are different: mesord is a mesoscopic, stochastic simulation engine, whereas stse covers much broader area, but it does not provide a sophisticated simulation engine as such. our future goal is to provide integration of stse with a selection of existing simulation software. this would allow users to use state-of-the-art solutions for simulation, keeping the ease of validating the models with microscopy data, as demonstrated in our example.

CONCLUSIONS
stse is a software platform, designed for constructing microscopy image-based simulations. it allows for an uninterrupted workflow including digitization, representation, analysis, and mathematical modeling. the main benefit of stse is that it acts as a "glue" between different steps of the workflow, allowing the user to tailor the platform to their specific needs. due to its open, modular architecture and integration of python language, the software allows for full automatization  via scripts, which is usually not possible or very limited with other stand alone applications.

further versions of the stse should provide integration of selected 3rd party simulators and simulation paradigms . it would be also crucial to support import and export of sbml  files. for the latter, a prior establishment of a standard for spatial modeling would be required. we strongly encourage the community to provide examples of various microscopy based simulation workflows, which we would be glad to integrate into stse framework.

availability and requirements
project name: stse

project home page: http://stse-software.org

operating system: linux 

programming language: python

other requirements: openalea http://openalea.gforge.inria.fr/, mayavi <dig> http://code.enthought.com/projects/mayavi/, qhull http://www.qhull.org/, networkx http://networkx.lanl.gov/. it is also possible to use the software directly from a live dvd linux distribution, sb.os http://www.sbos.eu/, which comes with a comprehensive list of other systems biology software.

license: gnu gpl

authors' contributions
ss is the main developer of stse. mf, sg, ss, ek wrote the article. mf, sg, ss applied the stse workflow to the example described in the results and performed comparative studies of stse and other state-of-the-art tools. all authors read and approved the final manuscript.

supplementary material
additional file 1
detailed description of a use case, including all individual steps of the stse workflow with examples as well as comparative studies with state-of-the-art tools.

click here for file

 additional file 2
animation showing the dynamics of the exemplary system described in the additional file  <dig> 

click here for file

 additional file 3
animation showing the dynamics of the exemplary system described in the additional file  <dig> 

click here for file

 acknowledgements
the authors thank jan traas and christophe godin for early support of stse development . we would like to thank marta hoffman-sommer for the proof reading of the manuscript. this work was supported by the marie curie research training network aquaglyceroporins , the german ministry for eduction and research , the german research foundation  and by the swiss hp2c-initiative "swiss platform for high-performance and high-productivity computing".
