BACKGROUND
deoxyribonucleic acid  has the remarkable ability of specific molecular recognition with regard to its sequence of the nucleic bases adenine , thymine , guanine  and cytosine . this sequence recognition is based on the watson-crick base pairing of complementary bases a-t and g-c
 <cit> .

however, in mixtures of many different dna strands in solution or on surfaces a correct hybridization is crucial for most applications referring to genetics, dna nanotechnology, dna origami, and dna computing
 <cit> . cross hybridizations have to be minimized by controlling the uniqueness of all possible subsequence motifs in the set of used sequences. additionally, specific care has to be taken with regard to secondary structures that can occur by folding due to intrastrand interactions. hairpin structures reduce the hybridization efficiency, the binding rates, and thus, the detection limits on dna microarrays
 <cit> .

here we describe the exhaustive dna sequence design algorithm egnas . this algorithm is realized in a c++ program and is used to generate sequences with controlled intra- and interstrand properties. egnas is compared with previous tools. data from selected publications are reanalyzed by applying egnas to proof the viability of this new algorithm.

implementation
we realized the sequence design algorithm egnas in a program written in c++. it is currently a command line program that was compiled by gnu compiler collection for linux, mac os x and microsoft windows operating systems. egnas is freely available for noncommercial use at
http://www.chm.tu-dresden.de/pc6/egnas. a manual and the first version of egnas are attached as additional files [see additional files
 <dig> 
 <dig> 
 <dig> and
4].

for comparison of computing time, sequence generations were performed on one and the same computer system with intelⓇcoretm i <dig> cpu  <dig>  ghz and  <dig> gb ram. the operating system was a 32-bit ubuntu  <dig>  . the intra- and interstrand properties were verified by the analysis option of the software seed <cit> .

RESULTS
previous software and algorithms
numerous strategies for the dna sequence design are described in literature
 <cit> . we do not intend to analyze all algorithms, but we evaluate our results directly by comparing with previously published data. brenneman and codon gave a brief overview to the topic of strand design
 <cit> . to our best knowledge, so far, there is no software tool available offering the possibility to design oligonucleotide sequences with adequate consideration of intra- and interstrand interactions. furthermore, a maximum set size of generated sequences is desirable for microarrays or dna strands used as tags for addressing a high number of different targets.

sets of sequences with defined properties can be achieved with the program seed developed by seiffert et al.
 <cit> , as well as with the software tools dnasequencegenerator and canada by feldkamp et al.
 <cit> . these programs are freely available, work efficiently, provide satisfactory set sizes and meet the criteria of uniqueness among all sequences of a set concerning interstrand properties. however, it is difficult to achieve a big set size with these tools and concurrently to control intrastrand properties. it is hardly possible to avoid at the same time self-complementary subsequences, stem-loop structures and repetitions within one and the same strand, as these intrastrand properties can not be defined separately from the interstrand properties.

both seiffert and feldkamp use the criton concept introduced by seeman <cit> . critons are all lc bases long overlapping parts of a sequence strand. their complements are termed anti-critons. based on the criton rules, strands are generated consisting of unique basic sequences. there are
4lc critons and anti-critons. this fact limits the maximum possible number of valid sequences ns with the length of ls bases. every sequence consists of  overlapping segments. to obey the criton rules, every basic sequence is used only once in the whole set and its complement is not allowed. if lc is even, one half of all possible sequences is complementary to the other half, and ns can be estimated using 

  ns=4lc <dig>  

if lc is odd, the maximum set size is estimated applying equation , because there are
4lc <dig> self-complementary basic sequences that are not allowed. 

  ns=4lc−4lc <dig> 

further limitations result from restrictions with respect to the guanine-cytosine content  and forbidden sequence motifs defined by the user.

a novel sequence design algorithm
sequence design criteria and options
the sequence design algorithm egnas offers the user different options. consequently, the generated sequences meet certain criteria: 

 <dig>  sequence length ls.

 <dig>  length of basic sequences  lc.

 <dig>  exact gc content or its range.

 <dig>  no terminal adenine or thymine in the strand./the demand on “gc ends”.

 <dig>  forbidden sequences./included sequences.

 <dig>  length of forbidden self-complementary subsequences lsc.

 <dig>  forbidden stem length of hairpin structures lhp.

 <dig>  length of subsequences that are not allowed to be repeated within one and the same sequence  lsl.

 <dig>  forbidden length of subsequences that could interact with complementary neighboring sequences lni.

the egnas software provides the option to calculate the molar free enthalpy of dna duplex formation. this calculation is based on the nearest-neighbor model
 <cit>  with parameters taken from santalucia et al.
 <cit> . marky et al. investigated the helix-to-coil transition and described the “fraying” of a dna double strand at the terminal t-a base pairs
 <cit> . in the nearest-neighbor model, santalucia et al. assigned a penalty of  <dig>  kcal/mol for strands with a thymine base at the 5’ end
 <cit> . thus, with egnas it is possible to generate sequences that do not contain terminal adenine or thymine. the risk of fraying in the designed dna strands can be reduced by only allowing guanine or cytosine at the terminal strand positions. we refer to this option as the demand on “gc ends”.

guanine-rich motifs in dna can form parallel four-stranded complexes
 <cit> . furthermore, it is known that telomeric ends of eukaryotic chromosomes contain guanine-rich overhangs and form intra- and intermolecular structures
 <cit> . therefore, the subsequences “ggg” or “ccc” are often forbidden in dna strand design to circumvent the formation of guanine tetrads between hairpins.

homopolymeric runs of adenine or thymine are unwanted for certain applications requiring dna polymerization. this process depends on the fidelity of dna polymerases, which is influenced by the strand sequence that should be replicated. the repeat of one and the same base in the sequence can lead to error-prone replication through template-primer slippage
 <cit> . therefore, adenine or thymine runs, starting from four repeats, are preferentially forbidden for the sequence design. forbidden sequences or subsequence motifs are specified by listing each of them in a set that is denoted further on in curly brackets. for instance, if both subsequences “ggg” and “ccc” are not allowed, the set containing the forbidden elements will be {ggg;ccc}.

intrastrand properties
egnas offers novel options concerning the intrastrand properties. these are essential prerequisites to avoid secondary structures due to self-complementary sequences and hairpin formation. in contrast to the criton concept
 <cit> , as applied by seiffert et al.
 <cit>  and feldkamp et al.
 <cit> , the novel algorithm treats intrastrand properties separately. below, we define the used terms and describe these properties.

hairpins and self-complementarity
hairpin structures are also called stem-and-loop structures. they consist of two complementary arm sequences and the loop sequence. the arm sequences are able to form the double-stranded stem while being connected by the single-stranded loop sequence. self-complementarity is treated as a special case of a hairpin when the loop size is zero. therefore, a self-complementary sequence has always an odd number of bases. if hairpin structures with a lhp bases long stem are forbidden, self-complementary subsequences that are equal to or longer than 2lhp bases will consequentially be omitted.

sliding
we use the term “sliding” for an intrastrand property of a sequence. sliding denotes that a subsequence can be found several times at different positions of one and the same strand. if a complementary strand hybridizes with such a strand, different positions will be possible. thus, sliding between the hybridizing strands would take place. for example, the sequence pair in figure
 <dig> allows sliding due to the repetition of  <dig> bases long subsequences .

interaction with the neighboring sequences
if primers are paired with tags, a special criterion for the tag sequences will arise. in this case, primer foldback can become a problem. for example, the formation of hairpins will cause signals in single-base extension  reactions even lacking a template.

in the literature different approaches are given for the primer-tag pairing. those methods work with sets of previously found tags. hirschhorn et al. suggested the calculation of an empirical foldback score
 <cit> . accordingly, if a foldback score is greater than a threshold value, the sbe primer will be paired with another tag. kaderali et al. used a free energy alignment algorithm for primer-tag pairing
 <cit> .

we limit the interaction with neighboring strands already during the sequence generation. therefore, all possible lni bases long complementary subsequences of a neighboring strand are forbidden for the generation of the corresponding tag. this is especially intended for designing strands where a molecular spacer is located between the neighboring sequence and the tag. for example, such a spacer could be a hexaethylene glycol moiety
 <cit> . actually, overlapping subsequences, which would evolve through directly attaching one neighboring sequence to either the 3’ or 5’ end of a tag, are not considered. nevertheless, in section “combination of tags with primers” we show that even if tags are attached to neighboring sequences without an intended spacer, hairpin formation will still be diminished significantly.

description of the exhaustive design algorithm
in the following section we describe, how egnas provides a set of valid sequences. a simplified flowchart of the underlying algorithm is given in figure
 <dig>  initially, all lc bases long subsequences in the included and neighboring sequences are read out and saved together with their complements as forbidden sequences. the included and neighboring sequences are predefined by the user, meaning that lc bases long cross-hybridizations are not allowed to occur between one of them and any of the generated sequences. subsequently, all possible basic sequences with the length lc are generated in such a way that they obey the criteria specified by the user. thereafter, a string is formed stepwise from left to right by randomly combining allowed basic sequences. if the sequence length is not divisible by the criton length, additional basic sequences of the remainder length will be generated and used for the termination of the sequence design. after each step, the growing sequence is checked against the criteria chosen by the user.

after trying all of the valid basic sequences as suffixes, there can still be combinations of basic sequences that do not allow appending of any remaining basic sequence, because the forming strings do not meet at least one of the necessary criteria. in such a case, this combination is forbidden to occur at the beginning of a string. thus, a new trail will skip the basic sequences leading to the forbidden ones.

a sequence will be saved, if it has the defined length and meets all criteria. every lc bases long subsequence and its complement within this generated strand are forbidden and removed from the list of basic sequences. then, the next sequence generation starts by the analog combination of the remaining basic sequences.

if all basic sequences are either forbidden or used, the sequence generation of the current set will be finished. furthermore, the user can force every set to be complete. namely, no additional sequences exist with the same user-defined restrictions of the set. the generation of a complete set is at the expense of computing time. hence, limiting the maximum number of generated sequences can reduce the computing time significantly.

software comparison and performance tests
global criton rules and intrastrand properties
in order to compare the novel algorithm with other available software tools, it was necessary to distinguish between two different settings of options for the sequence generation. on the one hand, the preassigned criton rules in section “intrastrand properties” are valid for the whole set of generated sequences. this holds for seed <cit> , canada <cit>  and dnasequencegenerator <cit> . in this cases, we refer to “global criton rules”. it means for the intrastrand properties , the maximum number of sequences is  <dig>  with  <dig> sequences a yield of 94% could be achieved where no restrictions were set or only the gc content was forced to be 50%. these are high set sizes in relation to other calculations performed by feldkamp <cit>  and those that are presented in table
 <dig> 

set sizes dependent on sequence and criton length for global criton rules. averages ± standard deviations from  <dig> sets. the maximum possible set size in parentheses.

influence of the criton and sequence length on the set size
table
 <dig> shows the dependence of the set size from the combination of sequence and criton length. for each of the  <dig> combinations,  <dig> sets were calculated with lc for global criton rules. in accordance with equations  and , the set sizes grow with higher criton length and lower sequence length. of course, the criton length has the highest influence, as it is in the exponent of those equations. feldkamp presented an analog table
 <cit> .

in average, feldkamp generated  <dig>  ±  <dig> % of the maximum possible numbers of sequences per set. our new approach has a slightly higher average yield of  <dig>  ±  <dig> %. in  <dig> of the  <dig> different combinations of criton and sequence lengths, examined in table
 <dig>  set sizes equal to or higher than those of feldkamp’s tool were calculated with egnas.

variation of the set size
another interesting issue of sequence sets is, how their sizes will be distributed, if the same options are chosen for multiple sequence generations. figure
 <dig> compares the results of feldkamp’s
 <cit>  and of our software. the combination of lc =  <dig> and  <dig> bases long sequences was chosen for global criton rules. feldkamp generated  <dig> sets with these settings. however, we evaluated  <dig>  sets to gain a higher confidence level. the most of feldkamp’s sets have  <dig> sequences, whereas the most of our completed sets contain  <dig> sequences. in both cases, these set sizes appear with a relative frequency of about 30%.

sliding and its influence on the set size
within one and same strand, egnas can control the repetition of subsequences of a certain length. as an example, we generated sets of sequences with lc =  <dig> for global criton rules but with varying lsl. the results of this calculations are shown in figure
 <dig>  for lsl =  <dig>  the global criton rules are valid, and in average,  <dig>  ±  <dig>  sequences are generated. significant reduction of the set size to  <dig>  ±  <dig>  sequences is observable for lsl =  <dig>  this is because the decrease of lsl reduces the number of usable basic sequences. a considerable increase of the set size to  <dig>  ±  <dig>  sequences is obtained by setting lsl =  <dig>  in this case, lsl is large enough to allow the repetition of one basic sequence. thus, for a complete strand, less basic sequences are used, and consequently, more usable basic sequences are left for the generation of further strands.

controlling intrastrand properties
self-complementarity and hairpins are the major reasons for the formation of secondary structures. such structure formation competes against the hybridization with target dna strands. hence, a fast and sensitive detection on microarrays is hindered by secondary structures
 <cit> . accordingly, we generated sequences not only with minimum criton length lc for a global criton rule but we also prevented self-complementarity and the risk of hairpin formation. the dinamelt web server was used to estimate the stability of secondary structures
 <cit>  ). the stabilities were calculated as the molar free enthalpies  of the most stable hairpins at 37°c and  <dig> mol/l sodium ions.

feldkamp et al. had generated  <dig> bases long sequences with the uniqueness lc =  <dig> and chose sequences with the most unstable secondary structures afterwards
 <cit> . in table
 <dig> the generated sequences of feldkamp et al. and our program are shown to compare the stabilities of possible secondary structures. hairpins could be avoided by choosing lhp =  <dig>  even so, enough sequences could be generated to compete with feldkamp’s sequence set. feldkamp’s software tool is not able to treat intrastrand properties separately. for instance, a stem length of  <dig> bases can be found in sequence no.  <dig> .

comparison with feldkamp et al.
 <cit> . comparison of  <dig> bases long sequences generated by feldkamp et al.
 <cit>  and with egnas. the subsequences {ggg;ccc} were forbidden. gc ends were demanded. molar free enthalpies of the most stable hairpins.

*no hairpin structure possible.

the restriction of lhp will improve sequence quality significantly, if no strand folding is desired. however, smaller values for lhp result in smaller set sizes. calculations of  <dig> sets were performed with varying lhp and lc = lsc = lsl =  <dig> for  <dig> bases long sequences. a clear reduction of the set size can be found from  <dig>  ±  <dig>   to  <dig>  ±  <dig>  . for lhp =  <dig>  the set size is  <dig>  ±  <dig>  and not greater than the set sizes with lhp =  <dig> or  <dig> 

further examples for preventing hairpins are given in tables
 <dig> 
 <dig> and
 <dig>  tanaka et al.
 <cit>  and feldkamp et al.
 <cit>  published sets of  <dig> bases long sequences that we compare with our results with respect to the stabilities of hairpin structures . sequences with lower stabilities of hairpins were designed by applying egnas. additionally, the set size could be increased from  <dig> to  <dig> sequences.

comparison with tanaka et al.
 <cit> feldkamp et al.
 <cit> . comparison of  <dig> bases long sequences generated by tanaka et al.
 <cit> , feldkamp et al.
 <cit>  and egnas. molar free enthalpies of the most stable hairpins.

*no hairpin structure possible.

#without {ggg;ccc}.

§without {ggg;ccc;aaaa;tttt}.

comparison of  <dig> and  <dig> bases long sequences generated by arita et al.
 <cit> , feldkamp et al.
 <cit>  and egnas. molar free enthalpies of the most stable hairpins.

*no hairpin structure possible.

#without {ggg;ccc}.

§without {ggg;ccc;aaaa;tttt}. for all sequences computed by egnas no possible hairpin structures could be found.

comparison of  <dig> bases long sequences generated by faulhammer et al.
 <cit> , feldkamp et al.
 <cit>  and egnas. molar free enthalpies of the most stable hairpins.

*no hairpin structure possible.

#without {ggg;ccc}.

calculations with included sequences
another useful feature of a sequence design algorithm is the possibility to include already existing sequences into the calculations. as a result, the cross hybridization of newly formed sequences with the included strands is controllable. the egnas user may include naturally occurring sequences of genomic dna, plasmids, cloning vectors, primers or previously designed sets of sequences with certain properties. for instance, we performed stepwise generation of sequences shown in table
 <dig>  in the first step nine  <dig> bases long sequences were found. these sequences were included in the second run to design four additional  <dig> bases long sequences. with egnas, one more  <dig> bases long sequence was generated in comparison to sequences suggested by arita et al.
 <cit>  and feldkamp et al.
 <cit> . this was possible in spite of extra restrictions according to gc ends and secondary structure. possible hairpin structures could be completely eliminated in these computations.

the optimization of sequences is also possible with a different stepwise strategy. here we first start with strong restrictions on sequence properties and weaken them until the desired set size is achieved.

accordingly, the maximum stem length of hairpins were first limited to one base pair by setting lhp =  <dig>  a set size of maximum  <dig> sequences was possible with this restriction. finally, in the next sequence generation hairpins with stem length of  <dig> base pairs were allowed by setting lhp =  <dig> and guanine was forbidden. through higher lhp, more variability of sequences is possible. nevertheless, by forbidding guanine, there are only stem structures possible consisting of two consecutive adenine/thymine base pairs. these structures are less stable than those comprising guanine/cytosine base pairs. therefore, other authors presented design algorithms that only use {atc} for the sequence generation, and this aims to minimize the risk of hairpin formation
 <cit> . in practice, this concept was realized for the tag/anti-tag system offered by luminexⓇ <cit> . for our calculations, the  <dig> previously generated sequences were included in order to expand the sequence set. consequently, six further sequences could be generated. the result of this approach is shown in table
 <dig>  it depicts a comparison between sets of  <dig> bases long sequences generated by faulhammer et al.
 <cit> , feldkamp et al.
 <cit>  and egnas. egnas offers better sequences with respect to secondary structures, as the minimum molar free enthalpies of the most stable hairpin structures are - <dig> ,  <dig>  and  <dig>  kcal/mol for feldkamp et al., faulhammer et al. and egnas, respectively. comparing the criton length lc =  <dig> and the gc content of 40%, there is no improvement versus feldkamp’s sequences. but a significant reduction of the secondary structure stabilities is evident, since the forbidden stem length was reduced from lhp =  <dig> to lhp =  <dig>  moreover, in contrast to feldkamp’s sequences, only gc ends were allowed. in spite of this further restriction, an equal set size was achieved.

balancing cross hybridization, sliding and hairpins
we investigated further advantages of discriminating between global criton rules and intrastrand properties. the results are summarized in table
 <dig>  the generated sequences are compared with those of shin et al.
 <cit>  and of feldkamp et al.
 <cit> . there are only seven  <dig> bases long sequences in one set. we show that the user of egnas can balance intra- and interstrand properties to achieve a required set size.

comparison of  <dig> bases long sequences generated by shin et al.
 <cit> , feldkamp et al.
 <cit>  and egnas. molar free enthalpies of the most stable hairpins.

*no hairpin structure possible.

#without {ggg;ccc;aaaa;tttt}.

because with lc =  <dig>  lhp =  <dig> and lsl =  <dig>  the set sizes clearly extended seven sequences, sliding could be decreased to lsl =  <dig> and even only gc ends were allowed for the first set. for the second set of sequences, we raised lsl from  <dig> to  <dig>  lhp from  <dig> to  <dig> and lowered the criton length lc from  <dig> to  <dig>  consequently, we have to accept sliding of  <dig> bases long subsequences. additionally, adenine or thymine had to be allowed as terminal bases to generate seven sequences. indeed, this is against the global criton rule with lc =  <dig>  however, no cross hybridization between different strands would take place with  <dig> bases long subsequences.

in both of our sets, the formation of hairpins is less probable then in the sets published by shin et al.
 <cit>  and by feldkamp et al.
 <cit> .

computing time
in this section we demonstrate that the sequence generation lasts only a few seconds, if the user limits the set size reasonably. to this aim,  <dig> sets of  <dig> bases long sequences were generated for each set size with lc =  <dig> for a global criton rule. we varied the maximum number of sequences to be generated starting from  <dig>  the highest defined set size was  <dig> sequences, since we know from calculations concerning the set size distribution that this is the minimum set size that could be generated for a complete set.

after the defined set size had been achieved, the sequence generation stopped and the computing time was saved. insisting on the completeness of a set leads to considerable increase of the computing time from a few seconds  to approximately one minute . nevertheless, this is still in reasonable computing time for a complete set size. actually, the computing time grows considerably with lc. the generation of a complete set with lc ≥  <dig> can last hours, as the number of basic sequences also grows exponentially with lc and ).

combination of tags with primers
genotyping of single nucleotide polymorphisms  is one example for a particular application of sbe reactions . this technique, as described by fan et al., requires sbe-tag primers
 <cit> . marker-specific polymerase chain reaction  primers are needed for the amplification of snpcontaining regions. thereafter, the pcr products are used as templates for the sbe reaction with sbe-tag primers. the 3’ ends of these primers are complementary to the specifically flanking regions of the snp loci and the 5’ ends are complementary to specific probes on an array. the generation of suitable sbe-tags was performed with the egnas algorithm. in this case, the tag sequences were generated with respect to minimal interaction with the neighboring snp flanking sequence. consequently, no  <dig> bases long subsequences were complementary between one snp flanking sequence and its corresponding tag sequence . the primers and snp flanking sequences were taken from fan et al.
 <cit>  to generate  <dig> tags that were  <dig> bases long with lc =  <dig>  lsl =  <dig>  lhp =  <dig> and gc content 50%. the subsequences {ggg;ccc;aaaaa;ttttt} were forbidden and gc ends were demanded. forward and reverse primers as well as the flanking regions of the snps were chosen as included sequences. thus, no cross hybridizations with  <dig> bases long subsequences occur among the tags and included sequences, secondary structures were avoided within the tags and foldback due to interactions with snp flanking sequences were minimized.

we generated tags without stable hairpins  by using egnas. in contrast, the tags presented by fan et al. show one very stable hairpin with a stem length of  <dig> base pairs . moreover, with regard to foldbacks, the tag-primer pairing with egnas is better  than presented by fan et al.  for  <dig> sbe-tag primers. the advantages of egnas become also apparent by comparing the uniqueness of the tag sequences. fan et al. used tags with lc =  <dig> and egnas provided tags with lc =  <dig>  thus, the quality of the tags can be evaluated by the values of lhp, lni and lc, when hairpins, tag-primer pairing and cross hybridization are in the focus, respectively. corresponding results are shown in tables
 <dig> and
 <dig>  all tags and primer sequences as well as the molar free enthalpies of the most stable hairpins are given in additional files [see additional file
 <dig> and additional file
6].

comparison of tags used by fan et al.
 <cit>  and those generated by egnas. intra- and interstrand properties. molar free enthalpies  of the most stable hairpins. averages ± standard deviations from  <dig> sequences.

*gc ends and without {ggg;ccc;aaaaa;ttttt}.

tags for staple strands of dna origami
self-assembled structures are fundamental in the field of nanotechnology. dna allows the assembly of programmable building blocks. one promising method to control and organize functional materials is based on dna origami
 <cit> . the underlying concept requires an accurate design of dna sequences. a spatially precise functionalization is accessible through the unique addressability of dna origami on the nanometer scale. the dna origami scaffold is a long single strand of dna, which is folded by hundreds of short synthetic oligonucleotides called staple strands. the staple strands are designed to bind several desired parts of the scaffold, and thus, to connect otherwise distant sites of this long single-stranded dna. rothemund presented a variety of different shapes based on this concept
 <cit> .

there is software available for the design of 3d dna origami shapes, for instance the cadnano software
 <cit> . however, we show that egnas will be useful to find proper sequences, if staple strands have to be extended by anti-tags that stay single-stranded during origami formation. these anti-tags are used as sticky ends or capture probes to bind the tags of dna-modified nanoparticles or peptide-dna conjugates to a given dna origami structure. in the following, we examine two examples with single-stranded circular m13mp <dig> viral dna as scaffold. its sequence
 <cit>  was included in the calculations below.

sticky ends for triangular dna origami
in the work of ding et al., triangular dna origami is used for the assembly of six gold nanoparticles through dna hybridization 
 <cit> . the particles have sizes of either  <dig>   <dig> or  <dig> nm. each particle is captured by three probes on the dna origami with the m13mp <dig> dna as a scaffold. to this aim,  <dig> staple strands are modified with  <dig> bases long sticky ends . ding et al. designed four different tag sequences to label the  <dig> and  <dig> nm gold particles each with one sequences, and to modify two differently labeled  <dig> nm particles.

comparison of sbe-tags used by fan et al.
 <cit>  and those generated by egnas. molar free enthalpies  of the most stable hairpins. averages ± standard deviations from  <dig> sequences.

comparison of sequences that were generated by using egnas, and those used by ding et al.
 <cit>  or stearns et al.
 <cit>  to modify staple strands of triangular dna origami or six-helix bundle nanotubes, respectively. molar free enthalpies  of the most stable hairpins. averages ± standard deviations.

we analyzed possible cross hybridization of the sticky ends with the staple strands and with the scaffold. as a result, the  <dig> bases long sequence 5’-gaatcctga-3’ is identical in the staple strand “c28” and in the tag “s5a” of the  <dig> nm gold nanoparticles. this could result in a cross hybridization of three modified staple strands with the unmodified “c28” strand. there are also numerous  <dig> and  <dig> bases long sequences that could cause cross hybridizations with the scaffold strand. additionally, we found possible hairpin structures with a  <dig> base pairs long stem  in the sequences of the tag “s5b” and the corresponding anti-tag. hairpin structures lower the hybridization efficiency of the tags and anti-tags. this could be one explanation for missing  <dig> nm particles on the dna origami. actually, ding et al. mentioned this problem when only two sticky ends per particle were used.

we tried to improve the sequences of the sticky ends by applying egnas. to this aim, we included the scaffold and all staple strand sequences in the calculations. more precisely, we chose lc =  <dig>  and thus, avoided cross hybridizations with more than  <dig> consecutive base pairs of the sticky ends with the modified and unmodified staple strands, as well as with the scaffold. secondary structures were evaded by setting lhp =  <dig>  we generated the sticky ends stepwise and included the previously designed sequences of the modified staple strands for the design of the next sticky end. furthermore, all  <dig> bases long sequences that were partly complementary to the neighboring staple strands were forbidden for the current generation of the corresponding sticky end . the risk of foldbacks is minimized by that procedure.

consequently, the sequences used by ding et al. to modify staple strands exhibit the possibility of more stable cross hybridizations and secondary structures compared with sequences that were generated with egnas . the sequences of staple strands before and after modification as well as their molar free enthalpies of the most stable hairpins are given in an additional file [see additional file
7].

capture probes for six-helix bundle nanotubes
stearns et al. tried to organize a peptide-dna conjugate on a six-helix bundle forming dna origami 
 <cit> . the peptide a <dig> was used for in situ nucleation and growth of gold nanoparticles, as it recognizes gold surfaces and reduces soluble gold ions. only one sequence for capture probes was used to modify  <dig> staple strands to fold the m13mp <dig> dna as a scaffold. again, we analyzed the cross hybridization of the probe sequence with the staple strands and with the scaffold. only one  <dig> base pairs long possible cross hybridization with the sequence 5’-gccgttga-3’ of the staple strand “70” with the peptide-dna conjugate was found. there are possible hairpin structures with a  <dig> base pairs long stem  in the probe sequences. furthermore, foldback structures are possible through  <dig> bases long complementary subsequences  of the probe and the staple strand “122”.

here, we optimized the probe sequence with equal parameters like presented above for the sticky ends for triangular dna origami. as a result, to avoid secondary structures, the sequences that were generated by using egnas are more suitable to capture the peptide-dna conjugate compared with those used by stearns et al. to modify the staple strands . sequences of staple strands before and after modification as well as their molar free enthalpies of the most stable hairpins are given in an additional file [see additional file
8]. stearns et al. reported that the particles were not organized in the designed  <dig> nm intervals. hence, the peptide was probably immobilized not efficiently enough. hairpin formation of the probe and foldback with the staple strands might be the reasons for the low density of nanoparticles on the dna origami.

CONCLUSIONS
we developed a new software tool called egnas for the design of unique nucleic acid sequences. sets of sequences with defined intra- and interstrand properties can be generated in reasonable computing time. a maximum set size with given constraints can be achieved. the presented exhaustive algorithm allows to generate greater sets of sequences than with previous software and equal constraints.

in the present stage, the developed program is suitable for generating sequences for dna-tags avoiding secondary structures and cross hybridizations. furthermore, predefined sequences can be taken into consideration. this is in principle useful for applications where no interaction of tags with template strands is desired. the offered option of tag-primer pairing with regard to minimal foldback facilitates the generation of tag sequences for multiplexed genotyping of snps. this kind of genotyping can be performed with pcr and sbe reactions on microarrays or bead surfaces. additionally, egnas affords the computer aided design of sequences for specific attachment of molecular constructs to dna origami. in further development the novel algorithm could be optimized to efficiently include large gene sequences. an extension of egnas to design branched structures like nucleic acid junctions is possible.

availability and requirements
project name: egnas

project home page:http://www.chm.tu-dresden.de/pc6/egnas

operating systems:linux, mac os x, and microsoft windows

programming language: c++

other requirements: none

license: free for noncommercial use

any restrictions to use by nonacademics: license needed

abbreviations
egnas: exhaustive generation of nucleic acid sequences; dna: deoxyribonucleic acid; a: adenine; t: thymine; g: guanine; c: cytosine; gc: content, guanine-cytosine content; sbe: single-base extension; snp: single nucleotide polymorphism; pcr: polymerase chain reaction; ddutp: dideoxyuridine triphosphate; ddctp: dideoxycytosine triphosphate.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ak conceived the algorithm, performed the calculations and drafted the manuscript. mb participated in developing the algorithm and wrote the software program in c++. mm helped to draft the manuscript and revised it critically. all authors read and approved the final manuscript.

supplementary material
additional file 1
manual for the use of egnas. this doc file contains the manual for the use of egnas. the sequence design criteria and options are explained
 <cit> .

click here for file

 additional file 2
executable file for linux operating systems. this zip file contains the executable file of egnas for linux operating systems.

click here for file

 additional file 3
executable file for mac os x operating systems. this zip file contains the executable file of egnas for mac os x operating systems.

click here for file

 additional file 4
executable file for microsoft windows operating systems. this zip file contains the executable file of egnas for microsoft windows operating systems.

click here for file

 additional file 5
sbe-tags and primer sequences. this microsoft office excel  <dig> sheet contains sbe-tags and primer sequences as well as the molar free enthalpies of the most stable hairpins.

click here for file

 additional file 6
snps and pcr primer sequences. this microsoft office excel  <dig> sheet contains snps and pcr primer sequences as well as the molar free enthalpies of the most stable hairpins.

click here for file

 additional file 7
sequences for triangular dna origami. this microsoft office excel  <dig> sheet contains the sticky end sequences for triangular dna origami. the sequences of staple strands are shown before and after modification. their molar free enthalpies of the most stable hairpins are presented.

click here for file

 additional file 8
sequences for dna origami forming six-helix bundle nanotubes. this microsoft office excel  <dig> sheet contains the capture probe sequences for dna origami forming six-helix bundle nanotubes. the sequences of staple strands are shown before and after modification. their molar free enthalpies of the most stable hairpins are presented.

click here for file

 acknowledgements
this work was financially supported by the deutsche forschungsgemeinschaft  and the sächsische aufbaubank .
