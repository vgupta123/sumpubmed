BACKGROUND

in silico prediction of drug target interactions  refers to an automated search for potential interactions between chemicals and proteins. dti prediction plays an integral role in drug repositioning, i.e., in the discovery of new uses for existing drugs. candidates for drug repositioning have typically undergone several stages of clinical development and therefore have well-known safety and pharmacokinetic profiles. this allows accelerating pharmaceutical research and development without increasing the risk of failed developments  <cit> . drug repositioning can be facilitated through dti prediction that discovers likely interactions between chemicals and proteins, allowing researchers to identify potential new uses of drugs. for example, the drug duloxetine was originally developed for depression. it works by blocking the reuptake of serotonin and noradrenaline in the synaptic cleft. however, serotonin and noradrenaline also exert an excitatory effect on urethral sphincter motor neurons, protecting against urine leakage. therefore, duloxetine was repositioned to stress urinary incontinence treatment which was proven effective in clinical trials. another successful case of drug repositioning is dapoxetine, which was developed to cure analgesia but was later used for premature ejaculation.

many social, biological and information systems can be represented in the form of networks, where nodes represent concepts such as individuals, chemicals, proteins and web users, and edges represent the interactions or relationships between the nodes  <cit> . in a dti network, we have a bipartite graph, with drugs and targets forming two disjoint sets of nodes and the interactions between the drugs and targets forming the edges. such complex networks are assumed to exhibit organising principles that should be contained partially in the network topology. this has led to the birth of network analysis, whereby researchers try to develop tools and measurements to discover the latent organising principles of complex networks.

one important aspect of network analysis is link prediction. this involves estimating the likelihood of the existence of a link between two nodes, based on the observed links in the network and the characteristics of nodes and links  <cit> . in our paper, we focus on the application of link prediction to dtis - an emerging approach starting to gain more attention in the past decade . just one recent example is the work of  <cit>  that uncovered the potential interaction between spironolactone and membrane progestin receptor gamma protein, and that has been confirmed in recent clinical studies  <cit> .

most current network-based methods for dti prediction are based on machine learning, such as the work of  <cit>  based on restricted boltzmann machines , and that of  <cit>  based on support vector machines , among others  <cit> . although such methods tend to perform well, they require prior information about the characteristics of proteins and chemicals. for example, the model in  <cit>  uses chemical structure and protein sequence similarity as basis of its classification rules, and the model in  <cit>  produces less satisfactory results when the modes of interaction between chemicals and proteins are unknown. this is problematic because databases containing dtis might only be partly annotated or even unannotated. for example drugbank, one of the largest resources for drugs and proteins, only provides annotations on the targets but not the interactions. the therapeutic target database, on the other hand, does not link targets to protein databases making it difficult to retrieve information such as protein structure  <cit> . moreover, as concluded in  <cit> , dti prediction based on similarity between chemical structures or protein sequences has limitations since its underlying assumption that similar drugs share similar targets is not necessarily true. also, the large portion of so-called “me too” drugs might have made the evaluation of such methods too optimistic.

we therefore propose a new method for dti prediction purely based on dti network topology, without accessing external knowledge other than known dtis, and with a special focus on high precision for top-ranked predictions. it employs similarity indices that have been used for link prediction in various complex networks  <cit> .

two nodes are considered similar if they have common features  <cit> .

we focus on the topological similarity between nodes which is based solely on the network structure  <cit> .

the algorithm we employ is simple to implement. a score s
xy is assigned to each pair of nodes x and y based on the similarity between x and y. all resultant non-observed links are then ranked according to their score and the links connecting more similar nodes have a higher likelihood of existence. while there have been very few recent works on dti prediction purely based on network topology information  <cit> , our work differs from those approaches in that it ranks all candidate drug-target pairs together, instead of ranking predicted drugs for each individual target  <cit>  or providing an unsorted list of novel drug use suggestions  <cit> .

although similarity indices have been used for link prediction in social networks with promising results  <cit> , they have not, to the best of our knowledge, been used to predict links in dti networks. in this paper, we investigate whether the method is applicable to this task. we apply four types of similarity indices to the manually annotated target and drugs online resources  database of dtis  <cit> : common neighbours, jaccard index, preferential attachment and katz index, after first adapting them  to the bipartite nature of the dti network.

while the selected indices look simple, they are demonstrated to be the most robust similarity-based algorithms with superior performance on complex networks  <cit> , and significantly outperform sophisticated machine learning-based approaches  on dti networks when no finer-grained annotation about dti types is available. we demonstrate that when the modes of interaction between drugs and targets are unspecified, common neighbours, jaccard index and katz index have significantly higher precision than rbm for the top  <dig> predicted links. this is important as this provides researchers with more reliable potential dtis for further experimental validation, saving time and money. our new method is preferable in situations where the input dataset does not have a comprehensive coverage of entity/interaction subtypes or entity similarities for all proteins or chemicals. when the input data is partially annotated, it could be used as a powerful complementary method alongside the conventional machine learning -based methods that tend to perform well on annotated datasets.

method
matador database
the manually annotated target and drug online resource  database is a free online database of dtis  <cit> . it includes all modes of interaction between chemicals and proteins, unlike other resources such as drugbank which only includes the main modes of interaction. these modes of interaction between drugs and targets can be direct, indirect, and in some cases, combination of the two.

the matador database, as of april  <dig>  contains a total of  <dig>  dti entries. each entry consists of  <dig> fields. in our work we only use  <dig> of the fields - those that are most relevant for our experiments: 
chemical id: the pubchem compound identifier.

protein id: the protein identifier, either corresponding to genes from string  <dig> database or from medical subject headings 

matador score: a score for the confidence in the interaction.




the chemical and protein ids in each entry of the database are used for forming the dti network. for example, if the chemical id is  <dig> and the protein id  <dig>  we connect node  <dig> in the set of chemicals to node  <dig> in the set of proteins. the matador score allows us to create a weighted version of the dti network.

graph representation of dti network
a dti network can be represented as a graph, where drugs and targets are the nodes and dtis are the edges. this can be represented by g= where v is the set of nodes and e is the set of edges. we can picture a graph by using dots as nodes and lines as edges. a common method to represent a graph is an adjacency matrix. an adjacency matrix is a n×n matrix where n represents the number of nodes in the network and the entries a
ij are given by  <cit> : 
 aij=1if there is an edge betweeniandj0otherwise 


the network edges can also be weighted. in this case, instead of a
ij= <dig> when there is an edge between nodes i and j, we use the weight of the edge instead.

the dti network formed from the matador database is a bipartite graph. this means that the set of nodes v can be partitioned into two disjoint sets u and w whereby each edge in the network links one node from u to another one in w and there are no edges between nodes within u or w. in our case, the two sets of nodes are chemicals and proteins. since there are no interactions within the matador database which depict chemical-chemical interactions or protein-protein interactions, we form a bipartite graph and represent the network in the form of a biadjacency matrix. the creation process is similar to the adjacency matrix except that the matrix is n×m, where n represents the number of nodes in set u and m the number of nodes in set w.

similarity indices
similarity-based algorithms can be considered as the simplest framework for link prediction in networks. as mentioned earlier, they are based on the theory that two nodes are more likely to have a link between them if they share many common features. one of these common features is the common neighbours which they share, which can be calculated solely based on the network structure. this ensures that similarity indices can easily be implemented on networks even when no prior knowledge of the nodes is available. similarity indices can be derived from local or global network topology. local indices are node-dependent, which means that the only information required are the degrees of the node and its nearest neighbourhood. global similarity indices, in contrast, are path-dependent and global knowledge of the network topology is required  <cit> .

similarity indices have proved promising for link prediction in many different networks. liben-nowell and kleinberg  used a variety of them to predict the evolution of social networks over time. they showed that many similarity indices, such as common neighbours and jaccard index, vastly outperform a random link predictor, indicating that a lot of information about networks is contained within the network topology alone. zhou, lü and zhang  applied several similarity indices to  <dig> different networks and obtained a high level of area under precision-recall curve  for the majority of them. given these promising results we believe that similarity indices could similarly be applied to dti networks to identify potential chemical-protein interactions.

one challenge with using similarity indices in dti networks is that most indices were originally proposed for social networks which are not bipartite in nature, and cannot be directly applied to a bipartite dti network. for example, in common neighbours, if we try to predict a link between chemical c
i and protein p
j, we will find that the neighbouring nodes of c
i are all proteins and likewise, the neighbouring nodes of p
j are all chemicals. therefore, the simple common neighbours index will give us zero value for all c
i and p
j.

however, there are other type of networks which are bipartite in nature. one example is a user recommendation network where the two disjunct sets are users and recommended items  <cit> . modified similarity indices have been developed for such bipartite graphs. we will explain these further in the following sections where we introduce the four types of similarity indices used in our work, selected on the basis of their successful use in related work on other types of network  <cit> .

common neighbours 
for a node x, let Γ denote the set of neighbours of x. with this in mind, if two nodes x and y share many common neighbours, a link is likely to exist between these two nodes. a simple measure of this is given by: 
 sxycn=|Γ∩Γ| 


this essentially counts the number of nodes which have both x and y as their neighbouring nodes. as mentioned previously, in a bipartite network, if we look at chemical x, its neighbours will always be proteins. at the same time, there are no links between proteins and proteins. this means that |Γ∩Γ| will always be zero. hence, we need to modify our definition of cn for a bipartite graph. now, we define Γ^=⋃c∈ΓΓ as the set of neighbours of node x’s neighbours  <cit> , we can then redefine cn as: 
 sxycn′=|Γ∩Γ^| 


in the original cn index, we basically count the total number of unique paths of length  <dig> . in the modified cn index, we have increased the path length to  <dig>  thus, we can represent cn in the following way: 
 sxy=∑z1∈Γ∩Γz2∈Γ∩Γw+w+w 


for an unweighted network, all  <dig> values of w are  <dig>  for a weighted network, we use the weight of each link in the path instead.

jaccard index
the jaccard index is a commonly used similarity metric in information retrieval. for a randomly selected feature f of either node x or node y, the jaccard index measures the probability that both nodes x and y have feature f  <cit> . in our case, the features are the neighbours of the node; therefore we define jaccard index as: 
 sxyjaccard=|Γ∩Γ||Γ∪Γ| 


similar to cn, we have to modify the jaccard index for a bipartite graph  <cit> : 
 sxyjaccard′=|Γ∩Γ^||Γ∪Γ^| 


the jaccard index  <cit>  is basically a normalised version of cn, taking into account the influence of a node in the network. for instance, in a social network, a highly influential individual is naturally well-connected to other individuals in the network. therefore, it is likely that two highly influential individuals will share many common neighbours even though they are not close friends and the majority of their friends do not overlap at all. in this case, they will obtain a high cn score based on their influence in the network. the jaccard index solves this problem by placing more emphasis on the links of non-influential nodes to ensure that the common neighbours they share are due to their similarity rather than their influence.

for the weighted jaccard index, we simply take the weighted cn and divide it by the total number of neighbours between nodes x and the neighbouring nodes of y.

preferential attachment 
let k
x be the degree of node x, then pa between node x and y is defined as  <cit> : 
 sxypa=kx×ky 


pa is based on the phenomenon that nodes with many links tend to generate more new links. this phenomenon can be found in many scenarios. for example, film actors who are well-connected in hollywood are more likely to acquire new roles in movies which then increase their fame  <cit> . likewise, in scientific journals, the most cited articles induce researchers to read them and hence increase their citation numbers. this is known as the matthew effect  <cit>  where the “rich gets richer”.

pa does not require information about the neighbourhood and is only dependent on the degree of the nodes x and y. it has the lowest computational complexity of all the similarity indices, and does not require any modification of the bipartite graph. for weighted pa, instead of using the degree of the node x, we use the sum of the weights between node x and its neighbours, therefore we have the following index: 
 sxypa=∑z1∈Γw×∑z2∈Γw 


katz index
the katz index  <cit>  is a path-dependent global similarity index, which directly sums over the collection of paths between two nodes in a network and is exponentially damped to give the shorter paths more weight  <cit> . let a be the adjacency matrix whereby a
xy= <dig> if x is connected to y, else a
xy=0; the katz index can be defined as: 
 sxykatz=βaxy+β2xy+β3xy+… 


the whole similarity matrix can be written as: 
 skatz=−1−i 


the damping factor β controls the path weights. a small β value means that longer paths contribute less to the katz index score and vice versa. this means that small β values yield results similar to cn. to ensure that the katz index converge, the value of β must be less than the reciprocal of the largest eigenvalue of a. since the katz index requires the calculation of an inverse of the matrix, we use the adjacency matrix a created from the biadjacency matrix b using the method explained in section “baseline”. this works for both weighted and unweighted biadjacency matrix b.

implementation
the programming language and development environment used in our experiment and analysis of results is matlab r2014b. this was chosen as we represent dti networks in the form of matrices and matlab has its own built-in libraries for manipulating and calculating matrices. moreover, matlab supports the development of applications with graphical user interfaces  via graph-plotting tools. the function plot can plot a graph from two input vectors x and y. this facilitates plotting the precision-recall  curve of the results obtained after applying the similarity indices and to and compare the different indices in terms of performance.

the entries of the matador database were stored in an excel file. this was first read into matlab using the command xlsread. following that, we could form the biadjacency matrix using the various fields of the matador entries as explained in section “matador database”. in doing so, we obtained a 2901× <dig> matrix b with  <dig> non-zero entries.

evaluation
10-fold cross validation
cross validation is a common technique for assessing whether the results of the similarity indices will generalise to any independent dataset. one of the most popular cross validation methods is the k-fold cross validation: the input dataset was partitioned into k sub-datasets of approximately equal size. the experiment was then performed k times where each time, one out of the k sub-datasets was used as validation data and the other k− <dig> sub-datasets were used as training data. the k results were then averaged to obtain a single result.

for our experiments, we used 10-fold cross validation, which is known to give the lowest bias and variance in the sub-datasets  <cit> . hence, the entries within the matador database were randomly divided into  <dig> non-overlapping subsets of approximately equal size in terms of the number of dtis. following that, we created a biadjacency matrix for each of the  <dig> subsets. for each similarity index, we applied the algorithm to the sum of  <dig> biadjacency matrices and used the remaining biadjacency matrix as the validation data to check if the links that we predicted were correct. this process was repeated  <dig> times, and the precision and recall calculated from each iteration were averaged to produce a final score.

precision-recall curve
precision is defined as: 
 precision=true positivetrue positive+false positive  and recall as: 
 recall=true positivetrue positive+false negative 


in our case of link prediction, true positive  refers to the links predicted using the training data that are found in the validation data. false positive  refers to the links predicted using the training data that are not found in the validation data. false negative  refers to the links that are not predicted using the training data but are found in the validation data.

in our experiments, after applying a similarity index to the training data, we ranked the links predicted according to their scores. then, we took the top n links predicted and calculated the precision and recall based on the n links. this was repeated for n= <dig> to  <dig>  with this, we obtained  <dig> points at different precision and recall values. this is then averaged for the  <dig> iterations of the different training data for each similarity index. we could then plot the pr curve for each similarity index and compare their performance.

baseline - restricted boltzmann machine 
we compared our method against the recent work of  <cit> , who used rbm for dti prediction and demonstrated good performance on the matador database.

an rbm is a two-layer graphical model consisting of one layer of “visible” units, or observed states; and one layer of “hidden” units, or feature detectors  <cit> . in dti prediction, an rbm can be created for each target, where each visible unit represents the characteristics of interaction between the target and a certain drug. in  <cit> ’s model, each visible unit is composed of two variables x
direct and x
indirect, indicating whether a target and a drug has direct/indirect interactions. the rbms for all the targets share the same parameters between hidden and visible layers. they can be trained and used for dti prediction in the same fashion as in collaborative filtering  <cit> .

RESULTS
baseline
according to  <cit> , the rbm model was tested in the following three scenarios. the results are as illustrated in fig.  <dig>  
fig.  <dig> pr curves for  predicting direct dtis  predicting indirect dtis  <cit> 


integrating both direct and indirect dtis with distinction, the input “visible” unit is a multidimensional vector indicating the mode of interaction


mixing both direct and indirect dtis without distinction; input “visible” unit is a one-dimensional binary vector indicating whether dtis are observed

using only a single interaction type




despite the remarkable performance of rbm when trained on data that distinguish between direct and indirect links, when mixing the two types of links, the results become less satisfactory. especially in the prediction of indirect dtis using rbm, we can see that the precision is only around  <dig> . this is mainly due to the rbm using the mode of interaction as a feature when predicting dtis. when mode of interaction is available, the input unit is multidimensional. however, when the mode of interaction is not available, in the input unit is one-dimensional, which greatly lowers the precision of the rbm method.

wang and zeng kindly provided the results data for their paper using the rbm method  <cit> . using the results data, we are able to plot a pr curve which combines the result of predicting direct and indirect dtis this is the “baseline” method we compare the different similarity indices against.

similarity indices
to obtain a fair comparison with their experiment, we focus on cases where no distinction between the links in the dti network is made and therefore, we use only the unweighted version of the similarity indices. we chose the β value for katz index to be  <dig>  as it has the best performance out of the  <dig> different values .

the results are as shown in fig.  <dig>  we can see that three of the four similarity indices  have significantly higher precision than baseline when recall is between  <dig> and  <dig> , and interestingly their pr curves intersect almost at the same point. hence, there is a common cost ratio threshold for determining the better-performing methods whose top-rank predictions are more accurate. while in terms of aupr, similarity index-based approaches do not outperform rbm , the fact that their pr curves intersect does show that there is no certain method dominating the other, and that one method is better for some cost ratios and worse for others. the “area under curve” measure, as reported in  <cit> , has limitations and could be a misleading measure of performance in certain scenarios. particularly, it weights omission and commission errors equally, and summarises test performance over regions in which one would rarely operate. in the scenario of drug repurposing, where any predicted links need to be validated through expensive, time-consuming laboratory experiments and clinical trials, false positives and false negatives do not have the same effect. it is critical to ensure that top-ranked predictions are highly reliable in the interest of time, money, and risk control. our method is therefore better suited than the rbm approach in situations where no information is available about the modes of interaction between chemicals and proteins.
fig.  <dig> a comparison of the pr curves using different link prediction methods





discussion
taking a closer look at the trends of pr curve for the various similarity indices, first, we notice that katz index and cn have very similar pr curves. this is because we are using a very small value of β, which gives more weight to shorter paths and less weight to longer ones. thus, the katz index functions almost like cn, producing a similar pr curve. we assume that the katz index should have a larger maximum recall than cn, as it is able to predict links in the validation dataset that require more than  <dig> steps of the links in the training dataset to reach. indeed, when we look at the total number of links predicted by each link prediction method, cn predicts around  <dig>  links while katz index predicts about  <dig>  m. as this is more than  <dig> times the number predicted by cn, katz index is expected to have better recall. however, looking at the pr curve for both methods, the maximum recall the two indices is about  <dig> . this shows that the top  <dig> links predicted are not actually affected by the longer paths incorporated in katz index. if we look at the pr curves closely, cn has the best performance out of the  <dig> similarity indices at low recall. this is unexpected as cn is the simplest index, and intuition tells us that the more complex indices should have better performance as they have factored in more information about network structure. however, this is not the case with the dti network. in fact, this has also been observed by various other researchers. zhou, lü and zhang  used  <dig> different similarity indices for link prediction on  <dig> different networks and found that cn performed the best for all the datasets  <cit> . this shows that the cn actually is a very strong link prediction method despite its simplicity.

comparing cn, katz index against jaccard index, the former has a sharp drop in precision at about  <dig>  recall and also between  <dig>  to  <dig>  recall. this is mainly because a large number of predicted links end up with equal similarity score according to the same number of common neighbours. looking at jaccard index, however, its precision decreases at a slower rate and it has a much smoother curve from the effect of its normalising factor. although for recall below  <dig> , jaccard index does not perform as well as cn or katz index, as recall increases, it does demonstrate better performance than other indices. yet, as explained above, it is still more important to have higher precision especially when recall is low. therefore, katz index and cn are more suitable for our task than the jaccard index.

pa shows the lowest performance out of all methods. its poor performance is probably because it is originally designed based on the influence level of individuals in social networks. as previously mentioned in preferential attachment  section, pa is based on the matthew effect . however, in a dti network, it turns out that even if a protein interacts with many different chemicals, it does not necessarily make the protein more likely to interact with the next chemical. it seems that the underlying assumption of pa does not work in a dti network causing it to have poor performance.

β values in katz index
we further investigated the impact of different β values on the pr curve of katz index for dti prediction. figure  <dig> below shows the  <dig> different pr curves using β values of  <dig> ,  <dig>  and  <dig>  for katz index. it is clear that a smaller β leads to better performance than a larger β. to explain this effect, we conducted an additional experiment on one of the training datasets. assuming two nodes x and y share a link in the validation dataset, we would like to find out the length of path between x and y using the links in the training dataset. for example, as shown in fig.  <dig>  to reach from node x to node y , we need to move from x to a, a to b and finally b to y. this shows that a path length of  <dig> is required using the links in the training dataset to reach the link in the validation dataset.
fig.  <dig> pr curve using katz index at different β values




the aim of this experiment was to determine the average path length required in the training data to reach the links in the validation data. since the input dataset is partitioned into training dataset and validation dataset, we know that the links within the validation dataset will not be found in the training dataset. therefore, to reach a link found in the validation dataset, we need a minimum of  <dig> links, i.e. a path length of  <dig>  in the training dataset as shown in fig.  <dig> due to the bipartite nature of the graph.
fig.  <dig> example of a link in validation data that requires  <dig> links in training data to reach




out of the  <dig> links within the validation dataset which we used for the experiment, we found that  <dig> required only a path length of  <dig> to reach using the training dataset. this shows that the vast majority of the links in the validation dataset have common neighbours in the training dataset. in katz index, a smaller β value means that more emphasis is placed on paths of shorter length. since most paths are of length  <dig>  smaller β value leads to better results. another observation that can be made from fig.  <dig> is the difference in results using β of  <dig>  and  <dig>  is much larger than the difference in results using β of  <dig>  and  <dig> . this seems to indicate that β value affects the performance of katz index in the dti link prediction exponentially as its value increases. however, more experiments using a larger range of β values need to be performed to fully confirm this.

limitations
although our approach has a clear advantage over the machine learning-based baseline by making better use of network topology information, it has limitations, as illustrated in fig.  <dig>  if a candidate link  happens to form a cut of the network, i.e., there are two disconnected sub-networks in the training dataset, there is no valid path suggesting the link to be a potential link, which will affect the recall. being based entirely on network topology and not on the attributes of the individual nodes or edges similarity indices cannot predict a link between disconnected networks.
fig.  <dig> removing link between x and y creates  <dig> disconnected sub-networks




a typical example would be: when a new drug has just been invented for a new target, and no information is available on how it interacts with other targets in an exiting dti network, the number of common neighbours between the new drug and any existing target will be zero. this means that no potential dtis can be predicted for the new drug. in this scenario, to perform link prediction on the new drug or target, we will need to employ alternative methods that require extra knowledge about drugs and targets.

additionally, drug-protein interactions are complex in nature. for targets with multiple distinct pockets for different drugs  <cit> , the current method will likely fail. one possible option would be to use drug/target profiles wherever applicable to perform finer-grained dti prediction, for instance, by splitting a single target node to a set of pocket nodes.

CONCLUSIONS

in silico dti prediction is aimed at assisting scientists in identification of drug-target interactions. because the most interesting potential interactions will need to be verified in the context of costly and time-consuming laboratory experiments, reliability of dti prediction is very important. network-based dti prediction is currently popular, with most methods based on machine learning . these methods tend to yield high performance when additional information about attributes of drugs, targets, and their interactions is available. however, they perform poorly when such information is limited or unavailable.

we have experimented, for the first time, whether similarity indices used e.g. in social network analysis might offer a more suitable approach to dti prediction, when no further information is available beyond the dti network topology. our investigation of several similarity index -based methods shows that such an approach can indeed have a distinct advantage over the currently prevalent machine learning -based approaches when binding types and causes of interactions are unspecified. in our experiments, this advantage is particularly apparent on the top  <dig> predicted links, where similarity indices have precision levels significantly higher than the rbm method. given the time and manpower required for validation of potential interactions, it is arguably more important for the precision to be high at lower recall than at higher recall. however, when additional features about dtis are available, it is better to use conventional machine learning-based method such as rbm. thus, link prediction using similarity indices is not intended as a competing but rather a complementary method.

in the future our approach could be improved in various ways. one idea would be to include characteristics of the nodes and edges into similarity indices. this could be done, for example, by splitting each individual target to multiple distinct pocket nodes for finer-grained dti prediction, which might improve the accuracy of our predicted dtis and at the same time, overcome several current limitations of the similarity indices approach. additionally, it would be an interesting line of research to experiment with large scale, up-to-date dti networks with a comprehensive coverage of all approved and experimental drugs and the corresponding targets, e.g., by integrating various drug databases and literature. any predicted dti needs to be checked against existing literature  for novelty, followed by laboratory experiments and clinical trials for further validation. we hope that this approach and its future enhancements will provide real, reliable predictions  that will benefit the research community and pharmaceutical industry.

abbreviations
cncommon neighbours

dtidrug target interactions

fnfalse negative

fpfalse positive

guigraphical user interface

matadormanually annotated target and drug online resource

meshmedical subject headings

papreferential attachment

prprecision-recall

rbmrestricted boltzmann machine

svmsupport vector machine

tptrue positive

