BACKGROUND
evolution has equipped cells with exquisite signaling systems which allow them to sense their environment, receive and process signals in a hierarchically organized manner and to react accordingly  <cit> . the complexity of the corresponding molecular machineries, in accordance with the complicated tasks they have to perform, is overwhelming. in the last few years, as a key element to the growing popularity of systems biology, mathematical tools have been applied to the analysis of signaling data  <cit> . ordinary differential equations relying on kinetic descriptions of the underlying molecular interactions are arguably the most used approach for modeling signaling networks . a number of theoretical methods have been devised and employed for the reconstruction  of signaling or, more generally, interaction networks  based on perturbation experiments  <cit> . the approaches rely on methods ranging from bayesian networks  to metabolic control analysis  <cit> .

relatively few methods have been proposed so far for analyzing the structure of a given signaling  network. this is somewhat surprising since structural analysis of metabolic networks is a well-established field and proved to be successful to recognize relationships between structure, function, and regulation of metabolic networks  <cit> . structural analysis will be particularly useful in large signaling networks, where a simple visual inspection is not possible and at the same time the construction of precise quantitative models is practically infeasible due to the huge amount of required, but generally unknown, kinetic parameters and concentration values. however, the reconstruction of large signaling networks is still in its first stages  <cit> .

structural or qualitative approaches that have been employed for interaction networks include statistical large-scale analyses in protein-protein networks . these studies are important for examining statistical properties of the interaction graph and for understanding its global organization but they provide relatively few insights into the function of the network. papin and co-workers  <cit>  were the first to adapt methods from the constraint-based approach  to analyze stoichiometric models of signaling pathways. recently, graph-theoretical descriptions of signaling networks have been examined  <cit> . finally, boolean networks as discrete approximations of quantitative models have been used for logical analyses of small signaling networks e.g.  <cit> . however, the majority of studies relying on the boolean approach deal with genetic interaction networks, many of which have a relatively small size , however, recently more complicated networks have also been investigated  <cit> .

in this contribution, we propose formalisms for representing signaling and other interaction networks mathematically and present a collection of methods facilitating structural analysis of the respective network models. rather than introducing completely new concepts, we will systematize and adapt existing formalisms and methods, often motivated from structural analyses of metabolic networks, towards a functional analysis of the structure of a signaling network. issues that can be addressed with the proposed methods include:

• check of the plausibility and consistency of the network structure

• identification of all or particular signaling pathways, feedback loops and crosstalks

• network-wide functional interdependencies between network elements

• identification of the different modes of  input/output behavior

• predicting responses  after changes in network structure

• finding targets and intervention points in the network for repressing or provoking a certain behavior or response

• analysis of structural network properties like redundancy and robustness

structural analysis is not based on quantitative and dynamic properties and can thus only provide qualitative answers. however, some insights into the dynamic properties can nevertheless often be obtained, because fundamental properties of the dynamic behavior are often governed by the network structure  <cit> . while we will focus on signaling networks, the methods can be easily applied to any kind of interaction network, including gene regulatory systems. apart from a toy model, we will exemplify our methods on a model of signaling pathways in t-cells.

RESULTS
mass and signal flows in cellular interaction networks
the reader familiar to the structural analysis of stoichiometric networks may notice that, in the case of metabolic networks, many of the issues in the task list of the previous section have been handled by the constraint-based approach  <cit> . for example, the identification of functional pathways and studying the input /output  behavior of stoichiometric reaction networks is facilitated by elementary-modes analysis  <cit> . flux balance analysis is another related technique often used for phenotype predictions of metabolic mutants  <cit> . recently, the concept of minimal cut sets has been introduced for identifying targets in metabolic networks  <cit> . therefore, it seems reasonable to apply these methods to signaling networks. however, some fundamental differences in the way the network elements interact may complicate a direct transfer:

 the constraint-based framework assumes steady-state, while in signaling networks a transient behavior can often be observed. 

 in stoichiometric networks, any arrow  leading from educts to products can be seen as an "activating"  connection for the products. therefore, employing stoichiometric framework it is difficult or only indirectly possible to express an inhibitory action of a species onto another.

 probably the most significant difference is that the edges  in metabolic networks carry flows of mass whereas edges in signaling networks may carry mass and/or information  flow. of course, at the molecular level, any interaction between species in the cell can be written as a stoichiometric equation. however, whereas mass flow is connected to a real consumption of participating compounds, signal flow is usually characterized by a recycling of certain species  so that these species can mediate the signal transfer continuously .

a typical example, namely the activation of a receptor tyrosine kinase )  <cit> , illustrates the simultaneous occurrence of mass and signal flow. a ligand  binds to the extracellular domain of a receptor  yielding a receptor-ligand complex which can undergo further changes . we denote the outcome by reclig*. this complex is now able to phosphorylate another molecule . accordingly, m binds to reclig* and becomes phosphorylated  by the expense of atp. at the end, m-p is released, recycling also the activated receptor-ligand complex reclig*.

the first step in this scheme can be considered as a mass flow. however, the cycle in which reclig* phosphorylates m, is a mass flow with respect to m and atp, but a signaling flow with respect to reclig*, as the latter is indeed required for driving this cycle but not consumed  in the overall stoichiometry.

in performing a structural analysis we are interested in extracting signaling paths from the network scheme. therefore, it may seem reasonable to compute elementary modes, which typically represent pathways in reaction networks with mass flow  <cit> . a basic property of elementary modes is that the  mass flow represented by an elementary mode keeps the "internal" species in a balanced state. internal species  are within the system's boundary, whereas the external species  are considered as pools which are balanced by processes lying outside the system's boundaries. computing the elementary modes from the respective stoichiometric model of figure  <dig> gives exactly one mode which reflects the discussed role of reclig* as a kinase ): in its net stoichiometry, this elementary mode converts the external species m and atp into m-p and adp, whereas reclig* is recycled. since reclig* is neither consumed nor produced in the overall process, the first step  is not involved in this mode simply because a continuous synthesis of reclig* would lead to an accumulation of this species, which is inconsistent with the steady-state assumption of elementary modes. thus, the causal dependency of m-p from the availability of rec and lig is not reflected by the mass flow concept of elementary modes. note that exactly the same conceptual problem would arise when enzymes and enzyme synthesis would be considered explicitly in stoichiometric studies of metabolic networks.

the example demonstrates that we require a framework with the ability to account for mass and signal flows. handling both mass and signal flows formally equivalent as interactions could be a suitable approach. interpreting figure 1) as a diagram of interactions we could redraw it as depicted in figure  <dig>  the dashed arrow indicates that reclig* catalyzes the phosphorylation of m to m-p. if we assume that adp, atp, and m are always present, we get the simple chain shown in figure  <dig> expressing that rec and lig are required to obtain reclig* , and that reclig* is required to get m-p. if we do not further distinguish between the two types of arrows and thus consider mass and signal flows as formally equivalent, the causal connections between the species would, nevertheless, still be captured correctly. this abstract representation of different types of interactions will thus be used herein.

the following two sections will deal first with interaction graphs and later with the more general  interaction hypergraphs. the basic difference between these two related approaches can be illustrated by how they deal with a connection such as "rec + lig" in figure  <dig>  if we interpret it as "rec activates reclig* and lig activates reclig*" then the concept of interaction graphs is applicable . however, it would be more accurate to say that "rec and lig are required simultaneously for building reclig*", and it is this more refined approach that leads to the concept of interaction hypergraphs, which will be discussed in further details later on.

analyzing interaction graphs
definition of interaction graphs
interaction  graphs are frequently used to show direct dependencies between species in signaling, genetic, or protein-protein interaction networks. the nodes in these graphs may represent, depending on the network type and the level of abstraction, receptors, ligands, effectors, kinases, genes, transcription factors, metabolites, proteins, and other compounds, while each edge describes a relation between two of these species. in signaling and gene regulatory networks, two further characteristics are usually specified for each edge: a direction  and a sign  or inhibiting ). formally, we represent a directed interaction or causal influence graph as a signed directed graph g = , where v is the set of vertices or nodes  and a the set of labeled directed edges  <cit> . directed edges are usually called arcs and an arc from vertex i  to j  is denoted by an ordered tuple {i,j,s} with i, j ∈ v and s ∈ {+,- }.

sometimes, for example in protein-protein interaction networks, the directions of the edges remain unspecified. we will not consider such undirected interaction graphs explicitly, however, many of the issues discussed in the following can be transferred to undirected graphs  arcs).

the structure of a signed graph can be stored conveniently by an m x q incidence matrix b in which the columns correspond to the q arcs  and the rows to the m nodes , similar as in stoichiometric matrices of metabolic reaction networks  <cit> . for the k-th arc {i, j, s} a  is stored in the k-th column of b for the tail vertex  and  for the head vertex  of arc k. hence, bi,k = - <dig> and bj,k =  <dig> and bl,k =  <dig> . for storing the signs, a q-vector s is introduced whose k-th element is  if arc k is positive and  if k is negative.

self-loops  are not considered here but could be stored in a separate list since they would appear as a zero column in the incidence matrix.

note that, as far as the memory requirement is concerned, the structure of a graph can be stored more efficiently than by an incidence matrix, e.g. by using adjacency lists  <cit> . however, since we will present methods directly operating on the incidence matrix, we refer herein to this representation.

signal transduction networks are usually characterized by an input, intermediate, and output layer . the input domain consists only of species having no predecessor, which can thus not be activated from other species in the graph. such sources  are starting points of signal transduction pathways and can easily be identified from the incidence matrix since their corresponding row contains no positive entry. in contrast, the output layer consists only of nodes having no successor. these sinks, usually corresponding to transcription factors or genes, are identifiable as rows in b which have no negative entry. the set of source and sink nodes define the boundaries of the network under investigation. they play here a similar role as the external metabolites in stoichiometric studies  <cit> . the intermediate layer functions as the actual signal transduction and processing unit. it consists of the intermediate species, all of which have at least one predecessor and at least one successor, i.e. they are influenced and they influence other elements. such species contain both - <dig> and + <dig> entries in the incidence matrix. in reconstructed signaling networks, the detection of all sink and source species may help to detect gaps in the network, e.g. when a species should be an intermediate but is classified as a sink or source.

the presence of sinks and sources are a consequence of setting borders to the system of interest. sometimes there are no sinks or/and no sources, especially in models of gene regulatory networks , but this does not impose limitations to the approaches presented here.

a toy example of a  interaction graph that will serve for illustrations throughout this paper is given in figure  <dig>  this interaction graph, called toynet, consists of two sources , two sinks ,  <dig> intermediate species , two inhibiting  and  <dig> activating interactions. incidence matrix b of toynet reads :

b=+−++++−++++++i1i2abcdefgo1o2     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufebsjuyzl2yd9gzlbvynv2caerbulwblnhiov2dgi1btfmbaexatlxbi9gbaerbbjxahxgarqqtubsr4rnchbgeagqik81rpy0dbbc9akveyhh8f4riq9vqqrfd0p0pfj0xirfj0dxdbba90m6jbbg8fasppaiofhk8feey0dxdarvalq=f0=yqaivgqr=qn+vr0=vr0=vqpwqaaeaabigaciaacaqabeaadaqabqaaaoqaamxvp5wqonvsaehbhl2b2fmbulgic92brbacfegae8nqaikaeyypa0tbaeqabigaaaqaauaabeqab0aaaaaaaeaacwagasv=aaghrawkaeaacwagayc=aaghsislaeaacwagask=aaghrawkaeaacwagaip=aaghrawkaeaacwagaiv=aaghrawkaeaacwaiaa4kascabagaeyoei0cabagamaigqcaaay4kascabagamaiggeaaay4kascabagamaigagaaay4kascabagamaig4haaay4kascabagamaig8jaaay4kascabagamaigqlaaay4kascaaaqaaaqaamaabmaabaqbaeqabsqdaaaaaaaaaeaacqghsisliuaacqgfxaqmaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacaaixaaabagae4hmaadabagae4hmaadabagae4hmaadabagae4hmaadabagae4hmaadabagae4hmaadabagaagymaaqaaiab+bdawaqaaiab+bdawaqaaiab+fdaxaqaaiabgkhitiab+fdaxaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+bdawaqaaiab+fdaxaqaaiabgkhitiab+fdaxaqaaiab+bdawaqaaiaaigdaaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqgfxaqmaeaacqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaaaacagloagaayzkaaaabaqbaeqabsqaaaaaaeaacqgfjbqscqgfxaqmaeaacqgfjbqscqgfyagmaeaacqgfbbqqaeaacqgfcbgqaeaacqgfdbwqaeaacqgfebaraeaacqgffbqraeaacqgfgbgraeaacqgfhbwraeaacqgfpbwtcqgfxaqmaeaacqgfpbwtcqgfyagmaaaaaiaaxmaacawljagaaiikaiab+fdaxiaacmcaaaa@0668@    

identification of feedback loops
even though some analysis methods  rely on acyclic networks where feedbacks are not allowed, one of the most important features of signaling and regulatory networks are their feedback loops  <cit> . positive feedbacks are responsible and even required  <cit>  for multiple steady state behavior in dynamical systems. in biological systems, multistationarity plays a central role in differentiation processes and for epigenetic and switch-like behavior. in contrast, negative feedback loops are essential for homeostatic mechanisms  or for generating oscillatory behavior  <cit> .

most reports demonstrating the role and consequences of feedback loops analyze relatively small networks where the cycles can be easily recognized from the network scheme but rather few works address the question of how feedback cycles can be identified systematically. this is particularly important in large interaction graphs, where a detection by simple visual inspection is impossible, especially when feedback loops overlap.

a feedback loop is, in graph theory, a directed cycle or circuit. a circuit is defined as a sequence c = {a <dig> ...,aw} of arcs that starts and ends at the same vertex k and visits  no vertex twice, i.e. c = {a <dig> ...,aw} = {{k, l1}, {l <dig> l2},..., {lw- <dig> k}} such that all nodes k, l <dig>  l <dig> ... lw- <dig> are distinct. the parity of the number of negative signs of the arcs in c determines whether the feedback loop is negative  or positive . in the example toynet two feedback loops can be found:  the arc sequence { <dig> , <dig> } which is negative  is involved), and  the sequence { <dig> }, which is positive . obviously, sinks and sources  can never be involved in any circuit.

computing all directed cycles in large graphs is computationally a difficult task. algorithms that can be found in the literature usually rely on backtracking strategies . here, we introduce a different approach where the circuits are identified as elementary modes establishing a direct link to metabolic network analysis. circuits can be formally represented by a q-vector c in which ci =  <dig> if arc i is involved in the circuit and ci =  <dig> otherwise. a circuit vector fulfills the equation

b c =  <dig>    

and hence, lies in the null space of the incidence matrix of the graph  <cit> . generally, any vector c obeying  fulfills a so-called conservation law and is called a circulation which may be envisioned as a flow cycling around in the network  <cit> . eq.  is strongly related to the mass balance equation of metabolic networks in steady state. in fact, considering the graph as a reaction network with the arcs being irreversible mono-molecular reactions, the incidence matrix would be equivalent to the stoichiometric matrix and any circulation would be equivalent to a stationary flux distribution. note that not all circulations are circuits: the linear combinations of circuit vectors do also yield circulations but are not  circuits. precisely, circuits are special circulations having two additional properties. first, they must be admissible with respect to the directions of the involved arcs, i.e. only non-negative values are allowed for c:

ci≥  <dig> for all i.     

second, circuits are non-decomposable circulations, i.e. the set of arcs building up the circuit c, expressed by p = {i: ci > 0}, is irreducible:

there is no non-zero vector d fulfilling eqs.  and  and p⊂ p    

eqs.  and  and condition  close the complete analogy to elementary modes. in fact, cycles or circuits are the elementary modes in the special case of graphs , not only for the very special shape of incidence matrices related to graphs). any feasible stationary flux vector in a metabolic network can be obtained by non-negative linear combinations of elementary modes. equivalently, any circulation vector can be decomposed into a non-negative linear combination of circuit vectors. note that, multiplying a  vector c, that fulfills -, by a scalar b> <dig> yields another vector v = bc which represents the same circuit because the same arcs compose it . moreover, all non-zero components in a circuit vector are equal to each other. therefore we can always normalize the vector in such a way that we obtain the binary representative of this circuit where all components are either "1" or "0".

in metabolic networks, elementary modes reveal not only internal cycles but also, even with higher relevance, metabolic pathways connecting input and output species. continuing with the analogy to interaction graphs, in the next subsection we will see that elementary modes can be used to identify not only feedback loops but also signaling paths.

signaling  paths between two species
when the interaction graph is very large it becomes difficult to see whether a species s <dig> can influence  another species s <dig> and via which distinct pathways this can happen. computing the complete set of directed paths between a given pair  of species is therefore often desirable. a path p = {a <dig> ...,aw} is, similarly to a feedback circuit, a sequence of arcs where none of the nodes is visited more than once, but in the case of a signaling path the start node s <dig> is distinct from the end node s <dig>  i.e. p = {a <dig> ...,aw} = {{s <dig> l1}, {l <dig> l2}, ..., {lw- <dig> s2}} such that all nodes s <dig>  s <dig>  l <dig>  l <dig> ... lw- <dig> are distinct.

to obtain the signaling pathways from s <dig> to s <dig> we proceed as follows ): we add an "input arc" for s <dig>  for s1) and an "output arc" for s <dig>  for s <dig>  then, computation of the elementary modes in this network will provide the original feedback loops without participation of the input and the output arc  and additionally all paths starting with the input arc at s <dig> and ending with the output arc at s <dig>  with the latter revealing all possible routes between s <dig> and s <dig> 

admittedly, the introduced input and output arcs have no tail or no head, respectively, and would therefore not be edges in the graph-theoretical sense, but this has no consequence for the analysis described within this contribution. in fact, this procedure is equivalent to adding in the incidence matrix a "dummy" node representing the environment , an "input arc" from env to s <dig> and an "output arc" from s <dig> to env ). computing the elementary modes from the resulting incidence matrix would produce the feedback circuits as well as the circuits running over env. the latter represent the paths leading from s <dig> to s <dig>  in the procedure described above env is simply removed from the incidence matrix leading to the same results.

in order to obtain only the paths from s <dig> to s <dig> , one can enforce the input and output arc to be involved by using an extension of the algorithm for computing elementary modes  <cit> .

furthermore, we may also add several input and output edges simultaneously. for example, if we are interested in all the paths connecting the input layer with the output layer, i.e. all routes leading from a source to a sink node, we add to each source an input edge and to each sink an output edge and compute the elementary modes . in this way we obtain the same set of signaling paths as if the elementary modes would be computed separately for each possible pair of source and sink nodes. figure  <dig> shows the complete set of signaling paths connecting the input with the output layer of toynet.

analogously to the feedback loops, we assign to each signaling path an "overall sign" indicating whether a activates  or inhibts  b along this path. again, the parity of the signs of the arcs in the path determine whether the influence is positive  or negative .

to sum up, feedback loops and influence paths in interaction graphs can be identified as elementary modes  from the respective incidence matrix. similar conclusions have recently been drawn by xiong et al.  <cit> , albeit the authors computed paths only between sink and source nodes and only within unsigned graphs . feedback circuits were also not considered. hence, here we extend and generalize those results.

the equivalence of signaling paths and loops to elementary modes allows one the advantage to use the highly optimized algorithms for computing elementary modes  <cit> .

combinatorial studies on signaling paths
the computation of all paths between a pair of species helps us to recognize all the different ways in which a signal can propagate between two nodes. in metabolic pathway analysis, a statistical or combinatorial analysis of the participation and co-occurrences of reactions in elementary modes proved to be useful for obtaining system-wide properties, such as the detection of essential reactions/enzymes or correlated reaction sets   <cit> .

in principle, similar features are of interest also for signaling paths and feedback loops. however, two important issues arise in interaction graphs that require a special treatment. first, we have two different types of pathways, positives and negatives. owing to their opposite meanings we often need to analyze them separately in statistical assessments. second, in metabolic networks we are particularly interested in the reactions , because they correspond to enzymes that are subject to regulatory processes and can be knocked-out in experiments. in contrast, in interaction graphs we are usually more interested in the nodes, since they are often knocked-out in experiments or medical treatments, either via mutations, sirna or by specific inhibitors. an edge in signaling networks represents mostly a direct interaction between a pair of species and has therefore no mediator. in some cases, an edge can directly be targeted by e.g. a mutation at the corresponding binding site of one of the two nodes species involved. here, we will focus on species participation, albeit similar computations can be made for the edges.

as mentioned several times, in signaling networks we are often interested in all the different ways by which a certain transcription factor  can be activated or inhibited by signals arriving the input layer. for this purpose, we compute all signaling paths leading from source nodes located in the input layer down to a certain sink species s of interest. we denote the set of all these paths by is, which can be dissected in the two disjoint subsets of activating and inhibiting paths: i = is+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiewacqwfjbqsdaqhaawcbagaem4camhabagaey4kascaaaaa@304d@ ⋃ is−
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiewacqwfjbqsdaqhaawcbagaem4camhabagaeyoei0caaaaa@3058@. each source species i can then be classified into one of the following four influence classes with respect to s:

 activator of s 

 inhibitor of s 

 ambivalent factor for s  path of is−
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiewacqwfjbqsdaqhaawcbagaem4camhabagaeyoei0caaaaa@3058@ and in at least one  path of is+
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiewacqwfjbqsdaqhaawcbagaem4camhabagaey4kascaaaaa@304d@)

 without any influence on s 

in toynet, we see from figure  <dig> that i <dig> is a pure activator and i <dig> an ambivalent factor for o <dig>  with respect to o <dig>  i <dig> is an inhibitor and i <dig> again an activator. the qualitative response of s after perturbing the level of a non-affecting species, or of an inhibitor or activator can be predicted unambiguously  as long as the network has no negative feedback loop. negative feedback loops limit such qualitative predictions for activators : if there is any path from an activator  to s that touches a negative feedback loop  then the resulting effect in perturbation experiments can not be predicted uniquely . this case occurs in toynet for i <dig> with respect to o1: i <dig> is an activator of o <dig> but the only connecting path  goes through species c which participates in the negative feedback circuit. thus, although at least a transient increase in o <dig> can be expected after up-regulating i <dig>  we cannot exclude that the negative feedback drives the level of o <dig> below its initial level at a certain time point after increasing the level of i <dig>  we therefore call an activator  p of s a total activator  of s if there is no path from p to a species in a negative feedback circuit that is in turn connected to s.

positive feedbacks do not limit these qualitative up/down-predictions because they cannot change the monotone effect of the respective input signal, e.g. when increasing the level of i <dig> in toynet we can expect an increase in the level of o <dig> after some time.

to summarize, regarding the influence of a species p on another species s we have  <dig> possible cases: total and non-total activator, total and non-total inhibitor, ambivalent factor and non-influencing species. note that, by computing the connecting signaling paths, this classification procedure can be applied not only between a source and a sink node but also between any pair of species, e.g. between a source and an intermediate, an intermediate and a sink, and two intermediates. in toynet, for example, f is a total activator of o <dig> and has no influence on o <dig>  whereas d is an inhibitor but not a total one of o <dig> because it is connected to  a negative feedback circuit.

additionally, as the complement of incoming paths, we can also determine the paths starting in a certain species s showing us which nodes and arcs are reachable from  s. as a further generalization, sets of incoming and/or outgoing paths can also be defined not only for a single species s but also for a set s of species. this might be useful, for example, when we are interested in all paths ending  in a certain subset of the sink  nodes.

investigations of influence and signaling paths as proposed above provide, apart from pair-pair relationships  activator of b" or "a has no influence on b"), global properties  activator of all sink species). some other useful structural features and constraints can be detected by a statistical or combinatorial analysis of certain path sets :

• essential species : when focussing on a specific signaling event, e.g. the activation of a certain species by signals from the input layer, we may identify essential species  with respect to this event. for example, species e and arc  <dig> are essential for activating o <dig> but non-essential for the activating paths leading to o <dig> in toynet.

• species  participation: a more quantitative measure can be obtained by giving percentages of all those activating and/or inhibiting pathways, in which the species or arc is involved. one may only relate the relative participation to the paths where the respective species or arc is involved or to the complete set of paths. for example, i <dig> is involved in 50% of all positive paths coming from the input layer and activating o <dig>  while i <dig> is involved in 100% of all paths activating o <dig> . arc  <dig> is involved in one activating and one inhibiting path leading to o <dig>  thus, only 50% of the paths running over this arc are activating, however, it is involved in all  activating paths connecting sources with o <dig>  similar considerations can be done regarding feedback loops: in toynet, species d and a as well as arcs  <dig>   <dig> and  <dig> are not involved in paths connecting input with output layers and have thus a special importance in establishing the negative  and positive  feedback. 

• redundancy: the total number of paths activating  a species is a measure for the redundancy in the system.

• path length: the length distribution of signaling paths provides a rough idea on the compactness of the network  <cit> .

• crosstalk: using our framework, crosstalk might be defined as a place  where paths from different source nodes cross each other for the first time. for example, e is a crosstalk species in toynet  whereas f and g are not. in some cases, however, crosstalk is a more complex phenomenon where different nodes are involved. for example, at species c a path coming from i <dig> via b and another path from i <dig> via e meet each other. however, i <dig> and i <dig> have also met earlier in e and, additionally, the action of i <dig> on c via b is already influenced by i <dig> in species b since i <dig> can act on b via the path visiting e, c, d and a.

distance matrix and dependency matrix
some applications presented in this section require exhaustive enumerations of signaling paths becoming computationally challenging in large networks. however, in some cases we only want to know whether any activating and/or any inhibiting path between two nodes exists or whether there is any positive or any negative feedback circuit in which a certain species is involved. for such "existence questions" we can often apply standard methods from graph theory. a very useful object is the distance matrix d which can be obtained with low computational demand by computing the shortest distances  between each pair of species . d has dimension m × m and the element dij stores the length of the shortest path for traveling from node i to node j, being dij = ∞ if no paths exists between i and j. the distance matrix shows immediately

• which elements can be influenced by species i 

• which nodes can influence species i 

• whether feedback circuits exist: if the distance dii from a node i back to itself is finite, then i is involved in at least one feedback loop. furthermore, if dij and the transposed element dji are finite, dij, dji≠∞, then a feedback between species i and j exists.

by an extension of the usual shortest path algorithm , we may also compute separately a matrix dpos for the shortest positive paths and another dneg for the shortest negative paths. table  <dig> shows the distance matrices dpos and dneg from toynet.

note that by taking the minimum values from dpos and dneg, d can be obtained. moreover, the two matrices dpos and dneg, whose computation is reasonably possible in very large networks, are sufficient to classify all species into  activators,  inhibitors, ambivalent factors, and non-influencing nodes with respect to a certain compound y. the reason is that this classification requires only knowledge on the existence of positive and negative paths between species pairs and on the existence of negative feedback loops. for example, a species x is a total activator of y if  at least one positive path from x to y exits  and if  no negative path from x to y exists  and if  for any species z that is influenced by x  and connected to y  it holds, that z is not involved in a negative feedback .

for representing species dependencies in a compact manner, we introduce the dependency matrix m, which shows all the pair-wise dependencies, e.g. by using  <dig> different colors . thereby, the color of matrix element mxy indicates whether species x is a total/non-total activator or a total/non-total inhibitor or an ambivalent factor or a non-influencing node for species y. again, x = y is allowed, indicating feedbacks. figure  <dig> shows the dependency matrix for toynet.

although the distance and dependency matrices store a wealth of structural information in a very condensed manner, some applications still require a full enumeration of all available signaling paths. one case is the systematic determination of minimal cut sets.

minimal cut and intervention sets in interaction graphs
searching for intervention strategies in signaling networks is of high relevance in experimental and, in particular, medical applications. recently, the concept of minimal cut sets has been introduced, which facilitates the identification of efficient intervention strategies  and, at the same time, the recognition of potential failure modes in a given biochemical reaction network  <cit> . basically, in the most general version, a minimal cut set  is defined as a minimal  set of cuts  of edges or/and nodes that represses a certain functionality or behavior in the system  <cit> . for example, assume we want to prevent the activation of the sink node o <dig> in toynet. by removing nodes {b, e} one can be sure that an activation of o <dig> by an external stimulus becomes infeasible. the set {b, e} would thus be a cut set for preventing the activation of o <dig>  moreover, it is minimal since neither the removal of only b nor the removal of only e can guarantee that the "inhibition task" is achieved. another minimal cut set would be {c}. c is thus essential for activating o <dig>  as would be confirmed by participation analysis of all paths activating o <dig>  a general algorithmic scheme for a systematic enumeration of mcss in stoichiometric networks was given in  <cit> :

 define a deletion task

 compute all minimal functional units  and specify the set of target modes that have to be attacked in order to achieve the deletion task

 compute the so-called minimal hitting sets of the target modes

we could proceed here in a similar way. first, a deletion task specifying the goal of our intervention is defined. in our example, the deletion task is "prevent the activation of o <dig> by any external input". hence, the signaling paths from the input layer to o <dig> are computed, which are p <dig>  p <dig>  and p <dig> . however, according to our deletion task, the target set comprises only the paths p <dig> and p <dig>  because only these two activate o <dig>  finally, the minimal hitting sets of the target paths have to be computed, which are the mcss  <cit> . when cutting species, a hitting set t is a set of species that "hits" all target paths in a minimal way, i.e. for each target path there is at least one species that is contained in t and in the path. to be a minimal hitting set, no proper subset of t fulfills the hitting set condition. the minimal hitting sets of the target paths and hence the mcss of our deletion task would be: {c}, {b, e}, {i <dig>  b}, {i <dig>  e} and {i <dig>  i2}. deletion tasks may be more complicated: for example, in toynet we might be interested to repress the activation of o <dig> and o <dig>  accordingly, the target paths would increase by one  resulting in another set of mcss.

this example might suggest that we can use the same procedure as in metabolic networks, namely computing the minimal hitting sets with respect to the target paths. this naive approach works indeed for the case where the target paths do only involve positive arcs . it can also be applied for interrupting any set of feedback circuits. for example, removing {a} interrupts the negative feedback circuit and deleting {d, f} interrupts both feedback circuits in toynet. however, in general, negatively signed arcs occurring in interaction graphs require a special treatment. even the following simple activating path leading from a source species i to a sink species o contains pitfalls:

i→+a→−b→−c→+o
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgjbqsdagdkawcbagaey4kascabegccaglsgcacqqgbbqqdagdkawcbagaeyoei0cabegccaglsgcacqqgcbgqdagdkawcbagaeyoei0cabegccaglsgcacqqgdbwqdagdkawcbagaey4kascabegccaglsgcacqqgpbwtaaa@3c09@. if the activation of o is to be repressed, the signal flow along this path must be interrupted. removal of one species in the chain should be sufficient. however, not all nodes are allowed to be cut. if species b is removed, its negative action on c would be interrupted, enabling in turn c to activate o. the reason is that b, according to the definitions, is an inhibitor of o and is therefore not a proper cut candidate. in fact, we could add  b to stop an activation of o. generally, for attacking an activating path, only the species that have an activating effect on the end node of this path are proper cut candidates, whereas species inhibiting the end node should instead be kept at a high level to prevent an activation along this path. hence, as a generalization of  cut sets, we define  intervention sets  in interaction networks as  sets of elements that are to be removed or to be added in order to achieve a certain intervention task. by allowing only the removal of elements, the set of miss coincides with the mcss.

the computation of the miss  for a set of activating target paths that involve negatively signed arcs is a more difficult task than computing only minimal hitting sets. indeed, each mis will still represent a hitting set, because at least one species in each target path must be removed or constitutively provided. the difficulty arises by ambivalent factors which have in some target paths an activating and in others an inhibitory effect upon the end node. we could therefore restrict the interventions to those species that are either pure activators with respect to the target paths  or pure inhibitors . using only these species, the miss could again be computed as the minimal hitting sets.

however, for computing miss that may also act on ambivalent factors, we present a more general algorithm :

 in each target path, the involved nodes are labeled by + <dig>  or by - <dig> .

 combinations ci of one, two, three, ... distinct removed or activated species are constructed systematically. for each combination ci, it is checked for each target path whether the signal flow from the start node to the end node is interrupted properly. a requirement is that at least one of the positive  species of each path is removed or at least one negative  species is provided  by ci . if, for a certain path, ci contains several nodes that are visited by this paths then it is only checked whether the node closest to the end node is attacked properly. when all paths have been attacked  properly by a combination ci, then a new mis has been found. when constructing further combinations of larger cardinality, the algorithm has to ensure that none of the new combinations contains an earlier found miss completely.

of course, this enumerative algorithm is even more time consuming than computing minimal hitting sets and it will become infeasible to compute all miss in large networks. we may then restrict ourselves to miss of low cardinality and/or to the subset of mcss. besides, the determination of miss can become even more complicated: it might happen that a mis attacks all activating target paths correctly but simultaneously destroys an inhibiting path  which might then become an activating path. the mcs {i <dig>  i2} of our example represents such a problematic case: it hits the two activating paths to o <dig> as demanded, but it also attacks the inhibiting path leading from i <dig> to o <dig>  thus, the inhibition of e through i <dig> would be interrupted and it could be sufficient to retain e in an active state enabling the activation of o <dig>  hence, we would not be sure about the activation status of o <dig> after removing this cut set. to avoid such side-effects, we may extend our algorithm given above by checking also the consequence of each intervention ci with respect to the non-target paths and exclude combinations that do not fulfill certain criteria.

in a completely analogous fashion, we can also determine mcss or miss that repress inhibitory paths. for example, removing {i1} is a mcs that attacks the only inhibiting path to o <dig>  alternatively we might use the miss {#e} or {#c}, where # stands for "constitutively provided". the same issues as discussed above must be taken into account when interrupting a negative path: here, in each target path, only the inhibiting species of the final sink source should be removed whereas the activating nodes can be added. furthermore, we may also define more complicated intervention tasks, e.g. where some activating and some inhibiting paths are selected as target paths.

jacobian matrix and interaction graph
several works have highlighted the strong relationships between interaction graphs and the jacobian matrix j, the latter obtained from a dynamical model of the network under investigation  <cit> . a dynamic model of a signaling  network is usually described by a system of ordinary differential equations that model the evolution of the m network components x <dig> ... xmwith the time:

x˙=dxdt==f=⋮fm)     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaieqacuwf4baegagaaiabg2da9maalaaabagaemizaqmae8heaghabaacbigae4hzaqmae4hdaqhaaiabg2da9maabmaabaqbaeqabmqaaaqaaiqbdiha4zaacawaasbaasqaaiabigdaxaqabaaakeaacqwiulstaeaacuwg4baegagaamaabaaaleaacqwgtbqbaeqaaaaaaogaayjkaiaawmcaaiabg2da9gqadiab9zeaghqaaiab8hcaoiab=hha4jab8xcasiab+rha0jab8lcapiab+1da9maabmaabaqbaeqabmqaaaqaaiab+zgamnaabaaaleaacqafxaqmaeqaaogaeiikagiae8heagnaeiilawiaemidaqnaeiykakcabagaeso7i0eabagaemozay2aasbaasqaaiabd2gatbqabagccqggoaakcqwf4baecqggsaalcqwg0badcqggpaqkaaaacagloagaayzkaagaaczcaiaaxmaadaqadaqaaiabiwda1agaayjkaiaawmcaaaaa@5f3e@    

the m × m jacobian matrix j collects the partial derivatives of f with respect to x:

jik=dfidxk     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaieqacqwfkbgsdawgaawcbagaemyaakmaem4aasgabeaakiabcicaoiab=hha4jabcmcapiabg2da9maalaaabagaemizaqmaemozay2aasbaasqaaiabdmgapbqabaaakeaacqwgkbazcqwg4baedawgaawcbagaem4aasgabeaaaagccqggoaakcqwf4baecqggpaqkcawljagaaczcamaabmaabagaegonaydacagloagaayzkaaaaaa@4480@    

the sign of jik tells whether xk has a  positive or negative influence on xi and sign) can thus be seen as the adjacency matrix of the underlying interaction graph. in an adjacency matrix y, a non-zero entry for yik indicates an edge from node i to k. adjacency and incidence matrix are equivalent for describing a graph structure and can be converted into each other: each non-zero element yik gets a corresponding column in the incidence matrix.

the sign structure of the jacobian matrix is, in biological systems, typically constant and reflects, despite its very qualitative nature, fundamental properties of the dynamic system. for example, multistationarity can only occur if a positive circuit exists in the associated interaction graph  <cit> . methods for the detection of multistability in a special class of dynamical systems – monotone i/o systems – have been developed by sontag et al.  <cit> . monotone i/o systems possess a monotonicity property that can be checked from the interaction graph spanned by the jacobian matrix. in fact, having one source species and one sink species, the required monotonicity property is equivalent to our definition of a total activator of the sink node. thus, the methods developed in the previous section may support such studies, where the structure of the jacobian matrix is analyzed. having the absolute values of the jacobian matrix available , arcs, paths, and feedback circuits could be assigned an interaction strength useful to identify key elements in the network.

boolean networks and  interaction hypergraphs
definitions
the methods described above consider an interaction as a dependency between two species allowing to employ tools from graph theory. however, in cellular networks, an interaction  often represents a relationship among more than two species . a typical example is a bimolecular reaction of the form a+b→ c, where three species are involved. the binding of the ligand to the receptor in figure  <dig>  is such a bimolecular interaction. using an interaction graph, this reaction is modeled with two arcs ), namely rec→ reclig* and lig→ reclig*, capturing correctly that rec and lig have an influence on reclig*. however, this relaxed representation has shortcomings for a functional interpretation of the network. to exemplify this, consider the minimal cut sets repressing the phosphorylation of m in figure  <dig>  as explained in the previous section, we need to attack all positive paths leading to m-p. there are two positive paths, one starting from rec and the other from lig and, thus, {rec, lig} would be a minimal cut set. but, intuitively, this cut set is not minimal for the real system because both rec and lig are required for activating m, and removing only one of the two species is thus sufficient to interrupt the activation of m. 

this example reveals that a proper consideration of and-connections between species is required. however, and-relationships are not possible in graphs but in hypergraphs, which are generalizations of graphs. similar to a directed graph, a directed hypergraph h= consists of a set v of nodes and a set a of hyperarcs . a hyperarc aconnects two subsets of nodes: a = {s,e}; s,e⊂ v. s comprises the tail  nodes and e the head  nodes of the connection. s and e can have arbitrary cardinality, and a graph is a special case of a hypergraph where the cardinality of s and e is  <dig> for all edges.

in our context, without loss of generality, we will usually have only one end node in e and we interpret a hyperarc as an interaction in which the compound contained in e is activated by a combined action of the species contained in s. figure  <dig> depicts the example with the receptor-ligand-complex as a hypergraph in which a hyperarc captures now the and-connection between rec and lig yielding reclig*.

and connections facilitate a refined representation of stoichiometric conversions within interaction networks, albeit the precise stoichiometric coefficients are not captured here. apart from stoichiometric interactions, and connections allow the description of other dependencies, for example, the case where only the presence of an activator and the absence of an inhibitor leads to the activation of a certain protein.

in toynet, the four nodes  have more than one incoming arc . in these nodes it is undetermined how the different stimuli are combined, e.g. whether b and e are required to activate c or whether one of both is sufficient .

we could therefore concatenate all incoming edges in a node by logical operations leading to boolean networks  <cit> . an assumption underlying boolean networks is to consider only discrete  levels for each species; in the simplest case a species can only be "off"  and "on" . hence, each species is considered as a binary  variable. next, a boolean function fi is defined for each node i which determines under which conditions i is on or off, respectively. fi depends only on those nodes in the interaction graph from which an arc points into species i. in general, for constructing a boolean function, all logical operations like and, or, not, xor, nand can be used. however, here we express each boolean function by a special representation known as sum of products  disjunctive normal form ) which is possible for any boolean function  <cit> . sop representations require only and, or and not operators. in a sop expression, literals, which are boolean variables or negated boolean variables, are connected by and's giving clauses. several such and clauses are then in turn connected by or's. using the usual symbols '·' for and, '+' for or and '!' for not, an example of a sop expression would be: fi = x·y·z + x·!z stating that fi gets value "1" if  or  and "0" else. the sop expression fi = x·!y + !x·y mimics an xor gate.

in our context, writing a boolean function as a sop has several advantages. first, many biological mechanisms that lead to the activation of a species correspond directly to sop representations. second, by using sops, the structure of a boolean network can be represented and depicted intuitively as a hypergraph: each hyperarc pointing into a node i is an and clause of other nodes and represents one way of activating i; hence, all hyperarcs ending in i are or'ed together. a hyperarc carries a signal flow to its end node and the binary value of the flow depends on the state of all its start nodes. in the following, such a hypergraph induced by a minimal sop representation of a boolean network will be called a logical interaction hypergraph .

in figure  <dig> a possible instance of a lih compatible with the interaction graph of toynet in figure  <dig> is depicted. in each of the four nodes with more than one incoming arc, the logical concatenation has now been specified. for example, b is now activated if a and i <dig> are active simultaneously . in contrast, c is activated if b or e is present , and f is active if e or g are in an active state. hence, c and f retain their graph-like structure.

inhibiting arcs in the interaction graph are interpreted in the corresponding lih as not-operations. thus, arc  <dig> is now interpreted as "a is active if d is not present". since arc  <dig> and  <dig> in figure  <dig> have been combined with an and in figure  <dig>  we interpret this new hyperarc as "e becomes activated if i <dig> is present and i <dig> not". hence, in contrast to inhibiting arcs in interaction graphs, in general we do not assign a minus sign  to the complete hyperarc, but to its negative branches , whereas all other branches get positive signs. due to the assignment of signs lihs can formally be seen as signed directed hypergraphs.

the pure logical description of a signaling or regulatory network works well when the activation  of a species by others follows a sigmoid curve  <cit> . problems that might arise while describing a real network within the logical framework and possible solutions are discussed in a later section.

lihs can be formally represented and stored in a similar way as interaction graphs. the underlying hypergraph is stored by an m × n incidence matrix b in which the rows correspond to the species and the columns to the n hyperarcs. if species i is contained in the set of start  nodes of a hyperarc k then bik = - <dig>  if i is the endpoint  of hyperarc k then bik =  <dig>  and if i is not involved in k we have bik =  <dig>  for storing the nots operating on certain species in a hyperarc we may use another m × n matrix u that stores in uik a "1" if species i enters the hyperarc k with its negated value and "0" else. accordingly, the incidence matrix b for the lih of toynet  reads

b=1&42&356789101112130000000000−1000000000−1000100000010−100000000001−101000−100001−100000001000−1−100000000001−110000000001−10−10000000001000000000001)i1i2abcdefgo1o2     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaieqacqwfcbgqcqgh9aqpfaqabegacaaabaqbaeqabewcaaaaaeaacwagaix=aaaixaqmcwagaix=aaggmagjcwagaix=aaai0aanaeaacwagacq=aaaiyagmcwagacq=aaggmagjcwagacq=aaaizawmaeaacwagayt=aaai1aqnaeaacwagacf=aaai2agnaeaacwagac3=aaai3awnaeaacwagacmaaaai4aaoaeaacwagaiwaaaai5aqoaeaacwagaicaaaaixaqmcwagaicaaaaiwaamaeaacwagaceaaaaixaqmcwagaceaaaaixaqmaeaacwagaifaaaaixaqmcwagaifaaaaiyagmaeaacwagayhaaaaixaqmcwagayhaaaaizawmaaaabaaabawaaewaaeaafaqabewclaaaaaaaaeaacqghsislieaacqgfxaqmaeaacqghsislcqgfxaqmcqgfoaakcqgfqagkcqgfpaqkaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqaiwaamaeaacqgfwaamaeaacqaiwaamaeaacqgfxaqmaeaacqgfwaamaeaacqaiwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqaixaqmaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqaixaqmaeaacqgfwaamaeaacqgfxaqmaeaacqgfwaamaeaacqaiwaamaeaacqgfwaamaeaacqghsislcqaixaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqaixaqmcqggoaakcqggqagkcqggpaqkaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqghsislcqaixaqmaeaacqghsislcqaixaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqaixaqmaeaacqgfxaqmaeaacqaiwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqghsislcqaixaqmaeaacqgfwaamaeaacqghsislcqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfwaamaeaacqgfxaqmaaaacagloagaayzkaaaabaqbaeqabsqaaaaaaeaacqgfjbqscqgfxaqmaeaacqgfjbqscqgfyagmaeaacqgfbbqqaeaacqgfcbgqaeaacqgfdbwqaeaacqgfebaraeaacqgffbqraeaacqgfgbgraeaacqgfhbwraeaacqgfpbwtcqgfxaqmaeaacqgfpbwtcqgfyagmaaaaaiaaxmaacawljagaeiikagiaeg4nacjaeiykakcaaa@fa2f@    

to be concise, the two non-zeros entries of u are indicated by an asterisk in the incidence matrix.

representing a boolean network as a lih we can easily reconstruct the underlying interaction graph from the matrices b and u: we simply split up the hyperarcs having more than one start node . thus, a hyperarc with d start and g end nodes is converted into d·g arcs in the interaction graph. the sign of each arc in the graph model can be obtained from u. the reverse, the reconstruction of the lih from the interaction graph, is not possible in a unique manner underlining the non-deterministic nature of interaction graphs.

time in boolean networks
a logical interaction hypergraph describes only the static structure of a boolean network. however, it is the dynamic behavior of boolean networks that has been analyzed intensely in the context of biological  systems  <cit> . for studying the evolution of a logical system we need to introduce the  time variable t and a state vector x that captures the logical values of the m species at time point t. two fundamental strategies exist to derive the new state vector x from the current state x. in the synchronous model, the logical value of each node i is updated by evaluating its boolean function fi with the current state vector: xi  = fi). synchronous models are deterministic but assume for all interactions the same time delay which is often too unrealistic for biological systems  <cit> . in the asynchronous model, we select any  node i whose current state is unequal to its associated boolean function: xi  ≠ fi). only this node switches in the next iteration. since there are, in general, degrees of freedom in choosing the switching node, this description is non-deterministic. the advantage is that the complete spectrum of potential trajectories is captured, albeit the graph of sequences is usually very dense, complicating its analysis in large systems. the asynchronous description becomes  deterministic if time delays for activation and inhibition events are known  <cit> .

we are now approaching the main part of this section.

logical steady-state analysis
an important characteristic of the dynamic behavior of boolean networks, which is equivalent for both asynchronous and synchronous descriptions, is the set of logical steady states . lsss are state vectors xs obeying xis
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemyaakgabagaem4camhaaaaa@311c@ = fi for all nodes i. hence, in lss, the state of each node is consistent with the value of its associated boolean function and, therefore, once a boolean network has moved into a logical steady state, it will stop to switch and then retain this state.

in the following, we will focus on logical steady state analysis , which suffices for a number of applications, especially for predicting potential functional states in signaling or regulatory networks.

given a boolean network we may enumerate all possible lsss  <cit> . however, this is computationally difficult in large networks. besides, we are often interested in particular lsss that can be reached from a given initial state x <dig>  in some cases, we only know a fraction of all initial node values. for example, a typical scenario in signaling networks would be that initial values from species in the input layer are known , and we would like to know how the  integration and propagation of these input signals generate a certain logical pattern in the output layer. of course, we have to "wait" until the signals reach the bottom of the network and, for obtaining a unique answer, there should be a time point from which the states will not change in the future. this is equivalent to determining the lss in which the network will run from a given starting point.

in a possible scenario for toynet, the initial values of the source species i <dig> and i <dig> might be known to be xi10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakkaegymaedabagaegimaadaaaaa@3152@ =  <dig> and xi20
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakecbagae4nmaidabagaegimaadaaaaa@3153@ =  <dig>  whereas the initial states of all other nodes are unknown ). the states of i <dig> and i <dig> will not change anymore because i <dig> and i <dig> have no predecessor in the hypergraph model. assuming that each interaction has a finite time delay, e must become active and b inactive. from these fixed values we can conclude that c and f will definitely become active  at a certain time point and not change this state in the future. proceeding further in the same way, we can resolve the complete lss resulting from the given initial values of i <dig> and i <dig> ).

the last example illustrated that partial knowledge on initial values, especially from the source nodes, can be sufficient to determine the resulting lss uniquely. however, in general, several lsss might result from a given set of initial values or a lss may not exist at all. for example, if we only know xi20
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakecbagae4nmaidabagaegimaadaaaaa@3153@ =  <dig> in toynet nothing can be concluded regarding a lss . if no complete lss can be concluded uniquely from initial values, there might nevertheless be a subset of nodes that will reach a state in which they will remain for the future. for example, setting xi10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakkaegymaedabagaegimaadaaaaa@3152@ =  <dig> e will definitely become inactivated after some time . since in this scenario nothing further can be derived for other nodes, we would say that xi <dig> =  <dig> and xe =  <dig> are partial lsss for the initial value set {xi10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakkaegymaedabagaegimaadaaaaa@3152@ = 1}. note that these two partial steady states would not change when we specified more or even all initial values.

we have conceived an algorithm which derives partial lsss that follow from a given set of initial values . the iterative algorithm uses the following rules in the logical hypergraph model:

• initial values of source nodes will not change in the future, hence, are partial lsss

• if species i has a proved partial lss of  <dig>  all hyperarcs in which i is involved with its non-negated value have a zero flow

• if species i has a proved partial lss of  <dig>  all hyperarcs in which i is involved with its negated value have a zero flow

• if all hyperarcs pointing into node i have a zero flow, then i has a partial lss of 0

• if all start nodes of a hyperarc have a partial lss of  <dig>  then a partial lss of  <dig> follows for the end node of this hyperarc

• knowing all the positive feedback circuits in the system, we can check whether there is a "self-sustaining" positive circuit where the known initial state values of the involved nodes guarantee a partial lss for all the nodes in this cycle 

in each loop, the algorithm tries to identify new partial lsss  until no further ones can be found. setting initial values in the input layer, this can be envisioned as a propagation of signals through the interaction network until signals reach nodes where the available information is not sufficient to derive a unique lsss.

generally, in logical interaction hypergraphs where the underlying interaction graph has no feedback loop , specification of the initial values of all the source nodes will always result in a unique and complete lss since the signals can be propagated step by step from top-down to the output layer. in general, if all initial values are known for the input layer, non-uniqueness or even non-existence of partial lsss can only be generated by feedback loops. the partial lsss of nodes involved in positive feedbacks do often depend on the initial values of all the nodes in this loop. for example, defining xi20
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakecbagae4nmaidabagaegimaadaaaaa@3153@ =  <dig> we can conclude a partial lsss of zero for e in toynet , but, among others, the values of f, g and o <dig> remain unknown although the only connection to a source node leads via e. the reason is that f and g build up a positive feedback loop which cannot be resolved without knowledge on further initial values. if we know, additionally to xi20
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakecbagae4nmaidabagaegimaadaaaaa@3153@ =  <dig>  that xf0=xg0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemorayeabagaegimaadaaogaeyypa0jaemieag3aa0baasqaaiabdeeahbqaaiabicdawaaaaaa@3510@ =  <dig> then f and g will always keep each other activated so that we can infer a partial lss of  <dig> for f, g and o <dig> . if we have instead xf0=xg0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemorayeabagaegimaadaaogaeyypa0jaemieag3aa0baasqaaiabdeeahbqaaiabicdawaaaaaa@3510@ =  <dig>  we derive a  <dig> for the partial lss of these three nodes. if one of the two nodes f and g has an initial value of  <dig> and the other  <dig>  nothing can be derived since the positive loop might become fully activated or fully deactivated. however, what can be confirmed in these simple examples is that positive feedback loops induce multistationarity. it is noteworthy that continuous dynamic models of networks with positive feedbacks will depend, apart from kinetic parameters, in a similar fashion on initial state values.

in contrast, negative feedback loops are not sensitive against initial values but they can be the source of oscillations, preventing hence the existence of lsss. in toynet we have one negative feedback loop which can potentially generate oscillations, for example, when we set xi10
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbaacbigae8xsakkaegymaedabagaegimaadaaaaa@3152@ =  <dig>  then, c cannot be activated via e. assuming an initial value of  <dig> for c , d becomes deactivated and thus a actived. due to the partial lss of  <dig> for i <dig> we get an activation of b and then of c and d which in turn inhibits a leading in the next round to a deactivation of b, c and d and so on. the logical states within this circuit and downstream of it  will thus never reach a steady state. as shown in  <cit> , oscillatory behavior in logical models corresponds to oscillations or a stable equilibrium  in the associated continuous model, depending on the chosen parameters. negative feedback loops can thus impede predictions on the basis of logical steady states, but they also point to network structures whose parametrization will have great impact on the dynamic behavior.

note that feedback loops do not always prevent predictions on  lsss as can be seen by the example in figure  <dig>  it depends on the given initial values.

such a logical steady state or "signal flow" analysis  as presented herein shares similarities with the established method of metabolic flux analysis  <cit> . in mfa, uptake and excretion rates of cells are measured in order to reconstruct the intracellular flux distribution within a metabolic network. mfa relies on the quasi-steady state assumption, similarly as sfa relies on lss. however, whereas mfa tries to reconstruct the reaction rates along the edges and nothing can be said on the states of the species, the goal of sfa is to determine the steady states of the nodes  from which then the signal flows along the edges follow. it is noteworthy that the calculability of unknown reaction rates in mfa depends only on the set of known rates  <cit> , whereas in sfa the set of given initial states and their respective values determine the unique calculability of  lsss.

applications of logical steady state analysis
the lss analysis introduced herein offers a number of applications for studying functional aspects in cellular interaction networks:

input-output behavior
imposing different patterns of signals in the input layer one may check which species become activated or inhibited in the intermediate and, in particular, in the output layer. this can also be simulated in combination with different initial state values for certain intermediate nodes, albeit this will have an influence on the lss only in connection with positive feedbacks, as shown above.

mutants and interventions
the changes in signals flows and in the input-output behavior occurring in a manipulated or malfunctioning network can be studied by removing or adding elements or by fixing the states of certain species in the network. in toynet, for example, if we want to study the effect of a mutant missing f  we may remove species f from the network  and compute then the partial lsss again. we will see that, independently of a given pattern in the input layer, g and o <dig> will be assigned a partial lss of  <dig>  removing elements often changes not only the values, but also the determinacy of partial lsss.

minimal cut sets  and minimal intervention sets 
the definiton of mcss and miss in logical interaction hypergraphs is similar as in interaction graphs: a mcs is a minimal  set of species whose removal will prevent a certain response or functionality as defined by an intervention goal. in the more general miss we permit, additionally to cuts, also the constitutive activation of certain compounds. two examples in toynet: removing f is a mcs for repressing an activation of g and o <dig>  assuming an initial state of zero for the species in the intermediate layer, adding i <dig> and removing b would be a proper mis for repressing the activation of o <dig> and o <dig>  note that in the interaction graph of toynet, this intervention would not suffice to attack all activating paths leading from the input layer to o <dig> and o <dig> . this example underscores again that mcss and miss in interaction hypergraphs are usually smaller than those obtained from the underlying interaction graph, simply because more constraints are added by logical combinations. however, the determination of mcss, and let alone miss, in logical interaction hypergraphs is combinatorially complicated as in interaction graphs, in particular when negative signs  occur. here, we can only propose a "brute-force" approach where the lss analysis serves algorithmically as an oracle: we check systematically for each combination of one, two, three ... knocked out  nodes in the network how this affects the  lsss, possibly in combination with a given scenario of initial states. from the resulting partial lsss we can decide whether our intervention goal has been achieved or not. to compute only minimal cut or intervention sets, further combinations with a cut or intervention set already satisfying our intervention goal have to be avoided. the algorithm can be stopped when a user-given maximum cardinality for the mcss/miss has been reached.

backward propagation
the methods described above compute partial lsss actually only by forward propagation of signals, but one may also do the opposite, e.g. fixing values in the output layer and tracing back the required states of nodes in the intermediate and input layer using similar rules as for forward propagation.

network expansion methods
there is an interesting relationship between our lss analysis and network expansion methods proposed by ebenhöh et al.  <cit> . network expansion allows for checking which metabolites can in principle be produced from a provided set of start species within a metabolic  reaction network. this is a special case in our logical framework. briefly, metabolic networks are per se hypergraphs and can thus be represented as a lih by using only and's  and or's. hence, no inhibiting interactions exist. we may then put the supplied set of available species in the input layer, set the initial values of all other species to zero and compute then the lss. note that, according to the explanations given above, a complete lss will always be found since all initial values are given and no negative feedback circuit exists. therefore, the computed lss indicates which species can be produced from the input set and which not.

extensions for the logical description of interaction networks
several extensions and refinements of the logical framework can be introduced which allow a more appropriate description of real signaling and regulatory networks:

 as already proposed and applied by thomas et al.  <cit> , the discretization in more than two levels is in principle possible. this mimics the fact, that in reality multiple relevant threshold values for a species may exist. a refined discretization could be relevant, for instance, for a species that activates/inhibits more than one species . another relevant situation occurs if a species can be activated via two paths : the activation via both paths might be significantly stronger than by only one. however, considering several activation levels for a certain species forces one to often consider multiple levels for elements downstream or/and upstream of this species, increasing hence the complexity of the network, and requiring detailed knowledge which is often not available.

 as we have seen, negative feedback can limit the predictability in lss analysis. however, in cellular networks, negative feedbacks become activated often upon a certain time period after an activation event occurs, for example, when gene expression is involved. this might be considered by classifying species and/or hyperedges by assigning a discrete time constant  τ to each element telling us whether this network element appears in an early  or late  state. using the sub-network with all elements having a time constant of τ =  <dig> for the first simulation and then using the computed lsss as initial values for computing the second round  leads often to more realistic results. as in the case of multiple levels, this extension requires a more detailed knowledge about the network under consideration. an example in toynet : we may assume that d is a factor that is transcriptionally regulated by c, thus, arc  <dig> has a time constant of τ =  <dig> and all others have τ =  <dig>  setting the initial values i <dig> =  <dig>  i <dig> =  <dig> and d =  <dig> and computing the lsss for τ =  <dig> activation of c and o <dig> occurs. we can then fix the state of d  and get then a complete deactivation of c and o <dig> 

 in real signaling and regulatory networks, it is sometimes difficult to decide whether arcs from the interaction graph have to be linked by an and or an or in the interaction hypergraph. for example, in toynet, species e is inhibited by factor i <dig> and activated by factor i <dig>  if i <dig> has a very strong inhibiting effect on e we may formulate the hyperarc as done in figure  <dig>  suggesting that i <dig> must not be active for activating e. however, if the interaction strength of both i <dig> and i <dig> with respect to e is at the same level  neither "not or i2" nor "not and i2" would reflect the real situation. indeed, this is a recurring situation in signaling networks, where often a balance between different signals determines the activation of a certain element. at this point it could be helpful to use logical operations that have a partially incomplete truth table. in the latter example we could say that e is active if  and i2) and e is inactive if ). for the other two possible cases, no decision could be made along this hyperedge. of course, modeling uncertainty in this way will limit the determinacy but on the other hand a determined result with this model allows a safer interpretation.

analyzing interaction networks using cellnetanalyzer
we have integrated many of the methods and algorithms described herein in our software tool cellnetanalyzer, which is a matlab package and the successor of fluxanalyzer  <cit> . whereas fluxanalyzer was originally developed for structural and functional analysis of metabolic networks, cellnetanalyzer extends these capabilities consequently to the structural analysis of signaling and regulatory networks. apart from stoichiometric  reaction networks, cellnetanalyzer supports now also the composition of logical interaction hypergraphs using and, or and not connections. whenever needed, the underlying interaction graph can be deduced from the interaction hypergraph. alternatively, by using only or's and not's, arbitrary interaction graphs can be constructed. as in fluxanalyzer, the network model can be linked with externally created graphics visualizing the network. user interfaces  enable data input and output directly in these interactive maps . new functions for graph-theoretical and logical analysis have been integrated into the user menu; the results from computations are directly displayed within the interaction maps or in separate windows. the functions include:

• large-scale computation of all  signaling paths connecting inputs with outputs or of all signaling paths between a given pair of nodes; statistical analysis of these paths

• large-scale computation of all  feedback loops; statistical analysis of these routes

• computation of minimal cut sets for a given set of paths or/and loops

• computation of distance  matrices – separately for positive and negative paths

• large-scale dependency analysis: identification of  activators,  inhibitors and ambivalent factors for a given species; display of the dependency matrix

• computation of  logical steady states from a given set of initial state values

• computation of  minimal cut sets repressing or provoking a user-defined behavior in the logical network

to illustrate the ability of our approach to deal with real complex signaling networks, we have set-up and analyzed in cellnetanalyzer a logical model of t-cell activation , which will be discussed in the next section.

cellnetanalyzer is free for academic purposes .

logical model of t-cell activation
t-cell activation and the molecular mechanisms behind
t-lymphocytes play a key role within the immune system: cytotoxic, cd8+, t-cells destroy cells infected by viruses or malignant cells, and cd4+ helper t-cells coordinate the functions of other cells of the immune system, such as b-lymphocytes and monocytes  <cit> . loss or dysfunction, especially of cd4+ t-cells  has severe consequences for the organism and results in susceptibility to viral and fungal infections as well as in the development of malignancies. the importance of t-cells for immune homeostasis is due to their ability to specifically recognize foreign, potentially dangerous, agents and, subsequently, to initiate a specific immune response that is aimed at eliminating them. t-cells detect foreign antigens by means of their t-cell receptor  which recognizes peptides only when presented on mhc  molecules. the peptides that are recognized by the tcr are typically derived from foreign  proteins and are generated by proteolytic cleavage within so called antigen presenting cells . subsequent to their production the peptides are loaded onto the mhc-molecules and the assembled peptide/mhc-complex is then transported to the cell surface of the apc were it can be recognized by t-cells. the whole process of antigen uptake, proteolytic cleavage, peptide loading onto mhc, transport of the peptide/mhc complex to the surface of the apc and the recognition of the peptide/mhc-complex by the tcr is called antigen presentation and provides the molecular basis for the fine specificity of the adaptive immune response.

the binding of peptide/mhc to the tcr, and the additional binding of a different region of the mhc molecules to so called co-receptors , initiates a plethora of signaling cascades within the t-cell. as a result, several transcription factors – most importantly, ap <dig>  nfat and nfκb – are activated. these transcription factors, in turn, control the cell's fate, e.g. whether it becomes activated and proliferates  <cit>  or not.

in the following, a logical model describing some of the main steps involved in the activation of cd4+ helper t-cells  will be briefly introduced and analyzed . several players, in particular, some whose role and activation is not completely understood, are not included in our model and thus their effects are not considered or lumped with others. additionally, in several, currently still controversial cases, we have assumed one of the possible hypotheses; however, this does not mean that we propose this to be the correct description of the tcr-induced signaling network; we just want to demonstrate the applicability of our approach on a realistic, complex case. it is out of the scope of this paper to analyze the complete, highly-complex signaling machinery of a t-cell.

here, the biochemical steps included in the signaling pathway will be described briefly; for a detailed description we refer the reader to reviews such as  <cit>  and the references therein:

• upon binding of peptide/mhc to the tcr, the first main step in the tcr-mediated signaling cascade is the activation of the src-family protein tyrosine kinase p56lck , although the exact mechanism is still unclear. we have included one well accepted mechanism  <cit> , which probably plays a major role but may be combined with others :

 in resting t-cells, the major negative regulator of lck, the protein tyrosine kinase csk  is bound via a sh2-domain to the constitutively tyrosine phosphorylated transmembrane adaptor protein pag  and consequently inhibits membrane-bound lck by phosphorylating a c-terminal negative regulatory tyrosine residue of the src kinase.

 upon ligand binding, pag is dephosphorylated by a so far unknown protein tyrosine phosphatase, thereby leading to the detachment of csk from pag, and hence releasing lck from the inhibitory effect of csk. the release of csk from pag, together with the activity of the membrane associated tyrosine phosphatase cd <dig> , and the concomitant binding of the mhc molecule to the coreceptor cd <dig>  leads to full activation of lck .

 however, both cd <dig> and the tcr can also be stimulated individually, e.g. by using monoclonal antibodies specifically directed at either of the molecules or using cell lines expressing mutated forms of cd <dig> that cannot bind mhc or cannot transmit signals.

 a regulation of the enzymatic activity of cd <dig> is not included in the model , but, since cd <dig> is an important regulatory element for t-cells, it is included as an input signal, allowing the analysis of its effect and the performance of cd <dig> knock-out experiments.

 after a few minutes, pag is rephosphorylated  <cit> , probably by the src-kinase fyn, and subsequently csk is re-recruited to pag inhibiting lck again.

• activated lck can phosphorylate another member of the src-protein kinases, p59fyn, in the following termed fyn . additionally, lck phosphorylates the so called itams  that are present in the cytoplasmic domains of the tcr-complex . subsequently, the syk-family protein tyrosine kinase zap <dig>  binds to the phosphorylated itams and, if lck is active, becomes activated by lck-mediated tyrosine phosphorylation. thus, during the initial phase of signal transduction via the tcr three tyrosine kinases become activated in a sequential manner, first lck and fyn and then zap <dig>  together these three kinases propagate the tcr-mediated signal by phosphorylating a number of membrane associated and cytosolic signaling proteins.

• active zap <dig> can phosphorylate lat , a second transmembrane adapter protein, at four different tyrosine residues. subsequently, cytoplasmic signaling molecules containing sh2-domains, including the scaffolding proteins grb <dig>  gads, and the lipid kinase plcγ <dig> , can bind to phosphorylated lat. additionally, grb <dig> binds to the nucleotide exchange factor sos , and gads to the adapter protein slp <dig>  the latter, upon phosphorylation by zap <dig>  can bind to the tec-family tyrosine kinase itk. binding to slp <dig> and additional phosphorylation by zap <dig> activates itk.

• for the activation of plcγ <dig>  the following conditions have to be fulfilled: plcγ <dig> is bound to lat, slp <dig> bound to gads, zap <dig> is activated , and itk is active, and hence is able to phosphorylate and thereby to fully activate plcγ <dig>  since all these conditions are needed, a logical and was included in the model . rlk, another lck-dependent tec-family tyrosine kinase, can also phosphorylate plcγ <dig>  hence rlk has a redundant role to itk with regard to the activation of plcγ <dig>  <cit> .

• activated plcγ <dig> hydrolyses phosphatidyl-inositol- <dig>  biphosphate , which is considered an ubiquitous membrane associated phospholipid and is therefore not modeled, thereby generating the second messenger molecules diacyloglycerol  and inositol trisphosphate   <cit> .

• ip <dig> mediates calcium flux. calcium  activates the serine phosphatase calcineurin, which dephosphorylates the cytosolic form of the transcription factor nfat . the calcineurin-mediated removal of phosphate groups allows nfat to translocate to the nucleus and to regulate gene expression.

• the second messenger dag activates pkcθ and  activates the nucleotide exchange factor rasgrp <dig> 

• rasgrp <dig> and sos , can activate ras, which in turn activates the raf/mek/erk mapk cascade.

• pkcθ is involved in the activation of jnk, as well as the essential transcription factor nfκb .

• erk, activated by the ras/raf/mek cascade, activates the transcription factor cre and  the essential transcription factor ap <dig> 

• the e <dig> ubiquitin ligase ccbl is important for shutting off tcr-mediated signaling processes by ubiquitination of key proteins, which are subsequently targeted for degradation  <cit> . one important target of ccbl is zap70; upon tyrosine phosphorylation of zap <dig>  ccbl binds to zap <dig>  leading to zap70's ubiquitination and degradation as well as to the downregulation of the tcr.

from these biological facts we constructed a logical hypergraph model, containing  <dig> nodes and  <dig> hyperarcs, and implemented it in cellnetanalyzer . the model is summarized in table  <dig> 

remarks on the logical t-cell activation model
note that a species can represent different states of a molecule: for example, cd <dig> refers to the availability of cd <dig> to act on its substrates , plcg refers to plcγ <dig> bound to lat, and plcg to the active  form of plcγ <dig>  it is also important to realize that several steps can be lumped together or expressed in higher detail; for example, the formation of the complex lat:grb2:sos is considered as one step, but intermediate steps could be considered. this would be reasonable, for example, if grb <dig> would have other functions apart from binding sos. similarly, the two steps of ccbl's effect  are lumped in the hyperarcs pointing to its targets zap <dig> and tcr.

also note that some of the logical operators could be modeled in a different manner, as in the case of sos and rasgrp for the activation of ras  may be needed for full ras activation).

furthermore, our model describes the full activation of the cascade which leads to proliferation; it is known that e.g. stimulation of tcr with antibodies against its cd <dig> subunits produces a certain activation of the cascade  but does not lead to full activation. therefore, in our model, as an approximation, activated fyn can phosphorylate the itams of the tcr, but is not able to activate zap <dig>  here a model with more than  <dig> levels could be envisioned, where activation of fyn would be enough to produce a weak  activation of zap <dig> and hence the whole cascade downstream, while full activation via lck would activate the cascade to a level  <dig> .

the model has two extracellular input signals . additionally, an input arc for cd <dig> is included because the regulation of cd <dig> is not modeled, as described above. therefore, mathematically speaking, the model contains  <dig> elements in the input layer. on the other hand, the output layer contains  <dig> transcription factors .

as explained in the theoretical section, one reasonable way to deal with the effect of negative feedbacks is to consider the different time scales of the processes. hence, since pag rephosphorylation takes place after a few minutes  <cit> , and ccbl mediated degradation is an even slower process, we can define several scenarios:

-τ =  <dig>  resting-state ,

-τ =  <dig>  early-events , no feedbacks), and

-τ =  <dig>  mid-time events , feedbacks). here, the state of the feedback loops  will depend on the state of the respective activators at τ =  <dig>  this can be considered either by fixing manually the state values of ccbl and pag/csk for τ =  <dig> upon inspection at τ =  <dig>  or by inclusion of a positive self-loop.

we use the term mid-time event since one can also envision a long-term scenario , where slow gene expression mechanisms  are active.

analysis of the t-cell signaling cascade
in the interaction graph underlying the hypergraphical model, there are  <dig> paths from the input to the output layer and  <dig>  feedbacks loops, which are listed in table  <dig>  ccbl is involved in most  of the loops, in accordance to its important role in the regulation of the signaling cascade. not surprisingly, since the only feedback mechanisms included are the effect of ccbl on zap <dig> and tcr and of fyn on pagcsk, no loop goes downstream of zap <dig>  and a suitable minimal cut set attacking all the feedback loops would consist of fyn and ccbl.

we further analyze the interaction graph by computing the dependency matrix . since downstream of zap <dig> there are only positive connections , all the elements downstream of zap <dig> are total activators  with respect to the transcription factors in the output layer, that is, they can have only positive effects. therefore, for these species, a negative intervention via e.g. inhibitors or irna would unambiguously lead to a decrease in the activation levels of the transcription factors. for considering the early-events scenario , we recompute the dependency matrix where the action of fyn on pagcsk and of zap <dig> on ccbl is not considered . then, all inputs  are total activators for all species in the output layer. this is not the case when the feedbacks become active : tcrlig and cd <dig> become then ambivalent factors, i.e. have negative connections to the sink species, whereas cd <dig> is still an activator but no longer a total one, as it is now connected to a negative feedback loop.

a further analysis of the interaction graph provides that there is no minimal cut set containing only one  species whose removal would interrupt all the positive paths to all the outputs. in fact, all minimal cut sets satisfying this intervention task would contain at least two species, for example mcs <dig> = {rlk, zap70} and mcs <dig> = {lat, plcg}. the latter examples agree only partially with biological knowledge: removal of mcs <dig> or mcs <dig> would indeed prevent the activation of any output, however, from experimental observations one knows that for example lat alone is essential in tcr signaling  <cit> . thus, mcs <dig> would not be minimal.

interpreting the hypergraphical  model  reveals that, due to several and connections, the additional removal of plcg would indeed be redundant because plcg can anyway not be activated if lat is removed. this example illustrates the limitations of graph-based methods and we computed therefore the  minimal cut sets from the logical interaction hypergraph revealing that not only lat, but also zap <dig>  lck, tcr, the ligand for the tcr, tcrphosp, cd <dig> and cd <dig> are essential for full t-cell activation. this result is in good agreement with the current knowledge: the t-cell receptor, its ligand, and the ability of the receptor to get phosphorylated are required for t-cell activation; and cd <dig>  and cd <dig>  are required for the activation of the essential kinase lck.

next we performed a logical steady state analysis for the different time scales given above. these simulations provide a rough approximation to the dynamics of the signaling cascade. figure  <dig> shows the particular situation in the early-event scenario  as displayed in cellnetanalyzer. figure  <dig> summarizes the logical steady state values of important components obtained for the three different time scales. the blue line shows the case for tcr+cd4+cd <dig> stimulation, whereas the dashed red line represents the case when only tcr+cd <dig> is stimulated in the input layer. similar analysis can be performed using different scenarios, for example, in a cell where a certain element has been knocked-out.

CONCLUSIONS
in this contribution we have presented a collection of methods for the functional analysis of the structure of cellular signaling and regulatory networks. as discussed in the theoretical sections, different abstractions and formalisms can be used to encode and analyze the topology of interaction networks. the simplest representations are interaction graphs, which are restricted to one-to-one relationships but do yet capture important functional and causal dependencies in the system under study. we have shown that arguably the most important features of interaction graphs, namely feedback circuits and signaling  pathways, can systematically be identified by the concept and algorithm of elementary modes known from stoichiometric  network analysis. feedback cycles are mainly responsible for the dynamic behavior of the system, whereas signaling paths reveal network-wide dependencies between species. in some cases, analysis of feedback cycles and signaling paths may allow one to predict unambiguously the qualitative effect upon perturbations of certain species . falsification experiments may then be used to identify missing or incorrect interactions. knowledge on all the signaling paths also facilitates a systematic identification of optimal intervention strategies. again, a concept known from metabolic networks, minimal cut sets, can be adapted and employed here. however, inhibitory actions make this kind of analysis more complicated and we therefore generalized the formalism of minimal cut sets leading to minimal intervention sets.

the applicability of tools from metabolic network analysis to interaction graphs relies on the fact that metabolic networks are hypergraphs, which in turn are generalizations of graphs. in our opinion, the importance of hypergraphs in structural analyses of cellular interaction networks has been underestimated. in fact, whenever and-connections occur in interactions of species, hypergraphical approaches become essential.

boolean networks describe interaction networks in a more constrained and deterministic manner than interaction graphs, enabling discrete simulations. herein we have demonstrated that signed directed hypergraphs are capable to represent the logical structure of any boolean network. the hypergraphical coding of boolean networks, which relies on the sum-of-product representation of boolean networks , has several advantages: it is rather intuitive, it mostly corresponds to the underlying molecular mechanisms, and it is easy to store and to handle. a hypergraphical representation of a boolean network also establishes a direct link to the corresponding  interaction graph which can easily be derived from the hypergraph. finally, it facilitates a logical signal flow  analysis in boolean networks which, as demonstrated in this report, is useful for studying and predicting the qualitative input-output behavior of signaling networks with respect to a given, possibly incomplete, set of initial state values. this can be achieved here without an explicit enumeration and/or simulation of all possible trajectories.

in general, boolean networks rely on stronger assumptions and knowledge than interaction graphs and a pure logical description of all interactions is not always possible. we have suggested extensions of the boolean framework, such as incomplete truth tables of logical operations, to handle these problems.

as pointed out by many authors  the logical description and analysis of large signaling networks has a strong relationship to electrical circuit analysis; however, there still seems to be a large potential in employing theoretical and software tools from electrical engineering and boolean logic for investigating interaction networks. signal flow analysis as introduced herein might be another step in this direction.

describing signal and mass flows equivalently as interactions, as done herein, offers high flexibility and enables one to integrate several types of cellular networks  into one framework. however, the higher level of abstraction comes with the price that some molecular mechanisms are not always precisely represented, as, for instance, the stoichiometric coefficients in mass flows.

the potential of the introduced methods were demonstrated on a model of a small part of the signaling machinery of t-cells. the size and complexity of the model was chosen so that the methods could be tested on a case study of real size and complexity, while at the same time the results could be  intuitively understood and proofed. if enough information is available, similar models could be set up for any other signaling network.

certainly, these tools will be especially useful in larger interaction networks. our current and future work aims to expand and subsequently analyse the t-cell model, with hopes that further understanding of this complex network can improve current knowledge about important illnesses, such as autoimmune diseases and leukemia. this is certainly a challenging task, but the potential described here makes it a worthy endeavour.

availability and requirements
for academic purposes,cellnetanalyzer can be obtained for free via the website



note that cellnetanalyzer requires matlab® version  <dig>  or higher.

list of abbreviations
lih: logical interaction hypergraph

lss: logical steady state

mcs: minimal cut set

mis: minimal intervention set

authors' contributions
sk elaborated the framework and the methods for studying interaction graphs and logical interaction hypergraphs and implemented algorithms in cellnetanalyzer. jsr mainly constructed the logical model of t-cell signalling and he also contributed to the methods' development. jl and ls assisted in the construction of the t-cell model. edg initiated the project on methods for structural analysis of signaling networks. sk and jsr prepared the manuscript jointly. all authors have read and accepted the manuscript.

