BACKGROUND
the advancements in high-throughput technologies such as dna sequencing, linkage analysis, association studies and expression arrays have fostered the research towards an effective personalized medicine. to this end, the integration of pieces of evidence of different nature derived from diverse data sources is required, together with algorithms able to mine these data and identify novel biological facts of relevance. networks have been shown to be an useful representation for combining heterogeneous biological data. currently, there is a huge availability of large molecular networks such as protein-protein interaction  networks, which model interactions between proteins. many methods have been proposed in the literature to represent and mine knowledge from biological networks  <cit> . for example,  <cit>  proposes to apply text-mining in omim to generate a similarity network for human diseases and  <cit>  builds a gene network based on the results of microarray experiments. these approaches have led to the emergence of new methods that exploit and integrate different data sources into networks in a variety of ways  <cit> . inferring new knowledge from existent networks is usually based on "guilt-by-association"  <cit> . this extensively validated principle states that biological entities which are associated or interacting in a network are more likely to share a common function. this principle allows to infer new relationships from already known interactions.

in this context with massive amounts of highly interconnected data is where prioritization methods are required. prioritization tools are based on computational approaches that use information retrieved from diverse sources in order to obtain ranked lists of candidate biological elements  related with a certain target element. gene-disease prioritization, in which genes are ranked according to their relevance to a disease of interest , is the most popular prioritization task, and many methods have been proposed in the recent literature to accomplish this task  <cit> . most of these methods focus on the analysis of phenotype and ppi networks for gene-disease prioritization. these methods weight the arcs connecting two proteins or phenotypes according to a measure of the similarity between them. cipher  <cit>  computes correlation coefficients based on linear regressions of phenotype and ppi profiles. prince  <cit>  computes the relevance of a gene by using network propagation methods. rwrh  <cit>  scores genes and diseases using a random walk approach on ppi and phenotypes networks. rcnet  <cit>  proposes a methodology for prioritization of candidate genes based on propagating node values and measuring the degree of correlation between two sets of nodes, one in the ppi/gene network and one in the phenotype network. network-based gene-disease prioritization methods have been proven to provide better results than previous approaches  <cit> .

apart from gene-disease prioritization, other methods have been proposed to perform a prioritization of other biological entities. domainrbf  <cit>  performs a prioritization of protein domains for diseases using bayesian linear regression. this method assumes a key role for protein domains in diseases as shown by previous studies  <cit> . domains are basic structural and functional units of proteins, which in turn are composed of multiple structural domains, each one closely linked to a specific function. although domainrbf exploits the functional role of protein domains in phenotypes, it does not explore the simultaneous integration of ppi, domain and phenotype networks for gene or disease prioritization. despite the good performance obtained by the mentioned prioritization methods, they have clear limitations. first, existing network-based prioritization methods do not allow to consider more than two types of networks for performing the prioritization . only non-network-based methods have succeeded in integrating more than two different types of entities for prioritization. for example, endeavour  <cit>  performs an independent prioritization of different entities using multiple heterogeneous generic data sources which are integrated on a single global ranking using order statistics. however, previously mentioned network-based methods have been shown to outperform this method using a lower amount of data sources  <cit> .

second, existing prioritization methods are strongly tailored to a specific domain of interest . in our opinion, these two drawbacks dramatically limit the applicability of these methods to other prioritization tasks and do not allow to improve the results by integrating information about other types of related entities.

in this work we present prophnet, a generic prioritization method that outperforms previous methods by integrating and propagating information in an arbitrary number of heterogeneous data networks. our method is generic since it allows to prioritize biological entities of any type with respect to biological entities of another type. therefore, the user can customize the goal of the prioritization task . furthermore, the user is not restricted to the use of only two entities, and can integrate as many biological networks as desired.

to compare the results obtained by prophnet with those obtained by state-of-the-art methods, such as rcnet and domainrbf, we applied prophnet to the prioritization of genes-diseases and domains-diseases, respectively, on a network built as the integration of protein domain, ppi and phenotype networks. prophnet measures the influence of a query set of biological entities of a certain type  in a target set of entities of another type . to this end, the algorithm uses a graph representation as shown in figure  <dig>  in this representation, each node corresponds to a biological entity of a domain of interest , and the arcs between two nodes are labelled with a weight representing the strength of the relationship between the connected entities. these weights are derived from different databases and other biological sources and their interpretation varies depending on the type of the connected entities and the final goal of the study . in our algorithm, the arc weights for each network are compiled in an adjacency matrix. the nodes of the graph are also labelled with a value , representing the degree of association to the query or the target set. there are two kinds of networks: a) networks representing interactions or similarities between entities of the same type, and b) networks representing interactions or similarities between entities of different type. type b) networks are used to interconnect type a) networks.

the method we propose allows to propagate node values through paths along different data networks  in order to derive new information from the existing knowledge. this value propagation is performed in two directions. first, values are propagated within and between networks, through all the possible paths connecting the query set network to the target set network . second, values are also propagated within the target set network, starting from the target nodes. both propagation processes follow the principle that the higher the weight of the arc between two entities is, the more similar the value of these two nodes should be. therefore, these two label propagation processes derive a final graph in which the value assigned to a node represents its degree of relation with the query or target set, respectively. finally, we measure the degree of relationship between the query and target sets by computing the correlation between the values assigned to the nodes in the target network and those assigned to their neighbour nodes in other networks, as proposed in previous works with good results for different prioritization tasks  <cit> . this process is explained in detail in the following section.

this article is organized as follows. the method and the data sources are described in detail in section methods. to validate the proposed methodology we integrate protein domain, ppi and phenotype networks and compare the results to those obtained by rcnet for gene prioritization and domainrbf for domain prioritization. these results are presented in the results section and show a significant improvement in terms of sensitivity and specificity. prophnet is also applied to several case studies  to identify putative candidate genes involved in these diseases. the results of these tests can be found in the section case studies. finally, some conclusions and future work are presented.

methods
let d be a set of graphs  defined as di =  for i =  <dig>  ..., n, where vi is a set of vertices which represent biological entities from a specific domain satisfying vi ∩ vj = ∅, ∀i, j such that i ≠ j. each node vik  in di is labelled with a value Ψ, initially set to zero, that indicates the degree of relationship to the query or target set, depending on the network vik belongs to. ei is a set of weighted undirected arcs representing relationships, similarities or interactions between elements of vi. the values of the nodes change while the weights of the arcs remain constant during the entire process. let r be a set of graphs defined as rij = , where cij is a set of weighted undirected arcs representing relationships, similarities or interactions between elements of vi and vj, with i, j ∈  <dig>  ..., n and i ≠ j. therefore, rij describes the relationships between the biological entities from two different networks: di and dj.

we define the heterogeneous global graph g as g = . let the graph dq ∈ d be the query network and let dt ∈ d be the target network. given the global graph g, our goal is to find the degree of association between a set of nodes q ⊆ vq called the query set and a set of nodes t ⊆ vt called the target set.

the initial values for the nodes in the query set are set to  <dig>  =  <dig> for all nodes vqi ∈ q), while the rest of the nodes are set to  <dig>  =  <dig> for nodes vqj ∈ vq - q). the target network is initialized in the same way, but considering the nodes in vt and t. the rest of nodes in g are initially set to  <dig> 

as we explain below in more detail, our method performs a propagation within networks pumping information between nodes. this process is based on the flow propagation algorithm  <cit> , which uses the normalized laplacian matrix to propagate labels between nodes in a network. the normalization takes into account the degree of each node to limit the bias toward annotations from high-degree nodes. this normalization is also critical for convergence. the flow propagation algorithm is similar to a random walk with restart, basically differing in the normalization process that guides the propagation  <cit> .

let n be the non-normalized adjacency matrix of a network in g. since g =  and graphs in r are bipartite , let assume n has r rows and c columns. a normalization for n can be computed as:

 norm=dg1ndg <dig>  

where dg <dig> and dg <dig> are diagonal matrices where each component is defined as:

 dgjj1=1∑k=1cnjk 

for j =  <dig>  .., r, and

 dgkk2=1∑j=1rnjk 

for k =  <dig>  .., c.

we define m = {mi | mi = norm where i =  <dig>  .., |d|} as the set of normalized squared adjacency matrices of graphs in d. similarly, we define s = {si | si = norm where i =  <dig>  .., |r|} as the set of normalized adjacency matrices of bipartite graphs in r.

let pi = {pi <dig>  ..., pij, ..., pil} be a path composed of networks from d connecting dq and dt, satisfying pij ∈ d, pi <dig> = dq, pil = dt and pij ≠ pik, ∀j ≠ k. to compute the degree of association between the query and target sets, we first propagate values from the query set within the query network, and from the target set within the target network, as described in section value propagation inside networks. next, we identify all the possible paths p = {p <dig>  ..., p|p|} connecting the query network to the target network. figure  <dig> shows an example of a global graph g composed of five different networks or domains, with three different paths connecting the query network to the target network. since the number of networks is usually reduced, the computation of all the paths connecting dq and dt can be accomplished by a brute force algorithm. for each computed path pi, we propagate information from pij to the following network pi in the path, as described in section value propagation between networks. then we propagate information within the network pi, where j =  <dig>   <dig>  ..., l -  <dig>  the propagation continues until it has been performed within the network pi in the path.

finally, after performing this propagation through each path in p, we correlate the values of the nodes in dt against the values of the nodes in pi directly connected to those in dt, for all the paths pi ∈ p. this step is described in section value correlation between networks. the obtained correlation value determines the degree of relationship between the query set and the target set.

although measuring the degree of relationship between the query and target sets by correlating node values seems less intuitive than continuing the propagation of node values from the neighbours networks to the target nodes, the former approach has been shown to perform better than the latter . therefore, it was selected as the measure of similarity in our method. this approach was proposed in previous network-based prioritization methods with good results for different prioritization tasks  <cit> . in order to accomplish prioritization tasks, in which only the query set q ∈ vq and the target network vt are provided by the user, we embed this pipeline into an iterative process to score each node in the target network according to its relationship with q. this process is described in section prioritization process.

value propagation inside networks
several propagation methods have been proposed to compute the similarity or distance between nodes within a graph  <cit> . methods based on local neighbourhood or shortest paths fail in capturing global interactions, in contrast to global methods that take into account the entire network topology  <cit> . prophnet implements a flow propagation approach  <cit>  that uses a network's global information to perform a propagation of the values assigned to the nodes within this network. to carry out this propagation process within a network dk, we first define the prior information set z as those vertices vkj with Ψ ≠  <dig>  therefore, the prior information set matches q when propagating values within the query network, and the prior information set matches t when propagating values within the target network. the value Ψ of each node vkj in z  is normalized as:

 Ψ=Ψ∑vkx∈vkΨ 

let x <dig> be a vector compiling the values initially assigned to each node in dk, and x ^ a vector with the values assigned to each node in dk after performing the propagation within dk. to calculate x ^ we need to solve the following optimization problem:

 minx ^ ∑i,jmki,j2+1-αα∑i <dig> 

where mk is the network's normalized adjacency matrix. the closed-form solution of this equation is:

 x ^=-1x <dig>  

this linear system can be solved exactly. however, there exists an iterative algorithm for solving this system which is faster for large networks  <cit> :

 xi+1=αmkxi+x <dig> 

with i starting from  <dig>  this algorithm implements an iterative process where each node propagates its node value to its neighbours, based on the weights of the arc connecting them. the parameter α ∈  <cit>  determines the importance of the prior information set.

in order to further speed up this iterative process, we define the following stopping criterion: |xi - xi+1| ≤ κ. this allows to stop the iterative process when it has almost converged, without the need of full convergence. experimental tests  prove that the best performance is obtained for κ ≤ 10- <dig> 

for convenience, we refer to x ^kj as the vector obtained after convergence, where each component represents the value assigned to each node in the network dk after performing the propagation within dk, as part of a propagation process through the path pj. since the propagation values within the query and target networks are not affected by the propagation processes through the paths in p, we define x ^q as the vector obtained after propagating nodes values within the query network, and x ^t as the vector obtained after propagating nodes values within the target network.

value propagation between networks
given a network di whose vertices are already assigned a value according to x ^il, we further propagate these values to the next network dj in the current path pl, with dj ≠ dt. since di and dj are connected by rij, the information is propagated from the nodes of di to the nodes of dj across the edges of rij by assigning each node vjk from dj a value computed as the mean of the nodes from di the node vjk is connected with. this expression is formalized as:

 Ψ=∑vix∈neigiΨ|neigi| 

where neigi is the set of nodes from di that are directly connected to vjk according to rij. a thresholding step is applied to this propagation process, since detailed experimentation suggested that nodes with very low values add noise to the process and reduce the performance . to this end, a parameter γ ∈ ⌉ lowest node values from dj after the propagation are updated to Ψ =  <dig>  the rest of the node values are not changed.

value correlation between networks
after the propagation process through one path finishes, the nodes in the networks which are adjacent to the target network present values that determine their degree of relationship to the query set. also, the nodes in the target network are assigned a value that determines the degree of relationship with the target set. we can indirectly measure the relationship between the query set and the target set by measuring the similarity between the values of the nodes in the target network and those that are directly connected to them in adjacent networks. this can be calculated by simultaneously correlating these node values as derived by the propagation processes through all the different paths. for each path pi with length l a vector x ¯i is computed as:

 x ¯i=sax ^i 

where sa is the normalized adjacency matrix of r and x ^i is the vector obtained after propagating values inside the network dl- <dig> 

since the values of the target network after the propagation process are represented by x ^t, we define the vector t ¯ as:

 t ¯=concat︷|p| times 

and the vector x ¯ as:

 x ¯=concat∀i∈ 

where concat means concatenation. both x ¯ and t ¯ are the same size.

finally, the correlation value which derives a measure for the relationship between the query and target sets is computed as:

 s=corrx ¯,t ¯ 

where corr is pearson's correlation.

prioritization process
in order to obtain a prioritized list of targets for a query set of nodes, we have to follow an iterative approach. for each target network node vte, we set it as the target set t and compute the correlation value s as described in the previous section . once this correlation value has been computed for each target network node, these nodes are sorted in decreasing order according to their se value. target nodes with high values of se are supposed to be strongly related to the query set. the entire algorithm is described in the pseudocode algorithm 1

algorithm  <dig> prophnet

prioritize

   propagate values within dq

   p: compute the list of paths from dq to dt in g

   for each path pi = {pi <dig>  ..., pij, ..., pil} in p do

      for each network pij in the path pi from pi <dig> to pi do

         propagate values from pij to pi

         propagate values within pi

      end for

      store the values of di after propagation through path pi as x ^i

   end for

   for each entity e ∈ vt in the target network dt do

      set target set t = {e}

      propagate values within dt

      compute correlation coefficient se using the stored x ^i for each path pi.

   end for

   l: sort all entities e ∈ vt by their se values in descending order

   return l

prioritization example
to facilitate the understanding of the algorithm, the figure  <dig> shows a step-by-step representation of the prophnet propagation processes. this figure shows two examples of a prioritization task involving three networks or domains, with the elements of each network represented by circles, squares and diamonds, respectively. for simplicity and clarity, node values are represented using a grey color scale  and the weight of an arc is represented by its line width. in the two examples, the prioritization task involves the same target set but different query sets. the query and target sets contain only one element in both cases, which is initially  set to  <dig> . node values are propagated from the query nodes within the query network , and from the target nodes within the target network . there are two paths connecting the query network and the target network in these examples . values from the query network are then iteratively propagated to adjacent non-target networks. since the query network is directly connected to the target network in one of the paths, this step  is only applied to the path which includes an intermediate network . then, the propagation is performed within this intermediate network . this propagation continues until all the networks in all the paths connecting the query and target sets have been reached. finally, we measure the strength of the connection between the query and the target sets as the correlation between the values assigned to the nodes in the target network and the values assigned to their neighbours from other networks .

algorithm complexity
the time complexity of the algorithm shown in the pseudocode algorithm  <dig> can be determined by aggregating the time complexity of each task it is composed of. let n be the number of nodes in a network and m the number of networks in the global graph g. the task of propagating values within a network is o. the propagation of values between networks is o. the computation of the correlation coefficient for one path is o. the number of paths is bounded by m! and their length by m. therefore, the computational complexity of prophnet is bounded by o. despite this high complexity, typical execution times are a few seconds since the value of m is usually small in real applications. a summary of prophnet execution times and memory usage for the experiments shown in this paper can be found in additional file  <dig> 

RESULTS
as two specific case studies, we have applied prophnet to prioritize candidate genes and protein domains associated to diseases. prophnet has been compared with rcnet for gene-disease prioritization and with domainrbf for domain-disease prioritization, since these methods were recently proposed and reported better results than previous methods  <cit> . prophnet was run on a global graph composed of diseases, genes and protein-domains interconnected networks, while rcnet and domainrbf were run on a genes-diseases and domains-diseases networks, respectively, as proposed by their authors. it is important to note that the prophnet base case execution using only the gene and disease networks would obtain the same results than rcnet. the data sources used are described in detail in section data sources.

we tested the performance of the different methods on several leave-one-out  cross-validation experiments and for predicting new associations recently added to omim. to measure the performance of the different prioritization methods, we used receiver operating characteristic  curves. roc curves plot the true positive rate vs. the false positive rate at various threshold settings. the area under the roc curve  was also computed. finally, the average ranking position of the true target in the prioritized lists obtained by each method was also computed and normalized by dividing by the total number of elements in the list . we also computed p-values for comparing the average ranking values using two-tailed t-tests and the bonferroni correction.

for the results reported for prophnet, α was set to  <dig> , the error threshold in the flow propagation was set to κ = 10- <dig> and γ =  <dig> . for rcnet, we set the parameters to the values providing better results according to the authors: α =  <dig> , β =  <dig>  and κ = 10- <dig>  <cit>  and used the enumeration-correlation based version.

data sources
the disease phenotype network has been extracted from omim  <cit>  using text mining techniques as described in  <cit> . also, to perform a fair comparison of the results to those reported by rcnet, we used a version of omim from may,  <dig>  <cit> . the obtained disease network contains  <dig> omim disease phenotypes. the arcs are weighted with a value in the range  <cit> . this weight measures the similarity between two phenotypes as the inverse of the distance between the feature vectors obtained by counting the occurrences of each term from the anatomy and disease sections of the medical subject headings vocabulary  in the description text for the corresponding entries in omim. the obtained disease network contains a total of  <dig>  weighted interactions.

the gene network has been obtained from the human protein reference database . this protein-protein interaction network contains  <dig>  unique interactions between  <dig>  proteins. the network connecting genes and phenotypes has been extracted directly from omim  obtaining  <dig>  relationships.

the domain network has been derived from domine  <cit>  and interdom  <cit>  containing  <dig>  unique relations between  <dig>  domains. relations between domains and genes were extracted from pfam  <cit> . relations between domains and phenotypes have been extracted from pfam and annotations of nssnps in the uniprot database  <cit> .

the three networks  have simultaneously been used in the experiments performed with prophnet. rcnet was executed using only the gene and disease networks, since this method does not allow to integrate more than two networks. domainrbf was run on the domain and disease networks due to the same limitations.

gene-disease validation
to check whether the prioritization methods rcnet and prophnet were able to retrieve a known relationship between a gene and a disease, we performed a leave-one-out cross-validation using gene-phenotype relations from omim. for each gene-phenotype relation reported in omim, we run the two algorithms on a network in which the explicit arc connecting the gene and phenotype of interest was removed. the gene of interest was set as the query set and the methods were asked to rank all the phenotypes associated to this query set.

the obtained roc curves are shown in figure  <dig>  auc values and avg. rank values for the target disease are displayed in table  <dig>  we can see that prophnet outperforms rcnet in this test, ranking the target phenotype in a significantly higher position , with lower standard deviation and obtaining better auc values. the high difference in terms of auc value  also suggests that the achieved improvement is not due to prophnet prioritizing a little better those targets poorly prioritized by rcnet, but these targets being prioritized at the top by our method while they are poorly prioritized by rcnet. it is also important to note that, although a high percentage of the cases were prioritized in the top of the ranking, we found some results that were really worse ranked by both methods, significantly increasing the mean ranking and setting it far from the top  <dig> position. this also applies to experiments described in the following two sections.

performance comparison for leave-one-out cross-validation prioritization experiments using omim.

gene-disease validation with new omim associations
another validation that we have performed is predicting new associations between phenotypes and genes in  <dig> case studies from new entries added to omim between may  <dig> and may  <dig>  since these relationships are not reported in the datasets used in our study. each case study consists of a phenotype and a set of genes  associated with it. results of the comparison can be seen in figure  <dig>  auc values are shown in table  <dig>  the results show that our algorithm clearly outperforms rcnet  predicting new relationships not explicitly represented in the data network.

domain-disease validation
to prove that our algorithm not only prioritizes genes, but can prioritize other biological entities, we have performed a leave-one-out domain-disease validation test. for each relation between a domain and a phenotype in our datasets, we run the prioritization methods on a global network in which the direct arc connecting the protein domain and phenotype of interest was removed. the domain of interest was set as the query set and the methods were asked to rank all the phenotypes associated to this query set.

our method has been compared with domainrbf for this task, since this method has been recently proposed for domain-disease prioritization and builds the phenotype-domain network using the same data sources considered in this study. we set the parameters of domainrbf testing for best performance. a diffusion kernel was selected to compute distances in interactions matrices. b <dig> and v <dig> were set to  <dig> and  <dig>  respectively.

results show that our method significantly improves the results provided by domainrbf for disease-domain prioritization . the highest difference in performance is around auc 10%, which suggests that our method prioritizes more target phenotypes in the top of the ranking. roc curves for this comparison can be seen in figure  <dig> 

robustness analysis
we carried out several experiments to test the robustness of prophnet to parameter variation. first, we checked that varying the parameter α, which controls the importance of prior information in label propagation, does not significantly affect performance, as previous works suggested for other methods  <cit> . values ranging between  <dig>  and  <dig>  reported similar performance for prophnet, but best result were obtained with α set to  <dig> .

second, we tested the impact of varying the parameter γ in the results. γ was used to limit the propagation of noise in the label propagation between different networks. the experiments showed that, although for any value of γ  prophnet reported a good performance, the best results were obtained for γ in .

results from these experiments can be found in additional file  <dig> 

case studies
in order to show the applicability of the proposed method on real case studies, we have used it for gene-disease prioritization of some multifactorial disorders such as alzheimer disease, diabetes mellitus type  <dig> and breast cancer, using the data sources described in section data sources. parameters were set to those which reported better results in the validation experiments . a list of the genes ranked in the top positions for each disease are shown in table  <dig>  together with their assigned score. a detailed discussion about the role of these genes in the associated diseases can also be found in additional file  <dig>  a full list can be obtained by running the tool at the prophnet website.

gene symbol, rank position and assigned score for genes in the top of the ranking for each case study. entries marked with asterisks were directly connected by an arc to the disease of interest in the data network.

results for alzheimer disease
our method was used to prioritize genes related to alzheimer disease . table  <dig> shows genes ranked in the top positions which were previously known  to be connected with alzheimer, such as app and psen <dig>  furthermore, new relationships not explicitly reported in omim are suggested by analysing other genes in the top  <dig>  for example, mapt was ranked 3th in the obtained prioritized list. this gene provides the instructions for making a protein called tau that can be found throughout the nervous system  so it has been associated with alzheimer  <cit> . psen <dig>  with known relations to alzheimer type  <dig>  <cit>  was ranked 4th. trem <dig> was ranked 5th, suggesting an important role in alzheimer as shown by some population studies  <cit> . hd/htt was ranked 6th, and although this gene has not yet been directly associated with alzheimer, it has been shown to affect huntington's disease  <cit> . more details about the other genes in the top  <dig> are provided in additional file  <dig> 

results for diabetes mellitus type 2
our method was used to prioritize genes related to diabetes mellitus  type  <dig> . genes previously known to be connected with the disease, according to omim records, are: irs <dig>  insr, ipf <dig>  slc2a <dig>  ppp1r3a and tcf <dig>  all ranked in the top  <dig> of the obtained prioritized list of genes. new putative candidate genes were discovered in the top  <dig>  pln  was not related to diabetes in the corresponding omim entry, however  <cit>  reports a role of pln in diabetic cardiomyopathy. hadhsc was ranked 8th since it has been related to hyperinsulinemic hypoglycemia  <cit> . the inferred relationship between diabetes and lepre <dig>  cannot be derived from the published literature and further studies are required to study the possible connections of this gene to dm. other interesting genes were ranked high, such as kcnj <dig>  ranked 30th, which presents polymorphisms that confer susceptibility to diabetes mellitus type  <dig>  <cit> ; or abcc <dig>  ranked 37th, whose mutations increase the risk of diabetes as suggested by  <cit> .

results for breast cancer
we performed a prioritization for breast cancer . previously known genes related to this disease according to omim are: brca <dig>  rad <dig>  brca <dig>  nbn and pik3ca, all included in the top  <dig> returned by prophnet for this disease.

new relations not explicitly represented in the data network were discovered in the top ranking. defects in msh <dig>  can cause different types of cancer as pointed out by  <cit> . rb <dig>  and tp <dig>  act as tumour suppressors  <cit> . elac <dig>  has not been associated with breast cancer but with prostate cancer  <cit> . rad51ap <dig>  is closely related with rad <dig>   <cit> . rad54l  plays an important role repairing and recombining dna in mammalian cells  <cit> . fancd <dig>  interacts with the brca <dig> and brca <dig> genes in the dna repair process to reduce the risk of breast cancer  <cit> . atm  has been associated with the disease in various studies  <cit> . other relevant genes were found below in the top list, such as chek <dig> , also associated to propensity to suffer breast cancer as shown by  <cit> .

CONCLUSIONS
in this paper we have introduced prophnet, a novel network-based method that allows to accomplish any prioritization task from a network representing the corresponding data interactions. our method is flexible and can be run on a graph composed of an arbitrary number of data networks representing biological entities of different type. this paper illustrates how to run prophnet to perform gene-disease and domain-disease prioritization tasks, and provides experimental evidence that prophnet outperforms other prioritization algorithms specifically designed for these tasks. a prophnet web application has also been developed as a result of this work .

the results obtained by prophnet on real case studies on alzheimer, dm and breast cancer show the potential of the method to suggest putative candidate genes to be involved in a disease. a detailed analysis of the literature also allowed us to validate the results provided by the algorithm, since many of the top ranked genes were already known to be related to the diseases. we consider that prioritization methods are useful for assisting scientists at early research stages and to formulate novel hypotheses of interest.

the extensive experimentation also allowed us to study the indirect influence of considering protein domains for the prioritization of candidate genes and diseases. results show that the addition of domain interactions produces an obvious improvement with respect to existent algorithms, revealing the importance of this source of information . in the future, one of our main goals is to see how our method behaves in other prioritization problems and using different entities and sources of data not covered in this work. furthermore, we plan to study in more detail the quality of the datasets and their influence on performance, and apply new methods of propagation to try to improve the results.

list of abbreviations used
auc: area under the curve; dm: diabetes mellitus; loo: leave-one-out; ppi: protein-protein interaction; roc: receiver operating characteristic.

competing interests
the authors declare that they have no competing interests.

authors' contributions
vm developed the prophnet prioritization algorithm, carried out the experiments and wrote the paper. cc and ab guided and supervised the project and participated in writing the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1
performance comparison using propagation and correlation. performance of the obtained results using correlation or propagation in the last step of the algorithm.

click here for file

 additional file 2
robustness analysis results. robustness test results varying γ threshold.

click here for file

 additional file 3
prophnet execution times and memory usage. prophnet execution times and memory usage for the experiments reported in this work.

click here for file

 additional file 4
top  <dig> genes. prophnet's top  <dig> ranked genes for alzheimer's disease, breast cancer and diabetes mellitus type  <dig> 

click here for file

 additional file 5
prophnet user guide. prophnet web tool user guide.

click here for file

 acknowledgements
this work was part of projects p08-tic- <dig> of j. a., sevilla and tin2009- <dig> of dgict, madrid. it was also supported by plan propio de investigación, university of granada.

declarations
funding for publication of the article was contributed by project tin2009- <dig> of dgict, madrid.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2014: integrated bio-search: selected works from the 12th international workshop on network tools and applications in biology . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/15/s <dig> 
