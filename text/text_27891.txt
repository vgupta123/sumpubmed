BACKGROUND
the development of novel large-scale technologies has considerably changed the way biologists perform experiments. genome biology experiments do not only generate a wealth of data, but they often rely on sophisticated laboratory protocols comprising hundreds of individual steps. for example, the protocol for chromatin immunoprecipitation on a microarray  has  <dig> steps, uses over  <dig> reagents and  <dig> different devices  <cit> . even adopting an established protocol for large-scale studies represents a daunting challenge for the majority of the labs. the development of novel laboratory protocols and/or the optimization of existing ones is still more distressing, since this requires systematic changes of many parameters, conditions, and reagents. such changes are becoming increasingly difficult to trace using paper lab books. a further complication for most protocols is that many laboratory instruments are used, which generate electronic data stored in an unstructured way at disparate locations. therefore, protocol data files are seldom or never linked to notes in lab books and can be barely shared within or across labs. finally, once the experimental large-scale data have been generated, they must be analyzed using various software tools, then stored and made available for other users. thus, it is apparent that software support for current biological research - be it genomic or performed in a more traditional way - is urgently needed and inevitable.

in recent years, the genome biology community has expended considerable effort to confront the challenges of managing heterogeneous data in a structured and organized way and as a result developed information management systems for both raw and processed data. laboratory information management systems  have been implemented for handling data entry from robotic systems and tracking samples  <cit>  as well as data management systems for processed data including microarrays  <cit> , proteomics data  <cit> , and microscopy data  <cit> . the latter systems support community standards like fuge <cit> , miame  <cit> , miape  <cit> , or misfishie  <cit>  and have proven invaluable in a state-of-the-art laboratory. in general, these sophisticated systems are able to manage and analyze data generated for only a single type or a limited number of instruments, and were designed for only a specific type of molecule.

on the other hand, commercial as well as open source electronic notebooks  <cit>  were developed to record and manage scientific data, and facilitate data-sharing. the influences encouraging the use of electronic notebooks are twofold  <cit> . first, much of the data that needs to be recorded in a laboratory notebook is generated electronically. transcribing data manually into a paper notebook is error-prone, and in many cases, for example, analytical data , transcription of the data is not possible. second, the incorporation of high-throughput technologies into the research process has resulted in an increased volume of electronic data that need to be transcribed. as opposed to lims, which captures highly structured data through rigid user interfaces with standard report formats, electronic notebooks contain unstructured data and have flexible user interfaces.

software which enables both, management of large datasets and recording of laboratory procedures, would serve a real need in laboratories using medium and high-throughput techniques. to the best of our knowledge, there is no software system available, which supports tedious protocol development in an intuitive way, links the plethora of generated files to the appropriate laboratory steps and integrates further analysis tools. we have therefore developed ilap, a workflow-driven information management system for protocol development and data management. the system combines experimental protocol development, wizard-based data acquisition, and high-throughput data analysis into a single, integrated system. we demonstrate the power and the flexibility of the platform using a microscopy case study based on combinatorial multiple fluorescence in situ hybridization  protocol and 3d-image reconstruction.

implementation
workflow-driven software design
the design of a software platform that supports the development of protocols and data management in an experimental context has to be based on and directed by the laboratory workflow. the laboratory workflow can be divided into four principal steps: 1) project definition phase, 2) experimental design and data acquisition phase, 3) data analysis and processing phase and 4) data retrieval phase .

project definition phase
a scientific project starts with a hypothesis and the choice of methods required to address a specific biological question. already during this initial phase it is crucial to define the question as specifically as possible and to capture the information in a digital form. documents collected during the literature research should be collated with the evolving project definition for later review or for sharing with other researchers. all files collected in this period should be attached to the defined projects and experiments in the software.

experimental design and data acquisition
following the establishment of a hypothesis and based on preliminary experiments, the detailed design of the biological experiments is then initiated. usually, the experimental work follows already established standard operating procedures, which have to be modified and optimized for the specific biological experiment. these protocols are defined as a sequence of protocol steps. however, well-established protocols must be kept flexible in a way that particular conditions can be changed. the typically changing parameters of standard protocol steps  are important to record as they are used to improve the experimental reproducibility.

equipped with a collection of standard operating procedures, an experiment can be initiated and the data generated. in general, data acquisition comprises not only files but also observations of interest, which might be relevant for the interpretation of the results. most often these observations disappear in paper notebooks and are not accessible in a digital form. hence, these experimental notes should be stored and attached to the originating protocol step, experiment or project.

data analysis and processing
after storing the raw result files, additional analysis and post-processing steps must be performed to obtain processed data for subsequent analysis. in order to extract information and to combine it in a statistically meaningful manner, multiple data sets have to be acquired. the software workflow should enable also the inclusion of external analytical steps, so that files resulting from external analysis software can be assigned to their original raw data files. finally, the data files generated at the analysis stage should be connected to the raw data, allowing connection of the data files with the originating experimental context.

data retrieval
by following the experimental workflow, all experimental data e.g. different files, protocols, notes etc. should be organized in a chronological and project-oriented way and continuously registered during their acquisition. an additional advantage should be the ability to search and retrieve the data. researchers frequently have to search through notebooks to find previously uninterpretable observations. subsequently, as the project develops, the researchers gain a different perspective and recognize that prior observations could lead to new discoveries. therefore, the software should offer easy to use interfaces that allow searches through observation notes, projects- and experiment descriptions.

software architecture
ilap is a multi-tier client-server application and can be subdivided into different functional modules which interact as self-contained units according to their defined responsibilities .

presentation tier
the presentation tier within ilap is formed by a web interface, using tapestry  <cit>  as the model view controller and an axis web service  <cit> , which allows programming access to parts of the application logic. thus, on the client side, a user requires an internet connection and a recent web browser with java applet support, available for almost every platform. in order to provide a simple, consistent but also attractive web interface, ilap follows usability guidelines described in  <cit>  and uses web  <dig>  technologies for dynamic content generation.

business tier and runtime environment
the business tier is realized as view-independent application logic, which stores and retrieves datasets by communicating with the persistence layer. the internal management of files is also handled from a central service component, which persists the meta-information for acquired files to the database, and stores the file content in a file-system-based data hierarchy. the business layer also holds asynchronous services for application-internal jms messaging and for integration of external computing resources like high-performance computing clusters. all services of this layer are implemented as spring  <cit>  beans, for which the spring-internal interceptor classes provide transactional integrity.

the business tier and the persistence tier are bound by the spring j2ee lightweight container, which manages the component-object life cycle. furthermore, the spring context is transparently integrated into the servlet context of tapestry using the hivemind  <cit>  container backend. this is realized by using the automatic dependency injection functionality of hivemind which avoids integrative glue code for lookups into the spring container. since ilap uses spring instead of ejb related components, the deployment of the application only requires a standard conformed servlet container. therefore, the servlet container tomcat  <cit>  is used, which offers not only servlet functionality but j2ee infrastructure services  <cit>  such as centrally configured data-sources and transaction management realized with the open source library jotm  <cit> . this makes the deployment of ilap on different servers easier, because machine-specific settings for different production environments are kept outside the application configuration.

external programming interfaces
the soap web service interface for external programmatic access is realized by combining the web service framework axis with corresponding ilap components. the web service operates as an external access point for java applets within the web application, as well as for external analysis and processing applications such as imagej.

model driven development
in order to reduce coding and to increase the long term maintainability, the model driven development environment andromda  <cit>  is used to generate components of the persistence layer and recurrent parts from the above mentioned business layer. andromda accomplishes this by translating an annotated uml-model into a jee-platform-specific implementation using hibernate and spring as base technology. due to the flexibility of andromda, application external services, such as the user management system, have a clean integration in the model. dependencies of internal service components on such externally defined services are cleanly managed by its build system.

by changing the build parameters in the andromda configuration, it is also possible to support different relational database management systems. this is because platform specific code with the same functionality is generated for data retrieval. furthermore, technology lock-in regarding the implementation of the service layers was also addressed by using andromda, as the implementation of the service facade can be switched during the build process from spring based components to distributed enterprise java beans. at present, ilap is operating on one local machine and, providing the usage scenarios do not demand it, this architectural configuration will remain. however, chosen technologies are known to work on web server farms and crucial distribution of the application among server nodes is transparently performed by the chosen technologies.

asynchronous data processing
the asynchronous handling of business processes is realized in ilap with message-driven plain old java objects . hence, application tasks, such as the generation of image previews, can be performed asynchronously. if performed immediately, these would unnecessarily block the responsiveness of the web front-end. ilap delegates tasks via jms messages to back-end services, which perform the necessary processing actions in the background.

these back-end services are also uml-modelled components and receive messages handled by the jms provider activemq. if back-end tasks consume too many calculation resources, the separation of web front-end and jms message receiving services can be realized by copying the applications onto two different servers and changing the spring jms configuration.

for the smooth integration of external computing resources like the high-performance computing cluster or special compute nodes with limited software licenses the jclusterservice is used. jclusterservice is a separately developed j2ee application which enables a programmer to run generic applications on a remote execution host or high-performance computing cluster. every application which offers a command line interface can be easily integrated by defining a service definition in xml format and accessing it via a soap-based programming interface from any java-application. the execution of the integrated application is carried out either by using the internal jms-queuing system for single host installations or by using the open source queuing systems like sun grid engine  or openpbs/torque.

RESULTS
functional overview
the functionality offered by the ilap web interface can be described by four components: 1) hierarchical organization of the experimental data, 2) protocol development, 3) data acquisition and analysis, and 4) data retrieval and data sharing . ilap specific terms are summarized in table  <dig> 

hierarchical organization of experimental data
this part of the user interface covers the project definition phase of the experimental workflow. the definition of projects and experiments consists solely in inserting the required descriptive parameters via a web form. in doing so, a hierarchical structure with projects, sub-projects and experiments is created and displayed in the ilap overview. the hierarchy  and other screen shots can be found in the ilap user manual . this overview is the starting point of ilap, from which almost every activity can be initiated. by navigating through the tree, an information box appears alongside. this box details information about the current node in the tree and the operations which can be performed on the database managed object represented by the node. already in this early stage, files derived from literature research can be uploaded to projects and experiments, and ongoing observations can be stored using the general note dialog. if multiple files must be associated with projects and experiments, a java applet can be used to upload the files to the generated project/experiment structure. ilap can manage every file independent of their file type, and can thus be considered as a generic document management system. file types only need to be considered for subsequent processing and data extraction.

protocol development
when starting experimental work, the ilap facility manager should define commonly used standard protocols using the protocol development masks. therefore, a sequence of steps must be defined which describes the typical ongoing experiment in detail. dynamic protocol parameters, which may be adapted for protocol optimization during the experiment, can be associated with the pre-defined steps. these parameters can be either numerical values, descriptive text or predefined enumeration types, all of which can be preset by default values and marked with appropriate units. in order to force the acquisition of critical parameters in the data acquisition wizard, parameters can be marked as required. according to our experience and the experience of other users, it is helpful to define small and reusable standard protocol units, which can be used as building blocks during the experiment-specific protocol assembly. automatic internal versioning takes care of changes in standard protocols so that dependent protocols used in previous experiments remain unaffected.

equipped with a collection of standard protocols, an experiment can be initiated and should be defined at the beginning of the workflow. the name of each experiment, its general description and specific aims, must be provided in order to be able to distinguish between different experiments. the detailed experiment procedure is defined by its current working protocol which can be composed step by step or by reusing existing current working protocols from already performed experiments. if the experiment is following a standard protocol, the current working protocol should be created by simply copying the predefined standard protocol steps and parameter definitions. in order to consider also the concurrent nature of simultaneously executed steps the experimenter should be able to define different sub-branches  named split steps. these split steps lead to different branches of the experimental workflow called step groups which are separately handled during the data acquisition phase.

once the protocol design phase is completed and all necessary protocol steps with their parameters are defined the researchers should be able to generate a printout of the current working protocol with which the experiment can be performed at the lab bench.

data acquisition and analysis
after having finished all experimental work and having created raw data files with different laboratory instruments the data acquisition within ilap should be performed. by going through the early defined current working protocol steps, generated raw data files, used protocol parameter values and observation notes must be entered. wizard-based input masks , which are derived from the defined current protocol steps, assist the experimenters during this work. on every step the user has to fill in the value fields for required parameters and can attach files and notes to each of the steps. during the creation of the working protocol, it is important to name those steps to which files are attached in a descriptive way. files that are directly connected to experimental steps are considered as raw files and are protected against deletion. note, files can be linked to the protocol steps anywhere in ilap, i.e. also before and after the data acquisition.

for this data association, the ilap workflow offers also the possibility to transfer all generated files to a central repository and associate automatically files with their generating protocol step at once, using a java applet. all the internal linkages to protocol steps, experiments or projects are performed automatically without the need of any user interference. as the files are attached to a protocol and an experiment, the overall context is preserved and the likelihood of reproducibility of the same conditions is increased. within ilap experimental notes are stored and attached to the originating protocol step, experiment or project and are retrievable using a keyword based search mask

data analysis
the analysis steps are recorded in ilap by either reusing existing analysis templates or describing new analysis steps applied to the previously uploaded raw data files. additional analysis tools can be developed in java as described in the ilap user manual . according to the file type, internally implemented analysis steps or the description of externally performed analysis steps are associated with the raw data files. result files from analysis programs together with the used parameters can be easily attached to analysis definitions. as an example, a server analysis tool was implemented for deconvolving three dimensional image stacks, executed on a remote high-performance computing cluster using the jclusterservice .

integration of external programs
a proof of concept about external access of programs using the ilap application programming interface was shown by the implementation of a plugin for the widely used image processing software imagej  <cit> . this java plugin enables imagej to transfer the image files directly from ilap to the client machine. this functionality appears as a regular dialog in the graphical user interface of imagej, and allows upload of result files back into ilap in a transparent manner.

automatic post processing tool chain
background tasks like the generation of previews are performed using the internal post-processing tool chain which is started asynchronously as soon as the files are associated with the originating experiment in ilap. according to the detected file type, multiple post-processor steps are executed and results are automatically stored back into the database. this flexible system approach is also used to automatically inform and synchronize further downstream applications like omero  <cit>  image server from the open microscopy environment project. therefore, ilap is able to transfer files - transparently for the user - to a server where a comparable project/dataset structure is created.

data retrieval and information sharing
the use of the described data acquisition features inherently leads to structured recording of experiments, conserving the complete experimental context of data records throughout the history of research projects. it is often necessary to go back to already completed experiments and to search through old notes. therefore, ilap offers search masks which allow keyword based searching in the recorded projects, experiments and notes. these results are often discussed with collaboration partners to gain different opinions on the same raw data.

in order to allow direct collaboration between scientists ilap is embedded into a central user management system  <cit>  which offers multiple levels of access control to projects and their associated experimental data. the sharing of projects can be done on a per-user basis or on an institutional basis. for small or local single-user installations, the fully featured user management system can be replaced by a file-based user management which still offers the same functionalities from the sharing point of view, but lacks institute-wide functionalities . this is only possible because ilap keeps the source of user accounts separated from the internal access control to enable easy integration of additional local or institution wide user management systems.

since sophisticated protocols are crucial for successful experiments ilap-users can export their protocols not only in pdf format  but also in an exchangeable xml format . in that way scientists can directly pass over their optimized protocols to partners who do not share the data using ilap internally but need to get the protocol information transferred. the same xml files can be also used on a broader basis for protocol exchange using central escience platforms like myexperiments  <cit> . this platform aims for an increased reuse and repurpose of commonly shared workflows achieving at the same time reduced time-to-experiment and avoiding reinvention. ongoing standardization efforts regarding the xml format like fuge  <cit>  are currently not supported but could be integrated in future versions of ilap.

case study
in order to test the functionality of the system, we used a high-throughput microscopy study. the focus of this study was on the three dimensional nuclear localization of a group of seven genes. this required the development of a combinatorial multicolor fluorescence in situ hybridization  protocol. this protocol enables simultaneous detection and visualization of all seven genes by using a combination of three different fluorescent labels. the elaboration and optimization of m-fish required many different protocol steps and parameters. thus it was crucial to keep a record of any parameter and procedure changes during the process of protocol development. these changes were directly connected with data produced in the lab  and the resulting imaging data. in the final combinatorial m-fish protocol,  <dig> steps and  <dig> different parameters were present. using this protocol we conducted  <dig> experiments and produced  <dig>  multicolor 3d-image stacks of which  <dig> were subsequently corrected for color shifts and processed by 3d-deconvolution performing  <dig> iterations of the maximum likelihood estimation algorithm available with the huygens deconvolution software . these image processing steps were realized as batch analysis in ilap, which delegated the compute intensive procedure to a high-performance computing cluster and then stored all processed image stacks in the analysis container of the corresponding experiments. afterwards fish signals were detected and analyzed using a custom image analysis procedure which was realized as a matlab  extension of imaris  using the imaris-xt programming interface. this extension automatically recorded fish signal coordinates, signal to signal distances, the nuclear volume and several additional parameters of each imaged nucleus. these externally generated data files were transferred back into ilap and stored in the context of the corresponding experiment as an external analysis step. a summary of the data acquisition and analysis is shown in figure  <dig> 

during the course of the study we observed several clear advantages of the ilap system over a lab-book in paper form, which was maintained in parallel. the first and most valuable feature of ilap is the direct connection between protocol steps and data files which cannot be realized using a paper lab book. a second notable advantage of the ilap system was that lab-tasks that were performed in parallel or in overlapping time-frames could also be stored as such, whereas in the traditional lab book all tasks performed in the lab were written sequentially which implied a break-up of connected protocols. a third advantage was that ilap allowed for rapid searching and finding of experiments, protocols and desired terms, which required only a few mouse clicks as opposite to the cumbersome search using a paper notebook. moreover, ilap enabled easy collaboration functionality, data backup or parameter completeness checks.

CONCLUSIONS
we have developed a unique information management system specifically designed to support the creation and management of experimental protocols, and to analyze and share laboratory data. the design of the software was guided by the laboratory workflow and resulted in four unified components accessible through a web interface. the first component allows the hierarchical organization of the experimental data, which is organized in a generic document management system. the second component focuses on protocol development using templates of standard operating procedures. next, the data acquisition and analysis component offers the possibility to transfer the generated files to a central repository and to associate the files with the corresponding protocol steps. additionally, external data analysis programs can be integrated and executed on a remote high-performance computing cluster. the last component enables collaboration and data sharing between scientists using ilap on a user or institutional level as well as protocol transfer with external users.

although designed in an experimental context for high-throughput protocols like microarray studies of gene expression, dna-protein binding, proteomics experiments, or high-content image-based screening studies, ilap has also proven to be valuable in low- and medium-throughput experiments. for example, protocols for qpcr analysis of gene expression using  <dig> and 384-well formats -a widely used technique- can be easily developed and can contribute significantly to establishment of robust assays. moreover, since the workflow-oriented concept of ilap offers the flexibility of a more general scientific data management system it is not limited to a special laboratory protocol, instrument, or type of molecule. for example, its application for next-generation sequencing is straightforward since similar requirements on the computational environment  have to be met.

in summary, we have developed a flexible and versatile information management system, which has the potential to close the gap between electronic notebooks and lims and can therefore be of great value for a broader community. extensive tests in our and other labs have shown that the benefits of better information access and data sharing immediately result in reduced time spent managing information, increased productivity, better tracking and oversight of research, and enhanced data quality.

availability and requirements
in order to reach a broader audience of users we have implemented a java-based installer application, which is guiding an inexperienced computer user through the installation process . the basic installer package of ilap has been tested on most common operating systems for which a java virtual machine version  <dig>  or higher is available, e.g. unix-based systems , macos and windows and can be downloaded from http://genome.tugraz.at/ilap/. in addition to the requirement of a java vm, a postgresql database must be either locally installed or accessible via network. postgresql comes with an easy-to-use installation wizard, so the complete installation should not be a significant entry level barrier. for further information about installation, please read the installation instructions from the download web site and in case of problems please contact the developers under ilap@genome.tugraz.at. for initial testing purposes, please see also our test environment http://ilapdemo.genome.tugraz.at.

regarding hardware requirements, the most critical issue is disk space for large data files. these are stored in a directory hierarchy where the base directory must be specified during the installation process. the requirements regarding processor performance and memory depend on the user basis, but pc or server hardware with  <dig> gb of ram should be sufficient for most installations.

the production environment for our central in-house installation consists of a 4-processor amd-system x <dig> from sun microsystems, with  <dig> gb of ram which is connected to an 8tb san storage. for computational intensive tasks, ilap delegates the calculations to a 48-node high-performance computing cluster using the jclusterservice interface.

abbreviations
javaee: java enterprise edition platform; mda: model driven architecture; omero: open microscopy environment remote objects; soap: simple object access protocol; fuge: data standard for functional genomic experiment.

authors' contributions
the conceptual idea for ilap goes back to gs, jgm and zt and was elaborated by gs in the course of the genau-mobility/nih-visiting-scientist program. gs and mf performed the implementation of the main software modules including persistence-, business- and web tier. sk implemented the data retrieval functionality and worked also on the integration of omero. gb together with gs was responsible for the java-applet-based file transfer functionality which was additionally extended to work as an imagej-plugin. archiving functionality and the xml export for general experiment protocol sharing was implemented by mo. dr contributed with extremely useful comments about conceptual ideas, their practical application and their usability. dr's constant input derived from permanent testing under real work conditions lead to major improvements in functionality, usability and responsiveness. the project was coordinated by gs.

supplementary material
additional file 1
ilap user manual. the ilap user manual contains a detailed description of the user interface including screen shots.

click here for file

 additional file 2
ilap installation and administration manual. the ilap installation and administration manual contains a detailed description of the installation process for all supported platforms including screen shots.

click here for file

 additional file 3
m-fish protocol in pdf format. this file contains the combinatorial multiple fluorescence in situ hybridization  protocol in pdf format used in the case study section.

click here for file

 additional file 4
m-fish protocol in xml format. this file contains the combinatorial multiple fluorescence in situ hybridization  protocol in xml format used in the case study section for protocol exchange.

click here for file

 additional file 5
document type definition for the xml protocol format. this file contains the document type definition for the xml format used for protocol exchange created in collaboration with will moore from the omero.editor project.

click here for file

 acknowledgements
the authors thank the staff of the institute for genomics and bioinformatics for valuable comments and contributions. special thanks go to hillary mueller and tatiana karpova from the laboratory of receptor biology and gene expression, national cancer institute. special thanks also go to will moore for the ongoing successful collaboration regarding the common protocol exchange format. during the large scale analysis on the high-performance computing cluster we were supported by scientific volume imaging http://www.svi.nl with a cluster license of huygens deconvolution software. this work was supported by the austrian ministry for science and research, gen-au project bioinformatics integration network .
