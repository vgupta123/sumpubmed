BACKGROUND
studies by s. kauffman  <cit>  and r. thomas  <cit>  founded the logical discrete approach to model biological molecular networks and analyse their behaviours. in these networks, components  assume discrete values representing their activity levels . components are connected by directed edges that embody regulatory  effects, forming an influence network. the activity level of each component evolves depending on the activity levels of the components influencing it. the rules that determine component activity levels are defined in terms of logical rules or functions, corresponding to the underlying biological/biochemical regulatory mechanisms. the dynamical behaviour of the network is then generated by evolving the component levels following a specific updating scheme . the dynamics can subsequently be represented in terms of a state transition graph, where the nodes represent  states of the model, while the edges denote transitions between these states.

while other mathematical frameworks, including differential equations, can be used to model biological processes in great detail, the logical formalism is particularly suitable for the modelling of large networks for which precise kinetic data are not available. in fact, logical models have become increasingly popular. they have been recently used to model complex dynamical behaviours and provide insights into numerous biological systems, including gene regulatory networks , signal transduction , as well as cell cycle , in species ranging from bacteria and viruses  to yeast , flies , plants , and to humans .

often based on qualitative knowledge of regulatory mechanisms and published data, discrete models can be assembled through a “bottom-up” approach, whereby each logical function represents specific, biological interactions between the components of the network. recently, “top-down” approaches have been applied to construct logical models by automatic inference from high-throughput experiments .

many simulation and analysis software tools for logical models already exist, including adam  <cit> , boolnet  <cit> , booleannet  <cit> , cell collective  <cit>  cellnetanalyzer  <cit> , cellnopt  <cit> , chemchains  <cit> , ginsim  <cit> , odefy  <cit> , simboolnet  <cit> , and squad  <cit> .

the state transition graphs describe the discrete dynamics of networks and thus embody their dynamical properties. however, these graphs may quickly become too large and difficult to analyse. this has led several groups to propose the use of model-checking techniques  <cit>  that explore, for instance, attractors  and paths leading to them  <cit> . a number of logical modelling tools allow properties of the state transition graphs to be verified by means of existing model-checking tools, such as nusmv  <cit> . the properties are formulated in terms of temporal logic or in a suitable high-level query template capturing recurrent biological questions  <cit> . the model checker tests if the state transition graph, which may be explicitly generated or implicitly encoded in a symbolic description of the model, satisfies the property. for example, while ginsim exports symbolically encoded logical models into smv files, biocham integrates nusmv  <cit>  providing an interface for the specification and verification of properties expressed in several temporal logics  <cit> . a detailed description of the use of model-checking techniques in the context of qualitative models of biological networks is outside the scope of this paper, but see reference  <cit>  for a review and additional examples.

over the years, different formats have been developed to store logical models, ranging from simple text files containing truth tables and/or logical functions to xml-based file formats. standards such as the systems biology markup language  or the systems biology graphical notation  have been developed to enable unified exchange of biological/biochemical molecular maps. sbml supports process-based mathematical frameworks with a reaction-centred description of biochemical processes. because the building blocks of qualitative models are fundamentally different from species and reactions used in  sbml models, previous attempts to represent logical models in sbml led to a distorted use of the standard. indeed, variables in boolean networks, logical models and some petri nets represent discrete levels of activities rather than amounts/numbers of molecules. moreover, simulation of logical models do not generally imply the notion of a continuous time. consequently, the processes involving them cannot be described as reactions per se, but rather as transitions between states.

sbml level  <dig> is modular and thereby enables the development and inclusion of packages extending the core with additional features. using this modular structure, we developed a novel qualitative models  package to support the standard definition and exchange of qualitative  models.

it is worth noting that, although sbml qual is currently mainly used for logical models, it was developed to support standard petri nets as well, due to commonalities between the frameworks. while petri nets are mostly used to study metabolic networks, they have also been employed to model regulatory and signalling networks . until now, the petri net community relied on specialised exchange formats  and simulation tools that support sbml core .

given the open source nature of sbml qual and the collaborative nature of the sbml community, the new standard should be swiftly adopted and implemented in many existing tools supporting logical models and their relatives such as petri nets. the cooperation on sbml qual further fostered synergistic efforts to articulate and improve existing tools, leading to the launching of the common logical modelling tools  project , which gathers many groups developing and using logical modelling software tools.

methods
development of the qual package
a draft proposal of a sbml package to encode qualitative models was initially proposed in  <dig>  between  <dig> and  <dig>  the proposal was refined, through community consultations and dedicated meetings by developers of various related software tools, and in particular members of the colomoto project. in  <dig>  the proposal was accepted through a community vote. the final specification was accepted by the sbml editors in the spring of  <dig> 

libsbml & jsbml
libsbml is an application programming interface  library for reading, writing, manipulating and validating content expressed in the sbml format  <cit> . it is written in iso c and c++, provides language bindings for .net, java, python, perl, ruby, matlab and octave, and includes many features that facilitate the adoption and use of both sbml and the libsbml. jsbml, a pure java library for sbml, provides an api that maps all sbml elements to a flexible and extended java type hierarchy whilst striving for 100% compatibility with the libsbml java api  <cit> . as of november  <dig>  libsbml supports sbml qual in its public release  while jsbml supports the package in its development branch and will include support in its next major release. libsbml and jsbml are freely available as source code and binaries for all major operating systems under the lgpl open source terms . jsbml has been integrated in the logicalmodel library .

computer simulations
to demonstrate the interoperability of models via sbml qual, we analysed a specific signalling network using three different software tools briefly described below.

cellnopt is an open-source software used for creating logic-based models of signal transduction networks  <cit> . cellnopt consists of a set of r packages available in bioconductor, which are also available via a python wrapper, as well as a cytoscape plug-in  which contains a sbml qual importer and exporter. cellnopt converts a network  into a scaffold of all possible models compatible with the network and subsequently trains this scaffold with data  <cit> . it includes a variety of formalisms:  boolean models, simulated via synchronous update or by computation of steady-states,  semi-quantitative constrained fuzzy logic, and  ordinary differential equations  derived from the logical model  <cit> . while the choice of a specific formalism depends on the data at hand, scope, and question, the followed workflow is similar. the network can be simplified by compressing nodes that are intermediates between perturbed or measured nodes. links impinging on nodes that are not observable  or not controllable  are also taken aside as their status cannot be derived from the data.

cellnopt generates logical models as hyper-graphs by adding all combinations of or and and gates that are compatible with the network . this leads to a hyper-graph representing a superposition of all boolean models compatible with the initial network. subsequently, an optimisation procedure is applied to find the combination of gates and the parameters that best explain the data, by minimising an objective function that quantifies the difference between data and simulation, while penalising model size. this provides an optimum model or, more generally, a family of optimal models. optimisation can be performed using a built-in genetic algorithm, or using external optimisation packages; in particular cellnopt is connected to meigo  <cit> . furthermore, cellnopt can leverage answer set programming to efficiently find all possible boolean models via the software package caspo  <cit> .

once an optimal model  has been generated, it can be analysed in various ways. for example, it can be simulated to predict the outcome of new experiments  <cit> . one can also analyse the properties of a family of models, or compare models obtained for different cell types  <cit> . one can also identify missing links in the network using the module cnorfeeder  <cit> . the flexibility of the scripting languages  simplifies the writing of analysis workflows, and cytocopter enables combined analysis with other cytoscape tools and plug-ins.

ginsim is a free  software application devoted to the logical  modelling of regulatory and signalling networks  <cit> . it provides a user-friendly graphical interface to define models from scratch. models can also be imported from different formats. ginsim supports the simulation of logical models and generates the resulting state transition graphs, considering a range of update policies . ginsim also offers a number of functionalities to explore the dynamical properties of logical models, some of which  can be efficiently analysed without generating the complete network dynamics.

it is well known that regulatory circuits  can generate crucial dynamical properties  <cit> : positive circuits  produce multi-stability whereas negative circuits  underlie stable oscillations. to help analyse these properties, ginsim identifies all the regulatory circuits embedded into a network and compute the regions of the state space, called functionality contexts, where they generate the related property .

one can use various updating schemes to generate the dynamics of a logical model. when in a given state, several components are called to change their values, these updates can be done synchronously, asynchronously, or considering a priority scheme  <cit> . under the synchronous scheme, all components are updated simultaneously, leading to one transition at most for each state and thus resulting in deterministic  state transition sequences. under the asynchronous scheme, single component updates are considered separately, assuming that underlying delays are different but unknown; consequently, alternative trajectories are often generated, giving rise to non-deterministic state transition graphs.

of particular interest is the asymptotical dynamical behaviour of these models, which is captured by the notion of attractors. from a logical point of view, attractors take two forms: stable states, and terminal cyclic strongly-connected components . note that stable states and terminal elementary cycles  are shared between synchronous and asynchronous updating schemes but this is not the case for other cyclic attractors. ginsim supports both the synchronous and asynchronous updating schemes, which can lead to rather distinct dynamical properties. in particular, asynchronous dynamics can be quite complex.

in this respect, hierarchical transition graphs  provide a compact and informative view of the dynamics in the form of a graph where nodes embody sets of states that are either irreversible  or strongly connected . for more details on htg, see reference  <cit> .

finally, to handle the analysis of large models, several groups have devised reduction methods  <cit> . in this respect, the last  version of ginsim allows users to get rid of  output species that do not regulate other nodes or regulate only pseudo-output nodes. this reduction has no impact on the number, nature and reachability of the attractors and it is particularly efficient for signalling networks as shown with our example model .

the cell collective is a web-based platform for the construction, simulation, and analysis of boolean-based models  <cit> . the platform includes a knowledge base for users to annotate the models and keep track of experimental research papers associated with each interaction included in the model. within the platform, models can be shared directly on the web or via download using the sbml qual format .

models constructed in cell collective are boolean , and simulations can also include stochastic elements. furthermore, data input/output from the analyses are continuous, providing a semi-quantitative measure to better match modelling results with laboratory experiments  <cit> . at the input level, this is accomplished by assigning a probability of being active in time t to each external species , in contrast to classical boolean simulations where each external species is fixed to  <dig> or  <dig> 

the activity level, or the probable active state of an output species, is measured by calculating the ratio of 0’s and 1′s over the last n time steps ; this ratio  provides the activity level on the y-axis . in the case of real-time simulations, as a single simulation evolves in time, the activity level of each species in the model is calculated as the ratio of 0’s and 1’s within a predefined sliding window  <cit> .

one of the assets of the cell collective is its user interface, which has been carefully designed to enable the construction of computational models in a non-technical fashion, in order to render modelling also amenable to non-modellers. that is, the construction of the models is based purely on qualitative knowledge about a particular regulatory mechanism , without the need to manually enter boolean expressions . although creating relatively small boolean models can be easily done by writing boolean functions, defining models with species regulated by many regulators, or through complex regulatory mechanisms can often result in complex, nested functions , which can be cumbersome to define manually even for seasoned modellers.

RESULTS
in this section, we present the sbml qual package and its validation by exchanging and interpreting a moderately complex signalling network model among three independent software tools. in addition, we illustrate the interest of model exchange by applying complementary simulation and analysis features. the section ends with a description of the logicalmodel library.

the sbml qual package
the sbml qual package extends the core sbml level  <dig> standard, and enables standard exchange and interoperability of discrete models: logical models  and standard petri nets. the full specification is available at http://identifiers.org/combine.specifications/sbml.level- <dig> version- <dig> qual.version- <dig> release- <dig> <cit> . the structure of sbml qual is depicted in figure  <dig>  the rationale of the format relies on the features of qualitative models, with a  state space and event-driven state transition processes.

the main elements of a sbml qual document are qualitativespecies, representing the entities of the model as the molecular components of the network, and transitions that contain the rules defining the state of given species at each iteration step. here, the term transition is reminiscent of the petri net terminology where a transition is enabled according to the state of its input places, and its firing modifies the state of its input and output places. for logical models, a transition defines the logical rule associated with a network component.

each qualitativespecies assumes a discrete value , and its definition bears an attribute initiallevel that specifies the value at the beginning of the simulation, and an attribute maxlevel that specifies the maximal level allowed. for instance, maxlevel would be  <dig> in a boolean model. as for the species of sbml core, a qualitativespecies is associated with a compartment.

a transition comprises inputs , outputs  and functionterms, containing conditions, as well as the values that the output species will assume at t +  <dig>  whenever a given condition is met. at each iteration, all functionterms within a transition are evaluated. the term evaluating to true dictates the resulting state and the output species are updated accordingly at t +  <dig> 

each member of the listoffunctionterms associated with a transition contains a mathematical expression that returns a boolean, as well as a resultlevel that indicates the level to be applied to the outputs when this expression evaluates to true. a defaultterm is also defined to establish the result when none of the functionterms apply. the combined set of defaultterm together with the list of functionterms establish the state transitions for the entities involved. figure  <dig> provides an illustration of a simple boolean model encoded in sbml qual.

demonstration of model interoperability
as part of the sbml extension development and approval process  is the requirement that at least two independent software tools fully implement the proposed package. cellnopt, ginsim, and the cell collective have been recently registered with the sbml community as tools currently supporting the sbml qual package. these tools have been further used to demonstrate how a logical model can be handled with different software tools using sbml qual as an exchange format.

as the three aforementioned software tools can provide different perspectives on the dynamics of discrete/logical models, this section is organised to demonstrate their complementarity. more specifically, we present a conceptual pipeline that enables scientists to derive a discrete model from high-throughput data, conduct thorough analyses, and ultimately use the model to further guide experiments. cellnopt is used to derive a logical model via a top-down approach, exploiting experimental high-throughput data and an initial qualitative description of a signalling network . inferred models are subsequently simulated and analysed using additional techniques implemented in ginsim and the cell collective.

generation of a egf/tnfα discrete model with cellnopt
the focus of cellnopt is to utilise experimental data to generate logical models based on prior knowledge on signalling pathways . the example model used herein is based on a pkn that combines two important mammalian signalling pathways induced by the epidermal growth factor  and tumour necrosis factor alpha . egf and tnfα ligands stimulate erk, jnk and p <dig> mapk cascades, the pi3k/akt pathways, and the nfκb cascade. in addition, the network encompasses cross-talks between these pathways, as well as two negative feedback loops: one in the nfκb cascade and one in the mapk cascade. note that this network was previously used in  <cit>  to illustrate a variety of logical modelling approaches using synthetic data. here, however, we slightly modified this pkn by adding an autocatalytic feedback loop on the phosphatase  regulating the activation of sos- <dig> .

the pkn was subsequently trained using the synchronous update boolean simulation, in combination with the cnorfeeder package to obtain the optimal logical model  used as an example in this paper . instead of using experimental data, an ordinary differentiation equation  model representing the “true network” was employed to generate the data and train the pkn. these data  were thus obtained by simulating the ode model upon stimulation of egf and tnfα, and inhibition of pi3k and raf- <dig> in different combinations. the readout nodes  are highlighted in figure  <dig>  to reflect imprecisions in our knowledge of biological pathways, the topology of the data generator model  is slightly different from the pkn. more precisely, a link from map3k <dig> to mkk <dig> has been omitted in the pkn, to which an extra edge from pi3k to map3k <dig> was further added. a workflow with cellnopt was able to recover the “golden standard” model from this pkn and the experimental data . this final model was then exported to sbml qual and simulated and analysed using all three tools.

dynamical cross-validation of the model
dynamical  simulations of the egf/tnfα network for the four different initial conditions gave consistent results with the three software tools. in this respect, figure  <dig> shows the consistent global state evolution, attractor reachability, as well as temporal evolution of selected nodes for two of these conditions . depending on the initial condition, simulations result in one of two stable states or in one of two cycles encompassing six states.

model analyses in ginsim
as mentioned in the previous section, starting from the null state, simulations using synchronous updating of the example model result in a unique attractor for each of the four combinations of the two external inputs , either a stable state or a simple terminal cycle . although we expect to get the same attractors under the asynchronous update, their reachability may be affected. moreover, the number of states possibly visited before reaching an attractor may greatly differ between synchronous and asynchronous simulations, as well as the characteristics of the transient dynamics.

for example, when egf =  <dig> and tnfα =  <dig>  the asynchronous state transition graph is substantially larger with about 116 k states, as opposed to the  <dig> states obtained with a synchronous update . to contain the size of the state transition graph, we can reduce the model by removing all  output nodes . applying this reduction and thereby eliminating  <dig> nodes as  outputs results in a significant reduction of the state transition graph . importantly, the unique reachable attractor is identical to that obtained with the synchronous update. the resulting htg  has a peculiar staged structure with a series of irreversible components  that the system may leave to undergo transient oscillations , to eventually reach the final cyclic attractor . interestingly, by defining priority classes and imposing that ikk update is slower than all other species, one can get rid of all these transient oscillations .

to maintain input components  constant, implicit self-activations are defined. these two  positive circuits explain the presence of at least four attractors; the combinations of input values define a partition of the state space in four disconnected regions. using ginsim, we can verify that the egf/tnfα model encompasses two additional functional circuits: a three-element negative circuit involving iκb, nfκb and ex, and a positive auto-regulatory circuit on ph. the functionality context of the negative circuit corresponds to ikk =  <dig> . this negative circuit enables the attractors where iκb, nfκb and ex oscillate. the functionality context of the positive auto-regulatory circuit is defined by erk =  <dig>  this circuit explains the presence of two attractors when efg =  <dig> 

for the input configuration where egf =  <dig> and tnfα =  <dig>  starting from an initial state with erk =  <dig>  under the asynchronous update, the system is able to reach two cyclic attractors differing by the presence of ph . trajectories leading to the terminal cycle with ph =  <dig> are discarded by the synchronous update in which the decrease of erk  occurs together with the increase of ph, already in the first step of the simulation, leading to the cyclic attractor where ph =  <dig> 

using ginsim, common perturbations such as gene knock-outs or ectopic gene expressions, as well as their effects, can be easily simulated. for instance, knocking out ikk eliminates oscillations , as a result of the interruption of the iκb-nfκb-ex negative circuit . similarly, the simulation of erk ectopic expression, disrupting the functionality context of ph auto-regulation, leads to the loss of the multi-stability when egf =  <dig> .

simulations and biological application with the cell collective
the cell collective platform aims at facilitating collaborative modelling for experimental scientists. the platform offers two modes of simulations: input–output dynamical analyses across hundreds of simulated environments, along with real-time, interactive simulations. examples of simulations of the egf/tnfα model with the cell collective are illustrated in figure  <dig> 

figure 6a-c illustrates simulations of input–output relationships between external species stimulating the network and species of interest regulated in response to this stimulation. laboratory studies to identify functional relationships between extracellular stimuli and various cellular components are often expensive and resource consuming. the dynamical analysis tool implemented in the cell collective allows users to conduct in silico experiments mimicking laboratory experiments, with the advantage that researchers can simulate hundreds or thousands of extracellular and/or disease-related situations  and generate rich input–output relationships  between network stimuli and any species in the network. in this respect, inputs and outputs can take continuous values on a scale from  <dig> to  <dig> , despite the discrete  nature of the network model. for example, figure 6a shows a dose–response curve and a positive correlation between egf and akt. in contrast, inhibition of pi3k results in the loss of egf-dependent activation of akt . finally, the input–output relationship between tnfα and iκb is illustrated in figure 6c.

real-time interactive simulations with the cell collective enable users to interactively change the environment during the simulations. this tool enables users to test “what-if” scenarios, e.g., changes in the external conditions, as well as of  gain/loss-of-function, with instant feedback in terms of the changing activity levels of affected species. to illustrate the utility of this mode, we simulated the egf/tnfα model under a condition where egf was set to a medium activity level, while keeping tnfα inactive. this condition results in the activation of akt, erk, and ras . the simulation of a ras gain-of-function results in further activation of erk, but not of akt . in contrast, akt continues to respond to egf activation and deactivation . this is because akt  does not lie downstream of ras  and hence is not affected by the constitutively activated ras.

the logical model library
in order to ease the adoption of the new standard, an open source  library, logicalmodel has been created. the library can be used as a standalone command line tool for model conversion, and can be accessed at https://github.com/colomoto/logicalmodel. it provides a data structure to manipulate logical models, as well as a set of analytic tools  that are common to many scientific efforts relying upon a discrete modelling approach. the library further provides import and export filters for sbml qual , as well as an interface enabling the integration of logical models and sbml qual with additional formats and a number of existing software tools. the development of this library coincides with the onset of the colomoto initiative.

figure  <dig> illustrates the central role of the logicalmodel library and main current model exchange capabilities of popular software tools, covering logical models as well as additional related qualitative modelling frameworks. included are importers that have been recently developed to generate  qualitative models from pathway databases: keggtranslator  <cit>  and path2models project  <cit> .

CONCLUSIONS
in order to enable the interoperability of qualitative, discrete models, a standard exchange format was necessary. while the previous versions of sbml were not fully compatible with qualitative modelling approaches, the modular structure of sbml release  enables the development of additional packages to support novel modelling frameworks and capabilities.

in this paper, we report on the sbml level  <dig> qualitative model  package, which provides a standard means for the exchange of logical models of regulatory and signalling networks. currently, at least three software tools support both import and export via sbml qual , while other tools such as gna  <cit>  and cellnetanalyzer can export models to this format. the former three tools have been used here to demonstrate the consistency of the standard via simulations and analyses of a boolean model of egf/tnfα signal transduction pathways. the combined use of software tools is now facilitated, providing modellers with a range of complementary means to investigate their models.

repositories of models encoded in sbml qual are already being prepared. for instance, the cell collective now contains numerous previously published logical models that can be downloaded. biomodels database is a repository of computational models of biological networks  <cit>  that currently hosts several curated sbml qual models .

sbml qual will continue to be refined by the community. some of the improvements discussed so far include, for example, the definition of models where parameters are not  instantiated, models for which timing constraints  are specified, extended petri nets, etc. in addition, further integration with sbml core concepts is planned. in particular, sbml qual will be useful to so-called hybrid formalisms, which combine features of both discrete and continuous models. a typical example are formalisms embedding a logical representation of the interaction structure of the network into a continuous model of its dynamics, such as piecewise-linear differential equation models  <cit> , hybrid automata  <cit> , or even fully continuous models in which the logical functions have been replaced by sigmoidal functions preserving the logic of the interactions  <cit> . other hybrid formalisms that have been used for the modelling of regulatory and signalling networks are fuzzy logic-based models  <cit>  and timed automata  <cit> . software tools enabling the modelling, simulation, and analysis of networks by means of different kinds of hybrid models include cellnopt, odefy  <cit> , squad  <cit> , gna  <cit> , and q2lm  <cit> . most of the these tools support sbml core.

last but not least, to further support data and result reproducibility, the standardisation of algorithms and simulation schemes and parameters for qualitative models is planned by adopting the miase  guidelines  <cit> . first steps in this direction have already been taken by adding simulation algorithms relevant to logical models to the kinetic simulation algorithm ontology , allowing qualitative models to be used in simulations described in the simulation experiment description markup language .

the availability of sbml qual and the inception of the colomoto consortium should foster the collaborative development of standards , as well as of computational methods for the qualitative modelling of biological networks. in this respect, anyone interested in these efforts is cordially invited to enter into contact with the existing community at sbml-qual@lists.sourceforge.net.

competing interest
the authors declare that they have no competing interests.

authors’ contributions
cc, jsr, and th designed the workflow and case studies presented here and wrote the manuscript. cc initiated, coordinated and contributed to the development of sbml qual. cc coordinated the support of the package in ginsim. jsr contributed to the development of sbml qual, and supervised its implementation in cellnopt. th contributed to the development of sbml qual, and coordinated the implementation of its support in the cell collective. nln initiated the development of sbml qual, provided the initial version of the package and the support in libsbml, and contributed to the manuscript. dt initiated and regularly contributed to the development of sbml qual, and also contributed to the redaction of the manuscript. smk contributed towards the finalisation of the sbml qual specification and developed the libsbml code that supports the format. db contributed to the development of the qual package and developed a first support in libsbml. an contributed to the qual package, implemented its support in ginsim and implemented the logicalmodel library. mpi implemented an xml validator for sbml qual as part of libsbml, helped review, collect feedback and improve the sbml qual specification, and created the first implementation of the cellnopt-to-sbml-qual converter. ad and fb contributed to the development of sbml qual and to jsbml. jd implemented the sbml qual export in boolsim. ix contributed to the development of sbml qual. eg contributed to the support of sbml qual in cellnopt and to the manuscript. ptm implemented the ginsim export to gna, contributed to the ginsim support for sbml qual and to the manuscript. mp and hdj tested the specification by developing sbml qual support for gna; hdj contributed to the manuscript. mh helped guide development of the sbml level  <dig> "qual" package specification and contributed to the manuscript. sk contributed to sbml qual development and supervised its support in cellnetanalyzer. avk contributed to the requirements of the sbml package, and implementation of sbml support in cellnetanalyzer. nr contributed to the development of sbml qual, and implemented support for the specification in jsbml. bk and bw implemented sbml qual support in the cell collective. tc participated in the case-study setting-up, simulations and import/export in cellnopt, and contributed to the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
complete dynamic profile of the example model. the model was simulated with consistent results in the cell collective , ginsim , and cellnopt . charts at the top of the cell collective column correspond to the overall dynamic profile across all nodes in the model. black cells correspond to active  states, whereas inactive  states are white. the bottom graphs in the cell collective column illustrate the time course of selected nodes. the ginsim columns show state transition graph and the hierarchical transition graph  generated with the tool. note that due to the synchronous updating, the irreversible components of the  correspond to linear chains of states. simulations were performed under four input conditions: egf = tnfα = 0; egf = tnfα = 1; egf =  <dig> & tnfα = 1; egf =  <dig> & tnfα =  <dig>  a) egf = tnfa =  <dig>  the network reaches a steady state  after  <dig> transient states. the order of the individual species states in the steady state generated by ginsim is sorted in the same  order, as presented in the cell collective column. b) egf =  <dig>  tnfa =  <dig>  the network reaches a steady state after  <dig> transient states. c) egf =  <dig>  tnfa =  <dig>  following  <dig> transient states, the network reaches a 6-cycle attractor. d) egf = tnfa =  <dig>  after  <dig> transient states, the network reaches a cyclical attractor encompassing six states.

click here for file

 acknowledgements
authors thank the members of the sbml qual mailing list for their contributions and/or feedback during the development of the qual package specification. we also thank aidan macnamara and federica eduati for help with the egf/tnfα model. furthermore, we appreciate financial aids from the european union through the “biopredyn” project to jsr , nebraska nasa space grant consortium grant  and national institutes of health grant support  to th, fundação para a ciência e a tecnologia  to cc, us national institute of general medical sciences support  for smk, mh and nln, a marie curie international outgoing fellowship within the eu 7th framework program for research and technological development  to ad, the swiss federal government through the federal office of education science and innovation  and the european commission fp <dig> project enfin  to ix, the fundação para a ciência e a tecnologia  to ptm, federal ministry of education and research  as part of the virtual liver network  to ad, sk. fb, mvi, jsr and nln also benefited from dedicated support by embl-ebi.
