BACKGROUND
as our understanding of cellular processes such as signal transduction, genetic regulation, etc., grows, it is becoming clear that their emerging complexity means that they can no longer be studied exclusively by classical reductionist techniques  <cit> . thus, a systems approach is required if these cellular functions are to be fully understood  <cit> . a systems approach to the study of biochemical networks requires the creation of models  that take into account the numerous interactions of chemical components of the whole system  <cit> . the subsequent use of these models and software tools have the potential to serve laboratory biologists as a complimentary method to pre-screen their laboratory experiments, as well as help them to refine or even develop new hypotheses.

the most common ways to represent these interactions are ones using continuous methods, generally including ordinary differential equations  or partial differential equations   <cit> . to put them in motion, a number of software tools to simulate and subsequently analyze the dynamics of these models have been developed . however, one of the problems with using differential equations is that each equation requires the knowledge of many parameters that make up the kinetic basis of the network interactions, which in many cases  may be difficult to obtain  <cit> . in addition, as the size and connectivity of the models increases, the complexity of the underlying differential equations also increases, limiting their use to only investigators trained in higher-level mathematics.

an alternative to differential equation modeling is the use of discrete models  <cit> . this method is based on qualitative and parameter-free information  which is available in the biomedical literature and/or directly from laboratories, simplifying the process of building and modifying the models. although discrete  models have been adopted to study the dynamics of gene regulatory networks and in the studies of signal transduction networks  <cit> , the overall use of boolean models to visualize biochemical processes is sparse relatively to the differential equation-based approach. as a result, only a limited number of software tools based on this approach exist .

one reason for the lack of development of boolean modeling tools for life sciences is that biologists aren't well versed in discrete modeling. in most cases, nodes in such models are in either an on or off state, often represented by '1' and '0', respectively. for laboratory scientists who are accustomed to dealing with continuous data , such representation may be unintuitive and difficult to use. thus one way to advance the use of discrete models for biological systems would be to create the ability to interact with them using continuous terms.

in this report, we describe in detail chemchains, a suite of software tools used in our recent study  <cit> . chemchains was developed as a core platform to simulate, analyze and visualize the dynamics of large-scale boolean biochemical networks under tens of thousands of different environments, while enabling users to interact with the model in a continuous manner. thus biological investigators can interact with their models in a familiar way, while preserving the benefits of parameter-free models. although chemchains simulations performed in  <cit>  were done in a synchronous fashion , chemchains also offers asynchronous updating where certain nodes can update at different time points during the simulation process.

implementation
boolean networks and their dynamics
although relatively simple, boolean networks are able to capture the dynamics of systems ranging from trivial to exceedingly complex, including those of living systems  <cit> .

boolean networks
these networks are collections of labeled boolean nodes connected with directed edges. in boolean networks, the state of each node at time t can be either on or off, often represented by '1' and '0', respectively. consider the simple network shown in figure 1a <cit> . this network has three nodes and each node is connected to each of the others. the activation function  and the logical connections for each node can be described by a truth table . truth tables give the on/off state  of each node as a function of the on/off state of the other two nodes connecting to it. herein, nodes that determine the activation function of another node are referred to as "input nodes" or "inputs". thus the third table shows that node  <dig> will be on if either input  <dig> or  <dig>  are on.

the network exists at time t in some initial state, with each separate node either on or off. at the next time , the states of all three nodes will change according to the tables shown. the evaluation of the entire system from time t to time t +  <dig> can be represented in a single table  where the column t contains all the possible initial states of the system and column t +  <dig> shows the result of application of the logic set to each initial condition. continued iteration by the same method results in a trajectory of the system as the states change over time.

boolean attractors
the network introduced in figure  <dig> is simple enough to view all of the possible trajectories, which are shown in figure  <dig> <cit> . in panel a, for example, the system is shown to be at an initial state of node  <dig> =  <dig>  node  <dig> =  <dig> and node  <dig> =  <dig>  or  <dig>  according to the logic tables in figure 1b , at the next time point the system will remain at  <dig>  this trajectory is indicated by the arrow in panel a. similarly, panels b and c show the trajectories for the other possible starting combinations.

because there are a finite number of nodes in the system , there are a finite number  of possible states of the system. thus, as the system travels in time, it must  re-enter a state previously encountered. as shown in figure 2a and 2b, when the system is at state  <dig> or  <dig>  it remains there , thus those two states are referred to as steady-states. panel c shows that if the system is at state  <dig> or  <dig>  it cycles between those two states, a trajectory that is referred to as a period  <dig> cycle. finally, panel b shows that there are four other states of the system  that follow trajectories to the steady-state  <dig>  in summary, figure  <dig> shows that the network described in figure  <dig> has three conditions  called attractors into which the trajectories of all initial states eventually settle.

using attractors to characterize node activation
as can be seen in figure  <dig>  once a boolean network has settled onto an attractor, it will remain there. thus, it is possible to characterize the activation state of each node in the network by determining the "percent on" of each node over the entire attractor. for example, there are three attractors  of the network introduced in figure  <dig>  looking at the fixed point attractors in panels a and b in figure  <dig>  it is obvious that all three nodes are 0% and 100% on, respectively. however, in panel c there are different behaviors. on this attractor, node  <dig> is 0% on, but nodes  <dig> and  <dig> are both 50% on as they alternate between  <dig> and  <dig> at every step in the attractor. consider another example â€“ a simple hypothetical two-component positive feedback loop in which node a activates node b and vice versa with two different configurations of truth tables for each node . in figure 3a, both nodes are activated when the other node is  <dig>  but deactivated when the regulating node is  <dig>  as shown in figure 3a, this configuration and activation mechanism results in three attractors , that will make both nodes either 0%, 50%, or 100% on, depending on the initial state of each node. the tristability  is also demonstrated by results from a sample chemchains simulation experiment shown in the graph in figure 3a . the second truth table configuration  depicts an activation mechanism in which both nodes lack the negative regulatory step . as shown in figure 3b, setting up the truth tables this way results in the system moving to one of two attractors, depending on the initial condition . in terms of percent on, this configuration results in both nodes being either 0% or 100%on as shown by results from a chemchains simulation experiment . it is also worth noting that bistability  is an intriguing higher order property of positive feedback regulation found in many real biological networks. the boolean positive feedback loop in figure 3b hence makes a nice example of how the bistability phenomenon can be simulated using chemchains.

chemchains overview
chemchains is a platform-independent, command-line-driven simulation and analysis tool for boolean networks implemented in c++, using object-oriented methodology. by default, chemchains uses synchronous updating for all nodes in the model, however, asynchronous updating for user-selected nodes is also available . the software is built in an extension-based fashion, which will allow for the expansion of the collection of analysis tools used in chemchains. the current version of chemchains consists of the main simulator engine and two extensions  used in our recent publication on information processing in signal transduction networks  <cit> . to run chemchains, users must provide several input files . once simulations and/or analyses are initiated, chemchains will create several types of output file formats. both the input files, as well as the desired output format and the output files must be specified by users in the form of command-line parameters provided to chemchains at the time of program initiation. available parameters are summarized in table  <dig> 

software input
to simulate boolean networks with chemchains, two input files are required: a network descriptor file and a simulation specification file.

network descriptor
network descriptor file is a chemchains-specific text file containing the collection of activation mechanisms of boolean nodes in a given boolean network model. in this file, the activation mechanism of each node is described on a new line in the following format:

bool:name:initial state:input <dig>  input <dig> .inputn:list of states of input nodes for non-initial state of a node of interest 

the "bool" prefix tells the software that the node is of type boolean .

for example, consider a node x with two input nodes a and b that both need to be on in time t for x to be on in t+ <dig>  the truth table depicting this scenario  is represented as :

bool:x:true:a, b:tf, ft, ff ,

or for the case where the initial state of x is off:

bool:x:false:a, b:tt 

the initial state  of each node has to be defined prior to any simulations. the initial states can be assigned either by the user , or for more general analysis, randomly by chemchains using the 'rand_init' parameter. using the 'rand_init' parameter results in the creation of a new network descriptor file during each simulation, reflecting the new initial states of all nodes. each network descriptor file is subsequently saved in the 'logic' folder  of the conducted experiment for later review.

simulation specification file
chemchains is a feature-rich logic network simulation software which offers users many advanced simulation options. these options are specified by users in the simulation specification file, the second of the required input files, which is loaded into the program before each simulation experiment. the following describes the various options contained within this file:

a) runtime
the runtime variable specifies the overall length of each simulation, as well as the number of iterations  before any analysis is conducted. the syntax for the runtime environment is specified as

runtime:transienttime:totaltime

for example, to conduct a simulation consisting of  <dig> iterations and  <dig> transient time units, the runtime is declared as

runtime:50:200

b) external input nodes
chemchains users have the ability to specify external input nodes  representing various external biological factors . note, that external input nodes are not the same as the "input nodes"  discussed in the boolean networks section. in fact, external input nodes are external to the network and part of the outside environment. although they are of a boolean nature , external input nodes do not have any input nodes of their own . in fact, their activity is set by the user . to provide users the ability to interact with the logical model in a continuous manner, the level of activity of each external input node can be set to a percentage on . despite the fact that external input nodes are boolean nodes, for any given simulation, this is accomplished by placing the external input nodes on a cycle that yields a desired % on . for example, if a particular external input is set at 33%, it is put on a cycle of  <dig> .. which is held constant for the duration of the experiment. the sequence and order of the on- and off- states is generated by chemchains during each simulation. the current implementation of chemchains offers two ways to distribute the on/off state along this sequence: i) evenly  and ii) with noise  which allows for a more realistic simulation of a biological process where network inputs are almost always noisy. users can select time frames of simulations with different levels of activity. for example, in a simulation consisting of  <dig> iterations, a user may want to see how the network behaves when an input is set to 10% on during the first  <dig> iterations, 50% during iterations  <dig> â€“  <dig>  and 100% for the remaining number of iterations. note that the changes in the external input activities occur in a stepwise manner . the format underlying the declaration of external inputs is as follows:

input:name:initial/default value:random/fixed:noise/fixed/:time to be introduced:dosage :duration of the dosage

consider the above mentioned example of a 200-iteration network simulation. to set a hypothetical external input "in1" to be on 10%  for the first  <dig> iterations, 50% on during iterations  <dig> through  <dig>  and 100% during iterations  <dig> â€“  <dig> , the following line is added to the simulation specification file:

input:in1:false:f:f:1:10: <dig> :50: <dig> :100:99

to run chemchains in an automated fashion and simulate a network under a wide variety of external environments , users can also specify an activity range for a given external input. during each simulation, chemchains will select a different percentage on for the external input. for example, to simulate a network with in <dig> varying between  <dig> and 100%, in <dig> must be declared as follows:

input:in1:false:r:f:1:0-100:199

c) noise
the noise variable allows the activity level of external input nodes to randomly bounce around the defined value within a specified range. for example, if the activity level for an external input is set to 50% with a noise range of  <dig>  the actual activity level, at time t, will be 50%+/- <dig>  to measure the current level of activity for each external input, and ensure that it is within the desired range during a simulation, chemchains uses a "sliding window"  approach. upon each iteration, the algorithm randomly selects a new activity level value within the given range. if the percentage within the window is below the new value, the external input will turn on. on the other hand, if the percentage is above the activity level, the external input will be off in time t+ <dig> 

although the sequence of 0's and 1's for a given external input node will will yield 50% 1's, it will no longer be periodic, instead it will appear chaotic, a more realistic resemblance of biological stimuli. for example, a simulation with the noise parameter set to  <dig> and a sliding window of length  <dig> is specified in the specification file as

noise:50:5

d) snapshotanalysis
the snapshotanalysis parameter allows chemchains to capture the state of the network dynamics at a specified iteration point during a simulation. the snapshotanalysis parameter is specified as follows:

snapshotanalysis:period:point <dig>  point <dig> ..pointn

where the period defines the length  of the simulation segment to be analyzed, whereas point <dig>  point <dig> ...pointn represent at which iteration the analysis will begin.

e) mutation
the mutation parameter enables users to turn on/off any node in the network to perform mutagenesis studies . when a node is "mutated", its corresponding truth table is ignored by the simulation engine and the activity of the node becomes immutable for the entire course of the simulation. for example, to simulate a loss-of-function of node x, the user would declare the mutation parameter as

mutation:off:x

to make node x constitutively active, 'off' is replaced with 'on'.

f) delay nodes
while chemchains simulates networks synchronously by default, it is possible to introduce an asynchronous factor into the simulations by declaring a delay and/or a sustain node . a delay node receives a signal from a single network node but will not respond to it for a specified number of iterations. delay nodes can be created in the simulation specification file in addition to the regular  network nodes declared in the network descriptor file. the syntax to declare a delay node is as follows:

delay:name:initial value:input:iterations to wait

g) sustain nodes
similarly to delay nodes, sustain nodes receive a signal from a single parent node, but contrary to delay nodes, sustain nodes remain in their current state for a user-specified number of iterations, regardless of the state of their inputs. to declare a node as a sustain node in the specification file, the users use the following syntax:

sustain:name:initial value:input:duration 

h) output nodes
in addition to "bool", " input", "delay", and "sustain" nodes, users can create nodes of type "output". output nodes mirror the activity of their input node and are used for nodes that will be outputted during the visual mode . output nodes are created in the simulation specification file as follows:

output:output name:initial value:input node name

output formats
once chemchains is initiated, a main output directory 'ccoutput' is created outside of the chemchains program's directory, which subsequently stores all output files generated by chemchains. currently, chemchains can be run in three modes, each producing different types of output formats. the first mode is a file conversion mode used to convert truth tables to a network descriptor file, whereas the second modes is a single-simulation visual mode which allows users to visualize the activity of any given output node during the course of a simulation. the third mode is a calculation mode which enables users to perform automated experiments involving tens of thousands of independent simulations with various levels of network stimuli. all available modes are detailed below.

file conversion mode
as described above, to run chemchains, a logical network descriptor is required. while it can be created manually, creating truth tables in a tabular form poses a more intuitive way of defining the activation mechanism for each node. once users create all truth tables describing their network, the truth tables need to be converted to the required network descriptor file. this conversion can be accomplished by using the 'fileconverter' extension available in chemchains. to use this extension, users can save the truth tables in tab-delimited text files  and create a list of nodes contained in the network. to initiate the conversion process, chemchains needs to be run with the '-tt2nd' parameter. in addition, a node list file , an output file, as well as a directory path containing the set of truth tables must be specified via the '-inodes', '-o', and '-itables' parameters, respectively. once the conversion is complete, the network descriptor is saved in the previously specified output text file.

the node list file is a tab-delimited text file is supplied to chemchains in order to convert a set of truth tables to a network descriptor file. the first column contains the name of all network nodes . the second column provides the node id. note that for external input nodes, the id has to contain the 'in' prefix which helps the software to recognize external input nodes from the remaining network nodes. the initial state column is where the user can specify the initial state for each node .

furthermore, fileconverter can be used to re-create the truth table for each node from a given network descriptor file. this is done by instantiating chemchains using the '-nd2tt' parameter, whereas the input file  is specified via the '-ilogic' parameter. the corresponding truth tables are created in an output folder defined by the user .

visual mode
the visual mode allows users to visualize the dynamics  of the output nodes declared in the specification file  during the course of a single simulation. the output created by chemchains is a text file containing a table of activity for each output node in terms of the off/on states , where '*' represents the on state, whereas '.' represents the off state of a particular output node. to run chemchains in the visual mode, the user needs to provide both input files , as well as an output file using the '-vis' command-line parameter . the output file with stars and dots for each output node will be created and saved in the chemchains output directory.

calculation mode
once chemchains is started in the calculation mode, a 'stats' directory is created in the main chemchains output folder to house all of users' subsequent simulation experiments. output files of each experiment are stored in the stats directory in a folder labeled by the user . the list of all output files created during each experiment is summarized in table  <dig> 

to provide users with the ability to visualize and/or analyze the dynamics of the network of each simulation at the on/off state level of each node, chemchains saves strings of 1/ <dig> bits for each simulation in text files stored in the 'bits' directory. each column in each file represents the on/off states for one node  in the network, where '1' codes the on state and '0' codes the off, whereas the rows represent the state of that node in time t of a given simulation. because detailed bit printing of each simulation requires a significant amount of simulation time, bit outputting can be suppressed by using the '-nobits' parameter.

the most notable feature of chemchains is the ability of users to interact with their models in a continuous manner. similarly to the external input nodes, the activity of each node is calculated and expressed as a percent on . this allows users of chemchains to observe activation patterns of all nodes in the network across thousands of simulations with varying stimuli levels. the activity levels of all nodes during each simulation can be found in a tabular file . to provide users with detailed experiment information, the 'nodesavg' directory contains separate files with activity levels  for each node in the network. chemchains also allows users to capture "snap shots" of the network's dynamics in different time points of a single simulation. this feature can be enabled in the simulation specification file as described in the simulation specification file section. the snapshot activity information obtained about the network is subsequently saved in the 'snapshotsanalysis' directory.

in addition, the calculation mode allows users to perform various analyses after each simulation. these analyses are implemented as separate extensions to the software, and can be instantiated using various parameters when starting new experiments. the current version of chemchains contains the 'patterns' extension used in our recent study  <cit> . description of this extention follows.

patterns extension
chemchains can be used to conduct experiments consisting of thousands of simulations under various input conditions , generating a large amount of data ready for systems analysis. the patterns extension allows users to view the system's dynamics in a more organized and intuitive manner by classifying the activity levels of user-defined nodes into groups based on a pre-defined activity level range, called patterns.

for example, consider a single-simulation experiment which results in output node a being 70% on, node b 2% on, and node c 23% on. to create a pattern representing the activity of these nodes as the outcome of the simulation, the percentage on of individual output nodes is classified as one of three levels : i) "low" if the node percent on is between 0% and 10%, ii) "medium" for nodes that are on 11â€“30%, or iii) "high" nodes with activity between 31% and 100%. each level is subsequently coded as '0' , '1' , and '2' . therefore, the pattern for output nodes a, b, and c is '201'.

when performing chemchains experiments consisting of multiple simulation, each simulation will be assigned to a pattern based on the outcome of individual output nodes, as explained above. simulations assigned the same patterns will form groups represented by the pattern. each pattern is then associated with an average input vector and average output vector . figure  <dig> illustrates how the output of the patterns extension is created using partial data generated from a chemchains experiment on a large-scale model used in our recent paper  <cit> . the external input nodes of the large-scale model used include extracellular matrix , epidermal growth factor , external calcium pump , four g-protein coupled receptor ligands , il1/tnf, and extracellular stress, whereas the output nodes of interest are akt, erk, cdc <dig>  and rac. the subsequent experiment consisted of  <dig>  simulations with randomly generated combinations of external input node dosages during which the activity  of the four aforementioned output nodes was measured. see figure  <dig> caption for more details demonstrating how the multiple simulation output is created.

because the ranges defining each activity level , as well as the number of levels used in the example are arbitrary, users can define these properties according to their needs in the 'infiles/exts/patterns/settings.txt' text file. the patterns output nodes are defined  in the 'infiles/exts/patterns/patternsoutnodes.txt' file. these patterns consist of the defined output nodes, whose activity reaches levels within a user-specified range over multiple simulations, as well as the input sets that result in these levels, allowing users to assess global-input vs. global-output relationships. the summary results  from the pattern analysis extension are saved by chemchains in a tab-delimited output file, while the detailed data  are stored in a spreadsheet file created in a folder named after the pattern, in the 'patterns' folder for later revisions of the experiment data.

RESULTS
modeling of biological processes has become an important component of biomedical research that provides additional tools to study and understand the underlying mechanisms of these processes. the biological modeling community has made significant progress in developing a number of sophisticated mathematical tools and methods that provide the ability to create models and view their dynamics. however, with the increasing sophistication of the mathematics underlying the representation and simulation of various biological systems, only investigators who are trained modelers can use and develop such systems; it essentially becomes impossible for laboratory scientists to create and use sophisticated models directly.

due to the complex mathematics and the immense number of parameters required, the practical use of continuous models and simulation tools as a daily part of laboratory research is difficult. although other approaches based on less mathematical concepts such as petri nets  have been used for modeling of biological processes  <cit> , boolean modeling combines the mathematical simplicity of those methods with a more intuitive way of interpreting the subsequent models. on the other hand, the inherent discrete nature of logical models does not square with the fact that laboratory experiments are performed in terms of continuous data . this creates an interpretation barrier between the data output of discrete tools and the experiments laboratory biologists conduct. in other words, it would be best for biologists if their in silico experiments produced richer data than 0's and 1's. to address this issue, chemchains allows users to interact with their boolean models in a continuous fashion, while preserving all advantages of logical modeling. users have the ability to specify the activity of their external input nodes  as a percentage on. similarly, the activity levels of all  nodes are expressed as percent on. as discussed in the implementation section, the "percent on" is a way to represent an attractor in boolean models, and the biological meaning of the percent on measure is dependent on the nature of the nodes and the overall model. for example, it might correspond to the level  of phenotype manifestation such as differentiation into a particular cell type or, as in our signal transduction model from our recent study  <cit> , percent on could correspond to the ability of a signaling molecule  to transmit a signal received from another signaling molecule to a downstream effector molecule. depending on the nature of the signaling molecule, that ability might be expressed in terms of protein activity, expression, concentration, etc. the advantage of the percent on measure used in chemchains is that it provides a semi-quantitative way to measure the levels of the nodes' activity and/or the direction of a change in these levels due to perturbations, something that laboratory scientists deal with on daily basis and hence can find intuitive and relatively easy to use.

in addition to the above mentioned functionality that makes in silico simulations of boolean models more accessible to laboratory scientists, chemchains also offers powerful analysis that can be performed by running automated experiments in which users can simulate their models under tens of thousands of randomly generated external conditions. the available patterns extension categorizes each simulation and a specified group of output nodes into discrete groups, representing global responses  based on their activity level. each pattern is then represented by an average output vector and an associated average  input vector, which provides a quick way for biologists to learn how their model responds to certain a set of stimuli and how these stimuli map to a specific response; an important feature to aid the understanding of how complex biological structures function and improve the development  of treatments for diseases associated with these systems  <cit> . furthermore, investigators can use the software output to easily verify how well the activity levels of specified nodes fit the available empirical laboratory data . this presents to biologists a novel tool to obtain insight about unavailable regulatory information, which can be confirmed or rejected by a controlled experiment in the laboratory.

in this particular experiment, ecm, egf, extpump, alpha_q, alpha_i, and alpha_12_ <dig> ligands were set to vary between 0â€“100% on, while il1_tnf and stress varied between  <dig> and 5% on. the first and second columns summarize all global outputs  and their frequency produced by the model in response to the various external stimuli. columns labeled as average inputs represent all external inputs and their average % on value for a given global output. similarly, average outputs contain output nodes and their average % on for a given pattern. in this example the patterns are in ternary: 0â€“9% on =  <dig>  10â€“29% on =  <dig>  and 30â€“100% on =  <dig>  these ranges were determined to be the most useful in previous experiments  <cit> , but any ranges  can be used. focusing on the first row, it can be seen that there were  <dig> of the  <dig> simulations where output pattern was '1000', i.e., akt output was in the 10â€“29% range, erk was in the 0â€“9% range, etc. of those  <dig> simulations, the average output values of akt was  <dig>  the average erk value was  <dig>  etc. the average external-input values that elicited the '1000' response is given in each of the inputs columns, e.g., the average external-input value that resulted in the '1000' response was ecm = 23% on, egf = 26% on, etc. these experiments were carried out under non-stress conditions, thus il1_tnf and stress external inputs varied only from  <dig> to 5% on.

another chemchains function of great use for many laboratory scientists is the ability to perform in silico mutational studies. chemchains offers the ability to select nodes that will simulate the loss-of-function or gain-of-function scenarios . as an example of how chemchains, in combination with the patterns extension, can be used for the above mentioned mutation studies is illustrated on the signal transduction model  in table  <dig>  in this example, ras  was "mutated" to stay on, which resulted in a significant activity increase of erk  as well as the anti-apoptosis akt, a possible indication of uncontrolled cell growth. this corresponds to a cancerous cell, whose signaling has been altered. this type of input-output mapping allows biologists to predict the behavior of the model in response to its stimuli.

similarly to table  <dig>  results summarized in this table were generated during an experiment consisting of  <dig>  simulation with the same paremeters . contrary to the simulation from table  <dig> however, in this example, cells were simulated with constitutively active ras. results of this experiment show a marked increase in erk activity , simulating a growth-factor independent activation of erk. this phenomena can be easily seen either in the global output and count columns where  <dig> of the  <dig>  simulations produced the '2200' pattern  and over  <dig> simulations resulted in '22xx' or the average output column which shows that the majority of external-input combinations resulted in erk average activity of 75â€“82%.

as illustrated by the above examples, chemchains and its patterns extension provide biologists with a set of tools that allow predictive model simulations based on the nature of the responses produced as a result of given stimuli . in addition, this software forms a solid platform for laboratory biologists to bring systems biology to their laboratory by being able to perform simulations and analysis of model of biological structures directly and independently of mathematicians and modelers.

chemchains is under constant development to expand its functionality and increase its user-friendliness. the following are examples of areas of chemchains development our group is addressing or planning to address in the near future. although the software offers rich functionality while keeping the number of command-line parameters to run the tool low, a graphical user interface would make chemchains more intuitive and user-friendly. our group is currently implementing a graphical user interface that will allow laboratory scientists to build logical networks, as well as perform simulation and analysis that will provide users with the means to display their results in a more exible and intuitive way than is currently available. for example, users will be able to control the dosage levels of external inputs via slider controls and observe the activity of output nodes in real time.

additionally, as new models and simulation tools are created and implemented, respectively, the need for a standard way of sharing model information between various research groups and their simulation tools became apparent. to address this need, m. hucka et. al.  <cit>  have developed the systems biology markup language , a standard describing network models. sbml has been adapted by a large number of simulation tools, allowing users to share their models. because sbml currently supports mostly continuous modeling techniques, chemchains is currently not sbml-compatible. however, the sbml developers are currently working on the integration of logical models into the standard for the upcoming version of sbml, therefore the next version of chemchains is anticipated to include a support for sbml.

furthermore, to ensure that scientists can use chemchains for extensive simulations of large-scale models, the software will require the support of multi-core/processor computers. thus our group is planning on optimizing chemchains to take advantage of not only multi-core processor computers, but also more powerful supercomputers. this will decrease the amount of time needed to run chemchains simulations and analysis.

CONCLUSIONS
as systems biology and the development of mathematical models progress and these models become more complex, their use requires more advanced mathematical knowledge. for laboratory biologists to take advantage of the systems biology paradigm as a compliment to their laboratory experiments, simulation tools that will allow them to perform in silico simulation experiments in a mathematically friendly fashion is a must. our group has developed chemchains, a simulation and analysis platform to allow laboratory scientists to visualize the dynamics of biological processes using non-mathematical, parameter-free logical models. in addition, chemchains allows laboratory scientists to interact with mathematical models in a way which resembles laboratory experiments, and provides the investigators with new tools to see the big picture in the realm of biological processes. the software allows biologists to perform simulations of their model under thousands of varying stimuli and learn how the models respond to different combinations of conditions, an important step to understanding how many complex biological processes, such as signal transduction, function.

availability and requirements
chemchains has been tested on a windows and linux platforms. to run chemchains on a windows-based computer, a *nix environment needs to be installed  chemchains software along with a detailed tutorial on how to use the tool are available on-line  <cit> .

authors' contributions
th and jar designed the software. th implemented and deployed the software. th wrote and jar reviewed the manuscript. both authors read and approved the final manuscript.

