BACKGROUND
the kegg pathway database provides a valuable resource for initial modeling approaches of specific biological networks  <cit> . the database contains pathway maps for a multitude of different organisms and most provided information is cross-linked with other kegg databases. since many years, this database has been one of the most important sources for building initial structural models of various pathways  <cit> . all pathway information is stored in kgml formatted xml-files, which are barely supported by other applications. in systems biology, two wide-spread formats for modeling and exchanging pathways are the systems biology markup language   <cit>  and biological pathway exchange   <cit> . these formats can be used with graphical modeling applications , complemented with rate laws , used for flux balance analysis , and many more applications. therefore, converters exist that perform mostly basic conversions from kgml to those formats  <cit> . the drawback of many of those converters is that even for creating initial models, a basic translation of a kgml document to an sbml or biopax document is not sufficient.

the kgml documents provided by kegg are mainly designed for graphical representations of pathways. the xml-objects in these documents comprise entries , relations  and reactions . relations are mainly contained in signaling maps and encode information such as “a activates b”. reactions are primarily contained in metabolic pathway maps and consist of substrates, products and information about reversibility of the reaction. given this information, it seems straightforward to derive an algorithm for generating viable metabolic models. but a closer look on the actual maps shows that even those reactions are often created for visualization and not for modeling or simulation purposes. reactions are sometimes bundled, i.e., multiple different biochemical reactions are encoded in a single xml-reaction object. there are often missing reactants for reactions, stoichiometric information is omitted and also the list of enzymes, catalyzing a reaction, is not necessarily entirely contained in the kgml document. similar difficulties arise for the entries in a kgml document. for the sake of a high-quality graphical representation of the pathway, entries or other elements are sometimes duplicated. when interpreting the information content of those files, duplications must be taken into account. furthermore, a kgml document may contain references to entries, which are not physically present in the actual organism and the kgml specification even allows entries to be reactions. all those exemplary mentioned problems show that simple one-to-one translations of kegg pathway maps to other formats are not sufficient to build reliable and useful models.

to overcome all those difficulties, we deeply investigated the kgml documents, as well as the content of all cross-linked kegg databases, and developed strategies for building useful initial models in sbml and biopax. besides automatically correcting many of the mentioned issues, the proposed method includes extensive annotation and augmentation of all provided information to ease further model building and usage of those translated pathway maps. this ranges from adding simple database cross-references  over annotation of chemical formulas and molecular weight of small molecules, to an automated atom balance check of all reactions. all those strategies are now implemented in the second release of the keggtranslator application  <cit>  and described in detail in the following sections.

methods
several subsequent steps are involved in the creation of initial models from kegg pathways. all of these steps are described in detail in the following sections and depicted as a flowchart in figure  <dig> 

the kegg markup language 
kegg uses the kgml format to encode its pathways  <cit> . for each pathway, a generic reference pathway exists that is derived for a plethora of different organisms. all nodes in those pathways mainly correspond to proteins, small molecules, other referenced pathways or complexes and are encoded as entries in kgml. these entries have a type attribute that further specifies its nature. additionally, they may have a graphics attribute that is essential for pathway visualizations. entries corresponding to groups contain components that refer to their contained entries.

besides entries, kgml specifies reactions, which contain substrates and products that are essentially references to the corresponding entries. the only additional information that is given for reactions is a type attribute, which is either ‘reversible’ or ‘irreversible’. moreover, kegg specifies relations, which are primarily important for the visualization of signaling pathways. relations contain network connections between two entries, such as “a phosphorylates b”, or “a inhibits b” but they do not provide sufficient information for conversions to complete biochemical reactions.

preprocessing and correcting issues in the input kgml
prior to converting the kegg pathways to other modeling languages, several issues need to be corrected in preprocessing steps directly on the input kgml. these include operations that involve adding or removing entries from the kgml document, as well as processing contained reactions. the actual conversion to models is independent of those steps and is performed after the preprocessing. to generate reliable models, one might want to remove links to other pathway maps from the document. these referenced pathway maps are no physical instances and thus need to be ignored for some model simulation software. however, they might be required for cross-linking pathways. furthermore, orphans  might be useless for some modeling approaches and therefore may also be removed. an important step towards building metabolic models are correct biochemical reactions. the reactions specified in the kgml require significant preprocessing in order to reliably translate these to sbml or biopax. kgml pathways often contain single xml-reaction objects that point to multiple different biochemical reactions in the kegg reaction database. these bundled reactions must be disassembled into separate reaction objects in the xml document, in order to obtain a model with balanced and correct biochemical reactions. since the information provided in the kgml is limited, the kegg api needs to be queried for further correction steps. from the kegg api, information about reversibility of the reaction is retrieved, as well as the reaction equation, including all substrates, products, catalysts, and stoichiometric information. the reversibility is directly annotated on the reaction, the stoichiometric information has to be stored in separate classes, which are later translated to the desired output format. the equation is used to check for missing reaction participants. but simply comparing all kegg identifiers that are present in the kgml to the reaction equation is not adequate. kegg consists of many separate databases that contain information about compounds, drugs, glycans, etc. therefore, one compound might have multiple kegg identifiers, e.g., one in kegg compound and another one in kegg drug. the reaction equations specify just one identifier for each participant, which is any of all available identifiers for an object. therefore, more queries to the kegg api are necessary in order to fetch all synonyms for all identifiers. now, it is possible to compare all reactants to the pathway components, check for missing reaction participants and eventually add those to the kgml. a similar method is required to check for missing enzymes —we use enzyme commission numbers  to check for missing enzymes.

one last important preprocessing step might be performed before converting the pathways to models. the kegg database uses information about orthology to provide pathway maps for different organisms. enzymes, catalyzing reactions are annotated using ec numbers, which are independent of actual organisms. in some cases, this leads to annotated enzymes or entries in the kgml, for which no physical instance in the current organism of interest is known. in other words, the entry does probably not exist in the current organism or its existence has not yet been proven. to visualize this information, kegg changes the background color of those orthologous nodes to white. these nodes should also be removed in order to obtain organism-specific models.

atom balance of reactions
after the described preprocessing step, the kgml document contains unbundled and complete reactions, for which the equation and stoichiometry has been annotated. using the kegg api, the chemical formula of each compound, participating in a reaction can be fetched. by using this information together with the stoichiometry, it is possible to count and compare all atoms on the substrate and product side. there are some further properties that need to be considered: a generic ‘r’ is sometimes used on the substrate and product side to indicate any substituent. variables like n and n+ <dig> are used by kegg to create more generic reactions. during our tests, we detected some simple cases, in which an h+ or p+ was missing, but also some other cases, in which multiple atoms  were missing. automatically correcting those issues is not recommended, because the real missing components are unknown. for example, if a p+ is missing on the substrate side, larger compounds could be missing on any side of the reaction. the possibilities of missing components on both sides include atp → adp, nadph → nadh, and many others. therefore, our implementation appends the result of each atom check as comment on every reaction and researchers might have to manually correct reactions with missing atoms.

conversion and annotation of the kgml document
the completed and corrected kgml document can now be used to generate models. therefore, conversions to biopax, sbml, sbml-qual and several other formats are required. typically, the model instance has to be initialized and all entries need to be added to the model. caution needs to be taken in this step, because multiple copies of an entry might exist in one kgml document. usually, every graphical copy catalyzes different reactions. but for systems biology models, only one element should be created for all copies, representing a union of all physically identical entries. furthermore, kgml specifies an entry type called ‘reaction’, which should not be converted to a physical entity in the resulting model. depending on the modeling language, either the reactions or the relations or both need to be converted to the chosen format.

besides those conversion steps, additional operations are required in order to facilitate further modeling efforts by researchers. this includes extensive annotations and comments for all elements. hence, gene ontology terms, describing the elements and their function, as well as identifiers for a plethora of other databases for genes, proteins, interactions, structural information, small molecules, etc. are added to the model. in more detail, identifiers are added for entrez gene, omim, ensembl, uniprot, chebi, drugbank, gene ontology, hgnc, pubchem, 3dmet, ncbi taxonomy, pdbechem, glycomedb, lipidbank, ec numbers  and various kegg databases . besides those cross-references, other helpful human and machine-readable annotations are added, for example, official gene symbols, synonyms, human-readable descriptions, links to more resources or visualizations, and the chemical formula and molecular weight for small molecules.

the annotation of the models is an important step, because simulations on real data or simple experimental data visualization tools require unique identifiers to map the experimental data on the pathway structure. if models provide a simple data structure with labels, but no reference identifiers, they are hardly usable in conjunction with experimental data.

kegg to biopax
today, level  <dig> is the most recent level of biopax. but level  <dig> is still common and there are some data structures in level  <dig> that are not available in level  <dig>  therefore, separate converters for biopax level  <dig> and for level  <dig> are required. first of all, a biopax model has to be created and a pathway object, corresponding to the input kgml, needs to be added to the model. then, several annotations and cross-references are defined for this pathway. this includes, for instance, the organism, cross-references to other databases, and gene ontology terms to define the pathway’s function. the next step involves mapping each kgml element to a corresponding biopax element. figure  <dig> gives an overview of these mappings.

this table depicts the conversion of kgml entries to biopax or sbml. the conversion depends on the kgml entry type attribute. for biopax, different class instances are initialized. conversions to sbml always involve the creation of a species with the given sbo term for each kgml entry. the kgml specification states that an entry of type ‘gene’ “is a gene product ”. additionally, a ‘group’ “is a complex of gene products ”  <cit> . for compatibility with previous kgml versions, the deprecated type ‘genes’ corresponds to ‘group’ since kgml v <dig> . <dig>  further, entries of type ‘reaction’ are not listed in the table, but discussed in a separate section.

this table shows how relations are handled during conversion to biopax or sbml. the conversion depends on the subtype of each relation. for each subtype, the corresponding biopax element, as well as terms from different ontologies are specified. when converting to biopax, all terms are annotated as an instance of interactionvocabulary, whereas an sbml transition has a field for the sbo term and other terms are added as controlled vocabularies on the transition. please note that some biopax elements are subject to certain conditions and others need to be replaced by more generic classes in biopax level  <dig>  due to differences in both releases. please see the kegg to biopax section for more details.

having the initial pathway model, the next step is to create biopax elements for each kgml entry. this translation mainly depends on the type of the kgml entry and is listed in detail in table  <dig>  entries with the same identifier  are grouped to one instance and only one biopax element is created for those. depending on the just created biopax element, further annotation steps are required. forcomplexes, we need to add all of its components. for smallmolecules, we add the molecular weight and chemical formula to the corresponding biopax fields, which facilitates further modeling steps. for each element, cross-references to other databases and more annotations are added as described in the previous section.

kegg reactions always correspond to biochemical reactions. thus, a biochemicalreaction is the appropriate data structure for those reactions and one instance of this class is created for each kgml reaction. if catalyzing enzymes are annotated, a catalysis instance is created. this catalysis catalyzing enzymes as controllers and the biochemicalreaction as controlled element. the reaction is annotated with the reaction direction and if it is reversible or not. further, the stoichiometry of each participant is annotated, as well as the ec numbers of all catalyzing enzymes. even to the reactions, human readable supporting information is added, like the reaction equation, other pathways in which this reaction also occurs, and a generic description. in addition, the result of the atom balance check is added as further comment, together with comprehensive information which atoms are on the substrate side, which are on the product side and the difference between them.

besides biochemical reactions, biopax also supports other kinds of relationships between entities. these include universal elements, such as conversions or molecularinteractions, which are convenient for translating generic kegg relations that do not provide much information. relations of type ‘activation’, ‘inhibition’ or ‘missing interaction’ constitute examples for such generic translations. the difference between those is that conversions can be used to specify a source and a target, whereas molecularinteractions  only have a single pool of participating entities. other kegg relations can be converted to more specific biopax interaction classes. a complexassembly, for example, is used to express a binding between multiple elements, but also for a dissociation of elements. however, the usage of this class requires that the given product or substrate  is a complex. if these requirements are not met, a generic conversion is used. relations that involve the modification of a protein are appropriately translated to biopax by creating controlled processes. this involves the creation of a control element that contains a process and a controller that regulates this process. this is used to translate relations that describe, e.g., a phosphorylation.

to this end, a conversion is generated, which contains the unphosphorylated protein as source and a phosphorylated variant as target. this conversion is controlled by an instance of controller that contains the controlling protein.

in biopax level  <dig>  some additional improvements of the translations are performed, such as encoding phosphorylation or other modifications by adding a modificationfeature to an entity. furthermore, the expression of a protein can be encoded with a templatereaction. this type of interaction is used to describe the production of an rna or protein from a template sequence. this process is regulated by a templatereactionregulation that contains mostly a transcription factor as regulator. in kegg, this is specified by a relation that contains the transcription factor as source, the protein as target and the term ‘expression’ as subtype.

an interactionvocabulary is created for each translated relation that specifies the type of interaction as controlled vocabulary term and human-readable string. for this purpose, terms from the systems biology ontology   <cit> , gene ontology   <cit>  and molecular interactions ontology   <cit>  are used. protein modifications are further denoted by a sequencemodificationvocabulary in biopax level  <dig>  which uses terms from the protein modification ontology   <cit> . table  <dig> shows in detail, how each relation is converted, and which ontology terms are being used.

kegg to sbml
even though it is not the latest release of sbml, level  <dig> version  <dig> is still used in many applications and hence, should be supported for the conversion of metabolic models. the most recent sbml level  <dig> release introduces extension packages and is required to include qualitative models , groups, and layout information in the document, which are essential for modeling signaling pathways. at the first glance, conversion of kgml to sbml seems to be simple. this is also suggested by the mapping scheme, depicted in figure  <dig>  but in sbml, the distinction between various relation or entry types is not made by using different class instances, as in biopax, but by using special attribute-value pairs, such as sbo terms. kegg defines entries and an entry type, which specifies if the entry corresponds to a protein, complex, small molecule, referenced pathway map, or some other type. biopax provides different classes to distinguish between those types. sbml, similar to kgml, just has a class named species to encode all those entries. the type of the species should be specified by using terms from the systems biology ontology   <cit> . these sbo terms are hierarchically organized and only sbo terms from the ‘material entity’ branch should be used to encode the entities. table  <dig> shows, which sbo terms are most appropriate to encode the different kgml entries. furthermore, as in biopax translations, it is important to group graphical copies of the same entries to one element and to create only one species element for this entry. to make the model usable for further applications, extensive annotations and references to other databases are added, using standardized controlled vocabulary  terms and miriam identifiers  <cit> . further, a description, various synonyms, the cas number, chemical formula, a reference picture , molecular weight, and mass are added as human-readable annotation, if available.

groups are not supported by sbml-core. in order to encode entries of type ‘group’ in sbml level  <dig>  one can use the groups extension package  <cit> . to encode groups in sbml prior to level  <dig>  the only way are annotations, for example by adding a cv term with a bqb_is_encoded_by or bqb_has_part qualifier that specifies the contents of the group. in any case, an sbo term should also be used, which marks this species as a complex of multiple other species.

kegg reactions are converted to sbml reactions with correct sbo terms for substrates  and products . if the reaction is reversible, a generic reactant sbo term  should be applied to all reaction participants. in addition, the reversibility is annotated to the reaction itself and the stoichiometry is annotated on all reaction participants. catalyzing enzymes are included as modifierspeciesreference and cv terms, referring to the kegg reaction identifier as well as all pathways, in which this reaction occurs, are added. human-readable annotations on reactions include the reaction definition, equation, a reference to the reaction equation as html-image, and the result of the atom balance check .

relations are required to encode signaling pathways but cannot properly be included into core sbml. there is no structure that encodes, e.g., “a activates b”—we can only add reactions to sbml. for sbml level  <dig>  the recently proposed qualitative models  extension package solves this problem  <cit> . this extension is designed for qualitative modeling and allows for modeling relationships that cannot be described in detail. thus, to encode the kegg relations, we have to convert the model to a qualitativemodel and create a qualitative transition for each relation. an sbo term, as given in table  <dig>  is assigned to the transition to specify its type. a go term, mentioned in the same table, is further added as cv term on the transition.

further kgml characteristics
kgml entries that are reactions
the kgml specification allows entries to have a type called ‘reaction’. this can be used, for example, to let a relation point to a reaction. actually, kgml only allows entries to be targets of relations but these constructs can be used to relax the constraints. however, biopax naturally allows interactions to point to other interactions as sources or targets. hence, the document structure is not invalidated if entries with type ‘reaction’ are converted to real reactions in biopax and every use of this entry is replaced by using the biopax reaction.

in sbml, these entries are also converted to reactions. no species is created for entries with type ‘reaction’ in sbml-core. for sbml-qual, the specification has similar requirements as kgml: all transitions must have qualitativespecies as sources or targets. therefore, for sbml-qual the translation is similar to the source kgml and a qualitativespecies with adequate annotation is created for entries with type ‘reaction’.

relations of subtype ‘compound’
some kgml documents include reactions and exclusively relations of subtype ‘compound’. these compound-relations are mostly relations between enzymes and compounds. kegg states that this compound is “shared with two successive reactions ”  <cit> . in other words, these relations are copies of reactions that have been created by kegg for the sake of better graphical representation of the pathway. thus, translating both, the reactions and the compound-relations, would yield duplicated information.

documents with glycans instead of compounds
sometimes, kgml specifies glycans as reaction participants instead of compounds. actually, there is nothing wrong with this, except that the kegg api often returns reaction equations with compound identifiers and some attributes, such as chemical formula or molecular weight, are exclusively available for compounds. this leads to reactions that are erroneously detected as incorrect or to missing chemical formulas. therefore, if a synonymous compound identifier is available for a kegg glycan or another kegg database identifier that contains synonyms in kegg compound, it is advisable to fetch and internally work with the compound identifier. otherwise, it is very likely that duplicates of the same entries but with different identifiers are created in a model and some relationships are not correctly resolved.

implementation and availability
all described methods are implemented in the second release of keggtranslator . the application uses and includes paxtools, a java™ library for working with biopax that facilitates building and writing the internal biopax data structure . to establish the sbml data structure, keggtranslator uses the java™ library jsbml  <cit>  and supports sbml level  <dig> version  <dig>  <cit>  and sbml level  <dig> version  <dig>  <cit> .

keggtranslator is implemented in java™, provides an interactive, user-friendly and easy-to-use graphical user interface , and is freely available under the lgpl version  <dig> license from http://www.cogsys.cs.uni-tuebingen.de/software/keggtranslator/. kgml pathways can be downloaded automatically from within keggtranslator. the application can convert kegg pathways from kgml files to biopax level  <dig>  biopax level  <dig>  sbml , sbml , or sbml-core and -qual in one model. if desired, graphical representations can be created in sbgn, sif, gml, graphml, jpg and some other formats. furthermore, many options are provided that control the described  processing of kegg conversions and allow users to customize the generated models to meet a great number of different requirements.

RESULTS
we successfully established a procedure to create initial structural systems biology models from kegg pathways. these steps aim at complete reconstruction of specific metabolic or signaling networks and hence, go far beyond simple one-to-one translations.

but even with all the discussed enhancements and corrections, all models derived from kegg should only be considered as initial structural models. many researchers are interested, e.g., in tissue-specific variants of those models. others want to build kinetic models, constraint-based models, flux-based models, or any other specific model variant. hence, our goal is to build a solid foundation that can quickly be used for further applications. the generation of these models is eased by providing cross-references to many databases, synonyms, descriptions and other information. this helps researchers to further process the generated models to the desired real model. with the help of annotated cross-references, it is quite easy to, e.g., map experimental data on the resulting model and perform simulations, or use the annotated reactions to identify kinetics in databases such as sabio-rk  <cit> .

the models reflect an effort to use all available information about kegg pathways and consider the specific aspects of sbml or biopax to create complete and correct documents. these specific aspects include, for example, usage of sbo terms and miriam urns for metabolic sbml, as well as using transitions and qualitativespecies from the qual package to model signaling networks. for biopax, it is important to create correct instances, use cross-references and vocabularies for annotation, and fill corresponding fields, e.g., chemical formula or molecular weight of smallmolecules or the ec numbers of catalyzed biochemicalreactions. but besides those properties, there are more aspects of these formats that cannot be satisfied. this is owed to missing information and the aspiration to avoid creating knowledge out of nothing. in sbml, the signaling maps contain transitions that model all relations with information like ‘phosphorylation’ or similar. the qualitative function of transitions is encoded by functionterms, which define results and conditions in mathml. the information to fill those variables is not available for the kegg pathways and thus, cannot be given.

further, biopax level  <dig> provides very interesting constructs to encode several instances of the same protein. for example, one protein might be contained in a pathway in multiple states: inactive , and active . since level  <dig>  biopax provides entityreferences that allow for the creation of several entities in different states for a single entity instance . these are used to encode protein modifications during the translation of kegg pathways. however, if an element is further used in a subsequent relation, it is not possible to determine whether a protein takes part with its phosphorylated, raw or any other form. this distinction is simply not available in the kegg databases.

furthermore, a central dogma of biopax is to have controller and controlled elements to describe various interactions. for example, a controller could be an enzyme, controlling a reaction, which is used as controlled object. this construct is used whenever a regulating enzyme can be identified from the reaction or relation. but if, e.g., kegg annotates no enzyme on a reaction, or a relation is translated without knowing who controls this relation, no controller can be specified.

besides this, kegg does not provide information about compartmentalization. some kegg graphics do contain illustrations of compartments, but this information is hand-drawn in some pathway pictures and not encoded in any xml or referenced database. hence, the resulting models just contain a default compartment in which all elements reside.

comparison to other kegg converters
there are some other approaches to convert kgml to sbml or biopax. most of these approaches perform simple one-to-one conversions and do not augment or correct the content of the document. for visualizing a pathway model, this is not necessarily a problem, because there are almost no required processing steps, despite the actual format conversion. but for creating initial systems biology models, one should take care of all contained reactions and relations. some important aspects are, for example, that one reaction really is one complete reaction, that all entities can be mapped computationally onto at least one database, and that the resulting document is valid. we created a list of various criteria to compare different conversion tools. table  <dig> summarizes the result of this comparison.

this table compares various applications that can convert kegg pathways to biopax or sbml models. a checkmark  is given, if the corresponding converter completely fulfills all requirements, a circle  states that the requirements are only met partially or incorrectly and a minus  indicates features, which are not contained at all. ‘n/a’ indicates that a criterion is not applicable to a converter. a model is machine interpretable if entities in the model can directly be mapped to a database. the criterion human interpretable indicates that a model somehow assigns human readable names or gene symbols to entities. signaling pathways are supported if the converters can read and convert kegg models with relations. a conversion is complete if every relevant reaction of a kgml pathway also occurs in any form in the translated document. for visualization purposes, kgml files often contain multiple copies of entries or reactions. these duplicates should be removed. the contained reactions are often bundled  or miss some reaction participants. revision of reactions refers to the completion of missing reaction participants. the stoichiometry is not contained in kgml documents and must be parsed from reaction equations in the kegg reaction database. to test the validity of the models, we used the corresponding validators from sbml.org and biopax.org. a model is marked as valid, if the validator does not return any errors. for sbml, we further inspect if the models contain sbo terms. it is further recommended to include notes, such as human readable descriptions, and annotations . only for biopax, it is important to use the appropriate classes  and a nice feature to fill the available biopax fields for chemical formula or molecular weight of small molecules .

besides the here described method, no referenced converter is able to build signaling networks. all converters focus on metabolic networks only. before the release of the qualitative models extension for sbml level  <dig>  it was not possible to appropriately describe signaling networks in sbml. because all referenced converters focus on sbml level  <dig> or level  <dig>  it is correct that they do not convert signaling models. this is much more plausible than creating pseudo-reactions or similar constructs. the biopax converters also focus on kegg reactions. generally, relations encoded in kegg signaling maps seem to be completely ignored, which is incorrect, because biopax provides appropriate data structures to encode those relations.

keggconverter  <cit>  is implemented in java™ and able to translate kgml documents to sbml l2v <dig>  the resulting species  do not contain any annotations, notes, or sbo terms and are named with a human readable string containing kegg identifiers in brackets. thus, to computationally interpret those models and, e.g., map experimental data on them, one would need to reconstruct the kegg identifier with a regular expression on the name. the conversion is complete  and contains no duplicate entries or reactions. but reactions are directly converted as given: no unbundling of grouped reactions or augmenting of missing reactants is performed, and the stoichiometry is not set. in our tests, the sbml validator complained that the generated sbml is not valid, because keggconverter uses spaces in identifiers which is not allowed in sbml. besides the kgml conversion, keggconverter provides additional functionalities to add kinetics to the resulting models or merge different kgmls to one model.

kegg2sbml  <cit>  is a perl script for converting kgml documents to valid sbml, supporting all levels and versions up to l2v <dig>  this script uses various flat files from kegg databases as additional resources and is capable of generating appropriate reactions . unfortunately, the converted document is not complete , stoichiometry is omitted, and species do not have any notes, annotations or sbo terms. all elements are named by their respective human-readable name, which is nice for manual inspections but renders the converted models barely usable for further subsequent modeling steps. jsim  <cit> , a simulation system for quantitative sbml models, provides converted kegg pathways for download. those pathways have been created using kegg2sbml and thus, the same properties apply for those files.

bn++  <cit>  is an application that is not primarily designed for kegg translations, but offers this functionality as a side-feature. according to its authors, the project is not maintained anymore and they are working on another project that may again support the translation of kgml files. nevertheless, the available source code offers classes to convert kgml to sbml and biopax but we were not able to successfully compile and run their source code. however, bn++ has been used by the kegg team to generate official biopax translations which are still downloadable from the official kegg ftp and thus, represent a wide-spread used translation from kegg to biopax. these biopax level  <dig> files are only available for metabolic reference pathways and represent complete translations using appropriate biopax classes . all entities are nicely converted with cross-references to corresponding kegg identifiers and no duplicate entities are created. kegg database identifiers are also used as names for all entities, which makes the resulting models not directly interpretable to humans. unfortunately, the conversion contains duplicate reactions, missing reactants are not augmented and there is no option to unbundle reactions. the stoichiometry is always set to one, which is not correct for many reactions. furthermore, the biopax fields for formula or molecular weight of small molecules are not used and the validator gives errors for ‘cardinality violation’ and ‘rdf syntax errors’.

kgml2biopax and kgml2sbml are two applications that are part of an “ongoing effort to develop an ultimate kegg-based pathway enrichment analysis system”  <cit> . unfortunately, both the sbml and biopax conversions are not complete , contain no revisions of the reactions, and the stoichiometry is erroneously always specified as one. but all elements use kegg identifiers, which renders the models machine-interpretable and no reactions or entities are contained twice. the sbml level  <dig> version  <dig> documents are valid, but do not contain notes, annotations or sbo terms. the biopax level  <dig> translations contain all kegg entries as proteins, which is not correct for small molecules or complexes, and contain no further annotations. the validator complains about errors in the rdf syntax and usage of “unknown  class, not defined in the biopax specification”.

despite these converters, there are even more possibilities to create sbml documents from kegg pathways. a popular application is cytoscape  <cit> , which provides kgmlreader , a plugin to read kgml documents, and binom  <cit> , a plugin that can write sbml documents. but the sbml code, that is generated by linking the results of both plugins, is not usable for further modeling steps. kgmlreader concentrates on graphical representations for cytoscape and the resulting sbml export of binom barely reflects the input file. it is obvious that the resulting sbml is merely an artifact of the graphical representation. edges in the graph primarily connect metabolites with enzymes and each edge is encoded as an sbml reaction. this leads to reactions with small molecules as substrates and enzymes as products, which is clearly incorrect. no elements contain annotations and they are named with a consecutive number only. this renders those documents unusable for further modeling or simulation approaches. besides cytoscape, there are many similar tools, e.g., pathvisio  <cit> , subio , or vanted  <cit>  that mainly focus on a graphical representation of the kgml files, most of which do not have sbml or biopax writers. besides the graphical focus and missing writers, comparison to those tools is not reasonable because they are not thought to act as kegg converters.

the subliminal toolbox  <cit>  provides a very interesting alternative for metabolic modeling, based on kegg data. subliminal does not provide kgml conversion and is thus not directly comparable to other converters. but it provides methods to reconstruct, e.g., whole organism maps from the kegg database in an appropriate sbml document, which is well-annotated and contains complete and correct reactions.

CONCLUSIONS
kegg pathways are a valuable resource for pathway-based modeling approaches. unfortunately, the kgml-formatted pathways are primarily designed for visualization purposes and not directly usable as metabolic or signaling models. therefore, many aspects have to be revised and considered when converting the pathways to community standards such as biopax or sbml. this ranges from unbundling, correcting and annotating the stoichiometry of reactions, over using exclusively organism-specific and unique entities, to handling relations. with the help of additional information from multiple other kegg databases, the resulting models provide correct and highly enriched structures that contain far more information than the original kgml. the proposed method, including the qualitative models extension for sbml, is the first method that is able to generate signaling models in sbml or biopax from kegg pathways. currently, no other approach is able to generate complete pathway models with correct reactions, including stoichiometry and well-annotated sbml  or valid biopax documents.

all proposed methods are implemented in the keggtranslator application. the models, generated by keggtranslator with the here described method, lay the foundations for further modeling approaches, such as constraint-based models, tissue-specific models, or simply including kinetics to the models. all conversions obey the special requirements of sbml or biopax and include a huge amount of machine- and human-readable annotations. this facilitates the use of those models in other applications that perform further analysis, modeling or simulation steps on those.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
cw and fb conceived and implemented the method. cw wrote the manuscript, mr contributed to the implementation of the method, ad and az supervised the work. all authors read and approved the final manuscript.

