BACKGROUND
chemo- and bioinformatics are important and active research areas with an ever-increasing number of algorithms and software implementations. numerous applications provide functionality for highly specific tasks, but very few provide a complete one-package solution where all functionality is integrated into a user-friendly workbench. commercial software like moe  and discovery suite  contains a lot of features, but are expensive applications, and generally do not allow unlimited extensibility, or have restricted access to source code.

existing open source projects in bioinformatics that try to solve this problem are usually focused on integrating existing software applications. jemboss  <cit>  wraps around the emboss  <cit>  collection of open source bioinformatics tools using loose coupling; for example, users can extend functionality by adding shell commands. isys  <cit>  is another example of a loosely coupled system that integrates pre-installed applications with a general approach. gaggle  <cit>  also integrates existing software tools and data sources by wrapping them in code to interchange data between components.

the applications described above are focused on the frameworks for integration rather than providing intuitive interfaces, and are often complex to install, configure, and extend. few open source projects try to provide an integrated workbench with the possibility for users to add and/or modify functionality without the need to recompile the entire application. strap  <cit>  is an application for protein alignments that has a workbench with a simple plugin architecture for extension of functionality using the hotswap  <cit>  mechanism. toucan  <cit>  is a client-server workbench for regulatory sequence analysis using web services, where users can set up and invoke their own algorithmic web services. taverna  <cit>  is a workbench for dataflow composition and execution where nodes can be web services or components on the local machine which are adapted for use in taverna. successful attempts to integrate chemoinformatics and bioinformatics into a single open source framework have not yet been reported.

a workbench in chemo- and bioinformatics should have the required functionality, be easy to install, and have an intuitive and responsive graphical user interface . web applications, such as anabench  <cit> , are accessed using a browser and run on a remote web server and hence require no local installation. when such applications are run on powerful servers, they perform well on clearly separated and computationally expensive tasks. however, they have restricted client system access and are relatively limited in terms of user interaction, making them unsuitable for integrated applications that require many fast gui updates. a rich client, in contrast to web-based systems, is a desktop application that takes full advantage of today's computing power in laptops and workstations. it is equipped with a responsive gui and allows for tight integration with the operating system , and usage of local file system and devices , but still has the option to invoke and take advantage of remote services and resources .

bioclipse is a software project that solves the requirements mentioned above by providing an open source platform for integrating chemo- and bioinformatics into a single framework with an intuitive user interface. several mature life science frameworks and components are integrated in bioclipse, and the project actively aims to conform to available standards. the use of an open source license means that anyone can download the source code and make changes, promoting global collaborative development efforts, as well as quick and responsive bug fixing. bioclipse is part of the blue obelisk movement  <cit> , a diverse internet group that promotes reusable chemistry via open source software development, consistent and complimentary chemoinformatics research, open data, and open standards.

bioclipse is built on eclipse  <cit> , a universal tool platform that was originally built as an integrated development environment , that has evolved over years into a general framework for application development and integration. in eclipse, all code is split up into plugins, even the core modules. a plugin is a collection of functionality  that can be seamlessly integrated with other plugins, such as algorithms, visualizations, and menu options. this architecture allows for components to be used as building blocks; the minimal set of plugins needed to form a complete application is collectively known as the rich client platform   <cit> . rcp enables software developers to focus on the actual application functionality without concern for standard functionalities, since much of the basic functionality – such as the integration framework and common components – is inherited from eclipse.

the plugin-architecture of eclipse is powerful and versatile, and gives developers the ability to add custom functionality to virtually any point in an application. this is a major difference from other plugin architectures, where the user often can only add a pre-compiled class, with limited flexibility, to a pre-determined structure. in eclipse, it is possible to add views, editors, menus, actions, properties, dialogs, wizards, preferences, help contexts, specify conditions when a certain feature should be available, and even extend the domain object model. that is, the possibilities are endless for extending the program and adapting it to user needs. to define what can be extended, eclipse utilizes extension points, which exist for almost anything that developers would like to extend, and it is straightforward to create new extension points tailored to user needs.

implementation
architecture
bioclipse is an rcp application extending the eclipse framework with plugins for chemo- and bioinformatics, and provides a domain-specific platform where the plugins can be integrated . end-users can select desired features from all the bioclipse plugins, and use them integrated from an intuitive, responsive graphical workbench. for the developer, this is an ideal platform to integrate new components and take advantage of already existing building blocks. plugins from other eclipse-based applications could effectively be installed and run within the bioclipse workbench without modifications, but in order to interact with other components they would require a wrapper for the object model. bioclipse is developed in java, a platform-independent programming language which runs on a virtual machine that is freely available for most operating systems . several existing application frameworks in bioinformatics have the possibility to add functionality using plugins. however, no previous architecture has the power and flexibility provided by bioclipse, making it the most advanced integration framework for biosciences available today.

object model
the bioclipse core object model  is defined in the primary plugin, named bioclipse. this plugin defines a base interface, ibioresource, and an implementation, bioresource, that implements this interface and provides common properties such as name, path, and size of the current entity. to decouple the resources from their persitence, the interface ipersistedresource and the class persistedresource are defined, and the fileresource provides a reference implementation for the local file system. this model means that individual plugins need not be concerned with persistence but simply work with ibioresources, unaware if they are located in a database, network, or file.

the primary plugin defines an extension point, bioclipse.bioresource, in order to allow for plugins to extend the core object model. the only extensions to this extension point provided by the primary plugin are the rootfolderresource, folderresource, and unknownresource to mimic folders and files. all specific functionality is contributed by plugins, making bioclipse a completely modular integration framework . an example implementation of this extension point is the cdkresource, contributed by the cdk plugin, that extends the bioresource with functionality for molecular management, supporting various chemical file formats .

user interface
the eclipse platform gui, and hence bioclipse, is built on swt . in contrast to swing/awt , swt is a native window system; that is, it has the look and feel of the operating system on which the application runs. swt is designed using the model view controller  software architecture, separating an application's data model, user interface, and control logic into three distinct components so that modifications to one component can be made with minimal impact to others. it is possible to wrap awt/swing components in swt, and this feature is utilized in bioclipse to integrate java components built on these toolkits.

in an eclipse rcp application the user interface is composed of five main graphical units, named view, editor, perspective, menu and wizard. a view is a window that provides some graphical interface to present a user with information, with the potential to interact with it. an editor is another type of window which is focused on letting the user edit an underlying model and follows the load-save cycle. an example is a simple editor for text files, but could also be a more advanced editor using graphical objects. perspectives are collections of editors, views, and menus that are grouped into a page on screen; one example in bioclipse is the chemoinformatics perspective that displays views, editors, and menu options for working with molecules. wizards are used to guide users through a sequenced set of tasks using different graphical dialogs. the internal placement and size of components within a perspective are not fixed but can be changed at the user's preference and is saved between sessions. similar to the object model, the primary bioclipse plugin provides only the most central views and editors, while allowing plugins to implement more specialized components.

RESULTS
features
the bioresource navigator is the central component in bioclipse that allows for navigating bioresources in a hierarchical, tree-like view, similar to browsing local folders and files . it contains basic features such as cut and paste, drag and drop, and wizards for new resources, and provides an extension point where plugins can register actions for appearing in the context menu upon right-click. a basic text-editor and an xml-editor with global actions such as undo, redo, cut, and paste are also provided. bioclipse further contains a properties view for visualization of properties of the currently selected objects in the workbench, a console that echoes messages back to the user, and a job scheduler that allows time-consuming tasks to be run in the background and displayed upon completion . bioclipse also contains various wizards for the creation of new bioresources, global preferences for customizing the workbench, and a searchable, xml-based help-system that ensures the user manual is readily available – all with extension points so that external plugins can make additions to every part.

chemoinformatics
the chemoinformatics perspective is a set of views, editors, and menus for molecular management and analysis . structures are the main data type scientists encounter in chemistry-related fields, and the chemoinformatics plugins add functionality to bioclipse that describe chemical structures in various ways.

the cdk-plugin integrates the chemistry development kit   <cit>  library into bioclipse, and also extends the platform with several graphical components. cdk is a freely available open-source library of java classes for chemo- and bioinformatics, computational chemistry, and chemometrics. it provides methods for many common tasks in molecular informatics, including 2d and 3d rendering of chemical structures, i/o routines for different chemical file formats, smiles parsing and generation, qsar descriptor calculation, atom typing, ring searches, isomorphism checking, and structure diagram generation. the cdk data model for chemical structures is used over the whole platform as an internal data structure for the representation of any kind of molecular data. bioclipse makes use of the cdk i/o functionality and is capable of writing and reading the same formats for chemical structure information as the cdk itself, which currently are xyz, mdl molfile, pdb and cml  <cit> . the cdk-plugin adds two views to the bioclipse framework: the chemtreeview which gives a hierarchical visualization of the cdk data model, and the structure2dview which displays 2d-structures.

the jchempaint-plugin provides 2d-editing by wrapping around the jchempaint editor for 2d molecular structures. jchempaint is open source, freely available under the lgpl license , completely written in java, and developed by an international team of developers  <cit> . the jchempaint editor is used as the main editor for chemical structures in bioclipse . it is a multi-page editor which shows two tabs with different views on the same object; the first tab  displays the structure in 2d and the second  shows the molecular data in its original file format. the two tabs are synchronized with each other so that changes in one tab are immediately reflected in the other. the toolbar and menu of jchempaint are directly integrated with the bioclipse tool- and menu bar. the plugin has the same feature list as the standalone jchempaint application, including drawing of bonds and atoms, selection of ring templates, flipping and rotating of selected parts of a molecule, undo/redo functionality, and stereo descriptors.

3d-visualization is provided by the jmol-plugin, wrapping the open source tool jmol  <cit>  to provide advanced visualization options for molecules and proteins . jmol includes a scripting language, and bioclipse offers a console to enter such scripting commands. an editor for jmol-scripts is also included that supports editing with code completion and syntax highlighting, as well as the execution of scripts. 

the cml-plugin provides access to the jumbo cml  library, an open-source java library for handling and representing cml documents or -data structures  <cit> . cml is an xml-implementation for chemical data/information and an extensible basis for chemically aware markup languages. it is structured in a modular way by a core part and several extending components. cml shares all general xml features and advantages, such as data- and not presentation centric, simultaneously human- and machine readable, platform independence, and the ability to represent most general data structures. in bioclipse, cml is used for the internal representation of spectrum data and for the import and export of structures and spectra to and from the cml file format. additionally there is an implementation of a cml validation plugin, which checks a given cml file against the cml schema and outputs any detected errors and warnings to the user.

the cmlrss-plugin provides tools for cml-enriched news and blog feeds, supporting the rss  <dig> , rss  <dig> , atom  <dig>  and atom  <dig>  formats  <cit> . the bioclipse cmlrss view automatically extracts cml in the feeds, and resources can directly be visualized and manipulated in bioclipse. this creates easy access to chemical information published on the web and in databases.

bioinformatics
the bioinformatics perspective is a collection of views, editors, and menus for loading, parsing, visualizing, editing, converting, and saving sequences/proteins in various formats . sequence management is provided by biojava  <cit> , an open-source framework for processing biological data including methods for manipulating biological sequences, file parsers, biological databases, and data analysis routines. a sequence viewer can visualize sequences along with swissprot features. for 3d-visualization of macromolecules, jmol is also utilized in the bioinformatics perspective.

web services
a web service is a software system designed to support interoperable machine-to-machine interaction over a network. however, the term usually refers to services that use soap-formatted  <cit>  xml envelopes and have their interfaces described by the web services description language   <cit> . it is becoming increasingly popular for organizations and companies in bioscience to offer such services to provide data access to a public repository, or to invoke remote procedures on a networked computer  <cit> .

bioclipse is equipped with a plugin that allows web services to be easily integrated into the workbench. the first implementation was the wsdbfetch web service at the european bioinformatics institute, which can return entries from various biological databases  <cit> . bioclipse contains a wizard for this service that enables the user to retrieve entries such as pdb-files and sequences in various formats. the retrieved data is then stored in a virtual folder in the bioresource navigator, parsed and treated as any other bioresource. in the case of an unknown data format, the data is stored as plain text.

spectrum analysis
compound identification, structure elucidation, and purity control are common tasks in chemistry and biology. computers can greatly assist in these processes by providing methods for the collection, organization, normalization, and analysis of the data obtained  <cit> . the spectrum-plugin provides various graphical and non-graphical tools and methods for spectrum visualization, analysis, and manipulation. the plugin contributes the spectrum perspective, which is mainly formed by three different views with dedicated methods/actions:

• the spectrum chart views, which use the jfreechart package  <cit>  for visualization of spectral information . step-less zoom in/out of the spectrum is possible, as well as setting display properties via the context menu.

• the metadata view, which displays the stored spectrum meta data in an editable format.

• the peaktable view, which displays existing peaks in an editable table and gives the user the ability to add, edit, and delete peaks.

the spectrum plugin comes with routines for importing and exporting data in the cml and jcamp-dx format, as well as a wizard for the creation of new resources in both formats  <cit> . if continuous data exists for a spectrum, a peak picking action is available for automatic extraction into a peak spectrum. methods for helping the user with the interpretation of spectra, like calculation of integrals, and comparative views to simplify the direct comparison of different spectra, will be included into the spectrum plugin in a future version. an additional plugin for the assignment of structural to spectral data and vice versa is already in development.

scripting
bioclipse includes a plugin for creating scripts based on the mozilla rhino engine  <cit> . rhino is an open-source implementation of javascript which is embedded into java applications to provide scripting to end users. the plugin allows for automation of tasks and creation of new functionality by creating scripts that are able to interact with the gui, the object model, and features of all installed plugins. bioclipse is not limited to only one scripting language, and we expect others to be integrated in future releases.

sample data
bioclipse comes with a plugin for installing sample data including molecules, proteins, sequences, spectra, and scripts in various file formats. another plugin containing many different organic chemical structures is also included. installation actions for the available data collections are accessible from the main menu.

CONCLUSIONS
bioclipse is an advanced open source framework that integrates chemo- and bioinformatics into a single, user-friendly workbench. equipped with the powerful and versatile plugin architecture of eclipse, the project has been met with great approval by researchers around the world. despite its recent introduction, bioclipse was awarded third prize and the audience award at the jax innovation award  <dig>  <cit> .

bioclipse as workbench
bioclipse is useful for any user with the need to manage, visualize, and edit chemical and biological files. it is already in use by scientists and teachers in biology, chemistry, and related fields around the world.

bioclipse as integration framework
the bioclipse plugin mechanism facilitates integration of third party applications and libraries. if the software is written in java, developers can simply implement the desired extension point and link to the library . if written in c++, the plugin can use command line invocation or java native interface , which has been used successfully in bioclipse. examples of integrated projects are given in table  <dig>  loose connections with external applications using command line invocation are trivial and can be done at runtime using the bioclipse preferences. they are then immediately available from the context menu in the bioresource navigator. bioclipse comes packaged with sample connections to pymol  <cit>  for 3d-visualization and -rendering, and strap  <cit>  for sequence alignment.

bioclipse as development environment
apart from being used for integrating existing projects, bioclipse is an ideal platform for life science software development and testing. by inheriting all existing functionality of bioclipse, the developers can focus entirely on the problem at hand, while taking full advantage of the editing and visualization components provided by bioclipse.

a logging-plugin provides logging functionalities for other plugins. it is based on log4j  <cit> , a well-designed framework that allows for logging that can be defined and changed at runtime, without modifying the application. logging is an important feature as it gives developers a detailed context for application failures, and should be provided with most bug reports.

bioclipse as deployment platform
integrating features into bioclipse is an efficient way of spreading novel algorithms. the simple extension of bioclipse and the large user base makes any addition readily available for many potential users. individual contributors thus benefit from existing, as well as forthcoming, additions, which promotes global collaborative development and enables features spanning multiple research fields.

future development
the future for bioclipse holds much potential with many plugins in development, including database persistence, molecular libraries, more web services, virtual screening, systems biology, phylogenetics, structure elucidation, qsar, data analysis, r statistical language interoperability, molecular mechanics/dynamics simulations, and 3d-model building. there is also ongoing work for integrating the workflow engine taverna  <cit>  to run workflows from within the bioclipse workbench, and use it to present results. another major feature in development is online updates for plugins from the bioclipse update server  <cit> . the current status of the bioclipse development can be viewed at the bioclipse website  <cit>  and bioclipse wiki  <cit> .

the upcoming plugins, powerful plugin architecture, and intuitive interface make bioclipse the most advanced and user-friendly workbench available today for chemo- and bioinformatics. we encourage software developers in bioscience to consider bioclipse as a future platform for development and deployment, and welcome new developers, testers, and other contributors to the project.

availability and requirements
project name: bioclipse

project home page: 

operating system: platform independent

programming language: java

virtual machine: sun jvm  <dig> .0

commercial restrictions: none

bioclipse is freely available for download from the project home page.

license
bioclipse is released under a custom license epl + exception, which is the eclipse plugin license   <cit>  plus the explicit exception that the patent clause of the epl license does not apply to gpl licensed plugins, addressing the epl/gpl license conflict  <cit> . the epl is a flexible open source license that ensures core plugins will remain open source, but sets no constraints on external plugin licensing. this means that commercial plugins can be developed for bioclipse, if desired. a list of the licenses for individual plugins and a statement regarding epl and gpl can be found on the project home page.

authors' contributions
os designed and implemented the core api and extension points and drafted most of the manuscript. cs coordinated the cologne lab, adapted cdk for bioclipse, and was involved in manuscript preparation. th and sk integrated the 2d structure editor jchempaint and constructed the spectrum plugin. ew worked on the cmlrss plugin, file format support, and various architectural aspects. me worked on protein support and api design. jw implemented the webservices- and the scripting plugin. pmr worked on cml support. jesw coordinated the uppsala lab and was involved in manuscript preparation. all authors performed extensive testing of the application, and approved the final manuscript.

