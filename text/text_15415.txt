BACKGROUND
the quantity of biological information available in the public databases is now very large and doubling nearly every year  <cit> . projects involving high throughput data from approaches such as the new transcriptomic or genomic technologies require large quantities of data to be dealt with. for example, in order to design a dna chip for bacterial identification, one may want to retrieve every available sequence for a universal gene such as the 16s rrna gene .

retrieval of such sequences is not trivial. retrieval by sequence similarity is not feasible, since some of these genes are very variable . also it is difficult, if not impossible, to determine a cutoff level in order to exclude non homologous gene sequences. blast  <cit>  for example allows a cutoff according to the "e value", while exonerate  <cit>  also allows a cutoff on percentage of similarity. the "e value" cutoff depends on the database size that changes every day. the percentage of similarity is better, but for divergent ubiquitous genes, experiments show that some homologous sequences are not retrieved while non homologous sequences are retrieved. importantly, a similarity search may return only parts of sequences, and it is difficult to automatically retrieve entire sequences.

the best solution seems to be a retrieval based on keywords that describe the particular feature to retrieve. this is however not always easy. keywords used to describe a particular feature may be diverse and sometimes mis-spelled. the entire list of keywords can be retrieved , parsed and painfully analysed to build a complete list of keywords. this task is more difficult with queries composed of complex keywords containing several words or numbers. popular tools such as acnuc  <cit> , entrez  <cit>  or srs  <cit>  have been designed for the purpose of querying with keywords, but we show in this paper that they should be used with care and caution and that they still have flaws for precisely retrieving sequences according to a complex keyword. this is known by bioinformaticians working in this field who often use their own parsers to directly analyse entries, and in part led to the development of the bio- libraries to name only the most commonly used. however, these wide purpose libraries have problems in particular for parsing large data files. we have developed a derivative of the bioperl library and embedded it in a user friendly interface that makes it possible to easily define complex keywords, the fields to search for and to define the order for searching in these fields. subsequences are automatically extracted and stored as files or directly in a "biosql" standard relational database for easy management.

implementation 
emblex is composed of three parts: i) a series of perl scripts, ii) a mysql database and iii) a user-friendly graphic interface for queries through a web browser.

emblex searches in ascii files downloaded from a ftp server such as that of ebi  <cit> . their url can be stored by emblex, and files can be automatically downloaded and uncompressed with emblex, an internal routine allows to check if this file had been updated after the previous download.

users can then define complex keywords  to be searched for, the feature keys to search in, in which order, and the output format. subsequences and related information are then extracted for the specific feature starting from the first feature as indicated in emblex. the available bioperl module for extracting data from embl files was found to be too slow and replaced by a dedicated extractor. complex feature entries, such as those containing the join() and complement() operators, or those using the "acc_no:xxx..xxx" syntax, where one feature calls upon a fragment of another sequence, are properly processed by emblex. possible outputs are ascii, html and within a mysql database in biosql specification. indeed, biosql is an emerging standard for biological data  <cit> . its substantial advantage is the large number of scripts already developed within the bioperl, biopython, biojava communities. the bioperl-db script used to load the database, originally developed for linux systems only  <cit>  was ported to ms windows.

because it may be difficult for many biologists to use scripts from the command line, we imbedded our scripts within a user friendly interface. emblex's interface was developed in html in order to be compatible with any systems and web browser.

files available for download from our server  <cit>  include every necessary dependency and are easily installed on every system. an online version is also available on our web server .

RESULTS
we became aware of a problem when we were not able to retrieve some sequences with srs, yet we knew they were in the embl database. for the purpose of the demonstration, we will in this paper focus on the retrieval of nuclear ribosomal intervening sequences  which are widely used for the purpose of bacterial and protozoan identification  <cit> . we will restrict our experiment to the keyword "internal transcribed spacer 1", although we know that this region is also described using alternate keywords 

acnuc was used to retrieve in the entire embl release  <dig> , existing variations in features annoted with "internal transcribed spacer 1" . we can observe large variations as well as mis-spelling. for confirmation purpose, we queried embl release  <dig> for keyword "its1". acnuc returned  <dig>  entries while srs at ebi returned  <dig>  entries, due to problems with spaces and extra characters such as commas.

for simplicity , comparative queries were done on embl release  <dig> . we wanted to search only within features: "misc_feature", "misc_rna", "gene", "rrna", "intron" and "source", to exclude retrieval of amplification primers for example. if the internal transcribed spacer  <dig> is described both in the "source" and "misc_rna" feature keys, we wanted to extract the subsequence as defined by the boundaries indicated in the "misc_rna" qualifier. finally, for simplicity, when an entry contained more than one its domain, only the parent entry accession number was considered .

1/entrez
among biologists, entrez is probably the most popular tool to retrieve sequences . it is poorly adapted for our purpose as it inefficiently scans the feature lines and cannot extract subsequences. without subsequence extraction according to the boundaries described in the features lines, we would have to use a dedicated parser anyway.

we tried "fungi"  and srcdb_genbank  and "internal transcribed spacer 1"  and gene_in_genomic .

this returned  <dig>  entries .

2/srs
srs is a particularly powerful tool. using the extended web form, it is possible to easily build powerful queries. the internal getz langage can also be used either from the command line or using the "result" page. using the getz alternative, it is possible to use regular expressions. several queries were tried .

 > 

this query returned an "error: no entries found " message . replacing "internal transcribed spacer 1" by "internal?transcribed?spacer?1" returned the same message. we then used the wild card "*" instead of "?" and obtained the same message.

we had to use the and  operator to obtain a response.

q1:  > 

this query took about two minutes and returned  <dig>  entries and was reformulated by srs as shown below:

query " | ) | ) | ) | ) &  & ) & ))).

since we suspected that more entries could be obtained we also tried:

q2:  > 

after a very long time, this query returned an error message in the form of an error of memory allocation "error: insufficient memory â€“ error during malloc ". the query was tried on week end, when the ebi server is less busy but it returned the same message; other servers offering srs  <cit>  also returned the same error message. when asked, ebi people answered that too many data had to be treated for the memory size of their server.

we then tried to use a regular expression, which took a very long time and returned an error message:

q3:  > 

the following query also returned an error message.

 >  srs has a problem with spaces, both in the extended form and regular expressions .

the same queries were done on the infobiogen server, the same day . these queries returned very different numbers of entries . parse and analysis of the results  showed a potential problem with srs at infobiogen. when asked, the infobiogen people answered, acknowledging a problem with the srs indexes. srs did not return an error message, but the entries obtained were globally wrong; among the  <dig>  response unique to srs at infobiogen  we found for example accession number ab <dig>  which refers to a protein coding sequence.

the first column indicates how many different accession numbers were returned in each case. other columns indicate how many of these accession numbers were not retrieved by the other procedures.

3/acnuc
for querying with acnuc we used the " raa_query" client . when we started this analysis, we found that acnuc had a bug that did not allow it to find complex keywords spanning two lines. when informed, acnuc people corrected this bug, and the present queries were done on acnuc after correction .

a first list was built with command se-sp = fungi, a second list was built with command se-o = nuclear; intersection of the two lists returned  <dig>  results. the -o option is necessary as acnuc stores as "fungi" the mitochondrial and nucleomorph sequences . intersection with "k = division fun" was then necessary in order to exclude sequences from the "env" division. finally, it would have been possible to use intersections with successive queries in the form " k = misc_rna" in order to include only the proper ft keys, and then to proceed to an union of the lists, but this can be tedious and we have no direct possibility to choose among the fields "source" and "misc_rna" to extract the proper subsequence according to the boundaries described in the most specific feature.

a recent implementation in acnuc allows to scan specific lines such as the ft lines. this is much slower, as acnuc cannot use its index tables, but allows a more precise selection. the final list was queried using command mo - <dig> and searching ft lines for "internal transcribed spacer 1". this query took about three minutes and returned  <dig>   <dig> entries. acnuc did not find seven entries found by emblex , due to a problem discussed below.

4/extraction using a dedicated script
we used emblex to parse the embl fun.dat file, which contains all of the fungi sequences , for the presence of "internal transcribed spacer 1" in the following features: misc_feature, misc_rna, gene, rrna, intron or source, in that order. this query took seven minutes and returned  <dig>  entries.

5/analysis
a python script allowed to parse the results and to analyse which accession numbers were retrieved by one of the tools and not retrieved by another one . as shown in this table, acnuc, srs on ebi and our perl script had similar, but different results. as indicated above, srs on infobiogen returned wrong results because of index problems. next we looked for entries retrieved only by a single tool . srs at ebi had  <dig> such entries, emblex none and acnuc  <dig> 

this table shows how many accession numbers are unique to a query .

the  <dig> srs entries not found by emblex  were manually scanned and results indicated in table  <dig>  all of the entries contain the keywords searched for, but either with other words in between or in the wrong order. the entries specific to acnuc were also examined. the complex keyword was easily found, but in wrong features .

the seven entries found by emblex and not by acnuc corresponded to entries having "internal transcribed spacer 1" in the proper feature, but that had been submitted as "unknown" organism, latter corrected to "fungi" but without any change of the dt "last updated" field. since acnuc updates its databases only for entries that are recorded as changed since last update, these entries could not be identified as of fungal origin. acnuc people, when informed answered that they would correct this problem in the near future.

CONCLUSIONS
analyses of responses found by srs, entrez, acnuc and a dedicated script showed:

1/entrez capabilities for retrieving the proper data set are limited as specific ft lines cannot be assigned. also, subsequences are not automatically extracted. both limitations render entrez unfit for the purpose sought.

2/srs retrieved some entries not present in emblex, all were false positives that mostly consisted of sub-entries annotated as "internal transcribed spacer region 1". although in this case the answer is right, this is not a proper answer and could lead in other cases to unwanted sequences. more important, the day of the final demonstration query, srs at infobiogen returned a wrong dataset, with no error message, due to indexing problems. emblex retrieved some entries that srs missed, mostly due to a problem with the presence of white spaces and parentheses, as in accession numbers ab <dig> & ab <dig>  with a misc_rna feature containing "contains internal transcribed spacer  <dig> ,  <dig> s ribosomal rna". srs could be used to index phrases, but the administrators are  not doing it, one reason probably is that using the exact phrase is only appropriate when one already knows that phrase. most of the time users have much fuzzier queries â€“ at least until they have found what they want and can start to refine it. finally, srs showed problems when the amount of memory necessary to run the queries turned out to be too big. on the ebi server for example, the q <dig> query indicated above but run on embl  returned a memory allocation error message, which is presumably not due to srs per se but to the available memory of the hardware used to run srs.

3/acnuc had no problem of memory of any sort and was fast as long as scanning the ft lines was not required. it retrieved entries not found by the perl script; they corresponded to keywords for other features , since we did not use a search in specific features for reasons mentionned above.

4/if the data obtained are of importance, it is safer to query different servers and compare the results obtained.

5/extensive analyses of results provided by the public tools can detect subtle bugs or problems due to the semi-structured form of the embl/genbank entries.

in a recent work, d'addabbo and coworkers  <cit>  also noticed a problem in extracting data from feature definition with srs; their solution  was to build extraction procedures to import genbank entries in a filemakerÂ© database. compared to generecords, emblex makes use of non proprietary software and runs under every os . it also renders it possible to import directly in the biosql format.

a script is obviously not as fast as acnuc or srs, since no index tables are used, but is more flexible and precise. it is however possible to first use srs or acnuc to extract a large number of entries and then run emblex on these entries for a final finely tuned analysis, combining speed of extraction with precision. in particular emblex allows users to specify a search order in the annotations, making sure for example that if both "its1" and "its2" are in the "source" field, and "its1" in the "misc_rna" field, only the latter sequence will be properly extracted .

in conclusion, the advantages of emblex are in particular i) easy modifications of the code for a particular use, ii) use of the biosql standard, therefore allowing subsequent use of public routines , iii) very precise queries through a graphical interface or the command line and, iv) simple local use or access to a distant server through the web.

more details can be found in the html documentation provided with emblex.

availability and requirements
â€¢ project name: emblex

â€¢ project home page: 

â€¢ operating system: windows, unix

â€¢ programming language: perl, html

â€¢ other requirements: apache  <dig> x or higher, mysql  <dig> x or higher

â€¢ license: open source 

authors' contributions
ml and oc implemented the software  and the graphical user interface, and were the primary authors of the manuscript. rc participated in design and coordination and wrote the python scripts. all authors read and approved the final manuscript.

