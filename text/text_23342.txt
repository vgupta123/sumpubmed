BACKGROUND
the ontology term organizer  tool was initially developed to facilitate consensus-based categorization of the terms used to describe the morphology or phenotype of organisms. the description of organisms new to science, and the continuous process of revising and improving them based on new evidence, is traditionally done by taxonomists and systematists. the publications that they produce contain descriptions that are typically highly detailed and contain terms which range from general to highly specific in their usages. when compared across resources, these terms can vary from identical to similar to non-overlapping within and between major groups of organisms. this lack of consistency presented a serious challenge to the authors when attempting to extract knowledge from legacy descriptive taxonomic literature as part of a national science foundation-funded project entitled: “fine-grained semantic markup of descriptive data for knowledge applications in biodiversity domains”.

morphological descriptions are often composed in a telegrammatic style, for example:

leaves alternate, spirally arranged, 2--3-ranked, simple; stipules deciduous, distinct; petioles present. leaf blade sometimes lobed, pinnately veined, margins toothed, serrate to nearly entire; surfaces glabrous to tomentose, abaxially often with resinous glands. [betulaceae, v. <dig>  flora of north america north of mexico  <cit> .

the description provides detailed information about the taxon, but knowledge beyond the text is required to fully understand the descriptions as it does not explicitly state that leaf is a plant organ , that alternate is a way the leaves are arranged , that stipules and petioles are part of the leaves , or what intermediate states between serrate and nearly entire for margin shape or between glabrous and tomentose for pubescence or hairiness are possible. to enable intelligent organization and use of organism-based morphological information , the detailed semantics need to be made explicit for computers to use. among those the most fundamental semantics that need to be defined for the terms include is_a and part_of relationships as illustrated above, in addition, it is valuable to link synonyms and to define the semantic distance for the states that fall in a natural order. the latter will help the computer to reason that toothed leaves are more similar to serrate leaves than entire leaves.

to pin-down the semantics of domain terms, categorical glossaries and ontologies have been constructed , but they lack agreement. an evaluation of four glossaries/ontologies relevant to botany found that agreement was less than 50%  <cit> .

past research has shown that different taxon groups employ different vocabularies and new terminology are constantly encountered  <cit> . in a recent experiment, a  <dig> version of the uberon ontology , pato  <cit> , and bspo  <cit>  were used to annotate a set of  <dig> character descriptions taken from phylogenetic matrices. as much as 35% of the unique terms needed for the annotation were not found in the ontologies . umls metathesaurus  <cit>  is arguably the most complete thesaurus/ontology for medicine and has been in active development for at least half of a century . a recent evaluation by friedlin and overhage  <cit>  of the umls metathesaurus found “a large portion of concepts  found in clinical narrative documents  are either unrepresented  or poorly represented  in the current version of the umls metathesaurus”. the mismatch of terms used in the documents and those included in the thesaurus due to various form transformations have been cited as the main difficulty in using this and other large scale controlled vocabularies . these controlled vocabulary evaluations suggest that, while the coverage of the ontologies are constantly improving, the vocabulary control is a long term, continuous process. care needs to be taken in transforming the terms for a controlled vocabulary and to provide a useful path to link the terms used in the literature to the transformed terms included in the controlled vocabularies.

another factor that hinders the vocabulary control process is the set of diverse knowledge and skills required to perform the task. individuals with rich knowledge in a subject domain for example biology are often not the individuals with the skills needed for ontology construction, yet both knowledge and skills are needed to perform the task of vocabulary control. thus, knowledge modeling tools friendly to domain experts are urgently needed  <cit> .

taking the above issues into consideration, we developed the ontology terms organizer  to assist a domain expert in organizing sets of terms extracted from their source literature with is_a, part_of and/or order semantics. the organized terms can be used by knowledge engineers and integrated into domain glossaries, thesauri, or ontologies. oto is, to our knowledge, the first consensus-promoting, usage-informed, drag-and-drop based, online term organization tool designed for use by biologists or other domain experts who have rich domain knowledge but are not equipped to deal with the intricacy of formal knowledge representation using tools such as protégé  <cit> , topbraid  <cit> , and several dozen of other ontology editors . oto is not an ontology editor, but a tool that bridges the knowledge of domain experts and knowledge engineering.

although oto was initially created for biologists to categorize anatomical and morphological terms found in biodiversity literature, it can also be used generically to organize terms for any other domain, where is_a, part_of, and/or order relationships are required.

implementation
figure  <dig> shows the system architecture of oto. oto uses the popular apache struts web framework  <cit>  and model-view-controller  <cit>  design pattern. the implementation of oto relies on standard technologies such as java beans, java servlets, java server pages  and xml .figure  <dig> 
oto system architecture. oto employs client-server architecture and utilizes the model-view-controller design pattern. web browser as the client sends requests to the controller, which accesses the model and executes the requests. execution results are presented as views and sent back to web browser.



function-wise oto includes input, term organization, administration, and output components, as shown in figure  <dig>  sets of terms to be organized  are loaded into oto either via software such as charaparsera  <cit>  or through manual import. term organization functions are provided for one or multiple users, including:  group terms for organizing is_a relationships and synonym relationships,  structure hierarchy for organizing part_of relationships, and  term order for organizing order relationships. when a term set is considered organized using one or more of the functions, user’s decisions are then approved, or finalized, and an output is generated. oto can output:  csv files pushed to github ,  zipped files downloadable via the oto website, and/or  term requests sent to ontologies hosted at bioportal  <cit> .figure  <dig> 
oto functional components. oto supports a set of input, term organization, administration, and output functions. it defines three user roles: user, owner, and administrator and three dataset types: public, private, and system reserved. the role of a user determinates the user’s privileges on functions and datasets. oto also utilizes two web services: ontology look up service and bioportal rest services.



oto also uses several web services to support its functionality. in oto, a term is always accompanied by the source sentences where the term was found and a set of possible definitions provided for the term by other controlled vocabularies. for example, oto uses the web services provided by the ontology lookup service  <cit>  to retrieve the definition of a term from the phenotype quality ontology . such information is available to the users in oto to facilitate their decision-making process. oto also allows a user to submit a term to a selection of existing ontologies in bioportal and bioportal rest services  <cit>  are employed for this purpose.

oto delegates version control function to github  <cit> . when a term set is organized and approved by the responsible user, oto will generate a version number for the term set, commit and push it to the biosemantics/glossaries repository on github.

users in oto have different roles that are associated with privileges . the three roles oto differentiates are users, term set owners, and administrators:a user is anyone registered on the oto website. a user is granted access to all the public datasets once her/his registration is approved by an administrator. a user can organize terms in any public term set, send term requests to the existing ontologies, and access finalized datasets either on oto/via github, as finalized term sets are publicly accessible.

a term set owner is the user who creates/uploads a term set. every term set has an owner. in addition to the privileges of a user, a term set owner can dedicate the public/private status of an owned term set, delete an owned term set, merge owned datasets, review user term organization decisions, and finalize/reopen an owned term set.

administrators of oto are responsible for user management  and have full privileges over all public and private datasets, including system reserved datasets.



a term set in oto can be private, public, or system reserved. while private datasets are organized by the owner only and managed by the owner and administrators, any user can organize the terms in a public or a system reserved term set, and only an administrator can manage the system reserved term set . oto currently holds five system reserved datasets, one for each of plants, hymenoptera, algae, porifera and fossil groups, that have already been reviewed by domain experts. system reserved datasets have a fixed naming format of type_glossary in oto, e.g. plant_glossary, and is marked as “.” one goal of oto is to progressively grow the system reserved glossaries from smaller datasets of the same group. when a term set  is finalized, it becomes accessible for all.

a mysql database server is used to store all the data oto uses or generates. as oto holds multiple independent datasets, there are a set of tables that hold general data to support the general functionality of oto, as well as a set of tables for each term set.

RESULTS
in this section we describe oto functionalities from the user’s perspective. readers who are interested in learning oto functionalities can log onto oto with username otodemo and password otodemopass and work on the oto_demo dataset, which is one of many datasets currently hosted on oto.

input functionality
as mentioned before, oto can take an input dataset from charaparser  <cit> , which is a text mining system developed to parse organism morphological descriptions. charaparser also extracts domain terms from the descriptions and uploads these terms automatically to oto. generally, datasets meeting oto format requirements can be manually imported into oto. figure  <dig> shows the “welcome” page of oto after login where the user can invoke the import function. figure  <dig> is a screenshot of the data import page in oto. a dataset could have one to three term sets for group terms, structure hierarchy, and/or term order tasks. the owner of a dataset can set the public/private status for the dataset and import/re-import data for different term organization tasks. only the term sets that have not started being organized can be re-imported. besides the name for a dataset, the taxon group the terms describe also needs to be specified when importing a term set. taxon group information is needed for certain term set management tasks such as merging datasets.figure  <dig> 
oto welcome page. user can select an existing dataset to organize, or import a new dataset.
import datasets. to import a dataset, first create an empty dataset , then populate the newly created dataset by clicking on the import/re-import button .



term organization functionality
as oto aims to promote consensus-based controlled vocabulary building, the most important design goal of oto is to provide a user-friendly interface for them to express their opinions on how terms should be organized. oto provides three ways to organize terms using drag-and-drop functionality. the first is term categorization that involves assigning one or more categories to a term, which is equivalent to assigning is_a relationships. this can be done on the group terms page of oto. the second is to sort out part_of relationships among terms representing some entities, such as organs and their parts. the part_of relationships are rendered in a tree structure on the structure hierarchy page. the third term organization page, term order, serves to put range-valued categorical descriptors  in order. oto records the order of terms in that group.

group terms
figure  <dig> shows the group terms page in oto. on the top of the page, the dataset name and the user’s progress are shown. the terms to be grouped/categorized are shown in the left column and the categories are shown to the right. a set of default categories the dataset owner imported are shown initially. the user can add new categories by clicking on “new category.” multiple terms can be selected by clicking on the check boxes and dragging them all at once to a new category. clicking on a term shows term related information in the location, context, and glossaries panels displayed on the lower part of the screen. location shows the current categories a term resides in. the search button at the right side of the panel has a similar function but it allows the user to enter any term to search. context shows the source sentences the term appears in . glossaries display the definitions of the term in existing controlled vocabularies, currently including the system reserved glossary and pato. collectively location, context, and glossaries provide term related information to facilitate the term categorization process. every hour, users are reminded to save their decisions. terms that are not categorized  are not included in the final results when the term set is finalized.figure  <dig> 
oto group terms page. terms shown in the left pane are to be categorized  into the categories shown in the right pane. more information about a selected term can be found in the lower pane, which consists of three tabs: location, context, and glossary.



it is common for a term to belong to multiple categories as they may be homonyms or have different meanings under different contexts. oto allows the user to copy a term from one category to another by holding down the ctrl key while dragging . terms that are found in multiple categories are renamed with a numerical index . there are often synonyms in a term set. synonym relationships can be established by dragging one term onto another term. note the synonym relations can be established only after the categorization decisions have been saved for both terms involved. synonymy relationship can be removed by clicking on the blue “x” next to the synonym. figure  <dig> shows examples of synonyms in the “coating” category and multi-category terms  in the “coloration” category. the multi-category and synonym features used together help to move a set of unassigned terms toward a state that is better controlled. when synonyms exist, the term best representing the concept should be considered the preferred term and other synonyms should be synonymized to the preferred term. whenever possible, avoid using terms with multiple categories  as the preferred term because they are ambiguous. the combination of these practices will result in a sound controlled vocabulary  with the maximized searchability . it also increases the chance for natural language processing techniques to perform word sense disambiguation successfully on the ambiguous terms.

each term on the group terms page is associated with a report, which includes the complete categorization history for the term. the report is opened when the user clicks on the blue magnifying glass or the red circle icon next to the term. the red circle indicates that different categorization decisions have been made by different users. figure  <dig> shows a term report for the term bacculate. the report window provides a comment area, where the user can write down their thoughts, which remind the user and informs others why a particular decision was made.figure  <dig> 
term context and term report in oto. select a term and then click on the context tab to show the original sentences the term appears . click on the blue magnifying glass or the red circle icon next to a term to bring up the report holding the categorization history of the term. shown in the figure is the context and term report for the term bacculate.



two other features that make the term categorization process more efficient include copy system decisions and automatic display of the most recent decisions. copy system decisions  copies the categorization decisions from the system reserved glossaries of the same taxon group to the current term grouping task, or phrased differently, terms that have matches in the system reserved glossaries are automatically dropped into the corresponding categories. the greater the coverage of the system reserved glossaries, the less effort required of the user in categorizing the terms. after the categorizations are copied, however, the user can still override the system provided decisions with his/her own categorization. the automatic display of the most recent decisions from all users who have worked on a term set allows a later user to simply review or change previous decisions  to his/her satisfaction and not have to start from the beginning.

structure hierarchy
the structure hierarchy page is used to associate entity terms via part_of relationships. the interface layout is similar to the group term page as the user drags terms from the left column  to the hierarchy canvas to the right. the hierarchy canvas is initialized with a default part_of hierarchy, for example, figure  <dig> shows the initial part_of hierarchy for plant. the user can drag a term from the left and drop it on top of a node in the hierarchy to create a child node. next to each of the un-saved nodes, there is an “x”, which can be clicked to remove a node . as illustrated in figure  <dig>  some structure terms are used once in the hierarchy, for example stamen because stamens are part of the flower organ alone, while others may need to appear at different locations in the hierarchy, for example base, as many structures may have a base. if the user holds down the ctrl key while dragging/dropping a term, the term will remain in the term list  after being added to the hierarchy so they can be reused. similarly to the group term page, conflicting user decisions in constructing the hierarchy are denoted with the red circles  and recorded in the term report .figure  <dig> 
oto structure hierarchy page. terms shown in the left pane are to be inserted  into the hierarchy shown in the right pane. more information about a selected term can be found in the lower pane, which consists of three tabs: location, context, and glossary.
add nodes into the hierarchy. left: four nodes are just added to the bottom of the hierarchy. right: after the hierarchy is saved, the new nodes become part of the hierarchy, conflicting decisions on the node base are detected, and a red circle icon is placed by the term in the left pane.
conflicting hierarchy decisions shown in the term report. three different decisions made by two users on the term base are shown.



term order
the term order page is designed to sort the categorical values of entity attributes that fall in some natural order. for example, by wave length, colors can be sorted into the order: violet, blue, cyan, green, yellow, orange, and red. such orders provide useful semantic information that otherwise would be missing for computer or human agents to determine, for example, that blue is more similar to cyan than to yellow. in morphological descriptions, such ordered categorical values are used but typically without precise definition, for example, the stems of a plant may be described as “… usually erect, sometimes prostrate to ascending”. the goal of the term order page is to invite domain experts to help define these orders, hence enabling a more precise understanding of prostrate to ascending and what intermediate states may be between prostrate and ascending.

figure  <dig> shows the term order page when it is initially displayed. here three sets of terms are to be ordered for pubescence, shape, and orientation. the user can add new terms to the term lists  and add new empty orders . the user can also edit the name of the orders by mousing over an order name and clicking on the pencil icon when it is shown. the latter two features are provided with the knowledge that a set of terms belonging to the same term categories may be ordered based on different criteria. for example, colors can be ordered based on wave length , but they can also be ordered by saturation or brightness. in our example , some terms in the orientation category can be ordered based on their orientation with respect to the ground, some terms w.r.t. the supporting structure or even to itself. the user can create multiple orders as needed to sort a group of terms.figure  <dig> 
oto term order page. the top pane shows three sets of terms to be ordered: pubescence, shape, and orientation. in each set, the first row lists the terms to be rearranged  into an order in the subsequent row. more information about a selected term can be found in the lower pane, which consists of three tabs: location, context, and glossary.
ordering term and save orders. the terms shown in red are the unsaved edits in the orders. when the orders are saved, the terms turn black and become part of the orders.



if several terms are deemed similar in a given context for an order, they can be dragged into the same box . similar to other term organization pages, conflicting decisions are signaled with red circles and displayed in term reports .figure  <dig> 
conflicting order decisions shown in the term report. two conflicting decisions are shown for the order orientation_wrt_ground.



dataset finalization and management functionalities
the above described functionalities are available to any user to organize a term set. next we will introduce the administrative functions that only term set owners and administrators can access. figure  <dig> provides an overview of administrative functions on the admin tasks page. user management is available only to the administrators, where user accounts on oto are approved or revoked. decision management allows a dataset owner or an administrator to finalize a dataset by selectively approving categorization, structure hierarchy, and term order decisions made by users. merge datasets supports two operations:  unfinalized datasets can be merged by an owner or an administrator for more efficient management using the “merge unfinalized datasets” function, and  finalized datasets can be merged into system reserved glossaries of the same group in order to build more comprehensive glossaries. the latter can only be done by an administrator.figure  <dig> 
oto admin tasks page. administrators can manage users, merge datasets, and finalize term organization decisions on this page.



the admin tasks page also allows dataset owners or administrators to click on the name of a dataset to view the term organization process of the dataset and to click on the “x” next to a dataset to delete a dataset. when a dataset is deleted, term sets associated with all three term organization tasks and all decisions made are permanently removed.

dataset finalization and reopen
clicking on any term set in any dataset in the admin tasks page starts the term set finalization process. figure  <dig> shows the user interface for finalizing term categorizations for the dataset plant_fna_foc. here the reviewer  approves a categorization decision by clicking on the green check icon next to the category, which moves the category from the “other decisions” column to the “accepted decisions” . the reviewer learns who is responsible for a category by hovering the mouse over the category. the “approve all system categories” button moves the categories matching those in the related system reserved glossary into the “accepted decisions” column all at once. in addition to approving the categorization results, the reviewer should also approve the synonyms in a similar fashion. not all the terms need an accepted decision before the “finalize this dataset” button is pressed. only the terms with an accepted decision will be saved in the final results for output, yet all information remains in the backend database. it is worth mentioning that oto maintains a global data dictionary for triples of < term, category, taxon group > and each triple is associated with a permanent uuid  <cit> . these ids are included in the results generated by the finalizing step and may be referenced by other applications  using the terms.figure  <dig> 
finalizing term categorization for a term set. hovering over a decision, oto shows the users who shared the same decision. here, four users agree that abaxial is_a position.



term sets for structure hierarchy and term order tasks need to be finalized in a similar fashion one by one for the results to become available for download . while finalizing a term set makes it uneditable, a finalized term set can be reopened by an owner or an admin by clicking on the name of term set in admin tasks, then press the “reopen this term set” button . when a term set is finalized again, oto outputs a new version of the term set on github.figure  <dig> 
reopen a finalized term set. reopen a term set makes it editable, making it possible for an administrator to adjust accepted decisions for the terms in the term set.



dataset management: merge datasets
merge unfinalized datasets
datasets that are undergoing an organization process can be merged for more efficient management  by the owner or an admin. when “merge unfinalized datasets” is clicked, the user is presented with a set of datasets that can be merged  and asked to enter a name for the merged dataset. although oto records the source datasets used to create a merged dataset, when a set of source datasets are successfully merged, they are permanently removed to avoid storing redundant information in the system.figure  <dig> 
merge unfinalized datasets. datasets are organized by their taxon groups. when “merge unfinalized datasets” is clicked, oto displays available taxon groups. when user selects a taxon group, oto then displays all datasets for the taxon group for the user to select and merge.



merge finalized term set into system term sets
the mechanism oto uses to grow system reserved datasets is through an admin merging finalized datasets into system reserved ones . after a merge is successfully completed, the source datasets will be deleted from oto  and the new system reserved dataset will be automatically re-finalized and a new version generated on github.figure  <dig> 
merge into system datasets. datasets are organized by their taxon groups. when “merge into system datasets” is clicked, oto displays available taxon groups. when user selects a taxon group, oto then displays all datasets for the taxon group for the user to select and merge.



output functionality
during the time a dataset is being finalized and afterwards, all the decisions are frozen so that no further changes can be made to the dataset. the finalized results from group term, term order, and structure hierarchy are downloadable from the oto website as sql dumpb and the group term results also available as csv files . in addition, group term results are also output to the github glossary repository  and each result consists of two files: termsename_term_category and termsetname_syns.figure  <dig> 
oto download dataset page. all finalized datasets are listed in the drop-down list and user can select one to download.



the term_category file contains all the is_a relationships between the terms and the categories. the syns file stores the synonyms. note that synonyms are not included in the term_category file. the term_category file contains the following columns: term , category , hassyn , sourcedataset , and termid . the syns file contains four columns: term , category , termid , and synonym . one term/category pair with multiple synonyms will result in multiple rows in the file. note that a uuid is used to identify a ‘concept’ represented by a term/category pair, and not used to identify any synonym. in addition, both csv files contains comment lines that start with an “*” and hold metadata information about the file, such as its version number, release date, and the names of the persons who participated in the term categorization process, etc. lastly, towards the end of the term_categorization files, we also included the natural language definitions of the categories.

toward ontologies
besides outputting csv files to github, oto is connected to ontology term trackers hosted on the ncbi bioportal via the bioportal rest services . users with a bioportal id can submit terms to a set of ontologies, currently including the ontologies that roughly correspond to the system reserved glossary groups, i.e., plant ontology , phenotypic quality ontology , hymenopetera anatomy ontology  and porifero ontology . in order to use this feature, users need to provide oto with their bioportal id on the account page .figure  <dig> 
oto to ontologies page. user selects a term in the terms column , oto provides local category for the term , and the user then fills out the term submission format  to submit a term request.



terms that are submitted to ontologies through the bioportal web service are assigned a unique temporary id by bioportal upon submission and will be assigned a permanent id if the submission is accepted by the ontology. these ids are linked to the termid  oto generated for each approved term categorization. although oto holds source sentences for each term, the bioportal web service does not take them, so they are not included in the term submission form .

oto web services
oto provides rest-compliant web services which support the functionalities of getting the available glossary types  in oto, getting the most recent version of a glossary  for a certain group , getting the glossary categories and their definitions, and getting term information  associated with a term. web services have also been implemented to support importing new term sets for various tasks. detailed instructions can be found on the web service page on oto.

use and benefits
oto was initially developed to be used with charaparser to aid semantic markup of morphological descriptions and generation of taxon-character matrices from textual descriptions. charaparser automatically extracts domain terms from textual descriptions and uploads terms directly to oto where the terms are reviewed and categorized by the experts. coming full circle, the finalized term set is automatically download by charaparser and used to generate the final markup. we have been using the charaparser-oto combination in projects and it has proven to be a successful strategy. in this section we describe how oto has been used to develop a rather comprehensive plant glossary incrementally .

we started with the fna categorical glossary , which contained  <dig> concepts with categories, definitions, and synonyms defined. here we define concept as a term-category pair, for example, sweet  and sweet  are two different concepts. by using the fnacg with charaparser to markup the morphological descriptions in fna v. <dig>  then using oto to review the extracted terms, we discovered  <dig> new useful concepts. interestingly, some categorizations of fnacg did not match how the terms were used in the source descriptions. for example, the shape of leaf margins are often described as entire, dentate, toothed, or lobed in description text, but in the glossary, the category for entire, dentate, and toothed is margin while the category for lobed is plane shape or solid shape. putting terms that are alternative values for the same attribute  into different categories artificially increases the semantic distance among these terms. the oto group term page provides useful tools to detect these kinds of issues. the glossaries panel allows the user to see if a term is included in the existing glossary and how it is categorized. the context tab allows the user to see all the sentences a term appears in throughout all of the source documents. thus, based on the presented knowledge of the term’s usage in reality, the user is better informed in determining a category for the term. in the example above, we decided to merge plane shape and solid shape to one shape category because in descriptions the 2-d and 3-d shape terms are often used in a mixed fashion. as a result, we moved shape terms  from margin to the shape category. when terms have multiple meanings/senses a user can decide to make a copy allowing one term to be put into multiple categories.

with multiple users’ effort organizing the terms in the datasets, the plant_glossary v <dig>  was released with  <dig> terms and replaced the initial version fnagc. it was then input into charaparser to extract additional plant terms from another thirty published volumes of fna  <cit>  and flora of china  . this resulted in  <dig> term sets or a total of  <dig>  terms. using the “merge unfinalized datasets” function, we merged the  <dig> term sets into one , and reduced the terms to be categorized to approximately  <dig>  while merging reduces the number of terms to be categorized, it keeps all the source sentences  from all the volumes intact to provide the users with complete context information for term categorization. we used the “copy system decisions” function to bring the categorizations from plant_glossary v <dig>  to the current term set to promote categorization consistency, but during the categorization process, these terms were reviewed again against the new source sentences for their applicability. a set of new categories were created and some existing categories were left empty and effectively ignored. after plant_fna_foc was finalized, it was merged into the system reserved glossary to release plant_glossary v <dig>  on github. table  <dig> summarizes the key points in the creation of plant_glossary <dig>  and  <dig> table  <dig> 
the activities related to the categorization of the terms for plant_glossary v <dig>  and plant_fna_foc term sets



term sets
# of unique terms
# of users
# of categorizations
# of conflict categorizations
# of comments posted
# of concepts
# of terms with multiple categories
.

table  <dig> shows that there were  <dig> unique terms to be categorized for plant_glossary v <dig> . seven users posted  <dig> comments and made a total of  <dig> categorizations on these terms and  <dig> %  of the categorizations were in conflict with some other users. after the term set had been finalized,  <dig>  terms ended up with multiple categories and the output term set contained  <dig> unique concepts. the data on plant_fna_foc suggests a similar pattern, that is, a significant portion of terms have different categorizations by different users. these differences were largely resolved in the end . from users’ feedback, we know that the term report  was a useful tool for the user, but our experience also showed that virtual and in-person meetings can help to resolve a lot of differences as well.

no formal usability test has been conducted to quantify the user-friendliness of oto, however, the process of reviewing and finalizing these and other datasets generated numerous constructive suggestions by the users and resulted in many feature enhancements to oto. user feedback we received suggests that the tool has become intuitive and efficient to use, especially the group terms functions as they are the most used in oto to date. there are  <dig> registered users and  <dig> datasets related to plants, algae, and invertebrates  currently on oto.

future development plan
our future development plan includes  support for flexible ontology selection and use, for example, using a user specified anatomy ontology to initialize the structure hierarchy page.  support other output formats, for example skos  <cit>  or semantic wiki pages.  new web services for importing terms. we also plan to use structure hierarchy and term order functions to further organize fna and foc datasets and enhance their features based on user requests. in addition, we are working to make the term organization results available in a more user-friendly environment such as a wiki to encourage community involvement. we have created floraterms in twdg’s terms wiki and made initial steps at http://terms.tdwg.org/wiki/floraterms.

related software
the key features that separate oto from other existing thesaurus  <cit>  and ontology editors  <cit>  are the usage-informed consensus building features, including access to source sentences, access to the decisions and comments made by other users, and visual cues signaling disagreements. other differences are summarized as follows: oto is not an ontology editor and it does not deal with the syntax of formal ontologies, but it supports the most fundamental ontological relations is_a and part_of in a user-friendly manner. library-oriented controlled vocabulary construction software  <cit>  relate terms using hierarchical , associative , and equivalence relationships , without differentiating different types of hierarchical  or associative  relationships. oto separates is_a and part_of relationships clearly. existing tools require the user to type the terms in one by one, while oto encourages manual or software batch imports, or the use of web services .

a commercial platform that integrates text mining techniques with vocabulary control and information/knowledge organization is poolparty  <cit> . it enhances traditional thesaurus/taxonomy construction functions with text mining techniques and semantic web oriented features such as using the thesaurus/taxonomy to annotate enterprise documents and serve the annotated information as linked data. oto is open source and much simpler to use as it is rather focused on consensus-based term organization.

another tool that invites domain experts’ input to an existing ontology is neurolex  <cit> , a semantic wiki for the neuroscience community and domain experts. “essentially, neurolex is a place to accommodate the concepts and entities that are found in literatures and other legitimate sources that are not yet been realized within a formal ontology relevant to neuroscience. neurolex allows a neuroscientist to add a new concept without having to worry about its deep semantic consequence due to incompleteness or partial truth about an asserted.”  <cit> . although the wiki platform makes it possible for the users to track the editing history of a term and take part in any discussion, promoting consensus among domain experts is evidently not the primary concern of neurolex.

CONCLUSIONS
we have developed oto to address the requirement for a user-friendly and non-technical tool to allow multiple domain experts to work collaboratively toward the creation of a controlled vocabulary that reflects the term usages in the source documents. oto can be used to organize terms for any domain where is_a, part_of, and order relationships among terms are important for knowledge modeling and it is available online free of charge. it is open source so adapting it for other applications is possible and encouraged. domain experts that have used oto find the tool easy to use and have created several non-trivial glossaries which are used in ongoing projects. in the near future, we plan to release a version to the public in a wiki format to encourage further review and addition of terms and their respective definitions and illustrations.

availability and requirements
project name: oto

project home page: source code is available at: https://github.com/biosemantics/oto. the oto web application is running at http://biosemantics.arizona.edu/oto/. a video introduction to oto can be found at http://biosemantics.arizona.edu/oto/demo.do. short demos that show how to use oto can be found in the help section of oto website after login. to test the system, use username otodemo and password otodemopass to login.

operating systems of server: linux, windows

programming language: jsp, javascript

other requirements: java jdk  <dig>  or higher, mysql server  <dig>  or higher, apache tomcat  <dig>  or higher.

license: open source, apache license, version  <dig> 

restrictions to use by non-academics: none

endnotes
acharaparser  <cit>  employs a bootstrap-based unsupervised machine learning method to categorize terms appearing in morphological descriptions into structure, character, and other groups. while the method does not require any training examples, it has an assumption that description sentences start with structure names and followed by characters, for example, “stems  generally purple ”. depending on how well the input text conforms to this assumption, in our evaluation on three real-world description collections, the accuracy of identifying structure and character terms ranged from 50% to over 80%.

bthe sql dump contains the tables that hold the finalized results from group term, term order, and structure hierarchy tasks. the tables for group term results have the same structure as the csv files described in the paper. the table for term order result currently contains seven columns: orderid , ordername , term , distance , accepted , userid , confirmdate . the table structure makes it easy to find a term’s position in an order, but it also means that it takes n rows to make up an order, where n = the number of terms in the order. the table for structure hierarchy is call “paths” and contains five columns: term , pathwithname , accepted, userid , confirmdate . as the term order and structure hierarchy functions are used more often by more users, the table structures of the results may change based on user needs.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

fh participated in the design and the implementation of oto. jm developed the use cases for oto, provided domain expertise, used oto and provided feedback. hcui conceived of, designed, and used oto, supervised the implementation of the system, and drafted the manuscript. hcole and le used oto to categorize the fna and foc datasets and provided numerous feedback to make the system more user-friendly and efficient. all authors read and approved the final manuscript.

authors’ information

fengqiong huang: research programmer, school of library and information resources, university of arizona, the united states.

james macklin: research scientist, botany and biodiversity informatics, agriculture and agri-food canada, canada.

hong cui: associate professor, school of library and information resources, university of arizona, the united states.

heather cole, post-doc researcher, agriculture agri-food canada, canada.

lorena endara, post-doc researcher, university of florida, the united states.

