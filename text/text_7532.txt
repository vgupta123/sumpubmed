BACKGROUND
there is considerable interest among researches in using cluster methods. for example, a common approach in many biomedical applications is to seek a reliable and precise classification of genes into a number of clusters, which is essential for understanding the bases of complex diseases. for instance, an accurate classification of tumors is essential to successful diagnosis and treatment of cancer. clustering algorithms attempt to partition the units into groups that have similar properties and it is necessary to identify the value of k at which the final partition appears to be the best. there is considerable interest among researches in using cluster methods, which can be generally found in r packages on the comprehensive r archive network . an important problem associated with the classification of units is to assess whether the clustering process finds a relevant partition, and to identify new classes of units. for example, if genes are classified into groups exhibiting similar patterns of gene expression variation, it is necessary to pay attention to two things. first the correct classification in k clusters of the genes by an unsupervised method. usually, when a clustering algorithm is applied to a set of units, although the data do not present a cluster structure, the algorithm returns a partition. it is thus necessary that the index used to establish the "real" number of clusters should also be able to detect the absence of cluster structure. a variety of measures for determining the "real" number of cluster can be found in the literature, see for example  <cit>  or  <cit> , which gives an excellent overview. most of these procedures are useful only for continuous data. only one, the silhouette method  <cit> , is appropriate for any kind of data . data of this kind are common in biomedical applications, but the silhouette index cannot detect the absence of a cluster structure. an index that can be applied to any kind of attribute type, the inca index, can be found in  <cit> . this index can use continuous data without any assumption about their distribution and it also permits detection of data that have no cluster structure. second, given a new gene, the procedure should establish whether it is sufficiently similar to any of the existing clusters. if not, a new type of expression pattern must be considered. note that some techniques of classification, similar to discriminant analysis, classify a new unit as necessarily belonging to one of the specified clusters. however, this new unit may not belong to any of the pre-identified clusters, but may rather be a member of an entirely different and unknown cluster. there are few approaches in the literature dealing with the typicality problem  <cit> . all these methods have some restrictions on the type of data  or on the number of groups . recently, irigoien et al.  <cit>  developed an effective test for determining atypical objects in different types of clustering applications. this test provides an alternative to the other models that impose constraints on the type of data or the number of groups. this test can be used with any kind of data, and has no limitation on the number of groups.

the literature on statistical clustering is large, but it does not appear to contain any computational tool capable of solving all the key aspects of classification: identifying the number of clusters using mixed variables, usually found in applied biomedical research; detecting whether the data have a cluster structure; identifying whether a new unit belongs to one of the pre-identified clusters, and classifying this unit. the icge package uses the methodology introduced in  <cit>  and deals with all the aspects commented above.

implementation
in this section, the structure of the package and the functions implemented are explained. examples illustrating the usage of the functions are also included.

the icge package was developed for the free statistical r environment  and runs under the major operating systems. we do not delve here into details of the underlying statistical methodology. however, a review of this methodology can be found in the methods subsection.

main functions
name and small description of the main functions in icge.

the main function incaindex helps to estimate the number of clusters in a dataset.

• usage

incaindex

• arguments

to call the main function incaindex, two arguments must be specified. as usual, d is a distance matrix or a dist object containing the distances between the n units, and pert clus is an n-vector that indicates which group each unit belongs to. the default value indicates the presence of only one group in the data. note that the expected values of pert_clus are greater than or equal to  <dig> .

• value

this function returns an object of class incaix, which is a list containing the following components:

well_class, a vector indicating the number of units that are well classified;

ni_cluster, a vector indicating each cluster size and

total, percentage of units well classified in the partition defined by pert_clus, i.e., the inca index.

• remarks it admits the associated methods summary and plot. the first simply returns the percentage of well-classified units and the second offers a barchart with the percentages of well classified units for each group in the given partition.

• example 1

consider the following simulated data. using the data simulation functions included in the wgcna package , we generated  <dig> samples and three groups containing  <dig>   <dig> and  <dig> genes, respectively. we used the euclidean distance and calculated the percentage of well classified genes.

library

library

nsamples = 100

set.seed

nmodules = 3

ngenes = 1200

eigengenes = matrix, nsamples, nmodules)

d = simulatedatexpr, signed = true)

data = d$datexpr;

dst = dist)

x = incaindex

the output was: a vector indicating the number of units in each group ; the number of units well classified  and the inca index, which indicat the total of units well classified .

furthermore, in order to obtain an estimation of the "real" number of clusters from the data, we compute the inca index for several partitions, with different number k of clusters in each partition, where k =  <dig> ..., k. this is the aim of incanumclu function.

• usage

incanumclu

• arguments

the function incanumclu has  <dig> arguments but they are not involved simultaneously. a distance matrix d or a dist object with distance information between the n units is required. argument k indicates the maximum number of clusters to be considered. for each value k, k =  <dig>  ..., k a partition in k clusters is considered. the method argument is a character string defining the clustering method to be applied in order to obtain the corresponding partitions. the clustering method is performed via the function pam and agnes in cluster package. the available clustering methods are pam , average , single , complete , ward , weighted . nevertheless, the user can introduce particular partitions indicating method="partition" and using the pert argument. this argument is a matrix with n rows, and each column contains a particular partition. this means that each column is an n vector that indicates the group to which each unit belongs. note that the expected values of each column of pert are consecutive integers that are greater than or equal to  <dig> . the argument noise is a logical vector indicating units considered as "noise" units by the user, and argument l must be set as l="custom". when argument l = "null" no "noise" units are considered. if parameter l is greater than or equal to  <dig>  the units classified in all clusters c, containing a number of units ≤ l, are considered "noise" units. if l="custom", the "noise" units are selected by the user and they must be indicated in the noise argument.

• value

this function returns a numeric vector with the inca index values calculate for each partition . the associate method plot returns two plots of incak versus the number of clusters k. one plot shows the incak index values considering all the units, and the other shows the incak index values calculated without "noise" units. as explained in  <cit> , when the value incak+ <dig> shows a large decrease respect to the incak value, we conclude that there are k clusters in the data. when values of incak are low and constant, it means that there is no cluster structure, or that all the data form a single cluster.

• example  <dig> 

the average clustering algorithm was applied to the same data. using incanumclu we determined the number of clusters. consequently we calculated the inca index associated with partitions having k =  <dig>  ...,  <dig> clusters.

out <- incanumclu

plot

the procedure gives good results and identifies the three clusters, see figure  <dig> 

• example 2

now consider the following example. using the data simulation functions included in  <cit> , we generated  <dig> samples and three groups containing  <dig>   <dig> and  <dig> simulated genes, respectively. a fourth group with  <dig> "noise" genes was also generated. the incanumclu function shows  that the "noise" genes have hidden the underlying cluster structure. using the parameter noise with l =  <dig>  the procedure identifies, in the initial partitions  <dig> "noise" genes.

library

library

nsamples = 100

set.seed

nmodules = 3

ngenes = 1200

eigengenes = matrix, nsamples, nmodules)

d = simulatedatexpr, signed = true)

data = d$datexpr;

dst = dist)

out<-incanumclu

the results are:

inca index to estimate the number of clusters considering all units

clustering method: average

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

noise units:

gene. <dig> gene. <dig> gene. <dig> gene. <dig> gene. <dig> gene. <dig> gene.1141

gene. <dig> gene. <dig> gene. <dig> gene. <dig> gene. <dig> gene.1182

inca index to estimate the number of clusters without the noise units

clustering method: average

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k = . <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

k =  <dig>   <dig> 

finally, incatest function performs the typicality inca test. therein, the null hypothesis that a new unit g <dig> is a typical unit with respect to a previously fixed partition is tested versus the alternative hypothesis that the unit is atypical.

• usage

incatest

• arguments

by calling the function, incatest,  <dig> arguments are specified. as before, d is a distance matrix or a dist object with distance information between the n units, and pert is an n-vector that indicates the group to which each unit belongs. the default value indicates the presence of only one group in the data. note that the expected values of pert are greater than or equal to  <dig> . the argument d_test is a vector of length n that contains the distances from the new unit g <dig> to the rest of the n units. note that sampling distributions of the inca statistics w and the related statistics uj   can be difficult to find for mixed data, but they may nevertheless be obtained by re-sampling methods, in particular by drawing bootstrap samples as follows. draw n units g with replacement from the union of c <dig>  ..., ck and calculate the corresponding w and uj  values. this process is repeated 10p times. in this way, the bootstrap distributions under h <dig> are obtained. then, the np and alpha arguments indicate the sample size for the bootstrap procedure, and the level for the test, respectively. finally, the argument p indicates that the bootstrap procedure is repeated 10p times.

• value

the function returns a list with incat class containing the following components:

statisticw <dig> value of the inca statistic;

projectionsu values of statistics measuring the projection from the specific object to each group;

percentage under alpha percentage of times that the inca test has been rejected for a fixed significance level;

alpha specified value of the significance level of the test.

• example  <dig> 

consider the above simulated gene-expression data that include  <dig> "noise" genes,  <dig> samples and three groups containing  <dig>   <dig> and  <dig> simulated genes, respectively.

now, consider only the three groups without "noise" genes. select one "noise" gene at random and insert the distances from it to the "non-noise" genes in vector dd. then, compute the incatest function:

dr<-as.matrix

cl<-d$alllabels

incatest

as we expected, the output indicates that this "noise" gene is atypical.

statisticw0

 <dig> 

projectionsu

 <dig>  <dig> 

 <dig>  <dig> 

 <dig>  <dig> 

percentage under alpha

100

alpha

 <dig> 

also take at random  one gene of the cluster  genes and insert the distances from it to the "non-noise" genes in vector dd. then, the incatest correctly predicts their cluster membership:

inca test

inca statistic value =  <dig> 

u projections values:

u <dig> =  <dig> 

u <dig> =  <dig> 

u <dig> =  <dig> 

significative tests for alpha=  <dig> : 0

we also considered  <dig> genes selected at random:  <dig> "non-noise" genes  and  <dig> "noise" genes. we computed the incatestfunction. the results show that the function correctly predicts the cluster membership of the  <dig> "non-noise" genes. for the "noise" genes,  <dig> are considered as atypical and the other  <dig> are confounded as genes of the initial groups.

auxiliary functions
these main functions are, of course, based on the auxiliary functions that calculate the geometric variability, the distance between two groups, the proximity function and the inca statistic itself, which are described at the beginning of the method section. table  <dig> shows the corresponding functions available from the package, and more detailed comments are presented below.

name and small description of the auxiliary functions in icge.

the vgeo function calculates the geometrical variability v ^δ  for each group in the data.

• usage

vgeo

• arguments

to call vgeo two arguments must be specified. the d argument is a distance matrix or a dist object with distance information between the n units and pert is an n-vector that indicates the group to which each unit belongs. the default value indicates that there is only one group in the data. note that the expected values of pert are numbers greater than or equal to  <dig> .

• value

the function returns a matrix containing the geometric variability for each group.

the deltas function calculates the distance Δ^ij <dig> between each pair of groups ci and cj in the data .

• usage

deltas

• arguments

to call deltas the same d and pert arguments must be specified.

• value

the function returns a matrix containing the distances between each pair of groups. proxi function calculates the proximity function ϕ^ <dig>  from a specific unit g <dig> to the other groups cj in the data.

• usage

proxi

• arguments

to call proxi three arguments must be specified. the d argument is a distance matrix or an object dist for the n units; dx <dig> is an n-vector containing the distances from g <dig> to the rest of the units and pert is an n-vector that indicates the unit to which group belongs. the default value indicates that there is only one group in the data. note that the expected values of pert are numbers greater than or equal to  <dig> .

• value

the function returns a vector containing the proximity function from g <dig> to each group.

the function estw calculates the inca statistic w and the related statistics uj, j =  <dig>  ..., k.

• usage

estw

• arguments

this needs the same arguments as proxi.

• value

the function returns an object of incaest class, which is a list containing the following components:

wvalue, is the inca statistic w;

uvalue, is a vector containing the statistics uj, j =  <dig> ..., k.

the associated summary method returns only the inca statistic value.

distance functions
note that all these functions require the previous calculation of a distance between units. biomedical and genetic studies incorporate any type of data, not only continuous variables, and correlation or other types of dissimilarities are frequently used for clustering. for this reason, icge can calculate different distance matrices .

name and small description of the distances available in icge.

the correlation distance and the mahalanobis distance  <cit>  are well known, but perhaps the bhattacharyya and the gower distances are less. a function named mahalanobis() that calculates the mahalanobis distance already exists in the stats package, but it is not suitable in our context. while this function calculates the mahalanobis distance with respect to a given center, our function is designed to calculate the mahalanobis distance between each pair of units given a data matrix.

the bhattacharyya distance  <cit>  between two units with frequencies i =  and j =  is defined by:

 d=arccos ∑l=1mpilpjl. 

the gower distance  <cit> , used for mixed variables, is defined by dij2= <dig>  as each unit is characterized by m <dig> continuous, m <dig> binary and m <dig> qualitative variables, the similarity coefficient sij between unit i and j is calculated as follows:

  sij=∑l=1m11-xil-xjlrl+a+αm1++m <dig> 

where rl is the range of the lth continuous variable ; for the m <dig> binary variables, a and d represent the number of matches presence-presence and absence-absence, respectively and α is the number of matches between states for the m <dig> qualitative variables. note that there is also the daisy() function in cluster package, which can calculate the gower distance for mixed variables. the difference between this function and dgower() in icge is that in daisy() the distance is calculated as dij =  <dig> - sij and in dgower() as dij2=2*. moreover, dgower() allows us to include missing values  and therefore calculates distances based on gower's weighted similarity coefficients.

the procrustes distance was defined in  <cit> , and it was introduced to find an appropiate distance between genes using their expression profile. it was defined as the procrustes statistics between the procrustes weighted mean associated with two genes, see definition  <dig>  step c in  <cit>  for more details.

methods
briefly, we describe some of the concepts used in the icge package. a more detailed description of the procedure and applications can be found in  <cit> .

consider a dataset with n units and a partition into k groups c <dig>  ..., ck. let δ be a distance between units g and g'. let samples g <dig> …,gn <dig> …,g1k,…,gnkk, of sizes n <dig>  ..., nk be taken from the c <dig>  ..., ck groups respectively.

the geometric variability for each group is defined by:

 v ^δ=12nj <dig> ∑l,mδ <dig>  

given two groups ci, cj the distance between them is given by:

 Δ^ij2=1ninj ∑l,mδ2-v ^δ-v ^δ. 

given the distances from one specific unit g <dig> to the rest of the units organized in the k groups, the proximity function of unit g <dig> to cj is defined by:

 ϕ^2=1nj ∑lδ2-v ^δ. 

for more details on these concepts see  <cit> .

from these previous concepts we define the inca statistic. consider a fixed unit g <dig>  which may be an element of some cj, j =  <dig> ..., k or may belong to some unknown cluster, i.e., it may be an atypical unit. this statistic trades off between minimizing the weighted sum of proximities of g <dig> to clusters  and maximizing the weighted sum of the squared distances between clusters  - a common feature of a clustering criterion. moreover, this statistic can be interpreted  as the  orthogonal distance or height h of g <dig> on the hyperplane generated by the centers of ci , denoted in figure  <dig> by ai, i =  <dig> ..., k. then, points which lie significantly far from this hyperplane are held to be atypical. this intuitive idea is used both to determine the number of clusters, and to detect atypical units among existing clusters. the definition of the inca statistic is:

 w=minαi{l}, ∑i=1kαi= <dig> 

where,

 l= ∑i=1kαiϕi2-∑1≤i<j≤kαiαjΔij <dig>  

estimating the number of clusters
we define the inca index, incak, associated with the partition c <dig> ..., ck, as the probability of finding well classified units. consider that n units are divided into k clusters c <dig> ...,ck of sizes n <dig> ..., nk, respectively. fix cluster cj and for each unit g belonging to the data set, consider the value of inca statistic, wcj, with respect to clusters ci with i ≠ j. consider the maximum, wcj, of these  orthogonal distances for all the units that do not belong to cj. then consider the following criterion: unit g of cj is well classified in cj if wcj>wcj. unit g of cj is poorly classified in cj if wcj≤wcj, in fact, it is closer to another cluster.

let nj be the total number of units in cj which are well classified. thus we define the inca index, incak, associated with the partition c <dig> ..., ck as the frequency of well classified, i.e.,

 incak=1k ∑j=1knjnj. 

procedure for detecting an atypical observation
suppose now that a cluster analysis is performed and the optimal number of clusters is found. let g <dig> be a new unit and consider the inca test to decide whether g <dig> belongs to one of the fixed clusters cj, j =  <dig> ..., k or, on the contrary, whether it is an atypical observation, belonging to some different and unknown cluster. compute w: if this value is significant it means that g <dig> comes from a different and unknown cluster. otherwise, we allocate g <dig> to ci using the rule:

  allocateg0tociifui=minj= <dig> …,k{uj}, 

where uj=ϕj2-w, j =  <dig>  ..., k.

for a geometric interpretation, see figure  <dig>  where for simplicity the  projection uj is denoted by rj, j =  <dig> ..., k. so, the above criterion follows the next geometric and intuitive allocation rule:

  allocate g0tociif the projection ui is the smaller. 

a more detailed explanation of these procedures, properties and examples can be found in  <cit> .

RESULTS
remarks and limitations of the package
for icge package the computing times are reasonable. table  <dig> shows runtime for functions incaindex and incatest based on synthetic data sets of different sample sizes , and different number of groups k =  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig> or  <dig>  observe that for a large number of clusters, the time increases exponentially.

runtime for functions incaindex and incatest using synthetic data sets with different sample sizes, n =  <dig> , <dig> or  <dig>  and different number of groups k =  <dig> , <dig> , <dig> , <dig> or  <dig>  function incatest is performed for np =  <dig> resampling units.

furthermore, note that in the main functions incaindex, incanumclu and incatest the argument d is a distance matrix or a dist object. therefore, any kind of dissimilarity can be used, not only those included in icge, and in this sense the package is flexible.

another aspect is also relevant. let p be the dimensionality of the euclidean space in which the original metric space  can be embedded . if the number of clusters k is equal to or greater than the dimensionality p, the hyperplane generated by the cluster centers will simply be the whole space, and the inca statistic will always be zero. this special situation should be taken into account when using these functions, and it may be a limitation of the method .

application to real and simulated data
functions and methods are illustrated and tested on both real and simulated data.

chowdary's data set
chowdary et al., compared in  <cit>  pairs of snap-frozen and rnalater preservative-suspended tissue from lymph node-negative breast tumors  and dukes' b colon tumors . icge package proved to be effective at automatically discovering the both groups . the procedure chooses k as the value of k prior to the first biggest slope decrease. using the correlation distance, the clustering procedure pam was used to partition the  <dig> samples successively into  <dig>   <dig>  ...,  <dig> clusters. the plot indicates that there are two clusters as it was already reported. this data set is included in the package.

golub's data set
golub et al., studied in  <cit>  gene expression in two types of acute leukemia: acute lymphoblastic leukemia  and acute myeloid leukemia . they worked with  <dig> all and  <dig> aml samples. there were no missing values and we standardized the data as described in  <cit> . we evaluated the performance of the typicality test using the correlation distance. we considered  <dig> and  <dig> units at random from all and aml group, respectively. using icge we decided whether these unknown units are typical units with respect to all and aml groups or whether on the contrary, they are units from another group. we repeated this procedure ten times for each group. good results at the 5% level were obtained. in each case, the units were identified as units from one of the two groups and were well classified. data can be found in the multtest library.

synthetic time course data
we generated time course data with  <dig> groups,  <dig> genes in each group and six time points, following  <dig> different profiles : g <dig>  constant profile; g <dig>  monotone increasing but with small difference between the expression value at the first and the last time points; g <dig>  constant profile at  <dig>   <dig> and  <dig>  and later monotone increasing; g <dig> up-down profile with maxima at 2; g <dig>  up-down with maxima at 5; g <dig>  down-up profile with minima at 3; g <dig>  cyclic with maxima at  <dig> and minima at 5; g <dig>  down-up constant profile with minima at  <dig> and constant at  <dig> , <dig> and  <dig>  the procrustes distance was used  <cit> . when genes in g <dig> are considered as new genes to be classified in g <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g <dig> or g <dig> the procedure identifies the  <dig> as belonging to a new group. when genes in g <dig> are considered as new genes to be classified in g <dig>  g <dig>  g <dig>  g <dig>  g <dig>  g <dig> or g <dig> the procedure identifies  <dig> as belonging to a new group  and  <dig> as belonging to g <dig>  when genes in gi, i =  <dig> , <dig> , <dig>  are considered as new genes to be classified in gj, j ≠ i, the procedure identifies the  <dig> genes as belonging to a new group . icge package proved to be effective at automatically discovering atypical genes. this data set is included in the package.

lymphatic cancer data
the data from  <cit>  demonstrates that icge can correctly identify situations in which the data do not present a clear cluster structure . the lymphatic data set consists of  <dig> instances of the diagnosis of four lymphatic cancer classes , with  <dig>   <dig>   <dig> and  <dig> samples, respectively. note that it is very difficult for any method to find four clusters given the small sizes of two of the groups.  <dig> mixed variables were measured:  <dig> quantitative;  <dig> binaries and  <dig> multi-state. icge can correctly identify situations in which the data do not present cluster structure. notice that this is an advantage over other procedures. the pam clustering procedure was used to partition the  <dig> samples successively into  <dig>   <dig>  ...,  <dig> clusters. gower's distance was used. as expected, the low values of the index indicate no cluster structure. this data set is included in the package. for additional details read  <cit> .

CONCLUSIONS
icge offers a friendly implementation for r users that is capable of solving important questions in genetic analysis and in general studies, where an unsupervised classification is necessary. one aspect of the package is the estimation of the number of clusters. the icge procedures provide functionalities that are not offered by other tools; in particular, they can deal with mixtures of categorical and continuous data, a situation usually found by applied researchers. furthermore, it can detect the absence of cluster structure. only the silhouette method is appropriate for any kind of data, but this index cannot detect the absence of cluster structure. thus, our method is able to deal with data of a more general kind. in contrast to other classification techniques, given a new unit to be classified, it does not automatically classify it in previously specified clusters. the procedure decides whether a new unit belongs to a new group. for this reason, the icge package is able to solve the typicality problem. other methods present restrictions in the kind of data or number of groups, but the icge package can work with any kind of data and has no limitation on the number of groups. for all these reasons icge could be very useful to a large number of researchers.

availability and requirements
the icge package has been developed for the free statistical r environment  and will run under the major operating systems. the functions in the icge package are accompanied by help files and simple examples to facilitate its use. a manual is also included. icge and its documentation are freely available at http://www.sc.ehu.es/ccwrobot.

software name: icge

software home page: http://www.sc.ehu.es/ccwrobot

operating system: e.g. platform independent

programming language: r platform

other requirements: no

any restrictions to use: it is available for free download.

authors' contributions
ii developed the algorithms, prepared the implementation of the icge package and carried out the data analysis. bs worked on the draft preparation and cooperated in writing the manuscript. ca conceived the software implementation idea, drafted and wrote the manuscript. ii and ca designed the statistical method. all authors have read and approved the final version of the manuscript.

