BACKGROUND
the influence of geometry and space on the functioning of cellular processes, the vast quantity of potential interactions due to molecular complex formation, and the stochasticity caused by low copy numbers of molecular species are all recognised features of many biological systems  <cit> . within the field of computational biology these systems are best modelled using a particle-based stochastic approach  <cit> . here we present meredys , a stochastic, particle-based simulation software designed to model and simulate reaction-diffusion systems at the mesoscopic level. the software is derived from an idea initially developed by dan mossop and fred howell in the abstracted protein simulator   <cit> . it is implemented in the java programming language and uses java3d as visualization framework for rendering to the screen. the input to the software is a model of a reaction diffusion system encoded in a meredys specific implementation of the neuroml model description language  <cit> . the specification includes entries for molecule geometry and position, feature states of molecular entities, position of reaction sites, as well as types of reactions occurring and the biophysical properties of the diffusion landscapes. during a simulation, the software implements a brownian dynamics algorithm  <cit>  to simulate the evolution of the system through time. among the features meredys was designed to tackle are the accurate simulation of reaction-diffusion systems operating in three dimensions, the potential for multi-state, multi-component molecular species, and the effect of multiple molecular states on the rate and outcome of the reactions these molecular species undergo.

implementation
given below is a description of the most important algorithms and software routines used in the meredys software. upon start-up, the program reads the xml input file, initialises the random number generator, sets up the simulation volume and creates the required software representations of the molecular species that need to be modelled. meredys simulations take place in a confined space called the simulation volume, a cube whose side length are defined by the user . the position of any molecular species within the simulation volume is given as a 3-component position vector relative to the centre of the simulation volume. after initialisation, the software enters a cycle of iterations. the brownian dynamics engine works by dividing time into small, equal time steps. the time evolution of the system occurs by iteration of these time steps. the time step length, the amount of simulated time each time step represents, is given as user input. the meredys algorithm executes a sequence of procedures at each iteration cycle. the iteration cycle is shown in figure  <dig>  the number of total iterations executed, that is the total run length, is user defined within the input file. the algorithms employed at each step of an iteration cycle include algorithms for random walks of molecules, zeroth-order, uni-molecular and bi-molecular reactions, including bonding reactions, and execution of user-defined events. movement of molecules takes place in specific diffusion environments, called diffusion landscapes, which determine the diffusive behaviour of molecules. examples of such landscapes are the membrane or the cytosol. following diffusion, the software executes potential reactions. the feature-states of the reactants can affect the reaction rate and/or outcome. in order to speed up run time, meredys omits iterations during which no molecular movement, reaction or event takes place, effectively jumping ahead to the next iteration containing any of these actions. the program allows for various different types of output options including information displayed as text to file or console and visual information rendered to screen during run-time or captured as set of image files. the type of output, as well as the information to be output, is defined in neuroml input file.

random number generation
the monte carlo methods used in meredys for the simulation of molecular diffusion and some of the reaction algorithms require a large number of random numbers to be generated by the program. in order to allow reproduction of results, random number generation needs to occur in an environment which allows the recreation of the sequence of random numbers used during a simulation run. all random number generation in meredys is handled by the randomizer class, which in turn contains the random class supplied by the java development kit . the jdk random class allows for the creation of a random number generator seeded with a user-supplied value, thus enabling the repetition of the generation of a sequence of random numbers. the jdk random class uses a linear congruential formula to modify the seed value  <cit>  and create the sequence of random numbers. the class returns pseudo-random, gaussian distributed double-precision floating point values, pseudo-random, uniformly distributed single-precision floating point values, and pseudo-random, uniformly distributed integer values. exponential variates are created by the randomizer wrapper class using pseudo-random, uniformly distributed single-precision floating point values and applying the inversion method  <cit> . as random number generation can be computationally time consuming, and the software requires a large amount of random numbers, meredys gives the user a choice of two approaches for random number generation. firstly, all the random numbers can be generated when required at run time. alternatively, the software can pre-compute two list of  <dig> random numbers , and reuse these lists with replacement and shuffling, during program execution .

voxels
a bi-molecular reaction between two reacting partners proceeds if the reacting partners are separated by a distance equal to or less than their binding radius  by the end of the movement step of the iteration cycle. each reaction site must therefore query all its possible partner sites for their position in the system volume, and determines the distance between them. in a system of many molecules, these operations can be computationally time consuming, and often unnecessary, especially if distances between reacting partners do not change significantly from one iteration step to the next. these computationally expensive operations can be minimised by dividing the system volume into separate sub-volumes called voxels. every reaction site keeps track of its encompassing voxel following the cluster movement step of the iteration cycle. during bi-molecular reaction resolution, each reaction site only checks reaction partners present in the same voxel as itself or any of the  <dig> neighbouring voxels . for this procedure to work effectively, voxels need to be larger than the largest binding radius. the program pre-computes all the possible binding radii at program initialisation and checked against the user defined voxel size. if the voxel size is larger than the largest binding radius, the program divides the system volume into the appropriate number of voxels. otherwise the user is asked to define a larger voxel size. a large number of voxels speeds up the simulation run time at the expense of computer memory.

representation of molecules entities
any biological object of interest, such as a protein, is represented by a model construct, which in turn is instantiated from a number of software objects. molecular species are modelled in a hierarchical fashion . particles, entities and clusters are the software classes that are used to create representations of the molecular species within the model. clusters are composed of one or more entities, and an entity is composed of one or more particles.

particles are the basic building blocks for the construction of compound objects. they contain the sites of all bi-molecular and some uni-molecular reactions. a particle's centre of mass is described by a position vector relative to the centre of mass of its parent entity .

entities are permanent objects that never dissociate into their component particles during run-time. an entity's particle make up is defined by the modeller in the simulation input file. an entity maintains its identity throughout a simulation, even when it is part of a cluster comprising two or more entities. entities have a centre of mass encoded as a position vector relative to the centre of mass of its parent cluster .

the final member of the component hierarchy of the objects used in meredys is the cluster. clusters are the run-time instantiations of one or more entities. entities which undergo binding reactions are considered part of the same cluster . this association can be transient. when two bonded entities separate, they each form an independent cluster. additionally, a cluster's hydro-dynamic radius, used in the calculation of the cluster diffusion constant, is determined by the hydro-dynamic radii of all its member particles. the member particles are assumed to be spheres of a volume calculated from their user-defined hydro-dynamic radius. the parent entity is assumed to be a sphere of volume equal to the sum of the volumes of its child particles. the parent cluster is assumed to be a sphere of volume equal to the sum of the volumes of its child entities. the sphere's radius is taken as the cluster's hydro-dynamic radius . clusters have a centre of mass which is a position vector relative to the centre of the simulation volume.

diffusion
clusters are the software objects which diffuse through the simulation volume at each time step. the diffusion properties of the cluster are determined by the particles composing the cluster's entities. each particle belongs to a specific diffusion landscape. an entity then contains a set of diffusion landscapes composed of the diffusion landscapes of all the entity's child particles. a cluster, in turn, contains a set of diffusion landscapes constructed from the union of the sets of its child entities. the diffusion landscape which determines the cluster's diffusion properties is the most limiting landscape from the set of landscapes. currently there are five landscapes to chose from: unrestricted, membrane, above membrane, below membrane, and static. the 'unrestricted' diffusion landscape allows for unrestricted diffusion over the whole simulation volume. clusters in the 'membrane' diffusion landscape have their movement restricted to two dimensions, with no movement along the y-axis. this is used for movement of membrane-bound molecules. the membrane position point is the y-coordinate at which the membrane is located. it is user-defined. the membrane is therefore represented by a plane in x-z, which crosses the simulation volume at a user defined y-coordinate. the 'above membrane' diffusion landscape allows unrestricted three-dimensional diffusion in the sub-volume above the membrane position point. conversely, the 'below membrane' diffusion landscape allows unrestricted three-dimensional diffusion in the sub-volume below the membrane position point. the 'static' diffusion landscape disallows any kind of movement. the 'static' diffusion landscape is set as the most limiting diffusion landscape, followed by the membrane landscape as the second most limiting followed by the remaining landscapes, which are considered of equal precedence.

a cluster's diffusion landscape can change during a simulation, as the cluster incorporates more entities containing a different set of diffusion landscapes, or when a cluster separates into two clusters and the inheritance of possible diffusion landscapes is unequal due to unequal entity composition. for example, a cluster can change from an unrestricted diffusion landscape to a static diffusion landscape by binding a different, static cluster. in addition to determining the limits of the cluster diffusion within the simulation volume, diffusion landscapes also influence the actual displacement a cluster experiences at each time step, by affecting the cluster's diffusion coefficient, d.

within molecular environments, where viscous forces exceed inertial forces, particles move by random, brownian, motion  <cit> . the probability of finding a particle at position x after some time Δt following release from a point source at time t =  <dig> and free diffusion in one dimension can be calculated from fick's second law of diffusion and yields   

this describes a gaussian distribution with mean μ =  <dig>  and variance σ <dig> = 2dΔt. meredys uses this solution to fick's second law to determine the displacement of each cluster at each time-step. each component of a cluster's displacement vector is random number x drawn from the above distribution, x ~ n  where μ =  <dig> and σ <dig> = 2dΔt. similar translational displacement algorithms have been used in other stochastic, particle based simulation software  <cit>  and effectively describe free diffusion. the value of a cluster's d is dependent on whether the cluster is membrane bound or not, on the viscosity of the cluster's diffusion landscape and on the hydro-dynamic radius of the cluster. in the case of a cluster diffusing in an aqueous, non-membrane environment  meredys calculates the cluster's d, using the stokes-einstein equation  <cit> :   

where kb is boltzmann's constant, t is the absolute temperature in kelvin, η is the viscosity of the surrounding fluid, and r is the cluster's hydro-dynamic radius. when clusters combine during a simulation run, the resulting, larger cluster has a different value of d. for membrane-bound clusters, the equation for d is taken from saffman and delbrück  <cit> :   

where γ is euler's constant, and h is the thickness of the plasma membrane , μ is the viscosity of the membrane, and r is the radius of a cylindrical particle in the membrane. the membrane landscape can be further sub-divided by defining membrane domains. these are circular sub-domains within the membrane. membrane domains may have different viscosities from the membrane landscape. the user can assign specific boundary conditions to the boundaries between membrane domains and the membrane landscape.

in addition to translational motion, clusters also undergo rotational motion during each time step. as a cluster's rotational motion is much faster than its translational motion, clusters assume a random orientation after each time-step. rotation is restricted for clusters diffusing in the membrane diffusion landscape.

boundary interaction
simulations take place in a simulation volume of user defined size delimited by the simulation volume boundaries. additionally, specific membrane domains can be described which are separated from the canonical membrane environment by user-defined boundaries. as a consequence, types of behaviour need to be specified to resolve interaction of diffusing clusters with the available boundaries. there are four types of boundary interactions that can be simulated: open, absorbing, periodic, and reflective. boundary interactions are invoked whenever a cluster crosses the boundary. a cluster is said to have crossed a boundary if it is found on a different side of the boundary at the end of the movement step of the iteration cycle, compared to the start of the movement step. open boundary interactions do not obstruct cluster diffusion at all. a cluster is freely allowed to cross an open boundary. clusters crossing an absorbing boundary are removed from the simulation. periodic boundary interaction allows the translation of the cluster across the domain volume to emerge at the opposite side. a reflective boundary interaction reflects the molecule according to the law of reflection. any described boundary can have a number of boundary conditions associated with it. a boundary condition is defined as a boundary interaction type and an associated probability. the sum of all the probabilities of a domains boundary conditions must equal to one. the probabilities determine what type of interaction occurs when a cluster comes in contact with a boundary. additionally, a boundary can posses a different set of boundary conditions, depending on the directionality of the crossing. for example, a boundary between two domains a and b may be open to molecules crossing from a into b, but reflective for molecules attempting to cross from b into a.

reactions
meredys is capable of simulating zeroth-order reactions, uni-molecular reactions and bi-molecular reactions. reactions involving three reacting partners simultaneously, tertiary reactions, cannot be simulated.

zeroth-order reactions
frequently it is necessary to include the creation of molecules in a model without introducing the details of the creation process. in such a case, zeroth-order reactions can be used to simulate, for example, a continuous influx of chemicals or a creation process. the rate equation is   

the k of each zeroth-order reaction is used to calculate the mean number of entities  created at each time-step.   

where k is the reaction rate in units of molar per second, ms- <dig>  δt is the time-step in seconds, v is the volume of the landscape the entities are created in and navogadro is avogadro's number. at program initialisation, a poisson distribution with mean λ is used to determine the time elapsed until creation of one entity. this is repeated until the total elapsed time is equal to the time-step of one iteration, δt. all the resulting new molecules are stored in a table and indexed by the iteration at which they are created. this process is repeated until the iteration step reached equals the total simulation run time. since this process occurs at program initialisation, during the simulation run time only the relevant table entry needs to be queried at specific iteration steps, thus avoiding the need for computationally expensive random number generation during run time. the comparison of meredys' zeroth order reactions and their analytic equivalent is provided in additional file  <dig> 

uni-molecular reactions
there are many molecular processes that can be effectively modeled using uni-molecular reactions, such as conversions, unbinding or death processes. they comprise a wide range of important reactions in biochemistry. in meredys, uni-molecular reactions can occur either at reaction sites, or to entire entities. according to mass action law the general reaction scheme for uni-molecular reactions can be represented mathematically by,   

in order to minimise the number of random number generations required for a simulation run, meredys implements a reaction scheduler. the software draws the time of reaction from an exponential distribution.   

k is the first order reaction rate constant, in units of s- <dig>  and t is the elapsed time in seconds. this time is added to the elapsed simulation time to calculate the iteration step at which the reaction will occur. the reaction with associated time of occurrence is termed a reaction event. the reaction event is stored in a table indexed by the iteration step at which the event occurs. additionally, reactions occurring during an iteration step are executed according to the order within that iteration step. whenever an entity, reaction site or bond is created, during program initialisation or as result of a reaction, for example, meredys determines the uni-molecular reactions the reactant can undergo and creates a reaction event for each reaction and adds it to the scheduler. the event is executed at its determined iteration step. if the reactant undergoes a state change or other reaction which affects a previously determined reaction event, then the affected reaction event is removed from the scheduler and a new reaction event determined if need be. the comparison of meredys' first order reactions and their analytic equivalent is provided in additional file  <dig> 

bi-molecular reactions
the simulated bi-molecular reactions take place on reaction sites. a reaction site software object is contained within the particle software object. a particle may contain more than one reaction site. the reaction sites are roughly analogous to biological binding sites or enzyme active sites. as active sites they determine the site of reactions for a particle and its parent entity. as binding sites, they determine the site of binding and geometry of the binding between two entities. the reaction site is described by a set of three points . the first point, the centre point, gives the centre of the reaction site. the first and second points together describe a vector, the normal vector, through the centre of the reaction site. the first and the third points together describe a vector perpendicular to the normal vector, called the plane vector. the centre point is used as the centre of the sphere describing the reaction radius of the reaction surface for the purpose of bi-molecular reactions. the two vectors are used to determine the geometry of binding during binding reactions.

bi-molecular reactions occur when two molecules collide with enough energy and in the correct orientation to form a product. a general reaction scheme for a bi-molecular reaction is:   

meredys implements the bi-molecular reaction algorithm outlined in andrews and bray  <cit> . this algorithm is based on the smoluchowski model for reaction-diffusion systems  <cit> . within a physical system, a collision occurs when the reactant centres are separated by a distance equal to the sum of the molecular radii. not every collision in a physical system leads to a reaction, as not every collision overcomes the reactions activation barrier. in order to take account of this, the algorithm replaces the sum of the molecular radii by an effective binding radius, σ. andrews and bray  <cit>  determine the binding radius by deriving the simulated reaction rate constant in terms of the binding radius, equating this to the experimentally observed rate constant and then inverting the result to get σ. bi-molecular reactions occur when two reaction site centre points come within a distance determined by the reacting pairs binding radius following the molecular displacement step of the iteration cycle.

the accuracy of brownian dynamics based simulators of chemical reactions is depended on the chosen time step length of the iteration step  <cit> . in the case of the bi-molecular reaction algorithm used in meredys, the authors of smoldyn present a practical heuristic to allow the determination of an acceptable time step length  <cit> . in brief, simulations are run with a trial time step at first instance. the simulations are then repeated using a time step half as long as the initial time step. if no significant differences are found between the results obtained using the two different time steps, the longer time step is sufficient. otherwise the procedure is repeated.

many molecular biological species interact to form transient complexes, such as the protein-protein interactions that dominate cellular signalling networks. two procedures exist to simulate bi-molecular reactions resulting in bond formation between the two participating entities. although the modeller has the option of encoding binding reactions by using the aforementioned bi-molecular reaction scheme and treating the bonded product as a new entity altogether, meredys does allow for binding reactions where the identities of the participating entities are retained. this is particularly useful for the modelling of transient, reversible interactions, such as ligand binding to a receptor, as it eases the tracking of individual molecular species. the reaction scheme for binding reactions is that of the general bi-molecular reaction scheme given above. however, the reaction outcome differs, as a new cluster needs to be formed from the existing reacting partners. the structural rearrangements required for binding are encoded in the set of three points describing the reaction surface . first, the centre points of the partner reaction sites are superimposed. then the reaction partners are rotated to make their normal vectors anti-parallel. finally, the reactants are rotated perpendicular to the normal vector to superimpose their plane vectors. the hydro-dynamic radii and diffusion landscapes of the reaction partners determine the relative contribution of each partner to the rotational movements required to bring them into the right orientation. reactants with a overall hydro-dynamic radius rotate less, and both the membrane diffusion landscape as well as the static diffusion landscape restrict the amount of rotation a reactant can undergo. the comparison of meredys' bi-molecular reactions and the equivalent simulation in an ode solver is provided in additional file  <dig> 

molecular states
many biological molecules can assume different states. common examples include post-translational mod-ifications, ligand occupation or conformation states. these states often influence the molecules overall biophysical properties, including the reactions the molecule partakes in. at times, a modeller would like to keep track of a molecules different states but still maintain the identity of the original molecule; that is, avoid creating new entities every time a state change occurs. meredys supports this concept, by allowing user defined feature states for simulation entities. an entity's state can have a direct effect on the reaction probability of any reaction the entity is capable of undergoing. equally, any reaction the molecule undergoes can effect a state change. an entity's states are defined by describing a particular entity feature, such as channel gating, or phosphorylation site, and an enumeration of the possible states the feature can assume.

events
sometimes the spontaneous creation through the zero-order reaction mechanism is not sufficient for the addition of new entities. it is possible to load pre-defined entities directly into the simulation at a given time point. these non-movement and non-reaction occurrences are termed events and can be specified within the input xml file.

output
output is described in the neuroml output class. this class defines for which entity we want output, at what time points this output is created and what kind of output to produce. the options are position, orientation, feature state and entity count. output is printed whenever the iteration step number is evenly divisible by the number given in the timepoints attribute. output is only printed if an iteration step is executed. the format is text with each line showing one cluster - entities user ids as well as internal entity unique identifiers of entities belonging to the cluster are given. in addition the position, orientation or feature states are given, if specified as output by the user. simple text output allows the data to be further analysed by user created scripts.

RESULTS
we present a theoretical model to highlight some of the features of meredys, such as the user defined states, the reaction of species diffusing in two and three dimensions, and complex formation. the model includes entities diffusing in the two dimensional environment of the membrane capable of binding to entities diffusing in the volume above the membrane. all the entities in the simulation belong to one of three types, described by specific entity templates. entities of type r diffuse in the membrane and contain one binding site capable of binding to a site on entities of type b. entities of type a diffuse in the volume above the membrane and contain one binding site capable of binding to a site on entities of type b, separate from the binding site mentioned above. entities of type b diffuse in the volume above the membrane and contain three binding sites, two capable of binding with entities of type r and one capable of binding with entities of type a. the latter binding site only becomes available once the former two binding sites are occupied. all reaction rate constants where arbitrarily set to k =  <dig> * 106m-1s- <dig>  the sequence of binding leading for formation of molecular complex is as follows:   

the model is provided as additional file  <dig> and a movie of its simulation is provided in additional file  <dig>  the binding state of type b is encoded as a user defined feature state, and this feature state affects reactions the entity can undergo. note that b needs to be double bound before it can start binding molecules a. figure  <dig> shows the binding states of entities of type b as a function of time. neuroml files describing the model can be found in the additional files.

CONCLUSIONS
meredys is a stochastic, particle-based software designed to simulate reaction-diffusion systems at the meso-scopic level. molecular composition and states are maintained for each simulated molecular species within the simulation. the random walk algorithm effectively models the molecular diffusion of molecular species in two- and three-dimensions. the random walk is influenced by the diffusion landscape the moving cluster operates in. the membrane diffusion landscape can further be subdivided into domains such as the extra-synaptic or synaptic membrane. meredys offers algorithms for simulating uni-molecular reactions, such as receptor-channel state changes, and bi-molecular reactions, such as ligand binding reactions, as well as zeroth-order reactions to model creation processes without the need to fully specify all of the entities involved in the creation process. in the case of binding reactions between two molecular species, meredys allows for the control of the geometry of the interaction. additionally, interacting partners maintain their identities throughout the interaction. networks with over  <dig> components have been simulated using meredys . run time is highly dependent on the compute power, number of molecules involved in the simulation and number of interactions the molecules can undergo.

there are a number of simulation engines available to the biochemical modeller  <cit> . often, the simulators are classified into groups based on the amount of spatial detail which they are able to simulate  <cit> . depending on the system of interest, particle-based simulators may prove to be the better choice over other simulation engines. particle-based stochastic simulators like meredys are capable of capturing a host of features which population based simulations engines are not capable of capturing due to the lack of spatial information presented in the model  <cit> . examples include analyses of glutamate release location relative to post-synaptic receptor location during neurotransmitter release in the glutamate synapse  <cit> , or investigating the effect of signal molecule locations on signalling during bacterial chemotaxis  <cit> . a feature which sets meredys apart from these other particle-based simulation software such as mcell  <cit>  and smoldyn  <cit>  is meredys' multi-component, multi-state feature clusters. many biological entities form large, interacting multi-component clusters  <cit> . meredys' multi-component cluster formation allows for the identification and tracking of specific members of the clusters during the whole of the simulation.

availability and requirements
project name meredys

project home http://meredys.sourceforge.net/

operating system platform independent

programming language java

other requirements java 3d

licence gnu gpl

the software sources are provided in additional file  <dig> 

authors' contributions
dpt developed the application and drafted the manuscript. nln conceived the idea of the application. all authors contributed to the final manuscript.

supplementary material
additional file 1
example model neuroml input files. neuroml input files describing the example model used in the text.

click here for file

 additional file 2
movie of meredys running. short movie of a simulation run using meredys.

click here for file

 additional file 3
sourcecode of meredys. archive containing the source of the software, a java library, the software to generate a trace from simulation results, the manual, two full models, and a set of tutorials.

click here for file

 additional file 4
comparison of meredys and continuous approaches. comparison of simulations of zero order, uni- and bimolecular reactions run in meredys or obtained using ordinary differential equations.

click here for file

 acknowledgements
we thank dan mossop and fred howell for providing the abstract protein simulator, the software from which meredys was derived. we also thank simone zorzan for helpful discussions of the meredys source code, sarah birch for careful reading of the manuscript and anton enright for aid with the creation of the images. both dpt and nl were supported by the european molecular biology laboratory.
