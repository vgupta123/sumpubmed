BACKGROUND
the human genome contains about  <dig> billion base pairs, and there are only about  <dig> % differences between two individuals’ genome  <cit> . these genetic variants largely contribute to human multiple phenotypes  <cit> . genome-wide association studies  have identified many genetic loci that are associated with diseases. understanding how these variants exert their effects still remains to be a big challenge  <cit> . it has been observed that many of the effects are through variations in the expression of genes and pathways, especially rna splicing  <cit> .

alternative splicing is an important mechanism in the regulation of gene expression. high-throughput rna-sequencing  data have shown that most human genes undergo alternative splicing  <cit> , and it has been reported that many alternative splicing events are associated with many complex diseases . expression quantitative trait loci  analysis is an effective approach for studying the association between genetic variants and gene expression . this strategy has been extended to the analysis of association of alternative splicing genes with genetic variants . this is called splicing quantitative trait loci  analysis, including exon-level sqtl and isoform-level sqtl. for exon-level sqtl study, researchers take exon expression, exon inclusion level or junction expression as the quantitative phenotype to perform sqtl analysis against genetic variants . exons in one gene are not independent and they compose multiple isoforms through alternative splicing. in some cases, changes in the splicing pattern of a gene cannot be observed by changes in inclusion levels of individual exons  <cit> . the expression of each individual isoform can also be used as the quantitative phenotype for sqtl study  <cit> . coulombe-huntington et al.  <cit> , lappalainen et al.  <cit>  and battle et al.  <cit>  used the isoform ratio as the quantitative trait for sqtl analysis, which controls the effects of overall gene expression and tests the relative abundances of isoforms. but they took each isoform ratio as a phenotype and did not consider the correlations between isoforms of the same gene. in many situations, besides the expression of each isoform, compositions and relative proportions of alternative isoforms of the same gene play important roles. monlong et al.  <cit>  proposed to use the splicing ratios of all isoforms of the same gene as a composite phenotype to take into consideration such correlations. in this way, the studied phenotype is not only the relative abundance of each isoform but also the correlated structure of the alternative splicing gene. we call this as composite splicing qtl analysis. they developed an r package sqtlseeker to implement this strategy, which describes alternative splicing events by a vector of splicing ratios  <cit> . they compared their method with other univariate sqtl methods that are based on exons or isoforms, and showed that sqtlseeker is more capable of detecting associations that cannot be found by univariate exon-based method  <cit> .

sqtlseeker is based on tests on every gene-variant pair. considering the tens of thousands genes and millions of genetic variants on the whole genome, the computational speed of sqtlseeker prohibits it to be applied for analyzing all the genes and variants at the whole-genome scale. in their original work, they only applied it for analyzing variants located within 5 kb of each gene  <cit> . this largely limits the scope of questions that can be addressed with the method. alternative splicing is regulated by both cis-elements and trans-factors  <cit> . more computationally efficient methods are in critical need for building the full picture of both cis- and trans-regulations of alternative splicing.

in this paper, we developed a method named ulfasqtl for ultra-fast composite sqtl analysis. it transforms vectors of splicing ratios to a spherical coordinate system and uses a matrix-based computation to test multiple genes and variants at the same time. this can dramatically boost the computational speed. we applied the proposed method and compared it with sqtlseeker on data from the geuvadis project  <cit>  to evaluate its performance and test its feasibility for genome-scale computation. results show that ulfasqtl is several orders faster and can be readily used for genome-wide studies for associations between the alternative splicing structures of all genes and all variants in the genome.

methods
definition of splicing-qtl
suppose a gene has n isoforms, and their expressions are x
 <dig>  x
 <dig>  …, x
n. the splicing ratios of isoforms are their proportions in the total expression of the gene: pi=xi/∑1nxi,i= <dig> ,…,n. 


let a variant’s genotype be g, and g =  <dig>   <dig> or  <dig>  our goal is to detect associations between the genotype of a variant  and the splicing pattern of a gene. for splicing pattern of a gene, we focus on the splicing ratios p
i, i =  <dig>   <dig>  …, n of the isoforms but not the gene’s total expression ∑1n
x
i.

the splicing pattern of a gene is described by the vector . figure  <dig> shows a simple example of a gene with  <dig> isoforms. the patterns of the splicing ratios are very different among samples of different genotypes of the variant, which indicates that the variant is a splicing-qtl or sqtl of the gene.fig.  <dig> an example case of splicing-qtl. the gene has  <dig> isoforms. the splicing ratios of the three isoforms of the same sample are shown as points of different colors linked by a dashed line. samples with the same genotype are shown together. we can see that the distribution patterns of splicing ratios are different between different genotypes, which indicates that this variant is associated with the alternative splicing pattern of this gene, and therefore it is a sqtl of the gene




the sqtlseeker method
the sqtlseeker method by monlong et al.  <cit>  uses a distance-based approach to detect composite sqtls for each gene-variant pair. for one gene, each sample’s phenotype is the vector of the splicing ratios of all its isoforms. so each sample can be treated as a point in this vector space. all samples of a dataset are divided into the three or two groups according to their genotypes at a variant locus. sqtlseeker calculates the variability of splicing ratios of a gene between and within groups using the hellinger distance. for a gene containing n isoforms, the hellinger distance between sample a and b is defined as dhab=∑i=1npia−pib <dig>  


where p
ia is the splicing ratio of isoform i in sample a, and p
ib is the splicing ratio of isoform i in sample b. the variability is defined as the sum of squared distances  between the samples and their centroid, ss=∑j=1ndh2jc, 


where c is the centroid, and n is the number of samples in this group. the within-group variability ss
w is defined as ssw=ss=∑j=1ndh2jc. 


the between-group variability ss
b can be obtained by ssb=sst−ssw, 


where ss
t is the total variability ss
t = ∑i = 1l
d
h <dig>  l is the number of variant’s genotype groups, c
i is the centroid of each genotype group, and c is the overall centroid of all samples.

the anderson test  <cit>  is used to compute a pseudo f-ratio score to measure the relative differences between within-group and between-group distances, f=ssb/l−1/ssw/∑i=1lni−l, 


where l is the number of groups and n
i is the number of samples in group i. they used a direct method to calculate the pseudo f-ratio score by considering matrix of distances between every pair of samples instead of using centroids in the definition  <cit> . the null distribution of the f-score is approximated via simulation to get the fdr  of the tests.

different genes contain different numbers of isoforms so their splicing ratio vectors are of different dimensions. also different genetic variants divide samples with different grouping. therefore, sqtlseekerr needs to test each gene against each variant individually. it is very time-consuming and infeasible for analyses at whole-genome scales.

the ulfasqtl method
the goal of our ulfasqtl method is to detect composite sqtls for all gene-variant pairs on the whole genome efficiently. the core strategy is to compute the statistics of associations for a large number of gene-variant pairs concurrently within a single run of the test. a matrix-based test for multiple independent phenotype-variant pairs is adopted to achieve the high computational efficiency, and we introduced a coordination transform on the splicing ratio vector to make the tests in the matrix independent. the test results on the ratios belonging to the same gene are then combined to produce the final statistics on the gene. we describe the details below.

suppose there are n isoforms in a gene, and their splicing ratios are p
 <dig>  p
 <dig>  … p
n, respectively. there is the constraint that ∑i = 1n
p
i =  <dig>  and so the degrees of freedom of the vector  is n −  <dig>  thus, we cannot directly perform association analysis for all isoforms in a gene by adding the statistics up as the test for the gene because of their dependence. we need to transform the n splicing ratios to a set of n- <dig> independent variables. we propose to do this transformation using the idea of “n-sphere”. firstly, let qi=pi,i= <dig> ,…,n, 


then one sample can be represented by the vector q1q2…qn=p1p2…pn in a n-dimensional cartesian coordinate system. we convert it to coordinates in a spherical coordinate system , where ρ is the length of the vector, defined as ρ=q12+q22+…+qn <dig>  and ϕ
 <dig>  ϕ
 <dig>  …, ϕ
n −  <dig> are the angles between the vector and n- <dig> of the cartesian axes, defined as ϕ1=arccosq1q12+q22+…+qn <dig> ϕ2=arccosq2q22+q32+…+qn <dig> …,ϕn−1=arccosqn−1qn−12+qn <dig>  


in this way, the original n splicing ratios are converted to n- <dig> independent variables ϕ
 <dig>  ϕ
 <dig>  …, ϕ
n −  <dig>  we call them converted splicing components for convenience. the order of the q
 <dig>  q
 <dig>  …, q
n in the above transformation can be arbitrary. we order them from the largest to the smallest mean values across the samples in our implementation.

figure  <dig> illustrates how the spherical coordinate system works with an example gene. in the example, the gene contains three isoforms. the original constraint ∑i = 13
p
i =  <dig> on the splicing ratios becomesfig.  <dig> an illustrative example of spherical coordinate system application. the example gene contains  <dig> isoforms, and their splicing ratios in a sample are p
 <dig>  p
 <dig>  p
 <dig> with the constraint ∑i = 13
p
i =  <dig>  we let qi=pi,i= <dig> , <dig> and present this sample as a point  in the 3-dimensional rectangular coordinate system. we then apply spherical coordinate system in which this sample can also be regarded as a point  in a spherical coordinate system. because of the constraint that ∑i = 13
p
i =  <dig>  the spherical coordinates of this sample is , in which ϕ <dig> and ϕ <dig> are independent from each other


 q12+q22+q32= <dig> 


on the q
i’s. in the spherical coordinate system, we always have ρ =  <dig> regardless of the values of p
 <dig>  p
 <dig>  and p
 <dig>  the two angles in the spherical coordinate system, ϕ
 <dig> and ϕ
 <dig>  on the other hand, are independent from each other.

in  <cit> , shabalin proposed a matrix-based method matrix eqtl for fast eqtl computation. it can test all gene-variant pairs together by choosing appropriate test statistics and applying matrix operations to calculate their test statistics values in parallel. it implements both linear regression model and anova model for eqtl analysis. matrix eqtl can detect associations between two variables, but our goal is to detect associations between vectors and variables. after spherical coordinate transformation, we converted a vector into a set of mutually independent variables, and then adopted this matrix-based strategy in ulfasqtl to implement massive tests on the converted splicing components ϕ
i ’ s in a matrix. suppose we want to do tests on m genes and k variants of l samples in a single run, the expression of these genes can be represented by a matrix g
m
*
l and the genotypes of the variants can be represented by a matrix v
k*
l. now we do the tests on the converted splicing components instead of the expression values. so we build the matrix Φ of all converted splicing components of the m genes. the dimension of this matrix is t*l, where t is the total number of independent splicing components of the m genes, which equals to the total number of isoforms of these genes minus the number of genes. the columns  of the matrix Φt*
l and matrix v
k*
l are matched with each other.

here is the detailed method of matrix eqtl for linear regression model, and the method of matrix eqtl for anova model is similar to linear regression model  <cit> . we assumed that the association between splicing component ϕ and variant v is linear. ϕ=α+βv+ϵ,whereϵ∼i.i.d.n0σ <dig> 


for linear regression model, matrix eqtl chose the absolute value of sample correlation |r| = |cor| as the test statistic which can has equal power and can be computed faster than other test statistics. then matrix eqtl performed standardization preprocessing procedures which do not change the correlation. ∑ϕi= <dig> ∑ϕi2= <dig> ∑vi= <dig> ∑vi2= <dig> 


so matrix eqtl computed the test statistics by the inner product 〈g, v〉 between vectors ϕ and v as follows. rgv=corgv=∑gi−g¯vi−v¯∑gi−g¯2vi−v¯2=∑givi=gv 


matrix eqtl can greatly simplify the computation of test statistics by the multiplication of the two preprocessed matrices Φt ∗ l ⋅ v
k ∗ lt  <cit> . in this way, the computational load can be reduced dramatically. the key assumption for this fast computation is the rows  in the matrix are independent with each other, which is guaranteed by the spherical coordinate transformation.

matrix eqtl can conduct either linear regression or anova based on the obtained correlations, and report the t-test statistics or f-test statistics of all associations between each converted splicing component and each variant. after getting all test statistics for each component-variant pair, we combine results from all components of the same gene-variant pair to get the test statistic for the gene-variant pair. we convert t-test statistics or f-test statistics of the component-variant pairs to z values that follow the standard normal distribution. finally, we get the test statistic s for each gene-variant pair by s=∑i=1n−1zi <dig>  


it follows a chi-square distribution with degrees of freedom n- <dig>  i.e., s ~ χ
n −  <dig>  and the p-value for each gene-variant pair can be obtained accordingly. we can then convert the p-values to false discovery rates  using the q-value method  <cit> . we developed a software package ulfasqtl to implement the above method, which calls for the matrixeqtl package  <cit>  in the matrix calculation. figure  <dig> shows the basic flowchart of the whole method  and a detailed illustrative example .fig.  <dig> the diagram of ulfasqtl. the left panel is basic flowchart and the right panel shows an illustrative example of core steps. there are in seven steps in the flowchart and the  <dig> steps shown in purple are core steps of ulfasqtl. we have two matrices after data preprocessing. one for the genotype data  and one for the isoform expression data . then isoform expression matrix is converted to splicing components matrix  by the spherical coordinate system. we then send genotype data and splicing components matrix into matrixeqtl  to get the f statistics  for each component-variant pair. finally, we apply statistical transformations and get corresponding z statistics according to f statistics, and merge z statistics into s statistics  for each gene-variant pair




when applying the method on very large datasets like genome-wide analyses, the dataset can be too large to be fit into computer memory. in such cases, we split dataset into smaller subsets and calculate them in multiple runs. for example, in the experiments reported below, we take all genes together but split the variants into smaller files, each containing  <dig> variants.

the ulfasqtl package was developed using r and c++. it includes c++ codes for data preprocessing and the spherical coordinate transformation, and r codes for matrix eqtl analysis and the calculation of p-values and fdrs. the package can be downloaded at http://bioinfo.au.tsinghua.edu.cn/software/ulfasqtl/.

the computational complexity
the computing time of ulfasqtl is consumed mostly by two major steps. one is the computation with matrixeqtl for calculating the correlation matrix of components and variants. the dimension of component matrix is t*l, the dimension of variant matrix is k*l. so the time complexity of this step is o, where k is the total number of variants, t is the total number of converted splicing components and l is the total number of samples. the second major step is that after getting the matrixeqtl output, we need to sort the component-variant pairs by both splicing components and variants to make sure pairs from the same gene and the same variant stay together. we need to sort the pairs twice for that purpose. we use the mergesort method as it is one of the fastest stable sorting method. the time complexity of mergesort is o). therefore, the total time complexity of ulfasqtl is o)*t*k).

for large datasets that need to be split into multiple smaller datasets, the computation on the multiple datasets can be assigned to multiple kernels or computers, which provides an easy and efficient way of doing large-scale sqtl analysis in parallel.

for each gene-variant pair, sqtlseeker calculates the within-group variability and the between-group variability to get the anderson test statistic for the pair. the complexity for this step is o. the test method used by sqtlseeker is sensitive to the homogeneity of the variabilities or dispersions of the compared groups. the test power may decrease when dispersions of the groups are very different. so sqtlseeker needs an extra step to filter such variants to avoid potential false sqtls. the method for this filtering is similar to anova, but the distance measurement is different from euclidan distance. they applied principle component analysis  to the data and calculated the euclidan distances between group members and the group centroid on the principal components. the time complexity of computing the eigenvalue in pca of a l*l dimensional matrix is o, and computing the within-group variability is o. for all phenotype-variant pairs of m genes and k variants, the total time complexity of the above steps is o. after getting the f score of a candidate pair and this filtering step, sqtlseeker performs an approximation of permutations for each gene to calculate the significance of the f score. the computational complexity of this step is o. so the overall complexity of sqtlseeker is at the level of o.

RESULTS
data
we applied ulfasqtl on the data of lymphoblastoid cell lines of  <dig> individuals published in  <cit>  to study its performance. the transcripts expression data are from the geuvadis project  <cit>  and the genotype data are from  <dig> genomes project phase i dataset  <dig>  <cit> . the dataset includes individuals from european population  or african population . for isoform expression data, at first we added a small number to the expression data to avoid the occurrence of 0’s in the denominator. next we computed the splicing ratios of each isoform of all genes, and only considered active isoforms with splicing ratios larger than a given threshold. genes with less than two active isoforms after this step were filtered out. then we calculated the splicing variability for each gene and removed genes whose splicing variability are less than  <dig> . for each gene, we used samples whose gene expression is over  <dig>  rpkm. for genotype data, we kept variants that have at least  <dig> genotype groups in the samples and each group has at least  <dig> samples. groups with less than  <dig> samples are set to na to make sure that they are not taken into consideration in the test. we picked up samples which have both expression data and genotype data, and made the samples’ order identical in two data files.

we conducted  <dig> experiments, experiments i, ii and iii. experiments i and ii were on small-scale datasets to study the performance of ulfasqtl and to compare it with sqtlseeker. experiments iii was on a genome-scale dataset to test the feasibility of ulfasqtl on big data. the experiments were done on a desktop computer with cpu of intel core i7-4790 k and 16gb ddr <dig> ram, running  <dig> bit ubuntu and  <dig> bit r  <dig> . <dig> 

the computational efficiency
experiments i and ii were on a small dataset on which both ulfasqtl and sqtlseeker can work. in experiment i, we randomly picked  <dig> variants and  <dig> genes containing a total of  <dig> isoforms in chr. <dig>  we performed sqtl analysis using both methods to compare the computational efficiency and results of the two methods. it took  <dig>  s  for sqtlseeker to complete the computation, while the ulfasqtl only used  <dig>  s to complete the computation. ulfasqtl works about  <dig> times faster than sqtlseeker.

in experiment ii, we choose  <dig> genes and  <dig>  variants which are all located at 1– <dig> , <dig> in chr. <dig>  after preprocessing on the expression data and variant data,  <dig> genes and  <dig>  variants were kept, which gave  <dig> , <dig> candidate gene-variant pairs. ulfasqtl accomplished all the computation in 901 s . we applied sqtlseeker on these  <dig> genes with only the variants that are located within 5 kb of each gene as in the original work. this gave a total of  <dig> candidate gene-variant pairs. sqtlseekr used 4492 s  to complete these computations.

experiment iii was on all genes and genetic variants on chr. <dig> to test the feasibility of ulfasqtl for genome-scale analyses. there are in total  <dig> genes and  <dig> , <dig> variants after screening. the total number of gene-variant pairs which need to be tested are  <dig> x <dig>  on the same desktop computer as in the first experiment, ulfasqtl can give the result of a split subset of  <dig> genes and  <dig> variants in about 45 s. the analysis on the whole task took  <dig>  s .

applying sqtlseeker on the data of experiment iii is impractical due to the heavy computing cost. in the original sqtlseeker paper  <cit> , the authors reported that they ran sqtlseeker separately in each sub-population on this dataset, and each sub-population contains about  <dig>  genes and  <dig> variants per gene on average. the analysis of ~ <dig> , <dig> gene-variant pairs took about 4 h using  <dig> cores . based on these reports, we can estimate that it would take about 1169 days or  <dig>  years on a similar cluster if sqtlseeker were to be used to analyze the data in experiment iii.

comparison of p-values
we compared the results of ulfasqtl and sqtlseeker in experiments i and ii to obtain better understanding on the similarities and differences between the tests used by the two methods. in experiment i, after data preprocessing there were  <dig> candidate variants and  <dig> candidate genes that were analyzed by both ulfasqtl and sqtlseeker. they composed  <dig>  candidate associations to be tested by ulfasqtl and sqtlseeker. sqtlseeker adopted some further filtering on the genes and only tested  <dig>  of the candidate associations. we used these  <dig>  candidate associations to study the relationship of p-values reported by the two methods. figure  <dig> shows the scatter plots of the p-values of the two methods on the same points  in the range of p <  <dig> , p <  <dig>  and p <  <dig> . the spearman correlations of the two p-values are  <dig> ,  <dig>  and  <dig> , respectively, for candidate associations with p-values less than  <dig> ,  <dig>  and  <dig> . we can observe that ulfasqtl tends to be more conservative and tends to produce slightly larger p-values for most of the data. note that the data in this experiment were a randomly selected subset of genes and snps on chr. <dig>  we can expect that most of the candidates would not be significant. the more conservative p-value obtained with ulfasqtl presents an advantage over existing method not only on the higher computational efficiency, but also on the possible lower false discoveries.fig.  <dig> 
p-values of the two methods on the same points  in the range of p <  <dig> , p <  <dig>  and p <  <dig>  in experiment i. the horizontal axes are p-values of associations detected by ulfasqtl and the vertical axes are p-values of associations detected by sqtlseeker




in experiment ii,  <dig> candidate genes and  <dig>  candidate variants were analyzed by ulfasqtl, and  <dig> candidate genes and variants located within 5 kb from them were analyzed by sqtlseeker. after preprocessing, we got a total of  <dig> candidate associations that have p-values reported by both methods. figure  <dig> shows the scatter plots of the p-values of the two methods on the same points in the range of p <  <dig> , p <  <dig>  and p <  <dig> . the spearman correlations of the two p-values are  <dig> ,  <dig>  and  <dig> , respectively, for candidate associations with p-values less than  <dig> ,  <dig>  and  <dig> . we can see that the general trends of relations of the p-values are the same in experiments i and ii, while the correlation between the results of the two methods is higher in experiment ii. experiment i was on randomly selected genes and variants so it can be expected that most of the gene-variants pairs are not significantly associated. on the other hand, candidate variants compared in fig.  <dig> in experiment ii were all within 5 kb of the candidate genes, which are more likely to have significant sqtls. the higher correlation between p-values of the two methods implies that the two methods agrees better with each other on true association signals.fig.  <dig> 
p-values of the two methods on the same points  in the range of p <  <dig> , p <  <dig>  and p <  <dig>  in experiment ii. the horizontal axes are p-values of associations detected by ulfasqtl and the vertical axes are p-values of associations detected by sqtlseeker




discussion
there are several directions that need further investigation. we used anova to test the hypothesis in the method based on two underlying assumptions. the first one is the distribution of data should be normal distribution or close to normal distribution. we can see that the distribution of converted splicing components may not always meet the assumption. the other one is anova assumes homogeneity among groups, which may be violated when the sample size of one group is small. such situations can cause false positives. the preprocessing to add a small value to the denominator also may cause false results for some special cases when all isoforms are not expressed in some samples. therefore, after applying ulfasqtl on genome-wide candidates, users may use slower single-gene based methods only on the reported results to further validate the significance if necessary, or to check homogeneity  of different genotype groups.

composite splicing qtl involves the collaborative regulation of multiple isoforms. comparing to the traditional univariate isoform- or exon-based splicing qtl analysis, golden-standard validation data is less available. monlong et al.  <cit>  illustrated a few examples of composite splicing qtls, but due to the small scale of their work, the examples cannot be taken as standard. actually, when applied on a larger range of candidate variations with sqtlseeker on fewer genes, we observed that some examples became no longer significant after multiple test correction. this may be due to the nature that splicing composite variation is associated by the multiple genetic factors. the ability to conduct genome-wide study of composite sqtl by ulfasqtl can help to better investigate both cis- and trans- factors that can be associated with splicing composite variation, and it will be of great interest if methods can be developed for finding associations of composite splicing phenotypes with multiple genomic variation loci.

CONCLUSIONS
we developed a new method ulfasqtl for ultra-fast splicing qtls analysis of splicing patterns that are associated with genetic variants. this is the first time that coordination conversion is used for decomposing composite splicing pattern to a set of independent components. this conversion allows for the simultaneous computation on many genes in a matrix form. experiments on small- and large-scale data show that it is several thousand times faster than the existing method for splicing qtl, and is efficient for splicing qtl analysis at the whole-genome scale.

declaration
this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2016: proceedings of the 27th international conference on genome informatics: genomics. the full contents of the supplement are available online at http://bmcgenomics.biomedcentral.com/articles/supplements/volume-18-supplement- <dig> 

funding
this work is partially supported by the national basic research program of china  and nsfc grant  <dig> to xz, and the national institute of general medical sciences  to jl. publication was funded by the national basic research program of china .

availability of data and materials
testing data and r implementations are available for free at http://bioinfo.au.tsinghua.edu.cn/software/ulfasqtl/.

authors’ contributions
qy and xz initiated the project. qy and jl developed the method. yh wrote the codes and analyzed the algorithmatic complexity. qy and yh implemented the experiments. qy and xz wrote the manuscript with inputs from all authors. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
