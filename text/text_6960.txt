BACKGROUND
with the development of sequencing technologies emerged the need to elucidate the relationship between sequences from various organisms. the reconstruction of ancestral sequences, which aims to reveal the chain of events that led to the diversity of sequences observed today, became naturally one of the core challenges in this field of research. since the first attempts to rigorously solve this problem  <cit> , the methods and quality of the data have considerably improved, to the point where the reconstruction of ancient genomes is now feasible .

for a long time, most of the attention has been given to the reconstruction of ancient protein and dna sequences, while rna molecules remained relatively overlooked. nonetheless, in the last  <dig> years, the discovery of the breadth of catalytic and regulatory functions carried by rna molecules revived our interest for the rna world hypothesis  <cit> , and resulted in increasing efforts toward a better understanding of the intricate nature of mutational patterns in rnas .

the reconstruction of non-coding rna  sequences is particularly challenging. indeed, ncrna functions are typically carried out by specific molecular structures, and consequently sequences are generally less conserved than structures  <cit> . this implies that dedicated frameworks must be developed to capture this structural information.

rna folding is hierarchical. secondary structures form rapidly and act as a scaffold for the slower formation of tertiary structures  <cit> . it follows that the stability of secondary structures provides us a relatively accurate signature of the molecular function  <cit> , and thus can be used to guide the reconstruction of ancestral ncrna sequences.

to date, the most promising approach to infer ncrna ancestors has been proposed in  <dig> by d. bradley and i. holmes, who introduced an algorithm to calculate ancestral rna secondary structures from an alignment  <cit> , and use these structures to infer ancestral sequences using a maximum-likelihood approach on stochastic grammars  <cit> . still, the time complexity of inferring ancestral structures can be prohibitive, and the specificity of the functional structure may not accommodate sufficiently large variations of this  structure to take advantage of this model.

covariation models are powerful frameworks to model families of structured rna sequences , allowing us to capture dependencies between distant sites. nevertheless, we argue that the reconstruction of ancestral rna sequences of a single ncrna family with a single secondary structure using a covariation model can be hazardous. indeed, current sequences are most likely uniformly distributed on the entire neutral network of the functional structure  <cit>  , and a strategy aiming to accommodate constraints within a single family will have a tendency to produce ancestors near the core of this network. this bias may result in ancestral sequences potentially far from the first ancestor who acquired the function . in other words, this first ancestor is likely to be a worse fit to the functional structure than sequences at the core of the neutral network. by contrast, in this paper we adopt a radically different approach. we propose here to solve this problem simultaneously for two ncrna families that share a common ancestor . this strategy enables us to make a better estimation of the location of the duplication event at the origin of the two families in the sequence landscape, hence to make a more accurate inference of the ancestors of each family.
fig.  <dig> our approach. left: the red and blue areas represent regions of the sequence landscape of sequences with “good” affinity  to the target structures s  and s′ . here, α and α
′ are paralogous sequences, as well as β and β
′, γ and γ
′ and δ and δ
′. using classical reconstruction approaches, a would be the inferred ancestor of the orthologous sequences α, β, γ and δ, and a′ would be the inferred ancestor of the orthologous sequences α
′, β
′, γ
′ and δ
′. shaded trees represent the classical ancestral reconstructions performed separately, while the main tree rooted at aa′ represents the simultaneous ancestral reconstruction approach introduced in this contribution. the rationale of this work is that ancestors inferred from a single family and structure may have a tendency to be located in the core of the affinity regions, and might end up with ancestral sequences that would be hard to reconcile. by contrast, a simultaneous reconstruction of orthologous families ensures the coherency of the process and a better inference of the ancestors . right: an example of a species tree t  of four species a, b, Γ and Δ corresponding to the neutral networks shown on the left. a duplication event is shown at the root, creating the two ncrna families . each node of the species tree contains a copy of each ncrna family . at the leaves of the species tree t, we find the two extant ncrnas for which we have the sequence and the structure information. the linear gradient g is also shown: it represents the weight that is given to each structure when calculating the costs 




our approach is as follows. given two alignments of homologous ncrna families with consensus secondary structures and a phylogenetic tree, we design a maximum parsimony algorithm to simultaneously compute ancestral rna sequences for both families. we test this methodology on simulated data sets, and compare the results to classical  maximum parsimony approaches  <cit> , as well as to a customized maximum parsimony algorithm integrating the constraints of a single structure. finally, we apply our techniques to the reconstruction of ancestral sequences of two clans  from the rfam database  <cit> . clans are rna families that “share a common ancestor but are too divergent to be reasonably aligned”  <cit> , and thus illustrate well the signal we aim to capture.

our results on simulated data sets show that our strategy improves the accuracy of the reconstruction. on real data sets, our approach compares favorably to paml, a state-of-the-art maximum likelihood method that considers one structure at a time, and customized versions of the fitch and sankoff algorithms. in particular, our data shows that our solutions have a better agreement to the two target structures than the sequences inferred with previous methods. importantly, we achieve all these results with a significantly smaller set of candidate ancestors, which improves the interpretability of our data.

our algorithms have been implemented in a software named acharnement and are freely available at http://csb.cs.mcgill.ca/acharnement.

methods
input data
for the algorithms presented in this paper, we assume that we have two non-coding rna families that have been identified as a clan  <cit> . for each of the two ncrna families, we have the consensus 2d structure it folds into. we also have a set of species that each possess one copy of both ncrnas , and a species tree t that represents the speciation history of the organisms considered. we have the sequences of the two ncrnas for each of the studied species. figure  <dig> illustrates an example of a species tree.

problem statement
given the input data described in the previous subsection, the problem is to infer a most parsimonious set of ancestral sequences for each of the two ncrnas at each ancestral node of the input species tree. although this is a very classical problem in comparative genomics, our goal is to achieve that using a new evolutionary model that simultaneously considers sequence and 2d structure information, as described previously.

evolutionary model
our evolutionary model assumes that the two ncrna families are the result of an ancient duplication of an ancestral ncrna that was able to fold into two different structures. following the duplication, a subfunctionalization process took place: a series of neutral mutations occurred and gave rise to both extant families that can only fold into one specific structure . here, we assume that the ancestor of all studied species already possessed both ncrnas, but that the duplication event occurred not too long before that . only point mutations are allowed in our evolutionary model .

as mentioned earlier, ncrna sequences are more constrained by their structure than their sequence during evolution. since we have only access to the 2d structure of the two extant families , our model considers both of these structures during the inference process. near the root of the species tree, our model suggests that the sequences were still likely to be able to fold into both structures. however, as time passes, each ncrna starts to specialize into only one structure and loses affinity to the other. we represent that gradual transition into our model using a gradient g which varies from  <dig> %  to  <dig> % . this gradient is going to be used in our algorithm to calculate the “weight” that each of the structures must have in the global score of the inferred ancestral sequences.

we developed two novel algorithms, implemented in a package called acharnement and freely available at http://csb.cs.mcgill.ca/acharnement.

algorithms
we propose a new tool, acharnement, composed of two exact algorithms  based on the fitch  <cit>  and sankoff  <cit>  parsimony methods for the inference of ancestral sequences in a phylogeny . our algorithms use a three-step approach :  a bottom-up step in which minimal costs for every possible nucleotide at every site are calculated,  a middle step where we link the minimal cost matrices for both families at the root of the phylogeny, and  a top-down step that enumerates all the optimal sequences based on the calculated costs. our algorithms have the same running-time complexity than the sankoff algorithm , where n is the number of nodes and k is the sequence length); the only difference being a constant number of additional calculations that depends on the basepairs in the two structures.
fig.  <dig> graphical representation of the algorithm calculatescores-2structs. in this example, we have four species  and for each species, we have two extant rnas . the three major steps of the algorithm are presented. 1) the bottom-up step, where minimum scores are calculated at every node of the tree for each family. the scores take into account the substitutions, but also the basepair cost for the current family, and for the other family. 2) the middle step. here we link the minimum score matrices for families  <dig> and  <dig> by doing a simple fitch on the two matrices. this allows us to reconstruct the original ancestral sequences , taking into account both families. 3) the top-down step, where we start from the root and select the nucleotides of minimum cost at every position and construct the optimal sequences




for the substitutions, we use a cost matrix that has a different weight for transitions and transversions, since transversions normally occur less frequently than transitions . in addition to the substitution cost, we also consider a basepair cost, as shown in table  <dig>  the basepair cost is  <dig> for the g-c basepairs and  <dig>  for the a-u basepairs, that are not as strong as g-c basepairs. compared to an a-u basepair, a g-u pair costs twice as much, while all the others are penalized three times as much. we have also experimented with a more complex scoring system for the basepairs, one that reflects the geometry and isostericity of the basepairs. we performed tests using the isodiscrepancy index  table, as described in  <cit> . however, since this table represents a transition from the initial basepair to a mutated basepair, more calculations were required by our calculatescores-2structs algorithm. the results obtained with the idi table and our simpler table  were very similar , but at the cost of a 4-fold increase in computation time. consequently, we decided to use the simpler table.
each cell c
i,j represents the cost of mutating the nucleotide i into j


each cell c
i,j represents the cost of having the basepair i-j




the difference between the two algorithms we propose  resides in the first step , where we calculate the minimal costs for every possible nucleotide at every site. let f be one of the two families and f¯ be the other one. when calculating the costs for family f at the internal node a, algorithm calculatescores-1struct considers only the structure associated with family f. on the other hand, algorithm calculatescores-2structs considers both structures, but with a weight g that varies along the depth of the tree. for example, at the level of the leaves, for the family f, we consider  <dig> % of the structure f and  <dig> % of the structure f¯. at the level of the root, we consider  <dig> % of the structure of family f and  <dig> % of the structure of family f¯. we use a linear gradient to set the values of g on the different depths of the tree .

for space reasons, the full description of the algorithms was placed in the additional file  <dig>  in the following paragraphs, an overview of the algorithms will be presented.

bottom-up step
the first step of the algorithms consists of doing a post-order traversal of the species tree , to calculate the most parsimonious costs for each possible nucleotide at every site.

in the following paragraphs, we explain the differences between calculatescores-1struct and calculatescores-2structs in the calculation of those costs.

calculatescores-1struct:
let a
i be the nucleotide at position i in the parent  node, ai¯ be the nucleotide that is paired with a
i in the current structure, l
i  be the nucleotide at position i in the left  child, and li¯  be the nucleotide that is paired with l
i  in the left  child in the current structure.

in the case that the position i is part of a basepair in the current structure, the cost of having a specific dinucleotide ai,ai¯ is equal to: 
  <dig> minliandli¯∈{a,c,g,u}{c+s+c+s+bpc}+minriandri¯∈{a,c,g,u}{c+s+c+s+bpc} 


where c is the previously calculated optimal cost of having the nucleotide x, s is the cost of substituting nucleotide x for y and b
p
c is the cost of having the basepair . in the other case where i is not part of a basepair, we simply calculate the substitution costs.

calculatescores-2structs:
as mentioned earlier, calculatescores-2structs takes into account both structures, using a weight g. calculating the costs on the left and right branches is a little bit different depending on if we are dealing with a paired position or an unpaired one. the general idea is that for each position i, we are going to measure the cost of the basepair formed with position ī  in the structure of the current family, and we are also going to consider the positions paired with both i and ī in the other structure. note that each position can be paired to two different positions in the two structures; we will focus on that case here, because if the basepairs are the same in both structures, then we do not need the gradient g and simply consider  <dig> % of the basepair cost. figure  <dig> shows three examples.
fig.  <dig> three examples of the positions that need to be considered when using information from both structures. note that in those examples, we consider that we are working on the sequence of family  <dig>  and fam <dig> and fam <dig> represent the 2d structures of family  <dig> and  <dig> respectively. a the easier case when the position  is not paired in fam <dig>  and we only have to consider the position paired with it in fam <dig>  b the case where only one of the two paired positions of fam <dig> is paired in fam <dig>  c the case where both paired positions of fam <dig> are paired in fam2




the simpler case is when the position i is unpaired. then, only the position paired with i in the other structure needs to be considered, if it is paired . since that position  is not necessarily fixed, we consider an average basepair cost over all possible nucleotides at that position.

the more complex case is when position i is paired.

in this case, we also have to check for the position paired with ī in the other structure .

more precisely, using the same definitions as above for calculatescores-1struct, and considering that position i is paired in both structures , the cost of having a specific dinucleotide ai,ai¯ is equal to: 
  <dig> eq.weightingbpcbyg+∗∑nc∈{a,c,g,u}bpc/4+∑nc∈{a,c,g,u}bpc/ <dig> 


note that it is possible to get cycles of “interdependent” positions when considering both structures. as you can observe in fig. 3
c, positions  <dig> and  <dig> are paired together in fam <dig>  in fam <dig>  position  <dig> is paired with  <dig>  which is paired with position  <dig> in fam <dig>  finally, position  <dig> is paired with position  <dig> in fam <dig>  thus all of those positions are “interdependent”. to simplify the algorithm, instead of considering the complete cycles, we chose to stop at one “level”, that is looking only at one paired position in the other structure for each position in the first structure.

once the costs are calculated for every site at every node of the species tree, we can simply do the middle and top-down steps.

middle and top-down steps
the top-down step is the part where we start from the root of the tree, we select the nucleotides of minimum cost at every position and construct the optimal sequences. once all the optimal sequences are enumerated at an internal node of the tree, we go down in the tree and enumerate the optimal sequences that gave rise to them in the child nodes and so on. algorithm  <dig>  describes this process. note that before starting to select the nucleotides at the root, we do a simple fitch  on both cost matrices of family  <dig> and  <dig>  this middle step is necessary to make the link between the two families, i.e reconnect both matrices of optimal scores, and reconstruct the original ancestral sequences .

generalizing to more than two families
this problem can easily be generalized to f> <dig> structure families, as long as we maintain the same assumption that all ancestors represented in the tree possess one copy of each f number of ncrnas. the only part of the algorithm that would change is the bottom-up step: it would be similar to calculatescores-2structs, except that we would be considering the basepairs in all the f structures instead of just two. the gradient g would also be different: it would range from 100f%  to  <dig> % .

RESULTS
simulated data generation
to evaluate our method, we generated in silico twenty different phylogenetic trees for three different pairs of secondary structures as follows. first, three secondary structures of size  <dig> were randomly designed such that the two first have a similar shape, and the last, a different one. those structures are the following





the base pair distances evaluated with rnadistance  <cit>  between the structures  <dig> and  <dig>   <dig> and  <dig>  and  <dig> and  <dig> are respectively  <dig>   <dig> and  <dig> 

for every pair of secondary structures, a set of twenty bi-stable sequences was generated with frnakenstein  <cit> , such that the best scoring sequence of each run was kept. for each pair of structures , and each sequence z designed on these structures, a complete binary tree t of depth  <dig> was populated. the root r of t is initialized with ≡. each internal node n of t is composed of a pair of sequences, , such that the sequence n
 <dig> is associated with the structure s
 <dig> and n
 <dig> with the structure s
 <dig> 

the sequences for each internal node are generated in a top-down fashion. given a node w, its sequences , its two child nodes c
 <dig> c
 <dig>  a mutation probability α, and a substitution matrix β. from  ), a set w of a thousand mutants of w
 <dig> is generated as follows.

each sequence w
i in w is created by applying a probability of mutation α to each position in the original sequence w
 <dig> 

each nucleotide x can be substituted to {a,c,g,u}∖{x} following the distribution β. we used for β: ℙa⇔g=ℙc⇔u=50%, all others are set to  <dig> %. we used those probabilities for the mutational events based on the observation  <cit>  that transitions are more frequent than transversions.

we define a free energy e as the base pair distance between the minimal free energy structure of w
i and s, i.e. Δ,s). the mfe and base pair distance are computed with rnafold and rnadistance  <cit> .

a boltzmann distribution is induced such that the weight of any sequence w
i is 
 ℬ=e−ert  where r is the boltzmann constant and t the temperature in kelvin. the partition function zws is obtained by summing the weights of all sequences w
i∈w and we defined the boltzmann probability of each sequence ℙws such that 
 zws=∑wi∈wℬandℙws=ℬzs. 


we sample two sequences from this distribution to populate c <dig> and c <dig> . we re-apply recursively. the generator was implemented in python and is bundled with our acharnement package.

evaluation on simulated data
we first evaluated acharnement using simulated data, as described in sec. simulated data generation. the mutational rates of bacterias  are known to vary greatly between species and it is difficult to find indisputable reference points to evaluate them  <cit> . we thus approximate many generations in each step  by using as the mutation rate α three values: { <dig> %, <dig> %, <dig> %}. this enables us to obtain diverse enough sequences at the leaves of a complete binary tree of depth  <dig> 

for every pair of structures and mutation rate, twenty trees were generated. in fig.  <dig>  we show the average error percentage over all optimal sequences inferred for both families in all nodes of the trees. we divided the results by structural features; the first row is the average error percentage for positions involved in an interaction, while the second row is for unstructured positions. each column represents a different pair of secondary structures, annotated  <dig>   <dig> and  <dig> following the notation defined in sec. simulated data generation. for each sequence of a family fam, we consider a position to be in a structured region, if the structure of fam has a base pair at that position.
fig.  <dig> the average error percentage of all optimal sequences for both families in a tree. each column represents a pair of secondary structures. the first row is for positions in structured regions, and the second row for unstructured regions. for three mutation rates:  <dig> %,  <dig> % and  <dig> %





a first observation is that calculatescores-
2structs always performs the best, followed by calculatescores-1struct, and the fitch and sankoff algorithms whose performances are equivalent. in all cases, acharnement methods always perform better, even in unstructured regions.

for calculatescores-1struct, although the other structure is ignored during the parallel ancestral reconstructions, some constraints from the other structure are implicitly taken into account during the middle step when solutions from both families are merged. the higher quality in unstructured regions when using calculatescores-2structs was expected because we always consider structures from both families, and one unstructured position in one family can be structured in the other. finally, although the two structures  <dig> and  <dig> are much closer to each other than to  <dig>  the basepair distance does not seem to affect the quality of the results.

we then examine the number of optimal solutions, for each pair of secondary structures and mutation rate α. as can be observed in figs.  <dig> and  <dig>  the average number of optimal sequences inferred both in the whole tree and for the root only is always smaller for algorithms calculatescores-1struct and calculatescores-2structs, compared to fitch and sankoff. in the case of the pair of structures  <dig>  the average number of optimal sequences is even several orders of magnitude lower for our two algorithms. an important observation is that, in every case, all sequences at the root reconstructed by calculatescores-2structs are a subset of the optimal sequences obtained with the classical sankoff algorithm . this shows that the additional structural constraints defined in our method help to reduce the initial solution space produced by traditional approaches.
fig.  <dig> average number of optimal sequences in the tree, y-axis logscale. each column represents a different pair of secondary structures. for three mutation rates:  <dig> %,  <dig> % and  <dig> %



fig.  <dig> average number of optimal sequences in the root, y-axis logscale. each column represents a different pair of secondary structures. for three mutation rates:  <dig> %,  <dig> % and  <dig> %





running times for the four methods are shown in additional file  <dig> sec. running times.

evaluation on biological data
we analyzed the glm and finp-traj clans from the rfam database. a clan contains two rna families, that are homologous but functionally and structurally distinct  <cit> . these clans, with their two functional families with distinct consensus structures, constitute good candidates to test our algorithms.

glm clan
the glm clan contains two bacterial small non-coding rnas, glmy and glmz, that are homologous but functionally distinct. they act in a hierarchical manner to activate the translation of the glms mrna  <cit> . we selected  <dig> bacterial genomes for which rfam alignments were available for both families . the phylogeny of the  <dig> studied bacterial strains was taken from the pathosystems ressource integration center   <cit> , and rfam seed alignements of both families were aligned together with carna  <cit> . the sequences in the full rfam alignments were then re-aligned to the alignment obtained with carna simply by mapping their corresponding positions. the sequences and structures were subsequently trimmed to remove the gapped columns, and if only one side of an interaction was removed the other position was marked as unstructured.

we used the basic fitch and sankoff methods, and our algorithms calculatescores-1struct and calculatescores-2structs to infer the ancestral sequences at the root of the species tree. both fitch and sankoff inferred the same set of  <dig>  <dig> sequences at the root of the species tree, whereas calculatescores-1struct inferred  <dig>  <dig> and calculatescores-2structs  <dig>  <dig>  the ancestral sequences reconstructed by our methods are subsets of the ones produced by fitch and sankoff: calculatescores-1struct cut the solution space in half and calculatescores- 2structs by another half. running times were of  <dig> seconds for both fitch and sankoff, and  <dig> seconds for both calculatescores-1struct and calculatescores-2structs. the lower running times for acharnement methods could be explained by the smaller numbers of ancestral sequences inferred.

we look at two different measures to evaluate the quality of the ancestral sequences. first, we simply look at the percentage of all structured positions, for each family, that can actually form canonical basepairs in the ancestral sequences. the goal is to see if the reconstructed sequences can form the required basepairs in both structures. second, we compute the harmonic mean  between the frequencies in the ensemble of structures for each structure family . in a statistical physics framework, an rna sequence can adopt all structures and its frequency represents the fraction of time that the sequence adopts a particular structure. the harmonic mean is defined as 
 2·freqs1×freqs2freqs1+freqs <dig>  and is maximized when both frequencies are at  <dig> , given that the structures are different. thus the h-mean will be equal to  <dig>  if the two structures are different and share the complete structure space. another important feature is the energy of a sequence in a particular configuration. although that sequence could have other more favorable structures, it gives another idea of the stability of a particular configuration.

in order to calculate this mean for a sequence, we compute the free energy of the sequence when folded in the  <dig> different structures and their frequencies using rnafold, and the non-canonical base pairs are ignored for these computations.

to compare the different ensembles of solutions, we sampled  <dig>  <dig> distinct sequences from each of them. we present in the first  <dig> lines of table  <dig> the maximum and average values of the percentage of canonical basepairs and h-mean for: sequences inferred by sankoff  only, those inferred by calculatescores-1struct but not calculatescores-2structs, and those inferred by calculatescores-2structs only. we also present the values of energy and frequencies in regards to the secondary structure of each family. the standard deviations are shown in the additional file 1: tab.  <dig> 

sankoff

1struct

2struct


the %z  column shows the percentage of all structured positions in the glmz  family for which the ancestral sequences can form canonical basepairs. the h-mean column represents the harmonic mean. the ensz column  shows the energy of the sequence when folded in the secondary structure of the family glmz . the freqsz column  shows the frequency in the ensemble of the secondary structure of glmz . the first six rows show maximum and average results for sankoff, calculatescores-1struct and calculatescores-2structs algorithms. the last two rows represent values obtained for the paml root ancestral sequence reconstructed on the glmz family and on the glmy family




we observe that, on average, the percentages of canonical basepairs are all the same on the glmz structure , but it is  <dig>  % higher for the solutions of calculatescores-2structs on the glmy structure. although this is not a huge difference, the fact that we get more canonical basepairs on average by inferring a lot less ancestral sequences is interesting. as for the maximums, in all subsets of solutions we get sequences that have  <dig> % of the canonical basepairs for both structures. the average  h-means for the distinct sets of ancestors produced by sankoff, calculatescores-1struct and calculatescores-2structs are roughly similar, indicating that by cutting the solution space with calculatescores-1struct and calculatescores-2structs, we do not lose sequences that have significantly better folding properties in regards to both structures.

we then proceeded to do a comparison of our method with the state-of-the-art maximum likelihood ancestral reconstruction program paml  <cit> . for clarity, we remind the reader that paml considers only one family at a time, and returns one ancestor per node. we generated the ancestors using both families separately, glmz and glmy, and compared the two predicted ancestors percentage of canonical basepairs and h-mean with those obtained with the other methods, as shown in table  <dig>  the two ancestral sequences produced by paml have percentages of canonical basepairs  that are significantly lower than the best and average values of all the other methods.

finp-traj clan
we also ran the experiment on the finp-traj clan. finp is an antisense ncrna that can bind to the 5’ utr region of the traj mrna. the binding of those two rnas represses the the translation of traj, which in turn represses f-plasmid transfer  <cit> . similarly to the glm clan, we selected bacterial genomes for which the rfam alignments were available for both families  and we did the same preprocessing to prepare the alignments. the phylogeny for the  <dig> bacterial strains was also taken from patric  <cit> .

noticeably, both families in this clan are sequentially and structurally more different than with the glm clan. the fitch, sankoff, and calculatescores-1struct methods inferred the same ensemble of  <dig>  <dig>  <dig> sequences at the root. in contrast, calculatescores- 2structs inferred a strict subset  of  <dig>  <dig>  <dig> sequences. running times were of  <dig> seconds for both fitch and sankoff, and  <dig> seconds for both calculatescores-1struct and calculatescores-2structs.

as with glm, we sampled  <dig>  <dig> distinct sequences to compare the two sets. we present in the first two rows of table  <dig> the maximum and average results for the sampled sequences in others, the set inferred by fitch, sankoff, and calculatescores-1struct but not by calculatescores-2structs. the following two rows present those sampled in the subset inferred by calculatescores-2structs.

others

2struct


the %f  column shows the percentage of all structured positions in the finp  family for which the ancestral sequences can form canonical basepairs. the h-mean column represents the harmonic mean. the ensf column  shows the energy of the sequence when folded in the secondary structure of the family finp . the freqsf column  shows the frequency in the ensemble of the secondary structure of finp . the first four rows show maximum and average results for the first three algorithms  and calculatescores-2structs. the last two rows represent values obtained for the paml root ancestral sequence reconstructed on the finp family and on the traj family.


athe maximum values showed are the ones maximizing the basepairs in traj; the ones maximizing finp are  <dig> and  <dig>  for %f and %t respectively




we show the results with their standard deviation in additional file 1: tab.  <dig> 

we observe that on average, the solutions from the “others” group can form  <dig>  % of the basepairs of the finp structure and  <dig>  % of the ones of traj. on the other hand, the subset of ancestors produced by calculatescores-2structs can form on average  <dig>  %  of the basepairs of the finp structure and  <dig>  %  of the ones of traj, which, overall, seems to be a better compromise. note that this was achieved by inferring  <dig> times fewer ancestors.

regarding the h-mean, the samples taken from the smaller subset of ancestral sequences reconstructed by calculatescores-2structs show similar results for the maximum and slightly better for the average h-mean than the bigger sets inferred by the other algorithms, which tends to show that our method is not discarding sequences with better folding properties.

we also compared our results with paml, for each family separately. we observe a stark contrast with our results when comparing the percentage of canonical basepairs for both families. while paml can get  <dig> % on the considered structure, it gets only about  <dig> % of the basepairs of the other structure. when looking at the stability of the functional structures of the two families on the reconstructed ancestral sequences, we observe that our solutions offer a better trade-off .

these results suggest that our methods are indeed capable to retrieve ancestral sequences with better fitness to both functional structures of the homologous rna families. since rna families are known to favour the conservation of structures over sequences, we argue that acharnement solutions are better ancestral candidates.

CONCLUSIONS
in this paper, we presented two novel maximum parsimony algorithms, implemented in acharnement, to solve the simultaneous ancestral reconstruction of two ncrna families sharing a common ancestor. we first evaluated our methods on simulated data, as described in sec. simulated data generation, then on two rfam clans, the glm and finp-traj clan .

we first showed that on simulated data, acharnement produces smaller sets of ancestral sequences with fewer errors on average than the classical fitch and sankoff algorithms. since all the ancestral sequences reconstructed at the root by acharnement are included in those produced by the sankoff algorithm, it indicates that considering the secondary structures does not generate superfluous mutations. most importantly, considering both structures in calculatescores-2structs produces orders of magnitudes fewer sequences while always improving on the other algorithms in terms of the average percentage of errors.

the biological data cannot be validated directly, yet some interesting observations can be made. to the best of our knowledge, acharnement has the first implementations of complete parsimonious models able to reconstruct ancestral sequences of large alignments with multiple structures. on both the glm and finp-traj clans, calculatescores-2structs has been shown to infer smaller sets of ancestral sequences than fitch and sankoff, while offering a better compromise in terms of the percentage of canonical basepairs for both structures . also, the comparison with paml highlights the benefits of our approach, especially on the finp-traj clan, where it is clear that we are able to infer sequences that have better folding properties in both considered structures.

the evolutionary model and algorithms presented here constitute a first attempt at tackling this specific problem. although the results are encouraging, a lot more work needs to be done in the future to improve our approach: analyzing more in depth the different parameters of our method, reducing even more the number of ancestral sequences inferred and testing on more rfam clans are just a few examples. the frequency in the ensemble also raises important questions in regards to how we view neutral networks. given a ncrna and its functional conformation, what is the minimal frequency in the structures ensemble needed in order for it to be able to fulfill its function? equally for the rna design problem, most methods are based on local searches, from a random search as in rnainverse  <cit>  or with an ant algorithm as in antarna-ant  <cit> . the observed diversity in the quality of sequences at a minimal distance from each other demonstrates the need of more global tools, like the one of incarnation  <cit>  for example.

through the annotation of rfam families, manual curation is needed to distinguish between families of similar sequences with known distinct function or structure, which are joined into clans  <cit> . in practice, acharnement could be used for the classification of sequences to the correct clan member. acharnement could also be customized to detect families of sequences folding into multiple structures, as those exhibited in  <cit> .

additional file

additional file  <dig> the file contains the algorithms of calculatescores-1struct and calculatescores-
2structs. it is followed by the running times of fitch, sankoff, calculatescores-1struct and calculatescores-
2structs on the simulated data sets. it also contains the list of bacterial strains used in the biological analysis. we also present additional results on the glm and finp-traj clans reconstructions. 




