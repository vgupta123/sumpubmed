BACKGROUND
from the development of high-throughput sequencing  technologies, the detailed variant detection is enabled for each individual with whole genome sequencing analysis. for single nucleotide variants , various types of variant calling methods have been proposed  for hts data, and the accurate snv detection is archived for more than a thousand of individuals in genome-wide scale  <cit> . however, unlike snvs, there still exists difficulty in the accurate detection of structural variations such as genome insertion, genome deletion, short tandem repeat  number polymorphisms, and copy number variations, especially from data with low read coverage  <cit> .

for repeat number polymorphisms, several studies thus far reported associations with various disease phenotypes such as cag repeats in the huntingtin gene with huntington’s disease  <cit>  and cag repeats in the androgen receptor gene with spinal and bulbar muscular atrophy  <cit> . from hts data, several approaches such as lobstr  <cit> , repeatseq  <cit> , strviper  <cit> , and coalescentstr  <cit>  have been proposed for estimating repeat numbers in str regions. in lobstr and repeatseq, repeat patterns included in sequence reads spanning the str regions are considered for the estimation of repeat numbers. on the other hand, strviper and coalescentstr estimate repeat numbers by considering difference between the actual insert size and the insert size inferred from paired-end reads aligned to the flanking regions of the target repeat. the alignment quality of sequence reads is important for accurate repeat number estimation, especially in the former approaches although usual alignment methods have difficulty in str regions due to insertions and deletions caused by the frequent change of repeat numbers.

we propose a new dynamic programming based realignment method named str-realigner where repeat patterns in str regions are given as prior knowledge, and repeat patterns are used multiple times in the realignment process. although a similar algorithm is adopted in a tool for detecting str regions in pacbio reads based on 3-stage modified smith-waterman  <cit> , consecutive str regions can be handled in the proposed algorithm unlike the tool. in addition, clipping fragments, which are an essential feature for the realignment, are also considered in the proposed algorithm. by allowing insertions and deletions of repeat patterns in str regions with repeatedly use of repeat units, accurate realignment of sequence reads is expected.

in a simulation study with synthetically generated hts data for artificial diploid genomes sequence based on phased genotypes of a sample in the dataset of  <dig> genomes project  <cit> , we showed the effectiveness of our model by evaluating root mean squared errors between true and estimated repeat numbers with repeatseq or allelotype, an str calling software in the lobstr package, from realignment results. for real data analysis, we applied str-realigner, revister  <cit> , and gatk indelrealigner to hts data from illumina hiseq  <dig> for a hapmap ceu parent-offspring trio and show the effectiveness of str-realigner based on consistency in mendelian inheritance in the estimated repeat numbers in the parent-offspring trio. root mean squared error values were also calculated from the comparison with the gold standard str region size obtained from high coverage pacbio sequencing data for one of samples in the parent-offspring trio, and the results from the realigned sequencing data with str-realigner showed the least  root mean squared error value.

method
realignment algorithm considering repeat sequence as prior knowledge
we propose a dynamic programming based algorithm named str-realigner that realigns query read r to a genome sequence, taking into account the multiple use of repeat patterns for prespecified str regions. we consider a genome sequence comprised of series of m subsequences g
 <dig> …,g
m. let b
j be a binary variable that takes one if g
j can be used repeatedly and zero otherwise, i.e., subsequence g
j with b
j= <dig> is for a repeat pattern in one of prespecified str regions. figure  <dig> shows an example of a genome sequence comprised of subsequences g
 <dig> …,g
 <dig>  where g
 <dig>  g
 <dig>  and g
 <dig> are repeat patterns of prespecified str regions and are repeatedly used in the proposed realignment algorithm. in the description of the proposed algorithm, |r| and |g
j| denote the size of r and g
j, and r and g
j denote bases at the kth position of r and g
j, respectively.
fig.  <dig> an example of notations in str-realigner. subsequence with b
j= <dig> can be used repeatedly in the realignment process




since infinitely long deletions can be considered by using the same subsequence with b
j= <dig> repeatedly, we limit the size of deletions to less than |g
j| for subsequences with b
j= <dig>  we consider the following six types of states for the alignment of the ith position in query read r to the kth position of subsequence g
j. 

s
m: a state representing match or mismatch between bases at the ith position of query read r and the kth position of subsequence g
j.


s
i: a state representing insertion at the ith position of query read r right after the kth position of subsequence g
j.


s
d: a state representing deletion of the kth position of subsequence g
j right after the ith position of query read r.


s
d: a state representing deletion from the k−l+ <dig> to kth positions of subsequence g
j right after the ith position of query read r. this state is considered only for subsequences with b
j= <dig> in order to avoid deletions longer than |g
j| by limiting the range of l from  <dig> to |g
j|− <dig>  for l= <dig>  s
d is used, and consecutive deletions in the same subsequence are not considered for s
d with b
j= <dig>  if l is longer than k, the deletion starts from the |g
j|−l−k+1st position on the subsequence and the deletion part rotates from tail to head of the subsequence.


s
l: a state representing left clipping that ends at the ith position of query read r.


s
r: a state representing right clipping that starts at the ith position of query read r.




the following penalties are considered in the proposed realignment algorithm. 

p
m,j: penalty for match of bases between query read r and subsequence g
j. usually, the penalty is set to a minus value, i.e., the penalty is used for rewarding.


p
mis,j: penalty for mismatch of bases between query read r and subsequence g
j.


p
io,j and p
ie,j: penalties for open and extension of insertion on subsequence g
j, respectively.


p
do,j and p
de,j: penalties for open and extension of deletion on subsequence g
j, respectively.


p
c: penalty for clipping.




in the proposed dynamic programming algorithm, penalty and traceback information for state s are stored in functions p and t, respectively. in the first step of the dynamic programming, penalty and traceback information of states for the first position in query read r are initialized in the following algorithm.





the best penalties for the alignment up to the ith position of query read r for each state is updated by using the best penalties of states for the i−1st position of query read r in algorithm  <dig>  where traceback information is also updated. algorithm  <dig> given below updates penalty and traceback information for states representing match or mismatch. algorithm  <dig> given below is used for obtaining states that are in preceding subsequences and can be traced from s
m. algorithm  <dig> given below updates penalty and traceback information for states representing insertion. algorithm  <dig> given below updates penalty and traceback information for states representing deletion.





















for subsequence g
j with b
j= <dig>  consecutive deletions in the same subsequence are handled with s
d, and hence s
d is not considered at step  <dig> of algorithm  <dig> for traceback. procedures for updating penalty and traceback information for states representing consecutive deletions for subsequence g
j with b
j= <dig> is given as algorithm  <dig>  algorithm  <dig> given below updates penalty and traceback information for s
r. finally, an algorithm for traceback is given as algorithm  <dig>  by following states from head to tail in q obtained with the above algorithm, the realignment result with the best penalty is obtained.












fig.  <dig> a flowchart of algorithms considered in str-realigner. after initialization of penalty and traceback information for first query position with algorithm  <dig>  penalty and traceback information are updated for other query positions with algorihtm  <dig> in a dynamic programming manner. then, a realignment with the best penalty is obtained from traceback information with algorithm 9




time and space complexities of str-realigner
time complexity analysis
for each position i in query read r, updating penalty and traceback information takes o time for s
m, s
i, and s
d for k> <dig> and subsequence g
j with b
j= <dig>  for k> <dig> and subsequence g
j with b
j= <dig>  updating information for s
m and s
i requires o time while updating information for s
d and s
d requires o time. for k= <dig>  states for tail positions of preceding subsequences are additionally considered until reaching to subsequence g
j with b
j= <dig> or j= <dig> as in algorithm  <dig>  this process additionally requires o∑x=j′j|gx| time for s
m, where j
′ is one or the index for the first subsequence gj′ with bj′= <dig> reached from g
j. however, since the best state and its corresponding penalty before g
j− <dig> are already considered for updating information for s
m, by using this information, we need to newly consider only states in subsequence g
j− <dig>  and hence the additionally required time complexity is reduced to o. thus, with the modification of the algorithm according to the above argument, updating information for states s
m,…,s
m requires o∑j|gj| time in total. since the same optimization can be applied to updating information for states representing insertion, updating information for states with k= <dig> requires o∑j|gj| time in total as well. in addition, for s
l and s
r, o time and o∑j|gj| time are required, respectively. thus, updating penalties and traceback information for all the states requires o∑j|gj|+∑j∈{j′|bj′=1}|gj| <dig> time for each position in query read r, and hence the time complexity of the proposed algorithm is o|r|·∑j|gj|+∑j∈{j′|bj′=1}|gj| <dig> time.

space complexity analysis
the order of the number of states for each position in query read r is o∑j|gj| for s
m, s
i, and s
d. for s
d, the order is o∑j∈{j′|bj′=1}|gj| <dig>  and for s
l and s
r, the order is o. thus, storing values from functions p and t requires o|r|·∑j|gj|+∑j∈{j′|bj′=1}|gj| <dig> space. however, p) can be obtained by calculating p)+·p
de,j, and t) is given by s
d for l> <dig> and s
d for l= <dig>  thus, the order of the space required for functions p and t can be reduced to o|r|·∑j|gj| by calculating functions p and t for s
d with o time when their values are required. the space required for updating for each state is less than the order of the number of states and is negligible, compared to spaces required for p and t. thus, with the above modification, the proposed algorithm requires o|r|·∑j|gj| space.

practical implementation
irregular repeat patterns are often contaminated in the provided str regions detected by some bioinformatics tools  <cit> , and those irregular repeat patterns worsen the quality of the alignment of the proposed algorithm due to the difference of the actual sequence and the assumed repeat pattern. in order to address this issue, we extract maximal regions containing repeat patterns consecutively with some pre-specified error rate from the target str region. the extracted region is used for a new target str region for str-realigner.

in order to use the realignment result from the proposed algorithm for resequenced data, parts of the query read aligned to g
j with b
j= <dig> are again realigned to the corresponding str region of the reference genome. however, the quality of the alignment is also worsened due to irregular patterns in the str region. thus, we consider a subsequence for a repeat pattern right after the target str region and set lower deletion penalty to the target str region. for penalty, the following setting were used in our study: p
m,i=− <dig>  p
mis,i= <dig>  p
io,i= <dig>  p
ie,i= <dig>  p
do,i= <dig>  p
de,i= <dig>  and p
c= <dig>  these parameter values are the same as the default values in bwa-mem. for subsequences corresponding to target str regions for lower deletion penalty, p
do,i is set to  <dig> 

in illumina reads, bases at positions after homopolymer regions are highly erroneous because the same phasing is accumulated in synthesis during the illumina sequencing process in homopolymer regions. figure  <dig> shows an example of erroneous bases around a homopolymer region where a lot of clippings occur around a long homopolymer comprised of a bases in grch <dig> due to sequencing errors. since sequence reads with such highly erroneous bases worsen the quality of realignment with str-realigner, we additionally implemented an option that skips the realignment with str-realigner for homopolymer regions with some specified size such as  <dig> 
fig.  <dig> an alignment result around a homopolymer region. most of the reads spanning the region contain soft clipping parts due to drastic sequencing errors after the homopolymer region




each mapping tool has its specific characteristics in the aligned reads. for example, a deletion exists in the start position of an str region in the reads aligned with some mapping tool while a deletion exists in the end position of the str region in the alignment result of another mapping tool for the same sequence reads. the performance of variant calling is worsened if such characteristics are mixed in the alignment results. thus, all the reads aligned to a target str region are realigned with str-realigner in the default condition.

RESULTS
simulation analysis
from a list of str regions provided in the repeatseq software package, we extracted str regions for evaluation as follows: 
str regions not in chromosome  <dig> were filtered out.

str regions with size longer than  <dig> bp were filtered out.




the maximum period, the size of repeat pattern, in the list is six. since the length of sequence reads considered in the following experiments is  <dig> or  <dig> bp and these sequence reads cannot span str regions >  <dig> bp for most of the cases, str regions >  <dig> bp were filtered out. we then prepared synthetically generated diploid genome sequences of chromosome  <dig> based on phased genotypes for a ceu individual, na <dig>  in the phase <dig> phased reference panel by the  <dig> genomes project  <cit> . in the generation of the above genome sequences, variants located in the extracted repeat regions were ignored. the number of variants in total is  <dig> . by randomly sampling repeat numbers, we generated two sets of repeat numbers for the extracted repeat regions and added str variants to the diploid genome sequences based on the sets of repeat numbers for the evaluation. note that repeat numbers with which the size of str region is >  <dig> bp were avoided in the random sampling process. from the diploid genome sequences, we generated paired-end sequence reads in fastq format with the read length of  <dig> bp and the insert size normally distributed with mean of  <dig> bp and standard deviation of  <dig> bp. in the generated reads, substitution errors were added with rate of  <dig> %. base quality scores for bases in fastq format were set to q <dig>  which corresponds to  <dig> % error. the read coverage of the generated data is  <dig> ×. a bam file for the dataset was obtained by mapping the sequence reads to the reference genome  with bwa-mem   <cit> . we applied our proposed realignment method, str-realigner, revister , and gatk indelrealigner  to the bam independently and generated three types of bam files.

for gatk indelrealigner, use_reads was used for --consensusdeterminationmodel option. repeatseq  was applied to the original bam file and the three types of realigned bam files, and sizes of variants in the target str regions were obtained. table  <dig> shows call rates of results from repeatseq using the original bam file and the three types of realigned bam files. the call rate indicates the rate of results with str region size estimated as a non-na value. for all the str periods other than period of  <dig>  call rates of results from the bam file realigned with str-realigner are higher than those from other bam files.
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 


table  <dig> root mean squared error  between true and estimated repeat numbers with repeatseq using the original bam file of  <dig> × and those realigned with str-realigner, revister, and gatk indelrealigner for all the str regions. the best result is underlined

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 



in order to examine the performance on lower coverage data, we downsampled the original bam file from  <dig> × to  <dig> × and estimated repeat numbers with repeatseq and allelotype using the downsampled bam file and bam files obtained by applying the realignment methods to the downsampled bam file. table  <dig> shows call rates of results from repeatseq for the downsampled bam files. for all the str periods other than period of  <dig>  call rates of results from the bam file realigned with str-realigner are higher than those from other bam files. tables  <dig> and  <dig> respectively summarize rmse values for each bam file for all the str regions and the regions where results were commonly estimated as a non-na value. in the calculation of rmse, the size in the reference genome was set for the region size estimated as na value for table  <dig>  in both tables  <dig> and  <dig>  the results from the bam file realigned with str-realigner shows the best rmse values for all the str periods other than period of  <dig>  the rmse value from the results based on the bam file realigned with gatk indelrealigner is slightly better than that based on the original bam file.
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 



tables  <dig>   <dig> and  <dig> show call rates, rmse values averaged on all the regions, and rmse values averaged on commonly called regions for results from allelotype, respectively. the results for the bam file realigned with str-realigner gave the highest call rate for all the str periods other than period of  <dig>  in total, str-realigner gave the best results in both considering all the str regions and commonly called regions.
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 



the results for the sequencing data of  <dig> × are always worse than those of  <dig> × in all the cases.

real data analysis
for real human sequencing data, we used  <dig> bp paired-end sequencing data of a ceu parent-offspring trio na <dig>  na <dig>  and na <dig> analyzed in the  <dig> genomes project. na <dig> and na <dig> are parents of na <dig>  the data was sequenced on illumina hiseq  <dig> with the read coverage of  <dig> × and the average insert size of  <dig> bp. sequence reads were mapped to the reference genome  with bwa-mem and stored in bam format. the data was obtained from the illumina platinum genomes project through the european nucleotide archive under the study accession prjeb <dig> . str-realigner, revister, and gatk indelrealigner were applied to these bam files. repeatseq was then applied to the original bam files and these realigned bam files and sizes of the target str regions were estimated. in order to examine the performance, we considered the consistency in mendelian inheritance in called regions, where the estimated region size for na <dig> is a non-na value. str regions used for the evaluation are the same as the regions in simulation analysis in section  <dig>  we counted str regions where the estimated size for na <dig> consistent with those for her parents, na <dig> and na <dig> in terms of mendelian inheritance as well as the str regions with inconsistent results.

in table  <dig>  the number of regions with consistent sizes in terms of mendelian inheritance  and the number of inconsistent estimation results  are summarized. note that the larger number is better for consistent regions while the smaller number is better for inconsistent regions. the results for str period of  <dig> without skipping homopolymer regions with size > <dig> are in parentheses.
1319
531
280
80
63
5
5
196
28
15
46
15
35
9
1920
672
the number of consistent regions , and the number of inconsistent regions  based on estimated repeat numbers with repeatseq in a parent-offspring trio, na <dig>  na <dig> and na <dig>  for the original bam files, those realigned with str-realigner, revister, and gatk indelrealigner are summarized. values in parentheses for str-realigner are the result without filtering long homopolymer regions. the best result is underlined




for str periods of  <dig>   <dig>  and  <dig>  results from bam files realigned with str-realigner gave the best results in both consistent and inconsistent regions.

in total, results from bam files realigned with str-realigner gave the best results in both consistent and inconsistent regions. results for gatk indelrealigner are consistent in more regions than those for the original bam files although the results for gatk indelrealigner contains the most inconsistent regions.

in table  <dig>  the number of regions with consistent sizes in terms of mendelian inheritance  and the number of inconsistent sizes  on results estimated with allelotype are summarized. for str periods of  <dig>   <dig>   <dig>  and  <dig>  results from bam files realigned with str-realigner gave the best results in consistent regions. in addition, for str periods of  <dig> and  <dig>  results from bam files realigned with str-realigner also gave the best results in inconsistent regions. in total, the results for str-realigner gave the best performance in both consistent and inconsistent regions.
770
1775
345
81
70
4
224
20
75
27
75
75
73
22
2557
943


fig.  <dig> comparison of original and realigned bam files for na <dig> in an str region located at chr22:28045335- <dig>  the top panel is a plot of sequencing data in a bam file realigned with str-realigner and the bottom one is a plot of sequencing data in the original bam file




we also evaluated root mean squared errors for na <dig> by using str region sizes obtained from high coverage pacbio sequencing data as the gold standard. the pacbio sequencing data was obtained through bioproject prjna <dig> with sequence read archive accession numbers srx <dig> and srx <dig>  <cit>  and its read coverage is  <dig> × in total. error-corrected reads with falcon  in fasta format were aligned to grch <dig> with bwa-mem, and str region size data was then obtained from variant calling results by applying allelotype to the aligned reads.
table  <dig> root mean squared error  between the gold standard and estimated str sizes with repeatseq using the original bam file for na <dig> from hiseq  <dig> and those realigned with str-realigner, revister, and gatk indelrealigner for all the str regions

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
for the gold standard, str sizes estimated from high coverage pacbio sequencing data with allelotype are used. the best result is underlined


 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
for the gold standard, str sizes estimated from high coverage pacbio sequencing data with allelotype are used. the best result is underlined




comparison of computational timetable  <dig> comparison of computational time on a simulation data for an individual with read coverage of  <dig> × and a real dataset for na12878




CONCLUSIONS
we proposed a new realignment method for str regions named str-realigner that takes sequence reads aligned with other methods and realigns sequence reads by dynamic programing manner with the consideration of the corresponding str repeat pattern as prior knowledge. for the simulation data analysis, we prepared synthetically generated reads aligned with bwa-mem, those realigned with str-realigner, those realigned with revister, and those realigned with gatk indelrealigner. in order to evaluate the effectiveness of our proposed method, we applied repeatseq and allelotype to these four types of aligned reads, and the results from sequence reads realigned with the proposed method give the best rmse value among the results from these four types of aligned reads. from the comparison of root mean squared errors between estimated and true str region size for these four types of aligned reads, the results for the dataset realigned with str-realigner are better than those for other datasets for most of the cases. for real data analysis, we considered a real sequencing dataset from illumina hiseq  <dig> for a parent-offspring trio, repeatseq was applied to an aligned sequencing dataset with bwa-mem, that realigned with str-realigner, that realigned with revister, and that realigned with gatk indelrealigner, and the results from the dataset realigned with str-realigner shows the best performance in terms of consistency of the size of estimated str regions in mendelian inheritance. in addition, by using the size for str regions obtained from high coverage pacbio sequencing data as the gold standard, the results for str-realigner show the best rmse values for the case considering all the periods. in both simulation and real data, revister required the most computational time among the realignment methods considered in this work, and the proposed method required more computational time than gatk indelrealigner. however, the computational time of str-realigner can be reduced drastically by parallel computing and limiting the search space for the realignment around the originally aligned results in some specified window size.

abbreviations
bambinary alignment/map

ceucentral europe

gatkgenome analysis toolkit

grcgenome reference consortium

htshigh-throughput sequencing

rmseroot mean squared error

strshort tandem repeat

