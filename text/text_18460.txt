BACKGROUND
in recent years there has been a great interest in modeling and simulating various aspects of population dynamics in biological and ecological systems . the increasing computational resources along with a deeper understanding of biological and ecological phenomena have led to the development of many languages for describing, analyzing and simulating concurrent stochastic processes. many such languages specify markovian dynamics and differ by level of abstraction, ease and complexity of the description and execution efficiency  <cit> . many tools have been developed in order to allow and simplify the use of mathematical modeling for the life-science community, and each one has its strengths and weaknesses . there is no single tool that has all the required features and choosing the appropriate one depends on the specific goals and resources of the user. formalisms such as chemical reaction networks  <cit>  and stochastic process algebras  <cit>  have a great descriptive power but are often too complex for the average user. we have previously developed and formulated a simpler and more practical language for modeling and simulating the behavior and interaction of populations  <cit> . we did so by extending the notion of stochastic tree grammar   <cit>  by incorporating environment-dependent rates and probabilities to the transition rules. these can be dynamically defined as functions of the system’s state, which include global values such as current population size, generation count or elapsed time. introducing both rates and probabilities to the transition rules enables a more intuitive and flexible description of biological phenomena and in many cases it fits well to the way biologists think and observe different dynamics. for example, a scenario where the rate of reproduction stays constant but the probability of generating different species changes can be easily described using estg. in addition, we extended the language by allowing each individual to have an internal state that can change via transition rules. here we present estgt, a programming and simulation environment for estg. a prominent feature of the tool is that it can stochastically produce lineage trees, each corresponding to a different stochastic program execution. these lineage trees record the entire execution history of the process, including the dynamics that led to existing as well as to extinct individuals. unlike previous systems that produce only population size dynamics , our tool also outputs the corresponding lineage trees, which can be used to analyze the evolutionary and developmental history of the process.

implementation
estgt was developed using matlab r2013a  and it can be executed either as a gui program or through matlab’s command-line, allowing easier batch processing and parallelization. if needed, the tool can automatically perform multiple executions of a program with different random seeds, producing a stochastic sample of instances from the space of possible outcomes. written as an open-source program under matlab environment, the tool also enables to easily integrate the output data within the user’s downstream analysis.

program definition
the program definition is encoded using an xml file along with accompanied matlab functions. the xml file encodes the transition rules along with the species names, initial rates and probabilities, initial population size, internal states names and initial values, simulation time, random seed, and conditional transitions, as explained below. the xml text also encodes the names of the accompanied matlab functions, which consist of the global updating functions of the rates and probabilities as well as the updating functions of the internal states. xml is a widely used format  <cit>  that enables a succinct and human-readable description and also allows easy editing, parsing and future extensions. the use of matlab code for writing the updating functions enables a simple and expressive way to describe the dependency of the global parameters on the system’s state.

an estgt modeling and simulation experiment may be based on previous experimental observations. these can be formulated into transition rules and estimated parameters, including transition rates and events probabilities and how they depend on global values . the model can then be simulated and the results can be used both for model validation and predictions. validation involves testing the in silico reproducibility of experimental observations and a validated model can be used to predict the behavior of the system under new conditions that have not been yet performed experimentally. these predictions can then be experimentally validated and the results can be again used to validate or adjust the model.

stochastic simulation
an estg transition rule has the following general form  <cit> : a→rs1p1s2p2…sn−1pn−1snpn 

where r is the transition rate, pi are the transition probabilities such that ∑i = 1npi =  <dig>  and each si is either an empty group  or a group of either one or two species that are the targets of the transition. a program can have multiple transition rules and the rates and probabilities can depend on the system’s state. each species contains at most one transition rule in which it occurs on the left side of the transition but can occur on the right side of the different transitions as many times as needed. each species can also include internal states, which can be updated and inherited through transition execution.

an estg program can be stochastically simulated using the gillespie algorithm  <cit> . to do so, each estg transition rule of the form above is translated into n chemical reaction rules  <cit> : a→cisi,ci=r⋅pi,i= <dig> .n 

where ci is the reaction rate. the propensity functions are then calculated by taking the product of the population reaction rate with the size of the corresponding population. in our implementation we used the gillespie’s direct method algorithm in order to calculate both the time to the next reaction and the reaction’s identity.

estg program examples
the following examples depict the usage of the different estgt features, including regulated interaction between different species, the use of internal states and conditional transitions. the examples include the input using an xml format and the corresponding matlab files that describe the updating functions.

prey/predator
the prey/predator model of lotka-volterra  <cit>  is usually defined using the following odes: dpreydt=preyc1−c2predator  dpredatordt=−predatorc3−c2prey 

these odes can be translated into the following estgs  <cit> : prey→r1preypreyp1|ϕow  predator→r2predatorpredatorp2|ϕow 

with the following updating of the rates and probabilities: r1=c1+c2⋅|predator|  r2=c2⋅|prey|+c <dig>  p1=c1r <dig>  p2=c2⋅|prey|r <dig> 

these rules are encoded using the following xml and matlab code:

the execparams xml element consists of specific execution parameters such as the simulation time and the random seed. the funhandlename element consists of a handle to a matlab function that encodes the global updating of the rates and probabilities as function of the system’s state . each species is described using a rule element that defines the transition rule along with initial values of the rate, probabilities and initial population size. in the above example there are two transition rules for each of the species with simulation time of  <dig> units and initial population size of  <dig> for both the prey and the predator. we note, that the initial indicated values of the rates and probabilities  are arbitrary since they are updated to their appropriate values immediately upon the first transition execution . the matlab code for the updating function updating_lotkavolterra is defined as follows:

the updating function updates the rates and the probabilities according to the definition using specific values for c <dig>  c <dig>  c <dig> 

internal states
in this example we simulate stem cell differentiation. sc  divide symmetrically with rate  <dig> , while self-renewing or differentiating with the same probability , and diff  can either proliferate  or die  at rate  <dig> 

we define two internal states called ms, which simulates somatic mutations of microsatellites   <cit>  and gen, which counts the number of generations since each differentiation.

ms internal state: we define a vector of n variables ms→=ms <dig> …msn, which correspond to the number of repeats in n ms loci in the dna. in every cell division, the number of ms repeats for each locus changes according to the stochastic function fms, which can cause either a decrease or an increase of one repeat with probability p  <cit> : fmsx=x+1withprobabilityp2x−1withprobabilityp2xotherwise 

we define the following transition rules: scms→=x→ms→ <dig> scms→=fmsx→ms,scms→=fmsx→ms <dig> |diffms→=fmsx→ms,diff:

the internalstate element includes the internal state’s names, initial value, updating function name and duplication number, which indicates how many instances of that internal state are simulated. note, that in this example the rates and probabilities are not updated and so the updating function is empty:

however, we now have to define an updating function for the internal states ms and gen, namely:

the input of an internal state updating function is the current value of the internal state and the output is the updated value.

conditional transitions
conditional transitions enable to transform each individual instance into another species or to termination  if a certain condition on its internal states is met. each individual instance is examined upon each transition event and if its internal state follows the defined condition that individual is transformed to the defined target.

the following toy example shows three species, two types of “stem-cells” where one divides symmetrically and another one divides asymmetrically and a differentiated cell, which divides symmetrically or die. the asymmetric stem cells and the differentiated cells contain an internal state counter, which increases its value stochastically. the asymmetric stem cell includes a conditional transition that causes it to transform into a differentiated cell when the counter reaches a certain threshold, and the differentiated cells include a conditional transition that causes it to die when the counter reaches a second threshold. this is described by the following rules: scasym→ <dig> scasymscsym <dig>  scsymcounterstoch→ <dig> scsymscsym <dig>  diffcounterstoch→1diffdiff <dig> |ϕ <dig>  

with the internal state updating: counterstoch=counterstoch+normrnd <dig>  

and the conditional transitions: scsym→diffdiff→ϕ 

where normrnd is a random sampling from a normal distribution with mean  <dig> and std of  <dig> .

the following xml represents the above transition rules, internal states and conditional transitions:

the structure of the conditional transition is such that the conditionaltransition element includes any condition on the internal states of that species using matlab code syntax and the transition element includes the name of the target species  or {0} for termination .

the updating function of the internal state counterstoch is as follows:

the counterstoch internal state increases stochastically each time a transition event is executed.

RESULTS
in our previous paper  <cit>  we presented the usability of estg by presenting a variety of examples that can be modeled and simulated using this approach, including complex stem-cell dynamics, different strategies for feedback regulation, prey/predator, luria-delbrück, accumulation of somatic mutations and others. the simulation results of these scenarios were all defined and executed using estgt, and the corresponding code for these programs and the programs described in this paper can be found in the project’s homepage .

for example, fig.  <dig> shows the results of an example execution of the prey/predator program depicted before. figure 1a shows the characteristic population size dynamics as a function of time and figs. 1b,c show example lineage trees originated from one of the originating species . the lineage tree in fig. 1b visually reveals an interesting bottleneck phenomenon where most sub-lineages get extinct during the stage of population size decrease and only a single sub-lineage survives. this sub-lineage corresponds to a sub clone of the population, which can explain events such as genetic drift or fixation.fig.  <dig> an output example of the lotka-volterra program execution. an output example of the executed program described in the main text . a population size as a function of time. b a lineage tree of one of the  <dig> originating preys. c a lineage tree of one of the  <dig> originating predators. both  and  exhibit the characteristic bottleneck phenomenon, where most lineages get extinct



use case example: in silico assessment of phylogenetic reconstruction algorithms
a prominent feature of estgt is its inherent ability to generate lineage trees that capture the entire evolutionary dynamics from the earliest ancestor down to the extant and extinct individuals. this makes it a very convenient tool for the analysis of phylogenetic trees, and specifically for in silico evaluation of tree reconstruction accuracy using genomic data. as we showed, estgt can be conveniently used to simulate different scenarios of evolutionary phylogenetics including the modeling of genomic mutations, which accumulate through divisions. extracting this mutational data from the leaves of the tree  and feeding it into tree reconstruction algorithms enables to easily evaluate the tree reconstruction accuracy by comparing the reconstructed tree to the real tree by using one of the many methods for phylogenetic trees comparison  <cit> . in our lab we conducted an experiment where we generated an ex vivo cell lineage tree by repeatedly sampling single cells that went through clonal expansion. this process generated an ex vivo cell lineage tree with a known topology in which each single-cell clone is represented by a node in the tree. we then sampled single cells from each clone and sequenced their dna in order to discover somatic mutations. these mutations were used to evaluate the tree reconstruction accuracy by comparing the reconstructed tree with the true one. using estgt we simulated the ex vivo experiment along with the somatic mutations and analyzed the results in order to validate the experimental data and to predict the impact of different mutation rates and future single-cell genotyping enhancements on the tree reconstruction accuracy . figure  <dig> shows the result of a simulated lineage tree. the full estg program can be found in the project’s homepage.fig.  <dig> results of the ex vivo simulation. simulation result of the ex vivo scenario. each clone consists of  <dig> single cells from which several single cells are selected to initiate new clones. total of  <dig> clones were generated from  <dig> different seeding time points. a population size dynamics of the simulated tree. once a clone reaches the size of  <dig> several single cells are selected to initiate new clones and the other cells stop dividing. b the resulted cell lineage tree on which the accuracy of reconstruction algorithms is examined



the gui interface
the main window of the gui interface is presented in fig.  <dig>  the gui enables to load an estg program, run it using various random seeds and analyze the results.fig.  <dig> the main window of the gui. the window is divided into  <dig> panels, namely “program”, “run” and “analysis”. the “program” panel includes the transition rules and the internal states details as parsed from the input xml file. the “run” panel enables to execute a single or multiple simulations using different random seeds and set the simulation run time. the “analysis” panel includes the output of the executions. for each run the corresponding population size graph is presented and the generated lineage trees can be displayed and analyzed



after loading an xml file the program details are presented. the gui allows to execute either a single simulation or a batch of consecutive simulations using different random seeds. each simulation is then displayed separately in a list box, which allows the user to select single or multiple simulation results for further analysis. each initiating species acts as a root of a lineage tree, which can be visualized by selecting the tree from the list box of generated trees and pressing the “plot selected trees” button. it is also possible to merge multiple trees by marking the appropriate check box.

the gui also displays and allows editing the global updating function, which is written in matlab code and can access the population size of all species as well as the current time.

during an execution of a program the population size of all species is displayed in real-time, allowing the user to observe the advancement of the execution. after the execution is completed the details of all the simulations, including the initiating species and the generated trees are displayed. when selecting a specific simulation execution the population size of the selected species is displayed.

the gui also allows the user to save the current session into a ".mat" file  for future loading either through the gui or through regular matlab environment for further downstream analysis. it is also possible to save the generated trees into the corresponding text files in newick format, and the internal states values, which are saved into tab-separated files.

summary statistics
the “summary statistics” window presents various statistics over all simulation runs and enables to scroll over the simulation time in order to get snapshots of the statistics for each historical time point. figure  <dig> shows an example of an output window where the left panel presents the average population size over all simulation runs and the right panel can present three different types of statistics according to the selected option in the dropdown menu. the options are:fig.  <dig> the gui windows of the summary statistics. summary statistics over all the simulation runs. the presented data is the result of  <dig> stochastic simulations of the “internal states” program described in the main text



“clones histogram”: a clone is defined as all individuals that are descendants of a single founder. the clone size is the number of living individuals of that clone. the histogram presents the percentage of clone sizes over all runs. the user can select the originating species types and the species types of the resulting individuals within the clone.

“rules histogram”: displays a histogram of the number of times each rule has been executed over all simulation runs.

“internal states histogram”: displays a histogram of the internal states values over all runs.

the command-line interface
the command-line interface enables to run the simulations directly from matlab’s command-line. it makes it possible to execute programs without gui support directly from a linux system prompt, allowing easy batching and parallelization on a computer cluster. the following commands execute an example program  <dig> times using different random seeds :

the function parseestgprogram receives as input an xml file containing the estg program and returns a struct that contains the corresponding rules. this struct is then passed to the second function runsim, which receives as input the rules, an array of random seeds and the simulation time span. the output is a structure array of the runs for each seed and a common data structure for all runs. the output includes the entire data history of the simulations, including events time points, historical population size, executed transition rules, and a struct array that includes detailed information on all the generated nodes, including their creation time, their parents and children relationships, and internal states values. this data enables to easily access the entire historical data, which led to the final system’s state.

CONCLUSIONS
translating biological knowledge into a well-defined formalism with which one can easily describe, simulate and analyze the system in mind is not an easy task. formalisms that are too complex can turn this task into a great burden, and simple ones may just not have enough descriptive power. population dynamics that involve individual interactions can be captured using directed acyclic graphs, which can be extremely complicated, not intuitive, and require enormous computational resources to simulate and analyze. on the other hand, ignoring the interactions between the different species is not realistic. although the estg formalism does not allow direct interaction between different species, we believe that it presents an elegant compromise between a high descriptive power and a simple formalism. abstracting away individual interactions makes a single rule for each species sufficient and enables the recording of the entire dynamical history of the population using a lineage tree representation. this tree captures all past events and includes, in addition to the living population at every time point, the death of individuals, extinct lineages and historical transition events .

we believe that estgt can contribute to the modeling and simulation approach of developmental dynamics and thus facilitate research in systems biology.

availability and requirements
project name: estgt

project home page:https://github.com/shapirolab/estgt

operating system: platform independent

programming language: matlab

other requirements: matlab r2013a or higher

license: gnu gpl

any restrictions to use by non-academics: none

competing interests

the authors declare that they have no competing interests.

authors’ contributions

as and es conceived the project. as wrote the code. as and es wrote the manuscript. both authors read and approved the final manuscript.

