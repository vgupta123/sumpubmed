BACKGROUND
with the dramatic improvement of next-generation sequencing technologies over the last five years, there has been a corresponding increase in the amount of publicly available genomic data. as of february  <dig>  entrez genome projects  <cit>  catalogued  <dig>  bacterial and archaeal genome projects. of these,  <dig>  had complete genome sequences,  <dig> percent of which were released within the last three years. in addition,  <dig>  on-going genome projects were registered with the database;  <dig>  of which had a draft sequence publicly available. these projects do not include the ten terabase-pairs of sequence data across more than  <dig>  entries currently available in the short read archive, the public repository specifically for raw data from next-generation sequencing  <cit> . current genome visualisation and data analysis methods are struggling to keep up as it becomes a routine requirement for biologists to compare a new genome to scores, if not hundreds, of other genomes at once.

genome visualisation methods use linear or circular representations. linear representations, like those that can be generated using artemis comparison tool   <cit> , genome2d  <cit> , combo  <cit> , vista  <cit> , mauve  <cit> , bugview  <cit>  and genomorama  <cit> , have advantages in showing insertions and deletions between genomic sequences and certain programs, like mauve and act, can show genome rearrangements. however, it is difficult to summarise large datasets using these tools. programs that generate circular figures, like microbial genome viewer  <cit>  and genome projector  <cit> , are designed to annotate a single chromosome and have no support for whole genome comparative data. these programs are restricted to published genomes and do not let users analyse their own genomic sequences. dnaplotter  <cit>  allows the user to input their own genome sequences and can show genome comparisons, but only by generating this information separately and loading it in as custom annotation tracks.

there are comparative circular genome visualisation alternatives available online, such as cgview server  <cit>  and genewiz browser  <cit> , which allow users to upload their own sequences and provide a similar service, although genewiz browser can display mapped read data, whereas cgview server cannot. however, both of these tools are only available as internet resources and limit the number of genome comparisons that can be shown on a single image. command-line based alternatives and imaging libraries also exist, which require users to prepare all data and customisation through text files, such as circos  <cit> , cgview  <cit> , genome diagram  <cit>  and blastatlas  <cit> . while these programs are very powerful, they require command-line manipulation and scripting to use, putting them out of reach of many biologist end-users.

to address these issues, we present the blast ring image generator ; an easy-to-use, cross-platform desktop application that enables rapid visualisation of blast comparisons to one or more central reference sequences using complete, draft or unassembled genome data.

implementation
the blast ring image generator  is a cross-platform desktop application written in java  <dig> . it uses cgview  <cit>  for image rendering and blast  <cit>  for genome comparisons. it has a graphical user interface, programmed on the swing framework, which takes the user step-by-step through the generation of a circular image. the settings used to generate a particular image can be saved for re-use with different genome data, or the entire session can be bundled and saved for later. the image can be generated in jpeg, png, svg or svgz format. an example of brig's output can be seen in figure  <dig>  a user guide describing step-by-step tutorials for several visualisation tasks and accompanying example files are provided at http://sourceforge.net/projects/brig/files/.

RESULTS
whole genome comparisons
brig is capable of generating circular comparison images for prokaryote genomes, showing multiple genome comparisons in a single image, and displaying similarity between a reference genome in the centre against other query sequences as a set of concentric rings coloured according to blast identity. an example image  produced by brig shows a comparison of a draft escherichia coli genome with  <dig> other e. coli and  <dig> salmonella genomes . the varying colour gradient of rings 5- <dig> in figure  <dig> indicates a blast match of a particular percentage identity, as shown in the key. blast matches can be filtered according to a minimum percentage identity or e-value cut-off . these matches are calculated from the perspective of the reference sequence; consequently, regions that are absent from the reference genome but present in one or more of the query sequences will not be displayed. data from different genomes can be collated into a single lane, which enables visualisation of a large number of genomes and allows users to compare genomes as a group against the central reference sequence. this is shown in figure  <dig> where the comparison results from  <dig> e. coli strains, mg <dig>  hs and w <dig>  have been grouped together to represent regions of the reference genome that are found in non-pathogenic e. coli.

 <dig> genomes are listed as they appear on figure  <dig>  from innermost to outermost. rings  <dig> to  <dig> correspond to gc-skew, gc-content, coverage and contig boundaries, respectively.

users can highlight regions of the reference genome with custom annotations by specifying the label text, colour, shape, and position of features either manually, or by uploading this information as a tab-delimited file. alternatively, selected annotations can be uploaded from a genbank or embl file; for instance, the annotations shown in the outermost ring in figure  <dig> have been read from the genbank file of e. coli o157:h <dig> str. sakai  <cit>  by selecting 'misc_features' that contain the text 'sp' or 'sple', which correspond to annotated prophage regions  <cit> .

generating comparisons of a large number of genomes raises the issue of memory usage. to produce figure  <dig>  with its comparison against  <dig> genomes each of approximately  <dig> megabase-pairs in size, one gigabyte of ram was required on a standard desktop computer. the memory requirement can be reduced by filtering the blast results according to e-value and percentage identity cut-offs within brig. alternatively, the amount of memory allocated to brig can be altered from within the program.

a high level of customisation through a user-friendly graphical user interface
a variety of genomic data sources can be used to produce an image, including blast comparisons of protein or nucleotide sequences from genbank, embl and fasta files. brig will internally handle all genome comparisons by converting genbank or embl files into fasta format, creating any necessary blast databases, running blast and converting the results into a format that cgview renders as the circular image. users do not have to interact directly with blast or cgview, and nor is any knowledge of using command-line programs assumed. by default the central reference sequence is treated as the subject blast database with the rings representing matches to individual query sequences.

users are taken step-by-step through the process to create a circular comparison image via a graphical user interface . in the first screen , users specify data they would like to compare to a central reference sequence. in the second screen , users are able to configure the individual concentric rings; choosing which data they would like to show in each lane and make aesthetic choices including colour or ring size. lastly, the settings can be reviewed and submitted for blast  <cit>  alignment and image drawing using cgview  <cit>  . image rendering settings and genome comparison configurations for a particular brig image can be saved and reused as an xml profile file. alternatively, a number of sample templates are available to users, in order to quickly generate an image with optimised size and colour settings.

users can add their own annotations to a brig image through the 'add custom features' dialog, to produce complex yet informative images. users can alter every aspect of visualisation, including: image size, label visibility, texts and fonts, colours of ring lanes, the gradient reflecting percentage identity, and custom labels inside or outside of a ring.

data such as transcriptome and microarray expression values can be graphed and displayed as a ring in the circular image. these custom graphs can be produced from user-defined data in a space or tab-delimited file that either includes; the start and stop positions and the value for that region; or a single value for every base pair, with one value per line. to ensure that a useful visualisation is produced regardless of the data source, the default graphing function is to display skew from the mean value, similar to the coverage graph in figure  <dig>  users can choose to override this behaviour and scale the graph between zero and a user-defined value.

visualisation of information from a user-defined set of sequences
in many instances users may only be interested in the presence, absence or variation of a certain set of sequences amongst a number of different genomes. brig can visualise this kind of comparison if provided with a multi-fasta sequence file  that will be concatenated to form the central reference ring. an example of such analysis can be seen in figure 3a, where the translated nucleotide sequences from genes encoded by the locus of enterocyte effacement  pathogenicity island in the enterohaemorrhagic e. coli strain o157:h <dig> sakai genome were compared to the translated nucleotide sequence of whole genomes of other published enterohaemorrhagic e. coli; two enteropathogenic e. coli and one citrobacter rodentium ; and e. coli k- <dig> mg <dig>  table  <dig>  comparing translated nucleotide sequences through protein alignment offers better sensitivity for divergent sequences than comparing nucleotide sequences only.

 <dig> genomes are listed as they appear on figures  <dig> &  <dig>  from innermost to outermost.

brig is capable of using raw sequencing reads as query sequences to provide rapid preliminary insights into unassembled draft genome or meta-genome data. to illustrate this feature, we have simulated unassembled illumina data using metasim  <cit>  by randomly sampling one million  <dig> base pair sequences from the complete genome sequences shown in figure 3a and applying an illumina error model. reads were translated into peptides and used as query sequences in brig  to search against the same central reference sequence in figure 3a, producing the image shown in figure 3b. despite being based only on raw sequencing reads, the representation of sequence presence, absence and variation in figure 3b is highly similar to that found when using whole genome sequences in figure 3a.

visualisation of information from draft genome assemblies
brig is a valuable tool for analysing draft genome sequences. a draft genome that has been assembled into a set of contiguous sequences  or scaffolds  in multi-fasta format can be used as a reference sequence. contig or scaffold boundaries can be shown as alternating blue or red segments as a custom ring. in addition, by uploading standard genome assembly files , the underlying sequencing reads can be included as a custom graph to show genome coverage. this procedure can help to highlight misassemblies, areas of low coverage and repeat regions that warrant further attention. for instance, the read coverage and contig boundaries in figure  <dig> were generated from the ace file produced by gs de novo assembler . ace files produced by consed/phrap  <cit>  are also acceptable. the reordering of contigs in a draft genome is often carried out after assembly without reordering the corresponding assembly files. to address this, users can use brig's graph conversation module to reposition the coverage information from the original ace file to be consistent with the modified draft genome sequence based on a blastn comparison.

the genome coverage feature of brig can also show read mapping information. this can be a useful approach for determining differences amongst multiple unassembled genome datasets relative to the central reference sequence. as described previously, brig supports read or contig mapping by using blast . alternatively, read mapping can be performed externally and read into brig as an ace or sam file and shown as a coverage graph. ace files can be produced by the  <dig> life sciences/roche gs reference mapper application, which maps  <dig> reads to a reference sequence, and there are a number of tools that use the sam format as the standard file format for mapping short reads to a reference sequence. to illustrate this feature, the simulated reads from figure 3b were mapped to the e. coli o157:h <dig> sakai genome  using bwa and the genome coverage from resulting sam files was calculated and visualised by brig. the resulting image is shown in figure 4a, where the complete e. coli o157:h <dig> sakai genome is used as the central reference sequence with the read mapping graphs as rings. these results are broadly comparable to a standard blast comparison between o157:h <dig> sakai and the original complete genome sequences . notably, as a member of a different genus, the genome of citrobacter rodentium is more divergent from the o157:h <dig> sakai genome than the other e. coli genomes shown and could not be mapped accurately . this illustrates that the read mapping utility should be restricted to the analysis of strains from the same species, with blast being the preferable option for more distant comparisons.

discussion
there are already a number of resources that produce circular representations of prokaryote genomes; each with their own unique features and advantages. table  <dig> shows a comparison between the major features of brig and other gui or internet based applications that produce circular images for prokaryote genomes. of these resources, cgview server  <cit> , genewiz browser  <cit>  and dnaplotter  <cit>  bear the most resemblance to brig.

 <dig> cgview server and genewiz browser only support three and seven genome comparisons on a single image, respectively.

brig presents a solution to visualising prokaryote genome comparisons for a large number of genomes. unlike dnaplotter, brig does not show a preview of the image as the user edits it and only produces an image after the user has specified all of their settings. this is a common drawback of other genome comparison applications, including circos  <cit> , genewiz browser and cgview server. to address this, image templates are available in brig to help first time users to gauge appropriate settings for image aesthetics and scaling. furthermore, the ability to save template files at any point during a brig session enables users to return to previous versions and modify images as needed.

unlike brig, similar tools generally limit the number of genome comparisons that can be shown on a single image and they do not offer the option to collate multiple sequences into a single lane . these drawbacks prevent the use of these resources in large-scale genome comparisons that are increasingly necessary as the number of publicly available genome sequences increase. brig has been designed with the task of draft genome analysis in mind. genewiz browser, like brig, supports mapping and visualising short read sequences onto a reference genome; however, it does not explicitly support easy visualisation of contig boundaries within a reference sequence.

standard brig comparisons rely on blast, so an understanding of blast parameters and behaviours is required in order to produce informative images. a common pitfall for first time users is the low-complexity filters, which is active by default in blast. these filters mask repetitive and low complexity sequences that could cause spurious low-scoring matches when searching large datasets. in brig, filtering often results in short  blank regions spanning all query sequences, which may be misinterpreted as unique regions in the reference genome. filtering can be turned off in the blast options field in brig. in addition, blast comparisons will often produce overlapping hits, which are difficult to visualise on a static flat image. to address this, brig was implemented to sort blast results so that the highest scoring hits are drawn last by cgview and displayed on top of other lower-scoring matches. as a result, high scoring matches are prominent over low scoring ones.

brig is actively maintained with a manual that includes step-by-step tutorials and sample data providing walk-throughs of all the major features. in future we plan to develop support for genome comparisons generated by programs like mummer  <cit>  and for brig to calculate the co-ordinates of major regions of difference between genomes 'on-the-fly' for use in downstream analyses.

CONCLUSIONS
here we report the development of the blast ring image generator , a user-friendly desktop application for comparing and visualising prokaryote genomes using blast. brig is highly versatile; it can visualise information derived from draft genome data, including contig boundaries, read coverage or read mapping data; it can display the presence, absence or variation of a user-defined set of reference sequences in multiple datasets simultaneously, including unassembled next-generation sequencing reads; and it can display several types of custom graphs and annotations. all facets of the program are customisable through an easy-to-use graphical user interface bringing comparative genome visualisation well within the reach of any user.

availability and requirements
project name: blast ring image generator 

project home page: http://sourceforge.net/projects/brig/

operating system: platform independent

programming language: java

other requirements: java  <dig>  or greater

licence: gnu gplv3

any restrictions to use by non-academics: none.

authors' contributions
nfa developed and implemented the brig application, and helped to draft the manuscript. nkp and nlbz participated in the design and coordination of the study, and helped to draft the manuscript. sab conceived the study, participated in its design and coordination, and helped to draft the manuscript. all authors read and approved the final manuscript.

acknowledgements and funding
the authors would like to kirstin hanks-thomson, nathan bachmann, makrina totsika and mark schembri for their feedback in testing and development. this work was supported by a grant from the australian national health and medical research council . sab is the recipient of an australian research council australian research fellowship .
