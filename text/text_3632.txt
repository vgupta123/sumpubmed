BACKGROUND
complex biochemical systems have been described by many models  <cit> , but these modeling studies have not been used to address biomedical problems of practical or clinical interest. one major hurdle is that when describing a non-observable biomolecular system, the set of ordinary differential equations  often do not have closed-form analytical solutions. even when numerical solutions are proposed, there are no standard quantitative metrics to verify the efficacy of a numerical solution in approximating the true solution. thus, there is an urgent need to study numerical solver behavior in biomolecular systems modeling using both qualitative and quantitative performance measures.

biomolecular system modeling is an iterative process that depends on robust and accurate numerical solvers for future experimental validation. we aim to determine the optimal numerical solver for a particular system model, by applying various numerical solvers to the model and then comparing the numerical solutions. the workflow for such a systematic study is shown in figure  <dig> 

• in the application phase, we select the optimal numerical solver  to elucidate model-solver dependency .

• in the design phase, we identify and incorporate significant features of similar biomolecular systems into concrete analytical models. this is to determine a system-model correspondence.

• based on specific model characteristics, we apply the optimal numerical solver to obtain the solution that best approximates the true system behavior.

• we validate the model through experimentation by comparing empirical results with the simulated model results by using the optimal solver.

• we improve the optimal numerical solver  selection to correct modeling errors by reducing discrepancies between experimental results and modeling simulations.

as a test-bed, we have used the belousov-zhabotinskii  reaction system, which is represented by the oregonator model  <cit>  as the test system. in the following sections, we first describe the system model and numerical solvers implemented; we then present and discuss the results obtained using qualitative and quantitative performance measures; and we conclude by laying out plans for related future work. finally, we will determine simple rules to help select the optimal numerical solver given stiff problems. these rules can help researchers decide if there exists an optimal numerical solver for a given system or if there are only sub-optimal solvers.

RESULTS
two sets of simulations were performed under different conditions of error tolerance –  relaxed relative error tolerance  i.e. in matlab, 'reltol' = 10- <dig> and  strict relative error tolerance  i.e. 'reltol' = 10- <dig> ; other invariant conditions are a parameter set {s =  <dig>  w =  <dig> , q = 10- <dig>  f =  <dig> } and initial conditions {α =  <dig>  η =  <dig> , ρ = 20}. simulations were run for  <dig> time units.

figures  <dig> and  <dig> are visual representations of simulation results under ret. respectively, figure  <dig> shows 2-d phase plots of pairs of reactant species and figure  <dig> shows time-series solutions of all three reactant species. these results are based on the assumed ability of the numerical solvers in matlab to handle stiff problems as shown in table  <dig>  in figure  <dig>  only the phase plots of ρ vs. η are presented for brevity; the trends presented are representative of other combination pairs.

based on these performance measures, we propose two simple guidelines to select the optimal numerical solver for solving models of stiff, complex oscillatory biochemical systems.

 <dig>  for problems with unknown parameters, ode <dig> is the optimal choice regardless of relative error tolerance.

 <dig>  for known stiff problems, both ode <dig> and ode15s are good choices under strict relative error tolerance.

qualitative metrics
from figure  <dig> under ret, we observe that the expected limit cycle  behavior only exists in some solvers. for example, among the non-stiff solvers, only ode45; among the stiff solvers, only ode15s and ode23tb; and the moderately stiff solver ode23t. lc behavior is observed from all solvers under set.

in figure  <dig>  the time-series solutions are logically parallel to the 2-d phase plots in figure  <dig>  in addition, the non-stiff solvers ode <dig>  ode <dig> and stiff solver ode23s produce solutions that quickly depart from the expected limit cycle behavior and become unstable. for reference purposes, we define a 'take-off' point as the pivotal time-point when the numerical solution first departs radically, by visual inspection of time-series data, from expected stable limit cycle behavior. furthermore, of these solutions in figure  <dig>  the stiff solvers ode15s and ode23tb produce oscillations with varying amplitudes and periods with pseudo-random sequence while the oscillations from ode <dig> and ode23t are relatively uniform throughout the period of simulation. in addition, where limit cycle behavior is observed under set, the amplitudes of oscillations are similar for α and ρ, ranging between  while the corresponding period ranges between .

from figures  <dig> and  <dig>  we observe significant differences in the numerical solutions obtained using different numerical solvers on the same system model under similar operating conditions . these observations are summarized in tables  <dig> and  <dig>  together with other qualitative and quantitative performance metrics.

♮'take-off' point defined as the pivotal time-point when the numerical solution first departs radically from expected limit cycle behavior, by visual inspection.

♯period and amplitude data for α and ρ from figure  <dig> 

♯period and amplitude data for α and ρ from figure  <dig> 

quantitative metrics
comparing statistics in table  <dig> under ret, ode <dig> is the only non-stiff solver that produces a convergent solution; ode15s is the least costly stiff solver based on the number of function evaluations. among all implicit solvers, ode15s is the optimal stiff solver because it had to compute the least number of partial derivatives, lu decompositions and solutions of linear systems. the moderately stiff solver ode23t performs the next best in this group of implicit solvers. between implicit and explicit solvers, where convergent solutions to lc behavior were determined, the observed period and amplitude of oscillations is significantly different:  from ode <dig> as opposed to an average of  from ode15s, ode23tb and ode23t. where numerical solutions do not converge, the 'take-off' point is consistent for ode <dig>  and ode23s , but varies for ode <dig> depending on the maximum step-size allowed. this phenomenon is further examined in figure  <dig> 

comparing statistics in table  <dig> under set, in terms of the number of function evaluations, among explicit solvers ode <dig> is the least costly i.e. it performed the least number of function evaluations. among implicit solvers, ode15s is optimal in terms of computational costs i.e. computing the least number of partial derivatives, lu decompositions and solutions of linear systems.

comparing statistics across tables  <dig> and  <dig>  only ode <dig> provided consistent results in terms of the period and amplitude of oscillation –  under ret and  under set. among implicit solvers, ode15s performed the best in terms of computational cost. from table  <dig>  only one of three explicit solvers and  <dig> of  <dig> implicit solvers produced convergent numerical solutions under ret. from table  <dig>  all numerical solvers produced convergent numerical solutions to lc behavior when the relative error tolerance was stricter under set.

following the departure of the numerical solution from expected limit cycle behavior, we observe that the 'take-off' point for non-stiff solver ode <dig> under ret varies based on the maximum step-size  allowed. in all other simulations performed for this study, the simulation option 'maxstep' is set by default with the rule 'maxstep' =  <dig> *abs  <cit>  where t <dig> is the simulation start time, set at  <dig> units; tf is the end time, set at  <dig> time units. in fact, the period of simulation dictates the maximum step-size allowed. the actual step-sizes taken are more directly controlled by the relative error tolerance 'reltol'. the relation of the 'take-off' point with respect to the 'maxstep' allowed for ode <dig> simulations is shown in figure  <dig>  from figure  <dig>  the 'take-off' point varies between ~ <dig> and ~ <dig> time units with 'maxstep' ≤  <dig>  units. the 'take-off' point remains constant at ~ <dig>  if the'maxstep' is > <dig> .

discussion
numerical solvers have various theoretical formulations such as single- vs. multi-step, low- vs. high-order, explicit vs. implicit solvers  <cit> . to systematically compare the numerical solvers, we have examined qualitative performance measures such as convergence and accuracy, and quantitative performance measures such as computational cost in terms of function evaluations, partial derivatives, lu decompositions, solutions of linear systems, 'take-off' points, period and amplitude of oscillation.

adaptive schemes allow savings in computational cost without compromising accuracy, i.e., the solvers take smaller step-sizes when the results change rapidly, or larger step-sizes when the results move slowly. with a specified tolerance interval for the magnitude of step errors, the step-size may be adjusted so that smaller steps are taken where the step error is large and vice versa. this adaptive step-size feature is studied by performing simulations under  <dig> conditions:  relaxed relative error tolerance , i.e. in matlab, 'reltol' = 10- <dig>  and  strict relative error tolerance , 'reltol' = 10- <dig> 

single-step numerical solvers depend only on one preceding time-point i.e. only y is required to obtain y. hence, trends from additional preceding time-points do not influence the solution of the immediate step. on the other hand, multi-step solvers require multiple preceding time-points to determine y. as such, multi-step methods are less sensitive to initial conditions compared to single-step methods in general. in the case of single-step runge-kutta  methods – that form the basis for ode <dig>  ode <dig> and ode23tb – the interval between tn- <dig> and tn are further divided into subintervals based on the order of the rk method. this subdivision also helps to control error propagation at successive steps, leading to increased stability in the solution. thus, with the exception of ode <dig> where the solution quickly diverges, rk methods in general are a popular choice for numerical solvers.

the explicit solvers compute y using other known values, while the implicit solvers require an iterative process to solve y instead. convergence is not guaranteed in this iterative process and depends heavily on the termination criteria. on the other hand, because this iterative process refines the solution at each step, implicit solvers are generally more suited to solve stiff problems. an unexpected result occurs with ode23s, where the solution becomes unstable under ret.

the tradeoff for obtaining a high order of accuracy is increased computational cost. for example, the variable-order solver ode <dig> is capable of accuracy up to the 13th order. however, to achieve this accuracy, it performs extensive function evaluations depending on the highest order of the derivatives required. on the other hand, low-order solvers such as ode <dig> perform simpler function evaluations that are limited to computing the 3rd-order derivative.

from this comparison, our results suggest ode <dig> and ode15s are better numerical solvers when dealing with stiff systems of nonlinear odes. ode <dig> is an explicit rk method of order  <dig> while ode15s is variable-order capable of 1st–5th order accuracy. furthermore, low- to medium-order methods appear to provide more accurate solutions compared to high-order methods. in addition, results suggest that under relaxed relative error tolerance, implicit solvers may handle stiff problems relatively better than explicit solvers; this is consistent with established guidelines in handling stiff problems. however, when the relative error tolerance is strict, all numerical solutions studied here converge to limit cycle behavior. under this condition, explicit solvers have an advantage over implicit solvers in terms of computational cost because of the lesser number of operations required. in addition, lc behavior is dependent on the parameter set {s, q, w, f} and initial conditions for the species involved  <cit> . the choice of the parameter set and initial conditions is based on a previous solution  <cit>  that has been verified to exhibit lc behavior. this implies that the parameter set used for this study may not be the best choice. thus, the characterization of the parameter space for the oregonator model remains a worthwhile problem.

the key advantage in selecting matlab numerical solvers for comparison is that they are widely used in engineering and science and these solvers' reliability is of critical interest to the community. for those experienced users who may implement these solvers individually, it is also critical for them to understand the intrinsic differences in all types of solves, so as to be able to tailor solver algorithms to specific problems. for instance, cocherová modified the ode <dig> solver to solve the hodge-huxley model of electrical conduction through a nerve fiber  <cit> . results from her work demonstrate improved accuracy and convergence of solutions even under ret.

the next step is to determine whether there exists an analytical system-model dependency, that is, to extract and map features of biological systems to concrete analytical models. this extraction process for biomolecular systems emulates the modeling process of conventional systems such as mechanical, electrical and fluid flow systems. the numerical solver selection results from this work should help in validating the analytical model and also in translating systems biology to clinical treatrment and therapeutic engineering applications.

CONCLUSIONS
we have demonstrated that the selection of numerical solvers plays an important role in modeling outcomes. using both qualitative and quantitative performance measures, we have shown that ode <dig> is an optimal implicit solver for solving stiff systems of odes, and enforcing strict relative error tolerance is a key factor for improving the performance of numerical solvers for convergent solutions. however, enforcing stricter relative error tolereance leads to an increase in computational costs. for explicit numerical solvers, ode <dig> is found to perform consistently regardless of relative error tolerance. these results reinforce the iterative process of biomolecular systems modeling, and indicate that it is not only possible to improve and ensure reproducibility of the analytical models, and also possible to improve the efficiency and effectiveness of experimental validations of these models.

