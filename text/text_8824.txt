BACKGROUND
polychromatic flow cytometry is a popular technique for measuring cell properties. these properties include dna and rna content, intracellular phosphoproteins, cytokines, and cell-surface proteins  <cit> . in this technique, multiple fluorescent dyes corresponding to desired phenotypic observables are first used to label cell components. the cells are then made to flow through a detector in a single file, and their fluorescence is measured. flow cytometry has applications in lymphoma phenotyping, cell sorting, hiv, stem cell identification, tumor ploidy, and solid organ transplantation  <cit> . unlike traditional techniques that take the statistical average of a sample, flow cytometry works on a per-cell basis. therefore, it can be used to analyze multiple phenotypic observables simultaneously and at a rate of thousands of cells per second  <cit> .

data generated from flow cytometry analysis enables an experimental scientist to identify rare properties of small groups of cells that would not have been traditionally possible through observing the average properties of all cells in a sample. the analysis of such groups of rare cells becomes even more important if we consider the case of cancer patients, where early detection of rare cell phenotypes might be key to saving a patient. similarly, the absence of rare phenotypic observables in a sample may suggest the termination of certain medication or treatments in subjects already suffering from cancer. the analytical power of flow cytometry brings with it two major barriers that need to be overcome for its effective and widespread employment in scientific practice: 
 since polychromatic flow cytometry can observe multiple phenotypes simultaneously, this leads to data with multiple dimensions. according to various cognitive processing studies, the data analysis capacity of human beings is limited, on average, to about four dimensions that can be processed in parallel  <cit> . therefore, flow cytometry techniques that often produce data in  <dig> or more dimensions cannot be easily analyzed by human experts.

 polychromatic flow cytometry is used to generate data about individual cells; so, the size of the data obtained from the analysis is usually very large. the dataset can consist of millions of data points per sample which is well beyond the cognitive memory limit of human beings  <cit> . standard statistical methods that involve summarization negate the advantages of flow cytometry by making the result similar to traditional measurement methods that produce observables only on the average property of a sample. statistical methods may lead to loss of small but significant details needed to detect rare but interesting cellular phenotypes.




we address these problems by designing a new automated technique for synthesizing low-dimensional visualizations of flow cytometry data. this paper makes the following contributions: 
 we describe sanjay – a new algorithmic approach for automatically synthesizing 2d and 3d visualizations of high-dimensional flow cytometry data. sanjay’s main contribution is to employ automated algorithmic synthesis techniques  <cit>  and symbolic decision procedures  <cit>  to create low-dimensional projections of high-dimensional data that can be easily visualized.

 this algorithmic projection approach approximately preserves the original relationship between the points in the high-dimensional space. this algorithm avoids stastical summarization thus minimizing the loss of small but rare events.

 we compare sanjay to the popular multi-dimensional scaling  algorithm on small high-dimensional data sets and show that our projections produce distortions that are on average  <dig>  times smaller than those produced by mds .
the maximum distortion produced by sanjay was, on average,  <dig>  times less than that produced by mds







automated gating of flow cytometry data
machine learning methods have been deployed for automatically labeling subpopulations of cells in flow cytometry data sets – a process popularly referred to as gating. in particular, supervised and semi-supervised machine learning algorithms  <cit>  have been extensively investigated for automatically identifying related cells.


sequential gating  <cit>  enables two-dimensional visualization of any two colors or dimensions of data from a polychromatic flow cytometer. the human expert then attempts to manually identify subsets of cells that correspond to the same subpopulation. while the process is computationally simple, the result is highly subjective and depends on the intuition of the oncologist. further, an n-dimensional flow cytometry data has n×/ <dig> possible two-dimensional visualizations. thus, a 20-color polychromatic flow cytometer will produce  <dig> different 2-dimensional visualizations and it is a cognitive challenge for a human expert to verify clinical or experimental conjectures against all  <dig> visualizations obtained from a biological sample.

probability binning  <cit>  is an unsupervised quantitative methodology for analyzing polychromatic flow cytometry data that identifies the difference between the distribution of cells in a given sample and a standard control sample. frequency difference gating  <cit>  extends this approach by enabling multidimensional gating of the bins identified by the probability-binning algorithm that contain the largest differences between the given and the control sample.

cluster analysis methods  <cit>  employ varying levels of expression of antigens to construct subsets of cells that share the same combination of fluorochromes markers. while the technique is unsupervised, the result is only a semi-quantitative two-dimensional visual description  of the data set and still needs to be interpreted subjectively by an expert for biological correctness. standard machine learning algorithms such as k-means  <cit>  and expectation maximization  <cit>  have been applied to perform cluster analyses of polychromatic flow cytometry data.

the most popular clustering algorithm that operates by building and refining partitions is the k-means algorithm  <cit> . the popular k-means algorithms have also been applied to flow cytometry data  <cit> . the k-means algorithm requires three inputs from the user: the number of clusters, an initial cluster assignment, and a metric to measure distance between data points. as the k-means algorithms converge only to one of the local minima, different initializations of the k-means algorithm can lead to different final clustering of the data. such sensitivity to initial conditions is undesirable for an objective flow cytometry data exploration framework.

principal component analysis  is a particularly popular approach for generating two-dimensional visualizations of flow cytometry data  <cit> . however, low-dimensional visualizations lose a lot of information because of the low correlation between different fluorochromes, and such plots mostly serve as an exploratory tool in the hands of well-trained experts.

in our recent work  <cit> , we have proposed the use of complex network models and their topological properties for discriminating between cancer and normal patients. in our approach, each node in the complex network corresponds to the measurements obtained from a single cell and an edge between two nodes exists if the euclidean distance between them is smaller than a threshold. the evolution of the network through time can be derived by studying periodically acquired patient samples. by constructing such complex network models for multiple normal patients, we propose to develop a stochastic generative model that describes the flow cytometry data for normal patients. in particular, topological properties such as number of connected components, edge density, number of clusters, etc. are studied. the goal of our stochastic generative modeling is to capture the natural diversity that occurs in the normal patient population , and thereby compute the probability that a given flow cytometry sample does not arise from this stochastic generative model. rare behavior identification algorithms, including our own work  <cit> , can then be employed to compute the probability that a given flow cytometry sample indicates the presence of a physiological anomaly in a patient.

decision procedures
to the best of our knowledge, our current work is the first effort towards the application of symbolic decision procedures for the algorithmic synthesis of projections from high-dimensional data to low-dimensional visualizations. in  <dig>  mojzesz presburger introduced a first-order theory of arithmetic for natural numbers with addition and equality – a consistent, complete and decidable fragment of logic  <cit> . fifty years later, robert shostak presented an algorithm for deciding quantifier-free presburger arithmetic that permits arbitrary uninterpreted functions  <cit> . more recently, a number of decision procedures for verifying various decidable fragments of logic involving arithmetic and function symbols have been proposed and implemented using the popular smtlib standard  <cit> . in particular, a number of decision procedures for bit-vectors involving arithmetic and logical operations have been successfully implemented  <cit> . many of these approaches build upon the foundation work of martin davis, hilary putnam, george logemann and donald w. loveland who introduced the dpll algorithm for checking the satisfiability of propositional logic formulas in  <dig>  <cit> . we show that our approach based on bit-vector decision procedures outperforms classical multi-dimensional scaling approach – at least on small high-dimensional data sets – by consistently creating projections with at least 80% less distortion.

some notations and definitions
we now recall some basic ideas relevant to our use of decision procedures for the automated synthesis of visualizations.

definition 1

 a bit-vector is a vector of boolean values of a given length. given two bit-vectors, their bitwise logical operations are performed by applying the logical operation to the corresponding bits of the bit-vectors. 
 ¬x=λi∈{ <dig> ,…,l−1}.¬xix∨y=λi∈{ <dig> ,…,l−1}.xi∨yix∧y=λi∈{ <dig> ,…,l−1}.xi∧yi 


the above equations define the formal semantics of bit-vector not, or, and and operations. similarly, arithmetic operations such as addition and subtraction can be defined on bit-vectors by extending the standard definition of these operations from the decimal to the binary representation.

definition 2

 two bit-vectors of length l and l
′ can be concatenated into a single bit-vector of length l+l
′. 
 xy=λi∈ <dig> ,…,l+l′− <dig> biwhere,bi=xiifi<lyi−lotherwise. 


relational operations on bit-vector are defined similarly, using both signed and unsigned interpretations  <cit> . as these formulas naturally arise in software and hardware verification, several solvers for bit-vector decision procedures are widely deployed. the top solvers in the  <dig> smt-comp competition for bit-vectors include boolector, cvc <dig>  stp, yices, mathsat and z <dig>  most of these solvers use a combination of bit-blasting and rewriting to translate the bitvector decision problem into a combination of lemmas that can be discharged using results from number theory and satisfiability solving  <cit> .

definition 3

 distortion is defined as the change of distance between two points when they are projected from a high-dimensional space to a lower dimension. let the distance between points x and y in the original space be d. let the projections of x and y in the lower dimension space be x
′ and y
′ respectively. let d be the distance between the projected points. the distortion due to this projection is defined by: 
 distortion=dx′,y′−dx,y 


methods
graph representation of flow cytometry data
there is an inherent complex network structure in polychromatic flow cytometry data arising from the well-governed biological process of cell differentiation. using our earlier approach  <cit> , we can build a complex network representation of the observed flow cytometry data set. we follow the steps outlined in fig.  <dig> to create a structural representation of flow cytometry data.
fig.  <dig> steps for generating the structural representation of flow cytometry data for use in the sanjay visualization synthesis technique




definition 4

 given n
m-dimensional data points representing n cells, each representing m observed properties measured by a polychromatic flow cytometer, the flow cytometry network with threshold t  is a graph g= where v is the set of nodes and e is the set of edges, such that: 
a node v∈v denotes the m quantities measured for a single cell, i.e. v=, and

∈e if and only if ||v <dig> …,vm−1−v0′,…,vm−1′||≤t.




the second property above specifies that there’s an edge between two nodes , when the manhattan distance between them is less than threshold t. recall that the manhattan distance between vectors v= and u= is defined to be ∑i=0m−1vi−ui.

given flow cytometry data, a t-fcn  is determined by the threshold t that is used to decide whether two nodes in the flow cytometry network are connected by an edge in the t-fcn. the threshold t is typically learned from experimental data. as t is varied from ∞ to  <dig>  the t-fcn goes from being a clique of n nodes to being a network with n components – each node being a component by itself. the variation in t causes changes in the distribution of the topological properties.

using information theoretic arguments  <cit> , we can compute the value of t that maximizes the information content or entropy of the distribution of the topological properties. thus, the generated t-fcn is the most informative network describing the flow cytometry data set.

community detection in flow cytometry data
several existing algorithms are capable of identifying communities in large complex networks  <cit> . due to the massive size of the network generated by a typical flow cytometry dataset, one can readily rule out the use of matrix and spectral graph theory based methods. modularity based methods are known to be biased against small communities and are hence not a method of choice for identifying communities in flow cytometry networks, where small communities may represent rare but interesting anomalies  <cit> .

keeping in mind our high-assurance requirement for biomedical applications, and the large size of flow cytometry datasets, we suggest the use of a parallel version of the walktrap algorithm for community detection  <cit>  in our flow cytometry networks  <cit> . the main idea behind walktrap approach is based on the intuition that random walks of a graph must be trapped in densely connected communities of the t-fcn that are only sparsely connected to the rest of the network. as several random walks can be instantiated in parallel on multiple processing nodes, the approach is readily deployable on large supercomputing clusters  <cit> .

structural representation of flow cytometry networks
each flow cytometry data set is represented by a t-fcn that maximizes the information content of the network. a flow cytometry network t-fcn is then decomposed into a number of communities c
 <dig> …,c
n, using methods described in the previous section where each c
i is itself a t-fcn. the centroid of a community can serve as a surrogate representing the approximate position of all the points in the community. to preserve the relative position of the communities, we compute the centroids o
 <dig> …,o
n of the communities and seek to approximately preserve the distance between these centroids. in order to preserve the geometry of the individual communities, we also must compute the 3-centroids ei <dig> ei <dig> ei <dig> for each community c
i when projecting into two dimensions . to calculate 3-centroids of a community c
i, we break the community into  <dig> component communities ci <dig> ci <dig> ci <dig> using k-means clustering algorithm where the input k for the k-means algorithm is equal to  <dig>  we then calculate one centroid for each of the  <dig> component communities for a total of  <dig> component centroids ei <dig> ei <dig> ei <dig> corresponding to each community c
i. for projecting onto two dimensions, the set of points o <dig> e <dig> e <dig> e <dig> o <dig> e <dig> e <dig> e <dig> …,on,en <dig> en <dig> en <dig>  that we will also denote by q
 <dig> …,q
d where d=4n and n is the number of communities in the t-fcn, serves as a structural representation of the flow cytometry network.

automated synthesis of projections using decision procedures
given the structure-defining points {q
 <dig> …,q
d} = o <dig> e <dig> e <dig> e <dig> o <dig> e <dig> e <dig> e <dig> …,on,en <dig> en <dig> en <dig> in m dimensions, sanjay synthesizes an embedding {r
 <dig> …,r
d} of the points in two-dimensional or any other lower dimensional space that approximately preserves the pairwise manhattan distances between these points up to an error of ε> <dig>  the following expression specifies relationship between the original points q
 <dig> …,q
d and the synthesized lower-dimensional projection r
 <dig> …,r
d with respect to the distortion ε: 
 ∃r <dig> r2…,rd,∀i,j∈{ <dig> …d},∧i,j,i≠j||ri−rj||≤||qi−qj||+ε∧i,j,i≠j||ri−rj||≥||qi−qj||−ε 


to help in discussing our projection algorithm, we now state, without proof, a lemma that describes the requirement for the location of a point in 2d or 3d space to be fixed.

lemma 1
 for any given point in two-dimensional space, its distance from three unique points uniquely identify its coordinates. similarly, for any point in three-dimensional space, its distance from four unique points uniquely identify its coordinates [
35
].

therefore, the two-dimensional projection of all points in a community c
i can be obtained using the 2d projections of the 3-centroids ei <dig> ei <dig> ei <dig> of that community. similarly, the three-dimensional projections of the points in a community can be obtained from the projections of the 4-centroids ei <dig> ei <dig> ei <dig> ei <dig> of the community.

however, a direct translation of the problem to bit-vector decision procedures involves a tradeoff between computational tractability and the accuracy of the obtained projections. large values of ε lead to decision problems that can be readily solved by decision procedures but correspond to poor projections. small ε values represent high-quality distance-preserving projections but create computationally challenging instances of the decision problem.

the sanjay algorithm solves the problem by using an iterative refinement to derive the points r
 <dig> r
 <dig> …,r
d in the lower-dimensional space from the pairwise distances between the points q
 <dig> …,q
d in the higher dimension. the algorithm starts by synthesizing the highest-order bit in the bit-vector representation of these points, and then searches for the other bits.





sanjay is formally illustrated in algorithm  <dig>  the algorithm accepts the pairwise distances d
i,j between every pair of d points as an input. it also accepts two other inputs: the length b of the bit-vector representing the projected points to be synthesized and the number of bits l that should be learned in every iteration of the projection synthesis loop.

in algorithm  <dig>  a point q
i is represented by the bit vector representation pxisar,pyisbr where pxisar is the x-coordinate and pyisbr is the y-coordinate. the pxis and pyis are the parts of the vector that have been calculated by the algorithm, the a
r and b
r are the parts of the vector that have still not been calculated. when all the bits of any vector a
r are  <dig> then we denote it by 1r similarly when all the bits of the vector are  <dig> we denote it by 0r. the bit vector a
r has the property that 0r≤a
r≤1r. so, any point q
i with representation pxisar,pyisbr can take all the values within the square with corners pxis0r,pyis0r,pxis0r,pyis1r,pxis1r,pyis0r,pxis1r,pyis1r.

algorithm  <dig> initializes the length s of the projected points to  <dig>  the algorithm also initializes the length r of the remaining bit-vectors to be synthesized with the value b. this means that the point p
i can take all the values within the square denoted by the points ,,,. this square spans the whole search space, which implies that at the start of the first iteration, the point p
i can be found anywhere in this search space.

a bit-vector decision procedure then searches for a better approximation of the projected point by searching for the next l higher order bits a <dig> a <dig> …,al <dig> in the binary representation of the projection of the points by solving the following decision problem: 
  <dig> bi=pxisaxilar,pyisayilbr−pxjsaxjlcr,pyjsayjldr <dig> 



  <dig> di,j2≤maxa,b,c,d∈{ <dig> }bi≤di,j <dig> 


each iteration of the algorithm breaks down the previous square into 22l sub-squares in which the point p
i can be found and eq.  <dig> using bit vector decision procedure selects the best possible sub-square for the point p
i. at the end of the iteration, each of the points is projected to a sub-square with the diagonal pxisaxil0r−l,pyisayil0r−l and pxisaxil1r−l,pyisayil1r−l, where pxis and pyis denote bit vectors of s bits, axil and ayil denote bit vectors of l bits, and 0r−l is a zero bit vector of r−l bits.

as the algorithm iterates, it builds finer abstractions of the bit-vector representation of the points being projected. when the algorithm has computed b number of bits in the bit-vector representation of the projected points, it assigns the generated bit-vectors to the output r
 <dig> …,r
d.

RESULTS
we performed our experimental evaluation on a 64-core  <dig> ghz amd opteron  <dig> processor with  <dig> gb of ram. we analyzed  <dig> flow cytometry data sets – each of them having  <dig> dimensions.

for each dataset, we used mds  <cit> , random projections  <cit>  and our sanjay technique, to search for two-dimensional projections of  <dig> randomly selected data points from the original high-dimensional data, while seeking to maintain the original inter-point distances. we then computed the maximum and the average distortion of the projections produced by all three techniques.

the comparison between sanjay and mds is presented in tables  <dig> and  <dig>  sanjay performed at least  <dig>  times better and sometimes as much as  <dig>  times better than mds in terms of minimizing the maximum distance distortion among all the projected points. the average distortions due to sanjay were as much as  <dig>  times lower than those produced using the mds approach. figure  <dig> shows the results of using sanjay to project  <dig> randomly chosen points from  <dig> of the  <dig> flow cytometry datasets discussed above.
fig.  <dig> plots of the two dimensional projections synthesized by the sanjay algorithm for  <dig> randomly chosen data points from  <dig> flow cytometry datasets . for these and  <dig> other flow cytometry datasets, table  <dig> lists the maximum distance distortion when 12-dimensional flow cytometry data is projected onto two dimensions, and table  <dig> lists the average distortions





the comparison between sanjay and random projections is shown in tables  <dig>  and  <dig>  when compared with random projections, sanjay performed  <dig>  times better at minimizing the maximum pairwise distortion among points. we envision that such automatically generated visualizations can be used to identify patients whose flow cytometry data indicates a significant number of cells showing abnormal behavior.




CONCLUSIONS
in this paper, we described a new algorithmic technique for automatically generating low dimensional visualizations of high-dimensional flow cytometry data. we used symbolic decision procedures to exhaustively search for low-dimensional projections in a finite, discretized search space. our results show that visualizations synthesized using our technique  were better than those produced by the multi-dimensional scaling and random projections approaches in terms of the maximum distortion in the pairwise distances. the results themselves are not surprising as symbolic decision procedures are often used for solving optimization and search problems.

our experimental results have so far focussed on small fragments of high-dimensional flow cytometry data sets. however, their use in generating such high-fidelity visualizations has not been reported before. in the future, we plan to investigate how our approach can be extended to visualize large data sets while establishing provable bounds on the approximation errors.

from fifth ieee international conference on computational advances in bio and medical sciences miami, fl, usa. 15– <dig> october 2015

the authors would like to thank the us air force for support provided through the afosr young investigator award to sumit jha. the authors acknowledge support from the national science foundation software & hardware foundations # <dig> and exploiting parallelism & scalability # <dig> projects. this material is based upon work supported by the air force office of scientific research under award number fa9550-16-1- <dig> and national science foundation under award number iis- <dig> 

funding
publication charges for this article has been funded by an award from the national science foundation.

availability of data and materials
not applicable.

authors’ contributions
sr and zh obtained the experimental results reported in the paper. nt designed a web front-end for visualizing low-dimensional projections. fh and sj implemented an earlier prototype of the algorithm presented in this paper. jc defined the problem and provided expert inputs on flow cytometry. sp directed the research on data visualization and nd directed the work on complex networks. dt directed the research on data analytics. sr, zh, and fh investigated the use of decision procedures for data visualization. sj directed the research on decision procedures for synthesizing projections of data sets. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.

about this supplement
this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2017: selected articles from the fifth ieee international conference on computational advances in bio and medical sciences : bioinformatics. the full contents of the supplement are available online at https://bmcbioinformatics.biomedcentral.com/articles/supplements/volume-18-supplement- <dig> 

publisher’s note
springer nature remains neutral with regard to jurisdictional claims in published maps and institutional affiliations.
