BACKGROUND
assembling the tree of life, or the phylogeny of all species, is one of the grand challenges in evolutionary biology. supertree methods take a collection of species trees with overlapping, but not identical, sets of taxa and return a "supertree" that contains all taxa found in the input trees . thus, supertrees provide a way to synthesize small trees into a comprehensive phylogeny representing large sections of the tree of life. recent supertree analyses have produced the first complete family-level phylogeny of flowering plants  <cit> , and the first phylogeny of nearly all extant mammals  <cit> . since the main objective of most supertree analyses is to build extremely large phylogenetic trees by solving intrinsically hard computational problems, the design of efficient and effective heuristics is a critically important part of developing any useful supertree method.

ideal supertree methods must combine speed and accuracy. by far the most commonly used supertree method is matrix representation with parsimony . mrp converts a collection of input trees into a binary character matrix, and then performs a parsimony analysis on a matrix representation of the input trees. thus, mrp analyses can use efficient parsimony heuristics implemented in programs such as paup*  <cit>  and tnt  <cit> , making large-scale mrp supertree analyses computationally more tractable. however, the accuracy and performance of mrp are frequently criticized. for example, there is evidence of input tree size and shape biases  <cit> , the results can vary depending on the method of matrix representation  <cit> , and the accuracy of the mrp supertrees are not necessarily correlated with the parsimony score  <cit> . therefore, there is a need to develop alternate methods that share the advantages of mrp but produce more accurate supertrees.

since we rarely know the evolutionary history of a group of organisms with certainty, it is usually impossible to assess the accuracy of a supertree based on its similarity to the true species phylogeny. a more practical way to define the accuracy of a supertree is based on the overall similarity of the supertree to the collection of input trees. there are numerous ways to measure the similarity between input trees and the supertree. the intrinsically hard  <cit>  triplet supertree problem measures this similarity based on the common shared triplets, or rooted, binary, 3-taxon trees that are the irreducible unit of phylogenetic information in rooted trees  <cit> . specifically, the triplet supertree problem seeks a supertree that shares the most triplets with the input trees.

we introduce hill-climbing heuristics for the triplet supertree problem that make it feasible for truly large-scale phylogenetic analyses. hill-climbing heuristics have been effectively applied to other intrinsically difficult supertree problems  <cit> . they search the space of all possible supertrees guided by a series of exact solutions to instances of a local search problem. the local search problem is to find an optimal phylogenetic tree that shares the most number of triplets with the input trees in the neighborhood of a given tree. the neighborhood is the set of all phylogenetic trees into which the given tree can be transformed by applying a tree edit operation. a variety of different tree edit operations have been proposed  <cit> , and two of them, rooted subtree pruning and regrafting  and tree bisection and reconnection , have shown much promise for phylogenetic studies  <cit> . however, algorithms for local search problems based on spr and tbr operations, especially on rooted trees, are still in their infancy. to conduct large-scale phylogenetic analyses, there is much need for effective spr and tbr based local search problems that can be solved efficiently.

in this work we improve upon the best known  solutions for the spr and tbr local search problems by a factor of n and n <dig>  respectively. this is especially desirable since standard local search heuristics for the triplet supertree problem typically involve solving several thousand instances of the local search problem. we demonstrate the performance of our new triplet heuristics in a comparative analysis with other standard supertree methods.

related work
triplet supertree problem
the triplet supertree problem makes use of the fact that every rooted tree can be equivalently represented by a set of triplet trees  <cit> . a triplet tree is a rooted fully binary tree over three taxa. thus, a triplet-similarity measure can be defined between two rooted trees that is the cardinality of the intersection of their triplet presentations. this measure can be extended to measure the similarity from a collection of rooted input trees to a rooted supertree, by summing up the triplet-similarities for each input tree and the supertree. the triplet supertree problem is to find a supertree that maximizes the triplet-similarity for a given collection of input trees. figure  <dig> illustrates the triplet supertree problem.

hill-climbing heuristics
we introduce hill-climbing heuristics to solve the triplet supertree problem. hill-climbing heuristics have been successfully applied to several intrinsically complex supertree problems. in these heuristics a tree graph is defined for the given set of input trees and some, typically symmetric, tree-edit operation. the nodes in the tree graph are the phylogenetic trees over the overall taxon set of the input trees. an edge adjoins two nodes exactly if the corresponding trees can be transformed into each other by the tree edit operation. the cost of a node in the graph is the measurement from the input trees to the tree represented by the node under the particular supertree problems optimization measurement. for the triplet supertree problem, the cost of a node in the graph is the triplet-similarity from the input trees to the tree represented by the node. given a starting node in the tree graph, the heuristic's task is to find a maximal-length path of steepest ascent in the cost of its nodes and to return the last node on such a path. this path is found by solving the local search problem for every node along the path. the local search problem is to find a node with the maximum cost in the neighborhood  of a given node. the neighborhood searched depends on the edit operation. edit operations of interest are spr and tbr  <cit> . we defer the definition of these operations to the next section. the best known run times  for the spr and tbr based local search problems under the triplet-similarity measurement are o and o respectively, where k is the number of input gene trees and n is the number of taxa present in the input gene trees.

contribution of the manuscript
we introduce algorithms that solve the local spr and tbr based search problems for our triplet supertree heuristics in times o and o respectively, with an initial pre-processing time of o. these algorithms allow true large-scale phylogenetic analyses using hill-climbing heuristics for the triplet supertree problem. finally, we demonstrate the performance of our spr and tbr based hill-climbing heuristics in comparative studies on two large published data sets.

methods
initially, for each possible triplet over the set of all taxa we count and store the frequency displayed by all the input trees in o time. then, for each local search problem, we use dynamic programming to efficiently pre-process necessary triplet counts in o time. by exploiting the structural properties of spr and tbr related to triplet-similarity, we are able to use these triplet counts to compute the differences in triplet-similarity for all spr and tbr neighborhoods, each in o time.

basic definitions, notations, and preliminaries
in this section we introduce basic definitions and notations and then define preliminaries required for this work. for brevity the proofs of lemmas 2– <dig> are omitted, but available on request.

basic definitions and notations
a tree t is a connected graph with no cycles, consisting of a node set v and an edge set e. t is rooted if it has exactly one distinguished node called the root which we denote by ro.

let t be a rooted tree. we define ≤t to be the partial order on v where x ≤t y if y is a node on the path between ro and x. if x ≤t y we call x a descendant of y, and y an ancestor of x. we also define x <t y if x ≤t y and x ≠ y, in this case we call x a proper descendant of y, and y a proper ancestor of x.

the set of minima under ≤t is denoted by le and its elements are called leaves. if {x, y} ∈ e and x ≤t y then we call y the parent of x denoted by pat and we call x a child of y. the set of all children of y is denoted by cht. if two nodes in t have the same parent, they are called siblings. the least common ancestor of a non-empty subset l ⊆ v, denoted as lcat, is the unique smallest upper bound of l under ≤t.

if e ∈ e, we define t/e to be the tree obtained from t by identifying the ends of e and then deleting e. t/e is said to be obtained from t by contracting e. if v is a vertex of t with degree one or two, and e is an edge incident with v, the tree t/e is said to be obtained from t by suppressing v.

the restricted subtree of t induced by a non-empty subset l ⊆ v, denoted as t|l, is the tree induced by l where all internal nodes with degree two are suppressed, with the exception of the root node. the subtree of t rooted at node y ∈ v, denoted as ty, is the restricted subtree induced by {x ∈ v: x ≤t y}.

t is fully binary if every node has either zero or two children. throughout this paper, the term tree refers to a rooted fully binary tree.

the triplet supertree problem
we now introduce necessary definitions to state the triplet supertree problem. a triplet is a rooted binary tree with three leaves. a triplet t with leaves a, b, and c is denoted ab|c if lcat is a proper descendant of the root. note that we do not distinguish between ab|c and ba|c. the set of all triplets of a tree t, denoted as tr, is {ab|c : t|{a, b, c} = ab|c}. the set of common triplets between two trees t <dig> and t <dig>  denoted as s, is tr ∩ tr. a profile p is a tuple of trees , we extend the definition of leaf set to profiles as le=∪i=1nle. let p be a profile, we call t* a supertree of p if le = le.

we are now ready to define the triplet supertree problem .

definition  <dig> . given a profile p =  and a supertree t* of p, we define the triplet-similarity score s=∑i=1n|s|.

problem  <dig> . given a profile p, find a supertree t* that maximizes s. we call any such t* a triplet supertree.

theorem  <dig> . the triplet supertree problem is np-hard.

local search problems
here we first provide definitions for the re-root , tbr, and spr edit operations and then formulate the related local search problems. figures  <dig> and  <dig> illustrate the rr and tbr edit operations respectively.

definition  <dig> . let t be a tree and x ∈ v. rrt is defined to be the tree t if x = ro. otherwise, rrt is the tree that is obtained from t by  suppressing ro, and  subdividing the edge {pat, x} by a new root node. we define the following extension:

 rrt = ∪x∈v{rrt}. 

let x ≤t v, we also define a partial rr operation rrt by replacing tv with rrtv.

definition  <dig> . for technical reasons we first define for a tree t the planted tree pl that is the tree obtained by adding an additional edge, called root edge, {r, ro} to e.

let t be a tree, e =  ∈ e, and x, y be the connected components that are obtained by removing edge e from t where v ∈ x and u ∈ y. we define tbrt for x ∈ x and y ∈ y to be the tree that is obtained from pl by first removing edge e, then replacing the component x by rrx, and then adjoining a new edge f between x' = ro) and y as follows:

 <dig>  create a new node y' that subdivides the edge , y).

 <dig>  adjoin the edge f between nodes x' and y'.

 <dig>  suppress the node u, and rename x' as v and y' as u.

 <dig>  contract the root edge.

we say that the tree tbrt is obtained from t by a tree bisection and reconnection  operation that bisects the tree t into the components x, y and reconnects them above the nodes x, y.

we define the following extensions for the tbr operation:

 <dig>  tbrt = ∪y∈y tbrt

 <dig>  tbrt = ∪x∈x tbrt

 <dig>  tbrt = ∪∈e tbrt

an spr operation for a tree t can be briefly described through the following steps:  prune some subtree s from t,  add a root edge to the remaining tree t',  regraft s into an edge of the remaining tree t',  contract the root edge. for our purposes we define the spr operation as a special case of the tbr operation.

definition  <dig> . let t be a tree, e =  ∈ e, and x, y be the connected components that are obtained by removing edge e from t where v ∈ x and u ∈ y. we define sprt for y ∈ y to be tbrt. we say that the tree sprt is obtained from t by a subtree prune and regraft  operation that prunes subtree tv and regrafts it above node y.

we define the following extensions of the spr operation:

 <dig>  sprt = ∪y∈y sprt

 <dig>  sprt = ∪∈e sprt

problem  <dig> ). given a profile p and a supertree t of p, find a tree t* ∈ tbrt such that s=maxt′∈tbrts

problem  <dig> ). given a profile p, a supertree t of p, and  ∈ e, find a tree t* ∈ tbrt such that s=maxt′∈tbrts

the problems spr scoring  and spr-restricted scoring  are defined analogously to the problems tbr-s and tbr-rs respectively.

further, we observe that to solve any of these four local search problems, it is sufficient to find a tree within the neighborhood that gives the maximum increase on s, without calculating the value of each s itself. with this observation, it is useful to give the following definition.

definition  <dig>  let p be a profile, t <dig> and t <dig> be two supertrees of p, we define the score difference function, denoted as Δp, to be s - s.

solving the spr-rs and spr-s problems
we first show how to solve the spr-rs problem. extending on this solution we introduce a new algorithm for the spr-s problem.

solving the spr-rs problem
given a profile p, a supertree t of p, and  ∈ e, we compute Δp for each t' ∈ sprt by first pruning and regrafting tv to ro and compute the score differences for each "move-down" operation, then traverse t in pre-order to obtain the tree that gives the maximum score difference. we first give a definition that helps us describe a single "move-down".

definition  <dig> . let t be a tree and v ∈ v, an immediate triplet induced by v, denoted as yz ▷◁ v, is a triplet yz|v where there exists nodes a, b ∈ v such that pat = pat = b and pat = pat = a.

algorithm  <dig> algorithm for the spr-rs problem

1: procedure spr-rs)

input: a profile p = , a supertree t of p, and  ∈ e

output: t* ∈ sprt, and Δp

2:   r ← ro

3:   t^ ← sprt

4:   call movedownandcompute

5:   traverse the tree tr in pre-order to compute Δp for each t' ∈ sprt using the values computed by movedownandcompute

6:   t* ← t' ∈ sprt such that Δp=maxt″∈sprtΔp

7:   d ← Δp - Δp

8:   return 

9: end procedure

10: procedure movedownandcompute

input: a profile p, a tree t, and v ∈ v

11:   yz ▷◁ v ← the immediate triplet induced by v in t

12:   for all t ∈ {y, z} do

13:      t' ← sprt

14:      compute and store Δp

15:      call movedownandcompute

16:   end for

17: end procedure

it can be easily seen that algorithm  <dig> is correctly solving the spr-rs problem.

solving the spr-s problem
algorithm  <dig> algorithm for the spr-s problem

1: procedure spr-s

input: a profile p = , a supertree t of p

output: t* ∈ sprt, and Δp

2:   for all  ∈ e do

3:      store the value of spr-rs)

4:   end for

5:    ← the stored value of spr-rs calls that has the maximum score increase by traversing the tree t in post-order

6:   return 

7: end procedure

algorithm  <dig> gives a trivial extension of algorithm  <dig> to solve the spr-s problem.

computing Δp efficiently
algorithm  <dig> assumed the computation of Δp for each move-down operation . in this section we show how to compute each Δp efficiently by exploiting structural properties related to the triplet-similarity. we begin with some useful definitions.

definition  <dig>  let a, b, c be pairwise mutual exclusive leaf sets, we extend the triplet notation by ab|c = {ab|c : a ∈ a, b ∈ b, c ∈ c}. further, let u, v, w be three nodes in a tree t having no ancestral relationships, define uv|tw = le le| le

definition  <dig>  the boolean value of a statement ϕ, denoted as ⟦ϕ⟧, is  <dig> if ϕ is true,  <dig> otherwise.

definition  <dig>  given a profile p =  and distinct a, b, c ∈ le, we define the triplet summation function by

 σp=∑i=1n〚ab|c∈tr〛 

let a, b, c ⊆ le be pairwise mutual exclusive leaf sets, we extend the triplet summation function by

 σp=∑a∈a,b∈b,c∈cσp 

further, let u, v, w be three nodes in a tree t having no ancestral relationships, we define

 σp, t = σp 

lemma  <dig>  let t be a tree and yz ▷◁ v be an immediate triplet induced by a node v ∈ v. if t' = sprt, then

  tr = \yz|tv) ∪ vy|tz 

 proof. let a, b, c ∈ le, we consider the following cases:

 <dig>  if any one of a, b, c is not in the subtree tpat, then t'|{a, b, c} = t|{a, b, c}. since both yz|tv and vy|tz only contain triplets formed under the subtree tpat, t|{a, b, c} and only this triplet resolution of {a, b, c} is in both sides of equality.

 <dig>  consider three subtrees tv, ty, tz. if a, b, c are all in one of the subtree, then since the subtrees tv, ty, tz do not change by the spr operation, t'|{a, b, c} = t|{a, b, c}. since both yz|tv and vy|tz only contain triplets that are formed by one leaf from each of tv, ty, and tz subtrees, t|{a, b, c} and only this triplet resolution of {a, b, c} is in both sides of equality.

 <dig>  consider three subtrees tv, ty, tz. if two leaves of {a, b, c} are in one subtree and the other leaf is in another subtree, and suppose wlog that {a, b} are in one subtree, then we observe that lcat <t lcat and lcat' <t' lcat', so t'|{a, b, c} = t|{a, b, c} = ab|c.

also, as in case  <dig>  both yz|tv and vy|tz does not contain triplet formed by {a, b, c}, so t|{a, b, c} and only this triplet resolution of {a, b, c} is in both sides of equality.

 <dig>  if each of tv, ty, and tz contains exactly one leaf in {a, b, c}, and suppose wlog that a ∈ le, b ∈ le, and c ∈ le. then t|{a, b, c} = bc|a and t'|{a, b, c} = ab|c. also we observe that bc|a ∈ yz|tv and ab|c ∈ vy|tz, therefore rhs, and hence both sides contain ab|c and only this resolution of {a, b, c}.

lemma  <dig>  given a profile p and a supertree t of p, let yz ▷◁ v be an immediate triplet induced by a node v ∈ v. if t' = sprt, then

  Δp  = σp, t - σp, t 

lemma  <dig>  given a profile p and a supertree t of p, let distinct v, b ∈ v such that v ≰t b, b ≰t v, and cht = {y, z}. if t <dig> = sprt and t <dig> = sprt, then

  Δp = σp, t - σp, t 

lemma  <dig>  given a profile p and a supertree t of p, let v, b ∈ v such that pat ) ≤t b, and let ∏ = {x ∈ v: v <t x <t b}. define c = ∪x∈∏ {c∈cht:v≰tc}. let cht = {y, z}, and wlog suppose y ∉ ∏. if t <dig> = sprt and t <dig> = sprt, then

  Δp=∑x∈c 

equations  and  provide computations for all spr-rs neighborhoods . we now show how to compute them efficiently.

algorithm  <dig> algorithm to compute triplet summation function

1: procedure preprocesstripletsum

input: a profile p = 

2:   initialize all values of σp to 0

3:   for i =  <dig> to n do

4:      for all u ∈ v in post-order, u ∉ le do

5:         {v, w} ← cht

6:         for all {x, y} ∈ le, z ∈ le do

7:            increment σp

8:         end for

9:         for all {x, y} ∈ le, z ∈ le do

10:            increment σp

11:         end for

12:      end for

13:   end for

14: end procedure

given a profile p = , we start by computing the triplet summation function σp for all triplets, as shown by algorithm  <dig> 

algorithm  <dig> algorithm to compute extended triplet summation function

1: procedure preprocessextendedtripletsum

input: a profile p = , a supertree t of p

2:   for all u ∈ v in post-order do

3:      for all v ∈ v in post-order after u, lcat ∉ {u, v} do

4:         for all w ∈ v in post-order after v, lcat ∉ {u, v, w} do

5:            if w ∈ le then

6:               if v ∈ le then

7:                  if u ∈ le then

8:                     σp, t ← σp

9:                     σp, t ← σp

10:                     σp, t ← σp

11:                  else

12:                     {u <dig>  u2} ← cht

13:                     σp, t ← σp, t + σp, t

14:                     σp, t ← σp, t + σp, t

15:                     σp, t ← σp, t + σp, t

16:                  end if

17:               else

18:                     {v <dig>  v2} ← cht

19:                     σp, t ← σp, t + σp, t

20:                     σp, t ← σp, t + σp, t

21:                     σp, t ← σp, t + σp, t

22:                  end if

23:                  else

24:                     {w <dig>  w2} ← cht

25:                     σp, t ← σp, t + σp, t

26:                     σp, t ← σp, t + σp, t

27:                     σp, t ← σp, t + σp, t

28:                  end if

29:               end for

30:            end for

31:         end for

32: end procedure

next, we compute the extended triplet summation function σp, t, for all nodes u, v, w in t having no ancestral relationships, as shown by algorithm  <dig> 

algorithm  <dig> algorithm to compute score difference function

1: procedure preprocessscoredifference

input: a profile p = , a supertree t of p

2:   for all v ∈ v do

3:      for all  ∈ e: b ≰t pat do

4:         let cht = {y, z}

5:         let t <dig> = sprt, t <dig> = sprt

6:         if v ≤t b then

7:            for all p ∈ v: v <t p <t b do

8:               let x ∈ cht  where v ≰t x

9:               Δp ← Δp + σp, t - σp, t

10:            end for

11:         else

12:            Δp ← σp, t - σp, t

13:         end if

14:      end for

15:   end for

16: end procedure

finally, we compute the score difference function Δp for all v ∈ v and  ∈ e where b ≰t pat such that t <dig> = sprt and t <dig> = sprt. this is shown by algorithm  <dig> 

time complexity
we describe the time complexity for our solution for the spr-s problem. first, we run algorithm  <dig> once for the entire heuristic run, which takes o where k is the number of input trees and n is the number of taxa present in the input trees. then, for each spr-s problem, we begin by pre-processing necessary counts using algorithm  <dig> and  <dig>  each takes time o. these pre-processed computations allow algorithm  <dig> to run in o time. finally, algorithm  <dig> issues o calls to algorithm  <dig>  so overall it takes o time. including the pre-processing steps, we see that solving the spr-s problem takes o time, with an expense of o at the beginning of the entire heuristic run.

solving the tbr-rs and tbr-s problems
we extend our solutions of spr-rs and spr-s problems to solve tbr-rs and tbr-s problems.

solving the tbr-rs problem
we observe that a tbr operation can be viewed as an spr operation followed by an rr operation. we exploit this structural property further and establish some lemmas which helps us compute the score differences for all tbr operations in the tbr-rs neighborhood.

lemma  <dig>  given a profile p, a supertree t of p, and a valid tbr operation on t where t' = tbrt, then

  Δp = Δp) + Δp) 

lemma  <dig> implies that given a subtree, we can find the best tbr-rs neighborhood by finding the best spr-rs neighborhood and apply the best re-rooting for the subtree regardless of which spr operation was chosen. further, we note that rr is a special case of spr operation by the following lemma.

lemma  <dig>  given a profile p and a supertree t of p, let xy ▷◁ z be an immediate triplet induced by a node z ∈ v and pat = v, then

  rrt = sprt 

this means that we can reuse lemmas  <dig>   <dig>   <dig> and their corresponding algorithms to compute the score differences of all move-downs in terms of re-rooting. hence, given a subtree the algorithm would first compute the best re-rooting and its score difference, then simply join this rr operation with the best spr operation in the spr-rs neighborhood.

solving the tbr-s problem
similar to solving the spr-s problem, we can solve the tbr-s problem given the solution to the tbr-rs problem in the previous section.

time complexity
we perform the same steps to solve the spr-s problem, and additionally by utilizing lemmas  <dig> and  <dig> we compute and store the best re-rooting for each subtree, which takes o time. overall, solving the tbr-s problem still takes o time.

RESULTS
we examined the performance of our new triplet heuristics by comparing with two other supertree methods, mrp and modified min-cut , using published data sets from marsupials  <cit>  and cetartiodactyla  <cit> . mrp is the most widely applied supertree method  <cit> . however, mrp supertrees, like triplet supertrees, are intrinsically hard to compute. therefore they are estimated using heuristics, which do not guarantee an optimal solution. in contrast, mmc supertrees can be computed exactly in polynomial time, and therefore, it has been suggested that mmc will be useful for building very large phylogenies  <cit> . we evaluated each of the supertree methods using the triplet-similarity and the maximum agreement subtree  similarity  <cit>  between the input trees and the supertrees. furthermore, we measured the parsimony score of each computed supertree based on its binary matrix representation. for the marsupial data set, we also compared our results to published results using the max cut  supertree algorithm  <cit> . mxc is a modification of mmc that provides a heuristic approach based on the triplet supertree problem. there is currently no publicly available implementation of mxc , and therefore, we were unable to apply it to the other data set.

triplet supertrees were constructed using the programs th and th that implement hill-climbing heuristics based on our efficient local search algorithms for spr and tbr branch swapping respectively. mrp supertrees were constructed using the parsimony hill-climbing heuristic implemented in paup*  <cit>  with tbr branch swapping. we found very little difference in the results of mrp analyses when we collapsed zero-length branches and when we forced all mrp trees to be binary. we report the results from analyses that collapsed zero-length branches. all hill-climbing analyses were executed on  <dig> initial random addition sequence replicate trees and saving a single best tree per replicate. mmc supertrees were constructed using a program  <cit>  supplied by rod page.

our new triplet heuristics seek the supertrees with the maximum number of identical triplets to the collection of input trees, and indeed, we find they both outperform all other methods based on triplet-similarity in all data sets . furthermore, all the triplet supertree analyses were completed within  <dig> minutes using a kensington quad-core  <dig>  ghz linux-based machine, demonstrating that our heuristics make the triplet supertree problem extremely tractable for large-scale analyses. both triplet heuristics and the mrp heuristic perform much better than the exact mmc algorithm, based on triplet-similarity and mast-similarity. the mxc algorithm suffers from the lack of an available implementation; however, in our single comparison with the published results, this algorithm does not perform as well as either the mrp heuristic or our triplet heuristics.

marsupial  <cit> 
 <dig> input trees
cetartiodactyla  <cit> 
 <dig> input trees
although the difference in the triplet-similarity score between the triplet heuristics and the mrp heuristic is always less than 2% , due to the extremely large-number of triplets, even these apparently small differences represent large differences in tree topologies. for example, in the marsupial data set, the  <dig> % difference in triplet-similarity represents over  <dig>  triplets. the comparison of the triplet heuristics and the mrp heuristic also demonstrates that optimizing the parsimony score of the matrix representation of input trees is not directly correlated with optimizing the triplet-similarity of input trees and the supertree; supertrees with smaller  parsimony scores have lower  triplet-similarity .

our experiments also demonstrate that the supertree with the best triplet-similarity is not necessarily best in terms of mast-similarity. in fact, mrp outperforms the triplet heuristics in terms of the mast-similarity to the input trees . it is not intuitive that a parsimony analysis on a matrix representation of the input trees  is a valid or useful approach to infer the most accurate supertrees . the popularity of mrp is probably based more on the availability of programs that implement fast heuristics rather than a belief that parsimony on a matrix representation of input trees is the ideal supertree optimality criterion. however, mrp performs well in simple simulation experiments  <cit>  and in analyses of empirical data , and it clearly can be an effective supertree method. since it is not obvious whether it is better to find supertrees that maximize accuracy in terms of triplet-similarity, mast-similarity, or some other tree similarity measure like the robinson-foulds distance, we suggest that the triplet heuristics are an informative complement to the mrp method. both approaches can provide supertrees that represent different, and equally valid, perspectives on accuracy.

CONCLUSIONS
despite the inherent complexity of the triplet supertree problem, we have shown that it can be addressed effectively by using hill-climbing heuristics. we introduced efficient algorithms for standard local search problems that are solved by these heuristics. our algorithms greatly improve on the best known  solutions for these search problems. this in turn makes hill-climbing heuristics for the triplet supertree problem applicable for large-scale phylogenetic studies.

we demonstrate the performance of an implementation of our hill-climbing heuristics. in analyses of two empirical data sets, our triplet heuristics quickly found supertrees that contained more triplets in common with the input trees than supertrees found by mrp, mmc, or mxc. these results demonstrate not only that our heuristics for the triplet supertree problem make it a valuable alternative to standard supertree methods. they also demonstrate that developing new supertree heuristics that directly seek to optimize the accuracy of the supertree with respect to the input trees can enhance our ability to infer with accuracy large sections of the tree of life.

the algorithmic ideas developed in this work might set base for theoretical properties that identifies a much broader class of local search objectives, which can be solved more efficiently. this could lead to other powerful supertree heuristics. however, it remains an open problem if our solutions for the spr and tbr based local search problems for the triplet supertree problem can be improved further.

competing interests
the authors declare that they have no competing interests.

authors' contributions
htl designed the triplet heuristics, implemented programs th and th, and carried out the experiments. jgb led the analysis of the experimental results. oe inspired the triplet heuristics and supervised the project. all authors contributed to the writing of this manuscript, and have read and approved the final manuscript.

