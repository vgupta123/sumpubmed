BACKGROUND
recent years have seen the emergence of the field of phyloinformatics  <cit> . at a practical level this is research where much of the organizational challenge lies in managing data, including character state matrices or multiple sequence alignments, phylogenetic trees and the relationships between these, and metadata, including cross references to molecular sequence databases, taxonomies, character state descriptions, biodiversity data, and literature references. at the nexus of the relationships between character state data and phylogenies lies the operational taxonomic unit , i.e. the biological entity on which observations are made  and which is placed as a terminal node in a phylogeny.

in the course of a phyloinformatic analysis, data and metadata are collected or generated, transformed, filtered, analyzed and summarized before they can be interpreted to answer meaningful biological questions. based on first principles of good science such steps should be reproducible; and, in practice, analysis steps often need to be redone by the researcher multiple times  <cit>  and are too error-prone, tedious and time-consuming to perform manually. hence, environments that allow such analyses to be scripted programmatically can greatly improve the efficiency and reproducibility of phyloinformatics.

some of these facilities are provided by dendropy  <cit> , ete  <cit>  and biopython  <cit>  for the python programming language, by the ape package  <cit>  for the r environment, and by bioperl  <cit>  for the perl programming language. however, some of these , while strong on tree shape simulation and analysis, do not integrate easily in workflows that include external software for sequence alignment and phylogenetic inference or database or web service access, while others  are strong in that respect but are lacking in tree shape simulation and analysis. in addition, none of these toolkits have a facility for managing the syntax and semantics of metadata. this can cause confusion when integrating and sharing metadata from disparate sources. for example, if an otu is annotated with a taxonomic identifier, where  does the identifier come from? what is the relation between the otu and the database record ?

the bio::phylo toolkit addresses these issues, allowing researchers to read and write previously unsupported data formats, generate and transform data in a variety of ways, compute heretofore unimplemented topological indices, apply heretofore unavailable sampling and resampling algorithms and visualize the results in publication-ready graphics, while allowing phylogenetic knowledge to be managed, represented and shared in ways that preserve its meaning and its relation to metadata, regardless of its origin or context.

due to its implementation in the perl programming language and its compatibility with the bioperl  <cit>  toolkit, the operations supplied by bio::phylo are easily integrated in larger analysis workflows that take advantage of the operations supplied by bioperl and that interface with command-line executables and web services, e.g. for database access or for computationally intensive analysis steps. however, bioperl is very large and for many users difficult to install, whereas bio::phylo has no required dependencies. this makes deployment much easier for users who only require bio::phylo's functionality-orientated towards phyloinformatics per se-but not bioperl's.

implementation
data and object model
bio::phylo's design follows the data model shown in figure  <dig>  a phylogenetic project  contains zero or more sets of trees , zero or more sets of otus  and zero or more character state matrices . each forest object and each character state matrix may refer to a set of otus; however, this is not compulsory throughout the life cycle of these objects. for example, a tree parsed from a simple newick  <cit>  tree description contains terminal nodes-which may imply associated otus-but otus for these terminal nodes might only be instantiated when the tree is used in a context that explicitly requires them, such as when writing the tree to a file format that uses the otu concept .

each forest object contains zero or more tree  objects, which contain zero or more nodes . each of these nodes may have a reference to an otu  object, which, conversely, may have references to many nodes. for example, if a nexus file with multiple trees for the same set of species is read, the terminal nodes for the same species in the different trees will all hold a reference to the same otu object, and that otu object will hold references to all terminal nodes that reference it.

each character state matrix contains zero or more datum  objects, which represent a character state observation. an observation could be a single character state-such as a morphological state-or a character state sequence, such as a dna, rna, amino acid, restriction site, categorical state or continuous state sequence. in addition to holding raw character state symbols, datum objects also manage the semantics of the data, e.g. which symbols are ambiguity symbols for sets of others  including "missing"  and "gap" . each of these datum objects may reference an otu object, which conversely may reference many datum objects.

otu objects are used in bio::phylo to remap the relationships between tree nodes and datum objects from many-to-many to one-to-many from otu to both nodes and data. this conceptualization is also implied in the nexus format and in software projects oriented towards data-management and data-exploration built on top of nexus such as mesquite  <cit>  and treebase  <cit> . similarly, containers of otu objects  are implemented as objects from which one-to-many relationships exist to character state matrices and to sets of trees.

to implement the functionality implied by the data model  and described here, bio::phylo has been designed in object-oriented perl  <dig>  making use of abstractions and helper classes that have been omitted here for clarity, but which are documented exhaustively in the software release .

nexml
all phylogenetic data objects in bio::phylo can be read from, and written to, nexml http://www.nexml.org, a new xml format that is conceptually similar to nexus. the data objects all can hold references to zero or more bio::phylo::nexml::meta objects, which represent rdfa  <cit>  annotations. this allows bio::phylo objects to be serialized as the subjects of "triples"  <cit>  where the predicates and objects can be obtained from any controlled vocabulary or ontology , providing a flexible, semantic web-ready facility to attach metadata to phylogenetic data objects.

nexml represents a considerable advance in the structured representation of phylogenetic data because these rdfa annotations allow phylogenetic data objects to be enriched with flexible predicates and objects, yet constrains these to explicit definitions in controlled vocabularies or ontologies. this is different from phyloxml annotations and the nexus "notes block" because the predicates  in those formats are based on convention, not explicit definition, which is a situation that can cause ambiguities when integrating data from multiple sources.

a simple example may demonstrate this point: consider reading a file, matching the otu names read from that file against names in the ncbi taxonomy, then sharing the results of this process. there is no non-ambiguous way to express in machine-readable form in nexus or phyloxml why and how, for example, homo sapiens became associated with the identifier  <dig>  using nexml with rdfa annotations, it can be expressed that the otu with the name homo sapiens  has a match, expressed using, for example, the closematch predicate from the skos vocabulary, with the taxonomy database record identified by http://purl.uniprot.org/taxonomy/ <dig>  the definition of closematch in the skos vocabulary then clarifies unambiguously what the relationship is between the subject  and the object . the key difference between this approach and others in use in phyloinformatics is the usage of formally defined predicates from any knowledge representation to describe the relation between objects and their annotations. 

due to nexml's otu-oriented data model, bio::phylo, which has a similar model, is a suitable target for nexml i/o, whereas bioperl, which lacks a notion of otus, is not. in addition, nexml and bio::phylo support categorical and continuous character states, whereas bioperl does not. by implementing bio::phylo with its level of support for nexml, complex, richly annotated phyloinformatic data objects become amenable to processing in scriptable workflows while persisting more of their context and provenance than heretofore possible.

RESULTS
object manipulation and transformation
bio::phylo provides a toolkit for the manipulation of rich phylogenetic data objects. the objects can be annotated and labeled, and have any number of arbitrary other objects attached to them. the objects can be traversed in various ways, including depth-first, breadth-first or level-order traversal of tree shapes and through iterator or visitor access  <cit>  to all objects that are lists of things . traversals can move from node objects to the otu objects that define them  and from otu objects to character state observations that were made for the otu objects . the objects can be tested for various predicates, e.g. whether a tree is rooted, whether it is binary, whether it is ultrametric; whether a set of tips is monophyletic with respect to a given outgroup, whether a set of tips forms a complete clade; whether a node object is a tip, an internal node or the root node; whether it is the ancestor, parent, sibling, child or descendant of another node.

using these traversal methods and tests, simple calculations are easily implemented. bio::phylo provides a number of these, e.g. the sum of all branch lengths on a tree; the average, minimum, maximum and cumulative root-to-tip path length; the amount of redundancy . in addition, a number of more sophisticated tree shape methods useful for biodiversity informatics is provided:

▪ calc_ltt - calculates lineage-through-time points  <cit> .

▪ calc_symdiff - calculates the symmetric difference metric  <cit>  between two trees.

▪ calc_fiala_stemminess - calculates stemminess measure  <cit> .

▪ calc_rohlf_stemminess - calculates stemminess measure  <cit> .

▪ calc_imbalance - calculates colless's coefficient of tree imbalance  <cit> .

▪ calc_gamma - calculates γ-statistic  <cit> .

▪ calc_i <dig> - calculates i <dig> imbalance  <cit> .

▪ calc_fp - calculates the fair proportion value  <cit>  for each tip.

▪ calc_es - calculates the equal splits value  <cit>  for each tip.

▪ calc_pe - calculates the pendant edge  <cit>  value for each tip.

▪ calc_shapley - calculates the shapley  <cit>  value for each tip.

likewise, calculations applicable to sets of trees  and to character state matrices  are provided.

bio::phylo also provides methods for the transformation of phylogenetic data objects. for example, phylogenetic trees can be re-rooted, pruned or ultrametricized, nodes can be collapsed or inserted, branch lengths can be exponentiated or log-transformed. sets of trees can be summarized in consensus trees or represented as pseudo-character-state mrp  <cit>  matrices. character state data can be manipulated directly, or transformed through bootstrapping and jackknifing  <cit> .

input/output
a number of file formats is used for phylogenetic data. the bio::phylo::io module supports the most commonly used ones: trees can be written and read in newick format  <cit> ; projects, taxa, trees and matrices can be written and read in nexus format and in nexml http://www.nexml.org; character state matrices can be read from csv, fasta, phylip and tab-delimited files; trees can be read from the tree of life web project  <cit>  xml service; trees and character state matrices can be written in the legacy format for the continuous  <cit> , discrete  <cit>  and multistate  <cit>  programs and in phylip format

if bioperl  <cit>  is present, the wealth of data formats supported by bio::seqio, bio::alignio and bio::treeio is also available because bioperl objects can be converted to bio::phylo objects , and bio::phylo objects can be passed to the write methods of bioperl. however, different from bioperl is bio::phylo's concept of a "project" object, which is a collection of fundamental data objects  that reference each other. whereas in bioperl, nexus files are treated as flat containers of records of the same type , bio::phylo can optionally treat nexus and nexml files as containing a project of related data of different types, in the same way as the informatics-oriented applications mesquite  <cit>  and treebase  <cit>  do. the compatibility with bioperl is optional: bio::phylo doesn't require bioperl to be installed or vice versa , but if bio::phylo detects bioperl's presence, it enables a compatibility mode to make trees, nodes, character state matrices and sequences implement the interfaces that bioperl defines.

beyond bioperl, interaction with other toolkits  and combination in larger workflows is confined to the extent to which they can read the same data formats as bio::phylo. this functionality is usually confined to nexus and newick file exchange, although dendropy has support for nexml as well, allowing more fine-grained data and metadata sharing, and similar functionality is in development for bioruby  <cit> .

visualization
bio::phylo can draw trees where only the branching order and direction, but not the branch lengths are significant , as trees with branch lengths proportional to time or some other metric such as inferred change  or as trees where branch lengths and distance are significant, but no direction or nesting is implied . these trees can be drawn with rectangular, curved or diagonal branches. branch thickness, branch color, node color, node radius and node pie diagrams  can all be set per node and branch individually. clades can be represented in a view that shows them collapsed into triangles whose width and color can be set per clade individually. this programmatic access to the visualization of individual objects in large trees allows users to superimpose their data on trees in a variety of ways .

the visualizations produced by the tree drawer module can be serialized to various bitmap formats  and vector formats , some of which can be used to create interactive graphics and animations . using the xml-based svg output format, the resulting serialization can be further processed programmatically, as was done by the authors of a recent study  <cit>  that used bio::phylo . any serialization can of course be manipulated further by hand using vector drawing or graphics editing software to prepare it for publication; however, the most useful application of bio::phylo's tree drawing capabilities is probably in the creation of interactive graphics for the web, e.g. within the dynamic server environment of a web application that serves trees from a database.

sampling and simulation
bio::phylo can simulate tree topologies under the following models of cladogenesis: pure birth under the model of hey  <cit> ; pure birth under the yule model  <cit> ; equiprobable topologies ; constant rate birth-death, evolving speciation rate and beta binomial models implemented using novel algorithms  <cit> . the tree sampling interface in bio::phylo can also be used to sample from arbitrarily complex user specified models using the algorithms in  <cit> .

CONCLUSIONS
bio::phylo is a software library written in perl  <dig> that currently consists of about  <dig>  lines of code spread out over  <dig> software modules. a manual that is part of the release provides the principal documentation. on a command line, this manual can be displayed by issuing the command perldoc bio::phylo::manual. . in addition, more documentation - about  <dig>  lines as of revision 1204-can be found as embedded documentation in the individual classes of the release. for example, to learn more about reading and writing phylogenetic data, issue the command perldoc bio::phylo::io. bio::phylo uses inheritance to a great extent, such that any one object may inherit additional methods from a number of super classes. in such cases, this will be noted in the "see also" section of that class's documentation. the bio::phylo documentation system rewards the methodical reader who follows these document links.

because bio::phylo implements the same interfaces in its core data objects, it is optionally compatible with bioperl  <cit> , filling a niche left open for phyloinformatic analysis in perl. for example, the authors are aware of bio::phylo having been used for phylogenomic research  <cit> , cladogenesis simulations  <cit> , and the evaluation of biodiversity metrics  <cit> . similar to bio::nexus  <cit> , bio::phylo implements more exhaustive implementation of the nexus data format than bioperl does, however, bio::nexus's functionality and use cases are confined to input and output in that format, omitting the object manipulation, annotation, visualization and sampling and simulation features discussed here.

in comparison with open source projects for phyloinformatics implemented in other programming languages, bio::phylo most closely resembles the ape toolkit for r  <cit>  and the dendropy toolkit for python  <cit> , however, the language environments of these three projects are obviously different both in actual functionality and in their appeal to differing sense of aesthetics among user communities. also, the compatibility with bioperl and the integration with nexml make bio::phylo especially suitable for applications where richly annotated phylogenetic data objects need to be persisted such that the semantics of the metadata are preserved . a simple example of this is shown in figure  <dig>  in this code sample, two newick trees are parsed; subsequently, otus for the terminal nodes in the trees are annotated with the skos:closematch predicate that describes the relationship between the otus and the respective ncbi taxonomy database records returned by the entrez web service as best matches for the otu names. in the final step of the example, the annotated project is persisted to nexml with the metadata available to other consumers  and preserving in machine-readable format why the metadata exist.

future directions
bio::phylo is written in perl, and while this language has many useful features, it is not very well suited for computationally intensive calculations compared to compiled languages such as c/c++. this means that operations such as maximum likelihood estimation or markov chains are not usefully implemented in perl, and so bio::phylo does not attempt this. however, perl can easily make use of applications written in other languages through system calls, which is why it is used as a "glue language" for analysis workflows  <cit> . this is one of the main use cases for bio::phylo. in addition to writing one-off wrappers around command line tools, in this scenario one can also use bioperl's bioperl-run extension, which bio::phylo can be seamlessly incorporated into because its objects can, optionally, double as the bioperl objects that are passed into the wrappers that bioperl-run provides. however, this interface is somewhat coarse in the amount of allowed parameterization of wrapped applications, and so novel algorithms are generally difficult to implement this way. several projects developed in compiled languages-for example hyphy  <cit>  and beagle  <cit> -are now being designed so that they can be used as computational back-ends that can be connected to front-ends implemented in scripting languages such as perl . some preliminary tests have shown that it is possible to expose some of hyphy's and beagle's functionality to bio::phylo in this way, and this is something that will be explored further in the future, possibly as optional extensions to bio::phylo.

other developments that might affect bio::phylo's future implementation and project organization are some of the new initiatives that are being undertaken in the perl/bioinformatics community. the bioperl project has grown to such a size that work is now being undertaken by its core developers to develop a more decentralized and modular architecture. if this results in a model whereby the different components in this new bioperl ecosystem are decoupled enough that bio::phylo can participate in it while continuing to be developed along its original design and api it is the intention to make it part of this ecosystem. the recent decomposition of the bioperl source code into multiple repositories maintained under the "git" revision control system simplifies this; recent discussions between bioperl and bio::phylo developers point to a solution where bio::phylo becomes one such repository . the hope is that this will ensure continued compliance of bio::phylo's implementations of bioperl interfaces and that it will invite bioperl users and developers to consider getting involved in bio::phylo where it fills niches left open by bioperl. in fact, bio::phylo has been used successfully as an underlying engine for the parsing and production of nexml format within the bioperl core code base itself, through the module bio::nexml . bio::nexml is an example of the transparent interoperability of the two toolkits, and a model of how continued cross-fertilization might proceed.

yet other initiatives in the bioperl community pertain to innovation in the perl language itself. for perl version  <dig>  a new meta-programming extension called moose greatly simplifies class definitions, and usage of this extension is being explored for bioperl under the biome http://github.com/cjfields/biome project. it has been a guiding principle in bio::phylo's development that it does not require any prerequisites that are not part of the perl core in order to be installed . since the moose extension is currently not part of the perl  <dig> core, redesigning bio::phylo along similar lines as the biome project would introduce a prerequisite to installing bio::phylo without adding any functionality. at present this makes this an unlikely scenario, but this might change depending on the success of biome and inclusion of moose in the perl  <dig> core.

lastly, an important innovation is the development of the perl  <dig> language http://dev.perl.org/perl6/. this new version of the language itself is a break with all preceding ones, with significant differences in syntax and in the object system. the new object system has several useful properties that will promote the development and maintenance of larger, more easily maintainable software projects. however, version  <dig> is so different from version  <dig> that adapting bio::phylo to it would amount to a port to a new language. although this is currently being explored for bioperl, the time investment is not justifiable for bio::phylo as long as perl  <dig> virtual machines are not installed by default  on a great number of operating systems. this, however, is likely to change in the future.

availability and requirements
▪ project name: bio::phylo

▪ project home page: http://search.cpan.org/dist/bio-phylo/

▪ source code repository: http://nexml.svn.sourceforge.net/svnroot/nexml/trunk/nexml/perl

▪ operating system: platform independent

▪ programming language: perl

▪ license: gnu general public license, version 3

▪ other requirements: can all be installed from cpan, either before or after installation of bio::phylo itself. these need to be present to activate certain functionality:

○ visualization - any of the following to create the respective serializations: svg.pm, swf::builder, pdf::api <dig>  gd .

○ tree simulation - math::random, math::cdf

○ nexml i/o - xml::twig , xml::libxml .

installation
bio::phylo is installed like any other cpan-compliant pure perl distribution; it requires no compilation, but it does require the make  utility, which is freely available on all common operating systems. bio::phylo has been successfully installed on a variety of architectures. installation testing reports collected by cpan show successful installs on linux , mac os x , freebsd , netbsd , irix , sunos/solaris  and windows ). perl versions upward from  <dig> .x are known to work generally, with successful installs using  <dig> . <dig>   <dig> . <dig>   <dig> . <dig>   <dig> . <dig>   <dig> . <dig> and  <dig> . <dig> on threaded and unthreaded perls.

list of abbreviations
api: application programming interface; cpan: comprehensive perl archive network; dom: document object model; gif: graphics interchange format; html: hypertext markup language; jpeg: joint photographic experts group; pdf: portable document format; png: portable network graphics; svg: scalable vector graphics; swf: small web format ; swig: simplified wrapper and interface generator; xml: extensible markup language

authors' contributions
rav carried out the initial design of bio::phylo and drafted the manuscript. jc, kh, mj and cm contributed selected parts of the code base and helped draft the manuscript. all authors read and approved the final manuscript.

