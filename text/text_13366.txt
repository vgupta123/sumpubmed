BACKGROUND
the aim of metabolic engineering is to allocate available cellular resources in order to induce/stimulate cells to produce substances of interest. for instance, by redirecting intracellular carbon fluxes, product yields can be boosted and optimized  <cit> . however, the identification of engineering targets is not straight-forward as cellular metabolism is a highly interconnected and regulated system of reactions. consequently, naïve interventions sometimes are ineffective or worse, adversely affect other, even quite distant cellular functions. to deal with the complex interactions in cellular metabolism and to identify promising engineering targets several in silico approaches have been developed  <cit> . here we are particularly concerned with two algorithms  <cit> , which are based on elementary mode  analysis  <cit>  and eventually compute intervention strategies as minimal cut sets.

em analysis was successfully used to identify engineering targets for the production of amino acids  <cit> , biofuels  <cit> , and secondary metabolites  <cit>  in various organisms from c. glutamicum <cit>  to e. coli <cit>  to s. cerevisiae <cit>  to a. niger <cit> . in fact, em analysis is ideally suited for metabolic engineering  <cit>  as it allows for an unambiguous and unbiased decomposition of the analyzed network into inseparable, biologically meaningful steady-state pathways. any intracellular flux distribution can be represented as a properly weighted combination of these ems. thus, the full set of ems describes all possible steady-state functions. conversely, the cell’s metabolic capabilities can be restricted if ems are removed from the network. to remove an em from the network it suffices to delete at least one contributing reaction  <cit> . however, as each reaction supports more than one em, other network functionality will be affected, too. now the question may be phrased as an optimization problem. the task is to find a minimal intervention strategy, which removes all unwanted functionality from the network while, at the same time, keeps desirable network properties.

recently, hädicke and klamt  <cit>  introduced the concept of constrained minimal cut sets  to predict suitable minimal intervention strategies for a given design criterion. they also presented an algorithm  by which cmcss can be computed from ems. jungreuthmayer and zanghellini  <cit>  conceived an alternative method to compute cmcss by solving a binary integer program  over the ems.

by adapting the bip originally presented in  <cit>  we first demonstrate that both algorithms deliver indeed equivalent results. inspired by the theory of integer programming, we then develop efficient preprocessing procedures, which allow both methods to handle problems with hundreds of millions of ems. finally, by computing intervention strategies in several realistic networks, we benchmark and compare the computational performance of both algorithms.

methods
ems are an unbiased way to characterize metabolic networks. an em is defined by three properties  <cit> :  it is a non-trivial, steady state flux distribution through the network,  it obeys all thermodynamic constraints on reaction reversibilities, and  no subset of an em exists which also is an admissible flux distribution and obeys  and . by this definition, an em is a minimal, biologically meaningful, steady-state pathway through a network. an em can be represented as a  vector or by the set of active reactions in the em. herein we will mainly use the latter.

in the following we assume that all ems are known. several tools to calculate ems are freely available  <cit> .

cmcs theory
hädicke and klamt  <cit>  defined cmcss as solutions i of an intervention problem 

  i=i. 

here, 
d
 and 
t
 denote sets of desired and target modes, respectively. the latter contains all ems, which need to be removed from the network. the former contains all ems with favorable functionality. an intervention i will be a set of reactions that are deleted  in the network. an em is hit  if at least one reaction of i is part of the em. the variable n denotes the minimum number of desired ems, which have to “survive” the intervention. for a given intervention i, we collect all the surviving desired modes in the set 
d

i
.

a proper solution i of equation  is a set of reactions obeying two conditions: first, the removal of the reactions in i will delete the complete target set, 
t
, from the network 

  t∩i≠∅∀t∈t, 

and no subset of i will do so. this is the mcs property. to be a constrained mcs the intervention i will keep at least n desirable ems unaffected, i.e. 

  |di|≥n. 

as each em represents a unique pathway through a network, removing it from the network means to block that path, which is easily doable by deleting at least one contributing reaction. thus, to meet condition , the task is to find a  hitting set such that all pathways in 
t
 are blocked . mathematically, this problem is also known as dualization of a graph, a fundamental problem in discrete mathematics  <cit> . several algorithms for calculating hitting sets are available, of which the berge algorithm  <cit>  has been shown to perform favorably for the problems considered herein  <cit> . however, minimal hitting sets ensure only that all target modes are hit but do not per se ensure the constraint , i.e. the survival of n desired modes.

a simple strategy to fulfill equation  in combination with the constraint in equation , is to first calculate all possible minimal hitting sets and then, in a second step, to only select those solutions which also obey equation . however, the computational performance can be optimized if the constraint equation  is checked “on the fly”, leading to the adapted berge algorithm presented in  <cit> .

a pseudo-code of the adapted berge algorithm can be found in  <cit> , in the following we give a small example to explain basic principles of the berge algorithm. consider a hypergraph with hyperedges ε1={a,b} and ε2={a,c} . the algorithm finds first all minimal hitting sets  for the first edge, i.e. γ1={a} and γ2={b}. it then adds the next edge, ε <dig>  and checks whether the already calculated cut sets are also cut sets for the current edge. since γ <dig> is hitting ε <dig>  γ <dig> is kept unchanged. however, γ <dig> is not a cut set for ε <dig> and, thus, is removed from the list of cut sets. instead, two new cut sets are created by individually adding each element of ε <dig> to γ <dig>  i.e. γ3={b,a} and γ4={b,c}. to guarantee minimality the algorithm checks if a newly created cut set is a superset of an already existing one. that is, γ <dig> gets removed from the set of cut sets as it is a superset of γ <dig>  next, a new edge is added to the system and the calculation cycle starts over. execution stops when all hyperedges are processed. to account for the intervention problem and accelerate the classic algorithm, hädicke and klamt suggested to first check if a newly generated cut set is consistent with the constraint  and only then check its minimality against all previously calculated cut sets  <cit> . this modification leads to the adapted berge algorithm  <cit>  which will be used in the following.

cmcss can be formulated as a bip
in a recent paper  <cit>  we showed that if |
d
|=n then the intervention i=i is representable as a bip. however, even the general problem that at least n out of |
d
| modes need to survive the intervention can be formulated as a bip.

let 
e
 be an em of a metabolic network with m reactions, fulfilling the steady state condition, and 
b
=
b
 its binary representation, 

  bi:=bi=1ifei≠00ifei= <dig> i={ <dig> …,m}. 

b
i
 indicates whether reaction i is part of the em 
e
.

a solution 
x
 to equation  can be found by solving the following bip:

  max||x|| 

  s.t.bdtx≥||bd||yd,d∈{ <dig> ..,|d|}, 

  bdtx≤||bd||− <dig>  

  bttx≤||bt||− <dig> t∈{ <dig> ..,|t|}, 

  ||y||≥n, 

  x=t,xi∈{ <dig> }∀i, 

  y=t,yi∈{ <dig> }∀i. 

here we used the indices d and t as a reminder that the em vectors, 
b

i
, are elements of the sets 
d
 and 
t
, respectively. the solution vector, 
x
, is the binary representation of a single cmcs, where x
i
= <dig> marks reactions which get deleted, while x
i
= <dig> stands for reactions that remain unaffected by the genetic intervention. the elements of the binary, auxiliary vector, 
y
, indicate whether or not a desirable mode survives the intervention . note that our notation uses superscripts to denote coordinates of vectors and subscripts to denote different vectors. finally, ||x||:=∑i=1mxi represents the multilinear norm of 
x
.

suppose y
d
= <dig>  then equation  always holds and can be omitted. equation  requires that xi≥bdi, ∀i∈{ <dig> …,m}. only then the product of bdt and 
x
 is equal to the norm of 
b

d
. thus, 
b

d
 is included in the final design. in contrast to 
b

d
, 
b

t
 will be removed from the network as equation  requires that the product bttx is smaller than the ||
b

t
||. this is the case only if at least one reaction in 
b

t
 is deleted. except for equation , the systems of equations in this case resembles the bip problem presented in jungreuthmayer and zanghellini  <cit> .

if y
d
= <dig>  then equation  is ineffective. equation  however simplifies into a “kill constraint”, thus eliminating 
b

d
 from the surviving modes.

the binary auxiliary variables 
y
=t were introduced to guarantee that at least n out of |
d
| modes survive the intervention. in both cases ||
y
|| counts the number of surviving desired modes, and equation  makes sure that at least n desired modes survive the intervention.

alternative mcss may be calculated by excluding existing solutions 
x

j
 by adding the following constraints  <cit>  to the set of equations -:

  xjtx≤||xj||− <dig>  

  tx≥ <dig>  

where we used 
1
 to denote an all-one-vector. equation  guarantees that new solutions are found in subsequent steps, whereas equation  prevents the calculation of solutions that are supersets of already existing solutions. note that the term 
1
−
x

j
 represents the binary complement of 
x

j
.

the number of constraints added to the bip can almost be cut in half  by keeping in mind that the norm of the current solution 
x

j
 will never be larger than the previous optimum 
x

j− <dig>  to sequentially calculate all mcss the full bip reads

  max||xj|| 

  s.t.bdtxj≥||bd||yd,d∈{ <dig> ..,|d|}, 

  bdtxj≤||bd||− <dig>  

  bttxj≥||bt||− <dig> t∈{ <dig> ..,|t|}, 

  ||xj||≤||xj−1||,||x0||=m, 

  txj≥ <dig> k∈{ <dig> ..,j−1}, 

  ||y||≥n, 

  xj=t,xi∈{ <dig> }∀i, 

  y=t,yi∈{ <dig> }∀i. 

if iteratively applied, the bip in equation  returns all mcss, 
x

j
, sorted in increasing order of deletions. note that although the constraint in equation  is redundant, it significantly enhances the computational performance of the bip solver.

preprocessing methods
mathematically, bips are classified as np-hard problems. however, extensive research has focused on improving the formulation of bips. the basic idea is to use simple logic rules which turn a bip into a “better” formulation, which is easier to solve  <cit> . standard bip preprocessing rules essentially fix variables, improve bounds or detect inactive constraints  <cit> .

in the following we will be concerned with standard bip preprocessing methods to reduce the size of the intervention problem in equation  but not with the internal structure of the algorithms. these preprocessing procedures will allow to reduce the size of the intervention problem in equation , which can then be solved by the berge algorithm or a bip. in the following, by “berge algorithm” we mean the adapted berge algorithm reported by hädicke and klamt  <cit>  which extends the standard berge algorithm to compute only minimal hitting sets  that comply with the constraint  on the desired modes  <cit> .

we assume that all ems are converted to their binary representation according to equation . furthermore, we split the complete set of ems in three sets, 
d
, 
n
, and 
t
. here the neutral set, 
n
, contains all  ems, which are neither element of 
d
 nor 
t
.

step  <dig>  first, we remove all reactions that are simultaneously zero in all ems of 
t
. these reactions do not support any em in 
t
. deleting them will not remove any unwanted mode.

step  <dig>  next, essential reactions are identified. if deleting a reaction reduces the number of surviving modes in 
d
 to less than n , then this reaction is considered to be essential and cannot be knocked out. a reaction i is essential if |
d
|−s
i
<n, with si=∑j=1|d|xji.

consider the example in table  <dig> with |
d
|= <dig> and n= <dig>  r <dig> and r <dig> are essential reactions, as for them |
d
|−s
i
=5−3=2<3=n, which indicates that knocking out r <dig> or r <dig> will kill more desirable modes than allowed. we note that if |
d
|=n, all active reactions are essential.


s
in general, the more essential reactions we find, the more the system can be reduced. consequently, it is beneficial if n is large , as this results in the maximum number of essential reactions. removing all essential reactions from the system is a critical step that opens the possibility to apply several other preprocessing procedures.

the removal of all essential reactions results in an important change of the system. by definition ems are non-decomposable, i.e. an em is not a subset of any other em. however, if the essential reactions are removed then the residual ems may become subsets or duplicates of other modes. hence, the next step is to find all duplicate modes in 
t
 and to remove them from the system.

step  <dig>  next, we screen 
t
 to find and remove residual ems that are supersets of other residual ems in 
t
. consider the target set , 
t
, shown in table  <dig>  the modes are sorted in order of ascending norm. the example illustrates that mode 
t
 <dig> can be removed by knocking out reaction r <dig>  however, knocking out reaction r <dig> also kills 
t
 <dig>  as 
t
 <dig> is a superset of 
t
 <dig> 

t


i

modes which are removed during the preprocessing, are marked by *. note that the residual target modes 
t
 <dig>  …, 
t
 <dig> are no longer ems, as they have already gone through step  <dig> and  <dig> of our preprocessing procedure.

the same procedure can be applied to the other modes as well. mode 
t
 <dig> has a norm of  <dig> and is killed either by knocking out reaction r <dig> or reaction r <dig>  as both reactions are part of 
t
 <dig> and 
t
 <dig>  they are certainly removed if mode 
t
 <dig> is killed.

step  <dig>  in a final preprocessing step, we remove duplicate reactions across all ems in both sets, 
d
 and 
t
. using the illustration in table  <dig>  this would mean that we remove duplicate columns. note that this step is most effective after all supersets were removed. for instance, in table  <dig> columns r <dig>  r <dig> and r <dig> are identical only if 
t
 <dig>  
t
 <dig>  and 
t
 <dig> are removed. in this step it is not possible to analyze 
d
 and 
t
 separately. reactions need to be identical in both sets, 
d
 and 
t
, in order to be removed.

implementation
we implemented the bip algorithm in c using gurobi optimizer  <dig> , http://www.gurobi.com/ for solving the bip problem. the adapted berge algorithm was implemented in c. the software is available from the authors on request. the simulations were all carried out on an intel xeon cpu x <dig> @  <dig> ghz under a linux operating system.

test cases
we used the e. coli core model, e <dig>   <cit>  and two smaller models, e <dig> and e <dig>  which were derived from the e <dig> model by removing several reactions. compared to the e <dig> model, glucose was considered as the only carbon substrate for e <dig> and exchange of α-ketoglutarate, acetaldehyde, acetate, formate, lactate, and pyruvate was not allowed. in addition to these modifications we also removed the glyoxylate shunt and the  malic enzymes to obtain the e <dig> model from e <dig>  all three models are illustrated in figure  <dig>  their main topological properties are summarized in table  <dig>  a list of reactions for these models may be found in the .

to test the numerical efficiency of the implemented mcs algorithms we set up the following intervention problems: we first identify the most efficient ems in all models. efficiency is defined as the product between growth rate and ethanol secretion. next, we classify all ems to be desirable, whose ethanol secretion is larger or equal than the excretion of the most efficient ems. targets are all other modes that do not utilize ethanol. modes which take up ethanol  are considered neutral, as ethanol uptake is repressed in the presence of glucose in the growth medium  <cit> . therefore these modes do not need to be targeted. in figure  <dig> we illustrate the intervention problem and the choice of 
d
, 
n
, and 
t
 for the e <dig> model. the major properties of the design criteria for the different e. coli models are listed in table  <dig> 

|
d
|
n
|
t
nmax denotes the maximum number of “surviving” modes for a given set of 
t
 and 
d
. that is, for n>nmax the intervention i
n
 is infeasible. numbers in brackets give the cardinality in percent of the total number of ems.

RESULTS
berge algorithm outperforms the bip
it is interesting to observe that over a wide range of values for n the runtime in both methods changes according to a power law . however, only for the berge algorithm the exponent remained approximately constant in both test cases.

preprocessing-times are essentially independent of n and only scale with the total number of processed ems. for cases with very few mcss  the berge algorithm took even less time than the preprocessing.

preprocessing reduces overall computation time
to test the impact of our preprocessing procedures we set up identical intervention problems for all models. that is, we solved i0=i, i1=i, and i2=i, where we used the indices  <dig>   <dig>  and  <dig> to denote the dependence on the models e <dig>  e <dig>  and e <dig>  respectively. we used identical sets of desired ems in all models, i.e. 
d
0=
d
1=
d
2=
d
 and n0=n1=n2=n. 
t

i
,i∈{ <dig> ,2} consisted of all ems not contained in 
d
. values for 
d
, n, 
t

i
 and the runtimes for the berge algorithm in two different cases  may be found in table  <dig> 

|
d
|
t
d
d
in all cases 
d
 are identical and 
t
 chosen such that it contains all remaining ems. note that the columns “without pp” state the runtimes without performing step  <dig> to  <dig> of our pp procedures. however, we still sort ems in ascending order of norm. this is why pp-time is not zero even in the cases without pp. the row “system size” refers to the dimensions of the network, which enters the berge-algorithm, i.e. after pp.

in the most demanding case , the berge algorithm with preprocessing identified  <dig>  mcss in less than  <dig> minutes in the large e <dig> model with its  <dig> million ems . only 1% of the computation time was used for the berge algorithm. ninety-four percent of the computation is spent on preprocessing. after preprocessing the initial system of  <dig> million ems was reduced to approximately  <dig>  modes. in all tested cases with enhanced preprocessing, reading ems and preprocessing took at least 90% of the total computation time. we repeated the same simulation without preprocessing. while the total runtime with and without preprocessing is comparable if only a few mcss are found, the runtime savings in mcs calculation more than outweigh the runtime losses due to preprocessing if many mcss solve an intervention problem. to emphasize this point we show the total runtime as function of the number of mcss for figure  <dig> in the additional file 2: figure s <dig> 

finally in table  <dig> we show several examples from the literature, which can be easily and efficiently solved by either method. as a comparison we have also listed runtimes using the current version  of cellnetanalyzer   <cit> . cna uses a matlab implementation of the berge algorithm. however, its preprocessing capabilities are less developed. that is why both programs, our berge-algorithm and bip, outperform cna in all instances by at least one order of magnitude. note however that cna uses a matlab script, while our programs are implemented in c. a significant part of the performance difference may therefore be attributed to the slower performance of matlab compared to native executables written in c.

d
t
Δ
Δ
both algorithms use all preprocessing procedures. for comparison we also use the program package cellnetanalyzer <cit>  which uses a matlab script of the berge algorithm. .

preprocessing strongly reduces the system size
in figure  <dig> we used a bip and show the computation time as a function of the number of mcss for the aerobic e. coli <cit>  model of trinh et al. <cit>  . note that although table  <dig> lists  <dig>  different mcss, the bip  only needs to calculate  <dig> solutions. due to preprocessing the original network is reduced from  <dig> reactions and  <dig>  ems to an equivalent system with only  <dig> columns and  <dig> rows. this smaller system has  <dig> mcss, which are then reconstructed to the full set of mcss by expanding duplicated columns. a similar observation may also be made in table  <dig>  in these examples the system size is at least reduced by a factor of  <dig> .

surprisingly, the computation time does not monotonically increase with the number of solutions  but drops dramatically whenever the norm of the solution decreases. note that a decreasing norm means an increase in the number of required knockouts. in this model the computation time significantly drops after solution number  <dig>   <dig>   <dig>  and  <dig>  at these instances the number of required deletions changes from  <dig> to  <dig>  to  <dig>  to  <dig>  and to  <dig>  respectively. in all these cases the constraint in equation  decreases too and introduces a tighter bound on the system. this allows the solver’s internal preprocessing to more efficiently compress the system, which in turn brings down the computation time. if, however, the norm of the solution does not change then the computation time scales approximately exponentially with the number of mcss. this behavior is expected as each solution adds a new constrain to the system, which makes it harder to solve.

discussion
recently cmcss have been introduced to predict optimal intervention strategies in order to achieve an arbitrary metabolic objective  <cit> . two algorithmic approaches have been published for their calculation  <cit> . here we showed that both methods are equivalent. we addressed the numerical efficiency of both methods in typical design problems and found that in terms of runtime the berge algorithm is superior compared to bip.

it may appear as a surprise that the berge algorithm performs so well even for the large cases presented in this study, especially since the berge method is known for its unfavorable performance in huge networks  <cit> . however, here we showed that efficient preprocessing can dramatically reduce the size of the networks. the adapted berge algorithm could then be run on the reduced systems. apparently, for small systems the berge algorithm is effective.

the importance of preprocessing in the calculation of mcss has been stressed earlier  <cit> . the preprocessing strategies introduced herein focus especially on the additional constraints posed by cmcss, whereas  <cit>  dealt only with  mcss. we were able to show that our implementation outperforms the currently available tool for computing mcss . the performance gain can be attributed to both the improved preprocessing and the efficient implementation in c. herein we used standard preprocessing routines, which are frequently applied in bip  <cit> . extensive literature on preprocessing in binary and integer programming is available, see for instance savelsbergh  <cit>  for a good summary of basic ideas. since cmcss can be stated as a bip, these methods are readily adoptable. however, due to the algorithmic complexity of bip , a full enumeration based on bip seems not be competitive compared to the berge algorithm . rather the usage of bip preprocessing rules followed by the berge algorithm to calculate cmcss is suggested as an optimal computation strategy.

the efficiency of preprocessing is dependent on the imposed design criterion. in the worst case the set of desired modes is empty  and 
t
 contains all ems of a network. this situation corresponds to unconstrained mcss and thus to a full dualization of the hypergraph spanned by the target modes. except for step  <dig>  none of our preprocessing routines then provides an advantage and other solvers may be more appropriate  <cit> . however such cases are not relevant in the context of metabolic engineering, where we want to optimize favorable functionality. to fully utilize the potential of preprocessing the ratio n/|
d
| should be close to one. this means that many essential reactions will be removed from the system, and as a result of that many supersets will be detected, too. however, in practice it may suffice if only a few ems out of the set of desired modes survive, i.e. n/|
d
|≪ <dig>  still, preprocessing provides a significant performance gain as indicated in table  <dig>  the runtime costs of preprocessing will be outweighed by the savings in mcs calculation, if the intervention problem has many solutions. in practice, preprocessing will therefore be favorable, as typical applications have a few thousand solutions .

in our paper  <cit>  we used weights in the objective function of the bip to take experimental difficulties in the deletion of reactions into account. for instance, some reactions cannot be deleted as they are driven by diffusion, rather than catalyzed by an enzyme. other reactions, on the other hand, may require the deletion of multiple genes as they are catalyzed by different enzymes in parallel. by an appropriate choice of the weights in the objective function bip is able to predict the experimentally easiest deletion strategies first  <cit> . however, in the preprocessing procedures above we did not consider weights in the objective function. identifying particular solutions in the complete list of mcss has to be done in a separate post-processing step . thus even with an additional post-processing step our implementation of berge’s algorithm will be faster than bip. note however that the integration of regulatory information into the cmcs framework is a unique feature of the bip approach  <cit> .

both methods, the berge algorithm as well as bip, still show room for computational improvements. in the case of the berge algorithm the computational bottleneck sits in the filtering of potential mcss to determine if they are, in fact, true mcss and not supersets of true mcss  <cit> . generating new mcs-candidates, however, is very quick. therefore ways of enhancing the superset-filtering procedure will be the scope of future work.

one disadvantage of the berge algorithm is its inability to predict mcss continuously during the runtime. during execution all mcss remain candidate-mcss. only upon termination, when the minimality of all candidate mcss has been checked against each other, candidate-mcss become mcss and can be outputted. thus, even if we were interested in only one solution, the berge algorithm will – in general – return more than one mcs upon termination. however, other solvers are available  <cit> . their adaption for the current situation is the scope of further work.

bip on the other hand, is able to predict a single solution without the need to enumerate all. in fact, due to the optimization principle only one mcs with a smallest or largest number of deletions can be calculated. in figure  <dig> we illustrated the runtime per solution as function of the number of mcss. the drop in runtime after certain solutions indicates that more advanced preprocessing procedures may further reduce the runtime significantly. in fact, our preprocessing focused on standard procedures like variable fixing. more advanced methods will further reduce the runtime for both the berge algorithm and the bip. additionally we used gurobi, a commercially available multi-purpose optimization toolbox, to solve the bip. however, a specialized knapsack solver may potentially boost the performance.

CONCLUSIONS
we predicted minimal metabolic intervention strategies in typical metabolic engineering problems using two different methods . we investigated the numerical performance of these approaches. both methods significantly profited from the enhanced preprocessing procedures developed here. under the tested conditions, our implementation of berge’s algorithm performed best even outperforming other, currently available software.

abbreviations
bip: binary integer program; cmcs: constrained minimal cut set; cna: cellnetanalyzer; em: elementary mode; mcs: minimal cut set; pp: preprocessing.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
cj implemented the algorithms and participated in the design of the study. gn coded the models and helped in running the analysis. sk participated in the design of the study. jz conceived of the study, and participated in its design and coordination. cj, sk and jz wrote the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
tar gzipped archive of the sbml files for the models e <dig>  e <dig>  and e <dig> 

click here for file

 additional file 2
total runtime with and without preprocessing for the berge algorithm.

click here for file

 acknowledgements
c.j., g.n., and j.z. gratefully acknowledge the support by the federal ministry of economy, family and youth , the federal ministry of traffic, innovation and technology , the styrian business promotion agency sfg, the standortagentur tirol and zit - technology agency of the city of vienna through the comet-funding program managed by the austrian research promotion agency ffg.

s.k. acknowledges funding by the german federal ministry of education and research and by the ministry of education and research of saxony-anhalt .
