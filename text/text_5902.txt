BACKGROUND
there is a growing interest in genome research, and a vast amount of biomedical literature related to it has been published. collecting and maintaining various databases of this information in computer accessible format require automatically extracting information. various automated information extraction systems for biomedical literature have been reported. ono et al.  <cit>  and blaschke et al.  <cit>  demonstrated the automated extraction of protein-protein interactions  from biomedical literature. they identified key words that express these interactions, and demonstrated automated extraction based on these key words and some heuristic rules. temkin et al.  <cit>  demonstrated the automated extraction of ppis using a context-free grammar. in each of these studies, protein name recognition was the first step. next, protein name dictionaries were constructed. finally, protein name recognition was performed based on pattern matching using the dictionaries. recognition performance affected the results of ppis extraction. fukuda et al.  <cit>  and frenzén et al.  <cit>  developed automated recognition systems based on hand-crafted rules. they identified key terms for recognizing protein names, which they termed "core terms"  and "feature terms" . their systems recognize protein names based on these key terms and some hand-crafted rules.

collier et al.  <cit>  and shen et al.  <cit>  investigated the automated recognition of biomedical named entities based on the hidden markov model. kazama et al.  <cit> , lee et al.  <cit> , and takeuchi et al.  <cit>  investigated automated recognition based on a support vector machine . features for recognizing named entities were proposed in these investigations, e.g. word, part-of-speech , and orthography.

task  <dig> a of biocreative was a competition involving automated gene/protein name recognition. the system described here was developed for that competition. it uses the svm algorithm as a learning method for gene/protein name recognition. this algorithm has achieved good performance in many classification tasks, and we have previously showed that it performs well for protein name recognition  <cit> . gazetteers have often been used for the named entity recognition task on newswire corpora. however, as tsuruoka et al.  <cit>  reported, dictionary pattern matching can result in low recall in a biomedical domain due to spelling variations. we thus investigated and evaluated the performance of our system when using an additional feature of making partial dictionary pattern matches. the gene/protein name dictionaries were made by collecting gene and protein names from the swiss-prot  <cit>  and the trembl  <cit>  databases. we used partial dictionary matching, and the matches found in the dictionary became features used by svm. here we report the performance of our system in the biocreative competition, analyze its features, and discuss the effect of the parameters on svm learning.

RESULTS
system description
the concept of our system is shown in figure  <dig>  we use svm as the machine learning algorithm. the training data is a set of feature vectors with a binary value . the algorithm finds an optimal classification function that divides the positive and negative examples. we report on the features that we used in our system to recognize gene/protein names. we use the yet another multipurpose chunk annotator, yamcha  <cit> , which uses tinysvm  to bridge the gap between the results of feature extraction and the svm.

training data and test data
training data  and development test data  were prepared for system development in task  <dig> a of the biocreative competition. in both data sets, the gene/protein names were tagged with newgene. other tokens were tagged with pos tags. an example is the following: "translocation/nn of/in the/dt nf-kappab/newgene transcription/newgene factor/newgene,/,", where nn is a noun or singular mass, in is a preposition or subordinating conjunction, and dt is a determiner. this data is tokenized by biocreative. we follow their definition. for example, "translocation", "of", "the", "nf-kappab", "transcription", "factor" and "," are the tokens in above sample phrase.

bio representation
we used a bio representation for chunking, using the following three tags.

• b: current token is the beginning of a chunk.

• i: current token is inside a chunk.

• o: current token is outside of any chunk.

the resulting chunking representation of the above sample phrase is "translocation/o of/o the/o nf-kappab/b transcription/i factor/i,/o".

feature extraction
we extracted the following features .

• word: all words appearing in the training data.

• pos: part of speech of the current token. we used the brill tagger  <cit> . pos and newgene were tagged in the training and test data for development. the tags were not shown in the test data for evaluation. we tagged using the brill tagger in the training and two test data sets because we wanted to use pos as a feature.

• orthography: table  <dig> shows the orthographic features. if the token has more than one feature, then we used the feature listed first in table  <dig> .

• prefix: uni-, bi-, and tri-grams  of the beginning letters of the current token.

• suffix: uni-, bi-, and tri-grams  of the ending letters of the current token.

• dictionary matching: matching gene/protein names dictionary entries against uni-, bi-, and tri-grams  of words starting at the current token. for example, in figure  <dig>  the uni-gram  is "nf-kappab", the bi-gram is "nf-kappab transcription" and the tri-gram is "nf-kappab transcription factor". there are four features: gene name dictionary match for the uni-gram , and protein name dictionary match for the uni-gram , bi-gram  and tri-gram . each feature was represented as either y  or n . the dictionary was constructed based on the gene/protein names from the swiss-prot and trembl databases. the swiss-prot database is a protein knowledge base including amino acid sequences and other properties currently known about the proteins. it is manually annotated. the trembl database consists of computer-annotated entries derived from the translation of all coding sequences in the nucleotide sequence database. the sequences are not yet represented in the swiss-prot database. the trembl database also contains protein sequences extracted from the literature and protein sequences submitted directly by the user community. we collected  <dig>  protein names and  <dig>  gene names from the swiss-prot database and  <dig>  protein names and  <dig>  gene names from the trembl database. two dictionaries were constructed, one from swiss-prot  and the other from swiss-prot and trembl . when used for matching, each of these dictionaries is divided into  <dig> dictionaries, one with the protein names and the other with the gene names. in our dictionary matching, we ignored the case and stop words, which are shown in table  <dig>  pubmed is a service of the national library of medicine that can be used to search for articles from over  <dig> million citations for biomedical articles. pubmed ignores the stop words in search queries.

• preceding class: class  of the token preceding the current token. the number of preceding tokens is dependent on the window size .

for example, the features of "nf-kappab" in the sample phrase in figure  <dig> are as follows. the word feature is nf-kappab. the pos feature is nnp. the orthographic feature is greek. the prefix features are n, nf, and nf-. the suffix features are b, ab, and pab. the value for uni-gram  matching with the protein name dictionary is y. the value for bi-gram  matching is n. the value for tri-gram  matching is n. the value for uni-gram  matching with the gene name dictionary is n. the preceding class features are "o" for "the"  and "o" for "of" .

machine learning using yamcha
yamcha is a general purpose svm-based chunker. yamcha takes in the training and test data and formats it for the svm. the format of yamcha for a sample phrase is shown in figure  <dig>  the phrase is written vertically in the word column. the extracted features are shown in the following columns, e.g. the orthographic feature is shown in the ortho column. in the dic column, the first three items show the results  of the uni-, bi-, and tri-gram  matching for the protein names in the dictionary. the last item shows the result of the uni-gram  matching for the gene names in the dictionary. the class column shows the class for each word, i.e., b, i, or o. each feature is set apart by white space. the shaded area in figure  <dig> shows the elements of the feature vectors for the current word, i.e. "nf-kappab". the information from the two preceding and two following tokens is used for each vector. yamcha counts the number of features, and changes each feature into a unique positive integer. the feature vector transferred to the svm by yamcha is in the form

+ <dig> 201: <dig> 3148: <dig> 4882: <dig> 

- <dig> 874: <dig> 3652: <dig> 6179: <dig> .

each line shows one vector. a + <dig> means a positive example . the positive integer on the left side of the colon is the unique number of each feature. a "1" on the right side of the colon shows that the vector includes the feature presented by the unique number.

we used three classes, i.e., b, i, and o. yamcha counted the number of classes appearing in the training data and directed the svm to learn based on the situation. three training sessions were done in a pair-wise fashion, i.e. , , and , and three hyperplanes were formed. in the test data, the optimal class of each token was the class that had the maximum value in the three hyperplane functions. several parameters affect the number of support vectors.

• dimension of polynomial kernel : we can use only a polynomial kernel in yamcha.

• range of window : the svm can use the information on tokens surrounding the token of interest as illustrated in figure  <dig> 

• method for a solving multi-class problem: we can use the pair-wise or one-vs.-rest method. in the latter, the b, i, and o classes are learned as , , and .

• cost of constraint violation : there is a trade-off between the training error and the soft margin of the hyper plane.

biocreative competition
the features and parameters we used in the biocreative competition are shown in tables  <dig> and  <dig>  we tested three methods for the dictionary matching .

• 1st run: exact pattern matching between gpd <dig> and words in the training and test data.

• 2nd run: regular expression pattern matching between gpd <dig> and words in the training and test data. we ignored non-alphabetical letters in the strings by using a regular expression in perl. for example, "nf-kappa b" was represented as "nf\w*kappa\w*b". "\w" matches any character except a letter, numeric digit or "_". "*" indicates any number of such characters can be matched.

• 3rd run: exact pattern matching between gpd <dig> and words in the training and test data.

our final result in the biocreative competition is shown as case  <dig> in table  <dig>  the best "balanced f-score" was that for the 2nd run. the differences between the three runs were less than 1%. the 3rd run was the worst. the results without dictionary matching are shown as case  <dig> in table  <dig>  the score went up about  <dig> % when dictionary matching was used.

analysis of recognition error
some gene/protein names are compound tokens. the average number of tokens per name was  <dig>  tokens in the training data. in the first run, the average number of tokens per name were  <dig>  ,  <dig>  , and  <dig>  tokens . figure  <dig> shows the percentage of the number of tokens per gene/protein name that appeared in the test data for evaluation and the tp, fp, and fn data sets. the percentages of names over  <dig> or more tokens long in the fp and fn were higher than the one for tp, suggesting that recognizing longer names is more difficult than recognizing shorter ones.

• @@ <dig> with/in a/dt cutoff/nn level/nn for/in tsst-1/newgene of/in ... were/vbd positive/jj for/in tsst-1/newgene ./.

• @@ <dig> ... under/in the/dt influence/nn of/in tsst-1/nn ./.

• @@ <dig> ... the/dt secretion/nn of/in pth/newgene and/cc ct/newgene ...

• @@ <dig> ... and/cc intact/jj pth/nn /sym ./.

effects of tuning parameters and features
we analyzed the effects of the tuning parameters and features on system performance. in the analysis, we used the combined data set of the original training, development test and evaluation test. we performed a 10-fold cross validation using 90% of the combined data set as training data and the remainder as test data. this combined data set was also used in the analyses shown in tables  <dig> , <dig> .

the p-values are shown in parentheses. we defined the null hypothesis as the case where there was no statistically significant difference between two values. the alternative hypothesis was defined as the opposite case. we set the statistical significance level at  <dig> . the null hypotheses of the "deg.","win.-1+1", "cv =  <dig> ", recall of "win.-3+3" and precision of "one-vs.rest" cases were rejected. in other words, a statistically significant difference was seen in those cases.

the effects of each feature on our system are shown in tables  <dig> and  <dig>  the parameters are shown in table  <dig>  the definition of "base" is the same as in table  <dig>  in table  <dig>  we demonstrate the ability of svm learning to be mostly unaffected when ignoring one of the features. the "-word" column in table  <dig> shows the case in which the word feature was ignored. the other columns have a similar meaning. the suffix  feature greatly affected recall . the other features had little effect.

effect of dictionary matching methods
effect of pos tagger
as mentioned above, we used the brill tagger  <cit>  for pos tagging. the tagger was trained on newswire articles. shen et al.  <cit>  suggested that a pos tagger should be trained using this domain. they trained their tagger using the genia corpus  <cit> . they reported that using the pos feature greatly increased the f-score. we trained a tagger using  <dig> abstracts from genia corpus  <dig> p. after the training, the accuracy of the pos tagging increased from  <dig>  to  <dig> % on the genia corpus.

discussion
as described above, the system we developed for automated gene/protein name recognition uses the svm algorithm and an svm-based chunker, yamcha. yamcha performs pre-processing and set-up for the svm. we evaluated our system in the biocreative competition using various parameters for svm learning, i.e. degree of the polynomial kernel, range of the window, cost of constraint violation, and method for solving multi-class problems. among these parameters, the degree of the polynomial kernel  and the range of the window  had a significant effect. takeuchi et al.  <cit>  also used an svm-based system to evaluate the effects of feature sets and found a range of -1+ <dig> was better than -3+ <dig>  which is the opposite of our findings. the optimal window size is thus corpus dependent.

we also evaluated the effect of various features : word, pos, orthography, prefix, suffix, dictionary matching, and preceding class features. in table  <dig>  one feature is removed at a time. as shown in the table, except for the suffix and preceding class features, removing any one feature did not have a large effect. in table  <dig>  the evaluations were performed by using each feature one at a time in addition to the word and preceding class features. as shown in the table, each feature had a significant effect when few other features were present. combining this with the table  <dig> results suggests that the features' effects usually overlapped with each other when the features were combined. takeuchi et al.  <cit>  reached to the same conclusion from their results.

as noted above, tsuruoka et al.  <cit>  reported that dictionary pattern matching can result in low recall in a biomedical domain due to spelling variations. as described above, we used uni-, bi-, and tri-gram  matching for gene/protein name descriptions in the dictionary. the effect of dictionary matching feature was significant by itself. but when the features were combined, the effect was not so significant. evaluation of different types of dictionary matching  showed that the differences between the types were small.

we evaluated the effect of training a pos tagger with a corpus that is specific to the biomedical domain, as opposed to training the tagger on newswire. there was surprisingly a drop in the balanced f-score when switching from the original pos tagger to the genia trained pos tagger. one of the reasons may be that the genia corpus is smaller than the other training corpus.

CONCLUSIONS
we participated in task 1a of the biocreative competition using the svm algorithm. we evaluated the effect of several features on svm learning. we also introduced information from external resources  as a feature. while the effect of each feature was significant, these effects overlapped with each other when the features were combined. the best balanced f-score was the case where all features were used. this suggests that the effect of each feature was small when the features were combined. kudo et al.  <cit>  suggested that an svm has a high generalization performance independent of the dimension of the feature vectors. our results support their suggestion.

