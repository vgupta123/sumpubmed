BACKGROUND
numerous chromatin features such as dna methylation , histone modifications, binding sites of transcription factors and contact frequencies between enhancers and promoters are linked to gene regulation and transcriptional activity. many next-generation sequencing  assays have been developed over the last years to acquire genome-wide maps of these different readouts for analysing chromatin mediated gene regulation. for example, protein binding sites of a given transcription factor  can be determined from chromatin immunoprecipitation with a tf specific antibody followed by sequencing  . a number of related technologies is applied to determine nucleosome positioning throughout the whole genome  <cit> . the latter methods usually use either mnase , or other enzymes such as dnase   <cit> , transposase   <cit>  and cpg methyltransferase   <cit> . another possibility is to use directed chemical cleavage to cut dna between or inside nucleosomes . in addition, nucleosome positions can be mapped by chip-seq with antibodies against core histones, e.g. histone h <dig>  <cit> .

in general, the above ngs methods are based on evaluating small chromatin fragments derived from the genome in terms of a feature of interest and then mapping the resulting sequencing reads to the reference genome. for example, in chip-seq experiments, the frequency of chromatin fragments covering each genomic location reflects the abundance of a given feature at a genomic position . thus, the output of all these methods is a continuous non-homogeneous distribution of sequencing reads along the dna. nevertheless, many existing analysis methods treat the results as a discrete distribution of the feature of interest. in practice, this is achieved with the help of peak calling methods. it is assumed that the majority of the signal is just noise that can be disregarded, and only well-defined peaks reflect a biologically relevant chromatin feature. a number of generic computational tools have been developed to perform peak calling, including macs/macs <dig>  <cit> , homer  <cit> , sicer  <cit> , peakseq  <cit>  and cisgenome  <cit>  to name just a few. furthermore, there are many specialised programs that perform peak calling to determine nucleosome positions  <cit> , including templatefilter  <cit> , npc  <cit> , nucler  <cit> , normal  <cit> , ping/ping <dig>  <cit> , mlm  <cit> , nucde  <cit> , nucleofinder  <cit> , chipseqr  <cit> , nseq  <cit> , nucpossimulator  <cit> , nuchunter  <cit> , inps  <cit>  and puffin  <cit> . however, the binary classification of genomic positions into occupied or free is not always justified. in many cases the underlying biology is such that the feature distribution along the dna cannot be treated as discrete. this is particularly relevant for nonspecific or weakly specific protein binding, as well as the nucleosome distribution along the dna. in these cases it is more appropriate to operate with continuous occupancy profiles to identify regions with cell type/state specific differential occupancy. a straightforward approach to define regions of differential occupancy is to shift a sliding window along the genome and count the number of reads at each window position. this has been implemented, for example, in the danpos/danpos <dig>  <cit> , dinup  <cit>  and nucwave  <cit>  software packages. continuous genomic maps resulting from this type of analysis frequently need to be associated with discrete genomic features like promoters, enhancers, etc. thus, the downstream workflow is different than the one used for binary chromatin feature maps.

here we introduce the nuctools software package, which provides computational protocols for a nucleosome-centred ngs downstream analysis. as input our framework uses raw dna reads from bam/sam files mapped with programs such as bowtie/bowtie <dig>  <cit> , ngm  <cit>  or bwa  <cit> , which are then converted into the bed format for further processing. basic manipulations with bed files can be performed using the popular bedtools package  <cit> . bedtools conducts most basic operations like dataset intersection, format conversion and enrichment analysis. similar to this concept, our nuctools software package provides flexible solutions for most typical nucleosome-centred analyses. several excellent user-friendly “all-in-one” packages for chip-seq data analysis like crunch  <cit> , chase  <cit> , cagt  <cit> , cisgenome  <cit>  and deeptools  <cit>  already exist. however, these lack nucleosome-specific functions or customization options to process billions of nucleosome reads in a parallelized manner. nuctools, on the other hand, provides a modular framework devoted primarily to nucleosome positioning. it is composed of several independent open-source scripts, each solving a particular task, which can be combined or extended in a highly scalable workflow, typically detailed using bash files on a linux cluster. the framework contains several functions specific for nucleosomes. however, it can be also used for similar types of ngs analysis beyond nucleosome positioning. it is particularly useful for the integration of datasets with a continuous chromatin feature density distribution. in the following section we will first outline the basic concepts and provide the overview of a typical nuctools workflow. subsequently, the application of nuctools to several recent nucleosome positioning datasets in mouse embryonic stem cells  and mouse embryonic fibroblasts  is demonstrated.

implementation
sequencing data processing usually starts with mapping dna reads with tools such as bowtie/bowtie <dig>  <cit> , ngm  <cit>  or bwa  <cit> . in the discrete binding site-type analysis, subsequent steps to identify the localization of a chromatin feature of interest involve peak calling with programs like macs/macs <dig>  <cit> , homer  <cit> , sicer  <cit> , peakseq  <cit> , edger  <cit>  and cisgenome  <cit> . unlike discrete binding site analysis, nuctools is based on the concept of continuous occupancy distribution and includes also regions of low read density. this type of analysis makes use of the complete data set and evaluates properly averaged quantities to characterize chromatin features under different cell conditions. a typical nuctools workflow is represented fig.  <dig> fig.  <dig> an exemplary analysis workflow using nuctools. bam/sam files with raw mapped reads are converted to bed format , processed to obtain nucleosome-sized reads , and split into chromosomes . usually, a separate directory with chromosome bed files is created for each sample similarly to the homer’s approach. afterwards chromosome-wide occupancies are calculated and averaged using a window size suitable for the following analysis . then for each cell type/state, an average profile is calculated based on the individual replicate profiles . after this point several types of analysis can be performed in parallel: finding stable/unstable regions ; comparing replicate-averaged profiles in different cell states/types ; calculating nucleosome occupancy profiles at individual regions identified based on the intersection of stable/unstable regions or regions with differential occupancy with genomic features such as promoters, enhancers, etc. ; calculating the nucleosome repeat length ; calculating aggregate profiles or visualizing heat maps of nucleosome occupancy at different genomic features . the next types of analysis usually involve gene ontology, multiple-dataset correlations and dna sequence motif analysis, which can be conducted for the genomic regions of interest identified at the previous steps using external software packages




our pipeline starts with preparatory steps such as read pre-processing to convert short mapped dna reads to nucleosome-size dna fragments . in the case of single-end sequencing experiments one has to extend the reads in a strand-specific manner with the estimated average fragment length to obtain bed file with coordinates of both ends of each sequenced dna fragment. in the case of paired-end sequencing, reads are usually stored as two consecutive lines in .bed files. it is convenient to convert them into one line, which contains the start and the end of the dna fragment. these steps are achieved by our scripts extend_se_reads.pl and extend_pe_reads.pl for single-end and paired-end reads correspondingly. in the case of single-end reads, the exact length of the nucleosome fragment is not known and needs to be provided by the user as a parameter. this parameter can be either determined experimentally  or estimated by nuctools with the help of the script calc_fragment_length.pl provided in the package.

the next preparatory step is splitting reads into separate files per chromosome. this step might not seem obvious, since in the case of discrete data such as tf binding sites or histone modifications it is more convenient to keep all the peaks together in one bed file. this is technically feasible without problems since a typical number of regions in these cases is limited to tens of thousands sites with typical file sizes of several megabytes. however, in the case of continuous analysis for nucleosome positioning, we are dealing with billions of reads and file sizes of order of several gigabytes, which becomes relevant for computer memory allocation for the subsequent analysis steps. therefore, nuctools splits reads into chromosome-wide files that are obtained with the help of the script extract_chr_bed.pl. note that a similar approach of splitting files into chromosomes is also employed by homer  <cit> . all chromosomes are usually stored in the same directory so that the directory name can be used as an input parameter instead of file names of individual chromosome files. in order to save storage space, our scripts can generate gzipped output and take gzipped files as input.

in the next step bed files with mapped reads are converted to chromosome-wide nucleosome occupancy files. our occupancy files have the default extension .occ and contain two columns: the genomic coordinate and the signal value  for a given coordinate. calculating the occupancy with single base pair resolution results in a file size for one human chromosome of ~1- <dig> gb. to accelerate calculations and decrease storage and memory requirements, our script bed2occupancy_average.pl allows a user to select a window size, and report average values for each genomic window of a given size, e.g., a window of 100 bp will make files  <dig> times smaller. we recommend keeping these files during the whole following analysis rather than recalculating them. this saves computational time at the expense of the storage space and is particularly useful for large-scale projects.

at the heart of our method is the averaging and normalisation of the data using several replicate experiments. the nucleosome positioning analysis for human or higher eukaryotes requires billions of reads and several replicates for the same experimental condition in order to be robustly interpretable  <cit> . we call these datasets “replicates” for generality, while in practice some of these data can be from unrelated laboratories, which use different experimental protocols for the same cell state/type as demonstrated below. for each replicate, the strength of the mnase-seq or chip-seq signal critically depends on the quality of antibody, chromatin digestion conditions, sequencing depth and variations of the experimental protocol . therefore, cross-platform comparison of datasets obtained in different laboratories is challenging . several solutions to normalise datasets have been proposed in the literature, such as chipnorm  <cit> , chip-rx  <cit> , ncis  <cit> , mace  <cit>  and cisgenome  <cit> . the normalization strategy depends on the biological question. for example for tf chip-seq, one approach is to do peak calling, determine common peaks which are represented in all replicates, and then normalize the datasets such that the common peaks on average retain the same heights  <cit> . in contrast, for nucleosome positioning we normalize each replicate to its sequencing depth with a sliding window of a user-defined size . the normalized occupancy on is calculated as on = <or> / . the parameter < or > is the average occupancy in the given window, nuc_size is the average size of the nucleosome fragment, nr is the number of reads in the input bed file, and chr_length is the length of the chromosome excluding unmappable regions at the chromosome ends, which is calculated by the script.

at the next step one can determine stable/unstable nucleosome occupancy regions for a single cell state. the relative error of defining nucleosome occupancy using different replicates can be used as a proxy to determine stable versus unstable  nucleosomes. this is achieved with the script stable_nucs_replicates.pl. this script allows a user to select a threshold value for the nucleosome occupancy and the relative error – the threshold value depends on the type of analysis which needs to be conducted. for example, it can be used to find different classes of nucleosome occupancy regions, such as dna linkers free from nucleosomes or regions with moderately or extremely stable nucleosomes, or regions with labile nucleosomes/high nucleosome turnover. a user has to select the sliding window size and which signal is used for the filtering . as output this script returns the list of genomic regions in a modified bed file format. this file contains the chromosome, region start and region end columns followed by the columns quantifying the average signal value for a given window , and the absolute and relative error based on the replicate comparison. the relative error is calculated as the ratio of the standard error based on all replicates to the value of the average signal.

another type of analysis with nuctools is finding genomic regions which have changed their nucleosome occupancy between different cell conditions, e.g. during cell differentiation or between tumor cells and controls from healthy donors. from the genomic locations of stable and unstable nucleosomes identified at the previous step regions that change nucleosome occupancy or stability can be determined. this analysis is conducted with the script compare_two_conditions.pl to determine ensemble-average differences of the nucleosome occupancy or stability between two cell states. by selecting the appropriate column as the signal, a user can choose whether the comparison is conducted for the nucleosome occupancy for identifying regions of gained/lost nucleosomes, or for the relative error to identify regions that are more/less fuzzy in terms of nucleosome positioning. the user can define a threshold value for the differences in occupancy or relative error between two cell conditions, and thus make the nucleosome subset larger/smaller. alternatively, the resolution of the analysis for differential nucleosome occupancy can be determined by the window size. obviously, these parameters are dependent on the type of the downstream analysis and the biological question. in the example below we will consider two extreme cases of different biological analyses: megabase-size regions and nucleosome-size regions. once the subset of genomic regions with lost/gained or fuzzy/stable nucleosome has been defined with compare_two_conditions.pl, it can be further analysed using motif discovery tools, such as homer  <cit> , meme  <cit> , weeder, pscan and pscanchip  <cit> , rvista  <cit>  and other programs. another possible direction of downstream analysis for such a subset of genomic location is an annotation with gene ontology  terms using several existing online tools, such as david  <cit> , gorilla  <cit> , enrichr  <cit>  and great  <cit> .

another typical application of our analysis workflow is extracting chromatin maps from multiple datasets for individual genomic regions. while genome browsers such as the ucsc genome browser  <cit>  or igv  <cit>  are very convenient to look at different tracks on individual genomic regions, their snapshots are often not optimal for the quantitative analysis. on many occasions we had to manually assemble a figure, where several smoothed curves representing different chromatin signals were plotted together and normalized to the same scale . to make this kind of plots one has to extract from the occupancy file a subset of rows within a given genomic interval. this is achieved by script extract_rows_occup.pl. the visualization can then be performed with plotting software of choice as for example origin  or the visualization tools available in r. a more sophisticated use of the region extraction script is testing a certain hypothesis using statistical methods for many user-defined regions. an example of this kind of analysis is the comparison of predicted and experimentally observed transcription factor binding occupancies  <cit> , as e.g. in the case of the interplay of ctcf binding and nucleosome positioning in our previous work  <cit> . in such cases the script extract_rows_occup.pl can be called in a cycle for all regions of interest.

another analysis step, which is usually missing in existing software packages, is the calculation of the nucleosome repeat length . this type of analysis is specific to nucleosome positioning and is conducted with the script nucleosome_repeat_length.pl. it evaluates the average distance between the centres of neighbouring nucleosomes. the script takes as input the raw mapped reads and calculates the frequency of distances from the leftmost end of a given nucleosome read and leftmost ends of all nucleosome reads in its vicinity, typically within the region of 1000–3000 bp . the resulting distribution of frequencies of start-to-start nucleosome distances has peaks at distances between nucleosomes separated by  <dig>   <dig>   <dig>   <dig>   <dig> or more linkers. the algorithm used in this calculation was initially described by valouev et al.  <cit>  and updated in our following publications  <cit> . the distribution of nucleosome start-to-start distances determined by nucleosome_repeat_length.pl can be the analysed by an r script plotnrl.r, which extracts peak coordinates and performs linear fitting; the slope of the line gives the nrl  <cit> . nrls can be compared either between different regions of the same cell, or between different cell states for the same genomic regions. for example, the nrl in the regions around ctcf is about 10 bp smaller than genome average  <cit> , while nrl changes during cell differentiation can be as large as dozens of base pairs .

further downstream analysis steps typically link nucleosome occupancy maps to other datasets such as gene expression, dna methylation or histone modifications  <cit> . these analyses usually aim to answer questions such as whether the sequencing signal in dataset a is correlated with feature b, or with signal from dataset c as well as more complex logical conditions. there are many computational tools that can address some of these questions, but there is no single tool that can solve all of them, since these questions are quite diverse. it is not uncommon that software tools for this step are developed specifically for a given project . one possibility to find correlations between different datasets is to calculate pair-wise correlation functions using all the data including the noise, as is done with the mcore software  <cit> . another possibility is to calculate the colocalization of different datasets for certain genomic features . nuctools focuses on the latter option implemented in the script aggregate_profile.pl. this script allows the calculation of the coverage maps for many genomic regions aligned with respect to some common feature. individual coverage maps can be visualized in a heat map using our standalone matlab-based program cluster maps builder . this program is included in the nuctools distribution as matlab source files as well as precompiled executable files for windows operating system so that it may be run without requiring a matlab licence . the ordering of the regions can be performed according to several clustering algorithms selected by the user. we recommend using k-means clustering for a typical nucleosome analysis. alternative clustering programs of similar kind are gagt  <cit>  and deeptools  <cit> . an important feature of the cmb is that it allows performing clustering for one experimental condition, and then saving it and applying exactly the same clustering order to another experimental condition. note that such an analysis requires prior resorting and matching of all involved datasets: the number of features and the original sorting order in each dataset should be the same. the corresponding r script  is included in our package. cluster maps builder allows dissecting clusters of genomic regions which are characterized by a similar profile of chip-seq  density, then extracting the regions from these profiles and performing further downstream analysis. after each clustering run all generated figures are saved automatically and the ids of all genomic regions and corresponding occupancy profiles can be saved separately for each cluster. these ids can be then conveniently converted to a bed file with genomic coordinates using a script merge2tabs.pl provided in nuctools, allowing further downstream analysis. one example of such analysis could be to predict differential tf binding from biophysical models, and compare continuous profiles predicted by the theory with the experimental chip-seq data  <cit> . another task addressed by script aggregate_profile.pl is the integration of chip-seq and dna methylation data. the problem is that most existing software packages only deal with the coordinates of differentially methylated regions for this purpose . on the other hand, it may be useful to take advantage of the single base pair resolution of dna methylation data as obtained by bisulfite sequencing. dna methylation positions obtained from standard methylation callers such as bismark  <cit>  can be converted into occupancy files with the continuous dna methylation coverage in analogy to chip-seq using bed2occupancy_average.pl, thus making these datasets directly comparable. then the script aggregate_profile.pl provides a possibility to deal with all individual methylated or unmethylated cytosines . for example, it is possible to calculate cluster maps or aggregate profiles aligning all nucleosomes around > <dig> millions of cpgs in the mouse genome, as was done in our previous works  <cit> , and vice versa one can calculate the density of dna methylation around any genomic feature  <cit> .

RESULTS
in the next section we demonstrate the application of nuctools to mouse embryonic stem cell  differentiation. escs represent a very well-defined cell line used for chromatin analysis in many laboratories. several hundred high-throughput sequencing datasets exist for this cell type  <cit> . importantly, more than  <dig> datasets of nucleosome positioning in escs determined by mnase-seq listed in a recent review  <cit>  have been reported by about  <dig> different laboratories including ours  <cit> . nucleosome positions derived from these datasets overlap only partially. thus, identifying stably bound nucleosomes with a peak-calling type of analysis is fraught with difficulties. here we demonstrate how nuctools can be applied to analyse nucleosome occupancy in escs in comparison to mouse embryonic fibroblasts  as their differentiated counterparts. the mnase-seq data sets for escs from voong et al.  <cit>  , west et al.  <cit>   and zhang et al.  <cit>   are used and compared to two mnase-seq datasets in mefs from our previous publication  <cit>  .

figure  <dig> shows the results of the calculation of the aggregate nucleosome occupancy profile based on the mnase-seq data from voong et al.  <cit>  around the centers of so-called lock. the latter represent large histone h <dig> lysine  <dig> dimethylated chromatin blocks  <cit> , which have been previously mapped in escs using h3k9me <dig> chip-seq. our calculation using nuctools shown in fig. 2a suggests that lock are characterized by a higher than average nucleosome density, which is in line with the paradigm that they are similar in their function to heterochromatin regions. lock regions have large sizes , and there are relatively few of them . due to these peculiarities the calculation of the same aggregate profile using homer in its default mode is less effective . the profile calculated by homer still allows one to guess the curve shape similar to the one calculated by nuctools in panel 2a, but it is less clear due to artefacts on the left side of the plot. homer has also an advanced mode “-histnorm” where such artefacts can be suppressed, after which the curve becomes less noisy and more similar to the one calculated by nuctools . the artefact suppression is realized differently in nuctools and homer. homer removes sequencing artefacts by disregarding low-occupancy regions, while nuctools removes artefacts by disregarding regions with suspiciously high occupancy. in our experience, the latter filtering works somewhat better. this artefact filtering is hard-wired in our script aggregate_profile.pl. the user usually does not need to adjust it but four other different normalization options are available for advanced users as detailed in the program’s manual. on the other hand, the size of the region to be taken into account in the calculation is obviously an analysis-specific parameter which needs to be selected by the user. here, we selected a region , which is determined by the lock region sizes.fig.  <dig> aggregate profiles showing nucleosome density around the centres of lock regions  in escs  <cit> . a calculation using nuctools  and the corresponding savitzky-golay smoothing of this curve . a clear increase of nucleosome density is seen as a characteristic of locks. b calculation using homer in its default mode. large peaks resulting from sequencing artefacts seen on the left from the centre preclude proper identification of the shape of the aggregate profile. homer’s advanced mode -histnorm allows suppressing these artefacts making the curve more similar to the curve in panel  . the accumulation of sequencing artefacts strongly interfering with large-scale analysis of aggregate profiles is a standard problem




figure  <dig> demonstrates different views of multiple nucleosome positioning tracks for a single genomic region that can be obtained with nuctools. the representation in panel 3a is typical for genome browsers – several signal tracks stacked on top of each other. such a representation is useful when looking at features which have well-defined peaks, but is suboptimal in the case of the continuous noisy nucleosome occupancy landscapes. in this particular case, it is very difficult to spot any significant differences between the five esc replicates and two mef replicates shown on the figure. one problem is that the lines need to be plotted together rather than on top of each other in order to be quantitatively comparable. however, even if plotted together as in panels 3b and 3c, we can only see that the replicate experiments significantly differ, but still cannot make any quantitative conclusions. these panels demonstrate the general problem in the field that quantification of nucleosome occupancy profile requires many replicates and large amount of sequencing in mammalian cells for good statistics. importantly, there is usually no “consensus” nucleosome profile, because each replicate experiment reflects slightly different experimental conditions. with nuctools, we can determine which regions in the nucleosome landscape are relatively stable across all replicate experiments, and which regions are more variable. this is accomplished with the script average_replicates.pl. as a result, an average profile is obtained for escs  and for mefs . the comparison of the two average profiles reveals the differences between escs and mefs . in this particular case, we can identify a region where nucleosome occupancy changes significantly between escs and mefs .fig.  <dig> different representation of nucleosome occupancy profiles at an individual genomic region . 100-bp window averaging was performed using script bed2occupancy_average.pl for five experiments in escs reported by voong et al.  <cit>  , west et al.  <cit>   and zhang et al.  <cit>   and two experiments in mefs from our previous publication  <cit>  denoted mef  <dig> and mef  <dig>  a a genome browser-style representation of all nucleosome occupancy tracks. b all esc tracks superimposed. c all mef tracks superimposed. d, e the average profiles calculated correspondingly over all esc and all mef experiments using script average_replicates.pl. the grey and light red areas show the standard deviation. f the averaged esc and mef profiles are superimposed on the same figure. an exemplary genomic region where the difference between the two profiles is significant is indicated by the blue rectangle





as another example, nuctools is applied to the genome-wide analysis of nucleosome occupancy. firstly we have determined genomic regions which contain stable and unstable nucleosomes in escs using script stable_nucs_replicates.pl. a sliding window of 100 bp was used and stable regions were selected as those where the relative error based on five esc replicates < <dig> , while this value was set to > <dig> for unstable  regions. with these parameters  <dig> , <dig> stable and  <dig>  unstable regions are obtained. next the aggregate nucleosome occupancy profiles around the centers of these regions were calculated. figure 4a shows that that the stable regions defined above are characterized by increased nucleosome occupancy. furthermore, one can spot slight oscillations of the nucleosome occupancy adjacent to the main peak. to better visualize these small oscillations the first derivative of the nucleosome occupancy is plotted in the insert. the peak of nucleosome occupancy at the center of stable regions together with the oscillations of nucleosome occupancy at adjacent regions suggests that regions of this class contain strongly positioned nucleosomes. these may act as statistical barriers for creating regular nucleosome arrays in their vicinity. further analysis of this dataset using enrichr  <cit>  supports this idea by linking these regions to h3k9me <dig> histone modification characteristic for stable nucleosome arrays  <cit> . on the other hand, the aggregate profile of nucleosome occupancy around unstable  regions is characterized by significant nucleosome depletion. it is noted that our definition of stable and unstable nucleosomes was independent of the occupancy value. rather, the characteristic chromatin density increase and decrease correspondingly for stable and unstable regions was obtained as a result of filtering genomic regions by the level of the relative error based on the five esc replicates. the regions that show variable nucleosome occupancy between replicates are preferentially nucleosome depleted. unlike stable regions, in this case the curve of the aggregate nucleosome occupancy is very smooth and does not reveal oscillations. thus, regular nucleosome arrays are preferentially associated with stable and not unstable regions.fig.  <dig> aggregate profiles showing different properties of the nucleosome occupancy signatures at stable and fuzzy 100-bp genomic regions calculated using stable_nucs_replicates.pl for the data from gsm <dig> . a stable regions have increased nucleosome occupancy and act as a boundary statistically positioning nearby nucleosomes. the insert shows regular oscillations of the 1st derivative of the nucleosome occupancy. b fuzzy regions have decreased nucleosome occupancy and are not associated with specifically positioned nucleosomes. these are preferentially nucleosome-depleted regions such as active promoters and enhancers




at the next analysis step the differences in nucleosome occupancy between escs and mefs were evaluated. the end user of nuctools can define these differences in a number of ways depending on the type of the following downstream analysis and the biological question of interest. as an example the differences between stable nucleosome regions as defined above in escs versus mefs are computed. the script compare_two_conditions.pl takes as input results of the script stable_nuc_replicates.pl, and reports differences based on the user-selected signal and threshold, e.g. either comparing the occupancy in escs and mefs, or comparing the fuzziness in escs and mefs. here, we selected nucleosome occupancy as the signal and the threshold of the relative occupancy change as  <dig> . the relative occupancy change odiff is calculated by the script as odiff =  <dig> *  / , where < on1 > is the replicate-averaged occupancy in a given genomic region in the experimental condition  <dig>  and < on2 > is the replicate-averaged occupancy in the experimental condition  <dig>  a total of  <dig>  100-bp regions were obtained where nucleosome occupancy increased in mef versus escs, and in  <dig>  100-bp regions nucleosome occupancy decreased in mef versus escs. in our experience the asymmetry between the numbers of regions which gained and lost nucleosomes is quite systematic and probably reflects biological differences between the cell states. enrichr analysis of these datasets reveals that the regions which gain and lost nucleosomes in mefs versus escs are associated with two distinct sets of transcription factor binding motifs listed in additional file 1: table s <dig> and additional file 2: table s <dig> . this distinction may indicate different mechanisms of nucleosome loss and gain during esc differentiation.

figure  <dig> shows the results of nuctools calculation of the nucleosome repeat length in escs based on the dataset from voong et al.  <cit>  . in this case, nrl =  <dig>  +/−  <dig>  bp. interestingly, our previous estimation of the nucleosome repeat length in escs was about 4 bp smaller. this reflects the intrinsic variability of this type of experiments. while it is safe to compare nrls between different genomic regions based on a single experiment, for the comparison of different cell states a very rigorous statistics needs to be performed using several different replicates as exemplified in fig.  <dig> fig.  <dig> calculation of the nrl for escs based on the data from gsm <dig>  using scripts nucleosome_repeat_length.pl and plotnrl.r. a the average frequency of nucleosome-nucleosome distances genome-wide. b peak positions plotted as a function of the peak numbers from panel . the linear fit of these points reveals the nrl and the error of its determination. in this case, nrl =  <dig>  ±  <dig>  bp. this is the genome-average nrl. nrls calculated for smaller genomic regions may differ from each other; the genome-wide nrl is the average of all local nrls




figure  <dig> shows the heatmaps calculated using the nuctols’ cluster maps builder program for the nucleosome occupancy in escs and mefs around common ctcf sites which are present both in escs and mefs defined as in  <cit> . the nucleosome occupancy oscillation around bound ctcf is a well-known feature  <cit> . figure 6a shows the heatmap calculated for the nucleosome occupancy in escs determined by voong et al.  <cit>   around common ctcf sites, with the sorting order determined by the average value of nucleosome occupancy in the region  around ctcf site. figure 6b re-orders the same data following the ctcf binding site score from smallest ctcf chip-seq peaks  to the largest ctcf peaks . interestingly, the larger the ctcf peak, the more pronounced is the nucleosome depletion. this is consistent with the classical hypothesis of nucleosome/ctcf competition and argues against the nucleosome occupancy peak centered at ctcf-bound sites based on the chemical mapping data reported in the same publication by voong et al.  <cit> . . figure 6c reorders the same data by performing k-means clustering for  <dig> clusters based on the nucleosome occupancy in the region  around ctcf. one can see that different subsets of ctcf-bound sites are actually characterised by different nucleosome signatures – a similar conclusion was reached earlier by kundaje and coauthors  <cit> . figure 6d reorders the same data using k-means clustering for  <dig> clusters based on the nucleosome occupancy in the region . figure 6e also uses k-meand clustering for  <dig> clusters, but now a larger region  is taken into account when calculating the similarities between nucleosome occupancy patterns. as a result, the latter type of analysis allows visualizing nucleosome occupancy oscillations extending to the whole region shown in the heat map. finally, fig. 6f keeps the same region order as in fig. 6e, but reports the calculations performed for the nucleosome from one of the replicates of mnase-seq in mefs  <cit> . the comparison between fig. 6e and f reflects not only the biological changes between escs and mefs, but also a difference between the sequencing depths in escs  and mefs . as a result the fine features of the nucleosome occupancy distribution are better distinguishable in escs. importantly, nuctools allows conveniently extracting all subsets identified using cluster analysis in fig.  <dig> for further downstream analysis of the corresponding genomic regions.fig.  <dig> exemplary heat maps calculated using cluster maps builder. a–e nucleosome occupancy in escs from voong et al.  <cit>   around common ctcf sites present both in escs and mefs defined as in  <cit> , sorted according to the average occupancy value in the  region , ctcf binding site score , k-means clustering with  <dig> clusters based on nucleosome occupancy in the  region , k-means clustering with  <dig> clusters based on nucleosome occupancy in  region , k-means clustering with  <dig> clusters based on nucleosome occupancy in  region . f nucleosome occupancy in mefs  <cit>   around common ctcf sites present both in escs and mefs, sorted as in panel e





CONCLUSIONS
here, we have introduced the software package nuctools for a continuous chromatin feature analysis. typical workflows and the application to a specific example of nucleosome repositioning and occupancy changes during differentiation of esc differentiation were illustrated. the nuctools set of scripts addresses the need to cope with the continuous distribution of genomic nucleosome occupancies and multiple large datasets and provides an approach to integrate other chromatin features complementing already available third party computational tools. some of the problems described above like inter-replicate variability are not just technical but rather conceptual. thus, there is an ongoing need to address these issues with additional theoretical approaches and we will extend and update the nuctools as these become available.

availability and requirements

project name: nuctools


project home page:
https://homeveg.github.io/nuctools



archived version:
http://www.generegulation.info/index.php/nuctools



operating system: platform independent for core scripts; windows  <dig> for cmbt


programming languages: perl, r, matlab


license: gnu gpl  <dig> or higher


any restrictions to use by non-academics: none

additional files

additional file 1: table s <dig>  enrichr analysis of the enrichment of dna sequence motifs based on transfac and jaspar pwms in 100-bp genomic regions which gained nucleosomes in mefs. 


additional file 2: table s <dig>  enrichr analysis of the enrichment of dna sequence motifs based on transfac and jaspar pwms in 100-bp genomic regions which lost nucleosomes in mefs. 




