BACKGROUND
biocollections represent irreplaceable legacy information about our biosphere that is essential for understanding how biodiversity is changing in an era of unprecedented human impacts . such analyses are only practical if data from biocollections around the world are digitized, integrated, and made widely available online. these tasks are a major focus of the field of biodiversity informatics, and although they present many challenges, they also promise to deliver significant benefits for biodiversity science and its allied disciplines . in recent years, the biodiversity informatics community has made tremendous strides toward achieving this goal by creating shared common vocabularies such as darwin core   <cit>  and publishing mechanisms such as the integrated publishing toolkit   <cit> . thanks to these and other national and international initiatives, we now have hundreds of millions of biodiversity records from around the world published in common formats and aggregated into centralized portals for further use.

along with this success, however, come new challenges for effectively using such a large mass of data. in particular, as the numbers of species, geographic regions, and institutions represented continue to grow, answering questions about the complex interrelationships among these data becomes increasingly difficult. this is due in no small part to the format of most existing data, which have been assembled and mobilized for the web using relatively “flat,” tabular formats, which often rely on identifiers that are unique only within the context of a given institution or data provider, and which typically have little or no awareness of data from other sources. aggregation efforts by themselves do not directly solve these problems, so in a very real sense, the biodiversity data landscape still consists of many “islands” of biodiversity data with only limited connectivity. discovering even simple relationships among these data islands is often prohibitively difficult. for example, a single collecting expedition might ultimately result in a cascade of specimens and their derivatives  scattered across multiple institutional collections. as each institution populates its own data island, the links between these objects are lost, and putting these pieces back together again is, at best, very challenging and at worst, practically impossible.

the semantic web  and its core technologies provide a natural solution to these problems by enabling a web of linked data and knowledge where all data objects are uniquely identified and the relationships among them are explicitly defined  <cit> . consequently, there is growing recognition of the advantages of linked data technologies not only in biodiversity research and its related disciplines  but also throughout the life sciences .

despite this considerable interest, most extant biodiversity data remain well outside of the semantic web. why the apparent lack of progress? we identify three major obstacles preventing the more widespread adoption of linked data technologies in biodiversity science. first, the technologies behind the sw are generally much more complex than those of traditional data publishing. producing high-quality linkable data typically requires, at a minimum, the use of http  uri -based identifiers for all data objects, resource description framework   <cit>  for representing the data and its interrelationships, and vocabularies and ontologies specified in rdf schema   <cit>  or the web ontology language   <cit>  to describe the kinds of data and relationships that may be used. the traditional tools that these technologies replace, such as relational databases or even spreadsheets, are comparatively much simpler. second, along with this technological complexity, most available tools for moving data to the sw are either immature, too generic, or require sophisticated knowledge of sw technologies. such tools are intimidating and unhelpful to users who simply want to publish their data, not become sw experts. finally, standards for guiding the creation of linked data, such as identifier schemes and services and descriptive ontologies, are either nonexistent, in flux as they undergo active development, or plagued by uncertainty due to competing proposals. this is especially problematic for interdisciplinary fields such as biodiversity science, which spans many knowledge domains, such as taxonomy, genetics, ecology, and geography. however, major collaborative efforts are underway to address this last problem e.g.,  <cit> , and we anticipate that robust, stable standards will emerge in the next few years. in the meantime, much more work will be needed to eventually overcome obstacles one and two.

the biological sciences collections  triplifier is new software that takes a step toward meeting these challenges by making it easy for biodiversity scientists to take data in traditional tabular representations and transform them into a format suitable for the semantic web. the triplifier accepts data in a variety of common input formats and converts them into a full rdf representation using a consistent rdf vocabulary with rdfs classes and explicit relationships among the class instances. data in the widely-used darwin core-archive  format  <cit>  are especially easy to process and require the user to have only minimal knowledge of sw technologies. the triplifier is free and open source software that can be used either as a graphical web-based application or as a local command-line tool. in this paper, we describe the design and implementation of the triplifier, summarize its user interface and outputs, discuss the advantages of and potential applications for the triplifier, and consider the ongoing challenges that currently limit the utility of the triplifier and other sw technologies in biodiversity science.

implementation
in developing the triplifier, there were four major design goals that guided our work. first, the triplifier needed to accept biodiversity data in standard tabular formats, including dwc-a, and convert them into a usable, and useful, rdf representation. second, the software needed to be easy to use, yet flexible enough to handle a variety of input data formats and structures. third, the triplifier’s rdf vocabulary should be based primarily on darwin core, which has become the standard for representing species occurrence data. finally, the triplifier needed to be easily extensible to support new input data sources and formats.

software design and architecture
to meet these objectives, we chose to build the triplifier primarily as a dynamic web application. the software was architected using a typical “web  <dig> ” approach, with ajax -style lightweight communication between the client and a server backend used for primary data processing. the server-side component of the triplifier was implemented in java and communicates with the client by delivering and accepting json -formatted data via an http web services api . a simplified diagram of the basic software architecture is presented in figure  <dig> figure  <dig> 
simplified architectural block diagram of the triplifier. solid lines indicate connections between major software components, dotted lines indicate movement of data into or out of files and databases, arrowheads indicate the overall direction of data movement through the system. white, rounded boxes represent key triplifier software components; the orange, rectangular box represents key third-party software components. the remaining symbols represent data files and databases.



in order to support multiple input formats and to allow the triplifier to easily support new input formats, the initial stages of data processing in the server software were implemented using a simple plugin architecture. all code that is specific to a particular data format is housed within a single, self-contained java class that implements a java interface for reading generic tabular-formatted data. these reader classes are automatically discovered and dynamically loaded by the main server software at run time.

after initial processing, all new incoming data is converted to a standardized representation in a sqlite  database. most data sources are converted to this database representation with few, or no changes. for darwin core archives, however, we implemented more sophisticated initial processing that takes advantage of this format’s well-defined structure and close relationship with dwc. the column names in a dwc-a are first analyzed to identify which classes are present  and the data are then “normalized” by moving columns for the different classes into separate tables and eliminating duplicates.

final output of rdf triples was implemented using d2rq  <cit>  and apache jena  <cit> . guided by input from the client interface, the server dynamically builds a d2rq database-to-rdf mapping that allows the data in the sqlite database to be converted directly to rdf in either n-triples  <cit>  or turtle  <cit>  format, or to the dot format  as a directed graph representation.

the client-side component of the triplifier was designed to support various degrees of automation depending on the input data format. conversion of a particular format to rdf may be almost completely automated by writing a javascript component that defines how the source data should be mapped to class instances, properties, and relationships in rdf. these javascript components must adhere to a simple “interface” and are similar in concept to the plugin system for reading source data on the server. for all input sources, we designed the web interface to allow the user fine-grained control over the details of how the data are mapped to rdf.

vocabulary and data model
as mentioned earlier, a major impediment to the more widespread adoption of sw standards by biodiversity scientists is the lack of robust, standardized rdf vocabularies and ontologies. this was a problem for developing the triplifier because such standards are needed to produce meaningful and reusable linked data. to solve this problem, we chose to base the triplifier’s working rdf vocabulary, rdfs class definitions, and ontology primarily on the darwin core standard. dwc is by far the most widely used vocabulary for tabular-formatted data, so it made sense to use it as much as possible for the triplifier.

even though darwin core is available as an rdf document , in its current form it is of limited utility for producing linked data. the most significant shortcomings are confusion about the precise meanings of the dwc “classes” and their associated “id” terms , no statements defining the domains of descriptive properties, and a lack of properties to define the relationships among class instances  <cit> . we briefly describe how we addressed each of these issues.table  <dig> 
uri short-form prefixes used in this paper


http://biscicol.org/terms/biscicol.owl#
http://purl.org/dc/terms/
http://rs.tdwg.org/dwc/terms/
http://rs.tdwg.org/dwc/terms/attributes/
http://www.w <dig> org/2002/07/owl#
http://www.w <dig> org/1999/02/22-rdf-syntax-ns#


the principal rdfs classes in the triplifier’s vocabulary are the dwc “categories,” which are already defined in the dwc rdf as rdfs classes. we interpreted the class-specific “id” terms as denoting the identifiers that could be used for instances of the dwc classes, which we believe is consistent with current usage of these terms in actual biodiversity datasets. the remaining terms, which are defined in the dwc rdf as type rdf:property, were included as properties used to connect literal objects  to class instances. we also included seven rdfs classes defined by the dublin core metadata standard  <cit> , one of which is already a part of dwc , and the remainder of which are useful for describing biocollections data .

although the dwc rdf does not state the domain of any properties, it does include dwcattributes: organizedinclass, which appears to serve a similar function. we interpreted dwcattributes:organizedinclass as defining to which class each property should apply and therefore effectively defining each property’s domain. this worked for nearly all properties except for the so-called “record-level terms,” which do not indicate that they are organized within a single class. seven of these terms  appeared to most often describe an occurrence in actual practice, so we considered them as applying to this class. we left the remaining record-level terms in the vocabulary without a single-class domain. because most of these terms are rarely used, they are not included by default in the web-based user interface.

as it currently stands, dwc includes virtually no guidance about how class instances should be related to one another in a linked data context, but there have been previous independent efforts to fill this gap, such as the taxon concept ontology  <cit> , the darwin-sw project  <cit> , and the work of the tdwg-rdf interest group . however, because efforts to develop and standardize full-featured ontologies for biodiversity science and its related disciplines are well under way  <cit> , we chose to develop a limited “ontology” for the triplifier that defines only four high-level relationships between class instances. this allowed us to move forward with software development while we wait for richer and more descriptive ontologies to become available.

the four properties supported by the triplifier originated with the broader biscicol project and were chosen because they allowed us to capture the essential connections in dwc data. we used the owl constructs owl: symmetricproperty and owl: transitiveproperty to formally define how these properties should be applied when reasoning across multiple rdf statements . the four properties are ro:derives_from , bsc:depends_on , bsc: alias_of , and bsc:related_to  . these properties had already been selected for the broader biscicol project and they allowed us to capture the essential connections in dwc data. the meaning of each property is apparent from its name: ro: derives_from is borrowed from the obo relation ontology  <cit>  and indicates that the subject of an rdf statement was physically derived from the object, bsc: depends_on indicates that the subject could not exist without the object, bsc: alias_of indicates the subject and object are the same thing, and bsc: related_to indicates that the subject and object share a non-dependent relationship.table  <dig> 
definitions and examples of the relationship properties used by the triplifier’s ontology




during the triplifier’s development, dwc included six core categories or classes , and we focused on explicitly defining the possible relationships among instances of these classes. recently, a seventh category was added, dwc:materialsample  <cit> , but it is not yet included in the triplifier’s ontology. for each of these six classes, we considered their meanings as defined in the dwc standard as well as how they are most commonly used in practice in order to decide how instances of these classes could best be connected using the four simple properties discussed above. the results of this analysis became the final ontology that we used for developing the triplifier, which is illustrated in figure  <dig>  this ontology was intended to cover most, but not all, dwc-based biodiversity data. for example, it does not deal with cases where ro: derives_from might be used, such as a tissue sample that is taken from a whole specimen, and it does not include the use of alias_of. our experience has been that derives_from is rarely needed when working with current dwc data sets, and alias_of is relevant only for special cases in which a single object has been accidentally assigned multiple identifiers. thus, the triplifier does not automatically apply either of these properties by default. however, we designed the triplifier’s web interface to allow users to easily express all four relationship properties for their own data, as needed.figure  <dig> 
diagram of the ontology used by the triplifier for the six core dwc classes. for simplicity of presentation, the “dwc” and “bsc” prefixes are omitted.



instance identifiers
a final challenge in developing the triplifier was the lack of a broadly accepted and widely used standard for generating and resolving identifiers for biodiversity data. although several options are available, such as archival resource keys , biocode commons identifiers , digital object identifiers , life sciences identifiers , uniform resource name -based mechanisms, and others , none have been widely adopted by biodiversity data providers  <cit> . given this reality, we decided to neither enforce nor endorse any particular identifier standard in the triplifier and to instead allow users to work directly with whatever identifiers they prefer.

many data, however, have only locally unique identifiers, which are not useful for linking on the sw, and some identifiers are not even unique within a single dataset . moreover, flat, single-table input formats such as dwc-a usually have no identifiers at all for most of the class instances that are implicitly present in the data. to handle these cases, we implemented a simple identifier construction algorithm. if the user does not indicate that input data uses globally unique identifiers, the triplifier generates identifiers for each class instance by concatenating three pieces of information: sqlite_database_table_name + “.” + identifier_column_name + “_” + local_identifier. in the case of dwc-as, if identifiers for a particular class are missing entirely, local integer-based identifiers are generated during the data normalization step. it should be noted that this scheme is only guaranteed to produce identifiers that are unique within a given version of a dataset, which is sufficient for using the final rdf by itself but not for linking it with other datasets. although we considered having the triplifier mint new globally unique identifiers for user data, we ultimately decided that this was beyond the software’s intended scope.

active development
we are currently developing a command-line version of the triplifier to complement the web-based triplifier. the command-line triplifier is intended for efficient, high-throughput processing of large numbers of data files or very large data files. its user interface features two basic modes of operation. first, users can supply a custom d2rq mapping file to guide the conversion of the source data to rdf. mapping files can initially be generated by the web-based triplifier, further modified as needed, then used with the command-line triplifier for batch data processing. the second mode of operation uses custom java classes that fully automate the data conversion process for specific input data formats. these classes are conceptually analogous to the automation plugins described above for the web-based triplifier, and when the command-line tool is used in this mode, no d2rq mapping file is required.

automation classes for the command-line triplifier can also take advantage of a java class framework that was designed to make it easy to customize how source data are converted to rdf. for instance, automation classes could use terms from alternative vocabularies or ontologies, allowing for a broader range of semantic interpretations of source data files, or they could incorporate custom globally unique identifier schemes. support for these relatively low-level modifications goes beyond what is easily achievable through the web-based interface.

RESULTS
the biscicol triplifier is available to users as both a web application  <cit>  and a command-line program. the triplifier is free and open source software and all source code is provided under the terms of the bsd 3-clause license  <cit>  at the triplifier’s project site  <cit> . pre-built executables of the command-line tool are available via the triplifier’s subversion repository. the project site also includes user and developer documentation, and additional information about the philosophy and design decisions that guided triplifier development can be found on the biscicol blog  <cit> .

the triplifier currently accepts source data in a variety of common tabular data formats, including comma-separated values  text files, opendocument  and microsoft excel spreadsheets, and dwc-a. the triplifier also supports direct network connections to popular relational database management systems such as postgresql, mysql, oracle database, and microsoft sql server. input data are not required to follow any particular structure and are not required to use dwc terms.

after loading an input data source, the user must provide the information about the data that the triplifier needs to successfully convert them to rdf. with the web interface, this requires four steps. first, if the source includes multiple data tables, the user indicates which keys join the tables together . second, the user specifies which table columns should be used as identifiers for instances of the classes in the triplifier’s vocabulary and whether those columns contain globally unique identifiers. third, columns with literal data are matched to property names in the triplifier’s vocabulary and the classes they describe. fourth, the user indicates how class instances should be connected to one another with the four triplifier relationship properties.

upon completion of these four steps, the triplifier can generate and return the rdf representation of the user’s data as a single n-triples or turtle-formatted text file. alternatively, the triples can be converted to the dot graph description format and downloaded as a dot file, which allows the data to be visualized with software such as graphviz  <cit> . the user may also download the dynamically generated mapping file that captures all of the information provided in the four configuration steps. these mapping files can then be used with the command-line version of the triplifier to rapidly process larger volumes of data.

for source data that is in the format of a dwc-a, the process is even simpler. if the user chooses, the triplifier can automatically analyze the source archive and complete all four of the configuration steps with no user intervention. at that point, the user can either customize the configuration as desired or simply request the rdf file. in most cases, running dwc-as through the triplifier is as straightforward as uploading the archive, then downloading the rdf representation. example rdf output from the triplifier for typical dwc-a data, including a graphical representation of the generated rdf triples, is provided in additional file  <dig> 

we built the triplifier with biodiversity data in mind, but the code follows a modular design and should be, for the most part, relatively easy to adapt to other knowledge domains. for example, all that is required to support a new input data format is writing a single java class that implements a reader plugin for the triplifier’s server-side data processing system. no existing code needs to be modified. customizing or replacing the triplifier’s rdf vocabulary is also straightforward because it is defined by a single rdfs file.

discussion
the biscicol triplifier is not the first software for converting tabular data to rdf see, e.g., , but for biodiversity scientists, there are at least three key advantages that separate the triplifier from most of these other tools. first, unlike other software which often works with only one or a few input formats, the triplifier supports a broad range of data formats, ranging from plain text files to full-fledged databases, and it is the only tool of which we are aware that directly supports dwc-as. second, the triplifier is specifically tailored for biodiversity data and comes with a ready-to-use vocabulary and interface based upon dwc. third, and perhaps most important, because of its domain-specificity, the triplifier can hide most or all of the complexity of sw technologies from the end user. for most users, and for most kinds of data, using the triplifier will require little more than a conceptual understanding of the principles behind linked data technologies. for users with data in dwc-as, conversion to rdf can be fully automated and requires no special knowledge at all. this is in contrast to more generic tabular data converters for which the user must specify complex mappings that require detailed knowledge of the target rdf vocabularies and ontologies.

despite these advantages, the current landscape for linked data in biodiversity science will likely limit the triplifier’s ability to bring biodiversity data to the sw, at least in the short term. there are two main reasons for this. first, the absence of robust, standardized, and widely-accepted vocabularies and ontologies for linkable biodiversity data means that the rdf generated by the triplifier is neither as expressive nor as broadly useful as it could be. for example, we do not envision the triplifier’s simplistic ontology for relationships among its class instances as a long-term solution. rather, we consider it merely a means for moving forward until a more satisfactory ontology becomes available and accepted as a standard.

second, the anarchy presently governing the use of identifiers in biodiversity data is a major impediment to using these data, and rdf generated for them by the triplifier, on the sw. if the dream of making all biodiversity data universally accessible and linkable is to become reality, biodiversity data must use identifiers that are globally unique, resolvable, and above all, persistent  <cit> . the triplifier takes steps to ensure that identifiers in the data it processes are unique within the dataset, which is sufficient for producing functional rdf, but data without permanent and globally unique identifiers cannot be usefully linked with data from other sources. unfortunately, a permanent solution to this challenge does not seem near at hand, and finding such a solution should be an urgent community priority.

nevertheless, there are several ways in which the triplifier will still be useful to biodiversity scientists with data in traditional formats, even if those data are not immediately destined for the larger sw. perhaps most important, rdf-formatted data from the triplifier can be aggregated in either local or remote “triple stores”  and examined with sw querying tools such as sparql  <cit> . analyzing dwc-based biodiversity data in this way, rather than as rows in a spreadsheet or relational database table, often makes it much easier to answer high-level questions about the data. for example, suppose we would like to know which occurrence instances in a dwc dataset are associated with taxonomic information. in a tabular context, answering this conceptually simple question is quite cumbersome and could require inspecting the values of more than  <dig> table columns. with the rdf output generated by the triplifier, we need only ask which occurrence instances are related to a taxon instance, and this question can be concisely represented by a simple sparql query, such as:

select ?occurrence

where {

?occurrence bsc:related_to ?taxon.

?occurrence a dwc:occurrence.

?taxon a dwc:taxon

}.

thus, unlike traditional relational databases, rdf makes it possible to work directly at the level of class instances and their relationships. this can greatly simplify the process of translating questions about the data into the queries that will answer them, and the benefits of this approach have already been demonstrated in other life sciences domains e.g.,  <cit> .

we also envision the triplifier as a hands-on tool for biodiversity researchers to learn about and experiment with sw technologies. in this role, it should be especially useful to those who are are curious about moving their data to the sw but have so far been deterred by the complexity of the sw technology stack. with the triplifier, such researchers can easily apply core sw technologies directly to their own data and study the results. use of the familiar dwc terms in the triplifier’s rdf vocabulary and support for visualization software such as graphviz will further assist researchers in interpreting and understanding the rdf representations of their data.

CONCLUSIONS
the biscicol triplifier is new open-source software that automates the process of converting tabular-format biodiversity data to rdf suitable for use on the sw. the triplifier offers the flexibility of both web-based and command-line interfaces, supports a wide variety of common input formats, including the popular dwc-a format, and comes with a vocabulary and simple ontology based on the widely-used darwin core standard. output formats include turtle and n-triples for rdf and dot for graph visualizations. a modular design makes the triplifier adaptable to other input data formats, rdf vocabularies, and research domains.

the biscicol triplifier makes it easier than ever before for biodiversity scientists to apply modern sw technologies to their data. expressing tabular-format biodiversity data as rdf is useful not only because it allows the data to link with other data sources on the sw, but also because it allows researchers to use powerful query tools such as sparql to answer complex questions about their data. the triplifier does not require users to have extensive knowledge of rdf, rdfs vocabularies, or owl ontologies, which should make it a valuable aid for biodiversity researchers who wish to learn about and experiment with these technologies.

the semantic web holds great potential for biodiversity science, but a variety of challenges continue to make actually achieving this potential elusive. perhaps most critically, biodiversity data continue to suffer from the widespread use of identifiers that are neither persistent nor globally unique, and this severely limits the usefulness of these data on the global sw. better methods for visualizing linked biodiversity data are also a pressing need, especially for biodiversity scientists who are just beginning to explore how their data might work in a linked context. looking further ahead, as the triplifier and other, complementary efforts eventually succeed in mobilizing biodiversity data for the sw, we will likely need new computational tools to make sense of such a massive, and massively interconnected, dataset.

first, though, we need to make it less difficult for biodiversity researchers to actually get their data to the sw in the first place, and the biscicol triplifier is a significant step toward this goal. our hope is that definitive new standards for vocabularies, ontologies, and identifiers, in concert with software tools like the triplifier, will make sw technologies as easy to use in the future as databases and spreadsheets have been in the past.

availability and requirements
project name: biscicol triplifier

project home page:http://www.biscicol.org/triplifier/ ; http://triplifier.googlecode.com/ 

operating system: the web-based interface only requires a modern web browser and has been tested with recent versions of firefox, chrome, opera, safari, and internet explorer. the command-line triplifier and server-side software require java and should run on all modern operating systems for which the java run-time environment and development tools are available .

programming language: java and javascript

other requirements: the server-side software requires a java web application server such as apache tomcat or glassfish. all other required components are included with the source distribution.

license: bsd 3-clause license 

any restrictions to use by non-academics: non-academics may freely use this software.

electronic supplementary material
additional file 1:
supplementary material for “the biscicol triplifier: bringing biodiversity data to the semantic web”. the supplementary material provides rdf output generated by the triplifier for a small input dwc-a data set, and includes a graphical representation of the rdf output. 

 competing interests

the authors declare that they have no competing interests.

authors’ contributions

rg, nc, and jd conceived the project. all authors contributed to software design. bjs, lz, jd, and tc implemented the software. rg, jd, and bjs wrote the software documentation. bjs drafted the manuscript. all authors read and approved the final manuscript.

we would like to thank steven baskauf, reed beaman, bryan p. heidorn, hilmar lapp, richard pyle, tim robertson and robert whitton for the constructive feedback and many discussions that took place throughout the course of software development. we are very grateful to the national science foundation for its support .
