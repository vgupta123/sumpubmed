BACKGROUND
improvements in technology have resulted in the ability to perform increasingly complex experimental research, generating large amounts of multi-dimensional data. research in biology today involves the exploration and analysis of the large, shared databases available to the wider scientific community. this reduces duplication of effort and allows more extensive research to be done, by providing independent data sources for verifying hypotheses formulated.

conversely, technology has been unable to manage the data it has spawned; data management, analysis and visualisation tools struggle to meet requirements  <cit> . this is due largely to the constantly evolving information needs of the biologists working with the increasingly large amounts of heterogeneous data generated  <cit> . bioinformatics developed to exploit information technology in biological data analysis  <cit> .

this paper looks at the development of visual solutions for intuitive analysis of anatomy ontologies. the primary data source is the edinburgh mouse atlas project , developed at edinburgh's medical research council's  human genetics unit , documenting the developmental stages of the mouse embryo.

prototypes are being developed for visualisation in 2d  and 3d, to highlight relationships between and within different anatomy components. this will help uncover knowledge about gene expression, structure and function as cells and tissues evolve into defined organs, to track normal development and evolution.

visual solutions for effective analysis of biological data
at least a basic understanding of the structure of the anatomy ontology data is required to provide effective design and development with mappings to spatial representations that capture users' mental models of the data. visualisations generated should provide biologists with data overviews, followed by the ability to study regions of interest  in detail, within the context of the overall data set, to highlight patterns within the data  <cit> . support for interactive data exploration should be provided; functionality for browsing and searching and for manipulation of data structures allows analysis from multiple perspectives.

visual encoding of textual data exploits humans' highly developed perceptual abilities to decrease the cognitive load associated with complex data analysis  <cit> . a number of visualisation methods and techniques already exist for complex data analysis, both within and outwith the field of bioinformatics, including 2d and 3d scatter plots, self-organising maps , parallel coordinates, 2d and 3d hierarchical graphs, information maps, murals and cubes, perspective walls, virtual landscapes, cityscapes, and physical space metaphors such as rooms, windows and desktops. hyperbolic or fish-eye views and lenses, magic and semantic lenses, and dynamic query systems aid detailed study of regions of interest  especially in large data sets.  <cit> 

in order to ascertain what would provide, individually or in concert, optimal visual data analysis solutions for the study of anatomy ontologies, it is necessary to assess existing tools and techniques to determine their applicability to the data sets of interest and the tasks biologists perform. it is important to provide analysis solutions that the different target users with varying research backgrounds are able to use to interpret data required for their work effectively.  <cit> 

the edinburgh mouse atlas project
the working emap browser  employs a collapsible, indented text index with mappings to corresponding anatomical components in 2d and 3d digital models for the developmental stages of the mouse embryo.

extensions required to emap browsers
more intuitive methods are required for data analysis, especially where comparisons between multiple data sets, such as lineage across stages, are to be made. a major advantage in visual representation of the data over emap's text indices is the availability of an overview in addition to the ability to study rois in detail.

the ontology data is structured hierarchically from a root, with unique sub-components together forming complete  components  <cit> , using part-of relationships. a graphical layout that exploits this structure should aid discovery of relationships within the data  <cit> . visualisations can make use of physical attributes such as shape, colour and size to encode properties of and relationships between data elements. the following sections discuss advantages in visual data analysis:

 <dig>  representation of complex relationships
as all the developmental stages for a specified anatomy are combined into the complete, abstract organism persistence of components across stages may result in non-unique entries, with different paths to the root.

an illustration from the mouse anatomy ontology would be the component second polar body, which exists on the first level below the root for the first three stages of development. however in the 4th stage the second polar body forms a part of the extraembryonic component. figure  <dig> shows the two occurrences of the second polar body in the ontology for the abstract organism, on the first and the second levels below the root.

the second polar body could be regarded as having multiple parentage in the abstract organism, as demonstrated for the component g in the index in figure  <dig> 

 <dig>  grouping
grouping of anatomical components based on user-specified criteria, to provide different perspectives of the data structure, is a function required for which no graphical support exists in the emap browsers. grouping enables users to focus on relationships within data based on different classification methods for structuring data than those used for constructing the ontologies. a typical example would be the skin that covers the entire organism. skin is not represented as a super-component in any one stage; however there may be components in each stage that together make up the skin of the organism at that point in development. a group component skin could be created that links to all components that comprise the skin in a stage, using the default part-of relationship again to form a complete whole, while preserving the uniqueness of data components  <cit>  . note that this will result in multiple parentage for unique nodes, similar to that occurring in figures  <dig> and  <dig> 

 <dig>  lineage
lineage across stages is currently displayed using plain text descriptions of a component's ancestors and descendants in consecutive text boxes arranged along a horizontal plane. the main disadvantage associated with this is the need to scroll through up to  <dig> text boxes to identify all the theiler stages  of the mouse embryo, for example, through which a specified component persists .

 <dig>  visual querying
it is necessary to extend the sub-string searching provided in the emap browsers to retrieve related information from external data sources. lack of integration between databases and the different search and query tools provided for these data sources  <cit>  however present problems for information retrieval . differences in data quality resulting from varied methods for collection and storage, and different data annotation techniques may result in large semantic and syntactic differences in information stored, increasing difficulty in the retrieval and use of data from different sources  <cit> .

transparent mappings to external data sources that hide their underlying complexity should aid searching and ir. visual, dynamic querying, illustrated in figure  <dig>  employing semantic lenses and dynamic query sliders, encourages data exploration by removing the need for users to learn high-level query languages and syntax. complex queries can be formed intuitively using an interface that provides immediate, visual feedback and allows simplified modification and/or reversal of actions  <cit> , without increasing cognitive load.

searching currently makes use of free text fields for input, highlighting search hits within the overview. modification to use a semantic lens could extract information of interest and use this as input for a refined search. the sub-tree containing the component parts of the heart, say, could be extracted using a filter that takes heart as input and node property print name to filter out non-relevant data. related information from other data sources could then take the results of this search as input to extract gene expression, say, on the components of interest.

 <dig>  simultaneous analysis of multiple anatomy ontologies
determination of lineage and the comparison of ontologies for different organisms require simultaneous visualisation of multiple data sets. intuitive comparison between different data sets requires visualisations that highlight mappings between related data elements .

related work in hierarchical data visualisation
several applications already exist for the visualisation of large, hierarchically structured data sets. it is important to examine specific applications to determine if users' requirements cannot be satisfied with existing visualisation solutions. those applications found to most closely approach the requirements of this project are summarised below, detailing features they provide and their limitations for the data analysis required.

 <dig>  protégé
a java-based knowledge modelling tool, protégé incorporates multiple hierarchical visualisation applications to aid the construction, editing and visualisation of ontologies. these include ontoviz, which makes of the graphviz visualisation libraries for graphical representations of hierarchical data. owlviz, specifically developed to visualise owl ontologies, also makes use of graphviz. a major problem with extending graphviz is that it requires use of the non-standard languages dot and lefty.

tgviz uses touchgraph, developed in java, for dynamic layout of nodes in a connected network graph. touchgraph encodes node properties using colour, and provides clustering of like data, as well as geometric and hyperbolic zoom. functionality for searching and for saving graphs as image files is also provided.

shrimp, providing modular components built using java beans, is combined with protégé to form jambalaya, a tool that provides fish-eye views that make use of a continuous zoom for overviews of large data sets. data abstraction, employing nesting and hiding of data, is followed by extraction of sub-sets to separate windows to allow focus on detail in rois. encoding of data nodes using colour and depth cueing in 3d helps to distinguish more important data.  <cit> 

 <dig>  piccolo
developed using java2d and swing, piccolo provides support for zoom and the use of multiple cameras or viewpoints. piccolo has been customised for visualisation of network and hierarchical data. giny, the graph interface library, extends piccolo to visualise protein and gene interaction and expression in cytoscape. giny uses colour coding of gene expression to aid comparison of data sub-sets. data reduction is achieved by clustering related data into encapsulating, composite nodes.

spacetree extends piccolo to produce rooted, node-link hierarchical graphs that combine  zoom, panning and folding of sub-graphs to provide maximum screen space to rois. main disadvantages of spacetree include the loss of the overview when analysing rois. also, though the provision of  detail in nodes is useful this reduces screen real estate available for the overview.

zoomgraph extends piccolo's zoomable interface to provide semantic zoom into rois. an advantage in zoomgraph is the ability to define the properties of data nodes and links.  <cit> 

 <dig>  walrus
using java3d, walrus employs a hyperbolic projection for the visualisation of directed graphs in 3d space. although its hyperbolic layout provides an ideal method for displaying the kind of hierarchical data under study walrus is fairly specialised; it uses its own non-standard file format. further, the structure of graphs once loaded cannot be altered, and only one graph can be loaded at a time.  <cit> 

 <dig>  hypergraph
this java application provides a hyperbolic layout in 2d that allows interactive repositioning of nodes to provide more magnification to rois, with hyperlinks to further detail in external files.  <cit> 

 <dig>  vrmlgraph
developed using java, vrmlgraph draws arbitrary node-edge graphs in 3d. very little functionality is implemented beyond the drawing of nodes and links connecting them; the main benefit of this application is that it can take advantage of built-in navigation cues and capabilities in vrml for 3d perspective and cameras/viewpoints.  <cit> 

motivation for project
the applications and toolkits described above incorporate visualisation techniques for exploration of overviews, and with the exception of walrus, detailed analysis in rois. given the proven capability of hyperbolic layouts for navigation and exploration of large data sets it would be useful to harness the simple but effective implementation of the hyperbolic layout in hypergraph. protégé as it stands provides functionality that would still need adaptation to allow creation of groups as required for the anatomy ontology data. functionality for folding trees, searching, and highlighting of user paths, and encoding of data properties require further development to satisfy user requirements.

harnessing existing technology that performs effective analysis of complex data, applied in the tools studied above, will provide some of the functionality required to aid visual data analysis. however it is still necessary to develop novel techniques for analysis of the anatomy ontology data, building on existing methods that have proven useful for visualisation of complex data. intuitive comparison of multiple data sets and the tracing of lineage through the anatomy ontologies cannot be obtained using the functionality available in 2d tools; occlusion would be too high to allow useful analysis at any level of detail. 3d tools would reduce the problem of occlusion significantly. however 3d visualisations typically distribute data throughout the space available, clustering related data nodes around focal points. distinguishing individual nodes and the data sets to which they belong is difficult. drawing physical links between related nodes across data sets may result in crossing of links, reducing the ability to recognise these relationships.

the next section describes the 2d visualisation browser developed that builds on existing techniques to provide intuitive visual data analysis. this is followed by an evaluation carried out to determine if the visualisations provided improve the textual analysis currently performed. finally a 3d browser develops novel techniques that provide intuitive recognition of relationships across data sets, described in the sub-section novel techniques for visual analysis of the ontology data under implementation.

implementation
a prototype has been developed in java to provide visualisations of the ontology data. a rooted directed acyclic graph  in 2d provides an overview of each data set, with the ability to study rois in detail. anatomy components are represented using a 2d circle , while relationships between nodes are represented by  lines linking nodes, encoding relationships using colour. functionality implemented is described below, highlighting changes and additions made after the performance of the heuristic evaluation summarised in the next section.

description of visualisation prototype developed
 <dig>  layout
only the top three layers of the dag are drawn when the visualisation is first generated, in order to provide more screen space for data nodes and minimise occlusion; typical of data with a hierarchical structure, the number of nodes in a level increases as one descends the tree. the top layers provide an abstraction of the data set from which users may continue to extract more detail.

the default layout of the dag, with the lowest level of occlusion due to node labels, is left-right , shown in figure  <dig>  a top-down  layout is also available. a radial layout, illustrated in figure  <dig>  was suggested during the heuristic evaluation as an option for more optimal use of screen space. layout initially provided equal space to all nodes in each level. however as can be seen in figure  <dig> this makes poor use of screen space; some areas have high occlusion while others are sparsely populated. the improved layout in figure  <dig> weights the layout for the first layer below the root, where the largest bias occurs in node distribution, with weight dependent on number of  sub-nodes.

 <dig>  textual detail
labels have a default setting of component name for nodes, and  relationship between nodes for links. labels may be set to any of a node's properties, and all node and link properties may be displayed on request. the option to hide labels may be used to reduce occlusion, in which case holding the mouse over a node or link of interest brings the focus to it and pops up its label.

 <dig>  highlighting & ghosting
nodes and links of interest may be highlighted for emphasis, while less important data can be suppressed by ghosting it out.

 <dig>  selection of rois
a rectangle can be drawn to select nodes in close proximity to each other, making it possible to perform actions on the selection simultaneously.

 <dig>  expansion & collapsing of sub-trees
one solution to occlusion is to collapse sub-trees to hide less relevant data, providing more screen space to visible nodes.

 <dig>  zoom
the prototype has four implementations of zoom: rois can be drawn in a separate window, providing magnification by drawing the same number of nodes in a larger area, shown in figure  <dig>  a sub-tree may also be drawn in a separate window, providing both a semantic and a physical zoom.

the ability to zoom into an roi within the context of surrounding information was suggested by users as a useful option. employing an implementation that makes use of a hybrid between a semantic lens and a continuous hyperbolic zoom, this expands any one sub-tree while collapsing all others beyond that level. the roi is drawn using maximum screen space, with minimal rearrangement of the graph, as figure  <dig> shows. this also removes the extra cognitive load required to map between separate but related visualisations held in multiple windows.

physical zoom of the entire tree was not implemented initially because this requires scrolling through the dag to move to rois, with an associated loss of context. users however suggested the reduction in occlusion due to nodes being pushed further apart would make it easier to explore detail in rois, compensating for the loss of the overview. this option has now been implemented.

 <dig>  searching/querying
a custom dialog allows users to perform sub-string searches on any of a node's properties. textual results showing component id and print name for nodes that satisfy a query are supplemented with highlighting of hits in the graph.

 <dig>  grouping of nodes
functionality is provided for the creation of group nodes, linked to nodes already existing in the dag, to group related nodes .

 <dig>  tracing lineage
graphical layout of the data aids determination of lineage by allowing users to trace the ancestors or descendants of a node using a data overview.

 <dig>  resetting to default state
the option to remove all formatting applied to nodes returns to the default rendering of data elements.

heuristic evaluation of the 2d anatomy browser
a heuristic evaluation was carried out with a small group of target users comprising biologists and computer scientists working at the mrc on emap. this involved a demonstration of the functionality available for interaction with and manipulation of the visualisations generated. users commented on usefulness  of aspects of the system, and made suggestions for improvements, additions and changes to the system. this led to the redesign and re-implementation of the prototype, in preparation for a structured user evaluation.

a major issue encountered in the visualisation of complex data is occlusion , an acute problem in the visualisation solution developed, especially due to data labels. the evaluation highlighted further issues with occlusion in the visualisations, and provided suggestions for reduction of this problem, illustrated in figures  <dig>   <dig>   <dig>   <dig> and  <dig> 

a second major problem identified is the exponential increase in system response time with data load, with a significant negative impact on interaction, illustrated in the graphs in figure  <dig>  this problem is even more acute for remote execution in x-windows, probably due to enhancements for swing in windows which have the reverse effect in x-windows  <cit> .

novel techniques for visual analysis of the ontology data
the main advantages in 3d visualisation of large data sets are the larger amount of space available for data display, due to the added dimension of depth, and the higher degree of freedom for exploration and navigation. natural perspective in 3d also provides increased magnification as one approaches the user's viewpoint. using 3d makes possible the simultaneous display of multiple data sets , with far less occlusion than would occur in 2d.

this project requires the analysis of multiple data sets, to identify relationships that span multiple stages in one organism or map relationships between different organisms. beyond a threshold of about  <dig> nodes, however, significant occlusion occurs in 2d.

the 2d browser makes use of existing techniques for visual analysis of individual data sets, with modifications and extensions as required to provide optimal analysis. to improve data analysis in areas of high occlusion different kinds of zoom have been implemented, including the development of a hybrid lens . a uniform zoom expands a sub-tree of interest to make maximum use of space in the main window; without relocation surrounding nodes would be obscured, as occurs for magic lenses. a hyperbolic lens could be used to move surrounding data to the periphery of the window; however constantly changing hyperbolic layouts have the disadvantage of destroying the mental models users form of data structure. the hybrid lens developed folds nodes on the same level as the node whose sub-tree gains the focus. surrounding context is still maintained to a large degree, while users concentrate on analysis of the roi. however this and other methods for reducing occlusion in the 2d browser provide only a partial solution, and only for individual data sets.

increasing to three the number of dimensions used for visualisation provides more space in which to hold data notes, further reducing occlusion of data. 3d however comes with its disadvantages, detailed in the following section, with the most significant being disorientation when navigating through 3d space. evidence however exists for the increased usability of between  <dig> n  and  <dig> dimensional  <cit>  visualisation of data; users are able to move out of the area holding the data and fly over or below rois. this reduces the feeling of immersion into the data and the disorientation this causes. overviews of data sets are obtained that improve users' mental models of data structure, and users are able to move back into the data as required to analyse rois in detail.

in order to take advantage of the space provided in the extra dimension without losing the benefit of simpler analysis in 2d a novel system has been developed that continues to draw individual data sets in 2d, layered uniformly in parallel along the horizontal axis . the physical space between the layered dags serves as the information space used to hold relationships between node pairs belonging to different ontologies. links are drawn across the space between related data sets, using colour codes to represent the different relationships that exist. users are able to transfer learning in the use of the 2d browser to visualisation in 3d, continuing to analyse individual data sets in relative isolation, each lying in its own plane. because relationships spanning data sets lie in separate planes and are drawn parallel to those holding the dags they stand out and are easily recognised, especially when viewed from a point above or below the data area, shown in figure  <dig> 

issues encountered in the 3d visualisations
the main difficulty encountered interacting with the 3d browser is maintaining control over the data structure during navigation. built-in functionality for navigation in java3d employs the keyboard and/or the mouse, allowing translation, rotation and zoom. the lack of a history function means that it is difficult to return to specific points in the data structure; the only option available to users for recovery when the data structure is moved out of the viewing area and the bounding sphere within which behaviours are active, or when users become lost in the data, is to return to the centre of the universe .

occlusion of more distant data in 3d, disorientation of users during navigation, and the complexity associated with the creation and support of 3d visualisations in terms of software and hardware required mean that 3d may not necessarily provide a better option than 2d. employing 2d for the visualisation of individual stages or for abstracted views of individual, complete anatomy ontologies, with an extension to 3d as multiple stages and/or ontologies are compared may provide an optimal solution. functionality for switching between the 2d and 3d views should help to resolve the disorientation that occurs in 3d by allowing users to focus on only data of interest in 2d without the distraction of extraneous information. continuing to place individual data sets in 2d planes reduces disorientation by giving users more control over the level to which they become immersed in the data; users are able to move above the area holding the data and observe its structure from above or below. this provides an overview that highlights all relationships occurring across data sets in addition to displaying each data set lying in its own 2d plane.

to ease integration of the prototypes with the emap anatomy browser it is important that their graphical user interfaces  do not deviate significantly from that of the emap browser. this should reduce users' learning curves, increasing willingness to use the prototypes. for this reason it may be useful to continue especially gui development in java. this also eliminates the problem of cross-platform compatibility and enables development for use on the internet. java3d, using opengl for low level rendering acceleration, may seem the obvious choice for the extension of the 2d browser. however limited support for development using java3d may result in restrictions in functionality and that may have little future support. further, java's cross-platform compatibility comes with a cost in performance due to the overhead incurred in the interpretation of java byte code into native machine code, manifested in the large increase in system response time observed as data load increases.

another option would be to develop the 3d browser using opengl , to take advantage of opengl's advanced 3d modelling capability, hardware acceleration and larger user base and support. gl4java bindings from opengl to java could then be used to provide an interface with the benefits of java.

structured evaluation of the visualisation prototypes
in order to establish if user requirements have been fully and correctly captured and implemented it is necessary to evaluate the visualisation prototypes with target users. this provides measures of user satisfaction and determines the effectiveness and efficiency of the systems developed. if the new system developed is to be used it will have to provide advantages over tools in current use, improving productivity without increasing users' work load  <cit> . a structured evaluation should identify usability issues and highlight features that improve data analysis. requirements for changes to, additions and extensions to functionality also need to be identified. sources of error and poor system response should be minimised; effective system feedback and good error management contribute to user satisfaction  <cit> .

to guide the evaluation two main hypotheses were tested:

h0: visual analysis of especially large, complex data sets provides advantages over textual analysis.

h1: visualisation in 3d provides advantages for analysis over 2d that justify the larger amount of support required.

preparation for structured evaluation
 <dig> task scenarios
to perform optimal data analysis users must possess the information required to achieve their goals: domain knowledge and how functionality in systems maps to this. to be effective a user evaluation should simulate the working processes of typical users in their normal working environments. a set of task scenarios were developed, detailing successful completion criteria and maximum goal completion times. these benchmarks could then be used to compare expected/ideal user behaviour to actual.

a heuristic evaluation, involving a walk through the scenarios developed, was carried out to ascertain that the scenarios capture typical user tasks in a normal work environment and allow users to explore functionality offered. the walk-through also highlighted further development required to increase intuitiveness of the prototypes, summarised in table  <dig> below, and carried out prior to the structured evaluation.

 <dig> custom questionnaires
custom questionnaires based on the quis, the questionnaire for user interface satisfaction  <cit> , were prepared to elicit subjective measures of user satisfaction and usability of the prototypes: a pre-evaluation questionnaire to collect demographic information and a post-evaluation questionnaire to collect information on usability of the system. the  questionnaires were reviewed by an hci  expert and revised where necessary.

 <dig> pilot test & review of evaluation procedure
a pilot test was then carried out with an  hci expert with a specialisation in visualisation. this examined the design of the evaluation procedure and checked that usability requirements had been integrated into it.

RESULTS
implementation of structured evaluation procedure
 <dig> user backgrounds
two main target user groups of the prototypes have been identified: the primary target – biologists, and the secondary target – computer scientists working in bioinformatics.

ten users in total performed the evaluation, six from the mrc and the remaining four, research students at the school of maths and computer sciences  at heriot-watt university. with the exception of one user, an hci expert from macs, all users had some experience in bioinformatics, and most had at least tried out the emap browsers and/or had some association with xspan .

 <dig> methodology
a flow diagram was used to record users' paths to complete each task, noting additionally, users' reactions and comments, errors made, requests for help and responses given. software logging captured interaction with the menus and toolbar , and a built-in timer was used to record task completion times.

verbal help was provided by the developer to supplement the help files which had not been completed prior to the structured evaluation.

analysis of evaluation data
qualitative feedback was obtained from the custom and the sus  questionnaires administered, and from observation of users recorded during each evaluation. because the test user population is only ten statistical analyses may not provide very reliable indications of satisfaction or otherwise with the prototypes. therefore the only statistical tests performed are those looking at means ) and extreme values of rankings. mean user satisfaction rankings for the post evaluation questionnaire, sus scores, and task completion times are shown below:

 <dig> sus scores
the sus scores obtained, as shown in figure  <dig>  indicate eight out of nine users with a score above the mid mark . the highest score obtained was  <dig>  and the lowest was  <dig> . the mean sus score is  <dig> .

 <dig> satisfaction ratings
overall means for satisfaction ratings for individual users, shown in figure  <dig>  have eight out of ten users with rankings above the central mark  <dig>  with five of those values lying above the mean for the entire sample. one user ranked the 3d browser above the central mark and the 2d below, and the last ranked both below the central mark. mean rankings for the 3d browser were higher than for the 2d, both over the whole user population and by user group . rankings by target user group saw biologists, the main target, rating usability higher than computer scientists.

further analysis of  rankings for each item show quietness of system, consistency of terms used and good relation to users' normal work, eased ability to determine lineage, low time to achieve proficiency using the systems, eased data analysis, and the visualisations providing advantages over the text indices fell in the top ten for both the 2d and 3d browsers. hiding of sub-trees to reduce occlusion and reliability of the system were other items ranked in the top ten for the 2d browser. consistency of messages on screen, and the options for zoom also fell in the top ten rankings for the 3d browser.

large variations in system speed had the worst ranking for both browsers, followed by average time to perform tasks. occlusion of data, level of support for error recovery, ease of navigation through data, and flexibility of the system all fell within the lowest ranked items for both browsers. additionally, for the 2d browser, the system being satisfying, ease of reading text on screen, ghosting of nodes and occlusion of data specifically for the t-d layout fell in the bottom ten rankings. ability to identify errors and their sources, difficulty of the system and the needs of experienced and inexperienced users being taken into account all fell within the bottom ten rankings for the 3d browser.

 <dig> task completion times
task completion times are summarised in figure  <dig> 

it is observed that times for t2-2d , t3-2d, t7-2d, t1-3d and t2-3d are very high compared to expected maximum completion times. analysis of the qualitative feedback from the flow diagrams for each user provides clues that explain these results, highlighting areas where users had difficulty identifying or understanding functionality required to complete tasks. restrictions for data input, poor wording or ambiguity in function labels and poor presentation of additional textual information to users contributed to most of the problems encountered. learning was exhibited by users performing repeated tasks in 3d in shorter times than expected. a significant example is for grouping of nodes; users also found grouping in 3d to be more intuitive than for the 2d browser .

changes made to prototypes based on structured evaluation
a number of changes and additions have been made to the prototypes, based on the evaluation results. more detailed information is provided on node and link properties, and functionality is available for insertion of user comments. the dag now automatically displays more levels if required to uncover hidden information requested by users. further options for search include searching on hidden nodes and within a sub-tree only. specific search hits in the dag may also be isolated and highlighted from within the search dialog. ghosting now fades out links to and from ghosted nodes and hides their labels.

the functions for creating groups have been moved to the edit from the view menu, to map to users' semantic interpretation of the function. options for selection of nodes now include retrieval from the graph by clicking, choosing from a drop-down list or by entering component ids in a free text field. functionality for editing and removing groups has also been implemented, and users may extract a group of interest for analysis in isolation in a 2d  window.

input dialogs when first opened now prompt users with the current value of the variable of interest. where practicable free text fields have been replaced with sliders to prevent errors by allowing input only within legal ranges. an editable legend detailing encoding properties for nodes and links has been provided.

full implementation of functionality in sub-windows allows tighter coupling between the main and sub-windows. functionality for switching between the 2d and 3d browsers without exiting either application has been implemented. the ability to save user sessions  aids incremental analysis. finally, the help files now also provide implementation detail and clarification of ambiguous terminology.

CONCLUSIONS
the emap browsers in current use employ textual indices for the analysis of anatomy ontology data for the mouse embryo, with mappings to 2d slices in 3d regions of models of the embryos at each stage of development. the lack of an overview for these large data sets increases users' cognitive load during data analysis; more intuitive methods for analysis are required to aid research.

visualisation of large, complex data sets exploits human perceptual abilities to increase cognition and ease data analysis, by providing spatial representations that map to users' mental models of data structure. this paper explores the use of hierarchical graphs for the visualisation and analysis of the complex, hierarchically structured, multi-dimensional ontology data under study, assessing different visualisation techniques available for analysis of this data and their merits and limitations. prototypes are being developed for 2d and 3d visual analysis of the ontologies, to provide alternative and novel solutions where methods and techniques available are unable to meet users' needs. visualisations generated provide overviews of each data set with functionality for further interactive analysis of rois.

evaluation of the prototypes being developed aimed to test two main hypotheses: whether visualisation provides advantages over textual representation for data analysis, and whether 3d visualisation provides enough advantages over 2d to justify the larger amount of development and support required for it.

analysis of the data collected during the heuristic and structured evaluations showed users found the visual representations of the data to provide significant advantages over text for determining data structure, and more intuitive methods for search and query. however increasing levels of occlusion with data set size render visualisations of the larger data sets difficult to use. functionality for data reduction and the ability to analyse data of interest in isolation offer improved solutions for analysis. further novel solutions are required to resolve more fully the problem of occlusion.

evaluation results showed the 3d browser slightly more intuitive for use than the 2d. the larger amount of space available in 3d makes it possible to display more data with a lower amount of occlusion than occurs in 2d. functions for searching, grouping of data and locating information using the 3d browser were also found to be more intuitive. the large variations in system response time encountered in 2d, a major source of user dissatisfaction, did not pose as significant a problem in 3d.

further work
further functionality for the 3d browser will therefore be implemented, looking especially at providing solutions for the most significant problems encountered in 2d.

further development on the prototypes will build visual structures that provide effective, interactive encoding and display of multiple relationships between and within different data sets.

general applicability of software developed
the visualisation applications have been developed to work with data from emap, stored in xml or html files. storage in self-describing xml eases analysis of the data structure; the information obtained is used to generate the visual representations that provide intuitive analysis of the anatomy ontologies under study.

the next stage of the project is looking at reading data directly from the emage  database. the browsers are built so that a layer exists between the data read in and the generation of the visualisations. therefore reading in data from different sources only requires writing additional parsers for the new data sources, and feeding the parsed data into the visualisation system.

the visualisation browsers however expect specific data properties; the systems also require updating to read in and process additional or different data properties from those used to describe the structure of the mouse embryos, to allow customisation for differently structured ontologies. visualisations for other data sources containing ontology data may then be generated after writing custom parsers for the data they store.

availability and requirements
project names: emap and xspan

project home page: 

operating system: platform independent

programming language: java

other requirements: java3d with opengl

license: none

any restrictions to use by non-academics: none

authors' contributions
asd did the background research, built the prototypes and carried out the evaluations, and wrote the paper. ab was one of the reviewers in the heuristic evaluation, provided suggestions in building the prototypes, reviewed the draft of the article and approved submission.

