BACKGROUND
sequence comparison is an important step in many important tasks in bioinformatics. it is used in many applications; from phylogenies reconstruction to the reconstruction of genomes. traditional techniques for measuring approximation in sequence comparison are based on the notions of distance or of similarity between sequences; and these are computed through sequence alignment techniques. an issue with using alignment techniques is that they are computationally expensive: they require quadratic time in the length of the sequences. moreover, in molecular taxonomy and phylogeny, for instance, whole-genome alignment proves both computationally expensive and hardly significant. these observations have led to increased research into alignment free techniques for sequence comparison. a number of alignment free techniques have been proposed: in  <cit> , a method based on the computation of the shortest unique factors of each sequence is proposed; other approaches estimate the number of mismatches per site based on the length of exact matches between pairs of sequences  <cit> .

thus standard notions are gradually being complemented  by other measures that refer, implicitly or explicitly, to the composition of sequences in terms of their constituent patterns. one such measure is the notion of words absent in a sequence. a word is an absent word of some sequence if it does not occur in the sequence. these words represent a type of negative information: information about what does not occur in the sequence. noting the words which do occur in one sequence but do not occur in another can be used to detect mutations or other biologically significant events.

given a sequence of length n, the number of absent words of length at most n can be exponential in n, meaning that using all the absent words for sequence comparison is more expensive than alignments. however, the number of certain subsets of absent words is only linear in n. an absent word of a sequence is a shortest absent word if all words shorter than it do occur in the sequence. an o-time algorithm for computing shortest absent words was presented in  <cit> , where m is a user-specified threshold on the length of the shortest absent words. this was later improved by  <cit> , who presented an o-time algorithm for the same problem. this has been further improved and an o-time algorithm was presented in  <cit> .

a minimal absent word of a sequence is an absent word whose proper factors all occur in the sequence. notice that minimal absent words are a superset of shortest absent words  <cit> . an upper bound on the number of minimal absent words is o  <cit> , where σ is the size of the alphabet. this suggests that it may be possible to compare sequences in time proportional to their lengths, for a fixed-sized alphabet, instead of proportional to the product of their lengths  <cit> . theory and some applications of minimal absent words can be found in  <cit> .

recently, there has been a number of biological studies on the significance of absent words. the most comprehensive study on the significance of absent words is probably  <cit> ; in this, the authors suggest that the deficit of certain subsets of absent words in vertebrates may be explained by the hypermutability of the genome. it was later found in  <cit>  that the compositional biases observed in  <cit>  for vertebrates are not uniform throughout different sets of minimal absent words. moreover, the analyses in  <cit>  support the hypothesis of the inheritance of minimal absent words through a common ancestor, in addition to lineage-specific inheritance, only in vertebrates. in  <cit> , the minimal absent words in four human genomes were computed, and it was shown that, as expected, intra-species variations in minimal absent words were lower than inter-species variations. minimal absent words have also been used for phylogenies reconstruction  <cit> .

from an algorithmic perspective, an o-time and o-space algorithm for computing all minimal absent words on a fixed-sized alphabet based on the construction of suffix automata was presented in  <cit> . an alternative o-time solution for finding minimal absent words of length at most ℓ, such that ℓ=o, based on the construction of tries of bounded-length factors was presented in  <cit> . a drawback of these approaches, in practical terms, is that the construction of suffix automata  may have a large memory footprint. due to this, an important problem is to be able to compute the minimal absent words of a sequence without the use of data structures such as the suffix automaton. to this end, the computation of minimal absent words based on the construction of suffix arrays was considered in  <cit> ; although fast in practice, the worst-case runtime of this algorithm is o. alternatively, one could make use of the succinct representations of the bidirectional bwt, recently presented in  <cit> , to compute all minimal absent words in time o. however, an implementation of these representations was not made available by the authors; and it is also rather unlikely that such an implementation will outperform an o-time algorithm based on the construction of suffix arrays.

our contribution
in this article, we bridge this unpleasant gap by presenting the first o-time and o-space algorithm for computing all minimal absent words of a sequence of length n based on the construction of suffix arrays. in addition, we provide the respective implementation of this algorithm. this implementation is shown to be more efficient than existing tools, both in terms of speed and memory.

methods
definitions and notation
to provide an overview of our result and algorithm, we begin with a few definitions. let y=yy..y be a word of lengthn=|y| over a finite ordered alphabetΣ of size σ=|Σ|=o. we denote by y=y..y the factor of y that starts at position i and ends at position j and by ε the empty word, word of length  <dig>  we recall that a prefix of y is a factor that starts at position  <dig>  and a suffix is a factor that ends at position n− <dig> , and that a factor of y is a proper factor if it is not the empty word or y itself.

let x be a word of length 0<m≤n. we say that there exists an occurrence of x in y, or, more simply, that xoccurs iny, when x is a factor of y. every occurrence of x can be characterised by a starting position in y. thus we say that x occurs at the starting positioni in y when x=y. opposingly, we say that the word x is an absent word of y if it does not occur in y. the absent word x, m≥ <dig>  of y is minimal if and only if all its proper factors occur in y.

we denote by sa the suffix array of y, that is the array of length n of the starting positions of all sorted suffixes of y, i.e. for all 1≤r<n, we have y..n−1]<y..n−1]  <cit> . let lcp  denote the length of the longest common prefix of the words y..n−1] and y..n−1], for all 0≤r,s<n, and  <dig> otherwise. we denote by lcp the longest common prefix array of y defined by lcp =lcp, for all 1≤r<n, and lcp = <dig>  the inverse isa of the array sa is defined by isa]=r, for all 0≤r<n. sa  <cit> , isa, and lcp  <cit>  of y can be computed in time and space o.

in this article, we consider the following problem:

minimalabsentwordsinput: a word y on Σ of length noutput: for every minimal absent word x of y, one tuple <a,>, such that x is defined by x=a, a∈Σ, and x=y, m≥ <dig> 

algorithm maw
in this section, we present algorithm maw, an o-time and o-space algorithm for finding all minimal absent words in a word of length n using arrays sa and lcp.

we first give an example and explain how we can characterise the minimal absent words; then we introduce how their computation can be done efficiently by using arrays sa and lcp. finally, we present in detail the two main steps of the algorithm.

intuitively, the idea is to look at the occurrences of a factor w of y and, in particular, at the letters that precede and follow these occurrences. if we find a couple , a,b∈Σ, such that aw and wb occur in y, but awb does not occur in y, then we can conclude that awb is a minimal absent word of y. for an illustration inspect figure  <dig> figure  <dig> 
k
 occurrences of a factor
w
 of
y
; they are preceded by
a
i
 and followed by
b
i
. if there exist i,j∈ such that ∉{,…,} then a
i
w
b
j is a minimal absent word of y.



for example, let us consider the word y=aabababb: factor w=ab occurs at: position  <dig> preceded by a and followed by a

position  <dig> preceded by b and followed by a

position  <dig> preceded by b and followed by b



we see that aw occurs and wb occurs as well but awb does not occur in y, so aabb is a minimal absent word of y.

factor w=ba occurs at: position  <dig> preceded by a and followed by b

position  <dig> preceded by a and followed by b



we cannot infer a minimal absent word.



a minimal absent word x of a word y is an absent word whose proper factors all occur in y. among them, x1=x and x2=x=x <dig> occur in y ; we will focus on these two factors to characterise the minimal absent words. to do so, we will consider each occurrence of x <dig> and x <dig>  and construct the sets of letters that occur just before:figure  <dig> 
a word
x
 and its factors
x
1
=
x
[ 1
.
.
m
−1] and
x
2
=
x
1
[0
.
.
|
x
1
|−2].




b <dig> = {y:j is the starting position of an occurrence of x1}

b <dig> = {y:j is the starting position of an occurrence of x1}.

lemma <dig> 
let x and y be two words. then x is a minimal absent word of y if and only if x is an element of b <dig> and not of b <dig>  with x1=x.

proof.
 let x <dig> be a factor of y, x <dig> be the longest proper prefix of x <dig>  and b <dig> and b <dig> the sets defined above. further let p be a letter that is in b <dig> but not in b <dig>  then, there exists a starting position j of an occurrence of x <dig> such that y=p, so the word px <dig> occurs at position j− <dig> in y. p is not in b <dig> so px <dig> does not occur in x and is therefore an absent word of y. x <dig> and px <dig> are factors of y, so all the proper factors of px <dig> occur in y, thus px <dig> is a minimal absent word of y.

 let x be a minimal absent word of y. its longest proper prefix x=xx <dig> occurs in y, so x <cit>  is in b <dig>  its longest proper suffix, x <dig> occurs as well in y, but x=xx <dig> is an absent word of y so it does not occur in y and x is not in b <dig> 

lemma <dig> 
let x be a minimal absent word of length m of word y of length n. then there exists an integer i∈ such that y..sa+lcp]=x <dig> or y..sa+lcp]=x <dig>  where x1=x.

proof.
let j be the starting position of an occurrence of x in y and k the starting position of an occurrence of x <dig> in y. the suffixes y and y share x2=x as a common prefix. as x is an absent word of y, this common prefix cannot be extended so x <dig> is the longest common prefix of those suffixes. by using isa, the inverse suffix array, we have lcp=m− <dig>  let us also note sk=isa and sj+1=isa. we then have two possibilities: if sk>sj+1: for all s in , we have lcp≥m− <dig>  with equality holding for at least one position. let us define i= max{s∈:lcp=m− <dig> }, the maximality of i implies that i=sk or lcp>m− <dig> and thus, in both cases y..sa+lcp]=x <dig> 

if sj+1>sk : for all s in , we have lcp≥m− <dig>  with equality holding for at least one position. let us define i= min{s∈:lcp=m− <dig> }, the minimality of i implies i=sk or lcp>m− <dig> and thus, in both cases y..sa+lcp]=x <dig> 



for an illustration inspect figure  <dig> figure  <dig> 
illustration of lemma  <dig> 




by lemma  <dig>  we can compute all minimal absent words of y by examining only the factors s2i=y..sa+lcp] and s2i+1=y..sa+lcp], for all i in . we just need to construct the sets b <dig>  b <dig> and b <dig>  b <dig>  where b <dig> ) is the set of letters that immediately precede an occurrence of the factor sj , for all j in . then, by lemma  <dig>  the difference between b <dig> and b <dig>  for all j in , gives us all the minimal absent words of y.

thus the important computational step is to compute these sets of letters efficiently. to do so, we visit twice arrays sa and lcp using another array denoted by b <dig>  to store set b <dig> ), for all j in . both arrays b <dig> and b <dig> consist of 2n elements, where each element is a bit vector of length σ, the size of the alphabet, corresponding to one bit per alphabet letter. while iterating over arrays sa and lcp, we maintain another array denoted by interval, such that, at the end of each iteration i, the ℓth element of interval stores the set of letters we have encountered before the prefix of length ℓ of y..n−1]. array interval consists of maxi∈ lcp+ <dig> elements, where each element is a bit vector of length σ.

during the first pass, we visit arrays sa and lcp from top to bottom. for each i∈, we store in positions 2i and 2i+ <dig> of b <dig>  the set of letters that immediately precede occurrences of s2i and s2i+ <dig>  whose starting positions appear before position i in sa. during the second pass, we go bottom up to complete the sets, which are already stored, with the letters preceding the occurrences whose starting positions appear after position i in sa. in order to be efficient, we will maintain a stack structure, denoted by lifolcp, to store the lcp values of the factors that are prefixes of the one we are currently visiting.

top-down pass
each iteration of the top-down pass consists of two steps. in the first step, we visit lifolcp from the top and for each lcp value read we set to zero the corresponding element of interval; then we remove this value from the stack. we stop when we reach a value smaller or equal to lcp. we do this as the corresponding factors are not prefixes of y..n−1], nor will they be prefixes in the remaining suffixes. we push at most one value onto the stack lifolcp per iteration, so, in total, there are n times we will set an element of interval to zero. this step requires time and space o.

for the second step, we update the elements that correspond to factors in the suffix array with an lcp value less than lcp. to do so, we visit the stack lifolcp top-down and, for each lcp value read, we add the letter y−1] to the corresponding element of interval until we reach a value whose element already contains it. this ensures that, for each value read, the corresponding element of interval has no more than σ letters added. as we consider at most n values, this step requires time and space o. for an example, see figure  <dig> figure  <dig> 
top-down pass.
 arrays b <dig> and b <dig> obtained after the top-down pass for word y=aabababb;  elements of array interval at the end of each iteration of the top-down pass.





bottom-up pass
intuitively, the idea behind the bottom-up pass is the same as in the top-down pass except that in this instance, as we start from the bottom, the suffix y..n−1] can share more than its prefix of length lcp with the previous suffixes in sa. therefore we may need the elements of interval that correspond to factors with an lcp value greater than lcp to correctly compute the arrays b <dig> and b <dig>  to achieve this, we maintain another stack liforem to copy the values from lifolcp that are greater than lcp. this extra stack allows us to keep in lifolcp only values that are smaller or equal to lcp without losing the additional information we require to correctly compute b <dig> and b <dig>  at the end of the iteration, we will set to zero each element corresponding to a value in liforem and empty the stack. thus to set an element of interval to zero requires two operations more than in the first pass. as we consider at most n values, this step requires time and space o.

another difference between the top-down and bottom-up passes is that in order to retain the information computed in the first pass, the second step is performed for each letter in b <dig>  as, for each lcp value read, we still add a letter only if is not already contained in the corresponding element of interval, no more than σ letters are added. thus this step requires time and space o. for an example, see figure  <dig> figure  <dig> 
bottom-up pass.
 arrays b <dig> and b <dig> obtained after the bottom-up pass for word y=aabababb;  elements of array interval at the end of each iteration of the bottom-up pass.



once we have computed arrays b <dig> and b <dig>  we need to compare each element. if there is a difference, by lemma  <dig>  we can construct a minimal absent word. for an example, see figure  <dig>  to ensure that we can report the minimal absent words in linear time, we must be able to report each one in constant time. to achieve this, we can represent them as a tuple <a,>, where for some word x of length m≥ <dig> that is a minimal absent word of y, the following holds: x=a and x=y. note that this representation uniquely identifies a minimal absent word and conversion from this encoding to the actual minimal absent word is trivial. lemma  <dig> ensures us to be exhaustive. therefore we obtain the following result.figure  <dig> 
minimal absent words of word
y
=aabababb; we find seven minimal absent words {aaa, aababb, aabb, baa, bababa,bba, bbb}.




theorem <dig> 
algorithm maw solves problem minimalabsentwords in time and space o.



RESULTS
the experiments were conducted on a desktop pc using one core of intel xeon e <dig> cpu at  <dig>  ghz and 32gb of main memory under 64-bit gnu/linux. all programs were compiled with gcc version  <dig> . <dig> at optimisation level  <dig> . time and memory measurements were taken using the gnu/linux time command.

implementation
we implemented algorithm maw as a program to compute all minimal absent words of a given sequence. the program was implemented in the c programming language and developed under gnu/linux operating system. it takes as input arguments a file in fasta format and the minimal and maximal length of minimal absent words to be outputted; and then produces a file with all minimal absent words of length within this range as output. the implementation is distributed under the gnu general public license , and it is available at http://github.com/solonas13/maw, which is set up for maintaining the source code and the man-page documentation.

datasets
we considered the genomes of thirteen bacteria and four case-study eukaryotes , all obtained from the ncbi database .table  <dig> 
species selected for this work with reference to the respective abbreviation and identification of genome sequence data by accession number for bacteria or genome assembly project for eukaryotes



species
abbreviation
genome reference

bacteria

bacillus anthracis strain ames

bacillus subtilis strain 168

escherichia coli strain k- <dig> substrain mg1655

haemophilus influenzae strain rd kw20

helicobacter pylori strain 26695

lactobacillus casei strain bl23

lactococcus lactis strain il1403

mycoplasma genitalium strain g37

staphylococcus aureus strain n315

streptococcus pneumoniae strain cgsp14

xanthomonas campestris strain 8004

eukaryotes

arabidopsis thaliana 


homo sapiens 

mus musculus 


correctness
to test the correctness of our implementation, we compared it against the implementation of pinho et al.  <cit> , which we denote here by pfg. in particular, we counted the number of minimal absent words, for lengths  <dig>   <dig>   <dig>  and  <dig>  in the genomes of the thirteen bacteria listed in table  <dig>  we considered only the 5′→3′ dna strand. table  <dig> depicts the number of minimal absent words in these sequences. we denote by m <dig>  m <dig>  m <dig>  and m <dig> the size of the resulting sets of minimal absent words for lengths  <dig>   <dig>   <dig>  and  <dig> respectively. identical number of minimal absent words for these lengths were also reported by pfg, suggesting that our implementation is correct.table  <dig> 
number of minimal absent words of lengths  <dig>   <dig>   <dig>  and  <dig> in the genomes of thirteen bacteria



species
genome size 
m
11
m
14
m
17
m
24


efficiency
to evaluate the efficiency of our implementation, we compared it against the corresponding performance of pfg, which is currently the fastest available implementation for computing minimal absent words. notice that this evaluation depends heavily on the suffix array construction implementation used; and that pfg uses a less optimised implementation for this construction than the one used by maw. we computed all minimal absent words for each chromosome sequence of the genomes of the four eukaryotes listed in table  <dig>  we considered both the 5′→3′ and the 3′→5′ dna strands. tables  <dig> and  <dig> depict elapsed-time comparisons of maw and pfg. we observe that pfg scales mostly linearly. maw also scales linearly and is the fastest in all cases. it accelerates the computations by more than a factor of  <dig>  when the sequence length grows, compared to pfg. figure  <dig> corresponds to the measurements in table 4: it plots chromosome sequence length versus elapsed time for computing all minimal absent words in the genomes of homo sapiens and mus musculus using maw and pfg. maw also reduces the memory requirements by a factor of  <dig> compared to pfg. the maximum allocated memory  was 6gb for maw and 30gb for pfg.figure  <dig> 
chromosome sequence length versus elapsed time for computing all minimal absent words in the genomes of
homo sapiens
 and
mus musculus
 using 
maw
 and 
pfg
.

elapsed-time comparison of 
maw
 and 
pfg
 for computing all minimal absent words in the genome of
arabidopsis thaliana
 and
drosophila melanogaster



 at

chromosome
size 
maw
 
pfg
 

 dm

chromosome
size 
maw
 
pfg
 
maw
 and 
pfg
 for computing all minimal absent words in the genome of
homo sapiens
 and
mus musculus



 hs

chromosome
size 
maw
 
pfg
 

 mm

chromosome
size 
maw
 
pfg
 


to further evaluate the efficiency of our implementation, we compared it against the corresponding performance of pfg using synthetic data. as basic dataset we used chromosome  <dig> of hs. we created five instances s <dig>  s <dig>  s <dig>  s <dig>  and s <dig> of this sequence by randomly choosing 10%, 20%, 30%, 40%, and 50% of the positions, respectively, and randomly replacing the corresponding letters to one of the four letters of the dna alphabet. we computed all minimal absent words for each instance. we considered both the 5′→3′ and the 3′→5′ dna strands. table  <dig> depicts elapsed-time comparisons of maw and pfg. maw is the fastest in all cases.table  <dig> 
elapsed-time comparison of 
maw
 and 
pfg
 for computing all minimal absent words in synthetic data



sequence
size 
maw
 
pfg
 
s1
s2
s3
s4
s5


CONCLUSIONS
in this article, we presented the first o-time and o-space algorithm for computing all minimal absent words based on the construction of suffix arrays. in addition, we provided the respective implementation of this algorithm. experimental results show that this implementation outperforms existing tools, both in terms of speed and memory.

in a typical application, one would be interested in computing minimal absent words in the whole genome for a set of species under study  <cit> . hence, we consider the improvements described in this article to be of great importance. our immediate target is twofold: first, explore the possibility of implementing the presented algorithm for symmetric multiprocessing systems; and second, devise and implement a fast space-efficient solution for this problem based on the construction of compressed full-text indexes.

availability and requirements
project name:maw

project home page:http://github.com/solonas13/maw

operating system: gnu/linux

programming language: c

other requirements: compiler gcc version  <dig> . <dig> or higher

license: gnu gpl

any restrictions to use by non-academics: licence needed



competing interests

the authors declare that they have no competing interests.

authors’ contributions

spp designed the study. ah and cb devised the algorithms. ah and spp implemented the algorithms. spp conducted the experiments. ah, cb, and lm wrote the manuscript. the final version of the manuscript is approved by all authors.

