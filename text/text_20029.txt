BACKGROUND
in the post-genomic era, one of the most important issues is to systematically analyze and comprehensively understand the topology of biological networks and biochemical progress in cells. protein complexes can help us to understand certain biological progress and to predict the functions of proteins. as john donne pointed out, no protein is an island entire of itself or at least, very few proteins are. most proteins seem to function within complicated cellular pathways, interacting with other proteins either in pairs or as components of larger complexes  <cit> .

various methods have been used to detect protein complexes. large-scale mass-spectrometric studies in saccharomyces cerevisiae provide a compendium of protein complexes that are considered to play a key role in carrying out yeast functionality  <cit> . although vastly informative, such methods offer information only on the composition of a protein complex at a given time and developmental or environmental condition  <cit> . repeated individual purifications coupled with each of these complexes could offer a more precise picture  <cit> , but such approaches on a large scale are unavailable at present. affinity purification techniques using mass spectrometry provide a particularly effective approach to identifying protein complexes  <cit> . these high-throughput techniques have been used to perform large scale protein-protein interaction screens in the yeast saccharomyces cerevisiae  <cit> . sharan et al.  <cit>  developed a probabilistic model for protein complexes in a single species and a model for the conservation of complexes between two species. based on the assumption that proteins in the same pathway are typically present or absent in a genome as a group, pellegrini et al.  <cit>  detected the conserved complexes across two species. methods based on integrated multiple information  have been proposed  <cit> . dezso et al.  <cit>  believe that the cellular role and the essentiality of a protein complex may largely be determined by a small group of protein subunits that display a high mrna coexpression pattern, belong to the same functional class, and share the same deletion phenotype and cellular localization. however, the relation between protein interactions and gene coexpressions may be very complicated with a high rate of false positive in the protein interaction data generated by high-throughput methods.

at present, a general trend is to represent the protein-protein interactions as a graph and to apply suitable graph algorithms to extract necessary information  <cit> . there have been several graph clustering approaches proposed to detect protein complexes, including spc   <cit> , rnsc   <cit> , mcode   <cit> , dpclus  <cit> , lcma   <cit> , cfinder  <cit> , and stm   <cit> . for later comparisons of our proposed algorithm with these algorithms, we give a brief description and discussion on each of these algorithms.

spc  <cit>  is a hierarchical clustering algorithm that simulates a ferromagnetic model with physical properties subject to fluctuation at nonzero temperature. algorithm spc identifies vertices belonging to a highly connected subgraph. however, as a disadvantage, spc is sensitive to noisy data  <cit> . in fact, to our knowledge, all methods of predicting protein-protein interactions cannot avoid yielding a non-negligible amount of noise .

rnsc  <cit>  is a cost-based clustering algorithm, which partitions the vertices of a graph into clusters based on a cost function that is assigned to each partitioning. it starts from an initial random solution and iteratively moves a vertex from one cluster to another to decrease the total cost of clusters. it ends up when some moves have been reached without decreasing the cost function. rnsc is a randomized algorithm and its results depend heavily on the quality of the initial clustering.

mcode  <cit>  is a density-based local search algorithm that operates in three stages: vertex weighting, complex prediction, and optionally post-processing. first, it assigns a weight to each vertex based on its local neighborhood density. then, it seeds a complex with the highest weighted vertex and recursively moves outward from the seed vertex. a new vertex is added to the complex if its weight is larger than a given threshold. then, it filters or adds proteins in the clusters by certain connectivity criteria. however, mcode cannot guarantee that the predicted clusters are highly connected to each other, since the highly weighted vertices may not be highly connected to each other.

most importantly, spc, rnsc and mcode cannot generate overlapping protein complexes, and require that each vertex belong to one specific cluster. in practice, a protein may be involved in multiple complexes and have more than one biological function. for example, in the cygd database  <cit> , the ratio of the number of proteins in known protein complexes over the sum of the sizes of these complexes is 2750/ <dig>  therefore, it is practically important to develop algorithms that identify overlapping protein complexes. the dpclus  <cit>  clustering algorithm is based on density and periphery tracking and can detect both non-overlapping clusters and overlapping clusters. to generate overlapping clusters, dpclus extends the non-overlapping clusters by adding their neighbors in the original graph . it starts at a highest weighted vertex and grows gradually by adding vertices from its neighbors. it uses two parameters, density dk and cluster property cpnk. a vertex added to a cluster must satisfy two conditions: 1) its addition does not cause the density dk of the cluster to fall below a given threshold din; and 2) its cpnk is larger than another given threshold cpin.

lcma  <cit>  generates overlapping clusters based on local clique merging. it first locates local cliques for each vertex of the graph then merges the detected local cliques according to their affinity to form maximal dense subgraphs.

cfinder  <cit>  is a tool of detecting overlapping clusters based on the clique percolation method   <cit> . cpm defines a protein complex as a union of all k-cliques that can be reached from each other through a series of adjacent k-cliques . results of cfinder are highly correlated to the value of the parameter k. larger values of k correspond to smaller subgraphs of higher density.

stm  <cit>  models protein interaction networks as dynamic signal transduction systems, and demonstrates the signal transduction behavior of perturbations by proteins statistically. stm allows overlapping of output clusters and identifies clusters of large size, arbitrary shape, and low density. however, unexpected huge clusters may also be generated in its post-process of merging.

in this paper, we propose a clustering algorithm, which follows the general framework of the algorithm dpclus  <cit>  but is based on a new topological structure of complexes. by a careful study of the structures of known complexes, we discover that most complexes have a very small diameter and a very small average vertex distance. also observing that vertex distance along would not precisely determine the desired complex structures, we propose a new topological structure of complexes that is the combination of vertex distance and subgraph density. following the general approach of expanding clusters started with seeded vertices, as what dpclus did, we develop an algorithm ipca for detecting protein complexes based on the new topological structure. we apply the algorithm ipca to the protein interaction network of yeast, and identify many well-known protein complexes. we compare ipca with the six competing previous methods dpclus, cfinder, lcma, mcode, rnsc and stm. the clusters generated by each method are compared to the known protein complexes. the results of the comparisons show that much more experimentally determined complexes are recalled by ipca than by other six methods. in addition, ipca is robust against the high rate of false positives and false negatives in the protein interaction networks. thus, the algorithm ipca can be used to identify new protein complexes in protein interaction networks of various species and provide references for biologists in their research on protein complexes.

before we present our algorithm, we would like to discuss the difference between our algorithm ipca and the previously proposed algorithm dpclus  <cit> . the algorithm ipca follows the general approach of cluster expanding based on seeded vertices, as what dpclus did. however, the rules of ipca for expanding clusters and weighting vertices are somewhat different from that of dpclus especially they target a different topological structure for the resulted clusters. in particular, the algorithm dpclus identifies subgraphs that satisfy a density condition  and certain cluster connectivity property , while the algorithm ipca looks for subgraph structures that have a small diameter  and satisfy a different cluster connectivity-density property . also, the algorithm ipca computes the vertex weights only once, based on the original input graph. on the other hand, once a new cluster is identified, the algorithm dpclus removes the cluster and re-computes the vertex weights based on the remaining subgraph. we believe that our approach is biologically more meaningful: the selection of a seeded vertex for a cluster is based on vertex weights, which should be measured by the original protein network because the cluster is a dense structure in the original network. on the other hand, a remaining subgraph in the process of dpclus may have lost some useful biological information because the algorithm re-computes the vertex weights based on the remaining subgraph. a byproduct of our approach is that our algorithm is more efficient because it avoids the recomputation.

the proposed algorithm
a protein interaction network is represented as an undirected simple graph g with proteins as vertices and protein interactions as edges. previous works  <cit>  have revealed that protein complexes in a protein interaction network generally correspond to dense regions . most density-based clustering algorithms, such as dpclus  <cit> , first generate a seed vertex and extend from the seed vertex by adding new vertices. the performance of such algorithms depends heavily on the quality of the seeds and the criterion of extending, especially the latter.

in this section, we propose a new extending model by analyzing the topology of the complexes in the protein interaction network of saccharomyces cerevisiae. the protein interaction network of saccharomyces cerevisiae is downloaded from mips  database  <cit> . we remove all the self-connecting interactions and repeated interactions. the final network includes  <dig> yeast proteins and  <dig> interactions. the average clustering coefficient of the final network is  <dig> , the network diameter is  <dig>  and the average vertex distance is  <dig> . we also collect from the mips database protein complexes annotated for sacchromyces cerevisiae  <cit> . there are  <dig> manually annotated complexes that consist of two or more proteins. the largest complex contains  <dig> proteins, the smallest complex contains  <dig> proteins, and the average size of all the complexes is  <dig> . for each protein complex, we analyze its topology in the network of sacchromyces cerevisiae. of the  <dig> protein complexes,  <dig> are connected . for a connected protein complex, its diameter is defined to be the maximum shortest path length between any pair of vertices in it. a non-connected protein complex can be divided into connected components. most of the non-connected protein complexes can be divided into a large component and one or two separated proteins. for a non-connected protein complex, we define its diameter to be the maximum diameter over all its connected components. we calculate the diameter and average shortest path length for each of the  <dig> connected protein complexes and for each of the  <dig> non-connected protein complexes.

as shown in table  <dig>   <dig> % of the connected complexes have their diameter bounded by  <dig>  and  <dig> % of the connected complexes have their average shortest path length bounded by  <dig>  there is only one connected complex in which the average shortest path length is larger than  <dig>  which is  <dig> . the average shortest path length of all the non-connected complexes is bounded by  <dig> , the longest one is  <dig> .  <dig> % of the non-connected complexes have their average shortest path length bounded by  <dig>  and  <dig> % of the non-connected complexes have their diameter bounded by  <dig>  this fact matches the observation that the protein interaction networks have the small-world property  <cit> . the analysis on the statistical data shows that the length of the shortest path between each pair of vertices in most of the complexes is bounded by  <dig>  with this important observation, we believe that the length of the diameter and the average length of shortest paths are important topological parameters for detecting protein complexes.

in the following discussion, we denote by sp the diameter of a graph k , and by asp the average length of all the shortest paths between each pair of vertices in k. since the discussions for sp and asp are similar, our discussion will be mainly focused on sp.

as shown in figure  <dig>  graphs with the same diameter can have very different topologies. to distinguish different topologies of graphs with the same diameter, we need another control parameter. for a dense graph, a vertex is connected to most of the vertices in the graph. on the other hand, in a sparse graph a vertex may be connected to only a few vertices in the graph. we introduce a new concept to measure how strongly a vertex v is connected to a subgraph k: the interaction probability invk of a vertex v to a subgraph k, where v ∉ k, is defined by

  invk=mvknk 

where mvk is the number of edges between the vertex v and k, and nk is the number of vertices in k. we discuss the relationship between the parameter invk and the two parameters dk and cpvk introduced in the algorithm dpclus  <cit> . according to  <cit> , the density dk of a subgraph k is defined as dk = 2mk/), where mk is the number of edges in the subgraph k, and the cluster property cpvk of a vertex v with respect to the subgraph k is defined as cpvk = mvk/. by the expressions, our parameter invk is similar to the parameter cpvk . moreover, the following theorem shows that the parameter invk is also closely related to the density dk.

theorem. let k be a subgraph of a graph g. if for every vertex v in k, we have invk' ≥ t <dig>  where k' = k - v and t <dig> is a fixed constant, then dk ≥ t <dig> 

proof. by the conditions given in the theorem, for all vertices v in k, we have ,

 invk' = mvk'/nk' ≥ t <dig> 

therefore, mvk' ≥ nk't <dig>  add this over all vertices v in k, and note that ∑v∈kmvk' = 2mk, where mk is the total number of edges in k, and that nk' = nk -  <dig>  we have

 2mk=∑v∈kmvk′≥∑v∈knk′t0=nkt <dig> 

this gives dk = 2mk/) ≥ t <dig>  and proves the theorem.   □

by the above theorem, a lower bound on the parameter invk' for every vertex v in a subgraph k will also provide a lower bound on the density dk of the subgraph k. next we show that the parameter invk can help distinguishing subgraph structures that are indistinguishable by their diameters. consider the two graphs in figure  <dig> again. although both graphs have diameter  <dig>  for all vertices v in the first graph, the value invk' is  <dig> = 5; while for five of the six vertices in the second graph, the value invk' is 1/ <dig> .

our algorithm ipca looks for complex structures whose topological structure is controlled by the two parameters sp and invk. more specifically, we look for complex structures whose diameter is controlled by the parameter sp and whose density and cluster property are controlled by the parameter invk.

definition  <dig>  let tin be a threshold ranging between  <dig> and  <dig>  let d be a positive integer, and let k be a subgraph. a vertex v ∉ k is a -vertex if the following two conditions are satisfied :

 <dig>  invk ≥ tin; and

 <dig>  the -version: sp ≤ d -version: asp ≤ d)

note that there are actually two versions for the definition of a -vertex in terms of condition 2: one uses the condition sp ≤ d -version), and the other uses the condition asp ≤ d -version).

our clustering algorithm ipca that extends clusters based on -vertices is given in figure  <dig>  if the algorithm uses the -version in the conditions in the definition, we will say that "the algorithm uses sp ≤ d". similarly, if the algorithm uses the -version in the conditions in the definition, we will say that "the algorithm uses asp ≤ d".

the algorithm ipca can be divided into four major parts: weighting vertex, selecting seed, extending cluster, and extend-judgment. the input to the algorithm is an undirected simple graph.

weighting vertex
our procedure of vertex weighting is the same as that of the dpclus algorithm  <cit> . for an input graph g = , we assign the weight of an edge  to be the number of neighbors shared by the vertices u and v. we define the weight of each vertex to be the sum of the weights of its incident edges. after all vertices are assigned weights, however , we also sort in non-increasing order the vertices by their weights and store them in a queue sq . the complexity of calculating edge weights and vertex weights is o, and the complexity of sorting all vertices by their weights is o.

selecting seed
the notion that vertex weight is a good measure for selecting seeds has been adopted by dpclus  <cit>  and mcode  <cit> . here, we also pick the highest weighted vertices as the seeds. our procedure proceeds as follows. we pick the first vertex in the queue sq and use it as a seed to grow a new cluster. once the cluster is completed, all vertices in the cluster are removed from the queue sq and we pick the first vertex remaining in the queue sq as the seed for the next cluster. there are a number of important differences between this seed selection procedure and the one used in the dpclus algorithm  <cit> . first, our procedure computes the vertex weight for each vertex only once, based on the original graph; while the dpclus algorithm recomputes the vertex weight for each remaining vertex after a cluster is removed, based on the remaining subgraph. we feel that our approach is biologically more meaningful because a complex is a dense structure in the original protein network thus its seed vertex should be measured in terms of the original graph. on the other hand, a remaining subgraph g' during the process of dpclus may have lost certain biological information . computationally, our approach also has the advantage of being more efficient. moreover, our approach has also helped for generating overlapping complexes. this is because the vertices of the generated clusters are only removed from the queue sq, but not from the original graph g.

extending cluster
a cluster k is extended by adding vertices recursively from its neighbors according to the priority. the priority of a neighbor v of k is determined by the value invk. this procedure is similar to the one proposed in dpclus  <cit> , except that we do not use "fine-tuning" to sort the neighbors. whether a high priority vertex v is added to the cluster is determined by the extend-judgment test that tests if v is a -vertex. only when the candidate vertex v is a -vertex, can it be added to the cluster. once the new vertex v is added to the cluster, the cluster is updated, i.e., the neighbors of the new cluster are re-constructed and the priorities of the neighbors of the new cluster are re-calculated, and the algorithm goes recursively with the new cluster. the complexity of generating a candidate vertex from the neighbors of the cluster k is o + nn log nn), where nn is the number of neighbors of k.

extend-judgment
whether a candidate vertex v is added to a cluster k is determined by the two conditions given in definition  <dig>  first, we calculate the value invk. the vertex will not be added to the cluster if the value invk is less than tin. if the vertex v passes this test, then depending on whether using sp ≤ d or asp ≤ d, the algorithm computes the diameter of the graph k + v or the average length of the shortest paths between pairs of vertices in k + v, and compares the value with the parameter d. if the computed value is bounded by d, then the vertex v is added to the cluster. if the vertex v fails any of these tests, then the next highest priority neighbor of the cluster is tested, and so on. if all neighbors fail the tests, then the cluster cannot be further extended, and a complete cluster is formed whose vertices are removed from the queue sq. in this paper, d =  <dig> is used according to our previous analysis. the complexity of testing whether a candidate vertex is added to a cluster is o.

we remark that our algorithm ipca guarantees that no two generated clusters would be the same: a seed vertex v for a new cluster is selected such that v does not belong to any of the previously constructed clusters. in fact, any two clusters constructed by the algorithm ipca should be expected to be sufficiently different. to see this, let c <dig> be a cluster seeded at v <dig> that is constructed after a cluster c <dig>  if the two clusters c <dig> and c <dig> are largely overlapping, then intuitively, the vertex v <dig> is closely and densely connected to many vertices in c <dig>  thus, during the construction of the cluster c <dig>  the vertex v <dig> would have a large chance to be included in c <dig> and would have not become a seed for the later cluster c <dig> 

the time complexity of the entire algorithm ipca depends on the number and the size of predicted clusters. the running time of ipca is given in the next section.

RESULTS
the protein interaction network of sacchromyces cerevisiae is downloaded from the mips database  <cit> . after removal of all the self-interactions and repeated interactions, the final network includes  <dig> proteins and  <dig> interactions. we apply the proposed algorithm ipca to this network. in the following subsections, we discuss the effect of the value tin on clustering, compare the predicted clusters with the known complexes, evaluate the significance of the predicted clusters, and analyze the robustness and efficiency of the algorithm ipca. we will also compare the algorithm ipca to six competing previous methods for their performance of identifying protein complexes. the comparisons are also performed on protein interaction networks and random networks.

the effect of tin on clustering
to understand how the value of tin influences the outcome of the clustering, we generate  <dig> sets of clusters by using sp ≤  <dig> and asp ≤  <dig> with tin =  <dig> ,  <dig> ,...,  <dig>  from the protein interaction network of yeast. the effect on the predicted clusters with different tin is given in figure  <dig>  figure  <dig> shows that the total number of the predicted clusters is increasing as tin increases. however, in figure  <dig>  there is a abrupt decrease at tin =  <dig> . this is probably caused by the hub structures in the protein interaction network. when tin =  <dig> , these hub structures are decomposed into complexes that consist of only  <dig> proteins.

comparison with the known complexes
to evaluate the effectiveness of the algorithm ipca for detecting protein complexes, we compare the predicted clusters produced by the algorithm with known protein complexes in mips yeast complex database  <cit> . there are  <dig> manually annotated complexes considered as the gold standard data that each consists of two or more proteins. here, we use the same scoring scheme used in  <cit>  to determine how effectively a predicted cluster  matches a known complex . the overlapping score os between a predicted cluster pc and a known complex kc is calculated by the following formula:

  os=|vpc∩vkc|2|vpc|⋅|vkc| 

where |vpc ∩ vkc| is the size of the intersection set of the predicted cluster and the known complex, |vpc| is the size of the predicted cluster and |vkc| is the size of the known complex. a known complex kc that has no proteins in a predicted cluster pc has os =  <dig> and a known complex kc that perfectly matches a predicted cluster pc has os =  <dig>  a known complex and a predicted cluster are considered as a match if their overlapping score is equal to or larger than a specific threshold. the numbers of matched known complexes with respect to different overlapping score threshold  are shown in figure  <dig>  the best matching result is obtained when tin =  <dig>  for both sp ≤  <dig> and asp ≤  <dig>  there are  <dig> known complexes matched when the overlapping score threshold is  <dig> . there are  <dig> known complexes matched perfectly. when tin ≥  <dig> , the number of matched known complexes is almost the same for sp ≤  <dig> and asp ≤  <dig>  when tin ≤  <dig> , the number of matched known complexes is larger for sp ≤  <dig> than for asp ≤  <dig>  the probability that a known complex is matched perfectly by a cluster in which proteins are picked up randomly is determined by the size of the network and the known complex. the probability that a known complex with size =  <dig> matches perfectly by a cluster selected randomly in the yeast network used in this paper is  <dig>  * 10- <dig>  it is very obvious that more known complexes matched by the predicted clusters implies that the algorithm is more effective to detect complexes. sensitivity and specificity are two important aspects to estimate the performance of algorithms for detecting protein complexes. sensitivity is the fraction of the true-positive predictions out of all the true predictions, defined by the following formula:

  sn=tptp+fn 

where tp  is the number of the predicted clusters matched by the known complexes with os ≥  <dig> , and fn  is the number of the known complexes that are not matched by the predicted clusters. specificity is the fraction of the true-positive predictions out of all the positive predictions, defined by the following formula:

  sp=tptp+fp 

where fp  equals the total number of the predicted clusters minus tp. according to the assumption in  <cit> , a predicted cluster and a known complex are considered to be matched if os ≥  <dig> . here, we also use  <dig>  as the matched overlapping threshold.

another integrated method, called the f-measure, has been used in  <cit> , which is defined as follows:

  f-measure=2∗sn∗spsn+sp 

as pointed out in  <cit> , the f-measure of each method can only be taken as a comparative measure rather than its real values, because the reference set mips is incomplete and some predicted clusters that may be true complexes could be regarded as false positives  if they do not match with the known complexes. nevertheless, it is still reasonable to consider a method more effective if it detects more known complexes. the coverage of the known complexes is defined by the following formula:

  cov=nkc−fnnkc 

where nkc is the total number of known complexes. the sensitivity, the specificity, the f -measure, and the coverage of the clusters generated by the algorithm ipca using different parameters are shown in table  <dig>  the sensitivity of the clusters generated by ipca is about  <dig>  and very close to  <dig>  when tin >  <dig> . the value tp is  <dig> times more than the value fn, which implies that the clusters generated by ipca are reliable. the specificity of an algorithm represents the real positive proportion of all the predicted clusters. as shown in table  <dig>  the specificity of the algorithm ipca is larger than  <dig> , but smaller than  <dig> . the low specificity is probably because of the incompleteness of the known complexes. the f-measure takes into account of both the sensitivity and the specificity, and is determined by the larger one. in this experiment, the f-measure is mostly influenced by the sensitivity. the sensitivity is about  <dig>  ~  <dig>  times of the specificity. the coverage of the clusters generated by ipca increases with the increasing of tin. especially, an obvious increase appears when tin ≥  <dig> . in table  <dig>  we can observe that the sensitivity, the specificity, the f-measure, and the coverage of the clusters generated by ipca using sp ≤  <dig> are slightly larger than those generated by ipca using asp ≤  <dig> 

comparison of protein interaction networks and random networks
to evaluate whether the clusters generated by the algorithm ipca from the protein interaction network are biologically significant, we experiment the algorithm on the protein interaction network of yeast and on a random network of a similar structure. the random network, which has the same size and the same degree distribution as the yeast network, is obtained by shu2ing the edges between vertices in the yeast network. more clusters are generated from the random network than from the yeast network, and the clusters generated from the random network have less proteins than those generated from the yeast network. figure  <dig> shows the size distributions of the clusters generated by ipca using tin =  <dig>  from the yeast network and from the random network. as shown in the figure, the predicted clusters identified in the yeast network are in various sizes from  <dig> to  <dig>  while those in the random network are in various size from  <dig> to  <dig>  many small clusters are detected in the random network. to evaluate whether all these small clusters in the random network are significant, we compare them with the known complexes. as shown in figure  <dig>  while there are more than  <dig> known complexes matched by the predicted clusters identified in the yeast network when the overlapping score threshold is larger than  <dig> , there are almost no known complexes matched by the predicted clusters identified in the random network when the overlapping score threshold is larger than  <dig> . this result shows that the random network destroys the biological intrinsic character in the protein interaction network, though it has the same degree distribution as the original yeast network.

comparison of ipca and other methods
since there have been protein complexes that were experimentally determined, a good protein complexes detecting algorithm should identify these known complexes as many as possible. table  <dig> shows the numbers of known complexes matched to the clusters generated by ipca and by other six previous known methods: dpclus  <cit> , cfinder  <cit> , lcma  <cit> , mcode  <cit> , rnsc  <cit> , and stm  <cit> .

though the method dpclus can generate clusters with two modes , it does not include the overlapping option at present. we generated by ourselves ten sets with non-overlapping mode using dpclus. another ten sets with overlapping mode were provided by an author  of dpclus. when cpin =  <dig>  and din =  <dig> , dpclus gets the best matching results. since it is more significant to detect overlapping protein complexes, we consider the best matching results generated by dpclus with overlapping mode.

the method cfinder gets the best matching results by setting k =  <dig> 

the method lcma gets the best matching results by setting na =  <dig> .

for the method mcode, there are  <dig> parameter combinations, and most of them have similar matching results. the method mcode gets the best matching results when the "haircut" option is not used and when vwp =  <dig>  and fluff =  <dig> 

the method rnsc gets the best matching results when the number of the predicted clusters is about  <dig>  the authors of the method stm have shown that the method gets the best performance when the merge threshold value is  <dig> . however, a huge cluster that includes  <dig> proteins and  <dig> clusters whose sizes vary from  <dig> to  <dig> are generated when the merge threshold value is  <dig> . of all the  <dig> clusters, only  <dig> clusters match known complexes with the overlapping sore os ≥  <dig> . thus, we consider the matching results of the clusters not merged for the method stm.

as shown in table  <dig>  the clusters generated by ipca match more known complexes than all six other methods for all different overlapping score thresholds. when os >  <dig> , the number of matched known complexes by ipca is about  <dig>  times more than that by dpclus, lcma and rnsc. with the same overlapping score threshold, the number of matched known complexes by ipca is about  <dig>  times more than that by cfinder, and about  <dig>  times more than that by mcode and stm. when os =  <dig>  there are no more than  <dig> matched known complexes by cfinder, mcode, rnsc, and stm. on the other hand, there are  <dig> known complexes matched perfectly by the clusters of ipca.

the results show that ipca outperforms all these six previous methods on the performance of identifying protein complexes.

as an additional and interesting example, we compare the performance of ipca and dpclus for generating large complexes. since small complexes  have been represented in the protein-protein interaction data, one may be more interested in identifying large complexes. for this, we compare the results generated by ipca and that generated by dpclus. the comparisons are given in table  <dig>  as shown in the table, the large clusters  generated by ipca match more known complexes than that generated by dpclus for all different overlapping score thresholds. let n be the number of total known complexes that are matched by any generated clusters  and n≥ <dig> be the number of known complexes matched by the generated clusters consisting of at least  <dig> proteins. then n≥3/n of ipca is  <dig> % and that of dpclus is  <dig> %. that is, the clusters generated by ipca match more known large complexes than that by dpclus.

the number of known complexes matched by the predicted clusters  is shown in brackets.

function enrichment analysis
in order to detect the functional characteristics of the predicted clusters, we compare the predicted clusters with known functional classification. the p-value based on hypergeometric distribution is often used to estimate whether a given set of proteins is accumulated by chance. it has been used as a criteria to assign each predicted cluster a main function  <cit> . here, we also calculate p-value for each predicted cluster and assign a function category to it when the minimum p-value occurrs. the p-value is defied as follows.

  p=1−∑i=0k− <dig> 

where n is the total number of vertices in the network, c is the size of the predicted cluster, f is the size of a functional group, and k is the number of proteins of the functional group in the predicted cluster. the functional classification of proteins used in this paper was collected from the mips functional catalog  database. funcat  <cit>  is an annotation scheme of tree-like structure for the functional description of proteins. there are up to  <dig> levels of increasing specificity and  <dig> functional categories in funcat. we obtained  <dig> clusters with size ≥  <dig> when using tin =  <dig>  and obtained  <dig> clusters with the same size when using tin =  <dig> . all these predicted clusters with size ≥  <dig> by using tin =  <dig>  and tin =  <dig>  match well with the known functional categories with p-value <  <dig> . as the fact that proteins in the same complex are of similar function, we predicted  <dig> previously un-characterized proteins in the predicted clusters generated by tin =  <dig>  and predicted  <dig> previously un-characterized proteins in the predicted clusters generated by tin =  <dig> . for example, the unknown function protein yor264w is included in a 7-member cluster, of which six are the cytoskeleton/structural proteins. thus, we can predict that the function unknown protein yor264w is also a cytoskeleton/structural protein. all the clusters of size ≥  <dig> generated by tin =  <dig>  and tin =  <dig>  and their main function annotations are given in an additional file  <dig> 

the un-characterized proteins in these clusters are also given in the additional file  <dig>  as the incompleteness of the function annotation, we can also predict new membership for the known complexes and predict new functions for known proteins. as shown in additional file  <dig>  the main function of a 10-member cluster is splicing . seven proteins of the cluster are related to splicing. other three proteins in the cluster without the function of splicing are all related to mrna processing , which is a higher level of splicing. thus, we can deduce that the three proteins involved in mrna processing may be members of the splicing complexes.

robustness analysis
in this analysis, we evaluated the robustness of the algorithm ipca to various levels of graph alterations. since all the methods of ppis  prediction are known to yield a non-negligible amount of noise  and to miss a fraction of existing interactions   <cit> , we tested the robustness of ipca to false positive by adding edges randomly and to false negatives by removing edges randomly. proportions of edges  were added to the yeast protein interaction network randomly, and the same proportions  of edges were removed from the yeast network randomly. it should be expected that the false positives would not randomly contribute to the formation of dense sub-graphs, and that the number of matched known complexes does not decrease fast with the increasing of false negatives. figure  <dig> displays the impact of edge addition and removal on the results of the algorithm ipca. as one can see, ipca is barely affected by addition of up to 100% edges. it is also affected faintly by removal of up to 50% edges. it starts to drop perceivably from 60%, and a fast drop starts from 80%. however, there are still  <dig> known complexes matched to the predicted clusters  when 80% edges are removed. the analysis strongly shows that the algorithm ipca is very robust against the high rate of false positives and false negatives in protein interactions.

efficiency analysis
all experiments in this paper are implemented on a pc with  <dig>  ghz processor and  <dig> m ram. table  <dig> shows the running time of the algorithm ipca when it generates clusters using different tin values from the yeast network, which consists of  <dig> proteins and  <dig> interactions. the longest running time is  <dig> seconds when tin =  <dig> , and the shortest running time is  <dig> seconds when tin =  <dig> . the running time is decreasing as tin increases. this is because the probability that proteins added to the clusters is decreasing with the increasing of tin, and because the candidate selection and the judgement whether a candidate can be added to a cluster are time consuming. as a comparison, under the same test environment, the running time of the method dpclus to generate clusters with non-overlapping mode from the same yeast protein interaction network is about  <dig> minutes.

CONCLUSIONS
it is believed that identification of protein complexes is useful to explain certain biological progress and to predict functions of proteins. in this paper, we proposed a new topological structure for protein complexes and developed an algorithm ipca to identify protein complexes in large protein interaction networks based on the new topological structure. interaction networks are represented by undirected simple graphs and we generate predicted clusters in the networks by using seed selection and local search. the seeds in the networks are calculated only once, which has reduced the running time of the algorithm effectively. two parameters, sp ) and invk, are used that reflect the statistics of topological structures of the networks. as the accumulation of new complexes and protein-protein interactions, the thresholds of the parameters sp ) and invk can be changed easily for generating different types of clusters. moreover, the algorithm ipca can generate overlapping protein complexes, which is consistent with the fact that many of the known protein complexes are overlapping. interesting questions for further research include how many functions a protein can have, how many processes a protein can participate in, and how heavily two protein complexes should overlap with each other.

we applied the algorithm ipca to the protein interaction network of sacchromyces cerevisiae. many well-known complexes were found in the protein interaction network. we predicted the functions for un-characterized proteins and predicted new functions for the known proteins by minimizing the p-values of the predicted clusters. we tested the robustness of our algorithm by adding and removing edges in the network randomly. the results have shown that our algorithm is robust against the high rate of false positives and false negatives in the protein interaction networks. our algorithm can thus be used to identify new protein complexes in protein interaction networks of various species and to provide references for biologists in their research on protein complexes.

