BACKGROUND
systems biology aims at a holistic analysis of biological networks. mathematical modelling plays a pivotal role for this integrative approach. the arguably most common formalism for cellular networks is kinetic modelling, which has been successfully applied to the study of single pathways and networks of moderate size . however, building dynamic models with high predictive power requires an amount of reliable quantitative data which is often not available in large-scale networks with hundreds of players and interactions. structural or qualitative  models relying solely on the often well-known network structure provide an alternative approach still capable to gain useful insights in the functioning of these networks  <cit> .

cellnetanalyzer  is a graphical user interface for matlab providing a comprehensive toolbox for structural and functional analysis of different types of cellular networks. cna extends its predecessor fluxanalyzer, originally developed for metabolic network analysis  <cit> , by new methods for signalling and regulatory networks, i.e. for networks where signal flows are dominating . herein, we will give a general overview on cna with focus on the new functionalities.

implementation
the general set-up of cna is shown in figure  <dig>  cna is a toolbox for matlab ® , a widely-used software for numerical computations and complex visualisations of numerical data. cna has been programmed with the matlab language enabling to use built-in functions of matlab, in particular those for matrix operations. matlab also allows to call external c programs via the so-called mex interface. cna makes use of this interface for some computationally intensive calculations .

as cna runs in the matlab environment and because matlab is available for many operating systems, cna itself is platform-independent. upon starting cna in matlab's command window, cna runs virtually autonomously as a graphical user interface.

network projects
as a fundamental step, cna facilitates the construction of network projects which can represent either a mass-flow  or a signal-flow  network. for both types of networks, the abstract network model can be set-up and edited via a network composer and input masks  or, alternatively, via ascii  files. the network description comprises always the declaration of species and reactions and their respective attributes. the same nomenclature is used for both kinds of networks, but with a different meaning. in mass-flow networks , reactions correspond to the stoichiometric conversions. therefore, the reaction equation

a + b → c     

is interpreted as usual in mfns, namely that the two reactants a and b are converted into c. a and b are consumed in this process representing the key characteristic of mass flows. mfns are stored by the stoichiometric matrix and other variables such as the capacity and reversibility constraints of the reactions  <cit> .

in contrast, a reaction  in signal-flow networks  expresses how the "product"  of the reaction can be activated by the "reactants" . accordingly, equation  means in sfns, that c becomes activated if a and b are active, i.e. "+" is interpreted as a logical and. as a key characteristic of signal flows, the start nodes a and b on the left-hand side of the reaction equation are not necessarily consumed in this process. for example, eq.  could express that c becomes activated  if the two kinases a and b are in an active state. accordingly, in cna, an sfn is a logical  network, where each reaction represents a boolean and clause expressing a condition under which the end node of this reaction becomes activated. if several reactions point at one species s, then they are or'ed together giving eventually rise to a boolean function determining the activation state of s. accordingly, in the example network shown in figure  <dig> and table  <dig>  node c becomes active if a or d are active. in addition to and and or, representing arbitrary boolean functions requires a not operator . furthermore, multi-valued logic is possible in cna. therefore, the equation

 <dig> a + !b →  <dig> c     

means that "c reaches level  <dig> if a is at level  <dig> and b is inactive ". using the formalism described above, cna represents the logic of sfns as logical interaction hypergraphs  representation of boolean functions) which can be conveniently stored in two matrices, each having as rows the species and as columns the interactions  <cit> : an interaction matrix captures the logical coefficients  and a not-matrix stores where a not operation occurs.

interaction graphs  can also be encoded in this formalism: graphs are treated as special cases without and connections. in these cases, the interaction matrix coincides with the incidence matrix of this graph.

specifically for sfns, cna also supports a time-scale attribute as well as incomplete truth tables for handling interactions with uncertain logical concatenation  <cit> .

in principle, network analysis with cna can be done without any graphical representation of the network. however, for visualisation purposes, each network project can be assigned one or several network maps . network maps must be provided by the user, either created with the help of external drawing programs  or by using maps available at databases such as kegg or transpath. thus, network maps in cna are static but offer a high flexibility regarding their design. the link between network maps and network model is realised in cna by text boxes, which are small user interfaces, each associated to one network element. they can be positioned via drag-and-drop at a proper place on the maps and enable input and output of context dependent data. in cna, a network map with text boxes is called interactive network map. three examples are shown in figures  <dig>   <dig>  4: figure  <dig> displays a simple hypothetical sfn whose reactions are given in table  <dig>  figure  <dig> shows a mfn project for the central metabolism of e. coli , and figure  <dig> displays a sfn model of signalling pathways involved in t-cell activation . notice the different visual representation of these three networks: cna does not impose any restrictions on the design of these maps what is possible because the maps can be created with arbitrary  drawing tools.

an elegant solution for setting up logical network models is provided by a new feature of the modelling tool promot: the model is created in a visual environment, and both the map and the underlying network can be exported to cna and other formats  <cit> . promot is a stand-alone, object-oriented tool to set up modularly and hierarchically structured models of technical and biological systems in a visual manner by a simple drag-and-drop procedure  <cit> . a new library containing logical elements  has been developed which allows to set up models according to the sum-of-product formalism as used in cna. properties such as the initial value and time scale can be added via a text menu. once finished, the models can be exported: one obtains a map  and cna text files defining the mathematical model. importantly, the corresponding positions of the textboxes required for the interactive network maps in cna are also included. for more details see  <cit>  and promot's web-site  <cit> . as an example, the network project shown in figure  <dig> has been produced with the new features of promot.

RESULTS
cna provides a powerful battery of methods for functional network analysis, i.e. for characterising functional states, for detecting functional dependencies, for identifying intervention strategies, or for giving qualitative predictions on the effects of perturbations. a typical scenario is to check "whether and how a certain metabolite  can be synthesised  in a metabolic  network under a certain knock-out condition with a given set of external resources ". the user may start computations from a pull-down menu whose content depends on the type of the network project . all functions are described in detail in the cna user's manual, here we shall only give an overview and emphasise novel routines, in particular for signal-flow networks.

metabolic networks
regarding mass-flow networks, the majority of methods implemented in cna belong to the constraint-based approach frequently used for metabolic network analysis  <cit> . additionally, some methods for graph-theoretical analysis are provided. the main features are:

• general topological properties: 

•  conservation relations

• graph-theoretical features: shortest path lengths, connectivity analysis, network diameter etc.

• metabolic flux analysis: computing steady-state flux distributions from a set of given reaction rates ; handling redundant systems including gross error detection; feasibility check of flux scenarios

• flux balance analysis: find optimal flux distributions for arbitrary linear objective functions

• metabolic pathway analysis with elementary modes

• minimal cut set analysis: intervention strategies for repressing a certain functionality in the network

most of these functions were already part of fluxanalyzer  <cit> . the tools provided for a comprehensive analysis of elementary modes  and minimal cut sets  are a particular strength of cna and have been revised and algorithmically improved. ems represent the minimal functional units  of a metabolic network  <cit> , whereas minimal cut sets  can be seen as minimal failure modes  <cit> . ems and mcs are actually dual descriptions of a network's functionality  <cit> , each providing different applications. in particular em analysis has become a standard tool in metabolic network analysis  <cit> . however, the inherent combinatorial complexity makes the calculation of ems and mcss in large networks a computationally hard task. cna offers state-of-the-art algorithms and uses the mex interface of matlab to call  external c-files  <cit>  . in particular, cna provides an interface to metatool  <cit>  enabling to compute ems on the fly with the probably fastest algorithm currently available. the computation of mcss has been revised; it relies now on the berge algorithm known from the theory of minimal hitting sets  <cit>  outperforming the original algorithm introduced in  <cit>  by about two orders of magnitudes.

apart from displaying ems and mcss directly in the interactive maps, cna facilitates a detailed statistical assessment of large sets of mcss and ems. an important feature is the opportunity to select subsets of ems or mcss by specifying a set of criteria . then, statistical properties can be calculated for the current selection and compared with other selections, useful e.g. to assess the importance of a reaction under different growth conditions. such calculations include  reaction participation, structural couplings, or optimal product yields.

signalling and regulatory networks
cna provides new algorithms designed for a functional analysis of signal-flow networks . basically, each function operates either directly on the logical network model of the sfn or on the underlying interaction graph. the latter can be derived automatically from the logical hypergraph representation by splitting all the and connections. for example, the reaction in eq.  would be decomposed into one positive  and one negative arc .

interaction graphs
the main features of cna for studying interaction graphs comprises the computation and analysis of:

• general graph-theoretical network properties

• signalling paths and feedback loops 

• distance matrices capturing the lengths of the shortest negative/shortest positive path between all ordered pairs of species

• the dependency matrix

general graph-theoretical properties that can be computed include the number of components, the network diameter and others. a more sophisticated feature is the computation of signalling paths and of the network's feedback loops . for example, one can compute all  signalling paths connecting a species i with a species k each representing a path along which i can influence k. feedback loops represent sub-networks along which a species k can influence itself . they govern network dynamics and stability and are the driving force of fundamental physiological process such as differentiation, oscillations or homeostasis  <cit> . a sign indicating a positive  or negative  overall influence is assigned to each path and circuit.

for computing paths and circuits, cna utilises the same algorithmic approach as for ems in metabolic networks  <cit> . the only difference is that each path and circuit gets an overall sign. as for ems in mfns, paths and circuits can be displayed in the maps and statistically assessed . furthermore, again in close analogy to metabolic networks, mcss interrupting e.g. a given set of feedback loops or/and paths can be computed. this feature can also be used to decompose a network into monotone dynamical sub-systems in the sense as discussed in  <cit> .

in very large networks, a full enumeration of paths and circuits becomes infeasible since the number of these objects depends exponentially on the network size. instead of computing all paths and circuits, one may then focus on the shortest paths and shortest circuits, whose computation is much less expensive but still provides important functional insights. shortest paths algorithms are well-known from graph theory , however, interaction graphs are signed directed graphs and a special procedure is required for computing the length of the shortest positive and of the shortest negative path from a node i to a node k, denoted with pik and nik, respectively. here we also allow i = k, i.e. pkk and nkk represent the length of the shortest positive/negative circuit involving k. note that pik and nik are usually different  and the minimum of both gives the  shortest path length. for example, in figure  <dig>  we have pik =  <dig>  nik =  <dig>  nkk =  <dig> and pkk = ∞ . in figure  <dig>  one arc has been removed implying nik = ∞ .

the importance of shortest positive/negative paths and circuits has been emphasised in  <cit> , however an algorithmic scheme for computing them has neither been given in this reference nor could the authors find one in the literature. the algorithm implemented in cna extends the dijkstra algorithm and determines simultaneously pik and nik for all ordered pairs of nodes . again, i = k is also considered, i.e. shortest positive/negative feedback circuits are computed concurrently. in the j-th iteration, all the pik and nik of length j are identified using the shortest paths identified in iteration j- <dig>  for example, in figure  <dig>  in the 2nd iteration, a path length of  <dig> would be found for nib, pik, nak, pbd, pcd, pke, ndf, nek, pfd. hereby it is important to keep track of the predecessor node p of k through which the shortest path  from i is running before reaching k. for example, in figure  <dig>  we would store node c for pik, node b for nik, node a for nib and so on. this information can be used to reconstruct, at the end, the determined shortest path from i to k . moreover, as a key feature of our algorithm, this information is required to check for each shortest path candidate  that no circuit is contained. in usual shortest path algorithms, this can not happen but due to the parallel determination of pik and nik it may here. for example, in figure  <dig>  a positive path from i to k exists  and k is a node in a negative circuit. the algorithm finds first the positive path from i to k. then it will further look for a negative path and while running through the negative circuit, it would find, in total, a negative walk from i to k which is, however, not a path in the graph-theoretical sense  and has therefore to be discarded.

with the algorithm described above, all the shortest positive/negative paths and circuits can be computed efficiently in large-scale networks . they not only provide distance measures, but also show  whether any positive or/and negative path between a pair of nodes or  whether any positive/negative circuit involving a certain species exists at all. for example, in figure  <dig>  there is a positive path from rec <dig> to tf <dig> and tf <dig> and no negative path to any of the sink nodes  tf <dig>  tf <dig>  tf <dig>  from rec <dig> all sink nodes can be reached via a positive path, and tf <dig> also along a negative one. species c and d are the only ones involved in a  feedback loop. such relationships, classified for all pairs of nodes, are represented by cna in the so-called dependency matrix  <cit>  which reveals network-wide interdependencies . each row of the dependency matrix characterises how the corresponding species influences the other nodes, whereas each column indicates how the corresponding species is influenced by the others. intuitively, i is called an activator of k if pik<∞ and nik = ∞  and marked as an inhibitor of k if pik = ∞ and nik<∞ . more precisely, the dependency matrix as introduced in  <cit>  characterises for each ordered pair of nodes  the effect of i on k by one of the  <dig> following cases :

• i has no effect on k if pik= nik = ∞, i.e. dik = ∞ and there is no path from i to k 

• i is a strong  activator of k if pik<∞ and nik = ∞ and there is no node z such that diz<∞ and dzk<∞ and nzz<∞ 

• i is a weak  activator of k if pik<∞ and nik = ∞ and there is a node z such that diz<∞ and dzk<∞ and nzz<∞ 

• i is a strong  inhibitor of k if pik = ∞ and nik<∞ and there is no node z such that diz<∞ and dzk<∞ and nzz<∞ 

• i is a weak  inhibitor of k if pik = ∞ and nik<∞ and there is a node z such that diz<∞ and dzk<∞ and nzz<∞ 

• i is an ambivalent factor for k if pik<∞ and nik<∞ 

the global dependencies collected in the dependency matrix facilitate valuable qualitative predictions about the effects of perturbation or knock-out experiments  <cit> . for example, the effect of strong activators and strong inhibitors is strictly monotone. thus, starting from a resting state, increasing the level of  rec <dig> should lead to an increase in the activation level of tf <dig> and tf <dig> since rec <dig> is a strong activator of tf <dig> and tf <dig>  in contrast, it should have no effect on tf <dig> since there is no connection from rec <dig> to tf <dig>  predictions on the effects of weak activators and weak inhibitors are more limited due to the involvement of negative feedback loops, however, we can at least predict that there exists a time window  where the affected species can only increase  or decrease  after a  perturbation. only for ambivalent factors nothing at all can be said regarding perturbation effects since then positive and negative influence paths are competing and the overall effect will depend on kinetic parameters and concentrations.

note that this type of analysis is related to the theory on monotone systems and the notion of consistent graphs  <cit> .

in general, when computing  paths and feedback loops, cna allows the user to exclude nodes or edges for testing knock-outs effects.

logical networks
boolean or logical networks have been extensively used for modelling small or medium-scale  regulatory networks, typically characterised by having few  inputs but many feedback circuits  <cit> . main aspects that have been studied focus on the discrete dynamics of the system including its attractors, global stability, and the potential transition paths. ginsim, a recently developed software tool, supports this type of analyses  <cit> . although the functions provided by cna for logical network analysis are in principle applicable to gene regulatory networks, they are especially useful in networks which are structured in input, intermediate, and output layer as typical in signal transduction networks  <cit> . logical analysis in cna aims to a characterisation of the input/output behaviour of the system and to search for interventions that can change the natural behaviour into a desired one:

 logical steady states
cna computes the logical steady state that follows from a user-defined scenario . this functionality enables to study how signals are propagated through the network and how a network responses to certain stimuli  <cit> . again, the user may fix some signal flows or states  mimicking deactivation  or permanent activation, respectively. in figure  <dig>  such a scenario is displayed: receptors rec <dig> and rec <dig> were considered to be activated and rec <dig> not. the logical steady state was then computed showing the response of the network elements to this activation pattern.

note that, sometimes, the logical steady state resulting from a given input pattern may be not unique for all nodes or a logical steady state does even not exist  <cit> . in such a case, cna will indicate for which compounds a unique logical steady state can not be determined.

 minimal intervention sets
cna provides a complex routine for computing  minimal intervention sets . similar to mcss in metabolic networks, a mis is a minimal set of interventions by which a user-defined intervention goal  will be satisfied. the user may define  an intervention goal by setting desired on/off values for the respective states and signal flows and  a scenario  to which the network is exposed. cna searches then for combinations of interventions so that the resulting logical steady state will satisfy the intervention goal. in contrast to minimal cut sets, an intervention may represent not only the permanent deactivation  but also a permanent activation  of a compound.

to illustrate the concept of miss consider figure 2: assume we want to have transcription factors tf <dig> inactivated and tf <dig> activated . in total, there are  <dig> miss. one example is {rec <dig> =  <dig>  rec <dig> =  <dig>  rec <dig> = 1} which indicates  set of input stimuli that would satisfy the intervention goal. another one is {a =  <dig>  rec <dig> = 1}, where a and rec <dig> are permanently hold in an active state . here, the inputs at rec <dig> and rec <dig> are irrelevant for achieving the intervention goal.

for computing miss, cna uses an almost brute-force approach, since it checks systematically all minimal combinations of interventions  whether they lead to a fulfilment of the intervention goal when the network reaches the logical steady state. however, some important heuristics are exploited. for example, only those species are subject to interventions that have an influence on compounds being part of the intervention goal . as one is typically interested in the  miss with only few interventions and because the computation of miss with higher cardinality is the most time-consuming part, cna allows to set a maximum cardinality.

miss can be displayed in the maps and assessed statistically. as outlined in  <cit>  and demonstrated in  <cit> , miss provide a powerful tool for analysing signalling networks. some applications are:

 searching for intervention strategies for repressing/provoking certain behaviours.

 identifying fragile points in the network and estimating the importance of network elements for different functions 

 identifying failure modes which might cause an observed abnormal  behaviour of the network : if tf <dig> is on and tf <dig> off in experiments under all possible combinations of input stimuli then a failure  in node c is likely since {c = 0} is a miss for the intervention goal tf <dig> = on and tf <dig> = off)

 searching for candidates of missing links in the network by which experimental data not consistent with the current network model could be explained 

additional features
a number of features, most of them available for both types of network projects, make work with cna easier. scenarios, e.g. representing flux distributions or a set of logical states and signal flows, can be saved and then later reloaded. a clipboard enables to store the currently displayed scenario temporarily in memory; it can be pasted back afterwards or compared with other scenarios. the size, context-dependent colours and visibility of the text boxes  are definable by the user. mass-flow networks may be exported in ascii  format  as well as imported and exported in sbml format. in signal-flow networks, the interaction/incidence matrix and names of species and reactions can be exported in ascii format. note that exchange of logical models is not supported  by sbml.

integrating signal-flow and mass-flow networks
an important issue towards a holistic analysis of cellular networks is network integration, i.e. to facilitate the analysis of networks with mass and signal flows in one coherent topological model. this would enable to relate events in the metabolism with events in signaling and regulatory networks. the key question is how to design conceptually the interface for connecting signal flows with mass flows and vice versa. some approaches have been proposed in the literature. covert et al.  <cit>  connected a regulatory network, controlling the activity of some metabolic pathways, with a metabolic network model. the regulatory network, hierarchically on top of the metabolic model, was represented as a boolean network whose inputs are the external conditions  and whose outputs are the reactions to be switched on or off in the metabolic  network model. this type of modelling is possible in cna and requires only one intermediate step: the regulatory  and the metabolic network  are represented in two separate models. the inputs of the regulatory network are the environmental conditions and the outputs of the regulatory network are the states  of the reactions in the metabolic network. defining a given set of stimuli in the regulatory model will result in a corresponding logical steady state. then, one exports the reactions with state  <dig> . by using the same reaction identifiers in the metabolic model, this scenario can be loaded showing all the reactions in the metabolic network which have been switched off . then, calculations such as elementary modes or optimal flux distributions can be conducted.

though this approach is useful for a number of applications, it is unidirectional and is not able to close the loop, i.e. to account for the different kinds of interactions going from the metabolic network back to the regulatory or signalling part.

a quite different approach for connecting mass-flow with signal-flow networks, relying on interaction graphs, has been introduced recently  <cit> . at least some of the techniques proposed in this work can already be employed with cna in a straightforward manner by using the functions provided for interaction graphs. furthermore, in  <cit>  another method was introduced called "network expansion" which relies on a boolean description of metabolic networks and might have the potential to integrate also signalling networks. again, this approach is already supported by cna since network expansion relies on computing logical steady states in boolean networks  <cit> .

in our opinion, all of the above mentioned approaches enable the analysis of specific features of integrated mass-flow/signal flow networks but seem not yet general enough to consider all of the potential types of interactions that may occur. accordingly, conceiving a more general conceptual framework for combining signal and mass flows and implementing it in cna is a major aspect of our future work.

CONCLUSIONS
an increasing number of software tools is available for systems biology . some of them are devoted to topological or qualitative analysis of cellular networks, including metatool  <cit>  for metabolic and ginsim  <cit>  for gene regulatory networks.cellnetanalyzer is a single suite to perform structural and functional analysis of both mass-flow- and signal-flow-based cellular networks in a user-friendly environment. cna exploits that stoichiometric networks,  graphs and logical networks can all be represented internally as hypergraphs, albeit the methods for analysing these networks have then to be chosen according to the type of flows that are carried by the reactions . cna offers a comprehensive toolbox with various, partially unique, functionalities and algorithms for analysing both types of networks. cna  has been downloaded by more than  <dig> independent researchers world-wide. recently, the new functions for signal-flow networks have been successfully applied to a large-scale logical model of signalling pathways involved in t-cell activation  <cit> , comprising  <dig> compounds and  <dig> interactions. using the methods implemented in cna, this model was able to provide deeper insights in the functioning of the signalling network governing t-cell activation and to unravel important and previously unknown aspects of this complicated process.

availability and requirements
cellnetanalyzer requires matlab® version  <dig>  or higher. for a few calculations, the matlab optimisation toolbox is required.

for academic purposes,cellnetanalyzer including its manual can be obtained for free via the web-site



commercial licenses are available for non-academic users.

list of abbreviations used
cna cellnetanalyzer

mfns mass-flow networks

sfns signal-flow networks

ems elementary modes

mcss minimal cut sets

miss minimal intervention sets

authors' contributions
sk developed cellnetanalyzer and conceived and implemented the algorithms. jsr tested and applied cellnetanalyzer and gave proposals for new features. edg gave suggestions for improvements of cna. all authors read and approved the final manuscript.

