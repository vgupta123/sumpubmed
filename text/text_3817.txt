BACKGROUND
the increasing quantity of bio-medical data being published in both the databases and the literature provides many challenges for bioinformatics analysis. the integration and analysis of these data can benefit from rich, standardised meta-data that enable humans and computer applications to give some level of meaning to those data in order to interpret those data appropriately. the development and adoption of such standards is, however, both time consuming and costly. many bio-medical ontologies are under development to provide reference vocabularies that aim to standardised the way bio-medical data are described  <cit> . in addition to providing the concepts of the domain, these ontologies provide details of the relationships between domain concepts. these relationships have well defined semantics that facilitate reasoning and consistency checking over the data.

there are now many bio-medical ontologies that are well developed and in regular use across the discipline  <cit> . in this paper we present the populous application that provides a framework within which domain experts can contribute their knowledge to a developing ontology. populous uses a simple template based approach to ontology construction, but with semantic constraints that guide the filling of those templates; we exemplify its use in the development of an application ontology for the kidney and urinary pathway  domain.

in the life sciences, efforts such as the obo foundry  <cit>  aim to provide the domain with a set of orthogonal interoperable reference ontologies. within the obo foundry there are a core set of ontologies that cover different domains ranging from genes, proteins and chemical entities, through to cells, anatomy and phenotype ontologies. these ontologies, along with many others that sit outside the obo foundry, provide a set of 'building blocks' for building new application specific ontologies  <cit> . re-using modules from existing ontologies to build larger and more complex compositional ontologies lowers the cost of development and maintenance. in addition, it offers greater opportunities for data integration and data interoperation in applications that exploit those ontologies. the gene ontology  consortium has recently released guidelines for the development of so-called cross product ontologies that allow concepts from one obo ontology to be composed or described in terms of concepts from other obo ontologies  <cit> . these rich conceptualisations offer many benefits in terms of querying and reasoning over data described by these ontologies  <cit> . this modular approach to developing ontologies is based on an ontology design pattern known as normalisation  <cit> . as in software engineering, design patterns are based on good practices and are a useful tool for developers. they provide templates that act as guidelines to ease development in large collaborative projects  <cit> . identifying suitable design patterns is hard, however, once a pattern is established, population of the pattern can occur rapidly. in this context we define population as the creation of multiple instances of a particular design pattern of axioms, that can include classes and individuals in an ontology.

we can break down the pattern based development process into a series of steps:

 <dig>  creation of an ontological framework that establishes the patterns of axiomatisation that will need 'populating';

 <dig>  identifying the design patterns that capture some aspect of the ontology's domain;

 <dig>  creating a template for that pattern that can be populated by the ontology's author;

 <dig>  filling the template according to the pattern;

 <dig>  transforming the content of the template into instances of the pattern;

 <dig>  placing the instantiated pattern into the final ontology.

steps  <dig> and  <dig> are hard, and requires ontology design skills, knowledge of the ontology in question, the principles and style of the ontology, and the ontology engineering process. the remaining steps require appropriate tool support to assist developers in populating and applying the pattern. modern ontology editors, such as obo edit  <cit>  or protégé  <cit> , offer a wide range of support for building ontologies by hand, but offer less in the way of support for modelling design patterns and populating templates. in addition these tools require training and can be overwhelming for domain experts who are new to ontology building. to address this issue we developed the populous application that supports steps 3- <dig> and we demonstrate how it has been used by domain experts to populate ontology design patterns en mass.

related work
developing ontologies according to some design pattern is not a novel concept and is considered good practice for large ontology development projects  <cit> . as an example of a pattern, consider an ontology about cells; eukaryotic cells can be classified as being either anucleate, mono-nucleate, binucleate or multinucleate. we can abstract over this pattern to say that every cell can be classified by its nucleation. this pattern is repeated for all cell types; the only variables are the cell name and the value for its nucleation. we can create a simple template for this pattern that could be populated by a cytologist, without him or her needing to worry about the underlying ontological representation.

building ontologies from templates allows abstraction over the underlying design patterns. a tabular layout provides a simple and intuitive form fill-in style of user interface that can support the population of such templates. each row can correspond to a member from a set of related entities and each column represents the type of relationship. the intersection of row and column holds the 'filler' for the given entity's relationship of that column's type. by adopting such templates, ontology developers can separate the pattern from its instantiation; this allows the domain expert to focus on the knowledge without the distraction of a knowledge representation language.

templates are useful when data, information or knowledge need to be collected in a regular form. applying constraints to the template reduces the number of discrepancies in the input data. a common tool for collecting data in this form is the spreadsheet; spreadsheets provide a tabular interface, where columns and rows represent certain attributes, and individual cells capture the data. tables help users to structure data in a logical way, that is useful for both its maintenance and processing. in ontology development, spreadsheets can be used to gather and organise information about concepts and their relationships.

previous work in this area has focused on the transformation of data into ontologies, but little attention has been paid to supporting the population of the templates at the point of data entry and this is where populous's main contribution lies.

various tools are available to support the conversion of spreadsheet data into statements in a knowledge representation language. excel2rdf  <cit> , convert2rdf  <cit> , and rdf <dig>  <cit>  are three tools that allow users to generate resource description framework  statements from spreadsheets. despite rdf being the reference syntax for the web ontology language , its serialisation is complex and not intended for humans, making it inappropriate for defining higher level owl constructs in patterns.

the excelimporter plugin  <cit>  for protégé  <dig>  was a step up from these tools and enabled users to transform spreadsheet content directly into owl axioms. it was, however, limited to only a small set of owl constructs. the more recent tools to support template data and pattern instantiation include mapping master  <cit> , oppl  <dig>  <cit>  and the protégé matrix plugin  <cit> .

• the mappingmaster plugin for the protégé  <dig>  ontology editor is a more flexible tool for transforming arbitrary spreadsheet data into owl. mappingmaster moves away from the row centric view of spreadsheets and has an expressive macro language called m <dig>  <cit>  that can handle non-uniform and complex spreadsheets. m <dig> combines a macro language for referring to cells in a spreadsheet with a human readable syntax for generating owl expressions called the manchester owl syntax  <cit> . mappingmaster and m <dig> are primarily designed for the transformation of spreadsheet data to owl, but provides little in the way of support for populating and validating the spreadsheet data.

• the ontology pre-processor language   <cit>    <cit>  is a scripting language similar to m <dig>  oppl  <dig> is also manchester owl syntax based and allows for the manipulation of owl ontologies at the axiom level. oppl  <dig> has support for the use of variables and the addition and removal of logical axioms from an ontology. oppl  <dig> is a powerful scripting language for owl and a user interface is provided via the oppl plugin for protégé  <dig>  along with a standalone api to embed it into software systems. oppl  <dig> does not currently support working with tabular data and is decoupled from any knowledge gathering.

• the matrixplugin for protégé  <dig>  allows users to specify simple owl patterns in a tabular interface that can be used to populate repeating patterns with existing concepts from an ontology. this plugin is useful for ontology developers that have repetitive patterns to instantiate, and has the added benefit of cell validation and auto-completion at the point of data entry. the matrix plugin is limited by the type of patterns that can be expressed along with the fact that it is tightly integrated with the protégé interface, therefore, not suitable for all users. it does, however, combine knowledge gathering and axiom generation.

RESULTS
in order to evaluate populous in a real ontology building scenario it has been used to populate a template for gathering knowledge about the kidney and urinary system. the kidney is a complex organ composed of several distinct anatomical compartments that together enable the filtration of waste from the blood in the form of urine. each of the kidney compartments is formed from a wide variety of cell types, and the specificity of the compartments relies on these specialised cell functions. the kidney and urinary pathway ontology   <cit>  describes kidney cells, their function and their anatomical locations. kupo is being built to annotate and integrate multi-omics datasets held in the kidney and urinary pathway knowledge base   <cit> .

a simple template was designed for experts from the kup domain to capture the relationships between cell types, their anatomical location and their biological functions. the template has three main columns; column a is for entering cell type terms, column c is for anatomy terms and column d for biological process terms. populous was used to constrain the allowable values in columns a, c and d to concepts from the open biomedical ontology cell type ontology  <cit> , subclasses or part of the kidney or urinary system concepts from the mouse adult gross anatomy ontology  <cit> , and all subclasses of the biological process concept from the gene ontology  <cit> , respectively. the experts were instructed that the relationship between concepts in column a and c was part of, and the relationship between column a and d, participates in. for concepts that were related to multiple concepts they were allowed to list concepts in a cell separated by a vertical bar. figure  <dig> is a screen shot of populous populated with data from the domain experts.

in order to transform the tabular data into an owl representation the oppl patterns in example  <dig> and  <dig> were created by the ontology engineers. these patterns state that a cell type is equivalent to a cell that is part of an anatomy term and a subclass of cells that participate in a biological processes; we use the relationships from the obo relations ontology  <cit>  where appropriate. for both restrictions the existential  quantification is used. we put aside any ontological issues about our choice of modelling at this point as these can be altered later down the line in the development process. the two differentia in this pattern for a cell genus are the anatomical location and the biological process, which is retrieved from column a, c and d respectively in the template. the entire kup ontology is generated from the template data combined with the ontology pattern. example  <dig> shows the manchester owl syntax generated from the pattern and data from row  <dig> for the juxtaglomerular complex cell.

oppl example 1: oppl  <dig> patterns for describing cell types in terms of anatomy

?cell:class,

?anatomypart:class,

?partofrestriction:class = cell and ro:part_of some ?anatomypart,

?anatomyintersection:class = createintersection

begin

add ?cell equivalentto ?anatomyintersection

end;

oppl example 2: oppl  <dig> patterns for describing cell types in terms of biological process

?cell:class,

?participant:class,

?participatesrestriction:class = ?cell and ro:participates_in some ?participant,

?participatesintersection:class = createintersection

begin

add ?cell subclassof ?participatesintersection

end;

example 3: manchester owl syntax for juxtaglomerular complex cell 

class: kupo:kupo_0001028

equivalentto:

cell:cl_0000000

and 

subclassof:

cell:cl_ <dig> 

ro:participates_in some gene_ontology:go_ <dig> 

ro:participates_in some gene_ontology:go_ <dig> 

ro:participates_in some gene_ontology:go_0003106

in addition to the kupo, additional ontologies were needed to annotate the experimental data. these included ontologies to describe the experimental protocols, experimental factors, and the different animal models under investigation along, with a host of renal diseases. for each fragment of the ontology different templates were generated to be populated in populous by the domain experts. for each template we strived to re-use concepts from external ontologies such as the disease ontology  <cit> , the experimental factor ontology  <cit> , the ontology of biomedical investigation  <cit>  and the phenotype ontology  <cit> . again, by exposing the renal biologists to these reference ontologies through populous, they were able to provide useful insights about those ontologies. on several occasions they found that key domain concepts were either missing or had been inappropriately labelled  <cit> .

using this template approach, the domain experts described over  <dig> cell types, many of which are absent from the current cell type ontology , along with a further  <dig> classes that were added to describe the various experimental metadata. figure  <dig> shows a section of the inferred hierarchy after classifying the ontology in protégé  <dig> . cell classes are asserted without hierarchy and form a flat list. the partonomy of the mouse anatomy is used to drive inferences about super/sub class relationships between cell types.

leaving the reasoner to compute the class hierarchy means the domain experts can manually inspect for missing or incorrect subsumptions. in cases where a desirable subsumption relationships could not be achieved using a partonomic relation, users were free to assert child/parent relationships in another column. this methodology provided a useful feedback system between the domain expert and the ontologist developing the design patterns. using this approach the domain experts were able to focus on the biological knowledge and allow the ontologist, who was not an expert in the domain, to focus on the conceptualisation.

discussion
populous is designed for domain experts to gather knowledge that can be subsequently used to build ontologies. whilst previous tools have provided support for transforming templates into ontologies, they lacked basic support to help the user at the point of data entry and knowledge gathering. populous was designed to fill this niche and meets the requirements outlined in the method section. the simple tabular interface used in populous is familiar to users who have already used a spreadsheet application. this lightweight interface offers a way to engage domain experts in the ontology authoring process without issue trackers, face to face meetings and so on. such mechanisms, however, remain a valuable part of ontology development.

we have demonstrated how populous can be used to develop an ontology describing cells of the kidney and urinary pathway. this demonstration highlights how domain experts managed to generate a real application ontology without being exposed to an ontology language like owl, or a sophisticated ontology editor like protégé. populous's main purpose is for knowledge gathering and not ontologising. by shielding users from the ontology, except for review later in the process, they are left to concentrate on the biology and not worry about the axioms needed to represent it. the 'ontologising' needs to happen, but it happens at a different stage of the process by someone with the 'ontologising' role. this separation is particularly useful should the ontologist wish to change the conceptualisation or experiment with different patterns for the representation.

our experience in developing the kupo with populous provided some insights into the benefits of developing an ontology in this way. classical approaches to ontology development have tended to focus on organising domain concepts into hierarchies. the approach used for kupo shifts the focus from the hierarchy and allows us to focus on the relationships that describe those entities. by axiomatising these relationships through our design patterns we can exploit the reasoner to manage any hierarchical classification. using the reasoner to compute subsumptions facilitates logical explanations as to why certain relationships hold. we also see how building modular ontologies in this way encourages the domain experts to contribute their expertise to the external ontologies they might be using. for example, there are renal cell types for the vasa-recta descending limb and the vasa-recta ascending limb, both of which have different functions. the domain experts wanted to distinguish between these two cell types according to their anatomical location, however, the mouse anatomy ontology only describes the vasa-recta. the domain experts spotted this omission in the mouse anatomy ontology and were able to feed this back to the developers. building modular and normalised ontologies is considered a good ontology engineering practice  <cit> , however few existing bio-medical ontologies are built in this way. we have shown in the development of kupo that populous encourages and supports the development of ontologies in this way.

the question now arises as to how far can you go with a tool like populous? populous is by no means a replacement for full blown ontology editors, nor is it intended to be. existing tools provide the means to create an ontology development framework, within which populous would have a role. the framework would include patterns that have been developed to model the ontology's domain. as populous is used to instantiate these patterns and build the ontology any changes to the underlying framework can happen independently of the efforts by the domain experts. developing good design patterns up front can be difficult, so it is important that whichever framework is adopted can readily accommodate changes in how the domain should be modelled. in the kupo development, such an extension to our initial framework was required. an early naive assumption was that all kidney cells could be described in terms of their anatomy alone, only to later find some exceptions to this assumption. for example, renal principal and renal intercalated cells are currently indistinguishable by anatomy and function alone. in these cases we can add new patterns, such as the ability to describe a cell in terms of its lineage. such an extension is trivial in populous, as we can simply add a new column for the relationship, and a new oppl pattern to handle the axiomatisation.

the template approach can be particularly advantageous in scenarios where the modelling needs to change. peters et al  <cit>  showed how templates can be used to generate different ontological representations of the same data. the kupo is being used to annotate data in the kupkb. the kupkb is an rdf triple store, thus only a limited set of owl inferences are possible. querying complex owl ontologies in a triple store with a language like sparql can be cumbersome, so an alternate representation of the kupo data may be more suitable. generating a simpler representation of the kupo in populous is possible by replacing only the oppl patterns. this is the case so long as the classes or instances in the patterns do not change; if they do, then the knowledge gathered has to changed and the process starts again, but again the separation of knowledge gathering and knowledge generation helps this process.

future work
the release of populous as presented is an early version; there remains many possible additions. oppl  <dig> provides an expressive language for generating patterns that include all constructs from the owl  <dig> specification. oppl's support for variables make mapping columns from tabular data to variables both flexible and convenient. oppl's built in macro extensions enable the dynamic expansions of owl expressions. for example, we can create a conjugation of owl expressions from a set of values assigned to a single oppl variable. we see a potential limitation of populous as it assumes a row-per-entity paradigm where single columns map to a particular variable. this layout structure is simple but may not be suitable for all types of conceivable template. fortunately, the m <dig> language has been specifically designed to work with these kinds of spreadsheets and it offers many complementary functions to a language like oppl. all templates populated in populous can be saved as micorsoft excel files and loaded into the mappingmaster plugin should users wish to transform them into owl using m <dig> 

other potential future additions include:

 <dig>  populous allows multiple values to be entered in a cell using the vertical bar separator. this syntax is used to define a value set for a particular oppl variable. these value sets are subsequently used by oppl to dynamically create conjunctions of owl expressions that contain a mapping to that variable. future extensions to the populous syntax will give the user more flexibility when asserting value sets, such as the ability to state whether the relationships represent an intersection or a union of variables.

 <dig>  populous currently gathers domain knowledge for the ontology, but not about the ontology. we aim to extend populous to support various metadata such as editorial metadata and definitional metadata etc.

 <dig>  populous is a single user application. making populous collaborative such that contributors may collectively add material to the same spreadsheet.

 <dig>  feedback from the generated ontology to fix or extend data in populous is currently ad hoc. a tighter coupling of this feedback cycle, without having to go into an axiom based editor, will increase the quality assurance aspects of populous.

CONCLUSIONS
populous offers a means of creating ontology content without the use of a standard ontology development tool. we see populous as an extension to the current set of ontology development tools that offers a new avenue for engaging domain experts in the ontology development process. it is possible to separate knowledge gathering from conceptualisation and axiomatisation and populous is one means of achieving this goal. such a separation offers flexibility and the simple form fill-in style of knowledge gathering should make generation of axiomatically rich ontologies increasingly straight-forward.

implementation
requirements analysis
all of the previous tools developed in this area tend to focus on the transformation from the template to the ontology. they provide little or no support for populating and validating template content.

furthermore, tools like excelimporter, the oppl plugin and mappingmaster are integrated into the ontology development tools, that can be overwhelming to users new to ontology development. we wanted to explore the use of a simpler tabular based interface to ontology authoring that shields the user from the underlying ontology and guides them when populating the template. providing validation at the time of authorship should significantly reduce the amount of time required to debug and process the data captured in the spreadsheet. here we list some key requirements for a tabular based ontology building tool:

 <dig>  new concepts may be created or reused from other ontologies when populating the template. in setting up populous the users must be able to load and browse ontologies or parts of ontologies, that form part of the ontology being developed.

 <dig>  the set of valid concepts allowed in a particular column may be constrained to concepts from other ontologies, or parts of ontologies. each time a concept is added to a cell within that column the value is validated according to the constraint.

 <dig>  to improve human comprehension the concept should be rendered using only the uri fragment, or optionally a human readable label from the ontology.

 <dig>  a table cell might have multiple values; for example, when the concept being described has multiple parts.

 <dig>  users should be free to suggest new concepts when an appropriate concept is not available.

populous
populous is an extension of rightfield  <cit> , a tool that has been developed to support ontology building from spreadsheets; rightfield is for creating excel documents that contain ontology based restrictions on a spreadsheet's content. in rightfield a user can open excel spreadsheets and ontologies from their local file systems or from the bioportal  <cit> . rightfield can read owl, obo and rdfs ontologies. using rightfield, individual cells, or whole columns or rows can be marked with the required ranges of ontology terms. for example, they could include all subclasses from a chosen class, direct subclasses only, all individuals, or only direct individuals. each spreadsheet can be annotated with terms from multiple ontologies. rightfield is primarily designed for generating spreadsheet templates for data annotation; populous extends rightfield to support knowledge gathering and ontology generation. populous builds on top of the rightfield machinery for embedding ontology terms into spreadsheet cells and provides support for transformation of these spreadsheets into owl ontologies.

populous and rightfield are both open source cross platform java applications. they use the apache-poi  <cit>  for interacting with microsoft documents and manipulating excel spreadsheets. populous is available for download from http://www.populous.org.uk.

requirement  <dig> is already addressed using rightfield functionality to upload both owl and obo ontologies. in order to better serve the life science community, users can also browse and load ontologies directly from bioportal. once the ontologies are loaded they are classified by a reasoner and the basic class hierarchy can be viewed.

requirement  <dig> is met by the ability to select terms from the ontology to create validation sets. a data validation restricts the set of values that are valid for a particular cell, or selection of cells, in the table. validations can span multiple rows and columns and be composed of all classes from a specified ontology, or can be further restricted to subsets of classes, properties or individuals from a chosen ontology. these data validations are stored in hidden worksheets along with additional information such as the full uri for the term, a label and the source ontology uri. these templates can also be exported as microsoft excel documents, which preserve the data validations placed on the cells, and can be opened in application that supports the 1997- <dig> microsoft excel  file type.

we address requirement  <dig> by allowing users to populate cells using ontology labels. once data has been entered the default will be to render the ontology term using its label; if no label is specified the uri fragment is used. rightfield already supports reading excel workbooks, so users are free to populate the templates in external tools before importing them into populous for validation and transformation.

by using populous directly users will benefit from having instant validation of the input data, satisfying requirement  <dig>  along with some advanced features such as regular expression based auto-completion as they type into annotated cells. additionally populous supports the addition of multiple values into a single cell that are validated individually according to requirement  <dig>  this can be particularly useful for certain kinds of patterns where a conjunction of variables is required to construct the axiom . populous also allows the addition of free text values, even if the cell has an associated validation range, thus satisfying requirement  <dig>  these values are highlighted to the user in red and can act as placeholders for new or suggested terms when no suitable candidate could be found in the validation set. populous supports the use of oppl  <dig> patterns in order to generate new owl axioms from the populated template. oppl  <dig> scripts can be written directly in populous's design mode or imported from scripts generated in the oppl plugin for protégé. variables from the oppl pattern must be mapped to columns from the table using the column name. a pattern wizard guides the user through the generation and execution of the oppl scripts. when the template is processed new identifiers for unknown terms can be auto-generated and exported from populous.

building an ontology with populous
a typical workflow for building ontologies with populous is depicted in figure  <dig>  we can demonstrate populous in building a simple ontology using the cell type nucleation example described in the introduction. the pattern in the ontology states that every cell must have a nucleation. we need to create a template with two columns, column a is for cell type concepts, whilst column b is for nucleation concepts. ontologies describing cells and their nucleation already exist that we can import into populous. by connecting to bioportal we can load the cell type ontology   <cit>  and the phenotype and trait ontology   <cit> . in order to restrict column a to terms from the cto, we highlight all the cells in column a and restrict them to all subclasses of the root class. column b is restricted to subclasses of the nucleation concept from pato. the template is now ready to be populated by the domain expert.

the populated spreadsheet can now be transformed into an ontology. this can be done using the pattern wizard in populous . the first step in the pattern wizard asks the user to select the columns and rows that contain populated data. in this example the pattern creates a restriction on each cell stating that all cells have a relationship, called hasnucleation, to an instance of the class nucleation this pattern can be expressed in oppl  <dig> using the following example.

example 4: oppl  <dig> pattern for cells and nucleation

?cell:class,

?nucleation:class

begin

add ?cell subclassof hasnucleation some ?nucleation

end;

there are two variables in the pattern, ?cell and ?nucleation. these variables are mapped to column a and b respectively. the pattern is to be instantiated using data from rows one to six that must be specified in the wizard. the next step involves validating the pattern, given that proximal tubule epithelial cell is unknown by the validator, the user is given the option to assign a new uri for this concept. the final step involves specifying the full oppl pattern needed to generate the owl axioms. the workflow specified using the wizard can be saved and re-loaded for future re-use. the oppl wizard provides support for managing how new concepts are dealt with, including a flexible mechanism for generating new uris and dealing with concept annotations. each axiom generated by oppl is added to the ontology with an associated annotation, that helps track the provenance of the generated axioms. once the wizard is complete the oppl is executed over the spreadsheet and the resulting generated owl ontology is displayed to the user in manchester owl syntax. a copy of the ontology is saved to disc in rdf/xml, although other owl syntaxes are available. example  <dig> shows the manchester syntax generated for this example. a complete grammar for the oppl  <dig> syntax is available at http://oppl <dig> sourceforge.net/grammar.html and further documentation is available at http://oppl <dig> sourceforge.net/taggedexamples.

example 5: mononuclear phagocyte described in manchester owl syntax generated from the oppl  <dig> pattern in example 4



class: cto:cl_0000113

subclassof:

hasnucleation some pato:pato_0001407

abbreviations
api: application programming interface; cto: cell type ontology; go: gene ontology; kup: kidney and urinary pathway; kupo: kidney and urinary pathway ontology; kupkb: kidney and urinary pathway knowledge base; mao: mouse adult gross anatomy ontology; obo: open biomedical ontologies; oppl: ontology pre-processing language; owl: web ontology language; pato: phenotypic quality ontology; rdf: resource description framework; rdfs: resource description framework schema; sparql: sparql protocol and rdf query language; uri: uniform resource identifier; xml: extensible markup language.

competing interests
the authors declare that they have no competing interests.

