BACKGROUND
molecular dynamics  simulations are routinely used to study the dynamic and structural properties of proteins and other macromolecules. md simulations provide atomic-level resolution of a protein andits surrounding solvent environment as a function of time. there are no experimental techniques that can provide this level of detail. the direct results of an md simulation are the coordinates of all atoms as a function of simulation time. simulation time is divided into discrete time points or frames  that represent the coordinates for the entire system at that precise time. the assembled coordinate 'trajectories'  can be analysed for various factors and visualized to produce movies .

nonbonded interactions within a protein are critical to its thermodynamic behaviour, contributing to packing and electrostatic energies reflected in the enthalpy. such nonbonded interactions include but are not limited to hydrogen bonds, salt bridges, and hydrophobic contacts. fluctuations in these nonbonded contacts as a function of time dictate dynamic behaviour and the conformations accessible to the protein. dynamics are crucial for our understanding of protein function  <cit> , folding and misfolding  <cit> .

we have recently undertaken and completed a large scale project, dynameomics, in which we have simulated the native states and unfolding pathways of representatives of essentially all autonomous protein fold families  <cit> . these fold families, or metafolds, were chosen based on a consensus between the scop, cath and dali domain dictionaries, which we call a consensus domain dictionary   <cit> . for our recent release set  <cit>  there are  <dig> metafolds, representing 95% of the known autonomous domains in the protein data bank . the dynameomics database represents the largest collection of protein simulations in the world and contains  <dig> more structures than the pdb.

the coordinates of the md simulations and our set of standard analyses have been loaded into a relational database. this dynameomics database is implemented using microsoft sql server with the windows server operating system . the dynameomics protocol includes one native state simulation, and at least  <dig> thermal unfolding simulations, which can be used to characterize the unfolding process of the domains. in order to explore the dynamics and folding in these simulations we often calculate the nonbonded contacts for each frame of the simulation. this problem has been well studied and is also known as the nearest neighbor search problem  <cit> . the calculation is computationally expensive; as the naïve approach is to test all possible pairs of atoms in the system. the number of protein atoms or amino acids is often used as a proxy for the overall simulation size. the average number of protein atoms in the proteins in our dynameomics set of simulations is  <dig>  with the smallest system consisting of  <dig> protein atoms and the largest of  <dig> protein atoms. as all of the atoms in our simulations are in motion, all pairs of atoms need to be re-evaluated for each frame of the simulation, so in the case of a  <dig> ns native state simulation sampled at  <dig> picosecond  resolution, we have  <dig>  frames of pairs of contacts to evaluate. calculating the nonbonded contacts without any acceleration method is not practical for a large number of simulations such as in a project like dynameomics.

spatial indexing overview
spatial indexing is a commonly used method by programmers of 3d video games, in which collision between objects are detected  <cit> , though the methods date back further in molecular simulation  <cit>  and other approaches similar in spirit have been described  <cit> . the basic approach based on the cell index method  <cit>  is as follows: in order to accelerate the detection of near neighbour objects in 3d space, the space is split into relatively uniform small 3d bins. each of the bins is given an index and the objects in the system are sorted into the indexed bins based on their 3d coordinates. neighboring objects can then be detected by performing a distance calculation on all pairs of objects in the same or immediately adjacent neighboring bins. there are a number of other algorithms that could be used to speed up the discovery of nearest neighbors including b-trees, kd-trees, z-order curves, verlet neighbor lists, however, we decided to implement the cell index like method  <cit>  since we already have experience in implementing this in our in-house md simulation software and have found it to be very effecient.

our md simulation and analysis engine, in lucem molecular mechanics   <cit>  implements a spatial indexing  algorithm for rapid parallel calculation of nonbonded terms  <cit> . the dynameomics simulations are performed in a periodic box of explicitly represented water molecules with the hydrated protein in the center of the box. this periodic box is conceptually similar to an orthorhombic unit cell in crystallography. we typically employ the nve ensemble as the framework for our classical simulation where the number of atoms , periodic box volume , and total energy  are constant throughout the simulation. the fixed volume is achieved by using a fixed set of periodic box dimensions for the system. as such a system's spatial hash structure can be utilized unchanged throughout the simulation. to accommodate typical nonbonded interaction criteria we split our periodic box into bins of at least  <dig>  Å on the three dimensions. this distance was chosen as it is the maximum distance we consider a pair of atoms to be in contact  <cit>  .

sql server  <dig> supports two types of compression, which can be applied separately to the data and indices associated with a table . row compression is a more efficient representation of row data; it involves storing fixed length columns in a manner similar to variable length columns where repeated bytes are compressed. for coordinate columns, which are a set of five  <dig> bit fixed length columns, the storage savings for row compression are small. page compression, which is built on top of row compression, stores repeating values in a single structure for each page and then references that structure. this can result in significant savings as coordinate tables contain numerous columns with repeated data like atom number that are used for relational joins to retrieve atom information like name, mass, element.

RESULTS
we investigated the effect of using spatial indexing in simulation coordinate tables to accelerate the discovery of nonbonded atomic contacts. we compared the execution times for the commonly employed heavy-atom  contact query for  <dig> ns  of each of our  <dig> representative metafolds selected from across the spectrum of system size . in figure  <dig>  we show the average execution time for the  <dig> ns heavy-atom contact queries with and without the use of spatial indexing. additional file  <dig>  table s <dig> presents a more detailed comparison of the execution times with and without the spatial index. the results show that for all  <dig> cases that we achieved between  <dig>  and  <dig> % decrease in execution time when using spatial indexing, i.e. the time to calculate contacts was between  <dig>  and  <dig>  times faster. as expected, query times decreased as the number of distance calculations is decreased  for  <dig> metafolds. for one very small transcription factor metafold  the heavy-atom contact execution time did not significantly change when using spatial indexing. further investigation of this case indicates that very small systems enjoy a much more limited decrease in run-time. specifically, the transcription factor of 2adr has a radius of gyration of  <dig>  Å and as each spatial bin has the minimum dimensions of  <dig>  Å by  <dig>  Å by  <dig>  Å, the entire protein is covered by one 27-bin chunk. for such cases, the spatial index method reduces into the naïve neighbour discovery method in which all pairs of heavy-atoms are considered and there is no significant difference in run-time. however, it is worth noting that the run-time did not increase. practically speaking, this means that we do not pay a penalty for the indexing when it is not effective, and, as a result, all proteins may be treated identically, regardless of size.

the significant decrease in execution time for identification of nonbonded contacts had three significant implications. first, contact calculations are substantially more tractable for very large proteins in dynameomics. considering one of the largest fold representatives  in our dynameomics set, which contains  <dig> residues , the average execution time dropped from  <dig> minutes and  <dig> seconds to just under  <dig> minute and  <dig> seconds. second, the query execution time is fast enough to enable us to perform large-scale multi-simulation analyses. dynameomics is really about the knowledge discovery over a large number of protein systems. for example, a key query for dynameomics is to identify all of the types of hydrophobic contacts across the native state simulations for all of the  <dig> metafold representatives to identify patterns. such an all-encompassing search is no longer impractical as contact queries across multiple servers can be executed to return the contact set rapidly. third, as the calculation can be run in near real time, contact queries can be performed on the fly where the result set can be streamed through analyses rather than stored permanently and regenerated when required. the cost of disk space to save the contact results may exceed the size of the original coordinate data from which they were derived. hence, we would need to more than double the size of our existing database configuration if we were to consider storing the result of contact queries for all simulations. furthermore, the ability to run ad-hoc on-the-fly analyses is the heart of our exploratory mining efforts for dynameomics. our exploratory visualization tool for extremely large datasets, dubbed dive  can connect to our sql database and rapidly visualize, and act upon, millions of data points in many dimensions such as the nonbonded contact queries  <cit> .

the heavy-atom contact query is a computationally expensive calculation that queries the atomic coordinate tables . we decided to use this query  as the basis for testing different options of data and index compression. the goal of this aspect of the study was to find a data and index compression scheme for the coordinate tables that saves disk space but does not significantly affect query execution times. we investigated  <dig> sets of data and index compression options and applied each of these to each of our  <dig> metafold representative coordinate tables. as an initial test, we calculated the heavy-atom contacts for the first nanosecond of each metafold's trajectory with each set of compression options for the coordinates table. figure  <dig> shows the average execution times for calculating heavy-atom contacts  for  <dig> ns  for each metafold with every type of compression. figure  <dig> compares the average compression for each set of data and index compression options across all the  <dig> metafolds. the average compression ranges from  <dig> - 36%. the lowest level of compression arises from having no data compression but row compression on the index. the largest level of compression was obtained using page compression on both the data and indexes.

comparing the total execution times  for the heavy-atom contacts over  <dig> ns on the compressed tables versus the non-compressed tables all sets of compression options lie within the standard deviation of the total execution times for the non-compressed tables. this result is significant as it indicates that we can adopt any of the compression sets and retain the same fast execution time for the heavy-atom contacts query. the prospect of being able to compress our coordinate data by 36%, using both page data and page index compression, was investigated further by calculating heavy-atom contacts for the full  <dig> ns  of each simulation. we compared the execution times  of the non-compressed coordinate tables to that of the 36% compressed data . there is no significant difference  in execution times for examining the full trajectories when calculating contacts from an uncompressed coordinate table and page compression on coordinate tables and indexes with and without spatial indexing. this result confirms our earlier finding on uncompressed tables and demonstrates that the problem scales appropriately . additional file  <dig>  table s3a, b compares the full trajectory execution times for the compressed and non-compressed tables with and without spatial indexing. spatial indexing, both with and without compression, is  <dig>  to ~ <dig>  times faster for all but the smallest two proteins. as 85% of the dynameomics database is made up of atomic coordinate simulation data, a 36% space saving of  <dig> tb of uncompressed data will net an additional  <dig> tb of disk space. this compression scheme is oriented towards repeated values, such as those found in dimension keys.

these data suggest that for other static  databases implemented in ms sql server  <dig>  compression may offer substantial disk savings. furthermore, the framework of spatial indexing in a sql database to speed up the discovery of near neighbours can be applied to other neighbor discovery problems, such as calculation of the distance between galaxies and/or planets in the field of astrophysics. the spatial indexing framework can be applied to those problems where the space is not bound to three-dimensions, but have fixed dimensional boundaries, and could be used to cluster highly dimensional data sets.

CONCLUSIONS
the spatial indexing implementation presented herein for our multi-terabyte md simulation database decreases neighbour discovery and interaction query execution times by up to 90%. while the speed-up for small proteins was less pronounced, the implementation was suitable for all sizes of simulation systems without introducing overhead for small systems and significant improvement in performance for larger systems. in addition, this work shows that all sets of page and row compression across the data and indexes we tested have no appreciable effect on the run-time of the heavy-atom contact query. the page/page compression set for data in indexes yielded a 36% disk savings for full trajectories over non-compressed tables. this represents a huge savings for large data sets.

