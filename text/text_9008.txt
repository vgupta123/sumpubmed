BACKGROUND
sprints, hackathons and codefests are all names for informal software developer meetings, especially popular in open source communities. these meetings, which often take place in loose conjunction with more traditional conferences, are a vital part of the international network of interactions between software developers working in bioinformatics and computational biology, and complement purely online interactions such as project mailing lists, online chat, web forums, voice and video calls.

collaborative development of software has figured significantly in bioinformatics for over  <dig> years. leveraging and building upon existing open source software is a powerful way to rapidly implement new ideas and methods into reliable working code. this helps in a world where scientific groups are under increasing pressure to produce results quickly and more cheaply than ever. the challenge for everyone is to be aware of existing implementations of a particular desired functionality and their compatibility with local infrastructure. strategically, it is beneficial to know other contributors to externally maintained libraries, and to ensure that contributions are integrated with the remaining code in the best future-compatible way and with the least possible redundancies.

this paper summarises the activities and backgrounds of three related types of meetings: sprints, hackathons and codefests. these share the aim of fostering collaborative interactions and the trust to allow mutual dependencies between developers in computational biology and bioinformatics. although these meetings share common features, each event has its own particular slant and flavour of the community.

methods
hackathons
focus on bringing together existing developers of closely related projects, to accelerate development while encouraging inter-project cohesion.

a series of biohackathons  have been held. the biohackathons  <cit>  have been organized as an invitational event with the loose intention of encouraging the participants to collaborate on a given theme. this flexibility recognises that with hindsight the most productive results/ideas were not always predictable beforehand, but emerged from self-organized collaborative work during the biohackathons when developers from different domains spent a week talking and coding together.

the original biohackathons in  <dig> and  <dig> were mainly dedicated to interoperability in handling sequence data amongst the bio* projects. bioperl, biojava, biopython, and bioruby groups worked together to develop common sequence object models, apis for the biosql database and web services. this ensured that fundamental bioinformatic functionality would be compatible amongst those four programming toolkits. the first biohackathon resulted in the bioperl publication  <cit> .

codefests
bring together a wide range of developers to find new points of collaboration, encourage integration and spawn new projects.

the bioinformatics open source conference  was established in  <dig> by the open bioinformatics foundation bio* project members as an international venue for showcasing new projects and progress, and for developers worldwide to meet in person. since then bosc has been held yearly as a special interest group  meeting preceding the annual intelligent systems in molecular biology  conference, one of the most popular bioinformatics conferences. since  <dig> the annual bosc meetings have also included a two-day informal bosc codefest, which has typically attracted between  <dig> and  <dig> participants. meeting in person is a valuable complement to traditional online distributed teamwork, allowing more intensive discussions and social bonding that continues into the bosc meeting.

over  <dig> developers participated in the bosc  <dig> codefest, hosted by humboldt-university in berlin. projects accomplished by attendees included the extension of several existing open-source tools, development of standards for provenance tracking, and integration of infrastructure management, visualization and parallelization frameworks  <cit> . a key outcome was increased interoperability between tools, an essential requirement for carrying out large scale science in rapidly evolving research areas  <cit> . specific bosc  <dig> codefest accomplishments included small updates in the biopython and cloud bio-linux projects, and work on integration of slurm, an hpc job manager, to the ipython cluster. scala is an alternative language to java that runs in the same jvm environment. during the  <dig> codefest the scala scabio code was integrated into biojava, with the developers working together to ensure that the result was implemented cleanly and without redundancy.

the bioruby group tackled a new project which enables programmers to develop web applications for basespace , a cloud solution provided by illumina on which users can apply various analysis tools to next generation sequencing  data. during the  <dig> codefest, a ruby version of the basespace sdk was tested, documented and completed for release as an open source package. recently, the basespace ruby sdk was contributed to illumina as one of the official toolkits along with the python, java and r versions with the help of a participant from illumina.

mobyle  <cit>  was modified to provide provenance data using w3c prov-o  <cit>  and integrated with the edam ontology  <cit>  for describing its services. the synthetic biology open language visual standard  <cit>  had been formalized as an ontology, and the  <dig> codefest brought together semantic web engineers who were consulted on how to model the visual representation of concepts within the ontology.

sometimes at codefests existing technologies are retired in favour of new ones. for the last eight years, rnammer has been the standard tool for predicting ribosomal rna features in genomes. its drawbacks are that it relies on small, old databases; requires an obsolete version of hmmer; and has restrictive licence terms that prevent anyone beyond the authors from distributing improved code. to resolve these issues for prokaryotes, a new rrna predictor was implemented which uses the new "nhmmer" tool from hmmer  <dig>  for searching dna profiles against dna sequences. this led to the development of barrnap , which will be packaged in bio-linux and replace rnammer in the prokka bacterial annotation system  <cit> . the identification of the problem, a technical solution and its immediate employment in larger workflows needed several individuals to work together to agree on the approach and begin the required coding--a type of interaction fostered by codefests and similar events.

sprints
focus on a single overarching project or technical challenge, providing a meet-up for existing developers as well as a way to involve and mentor new project members.

when linux surfaced as a free operating system, it was adopted quickly by the research community, including many bioinformatics developers. this, along with the ethos of open data in the major international biological databases  <cit> , led to a large body of software developed for linux and released with free/open licenses. for example, the open source bio* projects, most prominently bioperl  <cit> , biojava  <cit> , biopython  <cit>  and bioruby  <cit> , originated over  <dig> years ago as community projects providing widely used libraries for building bioinformatics tools, pipelines and one-off analysis scripts. the situation also led to a natural alliance between bioinformatics software developers and the community-supported linux distributions they use.

to help promote the redistribution, general availability and mutual compatibility of software, the debian linux project launched the debcamp event, a hacking session right before the debian conference. debcamp is an "unconference", a meeting at which people meet and work on specific topics, either alone or in teams. along the same lines, the debian med initiative was founded in  <dig>  <cit> , with the debian sprint held as an annual meeting since  <dig> 

debian med  <cit>  and bio-linux  <cit>  provide the necessary infrastructure for distributing software tools and their updates to the wider community. this is achieved by packaging and distributing the tools in the context of these larger tool repositories. the cloud bio-linux community in turn further enhances the distribution, tailored for bioinformatics on cloud infrastructure  <cit> . the sprint helps with the integration of these efforts.

the  <dig> debian sprint invited contributors to boinc  <cit> , a distributed computing project, and we found the binaries of debian, auto-compiled for multiple different architectures, to be directly usable in boinc projects across linux distributions. together with an ongoing effort to provide packages for the boinc server side, this will help increase the availability of compute time for biological groups, e.g., for biochemists with a novel receptor addressing protein docking  <cit> . this is a good example of the positive outcomes that can result from the cross-disciplinary collaborative activities at sprints and similar events.

the integration of a single software package can trigger a collection of multiple other software tools to be packaged together to complete common workflows in that field. for example, porting of the genometools software suite  <cit>  during the  <dig> debian med sprint not only integrated a substantial number of published and established sequence analysis tools into debian, but also paved the way for future inclusion of packages dependent on the associated genometools library, e.g., parseval  <cit>  or ltrsift  <cit>  or the wealth of predictprotein  <cit> . this emphasizes the role of sprints as strong promoters of synergistic effects within the community.

RESULTS
having 20+ talented and motivated individuals with shared interests work together for two or more days can be extremely productive and have a major impact on that development community. each person who participates in these collaborative meetings brings their own complement of technical, scientific and social strengths. these developer meetings allow for cross-pollination of skills between separated silos of expertise. these events can be organised around any topic with a large enough user base. they combine individualised training, social networking and technical contributions and help pave the way toward new scientific discoveries. results include real software solutions, documentation, and the joint communication of milestones for future developments.

each event described in this paper has its own culture and organization. the japanese biohackathon events are the longest, at one week each, and this series is also the longest running and best-funded, with support for travel of international participants. it has already yielded several journal publications. the debian med sprints are noteworthy for bringing together "upstream" developers  and "downstream" scientific users and developers , along with core and prospective debian med members. this heterogeneous group allows for more efficient skill exchange and a wider array of topics. everybody can weigh in with their particular strength, while letting the rest of the group focus on their particular interests and strong points.

discussion
since open source software developers spread across the globe already collaborate by communicating online via distributed source-code repositories, mailing lists, chat and other means, the time and expense of travelling to meet up in person may seem like a waste. however, physical meetings bring an edge to productivity, including temporarily avoiding day-to-day workplace duties, and the opportunity to see software and infrastructure problems from outside of one's local needs. also, meeting in person temporarily solves the problems of cross-time-zone collaborations. this is particularly important for contributors in australasia communicating with europeans or americans, where live interactions like conference calls must be often scheduled outside normal office hours, and any conversation by email can take days. meeting physically also helps build interpersonal relationships and can motivate attendees to follow up on issues they might not tackle otherwise. most people feel more of a sense of connection and commitment to people they have worked with in person than to those they have never met. it fosters projects that in fact depend on the geophysical distribution of participants, e.g., for the opendataday , and the networking also has a career advantage  <cit> .

other frameworks exist to encourage interactions, such as the concept of a summer of code , combining remote collaborations with a summit at the end. many if not most of the contributors to the events we have discussed here also mentor for the google summers of code and find it complementary to the self-organised events - much like extra resources for the researchers' interest and, if attending the summit, an opportunity to look deeply beyond one's personal area of expertise  <cit> . the events described here focus on the science and easier access to technology in an intense way that is open to everyone . this underscores the sprints' direct effect on the activity of the projects, both in terms of the number of patches submitted and, on the social side, the number of emails distributed on the mailing list .

a considerable change observable with the advent of synthetic biology is that engineers and computer scientists are building and using tools for tasks that have in the past been performed manually by biologists, e.g., planning of cloning experiments. we need to learn to address and attract such neighbouring communities to co-develop and share open source infrastructure to avoid being crowded out by closed-source solutions. a critical mass of software solutions and users for the synthetic biology field has yet to emerge, and the interplay between open source and commercial entities is yet to be established. the bosc  <dig> codefest  <cit>  helped establish first contact between the bioinformatics and synthetic biology communities, and hopefully will lead to helpful interchange between the fields.

not only academic or research institutions use open source tools or frameworks. open source tools are widely used in commercial research and commercial service providers who build products and services around open source components. both of these types of companies have an interest in improving the quality of the open source software they use. hackathons and codefests offer an opportunity for these improvements to be made whilst simultaneously meeting with the original developers, learning from them, and giving them guidance as to future requirements.

the bosc codefest and the debian med sprint are more constrained as a two-day meeting than the week-long hackathon. as a consequence, there is less time for the participants to be trained or self-educated within the group, or to pursue larger projects within the meeting itself. here, the google summer of code, with its months-long individualised training, has an advantage. larger, more long-term programs of collaboration can be sustained where participants can make a significant commitment in availability, and also benefit from external funding and peer incentives to participate. the smaller events described in this paper require a smaller up-front commitment so that most prospective participants can find the time to attend, and are also run on a shoestring budget so a rich sponsor is not necessary.

the motivation for small companies to get involved with an open source hackathon or codefest is typically based on the expectation that the participation will have a positive effect on the perception of the companies' products and in anticipation of additional sales - whether they are taking part actively or simply sponsoring the event. large research corporations that use open source products internally may want to get involved only if the event will develop features and fix bugs that will improve the company's internal productivity, and hence save operational costs. a service or product provider that uses open source tools may only want to participate if the outcome is an improved tool or feature set that they can then build commercial offerings around for their own customers, or use to improve their own internal processes and reduce overheads. to attract greater participation from commercial partners, hackathons and codefests must therefore include a certain amount of applied research driven by the requirements of these partners, and be willing to guide their development efforts in a direction that will deliver commercial value. this may not resonate with participants from a pure academic research background where commercial requirements are a much lower priority, but it is essential to gain external sponsorship. for computational biology, the underlying infrastructure is mostly open source because of the historic freeness of the sequence data. on the applications side, however, e.g., for the assembly and optimisation of workflows, for which the assemblathon  <cit>  may stand representatively, or user-centric design  <cit> , the license of widely distributed tools is not of concern.

CONCLUSIONS
participation in a hackathon, codefest, or sprint can be an extremely rewarding experience for the participants and the greater community. these informal, interactive meetings have played an important historical role in the development of open source technologies and are now benefiting the bioinformatics community. at these events, developers of all ages and levels of experience interact with each other. besides the joint problem-solving work, these events can encourage new contributors to surface. hands-on training and exchange of experiences, actively and passively, remain core features of the events.

in closing, we can point to specific examples of software developments and bug fixes made during the developer meetings described, and in some cases publications that have resulted from these meetings. however, their true worth is less immediately tangible in the form of the community itself, new and strengthened collaborations, and the spread of ideas and best practices - both scientific and for software development.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all authors contributed to the preparation of the document and participated in at least one of the described events.

