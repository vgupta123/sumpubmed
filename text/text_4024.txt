BACKGROUND
digital atlases provide semantic and spatial information that can be used to link together rich collections of data from disparate sources  <cit> . the most common types are anatomic atlases that spatially delineate and semantically label the structures of a volumetrically imaged subject. these anatomic atlases can be used as templates for identifying regions of interest in non-delineated data sets, such as localizing gene expression in the brain as visualized by in situ hybridization  <cit> . atlases can also be used to unify implicitly associated data. for example, one data source may use an anatomical name for a location while another uses image coordinates. by aligning both data to a common atlas, correlations can be made. as the quality and amount of biological data continues to advance and grow, having the ability to search, reference, and compare this data with a researcher's own data is essential.

central to integrating and correlating the continually growing volumes of distributed and online data is the atlas analysis workflow. as shown in figure  <dig>  the atlas analysis workflow consists of three major steps:  searching and retrieving source data,  aligning the source data to the atlas, and  comparing and correlating the data in context of the atlas space. this process can be repeated multiple times as interesting or unexpected correlations spark new ideas and findings.

several challenges exist with the digital atlas workflow that make conducting the analysis a cumbersome and time-consuming process. first, each data source typically has a different search interface and result format which makes reconciling data difficult. users must use different interfaces, such as visiting separate web sites, and utilize different software tools to view and analyze the data. second, spatially aligning or registering image data to an atlas or to each other is a complex problem with many solutions. factors that influence what type of registration algorithms to use include image modality of the data, dimensionality of the source and template data , speed or time requirements, and accuracy, such as whole brain or structure accuracy  <cit> . making assumptions about any of these factors limits the generality and usefulness of the overall application. third, although visually comparing and contrasting the data is a natural and intuitive method of analysis, few computer applications can integrate image data, numerical data, annotations, ontological relationships, and atlas data in a meaningful manner.

to address these issues, this work presents the mousebirn atlasing toolkit  - a cross-platform, free open-source software tool designed to accelerate the timeline for integrating and correlating biological data. mbat empowers researchers to discover correlations among disconnected and disparate data by providing a unified environment for bringing together distributed reference resources, a user's image data, and biological atlases into the same spatial or semantic context. in a single application, mbat provides the ability to use a single query to search and retrieve data from multiple data sources, align image data using the user's preferred registration method, composite data from multiple sources in a common space, and link relevant information to the current view of the data or atlas. through its extensible tiered plug-in architecture, mbat allows researchers to customize all application components to quickly achieve personalized workflows.

related work
as shown in table  <dig>  related cross-platform, free open-source software include an atlas navigator, jatlasviewer  <cit> , and two medical imaging analysis tools with plug-in architectures, medical imaging processing analysis and visualization   <cit>  and slicer  <cit> .

comparison of cross-platform, free open-source software for search, registration, image comparison, atlas viewing, and extensibility features.

jatlasviewer is a lightweight java application that provides arbitrary section views of 3d image data, 3d surfaces of pre-segmented and labeled anatomy, and anatomical browsing. only a single data set can be loaded at a time so it lacks the ability to perform comparisons among data sets. it also lacks any search and registration features.

mipav and slicer are more mature, larger efforts to build a suite of tools for medical image analysis. both provide powerful visualization, registration, and analysis features. however, only slicer provides some limited labeling and search functionality. in the volume module, the label volumes can be overlaid on image volumes but only the label id can be interrogated; the corresponding label name and color are not supported. in the queryatlas module, label names and colors are displayed on 3d surfaces or sectional views, with links to several ontologies, but the query engine only supports literature sources. while mipav supports plug-ins, the types of plug-ins are limited to image processing algorithms, file format readers, and rendering methods. slicer's plug-ins, called modules, offer greater flexibility as the modules can be implemented as shared libraries or leverage existing legacy executables. to simplify the development, slicer also provides methods to auto-generate guis for the plug-ins. however, slicer's architecture is based on manipulating objects in a global 3d scene so adding non-graphical objects, such as search objects, to slicer is cumbersome.

what sets our work apart from the others are three key features. first, our framework has the ability to integrate multiple data types from multiple, disparate sources. gathering and searching for data must be performed external to the other applications. second, our framework adopts the plug-in architecture from top to bottom and is designed for interoperability. parts of other applications can be integrated into our application and vice versa, parts of our application can be integrated into other applications. third, novel digital atlasing features are developed, such as supporting multiple label sets, dynamic selection and grouping of labels, and synchronized display of ontological data.

implementation
the core philosophy behind our framework design is to provide large-scale extensibility. since the details of each analysis step varies from field to field and by investigator, our goal is to ensure that each component and subcomponent in the atlas analysis workflow can be extended or customized without major rewriting of the core application components. to achieve this goal, a modular and tiered plug-in architecture is adopted and employed. in this paper, we present specific plug-in examples that illustrate the flexibility and scalability of our design. the current mbat plug-ins focus on integrating the large and rich collections of mouse genomic and neuro-anatomical data that are being produced to study and understand various neurological disorders  <cit> . for cross-platform development, the framework is developed using the java programming language.

tiered plug-in core architecture
the design of the core architecture is built around customizable workspace plug-ins. each workspace typically is used for a particular task, such as registering or viewing data, but in general, can be used for any combination of tasks. the functionality and design of these workspaces are entirely driven by the end user's goals. to achieve this flexibility, a tiered, plug-in architecture is adopted. the workspace or first-tier plug-ins can provide the entire functionality or can be further customized using second-tier or tool plug-ins. the benefits of a plug-in architecture are  subcomponents can be added or extended without making major changes to the main system and  it enforces a high degree of modularity in the design, leading to a highly scalable architecture. as evidenced by the use of imagej  <cit> , an image processing tool that heavily uses plug-ins, this modularity allows users to adapt and tailor the core functionality to meet their own specific needs. this has led to a large scientific community of imagej users who share, exchange, and extend each other's plug-ins  <cit> . the core framework was tailored into a neuroinformatics application, mbat, that is built around the workspaces of search, registration, and comparison viewing. the overall architecture for the mbat workspaces, shown in figure  <dig>  is described below.

search workspace
the primary goal of the search workspace is to provide a federated search where a single query is used to search across multiple data sources, making the underlying heterogeneous data services transparent to the user. the major challenges addressed by this work include integrating all the non-standardized services that each data source provides and displaying the results in an intuitive manner that allows for easy browsing and selection for further analysis. for the federated search, the query process is divided into three tasks:  specifying the search parameters,  executing the query on each data source, and  displaying the query results for browsing. the core search engine manages the first and last tasks; the task of executing the query is delegated to data source plug-ins. this design gives the plug-ins full control over the query logic since executing the actual query depends on the underlying database system and will vary from data source to data source. moreover, this modular data source plug-in design provides great flexibility since it imposes no restrictions on the data sources or data access method. the underlying data source can use any database system, any query language, and it can be local or remote. in this way, our search engine can connect to existing data sources without any modifications to the source as well include new data sources as they become available. each data source can use any data access method, such as through web services, direct connection to databases, file systems, or remote streaming servers. through extension of rendering layer plug-ins, custom plug-ins can act as middleware to deliver the data from the source location into mbat.

registration workspace
the aim of the registration workspace is to allow users to align their data to a template such as an atlas, or to each other so meaningful comparison can then be made. however, because there are many registration algorithms for different purposes with different strengths and weaknesses, it is difficult to provide a universal solution that works well for all cases. to address this issue, the design of the registration workspace is built around registration algorithm plug-ins that can be selected by the user. in this way, researchers can choose or add the registration algorithm that best suits their needs.

because the user interface and parameter requirements vary greatly from algorithm to algorithm, the core registration api only provides the interface for specifying the input source and template objects and saving of the aligned result object to the cart. invoking the registration algorithm and providing the user interface to specify the user-defined parameters are delegated to the plug-in since each algorithm typically needs a different gui and set of required arguments. although the core registration api only provides input and output functionality, this design provides the greatest flexibility as it imposes no restrictions on the registration algorithm. for example, the algorithm can be written in java or leverage the java native interface  to execute native code. the registration algorithm can run locally or be executed on a remote machine. the system can launch the registration algorithm directly or launch a larger workflow that includes other steps, such as pre-processing the data. the registration plug-in can provide basic or complex user interfaces, customized either for the algorithm parameters or target users.

comparison viewer workspace
to allow users the ability to easily compare and contrast data, the comparison viewer workspace is built around compositing layers of data. this compositing framework allows the user to easily juxtapose or overlay multiple datasets together for comparison. the major visualization challenge is integrating image data, numerical data, annotations, ontological relationships, and atlas data in a meaningful manner. our approach is centered around a flexible, context-driven image viewer that synchronizes the relevant and associated informatics data to the current view of the image or atlas data. for example, to reference data against a digital atlas, the system will dynamically display the associated anatomical labels for the region of interest, highlight the current relationships in an ontology graph display, and list the annotations for the current data layer.

the tool plug-ins for the comparison viewer workspace are divided into three categories - layer rendering, graph viewer, and analysis plug-ins. for the rendering and compositing, the functionality is divided between  a core graphics engine and  the layer rendering plug-ins. the core graphics engine handles adding, removing, compositing, linking, and transforming the layers, such as pan, rotate, and scaling. the rendering plug-ins handle loading of data, rendering the data content into the layer, and provide a gui for controlling and adjusting the properties of the layer. by delegating the rendering of the data to the plug-in, customized display of any data type can be achieved in this modular design. this provides great flexibility in the manner in which image data is loaded into the layer. for example, out-of-core algorithms can be used to load data that is too large to fit into main memory or image servers can be leveraged to process data remotely and stream the image data over the network. the one restriction that is imposed is the rendering plug-in must use opengl to render the data. opengl and jogl  <cit>  were chosen since they are mature, cross-platform graphics libraries that leverage modern graphics hardware for increased performance.

the graph viewer plug-ins control how ontological data is displayed in conjunction with the layer rendering plug-ins. the display of the ontological data is divided into two tasks:  loading and parsing the ontology files and  rendering the graph visualization. the core graph viewer api provides methods to load and traverse the ontology hierarchy and supports the ilf mbat hierarchy format and the open biomedical ontologies  format  <cit> . the rendering of the ontology is delegated to the graph viewer plug-ins to allow customization of the graph visualization. currently, the graph viewer plug-ins are used to display the ontology for an associated atlas. each graph viewer plug-in is also responsible for receiving and sending synchronized graph events from and to the atlas layer in the comparison viewer. the graph events specify actions such as atlas structure selection and removal, structure hierarchy expansion and collapse, and sending the currently selected structure names to the search workspace.

the analysis plug-ins perform image processing tasks or statistical analysis on the data. to leverage the wealth of existing image analysis plug-ins for imagej, the comparison viewer framework has been designed to integrate with the imagej framework. as long as the active layer rendering plug-in stores or can convert the underlying image data to the basic imagej image structure, the imagej plug-ins can be applied. the mbat comparison viewer workspace loads and runs standard imagej plug-ins.

RESULTS
mbat was developed as part of the biomedical informatics research network   <cit> , a project focused on building an infrastructure for collaborative environments. the mousebirn testbed group consists of six partner institutions at duke university, drexel university, university of tennessee, memphis, california institue of technology, university of california, san diego, and university of california, los angeles. ucla loni developed the core architecture and led the collaborative plug-in development among the other partners. in this section, a sample mbat workflow is first presented to show the workspace interaction followed by a more detailed description of the plug-ins that were developed for each workspace.

use case
consider a researcher who has collected a series of slices for an experiment for parkinson's disease in relation to the lipocalin- <dig> gene  using a mouse model. during the analysis, the researcher finds an unusual formation in a part of the brain that he/she has difficultly identifying. to help identify the region of interest, the researcher would like to compare and contrast the collected data with several mice reference atlases, such as neuroterrain  <cit> , minimum deformation  <cit> , and waxholm  <cit>  atlases. once the region of interest has been identified, the researcher would then like to search for other image data that show expression patterns for gene lcn <dig>  were collected to study parkinson's disease, and contain the region of interest. as shown in figure  <dig>  the mbat workflow to complete this use case would be as follows:

 <dig>  using the registration workspace, the researcher aligns the collected image data to selected reference atlases to help identify the anatomic region of interest. the built-in registration methods include 2d to 2d or 2d to 3d alignment that use linear and non-linear algorithms.

 <dig>  using the comparison viewer workspace, the researcher can then overlay the aligned, collected image data with the reference atlases for comparison. the collected data can be compared to the reference atlases for differences around the unusual area. also, the delineations for each individual atlas can be dynamically shown or hidden to help the researcher pinpoint the location of the unusual formation. once candidate locations or anatomical structures, such as the putamen, have been identified, the researcher can initiate a search for these terms directly from the comparison viewer workspace.

 <dig>  using the search workspace, the researcher chooses which online data sources to search, such as gene expression images from aba and gensat. the researcher can also refine the search criteria  by adding more terms, such as a gene name  or the name of the disease . once the search results are returned, the researcher previews all the results from each of the data sources, and selects several for comparison.

 <dig>  returning back to the comparison viewer workspace, the researcher can automatically pull in the selected search results  to compare and contrast with the original collected data. this online image data can be juxtaposed or overlaid with the collected data and reference atlases. alternatively, the online image data can be registered to the collected data or reference atlases prior to being loaded into the comparison viewer workspace. as new hypotheses are sparked by comparing and associating data from multiple sources, this process of gathering, aligning, and correlating data can be repeated.

search workspace plug-ins
for the mbat search workspace, two types of search plug-ins are defined, data and literature source plug-ins. the data source plug-ins access genomic and neuro-imaging data while the literature source plug-ins access publication records. as shown in tables  <dig> and  <dig>  the mousebirn programmers have, to date, developed  <dig> data source and  <dig> literature source plug-ins that access a variety of data - ranging from microarray probe data to gene expression and phenotype data to 2d and 3d image data. many of the plug-ins connect to established and pre-existing data sources, such as the allen brain atlas  and the gene expression nervous system atlas , without having to modify the original data source. using the federated search engine, a user specifies the parameters for the single query and selects which data and literature sources will be searched. examples of the query term interface and the results table are shown in figure  <dig> 

summary of the search workspace data source plug-ins, listing the connection method to the underlying data source, the types of search methods supported, and the data types of the returned results.

summary of the search workspace literature plug-ins, listing the access type. all literature plug-ins use keyword search and the results are opened by the user's default web browser.

to allow for easy browsing and selection of the results, the search engine displays the returned values in tables, grouped by data source and data type, with each column displaying an annotation. since the annotations for the same data type may vary across each data source, the data source plug-ins are allowed to return any number and type of annotations, such as plain text, numerical data, and urls. to facilitate the browsing of the results, each annotation column can be dynamically shown or hidden, the results can be sorted by any annotation column, the annotation columns can be arbitrarily reordered, and the data source and data type groupings can be expanded or collapsed for easier viewing. for workspace interoperability, any of the query results can be placed into the cart so other workspaces have access to it. for example, a user can search for data in the search workspace, place the results into the cart, and then automatically download the data to analyze it in the comparison viewer workspace.

registration workspace plug-ins
for the mbat registration workspace, as shown in table  <dig>  there are currently two plug-ins - one that uses a local java library and one that executes on a remote server. the landmark warp plug-in is a landmark based registration algorithm that uses the loni landmark warp tools  <cit>  to perform rigid body, affine, and non-linear spline based alignment. the air pipeline plug-in is a workflow designed at the caltech mri center at the beckman institute for aligning sets of mouse image volumes and contains three steps:  creating templates,  register pre-injection, and  register post-injection. it leverages the loni pipeline  <cit>  and the automated image registration  software  <cit>  to batch and execute these workflows on a remote loni pipeline server. an example of the registration workspace and loni landmark warp plug-in is shown in figure  <dig> 

summary of the registration workspace plug-ins, listing the type of algorithm used and the execution type.

comparison viewer plug-ins
as shown in table  <dig>  a mix of plug-ins for a variety of data types and uses were developed for the comparison viewer workspace. the core layer rendering plug-ins for basic data types are shown in figure 6a and include the plug-ins for 2d images, 3d image volumes, and 3d atlases. the 2d image plug-in reads common 2d image formats and uses the dlgraphics mid-level library to manage and render individual or series of 2d images. the 3d volume plug-in officially reads analyze and nifti file formats and extends the 2d image plug-in by streaming the orthogonal slice data from memory as virtual image series. orthogonal views of the major axes of the 3d volume can be interactively navigated using our heads-up-display controls. the 3d atlas plug-in extends the 3d volume plug-in to add overlaying and streaming of the label volume from memory. the 3d atlas plug-in is described in more detail below.

summary of the layer rendering plug-ins for the comparison viewer workspace, listing the file types and cart objects that can be opened and if adding a layer is supported.

the large volume, neuroterrain, and mouse brain library  plug-ins all extend the 3d volume plug-in to load custom data provided by the mousebirn collaborators. the large volume plug-in handles 3d image data that is too large to fit into main memory by using an on-demand streaming technique that reads the image data directly from files on disk. the large volume atlas plug-in uses the same out-of-core technique to extend the 3d atlas plug-in for atlases that cannot fit into main memory. the neuroterrain and mbl plug-ins leverage the neuroterrain client-server atlas system  <cit>  to add streaming of image data through a remote image server.

as shown in table  <dig>  each of these rendering plug-ins can be overlaid and juxtaposed in the virtual canvas. every plug-in layer can be panned, rotated, scaled, and zoomed. a user can also adjust each layer's opacity, contrast, and brightness through the user interface widgets that control the properties of the layer, as shown in the left of figure 6a. linking layers is another key feature where rendering layers are synchronized together, with slave layers mirroring the actions applied to the master layer. linking layers makes it easier to match views for comparison. another tool to help user's compare data is the dual-view mode which helps organize the layers for easier juxtaposition of data, as shown in figure 6b. each rendering plug-in can also define custom actions for interrogating the layer. for example, for the 3d volume and atlas plug-ins, right-clicking on the image allows the user to automatically send the current image location or underlying label to the search workspace for querying.

summary of the features for the core layer rendering plug-ins of 2d images, 2d image series, 3d volumes, and 3d atlases.

as shown in table  <dig>  two graph viewer plug-ins were developed that support the ilf format. the ilf format currently supports hierarchical relationships with single parents. the graph viewer plug-ins are synchronized with the 3d atlas plug-in to highlight the selected labels. both graph viewer plug-ins also provide search features that automatically highlight labels based on matching text patterns in either the label abbreviation or full name.

summary of the graph viewer plug-ins used in the comparison viewer workspace, listing the format supported, layout of the graph, and if the nodes are searchable.

atlas plug-in
the 3d atlas plug-in requires a label 3d volume that labels each voxel with a label id and a label hierarchy file that defines the label id to text description and color lookup table. using the label location and meta-data, the 3d atlas plug-in can overlay the colored regions with user controlled transparency over a regular reference 3d volume, such as mr data, and display the label description, as shown in figures 6b and  <dig> 

unique to our atlas plug-in is the ability to have multiple label files for a given atlas. this allows the user to define different labels for the same location for different contexts. for example, a location may have a structure name in an anatomic context but a biological purpose in a functional context. hovering the mouse pointer over a valid label region displays the labels for that given location. if multiple labels are present, all labels for that location are displayed, with the active label set displayed first, as shown in figure 7b. other interactive features include dynamic selection and display of the segmented atlas label regions. individual label or groups of regions can be enabled and disabled by simply double-clicking the area with the mouse.

another novel informatics feature of the 3d atlas plug-in is the synchronization between the visual atlas and the ontological relationships displayed in the graph viewer. whenever a label region is selected in the rendering layer of the 3d atlas plug-in, the corresponding node in the ontology is highlighted by the graph viewer plug-in. for example, in figure 7b, the dorsomedial nucleus of the hypothalamus is one of the structures selected in the 3d atlas plug-in so consequently the dmh node in the graph viewer is highlighted. the synchronization is bi-directional, so selecting any nodes in the graph viewer will also highlight them in the 3d atlas rendering plug-in. for example, selecting a parent node, such as the forebrain, will automatically select all the sub-structures in the ontology graph, such as the amygdala, basal ganglia, and cerebral cortex, and highlight them in the comparison viewer. in this way, the researcher can easily use a physical location to lookup labels and vice versa, use ontological relationships to locate the label position in the atlas during the discovery process.

plug-in framework
the mbat tiered plug-in architecture uses the java plugin framework   <cit>  to manage the plug-ins. jpf is an open source library designed to provide a standard plug-in infrastructure for java projects. it includes a runtime engine that dynamically discovers, instantiates, and runs plug-ins. jpf also supports hot deployable plug-ins that can be started and stopped at runtime without restarting the entire system. the design and implementation of jpf are inspired and influenced, but not derived, from the original, proprietary eclipse plug-in framework. jpf decouples the plug-in infrastructure from the main eclipse infrastructure into a standalone library. jpf was chosen since it is extremely lightweight, has a low learning curve, and is extremely flexible and extensible.

the eclipse plug-in framework has since adopted the osgi specification  <cit> , a standard developed by a world wide consortium of technology vendors to facilitate the modularization of java software components and assure the interoperability among applications. while the syntax and configuration of jpf and osgi are incompatible, the semantics are very similar. hence, for plug-ins designed modularly, the conversion from jpf to osgi is straight-forward and does not require major code rewriting. future versions of mbat will benefit from switching plug-in frameworks as it will make it immediately interoperable with osgi applications, such as the chemo- and bioinformatics plug-ins found in bioclipse  <cit> .

CONCLUSIONS
we have presented a tiered, plug-in architecture that has been tailored to a neuroinformatics and genomics application, mbat. mbat employs the search, registration, and comparison viewer workspaces to accelerate the tasks that compromise the digital atlas analysis workflow - gathering, alignment, and visualization of disparate data. we have shown how data widely available through distributed online resources can be integrated using the federated search, registration, compositing, and atlasing tools of mbat. through the plug-ins, we have shown how functionality can be extended and how parts of existing applications can be leveraged and integrated into mbat to create personalized workflows. the broad range of plug-in types also shows the versatility and flexibility of the tiered, plug-in architecture.

through the 3d atlas plug-in, we have introduced novel digital atlas analysis tools that allow multiple categorizations of label regions, dynamic selection and grouping of labels, and context-specific display of informatics data through the synchronization of the rendering layer and graph viewer plug-ins. future work includes extending the comparison viewer workspace to include data that has been semantically registered to an atlas, extending the graph viewer plug-ins to support more ontological relationship types, extending the search engine to allow selection of query terms that are specific to a particular data source, and extending the registration workspace to allow real-time comparison of the results of different algorithms. with the continued collaborative development of mbat workspaces and tool plug-ins, we believe this can lead to a self-sustaining and rich library of digital atlasing tools.

availability and requirements
• project name: mbat

• project home page: http://mbat.loni.ucla.edu

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> +, opengl  <dig> +

• license: birn license

list of abbreviations used
api: application programming interface; birn: biomedical informatics research network; mbat: mousebirn atlasing toolkit.

authors' contributions
dl is the architect of the core framework, designed the workspaces, and wrote this manuscript. dl, qn, ns, sa designed and implemented the workspace cores and the majority of the plug-ins. sr, the program manager of the mousebirn testbed, and at, the principle investigator, provided the vision for this project. all authors read and approved the final manuscript.

