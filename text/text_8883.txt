BACKGROUND
the availability of dna microarrays has made it possible to monitor the transcript levels of every mrna in an entire genome simultaneously. this has allowed researchers to monitor global changes in gene expression that occur in response to a cellular perturbation or the gene expression profiles characteristic of a particular state, such as a tissue type or a disease state. a major goal of integrative genomics is to interpret these gene expression patterns in order to define underlying signaling networks.

as the bulk of publicly available coexpression data has grown, a variety of successful techniques have been proposed for its analysis. in broad terms, these include normalization and meta-analysis  <cit> , detection of differential expression  <cit> , several forms of clustering  <cit> , and many others. however, each time a new microarray data set is produced, it is ultimately in the hands of the generating biologist to inspect the data and to determine what biological insights it might provide. this initial inspection is often aided by classical clustering algorithms such as k-means  <cit>  or hierarchical clustering  <cit> , both of which are intended to present an intuitive, accessible view of genes whose coexpression might indicate similar regulation or biological functionality.

while these traditional algorithms can serve as a convenient first tool for microarray analysis, they can also be confounded by certain characteristics of biological data. k-means clustering, for example, requires prior knowledge of the number of clusters to find, and it will find that number of clusters even in random data  <cit> . similarly, hierarchical clustering is incapable of leaving any genes unclustered, and its results can be driven by strong features in a small number of initially clustered genes  <cit> . many more recent clustering algorithms have been proposed to overcome these limitations, with aerie  <cit> , cast  <cit> , click  <cit> , genclust  <cit> , quality threshold clustering   <cit> , and samba  <cit>  representing a small cross-section of the tools available for the purpose of coexpression-based gene clustering.

these newer algorithms have overcome the drawbacks of traditional clustering in a number of ways. samba, for example, represents a family of biclustering algorithms capable of excluding conditions as well as genes from a cluster; click and qtc allow genes to remain unclustered, and aerie and other fuzzy clustering algorithms permit genes to inhabit multiple clusters probabilistically. however, it is unclear how these algorithms perform with respect to their original purpose: providing biologists with a view of coexpressed biological processes within microarray data sets. given a new data set containing a collection of active biological pathways or functions, do these clustering algorithms accurately group functionally related genes?

we report below a clustering algorithm based on shared nearest neighbors called nearest neighbor networks  intended to serve as a useful tool for biologists when discovering functional activity in coexpression data sets. although nnn shares some features  with existing graph-theoretic clustering techniques  <cit> , it is unique in its focus on groups of genes sharing a mutual nearest neighborhood  rather than on groups of genes that are tightly correlated in some absolute measure, and nnn goes beyond simple clique finding to produce complex, biologically relevant clusters. we present the results of a functional evaluation  <cit>  demonstrating nnn's ability to retrieve precise clusters that represent the diverse biological activity present in six qualitatively different microarray data sets. this evaluation also examines the behavior of the eight clustering algorithms discussed above to determine their accuracy in producing related gene clusters from many types of coexpression data and within many biological processes. additionally, we compare the behavior of these clustering algorithms when presented with random data and when extracting clusters from integrated data . we believe that nnn represents an intuitive, simple tool providing biologists with a way to rapidly obtain and visualize a comprehensive collection of the processes coexpressed in a microarray data set.

implementation
nnn algorithm
in designing a clustering algorithm that would allow us to make highly coherent clusters, we were inspired by the approach taken by stuart and colleagues to define the homologues of a specific gene in multiple species  <cit> . in stuart et al, a metagene was defined as a set of genes across multiple organisms whose protein sequences are one another's best reciprocal blast hits. these metagenes were then grouped into an interaction network  using an aggregate similarity score measuring correlation under many diverse microarray conditions. in contrast, the nnn clustering algorithm begins with an interaction network defined by a standard similarity measure  and finds clusters by extracting small cliques of mutual nearest neighbors . we then group together cliques that overlap to form larger clusters of genes.

nnn receives as input a set of genes of size m, a similarity measure d, a clique size g, and a neighborhood size n. its output is an assignment of each gene to zero or more clusters.

for each gene gi, the n nearest neighbors n = {gi, <dig>  ..., gi, n} are calculated based on the similarity measure d. if genes are considered to be vertices in a graph, this results in a directed graph in which each node is of out degree n . an undirected graph is then constructed by connecting any two genes gi and gj such that gi ∈ n and gj ∈ n, i.e. the two genes are mutual nearest neighbors . all cliques  of size g within this graph are identified, and overlapping cliques are merged to produce preliminary networks representing potential clusters of related genes .

a small number of genes in any genome often serve as interaction hubs connecting a large collection of minimally related partners  <cit> , and these genes can cause nnn to merge cliques to an undesirable extent. to address this issue, nnn uses a well-established algorithm to remove cut-vertices in its preliminary networks  <cit> . a cut-vertex is a node whose removal results in an additional disconnected component in a graph; in our preliminary networks, such nodes represent genes connecting clusters which share no other interactions and are thus likely to be functionally irrelevant interaction hubs. each of our preliminary networks is divided at its cut-vertices into multiple final networks, and the cut-vertices are included in each of the two networks which they induce . finally, to further ensure that cliques are not merged undesirably, any network  containing more than half of the input genes is removed.

nnn runtimes are generally below five minutes with reasonable parameter settings on a modern computer; with g =  <dig> and n =  <dig>  the hughes data set  is fully clustered in approximately three minutes running in a single thread on a  <dig> ghz core  <dig> duo processor. clustering with a worst-case g =  <dig> and n =  <dig> takes approximately  <dig>  minutes, and the lower bound g =  <dig> and n =  <dig> runs in under  <dig>  minutes. in the latter case, most of this time is spent calculating gene pair correlations. see supplementary figure  <dig> for more information on nnn runtimes.

microarray data processing
to evaluate the abilities of nnn and other clustering algorithms to accurately cluster functionally related genes across a range of biological processes, we ran them on six saccharomyces cerevisiae microarray data sets  <cit> . the data sets range from seven to  <dig> conditions, include agilent, affymetrix, and custom cdna arrays, include both time course and isolated measurements, and span a wide variety of biological perturbations and conditions.

in all cases save haugen et al , the data sets were filtered to remove genes with more than 50% missing data. any remaining missing values were imputed using knnimpute  <cit>  with k =  <dig>  and replicated genes were averaged to ensure that each data set contained at most one expression vector per open reading frame. for single channel data, expression values less than two were considered to be missing, and all single channel values were logarithmically transformed as a final preprocessing step. the two replicates in brem et al were averaged together.

in order to construct a merged data set consisting of conditions from all six individual microarray data sets, a data matrix was constructed containing each gene present in any of the data sets. genes were assigned missing values for data sets in which they were not present. this merged data matrix was filtered to remove genes missing data for 50% or more of the resulting  <dig> conditions, and any remaining missing values were imputed using knnimpute with k =  <dig>  this left  <dig> genes, each represented by an expression vector of length  <dig> containing no missing values.

random data generation
randomized synthetic data was generated to characterize the behavior of nnn and other clustering algorithms when presented with data containing clusters present only by chance. two sets of randomized data were generated, both containing  <dig> "genes" and  <dig> conditions. in the uniform case, each data value was drawn uniformly from the range . in the normally distributed data sets, each value was drawn from n. five data sets of each type were generated and used for the evaluations discussed below.

evaluation methods
in order to determine the accuracy and coverage of the functional relationships predicted by these clustering methods, we employed an evaluation method similar to that described in  <cit> . specifically, we used the same  <dig> functions drawn from the gene ontology  <cit>  as sets of "known" related genes; genes coannotated below these terms were considered to be functionally related. to generate negative examples, any gene pairs not coannotated below some go term including at least 10% of the s. cerevisiae genome  were considered to be unrelated. this resulted in an answer set of  <dig> related and  <dig> unrelated pairs.

each clustering method was evaluated by considering any gene pair sharing a cluster to be related and any gene pair clustered separately to be unrelated; unclustered genes  were neither related nor unrelated. this process transforms any clustering result into a set of related and unrelated gene pairs from which we calculated precision, recall, and/or area under an roc curve  relative to the answer set. when performing per-biological function evaluations, these measures were calculated over subsets of the global answer set relevant to each function of interest; specifically, a gene pair was considered relevant to some function if i) it represented a positive relationship and both genes were included in the function or ii) it represented a negative relationship and one gene was included in the function  <cit> . all aucs were calculated analytically using the wilcoxon rank sum formula  <cit> .

evaluation parameters
where possible, we evaluated each clustering algorithm over a range of parameters, e.g. k-means for values of k ranging from two to  <dig>  by recording the most restrictive parameter setting at which any gene pair clustered together, we were able to generate full precision/recall curves for most clustering methods. in cases where this was not possible, a single clustering was generated per data set, resulting in a point rather than a curve . all applicable clustering algorithms used pearson correlation as a similarity measure.

nearest neighbor networks was evaluated using our own java implementation with the neighborhood size parameter n ranging from one to  <dig> in increments of three. the maximum neighborhood size used with the concatenated data set for the per-function evaluation was increased to  <dig> in order to provide coverage of a greater number of gene ontology terms. in all functional evaluations, the clique size g was fixed at five. the effects of varying g can be seen in supplementary figure  <dig>  with larger values slightly increasing precision while becoming more computationally expensive .

the k-means, click, and samba algorithms were evaluated using the implementation provided by the expander tool  <cit> . for k-means, k was varied from two to  <dig> by increments of two. the click and samba algorithms were run with the default parameters provided by expander, resulting in a single clustering. the predicted cluster confidences produced by samba were used in lieu of a parameter setting to determine cluster specificity, with a higher confidence indicating a more specific cluster.

tigr mev  <cit>  was used to execute the cast algorithm, with the threshold parameter varied from  <dig>  to  <dig>  by increments of  <dig> . our own c++ implementation of quality threshold clustering was used with a minimum cluster size of five and diameters ranging from  <dig>  to  <dig>  by increments of  <dig> . qtc was unable to evaluate the concatenated data set due to its reliance on the computationally intensive jackknife distance measure  <cit> . our own implementation of pearson correlation was used as a representation of hierarchical clustering, with the raw pairwise correlation value itself behaving as a parameter over which precision and recall were calculated.

implementations of genclust and aerie were provided by  <cit>  and  <cit> , respectively. genclust was run for  <dig> iterations with cluster counts k ranging from two to  <dig> by increments of two. genclust failed to produce any output for the hughes or concatenated data sets, apparently due to their high condition counts. aerie was executed with k ranging from  <dig> to  <dig> by increments of two, as it failed to produce results for any k below  <dig>  aerie would not operate on the primig data set regardless of parameter settings, and produced output for the haugen data set only for k up to  <dig>  since aerie's k does not correspond to a final cluster count, each gene was assigned a vector of centroid distances corresponding to different initial ks, and gene pair similarities were calculated as correlations between these vectors.

RESULTS
as shown below, nnn succeeds in producing small, precise clusters from coexpression data, and these clusters generally span a wider variety of biological processes than those produced by the other clustering algorithms evaluated. while nnn's recall is lower than that of clustering algorithms in which all genes are always clustered, the capability to leave genes unclustered allows nnn to present an analyst with results consisting of only the high precision results of biological interest. this is evidenced, for example, in nnn's behavior when run on random data, which is often left unclustered . furthermore, as described below, nnn produces clusters with substantial functional diversity; particularly on larger data sets, nnn detects activity in processes such as conjugation and phosphorus metabolism not captured by other clustering algorithms.

summary statistics detailing nearest neighbor networks clusters formed from the data sets employed in this study, from their concatenation, and from two synthetic random data sets using default parameters . results from other clustering algorithms with appropriate output formats  have been included, also utilizing default parameter settings provided by the algorithms' implementations. random values are shown with standard deviations over five different seeds.

nearest neighbor networks
nnn is intended to be an accessible and convenient tool for rapidly producing functionally coherent clusters from coexpression data, and visualization is therefore an important aspect of its results. figure  <dig> demonstrates a sample of the default nnn output format as visualized by java treeview  <cit> . here, each colored subtree represents a cluster found by nnn; these have been internally hierarchically clustered using standard correlation and average linkage for visual coherence, and the clusters centroids have in turn been clustered to produce a full tree. our nnn implementation also provides a tabular output format assigning genes to numbered clusters for further computational processing.

global evaluation of clustering algorithms
a global evaluation of nnn and eight other clustering algorithms  on each of the six microarray data sets appears in figure  <dig>  as recommended in  <cit> , we have excluded the gene ontology term ribosome biogenesis and assembly during these evaluations so as not to bias the outcome towards this function. myers et al discusses the problems raised in coexpression analysis by ribosomal genes, in particular their tendency to correlate so strongly even across conditions unrelated to ribosomal functions that they can obscure other biological activity. especially in data sets eliciting strong stress responses , this has a substantial impact on many of the clustering methods, accounting for a portion of their low performance and indicating that they may be clustering more easily discovered ribosomal genes at the expense of genes coexpressed for other biological reasons. similarly, supplementary figure  <dig> details performance when gene pairs with high sequence similarity are also removed, which has a negligible impact on the evaluation.

although no one clustering algorithm is appropriate for every situation, nearest neighbor networks demonstrates a clear advantage in precision in many of these data sets. in particular, the gasch, haugen, and spellman data sets are perhaps best analyzed by nnn, demonstrating a robustness to functional bias  <cit> , low condition count, and periodicity, respectively. nnn performs approximately equivalently to qtc and pearson correlation on the brem data set, and the aerie, cast, and samba algorithms fall slightly beneath these due mainly to precision issues at low recall. click is difficult to evaluate in this context due to its insensitivity to homogeneity parameter changes, leaving no way to trade off between precision and sensitivity. thus, in a variety of contexts, nnn is best able to extract functionally relevant clusters from coexpression data with high precision.

nnn falls slightly short of qtc and, to a lesser extent, pearson correlation in the primig data set, and qtc and samba are both strong performers on the hughes data. this latter effect might be attributable to the unordered nature of the hughes data  from which samba is able to bicluster correlated conditions as well as genes, and the large condition count likely benefits both samba and qtc. nnn's performance in the high precision/low recall region of the primig data set is impaired by the fact that the gene ontology annotates matalpha <dig> and hmlalpha under the development term, ste <dig> under the protein processing term, and ste <dig> and mf <dig> under the reproduction term. this results in our answer set considering their pairwise combinations  to be unrelated, while nnn predicts them to be tightly clustered together.

while nnn is never more than slightly below the best performing algorithms, certain specific issues with other methods become apparent from this type of functional analysis. for example, samba has some difficulty with the extremely small haugen data set  and the periodic spellman cell cycle data .

note that the default parameters may not be appropriate for all analyses; they are used here for comparison purposes. for example, more clusters can be obtained from the haugen or concatenated data sets  by increasing n. the global evaluation above and functional evaluations below cover a wide range of parameter settings for all clustering methods and show results largely independent of specific parameter values.

behavior on random data
it is of interest to note that only nearest neighbor networks, samba, and, in one case, cast succeed in excluding randomized data from their clustering output. samba achieves this by computing the statistical significance of bicluster weights and retaining only those unlikely to occur by chance  <cit> . nnn instead takes advantage of the fact that random data of this form tends to over-cluster, i.e. for an appropriate neighborhood size, all or nearly all genes cluster together. since substantially overlarge clusters are eliminated by nnn, this results in the removal of randomized data from the functional clusters provided to the user.

behavior on concatenated data
only nnn and pearson correlation succeed in extracting functional relationships from the concatenated data sets, with nnn achieving somewhat better recall. as discussed in  <cit> , algorithms relying solely on correlation measured over a long expression vector can be easily misled. this can be caused by differences in normalization between the data sets making up the concatenated vector or by overriding "global" signals providing high correlation among only a small set of ubiquitously coexpressed genes . this has the effect of producing a small number of very highly correlated genes and relegating most of the correlations of functional interest to near-background levels. nnn avoids this problem by regarding both tight and diffuse clusters as equally valid, so long as cliques of mutual nearest neighbors are present.

for example, consider a group of ribosomal proteins coexpressed across all conditions with a mutual correlation of  <dig> . a group of meiotic genes only activated under specific circumstances might achieve a correlation of  <dig>  when tested across many conditions, since they will not usually be coregulated. if functionally unrelated genes tend to correlate at a level of  <dig> , the ribosomal cluster will be far easier to discover. however, nnn will not distinguish between absolute correlation levels so long as the genes in each group are within each others' nearest neighborhoods – which will likely be the case, since their mutual correlations remain above background. meta-analytic normalization techniques provide another solution to this problem; correlations combined by z-scoring substantially outperform raw correlations, and these z-scores are in turn outperformed by nnn clustering using z-scores in place of pearson correlation as input .

functional evaluation of clustering algorithms
a global evaluation such as the one described above does not reveal the functional diversity of the predicted interactions; even with ribosomal interactions removed, it is possible for an algorithm to perform well by accurately predicting only a few biological processes. a complementary functional evaluation demonstrates that nearest neighbor networks not only performs approximately as well or better than other clustering methods in global evaluations, it produces clusters which capture a wider array of biological functions. the heat map in figure  <dig> indicates auc scores for a variety of gene ontology terms within each data set. nnn succeeds in accurately predicting clusters for several terms poorly analyzed by other algorithms, particularly within the brem and gasch data sets .

the high predictive power of nearest neighbor networks in the brem data set likely reflects the unique nature of these microarray conditions. this data set includes gene expression profiles from the segregants of a cross between two different strains of yeast. as opposed to most data sets, in which haploid yeast of one mating type are profiled, segregants with both the mata and the matalpha phenotypes were present in the brem data, making it possible to identify other genes correlated with mating type. in addition, there is a polymorphism between the parental strains in the pheromone response g protein gpa <dig>  which is expected to result in differences in expression of effector genes among the segregants. further, an interaction between the mating-type locus mat and the pheromone response gene gpa <dig> has been detected  <cit> . the expression profiles of genes in the response to pheromone, sexual reproduction, and conjugation functions are consequently related in this data set and provide an opportunity for identifying high precision networks of genes with these gene ontology annotations.

nnn clusters tend to describe a broader array of biological processes than those of previous methods, and they often relate functional information that might otherwise remain undetected. figure  <dig> summarizes each clustering algorithm's maximum performance for each biological function across all six data sets. of the  <dig> functions evaluated in this manner,  <dig> are predicted at biologically uninformative levels  by previous methods. nnn improves  <dig> of these functions to an auc greater than  <dig>  . it further improves performance in an additional  <dig> functions also predicted well  by other algorithms. in the concatenated data, nnn improved the best auc above  <dig>  in  <dig> functions and was the best predictor of an additional  <dig> beyond those. as figure  <dig> indicates, nnn is generally able to recover information about more biological processes with higher precision than other clustering algorithms.

by considering the detailed functional breakdown in figure  <dig>  it is possible to comment on some qualitative aspects of this improvement. for example, there are several small groups of related go terms for which nnn provides a consistent improvement across two or more data sets. these include the mating response , metabolism of various nutrients  and cellular building blocks , and cellular respiration , among others. a unifying theme among these processes is that they are all carried out by relatively small sets of genes coexpressed only under specific conditions. only a small number of the brem segregants or hughes deletion mutants, for example, might disrupt the  <dig> genes annotated to sulfur metabolism, and despite being coordinately disrupted, this will only change the affected genes' pairwise similarities by a small amount. this small change is difficult to detect by clustering algorithms that consider absolute similarities, but because these genes have all moved mutually closer together, nnn is more likely to place them in each others' nearest neighborhoods despite the "diffuse" quality of those neighborhoods. particularly since specific functions such as these can represent the most biologically interesting effects of a microarray experiment, it is critical to provide a method such as nnn which will extract the most precise and functionally diverse clusters from a data set.

CONCLUSIONS
we present the nearest neighbor networks clustering algorithm as an efficient and convenient tool for extracting precise, functionally diverse clusters from coexpression data. nnn leaves less active genes unclustered and focuses on networks of potential interaction rather than on minimizing distances; this results in smaller clusters with a high degree of functional relationship as measured by known annotations in the gene ontology. particularly in complex data sets for organisms without comprehensive reference data readily available, nnn's more precise clusters should be beneficial in coexpression analysis . moreover, these clusters span a wider range of biological processes than those typically extracted from microarray data sets by other clustering algorithms. we hope that these features will allow nnn to serve as a useful method for biologists to obtain an overview of the genes and processes active in new data sets.

availability and requirements
project name: nearest neighbor networks

project home page: 

operating system: platform independent

programming language: java

requirements: java  <dig>  or greater

license: creative commons attribution  <dig> 

authors' contributions
ch, aif, jnl, nos, and hac contributed to the algorithm; ch, aif, and ss contributed to the implementation; ch, jnl, clm, klo, mah, ogt and hac contributed to the analysis of the clustering output; ch and hac wrote the paper with input from the other authors. all authors approved the final version.

