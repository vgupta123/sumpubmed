BACKGROUND
biclustering tasks over real-value matrices aim to discover sub-matrices  where a subset of rows exhibit a correlated pattern over a subset of columns. however, existing approaches impose the selection of specific patterns of correlation, which often leads to incomplete solutions. a simple yet powerful direction to accommodate more flexible patterns – order-preserving patterns – was introduced by ben-dor et al.  <cit> . a bicluster is order-preserving if there is a permutation of its columns under which the sequence of values in every row is strictly increasing. these biclusters capture biclusters with shifting and scaling patterns of gene expression, and are, additionally, critical to detect other meaningful profiles as the progression of a disease or cellular response in distinct stages. order-preserving biclustering can be applied to study gene expression  data  <cit> , genomic structural variations  <cit> , biological networks  <cit> , translational data  <cit> , chemical data  <cit> , nutritional data  <cit> , among others  <cit> . illustrating, subsets of genes that preserve the variation of expression levels for a subset of the conditions  can disclose functional modules of interest.

despite the relevance of the pioneer approach to find order-preserving biclusters   <cit>  and of its extensions  <cit> , this first class of greedy approaches suffers from two major drawbacks: 1) delivers approximative solutions without optimality guarantees; and 2) places restrictive constraints on the structure of the biclustering solutions . a second class of exhaustive approaches, u-clustering   <cit> , delivers solutions that overcome the flexibility issues of previous approaches. still, their adoption presents three challenges: 1) efficiency strongly deteriorates for matrices with more than  <dig> rows; 2) noisy values lead to the partition of large biclusters in multiple smaller biclusters since they search for perfect orderings; and 3) the use of non-condensed pattern representations leads to large biclustering solutions.

additionally, the existing order-preserving approaches impose a monotonic ordering of values that does not allow for symmetries  <cit> . however, in biological domains, such as transcriptional activity analysis, regulatory and co-regulatory mechanisms are strongly correlated and, consequently, an increase in expression for some genes is sometimes accompanied by a decrease in expression for other genes.

this work introduces a new set of order-preserving biclustering approaches, referred as bicspam , with principles to surpass the limitations of existing alternatives. bicspam promotes flexible and noise-tolerant searches, yet scalable, based on sequential patterns. bicspam contributions are three-fold: 

•  discovery of order-preserving biclusters with multiple levels of expressions and symmetries. delivery of flexible structures of biclusters that allow for an arbitrary number and positioning of biclusters ;

•  strategies for the discovery of biclusters with varying quality. noise relaxations are made available to guarantee noise-tolerant solutions , followed by filtering criteria to guarantee statistical significance of the discovered biclusters ;

•  scalable searches  based on new mining methods that seize efficiency gains from item-indexable properties of the biclustering task and from data partitioning principles.

two additional contributions are provided: 1) parameterizable selection of the degree of co-occurrences versus precedence relations observed in order-preserving biclusters; and 2) strategies to handle missing values according to a parameterizable expectation of their appearance in biclustering solutions. finally, bicspam integrates all the introduced principles into a coherent model that provides a consistent basis for the further development and extension of order-preserving biclustering approaches.

experimental results on both synthetic and real datasets demonstrate the superior flexibility, robustness and effectiveness of bicspam. we also show the biological relevance of discovering order-preserving biclusters with symmetries.

the paper is organized as follows. the remainder of this section provides background on order-preserving biclustering and biclustering based on pattern mining. methods section introduces bicspam. results and discussion section validates the performance of bicspam against synthetic and real datasets. finally, the contributions and implications of this work are synthesized.

order-preserving biclustering

definition  <dig> given a matrix, a = , with a set of rows x = {x <dig> ..,x
n
}, a set of columns y = {y <dig> ..,y
m
}, and elements aij∈rrelating row i and column j: 

• a 
bicluster
b =  is a r × s submatrix of a, where i =  ⊂ xis a subset of rows and j= ⊂ yis a subset of columns;

• the 
biclustering task
is to identify a set of biclustersℬ={b <dig> ..,bp}such that each bicluster b
k 
=  satisfies specific criteria of homogeneity, where i
k
 ⊂ x, j
k
 ⊂ yandk∈n.

biclustering approaches are driven by homogeneity criteria through the use of merit functions  <cit> . merit functions either guarantee intra-bicluster homogeneity, the overall homogeneity of the output set of biclusters , or both. following the taxonomy proposed by madeira and oliveira  <cit> , the existing biclustering approaches can be grouped acccording to their search paradigm, which determines how merit functions are applieda. the merit function is thus a simple way to define the type and quality of biclusters and to affect the structure of biclusters. the bicluster type defines the allowed pattern profiles and their orientation, the solution structure constrains the number, size and positioning of biclusters, and, finally, the quality determines the allowed noise within a particular or a set of biclusters. biclusters can follow constant, additive, multiplicative or plaid pattern assumptions, either across rows or columns  <cit> . multiple biclustering structures have been also proposed  <cit> , with some approaches constraining them to exhaustive, exclusive or non-overlapping structures, and few others allowing a more flexible scheme with arbitrarily positioned overlapping biclusters.

order-preserving biclusters were originally proposed for finding genes co-expressed within a temporal progression, such as co-expressions at particular stages of a disease or drug response  <cit> . however, its range of applications are equally attractive for matrices where time is absent. illustrating, detecting relative changes in the expression of genes across conditions can be indicative of functional regulatory behavior and, additionally, surpasses the need to rely on the exact expression values that are usually noise-susceptible.

order-preserving biclusters can emulate the majority of the previously introduced types of biclusters, leading to more inclusive solutions as illustrated in figure  <dig>  this offers a less restrictive setting to study larger functional modules associated with the discovered biclusters. order-preserving biclusters can either allow monotonically increasing values  or require strictly increasing values . in particular, when considering biclusters with monotonically increasing values, the permutation π = {y <dig> y <dig> y <dig> y1} in figure  <dig> becomes supported by all rows {x <dig> x <dig> x3}. in fact, as illustrated in this figure, the flexibility of order-preserving biclusters is attractive as they cover constant, additive and multiplicative biclusters, which leads to more inclusive solutions.


definition  <dig>  a bicluster following an order-preserving modelis  where j is a set of s columns respecting a π linear ordering, and i is the set of supporting rows where the s corresponding values are ordered according to the permutation π.

there are two major types of approaches for order-preserving biclusters: greedy and exhaustiveb. exhaustive approaches aim to identify the largest submatrices where the set of rows are the maximum sets that support a linear order of values across the set of columns  <cit> . contrasting, greedy approaches rely on a merit function to guide the composition of incrementally larger/smaller biclusters. the merit function used by the original greedy order-preserving approach, opsm  <cit> , is based on the upper-bound probability that a random data matrix contains a bicluster with more rows supporting it. multiple extensions have been proposed over opsm, including: the opsm-rm method  <cit>  to discover order-preserving biclusters from multiple matrices obtained from replicated experiments; the popsm method  <cit>  to model uncertain data with continuous distributions based on a probabilistic extent to which a row belongs to bicluster; and the minopsm method  <cit>  that implements a variant of the order-preserving task.

the evaluation of order-preserving solutions does not significantly differ from the evaluation of traditional biclustering solutions. when considering the knowledge of hidden biclusters, relative non-intersecting area   <cit> , match scores  <cit>  and clustering metrics  have been adopted. rnia  <cit>  measures the overlap area between the hidden and found biclusters. clustering error   <cit>  extends this score to distinguish if several or exactly one of the found biclusters cover a hidden bicluster. match scores   <cit>  assess the similarity of solutions based on the jaccard index. to turn ms sensitive to the number of biclusters in both sets, a consensus can be introduced by computing similarities between the munkres pairs of biclusters  <cit> .

in the absence of hidden biclusters, merit functions can be adopted as long as they are not biased towards the merit functions used within the approaches under comparison. complementary, statistical evaluation has been proposed based on biclusters’ expected probability of occurrence  <cit>  or based on their enrichment p-values against real datasets  <cit> .

sequential pattern mining
let an item be an element from an ordered set . an itemsetp is a set of non-repeated items, p⊆ℒ. a sequences is an ordered set of itemsets. a sequence database is a set of sequences d={s <dig> ..,s
n
}.

let a sequence a= < a1…a
n
 > be a subsequence of b= < b1…b
m
 > , if ∃1≤i1<..<in≤m:a1⊆bi <dig> ..,an⊆bin. a sequence is maximal with respect to a set of sequences, if it is not contained in any of them. illustrating, s1= < {a},{be} > = a  is contained in s <dig> =  c and is maximal w.r.t. d = {ae, e}.


definition  <dig>  the coverageΦ
s
of a sequence s w.r.t. to a sequence database d is the set of all sequences in d for which s is subsequence: Φ
s
={s′∈d∣s⊆s′}. the support of a sequence s in d, denoted sup
s
, can either be absolute, being its coverage size ∣ Φ
s
 ∣, or a relative threshold given by ∣Φ
s
∣/∣d∣.

to illustrate these concepts, consider the following sequence database d={s1=ad,s2=cad,s3=ac}. for this database, we have ∣ℒ∣= ∣{a,b,c,d}∣ =  <dig> Φ{a}={s <dig> s2}, and sup{a}= <dig> 


definition  <dig>  given a set of sequences d and some user-specified minimum support threshold θ, a sequence s∈d is frequent when contained in at least θ sequences. the 
sequential pattern mining
 problem consists of computing the set of frequent sequences, {s∣sup
s
≥θ}.

the set of maximal frequent sequences for the illustrative sequence database, d= {ad,cad ,ac}, under the support threshold θ= <dig> is {a,cc}. existing spm methods rely on  monotonic properties to efficiently find sequential patterns.

consider two sequences s and s′, where s′⊆s, and a predicate m. m is monotonic when m⇒m and m is anti-monotonic when ¬m⇒¬m. spm approaches usually rely on these principles: the support of s is bounded from above by the support of s′ and if s′ is not frequent, then s is not frequent.


definition  <dig>  given a sequence database and a minimum support threshold θ: 

• a frequent sequence s is a sequence with∣Φs∣≥θ;

• a closed frequent sequence is a frequent sequence that is not a subset of sequences with same support;

• a maximal frequent sequence is a frequent sequence with all supersets being infrequent,∀s′⊃s∣Φs′∣<θ.

a frequent subsequence s is maximal if is frequent and all supersequences s′  are infrequent, while is closed if it is frequent and there exists no superset with the same support. given the sequence database d= {ad,,cad,ac}, support θ= <dig> and constraint ∣ s ∣≥ <dig>  there are  <dig> maximal patterns ,cc}),  <dig> closed patterns ,,cc}) and  <dig> simple patterns ,aa,ac,,cc}).

pattern-based biclustering
pattern-based biclustering approaches rely on pattern mining methods and, therefore, use support, potentially combined with confidence-correlation metrics, as the merit means to produce biclusters. there are two major paradigms for pattern-based biclustering.

one option is to rely on sequential patterns  <cit>  to produce order-preserving biclusters . these approaches follow a simple three-stage process. first, for each row, the column indexes are linearly ordered according to their expression values. each row is, consequently, seen as a sequence of items that correspond to column indexes. second, a spm algorithm is applied over this set of sequences under a low support threshold for the discovery of frequent subsequences. third, order-preserving biclusters are derived from the discovered sequential patterns – columns are derived from the subsequence’s items and rows from the set of sequences that support a frequent subsequence. this process can be easily adapted for an order-preserving assumption across rows by transposing both the input matrix and the generated biclusters.

another option is to rely on frequent itemset mining  <cit> . although these approaches only target biclusters with constant patterns, their analysis is critical as they provide key principles for flexible exhaustive searches. bimodule  <cit>  allows for a parameterized multi-value itemization of the input matrix. debi  <cit>  and bellay’s et al.  <cit>  place key post-processing principles to adjust biclusters in order to guarantee heightened statistical significance. genminer  <cit>  includes external knowledge within the input matrix to derive biclusters from association rules.

methods
to tackle the scalability, flexibility and robustness issues of existing order-preserving approaches, we propose bicspam . bicspam defines key decision dimensions . efficiency, flexibility and robustness of the target approaches are dependent on mapping , mining, and closing  decisions. the mapping step consists on the itemization and re-ordering of the elements of the input matrix. the mining step, corresponds to the application of sequential pattern miners for the discovery of order-preserving biclusters. the closing step consists on the post-processing of the output patterns to affect the structure and quality of the target biclusters.

bicspam behavior section covers the fundamental options and structure of bicspam. the core contributions of bicspam are, then, conveyed in the following sections. scalability, flexibility and quality sections provide critical principles and extensions to bicspam. finally, default and dynamic bicspam parameterizations section offers an integrated view of bicspam options and a method for their initialization based on data properties.

bicspam behavior
understandably, optimal and flexible solutions where the number and positioning of biclusters are not previously fixed require efficient search methods. spm methods have been tuned during the last two decades according to scalability principles  <cit> . in this context, the composition of order-preserving biclusters from sequential patterns are a product of three steps . the columns of an input matrix are reordered according to their values, a spm method is applied, and the output biclusters are mapped from the found frequent subsequences. note that when two columns have equal values, they are seen as co-occurrences, while when their values differ they are treated as precedences. consider the illustrative row x <dig> = {y <dig> =  <dig> y <dig> =  <dig> y <dig> = 0} in figure  <dig>  y <dig> and y <dig> co-occur, while y <dig> precedes y <dig>  in this context, biclusters are derived from sequential patterns as follows:


definition  <dig>  given a matrix a and a minimum support threshold θ, a set of order-preserving biclusters ∪
k
b
k
 where b
k
= can be derived from the set of frequent sequences ∪
k
s
k
by: 1) mapping=to compose order-preserving biclusters on rows, or by 2) mapping=from a
t
to compose order-preserving biclusters on columns.

the support threshold defines the minimum number of rows in the bicluster. in the context of ge analysis, a low support is critical since significant co-expression patterns can occur for small groups of genes and/or conditions. additionally, biclusters with a number of columns below a parameterizable threshold can be filtered by pruning subsequences with a number of items below that threshold. finally, biclustering can either rely on the spm methods as-is or target more dedicated searches by adapting the spm support  and use it within the apriori-based spm framework. existing support extensions include: pandey et al.  <cit> , gowtham et al.  <cit> , huang et al.  <cit> , and steinbach et al.  <cit>  measures. however, these metrics do not capture ordering relations and their definition needs to be monotonic.

when the original numeric values are ordered without any form of discretization, the biclusters delivered by spm-based methods are perfect biclusters, that is, they do not allow ordering mismatches. if discretization is applied with an ordinal alphabet, the number of co-occurrences per sequence increases. in this case, the output biclusters are not perfect but are naturally more robust to handle noise. the number of items in the considered alphabet can be used to control the level of noise-tolerance. however, discretization comes along with the drawback of potentially assigning two elements with similar values to different items. we refer to this drawback as the items-boundary problem.

in particular, the chosen spm method and target pattern representations affect the performance and output of the biclustering task. contrasting with existing approaches, bicspam makes available alternatives for both variables aiming at an optimized behavior: 

• spm methods: current spm methods can be classified into three main categories: apriori-based, pattern-growth, and early-pruning  <cit> . methods based on pattern-growth structures and early-pruning principle offer the best performance for the majority of biological data settings.

• complementary to these search alternatives, both horizontal and vertical projections of the database are possible. vertical projections for the spm task are only competitive with the alternatives for very flattened matrices . when targeting ge matrices, the methods that rely on vertical data formats should be only considered for the discovery of biclusters with order-preserving values on the rows . bicspam uses spade  <cit>   for vertical data settings  and prefixspan  <cit>   for the remaining settings.

• pattern representation: the use of simple, closed or maximal patterns largely impact the properties of the biclustering solution, as illustrated in figure  <dig>  efficiency gains can be seized when targeting condensed representations. maximal sequential patterns lead to biclusters with the columns’ size maximized. however, since both vertical and smaller biclusters are loss, maximal-based biclusters lead to incomplete solutions. the alternative is to use all sequential patterns as in μcluster  <cit> . this solution leads to a high number of biclusters potentially redundant , which can degrade the performance of the mining and closing steps. finally, closed sequential patterns allow for overlapping biclusters only if a reduction on the number of columns from a specific bicluster results in a higher number of rows. they are the target representation to obtain maximal biclusters, biclusters that cannot be extended without the need of either removing rows or columns. bicspam makes available clospan  <cit>  and bideplus  <cit>  to mine condensed sequential patterns. contrasting with existing approaches, closed sequential patterns  is the default option in bicspam.

the algorithmic basis of bicspam is provided in figure  <dig> and described throughout the following sections. the computational complexity of bicspam is bounded by the spm task and computation of similarities among biclusters for the closing options. within the mapping step: outlier detection, normalization, discretization, noise correction procedures, distribution fitting tests and parameter estimations are linear on the size of the matrix, Θ. the cost of the mining step depends on two factors: the complexity of the spm method and on whether symmetries are allowed. the cost of the spm task depends essentially on: the number and size of transactions , the frequency distribution of items , the minimum support θ, the pattern representation, the chosen spm method and on the presence of techniques to foster scabalibity . let Θ), or simply Θ, be the complexity of the spm task. the discovery of symmetries is pessimistically bounded by Θ×℘). finally, the cost of the closing step, in accordance with the principles previously introduced by the authors  <cit> , depends essentially on two factors: 1) computing similarities among biclusters , Θ, where k is the number of biclusters and r¯s¯ their average size; and 2) extending biclusters, Θ), where k′ is the number of biclusters after merging and filtering. the resulting complexity of bicspam is bounded by Θ℘+kk/2r¯s¯+k′), which for datasets with a high number of patterns  is approximately Θ℘+kk/2r¯s¯).

scalability
existing spm methods are prepared to deal with sequences with an arbitrary repetition of items per sequence. however, order-preserved biclustering is derived from a more restricted form of sequences, item-indexable sequences, which do not allow item repetitions  <cit> . additionally, a common input for the biclustering task is the minimum number of columns per bicluster, that is, the minimum number of items of the output sequential patterns. although existing spm methods can be applied in this context, they show inefficiencies to deliver large patterns due to the combinatorial explosion of sequential patterns under low support thresholds  <cit> . to avoid this, we propose two strategies to improve the scalability of bicspam. first, we extend indexspan algorithm  <cit>  to discover sequential patterns with heightened efficiency from item-indexable sequences. second, we propose the selection of specific mapping and closing options that foster the scalability of bicspam for large datasets.

seizing item-indexable properties
indexspan  <cit> , an extension on prefixspan  <cit> , was previously proposed by the authors to seize efficiency gains from item-indexable databases , while guarantee a narrow search space and efficient support counting. this method contrasts with μclusters method  <cit> , which relies on a breadth search with high memory complexity Θ that does not scale for medium-to-large datasets . indexspan considers the three following structural adaptations over the prefixspan algorithm. first, indexspan relies on an indexable compacted version of the original sequence database. second, it uses faster and memory-efficient database projections, the most expensive step of prefixspan. since the index of the items per sequence are known, indexspan projected database only maintains a list with the identifiers of the active sequences and of the prefix. to know if a sequence is still frequent when an item is added to a prefix, there is only the need to compare its index against the index of the previous item as well as their lexical order when the index is the same. finally, the minimum number of items per sequential pattern, δ, is used to prune the search as early as possible. if the number of items of the current prefix plus the items of a postfix is less than δ, then the sequence identifier related with the postfix can be removed from the projected database since all the resulting patterns will have a number of items below the inputted threshold.

two critical extensions over indexspan are implemented in bicspam. first, the discovered closed frequent sequences are represented within a compact tree structure, where the supporting transactions are annotated using principles proposed for full-pattern discovery  <cit> . second, parameters from closing options are pushed to mining step. illustrating, overlapping criteria for merging biclusters can be efficiently checked based on the properties of the tree, which significantly removes the complexity associated with computing similarities between all pairs of biclusters.

bicspam uses indexspan as the default spm method due to its superior performance  achieved by efficiency gains from fast database projections, minimalist data structures, and early pruning, merging and filter techniques.

further efficiency options
the use of real-values or high number of items to define the orderings is an efficient option to find order-preserving biclusters as it guarantees a high number of precedences among column indexes , leading to smaller sequential patterns. contrasting, discretization with a low number of items is critical to guarantee more noise tolerant solution, but it degrades efficiency. this is due to the exponential increase of frequent sequential patterns either in number or size. to create a compromise between noise and efficiency, bicspam allows an arbitrary number of items and provides medium-to-high number of items as the default option .

in this context, extending and merging of biclusters discovered using a high number of items can be applied to guarantee efficiency while preserving the quality of solutions. a second strategy is to increase the minimum support threshold  to promote an heightened spm efficiency and the later application of filters to remove biclusters’ rows and columns in order to intensify their homogeneity. bicspam makes available extension, merging and filtering methods.

finally, many of the principles proposed in the last decade to guarantee the scalability of spm methods can be easily applied with indexspan. these principles include: data partitioning principles , principles for the application of spm methods in distributed settings, and the delivery of approximated sequential patterns   <cit> .

flexibility
bicspam relies on flexible searches , delivers flexible structures of biclusters and allows for a flexible parameterization of its behavior . in order to further guarantee the flexibility of the target bicspam approaches, we: 1) extend the default order-preserving biclusters to allow for symmetric values, and 2) define strategies to compose different structures of biclusters.

order-preserving biclusters with symmetries
in ge analysis, allowing symmetries is required to combine regulatory and co-regulatory expression levels within a bicluster  <cit> . two rows from a bicluster may have similar ordered levels of activity differing in sign. to our knowledge, this is the first attempt to combine symmetries with order-preserving models.


definition  <dig>  a bicluster with symmetries is  with either symmetries on rowsâij=ci×aijor on columnsâij=cj×aij, where c
i
∈{- <dig> } is the symmetry factor for each row of the bicluster andaij∈r.

for the purpose of finding biclusters with symmetries, the normalization should satisfy the zero-mean criterion. additionally, if the number of considered items for discretization is odd, there is one item being its own symmetric, which must be specially handled.

the proposed method to find order-preserving biclusters allowing for symmetries is based on iterative sign corrections. if the goal is to find order-preserving coherency on the rows, then there is one iteration for each column y
j
. within each iteration j, each row x
i
 is either multiplied by a  <dig> or - <dig> factor in order to guarantee that the observed values for the y
j
 column have the same sign. after the correction of the sign for each row, mining and closing steps are applied, the discovered biclusters are added to the solution set, and the method proceeds with the next iteration . figure  <dig> illustrates this strategy.

although the alignment of signs can be applied for every column y
j
, additional efficiency can be achieved by stopping the search when all the sign combinations have been achieved. nevertheless, the worst case requires the application of a pattern miner m times. note that filtering is a critical post-processing step to remove potential duplicates resulting from the repetition of coincident alignments.

flexible biclustering structures
pattern-based biclustering approaches produce highly flexible structures of biclusters. a pattern-based structure of biclusters allows overlaps and is non-exhaustive and non-exclusive. additionally, the application of closing options over these structures allow the composition of structures with different properties, such as structures without overlapping areas. shaping biclustering structures has been poorly addressed in literature, and rather seen as the byproduct of a target biclustering method  <cit> .

extension and merging of biclusters can be adopted to produce exhaustive structures . filtering of exhaustive structures can be used to compose exclusive structures . bicspam makes available these closing techniques, that can be used to shape solutions with arbitrarily positioned biclusters. the composition of alternative structures in bicspam can be performed with sharp usability since there is no need to change the core mapping and mining steps.

quality
bicspam approaches are extended in this section regarding their robustness. multiple mapping and closing options are proposed to handle missing values and deal with varying levels of noise.

handling varying levels of noise
a key direction to order-preserving biclustering is to consider multiple levels of noise by following one of the three strategies illustrated in figure  <dig>  first strategy, reduced number of items, hierarchically joins contiguous values to mine biclusters over matrices with varying levels of discretization. second strategy, relaxed-to-restricted extensions under a lower support, considers varying levels of noise only after the mining. for instance, the merging of order-preserving biclusters can follow a statistical test sensitive to the closeness of original or discretized values. third strategy, multiple items, associates one or more items to each element based on a parameterized threshold. this is critical to avoid the item-boundary problem . different criteria can be defined to assign a varying number of items per element a
i
j
. each element can have two-to-three items based on the distance to their centroids. as a result, this method leads to sequences with multiple sizes, where column indexes can appear repeatedly within one sequence. if repetitions are observed for a specific sequential pattern, they are ignored during the definition of biclusters from that pattern.

handling missing values
input matrices can have missing values, a common case with ge matrices. one missing value not properly treated may result in the loss of rows and columns across one or more biclusters, which can contain critical information. three different strategies can be applied to treat missing values: i) removal, ii) replacement, and iii) handling as a special value. the simplest method is to remove the containing row or column . in order not to loose other information critical to compose biclusters, a special item can be used to replace missing values, that is removed during the ordering of columns. in this way, each row can have a varying number of columns. alternatively, many hole-replacing methods have been proposed  <cit> , which alleviate the referred problem, but also introduce additional noise that can significantly decrease the homogeneity of the output biclusters. for this reason, we propose the use of an additional item that is specially handled according to a level of relaxation defined by the user, as illustrated in figure  <dig>  the lowest constrained setting  replaces the missing element by all items. this is a radical alternative to guarantee that potentially relevant biclusters are not lost due to the presence of missing values. the medium constrained setting  considers multiple items around its value-estimation. the highest constrained setting  removes missing items.

robustness recurring to mapping options
bicspam allows for the application of normalization and discretization methods on the rows, columns or overall matrix. each context leads to different biclusters and is, respectively, suited to find patterns on bicluster’s columns, rows or on both dimensions. normalization options are used to scale and enhance differences on the values, which are critical when mining order-preserving regularities. marcilio et al.  <cit>  compare three normalization procedures for ge data: z-score, scaling and rank-based procedures. additional normalization criteria have been reported  <cit> . bicspam requires zero-mean thus allowing for symmetries and providing a simple setting for the application of multiple probabilistic distributions. when assuming the presence of missing and outlier elements, a masking bitmap can be adopted for their exclusion  <cit> .

the applied discretization determines the weight of co-occurrences and precedences per sequence and, consequently, it has a strong influence on the output biclustering solutions. although discretization implies loss of real distances among columns, it alleviates the noise dilemma  <cit> . bicspam allows for this control using two parameters: the number of items and the discretization method. increasing the number of items decreases the number of co-occurrences and, therefore, reduces the noise-tolerance for elements with closer values but no significant ordering constraint. as a result of the stricter noise-tolerance, the output solutions tend to be composed by a larger number of biclusters with smaller areas. additionally, bicspam makes available range-based, equal-depth partitioning and gaussian cut-off points methods for discretization , illustrated in figure  <dig> 

robustness recurring to closing options
• merging options <cit> . merging methods allow for the delivery of noise-tolerant biclusters, thus recovering lost rows and columns due to the items-boundary problem or with missing/noisy values. an effective criterion to guide the merging is the overlapping area , the default option in bicspam, or alternatively the resulting homogeneity of the bicluster after the merging.

• filtering options <cit> . bicspam allows filtering at two levels: 1) at the bicluster level and 2) at the row-column level. for the first type of filtering, removal of biclusters that are duplicated or contained in larger biclusters, bicspam follows bimodule  <cit>  heuristics to efficiently perform this type of filtering. the second type of filtering can be adopted to exclude rows or columns from a particular bicluster in order to intensify its homogeneity. this is usually the case when a low number of items is considered, leading to highly noise-tolerant biclusters. for this purpose, bicspam offers three strategies: 1) use of statistical tests on each row and column, 2) rely on existing greedy-iterative approaches and maximize their merit functions, and 3) discover sequential patterns under more restrictive conditions .

• extension options <cit> . similarly to filtering options at the row-column level, bicspam imple- ments three non-exclusive strategies to extend biclusters in ways that the resulting solution still satisfies some pre-defined homogeneity. first strategy relies on the use of greedy methods and on their merit functions for further extensions. second strategy consists on the use of statistical tests to include rows or columns over each bicluster. finally, bicspam provides a third novel strategy based on the merging of sequential patterns discovered under more relaxed support thresholds.

default and dynamic bicspam parameterizations
bicspam parameters with impact on the solution quality and efficiency are: 

• mapping step parameters, including: the number of items , the normalization and discretization methods, and the  methods to handle missing and noisy values;

• mining step parameters, including: the inputted minimum number of rows and columns; the spm method and its scalability extensions; and the chosen pattern representations;

• closing step parameters, including the criteria to merge, filter and extend biclusters.

bicspam makes available default parameterizations  and dynamic parameterizations . default parameterizations include: zero-mean row-oriented normalization, overall gaussian discretization with m <dig> items , and the use of row-based indexspan with closed sequential patterns, noise relaxation b-a<10%), removal of missing values and merging procedure with 80% overlapping. for the default setting, bicspam iteratively decreases the support threshold 10%  until the output solution discovers  <dig> non-similar biclusters or a coverage of 10% of the elements in the input matrix.

the dynamic parameterizations adopt identical mining options but differ in the following aspects. different distributions underlying the input matrix are tested to select the normalization and discretization procedure. if the range of values per row/column cannot be clustered with low error , extension and filtering  options are adopted to foster the robustness of bicspam. moderate and relaxed missing handlers are selected if the input matrix has, respectively, over 2% and 5% of missing elements. vertical searches using spade spm method  <cit>  are selected when m > 10n. data partitioning principles to foster scalability are made available when the following condition is not satisfied: ∨.

these parameterizations provide a robust and user-friendly environment to use bicspam, while expert users can still further explore alternative behavior to obtain exploratory solutions with varying quality.

RESULTS
this section synthesizes the results from experimentally assessing the performance of bicspam. results show that the proposed approaches are computationally efficient, flexible and robust to varying input settings. the methods were implemented in java . the experiments were performed using an intel core i <dig>  <dig>  ghz with  <dig> gb of ram.

the experimental results are collected and analyzed in three steps. first, the impact of alternative bicspam parameterizations is analyzed in-depth for synthetic datasets with varying size, noise and sparsity. second, the performance of bicspam is assessed against existing alternatives. finally, the significance of bicspam results in biological contexts is assessed.

results in synthetic data
to study the performance of bicspam, two sets of datasets were generated. first, a set of synthetic matrices was generated using the experimental settings described in table  <dig>  we varied the size of these matrices  up to  <dig>  rows and  <dig> columns. the number and shape of the planted biclusters were also varied. the number of rows and columns for each bicluster follows an uniform distribution over the ranges presented in table  <dig>  the uniform selection allows for repetitive choices, thus creating overlaps among biclusters, which can harden the recovery of the planted biclusters. finally, a noise factor  was applied to each bicluster. for each of these settings we instantiated  <dig> matrices:  <dig> matrices with background values from the continuous uniform distribution u and  <dig> matrices with background values generated according to the gaussian distribution n. the presented results are an average across these  <dig> matrices.

a second set of datasets was generated to study the efficiency limits of bicspam by fixing the number of rows  and varying the number of columns . background values were generated as the first set of datasets, and  <dig> biclusters were planted to occupy 5% of the total area.

we rely on match scores  to assess the accuracy of biclustering approaches to recover the planted biclusters. ms defines the extent to what found biclusters match with hidden biclusters, while ms reflects how well each of the hidden biclusters are recovered. 

 ms=1∣ℬ∣Σ∈ℬmax∈ℋ∣i1∩i2∣∣i1∪i2∣ 


comparison of biclustering approaches: four state-of-the-art biclustering approaches were selected: two approaches able to deliver order-preserving biclusters, opsm  <cit>  and op-clustering  <cit> , and two approaches able to discover biclusters under constant, additive and multiplicative models, fabia with sparse prior equation  <cit>  and isa  <cit> . we used the following software: the bicat software  <cit>  to run opsm and isa approaches and the r package fabia <cit> . the default number of iterations for the opsm method was varied from  <dig> to  <dig> iterations. bicspam was used with the: 1) default parameterization, 2) default parameterization but with sequential patterns gathered from multiple levels of expression , and 3) dynamic data-based parameterization. the support threshold for both bicspam and op-clustering approaches was incrementally decreased 10% and stopped when the output solution had over  <dig>  biclusters. we applied fabia with default parameterizations. the specified number of biclusters for both fabia and isa  was the number of hidden biclusters plus 10%: ∣ℋ∣× <dig> .

the average performance of these approaches over the synthetic datasets described in table  <dig>  is illustrated in figure  <dig>  op-clustering was excluded due to memory problems for the larger datasets. for small datasets, the performance of op-clustering is slightly inferior than bicspam performance due to the absence of closing and noise-handling options. these results confirm the higher performance of bicspam in terms of ms, that is, the majority of the discovered biclusters are well described by the hidden biclusters , and ms, that is, the majority of hidden biclusters can be mapped into a discovered bicluster . although opsm achieves a reasonable performance under the order-preserving assumption, the iterative masking of biclusters degrades the observed match score levels. additionally, opsm tends to discover biclusters with varying sizes, which results in a large portion of biclusters with either a very few number of rows or columns. fabia and isa approaches are not prepared to discover order-preserving biclusters. however, for the multiplicative coherency, fabia is a competitive option, although ms levels are penalized due to the inclusion of false columns per bicluster. since order-preserving regularities are more general than multiplicative regularities a penalization in robustness is observed for isa  and opsm.

efficiency limits:
to show the boundaries on bicspam efficiency when considering  <dig>  rows , we considered the second set of synthetic data with results provided in figure  <dig>  bicspam support was decreased until a 5% of coverage is achieved. two scenarios are depicted: one setting where biclusters are planted and another setting without planted biclusters. in the absence of scalability principles, bicspam can handle matrices up to  <dig>  ×  <dig>  in the presence of data sampling principles , bicspam can scale for the assessed medium-to-large data settings.

degree of co-occurrences:
figure  <dig> illustrates the performance of bicspam over the generated datasets using: the original values ; a discretization to consider an average of 5% of columns per itemset ; and a discretization to consider an average of 10% of columns per itemset . these tests were performed using the default parameterizations with no closing options. the retrieved biclusters are shown to match the planted biclusters  and ms above 95% for medium-to-large datasets). these scores are not optimal  due to the exclusion of few rows from the solution as a result of the planted noise or of the allowed overlapping among biclusters. this is also the main reason why the number of discovered biclusters is significantly higher than the number of planted biclustersc. as illustrated, this problem is minimized when a merging step  is considered. finally, the use of discretization methods decreases the number of precedences, which can lead to a slight decrease in efficiency due to an increase of frequent patterns.

mining methods:
the impact of the algorithmic choice on the efficiency of bicspam in terms of time and maximum memory usage is assessed in figure  <dig>  we used prefixspan from spmf framework  <cit>  and opc-tree as the basis of comparison. the impact of mining sequential patterns in the absence and presence of the minimum number of columns per bicluster, δ threshold, is presented for a fair comparison. the gains in efficiency from adopting fast database projections are significant, dictating the ability of the spm task to scale for hard settings. δ-based pruning methods also promote efficiency gains. contrasting with opc-tree that requires the full construction of the pattern-tree before the traversal, indexspan performs searches with minimal memory waste. for an allocated memory space of  <dig> gb, we were not able to construct opc-trees for input matrices with more than  <dig> columns.

pattern representations:
the impact of choosing simple, closed and maximal pattern representations is presented figure  <dig> for an alphabet length of  <dig> items and the  <dig> ×  <dig> dataset setting. as illustrated, the use of maximal patterns for biclustering should be avoided as it gives preference for biclusters with a large number of columns and discards biclusters with a subset of these columns . this penalizes the ms levels. ms scores are not so affected as each maximal bicluster is covered by a planted bicluster. additionally, the use of simple patterns for biclustering can degrade the ms in comparison with closed patterns. this score penalizes the discovery of biclusters that are just a part of larger planted biclusters, even when the found biclusters have a heightened homogeneity. the search for closed and maximal patterns slightly increases efficiency. these observations support the use of spm methods that find closed patterns .

missing values:
for the assessment of the proposed strategies to handle missing values, we randomly removed a varying number of elements of the generated matrices for the  <dig> ×  <dig> setting. figure  <dig> illustrates how the performance of bicspam  varies with the percentage of missing elements, which ranges from  <dig> to 5% . 5% is already considered a critical number that compromise the ability to retrieve the true biclusters. three main observations are derived from figure  <dig>  first, robustness is greater when considering the nearest 2- <dig> values than when imputing one value only or all the possible values . this is due to an increased chance of recovering the original value and, therefore, of not damaging a planted bicluster. when considering all the possible values for a missing element, there is an increased noise added that can lead to the emergence of false biclusters. second, although removing missing elements  is preferred over default options , ms score still decreases from 97% to nearly 60% when the percentage of missing values reaches 5%. third, imputing multiple values penalizes efficiency as the sequence database becomes denser . nevertheless, scalability levels are preserved when imputing only the closest 2- <dig> items for levels of noise up to 5%.

closing options:
varying levels of noise were planted to test the robustness of the proposed closing options. this was performed by replacing the values of specific elements by a new randomly generated value. the percentage of noisy elements were varied from  <dig> to 10%. we selected the  <dig> ×  <dig> setting for this study, the prefixspan method, and  <dig> items for the discretization step. figure  <dig> describes the impact of merging, filtering and extension strategies to handle noise.
merging 
 , 
filtering 
  and of 
extensions 
  using the  <dig> × <dig> setting.

the impact of merging biclusters assuming a 5% level of planted noise is illustrated in figure  <dig> . the baseline case is when the required overlapping area for merging equals 100% . when relaxing the overlapping criteria, the ms levels  levels) increase, as the merging step allows for the recovery of missing columns and rows belonging to planted biclusters. however, this improvement in behavior is only observable until a certain threshold . a correct identification of the optimum threshold can lead to significant gains .

the adoption of filtering at the row/column level also enhances the ability to recover the planted biclusters. the impact of removing potentially rows and columns  is illustrated in figure  <dig> . filtering is relevant to correct errors related with non-planted co-occurrences when considering restrictive discretizations. similarly to the merging option, an increase in the matching scores is observed from the baseline case  up to 75% . from this upper threshold the match scores decrease since the homogeneity criteria becomes too restrictive, which leads to removal of rows and columns from planted biclusters due to a misinterpretation of their natural levels of noise.

finally, the impact of different extension strategies is illustrated in figure  <dig> . when increasing the planted noise, the presence of the extension options it is critical to maintain attractive levels of accuracy. both the inclusion of new rows and columns recurring to statistical analyzes or by lowering the support of spm methods and merging the resulting biclusters are able to maintain match score levels above 90% .

symmetries:
figure  <dig> describes how mining symmetric behavior with bicspam compares with the default bicspam behavior . for this evaluation, we varied the sign of some rows for each planted bicluster. the default bicspam  was tested over the same matrices but using planted biclusters without symmetries. ms levels are preserved. the observed differences in accuracy are related with the higher probability of background values to form a non-planted order-preserving bicluster when considering symmetric behavior . finally, the impact of using symmetries in the time complexity is considerably less than the expected ∣ y ∣ times due to the implemented heuristics to prune the number of iterations.

results in real data
to assess the relevance of bicspam results over biomedical contexts, we selected four distinct datasets: dlbcl   <cit> , yeast   <cit> , colon cancer   <cit>  and leukemia   <cit> . these datasets have been previously used by biclustering approaches with flexible coherency criteria  <cit> .

figure  <dig> compares the performance of the extended indexspan method when considering a discretization alphabet of  <dig> items, θ = 8% and δ =  <dig>  this analysis reinforces the derived observations from synthetic data.figure  <dig> illustrates the impact of including symmetries when mining the yeast dataset. we applied bicspam with an overall normalization followed by a gaussian discretization with  <dig> items. the shown solutions rely on closed patterns and exclude identical biclusters. interestingly, we can see that order-preserving solutions that allow for symmetric behavior are able to capture a higher number of biclusters with larger sizes on average. this is an indicator of superior flexibility, which is related with the integrated capturing of regulatory and co-regulatory behavior.


biological relevance: to assess the biological relevance of the discovered order-preserving biclusters, the statistical relevance was obtained using gene ontology  annotations recurring to the gotoolbox  <cit> . to perform the analysis for functional enrichment we computed the p-values using the hypergeometric distribution to access the over-representation of a specific go term. in order to consider a bicluster to be highly significant, we require its genes to show significant enrichment in one or more of the “biological process” ontology terms by having a bonferroni corrected p-value below  <dig> . a bicluster is considered significant if at least one of the go terms is significantly enriched by having a p-value below  <dig> .

we were able to derive an average of  <dig> significant  biclusters using bicspam with default parameterizations across datasets when considering a minimum number of δ =  <dig> conditions. two illustrative order-preserving biclusters discovered in the yeast dataset are shown in figure  <dig> 

in particular, the average number of significant biclusters increases to over  <dig> biclusters with a larger number of elements in average when considering symmetries. this is a critical observation since it means that there are groups of genes with biological relevance that can only be discovered through biclustering under a flexible order-preserving setting when symmetries are considered.

♯
♯
♯
♯
♯
♯
. 
CONCLUSIONS
pattern-based approaches for order-preserving biclustering are proposed with the goal of performing efficient exhaustive searches under flexible conditions. results support their ability to find highly flexible and robust solutions over matrices with sizes up to  <dig> rows and  <dig> columns. results in both synthetic and real data show that bicspam can surpass the drawbacks identified for existing order-preserving approaches, namely more relaxed scalability boundaries, flexible expression profiles, and superior robustness to noise and missing values.

bicspam makes available dynamically parameterizable options dependent on the input data context. bicspam allows: 

• different spm methods, pattern representations , and dynamic optimizations to seize the specificities of the input datasets;

• multiple options to deal with noise and missing values according to different relaxation levels;

• arbitrary number of items and different discretization options  with heightened influence on the solution;

• multiple ways to deal with the composition of flexible structures and with the numerosity of biclusters through extension-merging-filtering steps without the need to adapt the core task.

furthermore, this work introduces the notion of order-preserving biclusters with symmetries and proposes an efficient method for their effective discovery. results reveal that allowing symmetries is critical to simultaneously capture activation and regulatory mechanisms within a biological process.

as future work, we expect to adapt the mining step to search for lengthy sequential patterns by merging smaller sequential patterns discovered under greater support thresholds according to colossal pattern mining principles  <cit> . this direction also promotes the scalability of bicspam. finally, we expect to integrate contributions from constraint-based pattern mining in bicspam to support knowledge-guided biclustering in biological contexts.

software availability
the used datasets and bicspam executables are available in http://web.ist.utl.pt/rmch/software/bicspam.

endnotes
a greedy iterative searches rely on the selection, addition and removal of rows and columns until the merit function is maximized locally  <cit> . exhaustive searches use merit functions to guide the space exploration  <cit> . approaches that combine clusters from both dimensions use similarity metrics  for the clustering and joining stages  <cit> . divide-and-conquer searches exploit the matrix recursively using a global merit function  <cit> . stochastic approaches assume that biclusters follow multivariate distributions  <cit>  and learn their parameters by maximizing a likelihood  function.

b existing order-preserving search paradigms also vary with regards to the number of output biclusters – either parameterized  or undefined  – and to the number of search iterations – either one bicluster at a time  or all biclusters at a time .

cms reveals how the hidden biclusters were covered by the nearest found biclusters. since there is at least one found bicluster with a direct correspondence to each hidden bicluster, bicspam has ms levels generally higher than ms.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
all the authors were involved in the design of the solution and in the writing of the manuscript. all authors read and approved the final manuscript.

