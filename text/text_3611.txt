BACKGROUND
nowadays, commercially available ngs technologies are able to generate in a single run millions of dna short reads producing a gigabasepair  scale throughput at relatively low cost  <cit> . a crucial step in ngs resequencing workflows is the mapping of dna short reads against a reference genome in order to obtain text files which represent the sequence information by its genomic position . in this context, samtools  <cit>  is a well-known open-source package able to manipulate sequence alignment map  files and, amongst other utilities, its variant caller generates a gp file called pileup able to be further analyzed in ngs-based research studies .

as an example, ding et al.  <cit>  have characterized novel mutations using data analysis workflows that require a comprehensive gp file handling for variant annotation  and case-control comparisons. nevertheless, the management of this type of files is usually cumbersome and inefficient due to both their large size  and the lack of specific tools able to efficiently manage them from a disk, memory and cpu point of view.

starting from our experience in giving direct support to wet-lab users requiring ngs analysis we have developed pileline, a novel and flexible command-line toolbox for efficient management, filtering, comparison and annotation of gp files. the toolbox has been designed to be memory efficient by performing fast seek on-disk operations over sorted gp files. based on the combination of basic core operations, pileline provides several functionalities, including  full standard annotation with human dbsnp, hgnc gene symbol and ensembl ids,  custom annotation through standard .bed or .gff files,  two sample  and n sample comparison at variant level,  generation of sift  <cit> , firestar  <cit>  and polyphen  <cit>  compatible outputs for predicting the consequences of non-synonymous coding variants on protein function, and  a genotyping quality control  test for estimating performance metrics on detecting homo/heterozygote variants against a given gold standard genotype  <cit> .

implementation
pileline is coded in java and consists of a set of command-line utilities that are easy to integrate in custom workflows or user-friendly frameworks like galaxy  <cit> . the tools comprising pileline are focussed on two different but complementary activities:  processing and annotation, implementing simple but reusable operations over input gp files and  analysis, giving support to more advanced and specific requirements .

the primary input data of pileline are gp files  containing the chromosome name and the coordinate position as the two first columns . the main design principle of the pileline toolbox is to avoid loading input data into memory, so core functions operate directly on disk. one of the available command-line tools is fastseek, which performs a direct binary search on sorted gp files without requiring an additional index to be created. this functionality provides direct access to any range of genomic coordinates without loading the whole file into memory. initially, fastseek finds the first and last lines of each sequence and next, performs a binary search on the lines belonging to the queried sequence in order to find the first position within the specified range.

the second design principle of pileline is focussed on flexibility and modularity. thus, pileline tools may be combined with standard unix commands allowing custom data analysis workflows. moreover, the modular design of our toolbox facilitates the inclusion of additional functionalities. with respect to the file formats, while 2smc, nsmc, pileup2sift, pileup2polyphen and pileup2firestar work with specific samtools .pileup file format, fastseek, fastjoin, rfilter, sort and genotest work with generic gp files .

RESULTS
pipeline toolbox contains  <dig> command-line utilities that have been designed to be memory efficient by performing on-disk operations over sorted gp files. by combining their execution using different arguments and several options the user is able to sketch and execute diverse workflows that can be enhanced by using third party software applications. here we report several example pileline applications, further commands and examples of use can be found on the pileline web site:

a) case-control comparisons working with .pileup files:

$ sh your_path_to_pileline/cmd/pileline-2smc.sh -a <control <dig> pileup> -b <case <dig> pileup> -v <control <dig> variants.pileup> -w <case <dig> variants.pileup> -o <myoutput <dig> txt>

b) n sample comparisons reporting consistent variants amongst .pileup files:

$ sh your_path_to_pileline/cmd/pileline-nsmc.sh --a-samples <control <dig> variants.pileup>,<control <dig> variants.pileup>,<control <dig> variants.pileup> --b-samples <case <dig> variants.pileup>,<case <dig> variants.pileup>,<case <dig> variants.pileup> -o <mycommonvariants_in_cases.txt>

c) full annotation of gp files with human dbsnp:

$ sh your_path_to_pileline/cmd/pileline-fastjoin.sh -a <gp_file.txt> -b ./dbsnp_ <dig> .txt --left-outer-join ><mydbsnpannotation <dig> txt>

#hgnc gene symbol, ensembl ids and custom annotations are also allowed and may be supplied through standard .bed or .gff files.

d) generate input for external mutational effects prediction software :

$ sh your_path_to_pileline/cmd/pileline-pileup2sift.sh -i <myfile.pileup> > <mysiftinput.txt>

# polyphen <dig> and firestar inputs are also allowed.

e) print a given range of a gp file .

$ sh your_path_to_pileline/cmd/pileline-fastseek.sh -p <gp_file> -s chr10:100: <dig> ><mychrrange.txt>

pileline performs efficiently on a standard pc , where initial tests with the fastseek command showed good performance being able to retrieve  <dig> random positions per second on a file of ~ <dig> millions of lines . this behaviour allows, for example, to retrieve all positions from a .pileup file containing known snps  in approximately  <dig> minutes consuming less than  <dig> mb of ram.

although an optimal search performance could be attained by using auxiliary indexes, this approach requires an additional step for building the supporting files. moreover, the performance degrades linearly as the input gp file grows in size, and its generation takes a considerable amount of time. pileline was designed to avoid indexing but, by performing binary searches instead of sequential searches , it scales reasonably well since its complexity is o, where n is the number of lines of the input gp file.

the pileline toolbox is maintained and distributed using a concurrent cvs version control system at sourceforge. the community platform provides wiki support through mediawiki.

CONCLUSIONS
in this work we have presented pileline, a toolbox for the efficient processing of standard genomic position files such as .pileup, .bed, .gff and .vcf. based on the combination of basic core tools, pileline provides a catalogue of functions to analyze, compare, filter and annotate gp files giving support to common ngs analysis workflows. given the growing number of ngs-oriented applications, pileline has been implemented using a modular design to facilitate the inclusion of new functionalities. pileline toolbox and source code are freely available from http://sourceforge.net/projects/pilelinetools and licensed under the terms of the gnu lesser general public license. examples of use, commands help, guided analysis workflows, example files and full documentation are available in pileline's wiki at http://sing.ei.uvigo.es/pileline.

availability and requirements
project name: pileline

project home page: http://sing.ei.uvigo.es/pileline

operating systems: windows, unix-like 

programming language: java

other requirements: java runtime environment   <dig> , apache ant  <dig> 

license: gnu lgpl

authors' contributions
dg-p programmed the pileline application. ggl provided use cases, tested the usability of the software and generated pileline documentation. mrj tested the performance of pileline tools. dg-p and ggl wrote the paper while ffr and dgp provided comments and discussion. all authors read and approved the final manuscript.

supplementary material
additional file 1
example output of a genotyping test for quality control. genotest metrics table description. it may be obtained by using --print-help-table argument.

click here for file

 acknowledgements
we thank g. lópez and jm. rodríguez for helping with pileline and firestar integration. this work has been partially funded by the spanish ministry of science and innovation, the plan e from the spanish government and the european union from the erdf . dg-p acknowledges the angeles alvariño contract and a visiting scholar grant from xunta de galicia  and the european social fund.
