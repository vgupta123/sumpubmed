BACKGROUND
genome sequencing is the process to determine the exact sequential order in which a target organism's dna is made up by the building blocks, called bases and abbreviated a, c, t, g. this process is carried out in two phases. the first phase is shotgun sequencing phase where the dna molecule of the organism is randomly sheared into a large number of small fragments and the ends of the fragments are read base by base using a chemical procedure introduced by sanger  <cit> . the second phase is assembly phase where the resulting sequences of these fragments are put together by a program  that attempts to join these fragments by their overlapping sequences in order to restore the entire target genome. in an ideal case, the assembly phase would yield one single long string in the alphabet {a, c, t, g}, but this is far from being the reality, even when the sequencing phase is careful enough to cover the whole genome by several fold factors. typically two issues prevent this ideal situation from happening: non-random shearing and repeats. non-random shearing occurs because all organisms have in their dna sequence regions that are more difficult to be sequenced than others, which in some cases transcends into gaps that are not sequenced at all. on the other hand, repeats are sequences extracted from different regions of the genome that have a near identical primary structure. when fragments from these regions are sequenced, the assembler is not able to differentiate them, and most likely joins them as if they came from a common region, a mistake that is hard to avoid. as a consequence of these two challenging situations, the assembler cannot piece these fragments to restore the entire target genome as a single sequence; instead, it assembles the fragments into some long contiguous sequences, called contigs. these contigs are separated by gaps, namely, they do not share overlapping flanks, which are necessary in order to further piece these contigs together. even the relative order of these contigs in the genome is not known. the next stage in the assembly phase is to identify the relative order.

a typical technique for ordering the contigs is called scaffolding which uses paired reads. it is worth noting that the scaffolding by paired reads does not guarantee a complete ordering . once the contigs are ordered, the gaps that separate them can be identified and associated to the fragments  that are not sequenced properly in the shotgun sequencing phase. gap closure will involve resequencing these fragments and/or acquiring new fragments of dna in the corresponding regions. scaffolding and gap closure are tedious and laborious processes, hard to be automated. however, when the genome of a closely related organism has already been sequenced, it can then be used as a reference, i.e., the contigs of the target genome can be matched against the reference genome. the alignments of these contigs onto the reference genome can potentially produce an informative overall picture of the ordering of the contigs, and therefore greatly facilitate the scaffolding and gap closure. using reference genomes in sequence assembly has become increasingly feasible as more genomes have been sequenced and therefore become available as potential references.

many software packages are available for doing pairwise sequence alignments, including fasta  <cit> , blast  <cit> , blat  <cit>  and mummer  <cit> . fasta and blast compare two sequences to discover regions of high similarity while allowing insertions, deletions and point mutations. blat is inspired in blast, but introduces several changes to speed up the alignment process. mummer looks for the kinds of large-scale changes that can be discovered in whole-genome comparisons. nonetheless all of these algorithms operate in a similar way; they initially find local exact matches  between the two sequences, and then the seeds are extended to fill the gaps using constrained versions of the smith-waterman algorithm  <cit> .

in assembly projects, when a set of contigs is compared against a reference genome, the interest is to find out whether each contig is potentially an actual segment of the target genome and to establish the positional order of all the contigs in the target genome. for these purposes, a detailed base to base alignment is not needed. it suffices to find only exact match regions, therefore the seed extension procedure can be skipped. mummer, which uses a suffix tree approach to directly find exact matches between the two sequences, is a tool best suited for this task due to its efficiency in both time and space, as a result of using the suffix tree data structure.

the exact matches that mummer extracts can be represented in a dot plot as shown in figure  <dig>  when the aligned contig is a good prospect, i.e. the contig accurately reconstructs a region in the target genome that also exists in the reference, the seeds of the alignment should be approximately collinear . on the other hand, the seed alignments, as shown in figure  <dig> , can be skewed and shifted away from the main diagonal, indicating some significant mismatches between the contig and the reference. these mismatches may represent genuine genetic variances, such as translocation, inversion and insertion between the target and reference genomes, but they can also be due to sequence errors in the contig arising in misassembly. in both cases, the alignment provides less useful information to the assembly process. also, since there is no reliable way to differentiate these two cases, these contigs should be flagged for further analysis.

in many cases, a visual assessment of the dot plot of the seeds of an alignment is enough to judge the reliability of a contig. however, more exact numerical figures are often needed to validate a contig. besides, it is common to have sets of thousands  of contigs to be matched against a reference, in which case the graphical method is ruled out. in this work, we propose a simple yet powerful algorithm that takes as input the set of exact matches  between a contig and a reference genome, and produces as output the starting and ending coordinates of the most likely global alignment that exists between the two sequences. in figure  <dig> , the output would be . the method also assigns each alignment a score to assess its goodness so that non reliable contigs can be easily flagged for further analysis or even discarded directly. the method is based on clustering the seed alignments using a weighted linear regression, which is presented in the next two sections.

methods
motivation for a weighted pairwise linear regression
assume we run mummer to align a given contig to a reference genome. mummer can be tuned to find only exact matches and filter out those matches that do not occur in the same order in both sequences. if the contig has a strong alignment to the reference, the seeds should line up in a collinear manner in the dot plot like what is shown in figure  <dig>  each seed is characterized by its slope wi  and a y-intercept bi. our goal is to identify a strong alignment between the contig and reference, cluster the seeds that would belong to such an alignment, and filter out the "outliers" . therefore, we want to find a straight line with slope w¯ and y-intercept b¯ that can serve as a collinear axis for these segments representing the seeds, in such a way that the seeds not in line and/or far way from the axis can be identified as outliers and be excluded. once the axis is determined and segments are aligned to it, the boundary coordinates of the global alignment can be easily found.

one way to approach this problem is by standard linear regression for all the starting and ending points of the seeds. however this solution does not take into account the fact that we are trying to align segments, not individual points. so we propose a slightly different modification of linear regression that not only accounts for the pairing of points, i.e., as both ends of a segment, but also weighs in the length of segments. in order to find w¯ and b¯, we minimize the following metric:

  c=∑i=1nli⋅2+2) 

where li is the length  of each match. it is reasonable to assign this weight to each seed, since the longer a match is, the more significant weight it should be given in determining the collinear axis.

differentiating the metric with respect to w¯ and b¯ we get:

  dcdw¯=dcdb¯=−2⋅∑i=1nli⋅+) 

which is made equal to zero to solve for w¯ and b¯, hence we finally obtain:

  w¯=∑i=1nliwi∑i=1nliandb¯=∑i=1nlibi∑i=1nli. 

eq.  suggests that the optimal w¯ and b¯ for this weighted pairwise linear regression can be obtained as arithmetic average over the slopes and the y-intercepts, respectively. it is interesting to note that this solution is surprisingly simpler than that of a standard linear regression, which involves computation equivalent to matrix inversion. the implementation of eq.  is straightforward, and the results have an accuracy of about 70% as compared to a large set of human curated alignments.

this initial idea served as an inspiration for an improved algorithm, more adapted to the nature of the problem. because of the very nature of linear regression, be it a standard one or a modified one like ours, the solution is necessarily a kind of compromise, which means that it can be skewed if many small scattered outliers exist. to mitigate such a problem, a further modification to the algorithm is presented in the next section.

the modified algorithm
following is a description in pseudo-code of the final algorithm that we developed to process the seed alignments  between a contig and a reference sequence. each seed alignment is described by a 4-tuple , where sx and ex are the starting and ending coordinates on the reference sequence, and sy and ey are the starting and ending coordinates on the contig sequence. as mentioned before, the goal is to find the boundary coordinates  of the region in the reference  that more strongly aligns to the contig , as shown in figure  <dig> .

input:

s = {si, i =  <dig>   <dig>  ..., n}, a set of n matched segments, each is a 4-tuple ; and v, a window size given as a percentage of the contig length.

algorithm:

 <dig>  compute the accumulated lengths lf and lr for matched segments on forward strand and on reverse strand respectively.

   for each si ∈ s

   if  > 0)

   then lf += ||si||

   else lr += ||si||.

 <dig>  decide on the dominant strand by the maximum of lf and lr.

   if 

   then ds = +1

   else ds = - <dig> 

 <dig>  project the segments on the dominant strand onto the y-axis and assign them each a weight λ defined as the total length of segments whose y-intercept is within a window of size 2v.

   for each si ∈ s

      if  = ds)

      then λi = ∑j ||sj||, for all segments sj whose y-intercept bj satisfies bi - v ≤ bj ≤ bi + v.

 <dig>  find the segment, indexed as i*, that has the maximum weight. that is to say, segment si* has most long segments within the window of the given size centering at it.

i* = arg maxi and b* = bi*.

 <dig>  use the segment si* as a centroid to cluster all segments whose y-intercept falls within the window of size 2v centering at b*. find the indexes j* and k* for the two boundary segments of the region where the contig and the reference are strongly aligned.

   j∗=arg⁡min⁡sj, for all segments sj whose y-intercept bj ∈ ;

   k∗=arg⁡max⁡sk, for all segments sk whose y-intercept bk ∈ .

output:

    = , where sx is the starting coordinate of segment sj* and ex is the ending coordinate of segment sk*, all with respect to the reference sequence.

    = , where sy is the starting coordinate of segment sj* and ey is the ending coordinate of segment sk*, all with respect to the contig sequence.

it is noted that the length of the alignment |y <dig> - y1| can be compared with the contig length, and a significant difference between the two can be used to flag problematic contigs for further analysis.

specifically, each contig is assigned a score based on its alignment with the reference defined as follows:

  score=min⁡max⁡+l+max⁡+∑j∈ζ‖sj‖max⁡. 

the right hand side of this equation has four terms. the first term is a ratio between the lengths of the estimated alignment on the contig and the reference, with the denominator always being the bigger of the two. this ratio therefore gives a sense of insertions and deletions within the estimated alignment; a perfect alignment without any insertion and deletion receives a value of  <dig>  and the lower value implies more deletions and insertions. the second term is a ratio between the accumulated length of seeds and the contig length. the third term is a ratio of the accumulated length of seeds in the dominant strand over the total seeds length. in the fourth term, ζ is the subset of seeds that were clustered, namely, ζ consists of all segments sj whose y-intercept bj ∈ , as was defined in step  <dig> of the algorithm. therefore, the fourth term is the ratio of the total length of seeds in the dominant strand and clustered over the total length of seeds in the dominant strand. all these ratios are valued theoretically in the range  <cit> , with  <dig> corresponding to a perfect alignment between contig and reference. for convenience, the score is then scaled to the range  <cit>  by multiplying the right hand side of eq.  <dig> by  <dig> 

as for the time complexity, after the y-intercepts are sorted, all steps except step  <dig> run in time obviously as a linear function of n, which is the number of matched segments. the complexity for step  <dig> is also linear with the following refined implementation. by keeping two pointers, one to the low intercept value and one to the high value, the sum of lengths can be computed for the next match by advancing both pointers, subtracting out low values that are now too low and adding in new high values. both pointers scan linearly through the data for total linear time. it is noted that, even with the less refined implementation, which can be o as suggested in the pseudo code, step  <dig> runs effectively in linear time when the window size is kept small.

now we present a simple example to help illustrate the mechanics of the algorithm. suppose mummer found six exact matches in the forward strand, as shown in figure  <dig>  where each seed has been numbered . the length of each seed in the reference sequence is also shown . the algorithm should be able to cluster all matches but match no.  <dig> .

assume a window of size  <dig> for this example. forward strand is chosen as the predominant strand of the alignment. then the y-intercept and the weight vectors are found to be b→ =  and λ→ = . in figure  <dig>  a discrete plot with b→ in the horizontal and w→ in the vertical axis is shown in green. for instance, for y-intercept  <dig> only match no.  <dig> is within its window range, hence a weight of  <dig> was assigned. for y-intercept  <dig>  matches no.  <dig>   <dig>   <dig> and  <dig> are inside its window range, then a weight  <dig> +  <dig> +  <dig> +  <dig> =  <dig> was assigned. by finding the maximum of λ→, which is  <dig>  we conclude that b^ =  <dig>  then all the matches whose y-intercepts are inside the window range of b^ are clustered, and the ones outside this region are declared outliers.

RESULTS
we present in this section alignment results from real assembly data. in our attempt to assemble a region of the genome of several rice species, sets of contigs of varied cardinality and average length are produced and aligned to an available reference genome, namely the sequence of o. sativa var. japonica. our algorithm was implemented in a perl script that takes as input the alignments generated from mummer. the pipeline consists of two steps: running mummer to find the seed alignments, and clustering these seed alignments by the weighted linear regression method to identify the mapping region. mummer's parameters can be tuned up such that only a consistent sequence of seeds is found, avoiding the extension phase in mummer that tries to fill the gaps between seeds using smith-waterman algorithm . our perl script parses mummer output file, and for each contig in the set it produces the two boundary coordinates of the region in the reference where the contig most likely aligns. we also give a score  to each projected mapping coverage based on the statistics and aggregate length of the set of seeds that compose each alignment as compared to the actual contig's length.

on the other hand, it is also possible to force mummer to make aggressive efforts to fill all the gaps and give as a result one extended alignment between the contig and the reference. notice this is the goal of the weighted linear regression algorithm, but as will be seen, mummer takes much longer while trying to align the gapped regions base by base.

the first thing to decide before running the algorithm is the window size. when long contigs are being aligned, a considerable number of insertions, deletions and miss-matches are expected, so the width of the diagonal region of the clustered matches should be widen. it is for this reason that we choose the size of the window to be proportional to the contig's length. this size is input to the program as a percentage that can go from 1%  to 100% .

we tested the performance of the algorithm as a function of window size  and the results were plotted in figure  <dig>  to evaluate the window size effect, we created artificial contigs picked randomly from regions in the reference chromosome, which itself is a randomly generated sequence of about  <dig> mb long. use of this long artificial chromosome allows for sufficient sampling and low rate of repeats. a total of  <dig> contigs were produced and were grouped based on their lengths into three subsets:  <dig> kb,  <dig> kb, and  <dig> kb, with  <dig> contigs in each subset. each contig was sprinkled randomly with regions of mutations, insertions and deletions according to a given percentage of the contig length. for instance, a mut-ins-del percentage of 10% indicates that the initial contig was first contaminated randomly with regions of mutations whose accumulated length amounts to 10% the length of the contig. then regions of insertions under the same principle were introduced, and likewise with deletion regions. since the location of the contig in the reference is known a priori, after these contigs are aligned to the reference using mummer and the predominant alignment region is predicted using our proposed algorithm, we can measure the percentage of the overlap  between the two regions . we did so for all window sizes from 1% to 20%, as shown in figure  <dig>  different levels of mut-ins-del were tested.

as expected, when mutations, insertions and deletions are low, a small window size is sufficient to maximize the pov between real and predicted regions, and as they are increased, longer windows are needed to accurately cluster all the exact matches of the alignment. notice that this window size is desired to remain as low as possible to improve the speed of the algorithm. our analysis suggests that a window size of 12% works well in all cases.

comparing alignment of several sets of contigs  to a reference chromosome  using only mummer and using mummer with weighted linear regression. the time using linear regression is shown as the sum between the time mummer takes to find the set of seeds plus the execution time of the weighted linear regression algorithm. .

CONCLUSIONS
we presented a method to cluster exact matches of pairwise sequence alignments by weighted linear regression which can be of great utility for genome assembly projects. this algorithm complements existing pairwise sequence alignment packages by avoiding their seed extension phase and replacing it with a weighted linear regression in the seeds of the alignment. it was experimentally shown that the gain in execution time can be outstanding without necessarily compromising the accuracy.

availability
the perl program is available at .

authors' contributions
ll conceived the idea of alignments clustering, designed and prototyped the weighted pairwise linear regression. ajg designed and implemented the modified algorithm and the experiments. ajg drafted the manuscript, and ll provided critical edits and important intellectual content. both authors have read and approved the final version of this manuscript.

