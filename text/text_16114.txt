BACKGROUND
flow cytometry  is a high-throughput technology that offers rapid quantification of a set of physical and chemical characteristics for a large number of cells in a sample. fcm is widely used in health research and treatment for a variety of tasks, such as providing the counts of helper-t lymphocytes needed to monitor the course and treatment of hiv infection, in the diagnosis and monitoring of leukemia and lymphoma patients, the evaluation of peripheral blood hematopoietic stem cell grafts, and many other diseases  <cit> . the technology is also used in cross-matching organs for transplantation and in research involving stem cells, vaccine development, apoptosis, phagocytosis, and a wide range of cellular properties including phenotype, cytokine expression, and cell-cycle status  <cit> .

currently, fcm can be applied to analyze thousands of samples per day. nevertheless, despite its widespread use, fcm has not reached its full potential due to the lack of an automated analysis platform to parallel the high-throughput data-generation platform. in contrast to the tremendous interest in the fcm technology, there is a dearth of statistical and bioinformatics tools to manage, analyze, present, and disseminate fcm data. there is considerable demand for the development of appropriate software tools, as manual analysis of individual samples is error-prone, non-reproducible, non-standardized, not open to re-evaluation, and requires an inordinate amount of time, making it a limiting aspect of the technology  <cit> .

one core component of fcm analysis involves gating, the process of identifying cell populations that share a set of common properties or display a particular biological function. currently, to a large extent, gating relies on the sequential application of a series of manually drawn gates  that define regions in 1- or 2-d graphical projections of fcm data. this process is manually time-consuming and subjective as researchers have traditionally relied on intuition rather than standardized statistical inference  <cit> . in addition, this process ignores the high-dimensionality of fcm data, which may convey more information than that provided by only looking at 1- or 2-d projections.

recently, a suite of several r packages providing infrastructure for fcm analysis have been released though bioconductor  <cit> , an open source software development project for the analysis of genomic data. flowcore  <cit> , the core package among them, provides data structures and basic manipulation of fcm data. flowviz  <cit>  offers visualization tools, while flowq provides quality control and quality assessment tools for fcm data. finally, flowutils provides utilities to deal with data import/export for flowcore. in spite of these low-level tools, there is still a dearth of software that helps automate fcm gating analysis with a sound theoretical foundation  <cit> .

in view of these issues, based on a formal statistical clustering approach, we have developed the flowclust package  to help resolve the current bottleneck. flowclust implements a robust model-based clustering approach  <cit>  which extends the multivariate t mixture model with the box-cox transformation originally proposed in  <cit> . as a result of the extensions made, flowclust has included options allowing for a cluster-specific estimation of the box-cox transformation parameter and/or the degrees of freedom parameter; the implementation section and the results and discussion section provide a detailed account of these extensions.

implementation
the model
in statistics, model-based clustering  <cit>  is a popular unsupervised approach to look for homogeneous groups of observations. the most commonly used model-based clustering approach is based on finite gaussian mixture models, which have been shown to give good results in various applied fields  <cit> . however, gaussian mixture models might give poor representations of clusters in the presence of outliers, or when the clusters are far from elliptical in shape, phenomena commonly observed in fcm data. in view of this, we have proposed in  <cit>  an approach based on t mixture models  <cit>  with the box-cox transformation to handle these two issues simultaneously. formally, given independent p-dimensional multivariate observations y <dig>  y <dig> ...,yn, and denoting by Ψ the collection of all unknown parameters, the likelihood for a mixture model with g components is

   

where wg is the probability that an observation belongs to the g-th component, and φp is the p-dimensional multivariate t density with mean μg , covariance matrix νg - <dig> Σg  and νg degrees of freedom.  is the value obtained upon transforming yi with the box-cox parameter λg; the transformation used is a variant of the original box-cox transformation which is also defined for negative-valued data  <cit> . finally,  is the jacobian induced by the transformation. please refer to  <cit>  for a detailed account of an expectation-maximization  algorithm  <cit>  for the simultaneous estimation of all unknown parameters Ψ =  where Ψg = .

the em algorithm needs to be initialized. by default, random partitioning is performed  <dig> times in parallel, and the one delivering the highest likelihood value after a few em runs will be selected as the initial configuration for the eventual em algorithm.

note that, in the model originally proposed in  <cit> , the box-cox parameter λ is set common to all components of the mixture, and the degrees of freedom parameter ν is fixed at a predetermined common value. in the latest development of our software, we have generalized the model such that ν may also be estimated, and both λ and ν are allowed to be component-specific, as reflected in equation .

when the number of clusters is unknown, we use the bayesian information criterion   <cit> , which gives good results in the context of mixture models  <cit> .

the package
with the aforementioned theoretical basis, we have developed flowclust, an r package to conduct an automated fcm gating analysis and produce visualizations for the results. its source code is written in c for optimal utilization of system resources and makes use of the basic linear algebra subprograms  library, which facilitates multithreaded processes when an optimized library is provided.

flowclust is released through bioconductor  <cit> , along with those r packages mentioned in the background section. the gnu scientific library  is needed for successful installation of flowclust. please refer to the vignette that comes with flowclust for details about installation; windows users may also consult the readme file included in the package for procedures of linking gsl to r.

the package adopts a formal object-oriented programming discipline, making use of the s <dig> system  <cit>  to define classes and methods. the core function, flowclust, implements the clustering methodology and returns an object of class flowclust. a flowclust object stores essential information related to the clustering result which can be retrieved through various methods such as summary, map, getestimates, etc. to visualize the clustering results, the plot and hist methods can be applied to produce scatterplots, contour/image plots and histograms.

to enhance communications with other bioconductor packages designed for the cytometry community, flowclust has been built with the aim of being highly integrated with flowcore. methods in flowclust can be directly applied on a flowframe, the standard r implementation of a flow cytometry standard  file defined in flowcore; fcs is the typical storage mode for fcm data. another step towards integration is to overload basic filtering methods defined in flowcore  in order to provide similar functionality for classes defined in flowclust.

RESULTS
analysis of real fcm data
in this section, we illustrate how to use flowclust to conduct an automated gating analysis of real fcm data. for demonstration, we use the graft-versus-host disease  data   <cit> . the data are stored in fcs files, and consist of measurements of four fluorescently conjugated antibodies, namely, anti-cd <dig>  anti-cd8β, anti-cd <dig> and anti-cd <dig>  in addition to the forward scatter and sideward scatter parameters. one objective of the gating analysis is to look for the cd3+cd4+cd8β+ cell population, a distinctive feature found in gvhd-positive samples. we have adopted a two-stage strategy  <cit> : we first cluster the data by using the two scatter parameters to identify basic cell populations, and then perform clustering on the population of interest using all fluorescence parameters.

at the initial stage, we extract the lymphocyte population using the forward scatter  and sideward scatter  parameters:

gvhd <- read.fcs

res <dig> <- flowclust, k = 1:8)

to estimate the number of clusters, we run flowclust on the data repetitively with k =  <dig> up to k =  <dig> clusters in turn, and apply the bic to guide the choice. values of the bic can be retrieved through the criterion method. figure  <dig> shows that the bic curve remains relatively flat beyond four clusters. we therefore choose the model with four clusters. below is a summary of the corresponding clustering result.

** experiment information **

experiment name: flow experiment

variables used: fsc-h ssc-h

** clustering summary **

number of clusters: 4

proportions:  <dig>   <dig>   <dig>   <dig> 

** transformation parameter **

lambda:  <dig> 

** information criteria **

log likelihood: - <dig> 

bic: - <dig> 

icl: - <dig> 

** data quality **

number of points filtered from above:  <dig> 

number of points filtered from below:  <dig> 

rule of identifying outliers: 90% quantile

number of outliers:  <dig> 

uncertainty summary:

min.       1st qu.   median    mean      3rd qu.   max.      na's

 <dig> e- <dig>  <dig> e- <dig>  <dig> e- <dig>  <dig> e- <dig>  <dig> e- <dig>  <dig> e- <dig>  <dig> e+02

the estimate of the box-cox parameter λ is  <dig> , implying a transformation close to a logarithmic one .

note that, by default, flowclust selects the same transformation for all clusters. we have also enabled the option of estimating the box-cox parameter λ for each cluster. for instance, if a user finds the shapes of the clusters significantly deviate from one another and opts for a different transformation for each cluster, he may write the following line of code:

flowclust, k =  <dig>  trans = 2)

the trans argument acts as a switch to govern how λ is handled: fixed at a predetermined value , estimated and set common to all clusters , or estimated for each cluster . incidentally, the option of estimating the degrees of freedom parameter ν has also been made available, either common to all clusters or specific to each of them. the nu.est argument is the corresponding switch and takes a similar interpretation to trans. such an option of estimating ν further fine-tunes the model-fitting process such that the fitted model can reflect the data-specific level of abundance of outliers. to compare the models adopting a different combination of these options, one may make use of the bic again. see additional file  <dig> for a graph with two bic curves corresponding to the default setting  and the setting with cluster-specific λ, respectively. little difference in the bic values between the two settings can be observed. in accordance with the principle of parsimony in statistics which favors a simpler model, we opt for the default setting here.

graphical functionalities are available to users for visualizing a wealth of features of the clustering results, including the cluster assignment, outliers, and the size and shape of the clusters. figure  <dig> is a scatterplot showing the cluster assignment of points upon the removal of outliers. outliers are shown in grey with the + symbols. the black solid lines represent the 90% quantile region of the clusters which defines the cluster boundaries. the summary shown above states that the default rule used to identify outliers is 90% quantile, which means that a point outside the 90% quantile region of the cluster to which it is assigned will be called an outlier. in most applications, the default rule should be appropriate for identifying outliers. in case a user wants finer control and would like to specify a different rule, he may apply the ruleoutliers replacement method:

ruleoutliers <- list

see additional file  <dig> for the corresponding summary. as shown in the summary, this rule is more stringent than the 90% quantile rule:  <dig> points  are now called outliers, as opposed to  <dig> points  in the default rule.

clusters  <dig>   <dig> and  <dig> in figure  <dig> correspond to the lymphocyte population defined with a manual gating strategy adopted in  <cit> . we then extract these three clusters to proceed with the second-stage analysis:

gvhd <dig> <- split, deadcells = 2))

the subsetting method split allows us to split the data into several flowframes representing the different cell populations. to extract the lymphocyte population , we may type gvhd2$lymphocyte or gvhd <dig>  which is a flowframe. by default, split removes outliers upon extraction. the deadcells =  <dig> list element is included above for demonstration purpose; it is needed only if we want to extract the dead cell population , too.

in the second-stage analysis, in order to fully utilize the multidimensionality of fcm data we cluster the lymphocyte population using all the four fluorescence parameters, namely, anti-cd <dig> , anti-cd8β , anti-cd <dig>  and anti-cd <dig> , at once:

res <dig> <- flowclust, k = 1:15)

the bic curve remains relatively flat beyond  <dig> clusters , suggesting that the model with  <dig> clusters provides a good fit. figure  <dig> shows a contour plot superimposed on a scatterplot of cd8β against cd <dig> for the sub-population of cd3-stained cells, which were selected based on a threshold obtained from a negative control sample  <cit> . we can easily identify from it the red and purple clusters at the upper right as the cd3+cd4+cd8β+ cell population. a corresponding image plot is given by figure  <dig>  also, see additional file  <dig> for the code used to produce all the plots shown in this article.

the example above shows how an fcm analysis is conducted with the aid of flowclust. when the number of cell populations is not known in advance, and the bic values are relatively close over a range of the possible number of clusters, the researcher may be presented with a set of possible solutions instead of a clear-cut single one. in such a case, the level of automation may be undermined as the researcher may need to select the best one based on his expertise. we acknowledge that more effort is needed to extend our proposed methodology towards a higher level of automation. currently, we are working on an approach which successively merges the clusters in the solution as suggested by the bic using some entropy criterion to give a more reasonable estimate of the number of clusters.

integration with flowcore
as introduced in the background section, flowclust has been built in a way such that it is highly integrated with the flowcore package. the core function flowclust which performs the clustering operation may be replaced by a call to the constructor tmixfilter creating a filter  object similar to the ones used in other gating or filtering operations found in flowcore . as an example, the code

res <dig> <- flowclust, k = 1:8)

used in the first-stage analysis of the gvhd data may be replaced by:

s1filter <- tmixfilter, k = 1:8)

res1f <- filter

the use of a dedicated tmixfilter-class object separates the task of specifying the settings  from the actual filtering operation , facilitating the common scenario in fcm gating analysis that filtering with the same settings is performed upon a large number of data files. the filter method returns a list object res1f with elements each of class tmixfilterresult, which directly extends the filterresult class defined in flowcore. users may apply various subsetting operations defined for the filterresult class in a similar fashion on a tmixfilterresult object. for instance,

subset], res1f)

outputs a flowframe that is the subset of the gvhd data upon the removal of outliers, consisting of the two selected parameters, fsc-h and ssc-h, only. another example is given by the split method introduced earlier in this section.

we realize that occasionally a researcher may opt to combine the use of flowclust with filtering operations in flowcore to define the whole sequence of an fcm gating analysis. to enable the exchange of results between the two packages, filters created by tmixfilter may be treated like those from flowcore; users of flowcore will find that filter operators, namely, &, |, ! and %subset%, also work in the flowclust package. for instance, suppose the researcher is interested in clustering the cd3+ cell population which he defines by constructing an interval gate with the lower end-point at  <dig> on the cd <dig> parameter. he may use the following code to perform the analysis:

rectgate <- rectanglegate)

s2filter <- tmixfilter, k = 5)

res2f <- filter

the constructors rectanglegate and tmixfilter create two filter objects storing the settings of the interval gate and flowclust, respectively. when the last line of code is run, the interval gate will first be applied to the gvhd data. flowclust is then performed on a subset of the gvhd data contained by the interval gate.

CONCLUSIONS
flowclust is an r package dedicated to fcm gating analysis, addressing the increasing demand for software capable of processing and analyzing the voluminous amount of fcm data efficiently via an objective, reproducible and automated means. the package implements a statistical clustering approach using multivariate t mixture models with the box-cox transformation  <cit> , and provides tools to summarize and visualize results of the analysis. the statistical model underlying flowclust extends the one originally proposed in  <cit> . the extensions have included modeling options allowing for a cluster-specific estimation of the box-cox parameter λ and the degrees of freedom parameter ν. the package contributes to the cytometry community by offering an efficient, automated analysis platform which facilitates the active, ongoing technological advancement.

availability and requirements
project name: flowclust

project homepage: 

operating systems: platform independent

programming language: c, r

other requirements: gsl, r, bioconductor

license: artistic  <dig> 

any restrictions to use by non-academics: flowclust depends on the mclust software, the use of which needs to abide by the terms stated in .

authors' contributions
kl and rg developed the methodology and software, and performed the analyses. fh participated in the development of the software. rrb and rg conceived of the study, and participated in its design and coordination. fh, rrb and rg helped kl draft the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
a copy of the flowclust package. the zip file contains the source code of the flowclust package  as a gzipped tarball for direct installation into r from a command-line interface. this current release is also available from bioconductor at .

click here for file

 additional file 2
a copy of the gvhd data file used in this article. the zip file contains the data file in fcs format used in the gvhd analysis. interested readers may go to  for a complete set of data files for the gvhd study  <cit> .

click here for file

 additional file 3
a graph with two bic curves corresponding to the settings with a common λ and cluster-specific λ respectively for the first-stage cluster analysis. little difference in the bic values between the two settings is observed. in accordance with the principle of parsimony which favors a simpler model, we opt for the default setting here.

click here for file

 additional file 4
result summary of the first-stage analysis with four clusters of the gvhd data. the rule used to identify outliers is 95% quantile.  <dig> points  are called outliers.

click here for file

 additional file 5
code to produce the plots in this article. r code to produce the plots in the gvhd analysis.

click here for file

 acknowledgements
the authors thank martin morgan, patrick aboyoun and marc carlson for their advice on the technical issues of building the flowclust package, and the two reviewers for suggestions that improved an earlier draft of the article. this work was supported by the nih grants eb <dig> and eb <dig>  and by the michael smith foundation for health research.
