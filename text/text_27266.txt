BACKGROUND
identifying the location of binding sites on proteins is of fundamental importance for a wide range of applications including molecular docking, de novo drug design, structure identification and comparison of functional sites. structural genomic projects are beginning to produce protein structures with unknown functions. therefore, efficient methods are required if all these structures are to be properly annotated.

many methods have been proposed for identifying the location of binding sites on proteins. laurie and jackson give an energy-based method for the prediction of protein-ligand binding sites  <cit> . bradford and westhead combine a support vector machine  approach with surface patch analysis to predict protein-protein binding sites  <cit> . chen et al. develop a tool, 3d-partner, for inferring interacting partners and binding models  <cit> . 3d-partner first utilizes impala to identify homologous structures  of a query protein sequence from heterodimer profile library. the sequence profiles of those templates are then used to search interacting candidates of the query from protein sequence databases by psi-blast. lo et al. develop a method for predicting helix-helix interaction from residue contacts in membrane proteins  <cit> . they first predict contact residues from sequences. their relationships are further predicted in the second step via statistical analysis on contact propensities and sequence and structural information. li et al. propose an approach for finding binding sites for groups of proteins  <cit> . it contains the following steps: finding protein groups as bicliques of protein-protein interaction networks , identifying conserved motifs, and searching domain-domain interaction databases. liu et al. extend the method of li et al. in  <cit>  and consider comparing 3d local structures  <cit> . guo and wang identify the binding sites by finding two similar 3d substructures  <cit> .

siteengine is a method that recognizes the regions on the surface of one protein that are similar to the binding sites of another. it uses geometric hashing triangles to transfer the input sites into the recognized region  <cit> . sumo is a system for finding similarities in arbitrary 3d structures or substructures of proteins. it is based on a unique representation of macromolecules using selected triples of chemical groups  <cit> . the web server pdbfun analyzes the structure and function of proteins at the residue level  <cit> . when comparing a complete protein with all complete protein structures in the pdb database, experiments show that all the existing approaches have recall values less than 50% implying that more than 50% of real binding sites cannot be reported by those existing approaches.

in this paper, we design a method to recognize regions of binding sites on the proteins. it consists of three steps: local sequence alignment, protein surface detection, and 3d structures comparison. experiments show that the average recall value of our approach is 82% and the average precision value of our approach is also significantly better than the existing approaches.

methods
given two complete protein structures, our task is to find the binding sites on the given proteins. our method contains three steps. step  <dig>  we do local sequence alignment at the atom level to get the alignments of conserved regions. these alignments of conserved regions may contain some gaps. step  <dig>  among the conserved regions obtained in step  <dig>  we use the 3d structure information to identify the surface segments. step  <dig>  for any pair of the surface segments identified in step  <dig>  we compute a rigid transformation to compare the similarity of the substructures in 3d space and output the qualified pairs as binding sites.

step 1: local sequence alignment
in pdb format files, each residue  is represented in the traditional order of atom records n, ca, c, o, followed by the side chain atoms  in order first of increasing remoteness, and then branch. the whole protein sequence of residues can be translated into a sequence of atoms based on this representation. the sequences of binding sites on the proteins are usually conserved at the atom level. when looking at the sitesbase  <cit> , we can see that the pair of binding sites form a conserved region that are well aligned at the atom level, where atoms of the same types are matched and all the unmatched atoms correspond to gaps. figure  <dig> is the result of sitesbase for proteins 1tu4d and 5p21a.

we use the standard smith-waterman's local alignment algorithm  <cit>  to find the conserved segments, where a matched pair of atoms of the same type has a score  <dig>  a mismatched pair of atoms of different types has a score -∞, a mismatch between an atom and a space has a score - <dig>  the local alignment algorithm can return a set of conserved segments in the alignment of the protein sequences of atoms.

we have done many experiments and found that the set of conserved segments output by the local sequence alignment algorithm always contains the pairs of binding sites in the sitesbase. the only problem is that the local sequence alignment algorithm outputs too many matched atoms. next, we will further reduce the matched atoms. after obtaining the set of conserved segments from the local sequence alignment, we focus on the columns with identical pairs of atoms and ignore the rest of columns in the following steps.

step 2: identifying surface segments
inspired by the work in  <cit> , we propose the following method to find surface segment of proteins. first, the protein is projected onto 3d grid in the euclidean space. for the grid, we use a step size of 1Å. second, grid points are marked as interior, surface or empty. a grid point is marked as protein if the point is within 2Å distance of an atom in the protein. a grid point is marked as empty if it is not protein point. a grid point is marked as interior if all its six neighbor grid points are protein points. a grid point is marked as surface if at least one of its six neighbor grid points is not protein point. an atom in the protein is a surface atom if it is within distance  <dig> Å of a surface point. figure  <dig> gives an example, where the dark grid points are surface points.

for a conserved segment output by the local sequence alignment algorithm, we consider all its subsegments containing at least  <dig> matched pairs of atoms. for such a subsegment, if both sequences on this subsegment have at least 2/ <dig> atoms as the surface atoms, we treat such a subsegment as a candidate binding site for further processing in the next step.

step 3: computing rigid transformations to match candidate binding sites
for any candidate binding sites obtained from step  <dig>  we will further test if the pair of 3d substructures can match well on such a site. precisely, we can find the set of subsegments in a given segment with alignment  a using the following rule: there exists a rigid transformation such that the distance between each pair of atoms in the same column of the subsegment is at most d, where d is a parameter given by the user. a rigid transformation is a transformation for protein 3d structure in the 3d space that preserves distances between any pair of points in the structure of protein. this requires us to solve the following protein 3d structure matching problem:

input: a segment with sequence alignment  a of two proteins, where each position in the alignment has two identical atoms, the 3d coordinate of each atom in the alignment, and a threshold d.

goal: find a set of subsegments with alignment  a such that for each output subsegment the euclidean distance between each pair of atoms in the same column is at most d.

the protein 3d structure matching problem can be solved in several ways. here we use the method in  <cit>  which is a faster version of the method in  <cit>  to solve the problem. the method in  <cit>  can compute a rigid transformation such that the distance between each matched pair of atoms is at most d, where ∈ =  <dig>  is a parameter to control the precision of the transformation. this is just an approximate rigid transformation, and it is good enough in practice.

testing the overlap of the proteins in 3d space
when computing the rigid transformation, we also require that the proteins do not overlap under the transformation. for each rigid transformation that can match the substructures of the candidate subsegment, we test if the proteins have overlap in 3d space under such a transformation as follows:

 <dig>  construct the grid in 3d space and mark each grid point as interior, surface or empty as in step  <dig> with respect to each of the given proteins.

 <dig>  let x be the number of grid points that are interior points for both proteins, x <dig> and x <dig> be the number of interior points of the first protein and the second protein, respectively. if x ≤  <dig>  × min{x <dig>  x2}, then we say that there is no overlap between proteins under the current rigid transformation and we output the matched substructures as the predicted binding sites.

RESULTS
comparison with existing methods
in this section, we compare our program bsfinder with three existing programs siteengine, sumo, and pdbfun. they use different methods to predict the binding sites of given proteins. siteengine  <cit>  is a method that recognizes the regions on the surface of one protein that are similar to the binding sites of another, and geometric hashing triangles are used to transfer the input sites into the recognized region  <cit> . sumo  <cit>  is a system for finding binding sites onto query structures, by comparing the structure of triplets of chemical groups against the binding sites found in pdb database  <cit> . the web server pdbfun  <cit>  locates binding sites in proteins at the residue level, and it analyzes structural similarity between any pair of residue selections  <cit> .

to compare bsfinder with the three existing systems, we use the proteins in pdb database, and select  <dig> proteins to compare with the whole database. note that the structural classification of proteins  database  <cit>  in  <cit>  aims to provide a detailed and comprehensive description of the structural and evolutionary relationships between all proteins whose structures are known. it provides  <dig> classes to separate all known protein folds. each class contains several different families. we choose  <dig> proteins from each class in different families such that there is only one entry from each family. since bsfinder allows users to give the value of d, we set the threshold d =  <dig> Å and output the matched sites with at least  <dig> atoms.

evaluation of prediction
to calculate the precision and recall value for each approach, we need to know which pair of binding sites output by the programs is real. here we look at sitesbase  <cit>  in  <cit> , which holds the set of known binding sites found in pdb. the precision value is defined as the number of sites output by the program that are confirmed in sitesbase divided by the total number of sites output by the program, where a output site is confirmed in sitesbase if at least two residues of the output sites are the same as the binding sites in sitesbase. as the sites output by sumo are very short, the sites output by sumo are confirmed if each one has at least one residue which is identical to that in sitesbase. ideally, all the sites output by the program are confirmed in sitesbase, in the case, the precision value is 100%. apparently, the larger the precision value is, the better the program is. the recall value is defined as the number of sites output by the program that are confirmed in sitesbase divided by the total number of binding sites more than two complete residues for given proteins in sitesbase. if all the binding sites for given proteins in the sitesbase can be output by the program, then the recall value is 100%. again, the larger the recall value is, the better the program is.

we use the  <dig> selected proteins to compare with the whole pdb database. the results are shown in table  <dig>  the average numbers of the sites output by bsfinder, siteengine, sumo, and pdbfun are  <dig>   <dig>   <dig>  and  <dig>  respectively. on average, pdbfun reports the smallest number of sites and the other three systems output approximately the same number of sites. the average numbers of the confirmed sites output by bsfinder, siteengine, sumo, and pdbfun are  <dig>   <dig>   <dig>  and  <dig>  respectively. see figure  <dig> 

†the first number is the number of output sites reported by the program, the second number is the number of confirmed sites reported by the program;

‡the first number is the precision value  for the program, the second number is the recall value  for the program;

the precision and recall values for  <dig> proteins output by four programs are shown in table  <dig>  apparently, bsfinder has the largest precision and recall values for most of the cases. on average, the precision value of bsfinder is 34% while the precision values for siteengine, sumo, and pdbfun are 21%, 11%, and 15%, respectively. the average recall value of bsfinder is 82% while the average recall values for siteengine, sumo, and pdbfun are 47%, 25%, and 11%, respectively. see figure  <dig>  the value of recall is very important in practice. from the experiment results, we know that the existing programs have lower values of recall.

the possible reasons that our method can get better results might be  we use the surface information,  we look at the similarity of two local 3d substructures in terms of rigid transformation while the previous methods use triples of atoms or pairs of amino acids and  the volumes of the protein molecules are considered when the rigid transformation is computed.

comparison of running time
to compare the running time of different programs, we use a pentium  <dig>  to run all four programs. based on  <dig> selected proteins, the average running times of bsfinder, siteengine, sumo, and pdbfun for comparing each given protein with the whole pdb database are roughly  <dig> minutes,  <dig> minutes,  <dig> minutes, and  <dig> minutes, respectively. see table  <dig>  thus, bsfinder is the second slowest program. however, it is still faster than siteengine which has the highest average values of precision and recall among the three existing programs.

performance of programs for different families
to see the performance of programs for different protein families, we look at three different families -binding folds) and select five proteins from each family. the average numbers of matched sites output by bsfinder for three families are  <dig>   <dig>  and  <dig>  respectively. the average numbers of confirmed sites for three families are  <dig>   <dig>  and  <dig>  respectively. the average precision values for three families are 45%, 21% and 53%, respectively. the average recall values for three families are 94%, 60% and 96%, respectively. the results are shown in figure  <dig> 

g proteins family in p-loop folds
we select  <dig> proteins  from g proteins family in p-loop folds. the results are shown in table  <dig>  the precision values of bsfinder  are larger than those of other three programs. the recall values of bsfinder  are more than 90%, while the recall values of the other three programs are almost less than 40%.

†the first number is the number of output sites reported by the program, the second number is the number of confirmed sites reported by the program;

‡the first number is the precision value  for the program, the second number is the recall value  for the program;

pyp-like family in profilin-like folds
we select  <dig> proteins  from pyp-like family in profilin-like folds. the results are shown in table  <dig>  the precision values of bsfinder  are similar to those of the other three programs. the recall values of bsfinder  are larger than that of the other three programs.

†the first number is the number of output sites reported by the program, the second number is the number of confirmed sites reported by the program;

‡the first number is the precision value  for the program, the second number is the recall value  for the program;

fad-linked reductases family in fad/nad-binding folds
we select  <dig> proteins  from fad-linked reductases family in fad/nad-binding folds. the results are shown in table  <dig>  the precision values of bsfinder  are all more than 50%. the recall values of bsfinder  are very close to 100%.

†the first number is the number of output sites reported by the program, the second number is the number of confirmed sites reported by the program;

‡the first number is the precision value  for the program, the second number is the recall value  for the program;

a case: we compare two proteins 4vhba and 1cqxa. the cartoon version of the protein 3d structures are shown in figure  <dig>  and the matched parts of structures are shown as the sticks fashion. bsfinder finds a rigid transformation that matches residues 84- <dig> from 4vhba to residues 84- <dig> from 1cqxa, residues 95- <dig> from 4vhba to residues 95- <dig> from 1cqxa, and residues 125- <dig> from 4vhba to residues 125- <dig> from 1cqxa. see figure  <dig>  the three pairs of matched sites are confirmed in sitesbase. note that these three pairs can be matched under one rigid transformation simultaneously.

searching similar binding sites
bsfinder can use a binding site to search the similar sites in the protein structures database. siteengine can search a given functional site on a large set of complete protein structures. sumo can search for the given 3d site of interest among the structures of the pdb. past  <cit>  is a web service based on an adaptation of the generalized suffix tree and relies on a linear representation of the protein backbone  <cit> . past can find the functional sites from the protein structures database similar to the given binding site.

we randomly select the  <dig> binding sites with different types from the sitesbase and search the whole pdb database. the average numbers of the sites output by bsfinder, siteengine, sumo, and past are  <dig>   <dig>   <dig>  and  <dig>  respectively. the average numbers of the confirmed sites output by bsfinder, siteengine, sumo, and past are  <dig>   <dig>   <dig>  and  <dig>  respectively. see figure  <dig>  bsfinder finds a relatively smallest number of output sites, and the number of confirmed sites output by bsfinder is the biggest. apparently, bsfinder has the largest precision and recall values for most of the cases. on average, the precision value of bsfinder is 39% while the precision values for siteengine, sumo, and past are 27%, 22%, and 24%, respectively. the average recall value of bsfinder is 86% while the average recall values for siteengine, sumo, and past are 58%, 51%, and 45%, respectively. see figure  <dig> 

discussion
the gaps in binding sites
in the first step of our algorithm, we do sequence alignment where each letter is an atom. this allows the matched sites to have some missed atoms, and each missed atom represents one gap in the binding sites. step  <dig> is very important for predicting binding sites on proteins. among the output sites,  <dig> of them do not contain any gap,  <dig> contain one gap,  <dig> contain two gaps,  <dig> contain three gaps,  <dig> contain four gaps,  <dig> contain five gaps and  <dig> contain more than five gaps. the gap distribution of the confirmed sites are  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig>  and  <dig> . the confirmed sites have higher proportion of the four or more gaps among all output sites reported by bsfinder.

the power of surface detection
in step  <dig> of our algorithm, we identify the surface atoms in the given proteins and rule out the substructures in which less than 2/ <dig> of atoms are the surface atoms for further calculation of the rigid transformation. to demonstrate the effect of step  <dig>  we compare the final version of bsfinder with the version without step  <dig>  by adjusting the parameters, the final version of bsfinder has improved precision value while the recall value remains essentially unchanged. the average precision values for bsfinder without step  <dig> and the final version of bsfinder are 29% and 34%, respectively. the average recall values for bsfinder without step  <dig> and the final version of bsfinder are 83% and 82%, respectively. therefore, by doing step  <dig> the precision value can be improved by about 5%. this is a significant improvement.

CONCLUSIONS
we have developed a program for finding binding sites on the given proteins. our method uses the 3d structure information to detect the similar surface regions. experiments show that our program outperforms all existing programs.

competing interests
the authors declare that they have no competing interests.

authors' contributions
fg is in charge of the software package development and experiment design. lw is in charge of algorithm design and manuscript preparation. all authors read and approved the final manuscript.

