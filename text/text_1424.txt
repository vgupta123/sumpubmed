BACKGROUND
gene clusters are genomic regions that comprise multiple similar copies in close proximity, generated by duplication from a common ancestral segment. these duplicated segments often contain genes, but we also include non-genic regions in this study. in the human genome, gene clusters are of special interest to researchers because of their genetic and molecular biological importance. many clusters are implicated in diseases having a genetic component, such as cancer and immune system disorders.

to understand how gene clusters are involved in these diseases, inferring their evolutionary histories is very helpful. constructing a phylogenetic tree or a multiple sequence alignment is the most common initial step when studying gene cluster evolution. both of these approaches assume that all of the positions in a duplicated copy will show similar divergences from the original segment, so we expect only one phylogeny for a given set of dna sequences  <cit>  and only one multiple alignment for all of their orthologous sequences  <cit> . however, existing phylogenetic tree construction methods produce different tree topologies depending on which part of each duplicated segment is taken as the input data, while multiple sequence alignments sometimes align non-orthologous parts of the sequences.

one of the major causes of these difficulties is the occurrence of so-called “gene conversion” events. a conversion event occurs between two paralogous  segments that were formed by a previous duplication. during such an event, part of one segment is copied to its homologous location in the other segment, overwriting that portion of the homologous sequence. this makes the target sequence a mosaic of sub-segments with varying divergences from the source sequence . conversion events are typically caused by dna double-strand breaks or by a double holliday-junction dissolution mechanism  <cit> .

many computational methods for detecting gene conversion have been developed. when we consider methods requiring only dna sequence data, they are classified in two main categories. the first includes phylogenetic-based methods, which identify gene conversions by finding breakpoints that change the tree topology, using either the maximum parsimony principle  <cit> , maximum likelihood method  <cit> , or bayesian methods such as hidden markov models  <cit> . the second category contains methods based on sequence similarity, which search for segments of unusually high similarity within two homologous regions  <cit> . rdp <dig>  <cit>  integrated  <dig> existing methods, including  <cit> . note that methods which require additional information beyond the dna sequences, such as the true duplication history or polymorphism data, are excluded in this study.

although many programs for detecting gene conversion have been released, and some have wider currency than others, little is known about their relative merits and demerits, especially in gene clusters. several studies have evaluated the performance of the major methods.  <cit>  suggested using simulation data with varying levels of recombination, genetic diversity, and mutation rate.  <cit>  performed an evaluation with real datasets where the “true” conversions were already known. more recently,  <cit>  and  <cit>  compared conversion detection methods on simulated data with higher conversion rates than previous studies, even including multiple overlapping conversions in the same region. other studies  have developed dna-evolution simulators that incorporate conversion events, which could be used to evaluate conversion detection methods. all of these results can provide useful information for investigating gene conversions when a set of short homologous sequences is already given; however they do not clearly reveal which conversion detection method is best for large-scale evolutionary studies , because they focus only on microevolutionary processes for purposes of population genetics studies. although sequence evolution simulators that do include large-scale events such as insertion and deletion have been developed in other studies , they do not consider conversion events. hence none of these previous evaluations or simulators adequately accounts for gene clusters containing multiple sets of homologous segments of varying length. we have developed a method to evaluate the performance of conversion detection programs with regard to untangling gene cluster histories. we compared several of the major programs with a new one from our lab  <cit>  using simulation data that resembles gene clusters containing many unknown homologous sequence pairs generated by repeated duplications.

methods
simulation of gene cluster evolution, including conversion
the simulation process starts with a  <dig> kb human dna sequence that contains no duplications . the sequence is modified with large-scale events such as duplications, deletions, and conversions, interspersed with small-scale mutations. the latter are simulated based on the hky substitution model  <cit> , while the distribution of duplication and deletion events was obtained from  <dig> human gene clusters from  <cit>  in which duplications were detected using the monte carlo markov chain method. our parameters for generating these events, such as the length of the duplicated or deleted region, the space between the original copy and the new one, and the orientation of the new one, are modeled from these empirical distributions. for gene conversions we used software from  <cit> , which detects conversions genome-wide, and ran it on the human genome to obtain our distribution for modeling conversion events.

each conversion event must occur between two paralogous sequences, which were formed by previous duplications. however, conversion events are allowed to occur orthogonally to duplication events, so that any duplicated segment can undergo conversion with any other segment. for example, if region a is copied to region b by one duplication and b is copied to c by another duplication, then  are paralogous as well as  and , so conversion can happen between a and c. we also consider partial copying of previously duplicated segments , and furthermore, several previously duplicated tandem segments  can be duplicated again together, as a single region. these factors make the paralogous relationships more complicated. we have implemented a program to generate a true sequence alignment according to specified duplication and deletion histories, so that we can keep track of all paralogous pairs.

based on the empirical parameter distributions, a series of duplication, deletion, and conversion events is generated.  to simulate the evolution of gene clusters at various complexity levels, several sets of cluster data were generated that experienced different numbers of events. the order of the large-scale events is decided randomly, and these are interspersed with nucleotide substitutions. in our simulation, the times of duplication and conversion events are assigned according to a uniform distribution along each species lineage. figure 1b shows an example of a simulation dataset indicating the time of each duplication and conversion event. the other properties of each event are chosen according to their respective empirical distributions. for example, when simulating a conversion event, a pair of paralogous segments is chosen at random from all true local self-alignments formed by the preceding duplications, and then the location and length of the converted region within those segments are determined using the applicable distributions.

we simulated gene cluster evolution for three primate clades: humans, old world monkeys , and new world monkeys , starting from a common ancestral sequence. nwm splits from the human lineage first, followed by owm . the nwm and human sequences are roughly 89% similar, while owm has about 93% similarity to human  <cit> . by mutating these sequences based on the hky model, we can get divergence rates that are quite similar to the real genome data. however, we cannot assume that the entire sequence is under neutral evolution. in order to design a more realistic evolutionary model, purifying selection in regions such as protein-coding exons and other functional elements should be considered. according to  <cit> , about 5% of the human genome is covered by conserved elements, and their lengths average around 100- <dig> bp in a geometric distribution. we model this by choosing regions randomly from such a distribution until they cover 5% of the starting ancestral sequence, and set them as the conserved regions in this simulation. we assume that they evolve about 30% slower than the neutral sites on average .

all of the properties taken into account when designing the simulation datasets are summarized in table  <dig> 

location of duplication
length of duplicated region
space between the original copy and the new one
location of deletion
length of the two paralogous sequences
space between the two paralogous sequences
relative orientation of the two paralogous sequences
location of the two paralogous sequences
location of converted region
length of converted region
lengths of elements
preparation of data for running conversion detection programs
the pipeline from hsu et al.  <cit>  includes a procedure for identifying orthologs for each pair of paralogous sequences, given the corresponding gene cluster sequences from multiple species. however, most software for detecting gene conversions  requires a multiple alignment of homologous sequences from multiple species as input. in order to run such programs on a gene cluster, we need to identify all sets of homologous sequences and construct the multiple alignment in advance. the evaluation of alternative methods for doing this is beyond the scope of this study. since the only requirement for running the pipeline from hsu et al. is to provide sequences as input data, we used their entire package including its orthology detection method. for the other programs, we used “true” multiple alignments of the true homologous sequences.

the true multiple alignments are obtained as follows. first, the true orthologous sequences are identified in each simulation dataset using the true evolutionary history from the simulation process. for example, suppose we have two species called species <dig> and species <dig>  right after these split, their sequences align perfectly as a long orthologous alignment a, shown as a bold line in figure 2a. if a region a in species <dig> is copied to b by a duplication event, then the orthologous alignment is split into two alignments a <dig> and a <dig> and an additional orthologous alignment b is also formed in the new duplicated region between them, as in figure 2b. subsequent duplication events can generate multiple additional alignments, such as the one in figure 2c that adds two alignments, c and d. by keeping track of these alignments while applying the evolutionary events, the true orthologous sequences can be identified. second, the true self-alignments  are also computed based on the series of evolutionary events in each species. new self-alignments are added by duplications, and they can be split by subsequent events. as each simulated event occurs, new alignments and changes in old alignment boundaries are tracked so that the final true self-alignments can be obtained. finally, a multiple alignment is generated for each set consisting of a pair of paralogous sequences in one species and all of their orthologous sequences in the other species. the paralogous sequences correspond to a self-alignment, so they can be obtained from the true self-alignments already computed. their orthologs are selected from the true orthologous alignments. for example, suppose we have a self-alignment of segments c and d in species <dig> from figure 2c, and their orthologs e and f are identified from the true inter-species alignments; then a multiple alignment of c, d, e, and f is constructed.

RESULTS
we chose four methods of detecting gene conversion that are able to identify multiple breakpoints given a set of homologous sequences: hsu’s  <cit> , geneconv  <cit> , rdp <dig>  <cit> , and rechmm  <cit> . we ran these programs on simulation data generated using various parameters for the complexity of the evolutionary processes. one parameter is the number of duplication and conversion events. first, d duplications are simulated before the split of nwm and human, for d = { <dig>   <dig>   <dig>  12}. next, an additional d duplications are applied to each species before the split of owm and human, and c conversion events are also simulated in the paralogous sequences of each species, where c = { <dig>   <dig>   <dig>  8} respectively. finally, d duplications and c conversion events are applied to all species after the split of owm and human. in the end, we get three sequences , each having experienced 3d duplications and 2c conversion events, plus interspersed small-scale mutations. each such dataset comprises approximately 50- <dig> pairs of paralogous segments, and we generated five replications for each of the four settings of . another parameter is the selection model for applying the nucleotide mutations. one uses only neutral evolution, while the other includes both neutral evolution and purifying selection. the conserved sites under purifying selection are assigned as described in the methods section. the resulting datasets are available from our website, at http://www.bx.psu.edu/miller_lab/.

all of the conversion detection programs were then run  on each of the generated datasets, except that rechmm was not run on all of the replications because it is very slow. the rechmm method may take a day or longer to process a dataset with complex settings, while the others typically finish within an hour, even for complicated cases. figure  <dig> compares the performance of the four detection methods. panels a-d show the results obtained for datasets simulating only neutral evolution, while e-h are for datasets modeling both neutral evolution and purifying selection. in a we calculated the fraction of converted basepairs that were detected correctly. on average, hsu’s method detected about 51% of the true converted positions, geneconv 5%, rdp <dig> 11%, and rechmm 38%. we also compared the false discovery rates  by calculating the fraction of called basepairs that were incorrect. as panel b shows, hsu’s method had an fdr of about 82%, geneconv 52%, rdp <dig> 44%, and rechmm 91%. in this comparison of the accuracy of conversion boundaries, hsu’s method shows higher sensitivity than the others, while rdp <dig> has the fewest false positives.

we also measured the performance of the four programs for detecting the existence of gene conversion, i.e. how many pairs of paralogous sequences which experienced conversion are detected as such, even if the exact endpoints of the conversion are not identified correctly. in figure 3c, the sensitivity of hsu’s method by this measure is quite similar to panel a, but the fdr  drops by 33% compared to panel b. for geneconv, rdp <dig>  and rechmm, the sensitivities increase by 16%, 7%, and 16% and the fdrs decrease by 9%, 2%, and 2% respectively. a possible reason for this may be that hsu’s method tends to detect the boundaries of converted regions as wider than their true extent, while the other three methods tend to identify boundaries that are too narrow.

when we model purifying selection in addition to neutral evolution, the four performance metrics are quite similar to the simpler model, except that the sensitivity of rechmm improves . overall, for both selection models, the sensitivity seems to be roughly inversely proportional to the fdr. in terms of the detection sensitivity, hsu’s method and rechmm show the best performance. when we consider both sensitivity and fdr, hsu’s method outperforms the others for detecting the existence of gene conversion events, but has a relatively high fdr when identifying the extent of the converted regions.

the relative performance of the four methods in terms of sensitivity and fdr is mostly independent of the number of events. however, there is an overall tendency for the sensitivity to drop and the fdr to rise as the evolutionary complexity increases, e.g. when there are more events. there are exceptions to this, for example the sensitivity increases significantly between the 2nd and 3rd columns in figure 3a for hsu’s method and rechmm. these apparent anomalies may be due to the influence of other parameters from table  <dig> on the complexity, since we have only a few replications and statistical variation in those other parameters could have a sizeable impact.

CONCLUSIONS
we evaluated four gene conversion detection methods using simulated dna sequence datasets for gene clusters that were generated by an evolutionary model. we found that hsu’s method and rechmm showed the highest sensitivity for detecting both the existence and extent of conversion events, but their fdrs are higher than those of geneconv and rdp <dig>  interestingly, the fdr of hsu’s method drops drastically when detecting only the existence of conversion in a paralogous pair, as opposed to the exact boundaries of the converted region. if we consider both the detection power and the false positives, hsu’s method would be the most recommended for gene cluster evolution studies. however, it may need additional careful post-processing for filtering false positive errors.

our evaluation method is still in its infancy, although it already provides useful information. our next short-term plan is to extend our simulation tool for a larger number of species and to add more conversion detection methods that were excluded from this study . that may require developing a post-processing pipeline to extend each method to generate multiple breakpoints. we also plan to compare our evaluation results with those obtained using previous dna-evolution simulators that model only micro-scale events. another future goal is to design a more realistic evolutionary model for gene clusters by reflecting additional evolutionary events such as codon and amino acid substitution, positive selection, insertion of interspersed repeats, and structural variations such as inversions and small-scale deletions and insertions. by modeling evolutionary processes in gene clusters more accurately, our ongoing efforts can contribute to improving software for the analysis of gene cluster evolution.

competing interests
the authors declare that they have no competing interests.

authors' contributions
gs and ch designed the method. gs implemented the simulation program and analyzed the results. wm initiated, supervised, and coordinated the work. gs and cr wrote and finalized the manuscript, and all authors read and approved it.

