BACKGROUND
as our acquaintance with rna's diverse functional repertoire develops  <cit> , so does demand for faster and more accurate tools for rna sequence analysis. in particular, comparative genomics approaches hold great promise for rna, due to the well-behaved basepairing correlations in an rna gene family with conserved secondary structure . whereas the structural signal encoded in a single rna gene is rather weak and may be barely  distinguishable from the secondary structure of a random sequence  <cit> , the covariation signal increases with every additional sequence considered.

many programs for comparative analysis of rna require the sequences to be prealigned  <cit> . this can be a source of error, since misaligned bases can add noise that swamps the covariation signal. the most recent of these methods allows for some uncertainty in the alignment  <cit> . more generally, one can view the alignment and structure prediction as a combined problem, to be solved simultaneously. this is the approach taken in this paper, and by earlier programs such as foldalign  <cit> , dynalign  <cit> , carnac  <cit> , qrna  <cit>  and our dart library, introduced in a previous paper  <cit>  and extended here. in this framework, fixing of the alignment can be viewed as a partial constraint on the simultaneous alignment/folding problem.

a powerful, general dynamic programming algorithm for simultaneously aligning and predicting the structure of multiple rna sequences was developed by david sankoff  <cit> . the energy-based folding of zuker et al  <cit>  and recent approaches based on stochastic context-free grammars   <cit>  are both closely related to sankoff's algorithm. the method takes time o and memory o for n sequences of length l. this is prohibitively expensive at the time of writing, except for fairly short sequences, which has motivated the development of various constrained versions of these algorithms  <cit> .

the purpose of this paper is to report our progress on general pairwise constrained versions of sankoff's algorithm . the overall aim is the simultaneous alignment and structure prediction of two rna sequences, x and y, subject to an scfg-based scoring scheme and user-supplied constraints. additionally, we wish to be able to parameterize the model automatically from training data. without constraints, the above tasks are addressed by the resource-intensive cyk and inside-outside algorithms; here, we present constrained versions of these algorithms that work in reduced space and time .

our system of constraints is quite general. previous constrained versions of sankoff-like algorithms, such as the programs dynalign  <cit>  and foldalign  <cit> , have been restricted to "banding" the algorithm e.g. by constraining the maximum insertion/deletion distance between the two sequences or the maximum separation between paired bases. alternately, constraints on the accessible structures  <cit>  or alignments  <cit>  have been described.

the algorithms described here can reproduce nearly all such banding constraints and, further, can take advantage of more flexible sequence-tailored constraints. specifically, the fold envelopes determine the subsequences of x and y that can be considered by the algorithm, while the alignment envelope determines the permissible cutpoints in the pairwise alignment of x and y. the fold envelopes can be used to prune the search over secondary structures , while the alignment envelopes can be used to prune the search over alignments . the fold envelopes can be precalculated for each sequence individually , and the alignment envelope by comparing the two sequences without regard for secondary structure ; both types of pre-comparison are much more resource-friendly than the unconstrained sankoff-like algorithms. the design of the constrained algorithms is discussed using concepts from object-oriented programming: the dynamic programming matrix can be viewed as a sparsely populated container, whereas the main loop that fills the matrix is a complex iterator  <cit> . the algorithms have been implemented in a freely available program for rna sequence alignment, stemloc, which also includes algorithms to determine appropriate constraints in an automatic fashion. results demonstrating the program's efficient resource usage are presented.

the stemloc program also implements various familiar extensions to pairwise alignment, including local alignment  <cit> , waterman-eggert n-best suboptimal alignments  <cit>  and progressive multiple alignment  <cit> . although the envelope framework, rather than these extensions, is the main focus of this paper, implementation of the extensions is straightforward within this framework, and is briefly described.

RESULTS
to investigate the comparative resource usage of the various different kinds of constraint that can be applied using fold and alignment envelopes, stemloc was tested on  <dig> pairwise alignments taken from version  <dig>  of rfam  <cit> , spanning  <dig> different families of functional noncoding rna. each chosen test family had a consensus secondary structure published independently in the literature, and no two sequences in the test set had higher than 60% identity.

the embl accession numbers and co-ordinates of all sequences are listed in table  <dig>  the table shows the performance of stemloc using the 1000-best fold envelope and the 100-best alignment envelope. the various rfam families are s <dig>  the ribosomal s <dig> leader sequence; the u <dig> and u <dig> spliceosomal small nucleolar rnas; ire, the iron response element from utrs of genes involved in vertebrate iron metabolism; glms, the glucosamine-6-phosphate activated mrna-cleaving ribozyme; purine, the prokaryotic purine-binding riboswitch; and 6s, the e.coli polymerase-associated transcriptional repressor. the following three test regimes were used, each representing a different combination of fold and alignment envelopes:

n-best alignments, all folds
the alignment envelope containing the n best primary sequence alignments, with the unconstrained fold envelopes . this is the red curve in figures  <dig>   <dig>   <dig>   <dig>   <dig>  13

n-best folds, all alignments
the unconstrained alignment envelope, with the fold envelopes containing the n best single-sequence structure predictions . this is the green curve in figures  <dig>   <dig>   <dig>   <dig>   <dig>  13

n-best folds, 100-best alignments
the alignment envelope containing the  <dig> best primary sequence alignments, with the fold envelopes containing the n best single-sequence structure predictions . this is the blue curve in figures  <dig>   <dig>   <dig>   <dig>   <dig>  13

in the first two tests, n was varied from  <dig> to 100; in the latter test, n was varied from  <dig> to  <dig>  the lower ceiling for n in the first two tests was imposed by resource limitations. note that the endpoint of the red curve , which occurs at n =  <dig>  coincides with the asymptotic limit of the blue curve  at high n.

a range of different values for the parameter n was used to test the above three strategies. as n was increased over the range, the size of the corresponding fold or alignment envelopes was found to be strongly correlated . however, the actual size of the fold/alignment envelopes in each particular test case varies widely , perhaps due to variable factors such as the sequence lengths, compositions and/or identities. since it is easier to control the envelope construction parameter n than to control the envelope sizes directly, the following section will report performance indicators as a direct function of n, rather than as a function of the strongly-correlated but widely-varying envelope sizes. we report performance indicators for stemloc as follows. let a and b be alignments of a given pair of sequences, each represented as a set of aligned residue-pairs {}. suppose that a is the alignment according to rfam, and b is the alignment predicted by stemloc. then define the alignment sensitivity to be |a ∩ b|/|a| and the alignment specificity to be |a ∩ b|/|b|. further, let s and t be possible secondary structures for a given sequence, each represented as a set of base-pairs {}. suppose that s is the published structure, and t is the structure predicted by stemloc. then the basepair sensitivity is |s ∩ t|/|s| and the basepair specificity is |s ∩ t|/|t|.

these performance indicators are averaged over all  <dig> pairwise alignments and plotted for the three test regimes in figure  <dig> , figure  <dig> , figure  <dig>  and figure  <dig> . as can be seen, the n -best alignment regime empirically seems to achieve an asymptotic maximum performance around n ≃  <dig> , while the n -best fold envelope underperforms compared to the unconstrained fold envelope up to around n ≃  <dig>  the tests were performed on a  <dig>  ghz apple powerpc g <dig>  the resource usages of the test regimes are plotted in figure  <dig>  and figure  <dig> . the resource usage of the constrained algorithms is substantially reduced when the envelopes are smaller . this is especially notable when contrasting the resource usage of the "n -best folds, all alignments" test with the more constrained "n -best folds, 100-best alignments" test.

three main conclusions can be drawn from these data. first, allowing the search to consider more than a single alignment greatly improves structure prediction . second, constraining the alignment search while exhaustively scanning fold space  outperforms constraining the fold search while exhaustively scanning alignment space . third, the hybrid strategy , which partially constrains both searches, approaches the alignment-constrained, fold-unconstrained strategy  in performance, with a significant saving in cpu and memory resources. memory is the limiting factor in pairwise rna alignment, and the primary motivation for constraints. for example, without constraints, alignment of two 16s ribosomal subunits using the stemloc grammar would take approximately  <dig> terabytes. 

based on the results of these tests, the default envelope options for stemloc were chosen to be the 100-best alignment envelope and the 1000-best fold envelope. the performance of stemloc with these envelopes on each of the pairwise test alignments is given in table  <dig> 

discussion
the algorithms presented here include constrained versions of pair-scfg dynamic programming algorithms that run in significantly reduced space and time. the primary advance over previous work is the simultaenous imposition of fold and alignment constraints, including alignment constraints that are more general than others previously described. thes constraints lead to significant reductions in requirements for processor and memory usage, which will increase the length of rna sequences that can be analyzed on mainstream computer hardware.

these algorithms have been used to implement stemloc, a fast, efficient software tool for multiple rna sequence alignment implementing numerous extra features such as local alignment, waterman-eggert n -best suboptimal alignment and progressive multiple alignment. the source code for the program is freely available from .

the results given here should be regarded as preliminary. for example, we have only tested the pairwise alignment functionality; full evaluation/optimisation of the multiple alignment algorithm remains. rather than using the cyk algorithm, one could use the inside-outside algorithm with a decision-theoretic dynamic programming step to maximize expected performance  <cit> . as noted in the parameterization section, it might also be possible to improve on the training procedure. we are also considering ways of elaborating the grammar to include basepair stacking terms. these and other improvements we hope to address in future work.

CONCLUSIONS
rna sequence analysis has generated considerable interest over recent years, as many new roles for rna in the cell have come to light. rna genes and regulatory elements are components of many molecular systems and comparative genomics is a powerful way to probe this function, perhaps even more so for rna than for protein . furthermore, statistical modeling of rna evolution continues to play a fundamental role in the phylogenetic classification of new forms of life.

these biological motives have driven a demand for rna sequence analysis tools that are faster, slimmer and more scaleable. it is hoped that the algorithms and approaches described here, together with development and analysis of rna evolutionary models  <cit> , may expand the applications of rna informatics.

