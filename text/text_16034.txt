BACKGROUND
sharing and communicating about large and intricate datasets produced by high throughput sequencing can be a challenging task. visual channels are an effective way to explore data. however, the accelerating increase in data quantity is pushing the limits of current approaches for representing these datasets visually without sacrificing accuracy or graphical perception. overall data volume is growing: both the amount of data per study and the number of subjects. thus, more effective visualization techniques are needed to understand the most challenging genomic sequencing datasets.

horizon charts  <cit>  have proved to be an effective  <cit>  visualization approach when working with multi-metric time series encoded data. in high throughput sequencing, bed format files are extremely widely-used for capturing values associated with genomic coordinates. in time series, metrics are monitored over time, however, bed files use genomic coordinates. we have adapted a time series javascript library to the genomic domain. we call our new library dnaism.

state of the art
we are not aware of any implementation of horizon charts within the domain of genomics research or clinical genetics. in the context of web-based genome browsers  <cit> , these tools use traditional line charts  to visually represent the variables of interest . for cases  in which the number of variables we are interested in is high, the effectiveness of this traditional mechanism declines significantly, forcing the user to load or display multiple tracks on different pages. horizon charts will help researchers deal with this common task and scenario, as the visual technique minimizes the visual space necessary to view large amounts of data without losing graphical perception fig.  <dig> 
fig.  <dig> horizon charts emerge from applying a set of changes to traditional line graphs . we start by coloring the underlying area of the line graph, using different hues for positive and negative values. next, we divide the graph into bands and apply a gradient of color that increases along with the quantitative value of the variable we are investigating . in the next step, negative values are flipped over the baseline , effectively reducing the required vertical space by two fold. in a final step, bands are collapsed making all of them start at the baseline and providing another level of space reduction . we used this technique to rapidly identify problematic samples when performing quality control on large scale sequencing results. you can see the read depth across whole genome sequences from  <dig> rhesus macaque samples  for genomic region chr17: <dig> m- <dig> m . there are regions consistently underrepresented across all the samples and sample  <dig> has low coverage across the whole genomic region. note that the variable we are exploring in this example, read depth, does not contain negative values. therefore, only green hues appear in 



future development and enhancement of genome browsers should see horizon charts as one flexible and efficient answer to the challenges faced when displaying large amounts of data. in the appropriate circumstances, this approach will provide significant benefits to browser developers. greater effectiveness in the display of data will in turn help researchers explore that information more efficiently and conveniently.

implementation
contrary to time series data, in genomic datasets, the variable under study  is associated with chromosomal coordinates instead of timestamps. we have modified an existing time series data visualization library  called cubism to support genome coordinate data. this makes dnaism a flexible and effective tool to explore multi-sample genomic datasets using horizon charts.

to visualize genomic datasets, we have modified most of the software components of the original cubism library . the two major components are ‘context’ and ‘source’. the ‘context’ component performs several functions. most importantly, it defines the region of the genome we want to explore. this component also specifies, in pixels, how much vertical space we have available for the visualization. the ‘source’ component parses the genomic raw data and generates the data points necessary for visualization. our library provides two sources: ‘bedfile’ and ‘bedserver’. once the sources are created we can use the metric component to instantiate metrics associated with specific samples. finally, the horizon component encapsulates the functionality necessary to create the visual elements.

one of the crucial features of dnaism is the ability to efficiently parse and load the genomic data for visualization. we have provided two alternatives via the bedfile and the bedserver sources. a bedfile is a simple solution that loads all the genomic information in memory and returns the relevant data when queried. however, this approach is not adequate for larger datasets, especially those involving multi-sample data. to handle such cases, the bedserver source can be used. a bedserver is a dedicated server that implements a restful api interface. the client’s code running in the browser can send queries to this server to obtain the data of interest. the server uses pre-indexed  <cit>  data to speed up random access and returns only the necessary information for the visualization back to the client. hence, this approach becomes much more scalable even with large sized genomic data sets. we have implemented bedserver as a python package  although we expect users will create their own sources and backends to interact with the specific details of their environments.

the source code of our library  has a decoupled interface that facilitates the extension of this library to new data sources. dnaism is data agnostic. as a result, users can create new sources to capture their specific backend peculiarities.

reproducibility
we consider in this section the two main aspects of reproducibility: first the ability of the software to generate the same results given the same input sets, and second the requirements for our users to install and use our software, that is the ability of new users to reproduce and exploit the capabilities we intend.

the main goals of our library are to visually encode data points that capture the value of some variable under study for a series of genomic locations and to display those values on a computer screen. this makes validation rather simple. we can inspect a small area of the genome and check the actual data points displayed against our input files. once the interesting patterns and behavior are discovered in the datasets, the user can proceed to manually confirm the results by looking back at the raw data.

since our contribution is released as a library, the user must write some minimal code to interact with the library. this additional user-provided code is small but requires a basic understanding of the technologies that are used within the web ecosystem: html, css and javascript. in addition, since the library relies on d3js for rendering, an understanding of this technology is necessary  <cit> . that being said, the examples and interface documentation should help users to start using the library quickly. once they are familiar with the examples, they can spend a bit of time exploring further into the details of how the code translates in pixel rendering, although that is not necessary to fully exploit the benefits of dnaism.

there is no installation required since this is a javascript library. the library code is included within the web application that uses dnaism and the functionality is exposed via an object in the first level namespace object called dnaism.

RESULTS
the main function of dnaism is to expose the power of horizon charts while abstracting the inner details. exposing the functionality as a library provides flexibility to the user to allow them to incorporate these visualization techniques within their projects. we believe that this technology is ideal for developing visualizations that will help the community to better understand their genomic datasets.

we are not aware of any other tools that use horizon charts to explore the genomic data.

the library is intended for exploring genomic data. it is ideal for aiding quality control on genomic datasets by visualizing different encoded metrics, typically in bed format.

in the future, we will be adding new sources to allow the users to load data from different types of backend services. we want to extend the library to make it easier to use, especially for the users that are not well-versed with web ecosystem.

CONCLUSIONS
we introduce a powerful visualization technique previously used in the time series data domain. this visual tool facilitates the identification of similarities or abnormalities in patterns across multi-sample datasets. in addition, this approach helps to explore and visualize high density datasets more effectively, thereby helping the researchers to understand their data more easily.

our library keeps the effective and elegant interface of the original, while allowing users to leverage its power for genomic data. by providing a library, we maintain flexibility regarding how researchers can use these resources. users can build full applications or use the library within their existing ones.

the companion lightweight server will facilitate the exploration of large genomic datasets without affecting user experience, by using indexed datasets. alternatively, users can create their own data sources to reflect the details of their own environments.

availability and requirements
project name: dnaism.project home page:http://drio.github.io/dnaism .source code:https://github.com/drio/dnaism.operating system: platform independent.programming language: javascript.other requirements: modern browser.license: apache  <dig> .

additional file
additional file  <dig> 
figure s <dig>  ucsc genome browser displaying multiple tracks. 



competing interests

the authors declare that they have no competing interests.

authors’ contributions

drd conceptualized, designed and implemented the modifications of the original library and drafted the manuscript. jr provided input regarding user applications and edited the manuscript. all authors contributed in discussions and approved the final draft of the manuscript.

