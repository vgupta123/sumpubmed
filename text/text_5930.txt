BACKGROUND
the neighbor-joining method is a distance based method for constructing evolutionary trees. it was introduced by saitou and nei  <cit> , and the running time was later improved by studier and keppler  <cit> . it has become a mainstay of phylogeny reconstruction, and is probably the most widely used distance based algorithm in practice. with a running time of o on n taxa  <cit> , it is fast for small input, and empirical work shows it to be reasonable accurate, at least for cases where the rate of evolution is not extremely high or low. st. john et al.  <cit>  even suggest it as a standard against which new phylogenetic methods should be evaluated. the aim of this paper is to improve on the running time of neighbor-joining tree reconstruction to make it applicable for larger datasets, e.g.  <cit> . whether the accuracy supplied by the neighbor-joining method is useful for a particular data set in a particular situation is an independent issue outside of the scope of this paper.

the neighbor-joining method is a greedy algorithm which attempts to minimize the sum of all branch-lengths on the constructed phylogenetic tree. conceptually, it starts out with a star-formed tree where each leaf corresponds to a species, and iteratively picks two nodes adjacent to the root and joins them by inserting a new node between the root and the two selected nodes. when joining nodes, the method selects the pair of nodes i, j that minimizes the branch-length sum of the resulting new tree. one way of achieving this  <cit>  is always to select the pair of nodes i, j that minimizes

qij =  dij - ,     

where dij is the distance between nodes i and j , rk is the row sum over row k of the distance matrix: rk = ∑i dik , and r is the remaining number of nodes adjacent to the root. when nodes i and j are joined, they are replaced with a new node, a, with distance to a remaining node k given by

dak = / <dig>      

this formulation of the neighbor-joining method gives rise to a canonical algorithm that performs a search for mini,j qij, using time o, and joins i and j, using time o to update d. this search and join is continued until only three nodes are adjacent to the root . the total time complexity becomes o, and the space complexity becomes o . for further discussions of the neighbor-joining method, see e.g.  <cit> .

in this paper, we present techniques for speeding up the canonical neighbor-joining algorithm. our algorithms construct the same phylogenetic trees as the canonical algorithm, but attempt to reduce the search time for mini,j qij a quad-tree  <cit>  built on top of the q matrix, or on a matrix that approximates the q matrix.

we evaluate the performance of our algorithms empirically on distance matrices obtained from the pfam collection of alignments  <cit> , and compare the running time with that of the quicktree tool  <cit> , a widely used efficient implementation of the canonical neighbor-joining algorithm, which previously was shown to run faster than the implementations in the clustal w, and phylip packages, and faster than the bionj implementation of a variant of the neighbor-joining method. the results show that the presented algorithms can give a significant speed-up over the standard neighbor-joining method, already for moderately sized instances. indeed, evidence is given that the running time of the best of our algorithms evolves as Θ on the examined instance collection, as opposed to Θ for quicktree.

RESULTS
to evaluate the presented methods, we have implemented them in a tool, quickjoin, available at  <cit> . for evaluating the performance of quickjoin we have compared the quickjoin tree creation with the canonical neighbor-joining tree creation method, as implemented in the tool quicktree  <cit> . the quickjoin program takes a distance matrix of the taxa for input, and produces a tree as output. the quicktree tool, likewise, can take a distance matrix as input and produce a tree as output. additionally, it can take a multiple alignment as input, and produce either a distance matrix or a tree as output. when comparing the running time of the two tools, we call both tools with a distance matrix as input.

the platform where the experiments were conducted was a linux redhat  <dig>  kernel  <dig> .18– <dig> , pentium  <dig>  <dig>  ghz,  <dig> kb cache,  <dig> gb ram, both the quickjoin program and the quicktree program was compiled using gcc/g++  <dig> . <dig> with optimization -o <dig>  to measure the running time of the programs we used the gnu time tool, the time report is the user time obtained by the time -f %e option . for quickjoin we examine both the method based on a depth-first search with cutoffs and the method based on a priority queue search — see the methods section for details. for quicktree there is only one way of building trees.

results on pfam data
the data used for the first experiment were protein sequence alignments taken from the pfam database  <cit> , and translated into distance matrices using quicktree.

we first evaluated the performance of your method without the linear functions approximation of q . figure  <dig> shows a plot of the walltime performance of the new methods with this approximation, compared to quicktree on the alignments from pfam with 200– <dig> sequences. we can observe that the performance of the depth-first search method without sampling has a quite unstable performance, whereas the other methods achieve a performance comparable with that of the quicktree implementation.

we then evaluated the performance of the new methods when also using the linear functions approximation to q. the input for the runs is distance matrices for the pfam alignments with  <dig> to  <dig> sequences, and the results are shown in figure  <dig>  we can observe that the running time of all the presented methods are at the same level, and that all the methods outperform the quicktree implementation.

the way quickjoin is implemented, the memory usage for representing the quad-tree is increased  each time the number of taxa is increased to the next power of two. that is, the memory usage is close to constant between powers of twos, and grows by a factor of four when the input size crosses a power of two. as the memory usage grows, the number of page faults when running the program grows. this slows down the program, and is the explanation behind the increase in running time at  <dig> =  <dig> in figure  <dig>  a similar increase in running time is observed at  <dig> =  <dig> when running quickjoin on a machine with less ram. the canonical neighbor-joining method does not rely on a quad-tree and as such can run on less memory; it still needs to represent a distance matrix and a tree, however, and as such can only save about a factor of four compared to quickjoin.

results on data provided by georg fuellen
we have also used quickjoin on two datasets supplied by georg fuellen, integrated functional genomics, university hospital muenster, who used neighbor-joining to produce large phylogenies as described in  <cit> . dataset a is a multiple sequence alignment of  <dig> species, and dataset b is a multiple sequence alignment of  <dig> species. both multiple sequence alignments were converted into corresponding distance matrices. building trees using quicktree took  <dig>  sec for dataset a and  <dig>  sec for dataset b. building trees using quickjoin took  <dig>   sec for dataset a and  <dig>   sec for dataset b when using the depth-first search  method.

CONCLUSIONS
we have suggested methods for speeding up the search for mini,j qij in neighbor-joining based on a quad-tree storing information about known lower bounds on parts of the q matrix. all our methods have a space bound of o and a time bound of the form o, where s is the time used  in each search and u is the time used for updating and rebuilding the quad-tree and other auxiliary data structures. for the suggested methods, the update time has a worst case bound of o if we rebuild the quad-tree whenever we have halved the number of remaining nodes. a worst case bound for s is o, resulting in a combined o time bound for the methods, i.e., the same asymptotic bound as the original method.

we have conducted experiments, evaluating the performance of the methods implemented in quickjoin on data from the pfam database and have shown that the methods perform favorably compared to the canonical algorithm as implemented in quicktree and achieves a significant speed up. quicktree is stated to be an optimized implementation of the neighbor-joining tree building algorithm  <cit> . we expect that if we apply a similar level of code optimization techniques to the implementation of quickjoin used for the experiments we will be able achieve an improved performance increasing the gap between the performance of quicktree and quickjoin.

