BACKGROUND
visualization of protein-ligand complex plays an important role in elaborating protein-ligand interactions and aiding novel drug design. to date, dozens of visualization tools already exist. vmd  <cit> , pymol  and chimera  <cit>  are very well-known and highly cited. they can interpret multiple file formats and generate multiple representations to supply precise and powerful control. autodocktools <dig>  <cit>  provides native support for the pdbqt file format, which is widely used in various protein-ligand docking software such as autodock  <cit> , autodock vina  <cit> , and our idock  <cit> . we also developed our own method  <cit>  to visualize structures in virtual reality settings and employ fragment-based de novo ligand design strategy for interactive drug design. poseview  <cit>  and ligplot+  <cit> , on the other hand, plot 2d diagrams of protein-ligand interactions from 3d coordinates.

in addition, there are web visualizers based on either java applet, adobe flash, or html <dig> canvas. jmol , an open source java viewer for chemical structures in 3d, has been deployed worldwide and recognized as the de facto molecular viewer on the web. giant  <cit> , a web visualizer based on jmol, supports analyzing protein-ligand interactions on the basis of patterns of atomic contacts obtained from the statistical analyses of 3d structures. however, java is being disabled on more and more systems due to security concerns so that java-free visualizers are highly required. jsmol  <cit> , a javascript-only version of jmol, includes the full implementation of the entire set of jmol functionalities. although jmol and jsmol support a large set of advanced features including scripting, they rely on software rendering which is slow on large display areas and thus prevents detailed inspection of the structure. in contrast, webgl visualizers benefit from gpu acceleration. for instance, chemdoodle web components , a pure javascript chemical graphics and cheminformatics library, presents 2d and 3d graphics and animations for chemical structures, reactions and spectra, but it lacks protein surface construction. glmol , a molecular viewer on webgl/javascript using the three.js library, supports multiple file formats and representations, and features an experimental version of surface construction based on the edtsurf algorithm  <cit> . another study  <cit>  also presents a webgl technology for rendering molecular surface using the spidergl library  <cit> . nevertheless, none of these webgl visualizers support virtual reality effects.

surface representation is a convenient way to visualize protein-ligand interactions. however, macromolecular surface calculation is computationally and memory intensive. furthermore, the calculated mesh is very complex, often exceeding  <dig>  polygons. therefore its implementation in javascript/webgl was considered to be very difficult. most existing web visualizers either rely on slow software rendering, or lack virtual reality support. moreover, the vital feature of protein surface construction is usually unavailable, and the support for pdbqt format is not implemented.

to address the above obstacles, we have developed iview, an interactive webgl visualizer of protein-ligand complex, featuring three special effects in virtual reality settings and four surface representations . furthermore, we show that iview can be easily modified to adapt to different applications. as an application example, we have recently developed a web platform called istar  <cit>  to automate large-scale protein-ligand docking using our idock  <cit> . refactored from the feature-rich version of iview, we have also developed tailor-made version specifically for visualizing docking input data and output results of user-submitted jobs.

iview is the only web visualizer that is accelerated by gpu hardware and supports three unique features: protein surface construction, virtual reality effects, and pdbqt format input.

implementation
iview is refactored from glmol  <dig> , using three.js as its primary 3d engine with antialiasing support. it is based on webgl canvas and can be easily integrated into existing html <dig> web pages to display molecular models without requiring java or browser plugins. it loads a protein-ligand structure from the pdb   <cit>  as its data source via a restful interface. it renders four standard representations of primary structure, namely line, stick, ball & stick and sphere, and five standard representations of secondary structure, namely ribbon, strand, cylinder & plate, c alpha trace and b factor tube. it colors the structure by either atom spectrum, protein chain, protein secondary structure, b factor, residue name, residue polarity, or atom type, by setting the vertex colors of the geometry object of the corresponding representation. it supports user interactions including rotation, translation, zooming and slab with mouse or hand touch manipulation. it provides both perspective and orthographic cameras, and anaglyph, parallax barrier and oculus rift effects from three.js examples for use in a virtual reality environment.

we have ported edtsurf  <cit> , an fast algorithm to generating triangulated macromolecular surfaces by euclidean distance transform, to javascript and integrated it into iview to construct and render in real time four representations of protein surface, namely van der waals surface, solvent excluded surface, solvent accessible surface and molecular surface, with opacity and wireframe adjustable by users. note that molecular surface is in fact solvent excluded surface, but edtsurf uses different ways to derive them. we therefore provide them both as two different surface representations in iview. although the javascript implementation of the edtsurf algorithm typically consumes a few seconds and 500mb to 700mb memory for computation, it is sufficiently efficient for practical applications. to limit cpu and memory usage, the calculation grid size is restricted to 180×180× <dig> 

it is worthwhile to highlight that iview performs all parsing and rendering in the client browser, without any dependency on server side at all, ensuring the data privacy is maintained. this is unlike chemdoodle web components, some of whose functions send data to a dedicated server for processing and wait for retrieval of results.

the differences between iview and glmol are listed in the additional file  <dig> 

RESULTS
we take as example the ccr <dig> chemokine receptor-hiv entry inhibitor maraviroc complex  <cit>  .

we have successfully tested iview in chrome  <dig>  firefox  <dig>  safari  <dig>  and opera  <dig>  support for ie  <dig> is experimental because gl_frontfacing is unsupported in ie  <dig>  refer to http://caniuse.com/webgl, for compatibility of webgl support in desktop and mobile browsers.

application example
we emphasize portability and usability, and illustrate that iview can be easily modified to suit one’s particular application, given that iview is free and open source under a permissive license. we take protein-ligand docking as an example. based on the feature-rich version of iview, our tailor-made version specifically for idock jobs cleans up many dispensable functions, enabling a very neat interface. it only retains the rendering of primary structure of protein and ligand, and the construction of protein surface. most importantly, it implements new features especially for protein-ligand docking purpose.

in the input phase of a docking job, it merely requires a pdb file, which can be obtained either from the pdb database  <cit>  or via homology modeling, and then constructs the protein surface asynchronously in a separate web worker to keep the web page responsive. it automatically detects a binding site from the largest co-crystallized ligand first by finding the smallest cubic box that covers the entire ligand and then by extending the box by 50% in all the three dimensions in order to reserve space for conformational sampling. in case of non-existence of co-crystallized ligand, the binding site is defaulted to the geometric center of the protein. the binding site is visually depicted in the form of a cubic box whose center and size can be manually adjusted by users in real time.

in the output phase of a docking job, it displays the user-supplied cubic box for users to confirm that the predicted ligand conformations do fall inside the desired binding site. other than pdb format, its parsers are capable of parsing a protein and multiple top hit ligands in pdbqt format used by idock. it displays the top hit ligand ids in a horizontally scrollable row and provides a straightforward way to switch ligands easily through a button group. it has built-in support for putative intermolecular hydrogen bond detection by finding hydrogen bond donors and acceptors from protein and ligand and setting the distance threshold to  <dig> Å. it automatically annotates important atoms, like those involving in intermolecular hydrogen bonds, by placing labels next to the corresponding atoms in the canvas. it lists the docking result files, predicted free energy and binding affinity values, molecular properties, smiles representation, compound suppliers and annotations, and putative hydrogen bond positions and their lengths, in order to give users a quick overview of the top hit ligands and assist them in making decisions of which compounds to purchase for subsequent wet-lab experiments .

CONCLUSIONS
we have designed and developed iview to be a simple and straightforward way to visualize protein-ligand complex. it enables non-experts to quickly elucidate protein-ligand interactions in a 3d manner. furthermore, iview is free and open source, and can be easily integrated into any bioinformatics application that requires interactive protein-ligand visualization.

availability and requirements
project name: iview

project home page:http://istar.cse.cuhk.edu.hk/iview,

operating system: platform independent

programming languages: javascript, html <dig>  css3

other requirements: browser and graphics card with webgl capability

license: apache license  <dig> 

competing interests
the authors declare that they have no competing interests.

authors’ contributions
hl and tn developed the presented software. hl drafted the manuscript. tn, kwl and mhw edited the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
differences between iview and glmol. the text file lists the differences between iview and glmol.

click here for file

 additional file 2
iview rendering of the ccr <dig> chemokine receptor-hiv entry inhibitor maraviroc complex  <cit>  , with parallax barrier effect enabled. a parallax barrier is a device placed in front of a lcd  to permit a stereoscopic or multiscopic image without 3d glasses. the device is composed of a layer of material with precision slits, enabling each eye to see a different set of pixels and thus creating a sense of depth through parallax.

click here for file

 additional file 3
iview rendering of the ccr <dig> chemokine receptor-hiv entry inhibitor maraviroc complex  <cit>  , with oculus rift effect enabled. the oculus rift is a virtual reality head-mounted device, which features a high-speed inertial measurement unit and a lcd display, visible via dual lenses positioned over the eyes to provide a  <dig> degrees horizontal and  <dig> degrees vertical stereoscopic 3d perspective.

click here for file

 acknowledgements
takanori nakane thanks japan society for the promotion of science  for scholarship . this work was partly supported by grant-in-aid for jsps fellows .
