BACKGROUND
recent scientific and technical advances in the field of experimental biology, particularly in genomics, have produced large amounts of biological data, which has posed new conceptual challenges. the visualization and visualization-driven analysis of these experimentally derived data has become a key component of the scientific process.

until recently, these needs were typically approached by designing applications specialized in a set of well-defined specific tasks. so, for example, popular applications for molecular visualization include, but are not limited to, molscript  <cit> , pymol  <cit> , rasmol  <cit>  and swiss-pdbviewer  <cit> . however, the analysis of these molecular data frequently requires novel approaches to visualization and integration with a variety of data types. therefore, the ability to quickly prototype and develop software suitable for diverse tasks becomes paramount. hence, libraries, like the mbt described here, are particularly useful, especially given that many applications can be accessed through the web.

this paper, aimed at bioinformatics software developers, provides a concise presentation of the design and capabilities of the toolkit, presents a number of models for its usage, and illustrates its performance with several applications. the paper is organized as follows. the following section provides a general overview of the application programming interface . the results and discussion section presents details about core components of the toolkit and illustrates its capabilities with two applications. the conclusions section summarizes the main functionality of the toolkit, discusses availability and documentation, presents performance data and outlines future development plans.

implementation
the application-programming interface  that serves as the foundation of the toolkit has emerged from the exploration of the typical needs encountered by a researcher in the analysis of a documented biological molecule. the list of requirements includes reading the data file and converting the information to data objects that are easily accessible by applications, extracting subsets of chemical components according to different chemical or biological properties of interest , deriving information that is not explicitly present in the original input data  and visualizing chemical or physical properties of different subsets of the molecule, or the entire molecule.

based on the requirements identified above, we have arrived at the multi-layered design illustrated in fig.  <dig>  the bottom  layer contains facilities for importing molecular data from a variety of sources. the structurefactory class offers a uniform approach to loading structural data, independent of the format of the source. the class makes use of a set of loaders that can import data from a variety of sources, either on the same machine or located on a remote server. moreover, this allows the developer to write applications that do not have to uniquely specify the source of data. instead, a number of methods in the structurefactory class enable loading of structures based on a series of source descriptors: file name, pdb id code, url location, etc. the first loader capable of handling the source descriptor is used thus providing a data access and retrieval mechanism that is transparent to the user.

the output of the load methods in the structurefactory is a structure object, which is effectively an interface to a summary of raw primary and secondary structure data. the structure object is not restricted to holding structural information and can contain any other data relevant to the organization of the molecular entity. for instance, it can store the description of single or multiple protein sequences preserving the ordering and alignment of the amino acid residues and their properties.

the structuremap class builds the internal data model of the simple or complex molecule and provides hierarchical access to both raw data and derived information generated from the input. this includes access to chains, residues, atoms, bonds, nucleic acid components, ligand atoms, fragments associated with secondary structure components, or features defined by the user.

the structurestyles class provides information about rendering, coloring and selection attributes associated with any structure component produced by the structuremap. a wide variety of methods in this class allow any module of an application, in particular any viewer, to set and retrieve the information describing the visually represented parameters of any structure component.

the structuredocument is designed as a container class that maintains a log of all loaded structures and viewers that are instantiated by an application in a given session. it also has the role of generating events associated with the addition or removal of structures and viewers.

the next level of the api contains graphical user interface  elements. this portion of the package contains high level constructs, such as windows and panels designed to display 3d graphics, protein or dna sequences or tree representations of the chemical components of the molecule, as well as lower level components that can be used to build a molecular scene according to a developer's preferences.

finally, at the application level, a number of applications are provided that can be used to illustrate the features of the toolkit, or as starting templates for new application development. for example, the applications illustrate how to use methods in the structuremap class to retrieve all secondary structures within a given molecule, or how to obtain a list of atoms or residues. this is the level that most developers would modify in order to create custom applications tailored to their specific needs.

note that care has been taken to further enable application developers to use different components of the toolkit to build purely analytical applications that have no visualization component. for example, a developer could write a command-line tool that simply loads a molecule and gathers statistics about the structure data without presenting any graphical interface. such an application could be part of a back-end process that runs in a web-server environment.

RESULTS
core components
the mbt was developed as an object-oriented java-based environment and hence is flexible, modular and lightweight, which facilitates maintenance, web deliverability and limits the required computer resources. moreover, the toolkit can be easily extended and having been written completely in java is effectively platform-independent.

the internal data model describes the hierarchical organization of a protein molecule – structure, chain, residue, and atom. we have implemented this data model by designing a class hierarchy to efficiently encode its elements. the components of this class hierarchy  are built around a structure object . structure is a container designed to hold all raw information pertaining to the given unit of biological information: protein sequence, genomic sequence, taxonomy information, experimental data and so on. the remainder of the class hierarchy represents the components of the macromolecule. the toolkit is not inherently limited to operating on biological molecules, and can easily be used to manipulate small organic and inorganic molecules. selection, rendering and coloring attributes for all biological molecules are handled by structurestyles.

the fragment class contains, for example, one of the four known conformations: α-helix, β-strand, turn or random coil, but is sufficiently general to define ranges of residues grouped according to any property of interest. in addition, the data model contains classes that describe other objects associated with derived information, such as covalent or hydrogen bonds.

in order to provide uniform style features across the toolkit a structurestyles class has been implemented. this class maintains a representation of the rendering characteristics of all structure component objects so that any application module has access to the style data for any given object that needs to be visually represented. the set of style parameters maintained by the structurestyles class is comprehensive – it is the union of the sets of style parameters required by any known viewer.

communication between different components of the toolkit is enabled by a flexible event handling mechanism. changes in the data, rendering styles, addition or removal of viewers and many other actions with toolkit-wide impact generate descriptive events, which are recursively propagated across the toolkit components, allowing an automatic synchronization of the state of different active parts of an application.

version  <dig>  of the mbt provides three standard viewers: a 3d structure viewer, a primary sequence viewer, and a tree viewer. the 3d viewer is implemented using the java3d™ extension. the use of java3d for visualization was motivated by the convenience of the availability of high-level constructs for building complex 3d scenes. analysis of the performance aspects  <cit>  of java3d has shown that some performance issues can be overcome through a careful organization of the molecular scene. existing applications indicate that the visualization of most molecules using typical desktops and graphics cards is fast and fully interactive. for example, typical protein data sets with four to five thousand atoms  load and display in four or five seconds on a pentium iii  <dig>  ghz laptop computer.

a schematic representation of the data structure used by the 3d viewer is shown in figure  <dig>  for each primary or secondary structure element, a geometry object  is built, which is then attached as a branchgroup node to a scenegraphobject  representing the three-dimensional image of the molecule. the psgeometry  and ssgeometry  classes provide a number of methods that build complete 3d scenes from a given set of primary or secondary structure data object .

the geometry engine of the 3d viewer uses a flexible approach to generate ribbon-like surfaces. it allows the construction of ribbons using an extrusion with any shape of the cross section. a few most commonly used shapes are immediately available as core components of the toolkit. however, the developers could easily implement and register with the toolkit any additional shapes that may be of interest in their specific applications. the quality of geometry can be controlled either directly by setting individual geometry rendering parameters, or indirectly by a general quality parameter that optimizes the number of facets/vertices used in the construction of different geometric shapes. this allows for an easy adjustment of the application parameters in a wide performance-quality range, from very fast line-only drawing, to a somewhat slower, publication-quality rendering.

the sequence viewer is a module designed to display primary sequences of proteins and nucleic acids that are either derived from the loaded structures or acquired from individual sequence files or sequence alignments. the sequence viewer uses awt drawing methods, which does not impose any specific requirements on the client system, as they are part of the standard java distribution. the viewer is designed as a full-featured module capable of performing most of the sequence analysis tasks, including basic statistics, pattern and motif searching and display of secondary structure mapping onto the sequence. the viewer is capable of displaying an unlimited number of sequences and provides multiple representation options. the latter include residue coloring by several criteria with a possibility of an easy extension, setting sequence display to any of the available system fonts, a flexible selection system, and more. as stated, the integrated event handling of the toolkit allows for simultaneous updates of the presentation layer for any participating viewers. hence, the toolkit has the built-in support for common selection and common coloring across all registered viewers. this offers an important visual cue to many applications, linking for example sequence and structural components.

the tree viewer offers a hierarchical view of all components of a given molecule. it reflects the logical organization of the derived structuremap data including molecule, chain, residue, and atom objects. the tree view provides a convenient mechanism to select portions of a molecule based upon the biological relationship between atoms, residues, and chains.

finally, the mbt provides a repository of data and methods that can be used for the retrieval and/or derivation of physical, chemical and structural information associated with the molecules loaded by an application. for example, the package contains a periodic table with physico-chemical properties of the elements, as well as methods for the derivation of the secondary structure information, using the kabsch-sander algorithm  <cit> . full details of all these features are provided with the documentation.

applications built using the mbt
applications can be explored and downloaded from the mbt website  <cit> . they have been tested on a variety of unix, windows and mac os x platforms.

the ligand explorer  <cit>   is an integral part of the reengineered rcsb protein data bank   <cit> , which is currently in beta testing. in the present pdb, a user interested in protein-ligand interactions must download the structure, decide on a graphics program and likely learn a scripting language to provide details of hydrophilic and hydrophobic interactions between protein and ligand at different cutoff distances. ligand explorer achieves this at the push of a button. this produces a view with all ligands highlighted. the user then selects a ligand for a review of detailed interactions. ligand explorer can be downloaded as a separate application and used to access local files or files on the pdb's servers.

the protein kinase exploration tool  is part of the new protein kinase resource  <cit> . it uses the 3d viewer supplied by the toolkit with a few modifications that allow more extensive coloring and rendering options. the multiple sequence viewer presents the multiple sequence alignments resulting from the multiple structure alignments which are stored in the database. another viewer displays the superfamily relationship of the sequences present in the database.

CONCLUSIONS
the molecular biology toolkit  provides a set of pluggable and extensible classes for use by application developers interested in the visualization and analysis of macromolecular data. the mbt provides a set of pre-written data loaders, viewers, a common data model and the means to add to and customize the toolkit for specific applications delivered as applets through the web or as standalone applications. base functionality and comparable tools  are as follows:

• classes to load raw data from a number of common protein structure and sequence data sources  and a means to easily add new "loader" modules independent of the applications they might serve.

• a common data model to which raw information is imported, mapped, and indexed. a number of data record types  are provided  and new data types are easily registered. further the data model provides an extensible means to describe viewable or visible attributes  of these objects.

• written entirely in java, programs may be embedded  directly inside web pages. this enables the deployment of tightly coupled interactive web content much like the popular mdl chime plug-in.

• applications are not restricted to the features provided by the mbt apis. the programmers guide details how to extend the system.

• with source code provided, core features of the toolkit may be directly modified or extended for independent use . however, adding code within the existing framework and contributing it back for others to use is encouraged. the source code has been extensively commented to produce a rich and complete set of hyper-linked javadoc api documents.

• a set of pre-written viewers  that can be extended, replaced, omitted, or augmented with completely new viewers that implement entirely new visualization techniques.

• the 3d structureviewer module provides visual representations similar to rasmol and molscript such as balls-and-sticks, cpk spheres, split-bonds, extrusion/ribbon-style backbone traces, and secondary structure cartoons . it also provides 3d labeling.

• a scripting interface is being developed for mbt to enable toolkit functionality to be command-line or even script-driven .

version  <dig>  of the toolkit and sample applications, including those described here, are available for download from the project web page  <cit> . the same site contains links to various documentation pages . the mbt has been tested on common hardware and unix, windows and mac os x operating systems. a good consumer-level graphics card is recommended. the loading and generation of a 3d scene when representing a typical protein structure takes a few seconds. large structures from the pdb  <cit>  that contain over  <dig> atoms require physical memory in excess of  <dig> mbytes and on a notebook computer with a  <dig>  ghz processor can take nearly one minute. efforts at optimization are on-going.

new applications are on-going including the generation of high quality images for all structures in the protein data bank and new ways of visualizing protein-protein interactions. we invite contributions to the mbt by sending mail to mbt@sdsc.edu. bugs may be reported to a bug tracker available on the project web site  <cit> .

availability and requirements
• project name: molecular biology toolkit 

• project home page: 

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> . <dig> or higher, java3d

• license: free for educational, research and non-profit purposes

• any restrictions to use by non-academics: contact the university of california at san diego's technology transfer office 

authors' contributions
jlm is one of the designers of the api and co-developer of the toolkit. ag designed and implemented the geometry generation modules, implemented the algorithms for secondary structure generation and bond detection, and drafted the paper. ovb developed the pkr explorer. qz developed the ligand explorer. peb coordinated the whole project, suggesting the general functionality and scientific objectives of the toolkit.

