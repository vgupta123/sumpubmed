BACKGROUND
gene ontology  is a popular standard in the annotation of gene products, providing information related to genes across all species. it presents a shared, controlled structured vocabulary of terms that describe the gene products  <cit> . go is structured as a directed acyclic graph  that holds the terms that describe the molecular function, biological process, and cellular component for a gene product. go has a hierarchical structure that represents the terms from more specific to general terms.

go is currently being used for various analysis tasks like a) over-representation of the go classes from a selected group of genes  <cit> , b) semantic similarity between two genes  <cit> , c) threshold free gene set analysis  <cit> , d) machine learning to classify unknown genes to various go categories  <cit> , and e) explorative analysis of large-scale datasets  <cit> . the linking of the reported go categories to the go dag structure and their parent nodes is critical for all these tasks. in tasks a, c, d, and e, the parental nodes of the go structure provide different levels of detail allowing simultaneous monitoring of very detailed and very broad functional classes. in the case of task b, the link to the go hierarchy is crucial for finding a path between the two genes across the go graph.

there are many existing methods  <cit>  freely available for processing  and analyzing gene ontology terms. most of these tools perform well enough to handle small data sets, but on larger scale, such as in the case of microarray data, the execution time for these tools becomes prohibitive. moreover, most of these methods use quite old go structures causing methods to miss a large proportion of the currently used go classes .

the annotationdbi  <cit>  and go.db  <cit>  packages in bioconductor are the most widely used tools for gene ontology analysis for the r enviroment. go.db stores links from go classes to their parent go classes, storing all the go classes, their parents, child terms and ancestor terms in a database for easy retrieval and processing. despite the gene ontology consortium updating go class annotations and linkages on daily basis, these go related r packages are updated only biannually. indeed, the best source of go information is the annotation files themselves, which are available from the go consortium web pages.

even the go consortium cannot help with research carried out with novel species. this is critical as we can expect a growing number of novel sequenced species with next-generation sequencing methods. these will require in-house go annotation of sequences  <cit> . also, with the analysis of more exotic organisms, there might be alternative sources for go annotations, like species specific databases. current go processing tools use only a pre-fixed annotation source for analysis.

we present a fast python program named gopargenpy  that can process large annotation files, incorporate any version of obo structure and can generate go data matrices. users of gopargenpy will mainly be biologists and bioinformaticians who do analysis using languages, such as r, matlab or python. it is freely available from the project web page .

implementation
gopargenpy has been implemented in python  and it is freely available as a standalone tool suitable for any downstream analysis related to go data across various computing platforms. gopargenpy generates the binary data matrix from a set of genes with go annotation. it allows the user to select the go annotation and the obo structure file. the obtained go binary matrix can then be used with any available analysis environment and with any available analysis methods. the main features of gopargenpy are:

 <dig>  reading in ‘gene_ontology_edit.obo’ file in standard format, parsing it and storing all the go classes and their attributes.

 <dig>  reading in the go annotations of the analyzed genes .

 <dig>  links go annotations to their parent go classes. the linking also looks for alternative ids for those go classes which have become obsolete.

 <dig>  outputs a list of genes with added parent go classes.

 <dig>  outputs a sparse or full matrix with genes as rows and go classes as columns. the default format is the sparse matrix.

figure  <dig> shows the workflow of gopargenpy. it takes in a tab separated input annotation file that contains a list of go annotated genes, the selected obo file and a set of parameters. these parameters denote the column number of gene name and the column number of linked go classes. depending on the input annotation file type, an intermediate tab-delimited annotation file is then parsed from the annotation file where one row represents the gene name and all the collected go annotations of this gene.

the obo flat file format stores go classes and attributes such as id, name, namespaces, definition, etc. obo file go classes and their respective attribute values are stored in a hash table using the numeric part of go id as keys. hence, the parent or ancestor class for any given go class can be retrieved recursively by looking through the attribute values of go classes, namely ‘is_a’, ‘part_of’ and ‘consider’ links.

next, the intermediate file obtained in first step is iterated over so that for each gene and its respective go classes, all shared parent or ancestor go classes are retrieved recursively using the above hash table. redundant steps are removed by adding another hash table that is dynamically built as the iteration progresses through the entire file. the main purpose of this hash table is to store the go class and all its parent or ancestor classes together so that when the same go class is encountered in further iterations the retrieval does not get referred back to earlier go hash table. thus, at any instance the maximum size this data structure is the total number of go classes present in a given obo file. hence, after certain stage the overall processing of input annotation file becomes independent of number of genes and the associated go annotations.

moreover, the program also does a lookup in the obo file of alternate ids for any go class which has become obsolete in order to retrieve parent/ancestor classes also in these cases. this functionality is optional.

finally, user can specify whether a sparse or full binary matrix is generated with genes as row names and go classes as column names. reported go classes are those occurring in the input annotation file and their parent nodes. selection of the sparse matrix option is highly recommended as the package is intended for large datasets . sparse matrices are memory efficient representations for matrices where most of the values are zero. this is the case with go data matrices as large part of go classes have less than one percent of genes as members and the non-members are given value zero. we use the sparse matrix representation with three columns. these columns represent the row number and column number of non-zero value and the value in the cell. figure  <dig> demonstrates this process.

the obtained sparse matrix can be further processed with standard analysis pipelines. the sparse matrix format is supported by many analysis environments, like r and matlab.

methods
we compare gopargenpy against existing methods  using two metrics:

 <dig>  instability of obo files.

 <dig>  execution time.

instability of obo files
obo files are central to all go analysis. however, they vary significantly between go analysis tools with david using version  <dig> , agrigo using version  <dig>  and go.db/annotationdbi from r/bioconductor using a biannually updated version.

therefore, we highlight the benefits of gopargenpy’s ability to allow selection of any obo structure by showing the information loss when an older obo structure is used instead of the latest structure. here the aim is to find what percentage of current go classes is missing in these older obo packages. hence, respective obo version corresponding to last update of these packages is downloaded from the go website. the versions are:

 <dig>  for david the corresponding version of obo file used is of date  <dig> .2009

 <dig>  for go.db the corresponding version of obo file used is of date  <dig> .2011

 <dig>  for agrigo the corresponding version of obo file used is of date  <dig> .2010

 <dig>  the reference version of obo file with which these packages are compared is of date  <dig> . <dig> 

these files were parsed for go classes using gopargenpy. next we calculated 1) the number of actual go classes with unaltered definitions, 2) the number of go classes which became obsolete and 3) the number of go classes that have an altered definition with respect to the reference obo file. finally, we present a venn diagram to show the percentage of missing go classes and actual classes present .

relative execution time
the execution time was compared only between the most widely used standalone packages. these are geneontology package from bioperl toolkit, go.db and annotationdbi from r/bioconductor. the aim is to compare the performance of gopargenpy with these packages in processing large datasets. parent go classes were generated by gopargenpy using the current version of go structure . first, the methods were tested with a randomly chosen set of  <dig> genes from uniprot-goa  <cit> . this is 2– <dig> times the size of the largest genomes in gene expression analysis. next, in order to measure the performance on extremely large file, tools were tested with all the go annotated sequences  available from uniprot-goa.

RESULTS
comparative analysis of go packages
the comparative analysis details for annotationdbi/go.db, agrigo, david, are shown in figures  <dig>   <dig>  and  <dig> respectively.

it is evident from above figures that obo structures in the evaluated go web tools go.db, agrigo and david miss a significant number of currently used go classes. in figure 3a, the total number of non-obsolete distinct go classes from obo file is  <dig> and  <dig> distinct non-obsolete go classes in go.db. subsequently, in figure 3b,  <dig> of these non-obsolete go classes have their definition as obsolete with respect to the reference version  of obo file. thus, in total  <dig>  go classes has been added or their definition has been altered with respect to non-obsolete go classes of go.db package . this corresponds to  <dig> % of go classes being altered. similarly, from figure 4a,b, it can be seen that the total number of non-obsolete distinct go classes from obo file is  <dig> and  <dig> distinct non-obsolete go classes in agrigo. correspondingly,  <dig> of these go classes in agrigo have their definition altered with respect to current version of obo file. together, it can be seen that  <dig> % of go classes are altered. finally, from figure 5a,b it can be observed that in david a total of  <dig> % of go classes have been altered. from table  <dig>  it can be found that on average  <dig> go classes are altered each year. this shows the level of change in the number of go classes and clearly indicates the importance of using the current version of obo structure.

execution time
table  <dig> compares the running time between gopargenpy, go.db/annotationdbi from bioconductor and geneontology package from bioperl toolkit. with set of  <dig> go annotated genes gopargenpy took approximately  <dig> seconds to generate data matrices making it almost  <dig> times faster than competing methods. geneontology package from bioperl was relatively closer to gopargenpy’s execution time but bioperl only performed the mapping of annotated genes to parent nodes and did not print any output file, whereas gopargenpy also generated the output files. with large data set consisting over  <dig> million sequences from uniprot-kb the competing methods were unable to finish in a reasonable time. although this dataset size is outside the standard analysis requirements, it gives a good extreme performance test.

tests were performed on a  <dig> ghz intel xeon x <dig> with  <dig> gb ram. note that only gopargenpy created also the output files in these tests, whereas the other packages only linked the annotations to the parent classes.

*indicates the time taken by these packages only to generate the parent go classes for given go classes associated with these genes.#execution time was too long. d.n.f: did not finish.

discussion
we present a new standalone software tool gopargenpy for generating high-throughput go data matrices for any selected input annotation file and any version of obo file. we have shown the importance of obo structure and presented an effective way of storing and retrieving go classes and their attributes for any downstream analysis involving go data. all the existing methods, be it web based application or standalone offline tools, utilize an outdated obo structure from go consortium. as shown in the figures  <dig> –  <dig> we can find that at maximum 25% of go classes  are outdated with respect to current version of obo file. hence, any downstream analysis methods that incorporate go data obtained from these tools may lead to erroneous results.

gopargenpy outperforms all these existing tools in terms of incorporating users’ choice of obo structure and speed of generating go data matrices. it is also able to process extremely large datasets. it incorporates a dynamic hash table that stores all go classes from the input file with their parent go classes retrieved from obo structure. this unique feature enables generation of data matrices independent of size of input data as the maximum size of this hash table is the total number of go classes present in the obo structure file used. hence, this makes gopargenpy faster in the generation of go data matrices for large gene sets. also, gopargenpy looks for alternative ids of those go classes which have become obsolete or have their definition altered.

although, gopargenpy does not do any actual data analysis or visualization steps itself the output files can be easily imported to environments like matlab, r or python. the output go data can be used as an input for various analysis tasks like prediction of new go annotations with classifiers  <cit> , for visualization tasks  <cit>  or for correlation analysis between go data and large-scale data  <cit> . thus, gopargenpy encourages modular thinking in bioinformatics.

gopargenpy allows the user to select the used go annotation file and the used go structure file. this allows the usage of latest annotation data files and latest go structure. however, it can also be used with older annotation files. this is useful when an older work needs to be replicated, or while comparing methods with one that uses old go structure.

additionally, gopargenpy features and its application can be extended to other ontology resources and it has been already tested with plant ontology . gopargenpy optional features can incorporate any po annotated gene lists and corresponding obo file to generate sparse binary matrix representation. .

CONCLUSIONS
gopargenpy is a fast python program for generating go binary data matrices from annotated set of genes. gopargenpy outperforms existing tools by allowing any available version of the obo structure and handling large scale input annotation dataset with over  <dig> million annotated sequences. the output files can be easily incorporated into various platforms such as matlab, r or python for further go related downstream analysis.

availability and requirements
project name: gopargenpy

project homepage:http://ekhidna.biocenter.helsinki.fi/users/ajay/private/gopargenpy.htm

operating system: platform independent

programming language: python version  <dig> / <dig> 

license: free for academic use

competing interests
the authors declare that they have no competing interests.

author’s contributions
pt described the problem statement. aak developed and implemented the software tool. lh and pt supervised the project. all authors contributed equally in writing the manuscript. all authors read and approved the final manuscript.

