BACKGROUND
the exponentially increasing amount of functional genomics data is significantly inhibiting researchers from making sense of these data  <cit> . network visualization is widely used to represent such data ; however, it does not work effectively with the big data due to the jumble of tangled edges . instead of being helpful to biologists, such network representations cannot be visually interpreted or further analyzed to extract meaningful biological facts.

to overcome this problem, effective navigation approaches that can abstract data properly and present them insightfully at any magnification are required  <cit> . we previously developed an interactive, multi-scale navigation method for large biological networks  <cit> . this method, which is similar to online mapping services such as google maps, can rapidly provide appropriately abstracted views at any magnification and enable researchers to effectively interpret networks.

cytoscape is an os-independent, de facto standard platform for network visualization and has many users around the world  <cit> . in addition to its built-in sophisticated features, users can easily extend cytoscape by loading extra plug-ins. herein, we describe our development of naviclustercs, which enables researchers to navigate biological networks in a google maps-like manner in the cytoscape environment. within large networks of ~ <dig>  nodes, naviclustercs rapidly finds biologically meaningful clusters, which are sets of nodes that are densely connected to each other and/or share similar biological functions . for example, in the case of protein-protein interaction networks, such clusters comprise proteins forming protein complexes or acting in related signaling pathways. naviclustercs automatically displays only the appropriate numbers of those clusters, resulting in an "abstracted view", instead of every internal node to always provide insightful and visually interpretable information. moreover, users can flexibly investigate the networks by gradually zooming toward the level of individual nodes , turning back to a broader or more abstracted view , or seeing clusters around nodes/clusters of interest .

implementation
naviclustercs was implemented as a cytoscape plug-in in java, and is available at http://navicluster.cb.k.u-tokyo.ac.jp/cs/. three files are required for running naviclustercs, a node list file, an edge list file, and a property information file. the node list file and the edge list file together describe a network dataset, and the property information file contains extra information for the property-based clustering.

in detail, the node list file is a text file that describes node names, database names , ids used in those databases, and their annotated property information. the database information is used to provide url links to the relevant pages describing node details, which appear as context-sensitive menus when users right-click on nodes. the property information is described as sets of property terms that represent attributes of the nodes, e.g., gene ontology  terms  <cit>  for genes and proteins. the edge list file consists of information about connected pairs of nodes and the weights of the connections; these weights describe how strongly the nodes are connected. the property information file describes the property terms' ids, names, display names , namespaces, default weights, and their parent terms. terms with heavier weights are treated as more important properties. each term belongs to one namespace, e.g., biological process in go. using this namespace information, researchers can put heavier weights on terms in certain namespaces at once, thus grouping nodes that have related terms in those particular namespaces. if parent terms are provided for each term, these parent terms are automatically assigned to the nodes that the "child" term annotates. in the case of go, the is_a and part_of relationships are handled by this entry.

a sample dataset provided in naviclustercs is an atted-ii dataset of  <dig>  nodes and  <dig>  edges  <cit> , which is a large co-expression network of arabidopsis genes. a default property information file is derived from the go annotation file in the tair database  <cit>  at  <dig> april  <dig>  thus each term belongs to one of the three namespaces . for this property information file, the default weights are terms' depths in the go hierarchy; this treats more specific terms as more important properties.

when large networks are loaded in naviclustercs, as described above, it rapidly locates biologically meaningful clusters in them, where clusters are sets of nodes that are densely connected and share similar properties. the underlying components of naviclustercs are  an ultrafast graph clustering component,  a property-based clustering component, and  a visualization component that connects to the cytoscape canvas. each component is described in detail below.

ultrafast graph clustering component
first, naviclustercs abstracts the whole network using ultrafast graph clustering to detect topologically densely connected regions, which may correspond to biologically meaningful clusters, such as groups of genes playing related roles. more precisely, it groups the nodes where connections of nodes within the sets are denser than the connections between nodes inside and outside of the sets. this metric is called the modularity or q function  <cit> , whose definition is q=12m∑i,jδ, where aij is the weight of the edge between node i and node j, m= <dig> ∑ijaij,ki= ∑jaij is the sum of the weights of all edges connected to node i, ci is the community to which node i is assigned and δ =  <dig> if u = v and  <dig> otherwise. we implemented an algorithm for quickly identifying clusters of high modularity in huge networks  <cit>  as follows:

 starting from the state that each node belongs to a cluster different from every other node, for each node the algorithm considers its neighbors' clusters and moves the node to a neighboring cluster. the cluster to be joined is determined by choosing the movement that results in the highest positive modularity gain among all possible movements to the node's neighboring clusters. if no movements result in a positive gain in modularity, the node is not moved. this process is repeated until no members are added to/removed from any clusters, ultimately yielding clusters with the maximum local modularity.

 every cluster from phase  <dig> is then treated as a new node. for each pair of new nodes, an edge connecting them exists if there is at least one edge between any member of one of the new nodes and any member of the other. edge weights are determined based on the number of previous edges. self-loops are drawn on nodes to represent corresponding edges between members of the same clusters.

the output of phase  <dig> is then fed back to phase  <dig> and the algorithm iteratively runs these two phases until no additional changes are made. this component works with huge networks of about  <dig>  nodes within a few seconds  <cit>  and, thus, is highly suitable to be applied to large and complicated biological networks.

property-based clustering component
recent investigations have revealed that, hub-like nodes tend to connect with low-degree nodes and the majority of nodes interact with only a few partners in some common biological datasets  <cit> . in these cases, large and densely connected regions are relatively rare, whereas small, densely connected modules are more frequently found. therefore, abstraction by the first component can be inadequate. property-based clustering can then be invoked to further abstract the network to a manageable level, allowing for visual interpretation  <cit> . this clustering automatically groups clusters with similar biological properties by using property information .

let n be the number of nodes in the original input graph and l be the number of clusters created in the previous step . for each n, where  <dig> ≤ n ≤ n, node vn has a set of terms, t, that denotes the properties of the node . a weight, w, is given to each term t to quantify its importance . let tall≡⋃1≤n≤ntvn and tall = {tj| <dig> ≤ j ≤|tall|}. for each lc, lcl, where  <dig> ≤ l ≤ l, let prop = |{v ∈ lcl|t ∈ t}|/|lcl|. the property vector for lcl or pv is a |tall|-dimensional vector whose j-th element is the score of term tj, which is calculated as w prop . in our implementation, term th is the property term for labeling lcl, where w prop ≥ w prop, ∀ j,  <dig> ≤ j ≤ |tall|. next, the similarity between two lcs, lca and lcb, is given as a normalized dot product of the two property vectors sim = pv·pv/|pv||pv|. the lcs having similar property vectors are grouped by the farthest first traversal k-center  algorithm  <cit> . the fft algorithm is a complexity-reducing variant of the k-means algorithm, where the initial k cluster centers are chosen as follows. the first center  is chosen randomly and each remaining center is determined by choosing the vector farthest from the set of already chosen centers. the rest of the vectors are assigned to the cluster to which they are most similar.

the resulting clusters are used instead of those generated by the first component. the property-based clustering component offers two advantages:  the preferred number of nodes/clusters to be shown on the canvas can be directly controlled by the parameter k; and  the property information used by this component carries biological meaning, so the produced clusters would be highly intuitive.

visualization component
the resultant clusters/nodes are displayed on the cytoscape canvas along with the meta-edges and property edges, which represent the number of edges existing between any members of two clusters and the similarities between their properties, respectively. at this stage, users can interactively zoom, move laterally beyond cluster boundaries, and/or focus on an arbitrary set of nodes/clusters.

naviclustercs provides zooming and re-centering functions, which work similarly to those of online mapping services such as google maps. the zooming function takes all node members of the selected clusters as input, performs the two-stage clustering, and then displays the abstracted network. the zooming can be performed on more than one cluster at a time. given user-defined nodes/clusters, the re-centering function executes the clustering on all nodes whose geodesic distances to the selected nodes/clusters are not greater than a provided value. this function corresponds to panning maps to see surrounding regions in web mapping services. by changing the geodesic distance, both fine and coarse visualization centered on the selected nodes/clusters can be created.

RESULTS
comparison with existing network visualization tools
user interface
the control panel of naviclustercs comprises two buttons, the load network button and the start button, and two tabs, the basic tab and the extra tab . the load network button is used to load new network data and the start button invokes the two-stage clustering on the network. the basic tab allows users to navigate views back and forth, zoom in on clusters of interest, re-center the network on clusters/nodes of interest, and search for a node of interest. in the extra tab, users can adjust namespace weights, re-cluster the network, refine the filter of property edges, and create new custom views. data panel is hidden by default to give more space for resultant networks generated by naviclustercs.

users can start with loading a node list file and an edge list file via the load network button of the basic tab or via the import functions of cytoscape. besides, users can use their networks loaded onto cytoscape as well, provided that there exist all required attributes attached to the nodes and edges of the networks, such as an attribute named "weight" for edges. for detail, see the online manual at http://navicluster.cb.k.u-tokyo.ac.jp/cs/. after loading, the users can run the two-stage clustering  on the network by clicking the start button . a resultant abstracted view is illustrated in figure  <dig>  when the clustered network is displayed, the users can navigate the network in many different ways. double-clicking on a cluster zooms in on the cluster. selecting clusters and clicking the zoom in button zooms in on those clusters at once. selecting nodes and/or clusters and clicking the run button of the re-centering panel re-centers the network on the selected nodes/clusters . apart from that, the users can go back and forth between the network views created in the past by using the " < " and " > " buttons. the resultant networks on the canvas can be easily saved as image via cytoscape's export menu.

furthermore, users can configure the settings of naviclustercs and switch between domains of interest via the naviclustercs menu. general settings allows for changing the directory that contains domain information , a vizmapper file , and a graph layout algorithm used when loading networks. switch domains allows for selecting domain of interest, changing a property information file, and specifying information about external databases used to create context-specific menus for nodes. for more detail, see the online manual at http://navicluster.cb.k.u-tokyo.ac.jp/cs/.

application of naviclustercs to the atted-ii network dataset
we ran naviclustercs on atted-ii, an arabidopsis gene co-expression network dataset with  <dig>  nodes and  <dig>  edges, which correspond to genes and co-expressions, respectively. the edges were weighted by mutual ranks  of co-expressions between any two genes  <cit> . illustrated in figure  <dig> is the abstracted view of the whole atted-ii network dataset. the number of clusters to be displayed was set at  <dig>  the go terms assigned to genes were obtained from tair  <cit> , and only biological process terms were used for the property-based clustering in this analysis. the numbers shown above the clusters represent the number of nodes within the clusters, and the labels following the numbers are the abbreviated go terms that get the highest score and, thus, best describe the properties of the clusters. meta-edges are drawn as blue lines between any two clusters that have at least one edge between at least one member in each of the two clusters, with the numbers next to each edge representing the total numbers of all edges existing between the members of the two clusters. the total numbers are also reflected by the thicknesses of the meta-edges. in addition, a property edge is drawn as a black line between every pair of clusters if they share significant numbers of go terms.

acquiring knowledge about at4g <dig> and at2g <dig> via re-centering
shown in figure  <dig> is a screenshot of naviclustercs centered on the genes of interest . by invoking its re-centering function, a user can grasp what types of genes exist around the genes of interest in this network. in figure  <dig>  the clusters related to the defense response surround the two genes, suggesting that these genes are also involved in this function. actually, they have recently been confirmed to be positive regulators of ics <dig> and pbs <dig>  which are key players of systemic acquired resistance   <cit> . it is extremely difficult to infer this kind of knowledge from huge network data if a cluttered visualization is employed; this example clearly illustrates how our visualization approach can provide meaningful and interpretable information for researchers.

unraveling hierarchical organization of the network via zooming
users can interactively navigate the abstracted network in figure  <dig> in a multi-scale manner as illustrated in figure  <dig>  which shows how the zooming function can lead a researcher to the gene of interest  in this case). pbs <dig> encodes a member of an auxin-responsive gh <dig> family of acyl-adenylate/thioestor-forming enzymes, some of which have been shown to catalyze hormone-amino acid conjugation. in figure  <dig>  the clusters containing pbs <dig> are highlighted in all of the views; the granularities of detail in each view vary from coarsest to finest.

in figure 4a, which depicts the entire network, the clusters are labeled with broad biological processes such as regulation of transcription, dna-dependent, response to heat, and embryo development ending in seed development. pbs <dig> is found under the cluster of signal transduction, which is highlighted. indeed, pbs <dig> is involved in a signal transduction cascade of sar  <cit> . zooming in on the signal transduction cluster reveals that the systemic acquired resistance cluster is highlighted, meaning that pbs <dig> is grouped under this cluster . this result is in accordance with many sources stating that pbs <dig> affects sar  <cit> . zooming in on the systemic acquired resistance cluster at this stage indicates that pbs <dig> is a member of the defense response to bacterium cluster . finally, figure 4d illustrates the deepest view after zooming in on the defense response to bacterium cluster. at this stage, the relationships between pbs <dig> and other genes related to sar, such as at1g <dig> , at1g <dig> , and at1g <dig> , are depicted  <cit> . this example illustrates that clusters comprising co-expressed genes of similar functions are sensibly created and their roles are indicated informatively and correctly. the amount of information displayed is kept tractable by showing only  <dig> nodes/clusters per view.

CONCLUSIONS
naviclustercs offers interactive and multi-scale network navigation to a wide range of biologists who struggle to acquire knowledge from many types of large networks of functional genomics. as shown in the examples, apart from showing the hierarchical organization of the network under consideration, naviclustercs can also assist users in grasping information about nodes  of interest. as a future work, we plan to make naviclustercs compatible with cytoscape  <dig> and fully take its advantages and new features.

availability and requirements
• project name: naviclustercs

• project home page: http://navicluster.cb.k.u-tokyo.ac.jp/cs/

• operating system: platform independent

• programming language: java, minimum requirement java se  <dig> 

• cytoscape version: naviclustercs has been tested on version  <dig> 

• memory: minimum 1gb

• license: bsd license

• any restrictions to use by non-academics: none other than those in the bsd license

list of abbreviations used
os: operating system; atted-ii: arabidopsis thaliana trans-factor and cis-element prediction database; mr: mutual rank; go: gene ontology; tair: the arabidopsis information resource; sar: systemic acquired resistance; lc: louvain cluster; fft: the farthest first traversal k-center algorithm.

competing interests
the authors declare that they have no competing interests.

authors' contributions
tp and wi conceived and designed the experiments. tp implemented software tool and performed the experiments. tp and wi analyzed the data. tp and wi wrote the paper. wi and tt supervised the project.

