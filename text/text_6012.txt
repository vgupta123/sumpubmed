BACKGROUND
rna plays many important biological roles other than as a transient carrier of amino acid sequence information. it catalyzes peptide bond formation  <cit> , participates in protein localization  <cit> , serves in immunity  <cit> , catalyzes intron splicing and rna degradation  <cit> , serves in dosage compensation  <cit> , is an essential subunit in telomerase  <cit> , guides rna modification  <cit> , controls development  <cit> , and has an abundance of other regulatory functions  <cit> .

non-coding rnas  are transcripts that have function without being translated to protein. the number of known ncrnas is growing quickly  <cit> , and their significance had been severely underestimated in classic models of cellular processes  <cit> . it is desirable to develop high-throughput methods for discovery of novel ncrnas for greater biological understanding and for discovering candidate drug targets.

however, novel ncrnas are difficult to detect in conventional biochemical screens  <cit> : they are frequently short  <cit> , often not polyadenylated  <cit> , and might only be expressed under specific cellular conditions  <cit> . experimental screens have found many ncrnas  <cit> , but have demonstrated that no single screen is capable of discovering all known ncrnas for an organism. a more effective approach, demonstrated in previous studies  <cit> , may be to first detect ncrna candidates computationally, then verify them biochemically. considering the number of available whole genome sequences  <cit> , this approach can be applied to a large and diverse dataset, and has massive potential for novel ncrna discovery.

the effectiveness of a computational ncrna detection/classification method is determined by measuring its sensitivity and specificity on a test set of known ncrnas and negative sequences. sensitivity and specificity are defined as:

sensitivity=true positivestrue positives+false negatives     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgzbwccqqglbqzcqqgubgbcqqgzbwccqqgpbqacqqg0badcqqgpbqacqqg2bgdcqqgpbqacqqg0badcqqg5bqecqgh9aqpdawcaaqaaiabbsha0jabbkhayjabbwha1jabbwgaljabbccagiabbchawjabb+gavjabbohazjabbmgapjabbsha0jabbmgapjabbaha2jabbwgaljabbohazbqaaiabbsha0jabbkhayjabbwha1jabbwgaljabbccagiabbchawjabb+gavjabbohazjabbmgapjabbsha0jabbmgapjabbaha2jabbwgaljabbohazjabgucariabbagamjabbggahjabbygasjabbohazjabbwgaljabbccagiabb6gaujabbwgaljabbeganjabbggahjabbsha0jabbmgapjabbaha2jabbwgaljabbohazbaacawljagaaczcaiabcufabjabbwgaljabbghaxjabc6cauiabbccagiabigdaxiabc2fadbaa@80c7@

specificity=true negativestrue negatives+false positives     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgzbwccqqgwbaccqqglbqzcqqgjbwycqqgpbqacqqgmbgzcqqgpbqacqqgjbwycqqgpbqacqqg0badcqqg5bqecqgh9aqpdawcaaqaaiabbsha0jabbkhayjabbwha1jabbwgaljabbccagiabb6gaujabbwgaljabbeganjabbggahjabbsha0jabbmgapjabbaha2jabbwgaljabbohazbqaaiabbsha0jabbkhayjabbwha1jabbwgaljabbccagiabb6gaujabbwgaljabbeganjabbggahjabbsha0jabbmgapjabbaha2jabbwgaljabbohazjabgucariabbagamjabbggahjabbygasjabbohazjabbwgaljabbccagiabbchawjabb+gavjabbohazjabbmgapjabbsha0jabbmgapjabbaha2jabbwgaljabbohazbaacawljagaaczcaiabcufabjabbwgaljabbghaxjabc6cauiabbccagiabbkdayiabc2fadbaa@8024@

where true positives are ncrnas that are detected by the method, true negatives are sequences that are not ncrna and are not classified as ncrna by the method, false positives are sequences that are not ncrna, but are classified as ncrna by the method, and false negatives are ncrnas that are missed by the method.

generally, there is a tradeoff between sensitivity and specificity – tailoring a computational method to increase one measurement may decrease the other. throughout this paper, receiver operating characteristic  curves are used to visually express the quality of a ncrna classification method by plotting sensitivity as a function of the false positive rate , providing a complete description of all possible sensitivity/specificity tradeoffs. it should be noted that in a whole genome screen, high specificity is more essential than high sensitivity due to the large ratio of non-ncrna sequence to ncrna sequence. low specificity results in an overwhelming number of false positives, swamping the number of true positives, and increasing the difficulty, time, and cost of a biochemical verification screen.

it has been proposed that ncrnas may form secondary structures that are more stable than would be expected from non-ncrna sequences of the same nucleotide or dinucleotide composition  <cit> . this hypothesis has been controversial; it has been suggested that it is not true, or at least that the stability difference is not statistically significant enough to be a sensitive and specific criterion for classifying sequences as ncrna  <cit>  . however, the program rnaz was recently reported  <cit>  to use folding free energy changes of single sequences, combined with a structure conservation index  determined from a fixed, multiple sequence alignment, to effectively detect ncrna. the sci is the ratio of the consensus secondary structure free energy change  determined by rnaalifold  <cit>  to the average folding free energy change for each sequence determined alone. this indicates that incorporating secondary structure conservation into a model based on folding free energy change improves the quality of prediction.

here, the effectiveness of the program dynalign  <cit>  as a tool for detection of ncrna on the basis of predicted folding free energy change is investigated. dynalign is a dynamic programming algorithm for simultaneously computing the lowest free energy common secondary structure and the structural alignment for two sequences. in brief, dynalign minimizes Δgtotal:

Δg°total = Δg° <dig> + Δg° <dig> +  × Δg°gap penalty    

where Δg° <dig> and Δg° <dig> are the predicted folding free energy changes of secondary structures of sequence  <dig> and sequence  <dig>  respectively, and Δg°gap penalty is a penalty applied for each gap in the alignment. only conserved helices, i.e. those that appear in both sequences, are predicted. the conformational free energy changes are predicted using an empirical nearest neighbor model  <cit>  and Δg°gap penalty was empirically determined by maximizing structure prediction accuracy  <cit> . dynalign predicts secondary structure with significantly greater accuracy than single sequence structure prediction methods because of the additional information contained in the structural alignment  <cit> . it requires no sequence identity between the two sequences to perform well because there are no energy terms  that address sequence identity. therefore, dynalign is robust for cases in which extensive covariation of base-paired nucleotides exists as a result of sequence evolution.

dynalign is initially implemented in this paper as a computational ncrna classifier by using it to compute the Δg°total of an input sequence pair, then comparing that value to the mean of Δg°totals of control sequence pairs generated specifically for that input pair. if the Δg°total of the input sequence pair is sufficiently lower than the mean Δg°total of the set of controls, the input sequences are classified as ncrna. the z score is used to quantify this difference, defined as:

z = /σ     

where x is the Δg°total of the input sequence pair, and μ and σ are the mean and standard deviation of the Δg°totals of sequence pairs in the control set, respectively. therefore, the z score is just the number of standard deviations that the Δg°total of the input sequence pair is above or below the mean of its set of controls.

it should be noted that the definition of z score implies that the control set values follow a normal distribution, but it has been noted that the distribution of Δg°s for single sequences is actually extreme value with skew towards lower folding free energies  <cit> . tests  suggest that the distributions of Δg°totals of sequence pairs in control sets are also skewed towards lower free energies. however, the z score is an effective measure for classification and has been used in this manner elsewhere  <cit> .

this approach is tested on a large database of known 5s rrna and trna sequences and artificially generated negatives, demonstrating that the z score based on the Δg°total can be used as a sensitive and specific classification measure. these results are also compared to rnastructure  <cit> , a dynamic programming algorithm for single sequence secondary structure prediction by free energy minimization. also, a support vector machine  is implemented to speed the classification process by training an svm classifier that does not require a control set for an input sequence pair.

additionally, the capability to use dynalign as an effective genomic ncrna screening tool is illustrated with a whole genome screen on a crude alignment of the escherichia coli and salmonella typhi genomes  <cit> , which contain a significant number of known ncrnas. many methods have been employed for genomic screens for ncrnas of specific families  <cit> ; benchmarks and discussion in this paper are focused on the premise of using dynalign as a general genomic screening tool for diverse, novel ncrnas.

the above tests are benchmarked against two leading ncrna prediction programs, qrna  <cit>   and rnaz  <cit>  . rnaz uses a regression svm to compute a z score for each sequence in a multiple sequence alignment, then uses the mean of those z scores and the sci as input to a classification svm. while structure predictions by dynalign and rnaz are based on calculating the most stable secondary structure using experimentally determined thermodynamic parameters, qrna uses a fully probabilistic covariance analysis approach that compares scores of three models – ncrna, open reading frame, or other  – for a pair of sequences.

unlike dynalign, which optimizes its own structural alignment, both qrna and rnaz require a fixed sequence alignment as input. it is shown here that at low pairwise sequence identity, the dynalign approach outperforms the fixed alignment approach. additionally, dynalign is shown to be a more sensitive ncrna finder on whole genome screen tests.

RESULTS
improving time and memory performance of dynalign
dynalign's complexity is o in time and o in storage, where n is the length of the shorter sequence and m is the maximum separation parameter that limits the set of sequence alignments that are considered  <cit> . for nucleotide i in the first sequence to align to nucleotide k in the second sequence:

| i - k | = m     

must be satisfied. the m parameter therefore reduces the set of alignments that are considered by dynalign and hence the computational cost. similar constraints have been used by others  <cit>  to provide computational tractability.

to improve the efficiency of dynalign, two strategies have been employed. the first was to recast the implementation of the m parameter to a form that scales with the difference in sequence length of the two sequences, so that for i and k to align:

| i ×  - k | = m     

must be satisfied, where n <dig> is the total length of the first sequence and n <dig> is the total length of the second sequence. this constraint automatically allows the 3' ends of the sequences  to align for any m and any difference in sequence length. with equation  <dig>  m had to be at least as large as the difference in lengths of the sequences in order for the 3' ends of the sequences to align. now, with equation  <dig>  significantly smaller m sizes can be used with dynalign. for example, trna sequences can now be folded with an m =  <dig>  where previously m =  <dig> was used, resulting in a significant runtime improvement without affecting accuracy.

the second approach employed to accelerate dynalign was to determine base pairs that are unlikely to form on the basis of single sequence folding and then not consider those pairs in the dynalign calculation. pairs that would result in secondary structures with free energy greater than the lowest free energy structure by more than 30%, as determined by energy dot plots  <cit> , are excluded from consideration in the dynalign calculation  <cit> . table  <dig> shows that nearly 99% of known base pairs are found within this energy increment, hence this heuristic has little effect on the accuracy of dynalign calculations. this pre-computation of structural information by single sequence secondary structure prediction is similar to approaches used by hofacker et al  <cit>  and holmes  <cit>  to speed the alignment of rna sequences using secondary structure information.

for the benchmarks performed previously  <cit> , using these two methods does not lower the accuracy of dynalign secondary structure predictions . table  <dig> shows the calculation time and memory requirements for three pairs of rna sequences with n from  <dig> to  <dig> before and after both of the above improvements. calculations that use the improved dynalign are completed in less than a twentieth of the time required for calculations using the previous dynalign. the calculation time is now reduced to a level similar to foldalign  <cit> , another dynamic programming algorithm that determines the secondary structure common to two unaligned sequences. the revised dynalign is available for download from the mathews lab website  <cit>  as both source code for local compilation and as part of the rnastructure package for microsoft windows.

tests by z score classification of single sequences
to test the effectiveness of classifying single sequences as ncrna on the basis of a folding free energy change, rnastructure  <cit>  was used to compute the minimum folding free energy change for a test set of  <dig>  known 5s rrna, trna, and negative sequences. a negative sequence was generated from each real ncrna by the altschul-erikson sequence shuffle that exactly preserves the nucleotide and dinucleotide  frequencies of the real ncrna  <cit> . because the stabilities of base pairs are predicted using a nearest neighbor model that considers the sequence identity of two stacked pairs, negative and control sequences must preserve the dinucleotide frequencies of the original sequence, while also breaking the nested base pair structure  <cit> . the negatives are needed to test the rate of false positive classification to determine specificity.

to compute the z score, each sequence in the test set had a control set of  <dig> sequences generated specifically for it using the altschul-erikson shuffle, and their minimum folding free energy changes were determined by rnastructure. the z score histograms for 5s rrna, trna, and negative sequences generated from them are shown in figure  <dig> 

sequences below a cutoff z score are classified as ncrna. however, rather than pick a single z score cutoff for classification and report those results, iterations were performed over a wide range of z score cutoffs in order to construct an roc curve  expressing sensitivity as a function of the false positive rate, thus showing the overall quality of the ncrna classification method for all sensitivity/specificity tradeoffs. figure  <dig> shows that trna sequences are classified with better sensitivity  than 5s rrna sequences using either method, which suggests that trna sequences have a lower predicted folding free energy than 5s rrna sequences versus matched controls.

tests by z score classification of sequence pairs
to test the effectiveness of classifying pairs of sequences as ncrna using dynalign on the basis of the Δg°total-based z score, z scores were determined for a test set of  <dig>  known 5s rrna, trna, and negative sequence pairs. negative sequence pairs were generated from real sequence pairs by shuffling the columns in the real sequence pair gapped global alignment, then removing gaps. three control generation methods were used for each sequence pair to randomize the nucleotide order and remove the nested base pair structure while preserving other sequence properties. because dynalign's computation time is greater than that of rnastructure, the number of controls per sequence pair was limited to  <dig> to make the calculation time feasible.

the first two control generation methods focus on preserving dinucleotide frequencies  and are applied to each sequence in the original pair separately, without regard for alignment. as with prediction from single sequences, because stability contributions of each base pair are dependent on the base pairs on which it is stacked, it may be necessary to control for the dinucleotide frequencies  <cit> . the first-order markov chain sampling method for control sequence generation approximately preserves the original dinucleotide frequencies  <cit>  , while the altschul-erikson shuffle method for control generation exactly preserves both nucleotide and dinucleotide frequencies, with the restriction that the first and last nucleotide of the shuffled sequence are exactly the same as the original  <cit> .

the third control generation method is a columnwise shuffle of a global alignment that approximately preserves the percent identity of the original sequence alignment. although removing gaps and re-aligning the columnwise shuffled sequences results in a different alignment, the change in percent identity from the original sequence pair is not as drastic as with the other two control methods. for example, columnwise shuffling a sequence pair alignment, followed by re-alignment, results in a mean percent identity change of  <dig> , with a standard deviation of  <dig> ; however, the mean and standard deviation of percent identity change if altschul-erikson shuffles are used are - <dig>  and  <dig> , respectively. it is reasonable that randomizing sequences separately and re-aligning them results in a greater change  in percent identity of the sequence pair, compared to shuffling the alignment in columns.

roc curves comparing effectiveness of the three control generation methods are plotted in figure  <dig>  the columnwise shuffle control method produces the highest sensitivities for all specificities, and is therefore the best approach of the three. the distributions of z scores for 5s rrna, trna, and negative sequence pairs for trials using this control method are shown in figure  <dig>  and the separation of real ncrna and negative sequences is significantly more distinct than in figure  <dig> . additionally, the altschul-erikson shuffle control generation method is more effective than the first-order markov chain sampling method.

each control generation method was also tried using two different values of the m parameter, m =  <dig> and m =  <dig>  for computation of the input sequence pair and the control set Δg°totals . it was found that the higher m parameter improves the quality of classification for all control generation methods, at the expense of longer runtime.

the quality of the best control generation method is also examined when 5s rrna and trna are separated into different sets and tested independently . it was discovered that this method is generally more sensitive at a given specificity for detecting 5s rrna than trna . finally, ncrna classification using single sequences is compared with the sequence pair approach in figure  <dig>  this shows significantly better performance for the two sequence approach with dynalign as compared to single sequences.

because rnaz outputs the probability  that an input sequence alignment is ncrna, it is possible to construct an rnaz roc curve for the same test set as dynalign, except by varying the sensitivity/specificity tradeoff by iterating over p value cutoffs for classification. if a sequence alignment input to rnaz has a p value greater than the cutoff, it is classified as ncrna. the quality of classification for rnaz as compared to the dynalign z score method is shown in figure  <dig>  while rnaz is more sensitive at specificities above approximately  <dig> %, the dynalign z score method is more sensitive at lower specificities.

rnaz requires pre-aligned sequences as input, which is a disadvantage at lower sequence identities because, for highly divergent sequences, an optimal sequence alignment prepared by an algorithm that minimizes an alignment identity score may not necessarily be the optimal structural alignment that takes into account the common secondary structures of the rna sequences  <cit> . dynalign does not suffer from this limitation because it simultaneously optimizes the common secondary structure and the structural alignment, and thus does not need pre-alignment of the input sequence pair. to illustrate this advantage of dynalign over rnaz at low sequence pair identities, figure  <dig> compares the roc curves of the dynalign z score method and rnaz only for sequences in the test set that are below 50% identity. at this level of low sequence identity, the dynalign z score method is more sensitive than rnaz at all specificities.

tests by support vector machine  classification
generating a large number of controls for each input sequence pair is an accurate, but time-consuming method for classifying sequences, making a whole genome screen costly. to speed the calculation, a support vector machine  can be used. svms are a set of machine learning methods capable of performing non-linear regression and classification of numerical data  <cit> . for example, rnaz uses a regression svm to compute single sequence z scores and a classification svm to determine whether a multiple sequence alignment is ncrna or not on the basis of a set of input parameters.

to classify sequence pairs without performing explicit control calculations to generate a z score, a binary svm classifier was employed . the classifier takes as input the dynalign-computed Δg°total of the input sequence pair, the length of the shorter sequence, and a, u, and c nucleotide frequencies of sequence  <dig> and sequence  <dig>  this dynalign/libsvm classifier was trained on a set of  <dig>  real and negative sequence pairs in a 1: <dig> ratio; the real sequence pairs were composed of two 5s rrna or two trna, and two negative sequence pairs were generated from each real sequence pair using two different sequence shuffling methods. the classifier was trained to output a classification probability  of the input sequence pair being ncrna, thus allowing for the construction of roc curves because the ncrna classification cutoff could be set at any desired p value.

to benchmark the performance of the dynalign/libsvm classifier versus rnaz and qrna, the three methods were applied to a test set of  <dig>  5s rrna and trna sequence pairs and  <dig>  negative sequence pairs . for comparison of the dynalign/libsvm classifier and rnaz, roc curves are plotted for all sequence pairs in figure  <dig>  and for sequence pairs below 50% identity in figure  <dig>  because qrna compares scores for three different models  to make the classification, an roc curve cannot be constructed for it as for rnaz and the dynalign/libsvm method, so qrna classification benchmark results are listed in table  <dig> 

the benchmarks on 5s rrna and trna indicate that the dynalign/libsvm classifier is more sensitive than rnaz if the desired specificity is below approximately  <dig> %. however, for higher specificities, rnaz becomes more sensitive. when only sequence pairs below 50% identity are considered, the difference between the two methods in prediction quality at high specificities narrows; rnaz is more sensitive than dynalign at above approximately  <dig> % specificity, but less sensitive at all specificities below that.

while figure  <dig> clearly illustrates that dynalign is the better, albeit slower, tool for classifying low-identity sequence pairs if using the z score method, this apparently does not carry over as effectively into the dynalign/libsvm classifier. figure  <dig> illustrates the roc curve for the dynalign/libsvm classifier plotted with roc curves for the z score method from figure  <dig>  indicating that the quality of prediction with the dynalign/libsvm classifier is worse than the best z score control generation method, although being approximately  <dig> times faster because no explicit controls have to be run.

detection of long ncrnas
because the runtime complexity of dynalign prohibits an efficient whole genome screen using long scanning windows, the hypothesis that the dynalign/libsvm classifier could pick up long ncrnas by scanning through them using short windows was tested. three 16s rrna and three 23s rrna sequence pairs were chosen randomly from a database of sequences  <cit> , and, for each pair, a global alignment was constructed. the alignments were scanned with windows of size  <dig> nucleotides, stepping  <dig> nucleotides at a time. the alignment information was removed from each window prior to input to dynalign because dynalign takes two unaligned sequences as input. the dynalign/libsvm classifier was used to compute the probability  of each window being ncrna.

whole genome screen using the dynalign/libsvm classifier
the capability of the dynalign/libsvm classifier as a ncrna detection tool was tested on whole genome alignments of escherichia coli k- <dig> mg <dig>  <cit>  and the main chromosome of salmonella enterica serovar typhi  ct <dig>  <cit> . two different methods of preparing a whole genome alignment were used. in each case, nucleotides known to be in open reading frames  were removed to speed the calculation. with the wublastn  <cit>  method, nucleotides in known open reading frames  of e. coli  were dropped before the alignment and the screen; in the mummer  <cit>  method, nucleotides in known orfs in both genomes were retained for the alignment, but dropped before the screen. this has the disadvantage that ncrna overlapping with or complementary to orfs would be truncated or dropped before the screen, but the lack of a significant number of such ncrnas did not render this a problem. for example, in e. coli, only eight known ncrnas partially overlap coding regions and no known ncrnas completely exist in coding regions. out of the known  <dig> e. coli ncrnas, the mummer whole genome alignment contained  <dig> completely ,  <dig> partially , and  <dig> ncrna did not show up at all in the alignment. the wublastn alignment contained  <dig> completely,  <dig> partially, and  <dig> ncrna did not show up at all. therefore, the maximum number of detectable e. coli ncrnas was  <dig> for the mummer alignment, and  <dig> for the wublastn alignment.

for the first method of preparing whole genome screen windows, a mummer  <cit>  whole genome alignment was performed of the entire e. coli genome with the entire s. typhi main chromosome. alignment columns containing known orf nucleotides in either genome were removed after the alignment; orf regions were retained for the alignment step only to serve as "anchors" to produce greater coverage and better align intergenic regions. the resulting alignment blocks were scanned with windows of size  <dig> alignment columns, stepping  <dig> at a time. the alignment information is removed from each window prior to input to dynalign, but retained for input to qrna and rnaz because they require pre-aligned sequences. this produced  <dig>  total windows  containing  <dig> , <dig> alignment columns. the distribution of percent identities for these windows is reported in figure  <dig>  the large number of alignment columns relative to intergenic region size is explained by the same sequences producing multiple alignment blocks, due to the quantity of repetitive elements in both genomes. after screening, overlapping and contiguous windows that are classified as ncrna are merged and considered a single ncrna.

for the second method of preparing whole genome screen windows, intergenic regions of e. coli  were used as wublastn  <cit>  queries against the entire s. typhi main chromosome, resulting in  <dig>  total windows  containing  <dig> , <dig> alignment columns. the distribution of percent identities for these windows is reported in figure  <dig>  like in the mummer alignment, the large number of alignment columns is due to the same sequences appearing in multiple alignment blocks. the windows were created by scanning through the resulting wublastn alignment blocks in the same manner as with the mummer screen, using windows of size  <dig> alignment columns, step size  <dig>  the alignment information was removed from each window prior to input to dynalign, but retained for input to qrna and rnaz because they require pre-aligned sequences. once again, after screening, contiguous or overlapping windows classified as ncrna were merged into single ncrna.

the results of the wublastn genomic screen listed in table  <dig> differ from the results of the mummer genomic screen . the number and coverage of "other" hits in s. typhi is much greater than in e. coli , presumably because e. coli intergenic regions are used as queries against the entire s. typhi chromosome that here, unlike in the mummer screen, did not have any orfs removed prior to generating scanning windows, thus resulting in more s. typhi sequence present. the performance of the dynalign/libsvm classifier and rnaz at the p >  <dig>  cutoff in the wublastn screen is comparable to their performance at the p >  <dig>  cutoff in the mummer screen; qrna also seems to be more sensitive and less specific in the wublastn screen than mummer. this indicates that a mummer whole genome alignment would be more desirable for high-specificity whole genome screens.

the complete datasets for both genomic screens are presented in "additional files." additional files  <dig> and  <dig> give the classification of each window in the mummer and wublastn genome screens, respectively. additional files  <dig> and  <dig> likewise provide the input data to the svm classifier for the mummer and wublastn genome screens.

CONCLUSIONS
it has been shown that the Δg°total calculated by dynalign can be used as an effective parameter for detecting ncrnas. also, because dynalign predicts a secondary structure common to two sequences, it is possible to incorporate additional structure-based parameters into the classification model. a recent benchmark of various structural alignment programs  <cit>  reports that dynalign structural alignments are among the best at reflecting conserved secondary structure, becoming the best at sequence identities below 50%. the potential of dynalign as a ncrna detection tool can be yet further explored. for example, it would be interesting to see if methods could be improved if strictly probabilistic or evolution-based scores  <cit>  were added as input to the dynalign/libsvm classifier. additionally, considering that all testing here was based on only two ncrna families, it would also be interesting to test how well the dynalign/libsvm classifier would perform if the training set were made more diverse, or if the svm was optimized further. the libsvm input data set for all possible pairwise alignments of 5s rrna, trna, and negative sequences generated from them are presented in additional file  <dig> in "additional files" for such purposes.

the advantages of using dynalign over existing ncrna detection methods are that it is more sensitive at most specificities and that it produces higher quality predictions at low sequence identities. the latter is important, since the number of conserved low-identity regions in some genomes of interest may be high. for example, figure  <dig> illustrates a distribution of percent identities of a human-mouse blastz genome alignment  <cit>  broken down into  <dig> nucleotide non-overlapping windows. 25% of the alignment is in the below 50% identity region where the dynalign z score method outperforms rnaz. additionally, table  <dig> seems to indicate that the dynalign/libsvm classification method is more consistent across varying percent identities than the other two programs.

the disadvantages to dynalign as a ncrna detection method are that the number of input sequences is currently limited to two, the algorithm does not allow pseudoknots , and that the runtime is longer than that of many other ncrna classification programs, especially in the case of explicitly running controls for each input sequence pair; however, optimizations resulting in significant decreases in dynalign runtime have been achieved as shown in table  <dig>  while control generation can be circumvented by using a classification svm, the quality of prediction of such a method  appears to drop slightly. however, this simple classification svm approach, which does not directly incorporate a z score into the classification model, is still more sensitive for known ncrnas in a whole genome screen than rnaz or qrna. it may be possible to improve the quality of classification by using a regression model to determine the z score separately from the classification svm step, which is a strategy successfully employed by rnaz, except that in this case the z score would be based on the Δg°totals of sequence pairs instead of single sequences, increasing the complexity of the regression model.

the foldalign program  <cit>  is closely related to dynalign and can also be used for ncrna detection. foldalign also uses a dynamic programming algorithm to find the secondary structure common to two, unaligned sequences and the sequence alignment that facilitates the structure. foldalign should therefore share the same advantages and disadvantages that dynalign has for ncrna detection at low sequence identity. foldalign maximizes a score that includes a subset of the free energy change nearest neighbor parameters  <cit>  and terms that score sequence similarity  <cit> . a scanning version of foldalign has been reported  <cit>  that takes long sequences as input, but limits the length of structural motifs to a parameter, λ, and so does not require that the sequence be broken into windows.

because it is fast, prediction from single sequences  could be used as a rapid pre-filtering step to eliminate a large number of genomic sequence when doing a whole genome screen using these methods. for example, figures  <dig> and  <dig> indicate that at 36% specificity, the sensitivity of prediction is approximately 99% for 5s rrna and trna tests using rnastructure. assuming these numbers are indicative of performance on all ncrna families, we could use single sequence prediction to quickly eliminate 36% of the negatives in a whole genome screen without sacrificing an overwhelming majority of the real ncrna. then, the reduced amount of sequence could be screened with the more time-consuming approach of prediction from sequence pairs, thus speeding up the overall screen.

the dynalign ncrna detection method that we have outlined is computationally costly, but feasible for analysis of long genomes. for example, we estimate that a dynalign/libsvm screen  of the human-mouse whole genome alignment regions below 50% sequence identity in figure  <dig>  which contain approximately  <dig> million alignment columns , would require approximately  <dig>  cpu years after single sequence pre-filtering, or approximately  <dig> days of wall time on a reasonably sized 50-cpu computation cluster. additionally, other pre-filtering methods could be employed to eliminate repetitive and other sequences prior to the dynalign computation.

