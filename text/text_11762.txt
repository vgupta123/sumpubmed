BACKGROUND
the application of high-throughput technologies  to biomedical experimentation generates large quantities of data that can be difficult to browse and interpret in the absence of a graphical representation. eisen et al. have previously displayed clustered microarray data using a false color representation that greatly aids in the intuitive interpretation of the data . however, when these data are from array comparative genome hybridization  experiments , the genomic locations of the reporters  that were used to generate the data are important for interpretation. a relative increase or decrease in the ratios for a group of reporters that report on adjacent genomic locations may indicate amplification or deletion of that genomic region, respectively. additionally, even the analysis of expression data in the context of genomic position can also identify regions of amplification or deletion, or even cases of aneuploidy .

in addition to being able to view and browse arraycgh data, it is also important that the data be readily connected to annotation sources, such that a user can easily determine the identity and attributes of the gene represented by a reporter that was present on a microarray, which for instance may show evidence of amplification or deletion. for example, in arraycgh experiments using tumor cells as the dna source, there is an obvious value in rapidly determining whether a deleted region contains a tumor suppressor gene.

finally, researchers frequently need to create figures, for publications, communication with co-workers, supplemental websites, or presentations. thus researchers should be able to produce the visual representation of their data in a variety of graphic formats.

caryoscope was originally implemented as a web form, generating either a bitmap or a clickable pdf output. when this became an important day-to-day tool for our users , we created an improved, interactive version, consisting of a standalone application for analyzing arraycgh data and an open architecture of re-usable classes that may be embedded by other developers in their own applications. in this paper, we focus on caryoscope as an application.

some other software packages were developed while this work was in progress, and can perform some of these functions. for instance, genome2d  is designed to display bacterial transcriptome data on linear chromosome maps, while seecgh  was designed for viewing arraycgh data . however, both of these programs are designed to run solely on the windows operating system, whereas caryoscope is a java application that can be used on macintosh os x, linux and various unix operating systems, as well as windows. greshock et al.  have built similar functionality, called cghanalyzer, on tigr's multiple experiment viewer  platform, but with a different  whole-genome view. furthermore, caryoscope can be run in a command line mode, making it easy to embed within a cgi or a processing pipeline.

implementation
we implemented caryoscope in java  and deployed it as a java web start  application, so a user may run it directly from our website  by clicking on a link. one can also install caryoscope directly on a computer, but we recommend launching via the website in order to obtain the most current version of the software.

caryoscope accepts data as text input files in simple formats so as to maximize interoperability with other systems.

RESULTS
application features
as input, caryoscope accepts a single file in either the general feature format  or a tab-delimited  or comma-delimited  spreadsheet-compatible format. this file describes the chromosomes to be displayed, and a set of loci on the chromosomes annotated by a number of associated microarray datasets and other descriptive information. the structure of a caryoscope input file is illustrated in figure  <dig> 

once the user opens a file, caryoscope automatically displays one of the datasets contained therein . caryoscope displays each feature as a rectangle on the chromosome axis; the size of the rectangle on the horizontal axis, perpendicular to the chromosome, represents the magnitude of the associated data value, while the size of the rectangle in the vertical direction, along the chromosome axis, represents the size of the represented feature, based on its genomic coordinates. pursuant to convention, the default display of caryoscope represents positive values in red bars, which are drawn to the right of the chromosome, and negative values in green bars , which are drawn to the left of the chromosome. thus, based on color, size, and location, researchers can easily intuit the meaning of the graphical representation of their data.

caryoscope provides several modes in which the user may view the data; these are controlled by the view modes toolbar . in the various panning and zooming modes, the user may change the view of the data to drill down to specific regions of interest. in navigate mode, the user sees tooltips  that appear immediately when mousing over the features, and can navigate to related urls by clicking on each feature. typically, users at stanford university  link genbank accessions, associated with the cdna clones that are on their microarrays, to source gene pages .

the zooming paradigm in caryoscope is somewhat novel in that it permits independent control of the zoom scales in the x and y directions . it allows users to select the best scaling to see detail along the chromosome axis, and the data values perpendicular to the chromosome axis, for their specific data. the reset viewpoint button on the view modes toolbar  allows the user to return quickly to the default scaling.

the behavior of caryoscope in navigate mode is shown in figure  <dig>  the tooltip and url text are computed for each feature by substituting the value of its annotations into the feature tooltip expression and feature url expression settings, as illustrated in the figure. these features allow users to have immediate access to information about each feature as they browse the data.

the user can enable two built-in computations on the data values: a user can compute the logarithm of the values , and a user can compute a moving average of the values. both these computations can be controlled from the settings dialog . users can perform other computations outside caryoscope; this is facilitated by the fact that we support common spreadsheet-compatible file formats .

to prepare diagrams, the user can export the caryoscope display to a variety of graphics formats via the export dialog. specifically, caryoscope supports vector  output for scalable publication-quality results, and raster  output for ease of viewing, posting on supplemental websites, and inclusion in presentations.

a user may export graphics from caryoscope via the command line mode, without having to invoke the interactive user interface. for example, to export a view of a dataset as a pdf file, the user could invoke caryoscope as follows:

      java -jar caryoscope-run.jar

           -inputfile 3395-2004-04- <dig> csv

           -visibledataset rat2_mean

           -outputfile  <dig> pdf

           -outputformat pdf

all settings may be modified via the command line. the -listformats option provides a list of available graphics output formats, and the -help option prints a brief summary of the options.

a comparison of the features of caryoscope with other, similar software is presented in table  <dig> 

obtaining caryoscope
in addition to immediately executable copies, the complete source code for caryoscope is available without limitations from our website , and is covered by a very liberal open source  license . all external components used by caryoscope are also open source.

we update caryoscope frequently  and post news items on the website. we also send e-mail announcements to people who have requested them.

discussion
biological context
caryoscope is useful for viewing both arraycgh and expression data in the context of genomic position. it helps a biologist gain insight by providing a high-level view of a large amount of data at once, where patterns can be perceived at a glance.

a biologist studying amplifications or deletions in tumor cells may create and export graphics representing arraycgh and expression data for the same cells using caryoscope, and visually compare the two side-by-side. for instance, co-located regions that are amplified at the dna level and over-expressed at the rna level would provide excellent confirmation of the results. using the zooming and panning features of caryoscope, the biologist could focus on specific regions of interest.

to identify regions of aneuploidy, the biologist can again simply examine the data visually. in this case, however, one would look for a large-scale pattern. one might specify a minimum feature width of, say,  <dig> pixels , to ensure that any deletion or amplification, no matter how small in genomic coordinates, is easily visible. rather than zooming in on specific regions, a researcher would tend to compare overall views of the entire genome. if it seems like practically all of one chromosome is amplified or deleted, the biologist would have strong evidence for aneuploidy.

in a gene expression study, a biologist may suspect that some expression patterns are correlated with genomic position. caryoscope allows one to view expression data, either for the whole genome or on a region of interest, to help confirm or refute a hypothesis.

finally, in all this work, the biologist may want to have quick and easy access to information about the genomic features displayed. as long as the information needed is available from the annotations that were saved in the input data file , one can use the feature url expression and feature tooltip expression  settings to provide immediate mouse-over feedback with this information – almost as if the application were customized for a specific field of interest.

software context
we intend caryoscope to be a bench-top visualization tool that biologists can use immediately to get day-to-day work done, with a very low "cost of entry" for getting started. this led us to a number of design choices.

caryoscope can be launched from our web site without a prior installation step. since it is open source, anyone, including any for-profit organization, can use it without restrictions and without having to obtain a license or register for access.

the input file formats and output graphical formats we chose are all in common usage. in particular, the txt and csv input formats can be generated using any popular spreadsheet or database software, or even with a plain text editor, without having to do any programming.

finally, we built caryoscope to be content-neutral, with no hard-coded specificity to any research field. thus, users of caryoscope may control how annotations are treated as numerical data, and can "program" data-driven interactive behavior of the display .

future work
from the outset of this project, our biggest challenge has been how to accurately represent the huge amounts of data in a typical gene expression or arraycgh experiment using the limited number of pixels available on the screen or on a printed page. if we skew our display algorithms too much towards producing a "sharp", high-contrast plot, we risk obscuring detail in the data and leading biologists to the wrong conclusions. on the other hand, since the size of the data elements, properly scaled from genomic coordinates to the display device, can be far less than the size of one pixel, we need a supportable way to "summarize" the data within each pixel and represent that summary as a single value: the color  of that pixel.

modern computer graphics systems use a technique called "anti-aliasing"  to render sub-pixel details with the illusion of smoothness. the java subsystems we use in caryoscope do this automatically and, in the current version of the software, we simply rely on them . however, the anti-aliasing in java is designed to display visually appealing text, lines and arcs, but not to ensure the most accurate possible on-screen rendering of scientific data. specifically, at low magnification, the data almost disappear unless we force a minimum pixel size for each locus .

we will develop our display methods further to ensure that we can provide an easy-to-read display while retaining the subtle variations in the data. following the spirit of medical diagnostic imaging , whereby incorrect details in a few pixels could lead to an incorrect conclusion, we must ensure that our displays, which are used for important research decisions, are never misleading.

one solution, suggested by  <cit> , is to display the data elements, not aligned to the position of the loci along the chromosome, but rather in strict sequential order with a fixed width. while this solves the anti-aliasing problems, it does eliminate consistent chromosomal positions and alignments of the data. furthermore, it causes the appearance of the display to be dependent on the specific choice of clones – which can be another source of subtle variation when comparing multiple datasets. another idea is to display dots, rather than horizontal bars, so that the "spread" of the data is more visible even if data points are super-imposed. we will investigate this for a future release of caryoscope.

we are particularly concerned about the use of caryoscope  graphics in vector formats  that are subsequently rendered on diverse display devices and printers. since we have no control over the rendering at the destination, it is likely that the same vector output could look very different on different devices. once we have studied this problem in more detail, we intend to provide practical usage guidelines for researchers.

our experience with the application, and how it is used, leads us to believe that the current zooming paradigm should be revisited. while the model of a continuously zoomable 2d space provides users with the features they need, it can lead to displays whereby the data in specific regions of adjacent chromosomes are juxtaposed, even though their being next to each other is not intrinsically meaningful . 

in the future, we will modify our display so that the user can turn "on" or "off" the display of the available chromosomes. within that display, and with the help of our users, we will review the role of the x-axis scaling: perhaps it should change the scaling of the data, or perhaps it does not belong in caryoscope-like applications at all.

a common user request is to display two or more arraycgh and/or expression datasets side by side, either to determine regions of recurrent deletion or amplification, or to discern visually the impact that changes in chromosome copy number may have on transcript levels . another frequent request is to show the cytoband information for each chromosome. we intend to add these features as part of our future development, in the course of which we would perhaps redefine, or extend, the manner in which our input data are defined .

summary
caryoscope currently provides a flexible method to visualize, explore and create images of microarray data in a genomic context. with such a tool, microarray researchers will be able to answer questions about how genome copy number or genome position plays a role in biological processes or human diseases.

CONCLUSIONS
caryoscope is a useful, flexible java application for the visualization of microarray data in a genomic context. it is available as open source under the permissive mit license, allowing anyone to use or modify it.

availability and requirements
project name: caryoscope

project home page: 

operating system: platform independent

programming language: java

other requirements: java  <dig>  or higher

license: mit license

any restrictions to use by non-academics: none

authors' contributions
iaba compiled the functional requirements for the java version of caryoscope and designed and implemented the software. car conceived and wrote the original perl version of caryoscope. thb aided and participated in the design of the study, dealt with user support and worked with users to get feedback and suggestions for further development. cab aided and participated in the design and evaluation of the study and provided feedback and suggestions for future development. gs supervised and participated in the design of the study. all authors read and approved the final version of the manuscript.

