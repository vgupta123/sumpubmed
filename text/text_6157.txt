BACKGROUND
phylogenetic networks have been studied over the last years as a richer model of the evolutionary history of sets of organisms than phylogenetic trees, because they take into account not only mutation events but also evolutionary events acting at the population level, like recombination between genes, hybridization between lineages, and lateral gene transfer. the latter turn phylogenies into reticulate networks, which are best modeled as directed acyclic graphs  <cit> . for instance, figure  <dig> shows two phylogenies inferred from evolutionary distances among three species of frog: r. aurora, r. boylii and r. temporaria  <cit> , enriched with a hypothetical reticulation event , which turned them into phylogenetic networks.

we briefly recall below some definitions and results from  <cit>  on phylogenetic networks. see  <cit>  for an introduction to reticulation in phylogenetic analysis.

a phylogenetic network on a set s of taxa is any rooted directed acyclic graph whose leaves  are bijectively labeled by the set s.

let n =  be a phylogenetic network on s. a node u ∈ v is said to be a tree node if it has, at most, one incoming edge; otherwise it is called a hybrid node. a phylogenetic network on s is a tree-child phylogenetic network if every node either is a leaf or has at least one child that is a tree node. tree-child phylogenetic network include galled-trees  <cit>  as a particular case.

let s = {ℓ <dig>  ..., ℓn} be the set of leaves. we define the μ-vector of a node u ∈ v as the vector μ = , ..., mn), where mi is the number of different paths from u to the leaf ℓi. the multiset μ = {μ | v ∈ v} is called the μ-representation of n and, provided that n is a tree-child phylogenetic network, it turns out to completely characterize n, up to isomorphisms, among all tree-child phylogenetic networks on s.

this allows us to define a distance on the set of tree-child phylogenetic networks on s: the μ-distance between two given networks n <dig> and n <dig> is the symmetric difference of their μ-representations,

 dμ = |μ Δ μ|. 

this defines a true distance, and when n <dig> and n <dig> are phylogenetic trees, it coincides with the well-known partition distance  <cit> .

this representation also allows us to define an optimal alignment between two tree-child phylogenetic networks on s, say n = |s|. given two such networks n <dig> =  and n <dig> =  , an alignment is just an injective mapping m : v <dig> → v <dig>  the weight of this alignment is

 w=∑v∈v1−μ)||+χ)), 

where || · || stands for the manhattan norm of a vector and χ  is  <dig> if both u and v are tree nodes or hybrid nodes, and 1/ if one of them is a tree node and the other one is a hybrid node. an optimal alignment is, then, an alignment with minimal weight, which can be computed using the hungarian algorithm  <cit> .

implementation and 
RESULTS
the extended newick format
the enewick  string defining a phylogenetic network appeared in the packages phylonet  <cit>  and netgen  <cit>  related to phylogenetic networks, with some differences between them. the former encodes a phylogenetic network with k hybrid nodes as a series of k trees in newick format, while the latter encodes it as a single tree in newick format but with k repeated nodes.

whereas the perl module we introduce here accepts both formats as input, a complete standard for enewick is implemented, based mainly on netgen and following the suggestions of d. huson and m. m. morin , to make it as complete as possible. the adopted standard has the practical advantage of encoding a whole phylogenetic network as a single string, and it also includes mandatory tags to distinguish among the various hybrid nodes in the network.

the procedure to obtain the enewick string representing a phylogenetic network n goes as follows: let {h <dig>  ..., hm} be the set of hybrid nodes of n, ordered in any fixed way. for each hybrid node h = hi, say with parents u <dig>  u <dig>  ..., uk and children v <dig>  v <dig>  ..., vℓ: split h in k different nodes; let the first copy be a child of u <dig> and have all v <dig>  v <dig>  ..., vℓ as its children; let the other copies be children of u <dig>  ..., uk  and have no children. label each of the copies of h as

 # tag  

where the parameters are:

• label  string providing a labelling for the node;

• type  string indicating if the node h corresponds to a hybridization  or a lateral gene transfer  event; note that other types can be considered in the future;

• tag  integer i identifying the node h = hi.

• branch_length  number giving the length of the branch from the copy of h under consideration to its parent.

we obtain a tree from this procedure whose set of leaves is the set of leaves of the original network together with the set of hybrid nodes . the newick string of the obtained tree  is the enewick string of the phylogenetic network. the leftmost occurrence of each hybrid node in an enewick string corresponds to the full description of the network rooted at that node. although node labels are optional, all labeled occurrences of a hybrid node in an enewick string must carry the same label.

consider, for example, the phylogenetic network depicted together with its decomposition in figure  <dig>  the enewick string for this network would be #h1), ); or h#h1)x, y)r; if all internal nodes are labeled. the leftmost occurrence of the hybrid node in the latter string corresponds to the full description of the network rooted at that node: h#h <dig> 

the procedure to recover a network from its enewick string simply requires recovering the tree and identifying those nodes that are labeled as hybrid nodes with the same identifier.

notice that gene transfer events can be represented in a unique way as hybrid nodes. consider, for example, the lateral gene transfer event depicted in figure  <dig>  where a gene is transferred from species  <dig> to species  <dig> after the divergence of species  <dig> from species  <dig>  the enewick string h#lgt1)y)x, h#lgt1)r; describes such a phylogenetic network. a program interpreting the enewick string can use the information on node types in different ways; for instance, to render tree nodes circled, hybridization nodes boxed, and lateral gene transfer nodes as arrows between edges.

the perl module
the perl module bio::phylonetwork, available as part of the bioperl bundle  <cit> , implements all the data structures needed to work with tree-child phylogenetic networks, as well as algorithms for:

• reconstructing a network from its enewick string ,

• reconstructing a network from its μ-representation,

• exploding a network into the set of its induced subtrees,

• computing the μ-representation of a network and the μ-distance between two networks,

• computing an optimal alignment between two networks,

• computing tripartitions  <cit>  and the tripartition error between two networks, and

• testing if a network is time consistent  <cit> , and in such a case, computing a temporal representation.

the underlying data structure is a graph::directed object, with some extra data, for instance the μ-representation of the network. it makes use of the perl module bio::phylonetwork::muvector that implements basic arithmetic operations on μ-vectors. two extra modules, bio::phylonetwork::factory and bio::phylonetwork::randomfactory, are provided for the sequential and random generation  of all tree-child phylogenetic networks on a given set of taxa.

the web interface and the java applet
the web interface allows the user to input one or two phylogenetic networks, given by their enewick strings. a perl script processes these strings and uses the bio::phylonetwork package to compute all available data for them, including a plot of the networks that can be downloaded in ps format; these plots are generated through the application graphviz and its companion perl package.

given two networks on the same set of leaves, their μ-distance is also computed, as well as an optimal alignment between them. the algorithm to compute such an alignment relies on the hungarian algorithm  <cit> . if their sets of leaves are not the same, their topological restriction on the set of common leaves is first computed followed by the μ-distance and an optimal alignment.

a java applet displays the networks side by side, and whenever a node is selected, the corresponding node in the other network  is highlighted, provided it exists. this is also extended to edges. similarities between the networks are thus evident at a glance and, since the weight of each matched node is also shown, it is easy to see where the differences are.

CONCLUSIONS
the perl module bio::phylonetwork relies on the bioperl bundle and implements several algorithms on phylogenetic networks, from parsing and temporal representation to distances between phylogenetic networks and optimal alignments. the companion java applet and web-based application make use of the bio::phylonetwork module and allow the user to make simple experiments with phylogenetic networks without having to develop a program or perl script by him or herself.

while the bio::phylonetwork module computes distances between galled-trees and tree-child phylogenetic networks, it will also support the more general tree-sibling phylogenetic networks in a next release.

availability and requirements
the perl package is available as part of the bioperl bundle, at the url . it can also be downloaded from the url  . the web-based application is available at the url . the perl package includes full documentation of all its features.

authors' contributions
all authors conceived the method, prepared the manuscript, contributed to the discussion, and have approved the final manuscript. gc implemented the software. gv also implemented part of the software.

supplementary material
additional file 1
bio-phylonetwork. compressed  archive  of the perl module bio::phylonetwork  and the corresponding test module .

click here for file

 acknowledgements
the research described in this paper has been partially supported by the spanish cicyt project tin 2004-07925-c03- <dig> grammars and by spanish dgi projects mtm2006- <dig> comgrio and mtm2006-15038-c02- <dig> 
