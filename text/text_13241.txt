BACKGROUND
transcription factor mediated gene regulation is one of the main cellular mechanisms to control gene expression. the regulation is mostly performed by transcription factors binding onto short, degenerate sequence motifs that recur frequently in the genome  <cit> . the binding specificities of the factors are commonly summarised as position frequency matrices  or consensus sequences : pfms list the number of occurrences of each nucleotide  across sites of aligned binding sites , whereas css represent a motif sequence using a set of degenerate symbols that give each base decoded by the given symbol an equal frequency  <cit> .

computational methods are often used to predict gene regulatory elements from a set of promoter sequences of similarly behaving genes, e.g. a set of co-expressed genes. since the regulatory elements targeted by a given transcription factor are expected to resemble each other, over-represented dna elements are seen as an indication of a common regulatory element and searched for  <cit> . the actual motif discovery is performed using probabilistic or deterministic optimisation, or pattern enumeration techniques, which both – although for different reasons – report repetitive motifs. in the first case, the search algorithms may stochastically terminate at different solutions and, due to this ambiguity, repetition of the analysis is recommended and multiple sets of similar motifs are obtained  <cit> . a pattern enumeration technique that evaluates all possible patterns guarantees finding the most over-represented ones, but it also reports repetitive motifs as numerous overlapping forms of the same motif are discovered. on the other hand, regulatory elements are evolutionary restrained across species and gene regulation can, alternatively, be inferred by searching for conserved dna segments  <cit> . in terms of motif discovery, some methods have recently been developed that incorporate evolutionary information in the search of enriched motifs; these methods, however, also report redundant sets of motifs as they typically use probabilistic or deterministic optimisation.

motif prediction tools typically output sets of pfms or css. of these, css could be analysed using conventional sequence alignment methods, such as those in the emboss-package  <cit> , but these tools are not designed for analyses of hundreds of motifs and, hence, are inconvenient to use. methods specifically designed to align and compare sequence motifs do exist, e.g. the pattern assembly and comparison tools in rsa-tools, ysra, treg, matcompare, compareace and procse  <cit> . however, each of them lacks some desired features, such as alignment of motifs with variable-length spacers, analyses of sets consisting of both pfms and css, creation of new alignments or discovery of optimal and non-redundant motif sets.

in order to combine all the necessary functions into a single framework, we developed a new tool called matlign. matlign accepts both css and pfms as input, aligns these using a dynamic programming algorithm with a user-defined combination of scoring functions and an upper-bound for the number of internal gap events , and creates a graphical visualisation of the motif similarities using hierarchical clustering. if requested, the best non-redundant motif set is selected by cutting the tree according to the silhouette values and the false discovery rate  of matched motifs is controlled using a permutation-based method. the upper-bound for the number of distinct gaps ensures that motifs consisting of two half-sites separated by variable-length spacers, such as the regulatory elements of the medically important nuclear hormone receptors, are correctly aligned. for example, the alignment of the two divergent binding sites of the prx:rxra heterodimer  <cit>  is erroneous if internal gaps are not allowed or if the number of gaps is unlimited . naturally, an upper limit for the number of gaps does not prevent the algorithm from finding a better alignment without a gap if it exists.

in summary, matlign is a practical post-processing tool for the comparison and clustering of short dna motifs. we believe that matlign is useful for tasks that involve measuring the similarity of motifs, such as identification of consensus motifs in multiple result sets, identification of the best matching hit from a collection of known regulative elements, and grouping together similar and redundant motifs. by reducing the undesired redundancy of raw data, matlign saves the user from laborious and time-consuming analyses and facilitates the interpretation of motif prediction results.

implementation
we have implemented a dynamic programming algorithm for the alignment of motifs containing at most one internal gap event. following the method of gotoh  <cit> , the match state is separated from the two gap states to allow for a more realistic gap cost function. however, similar to sankoff  <cit> , a return from a gap state to the earlier match state is not permitted and a move has to be taken to the succeeding match state. the procedure ensures that the chosen path has at most the specified number of distinct gap events but does not set a limit to the total length of gaps; terminal gaps are not penalised. see additional file  <dig> for a more detailed description of the dynamic programming algorithm.

matlign automatically converts css into pfms and treats all input motifs in a similar manner. for css, the program supports the 15-letter iupac code and decodes the degenerate symbols to nucleotide frequencies by sharing the probability among relevant bases. this conversion can be adjusted by correcting the nucleotide frequencies according to a user defined at/gc-ratio and/or by adding pseudocounts to matrices. given the matrix representation of all motifs, the score of matching two motif sites is computed for two vectors of nucleotide frequencies. the scoring function for the motif matching can be chosen from the five implemented functions: kendalls tau rank correlation coefficient , spearman's rank correlation coefficient , pearson correlation coefficient , normalised euclidean distance  and evolutionary substitution score , or any combination of these. most of the functions are described in detail by pietrokovski  <cit> , who, for example, noted that the spearman's and pearson correlations are the most suitable functions for proteins  <cit> . since css can be based on low frequency counts and their degenerate symbols produce somewhat artificial nucleotide frequencies, it is recommended to use the robust measures of correlation by the rank correlations for them. matlign combines the different scores, or alternatively their z-scores, by calculating their product and using a signum function that returns the most frequently occurring sign among the scores selected. when z-scores are used, matlign first estimates the population mean and standard deviation by performing an all-against-all matching of iupac symbols, i.e. each of the  <dig> symbols is matched against each other using the chosen distance function, and calculating the mean and standard deviation of these scores. the z-scores are then derived by subtracting the population mean from an individual score and dividing the difference by the population standard deviation.

agglomerative hierarchical clustering is a commonly-used method to group a collection of elements into subsets or clusters. it classifies the elements by recursively joining the two most similar ones, and creates a tree representing the nested grouping events . we start by computing an all-against-all similarity matrix of alignment scores using the dynamic programming algorithm. then, the two most similar elements, i.e. the motif pair with the highest alignment score, are recursively joined until a single motif remains. in a joining event, a new motif is created as the alignment of the two motifs, and the distance matrix scores are updated by calculating the averaged distance between the motifs in the newly created cluster and all other motifs.

the optimal number of clusters from the hierarchically clustered tree is selected using silhouette-values  <cit> . the method describes the tightness and the separation of a clusters by calculating an average silhouette value s of all the original elements:

 s=b−amax⁡
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgzbwccqggoaakcqwgpbqacqggpaqkcqgh9aqpdawcaaqaaiabdkgaijabcicaoiabdmgapjabcmcapiabgkhitiabdggahjabcicaoiabdmgapjabcmcapaqaaigbc2gatjabcggahjabciha4jabcufabjabdggahjabcicaoiabdmgapjabcmcapiabcycasiabdkgaijabcicaoiabdmgapjabcmcapiabc2fadbaaaaa@4c15@ 

the average distance from an element to all other elements within the same cluster a is compared with the average distance from the element to the elements of the closest other cluster b. the resultant value is scattered between - <dig>  and  <dig>  and the clustering yielding the highest average s is chosen.

the false discovery rate  is the expected proportion of true null hypotheses rejected out of the total number of null hypotheses rejected  <cit> . in matlign, the fdr for each alignment is calculated using a permutation technique. the alignment positions  between the pfms are first randomised, after which the nucleotide counts  within each new randomised pfms are separately permutated. based on the desired number of these permutations, matlign calculates the fdr for each alignment as the average number of permutated alignments that have a score as good or better than the real alignment's score, divided by the number of alignments in the real data that have a score as good or better than that score. as the process is repeated at each level of hierarchy, the calculation of fdr can be a time-consuming step.

RESULTS
matlign is a tool to group and compare sequence motifs. to demonstrate the method's functionality, we describe a set of realistic examples of its usage. the first example focuses on the annotation of motifs, three following examples show how to use matlign to reduce the redundancy of motif prediction results, and the last example how to create consensus predictions. the data for the examples presented here can be found and re-analysed using the matlign server  <cit> .

sequence motifs are often annotated by screening for similar motifs from a collection of known regulatory elements. to demonstrate how matlign performs in this task, we downloaded all pfms from the jaspar database  <cit> , replaced an increasing proportion of the nucleotide frequency signal with constant background noise, matched each noise-disturbed pfm against all the original pfms, and performed a receiver operating characteristic  analysis . before assessing the sensitivity and specificity, scores of each noise-disturbed pfm were scaled between  <dig> and  <dig>  the sensitivity and specificity were calculated using varying score thresholds and all the predictions with a better score were considered as positives, either true or false, and all the predictions with a worse score as negatives, either true or false. the area under the roc curve  was then determined for all the different distance functions and for their combinations . based on these results, the scoring scheme producing the best mean auc over the data sets – the combination of z-scores of spearman's rank, pearson correlation and evolutionary substitution score – was selected as the default scoring scheme.

as the noise added to jaspar pfms increases , they progressively resemble the average gc-content of the human genome and finally become almost indistinguishable from the background distribution. in real life, similar comparisons between perfect and noise-disturbed motifs occur when the predicted motifs are tainted by a partially incorrect input gene set or the poor performance of the prediction tool. the performance of matlign compared to other methods tested suggests that matlign outperforms its competitors and, at high noise levels, is more likely to find the correct pfm . example  <dig> at the matlign server shows the pfm data set with 75% of noise.

examples 2– <dig> demonstrate how to use matlign for the post-processing of motifs obtained with different motif prediction tools. the test data, a set of promoter sequences of co-regulated genes from s. cerevisiae, was obtained from scpd  <cit>  by choosing the genes regulated by the pdr <dig> transcription factor. the first result set  is from the probabilistic tool motifsampler  <cit> , whereas examples  <dig> and  <dig> show the results of the pattern enumeration tools poco and oligo-analysis  <cit> . in each example, matlign is used to discover similar motifs from the redundant set produced by the corresponding motif prediction tool, to cluster these motifs together, and to return a non-redundant motif set to the user. in all analyses, matlign was run using its default parameters .

in example  <dig>  at the highest silhouette value the original  <dig> predictions are grouped into  <dig> clusters that vary in size from a single motif to a cluster of  <dig> almost identical motifs. using the same procedure, the  <dig> pattern predictions of poco and oligo-analysis are reduced to  <dig> and  <dig> clusters, respectively. the number of clusters retained varies depending on the prediction method and indicates that certain tools can indeed remove a portion of the undesired redundancy. however, when the prediction results were post-processed using matlign, these results were compressed to nearly one half of their original size, simplifying the analysis of the remaining motifs and the interpretation of the results.

in example  <dig>  matlign is used to perform a meta-analysis in order to see if the different tools agree on their predictions and if a representative consensus motif can be constructed out of the motifs they report. similarly to the previous examples, the set of non-redundant motifs with the highest silhouette value was first selected and the motif with the highest over-representation was then chosen as the consensus motif. the motifs were evaluated using the program clover  <cit>  that calculates the over-representation of a pfm in a set of target promoters  relative to a collection of all yeast promoters; the method was chosen because it, unlike other similar tools, does not require an artificial pfm similarity threshold. the best motif  is found in the cluster that groups most individual motif predictions together and it matches well with the functional element of pdr <dig> given by scpd  <cit> . it should be noted, however, that each motif prediction tool was able to predict motifs resembling the functional one and motifsampler also found the true consensus pattern, although with a lower score and rank. however, that the original motifs from individual tools obtained less significant likelihood ratios in the clover analysis demonstrates that post-processing with matlign was able to improve the quality of motifs predicted .

CONCLUSIONS
matlign is a user-friendly web-tool to cluster and compare dna sequence motifs. we have demonstrated that matlign outperforms other available tools in finding remote analogues and is the preferable choice for the annotation and verification of potential binding site targets using collections of known motifs. by efficiently reducing the undesired redundancy of input motifs, matlign speeds up the refinement of large collections of motif predictions and facilitates the interpretation of the results.

availability and requirements
project name: matlign

project home page: 

operating system: unix

programming language: c++/perl

other requirements: following c++ libraries: studio, stdlib, string, vector, cmath, iostream, fstream, utility, cassert and config. for the web-server version: zope, gnuplot

license: gnu

restrictions to use by non-academics: none

abbreviations
tfbs = transcription factor binding site

pfm = position frequency matrix

cs = consensus sequence

pxr = pregnane x receptor

rxra = retinoic acid receptor alpha

fdr = false discovery rate

roc = receiver operating characteristic

auc = area under the receiver operating characteristic-curve

default parameters: match =  <dig>  transversion = - <dig>  transition = - <dig>  gap open = - <dig>  gap extension = - <dig>  maximal gap = undefined, spacers = true, z-score = true, pseudocounts =  <dig>  at-frequency =  <dig> , and spearman's rank correlation coefficient, pearson correlation coefficient and evolutionary substitution score 

authors' contributions
both mk and al were involved in developing and implementing the idea and writing this manuscript.

supplementary material
additional file 1
dynamic programming algorithm. a detailed description of the dynamic programming algorithm

click here for file

 additional file 2
the complete auc data table. table showing the auc values for all the different distance functions and for all noise-disturbed data sets.

click here for file

 acknowledgements
this work was enabled by a marie curie grant to mk. he thanks nick goldman for the opportunity to visit the ebi.
