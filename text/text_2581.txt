BACKGROUND
in general, a good understanding of protein families provides us with further views on biological processes. previous studies have shown that modular structures are densely connected internally but sparsely interacting with others in ppi networks  <cit> . modules can be understood as independent sub-networks and proteins in the same module always interact more frequently and show stronger functional dependencies. these days, more and more people are likely to address biological problems with graphic models, where proteins or genes are viewed as nodes and their pair wise interactions as edges in a network  <cit> .

several methods have been proposed for module identification in the last decade. in  <dig>  bader and hogue proposed a molecular complex detection method , which can separate densely connected regions by assigning a weight to each protein  <cit> . a markov clustering method  which is based on flow simulation and high-flow areas corresponding to protein complexes was applied to detect protein families in  <dig>  <cit> . a network module mining method  proposed by yan et al. identifies frequent dense sub-graphs in input networks using coherent edge frequencies, which can lose statistical power in sparse networks with few edges  <cit> . however, most of the existing methods cannot identify overlapping modules in ppi networks. as far as we know, some proteins may be included in multiple complexes and component parts of a complex could be activated at a specific time or location  <cit> .

in  <dig>  a clique percolation method  was used for the first time to identify overlapping modules in ppi networks by finding fully connected sub-graphs of different minimum clique sizes  <cit> . but its high computational complexity )where n represents the number of nodes in the network) hindered its application to large scale networks.

based on these considerations, we propose the omim, which is able to partition large scale ppi networks with overlapping modular structures. omim first clusters all nodes using a newman algorithm  <cit>  and then defines nodes that have comparatively positive effects on the modularity of more than two modules as overlapping ones. moreover, we designed de-noising steps through assigning a weight to each edge. hubs can also be found according to their nodal weight. omim is a method that is able to identify highly interconnected modules and has few control parameters, allowing it to be applied to many types of networks. we evaluate omim as applied to an artificial network and a ppi network. the results showed that it outperforms several other current methodologies.

methods
overview
as we know, a ppi network can be described as an undirected and unweighted graph, g=, where v and e represent nodes  and edges  in the network. in our method, we first assign weights to all edges according to their importance to the network and remove those with lower weights as noise. then the steps for identifying overlapping modules are performed. the main idea of identifying overlapping parts in omim is to find nodes that have comparatively positive effects on different modules. in addition, hubs were also found according to connections with their neighbors  <cit> .

de-noising
in general, data in ppi networks are obtained from high-throughput protein-protein interaction experiments. so far, the most frequently used protein-protein interaction detection methods are yeast-2-hybrid, tandem affinity purification, mass spectrometry technology and protein chip technology. although these high-throughput detection methods make for easy experimentation, they bring about noise and incompleteness  <cit> .

the main idea in our de-noising step is to assign a weight to each edge of a ppi network to reflect the reliability of the corresponding interactions. in our study, we use a popular metric from graph theory, i.e., clustering coefficient. a clustering coefficient is a measure that represents the interconnectivity in the neighborhood of a node  <cit> . the clustering coefficient of node i with degree ki can be described as

  cci=2niki 

where ni denotes the number of triangles that go through node i.

the weight between nodes i and j can be assigned according to the following equation:

  scc=cci+ccj-cci′-ccj′ 

where cc' represents the clustering coefficient after the edge between i and j is removed. according to the viewpoint of asur et al.  <cit> , if two nodes are not actually connected in the original network, then the scc value should be small or equal to zero. here, we define a threshold α, and remove edges that are smaller than α as noise.

  scc≤α 

overlapping module identification method
newman algorithm
because omim is a variant of the newman algorithm, we first introduce the newman algorithm briefly. this is a hierarchical agglomerative method based on the idea of modularity  <cit> . we know that modularity is a measure of the quality of a particular division of a network and a large value of modularity always corresponds to good network division  <cit> . if we let erk be the fraction of edges in the network, connecting nodes in group r to those in group k and let ar= ∑kerk, then

  q= ∑rerr-ar <dig> 

where q is a quality function representing modularity. the physical meaning of eq.  is that modularity is equal to the fraction of edges that fall within modules, minus the expected value of the same quantity if edges fall at random without regard to its modular structure  <cit> . the newman algorithm is a method for optimizing q in order to discover the best modular structure.

the steps of the newman algorithm can be summarized as follows.

step  <dig>  initialize each node in the input data to be a module, define a matrix e and a vector a according to eqs.  and .

  eij=1/2m,nodesiandj are connected <dig> else 

  ai=ki/2m 

where m represent the total number of edges in the network.

step  <dig>  calculate the change of modularity Δq according to:

  Δq= <dig> 

merge module pairs with the maximum value of Δq. update matrix e by adding the rows and columns of the corresponding merged modules.

step  <dig>  repeat step  <dig>  until the entire network has become one big module.

from this description, the progress of the newman algorithm can be represented as a dendrogram. if we choose to cut at different levels, different modular structures can be obtained. actually, newman chooses to cut at the maximum value of q to obtain the best modular structure.

identifying overlapping parts
it should be noted that complexes in ppi networks are not static and proteins can be included in different modules. therefore, identifying overlapping parts between different modules is necessary. we first perform the newman algorithm to the input data. then we try to identify overlapping nodes according to their contribution to modularity. the detailed steps are as follows.

step  <dig>  perform newman algorithm. all nodes are clustered without overlapping parts.

step  <dig>  define nodes, whose neighbors belong to more than two modules, to be candidate nodes.

step  <dig>  randomly select node i from the set of candidate nodes. assume that i is in module a and one of its neighbors,j, in module b. copy i to b and a new module b' is obtained. if eq.  is satisfied, then i is an overlapping node.

  qb′>qb 

where qb and qb' is the modularity of b and b'.

step  <dig>  repeat steps  <dig> ~  <dig> until all overlapping parts are identified.

discovering hubs
jordan et al. first found hubs when they studied the evolution of protein and referred to the proteins with large number of partners as hubs  <cit> . han et al. divided hubs into two classes: party hubs and date hubs  <cit> . party hubs are hubs that interact with their partners at the same time, whereas date hubs either bind their different partners at different times or at different locations. according to their study in a network with a modular structure, date hubs always organize the proteome, while party hubs function inside modules. we propose a computational method to detect the hubs far easier.

first, we defined party hubs as those proteins that have maximal nodal weight  in a module, i.e.,

  wi= ∑jscc,j∈{neighborofi} 

  partyhubr=argmaxwii∈r, 

where partly hubr means a party hub of module r.

date hubs are defined as proteins that bind at least three modules. we set a variable acci to denote the number of modules to which i is bound. the computational method of acci is

  acci= ∑r=1nrf 

where nr is the total number of modules in the network and f is defined as follows:

  f= <dig>  iconnecttoatleastonenodeinr <dig>  else 

algorithm
 <dig>  de-noising

input: g=; α

for all nodes i in g

compute the clustering coefficient cci

end

for all edges ∈e) in g

compute the weight scc

if scc<α

remove edge  as noise

end

end

a new graph g'= is obtained

 <dig>  clustering

input: g'=; number of nodes n; number of edges m

compute degree k for all nodes and construct e and a

 eij=1/2m,nodesiandj are connected <dig> else 

 ai=ki/2m 

 <dig>  compute the increment of modularity Δq for all edges

 Δq= <dig> 

 <dig>  while 

merge the module pairs with the maximum Δq;

update e and a;

recalculate Δq;

end

 <dig>  sort all q s from all iterations and choose the modular structure m corresponding to the largest q.

 <dig>  for node i in m

if i belongs to module a and its neighbor  j belongs to b

copy i to b and construct b'

if qb′>qb

i is an overlapping node between a and b

end

end

end

 <dig>  a new modular structure m' with overlapping parts is obtained.

 <dig>  discovering hubs

input: m'

for module r in m'

party hubr=argmax wi,i∈r

end

for each node i not in any module

if acci≥3

i is a date hub

end

end

RESULTS
data sources
in our experiments, we validated our method on two datasets, i.e., a small-scale artificial dataset and a large-scale ppi dataset. the artificial dataset is derived from the south florida word association database  <cit> , with  <dig> nodes and  <dig> edges in the network . the eight core nodes playing important roles are month, sunshine, camp, sleep, work, enjoy, long and sunny respectively, which are connected by the key word day.

the yeast  ppi networks used in our study are from the mips comprehensive yeast genome database    <cit> . the dataset contains  <dig> proteins and  <dig> interactions after removing isolated nodes and self-cycled edges. the on-line annotation tool, go term finder , is from the sgd database   <cit> , which contains  <dig> genes as a background set.

methods used for comparisons in our experiments are newman, mcl and cpm. there are two main reasons for this selection. in first instance, these are three classical clustering algorithms that have been widely used in many fields. their use makes for clearer comparisons. secondly, these algorithms represent the most appropriate methods in different aspects for comparison with omim. according to brohée et al.  <cit> , mcl outperforms many other algorithms, especially in partitioning ppi networks. cpm is a widely known classical method for identifying overlapping modules and the newman algorithm is the ancestor of omim.

among these three methods, mcl was executed as an embedded program of biolayout express 3d  <cit>  and the cpm algorithm was performed by using of cfiner, a tool created for clustering based on cpm  <cit> .

performance on an artificial dataset
three evaluation indices, i.e., accuracy , overlapping rate  and average degree  were used.

  ac=∑i=1n∑j=1mixin 

  ol=∑r=1nrnum_vn 

  avd= <dig> ∑r=1nrnum_e∑r=1nrnum_v 

where node j is a neighbor of node i, mi represents the total number of neighbor nodes of i, num_v and num_e represent the number of nodes and edges in module r respectively. xi is a function defined as follows: if j is classified correctly, xi=1; else, xi= <dig> 

ac: accuracy. ol: overlapping rate. avd: average degree. d_hub: date hub. p_hub: party hub. num_m: the number of modules obtained by different methods. '-': a symbol meaning we were unable to discover party or date hubs.

eight party hubs were found by omim, i.e., month, sunshine, camp, sleep, work, enjoy, long and sunny. the date hub is day. besides, we also discovered four overlapping nodes: moon, outside, delight and walk. compared with the original network shown in figure  <dig>  our results can correctly cluster all nodes, verifying the effectiveness of our method.

performance on ppi networks
p-value
according to the sgd database, the p-value is an index to determine the statistical significance of the association of a particular go term with a group of genes. it has been widely used in bioinformatics in recent years  <cit> . in general, its values are between  <dig> and  <dig>  the closer the p-value is to zero, the more significant the particular go term associated with the group of genes, i.e.:

  p-value=noln-n2n1-olnn <dig> 

where n represents the size of the entire network, n <dig> is a cluster obtained from the experiment, n <dig> the number of proteins annotated with a specific go term and ol the number of proteins in n <dig> that can be annotated with the specific go term.

in our experiments, p-values that higher than  <dig>  were eliminated. we used the negative natural logarithms  to substitute for p-value.

cluster frequency
cluster frequency is another index used in the sgd database which indicates the number of proteins in the experimental group annotated in a specific go term. although it is not as meaningful as p-value to represent the significance of a cluster to a specific go term, its statistical value reflects the proportion of proteins that can reasonably be annotated, i.e.:

  clusterfrequency=oln <dig> 

discard rate
the discard rate represents the proportion of proteins not assigned to any module. in general, this rate reflects the filtering ability of the algorithm.

  discardrate=1-numberofoutputdatanumberofinputdata 

size distribution of ppi modules obtained by omim
after setting the minimum module size to  <dig>  we obtained  <dig> modules  with a maximum value of q= <dig> . figure  <dig> is the size distribution of modules obtained by omim.

from figure  <dig> we can see that, like most scale-free networks, the degree of the distribution of the ppi dataset follows the power law relationship p ~k-r with r≈ <dig> .

enrichment analysis
enrichment analysis is an important index for protein function annotation. we used the go term finder to assign a main function that corresponding to the best p-value to each module.  <dig> modules were selected randomly to demonstrate the results of the enrichment analysis .

main functions: the go term that obtained according to -log p-values of all modules for biological process , molecular functions  and cellular component .

cluster frequency analysis
cluster frequency analysis is another evaluation criterion for protein module construction, indicating the proportion of proteins in an experimental group annotated in a specific go term . figure  <dig> is the cluster frequency of  <dig> modules obtained by omim. figure  <dig> shows that most modules have a very high cluster frequency. in fact,  <dig> modules have a cluster frequency of 100% in the category of biological process. the result shows that most proteins in these modules have a common reliable function in omim.

comparison of omim with other algorithms on ppi dataset
in order to validate the omim on the ppi dataset, we compared it with the newman, mcl and cpm algorithms. the results for the saccharomyces cerevisiae ppi dataset are summarized in table  <dig>  the performance was largely measured by the discard rate and the enrichment analysis of gene ontology .

module number: the number of modules obtained by each algorithm. module size: the average size of modules in each algorithm. go: the average -log p-values of all modules for biological process , molecular functions  and cellular component .

CONCLUSIONS
the studies on an artificial and a ppi dataset verify the effectiveness of our method. in the experiment on the artificial dataset, the omim can find all modules correctly with an accuracy of  <dig> . all hubs that play key roles in the artificial networks are found precisely. in the experiment on the ppi dataset, we evaluated the performance of omim by enrichment analysis, cluster frequency analysis and in comparisons with other competing algorithms. all of the evaluation measures resulted in good performances. in addition, 30% of the hub proteins found by omim could directly be verified by the study of han et al.  <cit> . however, since the degree distribution of the ppi dataset follows a power law, the discrepancy on modular sizes was quite large, which is not rational. in our future work, we will try to settle the problem of unbalanced clustering.

competing interests
the authors declare that they have no competing interests.

authors' contributions
xw and ll conceived the research and all authors designed it. ll carried out the calculations and all authors analyzed the results. the manuscript was drafted by ll and yc and written/revised by all authors. all authors approved the final version of the manuscript.

supplementary material
additional file 1
a list of  <dig> potential functional modules.pdf. this file contains all potential functional modules obtained by omim. for module # <dig> and  <dig>  we did not list their members. the reason is that, their extremely large module sizes,  <dig> and  <dig>  make them unreliable.

click here for file

 additional file 2
enrichment and cluster frequency analysis of  <dig> modules.pdf. the best p-values and its corresponding cluster frequencies of  <dig> modules obtained by sgd go term finder. the empty cells in this table denote 'no significant ontology term can be found for this module'.

click here for file

 acknowledgements and funding
this work was supported by the grants of the national natural science foundation of china, nos.  <dig>   <dig>   <dig>   <dig> &  <dig>  the grants from the program for new century excellent talents in university under award nos. ncet-08- <dig>  and ncet-10- <dig>  and the grant from the fok ying-tung education foundation for young teachers, no.  <dig> 

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2012: advanced intelligent computing theories and their applications in bioinformatics. proceedings of the  <dig> international conference on intelligent computing . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/13/s <dig> 
