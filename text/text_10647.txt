BACKGROUND
two genes from two different species are said to be orthologous if they derived from a single gene present in the last common ancestor of the two species via a speciation event, and paralogous if they were created by a duplication event  <cit> . orthologs inference is the starting point of most comparative genomics studies, and is also a key instrument for functional annotation of new genomes. a plethora of methods have been designed in the last decade to address this challenging task, and can be roughly divided in two groups  <cit> . the first group of methods use clustering algorithms to detect homologous genes, i.e., genes sharing a common ancestry, and then reconstruct a gene tree describing the evolutionary history of this set of genes; orthology relationships are then deduced from this tree by comparing it with the species tree, i.e., the tree depicting the history of the species containing those genes, via reconciliation algorithms . the second group of methods use other sources of information, e.g. sequence similarity or synteny, to directly estimate orthology relationships . the first set of methods are considered to be more accurate, but they require a prior knowledge of the species tree, and are very dependent on the accuracy of the gene trees. unfortunately, the species phylogeny is not always known and gene trees can be highly inaccurate as a result of several kinds of reconstruction artifact, e.g. long-branch attraction   <cit> .

the second set of methods does not suffer from these drawbacks but still has an important weakness: given a set of genes v, the set of inferred orthology/paralogy relationships c for v may fail to be satisfiable, i.e., to simultaneously co-exist in any evolutionary history for v, or consistent i.e., such that all displayed triplet phylogenies are included in a species tree .

in the last years, the decision problems associated with these questions have been extensively studied, both when c is full, i.e., involves a constraint for each pair of genes in v  <cit> , and when it is not  <cit> .

in  <cit> , the authors give o time algorithms to decide whether c is satisfiable and consistent under the assumption that the species tree is known – where n=|v|. these results hold whether c is a full set of constraints or not. they also showed how to decide whether c is satisfiable when the species tree is unknown but c is full .

in this paper, we extend the results of  <cit>  by giving a o time algorithm to decide whether c is consistent, even when the species tree is not known and c is not full, and show an application on real data. thus the problems of deciding satisfiability, deciding consistency given a species tree, and deciding consistency with an unknown species tree, are all polynomial-time solvable. we also investigate an optimization version of these problems, in which we wish to minimize the number of duplication events in the evolutionary history for v – duplication minimization is a well-known criterion in phylogenomics  <cit> . unfortunately, we show that all three problems are np-hard, even when the maximum number of duplication events is  <dig>  and are unlikely to have good polynomial- time approximation algorithms.

preliminaries
a rooted tree
t with arc set e and node set v is a directed acyclic connected graph, in which every node has in-degree  <dig>  except for a single node, the root – denoted by root, of in-degree  <dig>  and where the set of nodes in t with out-degree  <dig> – the leaves of t, denoted by l – are univocally labeled. throughout the paper, we will treat leaves in a tree as synonymous with the labels associated to them. we denote by i the set v∖l – the internal nodes of t. if all nodes in i have out-degree  <dig>  we say that t is binary.

given two nodes x,y in t, we say that x is an ancestor of y in t, and that y is a descendant of x in t, if there is a directed path from x to y in t.  if x is not an ancestor of y and y is not a ancestor of x, we say that x,y are separated in t. if there is an arc from x to y in t, we say that x is the parent of y in t and that y is a child of x in t.

given a node x, let desct denote the descendants of x in t. let childt denote the set of all children of x in t. let leaft=desc∩l, i.e. leaft is the set of leaves in t that are descendants of x. note that leaft)=l. given a set a of nodes in t, let lcat denote the least common ancestor of a in t, that is, the unique node z such that z is an ancestor of all x∈a, and no descendant of z has this property. given two nodes x,y, we will often write lcat as shorthand for lcat. when t is clear from context, we will often omit “in t” and simply say that x is the ancestor of y,y is the descendant of x,z is a leaf, etc.


suppressing a non-root node x of out-degree  <dig> in a tree t consists of removing x and making the unique child of x a new child of the parent of x. given a set of leaves l
′⊆l, the restriction of t to
l
′, denoted t|l′, is the tree derived from t by taking the minimum subtree of t spanning l
′, and suppressing all non-root nodes of out-degree  <dig> 

a triplet is a rooted binary tree t with |l|= <dig>  given three distinct elements x,y,z, we denote by x
y|z the unique triplet t with l={x,y,z} such that lcat≠root ≠lcat=lcat). we say that a rooted tree t
displays the triplet x
y|z if t|{x,y,z}=x
y|z.

given a set of edges e over a set of vertices v, and a subset v
′⊆v, we define e[v
′]={x
y:x,y∈v
′,x
y∈e}. given graphs g= and g
′=, we say that g
′ is an induced subgraph of g if v
′⊆v and e
′=e[v
′], and denote g
′ by g[v
′]. we define e¯={xy:x,y∈v,xy∉e} and say that g¯= is the complement of g. for any integer l≥ <dig>  a path
p
l is a graph =Σ, used to depict the evolutionary history of the species in Σ.

genes are said to be homologous if they share a common ancestor. let v denote a set of homologous genes belonging to species in Σ. a species assignment of v is a function s:v→Σ, with s=a representing the fact that gene v belongs to species a∈Σ. for a set v
′⊆v, we define s={a∈Σ:∃x∈v
′,s=a}, and s|v′:v′→s such that s|v′=s for all v∈v
′. a ds-tree on v is a pair , where t is a binary rooted tree with leaf set v and ℓ:i→{d
u
p,s
p
e
c} is a function labeling each internal node x of t as a speciation node =s
p
e
c) or a duplication node =d
u
p). ds-trees are used to depict the evolutionary history of the genes in v. when the function ℓ is clear from context, we will often omit it and speak only of a ds-tree t.

given two genes x,y in t, we say that x,y are orthologs with respect to t if lcat is a speciation node, and paralogs with respect to t otherwise. given an undirected graph g=, a ds-tree  on v is a ds-tree for g  if for every x,y∈v, x
y∈e⇔ℓ)=s
p
e
c. that is, x and y are adjacent in g if and only if they are orthologs with respect to t.

the presence of two homologous genes in the same species can be caused either by duplications or gene transfers  <cit> . so, in absence of gene transfers, homologous genes from the same species are necessarily paralogs. we formalize this idea in the following assumption.

assumption 1
we assume in what follows that whenever we are given a graph g= with a species assignment s, two vertices x,y of g are not adjacent if s=s.


cographs a cograph is a graph that can be generated from a single-vertex graph using the operations of disjoint union  and series composition   <cit> . this generation scheme yields a representation of a cograph in terms of cotrees. a cotree is a rooted tree t, with internal nodes labeled  <dig>  or  <dig> . hence a cotree represents a graph g= if l=v and two vertices x and y of g are adjacent if and only if lcat= <dig>  observe that the cotree representation of a cograph is not unique. also, while a cotree is not necessarily binary, any non-binary cotree can be transformed in linear time into a binary cotree with the same corresponding cograph. there are several characterizations of cographs. among other characterizations, a cograph is a graph with no induced p
 <dig>  <cit> . cographs can also be viewed as graphs where each connected component has diameter at most  <dig> 

hellmuth et al.  <cit>  noted that all orthology graphs  can be characterized as symbolic ultrametrics  <cit> , and showed that a graph is an orthology graph if and only if it is a cograph .

thus we have a useful graph-theoretic framework for deciding on the existence of a ds-tree.

proposition 1
for an undirected graph g=, the following are equivalent: 
there exists a ds-tree for g;


g contains no induced p
 <dig>  i.e. it is p
4-free;


g is a cograph.




as cographs can be recognized in linear time  <cit> , deciding whether a graph has a ds-tree, i.e., if it is satisfiable, can be achieved within the same time complexity. note, however, that not every ds-tree represents a possible evolutionary history for a set of genes. in particular, given a species assignment, different parts of a ds-tree may imply conflicting evolutionary histories for the species containing those genes. the concept of consistency makes this notion precise.


consistent ds-trees. given a ds-tree t on v, a species assignment s:v→Σ and a species tree s on Σ, we say that  is consistent with s  if for every speciation node z in t, and distinct children x,y of z, lcas)) and lcas)) are separated in s. given a graph g= and the species assignment s, the pair  is consistent with s if there exists a ds-tree t for g such that  is consistent with s. we say that g  along with the species assignment s, is consistent if there exists a species tree s such that  ) is consistent with s  <cit> .

given a ds-tree t on v and a species assignment s:v→Σ, let t
r be the set of triplets ss|s for which the triplet x
y|z is displayed by t with a speciation node as the root, and for which s≠s.

hernandez-rosales et al.  <cit>  showed that  is consistent with a species tree s if and only s displays all triplets in t
r. in light of this result, hellmuth et al.  <cit>  gave a framework for finding the ds-tree and species tree for which the maximum number of triplets are displayed, using integer linear programming. lafond and el-mabrouk  <cit>  improved the result of  <cit>  by showing that it is enough to consider only the triplets in t
r that have a speciation node as the root node and a duplication node as the other internal node. this can expressed in terms of the consistency of an orthology graph in the following way.

given a graph g= and species assignment s:v→Σ, define the set of triplets p
3={ss|s:x
z,z
y∈e and x
y∉e and s≠s}. note that as a consequence of assumption  <dig>  if ss|s∈p
 <dig>  then s≠s and s≠s.

by theorem  <dig> in  <cit> , we have the following theorem  is consistent if and only if there exists a species tree s which displays all triplets in p
 <dig>  but their proof shows that  is indeed consistent with such an s):

theorem 1

[
9
] let g= have a ds-tree and let s:v→Σ be a species assignment. let s be a species tree on Σ. then  is consistent with s if and only if s displays all triplets in p
 <dig> 

theorem  <dig> directly provides a polynomial time algorithm to decide whether a graph and a species assignment are consistent with a given species tree. the following proposition reformulates theorem  <dig> in a convenient way:

proposition 2
given a graph g=, a species assignment s:v→Σ, and a species tree s, is consistent with s if and only if the following holds: 

g does not contain an induced p
4;

every triplet in p
 <dig> is displayed by s.




as both of the properties in proposition  <dig> are hereditary, we also have:

corollary 1
given a graph g=, a species assignment s and a subset v
′⊆v, if  is consistent with a species tree s then  is consistent with the species tree s|s.


constraint graphs. a constraint graph is a pair  where g= is an edge-bicolored graph and s is a species assignment on v. a constraint graph aims at representing the partial knowledge about the orthology or paralogy relations between genes from v. the edges in m are mandatory edges, representing the pairs of genes xy for which we know that x and y are orthologs. the non-edges of g  represent the pairs of genes xy for which we know that x and y are paralogs. the edges in u are unknown edges, for which we do not know if x and y are orthologs or paralogs. from assumption  <dig>  we have that x
y∉m⊎u for any pair of genes x, y such that s=s . note that an orthology graph is a constraint graph where u=∅. a sandwich of a constraint graph , with g=, is a graph h= such that m⊆e⊆m∪u.

as a gene is always associated with the species it belongs to, throughout this paper we will always present a ds-tree t together with a species assignment s. thus we will speak of a ds-tree . similarly, we will always present an orthology graph g together with its species assignment s, and speak of an orthology graph . a sandwich graph g
′ will be presented on its own without a species assignment, as a sandwich graph is defined relative to a constraint graph ,s), and so the species assignment s will always be clear from context.

methods
computing a consistent ds-tree
in this section, we describe a polynomial time algorithm for the following problem:


consistent orthology graph sandwich problem


input: a constraint graph , with g= and s:v→Σ a species assignment;


output: a sandwich graph h for  such that  is consistent .

observe that by proposition  <dig>  the consistent orthology graph sandwich problem amounts to computing a sandwich cograph satisfying extra properties. the sandwich cograph problem is known to be polynomial time solvable  <cit> . our algorithm can be seen as a combination of the sandwich cograph algorithm and the build algorithm  <cit>  for checking consistency of a set of triplets.

let g= be an edge-bicolored graph and for f⊆u, define the graph g=.

the first lemma proves that unknown edges between connected components of g can be removed .

lemma 1
let  be a constraint graph with g=. let cc be the connected components of g, and let ucc=⋃c∈ccu. there exists a consistent sandwich graph of  if and only if there exists a consistent sandwich graph of ,s).

proof
suppose first that there exists a consistent sandwich graph g
′= of  and let s be a species tree such that  is s-consistent. for every c∈c
c, by corollary  <dig>  is consistent with s|s and hence with s. then the disjoint union g
′′ of the g
′ is a sandwich cograph of . moreover we clearly have p
3=∪c
p
 <dig>  implying that  is also consistent with s. the converse is symmetric. □

reduction rule 1
let  be a constraint graph with g=. remove from u every edge xy such that x and y belong to distinct connected components of g.

as an example, consider the constraint graph  in fig.  <dig>  the genes a
 <dig> b
 <dig> c
 <dig> d
 <dig> form one connected component of g, and a
 <dig> b
 <dig> c
 <dig> d
 <dig> form the other. thus reduction rule  <dig> will remove the unknown edge d
1
a
 <dig> from u.
fig.  <dig> example of an constraint graph ,s), with s=s=a,s=s=b,s=s=c,s=s=d. the mandatory edges m are solid; the unknown edges u are dashed. reduction rule  <dig> will delete the unknown edge d
1
a
2





note that although we remove all edges between connected components of g, we cannot solve the problem on each connected component independently, and so we cannot assume that g is connected. the reason is that for two connected components c,d of g, a solution for  may be consistent with a different species tree than a solution for . to avoid conflicts between solutions on different subgraphs, we must split the graph into subgraphs on disjoint sets of species.

from now on, we may assume that |s|> <dig>  otherwise, assumption  <dig> implies that m=u=∅, and thereby  is a trivial positive instance. for the sake of the algorithm, we define an auxiliary graph h
g,s= on the species set, called hereafter the species graph. for each pair of distinct species a,b∈Σ, add ab to f if there exist x,y∈v such that x and y are in the same connected component of g,x and y are not adjacent in g and s=a,s=b.

lemma 2
let  be a constraint graph reduced by reduction rule  <dig>  if the species graph h
g,s is connected, then  does not have a consistent sandwich graph.

proof
consider an arbitrary binary species tree s, and an arbitrary sandwich graph g
′= of . we show that p
 <dig> contains a triplet not displayed by s.

let a=leafs and b=leafs where u
a and u
b are the children of root. note that a and b partition the set of species Σ. as h
g,s is connected, there exists a∈a,b∈b such that a
b∈f. therefore there exist x,y∈v such that x,y are in the same connected component c of g,s=a,s=b and x
y∉m∪u.

as g
′ is connected, there exists a chordless path p from x to y in g
′. by proposition  <dig>  g
′ is p
4-free. this implies that p contains, in addition to x and y, a third vertex z such that x
z∈e
′ and z
y∈e
′.

assume without loss of generality that s∈a ∈b is symmetric). then we have ss|s∈p
 <dig>  note however that lcas,s)=root ∈a,s∈b), while lcas,s) is a descendant of lcas. it follows that lcas,s) is different from lcas,s), and so ss|s is not displayed by s. □

the next lemma shows how to use connected components of the species graph in order to freeze some unknown edges to orthology relations between genes.

lemma 3
let  be a constraint graph reduced by reduction rule  <dig> such that the species graph h
g,s is not connected.

let a be the vertices of a connected component of the species graph h
g,s and let b=Σ∖a. let g
a= and g
b, where v
a=s
− <dig> and v
b=s
− <dig>  there exists a consistent sandwich graph of  if and only if there exist consistent sandwich graphs of  and of .

proof
let ga′ and gb′ be respectively consistent sandwich graphs of  and of . suppose that ga′ is consistent with the species tree s
a and gb′ with s
b. for every connected component c of g, let gc′ be the series composition of ga′ and gb′ and let g
′= be the disjoint union of all gc′’s. we now show that  is a consistent sandwich graph of .

as ga′ and gb′ are cographs, by construction g
′ is a cograph too. now, as ga′ and gb′ are respectively sandwich graphs of  and , and as there is no edge in m between different connected components of g, we have that m⊆e
′. by construction of h
g,s and the fact that h
g,s has no edges between a and b, for every connected component c of g, if x∈v
a∩c and y∈v
b∩c, then x
y∈m∪u. as ga′ and gb′ are respectively sandwich graphs of  and , this implies that e
′⊆m∪u. it follows that g
′ is a sandwich graph of g.

now consider the species tree s obtained from s
a and s
b by adding a root whose children are root and root. we claim that  is consistent with s. consider a triplet ss|s∈p
 <dig>  we distinguish two cases: 
if {s,s,s}⊆a ,s,s}⊆b is symmetric), then ss|s∈p
 <dig> and is displayed by s
a and thereby by s as well.

otherwise, as x
z,y
z∈e
′,x and y are connected in g
′ and so by construction of g
′, we have that x,y∈c for some connected component c of g. as x
y∉e
′, by construction of gc′ either {s,s}⊆a or {s,s}⊆b. suppose w.l.o.g that the former holds, implying s∈b. observe then that ss|s is displayed by s. indeed, we have lcas,s)=lcas,s)=root, and lcass) is a descendant of root.




the converse follows from corollary  <dig>  □

the correctness of the next branching rule follows from lemma’s  <dig> and  <dig> 

branching rule 1
let  be a constraint graph reduced by reduction rule  <dig> such that the species graph h
g,s is not connected. let a be a connected component of the species graph h
g,s and let b=Σ∖a. solve consistent sandwich subgraph on  and  where v
a=s
− <dig> and v
b=s
− <dig>  if there exist ga′= and gb′= that are respectively consistent sandwich graphs of  and , then return g′=, where m
′={x
y∈m∪u:x∈v
a,y∈v
b}. otherwise, return null.

consider again the example of fig.  <dig>  after the unknown edge d
1
a
 <dig> has been removed by reduction rule  <dig>  because one connected component has non-edges a
1
c
 <dig> b
1
d
 <dig> and the other has non-edge b
2
d
 <dig>  the edges in h
g,s will be ac and bd . thus, branching rule  <dig> will split the constraint graph into two parts, one restricted to a
 <dig> c
 <dig> a
 <dig> c
 <dig>  and one restricted to b
 <dig> d
 <dig> b
 <dig> d
 <dig> 
fig.  <dig> example of the species graph h
g,s derived from  after an application of reduction rule  <dig>  the edge ac is due to non-edge a
1
c
1; edge bd is due to non-edges b
1
d
 <dig> and b
2
d
 <dig>  as h
g,s is not connected, we can apply branching rule 1




we can now give the pseudocode of the algorithm, which essentially consists of alternately applying reduction rule  <dig> and branching rule  <dig> 





theorem 2
given a constraint graph , the consistent orthology graph sandwich problem can be solved in o time, where n is the number of genes in g.

proof
the correctness of algorithm  <dig> follows from the correctness of reduction rule  <dig>  and branching rule  <dig> .

to analyze the running time of algorithm  <dig>  we simply observe that the recursive calls define a binary tree structure with at most o= <dig> nodes. as each step of the recursion can clearly be performed in quadratic time, so the complexity follows. □

we can adapt the algorithm to cases when the species tree s is partially known, by adjusting the construction of h
g,s. in particular, for any x,y,z∈v for which it is known that s displays the triplet ss|s, we add ss as an edge in h
g,s.

algorithm  <dig> has important applications. when the species tree is not known, it allows us to differentiate constraint graphs that are consistent with a species tree from those that are not; the latter cannot be depicted by a consistent ds-tree, and should be considered as phylogenetically irrelevant and discarded. when the species tree s is known and a given constraint graph c is not consistent with it, the sandwich graph returned by algorithm  <dig> shows to what extent c and s are in contradiction. furthermore if s contains some uncertainties, it allows us to see if the contradictions between c and s lie in the “uncertainty zone” of s. this may help to correct the species tree.

as an example of the last appplication, suppose that we have the species tree given in fig.  <dig>  but the relative position of species c in this tree is uncertain. suppose in addition we are given the constraint graph  given in fig.  <dig>  the ds-tree in fig.  <dig> is a ds-tree for , but is not consistent with the fig.  <dig>  however, it is consistent with the species tree in fig.  <dig>  which can be derived from fig.  <dig> by moving species c.
fig.  <dig> example of  a species tree where the placement of c is uncertain, and b) another species tree that can be derived from the first by changing the position of c. the ds-tree in  is not consistent with the species tree in  = s = a,s = s = b,s = s=c,s=s=d), but it is consistent with the species tree in . in , circles represent speciation events, and squares represent duplication events




see the “results and discussion” section for an example of application on real data.

hardness of optimizing the duplication nodes
given a constraint graph  for which there exist several possible ds-trees, we may be interested in finding one minimizing the number of duplication nodes. duplication minimization is a well-known criterion in phylogenomics  <cit> ; for example, it is used to resolve polytomies in gene trees in  <cit>  and to estimate the species tree in  <cit> .

in this section, we consider the following three optimization variants of the orthology graph sandwich problem in which the number of duplication nodes has to be minimized. we prove hardness results for each of these problems.


k-duplication orthology graph sandwich problem 


input: a constraint graph  and an integer k;


output: does there exists a ds-tree  containing at most k duplication nodes, whose orthology graph is a sandwich of g?

the above problem is equivalent to asking if  is satisfiable and there exists a ds-tree for  containing at most k duplication nodes.


species tree consistent
k-duplication orthology graph sandwich problem 


input: a constraint graph , with g= and s:v→Σ a species assignment, a species tree s on Σ and an integer k;


question: does there exist a ds-tree  containing at most k duplication nodes, whose orthology graph is a sandwich of g, and is consistent with s?


consistent
k-duplication orthology graph sandwich problem 


input: a constraint graph , with g= and s:v→Σ a species assignment, and an integer k;


question: does there exist a ds-tree  containing at most k duplication nodes and a species tree s, such that the orthology graph of  is a sandwich of g and is consistent with s?

we first provide a reduction from 3-coloring that proves that k-dogs is para-np-hard  <cit>  with respect to the number of duplication nodes k . this implies that k-dogs does not belong to the complexity class x
p, meaning that the problem cannot be solved in time o) for some function f. in what follows,  denotes the set { <dig> ⋯,k}.


k-coloring problem


input: a  graph g=;


question: does there exist a k-coloring c:v→ such that for every x
y∈e, c≠c?

the following lemma will be useful in this section. an equivalent version of this lemma could be written in terms of cographs, and we believe a proof for such a lemma should already exist in the literature. however, as we were unable to find such a proof, we give one here.

lemma 4
let  be an orthology graph with a ds-tree containing at most k duplication nodes. then we can find a k+ <dig> coloring of its complement g¯ in polynomial time.

proof
let ,s) be an orthology graph. we prove the claim by induction on |v|.

if |v|= <dig>  then there are  <dig> duplication nodes in a ds-tree for , and g¯ has a 1-coloring, as required.

so now suppose the claim holds for all orthology graphs ,s
′) with |v
′|<|v|. let  be a ds-tree for  with at most k duplication nodes. consider root. if root is a duplication node, then g is disconnected, and we can find a partition v=v
a⊎v
b such that there is no edge between v
a and v
b in g. moreover, the number of duplication nodes in t is k
a+k
b+ <dig>  where k
a is the number of duplication nodes in a ds-tree for g[v
a], and k
b is the number of duplication nodes in a ds-tree for g[v
b]. by the inductive hypothesis, there exists a k
a+ <dig> coloring for g¯, and a k
b+ <dig> coloring for g¯. it is clear that we can combine these colorings into a k
a+1+k
b+1≤k+ <dig> coloring of g¯.

if root is a speciation node, then g¯ is disconnected, and we can find a partition v=v
a⊎v
b such that there are no edges between v
a and v
b in g¯. moreover, the number of duplication nodes in a ds-tree for g[v
a]  is at most k. by the inductive hypothesis, there exists a k+ <dig> coloring for g¯ and a k+ <dig> coloring for g¯ and these can be combined into a k+ <dig> coloring for g.

this proof can be turned into a polynomial time algorithm as follows. if g is disconnected, find a partition v=v
a⊎v
b with no edges between v
a and v
b in g, and recursively find colorings for g¯ and g¯, adjusting the coloring on g¯ to assign different values from those assigned by the coloring on g¯.

otherwise, find a partition v=v
a⊎v
b with no edges between v
a and v
b in g¯, and recursively find colorings for g¯ and g¯. as each recursion splits the set of vertices and each recursive step takes polynomial time, the whole algorithm takes polynomial time. □

lemma 5
given a connected graph g=, define a constraint graph ,s) by setting m=∅ and u=e¯, and letting s:v→Σ be an arbitrary species assignment such that each gene in v is assigned to a different species. then for any integer k> <dig> g is k-colorable if and only if  has a solution with at most k− <dig> duplication nodes. furthermore if such a solution exists then there exists a solution consistent with an arbitrary species tree on Σ.

proof
assume that g is k-colorable, with c:v→ a k-coloring of g. let v
i=c
− <dig> for each i∈. thus v
 <dig> …v
k form a partition of v. for each i∈, let  be an arbitrary ds-tree with leaves v
i such that every internal node is a speciation node, and let x
i denote the root of t
i. we now construct a ds-tree  as follows. let z
 <dig> …,z
k− <dig> be duplication nodes such that root=z
 <dig>  such that for each i∈,z
i has child nodes x
i and z
i+ <dig>  and the children of z
k− <dig> are x
k− <dig> and x
k. now consider the graph h
′= obtained from the disjoint union of cliques on v
i for 1≤i≤k. observe that h
′ is a sandwich graph of . moreover by construction, we have that x
y∈e
′ if and only if lcat is a speciation node. moreover  has k− <dig> duplication nodes, so h
′ is a solution. to conclude the proof of the first claim, observe that the converse follows from lemma  <dig>  to see the second claim, observe that as h
′ is a disjoint union of cliques, p
3=∅ and therefore  is consistent with any species tree on Σ. □

as an example of the construction in the proof above, consider the graph g= given in fig.  <dig>  the corresponding constraint graph ,s) is given in fig.  <dig>  and a ds-tree for this constraint graph is given in fig.  <dig>  as this ds-tree has  <dig> duplication nodes, g has a 3-coloring. in particular, following the structure of fig.  <dig>  we observe that there is a 1-coloring of g , and a 1-coloring of g. combining these colorings gives a 2-coloring of g, which can then be combined with a 1-coloring of g to give a 3-coloring of g.
fig.  <dig> a graph g=


fig.  <dig> a constraint graph ,s) derived from g by setting m=∅ and u=e¯, and letting s:v→Σ be an arbitrary species assignment such that each gene is mapped to a different species


fig.  <dig> a ds-tree for ,s). note that the partition {a,e},{b,f},{c,d} corresponds to a 3-coloring of g. circles represent speciation events, and squares represent duplication events




we now prove the np-hardness of 2-dogs, s-cons-2-dogs or cons-2-dogs, using lemma  <dig> and the fact that 3-coloring is np-hard  <cit> .

theorem 3

2-dogs is np-hard.

proof
given an instance g= of 3-coloring, let  be the constraint graph given by lemma  <dig>  then by lemma  <dig>   is a yes-instance of k-dogs if and only if g is 3-colorable. as 3-coloring is np-hard, so is 2-dogs. □

using the same technique as for theorem  <dig>  we can prove the same np-hardness result for s-cons-2-dogs and cons-2-dogs. the proofs are identical to that of theorem  <dig>  except that in the case of theorem  <dig> we construct an arbitrary species tree s on Σ in addition to the constraint graph .

theorem 4

s-cons-2-dogs is np-hard.

theorem 5

cons-2-dogs is np-hard.

let mindogs, s-cons-mindogs, and cons-mindogs denote the minimization versions of k-dogs, s-cons-
k-dogs, and cons-
k-dogs respectively, in which we want to find a solution with the minimum number of duplication nodes. let graph coloring denote the minimization version of k-coloring. as graph coloring has no polynomial time n1−ε′-approximation for any ε
′> <dig>  unless p=np  <cit> , we can prove the following theorem.

theorem 6
for any ε> <dig>  there is no polynomial time algorithm that takes as input an instance of mindogs, and returns a solution with at most n
1−ε·k duplication nodes if there exists a solution with at most k duplication nodes, unless p=n
p.

proof
let g= be an instance of graph coloring. without loss of generality we may assume that g is connected. let  be the constraint graph given by lemma  <dig> 

now for any ε> <dig>  fix an integer n
 <dig> and ε
′> <dig> such that n1−ε+1<n1−ε′ for any n≥n
 <dig> 

suppose that there exists a polynomial-time n
1−ε-approximation for mindogs, i.e. an algorithm that for any instance  with n vertices, finds a solution with at most n
1−ε·k duplication nodes if there exists a solution with at most k duplication nodes. we show that there exists a polynomial-time n1−ε′-approximation for graph coloring.

let g be an instance of graph coloring with n vertices, and suppose without loss of generality that n≥n
 <dig> . let  be the instance of mindogs constructed from g as above. now run the supposed approximation algorithm for mindogs on . if g is k-colorable for any k> <dig>  then by lemma  <dig>  there exists a solution for  with at most k− <dig> duplication nodes. therefore if g is k-colorable, the algorithm returns a solution with at most n
1−ε· duplication nodes. . let  be the orthology graph for this solution. then by lemma  <dig>  we have a n
1−ε·+1-coloring for h′¯. as g is a subgraph of h′¯, this is also a n
1−ε·+1-coloring for g.

as n≥n <dig> n1−ε·+1≤·k≤n1−ε′·k and so we have a polynomial time n1−ε′-approximation for graph coloring, a contradiction. □

using the same technique as for theorem  <dig>  we can prove the same inapproximability result for s-cons-mindogs and cons-mindogs. the proofs are identical to that of theorem  <dig>  except that in the case of theorem  <dig> we construct an arbitrary species tree s on Σ in addition to the constraint graph .

theorem 7
for any ε> <dig>  there is no polynomial time algorithm that takes as input an instance of s-cons-mindogs, and returns a solution with at most n
1−ε·k duplication nodes if there exists a solution with at most k duplication nodes, unless p=n
p.

theorem 8
for any ε> <dig>  there is no polynomial time algorithm that takes as input an instance of cons-mindogs, and returns a solution with at most n
1−ε·k duplication nodes if there exists a solution with at most k duplication nodes, unless p=n
p.

to summarise the results in this section: given a constraint graph on n vertices, it is np-hard to find a ds-tree for that graph with at most k duplication nodes, even when k= <dig>  this holds regardless of whether we require the ds-tree to be consistent, or whether we are given a species tree that it should be consistent with. viewed as a minimization problem, it is np-hard even to find an n
1−ε-approximate solution, for any ε> <dig> 

RESULTS
we integrated algorithm  <dig> to the software provided at  <cit>  by the authors of  <cit> . note that the previous version of the program only permitted to check satisfiability and consistency of a constraint graph with respected to a given species tree s.

we used the modified software to reanalyze the data set in  <cit> . this data set was constructed by randomly choosing  <dig> gene families of vertebrates with more than  <dig> genes from ensembl  <cit> . each gene family was then analysed with proteinortho  <cit>  using  <dig> different parameter settings, yielding  <dig> different constraint graphs. here s is the ensembl species tree, which can be downloaded at  <cit> .

for this data set we have that, apart from one case, all satisfiable constraint graphs are also consistent. in  <dig> out of  <dig> cases, the constraint graph was found to be consistent, but not consistent with s. we were interested in finding out how greatly the graphs in this set  conflicted with s. indeed, some nodes in the ensembl species tree, for example the position of equus, tupaia and cavia, do not enjoy a consensus in the community, so some contradictions with s are expected.

note that we can use the graph g
′ outputted by algorithm  <dig> to obtain a species tree in the following way: we compute the set t of all p
 <dig> and then feed t to the build algorithm  <cit> , which will return a species tree displaying all the triplets in t .

this species tree can fail to be binary, if the information contained in t is sparse .

to estimate the discordancy between the ensembl species tree s and each of the species trees s
′ reconstructed by our approach for a constraint graph in cg, we did the following: for each pair  we constructed a tree s
′′ displaying the maximum number of triplets of s not contradicting s
′ using physic_ist  <cit> . we then computed the number of triplets displayed by s not in s
′′, as a proportion of the total number of triplets displayed by s: the higher this number is, the higher the conflict between s and s
′. this number, denoted c, can be used to differentiate gene families that are good markers ) from gene families that are bad markers ). the histogram of the values of c for our data set is given in fig.  <dig>  this shows that several constraint graphs, even though not consistent with s, are not in high contradiction with it and thus the corresponding gene families can still be considered as good markers.
fig.  <dig> the histogram of the values of c for our data set




CONCLUSIONS
in this paper, we extend the results of  <cit>  by giving a o time algorithm to decide whether c is consistent, even when the species tree is not known and c is not full. we also incorporated this algorithm into the software provided at  <cit> . the algorithm has important applications in providing evidence for the structure of a species tree when that species tree is unknown. it also allows us to see how much an ‘inconsistent’ set of constraints is in conflict with a known species tree, as the algorithm returns a species tree for which those constraints are consistent, if any exists. on the negative side, we show that the problem of minimizing duplications nodes in ds-trees is np-hard even when the number of duplications is very small, and it is also hard to find approximate solutions for this criterion.

