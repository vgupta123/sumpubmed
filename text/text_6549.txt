BACKGROUND
the moby-s protocol
the moby-s protocol  <cit>  has been created by a community of bioinformatics developers wishing to simplify web-based analysis. compatibility of services from different providers is achieved primarily by two means: 1) the ability to programmatically access analysis services , and 2) common object representation . the former is achieved by using wsdl-based technologies  <cit>  and a service registry , and the latter by creating ontologies. figure  <dig> illustrates the key components of the moby-s system.

a key aspect to chaining together services is the ability to directly use output from one service as input to another. in the past, in order to achieve data compatibility between programs, developers would modify existing analysis software and repackage it, or develop completely new programs suites. the most prominent examples of these two approaches were the command-line suites gcg  <cit>  and emboss  <cit>  respectively. in a semantic web approach, moby-s defines a centralized, world-writable data-type ontology to promote a comprehensive common semantic for biological data. actual data instances passed on the web have a standardized xml representation. several graphical utility programs exist  <cit>  to allow developers to easily browse and edit the service and data-type ontologies, and to register new services. the four moby ontologies  are represented using a combination of owl and rdf , the foundations for the w3c's vision of the semantic web. for processing simplicity moby uses only a small subset of owl's expressive power.

moby-s clients and their audiences
moby-s, as it approaches a stable  <dig>  specification, has the potential to unify analysis in ways other semantic web efforts in the life sciences to date have not  <cit> . a large amount of effort thus is being spent in making accessible clients. currently, there are at least  <dig> different moby-s client programs. they serve a diverse range of niche audiences, from programmers through to average computer users. programs can be subdivided into three categories based on user skill they assume, from most to least:

• do construction of a workflow before data instances can be created 

• dynamically build service options based on an entered data instance 

• execute moby-s services from within another application 

in the category of visual programming tools are taverna  <cit>  and remora  <cit> . with its moby-s plug-in  <cit> , taverna is a java application which allows the user to build moby-s workflows, and then execute the workflows on data loaded from a file, or entered manually. the development of workflows requires a degree of patience and visual programming skills, as the user is not logically guided from one action to the next. taverna's popularity stems not from simplicity of use, but from its flexibility, robustness, and support for invoking virtually any wsdl-describe web service. taverna provides the ability to execute the workflow over large lists of input, making it ideal for "power-users" who want to process large datasets, but lack traditional programming skills. settings, such as the time between successive calls to a service, can be set to prevent overloading service providers. remora, on the other hand, is html-based and acts somewhat more like a browser than taverna: services are added sequentially, with a list of valid service options presented automatically for every input/output in turn. the user selects the moby-s data ontology type and namespace from a list, and object details are filled in after the workflow construction is complete. the workflow is executed, and the user is notified by e-mail. in the results page, each octagonal shape in the workflow is hyperlinked to a simple html representation of the data at that stage.

in the category of standalone browsers, from most extensive to simplest user interface, are dashboard  <cit> , mowserv  <cit> , ahab  <cit>  and gbrowse_moby  <cit> . dashboard is a java application to help moby-s service providers register and deploy their services. it includes an interface to create and display moby-s objects, primarily for service testing purposes. dashboard is a developer-centric interface, as it exposes many of the details of the moby-s protocol , is service-oriented, and does not choreograph multiple chained invocations. mowserv is an html-based browser where users select data-types from the moby-s data type ontology, then fill in the required fields in a form. they proceed to the "objects" tab, and click on the data to display a list of available services. service executions are performed asynchronously: they are stored in the "tasks" tab, and the user checks the status of submitted jobs periodically. while mowserv provides significant guidance to a user, a drawback of the task queue and tab organization is that the analysis has neither a direct workflow representation for programmers, nor does it sequentially invoke a chain of services as a biologists might expect.

turning to more biologist-oriented clients, ahab is an html-interface, where available services are shown in a hierarchy and interactive tips about namespaces, data-types and services are displayed. data entry is simplified by ahab's exclusive use of basic moby-s objects  to seed the analysis, even if it does somewhat limit the type of analysis available. it also provides an intuitive service-selection hierarchy and logical service chaining. unfortunately, both the directed graph  and text views are cluttered by data structures and relationships only intelligible to those familiar with moby-s's rdf  <cit>  technical details. compare this with gbrowse_moby, the original moby-s client: it provides the simplest interface of all the clients, using hyperlinks on data to chain services together in a web browser. like ahab, it is restricted to basic object input, but unlike ahab does not display any ontology hierarchies. the textual and sometimes graphical representation of gbrowse_moby's output is both succinct and sufficient for the vast majority of bioinformatics data .

in the embedded browser category, several applications directly use the java, python or perl moby-s libraries to find and/or execute moby-s services. they internally create moby-s xml object representations for submission, and parse the service results back into some native display of the application. such applications include biotrawler  <cit> , which visualizes protein interaction networks, and both biofloweb and atidb client, which implicitly use the european plant network's moby-s services  <cit> . because the use of moby-s is programmatic, these types of applications do not have data-type and service selection interfaces, nor a moby-specific display interface. an exception to this rule is seahawk: it is a standalone browser, but it can be easily embedded in existing java applications as a pop-up menu, as in the genome browser bluejay  <cit> . this functionality is described in more detail in the methods section.

implementation
defining the biologist's needs
each of the clients described above serves a niche user type, but how can we get even more biologists to adopt semantic web services? based on the strengths and weaknesses of those client, a need was identified for an improved way for biologists to access moby-s services. the salient observations about existing software are:

• all of the interfaces either accept only simple objects , or require a user to build composite objects piece-by-piece. this somewhat limits the type of analysis possible in the former case, and requires an intimate knowledge of moby-s's ontologies and data structures in the latter.

• all of the interfaces require a user to go to a particular web page , and manually input data. this manual effort requires the user to already be familiar moby-s's object and namespace ontologies, in order to formulate the data. users are also required to break away from their other applications to use moby-s.

• as most data in bioinformatics is textually represented, hypertext  interfaces are the most natural fit for displaying data . while html pages are easy for biologists to work with, for any given hypertext client described here, there are different pages associated with 1) moby data input, 2) moby data display and 3) moby service selection. users must constantly flip between service and data page "modes" to chain together an analysis.

• using visual programming tools creates reuseable workflows, but they are relatively difficult for biologists to use, compared to browsing in the other clients.

to address these issues, seahawk attempts to provide:

• creating input: the ability to modify and extend the automated linking of existing bioinformatics data to moby-s service .

• embedding: the ability to easily link moby-s services into existing bioinformatics software.

• browser interface: more interactivity versus the html interfaces previously described, and improved usability versus the visual programming tools for the most common types of analysis.

• output: the ability to create workflows more easily than the visual programming clients.

creating input
with the exception of mowserv , the html-based interfaces for moby-s are all seeded with basic moby-s objects having a  tuple. this assumes first of all that the user is accessing a piece of data already in existence in a database, and that the database is connected to moby. unfortunately, both assumptions are often false. users may be interested in analyzing a new sequence they have just elucidated in the lab, have yet to submit to a public database , or any one of many other reasons. even if they are accessing a published piece of data, it is quite possible that the database they are using has not yet been "hooked into" moby-s by any developers.

the vast majority of bioinformatics data is available as formatted text, or html through web sites. seahawk accommodates importing as many file formats as possible for "seeding" the analysis, namely:

 <dig>  plain text 

 <dig>  html 

 <dig>  rich text 

 <dig>  moby-s object xml representation 

data can be loaded from file:, ftp:, or http: urls using the disk icon in seahawk, or by simply using cut and paste, or drag and drop facilities of the operating system. this input flexibility means that the user's existing desktop files, web links, and highlighted parts of web pages  can be directly manipulated and used as seahawk analysis input.

as we have already seen, moby-s objects and their subcomponents can be selected using the hyperlinks available in their html display. seahawk imports several non-xml data formats, and a user may want to analyze only subsections of a moby-s object's character string representation. to accomodate such partial data usage, it was important to provide a text-selection facility in seahawk. in seahawk, a user can highlight any arbitrary text in the display by a mouse drag, and have the text automatically converted to moby-s objects for service execution, as illustrated in figure  <dig> 

there are  <dig> main mechanisms that can create moby-s object instances from selected character strings in seahawk:

 <dig>  highlighted text is automatically turned into a moby-s string

 <dig>  seahawk will create a moby-s dnasequence, rnasequence or aminoacidsequence if 95% of the text characters are valid for that sequence type . the invalid characters are stripped from the data.

 <dig>  the text is tested against a set of regular expression rules

the regular expression and xpath rules are specified in a special rules file described in the methods section. the three sequence object types described above are the only ontology terms hardcoded into bluejay, but could be overridden by new regex rules if these terms change.

embedding seahawk in other applications
when seahawk is used as a helper application, the main application may programmatically add data to seahawk's clipboard. in figure  <dig>  the bluejay genome browser application  <cit>  creates a dnasequence object  based on the glyph clicked in the display. this data can then be passed on to the clipboard using the pop-up menu. applications can therefore seed moby-s analysis with arbitrarily composite moby-s objects they construct themselves. more information on application integration can be found in the methods section.

using and improving the web browser paradigm
in order to make the user experience as intuitive as possible, seahawk uses the tabbed-web browser user interface design, which will be familiar to most potential users. the tabbed interface  allows the user to branch off different investigation paths by launching services in new tabs. within a tab, the linking from one service output to the next is sequential, and stored in a history for back-and-forward functionality .

this interface makes the inquiry task and data-centric, rather than service-centric: the users ask themselves what they should do next with the data, not what data do they need to run a particular service. seahawk improves upon the other html-based moby-s clients by avoiding constant browser-page changes. this is accomplished by displaying service choices and input parameters as pop-up menus and dialog windows respectively.

providing service choices via pop-up menus has several advantages. first, all browser window real estate can be dedicated to displaying the scientist's data of interest. underlining hyperlinks provides a familiar yet unobtrusive visual clue for document navigation. second, hyperlinks' negligible space requirement allows seahawk to specify links for all subcomponents of a moby-s data document, making data decomposition intuitive. for example, in figure  <dig>  a service options hyperlink is available for the aminoacidsequence object, but also for its crossreference, and the data member sequencestring . third, when many service options are available, pop-up submenus can hierarchically organize the services and ease the user's navigation of the options. services may also designate auxiliary parameters that control the service's behaviour; these are referred to as secondary inputs. all secondary inputs must have a default value, in order to make an uninformed user's submission process easier. they may also have a minimum and maximum range if numeric , or an enumeration of choices . if a service with secondary parameters is invoked in seahawk, a non-modal dialog box is dynamically generated and displayed to allow the user to change these secondary parameters, as shown in figure  <dig> 

by launching a dialog rather than loading an html-form in the browser, seahawk maintains its browser-display-equals-service-results philosophy. secondary input does not enter the browser history, and because it is non-modal, the user may defer service execution while they explore other analysis choices. the user can avoid the dialog altogether, and simply use the default values, by holding down the control key while selecting the service. this feature makes service navigation even simpler.

while seahawk has no facility to edit the moby-s objects displayed , the user may put object collections, individual objects, or object members on the clipboard using the "add to clipboard" option available from every service selection menu. the clipboard allows the user to pick salient data from any step of the analysis for use later on, providing a way to arbitrarily combine information from multiple services  or analysis branches .

individual clipboard items, or the whole clipboard, can also be cleared. the multi-item clipboard has no equivalent in any major web browser, but is a familiar concept to most computer users. the moby-s objects on the clipboard can be used individually to launch services, or they may be used as a moby-s object collection for input to a service. the data-type of the moby-s object collection is determined by finding the nearest common ancestor of all objects in the data-type ontology, as demonstrated in figure  <dig>  dynamic collection data typing is an example of domain-specific semantics automatically being applied to the application interface. the "downgrading" of object collection data types does not affect the individual members of the collection: members are still passed to the service with all their fields  intact, in case the service can use them constructively.

output
the user has several choices on how to save data from seahawk. first, the moby-s objects on-screen can be saved directly into an xml file. this allows a user to resume their inquiry at a later date by reloading the saved document. the on-screen data can also be saved in html format, for sharing with colleagues, import into a word processor, etc. finally, the browsing history for a particular seahawk tab can be saved as a  workflow. the browsing session performed in this paper's figures can be abstracted into a workflow as in figure  <dig> 

the workflow is encoded by seahawk code as a scufl xml file that can be loaded into taverna and re-enacted at any point in the future on large lists of input data . building the example workflow directly in taverna requires at least  <dig> user actions, versus  <dig> actions  in seahawk. this workflow export feature of seahawk constitutes a basic programming-by-example functionality. the gbrowse client has also just recently implemented a simple workflow exporter. we hope that use of workflows becomes more widespread as they becomes more readily available, and programs such as seahawk can become a bridge for users into auditable execution enviroments such as taverna. the ability to technically document the analysis process in a workflow addresses two issues in bioinformatics today: proper citation  <cit>  and reproducibility of the results.

RESULTS
the seahawk software described here consists of approximately  <dig>  lines of java code. seahawk also uses some existing java code from the biomoby public code repository . a theme throughout the implementation of seahawk is to lower the entry barrier to the semantic web for users and developers. this is achieved in practice via the use of several xml technologies  so that customization of seahawk can be done without java coding. the use of declarative programming  for customization are numerous in the context of semantic data manipulation , such as modularity, security, and low developer buy-in. the reader is directed to the biomoby website  <cit>  for complete, concrete examples of the customization methodologies described in this section.

data display
seahawk converts raw moby-s xml returned from services into html suitable for display in a javax. swing.jeditorpane. this conversion is done using an xslt processor , and an xslt style sheet. the conventions used for the transformation and subsequent display are:

• seahawk will interpret any url with a numeric xpointer  as a link to part of a moby-s xml document, and hence will automatically provide moby-s service links when clicked, by parsing the data at that xpointer

• hyperlinks of the form http://moby/namespace value?id=id_value will be used by seahawk to construct basic moby-s database identifier objects, for linking out to relevant moby-s services.

• all other hyperlinks will be launched into an external browser 

the underlying xml representation of the semantic data is always retained, even if the html interface is changed via new style sheets. this means that there are no potential risk of seahawk inadvertently changing the data as it brokers the passage of messages from one moby-s service to the next.

creating moby-s data with a rules file
seahawk provides the ability to map unstructured text, or any xml document data, into moby-s semantic data via a rules file. the rule set can be easily augmented as developers adopt seahawk for their data. the rules file is written in xml, with a base element called mappings, which holds any number of object children.

the object elements represent templates for moby-s objects to construct. tags nested inside the object tag populate the various moby-s object field instances. the simplest moby-s objects have just a  attribute pair. for example, the example in table  <dig> defines one regular expression rule, to build a moby-s object in the ncbi global identifier namespace .

xpath rules are used to build moby-s objects from in-memory xml document object models . in contrast to the regular expressions, which pick salient substring from a simple text character sequence, xpath rules search the highly structured data of a dom. xpath rules consequently are considerably more flexible and powerful .

note that the "./@id" in the namespace rule is another xpath statement. its context is the results of the xpath rule, and fetches the id attribute of the agave classification element.

embedding seahawk in other applications
to simplify the use of seahawk as a component inside another program , a specialized java.lang.classloader was written. this classloader captures all of the classes required to run seahawk , and puts them in one jar file. this minimalist jar builder allows any developer to include a single jar file in their program to access seahawk. it is also used to minimize the applet download size. the file contains just the relevant classes to run seahawk – such as those from the biomoby cvs, and from the apache foundation's  <cit>  axis , xalan , xerces  and xpath packages. whereas these packages in their totality constitute about  <dig> mb in jar files, the minimized package provides a standalone, fully functional moby-s services browser in less than  <dig> mb.

the definition of xpath rules requires greater skill set than building regular expression rules, and is aimed primarily at developers who will integrate seahawk into their existing xml-based applications. the xpath rules provide the bridge between the application's data and the moby-s data format. as such, an application using a dom needs very few changes to embed seahawk's functionality. the code in table  <dig> demonstrates how seahawk is integrated into a java application.

discussion
improved features
seahawk improves the user experience over existing moby-s clients with two main features: pop-up menus from hyperlinks and clipboard functionality.

introducing hyperlinked pop-up menus to display service options has several advantages. first, the user is not sent to a new page to select the service . treating services as hyperlinks between input and output data maintains a data-centric browsing experience for end-users. second, the pop-up menu does not occupy any screen real-estate when not in use, but still provides a detailed  logical  hierarchy when in use. third, the hyperlinks allow for easy object decomposition because they can be inserted for each object member without affecting the display's readability.

the clipboard helps seahawk cross over from purely a browser to a browser/editor hybrid. the clipboard acts as a collator to moby-s object collections, allowing users to combine objects as they see fit. it also allows a user to temporarily keep data from various steps of the analysis, without keeping many tabs open. individual members of a composite object can be chosen and added to the clipboard too, facilitating moby-s object decomposition. the clipboard, like any tab, can be saved to disk, and reopened in another seahawk session in the future.

novel features
seahawk introduces three novel features to web services clients in general: data-creation-by-highlight, rule-based systems for data mapping, and service-interface-as-component for application integration. data import and data-creation-by-highlighting together provide an important facility to the biologist: creating moby-s objects with semantic meaning out of plain text. this allows the user to import an array of existing text-based data into a semantic web service system, including the many standard web resources the user is familiar with already. such a bridge from the existing web to the semantic web is essential to user adoption. highlighting is also especially important to biologists because it allows them to easily select subsequences of dna and protein that they deem biologically meaningful.

the unique regular expression and xpath based rule system for creating moby-s objects improves the user experience both directly and indirectly. in addition to being the mechanism by which highlighting text generates structured data objects, it allows seahawk to directly "hook into" xml-based third-party applications. users indirectly benefit too: the rules system allows developers to easily add new data mappings, and hence new analysis possibilities.

the visual simplicity of pop-up menu service selection helps make seahawk blend in with external applications that use it as a helper component. the focus on making seahawk a small jar, with an easy to use api, is meant to encourage the embedding of seahawk within java applications. by integrating seahawk into their existing applications, bioinformatics developers can provide the power of semantic web services to the end-user without making them go to a separate application, and manually transfer the relevant data.

CONCLUSIONS
traditionally, web services have been oriented towards developers, who predetermined the service to be called, then wrapped the service execution and response within another program. the real key to empowering the biologist is to have domain-specific ontologies that can help the user, rather than the programmer, select appropriate data and analysis options. the moby-s system provides such ontologies for bioinformatics.

seahawk is a moby-s client built on the foundation of the web-browser interface, familiar to virtually all potential users, not just developers. seahawk hides all of the underlying implementation details of moby-s from the user, lowering the barrier to using semantic web services. many features of seahawk can be classified as either "improved" or "new" based on their degree of novelty compared to other web services software and especially other moby-s clients. to improve the end-user experience, the key on the front-end is the incorporation of ui elements that keep the experience data-centric, treating services as links between data. the key on the back-end is making it as easy as possible to create semantic data from data the user is already familiar with , addressed with a novel regular expression/xpath rule system, and application embedding.

much bioinformatics analysis happens on the web because information and resources are scattered amongst many labs. there are three key actors in the semantic web for life sciences, users , application developers, and service providers. seahawk lowers the barriers for user and developer adoption. adoption of moby-s by service providers is gaining momentum as the protocol approaches version  <dig> . a critical mass of all three actors will allow us to empower the biologist to seamlessly perform multi-step analysis in this largely web-based field.

availability and requirements
project name

seahawk

project home page



operating systems

platform independent

programming language

java  <dig>  or higher

license

gnu lesser general public license 

any restrictions to use by non-academics

none

authors' contributions
pg is responsible for all of the coding of seahawk. pg designed the novel user interaction paradigm of seahawk, in collaboration with cs. pg wrote the manuscript, with critical review by cs. both authors read and approved the final manuscript.

