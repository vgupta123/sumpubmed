BACKGROUND
integrated approach
current computational tools in population genetics do not follow an integrated approach. we define an integrated approach to be the one that allows reuse at the framework level and at the level of end user application, which allows running jobs developed by different researchers independently. currently available applications in population genetics do not follow this approach. each application is targeted towards a very specific use case where reuse and customization are a secondary issue. most of these are targeted at native platforms and since coalescent computations can be intensive, optimizations are applied that tie the application further up with the platform. the problems this causes in developing and maintaining models in population genetics is well articulated by felsenstein  <cit> . the primary reason for the lack of an integrated approach is probably the upfront costs involved. however, this need not be the case. in the past, probably it was impractical to follow the integrated approach but with the current abundance of cross-platform, open source technologies and the maturity of object oriented designs  <cit> , it is very much practical. success stories, such as the netbeans platform  <cit> , demonstrate that the costs involved in object oriented designs will be paid off tremendously with the reuse it allows. this is truer with coalescent analysis because the underlying theory naturally lends itself to object oriented design.

first attempt: exact methods
with the maturity of the java platform and the pace of open source development, it is practical to envision an object-oriented development in population genetics. bioinformatics has already seen such efforts  <cit> . recently, some efforts are underway in population genetics  <cit> . exact methods, have recently gained in popularity  <cit> , partly due to the increased computational power and partly for a need to evaluate available approximations. nevertheless, exact methods are still not feasible for real data sets except for few cases  <cit> . their primary value lies in evaluating approximate methods and gaining intuition to improve those approximate methods  <cit> . the authors have not seen any object oriented development for exact methods or a scalable gui application in population genetics that allows running jobs in a plug-in like manner. the current paper describes such a first attempt.

overview of exact methods
an excellent overview of coalescent theory and applications is available from  <cit> . for the sake of completeness we briefly describe the models, the associated data and the calculations as implemented in the software. as a first attempt, we have considered only coalescent and mutation events in the model. migration and recombination are the next important events to consider, but, we have omitted them for now as they introduce significant complexity into the models. we have considered the infinite-alleles model  and the infinite-sites model  as described in chapter  <dig>  of  <cit> . iam and ism both postulate the creation of unique alleles on mutation. ism is a sub-model of iam that differs in the level of detail in the data. while, iam data consists of frequencies of different alleles, ism data additionally shows how the alleles are different by the site and the number of mutations.

phylogeny
ism data can be represented as a tree owing to the fact that each mutation is unique and creates a partition in the data. such a tree is known as gene tree [figure  <dig> in the literature. the corresponding binary data for the gene tree in [figure  <dig> is given in [table  <dig>  a frequently useful computation is to check if a given ism data set in the binary form actually constructs a gene tree or not. if it does, the data set is said to have the perfect phylogeny. there are two popular algorithms, gusfield`s algorithm  <cit>  and the four gametes  <cit>  algorithm for checking perfect phylogeny. we have added a job  in the application implementing this computation for both the algorithms. another job  creates a gene tree  from a given ism data in the binary form . this is useful because gene tree data structure clearly shows how mutations are shared among the alleles and is a more compact data structure for the ism model than the corresponding binary form. 

data for infinite-sites model represented by 0s and 1s in a tabular form. each column indicates a mutation site and each row an allele. the last column indicates the frequency of each allele.

recursion
computing probability of a data set under a stochastic model is fundamental because it permits estimation of the model parameters using full information of the data. this should be contrasted with summary based statistics. summary based statistics, though useful, are sub-optimal in nature. except for few models , computing probability for most of the models in population genetics is non-trivial. they involve recursions which do not render themselves into analytical expressions. recursions are common for almost all computations merely by the fact that data is correlated by the shared genealogies. the probability recursion for ism is given by :

  nn−1+θpt=∑k∈s0nnk−1pckt+θ∑k∈s1pmkt+θ∑k∈s2ni+1pmkt 

where,

s <dig>  s <dig> and s <dig> denote a partition of the alleles corresponding to the following events respectively: coalescent, mutation of the first kind and mutation of the second kind

if the removal of a mutation creates a unique allele in the data set then it is called a mutation of the first kind. the mutation of the second kind corresponds to a mutation whose removal creates an allele  already present in the data set.

i denotes the merge allele for the corresponding mutation of the second kind

ck denotes applying coalescent and mk denotes applying mutation for allele k on gene treet

p is the probability function

θ is the population mutation rate

probability of the most recent common ancestor is  <dig>  which serves as the initial condition of the recursion

the recursion graph represented by equation  <dig> is shown in . solving equation  <dig> requires understanding of the ancestral configurations and of the genealogies associated with the recursion graph. we have added options  in the job ‘recursion/infinite-sites model’ to study the ancestral configurations. other options  in the same job help us study the genealogies. option  to calculate the probability by solving equation  <dig> is also present in the job.

implementation
core framework
the core framework models the concepts of population genetics and coalescent theory relevant for exact methods. it includes the concepts of model, data, statistic, phylogeny and recursion. the package popgen.model defines the infinite-alleles and infinite-sites model. their corresponding data are defined in popgen.data. during the construction of infinite-sites data, it checks if the data conforms to the model assumption of phylogeny. towards that end, the package, popgen.phylogeny defines two phylogeny algorithms- gusfield`s algorithm  <cit>  and the four gametes  <cit>  algorithm. the package popgen.statistic contains statistics based on the data in popgen.data. for infinite-alleles data, the frequency spectrum sample configuration is defined as a statistic. for infinite-sites data, gene tree is defined as a statistic. the package coalescent.recursion forms the heart of exact computations by defining recursion in a generic way as a traversal  of the sample configurations  over the ancestral genealogies.

application framework
part of the integrated approach is to be able to run jobs contributed by others. for example we have provided a gui-based end-user application that is built on top of the netbeans platform. this design should be contrasted with most of the available applications in population genetics, where the user interface and the application algorithms are intertwined in a manner that hinders reuse and extension. besides making jobs reusable, another responsibility of the application framework is to provide common facilities to each job in a consistent manner from a central place. for example, attaching multiple output processors and algorithm profilers that collect useful data on the running algorithms, before or after the job has started, are part of this. these facilities have been implemented in the user application.

features
phylogeny
checks phylogeny of binary data
running time is linear with data size. large data sets will not take more than few seconds, if not instantaneous. the user has a choice between two popular algorithms, gusfield`s algorithm and the four gamete`s algorithm. gusfield`s algorithm is faster but four gamete`s algorithm is simpler to understand.

draws phylogeny of binary data
for a given binary data set that has phylogeny , it draws the corresponding gene tree. as discussed previously, data for infinite-sites model can be expressed both as arrays and tress. the gene tree representation has the distinct advantage of clearly visualizing which mutations are related to which alleles. gusfield`s algorithm is used in creating this gene tree. the algorithm is fast enough that even large  data sets would not take more than few seconds.

recursion
a number of quantities related to the recursion  are computed. the size of the applicable data for these computations depends both on the number of mutations and the total number of alleles. a typical data set, about  <dig> alleles and around  <dig> mutations would not take more than  <dig> seconds on a pc with free ram of 1gb. the available features on recursion are listed below.

exact probability
the exact probability of the data and that of all its ancestral configurations are computed.

counting ancestral configurations and genealogies
total number of ancestral configurations and the total number of genealogies for a given data set are computed. these are important indicators of the complexity of the problem and are cited in the literature  <cit> .

builds ancestral configurations and genealogies
all the ancestral configurations and genealogies for a given data set are printed. due to combinatorial nature of the problem, manual calculation of the ancestral configurations and that of the genealogies are extremely tedious even for small data sets . it is important to note that intuitions on ancestral configurations and genealogies are critical in proposing better methods  <cit> .

profiles recursion cache
this is an advanced feature demonstrating how the entire framework can be used to improve on existing methods. this feature counts the number of ancestral configurations at each level of the recursion graph and plots the counts during the computation. this feature is currently being used by the authors to improve over the existing  <cit>  algorithms for the traversal of the recursion graph.

RESULTS
we have provided a core framework that has modelled some concepts of population genetics in an object oriented manner as required for exact methods. it has used design patterns to build a loosely coupled system that is extensible and scalable. it is coupled with an application framework that makes jobs reusable and provides the common facilities from a central place. an end user gui application is built [see figure  <dig> on top of the netbeans platform that makes running, developing and sharing jobs easy. the framework and the end user application [see additional file  <dig> and additional file  <dig> along with the video tutorials on installing and running the application are available from the project website  <cit> . the development of this project will continue, particularly improving the recursion algorithm so that computations become feasible on bigger data sets and for models with migration and recombination. 

CONCLUSIONS
with the current state of open source development, the maturity of operating system independent platforms and the object oriented designs, an integrated approach to computation is practical. an integrated approach allows exploration of more complex models by reuse. the reuse makes it practical to spend resources for continuous renovation. it has been the authors` observation that though there is upfront cost associated with the integrated approach, the benefits are worthwhile, because it promotes code reuse.

availability and requirements
project name: coalescent

project home page: http://coalescent.sourceforge.net

operating system: platform independent

programming language: java

other requirements: java  <dig> . <dig> or higher

license: gnu gpl v3

any restrictions to use by non-academics: yes

competing interests
both authors have no competing interest.

authors’ contributions
jls conceived the project, motivated the gui use cases, and provided feedback on tests. st carried out the entire design and implementation. st and jls drafted the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1: coalescent- <dig> . <dig> zip 
description of data: unzip the file and go to the bin subdirectory. for windows run  the file coalescent.exe and for mac/linux run the file coalescent from the console. running some jobs require infinite-sites data which is available as coalescent- <dig> .0-data.zip. it contains the sample infinite-sites data files stored in xml format. a video tutorial on installation is available at http://youtu.be/f4bye9jx81c?hd= <dig> and another on the application demo is available at http://youtu.be/ieuzpzzev1q?hd= <dig>  

click here for file

 additional file 2: coalescent- <dig> .0-data.zip 
description of data: contains infinite-sites data stored in xml format. these files can be used while running jobs in the coalescent application.

click here for file

 acknowledgements
this research was funded in part by national institutes of health ; intramural research program of the nih, national library of medicine.
