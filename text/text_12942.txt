BACKGROUND
phylogenetic trees are a standard way to visualize and interpret homologous sequences, such as for the delineation of taxonomies. with the explosion of sequence data, trees are becoming large and unwieldy. nowhere is this more apparent than with the small subunit ribosomal rna  gene, one of the most widely accepted marker genes for global phylogenies  <cit>  and one of the cornerstones of our present understanding of evolutionary biology  <cit> . currently there are in excess of  <dig>  full-length 16s sequences in public repositories with the number increasing rapidly. a fully expanded tree comprising  <dig>  sequences is nearly impossible to navigate. one solution to this problem is to collapse  monophyletic sets of sequences into groups. arb  <cit>  was one of the earliest tools providing the ability to collapse and expand groups of sequences to facilitate tree navigation. arb allows curators to add or remove groups manually, but as the 16s database expands manual group curation is no longer feasible, especially since trees have a dynamic structure due to frequent updates. we have developed a tool, grunt, to automate this step that includes grouping, ungrouping, and naming functions. the tool is implemented as part of the greengenes database  <cit> , but is also available as a standalone tool.

it should be noted that grunt is not a de novo clustering method, but rather a tool that identifies clusters already present in pre-existing tree topologies. this means that methods, such as large-scale bayesian  <cit>  and maximum likelihood  <cit>  inference, able to incorporate assumptions such as rate-heterogeneity, can be used as the basis for grunt. consequently, grunt is a tool that facilitates rapid objective classification of hierarchical monophyletic groups in the absence of formal classification, which is lagging behind particularly for environmental clone sequences.

implementation
grunt was written to specifically interface with the arb software  <cit>  to facilitate group curation of greengenes.arb, the arb database from which the greengenes taxonomy is extracted. grunt exploits a number of features of arb including the ability to display multiple fields in any order at the terminal nodes in a tree and the ability to export trees from arb in xml format that include terminal node fields, branch length, bootstrap values and any existing group names. we found, however, that arb is lacking an xml to newick  <cit>  converter necessary for re-importing grunt-annotated xml trees. therefore we built our own converter for this purpose  <cit> .

a step-by-step protocol on how to export and re-import arb trees with the appropriate fields is provided at the greengenes website . however, the program can be applied to xml trees generated by any software provided the format fulfills the arb xml schema. sample xml files are provided through the greengenes website .

RESULTS
defining new groups
grunt defines new groups in xml trees based on up to four parameters; branch length , bootstrap support values  and number of daughter taxa circumscribed by the branch under consideration . these parameters can be user-defined and the settings represent minimum  values. ml and ms are used to help ensure that only reproducibly monophyletic groups are defined. although bootstrap values are typically used to infer monophyly, we include branch length as an option  for defining monophyly since it may not be feasible to bootstrap very large trees. these parameters can be used independently or together . minimum number of taxa in a group, mc, is included to allow iterative hierarchical and nested assignment of groups .

grunt traverses the tree by starting at any of the leaves separated from the root by the greatest number of bifurcations, and walks towards the root. once encountering a branch that satisfies ml and/or ms and mc, it creates a new group  and assigns it a name  provided that the group does not contain any predefined subgroups. it then repeats the procedure for the next leaf separated from the root by the highest number of bifurcations. if during the walk it encounters an existing group before identifying a candidate branch for a new group, it moves onto the next leaf. this prevents over-grouping of the tree. the program terminates when all leaves have been examined.

since grunt only assigns groups to existing trees and does not create or alter topologies, it is dependent on the accuracy of the tree to which it is applied. for example, if a set of sequences is misaligned against a reference alignment resulting in an incorrect placement as a separate lineage in a tree, grunt may assign a group name to the spurious lineage.

naming new groups
prior to creating names for newly defined groups, grunt creates a dictionary of all existing names in an input tree. as new names are assigned, they are added to the dictionary. this is to ensure that every group has a unique name by not reusing existing names. names are based on  <dig> fields commonly associated with sequence records and exported from greengenes.arb; i) unique identifier, ii) sequence type , iii) ncbi taxonomy, iv) submission date and v) clone or organism name. for other arb 16s rrna databases, such as silva  <cit> , equivalent taxon fields would need to be identified and exported. the requirement for multiple taxon fields was the reason that xml was chosen over the more standard newick format, which can only hold one taxon field.

new group names are derived from the five taxon fields by applying a set of sequential naming rules based on members of the group under consideration:

 <dig>  name the group based on the consensus of the taxon name  of the lowest ncbi rank after removing taxonomically uninformative records from consideration . in the unlikely event that two or more taxon names are equally represented in the group, grunt will concatenate the names.

 <dig>  if the consensus name has already been taken, use the organism name of the oldest isolate record that does not contain any interfering characters .

 <dig>  if the oldest isolate record name has already been taken, use the next oldest isolate record lacking interfering characters, repeat as necessary.

 <dig>  if no isolates are present or have been excluded due to other rules , use the name of the oldest clone that does not contain any interfering characters.

 <dig>  if the oldest clone record name has already been taken, use the next oldest clone record lacking interfering characters, repeat as necessary.

 <dig>  if all naming options are exhausted, label group unnameable followed by a numerical code based on the computer system clock.

uninformative or redundant field strings are excluded from the naming schema by applying a set of forbidden names that cannot be part of a group name. these include "environmental sample", "unclassified", "uncultured" "unidentified", "cluster" and "isolate". users can add to this list by means of editing a text file . in the same file, characters that may interfere with other tree reading or parsing programs can similarly be excluded from group names, these include any names beginning with an integer or "nan"  and the following characters: "!@#$%^&*().,". newly defined group names are written to the groupname parameter of the relevant branch tag in the xml file .

this naming schema ensures that every group defined by grunt will have a unique name, and that names should be relevant for the taxa that they encompass. however, as with many automated annotation tools, grunt facilitates but does not replace manual taxonomic classification of records. grunt can also be applied to xml trees with a single taxon field, whereby the group name is either chosen randomly from the group member names, or as a consensus of the member names. note that the unique group name constraint also applies in this case.

iteration and performance
the tree-traversing rule that prevents groups from being formed if an existing group is encountered prevents over-grouping, but also means that only small peripheral groups will be formed if a small group size is used. therefore, grunt is most effective for comprehensive but conservative nested grouping if a large mc is initially chosen, such as  <dig>  and the process iterated in decrements of mc. this also has the benefit that larger groups will have preferential naming over smaller groups due to the unique group name constraint. a perlscript that runs grunt iteratively is available on the website .

grunt takes ~ <dig> seconds per cycle to run on the ~ <dig>  taxa greengenes tree using a macbook pro . running  <dig> iterative cycles from mc  <dig> to  <dig> in decrements of  <dig> produced between  <dig> to  <dig> new groups depending on branch length stringency. fig.  <dig> shows the number of groups created per cycle for a selection of mc values for four settings of minimal branch length. as expected, number of groups assigned increases as branch length  decreases, and number of groups assigned increases as group size decreases.

removal of groups
since curators often dedicate much effort to manually annotating group names, grunt, by default, will not modify existing names. however, trees are not static entities due to the rapid database expansion and require constant revision, which was the original impetus for developing grunt. hence, we also developed an ungrouping tool that parses an existing topology looking for groups that are highly unlikely to represent monophyletic lineages and removes them prior to the grouping/naming cycle. a simple example is illustrated in fig.  <dig>  the addition of a new sequence, s', subdivides the branch, e <dig>  leading to a previously monophyletic group s . group s is identified by the ungrouping tool based on either a branch length or bootstrap value  that falls below a user-defined minimum threshold. the default branch length setting for ungrouping is  <dig> . there are, however, exceptions to this rule where the user may not want to remove a group under any circumstances. these holy groups can be specified by the user in a text file supplied to grunt before running the removal step .

CONCLUSIONS
grunt enables the iterative hierarchical assignment of groups and group names to phylogenetic trees according to a set of rules that can be partly defined by the user. this can result in hundreds to thousands of group assignments for large trees  that improve subsequent tree navigation, and facilitate the ability to identify incorrectly placed taxa. assigning a large number of groups is beyond the ability of manual curators, particularly when databases are regularly updated that necessitates regrouping of tree topologies. the ungrouping function of grunt is necessary for the updating process as new taxa can disrupt previously defined groups . it should be noted, however, that grunt only does the grunt work and is not a replacement for manual curation.

although grunt was developed specifically to streamline curation of the greengenes taxonomy, it may be useful for any application where a comprehensive hierarchical clustering of large tree topologies is required. for example, the interpretation of the recently published comprehensive 16s rrna phylochip microarray  <cit> , is optimized if the greengenes taxonomy  is accurately and densely grouped. experimental phylochip data can be browsed using heat maps where grouped rows correspond to a set of taxa whose population dynamics correlate across multiple arrays  <cit> . in the past, recognition of phylogenetic relationships among heat map rows has been difficult. now, as each taxon is annotated with accurate group taxonomy, visual linking of phylogenetically near neighbors is facilitated. another possible application is the selection of organisms  for defining pan-genomes, "the global gene repertoire of a bacterial species  <cit> " at the species level and all higher taxonomic ranks. this requires an accurate phylogeny of organisms with sequenced genomes, with all monophyletic groups being comprehensively assigned. as the number of sequenced genomes goes from the hundreds to the thousands in the coming years it will no longer be possible to perform manual grouping, necessitating automated methods such as grunt.

availability and requirements
project name: grunt

project home page: 

operating system: platform independent, source code available at project home page 

programming language: c++

licence: gnu gpl

authors' contributions
ph and dd planned and executed the project and wrote the manuscript, tzd integrated grunt into the greengenes website, jf wrote the xml to newick converter and vmm and gla supported the project. all authors read and approved the final manuscript.

supplementary material
additional file 1
grunt how to notes. step by step instructions on the use of grunt

click here for file

 additional file 2
sample xml file. an example of an xml file that is used as the input tree file for the grouping and ungrouping functions in grunt

click here for file

 additional file 3
grunt forbidden words and characters. an example text file of words and  characters that are removed from consideration when naming new groups by the grunt grouping function

click here for file

 additional file 4
grunt iteration perl script. a perl script for iterating the group naming procedure in grunt proceeding from larger to smaller groups

click here for file

 additional file 5
grunt holy names. an example text file of group names that cannot be deleted by the grunt ungrouping function

click here for file

 additional file 6
grunt source code. compressed directory containing the source code for grunt

click here for file

 acknowledgements
the work presented in this paper was supported by the director, office of science, office of biological and environmental research, life sciences division, u.s. department of energy under contract no. de-ac03-76sf <dig> and under the auspices of the us department of energy's office of science, biological and environmental research program, and by the university of california, lawrence livermore national laboratory under contract no. w-7405-eng- <dig>  lawrence berkeley national laboratory under contract no. de-ac02-05ch <dig> and los alamos national laboratory under contract no. w-7405-eng- <dig> 
