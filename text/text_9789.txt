BACKGROUND
genotyping snps
determination of the alleles at a specific single nucleotide polymorphism  site is called genotyping. an optimal genotyping technology should be capable of genotyping any number of snps for a large number of individuals satisfying the following criteria:  <dig>  easy and quick development of an assay from the sequence information;  <dig>  over-all low cost;  <dig>  the data analysis must be simple, transparent, fully-automated and robustly give accurate genotype-calls for all kinds of samples; and  <dig>  the study design must be flexible and scalable in all respects . automated genotype calling is an essential part of such a system. a number of medium to high-throughput genotyping methods have been developed. among these various techniques, taqman  <cit>  was designed optimally to give genotypes of large numbers of individuals for one snp at a time. but from a clinically relevant, personalized medicine point of view, we require a system which can genotype multiple snps simultaneously for any single patient sample.

such a system can be achieved through a device known as a genotyping microarray. through this mechanism, one can display thousands of specific oligonucleotide probes, precisely located on a small glass slide. these array-based technologies offer both economic and patient specific applications allowing the genotyping of multiple snps simultaneously. there are a number of microarray genotyping protocols, including affymetrix genechips  <cit>  and illumina's beadarray™ system  <cit> . for the widely used affymetrix genechip system, a system based on the discriminatory power of nucleic acid hybridization to generate the genotyping signals, sophisticated autocalling algorithms have been developed  <cit> . over the last five to six years affymetrix has developed and tested a series of algorithms using their platform. the affymetrix genechip is suitable for very large scale genotyping, e.g.,  <dig>  or more snps at a time, but is expensive for medium to small scale genotyping . the illumina beadarray genotyping platform provides a powerful combination of high-throughput and accuracy with low cost per snp analysis. based on the goldengate™ genotyping assay, illumina designed a genotype calling algorithm using a bayesian model, taking the ratio of two single colored intensity signals corresponding to two possible snp alleles, to give the genotype for a single snp  <cit> . the automatic calling of genotypes is performed by proprietary software, gencall, which is based on a custom-designed clustering algorithm  <cit> . to our knowledge, exact details of the algorithm are not available in the public domain.

compared to these systems, our laboratory has developed a robust and redundant chemistry platform using the technology of single base extension which produces multiple signals from multiple probes  corresponding to a single snp  <cit> . to our knowledge, apex is the only chemistry in which the on-chip assay can be performed in  <dig> minutes, making apex potentially suitable for rapid genetic diagnostics in clinical settings: the affymetrix assay takes several hours for hybridization on the chip, and illumina's assays also takes longer compared to apex.

commercial software called genorama  <cit>  can detect all the four colors of fluorescence emitted from the dyes used in an apex experiment, and then automatically call the base corresponding to a specific probe spot. the problem with this system is that the underlying scoring algorithm treats all probes equally and thus requires considerable inspection of the original array data to produce the final genotype call  <cit> . using the genorama base-calling data for both apex and as-apex probes, gemignani et al.  <cit>  developed a simple matrix-score based algorithm and made the calls corresponding to the most likely genotype, but with considerable manual inspection.

current genotype calling system: snp chart
snp chart is a java based visualization tool, developed by our research group  <cit> . in this integrated platform, spot intensity data from different and/or replicate probes  that interrogate the same snp are imported, together with a multi-channel tiff image of the original array experiment. this system is capable of calling any snp genotype with the help of individual manual data inspection. the main problem with this genotype-calling system is that it is time-consuming and exposed to user subjectivity bias. examples of snp charts are shown in figure  <dig> 

data composition
we built our genotyping model based on the training set of  <dig> coriell dna samples  <cit>  and  <dig> negative pcr controls  <cit> . each sample comes from a single microarray experiment, conducted on a small glass slide, and contains information on all the snps under study. our laboratory has developed a robust microarray platform for each sample patient, generating multiple signals for approximately one hundred snps using two kinds of probes, namely, classical apex probes and allele specific apex  probes  <cit> . there are six probes in total for each biallelic snp and each probe has two replicates which make twelve different spots for a single snp on the microarray slide. all these spots are randomly scattered across the microarray slide but with known coordinates. multiple sets of probes of these types along with their replicates make this genotyping platform unique and redundant. each spot in the microarray slide produces signals from four different channels, corresponding to a, c, g and t. in our current genotyping method, we only considered the expected foreground signals and will consider all the background, non-expected signals for further development of genotyping model .

an example of a data source for a single coriell sample and a single snp is given in table  <dig>  for the snp rs <dig>  the two possible alleles are c or t. each row of this table represents a single spot. the first column is the spot id; the second column is the probe name; the third column is the expected allele id for the appropriate spot; and the last four columns are the signal intensity values for the four channels corresponding to each spot.

in the second column of table  <dig>  "apex_left" refers to the left-hand apex probe on the sense strand, and "apex_right" refers to the right-hand apex probe on the anti-sense strand that interrogates the dna strand nucleotide complementary to that of the left-hand apex probe. for all the apex probes, the fluorescent signals come from the base position of the snp allele. in contrast, for all the aso probes, fluorescent signals come from the base adjacent  to the actual snp site  <cit> . for the snp rs <dig> considered in table  <dig>  the base 3' adjacent to the snp allele is always t on the sense strand. the left probes, aso_1left and aso_2left, are designed to signal at this adjacent base, t, if the snp site has the first allele  and/or the second allele , respectively. similarly, snp rs <dig> has g in the adjacent position 3' to the snp side on the anti-sense strand. the right probes, aso_1right and aso_2right, signal at this adjacent base, g, again for c and/or t at the snp site, respectively. it is merely the presence or absence of the signal that indicates the snp allele. according to the probe structure, the signals corresponding to the expected alleles are highlighted.

the data represented in table  <dig> come from the dna sample coriell na <dig> and here the true genotype is cc . according to the apex chemistry, for the genotype cc the dominating signals from spots  <dig> and  <dig> should be c among the two expected channels c and t. similarly the dominating signals from spots  <dig> and  <dig> should be g  among the two expected channels g and a. rows 5– <dig> represent the aso probes in which a base-specific fluorescence signifies the presence of the allele. since the genotype is cc, all the expected signals corresponding to allele  <dig>  should dominate over the other channels, i.e., expected foreground  and background signals  <cit> . note that for spots  <dig> and  <dig>  the expected signal , corresponding to the presence of the t allele , is comparable to the background signals. in table  <dig>  all the signals which are not highlighted in bold are considered as background signals, often due to the spectral overlap between dyes, and/or a general background.

in fact, this is a very good source of data, as all the signals corresponding to allele  <dig>  are comparable to the level of background signals. now suppose the true genotype is tt, then we should expect dominating signals only from the expected channels corresponding to all allele  <dig> probes. for a heterozygous ct genotype, we should expect dominating signals from all the expected channels corresponding to both allele  <dig> probes and allele  <dig> probes. these features of our redundant and robust platform can also be represented through our data visualization tool: snp chart  <cit> . in figure  <dig>  four snp charts corresponding to three different genotypes  and a negative control  are shown for the same snp .

in our study we use the  <dig> coriell samples plus three negative pcr controls for model building. these  <dig> samples will be called the coriell training set. to test the performance of the calling algorithm we also have a completely independent set of  <dig> sirs  dna samples from the icu of st. paul's hospital, plus one test negative control sample. this set of  <dig> samples will be called the sirs test data. note that the sirs data are not used in model building and come from a separate study, so they provide a very rigorous test. for the training data, there are  <dig> snps on the microarray slide, but only  <dig> were usable:   <dig> snps had pcr chemistry failure and   <dig> snps had one of the three possible genotypes missing among the training set.

formation of classifiers
ideally, the genotype call could be solely based on just one of four sets of probes:  apex_left,  apex_right,  aso_1left and aso_2left, and  aso_1right and aso_2right . accordingly, we have developed four sets of classifiers, named apex.l, apex.r, aso.l and aso.r, based on the respective probe sets. each classifier is based on two explanatory variables, generically denoted by x and y, measuring the signal intensities for the two candidate alleles in the snp position. in table  <dig>  for example, x and y corresponds to the c and t alleles, respectively.

between them the four classifiers have four pairs of such explanatory variables: ; ;  and . they are derived from the signal intensities in rows 1– <dig>  3– <dig>  5– <dig>  and 9– <dig>  respectively, in data structures exemplified in table  <dig>  all these variables take the sum of the relevant signals. from the example data in table  <dig>  the values of the variables for the classifier apex.l are apex.xl =  <dig>   <dig> +  <dig>   <dig> =  <dig>   <dig> and apex.yl =  <dig> +  <dig>   <dig> =  <dig>   <dig>  and so on, as summarized in table  <dig> 

our main objective is to automatically select from these four sets of variables those pairs which give "good" signals for genotype calling. moreover, the variables and hence the classifier used will be chosen dynamically, i.e., for a specific snp and sample. in this paper we use fisher's  <cit>  linear discriminant analysis  to build the classifiers, but the method of dynamic variable selection would apply to any linear or nonlinear classifier.

conversely, problems with the samples or the chemistry may lead to overlap in the four clusters, making calling difficult. in figure  <dig> for snp rs <dig>  for example, sample  <dig> is a gg genotype which falls in the cg cluster for the left apex probe set. fortunately, the other three probe sets correctly place sample  <dig> in the gg cluster. so three out of the four probe sets work, and classifiers based on them would make the correct call for sample  <dig>  for sample  <dig> , however, the left apex probe set works the best, placing the gg sample clearly in the gg data cluster. thus, different probe sets may be effective for different samples, even for the same snp. our algorithm attempts to identify effective probe sets automatically, sample by sample, and it is in this sense that it chooses variables dynamically.

RESULTS
dynamic-variable lda based genotyping model
for each snp we build four separate lda classification models; the models are based on the pairs of explanatory variables in table  <dig> corresponding to the four probe sets. for this stage the training data are the  <dig> coriell samples and the three negative pcr controls described under data composition. as test data to evaluate the calling performance we use the  <dig> sirs test samples also described under data composition. within each snp, sample by sample the four classifiers are combined using the weighting algorithm described later in the methods section, to give one call for the particular test sample. the calls are checked for concordance with the validated genotypes in the sirs data, leading to the results in the first row of table  <dig>  in  <dig> % of samples, the called genotype is nn , hence the call rate of less than 100% in the table. as detailed under methods, by changing the threshold for calling, a modest reduction in the call rate to  <dig> % yields a  <dig> % concordance rate.

we also reverse the roles of the training and test data sets, leading to the second row of table  <dig>  the results are stronger in terms of the number of snps called, call rate and concordance rate, because in this second analysis a much larger set of data is used for training the models.

row  <dig> of table  <dig> reports the results from applying the method of cross validation   <cit>  to the coriell data set. here, each sample is removed in turn from the data, and its genotype is predicted based on retraining the four classifiers using only the remaining data. the results are similar to those in row  <dig>  for the sirs data, row  <dig> reports analogous cross validation performance estimates, and there is very close agreement with row  <dig> 

simple lda based genotyping model
for comparison, for each snp we use the training data to build a single lda classification model using all eight variables available in table  <dig>  for each snp, simple lda applied to the training data assigns weights to the eight variables and these weights are constant for every test sample. thus, this more standard modeling approach does not allocate weights dynamically. the same comment applies to macgt from our research group  <cit> , which also requires greater levels of manual inspection of the apex data.

the results from simple linear discriminant analysis are given in table  <dig>  in row  <dig> the concordance rate for the sirs test set is  <dig> %, which might be considered good for other applications but for clinical purposes a much smaller concordance error is desirable. modifying the calling threshold makes negligible difference to the concordance rate. reversing the training and test data shows an even worse outcome:  again changing the threshold value does not control the call rate and  the concordance rate deteriorates drammatically. therefore the performance is not competitive against dynamic-variable lda.

as shown in rows  <dig> and  <dig> of table  <dig>  the performance of simple linear discriminant analysis is better when measured by cross validation, particularly when predicting the sirs data. it seems that the method is not robust to using samples from different sources for training and testing.

discussion
we also tried classifiers based on different sets of variables. for example, we built an aso classifier using the variables aso.xl, aso.yl, aso.xr and aso.yr and an apex classifier using the variables apex.xl, apex.yl, apex.xr and apex.yr. the calls from the two classifiers were then combined using the dynamic variable methodology. little improvement in concordance rate was found relative to eight-variable simple lda. similar results were obtained when combining left and right classifiers, based on the left variables  and the right variables , respectively.

CONCLUSIONS
we have developed a robust automated genotype calling method based on an aso and apex microarray platform. multiple, qualitatively different probes provide redundancies in the event that a probe does not provide a reliable signal. the dynamic-variable calling algorithm respects these redundancies, building up an overall call from classifiers based on subsets of variables, with more weight given to seemingly more reliable classifiers. the weights change from one test sample to another; it is in this sense that the method is dynamic. standard methods of variable selection  as described by, for example, hand, mannila, and smyth  <cit>  or hastie, tibshirani, and friedman  <cit> , would select or filter the variables and use the same set of reduced variables for every call. such a strategy would be appropriate if the same probe sets are reliable from sample to sample.

for a call rate of approximately 95%, we were able to achieve a concordance rate of  <dig> % in a large, independent test set of validated genotypes. the probe data for those samples/snps that are not automatically called would be manually inspected within snp chart; unlike 100% manual inspection, this does not impose an unreasonable time burden. the method of combining classifiers is not specific to linear discriminant analysis; other statistical classifiers could be used. similarly, the method could be applied to other microarray platforms with complex redundancies.

