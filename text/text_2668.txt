BACKGROUND
living organisms in nature use a variety of substances that express both conserved and variable functions to survive. for example, genes and proteins have conserved sequences or motifs that usually express their essential functions, and some variable regions are known to provide varieties to the functions including immunity. similarly, a variety of relatively small metabolites can be grouped into those common to many different species  and those observed in a limited set of species . secondary metabolites have been shown to be of great value in the classification and differentiation of fungal species  <cit> . for another example, plants produce over  <dig>  secondary metabolites  <cit> , some of which are known to function as toxins defending the organisms against pathogens, parasites and predators  <cit> . the physiological roles of many secondary metabolites are still unknown; however, some of them are important sources of drugs and industrial materials.

many secondary metabolites are not yet known how they are synthesized or degraded, which can be referred to as “orphan metabolites” in metabolomic studies  <cit>  by analogy with orphan genes in genomic studies  <cit> . these orphan metabolites can be divided into groups that share the same core substructure, originated from the same biosynthetic pathways. it is also known that many metabolites are synthesized by adding up the building blocks onto the other existing metabolites. therefore, finding common and branch substructures from a group of compounds may narrow down the search space to identify their biosynthetic pathway compared with the prediction of pathway for each metabolite individually. this is our motivation of developing novel multiple chemical alignment  algorithm, which is different from the ones for motif finding.

multiple sequence alignment algorithms are valuable in finding conserved and variable patterns across a family of nucleic or amino acid sequences, and have been shown of major importance in bioinformatics. the concept of multiple alignment can also be applied into graph structures. graph is a general data structure where some pairs of the objects are connected by links, and has been used for modeling biological networks  <cit> , three dimensional structure of proteins  <cit> , as well as molecular structures  <cit> . there have already been a number of multiple graph alignment or frequent subgraph mining methods  <cit> . those techniques have their own strengths and weaknesses because of the variety of different requirements of finding substructures. therefore different strategies have to be designed depending on the purpose of finding common substructures. for example, the common substructure of a set of polypeptides is obviously a peptide backbone. in most cases, however, “a peptide backbone” is not the proper answer for the researchers using the multiple alignment. the purpose of the multiple alignment is usually finding the conserved sequence of amino acid residues, which is why multiple “sequence” alignment method is suitable rather than multiple “graph” alignment.

on the other hand, some multiple graph alignment methods were developed for finding functional groups or substructures in chemical compounds responsible for ligand binding. graph-based methods have strengths in identifying conserved substructures and generating atom-atom alignments. many researchers proposed graph-based algorithms for obtaining the maximum common subgraph   <cit>  using clique-finding  <cit>  and backtracking  <cit>  techniques. the mcs problem is known as np-hard, so most algorithms are not universally applicable. therefore, the graph-based algorithms use some heuristics to effectively reduce the computational amount, to provide a specialized solution for the concrete properties of their problems arisen from special requirements. recently, an evolutional algorithm-based approach has been proposed to solve multiple graph alignment  <cit> , although it was optimized for three-dimensional protein structures and it still required many computational time even for relatively small molecules. more importantly, these multiple alignment methods perform 3d alignment  of molecules to deduce pharmacophores or the sites of molecular recognition, which should match different chemical groups with “similar” properties responsible for the binding to proteins that are usually oriented similarly among the group of ligands. in this context, “similar” chemical groups do not mean the chemical groups that can be converted to each other by enzyme reactions, but they typically mean electrostatic properties such as polar positive, polar negative, or hydrophobic. this strategy is apparently not suitable for finding metabolic building blocks.

we propose in this study that the techniques for predicting metabolic origins require different strategy than that for motif finding or ligand binding. we thus developed the multiple chemical alignment  algorithm for assisting the metabolic pathway prediction. our method was shown to be efficiently quick to apply for finding the core and branch substructures from large number of compounds. the main procedures in the mucha algorithm are:  obtain the longest common string of atoms,  extend the string to obtain the core substructure,  apply the similar strategy to the peripheral atom strings . we propose this method as the powerful tool to classify metabolites based on the building blocks and to facilitate the prediction of their biosynthesis pathways.

materials
chemical structures of metabolites were obtained from the kegg ligand database  <cit>  . c <dig> and c <dig> are the kegg compound ids for the example molecules, sinapic acid and p-coumaryl alcohol 4-o-glucoside, respectively. kegg chemical function  format represents chemical compounds as graphs g, where v and e are the sets of vertices and edges, i.e., the sets of atoms and bonds found in each molecule, respectively. the vertices  do not only contain atomic species information but are labeled by the kegg atom types  <cit> , which describe the detailed information of atomic properties such as functional groups . kegg atom label consists of three letters, such as “c1a” meaning a methyl carbon. the first and second letters represent atom species and orbital environments, respectively. the third letter describes the surroundings of a given atom in terms of its bonded neighbors. the list of the kegg atom typing is given in the supporting information. in this study, we refer to the full kegg atom types consisting of the three letters as the “kegg atoms”, up to the first two letters as the “atom classes”, and the first letter as the “atom species”. note that hydrogen atoms are not usually described as the vertices, unless it is necessary to represent the stereochemistry, but the involvement of the hydrogen atoms is implicitly represented in the kegg atoms. also, the numberings of the atoms in the molecules we used, as described in figure 2a, were not base on the iupac rules but were automatically assigned by the chemical structure drawing tools including chemdraw and kegdraw.

methods
in this section, we first introduce the naïve extension of simcomp  <cit> , the effective pairwise alignment method, for the comparison. consequently, we defined the two key methods for the proposed mucha method in this study, dmaid  and decaf . using these two, the mucha calculates the multiple chemical alignment through the process as described in figure 1:  to obtain the longest common atom strings ,  to extend lcas to obtain the core alignment, and  to conduct the similar strategy to the branch structures.

mulcomp as the naïve multiple chemical alignment tool
we designed the naïve version of the multiple chemical alignment method by assembling the simcomp pairwise chemical alignments for all combinations of the molecules given as a query. we refer to this naïve method as mulcomp. since a simcomp pairwise alignment is calculated independently from other alignments, there occurred many cases where the atom-atom mappings in some alignments conflicted to each other. in such cases, we removed the conflicting atom-atom mappings. this removing process is also applied to the branch alignment in mucha, and was thus explained in the later section in this paper.

distance matrix-based atom identifier 
the first technique of mucha we applied was named as the distance matrix-based atom identifier , which is used for characterizing the atom's or atom string's relative position. in this context, “distance” means the shortest path length between two atoms in a molecular graph. distance  <dig> refers to the current atom. distance  <dig> refers to the atoms directly bonded to the current atom. distance  <dig> refers to the atoms bonded to the distance  <dig> atoms, and so on.

example dmaids are shown in figure 2c. we defined the two types of dmaids: self-dmaid and anchored-dmaid. self-dmaid basically has the same structure as the distance matrix. the differences lie on that the self-dmaid only considers the atoms included in the given set of atoms  in a molecule, and that self-dmaid is used for the distinction of the atom strings to obtain lcas. self-dmaid always becomes a square matrix. take the atom string " <dig>   <dig>   <dig>   <dig>  5" of the molecule c <dig> for example, the shortest path lengths from the atom  <dig> to the atoms  <dig>   <dig>   <dig>   <dig>   <dig> were  <dig>   <dig>   <dig>   <dig>   <dig>  respectively. this way, shortest path lengths from the atoms in the atom string to their own were put in an array, which made a square matrix enabling the quick check of the topological identity among the atom strings. for instance, as described in figure 2c, self-dmaid for the atom string " <dig>   <dig>   <dig>   <dig>  5" of the molecule c <dig> was the same as the one for " <dig>   <dig>   <dig>   <dig>  5" of c <dig>  however, these two atom strings were not regarded as lcas, because they were not the same in terms of the kegg atom strings . if all the query molecules have the atom strings that are the same in terms both of the self-dmaids and the kegg atom strings, then the atom strings were regarded as the common atom strings to obtain the core substructure.

on the other hand, the anchored-dmaid for an atom or atom string needs the other atom or atom string as the anchoring point, and were used to obtain the branch substructures using the lcas as the anchor. an anchored-dmaid is a distance matrix of an atom string against another, therefore it is not necessarily a square matrix. for example, the anchored-dmaid for the atom string " <dig>   <dig>  15" of the molecule c <dig> against the anchor string " <dig>   <dig>   <dig>   <dig>  5" is shown in figure 2c. the calculation process is the same as that of the self-dmaid. figure 2c shows another anchored-dmaid that was the same as the first one. after the core substructure was obtained, the anchored-dmaids were calculated for the short common atom string  against the core. different from the core substructures, if the atom strings are the same in terms both of the anchored-dmaids and the atom species strings, then they were regarded as the common strings to obtain the branch substructures.

longest common atom strings 
we defined the longest common atom string  to use as a seed to start multiple alignment. atom strings were described as the paths consisting of the kegg atoms and the self-dmaid, of which the longest common  in the given set of molecules were taken as the lcas. the procedure of finding lcas is as follows. first, every atom was regarded as an atom string with the length =  <dig>  and was put into a queue. these atom strings were distinguished by the two properties: the kegg atom labels and their self-dmaids. if the atom strings appeared not in all molecules, then they were discarded. each of the remaining atom strings was picked out of the queue, and the neighboring atoms of the terminal atom of the string were added to generate all possible atom strings that were one-atom longer. all these atom strings were stored into a new queue, and then the strings that appeared not in all molecules were discarded. each of the remaining atom strings was picked out of the queue, the neighboring atoms of the terminal atom were added to generate all possible atom strings that were one-atom longer, and was stored in a new queue. this process was iterated until the longer strings shared by all molecules cannot be found any more.

if every one of the molecules had only one lcas, then the set of lcas was represented as the “seed” alignment to obtain the core substructure. if there were more than one possible lcas per molecule , the best combination of lcas was selected as the representative lcas in the following way. the similarity scores among lcas were calculated according to the decaf scores , and the lcas that show the best score with other molecules was selected as the representative lcas of the query molecules. since there may be too many combinations of lcas, the suboptimal combination was selected by means of genetic algorithm. figure 2d shows the lcas obtained from the two molecules c <dig> and c <dig>  there were two strings per molecule, which were not distinguishable because of the symmetry of the molecules. in this case, any one of the strings could be selected as the representative lcas.

distance-embedded common atom fingerprint 
the distance-embedded common atom fingerprint  was defined for each vertex in the molecular graphs, as described in figure 2e. this fingerprint has two attributes: distances d  and the atom strings k. first, the shortest paths among atoms were calculated using a simple width-first search . then the paths were represented as the atom string in backwards, where only the destination atom was described as the atom class. taking the two molecules in figure  <dig> as example, dekaf for the atom  <dig> of the molecule c <dig> consists of  <dig> atom strings with their occurrence numbers. distance =  <dig> means the atom  <dig> itself, for which the atom class is “c8”. distance =  <dig> refers to the 2-atom-length strings starting from the atom  <dig>  which terminate at the atoms  <dig>   <dig> and  <dig>  distance =  <dig> refers to the 3-atom-length strings from the atom  <dig>  terminating at  <dig>   <dig> and  <dig>  this procedure continued until the width-first search ends, and iterated for all atoms in the molecule.

we defined the following decaf similarity score, the similarity between atoms, based on the number of common atom strings at each length:  

where ni,k,d and nj,k,d are the numbers of atom strings k in the distance d  from the atoms i and j, respectively. two example decafs are shown in figure 2e, where the common attributes are highlighted in gray. the decaf scores between the atom  <dig> of c <dig> and the atom  <dig> of c <dig> becomes 1/ <dig> + / <dig> + / <dig> + 1/ <dig> + 1/ <dig> =  <dig> . this score was used as a basis of selecting the representative lcas. this atom-to-atom similarity scores do not have to be calculated between all possible atom pairs in all molecules; they had to be calculated only once when needed at the first time, and then stored in a hash table for the quick use next time.

extending the core chemical alignments
all atoms in lcas were represented in the form of the alignment describing the part of the core substructure. the neighboring atoms of lcas were picked out, and were grouped by the two properties: the atom species and the anchored-dmaid against lcas. the atom was discarded if there were any molecule not having the same atom in terms of the two properties. if the atom was unique in a molecule in terms of the two properties, and if the atoms having the same properties uniquely throughout all the query molecules, then the atoms were regarded to be in the core substructure and were added to the alignment. if there were some atoms in a molecule that could not be distinct in terms of the two properties, then the numbers of bonds within ring structures were taken into account. if the atoms were not still distinguished, then the atom classes were additionally considered. if the atoms were not still distinct, then the full kegg atom types were taken into consideration. in the cases where some atoms could not still be distinguished, occurring when the query molecules contained symmetry, the atoms were distinguished by the order of the numbering. in this way, after the atoms became unique in a molecule in terms of the two properties, and were found in all molecules, then the atoms were added to the core substructure. among the newly added alignment atoms, the neighboring atoms that were not yet involved in the core alignment were picked out, and the same process were iterated until there found no more atoms.

as the result of the extension of lcas, the chemical alignment  of the core substructure was obtained. if the query contains only two molecules, the calculation finished here, and output the atom-atom mapping as shown in figure 2f. if there were more molecules, the search for the branch substructures began as described in the following section.

common atom strings for the branch substructures
the branch substructures were obtained with the similar strategy as that for the core substructure. the first step was to obtain many short common atom strings  consisting of the atoms that were not involved in the core substructure, instead of the lcas for finding the core substructure. these strings were distinguished by the atom species and the anchored-dmaid against the core substructure. different from lcas, scas did not have to involve all the molecules given as a query. note that scas may involve the atom-atom mappings taken from more than two molecules. the next step was to extend the scas to obtain the common branch substructure, by the means similar to the extension stage of the lcas. the difference was that the branch alignments only contains less numbers of molecules than given in the query. the length of the scas was not pre-determined, but started from  <dig> and extended as much as it could go in a greedy fashion.

removal of the conflicting atom-atom mapping
after many scas were generated independently, there sometimes occurred the cases where different scas possessed the same atom. therefore it was necessary to remove these conflicts. the process of removing the conflicts was as follows:  atom-atom mappings  were ordered randomly.  an atom-atom mapping was picked out from the alignment, and was put in a new array.  next atom-atom mapping was picked out, and if it conflicted with the mappings that are already in the array, it was discarded. otherwise it was added to the array.  the step  <dig> was iterated until the end.  the score was defined as the total number of the atoms in the array.  the steps 1- <dig> were repeated  <dig> times and choose the array with the highest score.

RESULTS
output comparison
mucha output the text file that resembled a sequence alignment , which could be visualized on the chemical structures as shown in figure  <dig>  the metabolites in figure  <dig> are monolignol and related compounds, which are the key metabolite group for phenylpropanoids biosynthesis including lignins, lignans, flavonoids and coumarins. different colors in figure  <dig> indicate the different substructures. it was clearly shown that mucha method appropriately divided the query molecules into the substructures, whereas the naïve mulcomp failed . the naïve method did not take into account the relative distances or positions between the substructures, such as the one in the core substructure  and the one in the sugar residues , which resulted in the misalignment of the sugar residue in the different positions. the symmetry around the benzene ring  caused another problem in the naïve method. many molecules have more than one atoms that are not distinguishable because of the symmetry. when conducting pairwise chemical alignments, these atoms do not have to be distinct. since the naïve mulcomp method iterated the independent pairwise alignments, these atoms were mapped without considering the consistency with the other pairwise alignments. as the result, the naïve method failed to obtain the core structure. the proposed mucha method did not conduct the alignment in a pairwise fashion but focusing on finding the core substructure at first, resulting in the better alignment that were consistent throughout all the molecules given as the query. another advantage of the proposed method was that it discriminated the branch substructures that had the same chemical structure but are attached in different positions, which could not be achieved by simply applying the frequent subgraph mining technique.

mapping the branch substructures to pathway
we also found that the alignment obtained by mucha correlated well to each reaction step in the metabolic pathway. figure  <dig> shows an example pathway colored in accordance with the colors in the branch substructures in figure  <dig>  this pathway contains some transferase reactions, where the transferred groups  were consistent with the branch substructures. it was clearly shown that the branch substructures in the same position were transferred at the similar position in the grid-shaped pathway. these results suggest that the mucha alignment gives valuable information to reconstruct metabolic pathways when applied to orphan metabolites.

performance evaluation and comparison
performance of the two methods has been evaluated in terms of speed  and quality . the comparison experiment was performed as following. a number of secondary metabolites were retrieved from the kegg compound database, and were classified into  <dig> groups by the kegg brite hierarchical classification. from the obtained metabolite groups, the molecules that have less than  <dig>  simcomp similarity score against all other molecules were removed. the resulted molecules contained  <dig>  vertices in the kcf representation, corresponding to about  <dig>  atoms including hydrogen in average. multiple chemical alignments by mucha and mulcomp were calculated for different numbers of molecules randomly selected from the metabolite groups.

in figures  <dig>  the horizontal axis represent the numbers of molecules in a query, and the vertical axis represent the computational amount in seconds. in figures  <dig>  the horizontal axes are the same as in the previous figures, but the vertical axes are the relative alignment sizes, which means the size of the core substructure in the multiple alignment divided by the average alignment size of the independent simcomp alignments. the comparison was also represented in figure  <dig>  where each dot represents the average performances for each metabolite group. in this figure, the relative computational time in the horizontal axis means the average computational time by mucha divided by that of mulcomp. similarly, the relative alignment size in the vertical axis means the average core alignment size calculated by mucha divided by that of mulcomp.

as shown in figures  <dig>  runtimes of both methods increased according to the numbers of molecules to be aligned. mulcomp ran stable in terms of the minimum runtime, although some calculations exceptionally took much time. on the other hand, the runtime of mucha was not stable: i.e., it varied depending on the metabolite group . the runtime of mucha was generally less than that of mulcomp. this runtime may be comparable or a little better than the work by fober et al., resulted in about  <dig>  seconds to calculate multiple chemical alignment of  <dig> compounds consisting of 48- <dig> atoms in average  <cit>  . additionally, figures  <dig> clearly demonstrate the difference in finding the core substructure. the sizes of the obtained core substructures were relatively stable in mucha, whereas they were not in mulcomp. there were some metabolite groups that showed less performance than mulcomp in terms of computational time or the core alignment size. however, as a whole, our results indicated that mucha alignments showed favorable in finding metabolic building blocks in many metabolite groups .

discussion
the simcomp pairwise chemical alignment method was optimized to find a small number of as large as possible substructures, rather than finding a large number of relatively small common substructures. therefore, simply combining the pairwise chemical alignment results was not efficient for multiple alignment in both terms of computational amount and quality. in this study, the mucha method was designed for the multiple chemical alignment, and showed relatively high performance compared with the naïve extension of the pairwise alignments. apparent performance trade-off exists in some stages, such as the definition of the decaf score similarity, the genetic algorithm when choosing the representative lcas, and removing conflicting atom-atom mappings at the end of the alignment. optimization of these remains to be further argued, although the algorithms and parameters in this work produced reasonable results upon manual inspection.

the performance of the multiple chemical alignment depended upon the choice of the query molecules. as shown in figure  <dig>  it has been shown that mucha did not show better performance in some molecule groups such as sesquiterpenoids, whose chemical structures are highly diverse. if the structures of the given molecules were too diverse, then there would be no common substructures, or the program ended up finding inadequate substructures. in fact, this has been also a problem occurring in the multiple sequence alignment methods. as it is important to exclude the sequences that are not evolutionary close when conducting multiple sequence alignments, it is important to exclude the molecules that are not structurally close when conducting multiple chemical alignments. multiple sequence alignment has a long history, and many researchers have dealt with this problem. this will be one of the problems to solve to better use the multiple chemical alignment.

although the method to collect the appropriate set of metabolites still remains to be solved, mucha had the strength in finding the building blocks for the metabolites that are appropriately collected in advance. the naïve multiple alignment method had to compare the global chemical structures n  /  <dig> times  based on the time-consuming clique-finding technique, whereas the mucha only needed to compare the local chemical structures by the quick check of the differences among the decaf vectors, which had been pre-calculated based on the quick width-first search. local features of graphs can be described by paths or walks   <cit> , however, calculation to obtain all random walks consume large computational amount. in this paper, we demonstrated the usefulness of the decaf similarity scores as the alternatives that can be quickly calculated. one can also easily imagine that the pairwise alignment-based approach would meet the combinatorial explosion with the increasing number of the query molecules, and would also meet the difficulty in keeping the consistency among the pairwise alignments. mucha method effectively dealt with these problems by applying the lcas strategy: the more molecules are given as the query, the less the number of the common atom strings become.

it should be noted that we have to be careful when interpreting the alignment result of orphan metabolites for the metabolic pathway prediction, since the obtained substructures may vary depending on the numbers of the molecules in a query. for example, figures  <dig> and  <dig> show the alignments obtained from the different numbers of the molecules in the same group of the secondary metabolites. whilst some substructures are the same in these two figures, the substructures of o-methyl groups were divided differently. looking only at figure  <dig>  one might think that the o-methyl groups are possibly added to the benzene rings in a single reaction, however, such an enzyme reaction was not found in the kegg database nor the iubmb's enzyme list. it is more natural that a hydroxy group is induced in the benzene ring first, followed by the methylation. this knowledge is consistent with the result shown in figure  <dig>  where the oxygen atoms and the methyl carbons belong to the separate substructures. this knowledge regarding to the reaction patterns have not been implemented in mucha but has implemented in many methods for the metabolic pathway prediction such as e-zyme  <cit> , umpps  <cit> , grep  <cit>  and pathpred  <cit> . thus we propose that mucha and the other methods could complement each other to improve the pathway prediction.

CONCLUSIONS
we provided the method to divide a given set of many molecules into some substructures with descriminating the positions, which has the potential to help automatically classify the metabolites based on the possible origin pathways. the continuous improvement of this method could lead to the reduction of the computational amount when predicting the metabolic pathway, filling the gaps between the metabolomics studies and other omics including genomics, transcriptomics and proteomics.

competing interests
none declared.

authors' contributions
mko conceived of the study, designed the algorithm, tested the performance and drafted the manuscript. tt helped the manual inspection of the output results and designed the algorithm. mka participated in the design of the study. sg helped to design the algorithm and application, and to draft the manuscript. all authors read and approved the final manuscript.

