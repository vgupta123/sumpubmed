BACKGROUND
one of the key challenges in the biosciences is finding hidden or buried information in biological networks. one of the main approaches to this challenge is to apply data analysis and clustering tools, and to visualize the results, usually in two-dimensional  graphs. some of the most prominent visualization tools are cytoscape  <cit> , osprey  <cit> , medusa  <cit> , proviz  <cit> , cnplot  <cit> . ondex  <cit> , mapman  <cit> , pajek  <cit>  and shark  <cit> , biolayout express3d  <cit> .

several of these tools provide easy connection to, or import from, commonly used external data analysis and clustering tools, such as mega  <cit>  or hierarchical clustering explorer  <cit> . furthermore, some visualization tools, such as pajek  <cit> , have analysis methods built in. we believe that tight integration of analysis and visualization is a key feature for such tools, since it allows users to experiment, to immediately see the results of analysis, and hence to quickly decide which analyses are most appropriate.

a major difficulty for these visualization tools is dealing with increasing complexity as the number of entities increases. after a certain number of nodes and edges – several hundreds or thousands – the graph becomes incomprehensible. as the biological databases grow, it is becoming increasingly apparent that the complexity of most biological process and systems simply overwhelms most graph visualization methods.

one possible solution to this problem is to visualize networks in three dimensions  – a graph that is convoluted in 2d can sometimes be simplified when the same data is represented in 3d, primarily because graph vertices are much less likely to intersect in 3d. however, there are some disadvantages of 3d visualization – firstly, it can be computationally demanding; secondly, navigation in 3d requires a more complex user interface that can be difficult to learn.

in this paper, we introduce a new layer concept that can take advantage of the strength of both 2d and 3d representation; this concept has been implemented in a new visualization system, arena3d. arena3d allows users to take a large dataset and divide it into a series of simpler 2d graphs, each of which can be easier to comprehend, compared with all data on one 2d graph, or all data in 3d space. separating these layers in 3d allows more 'space' for the vertices between layers, hence avoiding the overlap and intersection that occurs in 2d, and allowing visualization of a larger number of points.

in addition, arena3d goes further than most visualization tools in integrating many different kinds of analysis methods directly with visualization. our goal with arena3d is to make it easier to explore and discover hidden relationships in larger, more complex data sets.

methods
implementation and requirements
the core graphics visualization in arena3d was done using java 3d . all other parts of arena3d, including clustering methods and the graphical user interface, were done using java .

to provide fast 3d interaction and navigation, we recommend using a graphics card with hardware-accelerated 3d graphics and at least  <dig> mb of graphical memory. additionally, we recommend at least 1gb of ram memory for medium to large networks, especially when using clustering methods. prior to installing arena3d, the user should first install the java runtime environment  and java3d . for macintosh computers, jogl  should also be installed. the software is freely available for non-commercial use at . users can download the software or run it directly from the web page using java web start. also available at this site are the huntingtin-related datasets presented in this work.

3d graphics and graphical user interface gui
arena3d is highly interactive and incorporates many features that can be applied either to the whole network representation, to specific layers, or to individual nodes. we used the simpleuniverse class to create a java3d universe that implements standard gui operations, e.g., default mouse operations, and 3d navigation such as zooming in/out, rotation, and translation.

by default, simpleuniverse operations apply to the whole java3d scene – in addition, we used the java3d vecmath library to implement transformations  for individual objects, such as nodes, labels, and layers. since these calculations are done by the graphical processing unit, these operations are fast. arena3d allows the user to change the order, location, and orientation of individual layers. furthermore the layer size can be adjusted and nodes can be moved anywhere on the plane of the layer they belong to. the user can save to file the entire state of the network, including all variables . previous states can then be restored by reloading these files.

to enable users to hide layers, nodes, labels, or connections, we used the java3d concept of branch groups and switches. switches were used to control whether the branch groups below that switch are visible or not. the branch groups also have the attributes to delete or create individual scene objects below them on the fly.

we implemented a jtext component that allows the user to select nodes by name or using regular expressions. in addition, we enabled users to select nodes graphically by making the scene canvas selectable so that some mouse events can pick the geometry of the objects.

furthermore we implemented some additional functionality that can make networks easier to understand. for example, we implemented a connection filter that enables users to first select a group of nodes, and then extend the selection to all nodes connected to the first selection. in addition, by simply clicking on a node or connection, the user is shown statistics and further information about that object. finally, each node or edge can be linked to a user-defined url . for nodes with no assigned url, the google touchgraph browser can be automatically launched to try to recognize the node based on its name.

data representation
in arena3d, we initially arrange data in multilayered graphs in 3d, where the data are separated into different data types, one type per layer. each layer can be moved or rotated freely in 3d space. for each node, the user can specify a connection to any other node. this connection may represent a similarity measure, such as sequence similarity for genes and proteins; it could represent experimental measurements  or tanimoto similarity  <cit>  for chemicals. the connection weight could also indicate the reliability of a connection  <cit> . arena3d currently supports undirected weighted graphs, where the thickness of the lines can be adjusted according to the connection weight or similarity measure. currently arena3d can accept only one type of connection between two nodes. in the future we are planning to support multi-edge connections.

layout algorithms
we implemented several simple layout algorithms to distribute the nodes on each layer; for example, nodes can be distributed randomly, on a 2d grid, spherically, or on a circle. these simple layouts do not depend on connections or similarity measures between entities, and hence can be applied to all data points on a layer.

furthermore, we implemented two force-directed methods. the first is fruchterman-reingold  <cit> , which defines the coordinates of individual objects in such a way that it minimizes the crossovers between the connections of nodes that belong to the same layer, and also it can minimize the overlaps between these nodes. the second force-directed method is based on distance geometry  <cit> , which is appropriate when the complete distance matrix of similarities is known between all entities in one layer, unlike fruchterman-reingold, which only requires a subset of the distance matrix to be known. fruchterman-reingold is best applied to data where connectivity between nodes is relatively spare and indicates an important relationship between the entities; in contrast, distance geometry is more applicable in situations where connectivity data is generated automatically from an all-against-all comparison, e.g. from sequence or tanimoto similarity scores. thus, fruchterman-reingold tends to place the hubs  in the middle of the layer, whereas in distance geometry, all points are connected, and the layout tends to places together nodes that are connected by close similarity scores.

in addition we developed a third novel layout algorithm that distributes the nodes in a hierarchy depending on the connections. the algorithm assigns weights to the nodes in such a way that it ranks them and separates them in different levels forming a tree-like structure. the algorithm is fast and the resulting layout is aesthetic and informative, since it minimizes the number of crossovers. it is also suitable for visualizing any kind of hierarchical or tree-like data such as gene ontology. for example, a user can use arena3d to visualize gene ontology  <cit>  clusters produced by the posoc  <cit>  software. an example of hierarchical layout is shown in figure 1c and figure  <dig> 

clustering algorithms
in arena3d, we make a distinction between layout and clustering algorithms – clustering algorithms are layout methods that organize data into a distinct number of clusters. in arena3d we implemented the following clustering algorithms: k-means  <cit> , affinity propagation algorithm  <cit>  and markov clustering  <cit> .

in the case of the k-means, the number of clusters needs to be defined by the user, whereas the other two algorithms define the number of clusters automatically based on the data. after the data has been clustered, each node will be unambiguously coloured and identified as belonging to a one of the clusters. affinity propagation and markov clustering do not need the whole similarity matrix; hence they are especially applicable to sparse graphs. for dataset up to several thousand connections, clustering is usually fast  – however for larger sets, clustering may require considerable time or memory. users should be aware that, in the current implementation, affinity propagation is very stable, but is significantly slower and requires more memory than k-means or markov clustering. markov clustering is fast, but tends to split the data into many clusters. k-means is usually the fastest, but is very sensitive to the number of clusters that the user specifies.

tree clustering algorithms
in addition to the above clustering methods, we implemented the following tree-based clustering algorithms: single linkage hierarchical clustering – hcl  <cit> , neighbour joining-nj  <cit> , and unweighted pair group method with arithmetic mean – upgma  <cit> . in each case, the user needs to provide an all-against-all similarity matrix in the input file to hold every pair-wise similarity between the nodes.

in arena3d we implemented a method to draw tree hierarchies on each layer. we also implemented a method that allows users to graphically adjust the threshold value that determines the final number of clusters that are used to paint the leaf nodes in the tree. different tree-based clustering methods can be applied to different layers .

clustering between layers
to simplify the appearance of the whole network, we developed a method to minimize the number of intersections between inter-layer connections. our current approach is to apply the clustering method  to the whole network. effectively, we cluster all points onto a single layer, and then separate the layers after the clustering. nodes that occur in the same cluster, but which are on different layers will then occur on top of the other and will have the same colour scheme.

in any case we used a novel algorithm based on cubicbeziersegments to produce a set of contradictory colours between each other to paint the clusters

finding indirect connections
very often in biological networks, important information is hidden or not easy to detect. to overcome this problem we developed some extra functionality to extract indirect connections using triplets. arena3d can suggest new relationships by revealing indirect connections between pairs of nodes that are indirectly connected through a third intermediate node. the main idea is to extract hidden direct and indirect biological relationships, identify heterogeneous relationships, then to modify their appearance so the user can see immediately which data are selected. e.g., suppose that node a is directly connected with node b and node b is directly connected with node c, then there is an indirect connection between nodes a and c. for example, the indirect connection between fish oil and raynaud's syndrome has been extracted via the intermediate nodes of a network that contained chemicals, phenotypes and diseases  <cit> . the indirect connection was found via common terms extracted with the help of text mining techniques. the link was made by finding common terms, such as blood viscosity. indirect connections detected by arena3d can be saved in a text file as a list of connections.

layer mapping
another feature in arena3d is the ability to map from one knowledge layer to all the others. for example, the user can select a group of nodes on one layer, and arena3d can automatically highlight all nodes on the other layers that are connected to the selected nodes. if a node is connected to more than one of the selected nodes, it is highlighted differently; this effectively shows the 'expression profile' of each selected node, and allows the user to more easily detect overlaps and intersections between the different data sets.

compatibility with other tools
we developed arena3d to work together with several other visualization tools; the entire network or graph can be exported to medusa  <cit>  for 3d representations, pajek  <cit>  for further mathematical analysis, or vrml format. data that have been clustered using the tree-based algorithms in arena3d can be exported to new hampshire format  <cit> . this makes arena3d compatible with a wide variety of tools for tree visualization like for example itol  <cit> .

bioinformatics data mining
in the results section  we used several sample datasets that were constructed using the following sources: srs  <cit>  was used for mapping connections between different databases, the string database  <cit>  for finding protein-protein interactions, omim for disease information, pdb for structure information  <cit> , go for the gene ontology information  <cit> .

RESULTS
arena3d is a highly interactive, 3d visualization system – to illustrate the value of such a system, it is clearly not optimal to use only static 2d images. in this section, we present several relatively small datasets that illustrate how arena3d can be used to gain insight into biological networks; however we refer interested readers to , where they can download the program together with several example datasets.

in figure 1a we show how arena3d can be used to illustrate the results of a query across multiple databases. in this case, we start the query from huntington's disease, and we show the nine most strongly associated genes listed in the string database. these genes are then shown linked to  <dig> proteins on the next layer, where we indicate how one gene  has two variants – mutant and wild type huntingtin. on the next layer, we have shown all known 3d structures  that are linked to these proteins. one of these proteins, p <dig>  is linked to over half of these structures, indicating that a lot of 3d information is available for this protein. in contrast, other proteins, including huntingtin, are not associated with any known 3d structure. the graph shows one 'hidden' feature that was of interest and was not known to us before creating this view: two of the proteins associated with huntingtin – p <dig> and creb-bp – occur in the same pdb file. this means that the 3d structure of the complex of these two proteins is known.

in figure 1b, we show a slightly more complex network – this time starting from nine polyq-related diseases, including huntingtin. each of these diseases is associated with a polyq protein, and from the string database we have found  <dig> proteins associated with these proteins.

on the second layer we use affinity propagation to cluster these proteins. the graph reveals several interesting and hidden features, namely that six proteins associated with huntingtin are also associated with other polyq disease proteins: they are: tbp , atn <dig> , atxn <dig> , atxn <dig> , cacna1a , and pqbp <dig> .

on the final layer we have mapped all  <dig> domains present in the  <dig> proteins, and we have highlighted eight domains that are present in these six proteins shared with huntingtin and other polyq diseases. this highlighting reveals another interesting hidden feature: two domains are common in two diseases: ww is present in both itch  and pqbp <dig> , and the atrophin domain is present in both atn <dig> , and rere .

in figure 1c, we show the nine proteins associated with huntingtin mapped onto the sub-cellular location hierarchy in go. the view is generated by finding all go location terms in the corresponding uniprot  <cit>  files, finding the related go hierarchy using posoc  <cit> , and using the hierarchical and circular layout methods in arena3d. as an example for how a user would navigate through such a complex view, we have coloured terms in the go hierarchy that are directly related to the protein rasa <dig> – from this we see that this protein is located in protein complexes, in the apoptosome, the telomeric regions of the chromosome, and in dendrites.

finally, figure  <dig> shows a 'full blown' illustration of how a user could work with arena3d in practice to explore complex, large datasets. the scenario illustrated shows again the nine proteins associated with huntingtin. in this case the rasa <dig> protein is selected, and its go terms are shown together with the go hierarchy, this time using a planar layout. for illustration, we have shown the proteins mapped onto a group of  <dig> related chemicals clustered via affinity propagation using tanimoto similarity. the chemicals are also shown clustered using a tree method. in this case, to simplify the graph, connections between the tree layer and others layers have been hidden by arena3d.

CONCLUSIONS
in this article we presented a powerful new tool for comprehensive visualization and exploration of large scale, complex networks. arena3d combines a novel 3d layer concept, with many layout and clustering algorithms, novel data filtering methods, flexible colour schemes, and compatibility with many existing tools. we demonstrated the functionality of arena3d using data sets related to huntington disease due to simplicity reasons. however arena3d is able to handle large scale networks with hundreds of nodes with thousands of connections.

discussion
future work will focus on improving usability and improving the integration with data sources and web services. we also plan to support standard formats, such as smbl  <cit>  or psi-mi  <cit> . in addition, we plan several extensions, such as allowing multi-edge connections, directed edges, and further clustering method that minimize overlap between edges from different layers. once directed edges can be visualized, arena3d could then be used to represent signal transduction networks, e.g. separating different sub-cellular compartments into different layers. the strength of a tool greatly depends on the layout algorithms it can employ to make pattern easily detectable. extension of existing layout algorithms in 3d and enrichment with new ones will be a future step.

authors' contributions
gap was the main developer of the tool. sio'd wrote the draft of the article and suggested hd related data to demonstrate the functionality of the tool. vps as an srs administrator helped with the collection of the data for the publication. tgs was involved in the development of affinity propagation clustering algorithm in java. ep helped with the implementation of the gui. rs had the initial idea of the multi-layered concept of arena3d and he was the main supervisor of this project.

