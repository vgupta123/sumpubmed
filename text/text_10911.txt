BACKGROUND
trellis graphics are a visualization method that splits data by one or more conditional variables, displays subsets of the data in parallel panels and arranges the panels in a grid-style   <cit> . each panel contains the same type of graphics, and thus the trellis graphics enable direct comparison of the same statistics over different categories. trellis graphics have broad applications in genomic data analysis. for example, chromosomes can be used as categorical variable to divide the genome in a natural manner. visualizing read coverage from whole genome sequencing data by means of trellis graphics gives a clear overview of large-scale genomic alteration  <cit> .

in the r programming environment, for example the lattice  <cit>  and ggplot <dig>  <cit>  packages provide rich functionality for making trellis graphics. however, efficient visualization of genomic data in trellis graphics requires the following functionalities which are, to our knowledge, in this combination not provided by any currently available package. first, in standard trellis graphics, all panels have the same width. when mapping panels to chromosomes, short chromosomes are extended with empty areas, which makes usage of the plotting space inefficient. thus layouts with more flexible panel width are required for genomic data visualization. second, genomic data is multi-dimensional and it is often necessary to visualize several data tracks simultaneously to facilitate the identification of correlations between different types of information. third, genome data analysis can greatly benefit from highly specialized visualizations which require that the user can easily add user-defined graphic elements to the panels.

here, we present the gtrellis package which provides a flexible and efficient way to arrange genomic categories as trellis layout. the flexible layouts supported by gtrellis ensure efficient use of plotting space so that the areas for genomic categories are larger and more details can be observed compared to standard trellis layout. the package supports multiple-track visualization, which makes it easy to explain genomic data from different aspects. gtrellis provides an extensible framework that allows the addition of user-defined graphics to the panels. based on this feature, the possible visualizations are not restricted by the package itself and the package can serve as a base that can be extended for genomic analyses with highly specific purposes. in this paper, we give a detailed explanation of the functionality provided by gtrellis and demonstrate the power of the package with two real-world examples. we believe that gtrellis can greatly help to visualize genomic data more efficiently and thus to discover previously unrecognized patterns in genomic data.

implementation
gtrellis abstracts the generation of trellis graphics into two independent steps: i) creation of the global layout; and ii) adding graphics to the panels afterwards.

creation of global layout
gtrellis provides a simple and flexible way to initialize the global trellis layout. in the initialization step, panels corresponding to genomic categories are allocated to proper positions in the plotting area. positions and style of the trellis layout can be adjusted either as traditional style or as an improved style for efficient genome data visualization. figure  <dig> illustrates several styles for the global layout that can be produced by gtrellis. to make a clear comparison between different layout styles, two long chromosomes  and two short chromosomes  are selected. figure 1a is the default style in which all chromosomes are arranged in one row in karyotypic order, and the panel width is proportional to each chromosome’s length. such one-row style layout is broadly used by a lot of packages that focus on genomic data analysis . however, the drawback is that with increasing number of chromosome, the plotting region for each chromosome will shrink, limiting the possible resolution of visualized features. figure 1b illustrates a standard trellis layout. it is obvious that there are huge empty areas in the panels of chromosome  <dig> and  <dig>  which makes the layout inefficient. in fig. 1c, the traditional trellis layout is improved so that chromosomes with similar length are put in the same column, resulting in a much better usage of plotting space compared to fig. 1a and b.fig.  <dig> different layout styles by gtrellis.
a default style with all chromosomes sorted in karyotypic order and arranged in one row;  standard trellis layout in which all panels have the same width;  optimized layout which arranges chromosomes with similar length into the same column;  layouts for parallel visualization of three data tracks with chromosomes arranged in one row  or two rows ;  non-rectangular layout without vertical alignment of panels in different rows for compact arrangement of chromosomes. in each panel, red rectangles represent the length of the corresponding chromosomes



to support the identification of correlations in genomic data, gtrellis allows creating multiple tracks for each genomic category. in each track, one specific type of information is displayed. figure 1d and e show layouts with three tracks for each chromosome, arranging the chromosomes in either one or two rows.

finally, gtrellis supports a non-rectangular layout that compactly arranges chromosomes without alignment of panels between different rows . this layout makes highly efficient use of the plotting space, but loses the direct comparability of positions for different categories across rows.

in most cases, chromosomes are used as the category variable when making genome-level plots. however, gtrellis supports more general genomic categories by specifying a list of background regions. additional file  <dig> illustrates transcript models for three genes  by taking gene as the genomic category, and arranges them in two types of trellis layout.

adding graphics
after initialization of the layout, each panel in one specific track and one specific genomic category serves as an independent plotting region. graphics can be added into the panel afterwards. gtrellis opens an application programming interface  that allows users to customize their own graphics and put it into each panel. this type of design enhances the flexibility of the package greatly, because the types of graphics that can be plotted are not restricted by the package itself. in gtrellis, the add_track() function adds graphics to one track in batch mode, and sequential calling of add_track() adds graphics to multiple tracks. add_track() receives a panel_fun argument which is a user-defined function to be applied to every panel. the input genomic data for the panel function is either a data frame or a granges object which covers most of the formats used in genomic data analysis. when add_track() is executed, the panel function iterates over all genomic categories and automatically extracts the subset of data which belongs to the current genomic category for the panel. the following code gives an example for adding points in one track.



add_track() can also be applied to an individual panel by specifying the index of the corresponding category and track. this allows customization of specific panels in the plot.



in order to simplify customization of the track, gtrellis provides the following five functions add_points_track(), add_lines_track(), add_rect_track(), add_segments_track() and add_heatmap_track(). these functions add commonly used graphic elements to the track without the need to define an own panel function.

since layout creation and adding graphics are two independent steps in gtrellis, different layouts can be used without changes in the code which is used for adding graphics . this strategy results in modular, flexible and reusable plotting code.

RESULTS
comparison to other packages
gtrellis has been specifically designed for effective visualization of genomic data. while several existing packages provide functionalities to generate trellis graphics, none of them can fulfil all particular requirements of genomic data visualization. table  <dig> shows a comparison between existing packages and gtrellis with respect to these functionalities. ggplot <dig> and lattice are able to arrange genomic categories  into different panels as a standard trellis layout. however, each panel has the same width, so that short chromosomes are extended by empty space. ggbio  <cit>  supports a layout with panel width proportional to the chromosome length when making a manhattan plot. the limitation is, however, that all chromosomes can only be put in the same row. in standard figure formats this results in small plotting regions per chromosome, meaning that several patterns may remain invisible . lattice can be enhanced by latticeextra  <cit>  to support unequal panel width, but as discussed later, it does not support multiple-track visualization. in contrast, gtrellis provides efficient layouts to arrange chromosomes on the page, including a unique layout that arranges the chromosomes in one row compactly  to maximize the utilization of the plotting space. gviz  <cit>  is generally designed to visualize smaller genomic regions. with the grid graphic system, it is possible to arrange multiple regions into one page through gviz, but there are several limitations: 1) the y-axes are repeated in all sub-plots which is unnecessary; 2) scales on the x-axes are not consistent in sub-plots which aggravates comparisons across sub-plots, and the panel widths for all sub-plots are identical regardless of the lengths of the corresponding regions, which results in different scales and makes it difficult to compare regions directly. multiple track visualization greatly helps to identify correlations between different sources of information. it is well supported by gtrellis, while ggplot <dig> and lattice do not support multiple-track visualization. gviz and ggbio can integrate multiple sources of information for a single genomic region, but not for chromosome- or genome-wide visualizations. finally, gtrellis provides an open api to allow user-defined graphics, while ggplot <dig>  lattice, and gviz only provide fixed types of graphics without simple methods for further customization.table  <dig> comparison of functionalities for genomic data visualization between gtrellis and existing packages

ggplot2
lattice
gviz
ggbio
gtrellis


example applications
in this section we provide two examples that demonstrate the extensibility and power of gtrellis to effectively visualize different types of genomic data and reveal relations between different sources of information. furthermore, additional file  <dig> demonstrates how enhanced manhattan plots can reveal patterns in the distribution of significant snps in the genome.

the first example  illustrates the distribution of genomic regions which are differentially methylated  in burkitt lymphomas compared to germinal center b cells  <cit> . a dmr is a genomic interval in which methylation levels at cpg sites are significantly different between disease and control samples. a dmr is designated hyper-methylated if the methylation is higher in disease than in control samples and hypo-methylated if the methylation is lower in disease samples.fig.  <dig> visualizing differentially methylated regions. differentially methylated regions  between burkitt lymphomas and germinal center-derived b-cells are illustrated in rainfall plots to visualize the genomic distribution and identify localized clusters. there are five tracks for each chromosome :  chromosome names;  rainfall plots for both hyper-methylated dmrs and hypo-methylated dmrs;  genomic density for hyper-methylated dmrs;  genomic density for hypo-methylated dmrs; and  ideograms



in fig.  <dig>  rainfall plots are used to visualize the distribution of dmrs in the genome. rainfall plots are particularly useful to identify clusters of dmrs. in the rainfall plot, each dot represents a dmr. the x-axis corresponds to the genomic coordinate, and the y-axis corresponds to the minimal distance  of the dmr to its two neighbouring dmrs. a cluster of dmrs will appear as a “rainfall” in the plot. however, if the amount of dmrs in a cluster is high, dots will overlap, and direct assessment of the number and density of dmrs in the cluster will be impossible. to overcome this limitation, additional tracks are added which visualize the genomic density of dmrs , separated into tracks for hyper- and hypo-methylated dmrs . it becomes apparent that both hyper- and hypo-methylated dmrs form clusters throughout the genome, and that the genomic density of hypo-methylated clusters is considerably higher than the genomic density of hyper-methylated clusters. finally, a track with chromosome names and a track that contains ideograms to help to localize dmr clusters on the chromosomes are added. the source code to generate fig.  <dig> can be found in additional file  <dig> 

the second example  shows conservation between the human genome and  <dig> other species  <cit> . the human genome is segmented into 2 mb windows and the fraction of each window that that can be aligned to the genome of the respective species is calculated. the  <dig> species are categorized into primates , placentals  and vertebrates , and each category is visualized as a single track. in each track, the order of species is calculated by hierarchical clustering of the fraction values from all chromosomes. chromosomes are arranged in a non-rectangular layout for most efficient plotting space utilization, and fraction values are displayed as heatmap. figure  <dig> clearly reveals different patterns of conservation between the human genome and the other species. source code to generate fig.  <dig> can be found at additional file  <dig> fig.  <dig> visualizing genomic conservation between human and  <dig> other species. there are five tracks for each chromosome :  chromosome names;  primates;  placentals;  vertebrates; and  ideograms. the human genome has been divided into 2 mb windows, and for each window the fraction that can be aligned to the corresponding species is plotted as heatmap. the compact non-rectangular layout has been chosen to optimize plotting space utilization for the genome-wide visualization



CONCLUSIONS
the gtrellis package provides easy and flexible methods for producing trellis graphics that effectively visualize genomic data. the separation of layout creation and adding of graphics provides a modular way for users to design their plots. the capability to plot multiple tracks greatly enhances the visualization of multi-dimensional genomic data and improves the detection of patterns and correlations within the data.

availability and requirements
project name:gtrellis.

project home page:http://www.bioconductor.org/packages/devel/bioc/html/gtrellis.html.

operation systems: platform independent.

programming language: r .

license: gpl .

restrictions to use by non-academics: none.

additional files
additional file 1: visualization of multiple transcripts for tp <dig>  tp <dig> and tp <dig>  

additional file 2: enhanced manhattan plot. 

additional file 3: data and source code for producing figs.  <dig> and  <dig>  



abbreviations
apiapplication programming interface

dmrdifferentially methylated region

competing interests

the authors declare that they have no competing interests.

authors’ contributions

zg implemented the package and drafted the manuscript. re and ms revised the manuscript. all authors have read and approved the final manuscript.

