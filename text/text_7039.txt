BACKGROUND
biological databanks today offer a huge amount of information concerning dna, proteins and other kinds of biological issues. paradoxically, this sets a problem to biologists who want to discover as much information as possible about a specific topic. in the early 80's, when the first biological databank was built , the small amount of data available made it possible to browse all those related to a user query. today the situation is quite different both in terms of size of the available biological data and the amount of meta-information associated to them – like molecular functions, biological processes or cellular components involved with genes or proteins. the risk is that biologists may miss the relevant information present in a databank when performing their searches because of the possibly large amount of results returned by a user query. this may force the biologist to manually, and thus impractically, scan those results or exploit tools – like go  <cit>  and ncbi entrez  <cit>  – in order to isolate the interesting entries for further and direct analysis.

this context reminds us of a similar field: the web. third-generation search engines are currently providing new tools to better and better satisfy the "user needs": personalization , user behavior profiling , query term suggestion , are just a few of them. web-results clustering is another approach that has been recently introduced to help users in their difficult retrieval task. it has been pioneered by northernlight  and then recently made famous by vivisimo. the efficiency of the technology has been recognized with the "best meta-search engine award" from  <dig> to  <dig> by seachenginewatch. last year, dogpilewas voted as the most innovative ir-tool; dogpile has been granted licence to vivisimotechnology  <cit> . the basic idea is that the results returned by a search engine are clustered into a hierarchy of folders which are labeled with intelligible sentences capturing the "theme" of the results contained in them. users can therefore navigate through the folder hierarchy driven by the "need" behind their query. in this way users are not limited to look at the first ten results , but they can immediately acquire several points of view on a larger set of them and thus narrow their search by clicking on some folders, or mine new knowledge by looking at the folder labels. these nice features have driven some authors to say that "clustering technology is the pagerank of the future", and several papers have been published on this subject .

the web shows some analogies and some obvious differences with the biological databanks mentioned before. the amount of data available, and usually returned by a  search engine, is beyond any user ability to manually browse it. also, any user has a "search need" which, especially in the biological context, is informative and thus aims at finding not only results matching the user query, but also at discovering relationships or properties among them. as far as differences are concerned, biological data are meta-tagged, structured and of high-quality since the meta-information comes from human experts; conversely the web is unstructured, highly heterogeneous and its pages have usually poor quality. this makes the bio-search task potentially easier, or symmetrically, this should drive biologists to aim for more powerful search/mining tools.

in this paper we propose a new software system, called thebioprompt-box , whose main goal is to pioneer the use of clustering technology on biological data in order to make the search task of biologists easier, more effective and more efficient.

the bioprompt-box: concepts and architecture
even if bpbis designed to manage any biological database, at present it has been restricted on uniprot only, because of two main reasons: uniprot has a relative small size, which makes it easier to be managed at a prototype level, like bpbis; uniprot entries are supervised by humans, thus conferring them a high quality. bpbdefines a document as a structured list of fields: one field contains an aminoacidic or nucleotidic sequence, all other fields contain the meta-data associated to this sequence accordingly to the underneath databank . these fields can be of two types:

 <dig>  references to data contained in others databanks ,

 <dig>  texts consisting, for example, of information about the organism and its taxonomy lineage, the submitters comments or the set of keywords characterizing the sequence itself.

to improve the recall of the search phase, every references to go is also expanded into its plain description at indexing time. this means that each bpbdocument will has both the references to go both the texts  of the referred go terms. this way the biologist can search for documents using terms featuring a family of go elements instead of asking for a specific go term. to achieve this result, at indexing time bpbuse a local instance of go. this is just one of the multiple way to improve the recall of the search phase. others references  can be resolved at indexed time and the referred data can be associated to the document. these strategies can be easily added to the indexing process of bpband may be part of a future release.

as an example of fields forming a bpbdocument, we report the following:

• entry_sequence: the sequence 

• keyword_text: a keyword associated to the sequence

• protein_name: the name of the protein 

• organism_name_scientific: the scientific name of the organism

• organism_name_common: the common name of the organism 

• entry_comment: a textual comment about this sequence

• go_term: a reference to gene ontology

• organism_taxonomy: taxonomy lineage of the organism

• citation_title: the title of the cited paper

• document_superfield: the content of all other fields merged together. the goal is to allow an effective search simultaneously over all fields, by taking advantage of the indexing tool we adopt .

some of these fields can be present more than once in a document to allow multi-value content.

bpb has been designed to be a scalable, full-featured and extensible search and clustering engine. it is written entirely in java and structured as a typical 3-tier web application. as any other search engine, bpbfeatures two main phases: indexing and querying. in the former phase, bpbbuilds on disk the data structures used to subsequently support fast user searches over the indexed  documents. as mentioned before, the meta-data present in the indexed documents consist of a dump of the uniprot databank . together with the descriptions of the referred go terms resolved exploiting a local running version of the ontology . periodical rebuilds are therefore needed to keep the bpbindex up-to-date. the indexing task is performed by means of two well-known software libraries that guarantee efficiency and scalability: apache lucene  <cit> , a high-performance and open-source text search engine, and apache commons digester  <cit> , a library for processing xml data .

at query time the bpbindex can be deployed to retrieve a candidate set of documents satisfying a user query. a query may be formulated in two ways:  as a set of keywords to be searched in any or all textual fields constituting the structured document , or  as a specific protein sequence to be matched for homology using the blast algorithm over the field entry_sequence . the resulting set of documents satisfying a user query is then ranked accordingly to a specific ranking function which depends on the query type. in the former case, bpbuses the standard cosine similarity measure  <cit>  as implemented by apache lucene, whereas in the latter case bpbemploys the similarity score assigned by the instance of the blast algorithm provided by the washington university . the ranked list of results will be showed to the user, as it commonly occurs in any search engine.

nonetheless bpbis a clustering engine too. so that, once a query is resolved and its candidate set of results is determined and ranked, the clustering process comes into play. this phase of bpbconsists of grouping the results accordingly to the homogenous content of some of their fields. the user can actually choose  among several ontology-based clustering strategies, each offering a different "view" on the returned results according to their associated meta-data such as: the references to gene ontology , the taxonomy lineage , the organism , and the keywords . of course, the approach is flexible enough to allow additions of other meta-information to the document schema. we point out that the clusters within a single view may overlap, because one result may satisfy different properties, and clusters may be organized into a hierarchy, in order to capture the parent-child relationships that might hold among pairs of them. as an example, one molecular function may be the specialization of another. bpbthen visualizes for each cluster in the hierarchy a string label and the cluster size. the former information is intended to provide a succinct and meaningful description of the cluster content, while the latter provides an indication of the relevance of the cluster based on the number of items contained in it. of course the more readable the cluster labels are, the more effective is the subsequent browsing and mining processes executed by the biologists on this hierarchy of labeled folders. it goes without saying that, differently from the indexing phase, the clustering phase must be executed on-the-fly at query time and must operate just on the document set returned by the user query. consequently bpbmust find a good compromise among detailed clustering , readability of the cluster hierarchy , and efficiency of the clustering process .

the net result offered by a good hierarchy of labeled folders to the biologist is a compact way of summarizing all the results relative to the query. this provides the biologist with several different readings of the  query results, their distributions over various ontology-based topics or organisms, and possible hidden correlations among them. subsequently to their query and hierarchy reading, the biologists can either formulate a new query, by means of a more specific set of keywords, or they can narrow the current set of results by selecting just a few specific folders within the hierarchy. in both cases, the labels assigned to the folders help either in the generation of new knowledge for new-query formulation, or in the browsing process. we remark here that this approach to the browsing and understanding of query results is orthogonal to the classical linear-scan of the ranked list of hits, and shows its full power in the presence of informative or under-specified queries, as deeply illustrated for web-search engines and as it is common in current biological databanks.

in its last step bpboffers a twofold representation of the query results:  the classical flat list of results ranked according to some relevance-function, and  a hierarchy of labeled folders computed according to some clustering criteria selected by the user. then the user can either scan through the flat-list, or can navigate the hierarchy and mine new knowledge from the cluster labels.

in the rest of this paper we will detail the search phase from the user's point of view and we will provide more insights on the algorithms underlying the clustering process.

the search phase
bpb offers various types of query operators, like the classical boolean operators , or the more sophisticated phrase searches , and wild-cards . moreover, since the indexed documents are organized into fields, the user can issue highly selective or general queries. in the former case, the user specifies one or more fields over which the query is matched; in the latter case, no field is specified by the user, and thus the search is performed over the document_superfield containing the content of all the others fields, achieving in this way a fast search over all the document fields simultaneously. as an example of selective query, the user can issue: glutamate* and organism_taxonomy:mammalia, to look for documents about the glutamate and relative to the mammalian organism.

another interesting type of search supported by bpbis the one related to the meta-data extracted from gene ontology , and attached to every document in the indexed data collection . each document may indeed have references to go terms that describe the molecular functions and the biological processes involved with the corresponding databank entry, and may contain information about where these functions or processes take place . by exploiting the indexed information, the users can boost the precision of their searches by narrowing the query to a specific function, process or component without specifying exact terms in go, but just describing them via the web-classical "bag-of-words" search paradigm. for example, the user can look in bpbfor all the proteins related to a specific biological process described by the go term  named "ion channel activity" by just issuing a phrase search with these three keywords. we believe that this feature is helpful to anyone looking for sequences with a specific function, process or cellular component but doesn't know the exact go terms that identify them. currently, the same type of query could be answered by issuing multiple searches in sequence and ontology databanks like go: however these combined searches would usually require more than one attempt to produce interesting results. in fact, the phrase query above does not produce results on uniprot , whereas it produces  <dig> results on bpb. if we remove the quotes, uniprot returns  <dig> results. of course, bpbsupports searches for go terms, as well.

as mentioned in the previous section, a user can issue two types of queries: index-based and blast-based. at any time of the search process, the user can issue a blast-based search on a subset of sequence results currently returned by bpb. the selection and running options are offered through the gui.

independently of the type of issued query, bpbproduces a list of documents which answer the query posed by the user. if the list is small enough to be manually scanned, the user should do it. otherwise, it is more effective for the biologist to exploit the hierarchy of labeled clusters produced by bpb.

the clustering process
clustering deeply exploits the meta-data constituting the documents indexed by bpb.  bpbmay produce various kinds of labeled clusters which depend on the specific data deployed in the aggregation and labeling process. this brings to the concept of "view" previously introduced in this paper. three points relative to the clustering process should be addressed:

 <dig>  how to perform the clustering;

 <dig>  which heuristics apply in order to produce few but significant clusters;

 <dig>  how to use the clusters to improve the precision and the recall of the user search.

the goal of the clustering process is to group the documents returned as query results into homogeneous groups  according to a given property which is chosen by the user at query time via the gui. for instance, a user can choose to group together documents with the same keywords in the keyword_text field, or with the same go terms in the go_term field. currently, the views supported by bpbare the following:

taxonomy view
the clusters are generated on the base of the taxonomic information present in the field organism_taxonomy of the retrieved documents, which contains the entire taxonomic path from the kingdom to the species of the relative organism. this view creates a reduced form of taxonomic tree in which the taxonomic nodes are the labeled clusters only, and the parent-child relationships are derived from the taxonomic information "as-is" given by the ncbi taxonomy . other databanks could be adopted without changing the current bpbarchitecture. of course, the reduced taxonomic tree may present many unary paths.  bpbthus performs a "compression" of those paths by removing all the intermediate unary nodes . the ratio underlying this approach is that the removed nodes  do not provide useful information to the user who wants to see the distribution of the results among the different taxonomy clusters. moreover, these unary nodes would unreasonably enlarge the user time for the hierarchy browsing.

keyword view
this view is based on the content of the keyword_text field that textually describes  each retrieved document via a list of terms . this is different from the go terms view below, since the go terms belong to a strictly controlled vocabulary, while those keywords are manually inserted in the data file by the submitters and, even if they are always concerned with the biological properties of the sequence, they might be chosen from common language. however, since bpbcurrently works on the uniprot databank, the used keywords are from a predetermined vocabulary. again, the architecture of bpbis flexible enough to host any set of keywords in the field keyword_text, as future releases of the software might offer.

organism view
each document is related to a specific organism indicated in the document itself in the fields organism_name_common and organism_name_scientific with a content like homo sapiens or mus musculus. for each organism cited in the retrieved documents, bpbbuilds a cluster labeled with the organism name and containing all documents corresponding to that organism. these clusters can be considered as the leaves of the taxonomy tree, so no hierarchy is built in this view. the organism view allows the biologist to focus his search process on some specific organisms of interest.

go terms view
for each go terms cited in the retrieved documents set, we group together all the hits that refer to that term, and label the formed cluster with the term itself. then we discover parent-child relationships by querying go to find whether two terms are related. this actually means that a path between them does exist in the gene ontology . given this information, bpbis able to organize the cited terms  in a more sophisticated data organization, namely a directed acyclic graph .

go upward paths view
this is the most sophisticated clustering approach offered by bpb. go is a dag whose nodes are labeled with the name of a molecular function, biological process or cellular component; and whose arcs model two kinds of relationships: is_a and part_of. in principle every protein of uniprot  is tagged with all the references to related terms in this ontology; however, the manual tagging process is still in progress  <cit> . nevertheless, the quality of the linking and tagging information available in this dag makes it an effective knowledge base for clustering and labeling the documents returned as a result of a user query. it is in fact reasonable to cluster together documents of the result set which share the same reference to go , or are "close" in the go graph. we follow this idea by creating one cluster per go term referenced by the query results, and put into this cluster the documents that reference that term . after that, we start from these terms  and visit backward the go graph for a fixed number of steps . for each visited term we form a cluster, labeled with that term, and containing the documents that refer to that term directly , and all documents referring to terms that descend from it. for instance, suppose that we start from the term  . we create a cluster labeled with the term name and containing all the documents referring to this term directly. going backward in the ontology we find two fathers for this term:   and  . for these two new terms we create two clusters labeled with their names and containing all the documents that directly refer to these terms together with the documents contained in the descendant clusters, in this example only the one for . the created clusters will be presented to the user organized hierarchically as they appear in the ontology. in our example, the clusters for  and  will be presented at a higher level in respect to that of the cluster for  which will be shown as a child of both.

this backward visit will eventually produce a forest of dags, since two starting terms may have a common ancestor at some level  and thus bring their connected components to merge, or may remain disconnected. going upward in the go ontology means that we are moving toward more generic and comprehensive concepts that can be then used to produce coarser and coarser clusters. therefore, the shallowest terms will be related to generic concepts while the deepest terms will be related to more specific concepts. the gui will display to the user the shallowest terms, and their clusters, which contain many documents because they represent more generic concepts. starting from these clusters, the user can browse the deepest clusters containing a few more-specialized documents. we note that the upward visit  introduces new terms which are nonetheless "related" to the ones referred to, by the retrieved documents.

a comment is in order at this point. in principle, the clustering process should take place over the entire set of results produced by a user query. however this approach can be slow, because of the sophisticated clustering strategies adopted, and might jeopardize the precision of the clustering hierarchy, because of the presence of many clusters and maybe outliers. in order to overcome these problems, bpbrestricts the clustering process to only the top-n ranked documents of the result set, thus mimicking vivisimo. this algorithmic choice assumes that the ranking function takes care of selecting the most interesting and representative results among the ones returned by bpbfor the user query. the value of n is crucial, it is currently set to  <dig>  but it may be obviously changed according to the user needs.

it is important to note that these four views are not mutually exclusive, in the sense that at any time of the searching process the user can switch from one view to the other by just clicking on the proper button on the gui. this flexibility allows the users to interact with the current set of results in the most effective way, by choosing the view that best refines the current query. the refinement may be performed by either clicking on a cluster label, or by performing a multiple selection over various clusters, possibly residing at different levels of the cluster hierarchy. in the former case, bpbautomatically composes and executes a new query by combining in and the current query with the selected cluster labels. in the latter case, the current result set is narrowed by keeping only the results that belong to the selected clusters.

RESULTS
bpb has a very simple start page  which accepts the query string, as either a keyword-based query or as a sequence to be matched via the blast algorithm. the page of results consists of two frames, the one on the right shows the flat-list of ranked results, the other on the left shows the hierarchy of labeled folders as computed according to the chosen view .

bpb is not the only search and clustering engine in the literature acting over many ontologies . other projects, like clustermed  <cit> , are exploiting the clustering approach but over only bibliographic databases, like pubmed  <cit> . bpbdiffers from them in two main respects:  it uses several kinds of meta-data associated to the biological sequences  to perform the search and the clustering process;  it offers the possibility to link ontology classification and homology searches, via the combination of clustering and blast-based searches.

CONCLUSIONS
we have presented a powerful and versatile prototype of search and clustering engine for biological data, called bpb.  bpbindexes protein sequences and their meta-data extracted from uniprot databank. the user can issue keyword-based or blast-based searches over these indexed data thus retrieving a set of documents which are ranked according to proper relevance-functions. these query hits are then clustered by bpbinto groups of homogenous content, organized as a hierarchy of labeled clusters. the user can actually choose among several ontology-based hierarchical clustering strategies, each offering a different "view" on the returned hits and each based on a different meta-data associated with the hits. the ultimate goal of bpbis to provide the user with several different readings of the  query results and show possible hidden correlations among them, thus improving the user browsing and understanding. finally, the biologist can interact with the hierarchy in order to either formulate a new query or to narrow the current set of results by selecting just a few specific folders.

we remind the reader that the current version of bpbsupports searches only on the meta-data drawn from the uniprot databank. future releases of the software will support other interesting databanks, like genbank and/or embl, will allow the user to process and cluster efficiently a larger set of top-n documents, and will support other ranking functions.

availability and requirements
• project name: the biopromt-box

• project home page: 

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> . <dig> or higher, tomcat  <dig>  or higher

• license: free

• any restrictions to use by non-academics: no

authors' contributions
the authors have equally contributed to this work.

