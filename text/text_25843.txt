BACKGROUND
r is an environment in which statistical techniques can be implemented  <cit> . r is an open source project, licensed under the general public license, and is used by a growing number of researchers in the field of bioinformatics/biostatistics. many new statistical procedures are published with corresponding r scripts or packages. over  <dig>  packages can be obtained from the comprehensive r archive network  <cit>  and further  <dig> bioinformatics packages can be obtained from the website of the bioconductor project  <cit> . notably, microarray analysis has been greatly improved by several packages like limma  <cit> , affy  <cit> , siggenes/samr  <cit> , pamr  <cit> , limmagui  <cit>  and by software applications like brb-arraytools  <cit>  or by web applications like carmaweb  <cit> , midaw  <cit> , and race  <cit>  . r is based on an effective programming language that includes conditionals, loops, user-defined recursive functions as well as input and output facilities. the user frequently needs to change r code like the one for setting the working directory, reading an input file and changing parameters to new values, which usually requires profound knowledge of the r scripting language. for many applications, large parts of the code remain unchanged.

there are different approaches for the gui-based usage of r: an option is the use of gui toolkits such as tcl/tk  <cit> , gtk <dig>  <cit> , java swing  <cit>  and wxwidgets  <cit>  employing the r packages tcltk  <cit> , rgtk <dig>  <cit> , rjava  <cit>  and rwxwidgets  <cit> . every toolkit has special characteristics that require the programming of its own custom gui. gwidgets  <cit>  serve as an abstraction of the named r packages and offers a standard gateway. a gui that is written using gwidgets is easily compatible with these toolkits and can thus be executed. all these packages including gwidgets use r to describe guis and require r to generate the gui. such guis depend on r and are less flexibly integrated in other softwares.

stand-alone frontends present another approach for the gui-based usage of r. rcmdr  <cit>  and rkward  <cit>  runs on linux and has a similar usability to rcmdr yet with a richer interface. the user interface of rkward was developed using the qt toolkit  <cit>  in c++  <cit> . like in rgg, guis are described with xml making it easier for the end-user to expand rkward with further gui functions. rpad  <cit>  is a web-based analysis program which integrates r to an apache web server on the backend. the r code embedded in the html is sent back to the server for statistical evaluation. extending these tools to new functions requires programming skills in html, javascript  <cit>  and/or php  <cit> .

in this context, this project's aim is to develop a general gui framework for r. this should be independent from the gui toolkits and integrating software and make r based statistical computing available to a wider audience less familiar with r programming.

implementation
the r gui generator  framework allows the r user to generate graphical user interfaces  for r scripts. rgg uses a component-based approach and consists of two parts: an xml  <cit>  -based gui definition language to use the existing components  and a gui engine that is implemented in java.

rgg – gui engine
within the rgg framework, the gui engine is the interpreter of an rgg file which generates the gui in runtime. gui engines are language-specific and contain the implementation of gui elements. the current engine was implemented in java using the java swing library.

however, new engines using other programming languages including r based on the same rgg gui definition language specification may further be implemented. thus the rgg gui definition language is independent from the gui toolkit.

java based rgg gui engine
rgg – gui definition language
the rgg gui definition language is based on xml and contains all basic gui elements. rgg files are thus xml files. rules applying to an xml file also apply to rgg files. to distinguish rgg files from other xml files, the root tag must be set to <rgg>. in between the two tags <rgg> and </rgg> the user can combine gui elements and r code. there are common gui elements such as <filechooser>, <slider>, <checkbox> or more complex and specific elements like a dataframe/matrix editor <matrix> or an importer of microarray data, the <maimporter>. each gui element consists of a given number of gui widgets. frequently, the basic elements like <textfield> , <filechooser> , consist of two or three gui widgets. however, there are no limitations to the complexity of gui elements. a file containing both r code and gui elements is saved with the suffix .rgg. such rgg files serve as templates for the gui engine. the gui engine loads the rgg file and dynamically creates and arranges gui elements from the xml tags. each gui element converts the user settings  into the corresponding r code; i.e., the xml tags in the rgg file are replaced by the corresponding r codes. in this way a new r script is generated which is then executed in r. several xml tags leave the r script unchanged, but improve the gui layout. these tags include the container elements <vbox> and <hbox>. the gui components and elements can be arranged both horizontally and vertically, i.e. spread across several columns and rows of the gui. by default, gui components and elements are arranged vertically. to ensure horizontal arrangement of child elements, the container element <hbox> can be used, whereas the vertical arrangement can be restored using <vbox>. the <separator> tag introduces a horizontal line to separate groups of independent gui elements, and the <gaprow> tag modifies the spatial separation of single gui elements. each gui element has its attributes, which aids its fine-tuning. some attributes are common in many gui elements such as "var" and "label". the var attribute's value corresponds to the r variable name that the returned user input is assigned to. the label attribute defines the label of the element in the gui. each of the more than fifteen gui elements and their definition by xml tags are described in detail on the project webpage  and an html page  gives an overview of the gui elements and their attributes. new gui elements are continuously uploaded and documented on the website. the development of rgg was inspired by xul, several components such as the <hbox> and <vbox> concept were directly adapted from the xul. the reason why we could not use xul directly is related to the choice of the programming language java which should make it easier to integrate rgg in other java based softwares   <cit> .

jgr plug-in & rggrunner
the current version of rgg is available as a stand-alone software  and as a plug-in for jgr , which is a java frontend for r  <cit> . rgg generates an r script that is executed locally by rggrunner or jgr-plug-in. however, new execution environments can be developed, which provide a server-client architecture e.g. via rserve. rgg does not have a server-client architecture yet, and runs r scripts locally . rgg files can be developed in any text editor; however, using the rgg plug-in for jgr, the developer can control both the r prompt and the nascent gui. the rgg framework can be integrated into any software supporting r and java. users with limited r programming skills can operate rgg using the stand-alone application rggrunner , where any given gui can be imported and executed. further, the source code of an rgg file and the generated r code can be viewed directly within rggrunner. the rggrunner is available for all major operating systems, such as linux, windows and mac os x.

outlook
the rgg project is going to provide a well-organized and documented web-repository for rgg files. in addition, the rgg framework will be integrated into the taverna environment which enables the composition of bioinformatic workflows  <cit> . rgg is an open source project under the lesser general public license. the source code of these elements and of the gui engine is freely available via a public subversion repository . downloads and installation instructions are available at the project homepage .

simple example
it may be desirable that a successful r script evolves into a gui based function. figure 3a gives an example of a self-explaining r-script for a fisher's exact test on a  <dig> ×  <dig> contingency table, a test frequently used in biomedical research. to run the fisher test in r with different count data, the numeric values have to be changed in this r script. the user has to change the r script accordingly, which requires knowledge of r scripting. an rgg-gui was created for the fisher's exact test using a text editor or, alternatively, the rgg plug-in for jgr. this gui includes the rgg gui elements matrix editor <matrix>, dropdown menu <combobox> and a header text <h <dig> text> . in the matrix editor, the numeric values can be typed in manually, or a data file can be imported by clicking on the 'browse' button. furthermore, rows and columns can be added or deleted from the matrix. in the additional drop down menu the test may be chosen to be 'two-sided' . the resulting r code , that is returned from the user-gui input, is finally executed in r by clicking the 'run' button. the gui element 'matrix editor' can be restricted to two rows/columns. alternatively, larger matrices can be allowed when the according function parameters are also supported by appropriate gui elements in the rgg file. for a generic rgg for the fisher's exact test, see additional file  <dig>  to obtain a user-friendly gui for more sophisticated rgg files, the arrangement of the gui elements and its components should be carefully planned in advance. the following procedure for the development of an rgg file is recommended: first, the gui elements have to be selected. second, the gui elements are arranged horizontally and vertically on a virtual grid , keeping the component composition of each element in mind. third, the selected gui elements have to be put in their correct positions in the r script. more sample rgg files are available at the project homepage.

RESULTS
we have developed a general gui framework for r scripts for a broad range of r users: developers with skills in xml and r can provide guis, whereas users of bioinformatics software  can run those guis with the software rggrunner.

rgg consists of an xml based gui definition language and a gui engine that interprets the gui language and generates a new r code. describing guis with xml decouples rgg from any concrete gui toolkit. unlike r based toolkits such as gwidgets  <cit> , xml simplifies the integration of rgg in software not developed in r. the current version of rgg is available as stand-alone software rggrunner and as a plug-in for jgr.

rgg-gui application
to execute rgg files, they are loaded into the rggrunner software . the current version of rggrunner doesn't include a graphic device yet. therefore the plots are automatically saved in the working directory. figure  <dig> illustrates a simple example. however, following this concept, any statistical function, including more complex scripts and packages, can be made available for the rgg framework. routine analysis of complex data, like data obtained from microarray analysis, is an important bioinformatical application field of r. as a starting point for analysis, microarray raw data files, have to be imported using the corresponding r package for the microarray platform. then the data are pre-processed and the quality of the microarray data is assessed. in figure  <dig> we demonstrate an rgg-gui for the r package 'arrayqualitymetrics', suitable for the assessment of microarray quality by experimentators with limited r programming skills. the rggrunner interprets an rgg file that contains the gui element micorarray importer <maimporter>, and downstream gui elements for the function parameters of the 'arrayqualitymetrics' package . these downstream elements include two checkboxes for normalization and mapping of reporters, respectively, which enable further gui elements when checked by the gui user. finally there are two checkboxes for report production options and a file-chooser to set the output directory for the results.

the gui element 'microarray importer' generalizes the import of microarray files by using a wizard system. the importer reads the raw data files and/or the experiment descriptor file and then automatically detects the microarray platform: if the raw data files are affymetrix  files, then the 'readaffy' function from the 'affy' package  <cit>  is used and an 'affybatch'-object is generated. in the case of agilent, genepix, or other custom array data files, an 'rglist' object is generated by the 'read.maimages' function of the 'limma' package  <cit> . the user-interaction for the downstream gui elements  is further interpreted. the resulting r commands can be checked in the log on the right window of the rggrunner. all output from the quality control package 'arrayqualitymetrics' is saved to the selected project folder. this gui can be extended by customized downstream analysis steps for the entire analysis of micorarray data, including subsequent pathway  <cit>  and gene-ontology  <cit>  analysis.

perspectives
one of the biggest advantages of r is its large and active user community, providing a vast number of scripts, functions and packages. through a common gui definition language for r, the generation of r guis could evolve into a community effort. each standard statistical function such as built-in functions  and packages  could be provided with standard guis. a unified concept of gui generation would also facilitate the teaching of introductory as well as of advanced statistics lectures. in the course of the rapid methodological progress in life sciences, novel statistical approaches are permanently required. when provided on a gui base, novel statistical procedures can be shared directly with other gui-dependent users. the r package 'sweave' documents r analysis by integrating r commands and output text, figures and tables into a pdf/latex report  <cit>  and thus could contribute to the transparency of research findings  <cit> . if used together with rgg, pdf/latex files could be produced much faster.

rgg is based on an intuitive gui definition language which enables the description of guis declaratively, without extensive programming, directly by r users. rgg provides a gui framework that is designed to be integrated with different r frontends and other softwares supporting r. currently the rgg project is at the stage of a general framework but does not provide a collection of guis. at the moment, our focus is on writing rgg files for the standard functions of r and to extend the range of available gui elements. however, rgg files for complex and specific statistical procedures can only be efficiently developed by the r community. therefore, the community is invited to take advantage of the rgg framework and to submit biostatistical solutions not only as r packages/scripts but also with concomitant rgg files. clearly, the addition of such rgg libraries, would significantly contribute to rgg's utility in many scientific studies.

CONCLUSIONS
we introduce a generic concept that allows r users to extend their statistical and bioinformatical procedures, which are relying on commands in the r prompt, with standard graphical user interfaces. the r script developer can use the rgg framework to make biostatistical and bioinformatical solutions directly available for routine applications. the current project will further include the development of a web repository for rgg files and integration to a workflow environment, enabling the combination of guis and connection to web services and databases. such community driven collections of rgg-guis and analytical pipelines could help to bridge the gap between the r developer community and gui-dependent users with limited r scripting skills.

availability and requirements
project name: rgg

project home page: 

operating system: all major platforms, such as linux, windows and mac os x

other requirements: r  <dig> .x or newer, java  <dig> or newer, jgr  <dig>  or newer is recommended

license: lgpl

any restrictions to use by non-academics: lgpl

authors' contributions
ak and fl conceived of the project, designed the software/framework and supervised software implementation. iv programmed the rgg gui engine and the project's web-site. ay implemented the microarray importer gui element. ed implemented the rggrunner. kv and aw implemented sample rgg guis and provided r test scripts. cn was responsible for software testing and defined conceptual requirements. ml wrote the manuscript and was additionally involved in software development. all authors read and approved the manuscript.

supplementary material
additional file 1
supplementary table. table of rgg gui elements and their attributes.

click here for file

 additional file 2
rgg runner for windows/linux. software to load and execute rgg files .

click here for file

 additional file 3
rgg runner for. software to load and execute rgg files . mac os x.

click here for file

 additional file 4
fisher test. rgg file and sample data .

click here for file

 additional file 5
array quality metrics. rgg file and sample data . requires r version  <dig> . <dig> or higher. a minimum of two microarray raw data files are needed to run the r package 'arrayqualitymetrics'.

click here for file

 acknowledgements
the project is funded by the austrian research centers gmbh-arc.

the authors declare that no conflicts of interest exist.
