BACKGROUND
micrornas  are short regulatory rna molecules that are encoded in the genomes of animals, plants and viruses. they function as post-transcriptional regulators of mrnas and have gained high interest due to their importance in many biological processes  <cit>  and their potential as drug targets  <cit> . the relatively recent discovery and the main mechanism of action of mirna-based regulation, which is based on watson-crick base pairing, has led to a recent explosion in algorithms, websites and databases that provide different data about micrornas.

the large number of mirnas discovered during the last couple of years has been supported by mirbase as the central clearing house for mirna nomenclature and annotation  <cit> . at the mirbase web site, scientists can submit newly discovered mirnas and information about sequences and homologies in other species. today mirbase has become a central and highly useful website for scientists who search for information about specific mirnas. a number of flat files in different formats are made available with each release of mirbase to support computational analysis. in addition to mirbase, a variety of mirna data resources has been developed by other research groups. these include resources that deal with genomic contexts and evolutionary conservation of mirnas , prediction and validation of mirna targets  and biological functions and phenotypes of individual mirnas . these mirna resources are primarily available online as point-and-click web sites.

it is currently a burdensome task to do an integrated computational analysis using data from one or more of the online mirna resources. for each resource, it requires manually downloading raw data files , understanding the sometimes arcane format and structure of the resource in question and finally, construction of a script to parse the content and various identifiers. the researcher has to go through all these steps, and repeat them each time a resource is updated. a more simple procedure would reduce errors, increase reproducibility of the scientific results and make the data analysis less labor-intensive. mirmaid is a software framework designed to eliminate the aforementioned preprocessing steps. it provides non-redundant, structured and inter-connected data that are accessible both through an object oriented interface  and as web-based resources that are accessible remotely using most computer programming languages. the web-based resources follow a set of design principles, representational state transfer   <cit> , implying that every resource is uniquely and uniformly addressable using an url. the effect is that the web resources can be accessed equivalently by computer programs and researchers using a web browser.

implementation
core architecture
mirmaid is built in the ruby programming language using an open source web application framework, ruby on rails . ror allows rapid development of web applications in a model-view-controller  architecture, which isolates business logic from the user interface and facilitates program maintenance and scalability. in the ror framework, data is stored in a relational database management system  and encapsulated in an object-oriented model layer . the models are inter-connected and can be queried directly from the ruby programming language. when mirmaid is deployed, it automatically  fetches the online raw data files from the current mirbase release. this data is restructured to yield the set of mirmaid core data models. an overview of these models and their associations is shown in table  <dig> 

mirmaid data models: mirmaid restructures data in mirbase to yield a set of core data models. the data for the two models highlighted with a  is not readily available from mirbase data but is automatically computed when mirmaid is deployed. each model is semantically related and connected to other models as listed in the last column of the table. relationships highlighted in bold denote a 'many' relationship: a species has 'many' mirna precursors, while a mirna precursor is only related to 'one' species. the attributes and relations on each data object can be accessed in an object-oriented manner .

all models are also exposed on the web as read-only restful resources, rendering html to researchers  and xml or fasta representations to computer programs. figure  <dig> illustrates the mirmaid resources, the associations between resources and how they are addressed by an url. mirmaid  ships with a lightweight, but efficient, web server that can be loaded from the command line, but mirmaid is also easily integrated with an existing apache web server.

modular design
a central feature of mirmaid is its modularity. it has a structured, but simple application interface  and can be loosely coupled as an independent data component in existing systems. furthermore, mirmaid is built as a framework that is easy to extend with new data and functionality. we have designed a plugin architecture, where the core mirmaid framework works independently of activated plugins. the plugins can dynamically integrate with and extend mirmaid data and functionality without making changes to the core application. it is a simple procedure to develop an extension or plugin to mirmaid that introduces new data models and resources integrated with the core mirmaid framework . the result is a modular web application, where the core mirmaid framework can be dynamically extended with plugins to provide a unified browsing experience and application interface. please, refer to the result section for an example of how the plugin integration works in practice.

RESULTS
maintenance and lifecycle of mirmaid
mirbase is the data source of the core mirmaid framework. with every data release of mirbase there will be a corresponding public version of the mirmaid web service) while older mirmaid versions will be kept available for a limited time period. besides being a public web service, mirmaid can easily be installed locally. when a new version of mirbase is released, a local installation can be updated simply by reinstalling the mirmaid framework  using a single command on the command line. the source code for mirmaid is under the lgpl license and utilizes the git multi-user versioning system . when changes are committed and released in the mirmaid project repository, it is a simple task to pull the changes and update a local mirmaid installation.

in mirmaid, there are unit tests for all models and restful resources. this is done to assist development and so that end-users can verify that their local mirmaid installation behaves as expected. the test suite can be run from the command-line. plugins must also specify tests for models, restful resources and connections between the plugin and the core framework. the plugin unit tests are straightforward to implement and they are automatically evaluated together with the core test suite in mirmaid.

restful clients
a major benefit of a restful web service is the simplicity by which programs or other web services can retrieve information. querying a restful web service only requires that the program is able to generate a http request to the url that specifies the resource and then parse the response document - most programming languages have such features readily available. mirmaid can generate html and xml response documents for all resource urls and fasta documents where it is appropriate. xml documents are suited for computer programs and they are easily handled and parsed in most programming languages. in figure  <dig> we give two examples of restful clients implemented in the ruby and perl programming languages. both programs perform two simple tasks: 1) retrieving the comment attribute for the cel-let- <dig> precursor, and 2) retrieving the sequences for the two mature mirnas  in the hsa-mir- <dig> precursor. in figure  <dig>  we have also included two examples to illustrate the simplicity of the restful interface. we use the r statistical framework  <cit>  and the 'curl' command-line program to issue a http request to retrieve all c. elegans mature sequences in fasta format. furthermore, a normal web-browser can be used as a restful client to inspect the xml and fasta response documents for a given url. there is currently no widely adopted web service description standard for restful services. until a standard has been adopted, the resource api for a given mirmaid instance  is dynamically documented via the url http://current.mirmaid.org/described_routes.txt . this feature is further documented on the mirmaid community site.

local ruby clients with direct access to data models
the second leg of mirmaid is the object oriented model layer. with a local mirmaid installation data can be accessed efficiently through a ruby program without the overhead of http protocol and network communication that is associated with the rest interface. mirmaid uses the ror object-relational mapping library called activerecord. this library provides an intuitive way to find objects, retrieve attributes and to navigate between associated models. in figure  <dig>  we provide an example of how the models can be queried interactively in a ruby irb session. we start out by retrieving all  <dig> human precursors in the mir- <dig> precursor family. next, we identify all precursors in a neighborhood of +/-  <dig> nucleotides. these nearby precursors are finally grouped into mir- <dig> family members and non mir- <dig> family members. this is a very simple example yet it illustrates how the data models can be queried swiftly in an intuitive manner.

mirmaid plugins
as detailed earlier, data and functionality in mirmaid can be extended by plugins. we have developed a proof-of-concept plugin using data from the mir2disease web service  <cit> . the plugin extends mirmaid with two data models and restful resources: diseases and disease links. a disease link associates a mature mirna and a disease and it carries information about the association, for example pubmed reference and target genes. a specific disease instance can be reached using the url,/m2d_diseases/doid, where doid is the disease ontology identifier. disease links are identified by a concatenation of doid, mature mirna name and pubmed id. figure  <dig> demonstrates how the plugin connects with mirmaid to integrate the disease link model and resource with the mirmaid mature model and resource. the plugin should also define html representations for the resources that are being introduced. these plugin html representations are accessible from a web browser and are automatically integrated in the menu layout of the mirmaid web site. the net effect is a complete integration of mirmaid and plugin in both the web site and application interface. we host a public version of mirmaid with example plugins activated at http://plugins.mirmaid.org.

CONCLUSIONS
first of all, mirmaid is a software framework aiming at easing the manual workload for researchers when doing computational analyses involving mirna data. mirmaid provides a uniform, intuitive and flexible application interface that is independent of programming language. mirmaid is designed to live as a public service as well as being installed locally. the public service should be used when doing a simple and quick analysis and for integration with other web services. the local installation  is recommended when a more data extensive analysis is needed. mirmaid is open-source software and users can contribute to the framework through the public source code repository or they can develop a mirmaid plugin that can be shared with the rest of the community. furthermore, individual users or labs can integrate private data as mirmaid plugins or they can couple existing information systems loosely to mirmaid using the restful api.

we believe that the mirmaid platform can pave a new and exciting way for scientists to share data and programs that involve mirnas. mirmaid follows a design philosophy that web services and resources should be able to integrate: web services should participate in the web instead of merely living on the top of it. we envision that if new data resources are released as mirmaid plugins, or at least follow the restful design principles for web services, then this would be a big step towards a global integration of mirna data. by developing mirmaid we hope that such an effort can be coordinated not only by huge centralized software development teams at ensembl and the ucsc genome browser, but also by a community that shares a common scientific interest.

availability and requirements
• project name: mirmaid

• project home page: http://www.mirmaid.org.

• operating systems: server software: linux and mac osx, client software: platform independent.

• programming language; server software: ruby. restful clients: most modern programming languages.

• other requirements; database management system: postgresql, mysql or sqlite. other minor requirements are detailed at http://www.mirmaid.org.

• license: free for academic and commercial users under the gnu lesser general public license .

• public servers: a public server running the current mirmaid release can be found at http://current.mirmaid.org and a server instance with example plugins activated can be found at http://plugins.mirmaid.org.

competing interests
ml and sk are employees of santaris pharma a/s, a biopharmaceutical company developing rna-based medicines.

authors' contributions
aj designed and implemented most of the software and drafted the manuscript. ml conceived of the project, designed and tested the software and helped draft the manuscript. all authors read, helped draft and approved the final manuscript.

