BACKGROUND
genome-wide measurement of gene expression and genomic variation via dna microarrays is a widely used technique in biological and medical research. the quantity and complexity of data generated by such studies represents a challenge in terms of storage, analysis and data transfer. there are a number of different microarray technologies and platforms which generate data in a range of different formats and units. the microarray gene expression data  society has proposed a standard known as the minimum information about a microarray experiment  standard to address these issues  <cit> . a miame-compliant data-centric model has been developed: the microarray gene expression object model ; this applies a structure to all components of a microarray-based study, from the sequences attached to the array through to describing equipment and platform used to perform the hybridisation reactions  <cit> . the mged ontology  provides a common terminology and hierarchy for data annotation within the mage-om  <cit> . a notable aspect of the mo is that it allows terms from existing external ontologies to be referenced within the mo framework. additionally, an xml data-interchange format, mage mark-up language, mage-ml, has been derived from the mage-om. the development of mage-ml facilitates the organisation and transfer of microarray data between databases and a range of analysis programs  <cit> .

there are three public repositories of data produced from microarray studies which are recommended by the mged society: arrayexpress  <cit> , cibex  <cit>  and gene expression omnibus   <cit> . these databases have various differing data submission interfaces. data can be supplied to arrayexpress via adf files, miamexpress  <cit>  web-forms or via mage-ml generated with tab2mage  <cit> . geo can accept submissions via a web interface, a tab-delimited format, simple omnibus format in text  and an xml format based around soft, miniml  <cit> . cibex accept submissions via a microsoft word document form and also provides a java tool compatible with ms-windows and mac osx  <cit> . submissions to arrayexpress and geo can currently be made in mage-ml format. an increasing number of array data analysis software packages are also capable of importing and exporting mage-ml files. for example, the rmageml bioconductor package for the r statistical computing environment allows the importation of experiment design in the form of mage-ml annotation  <cit> .

mage-ml is a flexible and extensible annotation format, allowing information to be structured in a variety of ways. this flexibility can influence the complexity of software and databases designed to read and store such data. therefore, arrayexpress and geo give guidance on the coding of mage-ml in order to facilitate submission in this format  <cit> .

here, we describe an application for the annotation of descriptions of microarray designs in a miame-compliant manner in the form of mage-ml or other file formats used by the public repositories: array design mage-ml annotation tool . the application interfaces do not rely on user knowledge of the mage-om but are flexible enough to allow annotation of complex multi-species microarrays. it also makes full use of the mged ontology, with ontology terms and documentation available at all appropriate steps of the annotation process. the application is capable of exporting data in soft, mage-ml and mage-tab format  <cit> .

implementation
requirements
we set out to design a simple interface for annotation of the arraydesign and associated packages from the mage-om that would produce data files for submission to arrayexpress or other public repositories.

the adamant software should be capable of execution on a variety of platforms without needing to install databases and/or other software. as data annotation can sometimes be a lengthy process, a facility to save work in an incomplete state prior to completion should also be incorporated.

software implementations of the mage-om are available in perl and java and are referred to as mage software toolkits   <cit> . these toolkits are capable of producing mage-ml representing the various mage-om packages.

implementation
the java language was chosen for development of adamant, primarily due to the availability of user interface components in the swing library, the ease of data caching, and the existence of the java mage-stk for mage-ml output. existing open source java packages are used to assist processing wherever possible.

the mage-om packages necessary for the annotation of the dna sequences attached to a microarray are the arraydesign, biosequence, designelement, database, protocol and description packages. the majority of annotation information is organised into the former three packages, whilst the database and description packages describe relationships to public databases and terms from the mo  and other ontologies, e.g. life cycle ontologies appropriate to a given organism.

the mage-om models relationships between various classes in a flexible but complex way. because representation of classes in this form makes update and changes to objects a multi-step process, a series of proxy classes, which map to mage-om classes, was implemented. the relationships between objects are stored in a set of classes created to enable bi-directional connections between objects to be stored and retrieved efficiently. software design patterns such as model view controller  and flyweight are used where appropriate throughout the software  <cit> . gui components are designed to be reusable in a variety of contexts. for example, the ontology browser component allows the appropriate branch of mo to be viewed and instances to be selected or new instances created in a number of different contexts during the annotation process. adamant is also structured to allow sharing of mage-om components such as ontology entries and protocols between arraydesign annotations. as a result, short mage-ml fragments, which would normally be considered invalid without the context of the appropriate mage-om package, can be stored and transferred between different arraydesign annotations.

the mage-om allows certain data to be represented in more than one way, which thus affects the complexity of processing mage-ml files. the mage-ml output of the application is designed to be compatible with best-practice for submission to arrayexpress  <cit> . we have also followed proposals with relation to usage of identifiers with a life sciences identifier -like structure so that objects referenced in the mage-ml files have unique identifiers  <cit> . as the mage-om provides a complex and complete framework for representation of data in a miame-compliant manner, the application is also able to produce output files in the soft format created by geo or the proposed mage-tab format.

RESULTS
initialisation and configuration
adamant is designed to be distributed as a jar file zipped together with the java mage toolkit, the jena ontology handling framework  <cit>  and the ehcache object caching framework  <cit>  as jar files.

on invocation within the java virtual machine , the application first loads various configuration settings. default values for the configuration settings are provided and a gui form allows editing of these values. the configuration settings are stored in a file and this also can be edited in a text editor. the configuration file contains an entry pointing to the location of the mged ontology file in owl format. <cit>  this can be a url to the mged ontology source.forge www site or to a local copy of the ontology. the default behaviour is to retrieve the ontology via the internet, ensuring that ontology entries presented during annotation are current. the ontology file is read using the open source jena ontology package. as processing of the ontology can slow down the startup time, one of the configuration settings allows the ontology to be stored in a persistent cache, speeding up the start time of successive instances of the software. other configuration settings include proxy server settings and an entry for the identifier prefix in order to conform to the id guidelines proposed by mged.

loading array description files
the starting point for annotation of an arraydesign is defining the properties of the material spotted or printed on the microarray slide. these are termed features in mage-om and can be grouped into one or more zones within an arraydesign. the features are then mapped to reporters, which represent properties of the actual sequence spotted onto the array. the reporters are in turn mapped to biosequences which provide a mechanism for relating reporter sequences to genes or other features of interest whilst also allowing mapping to data in public sequence repositories .

features and reporters are created by loading an array design file such as the gal file format used by genepix  <cit> . this file contains two sections: the header defines the number and location of all the subgrids on the array, whilst the second section defines the locations of all the spots within the subgrids. the id column in the latter section is used to create reporters which are linked to features at a given location. spots containing identical sequence can be represented by allocating the same identifier within the second tab-delimited table. the java framework for reading array definitions uses interfaces to ensure that file readers for other array formats can be added as required.

we have used the ehcache object caching framework  <cit>  to ensure the application is scaleable from small to very large arraydesigns.

creating ontology instances
the mged ontology is retrieved via the internet or local storage, and resolved in memory during initialisation. when an ontology entry is required the appropriate section of the ontology is displayed in a pane-window gui component. although the ontology is actually a directed acyclic graph, it is represented as tree nodes connected to multiple parents, shown as leaves at each relevant branch of the tree. any nodes with multiple parents are represented as redundant branches from the main tree. the gui component for editing and browsing the mged-ontology is re-used throughout the annotation process . the left pane shows a tree view of the ontology branch, allowing opening of subclasses and the selection of predefined instances. the colour of the instance icon indicates whether it is part of the mged ontology or a user-defined addition. the right pane shows properties of the ontology including a description and a list of restrictions. if an instance is selected in the left pane, the restrictions on the ontology are editable. ontology selections and user-defined instances created with this gui-component can be exported as mage-ml ontologyentry fragments. whilst these fragments are not valid mage-ml, they provide a convenient mechanism to allow sharing and re-use of ontology terms between users of the annotation interface.

annotation of reporters and biosequences
the user interface displays a tabbed series of windows to allow viewing of features, reporters and biosequences. all reporters and features must be members of a reportergroup or featuregroup, respectively. the reporter and feature windows use a  <dig> pane display: the left-hand pane shows the groups and allows creation, editing and deletion of the appropriate type of group . the "create and edit" dialog windows show fields appropriate for the type of group being created. the right-hand pane shows the individual features or reporters as rows in a table. any column can be double-clicked to sort the rows according to values in that column. ascending and descending ordering can be alternated by successive double-clicks on a column. groups of reporters can be selected and edited to change the properties.

the elements of the microarray can also be viewed in the arraymap tab which shows a diagrammatical view of the array . the first view shows the subgrids, known as zones in the mage-om. any zone can be clicked to give a view of the features or spots within that subgrid. the lower information panel shows details of any spot the mouse pointer is moved to. clicking on a spot in the zone view allows the reporter associated with that particular feature to be edited. a smaller schematic of the array as a series of rectangles in the zone view allows easy navigation to other zones.

where duplicate reporters have been given unique names within the array definition file, or there is a need to map a collection of features to a single reporter, a custom tab-delimited file containing the identifiers to be mapped can be loaded to allow feature-reporter mapping to be merged. alternatively individual feature rows can be selected and mapped to a reporter identifier.

biosequence data can be mapped to reporters by creating individual biosequences in the reporter tab window or via a tab-delimited file. once created, biosequences can be selected and edited in the same manner as reporters.

annotation of protocols and associated information
the mage-om provides a number of classes for the description of protocols. these include classes for hardware and software used in a protocol. the annotation interface includes several gui components for creating and adding array manufacture protocols, which are required for submission of an arraydesign. the protocols can also be exported to files, shared or imported as mage-ml fragments in the same manner as ontologyentry files. gui forms are also provided to allow entry of designproviders and various details about the arraydesign required for miame-compliance.

producing mage-ml files
the output of mage-ml is handled by classes from the java mage-stk. the internal representations of data are mapped to mage-om objects, with appropriate relationships being created. some validation is also performed at this stage to ensure that the mage-ml produced will be complete. the adamant software warns the user of any missing information, providing guidance about what needs to be added. 

output in soft and mage-tab format
output of data in geo soft or mage-tab formats is in accordance with the relevant specifications  <cit> , using modules within adamant.

discussion
comparison
the flexibility and complexity of the mage-om and associated databases has made the task of coding transferring data from data providers to data storage a difficult one. there are a number of methods for submitting array designs to repositories such as arrayexpress. interfaces involving interactions with web forms are time consuming, complex and error prone. other methods, such as production of tab-delimited tables, are not sufficiently flexible to allow annotation of certain types of arraydesign, or require detailed knowledge of the mage object model. the annotation interface we have developed offers a relatively simple set of interfaces, with the rich feature-set provided by the java swing libraries; it is flexible enough to annotate complex multi-species array designs. we have kept dependencies to a minimum, thus users can install and run the software without needing to install relational databases or other additional packages.

we have used the adamant software to submit four array designs to array express in mage-ml format . the submission process, undertaken with guidance from the array express curation team, has helped to refine the development of the interfaces and validation of mage-ml output.

CONCLUSIONS
adamant will run on any platform supporting the sun java  <dig>  virtual machine. the cpu and memory requirements will vary, depending upon the size and complexity of the arraydesigns being annotated, but the use of ehcache ensures that large arraydesigns can be edited on a typical desktop machine with  <dig> gb of ram. the software makes use of the jena and mage-stk libraries which are released under the gnu-licence and the software itself is released under the same open-source licence.

the interface components have been structured to collect all the data necessary to conform to miame guidelines; a variety of compliant, text-based file output formats can be generated. adamant could also directly interface with a suitably structured database via the java data base connectivity  library.

the annotation software presented here has been designed as a set of reusable java swing components. a subset of the components readily lend themselves to the annotation of other mage-om packages such as experiment and biomaterial which are required for the submission of experimental data to public repositories.

availability and requirements
project name: microarraykit

project home page: 

operating system: any platform with a java  <dig>  compatible jvm.

programming language: java

other requirements: java  <dig> 

license: gpl

executable code is available in additional file  <dig>  and test data in additional file  <dig> 

authors' contributions
mq carried out the design and implementation of the software and wrote the manuscript. ai participated in setting requirements, testing the software and suggesting improvements. both authors read and approved the final manuscript.

supplementary material
additional file 1
adamant executable code. this file contains the java files and scripts needed to run the adamant software.

click here for file

 additional file 2
test data. this file contains test data and a walkthrough of an annotation with adamant.

click here for file

 acknowledgements
this work was funded by the wellcome trust. we would like to thank the arrayexpress curation team, particularly helen parkinson, tim rayner and anna farne for their help and guidance in validating mage-ml produced by the adamant software.
