BACKGROUND
large-scale experiments are producing huge data sets of protein-protein interactions making it increasingly difficult to visualize and analyze the information contained in these data  <cit> . being able to apply computational methods can alleviate a lot of problems in this regard. therefore, a general trend is to represent the interactions as a network/graph and to apply suitable graph algorithms to extract necessary information. in the post-genomic era, one of the most important issues is to find protein complexes from the protein-protein interaction  networks. protein complexes can help us to predict the functions of proteins  <cit> , and they are also useful to understand and explain certain biological processes. the results obtained from different technologies for detection of high-throughput protein-protein interactions such as yeast two hybrid assay  and mass spectrometry of purified complexes, say tandem affinity purification   <cit>  and high-throughput mass-spectrometric protein complex identification   <cit>  show some variations. for example, the common ppi between the two different mass-spectrometry approaches stands at  <dig>  pairs, which correspond to  <dig> % of ppi detected by tap and  <dig> % of ppi detected by hms-pci. these variations imply that many of the experimentally determined interactions might be false positives or the experiments are not complete yet. hence, generation of protein complexes based on interaction networks of separate or combined data sets is helpful because the interactions that are involved in complexes are likely to be true.

in the present study, we assume that the interaction network is an undirected simple graph. a graph is undirected if its edges are not directed and a graph is simple if it has no parallel edge or self loop. it is suggested that clusters or locally dense regions of an interaction network represent protein complexes. however, the term "locally dense region" implies a very flexible concept. some well-known clustering methods are k-core, k-block, k-plex and n-clan clustering  <cit> . these strategies are based on the number of node degrees or the number/length of paths between two nodes within the cluster. a k-core is a maximal subgraph such that each node in the subgraph has at least degree k. a k-plex is a subgraph such that each node in the subgraph has at least degree |n| - k, where |n| is the size of the subgraph. a k-block is a maximal subgraph such that each pair of nodes in the subgraph is connected by k node-disjoint paths. an n-clan is a subgraph such that the distance between any two nodes is not greater than n for paths within the subgraph. generating clusters based on fixed values of n or k is too restrictive and is not very helpful for detecting protein complexes in interaction networks.

already a number of approaches have been proposed for detection of protein complexes in ppi networks. the sequential constructive method of  <cit>  makes use of the concepts of clustering coefficient and k-core graphs. another approach described in  <cit>  use hierarchical clustering. however they introduced the concept of secondary distances instead of considering the path length as the distance between a pair of proteins because of the fact that such distances among proteins are constrained and often cause distance ties. the approach of  <cit>  starts by composing an initial random clustering and then iteratively moving one node from one cluster to another in a randomized fashion to improve the clustering's cost. once the clusters are generated, they are filtered based on cluster size, density and functional homogeneity keeping in mind the criteria of the known biological complexes. another approach related to analyzing protein complexes is super-paramagnetic clustering  <cit> .

by intuition we realize that densely connected regions of a graph are clusters. however ensuring density alone is not enough. the graphs of fig.  <dig> and  <dig> consists of  <dig> nodes each and both are of density  <dig>  . but fig.  <dig> seems to be a single cluster while fig.  <dig> is divided into two clusters consisting of node sets {a, b, c, d, e} and {f, g, h}. the proposed algorithm can tackle this problem by keeping track of the periphery of a cluster by monitoring cluster property  of a neighbor with respect to a cluster. therefore, in short the algorithm detects densely connected regions of a graph that are separated by sparse regions. as a whole we consider that clusters are local phenomena in a network  and we find that periphery is a property of a cluster. also density is an overall measure of cohesiveness of the nodes of a cluster. therefore we used the concepts of density and periphery tracking in the proposed algorithm. it is likely that two nodes that belong to the same cluster have more common neighbors than two nodes that do not. we used this notion in seed selection and priority node selection in the cluster formation process.

the proposed algorithm
terminology
a protein-protein interaction network is considered as an undirected simple graph g =  that consists of a finite set of nodes n and a finite set of edges e. before details of the algorithm, we define some terminologies used in this paper.

definition 1
density dk of any cluster k is the ratio of the number of edges present in the cluster  and the maximum possible number of edges in the cluster  and is represented by .

dk=|ek||ek|max⁡=2×|ek||nk|×     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgkbazdawgaawcbagaem4aasgabeaakiabg2da9maalaaabawaaqwaaeaacqwgfbqrdawgaawcbagaem4aasgabeaaaogaay5bslaawia7aaqaamaaemaabagaemyrau0aasbaasqaaiabdugarbqabaaakiaawea7cagliwoadawgaawcbagagiyba0maeiyyaemaeiieaghabeaaaagccqgh9aqpdawcaaqaaiabikdayiabgena0oaaemaabagaemyrau0aasbaasqaaiabdugarbqabaaakiaawea7cagliwoaaeaadaabdaqaaiabd6eaonaabaaaleaacqwgrbwaaeqaaagccaglhwuaayjcsdgaey41aqraeiikagyaaqwaaeaacqwgobgtdawgaawcbagaem4aasgabeaaaogaay5bslaawia7aiabgkhitiabigdaxiabcmcapaaacawljagaaczcamaabmaabagaegymaedacagloagaayzkaaaaaa@5f9c@

here, |nk| is the size of the cluster, i. e. the number of nodes in the cluster. the density of a cluster is a real number ranging from  <dig> to  <dig> 

definition 2
the cluster property cpnk of any node n with respect to any cluster k of density dk and size |nk| is defined by .

cpnk=|enk|dk×|nk|     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgjbwycqwgwbacdawgaawcbagaemoba4maem4aasgabeaakiabg2da9maalaaabawaaqwaaeaacqwgfbqrdawgaawcbagaemoba4maem4aasgabeaaaogaay5bslaawia7aaqaaiabdsgaknaabaaaleaacqwgrbwaaeqaaogaey41aq7aaqwaaeaacqwgobgtdawgaawcbagaem4aasgabeaaaogaay5bslaawia7aaaacawljagaaczcamaabmaabagaegomaidacagloagaayzkaaaaaa@493b@

here, |enk| is the total number of edges between the node n and each of the nodes of cluster k.

in fig.  <dig>  the cluster property of node f with respect to cluster {a, b, c, d, e} is  <dig> ×5
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabikdayaqaaiabicdawiabc6cauiabieda3iabgena0kabiwda1aaaaaa@338b@ ≈  <dig>  while in fig.  <dig> the cluster property of node f with respect to cluster {a, b, c, d, e} is 11×5
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabigdaxaqaaiabigdaxiabgena0kabiwda1aaaaaa@31ab@ =  <dig> . a higher value of cluster property of a neighbor indicates that it is part of the cluster while a lower value indicates that it is part of the periphery. the graph of fig.  <dig> can be separated into two clusters by using the concept of cluster property.

definition 3
the weight wuvof an edge  ∈ e is the number of the common neighbors of the nodes u and v.

definition 4
the weight wn of a node n is the sum of the weights of the edges connected to the node i.e. wn = ∑ wnu for all u such that  ∈ e.

the flow-chart of the algorithm
the flowchart of the algorithm is shown in fig.  <dig> and it is divided into five major steps: input & initialization, termination check, seed selection, cluster formation and output & update. we now discuss each step.

input & initialization
the input to the algorithm is an undirected simple graph and hence the associated matrix of the graph is read first. it is also necessary to provide a value of minimum density we allow for the generated clusters and a minimum value for cluster property that determines the nature of periphery tracking. from now on, these input values of density and cluster property will be referred to as din and cpin respectively. clustering can be performed several times using different input values for din and cpin, which allows the suitable set of clusters to be chosen from among a number of options. the cluster id, k is initialized to  <dig> 

termination check
once a cluster is generated, it is removed from the graph. the next cluster is then formed in the remaining graph and the process goes on until no edge is left in the remaining graph. for a graph with no edge, the degree of each node is zero. when such situation arrives, the algorithm terminates.

seed selection
each cluster starts at a deterministic single node which we call the seed node. the highest weight node is considered as the seed node. however, if the highest node-weight is zero, the highest degree node is considered as the seed node. the weights of nodes are determined by summing up the weights of incident edges and the weights of edges are calculated by matrix multiplication. let m be the associated matrix of g. obviously the dimension of m is |n|. it can be proved that uv for u ≠ v represents the number of paths of length two between the nodes u and v. a little thought reflects that this is actually the number of common neighbors of the nodes u and v, i.e. the weight of the edge  between u and v. the timing complexity of matrix multiplication is of the order o. however, we need only those elements of m <dig> for which muv =  <dig>  so the complexity of finding weights of the edges can be reduced to o. the weight of every node is calculated by summing up the weights of its connecting edges and the complexity of finding the weights of all the nodes is of the order o. the highest weight node is then determined as the seed.

cluster formation
the cluster starts as a single node and then grows gradually by adding nodes one by one from its neighbors. the neighbors of a cluster are the nodes connected to any node of the cluster but not part of the cluster. it is very important to add priority neighbors to the cluster first to guide the cluster formation in a proper way. the priority is determined based on two measures:  the sum of the weights of the edges between a neighbor and each of the nodes of the cluster and  the number of edges between a neighbor and each of the nodes of the cluster. therefore, a double sorting is performed to sort the neighbors. the running time to perform this job is of the order o), where |nk| is the size of the cluster and |nn| is the size of the neighbors. therefore, the worst case running time for this job would be polynomial of the order |n| <dig> 

furthermore, we use some fine-tuning in the sorting process when cluster length is more than one but all neighbors are connected to the cluster by only single edge. in the following example we explain the purpose of fine-tuning. fig.  <dig> shows a dotted-line encircled cluster, say at some instant of the cluster formation process, and its neighbors a, b and c. all three neighbors are of equal priority if sorting is performed according to the two measures mentioned above. however, by common sense we realize that b or c should be given more priority. the fact is that other than the single edge link with the cluster, b or c is also connected to the cluster by a link of length  <dig> that goes outside of the cluster. based on this fact, we fine-tune the sorting of the neighbors such that b or c comes up as the highest priority neighbor. however when fine-tuning is used to sort the neighbors, we use half the value of cpin for periphery checking and thus help to form some sparse clusters. the timing complexity of the fine-tuning process is of the order o. theoretically, the value of |nk| or |nn| can approach near to |n| but |nk| + |nn| ≤ |n|. in most practical cases |nk| and |nn| can be considered as constants. furthermore, the fine-tuning process is performed only under special conditions and not every time when a node is added to a cluster.

in a simple graph the number of paths of length  <dig> between any two nodes is at best  <dig>  the number of common neighbors between any two nodes is actually equal to the number of paths of length  <dig> between them. in fact, we consider the paths of length  <dig> and length  <dig> to determine the priority of a neighbor with respect to a cluster. in case more than one neighbor are of equal highest priority, we choose any one of them as the highest priority node while sorting. the performance of the sorting can somewhat be improved by taking into consideration the paths of length  <dig> and  <dig> and so on. however, that increases the computational burden substantially. in the present work, we do not consider this and the proposed algorithm works well for graphs that have a nice cluster structure, i. e. the graphs that have densely connected regions separated by sparse regions.

we check two things before adding a node to a cluster. first, we make sure that addition of the node to the cluster does not cause the density dk of the cluster to fall below din, the input density. second, we check whether the node is part of the cluster or part of the periphery. if a node is part of the cluster it should be connected to a reasonable number of edges within the cluster. for example for a cluster of density dk, each node on an average should be connected to dk×  edges within the cluster, where |nk| is the size of the cluster. we do not add a neighbor to a cluster if its cluster property is less than cpin. we can choose the value of cpin from within the range  <dig> <cpin≤  <dig> 

output & update
once a cluster is generated, it is printed and graph g is updated by removing the present cluster, i.e. the nodes belonging to the present cluster and the incident edges on these nodes are removed from g. the cluster id, k is updated by adding  <dig> to it.

the procedure for generating and sorting the neighbors is performed every time a node is added to a cluster. the total number of nodes in the network is |n| and therefore, the worst-case timing complexity of the algorithm is polynomial of the order o.

generation of overlapping clusters
the algorithm represented by the flow-chart of fig.  <dig> generates non-overlapping clusters because once a cluster is generated it is removed from the graph and the next cluster is generated in the remaining graph. however, we can also generate overlapping clusters based on the same clustering concept. to do so, we extend the generated non-overlapping clusters by adding nodes to them from among their first neighbors in the original graph . in this process, the restrictions of threshold density and periphery property are similarly conserved.

RESULTS
we applied the proposed algorithm to typical ppi networks of e. coli, s. cerevisiae and a random network. in the following subsections the results are discussed from different angles of consideration.

complexes in the e. coli ppi network
the network of e. coli proteins consists of  <dig> interactions involving a total of  <dig> proteins as shown in fig.  <dig>  we have collected these interactions from dip  <cit> . this is not too big a network and we have chosen this to demonstrate the performance of the algorithm through visualization. twenty-two complexes of size ≥  <dig> are obtained when clustering is performed using din= <dig>  and cpin= <dig>  with non-overlapping mode, which are shown connected by thick red edges  in fig.  <dig>  it is easy to check that the algorithm very effectively separates densely connected regions of the graph. it is important to note that each of the complexes contains mostly similar function proteins. for the sake of comparison, by applying k-core clustering, we find that the highest k-core of this network is a 5-core sub-graph consisting of rpoa, rpob, rpoz, rpoc, rpod and rsd. this is similar to complex  <dig> of fig  <dig> i.e. the highest k-core can detect only one complex. the 4-core sub-graph is consisting of groel, rpoa, rpob, rpoz, nusa, rpoc, rpod, dnax, rsd, hola, holb, hold, holc, rpon and flia, which roughly encompasses the complex  <dig> and complex  <dig> and therefore some other algorithm is necessary to isolate them. the other k-core  sub-graphs further complicate the situation. so from fig.  <dig> it is evident that the proposed graph clustering is useful for discretely extracting molecular biological functional units in protein-protein interaction networks.

comparison of ppi and random networks
producing different but statistically reasonable outputs when the algorithm is applied to different type of networks would be supportive in favor of the performance of the algorithm. hence we compare ppi and random networks in terms of number and size of complexes in them generated by the present algorithm. for this purpose, we use the yeast s. cerevisiae ppi network because unlike the e. coli network of fig.  <dig>  it contains a large number of protein-protein interactions which is good enough for statistical analysis. we extract a set of  <dig> unique binary interactions involving  <dig> proteins by discarding self-interactions of the ppi data obtained from  <cit> . for the sake of rational comparison, we prepared a random graph of the same size  of the yeast ppi network. erdös and rényi first studied random networks in the late 1950s and showed that the degree distribution of a random network for a large |n| approximately follows poisson's distribution  = e-λλk/k!)  <cit> . it is reported that the degree distribution of a ppi network follows the power law  ~k-r)  <cit> . fig.  <dig> shows the degree distribution of the s. cerevisiae ppi network and that of the generated random network used in this work . the degree distribution of the random network in fig.  <dig> resembles poisson's distribution, which is consistent with erdös-rényi network model. the degree distribution of the yeast ppi network is consistent with the power law distribution.

in total we generated  <dig> overlapping and  <dig> non-overlapping sets of complexes by using cpin= <dig>  and din =  <dig> ,  <dig> ,  <dig> ,..., <dig>  or  <dig>  for both the ppi and the random networks. out of these, the complexes concerning the yeast ppi will be referred to as ' <dig> sets of yeast complexes' in the rest of this paper. fig  <dig> shows the relation between din and the total number of complexes. the random graph has more complexes than the yeast ppi in the region din> <dig>  ). the distribution of the complexes generated using din =  <dig>  is shown in fig.  <dig>  2-protein complexes are much more in the random graph. however bigger complexes  are much more in the yeast ppi. it is further evident from fig.  <dig> that most of the high-density complexes in the random graph are simple complexes consisting of  <dig> or  <dig> nodes each because the size of the biggest complex in the high-density region is very small. even in the low-density region, the size of the biggest cluster is much lower compared to that of the yeast ppi network indicating that there is almost no cluster structure in the random graph. also we calculated and found that the traditional clustering coefficient  of the random network  is much lower than that of the yeast ppi network . a cluster of size  <dig> that represents just one interaction is a trivial cluster. hence, we counted the clusters of size ≥  <dig> in both the random and the ppi networks ). many 3-protein complexes with  <dig> edges  are generated when din= <dig>  is used. such 3-protein complexes are far more common in random graphs. this is evident from the sudden drop after din= <dig> , because when din= <dig>  is used the aforementioned type of 3-protein complexes are not generated. the average size of the generated complexes is higher in low-density regions but it is lower in high-density regions for both the random and the yeast ppi network ). however, for random graph it is higher than that of the yeast ppi network in low-density region but very rapidly decreases with increasing density and eventually becomes lower  compared to that of the yeast ppi network. this trend also implies that the cluster structure is almost absent in the random graph.

the effect of cpin on clustering
we used cpin= <dig>  for the experiments discussed in previous sections. however the variation of cpin can also affect the outcome of the clustering. to observe the overall effects of cpin, we utilized the ppi network of yeast because it is reasonably big. from fig.  <dig>  it is evident that if very high cpin is used the variation of din does not affect much. similarly, if very high din is used, the variation of cpin does not have much effect. if high value is used for either cpin or din, the generated clusters are of high density but smaller in size and hence relatively more in number ). however, many such clusters are trivial clusters consisting of only two proteins and therefore the number of clusters of size ≥  <dig> are lower in sets generated using high values for cpin or din ). the highest number of clusters of size ≥  <dig> is obtained in case of cpin= <dig>  and din= <dig> . many clusters in this case are 3-protein clusters of density  <dig> . the size of the biggest cluster and the average size of the clusters are larger when both cpin and din are low and these values are low when either cpin or din is high ) and 4). for cpin< <dig>  the variation of din has noticeable effect on clustering and this effect quickly reduces for cpin> <dig>  in the case of the yeast ppi. in general, from the periphery tracking point of view, we consider that a reasonable and balanced value for cpin is  <dig>  because it is in the middle of the parameter space. however it can be said that the larger the value of cpin the more spherical the structure of the generated complexes.

analysis on the predicted complexes of yeast
some members of the  <dig> sets of yeast complexes  are common in more than one set and some are unique to a single set. each of the generated complexes may have its own significance. however it is beyond the scope of this paper to discuss the biological significance of all these complexes . here, we compare the predicted complexes with known complexes to find out how they match, evaluate the quality of the predicted complexes in a general sense and describe a bit detail of a group of specific complexes.

comparison with the known complexes
we obtained a list of known complexes together with constituent protein names from  <cit> . the distribution of these complexes with respect to size is shown in fig.  <dig>  which implies that many of the known complexes are small in size. there are a total of  <dig> manually annotated complexes but for the present experiments we consider only  <dig> complexes that consists of two or more proteins each. we use the same scoring scheme used in  <cit>  to determine how effectively a predicted complex matches a known complex. the overlap score between a predicted and a known complex is calculated by using .

ω=i2a×b     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqahjpwdcqgh9aqpdawcaaqaaiabdmgapnaacaaaleqabagaegomaidaaagcbagaemyyaemaey41aqraemoyaigaaiaaxmaacawljawaaewaaeaacqaizawmaiaawicacaglpaaaaaa@3a83@

here, i is the size of the intersection set of a predicted complex with a known complex, a is the size of the predicted complex and b is the size of the known complex. in fig.  <dig>  we show the plot of the number of matched known complexes with respect to the minimum overlap score for the  <dig> sets of yeast complexes. in  <cit>  it is assumed that a predicted complex more or less matches a known complex if its overlapping score is above  <dig> . in fig.  <dig>  the best result at overlapping score ω =  <dig>   is obtained for two sets generated using din= <dig>  with overlapping and non-overlapping modes. complexes produced by using high din are many in number but smaller in size and most of the known complexes are also of small size ). hence best matching is obtained for sets generated using high din values. however, the union of the matched known complexes for all the sets denoted by solid square dots are reasonably larger than matched known complexes of any single set and not all but many of the  <dig> sets have unique contributions to it. therefore generating complexes using different values of din is useful for protein complex prediction. however, concerning a single set more matching can be expected for a set produced using high din value.

for each of the sets, the number of matched known complexes is somewhat higher than the number of corresponding predicted complexes. this implies that in some cases more than one known complexes match with a single predicted complex. fig.  <dig> illustrates this for complexes having an overlapping score above  <dig> . a similar trend has been reported in  <cit> .

the outcome of the prediction greatly depends on the input network. in general it can be suggested that the larger the amount of interaction data the larger the amount of information contained in the network and the better the predictions. we applied our algorithm to mips  interaction data . in  <cit>  one of the data sets consists of  <dig> interactions involving  <dig> proteins collected from mips and several other sources. both of these data sets are not exactly the same and a direct comparison of the results is not possible. however, with any single combination of parameters, in  <cit>   <dig> mips complexes have been predicted with overlapping score above  <dig>  while in the present work  <dig> mips complexes have been predicted with overlapping score above  <dig> . so far we realize,  <dig> parameter combinations were explored to find out the best combination in  <cit> , while we explored only  <dig> combinations. therefore, ensuring density and simultaneously checking periphery is a suitable strategy to find out protein complexes from interaction networks.

overall quality of the predicted complexes
it has been stated in  <cit>  that 65% of  <dig> interactions  occurred between protein pairs with at least one common function. similar results have been reported in  <cit> . though the majority of the interactions are between similar function protein pairs, there are many instances of interactions between proteins of different functions. but, it is reasonable to assume that interactions that are part of a complex are between similar function protein pairs. in other words, it can be said that the quality of a predicted complex is good if it contains mostly similar function proteins. to examine the quality of the predicted complexes, we estimate the relative amount of interactions that are between similar function protein pairs out of intra-complex interactions for the  <dig> sets of yeast complexes using .

ra=∪i=0nsfii∪i=0naii     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgsbgucqwgbbqqcqgh9aqpdawcaaqaamaatadabagaem4uamlaemoraykaemysak0aasbaasqaaiabdmgapbqabaaabagaemyaakmaeyypa0jaegimaadabagaemoba4ganiablqiivbaakeaadawewaqaaiabdgeabjabdmeajnaabaaaleaacqwgpbqaaeqaaaqaaiabdmgapjabg2da9iabicdawaqaaiabd6gaubqdcqwiqisvaaaakiaaxmaacawljawaaewaaeaacqai0aanaiaawicacaglpaaaaaa@48dc@

here, n is the number of complexes of size ≥  <dig> in a set, sfii is the number of interactions of cluster i, that are between protein pairs of identical functional class, and ali is the number of all interactions in cluster i of the corresponding set. we considered  <dig> functional classes from mips ). fig.  <dig> shows the relation between ra and din. there is a sudden rise from din =  <dig>  to din =  <dig> . thus the complexes having density  <dig>  or more have high statistical significance. when complexes are generated using din =  <dig> , many of the complexes consist of three proteins and two interactions . on the other hand when din =  <dig>  is used, the aforementioned type of 3-protein complexes are excluded. therefore, it may be concluded that many of the interactions contained in 3-protein complexes of density  <dig>  are not interactions between similar function protein pairs. the functions of all the proteins involved in the network or complexes are not yet known. it is noticeable that the percentage of interactions between similar function protein pairs is higher in high-density complexes and this percentage might increase if the functions of all the proteins were known. hence it can be concluded that the interactions that form high-density clusters in ppi networks represent functional complexes and can be considered as true interactions with high probability.

details of a group of predicted complexes
in this section, we illustrate the presence of similar function proteins in complexes using specific examples and thus point up that the proposed algorithm can be used for prediction of protein functions. fig  <dig> presents information on the complexes that are of size ≥  <dig> of the set generated using din =  <dig> , cpin =  <dig>  and non-overlapping mode. the heights of the columns of a histogram are proportional to the number of proteins of a complex belonging to the corresponding functional classes. a protein may belong to more than one functional class. the highest column/columns of a histogram are colored as red. it is noticeable that in most of the cases the red columns are very near to the maximum possible height indicating that most of the proteins of any complex have one or more common function/functions. to further prove that the accumulation of proteins of a given functional group in a complex did not happen merely by chance, we calculated p-values of these complexes using , which is based on hyper geometric distribution.

p=1−∑i=0k−1     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgqbaucqgh9aqpcqaixaqmcqghsisldaaewbqaamaalaaabawaaewaaeaafaqabegabaaabagaemorayeabagaemyaakgaaagaayjkaiaawmcaamaabmaabaqbaeqabiqaaaqaaiabd6eaojabgkhitiabdaeagbqaaiabdoeadjabgkhitiabdmgapbaaaiaawicacaglpaaaaeaadaqadaqaauaabeqaceaaaeaacqwgobgtaeaacqwgdbwqaaaacagloagaayzkaaaaaiaaxmaacawljawaaewaaeaacqai1aqnaiaawicacaglpaaaasqaaiabdmgapjabg2da9iabicdawaqaaiabdugarjabgkhitiabigdaxaqdcqghris5aaaa@4d3e@

here n, c and f are the sizes of the whole network, a complex and a functional group in the network respectively and k is the number of proteins of the functional group in the complex. the smallest p-value with bonferroni correction  <cit>  corresponding to each complex is shown in fig.  <dig> and the very low p-values indicate the statistical significance of the complexes.

given the fact that proteins of a particular complex are of similar function, if we apply the present algorithm to interaction networks consisting of known and unknown function proteins then it is likely that function-unknown proteins will form cluster with similar and function-known proteins. this may enable us to predict the function of proteins. for example, let us consider the complex  <dig> of fig.  <dig>  whose network is shown in fig.  <dig>  protein ydr425w of this complex is related to cellular transport and yip <dig>  ygl198w, ygl161c and gcs <dig> are related to vesicular transport. hence, we predict the function-unknown protein ypl095c of this complex is a transport related protein most likely related to vesicular transport. by analyzing all the generated complexes in a similar way the functions of many other function-unknown proteins can be predicted.

CONCLUSIONS
in this paper we have described an algorithm to detect protein complexes in large interaction networks where a node represents a protein and an edge represents an interaction. we represent the interaction network as an undirected simple graph and then generate clusters in it by ensuring density and checking periphery of the clusters. the input to the algorithm is the associated matrix of an interaction network and the outputs are protein complexes whose densities are more or equal to a threshold value. the worst case timing complexity of the algorithm is polynomial of the order o, where |n| is the number of nodes of the network. we show the performance of the algorithm by applying it to two typical ppi networks of e. coli and s. cerevisiae. we find that similar function proteins usually cluster together which represent molecular biological functional units. therefore, it is possible to predict the functions of proteins by applying the algorithm to a network that contains both function known and function unknown proteins. a comparison of ppi and random network is also performed in the context of the proposed algorithm and it is observed that the organization of a ppi network is different from that of a random network.

