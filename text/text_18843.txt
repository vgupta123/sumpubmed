BACKGROUND
many mechanisms of biological processes are controlled by complex regulatory interactions between genes rather than by a single gene  <cit> . therefore, identifying the gene regulatory interactions is essential to improving our understanding of biological processes. a gene regulatory relation often changes over time rather than being constant. however, many gene regulatory networks available in databases or literatures are static in the sense that they are either snapshots of gene regulatory relations at a time point or union of successive gene regulations over time. static gene regulatory networks are simpler and easier to construct and understand than dynamic networks, but temporal aspects of gene regulations such as the order of the gene regulatory interactions and the pace of the interactions are ignored in static networks.

a gene involved in regulatory interactions with others has at least one activator or inhibitor. an activator initiates the transcription of the gene, so high level expression of the gene is not possible without an activator  <cit> . thus, identifying genes and their activators or inhibitors is the key to constructing gene regulatory networks. silvescu et al.  <cit>  characterize the gene regulatory network in a boolean model with multiple-time delays. but the boolean model is restricted to logical relationships between variables. probabilistic boolean networks  <cit>  and dynamic bayesian networks  <cit>  can reconstruct longitudinal regulatory networks from a set of mathematical equations if the equations precisely specify the networks, but fail when the underlying model is not correct  <cit> .

in general dynamic relations are best represented by a system of differential equations, but differential equations are not typically used to represent dynamic gene regulatory relations. this is because dynamic gene regulatory interactions are not understood fully enough to derive differential equations despite the large amount of gene expression data available today. even if differential equations are derived, they are often hard to solve. as shown later in this paper, we have developed a qualitative method for inferring dynamic gene regulatory interactions and visualizing them without deriving or solving a set of differential equations.

this paper presents a computational approach to uncovering gene regulatory relations and their temporal properties from a time-series gene expression data using a modified pearson correlation coefficient and a new score scheme. for the temporal properties of gene regulatory relations, we infer the order of the gene regulatory interactions and the pace of the interactions. the identified gene regulatory interactions and their temporal aspects are stored in the regulation list and visualized as a gene regulatory network. all the algorithms have been implemented as a program called genenetfinder  and tested on several gene expression data. the rest of this paper presents the algorithms and their experimental results.

methods
scoring scheme for gene regulatory relationships
the gene expression data of m genes with n samples is represented as an m × n matrix, where rows represent genes and columns represent various samples such as experimental conditions or time points in a biological process. each element of the matrix represents the expression level of a particular gene in a particular sample. two genes with similar expression patterns tend to be co-expressed at different time points. figure  <dig> shows an example of the gene expression data for yeast genes during the yeast cell cycle, obtained from the yeast cell cycle analysis project  <cit> .

the gene expression matrix is analyzed for similarity between gene expressions at different time points. three metrics are often used to measure the similarity of genes: pearson correlation coefficient  <cit> , euclidean distance  <cit>  and spearman correlation  <cit> . to evaluate the regulatory relation between two genes, we modified the pearson correlation coefficient. r <dig> in equation  <dig> represents the correlation between gene x at time point i and gene y at time point i + p. p is the time span of the gene regulation.   

in equation  <dig>  n is the total number of time points contained in the time span, xk and yk are the expression levels of genes x and y at time k, and  and  are the average gene expression levels at all time points of the time span. the r <dig> score is in the range of . among the total i × p candidate regulations, the regulation with the maximum absolute value of r <dig> is selected as the regulatory relation between genes x and y. if the expression level of gene x increases before that of y increases, x is a candidate activator of gene y; if the expression level of gene x increases before that of y decreases, x is a candidate inhibitor of y.

the modified pearson correlation coefficient r <dig> is useful for finding gene regulatory relations with a significant change in expression levels. but, it cannot distinguish gene regulatory relations with the same correlation but different gene expression levels . therefore, we use an additional score r <dig>  which is the euclidean distance of the expression levels of the two genes. the score r <dig> for the gene regulatory relation between x and y is computed by equation  <dig>    

where  

in equation  <dig>   and  are the average gene expression levels at all time points in the time span. xmax is the maximum gene expression value of gene x.  and  are the maximum and minimum gene expression value of gene y, respectively.

both r <dig> and r <dig> scores are intended to represent a relation between a regulator gene x and its potential receiver gene y. the regulatory relation between x and y is not symmetric, so r <dig> ≠ r <dig> and r <dig> ≠ r <dig>  an interesting observation from the actual data is that two genes with r <dig> score <  <dig> tend to have an inductive relation, whereas those with r <dig> scores >  <dig> tend to have an inhibitory relation. for example, in the dataset of  <dig> yeast genes,  <dig> % of the activations have r <dig> scores <  <dig>  and  <dig> % of the inhibitions have r <dig> scores >  <dig>  in an extended dataset of  <dig>  yeast genes,  <dig> % of the activations have r <dig> scores <  <dig>  and  <dig> % of the inhibitions have r <dig> scores >  <dig>  hence, we consider a gene regulation with r <dig> score <  <dig> as an activation, and that with score >  <dig> as an inhibition.

inferring gene regulatory relationships
in the microarray data for gene expression, we use the log-ratio  of the red and green intensities. thus, genes with mrna abundance have positive log-ratios whereas those with absence of mrna have negative log-ratios. from the gene expression profiles, we identify the gene regulations and include them in the regulation list. in the regulation list, +a indicates that gene a is up-regulated at time t, and -a indicates that gene a is down-regulated at time t. the symbol '→' represents a directional relationship between genes. there are four possible gene regulatory relations between two genes:

 <dig>  +a → +b: up-regulation of a at time t <dig> is followed by up-regulation of b at time t <dig> .

 <dig>  -a → +b: down-regulation of a at time t <dig> is followed by up-regulation of b at time t <dig> .

 <dig>  +a -> -b: up-regulation of a at time t <dig> is followed by down-regulation of b at time t <dig> .

 <dig>  -a → -b: down-regulation of a at time t <dig> is followed by down-regulation of b at time t <dig> .

the regulatory relation of gene a with gene b is determined by the sign of the r <dig> score of the genes. a relation with a positive r <dig> score implies that gene a activates gene b whereas a regulation with a negative r <dig> score implies that a inhibits b. the r <dig> score of each gene regulation is iteratively calculated using algorithm  <dig>  for genes a and b, the regulation with the largest absolute r <dig> score is chosen for the regulation between the genes and represented as r <dig>  algorithm  <dig> provides the top-level description of the method for inferring gene regulations and constructing a list with the regulations.

algorithm 1
construct a regulation list

1: compute r <dig> between gene a at time point t <dig> and gene b at time point t <dig> + p for all pairs of genes.

2: select the regulation with the largest absolute value of r <dig> 

3: if  <dig> <p <  <dig>  classify the regulation into one of the four types, +a → +b, -a → +b, +a → -b, -a → -b, and add it to the regulation list.

4: if p =  <dig>  two genes are co-expressed or co-inhibited, and such gene regulation is not added to the regulation list.

5: if the new gene regulation is already in the regulation list, merge it with the previous regulation.

6: go to step  <dig> to find the next gene regulation until no more regulation found.

after we construct a regulation list, we compute the r <dig> score for the gene pairs in the regulation list. some local maximum or minimum values are ignored when computing the r <dig> score in a long time span. for example, all the three time spans shown in figure 3a include at least  <dig> time points . expression levels of gene clb <dig> has several wave peaks in the time span of cdc <dig>  but only the maximum value in sub-timespan  <dig> of cdc <dig> will be selected when computing the r <dig> score in the time span of cdc <dig>  time spans are divided into smaller sub-timespans as follows, and the r <dig> score is not computed for sub-timespans with less than  <dig> time points.

 <dig>  a time point with the minimum expression level of the regulator gene becomes a splitting point of the time span.

 <dig>  each sub-timespan starts with at least  <dig> consecutive time points that have a positive slope of a curve representing gene expression levels, and ends with at least  <dig> consecutive time points with a negative slope.

 <dig>  each sub-timespan encompasses at least  <dig> time points, including the start and ending time points.

for example, the time span cdc  <dig> of figure 3a is the longest one in the gene regulatory relation +clb1-> +swi <dig>  and split into  <dig> sub-timespans. the first sub-timespan of cdc <dig> has less than  <dig> time points, so the r <dig> score is not computed for the first sub-timespan. the r <dig> scores for the second and third sub-timespans are  <dig>  and  <dig> , respectively. figure 3b is another example of a gene regulatory relation +clb <dig> -> -clb <dig>  the time span cdc <dig> is split into  <dig> sub-timespans, and the third sub-timespan has only  <dig> time points. so, the r <dig> score is computed for the remaining three sub-timespans, which are  <dig> ,  <dig> , and  <dig> , respectively.

visualization of gene regulatory networks
all gene regulations identified in the previous step are visualized as a 2-dimensional gene regulatory network, in which a node represents a gene. edge types and edge labels of the network represent gene regulatory relations. arrows represent inductive interactions  -> +b and-a -> +b) and blocked arrows represent inhibitory interactions  -> -b and -a -> -b). the regulator gene, type of regulation , and time delay of the regulation are annotated as edge labels. each edge is labeled with r/s/t to indicate a regulator gene r, sign s of the log-ratio of the expression level of r, and the time delay t of the regulation.

for visualization of gene regulatory networks, two layout algorithms have been developed: grid layout and layered layout. as described in algorithm  <dig>  the grid layout algorithm positions all nodes at grid points. the node with the highest degree will be placed at the center grid point . then, we position all nodes connected to the center node at adjacent grid points. nodes with a higher degree are positioned earlier than those with a lower degree in the east, north, west, south, northeast, southwest, and southeast grid point of the current node . other nodes connected to the positioned nodes are placed in the same manner.

the layered layout algorithm, described in algorithm  <dig>  puts all nodes to horizontal layers. the node with the maximum degree is assigned to the top layer, and the nodes connected to the node are put in the next layer. if a layer has two nodes connected to each other, it makes a new layer above the layer and moves the node with a smaller degree to the new layer. the layered layout usually takes more time than the grid layout.

algorithm 2
grid layout

1: find the node with the highest degree, and place it at the center grid point.

2: if there is a tie, select a node with a higher out-degree. position all nodes connected to the center node in the adjacent grids. nodes with a higher degree are positioned earlier than those with a lower degree in the east, north, west, south, northeast, northwest, southwest, and south east grid of the center node. if more than  <dig> nodes are connected to the center node, put the 9th node to the east of the 1st node, the 10th node to the north of the 2nd node, and so on.

3: repeat step  <dig> for nodes connected to nodes that are already positioned. if an adjacent grid is occupied, move to the next possible position until it is available.

4: if there are disconnected nodes, repeat step  <dig> for the nodes and put them to the right of the previous subgraph.

algorithm 3
layered layout

1: put the node with the maximum degree at layer  <dig>  if there is a tie, select a node with a higher out-degree.

2: assign the nodes connected the nodes at layer i to layer i+ <dig> 

3: repeat steps  <dig> and  <dig> for the remaining nodes.

4: if two nodes at the same layer are connected to each other, make a new layer between the layer and the upper layer and move the node with a smaller degree to the new layer. nodes with  <dig> out-degrees are also moved to the new layer.

5: order the nodes in each layer by the barycenter method  <cit> .

6: if there are disconnected nodes, repeat steps 1- <dig> for the nodes and put them to the right of the previous subgraph.

RESULTS
we implemented the algorithms in a program called genenetfinder using microsoft visual c#. genenetfinder is executable on any windows systems, and the program and sample data of genenetfinder are available at http://wilab.inha.ac.kr/genenetfinder. given a time-series data of gene expressions in log-ratios, it identifies gene regulatory interactions and visualizes them. this section shows the experimental results with the gene expression data of yeast cell cycling and human cell cycling.

microarray data of  <dig> genes in the yeast cell cycle
the dataset of the yeast cell cycle, shown in figure  <dig>  includes  <dig> genes of yeast cell cycle from the saccharomyces cerevisiae cell cultures  <cit> . the  <dig> yeast genes are known to be involved in the cell-cycle regulations. for the cell cycle genes, we first selected well-known genes and their regulator or regulated genes. clb genes, for example, are known to promote cell cycle progression into mitosis  <cit> . cln genes were selected because they have regulatory relations with clb genes. the remaining genes were chosen randomly. there are  <dig>   <dig>   <dig> time points in the time spans of alpha-factor, cdc <dig> and cdc <dig>  respectively.

from the dataset, genenetfinder identified  <dig> gene regulations and constructed a list of the gene regulations . figure 3a shows the gene expression levels of clb <dig> and swi <dig>  gene swi <dig> encodes a transcription factor that activates transcription of genes expressed at the m/g <dig> boundary and in g <dig> phase. genes clb <dig> and swi <dig> showed similar expression patterns and the r <dig> score computed for their relation was  <dig> . for the two genes, genenetfinder inferred a gene regulatory relation +clb <dig> → +swi <dig>  which means that up-regulation of clb <dig> is followed by up-regulation of swi <dig> at the next time point. this regulatory relation agrees with the experimental results by althoefer  <cit> . the time span cdc <dig> of figure 3a is the longest on in the gene regulatory relation +clb <dig> →- +swi <dig>  and divided into  <dig> sub-sections. the  <dig> sub-sections showed the r <dig> scores of  <dig> ,  <dig>  and  <dig> . figure 3b shows another gene regulatory relation +clb <dig> → -clb <dig>  this relation also had the time span of cdc <dig>  which was split into  <dig> sub-timespans with the r <dig> scores of  <dig> ,  <dig>  and  <dig> .

underlined entries denote the regulations determined by experimental methods, and italicized entries denote the regulations implied by previous studies.

there are several resources that can be used to assess the gene regulations inferred by the program. we searched the kegg, sgd and cygd databases and literatures to see whether the databases contain a gene regulation that agrees with the identified gene regulation. kegg has  <dig>  pathways whereas sgd  and cypd  provide genetics and functional networks of the budding yeast saccharomyces cerevisiae, respectively. gene ontology  <cit>  can also be used to obtain gene regulatory relations; if a gene has a go annotation of 'regulates' or 'regulated by', the gene can be considered as being involved in a gene regulation.

gene regulations identified by the program are classified as certain, possible and uncertain depending on the number of supporting evidences :

 <dig>  a gene regulation is certain when it has at least two supporting evidences.

 <dig>  a gene regulation is possible when its r <dig> score is either <  <dig> or >  <dig>  and no other evidences.

 <dig>  a gene regulation is uncertain when it has no supporting evidence.

in the dataset of the yeast cell cycle, a total of  <dig> gene regulations were inferred by genenetfinder . there were  <dig> certain gene regulations.  <dig> out of the  <dig> gene regulations, +cdc28->+swi <dig> +hcm <dig> -> -clb <dig>  +hcm <dig> -> -cln <dig> and +mga <dig> -> +cdc <dig>  had supporting evidences both in the databases and go annotations.  <dig> out of the  <dig> gene regulations showed exact agreement with the known regulations in the databases. only one gene regulation +usv1->-skm <dig> had the r <dig> score >  <dig> and the go annotation about the regulation. these  <dig> gene regulations are marked as underlined entries in table  <dig>  and more details are available in additional file  <dig> 

 <dig> out of the  <dig> gene regulations, written in italics in table  <dig>  were possible regulations. they had the r <dig> score either <  <dig> or >  <dig> with no further supporting evidence. these regulations should be verified by experimental evidence. the remaining  <dig> gene regulations had the r <dig> score between  <dig> and  <dig> and no supporting evidence, so they are uncertain regulations. even if the  <dig> regulations are false positives, at least  <dig> %  of the regulations inferred by genenetfinder agreed with known gene regulations. table  <dig> shows the regulations for the first four time points only, and there are two more regulations identified at time points t+ <dig> and t+5: -clb <dig> -> +cdc <dig>  <cit>  and -cdc <dig> -> -clb <dig>  <cit> .

the gene regulations should be consistent with the phase characteristics of the cell cycle. for example, clb <dig> promotes progression of cells into the s phase and expresses periodically throughout the cell cycle  <cit> . clb <dig> and clb <dig> both promote cell cycle progression into mitosis and their transcripts accumulate during g <dig> and m. these biological processes are characterized by two regulations, +clb <dig> -> -clb <dig> and +clb <dig> -> -clb <dig>  and these are included in the regulation list found by genenetfinder . figure  <dig> shows the gene regulatory network of all the gene regulations of table  <dig> 

microarray data of  <dig> genes in the human cell cycle
this data set includes  <dig> genes in the human cell cycle  <cit> . the gene expression during the human cell cycle is synchronized by double thymidine blocking , thymidine-nocodazole blocking  and mitotic selection . additional file  <dig> shows the data of  <dig> genes in the human cell cycle. all regulations identified by genenetfinder are given in additional file  <dig>   <dig> of  <dig> potential gene regulations were found in at least one of kegg, entrez gene, bind and pubmed, and  <dig> of the  <dig> regulations had been determined by experimental methods. thus, at least  <dig> % of the identified regulations are in agreement with known regulations. figure  <dig> shows the regulatory network of  <dig> human genes in the first time span along with the user interface of genenetfinder.

for further evaluation, we selected some genes. gene ccna <dig> encodes proteins of the highly conserved cyclin family which plays an important role in the cell cycle. ccna <dig> binds and activates cdc <dig> kinases, and thus promotes both cell cycle g1/s and g2/m transitions. then cdc <dig> encodes proteins which are members of the ser/thr protein kinase family. this protein is a subunit of the highly conserved protein kinase complex and essential for g1/s and g2/m phase transitions. in the kegg pathway database, we found that cdc <dig> interacts with e2f <dig> and skt <dig>  and e2f <dig> has direct regulatory relationships with cdc <dig>  ccna <dig> and brca <dig>  the protein encoded by the gene e2f <dig> is a member of the e2f family of transcription factors. the e2f family plays a crucial role in the control of cell cycle and action of tumor suppressor proteins. in summary, ccna <dig> interacts with e2f <dig>  cdc <dig>  and cdkn1a; cdc <dig> interacts with e2f <dig>  ccna <dig>  ccnb <dig>  cdc25a, cdc25b, cdc25c and cdkn1a; and ccnb <dig> interacts with cdc <dig>  ccnf, brca <dig> and cdkn1a. all these regulations agree with the regulations identified by genenetfinder.

discussion
we tested genenetfinder on datasets of different sizes to see the effect of changes in genes on the prediction performance of the program. in the dataset of  <dig> yeast genes, it inferred  <dig> gene regulations, and  <dig> out of the  <dig> regulations have at least two supporting evidences such as agreement with the known data of databases, agreement with go annotations, r <dig> score <  <dig> for activation, and r <dig> score >  <dig> for inhibition . these regulations are classified as certain regulations in our study.  <dig> out of the  <dig> gene regulations have r <dig> score either <  <dig> or >  <dig>  and these regulations are possible regulations. thus,  <dig> % of the gene regulations inferred by genenetfinder can be considered correct . in a similar way, we tested genenetfinder on datasets of different number of genes, which were selected randomly from a pool of  <dig> genes in each run. the prediction was computed by taking the average of  <dig> runs in each dataset. datasets of different sizes resulted in slightly different but similar prediction accuracies, and all of them are above 74%. details are available at http://wilab.inha.ac.kr/genenetfinder/supplements_ <dig> htm.

genenetfinder was tested on a different number of genes, which were selected randomly in each run from a pool of  <dig> yeast genes. the accuracy shown in the table is the average of  <dig> independent runs. correct regulations include certain regulations and possible regulations.

there are a few programs that can infer gene regulatory interactions from time-series gene expression data  <cit> . asian  <cit> , for example, finds correlation relationships between gene clusters and visualizes them as an undirected graph. while gene regulatory networks visualized by genenetfinder represent gene regulatory interactions between individual genes along with temporal aspects of the interactions, networks visualized by asian represent correlations between gene clusters. thus, it cannot show regulatory interactions between individual genes nor the order or pace of the interactions. biotapestry  <cit>  is an interactive tool for building and visualizing gene regulatory networks. for visualizing gene regulatory networks biotapestry uses different layout methods from genenetfinder, and temporal aspects of gene regulatory interactions are not automatically shown as edge labels of the networks. biotapestry allows flexible edge labels, which can be annotated with any properties specified by the user.

CONCLUSIONS
gene regulatory interactions usually change over time rather than being constant, but many databases or literatures provide static gene regulatory networks only. they are either snapshots of gene regulatory relations at a time point or union of successive gene regulations over time. static gene regulatory networks are easier to construct and understand than dynamic networks, but cannot provide information on temporal aspects of gene regulations.

this article has presented an algorithm for qualitatively reasoning dynamic gene regulatory relations from gene expression data using two types of scores, r <dig> and r <dig>  the algorithm has been implemented in a program called genenetfinder. from the time-series data of gene expression, genenetfinder infers not only gene regulatory interactions but also the temporal aspects of the regulatory interactions. as for the temporal aspect of gene regulatory relations, it identifies the order of the gene regulatory relations and the pace of the relations. the identified gene regulatory interactions and their temporal aspects are stored in the regulation list and visualized as a gene regulatory network. in the network visualized, gene regulations and their temporal aspects are represented by edge types and edge labels.

we tested genenetfinder on several datasets, including the yeast cell cycle data and the human cell cycle data. experimental results indicate that the dynamic nature of dynamic gene regulatory interactions can be identified and represented qualitatively without deriving or solving a set of differential equations describing the interactions. genenetfinder is yet a prototype, but the approach of our work would be useful for identifying dynamic gene regulatory interactions from the large amount of gene expression data available at the present time. in particular, the gene regulatory networks constructed by genenetfinder can be used to find new gene regulatory relations or to refine known regulatory relations.

competing interests
the authors declare that they have no competing interests.

authors contributions
yu chen developed the algorithm and prepared the first draft of the manuscript. byungkyu park helped yu chen develop the method. kyungsook han supervised the work and rewrote the manuscript.

supplementary material
additional file  <dig> - regulation of  <dig> yeast genes during the cell cycle
supplementary data at http://wilab.inha.ac.kr/genenetfinder/supplements_ <dig> htm

 additional file  <dig> - regulation of  <dig> human genes during the cell cycle
supplementary data at http://wilab.inha.ac.kr/genenetfinder/supplements_ <dig> htm

 additional file  <dig> - regulation of  <dig> yeast genes during the cell cycle
supplementary data at http://wilab.inha.ac.kr/genenetfinder/supplements_ <dig> htm.

 acknowledgements
this work was supported by the national research foundation of korea  grant  and by the mid-career researcher program through nrf grant  funded by the mest.

this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2010: ninth international conference on bioinformatics : computational biology. the full contents of the supplement are available online at http://www.biomedcentral.com/1471-2164/11?issue=s <dig> 
