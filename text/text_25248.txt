BACKGROUND
the practice of systems biology seeks to comprehend the complexity of organisms, or their subsystems, by combining many different kinds of data  to create predictive models  <cit> . in current practice, as biologists explore their data, they typically create manual, ad hoc connections among software tools and databases, cutting and pasting queries, creating temporary files, running web searches, and taking notes. this strategy does not scale well, and so, in response, several software projects have arisen to offer computer-assisted data and software integration. notable among these are toolbus  <cit> , taverna  <cit> , cacore  <cit> , each of which uses semantic mapping to ensure that entities in one environment are appropriately related to entities in another. while it is appealing in the abstract, this approach can be quite costly, which may explain why, despite many person-years of engineering effort, these projects have not yet been widely adopted in the biological community.

implementation
the gaggle: an overview
the gaggle  <cit>  uses a minimalist approach to integrate data and software. it is written in java and uses standard java libraries. it is simple to install, and easy to update; new data sources and software tools can be added with minimal implementation costs. a small server program  provides communication among analysis and display programs  which are modest adaptations of existing  bioinformatics and computational biology programs and web resources. the boss and the geese all run as separate programs on the user's desktop computer, communicating with each other, at the user's behest, by passing simple messages.

in the gaggle, semantic flexibility  <cit>  – the notion that "word meanings are not ... fixed and unchanging, but tend to vary according to the context of their use" – is seen as a solution to the complications of data integration, rather than as a problem that must be solved before integration can begin. four data types , distilled into a semantically simple form, are passed between the geese, whereupon they take on richer meaning in the context of each goose. for example, the gene name "hp0352" identifies  a flagellar motor switch protein in three kegg  <cit>  pathway maps,  a node in a cytoscape  <cit>  association network,  a row in a matrix to a microarray data viewer, and  a set of pubmed abstracts to a literature search tool. the biological semantics attached to the gene name in each of these environments are rich, significant, and though overlapping, somewhat different. but in the gaggle's approach to software and data integration, no formal mapping and no explicit integration are needed. it suffices to simply pass the gene name  to each environment, where in each case a different web of meanings is invoked.

the gaggle does not, however, preclude the use of applications and data repositories which are built upon, and offer the benefits of, careful semantic mapping. this is demonstrated by the kegg goose, which submits queries to and retrieves results from kegg. all carefully curated semantic mappings of gene name to metabolic pathways, biochemical reactions, cellular structures, dna sequences, protein functions, and orthology groups in kegg are obtained by merely passing gene names to this goose. as systems biology matures, we predict that many more such semantically rigorous resources will become available, and that they too will be easy to add to the gaggle using this same approach. similarly, large scale efforts such as sbml  <cit>  will continue to be complementary to the gaggle. however, we are also confident that, given the heterogeneity of systems biology data, it is unlikely that a single unifying language or unifying scheme will emerge. valuable work will continue to be done in more or less restricted domains and semantic flexibility will always be required to integrate them.

the gaggle in action: a simple introductory example
in a simple, prototypical use of the gaggle, genes of interest are first selected in some program – perhaps nodes in a cytoscape network. next, by pressing the "broadcast" button, the selected gene names are sent to other geese: the kegg goose and a microarray data viewer goose. the kegg goose will respond by displaying a list of pathways and structures in which those genes are implicated, and the microarray data viewer will plot the experimental data for those genes .

thus, a single mouse click performs all operations which would otherwise require:  writing down, copying or exporting the names of the selected cytoscape nodes to a file;  browsing to the 'search objects in kegg pathways' web page, and typing in, pasting, or otherwise loading the gene names from the file, making sure to prefix each name with the appropriate organism code; and finally  plotting the microarray data, again requiring the list of gene names to be typed, loaded, or pasted into the microarray data viewing program's 'select' function. in our experience, in absence of the gaggle, such data exploration involving more than a few genes can be tedious and error-prone. with the gaggle, even with a large number of genes, such exploration can be fast and dependable and can easily include a wide range of tools and data sources, all of which respond to a single mouse-click.

gaggle data types
there are four data types used in the gaggle, and broadcast at the user's request from program to program. they are all implemented as java classes, and they are all free of explicit biological semantics. they are: a list of names, a matrix, a network, and an associative array . these four are sufficient to capture all the kinds of data used in systems biology. instances of these data types are transmitted in serialized form using java rmi within the gaggle. name lists and associative arrays are standard java classes; network and datamatrix are gaggle-specific, and are documented at the gaggle website. some straightforward translation of these types into 'native' types is usually required when adapting a new program to the gaggle.

the gaggle boss
the gaggle always has a boss. this is a standalone java program  that relays messages between the programs in the gaggle. the boss's graphical user interface  displays the names of the currently registered programs, and provides the user with some basic controls: to hide or reveal particular programs, and to specify whether they are to accept or ignore messages. the boss can, in addition, be given extra capabilities, which are added via a plugin mechanism. in the example below , we use a species-specific annotation search capability which appears as a tab in the boss's gui.

current geese
when any java program has been adapted to run in the gaggle, we call it a 'goose', and we say that it has been 'gaggled'. this is a relatively simple operation: to gaggle a program requires only that it implement a dozen or so new programming calls . current geese in the gaggle include:

 <dig>  dmv: the datamatrixviewer, for navigating and selecting from experiments , and for displaying and plotting their numerical data .

 <dig>  cytoscape, with assorted plugins, for viewing protein-protein interactions, protein-dna interactions, association networks, biclusters discovered by the cmonkey algorithm  <cit> .

 <dig>  tigr's microarray expression viewer : a popular tool for microarray analysis  <cit> .

 <dig>  the r goose: using java-to-r translation classes provided by rosuda the r goose provides full access to the r statistical programming language and its many packages, including bioconductor  <cit> .

 <dig>  simple bioinformatics web browser: which provides easy access to web-based bioinformatics resources, e.g., kegg, embl's string, biocyc  <cit> .

starting the gaggle
the gaggle is often launched using java web start  <cit>  – a standard java technology for launching programs from a single click in a web browser. the gaggle boss and any number of geese may be set up, for example, as links on a laboratory's web page, perhaps including shared laboratory data; any scientist can then launch the programs with a few mouse clicks. with java web start, each goose is downloaded from the web server the first time it is run; it then runs locally on one's desktop computer like a standard installed program. on every subsequent launch of the program, a fresh version is downloaded only if the program has been updated on the web server. web start therefore simplifies distribution and maintenance of the gaggle, and of shared data. java web start, however, is not with a requirement of the gaggle; traditional installation and update procedures work fine as well.

supporting other programming languages in the gaggle
though java is an excellent general purpose language, it is not the right tool for every job and many bioinformatics tools are written in other languages. r  <cit> , for example, is the language of choice for statistics, c++ is preferred for applications in which speed is essential, and python and perl are scripting languages popular in the bioinformatics community. three strategies are available for accommodating these and other languages: cross-language interoperability , jvm-rehosting , and web services .

we employ the first strategy  in the r goose. the second strategy, jvm-rehosting, allows python programs to join the gaggle; we use the resulting jython geese for prototyping and debugging. jython geese and the r goose are excellent tools for exploratory data analyses that require scripting.

perl and c++ are not yet available directly within the gaggle. in order to use code written in these languages, a few possibilities exist: either jni 'glue' code must be written; the code must be made available as through soap as a web service; or the code must appear on the web behind a cgi interface.

software design and engineering
the gaggle's design is based upon the classic software engineering strategies of separation of concerns  <cit> , and parsimony, from which we derived these specific prescriptions:  use the fewest possible software elements,  keep each maximally ignorant of all others,  avoid biological semantics,  use mainstream programming languages, and only one such language if possible,  avoid operating systems dependencies,  make sure that existing popular software and data formats are supported,  place a priority on ease of installation and update. these principles led us to choose the general purpose programming language java, which has additional noteworthy features, including portability across operating systems, a simple and robust inter-process communication , and the means  to call programs written in other languages.

every program which runs in the gaggle is a separate, stand-alone program. a gaggle boss  is always started first. it provides a graphical interface to monitor and control the geese, and using rmi, the communications infrastructure. every goose, at startup, registers itself with the current boss.

we use the traditional java interface mechanism to specify both the extent to which each goose is aware of the boss and also the capabilities necessary for a program to become a full member of the goose. a java interface defines a type, without specifying how that type is implemented. this common programming strategy allows for the separation of what an object must do, from how it does it. in the gaggle, for example, every gaggled program must provide a handlenamelist method , but the actual implementation of this method will differ with every goose. these are presented below, followed by detailed explanations of some typical implementations of key methods in these interfaces. a full, compilable, and annotated listing of a minimal, functioning goose will be found in the supplement.

java rmi is the linchpin of the gaggle. this standard java component is a very sophisticated and robust technology for inter-process communication; fortunately, it is also very simple to use. it works like this: after an initial lookup to obtain a reference to the remote object  one program can subsequently call methods on that remote program just as if it were a local object. in the gaggle, we use rmi to broadcast data, and for housekeeping chores . the four gaggle data types  are all serializable, which means that java rmi can send 'across the wire' to the remote program, marshalling and demarshalling the data at each end. the four data types are defined as java classes, but all of them may be written to and read from disk in various formats, of which plain text and xml currently dominate. within a running gaggle, however, all of the data exists strictly as java objects.

the gaggle defines two simple class interfaces , as well as the four data types. a goose is an existing java program adapted to run in the gaggle; the adapation may be a plugin, a derived class, or an object added to the existing java program. only the methods listed below need to be implemented by every goose. since these methods – especially in the prototyping stage – can be stubs , the simplest adaptation of a program to the gaggle can be very simple indeed, as illustrated below:

goose.java

public interface goose extends remote

void connecttogaggle ();

void handlenamelist ;

void handlematrix  throws remoteexception;

void handlemap ;

void handlecluster ;

void handlenetwork ;

string getname ();

void setname ;

void dohide ();

void doshow ();

void doexit () ;

...

}

let's examine three representative goose methods .

connecttogaggle
this method looks up the address of the boss, registers itself with the boss, and receives a unique name in response.  henceforth the goose and the boss each have a reference to each other, and can communicate any of the messages specified in the other's interface. the crucial lines of code in this method are

boss =  naming.lookup ;

mygagglename = boss.register  this);

handlenamelist
perhaps the most used goose method. when one goose broadcasts a list of names to another, this is the method which executes in the receiving goose. the full signature of the method is

handlenamelist 

where the 'names' denote entities  in the organism named in the 'species' variable. in a typical implementation, i.e., in a network viewing program, this method would highlight all of the nodes whose names appear in the variable names.

dohide
this is an example of a gaggle housekeeping method. the boss calls this method on the goose, without additional arguments. the goose that receives the message typically responds by calling mainframe.setvisible  on its outermost jframe.

boss.java

public interface boss extends remote {

void string register ;

void broadcast ;

void broadcast ;

void broadcast ;

void broadcast 

...

}

in addition to the "boss.register" call shown above, a goose will make calls to one or more of the boss broadcast methods. the prototypical example here is that broadcast method which is overloaded for sending a list of names. the full signature is

broadcast ;

here, sourcegoosename identifies the goose which initiated the broadcast, names are typically of genes or proteins of interest, and species identifies the organism from which the gene or protein names come. one benefit for requiring the name of the goose initiating the broadcast  is that this allows the boss to avoid broadcasting back to the goose from which the broadcast originated.

when the boss receives this message, the boss will rebroadcast the message to the other geese in the gaggle, calling handlenamelist  on all listening geese . and thus we come full circle, broadcasting a list of names from the source goose, to the boss, and then to one or more destination geese. this sequence of events, of course, is usually initiated by the biologist clicking a 'broadcast' button in a gaggled bioinformatics program in which some number of genes or proteins have been selected.

please not that, in the current implementation, the boss is a standalone program, but it could easily be re-implemented as a part of some other program. this might be attractive to a biologist with a favorite bioinformatics program to which they wish to add gaggle capabilities. 

scalability of the gaggle
 adding new programs and web resources
many programs and web sites can be added to the gaggle quite easily. in every case, the ratio of software development time to bioinformatics benefit must be assessed; the benefits will often be worth the effort. furthermore, although gaggling a program usually  requires access to the source code, a lot of molecular biology software is open source, and a lot of it is written in java. the r goose and tigr mev are prime examples: these are popular and powerful software packages developed entirely independent of the gaggle; each required only about a week of programmer time to adapt to the gaggle.

specifically, adding a java program to the gaggle is straightforward:

a. if the source code is available

b. if the data structures to be broadcast or received in the prospective goose are roughly compatible with the four data types used in the gaggle .

as for any program, adding a website to the gaggle also runs the gamut, from easy to complicated to onerous. the difficulty goes up when javascript is used, if logins are required, if results are available only after substantial delay, and  if the website undergoes frequent revision.

a third kind of prospective goose is a non-java program. this will

a. require an experienced java programmer familiar with java jni, and

b. separate development and compilation on each target operating system.

please note, however, that it is not unusual to find a java jni bridge already created for other programming languages and environments: r, python, prolog, and matlab, to mention a few.

 performance
with regard to run-time scalability: since the gaggle's purpose is first and foremost to facilitate interactive exploration of multiple data types, and since human-computer interaction with desktop software is not computationally intensive, even inexpensive computers can easily keep up with the typing and mouse operations of any user, and with the performance requirements of most individual software programs. in typical use, the gaggle user moves at a pace measured in seconds between the various gaggled programs, with only one program in the foreground at a time; all other gaggled programs are relatively inactive in the background, perhaps even swapped out into virtual memory. thus, the normal use of the gaggle scales very nicely: there is no practical limit to the number of relatively inactive programs which can reside in the background.

in the worst case scenario, if a sophisticated gaggle user should broadcast large matrices or networks to several different analytical programs at once, and if all of these are running on the desktop computer, a scaling problem might result. but please note that this is not a problem with the gaggle: this is the familiar problem of running too many simultaneous, computationally intensive tasks on a small computer. this could be considered a limitation of the gaggle only if it promotes a style of work that might lead the biologist to attempt these multiple tasks at once when they otherwise would not have done so. if such situations were to arise and computationally intensive tasks start to swamp the desktop computer these tasks could be reconfigured to run on a server. in the gaggle's case, this familiar solution can be implemented easily through a lightweight goose, from which the biologist can monitor and control the remote computationally-intensive task.

RESULTS
using the gaggle we have integrated diverse databases  and software . this loose coupling of diverse software and databases enables simultaneous exploration of experimental data , functional associations , metabolic pathways  and pubmed abstracts . more importantly, the researcher can craft queries to explore these rich resources without any software constraints. this is best demonstrated through the case study provided below.

a case study: exploring pathogenesis in helicobacter pylori
we turn now to a demonstration of the gaggle, where we explore diverse sets of publicly available data for helicobacter pylori using a variety of bioinformatics software tools. the choice of an organism outside of our general expertise  is intentional; it demonstrates how data integration via software interoperability in the gaggle can reveal, even to the relatively inexpert researcher, insights previously hidden from view. we conclude the example by making several discoveries including identification of a protein functionally associated with flagellar biosynthesis proteins with a predicted three-dimensional structure match to ebulin, a ricin-like toxin.

the steps listed below reflect a possible thought process of a biologist and indicate logic behind his/her actions. moreover, this exercise exemplifies typical systems biology data exploration and analysis in the gaggle. specifically, as in any real-world systems biology data exploration, this workflow contains frequent dead ends, reiteration of the same or similar analyses with different parameters, and exploration of additional data to support new findings. the h. pylori demo is available on the gaggle website.

in this example we make use of diverse types of data archived in different locations around the world: chromosome maps at biocyc  <cit> ; a local copy of publicly available mrna data from stanford microarray database  <cit> ; functional associations from prolinks  <cit> ;protein-protein interactions  <cit> ; a local copy of a gene/protein annotation file from tigr; metabolic pathways at kegg  <cit>  in japan; and all pubmed abstracts, and protein and dna sequences through string  <cit>  in germany. the example also demonstrates the power of the gaggle platform in enabling software interoperability, by including the datamatrix viewer  for exploring microarray data; jgr goose for statistical analysis using the 'r' package; and tmev for clustering analysis of microarray data. more importantly, it showcases how broadcasting no more than  <dig> messages types through the gaggle boss can catalyze seamless integration of all of these data and software .

step-by-step demonstration of gaggle exploration of h. pylori systems biology data 
the goal of this analysis was to identify genes functionally associated with cytotoxin-associated genes of h. pylori

step  <dig>  we searched for the term "cag"  in the "annotation search" tab of the gaggle boss, identifying  <dig> genes encoded in the h. pylori genome  retrieved in step  <dig> were selected within the annotation tab.

step  <dig>  the selected genes were broadcast to biocyc  <cit> , dmv  and biclusterview  . taking route a, records matching the  <dig> genes were retrieved through a web query against the biocyc database for helicobacter pylori. upon following links for individual records we learned more about genome organization of these genes  and that all cag genes are encoded contiguously within an approximately  <dig> kbp pathogenicity island.

step  <dig>  after reviewing basic information for genomic organization of cag genes we took route b to investigate relationships among them by exploring expression profiles in microarray data downloaded from the stanford microarray database  <cit> . route b begins with analysis of mrna profiles for the  <dig> cag genes in the dmv; these genes were selected through a broadcast described in step  <dig>  by clicking the "plot profiles" button we visualized the expression profiles for all cag genes within the dmv. this indicated that the relationship among their expression profiles is complex and requires clustering analysis for proper evaluation.

step  <dig>  using the "create new matrix" feature of dmv a sub-matrix of the  <dig> cag genes were created within the dmv.

step  <dig>  subsequently all genes within this new sub-matrix were selected using the "select all" feature.

step  <dig>  to ensure uniformity in the expression data across conditions we decided to normalize the data . the selected sub-matrix was broadcast to jgr. this matrix was received as r-object m <dig> in jgr. the data were then normalized to matrix nm using an r function .

step  <dig>  the normalized sub-matrix  was broadcast " within jgr) to tmev  <cit>  for further analysis.

step  <dig>  expression profiles were clustered using the k-means algorithm  within tmev. upon viewing the  <dig> k-means clusters it was evident that whereas some cag genes, such as cag <dig>  cag <dig>  cag <dig> and cag <dig>  had correlated profiles over almost all conditions, others  were correlated only under a subset of conditions. this elevated the importance of using a more sophisticated clustering procedure such as cmonkey , which identifies putative groups of genes co-regulated over a subset of conditions  by simultaneously analyzing expression data, functional and/or physical associations, and de novo detected cis-regulatory motifs . we have developed a simple cytoscape plug-in goose for filtering and exploring these biclusters , along with a pdf file viewer goose  for viewing specific cluster information such as detected cis-regulatory motifs.

step  <dig>  taking route c,  <dig> biclusters containing pathogenicity genes  were sent to a new biclusterview window .  <dig> of these biclusters shared metabolic processes and/or contained genes encoding physically interacting proteins, suggesting that these biclusters are functionally related. properties of all biclusters  were further explored by broadcasting them using the "broadcast node names" feature to the clusterinfo application. all biclusters were found to be of high quality and some contained a motif implicated in ph regulation .

step  <dig>  to further explore functional associations among the pathogenicity genes, all genes contained within the  <dig> biclusters were broadcast to the cytoscape view of the h. pylori prolinks  <cit>  network using the "broadcast genes and conditions" feature within the biclusterview control panel. all selected nodes  within the selected prolinks subnetwork were sent to a new window  along with associated edges. altogether  <dig> genes within this network were interconnected through the following relationships:  <dig> gene cluster edges,  <dig> gene fusion edges,  <dig> gene neighbor edges,  <dig> phylogenetic profile edges and  <dig> protein-protein interaction edges  <cit> . viewing functions for these  <dig> genes in the gb annotation tab revealed that many complex functions are associated with the cag gene blicusters  elevating the need for further analysis with kegg and string .

step  <dig>  finally, we broadcast all genes in the prolinks sub-network to kegg  <cit>  and string  <cit>  to explore metabolic pathways represented in these biclusters as well as literature containing co-occurrence of two or more genes in these  <dig> biclusters. altogether ~ <dig> pathways with three or more enzyme matches were retrieved from kegg  and ~ <dig> publications were retrieved through string. within the abstract of these publications were co-occurrences of two or more genes from the  <dig> biclusters . given the large number of papers that were retrieved, we subsequently conducted repeated searches in string by broadcasting fewer numbers of genes at a time. in the section below we provide a synthesis of our findings.

summary of findings 
using the gaggle we were able to tease out from a complicated landscape of  <dig> putative associations and physical interactions among  <dig> genes,  <dig> microarray conditions,  <dig> gene biclusters, and nearly  <dig> kegg pathways a far more easily comprehensible picture from which to gain biological insight. specifically, in  <dig> steps we identified several previously known and also unknown relationships that could serve as tangible leads for future experimental investigation of h. pylori pathogenesis.

among the pathways containing the filtered set of  <dig> genes  was an over-representation of major processes that have been previously implicated in aspects of pathogenesis such as peptidoglycan biosynthesis  <cit> , lipopolysaccharide biosynthesis  <cit> , flagellar biosynthesis  <cit> , type iv secretion  <cit>  . also present was an overrepresentation of enzymes for aa-trna synthesis, reductive carboxylate cycle, pyruvate metabolism, lysine biosynthesis, oxidative phosphoorylation and glycolysis/gluconeogenesis. categorizing the  <dig> genes into these various pathways helped explore putative roles for proteins of unknown function .

altogether  <dig> proteins associated with the cag gene biclusters were of unknown function. among these unknown function proteins are four conserved secreted proteins including one protein  linked through protein-protein interactions to cag <dig>  – a key pathogenesis protein  <cit> . another set of interesting unknown function proteins were hp <dig> and hp <dig> connected via gene cluster  edges to fliy and flim – key flagellar switch proteins. also present in this operon is an alternate sigma factor  gene flia which has been implicated in mediating transcription of flaa ), the major flagellar subunit required for both motility  <cit>  as well as gastric colonization  <cit> . note that co-expression analysis alone was not sufficient to find these relationships. moreover, both functional associations and protein-protein interactions are notoriously noisy; however, our use of a combined analysis of all of these orthogonal data sources increases the likelihood that these relationships are real.

to further explore putative functions of these key genes of unknown function, we retrieved their protein sequences . the protein sequences were manually submitted to robetta, a structure prediction server  <cit> . among the various proteins analyzed the most striking was the match of predicted three dimensional structure of hp <dig> to b-chain of ebulin , a ricin-like toxin. proteins with the conserved ricin domain are ribosome inactivating proteins widely distributed in plants, fungi, algae and bacteria. this putative function for hp <dig>  coupled to its putative functional association with flagellar proteins, implicates it in a likelyrole in h. pylori pathogenesis. in a similar manner, future functional exploration of additional unknown function genes in our candidate set  will provide basis for discovery of potentially new candidate genes involved in pathogenesis of h. pylori.

this case study illustrates the exploration of one set of heterogeneous data, using one particular combination of web resources and gaggled programs. the flexibility of the gaggle enables any other kinds of exploration, combining other kinds of data, employing other analytical programs and web resources, and using different analytical styles . in other words, a user can choose her/his style of data analysis through extensive trial and error operations using the gaggle to layout a landscape of complex diverse data from which to tease out biological insights.

targeted users of the gaggle
through the example above we illustrate how the gaggle is designed to serve biologists at all points along the spectrum, from biologists who conduct most of their analyses using spreadsheets and web browsers to statistically savvy computational biologists who can write their own r code. however, note that, with the exception of the r goose, all current programs in the gaggle are point-and-click applications, and fully useful to the non-programming biologist. among these point-and click applications, are applications such as tigr mev  <cit> , which provide the biologist quick access to a suite of statistical analysis tools. more importantly, although tigr mev development will continue independent of the gaggle, users of the gaggle will benefit from advances in this third party tool. this exemplifies the benefit of coupling existing popular open source software. as and when more popular software are developed we will make them part of the gaggle.

with the addition of the r goose, a new class of biological work is supported, through which even the most proficient r programmer may benefit from a collection of point-and-click geese, for instance, for the visual display of string associations, kegg pathways, and cytoscape networks, all with just a few mouse clicks.

in our experience, there is yet a third class of biologists, who have no prior experience with r; but who use the gaggle to explore their data with the point-and-click geese; and are also not opposed to using a few simple one-line r commands as long as they have a cribsheet to work from. we provide this cribsheet on the gaggle website and intend to populate it with useful commands that are clearly described from a biologist's standpoint. some of the commands in the cribsheet tell the user how to filter their data, normalize it, and find intersection and/or union between two matrices or gene lists.

thus, the gaggle provides a setting in which point-and-click exploration may be gently expanded to include the sort of statistical data exploration, which is becoming indispensable in analyzing complex systems biology data. in other words the gaggle can be  used both by novices to computational biology and also by high end statisticians familiar with r. thereby improving communication among collaborators of diverse expertise.

future work
in addition to the straightforward task of adding new geese to the gaggle , we also wish to add new capabilities to existing geese. for example, we plan to add simple scripting capabilities to the boss, probably using jython, to support 'goose pipelines', in which the result from one goose may be automatically sent to another. another ambitious goal currently planned is to add a unified 'save state' capability to the gaggle, requiring  some extensions to each participating goose.

CONCLUSIONS
the gaggle is a minimal, effective and open-ended system for integrating software and data sources used in systems biology analyses. the gaggle's effectiveness comes from the recognition that four simple data messages each free of biological semantics, and a judicious use of the java programming language, are all that is needed to integrate diverse types of data and software. more importantly, the gaggle is easily extensible and new software and databases can be easily converted into geese of the gaggle with little effort. this has advantage over other approaches which require tight coupling of software and databases and therefore extensive effort to integrate new resources into the framework. this we emphasize is an important consideration because many valuable databases and software already exist and new resources are constantly emerging -if we are to take full advantage of all these existing and forthcoming resources without reformatting data or extensively reconfiguring those resources, we predict that a strategy such as the gaggle will prove to be invaluable.

source code and gaggle availability
all of the gaggle source code, and all of the geese mentioned in this manuscript, are available, with full documentation along with a growing number of ready-to-use "gaggles" of model organisms on the gaggle website.

authors' contributions
ps conceived and initiated the project. developed and implemented the method and the resultant computer program. wrote the manuscript.

djr obtained and parsed out the relevant biological conditions in the h. pylori microarray data. allowed access to pre-publication results of the cmonkey algorithm.

rb obtained and parsed out the relevant biological conditions in the h. pylori microarray data. allowed access to pre-publication results of the cmonkey algorithm.

nsb conceived and initiated the project. provided direction, feedback on the quality of results, software design and crafted the case study. wrote the manuscript.

