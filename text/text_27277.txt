BACKGROUND
the long branch attraction  artifact  <cit>  still remains one of important causes of biases and mistakes in phylogenetic analyses of sequence data  <cit> . lba causes taxa with long branches to be artifactually grouped with or attracted to other long branched taxa . an important source of lba is substitution saturation of positions in alignment . it would be ideal to have positions that underwent a single or a few changes during evolution, but many positions in real alignments are subject to multiple substitutions. this subset of rapidly evolving positions is the source of stochastic noise rather than useful signal. however, these saturated positions are responsible for a major part of information used in phylogenetic analyses  <cit> , which could confuse most of the tree-reconstructing methods. because there are only four possible states for nucleic acid data , it is probable that a part of saturated positions will evolve randomly – convergently into the same state. it could then be erroneously judged as a synapomorphy. lba can thus be a major problem especially in maximum parsimony, but occurs also in other analyses  <cit> . maximum likelihood can, under an appropriate model of evolution, deal better with saturated positions, but datasets containing sites with different rates of substitution across the tree  may still be problematic  <cit> . besides lba, a high level of saturation in the dataset may cause signal simply to be overwhelmed by noise at least at some points of the tree topology. such nodes could be resolved incorrectly or  with a low statistical support.

it has been shown that in real alignments, lba can be a major problem  <cit> . an effective way to estimate and reduce the effect of substitution saturation and lba is removal of fast-evolving data. one such method is slow-fast analysis of the dataset  <cit> . the positions of the alignment are divided into several classes according to their substitution rate . several new alignments are then created, which contain only positions with a substitution rate lower than several thresholds, ranging from maximum to minimum rate. thus the signal/noise ratio of the alignments successively increases, however, on the expense of amount of positions included in the alignment. technically, the slow-fast method needs some input tree topology to work with. the topology must be provided by primary phylogenetic analysis of the dataset or by another independent method. this topology is needed for recognition of some monophyletic groups . maximum parsimony is then used to determine the number of changes for each position within the monophyletic subgroups. substitution rates assigned to positions are thus independent from interrelationships among the monophyletic groups, and therefore, these interrelationships may in turn be investigated without the fear of circularity. when each position is assigned its number of changes, those with the highest substitution rate are gradually omitted from new alignments. the following phylogenetic analyses of these new datasets  then provide results based on decreasing number of sequence data, however, with decreasing risk of artefactual groupings of long branches. there are several good examples of successful use of slow-fast analysis, see e.g.  <cit> .

although the slow-fast analysis is relatively powerful and very simple in principle, it is quite demanding when one wants to determine the number of changes for individual alignment positions  and the manual procedure of deleting of positions by editing the dataset is especially very time consuming. we believe that this is one of the most important reasons why this method is used relatively scarcely. clearly, a computer program that provides this evaluation of positions and which produces new alignments would be handy. to our knowledge, the only software providing slow-fast analysis have been must  <cit> . must is a complex package, yet it still does not provide a quick and easily operated tool for this type of analysis. this is what our program slowfaster does. it is a user-friendly tool to conduct slow-fast analysis and produce a set of new alignments without fast evolving positions. it have several additional functions. note that another program for slow-fast analysis was presented recently  <cit> .

implementation
slowfaster was programmed in borland delphi and runs under ms windows. both the executable file  and the source code  are available as supplements. the program leads the user in several steps through the process of generating new datasets. original alignment is loaded in fasta, phylip or nexus format. the program works with both nucleic acid and amino acid alignments and supports usual ambiguity coding. the topology needed for the recognition of monophyla is loaded as a tree in the newick  format . after choosing the monophyletic groups by simply clicking on the branches of the depicted tree, parsimony is used to count the number of changes of every alignment position within the selected groups. finally, new alignments are produced . each of the new datasets has a number which is a threshold: positions with greater number of changes were omitted from this dataset. as the threshold gets lower and lower, the datasets contain fewer and fewer data because the more saturated positions were deleted from them. these datasets can be then further analysed to obtain phylogenies with a lower risk of lba. during the whole process, there are hints shown in a window, telling the user what to do in the given step.

the software was tested thoroughly on several model datasets  and also on dataset of hampl et al.  <cit> . in this latter case, we obtained the same new datasets with our program .

an interesting alternative to slow-fast method is using substitution rates estimated with maximum likelihood . although ml estimates are not implemented in slowfaster, this program enables production of alignments without positions with high rates through the "load changes" button. the rates can be counted in another software. e.g. tree-puzzle  <cit> , if rate heterogeneity is selected, gives information on the rate category of each position in its outfile under "combination of categories that contributes the most to the likelihood". these data can be simply copied in a file which is then loaded in slowfaster. new alignments are then produced directly from these data. more generally, any sequence of any  numbers can be loaded and the software will divide positions in rate categories  based on these values.

the program also creates a log file which contains useful information, most notably groups used for changes counting, list of positions with certain number of changes and number of changes for all positions from the first one to the last.

RESULTS
sample data
as an example, we analysed an alignment of  <dig> ssu rdna sequences of  <dig> isolates of blastocystis +  <dig> outgroups. blastocystis is an unusual protist, a sister group of slopalinids  within the group of stramenopiles. see e.g.  <cit>  for a review of blastocystis. although these nonflagellated, multinucleated gut commensals comprise a single genus, their ssu rdna phylogeny shows clearly that they are rather long branched taxa in comparison to other stramenopiles. their branches are even longer than, for example, branches separating classes of autotrophic stramenopiles. this group is therefore suspected of a high level of substitution saturation. we sequenced ssu rrna genes of five blastocystis isolated from tortoises to improve taxon sampling by increasing the number of non-mammalian and non-bird isolates in the analysis . the accession numbers of the five new sequences  are , , ,  and , respectively.

the alignment was prepared with clustalx  <cit>  and ambiguous parts with many indels were deleted from the alignment in the program bioedit  <cit> . the resulting alignment contained  <dig> positions. paup  <dig> β <dig>  <cit>  was used to analyse the dataset employing maximum likelihood , maximum parsimony , the fitch-margoliash method with logdet distances  and maximum likelihood distances . appropriate models for maximum likelihood were chosen with the help of modeltest  <cit> . the robustness of each obtained topology was tested by bootstrapping . phylogenetic analyses resulted in the tree shown in fig.  <dig>  two deep nodes of the phylogeny were resolved with low bootstrap support and/or resolved differently by different methods and were therefore depicted and treated as unresolved trichotomies.

use of slowfaster
at this time, our slowfaster program was employed to perform the slow-fast analysis. first, the alignment used in our analyses was loaded via the "load alignment" button. then the tree topology shown in fig.  <dig> was loaded via the "load tree" button. in typical slow-fast analyses, several monophyletic subgroups are chosen in this step. we decided to select the single subtree of all blastocystis isolates. this arrangement was enabled by the fact that we were mostly interested in resolving the two nodes represented in the input tree by trichotomies. assigning substitution rates to alignment positions was thus independent from the true topology of these nodes. when the blastocystis-containing subgroup was chosen in the tree window of slowfaster program, new datasets in nexus format were created by clicking the "new alignments" button. also, alignments of the same length as these new datasets, but shortened by random deletion of positions, were prepared by checking the "jackknives" checkbox on the program screen. these were used to test whether the loss of informative positions influences decrease of bootstrap support of the resulting tree topology more than shortening the datasets itself. we did not use the "weights" feature of the program. when this checkbox is checked, the algorithm will assign different weights to changes within different chosen monophyletic groups. changes within smaller groups would have assigned greater weight . the impact of large monophyla is then not dominant just because they contain more taxa.

the maximum number of observed changes in a position of our alignment was  <dig>  thus, nine new alignments were created. they were labeled blastos <dig> down to blastos <dig>  where the number is the threshold. blastos <dig> alignment was of course of no use in this particular case  as it contained only those positions that did not change during the evolution of blastocystis. all other alignments were analysed phylogenetically by all four methods  and topologies of the  <dig> resulting trees were bootstrapped.

it is highly probable that in some point of the slow-fast analysis, the profit from diminishing noise is lower than the loss from diminishing information. to roughly estimate the effect of the lack of information, we used average values of bootstraps as a measure of reliability of the alignments  <cit> . we found that this average value drops suddenly for the alignment blastos <dig> which is therefore likely to suffer from lack of information and the resulting trees obtained from this dataset were not taken into account. to further prove this decision, "jackknifed" datasets of the same length but shortened by random deletion of position were also analysed. for each of eight datasets , ten of these randomly shortened datasets were analysed . within each dataset, the average value of bootstraps was determined and average of these averages for ten dataset of the same length were compared to average bootstrap value of the respective dataset resulting from slow-fast analysis. this comparison showed that the bootstrap values does not change much when analysing j8_x down-to j1_x datasets . on the contrary, the downfall of bootstraps was much more prominent in blasto_s <dig> dataset when compared to blasto_s <dig> – blastos <dig> datasets .

results concerning the two unresolved trichotomies are shown in table  <dig>  the isolate gera3b grouped either with the basal branch of three reptile/amphibian isolates  or with the rest of blastocystis . in the original alignment, the former topology was very well supported by mp and ld, the latter was weakly supported by ml and md. as the most saturated positions were deleted from alignment, the bootstrap support for topology "1a" decreased slightly in mp, but increased strikingly in md and slightly in ml analysis . the slow-fast analysis thus supports the "1a" topology. the second unresolved node concerned a branch of four reptile/amphibian isolates. either it was basal to two major branches of mostly mammal/bird isolates , or it grouped with one of them . after the slow-fast method was applied, both ld and md favored the first possibility with reasonable bootstrap support for s <dig> and s <dig> datasets. however, mp and ml were unable to decide on the two possibilities. we conclude that the "2b" topology is probably correct, although the certainty is not high. for other nodes, decrease/increase of their bootstrap support from datasets s <dig> and s <dig> is marked in fig.  <dig> 

for each dataset  ranging from untreated initial alignment  to alignment blastos <dig>  the number of alignment positions  and the length of the most parsimonious tree  are noted in the second and third columns, respectively. in the remaining columns is given the bootstrap support from the four tree reconstructing methods for four topologies of interest. in some cases  the method was unable to decide between the given node and its alternative.

CONCLUSIONS
overall, the slow-fast analysis, provided by the program slowfaster, proved to be a useful tool to solve uncertain phylogenies by increasing the signal/noise ratio. in the blastocystis ssu rdna tree it was able to make a choice among competing hypotheses and add more confidence in some other cases. our software automates quite time-consuming slow-fast analysis.

availability and requirements
project name: slowfaster

project home page: 

operating system: ms windows

programming language: borland delphi

any restrictions to use by non-academics: none

the software can be accessed through the project home page and its current version is included with the manuscript as an additional file.

authors' contributions
mk and jf designed the program and contributed bug fixes. mk developed the source code. ic and mu collected the data used as example and analysed them together with mk. these three authors contributed to writing the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
slowfaster. this is the executable file of the application.

click here for file

 additional file 2
source code. zip archive containing delphi source code of the program and additional delphi files.

click here for file

 additional file 3
sample data. zip archive containing sample data – alignments in phylip, fasta and nexus format and tree files in newick format.

click here for file

 acknowledgements
this work was supported by czech ministry of education  and czech science foundation . we also want to thank vladimir hampl for providing us with his data for software testing. lastly, we owe a huge thank to four anonymous reviewers. without them the slowfaster would not be what it is.
