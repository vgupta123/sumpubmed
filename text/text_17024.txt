BACKGROUND
character-based phylogeny is a broad notion to represent an evolutionary history describing the ancestral relationships among extant taxa or individuals. recent applications show that the model can be applied to study the evolution of mutations related to various genomic information, such as protein domains  <cit>  or markers in tumors. thus in our formulation, it is not important whether we are actually studying taxa or individuals or other genomic data. we will follow the usual convention of calling species the units of study. the main element of this notion is that the instance is also made of a set of characters, and each species is in a specific state for each character  <cit> . the goal is to find a phylogeny where the known species are the leaves, and the internal nodes are labeled--just as the leaves--by a state for each character. for each edge  of the phylogeny, the mutated characters along the edge are those whose states are different in x and y. the simplest case is when all characters are binary, that is only two states  are possible, modeling the situation when each species has or does not have a given feature, such as wings  or the mutation encoding lactase persistence .

moreover, we are assuming a coalescent model, that is the fact that a characteristic shared by a set of species can be traced back to a single ancestral species. assuming that the state  <dig> encodes the fact that a species has a given character , the coalescent model implies that the phylogeny is directed. restrictions on the type of changes from zero to one and vice versa lead to a variety of specific models  <cit> .

the perfect phylogeny is one of the most investigated coalescent models  <cit> . conceptually the model is based on the infinite sites assumption, that is no character can mutate more than once in the whole tree. the binary perfect phylogeny problem has received much attention, culminating with the linear time algorithm when all data is known  <cit>  and an efficient algorithm when the input data is incomplete  <cit> . while the infinite sites assumption is quite restrictive, the perfect phylogeny model turned out to be splendidly coherent within the haplotyping problem  <cit> , where we want to distinguish the two haplotypes present in each individual when only genotype data is given. more precisely, the interest here is in computing a set of haplotypes and a perfect phylogeny such that the haplotypes  label the vertices of the perfect phylogeny and  explain the input set of genotypes. this context has been deeply studied in the last decade, giving rise to a number of algorithms  <cit> . still, the perfect phylogeny model and the assumptions that have been central in the previous decades cannot be employed without adaptations or improvements. a first generalization in the literature allows for more states . in the general case, the problem is np-hard  <cit> , but it has an algorithm parameterized by the number of states  <cit> . the special cases when there are three or four possible states have more efficient algorithms  <cit> .

even allowing more states cannot explain the biological complexity of real data, when homoplasy events  are present. two cases where those limitations are evident are the study of carcinogenesis and protein domains. carcinogenesis consists of the factors and mechanisms that cause the onset of cancer; it results from many combinations of mutations, but only a few, called progression pathways, seem to account for most human tumors  <cit> . the observation that tumors are evolving cell populations leads to phylogeny-based studies. at the same time the intrinsic nature of quickly and degenerately proliferating cancer cells, results in a relative high amount of sites with multiple mutations . a protein domain is a part of protein sequence and structure that can evolve independently of the rest of the protein chain. many proteins consist of several structural domains, while a domain may appear in a variety of different proteins. in this case it is quite frequent to acquire a domain and then to lose it  <cit> .

thus a central goal of this paper is to find a model that is more widely applicable than the perfect phylogeny, while retaining its computational efficiency . the problem of constructing phylogenies where the deviations from perfect phylogeny are small has been tackled under the name of near perfect phylogeny  <cit>  or near perfect phylogeny haplotyping problems  <cit> . especially the impossibility of losing a character that has been previously acquired is too restrictive, resulting in more elaborated models, such as the persistent character  <cit>  and the general character compatibility  <cit> .

more precisely, the persistent perfect phylogeny model  <cit>  allows each character to be lost  in at most an edge of the phylogeny, while the general character compatibility imposes some restrictions on the possible mutations , while allowing the input data to be a set of possible states for each character of a species. in this paper we combine the persistent perfect phylogeny  and the general character compatibility , introducing the constrained persistent perfect phylogeny problem  which generalizes the ppp by adding a constraint for some characters c in the input data, given by the fact they cannot be persistent for some species s . since the cppp problem is equivalent to a case of gcc whose complexity is still open  <cit> , our results also apply to gcc.

finally, we explore some algorithmic solutions for the cppp problem. in particular, we give a polynomial time solution of the cppp problem over matrices whose conflict graph has no edge. this result partially answer the open problem stated in  <cit>  of determining the computational complexity of the ppp problem. in the paper we have run a preliminary experimental analysis showing that our method can manage successfully binary characters data incorporating back mutations. the results show that the algorithm performs efficiently on simulated matrices as well as on real data taken from the hapmap project.

the persistent perfect phylogeny
our approach follows  <cit>  to which we refer the reader for a detailed discussion of ppp, while we give here only a cursory treatment. the input of the ppp problem is an n × m binary matrix m whose columns are associated with the set c = {c <dig>  . . . , cm} of characters and whose rows are associated with the set s = {s <dig>  . . . , sn} of species. then m =  <dig> if and only if the species si has character cj, otherwise m =  <dig>  the character c is gained in the only edge where its state goes from  <dig> to  <dig> or, more formally, in the edge  such that y is a child of x and c has state  <dig> in x and state  <dig> in y. in this case the edge  is labeled by c+. conversely, c is lost in the edge  if y is a child of x and the c has state  <dig> in x and state  <dig> in y. in the latter case the edge  is labeled by c−. for each character c, we allow at most one edge labeled by c−  <cit> .

definition  <dig>  let m be an n × m binary matrix. then a persistent perfect phylogeny, in short p-pp, for m is a rooted tree t such that:

 <dig> each node x of t is labeled by a vector lx of length m;

 <dig> the root of t is labeled by a vector of all zeroes, while for each node x of t the value lx ∈ { <dig>  1} represents the state of character cj in tree t;

 <dig> each edge e =  is labeled by at least a character;

 <dig> for each character cj there are at most two edges e =  and e' =  such that lx ≠ ly and lu ≠ lv . in that case e, e' occur along the same path from the root of t to a leaf of t; if e is closer to the root than e', then lx = lv =  <dig>  ly = lu =  <dig>  and the edge e is labeled cj+, while e' is labeled cj-;

 <dig> each row r of m labels exactly one node x of t. moreover the vector lx is equal to the row r.

let s be a species and let c be a character such that, in a persistent perfect phylogeny t, the path from the root of t to s traverses an edge labeled c−. then c is called persistent for s in t.

the persistent perfect phylogeny problem asks to find, if it exists, a persistent perfect phylogeny for a given binary matrix m. we can restate the ppp problem as a variant of the incomplete directed perfect phylogeny  <cit>  by transforming the complete input matrix into an incomplete matrix, called extended matrix.

definition  <dig>  let m be an instance of the ppp problem. the extended matrix associated with m is an n × 2m matrix me over alphabet { <dig>   <dig>  ?} which is obtained by replacing each column c of m by a pair of columns , where ? means that the value of such cell is not given. moreover for each row s of m if m =  <dig>  then me =  <dig> and me =  <dig>  while if m =  <dig>  then me =? and me =?.

in this case the characters  are called conjugate. informally, the assignment of the conjugate pair  in a species row s for two conjugate characters  means that character c could be persistent in species s, i.e., it is first gained and then lost. on the contrary, the pair  means that character c is only gained by the species s. a completion of a pair  associated to a species s and characters  of me consists of forcing me = me =  <dig> or me = me =  <dig>  while a partial completion me is a completion of some of its conjugate pairs. notice that m admits a persistent phylogeny if and only if there exists a completion of me admitting a directed perfect phylogeny  <cit> .

a fundamental contribution of  <cit> , building upon  <cit> , is to frame the problem as a graph theory question. we briefly recall here the two graphs that are used in the description of the algorithm.

let m be a binary matrix and let c <dig>  c <dig> be two characters of m. then the configurations induced by the pair  in m is the set of ordered pairs  over all species s. two characters c <dig> and c <dig> of m are conflicting if and only if the configurations induced by such pair of columns is the set of all possible pairs , ,  and . the conflict graph gc =  of a matrix m has vertices c and as edges the pairs  of conflicting characters . we also need some graph-theoretic definitions. a graph without edges is called edgeless. a connected component is called nontrivial if it has more than one vertex.

the second graph used in the algorithm provides a representation of a completion of characters of an extended matrix. the red-black graph grb =  associated to an extended matrix me is the edge-colored graph where  the vertices are the species and the conjugate pairs of me ,  a pair  is a black edge iff the conjugate pairs c+ and c− are still incomplete in matrix me and me =  <dig> and me =  <dig>    is a red edge iff the conjugate pairs c+ and c− are completed as me = me =  <dig> 

an algorithm to compute a persistent perfect phylogeny

let t be any persistent perfect phylogeny for a matrix m and consider a depth-first visit of t, the sequence of edge labels traversed during the visit is uniquely defined. the converse also holds, that is given a sequence c of edge labels, we can reconstruct the unique persistent perfect phylogeny t  such that c is the sequence of edge labels traversed during a depth-first visit of t  <cit> .

the main idea is that we associate a partial phylogeny p to each prefix of c, where each leaf x of p is labeled with the submatrix mx of me such that mx has exactly the species and the characters that will be in the subtree of t rooted at x. recall that each matrix mx has a graph representation given by the red-black graph. then determining the next edge label to be added to the prefix of c is called to realize a character in the red-black graph representing mx as follows.

let  be two conjugate characters of me and let grb its associated red- black graph. let c be the connected component of grb containing the vertex c. a character is in one of three possible states: inactive , active, and free. the realization of a character c in grb consists of the following steps:

 <dig> if c is inactive then:

 for each species s∉c, pose me = me = 0;

 for each species s∈c if  is not an edge of grb, add a red edge and complete me by posing me = me = 1;

 remove from grb all black edges  and label c active.

 <dig> else if c is active and c is connected by red edges to all species in c, then:

 all such red edges are deleted from grb and c is labeled free;

notice that when  c is free, or  c is active but there exists a species s∈c that is not connected to c by a red edge, none of the stated conditions hold. in these cases the realization is impossible.

figures  <dig> and  <dig> illustrate the realization of characters. moreover, isolated vertices of grb correspond to leaves of the partial phylogeny p whose associated matrix has only one species; that instance is trivially solvable, therefore isolated vertices can be removed from grb.

we recall that, to obtain an algorithm for ppp, it suffices to have an algorithm that finds the edge label to be added to the prefix of c computed up to that point. the sequence  c obtained by a depth-first visit of the tree is a sequence of edge labels whose realization results in an edgeless red-black graph  <cit> . such sequence  c is called successful c-reduction of the red-black graph.

the rest of the paper is devoted to give a formal definition of the cppp problem and to provide an efficient algorithm to solve that problem. moreover we will test our algorithm on some instances that do not admit a perfect phylogeny, showing that we are able to quickly compute a persistent perfect phylogeny, hence giving a possible phylogenetic interpretation of those data.

RESULTS
we can now formally define the constrained persistent perfect phylogeny  problem where the fact that a pair   is constrained means that s and all its ancestors do not have the character c. the input of the problem is a binary matrix m and a set f={,…,} of constraints, such as m= <dig> for each j. a solution for such instance is a persistent perfect phylogeny t for m such that, for each constraint , none of the edges from the root of t to the leaf labeled by sij is labeled cij+. this implies that no edge from the root of t to the leaf labeled by sij can be labeled cij-.

the idea of the extended matrix me applies also to the cppp problem. in this case, if m =  <dig>  then me =  <dig> and me =  <dig>  if m =  <dig> and  is a constraint, then me = me =  <dig>  finally, if m =  <dig> but  is not a constraint, then me =? and me =?. an immediate extension of the result in  <cit>  shows that me has a directed perfect phylogeny if and only if  has a constrained persistent perfect phylogeny.

just as for the ppp problem, we first explore a graph formulation of the cppp problem based on the equivalence of ppp to a problem of completing a matrix where each character c has two columns c+, c−, with c+  equal to  <dig> in a species s in the matrix corresponds to the fact that s has gained  the character c. the graph formulation derives again by representing a completion in terms of red-black graph associated to extended matrices. notice that there exists a 1-to- <dig> correspondence between completing entries of the matrix and realizing characters of the red-black graph. when considering the cppp problem, some entries of a partially completed matrix are constrained which means that some characters in the associated red-black graph cannot be realized. on the other hand, all characters in a red-black graph for the ppp problem can be realized. thus it is quite easy to show that the main red-black graph reduction characterization stated for the ppp problem can be extended to the constrained persistent perfect phylogeny problem, by simply adding the constraint that some characters cannot be realized in a red-black graph.

now, the red-black graph reduction turns out to be quite useful to investigate new algorithmic solutions to the ppp problem. in this paper we are able to prove that there exists a class of binary matrices that always admit a positive solution for the ppp problem, that is they admit a persistent perfect phylogeny that can be computed in polynomial time. for this special case we also provide a polynomial algorithm that works for the general cppp problem. based on this polynomial time algorithm we give a fixed-parameter  algorithm for the cppp, based on the search tree technique  <cit> , improving the exponential time algorithm given in  <cit> .

we observe that the cppp problem is a special case of the general character compatibility problem   <cit> . an instance of the gcc problem is a matrix mg having rows which are species and columns that are characters. each entry of the matrix mg is a subset of the states that character c may assume in species s. another part of the instance is a specification of all allowed transitions between states in a solution. a feasible solution is a perfect phylogeny where for each species s and for each character c, the state is picked from the input set mg. given an instance  of cppp, we obtain a matrix mg as follows. if m =  <dig>  then mg = {1}. if m =  <dig> and  ∈ f, then mg = {0}. finally, if m =  <dig> and  ∉ f, then mg = { <dig>  2}. the only allowed transitions are from the state  <dig> to  <dig> and from  <dig> to  <dig>  this case of gcc corresponds to cases  <dig> and  <dig> of table  <dig> in  <cit> , whose complexity is reported as open. thus the results we give in the paper also apply to those cases.

all times are in seconds.

we recall that a main result of  <cit>  is that finding a solution of ppp is equivalent to finding a successful c-reduction, that is a sequence of edge labels  whose realization makes the red-black graph edgeless. for the cppp problem a similar result holds, but we have to adapt the notion of reduction, so that there is a third case when the reduction is impossible; when for some species s, with  ∈ f ,  is also a red edge of grb. notice that, in order to obtain an algorithm to compute a persistent perfect phylogeny, it suffices to have an algorithm that finds the edge label to be added to the prefix of c computed up to that point.

solving cppp on matrices with edgeless conflict graphs
in the following, we will exploit some properties of the red-black graph to show that a matrix m whose conflict graph is edgeless always admits a persistent perfect phylogeny. moreover, we provide a polynomial time algorithm for the cppp problem in this case.

given m a binary matrix, the partial order graph for m is the partial order p obtained by ordering columns of m under the <relation which is defined as follows: given two character c and c', we will say that c < c' iff m ≤ m for each species s. moreover, we build a graph g = , called adjacency graph for m : v is the set of columns of m and  is an edge of g if and only if u, v are adjacent, i.e. there is a species s that is adjacent to both u and v in the red-black graph for the extended matrix me associated with m. our algorithm for solving the cppp problem finds a successful c-reduction by simply computing the maximal inactive characters in the poset p that can be realized in the red-black graph.

in the following we give some lemmas that are used to show that maximal characters in the poset p can be realized without inducing in the red-black graph any red-sigma graph: this is a graph of red edges consisting of a path of length four and having two characters and three species. such a graph represents the forbidden matrix { <dig>  1}, { <dig>  0} and { <dig>  1} in the completion of the extended matrix me and thus whenever it is present in the red-black graph it means that the completion does not admit a directed perfect phylogeny  <cit> . in fact, by definition of red-black graph associated to a completion, a red-sigma graph corresponds to two completed characters a+, b+ in the extended matrix such that me =  <dig> = me and me =  <dig> = me, while all other entries of me are  <dig> for pairs  and . the following property is easily proved by induction on the length of a path in the red-black graph connecting two maximal characters.

algorithm 1: procedure solve-cppp-empty-conflict

input : a constrained binary matrix  whose associated conflict graph is edgeless.

output : a realization sc of the characters of m resulting in a constrained persistent perfect phylogeny for , if such a phylogeny exists.

 <dig> sc ← empty sequence;

 <dig> p ← the partial order for m;

 <dig> grb ← the red-black graph for the extended matrix me of m.

 <dig> while grb is not edgeless do

 <dig> cm ← maximal elements in p that are in the same connected component of grb;

 <dig> d ← the subset of cm consisting of the characters that can be realized;

 <dig> if d = ∅ then

 <dig> return no solution

 <dig> else

 <dig> add to sc all characters in d;

 <dig> realize the characters of d in any order, updating grb;

 <dig> add to d the free characters in the graph grb;

lemma  <dig> let m be a binary matrix with an edgeless conflict graph. assume that the extended matrix associated with m induces a connected red-black graph and let p be the partial order graph for m. let cm be the set of maximal elements in p. then cm consists of elements that are pairwise adjacent in the adjacency graph for m.

the following properties can be proved by as consequences of the definition of realization of characters, and assuming that the input matrix has an edgeless conflict graph.

lemma  <dig> let m be a binary matrix that has an edgeless conflict graph. let grb be the red-black graph for the extended matrix associated with m. the realization of two characters a and b that are adjacent in the adjacency graph for m adds at most two disjoint components consisting of red edges. in this case one connected component has the vertex a and the other one b.

lemma  <dig> let grb be a connected red-black graph whose conflict graph is edgeless. let cm be the set of maximal characters in grb and let cm′ be the set of maximal characters in the red-black graph g′ obtained after the realization of cm. then:  the elements of cm are in at most two distinct connected components of g′ and  in each of such disjoint connected component, each maximal character c∈cm′ is either adjacent to all species of the component or all active characters of cm are free.

notice that, the absence of conflicts does not guarantee that a solution actually exists. however, we are able to provide an efficient algorithm  for this case, which will be a cornerstone for our algorithm for the general case.

algorithm  <dig> builds a successful c-reduction sc by iteratively adding to sc the maximal inactive characters or free characters of the red-black graph grb. notice that the successful c-reduction provides a completion of the extended matrix that admits a perfect phylogeny. the latter can be built using the classical linear time algorithm  <cit> .

theorem  <dig> let  be a binary matrix that has an edgeless conflict graph. then algorithm  <dig> computes a successful c-reduction of the red-black graph associated to the extended matrix for m, if it exists. moreover, if f is empty then m admits a solution.

proof first observe that the correctness of algorithm  <dig> is a consequence of the fact that maximal characters are realized before any character they include by the <-relation. assume that c <dig> < c <dig> and let t be a persistent perfect phylogeny. if c <dig> is not persistent for s in t, then also c <dig> is not persistent for s in t. in fact, assume to the contrary that c <dig> is persistent for s in t and c <dig> is not persistent for s. this fact implies that there exists a species s' such that has c <dig> and s' and s share a common ancestor in the tree which is below edge labeled c+. since c <dig> < c <dig>  it follows that species s' has also character c <dig> and thus the edge labeled by c− is below the edge c2+. but since s does not have character c <dig> and c <dig> cannot be persistent we obtain a contradiction.

we show that at each iteration of algorithm  <dig> each connected component grb has only black edges, or the connected components with red edges has no red-sigma graphs. initially, by assumption, since no character is active, no red edge is in the connected components of the red-black graph. then, by applying lemma  <dig> and  <dig>  the realization of the maximal characters cm of poset p does not induce any red sigma-graph, thus proving the invariant. now, a successive iteration of the algorithm requires to add to sc the free characters or the maximal inactive characters of the red-black graph. by applying lemma  <dig>  the red-black graph has connected components without red edges or at most two components having red edges, since the active characters by statement  <dig> are in at most two components. for the first type of components, the invariant property is immediate since the component does not have any red edge. consider now the second type of components. by lemma  <dig>  there are at most two such components, moreover, either each connected component has some maximal active character that are free or the maximal inactive are adjacent to all species of the connected component of the red-black graph. assume that the active characters in the connected component having red-edges are free. thus by definition, these active characters are removed from the red-black graph including all incident edges. otherwise, the maximal active characters are all adjacent to all species and thus they are realized without adding new red edges. in both cases, the invariant property holds. clearly, if all characters are in sc after the application of the algorithm, it is immediate that the red-black graph is edgeless since all active characters are free . thus sc is a successful c-reduction. observe that in case f is empty, all characters can be realized, and consequently, the sequence sc after the iterations of the algorithm includes all characters of the red-black graph, thus implying that a solution always exists.   □

an algorithm for cppp
in this section we propose an algorithm for the cppp problem that is based on the procedure solve-cppp-empty-conflict. our algorithm is based on the search tree technique  <cit> , where we explore the tree of all possible c-reductions. since in a c-reduction each signed character  can appear at most once, the search tree has at most ! leaves. therefore we only need to describe a polynomial-time algorithm to compute an edge of the search tree .

just as the algorithm in  <cit> , we transform the matrix m of the instance  into an extended matrix me which is then analyzed to find a solution. in fact,  has a solution if and only if there exists a successful c-reduction for me that can be associated to a constrained perfect phylogeny. the algorithm in  <cit>  explores all feasible permutations of the set of characters  of me in order to find one that is a successful c-reduction, if such a c-reduction exists.

clearly computing all permutation is not efficient, therefore we implicitly build a decision tree, where at each step we fix a character in a given position of the permutation. to each node x of the decision tree, we associate the matrix me, obtained from me by realizing the characters labeling the edges from the root to x, and its associated red-black and conflict graphs , gc). when gc is edgeless, instead of further exploring the decision tree, we apply algorithm  <dig>  at the same time, if grb contains a red-sigma graph, then me does not admit a persistent perfect phylogeny. a fortiori, in that case me cannot admit a persistent perfect phylogeny, hence we can stop exploring that portion of the decision tree. moreover, we can stop the search as soon as we find a solution, since we have no optimization criterion to discriminate between feasible solutions. in practice, all those criteria allow to avoid exploring a large part of the decision tree, as shown in our experimental analysis.

experimental analysis
we have implemented our algorithm as a c++ program and we have tested it over simulated data produced by ms  <cit> . moreover, we have tested our program on real data coming from the international hapmap project  <cit> . all tests have been performed on a standard workstation.

the two different kinds of data correspond to two separate goals. the analysis on simulated data is aimed at studying the scalability of our approach for increasing numbers of species and characters. more precisely we have run our program for n =  <dig>   <dig>   <dig>   <dig>  and for values of m  ranging from n/ <dig> to 32n. the reason for the choice of m is based on some properties of all persistent phylogenies. let t be a persistent perfect phylogeny consistent with a n × m matrix, and assume that the input matrix has no duplicated rows or columns. then we can prove that n/ <dig> ≤ m ≤ 2n.

moreover, ms produces matrices that have a perfect phylogeny, but can have duplicated rows and columns. to introduce back mutations, we have randomly modified at most one state of each duplicated row. for each choice of the parameters n and m we have produced  <dig> random instances, on which we have run our program with a 15-minute timeout, without imposing any constraint. the results are represented in table  <dig> 

then, for the first  <dig> of the  <dig> instances of each parameter choice, we have modified the input matrices, by introducing some random constraints, in order to determine if constraining the set of feasible solutions can help in finding a persistent phylogeny. for each instance of the first phase, we have produced  <dig> instances with  <dig> or  <dig> random constraints. for both cases we determine when at least one of the  <dig> constrained instances is solved more quickly than the unconstrained instance. the goal is to determine when there is a sizable  probability that introducing some random constraints can help in computing a persistent phylogeny. moreover, we determine when the median of the  <dig> constrained instances is solved more quickly than the unconstrained instance. in this case the goal is to determine when there is a 50% probability that some random constraints can help in computing a persistent phylogeny.

the most important result of this experiment is that for instances where our implementation requires at least a second , the idea of introducing random constraints is often beneficial. this fact suggests a direction for further improvements, that is incorporating into our program some deterministic constraints, based on a cursory analysis of the conflict and of the red-black graphs. actually, how we manage an edgeless conflict graph is as an example of this idea. table  <dig> summarizes the experiment on constrained simulated instances.

finally, the algorithm has been tested on real data coming from the international hapmap project. the data are classified by type of population. in our case, we used data from the set asw . each individual is described by the two haplotypes . this experiment investigates the usefulness of the constrained persistent model to manage haplotypes data that cannot be explained by the perfect phylogeny model. in fact none of those instances admits a perfect phylogeny, but our model and implementation are able to find a reasonable interpretation to the data. the data set consists of binary matrices of dimensions  <dig> ×  <dig>   <dig> ×  <dig>   <dig> ×  <dig>  and  <dig> ×  <dig>  for each group we considered  <dig> matrices. in all cases the matrices do not admit perfect phylogeny, and the number of conflicts changes from a minimum of  <dig> to a maximum of  <dig>  increasing the size of the matrix, and therefore the number of conflicts, the percentage of matrices that admit persistent perfect phylogeny decreases. more in detail, 80% of the tested matrices of size  <dig> ×  <dig> admits solution, only 20% of the tested matrices of size  <dig> ×  <dig> admits solution, and none of the sets  <dig> ×  <dig>  and  <dig> ×  <dig> admits solution. the results show that haplotype data may be related by the persistent phylogeny in case they cannot be explained by the perfect model. it would be interesting to investigate the biological soundness of the persistent perfect phylogeny in this context.

CONCLUSIONS
the algorithms and models discussed in the paper may have interesting applications in the construction of evolutionary trees based on the analysis of binary genetic markers, where variants of the perfect phylogeny have already been considered, such as in the study of evolution based on introns  <cit>  or progression pathways using tumor markers or in discovering significant associations between phenotypes and single-nucleotide polymorphism markers  <cit>  and also in haplotype analysis. in this paper we have investigated the cppp problem, which is the general problem of computing a persistent perfect phylogeny for binary matrices where some characters may be forced not to be persistent in the tree. we provide algorithmic solutions for the problem: mainly a polynomial time algorithm when the conflict graph is edgeless and a fixed-parameter algorithm. in particular we show that when no constraint is given and the conflict graph is edgeless, a solution for ppp always exists. we experimentally show that the search tree technique, combined with the use of constraints allows to obtain efficiently solutions for matrices that otherwise would require exponential time. future research will be devoted to experimental investigation of possible improvements based on introducing a carefully crafted set of constraints to speed up the computation. the computational complexity of the cppp problem is open and it would be interesting to solve the problem for the unconstrained case.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all authors have contributed equally to the paper.

for each choice of the number of species and of characters, we state the number of instances where at least one of the  <dig> random constrained instances is solved more quickly than the unconstrained instance . moreover we state the number of instances where the median of the  <dig> random constrained instances is solved more quickly than the unconstrained instance .

