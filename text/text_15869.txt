BACKGROUND
diagrams have long been used to organize knowledge, and there has been an ever-growing use of such diagrams in biological sciences in the last half century. as their use increases so does the need for common methods to communicate biological knowledge accurately from author to reader in a manner similar to other disciplines that use technical drawings. advances in molecular biology experimental techniques have resulted in an abundance of high-throughput data, placing additional emphasis on the need for the organization and visualization of biological data. since its inception in  <dig>  the molecular interaction map  notation has helped address this need for standardized representation of biochemical and cellular processes through a notation that shares visual characteristics with electrical circuit diagrams  <cit> . the notation has been featured in a variety of publications as the mechanism used to organize biological information and the basis for mathematical simulations  <cit> . the mim notation has also garnered wide attention in the systems biology community. it has been advocated as a notation for graphical display of purely textual datasets such as those based on the biopax ontology  <cit> . the notation has also helped spur the creation of the systems biology graphical notation  consortium, which uses the mim notation as a basis for its sbgn entity-relationship  language  <cit> . potentially, the two graphical notations may converge.

as the amount of data in mim diagrams increases, the availability of that data becomes a priority because the diagrams can serve as sources of data to be mined. the information content of mim diagrams is often extended with annotations containing ancillary information, such as comments, external links, and citations; annotations are denoted as labels on interaction lines  <cit> . annotations provide readers with additional insight into the systems they represent, which may not be captured by the mim glyphs per se . these annotations have recently been mined in the work by mcintosh and curran who built a mim corpus that maps mim annotations to passages from the original research articles  <cit> .

the present work outlines an implementation of the mim notation and provides a new specification with a series of software tools based on this specification. presented first is the new specification that addresses previous ambiguities in the notation, provides definitions as a foundation for translation, and establishes a set of syntax rules for the validation of mim diagrams; the specification is provided as additional file  <dig>  this specification forms the basis of an xml-based format that includes elements to capture both the graphical and non-graphical elements of mim diagrams. the next topic presented is a mechanism for validating mim datasets according to the syntax rules found in the specification. lastly, an application programming interface  is provided as a support mechanism for developers to interact with specific features of the mim format.

methods and 
RESULTS
description of the formal mim specification
the mim notation has been described previously in several publications  <cit> . the formal implementation presented below is based on the most widely used features in the mim notation as presented in  <dig>  <cit> , and retains the goal of the mim notation to present unambiguous and accurate diagrams of biological systems, while simplifying the visualization of these diagrams. the complete mim specification is provided as additional file  <dig> and online on our project homepage .

mim notation elements
mim diagrams represent bioregulatory networks involving graphical elements broadly divided into two categories: entity and interaction glyphs. entities may represent objects in nature with physical structures, such as biological molecules , or non-physical objects, such as phenotypes, behaviors, perturbations, cell cycle states, etc. interactions are relationships between an entity and other entities or interactions. interactions between two entities are represented in the form of binding interactions  or the transformation of one entity into another . an interaction between an entity and another interaction can be used to describe the influence the entity exerts on the interactions, such as the inhibition of binding between two proteins by a third. the basic graphical elements that represent mim elements are referred to as glyphs and are shown in figure  <dig> and full details on their usage are provided in additional file  <dig> 

entity glyphs are differentiated by their shapes, and the various types of interactions are represented by lines with different arrowheads or other line end-marks. for some glyphs, the semantics of the glyph are determined by the context in which the glyph is used; examples of these cases include the production without loss and stimulation glyphs. the simple physical entity and entity feature glyphs, and restricted copy entity glyphs shown in figure  <dig>  while explicit and implicit complex formation are shown in figure  <dig>  as has been the case with previous mim specifications, the color of a glyph does not affect its semantics. the accompanying mim specification describes the full set of mim glyphs shown in figures  <dig> and  <dig> along with their appropriate use.

entity glyphs
the mim notation supports various types of entities, each represented by a different glyph. the most common entity glyph is a labeled rounded-rectangle that represents a simple physical entity  where "simple" denotes that the entity is not in a complex with other entities; this glyph is used to represent molecules such as proteins, dna, rna, etc. the labels of spes are the main identifiers used by readers in understanding mim diagrams, and it would be helpful for the purpose of data exchange that standardized nomenclatures, such as hgnc names for genes, be used.

an spe can also be represented in a manner that defines specific regions of molecules, such as protein domains, motifs, and sites. this representation provides a more detailed description of an spe through the use of entity features. entity features can be used to indicate specific regions of an spe that carry out a particular function as illustrated in figure  <dig> 

spes are typically represented only once in a given diagram, which allows for the traceability of all the interactions of a given entity to a single location on a diagram. modifiers are physical entities that are represented as labels without borders and generally represent small molecules  that can be depicted multiple times in a diagram. such small molecules tend to exist frequently in pathway interactions, and it would be prohibitive to route all the connections of a small molecule to a single glyph.

spes can exist in complexes with other entities. there are two types of complexes in mim: explicit and implicit complexes as shown in figure  <dig>  explicit complexes are diagrammed as small filled circles on binding interaction lines, and are termed "explicit" because the binding partners that give rise to them are shown. implicit complexes, however, are diagrammed as enclosures of spes and indicate an implied relationship between the spes without showing their direct interactions. figure  <dig> shows a complex of spes a, b, and c as an explicit complex. the interaction between a and b forms the complex a:b, which is then bound to c. as represented as an explicit complex, a and b cannot be unbound if c is bound to the a:b complex; this represents a common mechanism whereby c stabilizes the a:b interaction. the notation implies that spes a and b must bind to each other before c can bind to them. if a and b unbind, then there would no longer be an a:b for c to bind to. therefore, spe c must dissociate first before a and b can dissociate. the implicit complex spes shown in figure  <dig> does not provide readers of the mim diagram with information on the binding order of entities unlike the explicit complex representation. this representation is useful when binding order is unknown or when those details are not relevant to the intent of the diagram.

since spes tend to appear once on a diagram, it becomes necessary to have a method for diagramming homo-dimerization interactions. such interactions make use of restricted copy entities, small black dots that act as copies of the spes to which they are bound. restricted copy entities cannot be included in any other interaction; the complexes resulting from homo-dimerization interactions can participate in interactions in the same way as other explicit complexes.

there are two additional mim entity glyphs: conceptual entity and source/sink glyphs. conceptual entities, shown by a rectangular glyph, can be used to represent objects that do not have a clear physical structure  or whose physical structure is outside the scope of the given diagram. the source/sink symbol uses the mathematical symbol for an empty set and can be used to represent an unlimited and unspecified source for the production of an entity or an unspecified product of a degradation reaction.

interaction glyphs
the notation has three categories of interactions that exist between entities: reactions , catalytic interactions , and contingencies ; all the interaction glyphs are shown in figure  <dig>  for brevity, only the usage of a limited number of interactions is presented here. readers are directed to the mim specification for a description of all interaction types. the reaction types include non-covalent reversible binding, covalent modification, covalent irreversible binding, template reaction, stoichiometric conversion, and production without loss of reactants.

non-covalent reversible binding is represented as a double-headed line with barbed arrowhead endings connecting two entities; barbed arrowheads are permissible only in accordance with the specification rules outlined in table three of the mim specification. the outcome of an interaction represented by a non-covalent reversible binding glyph is an explicit complex, indicated by a filled circle on the interaction line; the resulting explicit complex can then participate in additional valid interactions.

covalent irreversible binding functions in the same manner as non-covalent reversible binding, but with different semantics, namely that those interactions must be covalent and not directly reversible. covalent modification uses a single-headed line with a barbed ending pointing towards the modified entity with a modifier entity on the end of the line that is not barbed, as shown in figure  <dig> 

stoichiometric conversion uses a single-headed line with a triangle end that points from the reactant to the product. the stoichiometric conversion can be used to describe the production of multiple entities, as shown in figure  <dig> 

the mim notation also offers glyphs to describe the stimulation and inhibition of other interactions, and these are part of the set of contingency interactions. an unfilled triangle arrowhead is used to represent stimulation, while a terminal bar is used for inhibition. to indicate that an entity is necessary for a process to occur, a bar is placed behind the unfilled triangle of the stimulation glyph.

catalytic interactions follow a similar set of syntactic rules as contingencies, but represent interactions requiring a catalyst .

the mim specification provides additional examples and guidance on the usage of the glyphs in the notation, especially in more complicated situations.

formal rules for mim
one of the key features of this new implementation of the mim notation is the introduction of a strict set of syntax rules that provide constraints on valid mim diagrams. previous mim publications presented both basic and elaborate examples, but did not codify the extent of the syntactic capabilities of the elements of the notation. there was no clear method to validate diagrams in terms of the manner in which elements are connected. the new syntax rules presented here will help users create and update valid mim diagrams.

the syntax rules presented in table three and table four in section  <dig>  of the mim specification treat each interaction glyph as having three possible places of connection: the start, the end, and the line itself. for symmetric interactions , either terminus of the line may be considered the start of the interaction with respect to the syntax rules. for all other interactions types, the line terminus without an arrowhead is considered the start of the interaction. the syntax rules outline what entities may connect to the start and end of an interaction line and whether a symbol can exist on an interaction line between its termini. additional rules in the formal mim specification outline the usage of branching glyphs, as well as other syntactic rules.

in addition to these rules, the mim specification outlines how glyphs should be interpreted in conjunction with other glyphs. section  <dig>  of the mim specification specifically outlines correct interpretations of the presence of entities given the potential incompleteness of knowledge about a particular entity based on the interactions in a diagram. this is closely aligned to the ideas of the "heuristic" mim interpretation, which recognizes that the role of "transitive" effects  is often unknown  <cit> .

limitations of the formal implementation
the mim notation formalized by the current specification is constrained to facilitate the implementation of software tools for mim, and does not include all mim glyphs that have been published previously. in the notation's history there have been variations in the representation of certain glyphs; this issue has been addressed by choosing a single representation for each concept in the notation. this implementation of the notation does not permit ad hoc glyph creation. this facilitates the validation of diagrams and allows software developers to be confident that they have implemented all known features of the implementation; other glyphs may be added in future releases of the specification.

as the notation has evolved, several shorthand notation elements have been developed to simplify common patterns in mim diagrams. the current implementation includes only some of these shorthand notation elements from previous mim publications. undoubtedly, this means that certain constructs in diagrams will be more visually complex, but since these elements do not add to the semantic capacity, they have been postponed for future releases.

the specification presented here does not provide strict guidance on the glyphs of the notation that are suitable for computational simulations; this topic has been discussed previously regarding the manner in which the mim notation may be used in conjunction with mathematical simulations  <cit> . one future development that may support such a goal is by outlining an additional validation method for glyphs appropriate in computational simulations.

lastly, this implementation does not specify a notation to represent transport interactions. entities in the mim notation may represent a given entity in multiple states . with no clear way of distinguishing these states, the semantics of a transport interaction would be unclear; this is a problem common to other similar notations such as the sbgn er level  <dig> version  <dig>  notation  <cit> . in previous mim publications, transport reactions have been represented by a stoichiometric conversion glyph. in many cases this representation is clear and unambiguous. that representation, however, sometimes introduces awkward ambiguities. therefore, we did not include transport reactions in the current version of the formal mim specifications.

limitations of current machine-readable representations of mim diagrams
several software projects have included support for the notation and have each addressed the lack of a standardized data model for the mim notation differently. the first associated software project for mim diagrams integrated the diagrams with metadata in the form of e-mims  found at http://discover.nci.nih.gov/mim <cit> . e-mims store the diagrams using the svg  format to provide interactive features allowing the graphic elements to be connected to metadata. the svg format does not retain the semantics of the elements visualized, and the metadata, currently, are reintroduced to the svg files through a post-processing step.

another project, the java-based biological pathway diagram editor pathvisio, has included the glyphs of the notation for the purpose of facilitating the production of mim diagrams  <cit> . the pathvisio software provides mim-specific interaction glyphs for diagrams that are stored using the gpml  format. the mim-specific glyphs were provided as additions to the pre-existing pathvisio glyphs that are external to the mim notation. if users include both mim-specific and external glyphs, a diagram will be viable in the context of the gpml format, but will lose the consistency required for exchange with other mim-specific tools and tasks, such as validation.

software support for mim was recently provided by the mimcity database project  for storing, querying, visualizing and analyzing data contained in mim diagrams . the project developed an accompanying data model implemented in the form of a database schema that is compatible with an sbml-based representation of the mim notation also developed for that project. the sbml-based mim representation addresses incompatibilities between the mim and sbml through the use of sbml annotation containers to embed mim information content not supported in sbml. the mimcity database schema and the sbml-based mim representation, however, do not include elements to describe the visualization of mim diagrams.

overview of mim schema
the various formats used in the aforementioned projects have limitations that highlight the need for a standard format to support future mim software projects. the new mim markup language  meets this need and provides a standard format for the exchange of mim diagrams among different software. the mimml format conforms to xml schema  <dig> , and is based on the gpml schema developed for use with pathvisio  <cit> . mim datasets are plain-text xml data streams: the datasets are characterized by matching start and end tags, and elements can contain attribute-value pairings. the schema is used to store information about the visual presentation  and layout of the diagram as well as accompanying metadata .

the mimml format employs several xml elements of different types; the ones of most importance are outlined here. the root element of the mimml schema is the diagram xml element used primarily to store size information about the diagram. this element can have several types of child elements; primarily these include: entityglyph, interactionglyph, anchor and mimbio xml elements; figure  <dig> shows a small mimml dataset that includes examples of all the mimml elements described; other example files on the website have more comprehensive examples . entityglyph is used to store information about all mim entities. this is a departure from gpml, which stores information in implicit and explicit complexes as groups and anchors, respectively. this change allows for a uniform mechanism when validating mim entity glyphs. interactionglyphs are used to store information about interactions and the elements to which they are connected. an interactionglyph xml element is made up of several point elements. point elements provide routing information and store type of arrowheads used in a given interaction as shown in figure  <dig>  for the purposes of validation, the mimml schema, unlike gpml, restricts the types of arrowheads that can be used to only those that exist in the mim notation. the first and last points of an interactionglyph contain the visref attribute to specify to which mim element each line end is connected; shown in figure  <dig>  interactionglyphs may also include attributes pointing to anchor xml elements. anchors are connection points on an interactionglyph. these are used to connect interactions to each other, as is the case with contingencies, and also, to represent the intramolecular glyph on an interaction.

the xml elements for interactions and entities can also include references to particular metadata items stored in the mimbio xml element that acts as the primary location for the storage of mim metadata. the mimml format supports two types of metadata: cross-references and annotations. cross-references allow the mapping of external database resources to mim elements. annotations exist as two components: a comment and a publication cross-reference. this allows users to map particular interactions to the publications that provide evidence for the existence of the interaction, while the comments stored for specific mim elements provide additional information about entities and interactions not captured by the notation. the structure of mim cross-references is modeled after those in the biopax format  <cit> . the mimbio xml element also stores metadata related to the diagram, such as title and creator information; these elements are similar to those provided in gpml with the exception that they use terms from the dublin core set of metadata terms .

the mimml schema adds metadata elements to allow controlled vocabulary to be used to describe the relationship of an external database resource and a mim element and to allow users to specify the biological properties of entities through controlled vocabulary beyond the generic terminology used by the mim notation . the values for element type were adopted from the biopax format to simplify the process of translating mim diagrams to biopax datasets.

an example diagram and mimml dataset
in this section, we provide an example of the mim notation and mimml format with the use of the ca2+/calmodulin-dependent protein kinase  mim diagram  stored in the mimml format and provided as supplemental information. the camk regulation mim was originally introduced in the  <dig> specification of the mim notation as figure twelve of that publication; a full description of the interactions is included by kohn et al  <cit> . the diagram covers many of the properties of the mim notation, thereby making it useful when describing the changes that have been made to the mim notation. the camk example shows the intramolecular control of the protein kinase camk, and how this regulation can affect the phosphorylation of substrates  by the kinase domain of camk. figure  <dig> shows the diagram according to the formal mim presented here. the most significant visual change is in the camk protein glyph. the entity glyph for the camk protein is linked to its two domains , and the domains have been separated so they exist in two separate entity feature glyphs. the cleavage and intramolecular glyphs have undergone cosmetic changes, as well as the way that branched interactions are supported. changes to the diagram are largely cosmetic to simplify the implementation of the notation in software editors of mim diagrams.

validation of mim datasets
datasets for each schema are validated at two levels: the first is with regard to the well-formedness of the dataset according the mimml xml schema and the second are rules that are outlined in the formal mim specification. the mimml xml schema outlines the valid structure of a mimml dataset, which can be used for validation purposes. the second level of rules checks proper usage of several properties of mimml datasets: use of entity/interaction attributes, formats of labels for modifiers and entity features, use of interaction arrowheads, placement of explicit complex and intramolecular symbols, and connection of interactions to entities or other interactions. validation of mimml datasets against the formal mim connection rules is done using schematron, a rule-based validation language for finding patterns in xml trees  <cit> . assertions about the presence or absence of these patterns can be used to determine that a document adheres to a given rule set. currently, mimml datasets are not being validated against the layout rules and recommendations found in the formal mim specification; the focus here is to validate the syntax of mim diagrams.

the mim schematron rule set can be used wherever extensible stylesheet language transformations  may be used with other standard xml tools. to simplify the use of the schematron rule set, it is made available in conjunction with java-based schematron ant task  along with a java build file to show how schematron may be used as a part of a pipeline and for the batch validation of multiple mimml datasets.

mim application programming interface  implementation
usage of an xml-based format to store the data of mim diagrams allows developers to provide mimml-related functionality using commonly available libraries capable of parsing xml data streams, but these libraries work at a low-level, at the level of xml elements and attributes. the mim api provides a higher-level of functionality to interact directly with features of the mimml schema.

the mim api is a java-based api to the elements and attributes for the manipulation and retrieval of information contained in a mim diagram set forth by the mimml xml schema. the interface is generated using xmlbeans  a java-to-xml binding framework used for developing java applications built around an xml schema. the framework provides wide coverage of the features available for xml schemas and maps xml data types to java data types. xmlbeans generates a set of corresponding java classes based on an input xml schema. these generated interfaces and classes can then be used by developers to access and manipulate xml instance data using javabeans-style accessors  and setfoo()), which are more friendly than usage the of the xml document object model . xmlbeans provides an xml parser and validator, and it gives developers the capability of lower-level navigation of an xml document using xmlcursor. a complete description of xmlbeans is available at . the mim api requires the installation of the underlying xmlbeans library . the xmlbeans library provides support for xpath and xquery expressions using the saxon xslt and xquery processor .

usage of the mim api
operations using the api are aligned to the mim xml schema, and one java object corresponds to each element in the mimml document. all of the interfaces to the mim elements inherit from the xmlobject interface, provided by xmlbeans. this interface provides basic functionality for all objects, such as the method for validation against the xml schema. usage of the xmlbeans library provides the capability of inputting mimml files in a variety of ways including from a file or string, but the mim api is also capable of importing from a java xml dom  node object or by retrieving a mimml data stream using a url . mimml datasets can also be created de novo and existing datasets can be manipulated. the mim api supports all the constructs of the mimml format including the ancillary constructs, such as comments, and generic properties. using a java-based xslt processing engine, such as saxon, it is possible to additionally validate mimml datasets against the schematron rule set within a java program.

benefits and disadvantages of xmlbeans for the mim api
the mim api can be used in conjunction with apis for other formats or libraries providing other functionality, but the major distinction between the sbml and cellml apis and the mim api is the usage of an xml-binding framework, which comes with both benefits and disadvantages. one benefit is that the usage of xmlbeans has simplified and sped up the development of a mim api. this has allowed the mim api to reach its intended audience faster, which allows developers to concentrate on developing applications that support the mim notation and make use of the information content represented by the diagrams rather through manual generation of boilerplate code. secondly, bugs are minimized due to the stability of the xmlbeans code base resulting from over five years of development and use. lastly, maintainability is improved through code generation that aids in the adaption of software to future changes made to the underlying mim schemas. one disadvantage in using xmlbeans is that it provides functionality for a single programming language, which may be a deterrent to some developers. both sbml and cellml provide several language bindings  <cit> . as the need for the support of other languages increases, other xml-binding libraries will be used to make these language bindings available.

discussion and 
CONCLUSIONS
the molecular interaction map  notation provides a way to depict bioregulatory network diagrams in a standardized manner. the notation was originally developed in  <dig> and has since been further developed and updated, most notably in  <dig>  <cit> , where a detailed description of the glyphs and their usage was provided. the mim notation has been developed in a fluid manner that has allowed it to depict a wide range of biological concepts including notation for polymerase, helicase, and primase activity as well as other symbols  <cit> . these fluid advancements in the notation enhance the range of biological networks that can be diagrammed, but can hamper the development of consistent software for the mim notation. here we present a well-defined and internally consistent mim formalism and set of tools that can facilitate the development of software supporting the major parts of the mim notation in the areas of creation, validation, and analysis of mim diagrams. these tools should also facilitate in translation of mimml-formatted diagrams to and from other formats, such as the biopax or the systems biology graphical notation markup language  format currently in development . sbgn-ml and other developments by the libsbgn group will provide developers with tools similar to the ones we present here for mim, so that pathway editors, such as celldesigner, edinburgh pathway editor, pathvisio, and vanted, can support sbgn in a common manner  <cit> .

a mim diagram editor, mimtool, has been developed, which supports the mimml format presented herein  . it is limited in that it does not yet support the metadata components of the format. mimtool is associated with the mimcity database for mim diagrams, which is expected to also support the mimml format in the future   <cit> . additionally, pathvisio  is in the process of being extended to support the mim specification and the mimml schema; one key feature being added to pathvisio is the ability to render mimml files . the example figures associated with the current publication have been produced in pathvisio  <cit> .

the current work places a major emphasis in providing developers with basic tools to facilitate software development and enhances the level of detail for the presentation of mim concepts. it is hoped that this new level of detail simplifies the adoption of additional mim concepts into the sbgn notations or other notations. as one example, mims can represent protein domains as entity features, and this capability is important for the depiction of many critical biological signalling pathways. interactions involving domains can therefore be represented with greater flexibility using mims than with sbgn er level  <dig> version  <dig> , which currently does not address domain representation  <cit> . for an example of how sbgn addresses interactions involving the domains represented in mims, the reader might compare figure  <dig> for camk regulation in the current paper with figure  <dig>  in the sbgn er specification. while graphical notations in biology have received strong attention in recent years, no notation has yet met all the needs of users. one of the most recent mim publications  <cit>  outlines the depiction of several new glyphs for polymerase, helicase, and primase activity, which helps to further the discussion on use cases still requiring a standardized depiction.

further developments may add new components to the specification and the mimml schema as the usage of these components of the mim notation becomes clarified. additionally, the combinatorial interpretation mode of mim diagrams  <cit>  is in the process of being algorithmically defined and will be supported in future software.

the work presented here makes advances in the usage of the mim notation to visualize data in a way that is more "natural" to humans while retaining the qualities of being consistent and machine-readable. participation by software developers within our group and collaborators has helped to ensure that all elements have a straightforward implementation. this implementation of the mim notation will continue to expand to cover more of the glyphs outlined in publications on the mim notation; each acting as a basis for the development of mim software support.

availability and ongoing support for the mim specification and software
the schemas and api are free and open source projects under the apache license  <dig>  that allows users to freely copy, distribute, and modify the projects and the underlying source code; this software may also be used in proprietary software. all project files are stored in our svn repository and links to specific files, such as the mimml xml schema, are provided from the project homepage. the mimml xml schema is provided with documentation in the form of a webpage outlining the various xml elements and their attributes. sample mimml datasets are provided along with a java ant build file, which incorporates the schematron ant task to validate the samples according to the mim validation rules; this provides a mechanism to enhance the quality of mim diagrams. this is a stable api for the mimml format meant for widespread use. documentation of the attributes and operations used in the api is provided using javadoc  on the project's svn repository. the projects may be updated regularly to support new features, and contributions are welcome.

availability and requirements
• project name: mim specification, api and validation rule set

• project home page: http://discover.nci.nih.gov/mim; svn repository: https://ncisvn.nci.nih.gov/svn/mim

• operating system: platform independent. it has been tested on mac os x and windows.

• programming language: java

• other requirements: java  <dig>  or higher, xmlbeans  <dig> . <dig>  iso schematron

• license: apache license, version  <dig> 

• any restrictions to use by non-academics: redistribution requires compliance with the apache license, version  <dig> .

the project homepage provides links to project resources  of this project. source code for the various components is available via svn at https://ncisvn.nci.nih.gov/svn/mim.

abbreviations
api: application programming interface; atp: adenosine triphosphate; adp: adenosine diphosphate; biopax: biological pathway exchange language; camk: ca2+/calmodulin-dependent protein kinase; cellml: cell markup language; dom: document object model; dna: deoxyribonucleic acid; er: entity-relationship; genmapp: gene map annotator and pathway profiler; gpml: genmapp pathway markup language; hgnc: hugo gene nomenclature committee; hugo: human genome organisation; mim: molecular interaction map; mimml: molecular interaction map markup language; rna: ribonucleic acid; sbgn: systems biology graphical notation; sbgn-ml: systems biology graphical notation markup language; sbml: systems biology markup language; spe: simple physical entity; svg: scalable vector graphics; svn: subversion; svrl: schematron validation report language; url: uniform resource locator; vanted: visualization and analysis of networks containing experimental data; xml: extensible markup language; xslt: extensible stylesheet language transformations

authors' contributions
al created and tested the mim api, mimml schema, and mim schematron ruleset, wrote project documentation and example mimml datasets, edited the specification, and wrote the manuscript. ms tested the mim api and edited the specification. lc created example mimml datasets and edited the specification. eik, mia, and kwk edited the specification and manuscript. all authors have read and approved the final manuscript.

supplementary material
additional file 1
formal mim notation specification. formal mim specification documenting mim glyphs and their usage.

click here for file

 acknowledgements
we would like to acknowledge discussions with can ozturan, mine edes, and turkan haliloglu. also, discussions with members of the sbgn and biopax communities were useful to the success of this project, especially emek demir, nicolas le novère, and hiroaki kitano. discussions with martijn van iersel were useful in understanding the gpml format. this research was supported by the intramural research program of the nih, national cancer institute, center for cancer research, as well as with federal funds from the national cancer institute, national institutes of health, under contract number hhsn261200800001e. the content of this publication does not necessarily reflect the views or policies of the department of health and human services, nor does mention of trade names, commercial products, or organizations imply endorsement by the u.s. government.
