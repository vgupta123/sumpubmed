BACKGROUND
genes are the smallest functional units of an organism. they carry out vital functions in cells by interacting with each other and with other molecules. biological networks model such interactions among genes. using biological networks, researchers are able to take a holistic approach on the analysis of cellular functions. such analysis has shown that biological networks have a number of global properties. one of these properties is their hierarchical organization. hierarchical organization defines a partial ordering of the underlying genes. recent studies have shown that directed interactions between transcription factors  in transcriptional regulatory networks  impose a hierarchy on trns  <cit> . analysis of the hierarchies of trns helps researchers better understand the flow of controlling signals through the transcription machinery  <cit> . tfs are special types of proteins that control the expression of other genes by binding to specific regions of the dna  <cit> . since each protein is coded by genes, we will use the terms transcription factor and gene to refer to tfs throughout this paper. one way to model hierarchy in trns is to assign levels to the interacting tfs. figure  <dig> shows a sample network with its level assignments. in this paper, we consider the problem of finding the hierarchical organization of a trn. the formal definition of our problem in this paper is as follows:

problem definition
let us denote a trn with g=. here, n denotes the set of tfs and e denotes the set of directed interactions  between the tfs in n. we refer to each tf in n as a node. we name the ith node in n as ni. we represent an edge from the node nito nj with . also, we denote the maximum possible number of levels in g with m. we denote the hierarchy level assigned to a node ni with ti where ti is an integer in { <dig> ,, <dig> …,m}. let ϕ→{ <dig> } be a binary function that describes the key topological relationship between ni and nj.  we compute a penalty score pij for each pair of nodes as follows: 

 pij=ϕ,ifti≤tj <dig> else 

our aim is to find an assignment of hierarchies to the nodes of n which minimizes ∑pij.

in this paper, we use two different ϕ functions describing two key topological properties. 

 <dig>  adjacency. we define ϕ =  <dig> if  ∈ e and ϕ =  <dig> otherwise.

 <dig>  reachability. we define ϕ =  <dig> if there exists a path from ni to nj in g by traversing the edges in e. we set ϕ =  <dig> otherwise.

depending on the choice of the two ϕ functions, we name the resulting distance function adjacency distance or reachability distance respectively. in summary, using adjacency distance we aim to assign levels such that every tf is above the others it directly regulates, and below its every direct regulator. on the other hand, using reachability distance, we consider any direct or indirect regulation relation between two tfs when assigning levels.

there has been attempts to devise methods to reveal the underlying hierarchies of trns. yu and gerstein developed bfs-level method to carry out this task  <cit> . this method uses breadth first search to assign hierarchies to tfs in a network. although their method works for most networks, it fails to assign accurate levels for networks that contain cycles. jothi et al. developed vertex sort method  <cit> . this method incorporates topological sort algorithm for addressing the network hierarchy problem. vertex sort method does not have any restrictions on network motifs or cycles. however, rather than a certain hierarchy, it assigns a range of possible levels for the tfs. hartsperger et al. devised an algorithm based on breadth first search method to solve the problem  <cit> . their solution improves the bfs-level method, and outputs a hierarchy for every network regardless of its topological features. however all these algorithms fail to minimize the number of edges that violate the hierarchy. we name such edges as conflicting edges. we will elaborate on the quality of results calculated by existing methods in section comparison with existing hierarchical decomposition methods.

contributions
in this paper, we develop a novel approach to tackle the problem of discovering underlying network hierarchy. we first consider the topology of the network as a set of constraints. then, we define two different objective functions using adjacency and reachability penalty functions. we define the minimization of total penalty as the objective of the problem. using the above explanations, we transform this problem to a mixed integer programming problem  <cit> . we solve the resulting problem using existing mipp solvers. we name our method hierarchical decomposition of regulatory networks . the main advantage of hiden is it introduces a sound mathematical formulation to the network hierarchy problem. our formulation can work with any objective function that is a linear combination of the edges. one drawback of hiden is that it does not scale well to very large networks due to the growing size of the mipp with increasing number of tfs. in order to address this issue we develop a divide and conquer approach.

the rest of this article is organized as follows: in section algorithm, we describe the methods we developed in this paper. in section results and discussion, we discuss the results of hiden in detail. finally, in section conclusion, we briefly conclude the paper.

method
in this section, we describe the hierarchical decomposition method we developed. section hiden describes our method. section example demonstrates hiden on a simple example. section divide and conquer method describes divide and conquer method we employ to scale hiden to larger networks.

hiden
hiden transforms the hierarchical network decomposition problem to a mipp  <cit> . given a trn, hiden first constructs a set of linear constraints and a linear optimization function that collectively describe the penalty of the decomposition. then it uses existing optimizer software to solve the resulting problem. next, we will explain how we formulate the mipp.

let us denote the given network that will be decomposed with g. let us denote the nodes  of this network with n <dig>  n <dig>  …, nm, where m is the total number of nodes of g. hiden, allows the user to set a limit on the maximum number of allowed levels for hierarchical decomposition. let us denote this number with m. also, let us represent the level assigned to node ni with ti for all i∈{ <dig> ,…,m}, . we aim to find the level assignment t = {t <dig> t <dig> …,tm} that minimizes the total penalty resulting from this level assignment. therefore, the objective of our problem is the sum of individual penalty scores for each pair of nodes: 

  minimize∑1≤i,j≤mpij. 

next, we set a limit on the number of levels in the hierarchy. we do this by limiting the variables ti as follows: 

  0≤ti<m. 

we, then, represent each pij as a linear constraint. remember that pij is a binary function in the following form: 

 pij=ϕ,ifti≤tj <dig> else 

we can rewrite this function as follows: 

 pij= <dig> ifti≤tjandϕ= <dig> else 

let us only consider the cases where ϕ =  <dig>  we can represent the rest of this function using two linear inequalities. the following set of constraints represent the function pij: 

  pij∈{ <dig> } 

  tj−ti−m×pij≥−m 

  tj−ti−m×pij≤− <dig> 

in order to prove that these inequalities model the function pij correctly, we need to inspect all possible scenarios: 

 <dig>  if ti > tj and pij =  <dig>  then − <dig> ≥ tj − ti ≥ − and m × pij =  <dig>  therefore both  and  holds.

 <dig>  if ti ≤ tj and pij =  <dig>  then tj−ti ≥  <dig> and m × pij =  <dig>  therefore,  holds, however,  does not hold.

 <dig>  if ti > tj and pij =  <dig>  then − <dig> ≥ tj−ti ≥ − and m × pij = m. therefore the expression tj−ti −m×pij is smaller than or equal to −m− <dig>  this implies that  does not hold but  holds.

 <dig>  if ti ≤ tj and pij =  <dig>  then  ≥ tj−ti ≥  <dig> and m × pij = m, therefore both  and  holds.

therefore, enforcing the constraints ,  and  implies: 

  ∧ 

this corresponds to the latter definition of the function pij except the condition of ϕ =  <dig>  since we choose the function ϕ prior to the construction of the mipp, we know the value of ϕ for every pair . therefore, we can manually ensure this property, by only considering pij where ϕ =  <dig> and excluding pij completely from our calculations where ϕ =  <dig> 

based on the constraints above, the mipp we construct to solve the network hierarchy problem is as follows: 

 minimize∑i,js.t.ϕ=1pijwhere∀ni0≤ti<mtiis an integer∀ni,njsuch thatϕ=1pij∈{ <dig> }tj−ti−m×pij≥−mtj−ti−m×pij≤− <dig> 

example
in this section, we show the application of hiden on the network in figure  <dig>  we will use adjacency penalty function in this example. therefore: 

 ϕ=1if an edge fromnitonjexists0otherwise 

using this ϕ function, the objective of the mipp is to minimize the following function: 

 ∑i,js.t.ϕ=1pij=p12+p13+p15+p24+p35+p36+p67+p <dig> 

now we go over to the constraints. first set of constraints limit ti: 

 ∀ni,ifrom  <dig> to 70≤ti<mtiis an integer 

then, we write the remaining functions as follows: 

 ∀∈{,,,,,,,}pij∈{ <dig> }tj−ti−m×pij≥−mtj−ti−m×pij≤− <dig> 

in the resulting problem, m is left as a user defined parameter. when we run the above problem with m =  <dig>  hiden returns the following result: 

 p12+p13+p15+p24+p35+p36+p67+p73=1= 

divide and conquer method
hiden works well for networks that have up to  <dig> nodes. for larger networks, however, it becomes difficult to solve the resulting mipp using current hardware. this is mainly because the number of integer variables of the mipp that describe the problem for the given network increases. this increases the memory consumption and the running time significantly.

in order to solve our problem for networks that have more than  <dig> nodes we adopt a divide and conquer approach. given a large trn, we randomly divide this network into fixed size partitions. we do this by first randomly selecting a node from the given network. this node is the seed of the first partition, and thus it is a member of that partition. we then chose the remaining nodes in that partition iteratively by randomly growing the partition one node at a time. more specifically, at each iteration, we randomly select a node that is not selected so far and that is interacting with at least one of the nodes in the partition. we repeat these iterations until the number of nodes in the partition reaches to a predefined threshold or all the nodes in the trn are assigned to a partition. then, we use hiden to decompose the subnetwork defined by the nodes and the edges in this partition into hierarchical levels. once we determine the levels of all the nodes in the current partition, we store those values as they will remain unchanged in the rest of our solution. next we randomly pick another node from the given trn among those that have not been considered yet as the seed of the next partition. we grow the next partition similarly and use hiden to decompose it into hierarchical levels. we repeat these steps until we exhaust all the nodes in the given trn.

this method greatly reduces the running time of hiden on large networks. since mipp is np-hard, depending on the size and the connectivity of the given trn, the divide and conquer strategy can be orders of magnitude faster than the unpartitioned hiden. however, due to random selection of the nodes, it is possible for us to not achieve the optimal result. this is possible if the partition of the network we start with does not intersect with one or more of the levels in its underlying hierarchy. it is worth mentioning that this probability is usually very low. we can explain this as follows. consider an n node network which contains n nodes belonging to a specific level x. if we select k nodes among these n nodes randomly, the probability that none of the k nodes belong to level x is /. as k or n increases, this expression quickly converges to zero. in order to reduce this probability further, we repeat the divide and conquer strategy multiple times, each time starting from a randomly selected node. in our implementation, we repeat this process  <dig> times for real trns. after  <dig> iterations, the probability of all the trials starting with an undesired  partition becomes very small . since the running time of partitioned hiden is orders of magnitude less than that of the unpartitioned hiden,  <dig> repetitions remains to be practical. it took less than  <dig> minutes for the largest dataset . our experiments showed that on the average, the results of the divide and conquer method reach its optimum in less than  <dig> iterations.

RESULTS
in this section, we evaluate hiden using a number of computational tests. in our tests, we let the underlying mipp solver to handle the case of multiple optimal results. we only consider the unique result reported by the solver in our discussions. in the rest of this paper, we will use the term experiment to refer to in silico experiments for simplicity.

dataset in our experiments, we used trns of e. coli, h. sapiens and s. cerevisiae. we used the previously constructed networks, used by existing methods to test our method  <cit> . earlier studies used existing interaction data to construct these three networks  <cit> . for the experiments that require gene function information, we used the information included in the gene ontology database  <cit> . we downloaded the list of essential genes for s. cerevisiae from the database of essential genes  <cit> .

in the rest of this section, we first compare hiden with other existing hierarchical decomposition methods in section comparison with existing hierarchical decomposition methods. in section biological evaluation of network hierarchies we evaluate the results our method using a number of biological properties of tfs. finally in section effects of input on hiden, we analyze the behavior of our algorithm with respect to different quantitative properties of the data.

comparison with existing hierarchical decomposition methods
the objective of hierarchical decomposition is to arrange the tfs of a given network to levels so that the gene that alter the activity of the other appears at a higher level than the other throughout the network as frequently as possible. the two ϕfunctions described at the beginning of this paper model this relationship in terms of the adjacency and the reachability of the nodes in the given network. in this experiment we evaluate how well our method, hiden, compares against three state of the art methods, namely vertex sort <cit> , hino <cit>  and bfs-level <cit> , in achieving this objective. to perform this comparison, we compute the penalty values obtained by hiden when it is applied on s. cerevisiae, e. coli and h. sapiens networks. we compute the same penalty values for the vertex sort, hino and bfs-level methods on the same three datasets for which their hierarchical decompositions are available.

the penalty is a quantitative value that can be used to compare different methods on the same dataset. however, since the size  and the topology of these networks deviate significantly, the resulting penalties will differ significantly across datasets. in order to report a statistically sound value that describes the success of a method independent of the network size and topology, we also compute the z-scores of the resulting penalty values.

let us denote the level assignment obtained by a specific method for an m node network with t = {t <dig> t <dig> ⋯,tm}. let γ denote the penalty of t according to a specific ϕ function. in order to compute the z-score for t, we randomly produce many level assignments using the same level distribution as that of t. for each such assignment, we compute the resulting penalty value using the same ϕ function. let μ and σ denote the mean and standard deviation of the resulting penalty values of all these random level assignments respectively. we calculate the z-score as follows, 

  z=μ−γσ 

a higher z-score implies a better level assignment. typically, a z-score of four or higher is very significant as they indicate a result which is  <dig> or more standard deviations more extreme than the mean table  <dig> summarizes the penalties and the corresponding z-score values. for hiden, we reported the results for each of the six values of maximum number of levels . for other methods the number of levels is not a configurable parameter. hence, we reported the level that we obtained after execution of that method. we discuss the results for each organism next.

afor hiden we vary the maximum allowable level from three to eight. we report the adjacency and reachability penalties as well as the z-scores for these penalties for each experiment. “num. level” denotes the maximum number of allowed levels. the results for hino on human are omitted, because of problems in execution.

s. cerevisiae
we compared hiden with all the three competing methods for this dataset. our method outperformed all the three methods in terms of both adjacency and reachability penalty values as well as the z-scores regardless of the number of levels. as the number of levels allowed increases, the penalty incurred by hiden monotonically decreases. this, however, is not true for the z-score as it depends on the distribution of nodes to levels. for instance hiden attains the highest z-score for adjacency penalty at level eight whereas it attains that using only six levels for the reachability penalty. the biggest drop of penalty takes place when the number of allowed levels increases from three to four. we observe further, yet, smaller improvement in the penalty as the number of allowed levels increases beyond four.

among the competing methods, the vertex sort method of jothi et al. incurs the lowest penalty. it, however, uses significantly more levels than the hino and bfs-level methods. furthermore, although it uses more levels than hiden as well, it performs worse than hiden in terms of both penalty and z-score measures. among the remaining two methods, hino and bfs-level, there is no clear winner. bfs-level leads to slightly less penalty at the expense of an additional level. as a result, hino produces slightly better z-scores.

e. coli
for this dataset, we compared hiden with all three existing methods. the penalty values of all the methods for e.coli are smaller compared to those of s. cerevisiae. this is mainly because e. coli network is much smaller. hiden performs the best among all methods for four or more levels according to both penalty and z-score values. we did not observe any improvement for hiden beyond seven levels. vertex sort attains statistically better results than hino and bfs-level methods.

h. sapiens
we compared hiden with vertex sort and bfs-level methods for this dataset. we omitted hino in this experiment because we could not run it on this dataset. the results follow a similar pattern as those of the two other datasets. hiden outperformed vertex sort and bfs-level even when it used fewer levels. the gap between the z-scores of hiden and the other methods was even more significant than the previous datasets. hiden led to the highest drop of penalty of from three to four levels and continued to improve with increased number of levels.

we conclude that, hiden performs significantly better than the competing methods for all the three major datasets.

biological evaluation of network hierarchies
in this section, we analyze hiden using biological evidence. first, we check functional properties of genes across different levels. then, we evaluate the locations of essential genes in the hierarchy.

functions of genes
trns regulate the expression of genes that take part in many processes in an organism  <cit> . earlier works suggest that the concentration of genes participating in certain functions are closely related to the level in the hierarchy  <cit> . however, majority of cellular functions in the cell take place through multiple reactions happening in succession. therefore, we expect a uniform distribution of functions among different levels. in order to confirm this theory, we calculated the functional enrichment score of every single level in the hierarchies we discovered. we first decomposed each of the h. sapiens, e. coli and s. cerevisiae trns to each of the three to eight levels. then, for the resulting  <dig> combinations , we calculated a p-value for each gene ontology term and level pair. we obtain the gene ontology terms from the gene ontology database  <cit> . we calculate these p-values assuming a hypergeometric distribution of the gene ontology term over all the tfs in the network. we observed that the p-values were similar at all levels of the hierarchy . this supports our initial theory that majority of the functions the tfs in our network participate are not enriched at any level. one example among many is the wound healing function in human network  <cit> . however, in rare instances, we observed some functions being moderately enriched in some levels. for example, third of the eighth level  of human trn is enriched with the signal transduction function. however, we could not detect any other levels in any other network enriched with this function.

each gene in an organism takes part in at least one metabolic function. a gene participating in a large number of reactions is a common phenomena in many organisms. in this experiment, we compare the level of each gene with the number of functions they participate in. by doing so, we aim to discover any existing relation between the two. in order to do this, we use the gene ontology database  <cit> . the participation of a gene in a reaction is represented using gene ontology annotations in the literature. for each gene in our networks, we first count the number of gene ontology terms it is annotated with. we also decomposed each network into six layers using hiden. then, we visualized the networks using hierarchy information as location and functional information as color of each node. figures  <dig>   <dig> and  <dig> show our results. our results suggest that there is no strong correlation between the number of functions of each gene and the level of the gene in the hierarchy. however, in all three organisms, we observed that the genes with the highest number of annotations tend to lie at the middle levels . this result indicates that regulatory hubs in the trns are not at the top levels. they are rather at the middle levels of the hierarchy.

gene essentiality
the genes which an organism cannot survive without are called essential genes  <cit> . such genes take part in vital functions in the cell. earlier works proposed that the number of essential genes is strongly correlated to its location in the hierarchy  <cit> . in this experiment, we aim to find out if there exists any such relation. in order to do this, we count the number of essential genes at each level of hierarchy in a five level decomposition of s. cerevisiae trn. we then report the ratio of number of essential genes to total number of genes in a level in the hierarchy. we also calculate p-values for the number of genes observed in each level to show how significant the observations are. figure  <dig> shows our results for this experiment. we observe that there is a higher density of essential genes at the middle levels of the hierarchy. we also observe that, the p-values we calculated show that the level three  is highly enriched in essential genes. this result, combined with the results of the previous experiment support our theory that regulatory hubs of an organism are often at the middle levels of the hierarchy, rather than the top level. indeed strong correlation between hubs and essentiality has been observed in the literature that supports our results  <cit> .

effects of input on hiden
in this section, we analyze hiden by changing the input of the algorithm. in order to do this, we first change the number of layers we decompose the network into. then, we assume errors and uncertainties in input networks. using our results, we explain how reliable our method is under different conditions. finally, we discuss the quality of our results for different subnetworks.

navigation of genes across levels in varying hierarchies
the location of a gene in the hierarchy depends highly on the total number of levels. this leads to the following important question: how much can we rely on the relative levels of genes? one key feature of our method is that it allows the user to specify the number of levels in the hierarchical decomposition of the given network. by exploiting this feature, next, we answer this question. particularly, we show how the change the number of levels affect the locations of the nodes in the hierarchy. in order to do this, we first calculate the levels of every node for s. cerevisiae, e. coli and h. sapiens networks in a six level hierarchy. we use these calculations to place every node in their respective positions. we then decompose the same networks to five levels. we use the result of the second decomposition to assign colors to each node in the network. figure  <dig> shows the results of this experiment for s. cerevisiae. our results demonstrate that for the majority of the genes, the relative position between different genes is preserved. in different decompositions, discovering genes in the same relative positions with respect to other genes suggest the accuracy of our method for the relevant genes. however, there exists some genes that violate this relationship. for example, in figure  <dig>  nodes ygl013c, ymr280c and ykl109w  are at least two levels away from where they were earlier. therefore, we conclude that the predicted levels of these genes not as reliable as the others. this approach can be used for evaluating the reliability of our results. figures  <dig> and  <dig> present similar results for e. coli and h. sapiens.

robustness of hiden
one weakness of all hierarchical decomposition methods arises from the nature of the biological network datasets that they are incomplete and imprecise. as a result, the actual network topology observed can be slightly different than what is given in existing network databases  <cit> . furthermore, studies demonstrate that the network topologies can vary due to many other factors such as external perturbations  <cit>  and varying genetic profiles and disorders  <cit>  even within the same species. this raises the question that how much can we rely on a hierarchical decomposition if the topology of the given network is not accurate?

this section evaluates the robustness of hiden with respect to inaccuracies in the given network. in order to do this, we carry out the following steps. given a network, we first find its hierarchical decomposition, denoted by t. we then create many mutant networks from this network for a given mutation percentage using the degree preserving edge shuffling model  <cit> . this is the state of the art network alteration method that preserves the degree distribution of the network. we elaborate on this method later in this section. thus, each mutant network denotes a potential precise network that is different than the original network. using the topology of each mutated network, we compute the penalty of the hierarchical decomposition t we found at the first step. thus, this penalty shows how bad our results are if our network is inaccurate. we repeat this for many mutant networks and report the average of their penalties.

briefly, we mutate a given network g as follows. let  and  denote two randomly selected edges from this network such that  u and v are different; s and t are different, and  the edges  and  do not exist in g. we remove edges  and  and add edges  and . let η denote the number of times we repeat this edge shuffling process. then the mutation percentage of the original network is η|e|×100% rounded to the nearest integer.

we conducted the experiments on s. cerevisiae, e. coli and h. sapiens and on both penalty metrics adjacency and reachability for different number of levels of hierarchy. figure  <dig> summarizes the results for s. cerevisiae, e. coli and h. sapiens using the adjacency and reachability penalties when three, six or eight levels are allowed.

the most important observation that follows from our results is that the z-score remains high even after we mutate the network by 20%. we observe a slight drop as the mutation rate increases, yet the results remain statistically significant. this observation holds for small , medium  and large  number of allowed hierarchical levels. this result has two major implications. first, hiden is extremely robust with respect to network mutations. it was able to identify hierarchical structure using the clues that remain in the topology of the given network after all mutations take place. thus, even if the original network may be imprecise, the decomposition found by hiden will be a true decomposition with a high probability. second, the degree preserving edge shuffling does not affect the decomposability of the network. the fact that even the original level assignment t yielded statistically significant penalties on the mutant network proves that it is possible to find another decomposition t’ of the mutant network that is statistically at least as significant as  t.

stability of hiden to network mutations
so far, we have observed that hiden was able to decompose the networks of the given three organisms successfully. this observation along with our last conclusion from the previous section begs the following question: can hiden decompose the mutant networks or was there a bias in topology of these three networks in favor of hiden? in other words, how stable is hiden with respect to alterations in the network topology?

in order to evaluate the stability of hiden with respect to network alterations, we carry out the following steps. given a network g, we create many mutant networks g’ from g for a given mutation percentage using the degree preserving edge shuffling. we then use hiden on each such g’ to find a new hierarchical level assignment t’ specifically for that topology. thus, this penalty shows how much the performance of hiden is affected from network alterations. we repeat this for many mutant networks and report the average of their results.

tables  <dig>   <dig> summarize the penalties and the corresponding z-scores for varying mutation percentages as well as varying maximum number of allowed hierarchical levels with according to adjacency and reachability penalties respectively. for all the three organisms, we observe similar patterns in our experiments. the most important observation is that hiden achieves very high z-scores at all mutation rates. furthermore, these z-scores are comparable to those of the original network . the adjacency penalty values are also comparable to those for the original network. this coincides with the observation we made in the robustness test in section robustness of hiden that the degree preserving edge shuffling does not alter the decomposability of the given network. as the mutation percentage increases, z-score and the adjacency penalties do not show a clear trend to increase or decrease. we, thus, reach to the conclusion that hiden is stable with respect to network alterations.

athe numbers above them is the corresponding z-score. level indicates the maximum number of allowed levels.

athe numbers above them is the corresponding z-score. level indicates the maximum number of allowed levels.

local versus global hierarchy of subnetworks
the entire biological network of an organism can be considered as a  collection of smaller subnetworks where each subnetwork corresponds to a coherent functional group. for instance, cell cycle network describes the interactions that take place during the division and replication of a cell to produce new cells. similarly, meiosis network describes a special type of cell division only observed in reproductive cells. these smaller subnetworks may follow a hierarchical structure as well within their local topologies. clearly, we can use hiden on each of these subnetworks to find their hierarchical structure by isolating them from the rest of the network one by one. we call such hierarchical decomposition as local hierarchy since it only depends on the topology of the subnetwork. we call the hierarchical decomposition we obtain for a subnetwork from the entire network’s topology as its global hierarchy. in this experiment, we evaluate how well the global hierarchy of a subnetwork fits to its local hierarchy.

let us denote the entire network with g and a subnetwork of g with g’. let us denote the level assignments for the networks g and g’ by hiden with t and t’ respectively. let t^⊆t be the global hierarchy of g’ induced from t. we calculate the adjacency penalty and z-score of t^ and t’ using the topology of g’. table  <dig> summarizes the results for s. cerevisiae for two major subnetworks, namely cell cycle and meiosis taken from the kegg database  <cit>  with different values of maximum number of allowed levels.

athe experiment is conducted on the two subnetworks of s. cerevisiae, namely cell cycle and meiosis. “num. level” denotes the maximum number of allowed levels.

the results demonstrate that the local hierarchy is better than the global one. this is not surprising as the global hierarchy is determined based on the entire network. thus, the levels are determined with the goal of optimizing all the interactions in the network. on the other hand, local hierarchy is determined only based on the restrictions asserted by the corresponding subnetwork. we observe that the gap between the local and the global hierarchy is small for the cell cycle network. it is, however, significant for the meiosis network. in order to understand the factors that contribute to this gap, we performed a detailed analysis of the topology of the entire s. cerevisiae network as well as these two subnetworks. cell cycle contained  <dig> genes and  <dig> interactions. meiosis was smaller, containing  <dig> genes and  <dig> interactions. we define an interaction from a gene that is not in the subnetwork to a gene that is in the subnetwork as an incoming edge. if the interaction points the opposite direction, we define it as an outgoing edge. we computed the number of incoming and outgoing edges to each subnetwork. the number of incoming edges per node was  <dig>  and  <dig>  for cell cycle and meiosis respectively. that for the outgoing edges was  <dig>  and  <dig>  respectively. this suggests that as the number of incoming edges increase, the chance that the global hierarchy deviates from the local one increases. this is indeed intuitive as the incoming edges influence the hierarchy much more than the outgoing edges. for the local hierarchy, we observe that a small number of levels is sufficient to get a good hierarchical decomposition. for instance, hiden resolved all conflicts for cell cycle in only five levels. it resolved all but one conflict for meiosis in four levels.

these results demonstrate that the local and global hierarchies can deviate significantly depending on the topological relationship between the subnetwork and the rest of the network. thus, detailed analysis of both decompositions can yield useful information regarding how the functions of a given subnetwork is depends on the other genes. hiden is capable of revealing such information.

CONCLUSIONS
in this paper, we took a novel approach to the problem of discovering underlying network hierarchy. we first transformed our problem to a mipp. then, we solved this problem using existing optimizers. we named this method hierarchical decomposition of gene regulatory networks. however, due to the growing size of the mipp with increasing number of genes, we encountered scalability issues. we proposed a divide and conquer approach to tackle such problems. later, we experimentally showed that our algorithm outperformed existing solutions in terms of minimizing conflicting edges in hierarchy. we also evaluated our method using biological and statistical tools. then, we discussed the relation between the hierarchy of a gene in a trn and its location in cell, essentiality and function, based on our experimental results and biological evidence.

availability and requirements
the source code for hiden can be found in additional file  <dig>  the code is written in c++. the code requires ibm ilog cplex version  <dig> or higher to compile and run. please refer to the documentation of cplex for platform specific instructions on how to compile and run applications that use cplex libraries. the results of our code using the penalty schemes described in this paper for trns of e. coli, h. sapiens and s. cerevisiae can be found in additional file  <dig> 

competing interests
the authors declare that they have no competing interests.

authors’ contributions
gg and tk designed the method. gg implemented the method. gg and nb gathered experimental results. gg and tk wrote the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1
a c++ implementation of the algorithm developed in this paper.

click here for file

 additional file 2
the resulting level assignments for the transcriptional regulatory networks ofs. cerevisiae,e. coliandh. sapiensusing adjacency and reachability penalties.

click here for file

 acknowledgements
this work was supported partially by nsf under grants ccf- <dig> and iis- <dig> 
