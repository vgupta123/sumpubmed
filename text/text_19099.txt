BACKGROUND
in the last few years the needs of many researchers have become more and more demanding. recent progresses in several scientific domains and the new challenges scientists have to face, have made it essential to devise platforms able to ensure appropriate support to complex multi-discipline research activities. modern scientists need to access distributed computational and storage resources and start collaborative work in order to address common problems. grid technology, based on open standards protocols, is the technology which permits an efficient sharing and management of a wide range of heterogeneous computational resources such us: supercomputers, storage systems, data resources and instruments, regardless of their geographical location. "a computational grid is a hardware and software infrastructure that provides dependable, consistent, pervasive and inexpensive access to high-end computational capabilities"  <cit> . the massive potential of grid technology is becoming indispensable for many scientific and industrial applications belonging to different domains such as: astronomy, computational chemistry, earth science, financial simulation, high energy physics and biomedicine. in the life science domain for example, today, technology has brought biological information to grow at an impressive rate. the huge computational resources provided by grid technology are particularly necessary, for example, in searching the human genome or to carry out simulations of molecular dynamics for the study of new drugs. researchers in the field of the earth science need to manipulate a lot of data in order to create complex models to predict weather forecasts, river floods and earthquakes. the paradigm introduced by this new technology is conceptually not unlike electrical grids. in an electrical grid, wall outlets allow users to link to an infrastructure of resources that generate, distribute, and bill for electricity. when a user connects to the electrical grid, he doesn't need to know from where the power comes from. grid computing uses middleware  to coordinate disparate it resources across a network, allowing them to function as a virtual whole. in order to allow scientists to perform new challenging researchers expediting the production of scientific results, e-infrastructure tools and services need to become features of researchers' everyday working life. in other words, they should just see the grid as a seamless extension of their own workstation for what concerns both job execution/monitoring and data access/management. what a generic non-expert user would like to do is just to access the grid services in a transparent way from everywhere using one of the different electronic devices such us: desktop, laptop, pda, last generation of mobile phone, etc.), as he does with the world wide web .

unfortunately the scenario we have today is a bit different. due to the ongoing evolution of this technology so far no standard is available and there's an initial gap scientists need to overcome before to start up. moreover each grid user needs to subscribe for a personal x. <dig> certificate, adhere to a specific vo and obtain an account on one of the trusted ui  for the project where he is involved. all these steps may have caused fear and confusion amongst researchers and caused the running away of potential new users. the italian infn  <cit>  and the italian web technology company nice  <cit>  srl, at the beginning of  <dig>  started to develop the genius  <cit>  grid portal in order to provide transparent access to the grid for the end-users. thanks to this work, today researchers coming from different scientific domains can access the grid to run their own applications using a conventional web interface. all the complexity of the underlying glite grid middleware  <cit>  will be hidden to the end-user by the portal. in this manuscript we are going to introduce the new feature designed in this portal in order to support robot certificates.

methods
robot certificate
starting from the 28th of feb.  <dig> the italian infn ca   <cit>  modified its cp/cps  to permit users to apply for robot certificates which now are officially recognized as a standard by the igtf   <cit> . uk and netherlands cas are already issuing robot certificates. the exploitation of these certificates by other cas in the next few years is warmly foreseen. these new certificates have been introduced to permit users, who are not familiar with deal personal certificates and belonging to a vo, to experience the grid paradigm for research activity reducing the initial barriers. the robot certificate , associated with a specific application that the user wants to share with the grid community, can be installed in a smart card and used with a portal by anyone who is interested in running this application in a grid environment using an user-friendly interface. for security reasons, in order to reduce the risks of having the portal certificate compromised, the infn ca decided to issue these new certificates on the aladdin etoken smart card  <cit> . each smart card can support several robot certificates: one for each application we want to share with other users of the same vo. an user's pin is prompted every time the certificate stored on the smart card is read to generate a proxy. the proxy is a term used to describe a certificate that is derived from, and signed by, a normal x. <dig> public key certificate. it is used to grant access within a pki based authentication system. use of a proxy credential is a common technique used in security systems to allow entity a to grant to another entity b the right for b to be authorized with others as if it were a. in other words, entity b is acting as a proxy on behalf of entity a.

once the robot certificate is safely stored on the etoken smart card, the mkproxy shell script developed at nikhef  <cit>  can be used to generate grid proxies reading the certificate directly from it. this script requires some special programs and libraries, which need to be installed before attempting to use it. starting from a single robot certificate installed on a aladdin etoken pro, a user can generate a plain grid proxy by issuing the command as shown in figure  <dig> 

in this example a plain proxy is signed by the robot certificate stored on the etoken with the given label robot:mrbayes. once the plain grid proxy is generated, it is possible to add the voms   <cit>  extensions by issuing the command voms-proxy-init using the noregen option as shown in figure  <dig> 

with the mkproxy script a proxy certificate is generated for the user. this proxy is used to access grid and run applications. in this work we have extended the architecture of the portal by adding the functionality introduced by this script. as the proxy certificate has been created the user can start to access the grid. since the beginning, the adoption of a personal certificate to access grid resources has represented a limiting factor for the real spreading of this paradigm. many researchers would be interested in using grid as a tool to resolve problems and speed up the creation of scientific results, but the basis of the pki risks to discourage many of them. the benefits introduced by robot certificates in life science are far reaching because they can contribute to make transparent the access in grid of biologists interested to run some specific applications.

in the next sub-sections the architecture of the genius grid portal, powered by enginframe, will be presented and the work carried out to extend its framework to support these new certificates will be described in detail.

the genius architecture
genius portal, based on enginframe framework, has an architecture as shown in figure 4:

• the client side  represented by a user's workstation running a web browser. thanks to recent modern client side technologies, many kinds of devices can be used in addition to usual notebooks or workstations, like palmtops or new generation of mobile phones;

• the protocols : the users can use different protocols to access the presentation engine over services, the exposed gateways are available for portlets, web services and rss; at the present, these protocols can be used by third party clients and not vice versa, accessing the virtualized services;

• the server side : a ui machine  which runs the apache web server, the java/xml portal framework enginframe  <cit> , developed by nice srl, and genius itself. the server block is composed by:

◦ the presentation engine for the rendering of layouts and xsl/xml streams, based on leading web standards, provides access to underlying services via https, including html, soap and rss; also the xml virtualization layer provides a set of xml processing functions that simplify the management of information coming from plug-in extensions;

◦ the layer for the authentication and acl  management, a core component, with many options to restrict the views of services to different profiles of users, influencing the behaviour of other services;

◦ the data management and virtualization layer provides an abstraction of access to remote data and sources and support for a complete data life-cycle;

• the application kits : make the abstraction layer that hides the business logic of specific end-user applications, on the right hand side  other transversal services that allow the voms proxy authentication by user x <dig> certificate, the access to x <dig> interactive application using vnc  <cit>  over ssl in secure way, and monitoring; the applications are developed by plug-in extensions, and genius code itself is developed like a plug-in to the enginframe core;

• the remote resources : the grid, computational resources and distributed data;

briefly, thanks to the agent-server design of the enginframe core, the ef server manages the end user browsing by providing web pages via https, talks to the ef agent, expects xml response from the agent; on the other side, the ef agent translates requests from the ef server into actions on the computing resources, , with the right credentials and correct user-id on the machine, and translates the response from the ui into xml. using the enginframe services the user can interact with files on the ui and, from there, the user can send jobs to the grid and manage the data of the given virtual organization the user belongs to. the use of the web interface eliminates any problem connected to the need of a particular operating system and/or middle-ware running on the client, and to the locations themselves of the client and the server: the user can interact with the grid from everywhere and with "everything". making use enginframe capability of services virtualization, genius is transparently compliant with latest versions of the lcg  <cit> /glite middle-ware, and can be easily installed on a variety of linux flavours, ranging from redhat  <dig> to scientific linux, both  <dig> and  <dig> bits platforms. the multi-layered architecture of enginframe greatly simplifies the development of web portals exposing computing services that can run on a broad range of different computational grid systems. in the last few years the architecture of the portal has been successfully customized to run applications of different scientific domains such as: life science, humanities, earth science, astro-particle physics, hep. due to its modularity architecture of the enginframe framework it is considered a grid gateway.

accessing the grid using a robot certificate and the genius grid portal
the service definition files  are the core of the enginframe framework. basically they are simple high-level xml files which describe how to link the existing command-line world to users' web interface. each sdf must have an .xml extension and, in order to be processed, must be included in the doc_root of the web server. behind the web server, data is managed through the spooler abstraction. a spooler is a dedicated zone in the file system. it's used for hosting files provided by users  or generated by other services .

in this work one of these sdf has been modified to enable the features introduced by these new certificates with the portal and generate proxy certificates from the robot one. if no robot certificates are available on the server, the normal authentication based on a java applet which request a personal user's certificate will be performed. the generation of the proxy certificate starting from a robot one is performed in a transparent way for the end-user. thanks to this work the new scenario depicted in the figure  <dig> is now possible.

if the smart card is available on the server, an automatic service, deployed in the portal, will drive the user to create a temporary proxy before running the application connected with the robot certificate in grid. hereafter follows the action invoked from the portal to generate the proxy using the robot certificate.

after proxy creation, the user is automatically redirected to the home page of the application connected with the certificate. any other attempt to access unauthorized services will be blocked by the portal. any request submitted by the user via the portal will be performed in the grid in a transparent way according to the workflow described in figure  <dig>  all the complexity of the underlying middleware is completely hidden by the portal. when the results about the computations are available, the user can retrieve them using a conventional web browser.

users tracking system 
since with this approach the access to a grid infrastructure is opened to a wide basin of users , in order to enhance the security and monitor the payload produced by users who access the grid using the portal certificate, an uts has been designed and deployed in the genius architecture. based on an underlying mysql database and on php, javascript and xml code, the system registers the user's payload generated in grids by the robot certificate. so far the system has been instructed to catch the following events: opening/closing of user' session and job submission instances. all the accounting data collected by uts can be examined only by the administrator. several ad-hoc services, with a restricted policy, have been designed in the portal so as to allow the administrator to interact with the uts using a web interface only. with the introduction of this additional features it is possible to monitor, in each moment, who is working and what they doing on the grid resources. figure  <dig> shows an example of accounting data collected by the system.

four different system views to inspect the accounting data produced in grid by a robot certificate are available:

• a "global view" which allows the administrator to retrieve a complete dump of all the information registered in the database;

• a "session view" which reports only information about all the sessions started and closed by the users;

• an "application view" which reports information about the application submission;

• an "advanced query" which allows administrator to perform some advanced queries by putting a specific "where" clause in the dedicated text area.

RESULTS
the genius grid portal that transparently supports robot certificates has been successfully used by non-grid users, involved in the context of the libi italian laboratory for bioinformatics  <cit>  to run a bioinformatics application on a grid infrastructure. in this section some details about the application and its workflow which has been set up in order to run this application on the egee  <cit>  grid infrastructure are shown. the application mrbayes   <cit>  produces a bayesian phylogenetic inference among different aligned biosequences. the inference allows identifying the distribution of the most likely genetic relationship among the set of chosen biosequences and at the same time the best set of values for the parameters of the postulated model of evolution of the biosequences. mrbayes has a great richness of model of evolution for dna , rna , protein, and even arbitrary hereditary discrete characters. another peculiarity of the application is that it allows the usage of mixed models, such as using different models for different parts of each biosequence with the possibility to share parameters among the different models.

the program uses a metropolis-coupled monte carlo markov chain  to perform the markovian integration necessary to solve numerically the bayesian equation. the mcmcmc approach allowed the development of a parallel version of the algorithm   <cit> . the result of the numerical integration is a sample from the posterior distribution allowing interesting development for future grid implementation. in fact different samples of the posterior distribution could be merged together to increase reliability of the results and to check for the convergence of the algorithm. but it should be noted that the program is not perfectly scalable given that for moderately complex problems the time necessary to reach stationary, and to produce useful sampling, is not so small compared to the maximum time allowed in each single cpu of egee.

the input required is a single text file, nexus formatted   <cit> , subdivided in a data block and mrbayes block in which the models and the parameter of markovian integration are defined. the output is composed of three kinds of large files  that describe, respectively, the posterior distribution of numerical and topological parameters, and several diagnostic measures related to the mixing of markov chains and the converging of the algorithm as whole.

the client side of the application submission workflow  is represented by a user's workstation running a web browser. the server side is represented by a glite ui machine, equipped with the latest glite middleware services to submit jobs and manage data on grid, the apache web server, the java/xml portal framework enginframe developed by nice srl and the genius grid portal itself. after the user has logged in, a proxy certificate is requested by the portal in order to access the distributed resources of a grid infrastructure according to the gsi  <cit>  standard. if the aladdin etoken pro  <dig> kb with he robot certificate is available in the server, it will be used by the portal to generate the needed proxy for the user before granting access to the infrastructure. this operation is completely transparent for the end-user. in a few minutes the robot certificate stored on the usb token is read to generate the proxy certificate. once the proxy certificate has been successfully created, the user is automatically redirected to the home page of the application. thanks to the services developed with the portal the user can provide input settings for the application before submitting its parallel version in grid. moreover, in order to improve the reliability of the application workflow and deal with possible job failures a jst   <cit> , developed by infn bari, has also been introduced into the architecture. this tool has been adopted for the submission of large number of jobs in an almost unattended way. it is based on the concept of "task" to be executed. the entire problem is first subdivided into elementary tasks: then all the tasks are inserted into a db server. in the submission phase all the jobs are identical, in fact when the job is submitted it does not know which task has to be executed. only when the job lands and starts executing on a wn does it request the central db a task to execute. information on the execution of each task is logged in the central db. only if all steps are correctly executed by the job, is the status of that particular task on the central db updated to "done". in this way the central db provides a monitoring of the task execution and no manual intervention is required to manage the resubmission of the failed tasks: tasks which are found in a "running" state after a given time interval, are considered failed and automatically reassigned to new jobs. the tool is also able to provide the monitoring of any kind of debugging information that could be useful to understand how the jobs are going. the database schema used to monitor jobs on the grid allows the definition of the information to be reported at run-time in a completely dynamic way, as it is based on the concept of "variable" and "value". the tool has been used with success for the submission of the order of hundreds of thousands of jobs to the grid required by specific applications and can also be used for exploiting all the computational resources available on the grid. figure  <dig> shows the monitoring and the visualization system developed for the bioinformatics application.

CONCLUSIONS
the present work aims at reporting the work performed by the italian infn in order to adopt robot certificates in e-science. this work demonstrates how it's possible to access and exploit the massive potential of grid technology without worrying about the complexity of the gsi authentication. the benefits introduced by this work are far-reaching for several user communities and applications. the valuable results depicted in this work can be easily extended to other scientific domains and different applications. the genius grid portal and its features is the official portal of the gilda t-infrastructure  <cit>  for grid dissemination and training set up. it is managed by infn in the context of the egee projects, but some other regional grid projects such as trigrid  <cit>  and pi2s <dig>  <cit>  are adopting the genius portal with success, porting on the web interface many applications running on their infrastructure, being such a powerful gateway to the grid resources with the required security. the solution evaluated and described in this manuscript is not of course restricted to the genius grid portal and can be easily extended to other portals.

competing interests
the authors declare that they have no competing interests.

authors' contributions
all the authors prepared the manuscript. gl and af modified genius architecture to support robot certificate and the uts. gl implemented web-based services on the genius grid portal to permit users to run bayesian phylogenetic inference on a large scale. gd implemented the job submission tool and contributed to designing the uts. gm contributed to the design and the implementation of the uts prototype on a previous genius release. sv collaborated to the development of the wrapper for mrbayes within the job submission tool and defined the test cases. all authors contributed to the discussion and have approved the final manuscript.

