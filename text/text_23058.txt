BACKGROUND
multiple experiments can be used to predict an interaction between proteins, and the outcome of these have been continuously deposited in public resources such as intact  <cit> . often a single protein can have dozens of reported interactions, which implies a rapid escalation of the amount of data for analysis involving several proteins . a common strategy for making of this data is to generate graphic representations of the interaction networks, where some features become evident at a glance, for instance identification of the nodes that have the highest number of interactions or finding a common protein that interacts with the rest.

there are several software tools that allow the visualization of protein interactions, including cytoscape  <cit> , networkx  <cit>  and navigator  <cit> . each of these tools provide different methods to visualize protein networks, and their strengths and weaknesses have been discussed in several earlier reviews  <cit> . nonetheless, we consider that none of the current options provides the convenience or benefits available in a native web application.

until recently it would not have been realistic to conceive of a web application that could cope with the requirements imposed by a visualization tool for protein interactions. however, due to recent developments , this is now possible: the data can be acquired using a request via ajax; it can be processed and injected into the current document with javascript; the document can contain structured graphics in svg format; the styles defined with css3; and all within reasonable response time thanks to the most recent generation of browsers.

we took advantage of the above mentioned features to develop pinv: protein interaction network visualizer, an html <dig> application that runs on every modern browser, whose function is to allow the visualization and exploration of proteins and their interactions. researchers using pinv can access their visualizations from any computer with an internet connection and a modern browser without the need for installation of any third party software or plugins; moreover the nature of the web simplifies tasks such as sharing and publishing visualizations.

implementation
the pinv architecture is based on the composition of biojs components. biojs is a community project to create a library of visual javascript components for biological sciences  <cit> . the main layout components of pinv are available in the biojs registry  <cit> , and were developed using d <dig>   <cit> , a javascript library for the manipulation of data and its visualization through web components.

pinv uses a solr search engine server  <cit>  in order to perform rapid queries, resulting in quicker response times than through querying of a relational database. this requires that the interaction dataset is pre-loaded onto our servers. currently we support web submission of data as a pair of files: one for interactions and one for features, both of which are simple tab separated files.

in the interaction file, the first two columns contain the accession numbers of the proteins, and the third column is an aggregate score of the evidence for the reported interaction. subsequent columns are optional and considered as evidence scores that contributed to the unified value in column  <dig>  the second file is used to add annotations to the proteins . the only required annotation is that of the organism to which the protein belongs; therefore the file should have the protein id in the first column, the organism in the second and any other features in additional columns. the information provided in this file can then be used to manipulate the graphic, for instance to color by functional class or to show a particular label. the support of other file types is part of the development roadmap along with the ability to recover the interactions from public databases, and the annotations directly from uniprot.

when uploading data, the user can choose between two modes of privacy: public and protected. a dataset in public mode will be listed on pinv’s website and accessible to anyone. this brings visibility to the data and promotes collaboration between researchers. on the other hand, protected mode ensures that only users with a valid link can retrieve information from the data set; the link includes a unique key that is sent to the uploader so he can distribute the link as he wishes. in this way the collaborative features of pinv are still functional between the holders of the link.

we have loaded some public datasets for organisms of our particular interest: homo sapiens , mycobacterium leprae strain tn , mycobacterium smegmatis strain mc  <dig>  mycobacterium tuberculosis strain cdc <dig>  and a combined dataset of hs, mtb and the interactions between them.

RESULTS
in order to meaningfully visualize protein interactions, it is beneficial to reduce the network to only those proteins of interest through the application of prefilters to the data. this has the simultaneous benefits of increasing the speed of pinv’s response time and reducing bandwidth requirements. by using the prefilter tool on pinv, the user can explore the whole content of the network without loading the individual components into the graphic. figure  <dig>  shows the interface where the user can define certain conditions that the interactions have to fulfil in order to be displayed. the graphic on the left side of figure  <dig> is dynamically updated, reflecting the size of the subset generated by applying the filters over the whole dataset. for instance, in the graphic the dark blue represents the whole network , while the light blue is the portion of those that have an evidence score from string  <cit> . two more filters were applied to this example , the combined use of the filters results in a  <dig> interaction subnetwork, which is small enough to allow pinv to run smoothly and generates a graphic like that in figure  <dig> .

the prefilters tool is the first window a user sees once a dataset has been selected on pinv’s homepage. the user can choose not to use any prefilters and close the window, which will display the main graphical interface of pinv .

as an alternative to the prefilters, the application also provides a search form where the proteins of interest can be selected by inserting comma separated accession numbers. the form has auto-complete capabilities to assist in this process . the icon at the top right of this area allows users to open the prefilters window at any time. the search function has three modes: normal, explicit and recursive. the normal mode returns the queried proteins and all interactions reported in the dataset, while the explicit mode will only display proteins that have been explicitly included in the query list and the interactions between them; the explicit mode will also include all the interactions with the previous results. the recursive mode combines the previous two, it first gets the target proteins on normal mode, and then for each recovered protein it triggers a query in explicit mode, the outcome of this is that all the interactions between displayed proteins will be shown.

pinv provides three types of visualization of the data: network, circle and table. figure 2-b displays a snapshot of the interactions for proteins o <dig> and o <dig> from the mtb dataset in the network layout.

the network layout allows the re-organization of the proteins through drag and drop mouse gestures, and clicking on a node will display the loaded features that are hyperlinked to relevant public resources in a pop-up window . the proteins in this layout are self-organised through the d <dig> implementation of a force layout. this simulates a repulsion force between nodes without a link and an attraction force where there is a link. the outcome of this algorithm is a network that clusters the highly connected proteins and makes evident the connections between these groups. it is also possible to impose a center of gravity in the graphic, where nodes are attracted. we have used this feature to create as many gravity points as organisms are present in the current selection, resulting in the separation of proteins from different organisms.

the second layout organizes the proteins in a circle positioning all the nodes around the center without favouring any of them, this can help to discover connection patterns around the network . in this view the interactions of a single protein are highlighted when the user hovers over the node. as in the network layout, the proteins are separated to clearly indicate the organism to which they belong; this feature will be extended to allow the user to choose the parameters to group the proteins around the circle.

lastly there is the table view where the raw data is displayed and can be reorganized. this is particularly useful for queries that return too many results and require post-filtering to select the proteins of interest.

the visualization of the layout can be exported at any time into svg or png format, and the data in the table are exportable to a csv file.

manipulation of any of the three display options is achieved with a single component  that allows the creation of rules. the rationale behind this component is that by specifying a target , a condition to filter by , and an action  it is possible to manipulate a wider set of network elements with less input from the user. for example, figures 2-b and c show all the proteins painted in different colors depending on their functional class. the legend on the right lists the functional classes used and the corresponding colors in the graphic. a second rule was created in the example to display the gene name at the side of proteins with more than  <dig> interactions. right clicking on a protein in the graphic will open a contextual menu that allows the quick creation of rules that only apply to the selected protein. users can also color nodes with quantitative data such as expression values loaded from a third file.

all the actions executed by the user have been saved in order to display the provenance of the visualization in the form of a list where the user and collaborators can review the steps  taken to reach a particular status of the visualization. this list can be displayed by clicking on the “show history” button at the bottom of the page. we plan to extend this to allow the user to jump to a particular state in the history.

pinv provides an easy way to share the current view: when the user clicks on ‘share’, a unique link is generated. pinv is able to regenerate the status of all the components to re-compose the view whenever the link is used. this functionality was developed with the goal of promoting collaboration between users. if for instance, a user finds something of interest in the visualization, he/she can create the link and send it to a collaborator via mail, instant messaging, etc. the second researcher can not only view but manipulate the visualization and re-create another link for future discussions. for example, recreations of figures  <dig> and  <dig> can be explored in pinv by following the links  <cit>  respectively.

the sharing option also provides an html snippet that can be used to embed the view in a web page, making it easier for the researcher to include their visualizations on web documents in the same way that maps, videos and other kinds of multimedia are included in blog posts. it is hoped that researchers will use this to embed pinv graphics in pages that discuss the results of their own network research.

discussion
selection of the technology to generate the graphics
currently, the dynamic creation of graphics according to web standards can be generated using two different techniques: scalable vector graphics  and canvas. both are well supported in modern browsers and their manipulation is possible with standard javascript.

svg is a markup language like html, and as such, each component of the graph is represented as an element of the document and is held in memory in the browser as part of the document object model . because of this, the whole content of the graphic can be embedded in the same document as its parent web page. canvas, on the other hand, is a single element in the web document, whose content manipulation is carried out via javascript. only the final result is stored in memory. as a consequence, canvas requires less memory than svg, but lacks the control per element that svg offers  <cit> .

we chose to use svg in the development of pinv because of the atomic control over the elements: proteins  and interactions , which allows us to bind events and apply styles in the same way as any other html element.

there are javascript libraries for canvas that allow manipulation of the elements painted on the canvas, however the poorer quality of zooming and the lack of styling via css are factors that motivated us to choose svg.

the result of not using canvas is evident in pinv when there are a large number of elements to display . the fact that svg holds the information of all the components in the dom is memory intensive because it stores data for components that can be hidden, are out of focus or so small that they are not actually visible. in contrast, a canvas strategy is able to deal with many more elements. for this reason we have included the study of the performance of using canvas on pinv instead of svg  in our road map for future development e.g. the use of canvas when there are more than x elements, otherwise using svg.

comparison with similar tools
most interactive online visualization tools only allow the viewing of networks that are preloaded, meaning that the user cannot view a network he/she has generated.

the online version of graphle  <cit>  is limited to graphs generated by biopixie in yeast, mefit in e. coli, or hefalmp for human data. string  <cit> , a database for known and predicted protein-protein interactions, and stitch  <cit> , its sister project for chemical-protein interactions, integrate interaction information from various sources in addition to in-house predictions. both projects use the same library to display their data. however, the network visualized in both databases is barely customizable. the public implementation of visant  <cit> , a web-based  workbench for the integrative analysis of biological networks, is based on the predictome database. pinv on the other hand, allows the user to view preloaded data but also to load their own data.

another alternative is cytoscape web  <cit> . however, the fact that its introduction tutorial  <cit>  requires its users to code in javascript indicates that this tool is mainly intended for developers to display networks on the web, not for the scientist who has a network to visualize. in this regard, cytoscape web was considered as an alternative to d <dig> for our background technology to generate the graphics as it is closer to the biological concepts tied to this tool. unfortunately cytoscape web uses adobe flash for the generation of the graphics, which goes against our objective of providing a native web application . a more recent development is cytoscape.js  <cit> . the principles behind this project are similar to those followed by pinv: a modern web toolset to display interactions. nonetheless, the two projects differ from one another as cytoscape.js is a library for programmers, while pinv is an application. a combined strategy of cytoscape web and its well known stand alone parent project is discussed further below.

we also compared pinv with the stand-alone version of cytoscape by using the network in the biological example mentioned in the following section. the original network contains all interactions from the three organisms and the orthologs with a total of  <dig>  interactions. the performance of cytoscape notably exceeded pinv when dealing with a network of this size. moreover, there are considerably more manipulation options in cytoscape than the ones currently provided by pinv. however, cytoscape and its many plugins need to be installed by the user and any collaborator sharing the results.

cytoscape web includes a showcase demo that allows files to be opened in several formats. in order to reproduce the same graphic as in figure  <dig>  we preprocessed the network on the stand-alone tool in order to filter it, and focus on the target orthologs. this step was necessary because cytoscape web fails when loading a network of this size. subsequently, we successfully uploaded the subnetwork. filters and styles can be manipulated online but extending the subnetwork requires loading of additional data.

we are aware that pinv will also struggle to display the  <dig>  interactions of the network. however, the strategy of only visualizing by request and the use of prefilters allows the user to navigate the network by limiting the graphic to the interactions of interest. in contrast cytoscape web does not provide tools to explore a large dataset and requires the use of the stand-alone application  in order to filter and create a subnetwork.

a biological use case scenario
to illustrate the richness of information that can be conveyed using pinv graphics, we use the biological example of mycobacterium tuberculosis , its host homo sapiens , and the two related mycobacteria species m. leprae  and m. smegmatis . in particular, we look at the dna translocase protein ftsk , which coordinates cell division and chromosome segregation in mtb, and is considered a high confidence drug target. we view this protein in the context of its interaction network within mtb, its host-pathogen interactions with proteins in hs, and orthologous proteins in msm and mlp.

both of these visualisations were created using simple queries and display rules, and can easily be shared in their fully interactive form with a simple url. an example of the former graphic, embedded in a third-party web page can be found here  <cit> .

future work
the native web nature of pinv offers several opportunities for future enhancement. html <dig> is well supported by most smartphones and tablets. pinv can currently be displayed on these platforms, however requires modifications to the event handling to accomodate their touch interfaces. we think that the inclusion of mobile technologies will contribute to a more collaborative environment between researchers.

the current architecture of pinv uses solr on the server side to effectively store and query the interactions. additionally, there is logic on the server side to manage the uploading of datasets, the saving of graphic status for the sharing and controlling of access to protected datasets. we are using cherrypy as the middleware language to deal with these functionalities. this adds complexity to the process of installing pinv on a private machine, which might be desired by users who want total privacy of their data. an alternative that we are considering implementing is providing an option to use a client-side storage capability: indexeddb. by using indexeddb, users won’t be uploading their data to our servers, instead, all the information will be kept on the same machine where the user is opening the website. once open, pinv will be able to run off-line as both software and data will be on the client machine. however this change requires a full restructure of the methods used to query the data sets because the queries in indexeddb are built in a different way to those in solr.

another feature on the roadmap of pinv is the enrichment of the visualization with online resources that provide information about the proteins and/or interactions. for example, annotations can be added to each protein via online queries to sources such as uniprot, and additional interaction evidence can be retrieved from other ppi databases.

a major challenge in the visualization of ppi networks is the graphic representation of a large number of interactions without it collapsing into the infamous hair ball. apart from the technological challenges of processing large volumes of data, the resulting graphic is often too complex to provide insights into the nature of the network. besides the option to select a subnetwork of interest based on prefilters, we are investigating different techniques  to generate high level representations of big networks in a way that both improves performance and gives an overall idea of the structure of a network with thousands of proteins. this will facilitate easier visual mining of the data.

CONCLUSIONS
pinv is an open source, native web application that uses the latest generation of web technologies to offer an interactive view of protein-protein interactions which is easily accessible from any modern browser. pinv enables researchers to explore their data using different methods and the visualization can be manipulated to highlight the proteins or interactions of interest. the resulting graphic can be exported to common graphic formats, shared via url or embedded in third-party pages, features that make it suitable for publication, sharing and collaboration activities.

we consider pinv to be a unique tool for visualization and exploration of ppi networks, not only in terms of the technology used  but also because today’s research requires collaborative efforts to process data. pinv offers an intuitive way to visualize, share and publish ppi data without the need to install any extra software  and/or third party components such as flash or java.

availability and requirements
project name: pinv: protein interaction networkvisualizer 

project home page:http://biosual.cbio.uct.ac.za/pinv

source code:https://github.com/4ndr01d3/biosual

operating system: web based, platform independent. 

programming language: html5: html + css +javascript 

other requirements: modern browser  

license: lgpl 

any restrictions to use by non-academics: none

abbreviations
ajax: asynchronous javascript and xml; css: cascading style sheets; csv: comma-separated values; d3: data-driven documents; html: hypertext markup language; pinv: protein interaction network visualizer; png: portable network graphics; ppi: protein-protein interaction; svg: scalable vector graphics; url: universal resource locator.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
critical revision of the manuscript for important intellectual input: gs, am, gm, hr, ra and nm. study concept: gs, am and nm. software design: gs, am, gm, hr, ra and nm. software development: gs and am. creation of datasets: gm, hr and ra. software testing: gm, hr, ra and nm. software documentation: gs and ra. drafting of the manuscript: gs, hr and nm. supervision: nm. all authors read and approved the final manuscript;

