BACKGROUND
microbial gene prediction is a well studied, and some would say solved, problem, but the truth is that there is still much room for improvement, especially in understanding how translation initiation mechanisms work in prokaryotes. existing methods for bacterial and archaeal gene prediction include the popular glimmer  <cit>  and genemarkhmm  <cit>  packages, both of which are included at ncbi alongside genbank  <cit>  annotations , as well as other methods such as easygene  <cit>  and med  <cit> .

current gene recognition methods perform relatively well in low gc content genomes, but the accuracy drops considerably in high gc content genomes. high gc genomes contain fewer overall stop codons and more spurious open reading frames . these false orfs are often selected by programs instead of real orfs in the same genomic region. in addition, the longer orfs in high gc genomes contain more potential start codons, thus leading to a drop in accuracy of the translation initiation site  predictions as well.

translation initiation site prediction in existing microbial gene-finding tools has not proven to be sufficiently adequate, and this has motivated a number of tools to be developed specifically to correct the start calls of current methods. these tools include gsfinder  <cit> , tico  <cit> , and tritisa  <cit> . it is our view that a single gene prediction algorithm should be able to match the performance of the above methods, rather than needing to run two programs to attain the desired level of accuracy in start predictions.

finally, most methods tend to predict too many genes. although many of the short genes predicted by current programs that have no existing blast  <cit>  hits might be real, the likelihood is that most are false positives. we base this assertion on the fact that genome-wide proteomics studies that search the entire set of all potential orfs do not identify a significant number of peptides in these genes  <cit> . in the construction of a novel algorithm, we determined it would be preferable to sacrifice some genuine predictions if it meant also eliminating a much larger number of false identifications.

with the advent of faster sequencing technologies, it is likely that in the future less time will be spent on finishing microbial genome sequence. it is also likely that researchers will not often be able to curate manually the gene predictions delivered by automated pipelines. it is therefore important to improve the current methodologies to obtain higher quality gene predictions, better translation initiation site predictions, and a reduction in the number of false positives.

implementation
to address these challenges, we constructed a novel gene-finding algorithm called prodigal. in designing the prodigal algorithm, we decided to use a "trial and error" approach. we began by building a set of curated genomes that had been analyzed using the jgi ornl pipeline http://genome.ornl.gov/. this pipeline consisted of a combination of critica  <cit>  and glimmer  <cit> , blast  <cit>  to locate missing genes and correct errors, and a final round of manual expert curation. to this initial set of ten genomes we added escherichia coli k <dig> , bacillus subtilis, and pseudomonas aeruginosa. with these sets in hand, it became possible to validate or exclude changes to the algorithm based on whether or not the performance on the test set of genes increased or decreased, respectively. in the final stages of validating the rules in the program, we expanded this set to include over  <dig> genomes from genbank.

it should be noted that we only used this set to determine very general rules about the nature of prokaryotic genes, such as gene size, maximum overlap between two genes , and rbs motif usage. in addition, we tuned several constants in the program based on performance on this data set. this set was also used to exclude ideas that caused deterioration in performance across many genomes. . because we intended to validate prodigal's performance by examining e. coli, b. subtilis, and p. aeruginosa, we also verified that each of these decisions we made also maximized performance on the remaining genomes in our set. changes were not retained if they were merely "local" improvements to a subset of genomes, especially not genomes on which we intended to test the program's performance.

in order for prodigal to run in a completely unsupervised fashion, it needed to be able to learn all the necessary properties of the input organism, including start codon usage , ribosomal binding site  motif usage, gc frame plot bias, hexamer coding statistics, and other information necessary to build a complete training profile. to gather statistics from a finished sequence or set of sequences, the algorithm first had to determine automatically a set of putative "real" genes on which to train.

prodigal constructs its training set of genes by examining the gc frame plot in the orfs in the genome. the program begins by traversing the entire input sequence and examining the bias for g's and c's in each of the three codon positions in each open reading frame. the highest gc content codon position for an orf is considered the "winner", and a running sum for that codon position is incremented. once all orfs have been processed, the sums give an approximate measure of the preference of each codon position for g and c. the values for each codon position are normalized around  <dig> and divided by 1/ <dig>  if 2/ <dig> of the codons in orfs prefer g or c in the third position, for example, then the bias score for that position would be  <dig>  we tried converting this bias to a log score, but this was found to decrease the quality of the results.

using this gc bias information, prodigal constructs preliminary coding scores for each gene in the genome. this is done by multiplying the relative codon bias for each of the three positions by the number of codons in the putative gene in which that codon position is the maximal gc frame . we chose  <dig> bp for the window size because that is the default window size for gc frame plot calculation in artemis  <cit> , and, in the experience of our manual curators, this default was an optimal setting. so, for example, if an entire gene contains the most g's and c's in its third codon position, the score for that gene would be the length of the gene multiplied by our codon bias score for frame  <dig>  if instead this gene is too long, then the frame plot information should change in the spurious upstream region. these bases would be multiplied by a lower gc frame bias score . the score s for a given gene starting at location n <dig> and ending at location n <dig> can be given by:  

where b is the bias score for codon position i, and l is the number of bases in the gene where the  <dig> bp maximal window at that position corresponds to codon position i.

with this preliminary coding score measure based on simple gc codon position statistics, prodigal scores every start-stop pair above  <dig> bp in the entire genome.  prodigal then performs a dynamic programming  <cit>  across the whole sequence  to identify a maximal "tiling path" of genes to train on. the purpose of this dynamic programming method is to force the program to choose between two heavily overlapping orfs in the same genomic context. in theory, one of these orfs should match the preferred gc codon position of the organism, whereas the other one should not.

prodigal utilizes the same dynamic programming algorithm both for its preliminary training phase and for its final gene calling phase. each node in the dynamic programming matrix is either a start codon  or a valid stop codon . in addition, start and stop nodes are added in each frame at the edges of the sequence to handle cases where genes run off the edge of contigs, a common occurrence in draft and metagenomic sequence data. the connection of a start node to its corresponding stop node represents a gene, whereas the connection of a 3' end to a new 5' end represents intergenic space. the score of a "gene" connection is the precalculated coding score for that gene, whereas the score for an intergenic connection is a small bonus or penalty based on the distance between the two genes. figure  <dig> illustrates these dynamic programming connections in action.

since dynamic programming cannot go backwards , we need a special set of rules to handle overlapping genes. prodigal accomplishes this by pre-calculating the best overlapping genes in all three frames for each 3' end in the genome. so, for example, for a stop codon at position  <dig> , the program would look  <dig> bp upstream of position  <dig>  and locate the highest scoring overlapping gene in each frame . with this information in hand, a new type of connection can be established, that of a 3' end of one gene to a 3' end of a second gene on the same strand. in this case, the 5' end of the second gene is implied by the connection, since the best start has already been calculated. a maximal overlap of  <dig> bp is allowed between two genes on the same strand. for opposite strand overlap, we allow  <dig> bp overlap between 3' ends of genes, but 5' ends of genes are not permitted to overlap. these connections are represented by the 3' end of a forward gene connecting to the 5' end of a reverse gene, wherein the 3' end of the second gene is implied . these overlap values were determined by recording overlaps between genes in the genbank files of our test set. although we may merely be encouraging prodigal's overlap rules to be similar to previous gene predictors, our manual curators also felt these were reasonable values for overlap based on their experience examining finished genomes. table  <dig> shows a summary of the different types of dynamic programming connections allowed in prodigal.

once the preliminary dynamic programming algorithm has completed, the next step is to gather statistics from the putative genes and construct a more rigorous coding scorer. prodigal does this in a very simplistic way, by simply looking at in-frame hexamer coding frequencies for a gene relative to the background. a lookup table of  <dig> values is created, one for each 6-mer, where the value of a given word w is:  

where c is the coding score, g is the percentage occurrence of that word within our gene training set, and b is the percentage occurrence of that word across the entire sequence . so, for example, if a word is twice as likely to occur in a gene as it is in the background, the score for that word would be log. this corresponds to a 5th-order markov model  <cit> . a floor and a ceiling are also established on this score to handle cases where there is insufficient data for a given word.

the final coding score for a gene beginning at position n <dig> and ending at position n <dig> can be written as  

where s is the sum of the coding scores  for the in-frame hexamers  in the gene. in addition, prodigal modifies this coding score based on information about what lies upstream of the selected start. for example, if a gene  <dig> . <dig> has a score of  <dig> , and the gene  <dig> . <dig> has a score of  <dig> , prodigal modifies the score of the second gene to be 400- =  <dig>  the reason for this modification is to penalize choosing a truncated version of a gene when a longer, higher-scoring version of the same gene could also be chosen. in the dynamic programming model, this can be thought of as penalizing a connection to an interior start by subtracting the difference between the two potential genes. the purpose for this modification is to discourage the truncation of genes through choosing a gene on the opposite strand that overlaps with and erases the beginning of the longer version of the gene, a common occurrence in current gene-finders. in addition, prodigal implements a few more minor tweaks to the coding score, including boosting the score of particularly long genes  to be minimally positive if the preliminary coding score is negative.

once prodigal has calculated coding potential scores for every start-stop pair in the genome, the next step is to create a translation initiation site scoring system from the training set. the program constructs a background of atg, gtg, and ttg frequencies off all start nodes in the genome. it also builds a background of rbs motifs based on the shine-dalgarno sequence  <cit> . unlike many methods, which use a position-weight matrix or gibbs sampling method to find motifs, prodigal begins by assuming that the sd motif will be utilized by the organism. if this turns out not to be the case, it runs a more rigorous motif finder. but, to start with, the program attempts to determine if the sd motif is widely utilized by the genome in question.

for rbs motifs, prodigal utilizes a concept of bins, each of which corresponds to a set of rbs motifs and spacer distances . table  <dig> shows the default priority of these bins, from lowest scoring to highest scoring.

in the initial background, the motif in a higher numbered bin takes priority over one in a lower numbered bin if both are found upstream of a start site. these bins were rigorously determined by examining the detailed data set of curated genbank files . prodigal examines the initial coding peaks in every open reading frame  with a coding score of  <dig>  or higher . from these coding peaks, it builds a log-likelihood model similar to the coding score, described by:  

where s is the score, r is the observed percentage of this type in our training set, and b is the percentage occurrence in the background. this method is used both for start codon usage  as well as for the sd bin motif . these scores are summed together and multiplied by a constant , then added to the coding score. prodigal goes through every start-stop node and performs this calculation, modifying the default coding score by the quality of its start codon information. this leads to a new set of "peaks" for the set of training orfs. for example, an atg with a slightly lower coding score than a ttg in the same orf could overtake it with the additional start score added .

once a new set of peaks has been determined, prodigal reconstructs the background for both sd motif and start codon usage. in this iteration and in subsequent ones, it no longer assumes a higher numbered bin is better for rbs motifs, and it instead relies on the log likelihoods calculated in the previous iteration to find the best upstream motif for a given start site. prodigal performs several iterations of this process, moving the peaks around based on subsequent information until they no longer move significantly. when the peaks no longer move, it determines the final set of weights based on statistics gathered from this final set of putative "real" start codons.

the end result is a set of log-likelihood weights for atg/gtg/ttg information and for each of the above rbs bins. if the zero bin for rbs motifs, which corresponds to no sd motif, is positive, or if the zero bin is above - <dig>  and the 4-base motif bins are less than  <dig> , then prodigal determines that this organism does not use the sd motif strongly, and it runs a more rigorous motif finder. in examining over  <dig> finished genomes in genbank, we determined about 10% of them did not use the sd motif strongly. most of these genomes were cyanobacteria, chlorobii, or archaea, which seem to use different translation mechanisms than the more common sd motif.

if it is found that the organism does not use the sd motif, prodigal searches exhaustively for alternative motifs. it does so by looking at the occurrence of all 3-mer motifs in the initial set of peaks, and locating all 3-mers that occur in at least 20% of the high-scoring gene models. from these motifs, it then performs an iterative algorithm similar to the above. the bins instead correspond to every word of size 3- <dig> bp  with every potential spacer size . all words 3- <dig> bp that do not occur frequently enough are combined in the "no rbs motif" bin. prodigal then arrives at a similar set of weights for no rbs motif, as well as for each 3- <dig> bp motif that contains the commonly occurring  <dig> bp motif as a subset. in aeropyrum pernix, a strong ggtg motif is located, whereas in many cyanobacteria, prodigal latches onto at-rich motifs like tata and taaa.

finally, we added a scoring system to capture information in the regions outside those examined by the rbs scorer . this scoring system builds a position weight matrix on the whole region. although this scoring system is very crude and captures only general characteristics , it was found to be quite effective in some genomes. this generic upstream scoring system is not part of the iterative algorithm; the data is instead gathered from the final iteration of the start training.

once prodigal has start score weights for both start codon type  and rbs motif/spacer distance, it then scores every start node in the entire sequence. the final score for a start node is simply  

in which s is the final score, r is the rbs motif score, t is the start type score, u is the upstream score, and c is the coding score. for the rbs weight, prodigal uses the sd motif score if it determines that the organism uses shine-dalgarno, the secondary rbs motif score if it finds a clear-cut secondary motif, and the maximum of the two systems if neither system located a strong rbs motif. this latter method was shown to work well in some genomes such as cyanobacteria and crenarchaea that tended to have at-rich upstream regions but still occasionally used the sd motif for some genes .

a linear combination of the various elements was the first method we tried, and it worked well enough that we did not pursue other strategies. it may be that there exists a better method of integrating the different signals , but this will have to be examined in future versions. the  <dig>  and  <dig>  constants were arrived at by experimenting with different values and observing the change in results across our test set of genomes. we chose the values such that they maximized performance across the entire set. in order to rule out bias in e. coli, b. subtilis, and p. aeruginosa, we also verified that the same approximate constants maximized performance on our set of genomes with those three excluded.

false positive reduction is an important goal in prodigal. in order to reduce the number of overall predictions, prodigal modifies the above start weight  based on the length of the gene. in examination of numerous genomes, we determined that approximately  <dig> bp is the point of equilibrium at which a gene with a positive coding score is equally likely to be a false positive or a true prediction. genes less than  <dig> bp are therefore penalized according to their length divided by  <dig>  if the start score is greater than  <dig>  it is reduced to l/250*s, where l is the length of the gene. if the start score is less than  <dig>  it is instead multiplied by 250/l*s. finally, for all genes with negative coding scores, regardless of length, the start score is penalized by a small amount to prevent genes with moderately good start scores but bad coding scores from drifting above zero.

once the scores have been calculated, the dynamic programming is performed a second time, using the more detailed node scores described above for the gene connections. for intergenic connections, operon distance provides a stronger weight in the second pass of dynamic programming. when two genes overlap by  <dig> or  <dig> bp, if the second gene lacks an rbs and has a negative rbs score, the requirement of an rbs is lifted and the score is increased to  <dig>  in addition, the program adds small bonuses for distances less than  <dig> bp, and small penalties for distances greater than  <dig> bp. these distances correspond roughly to observed operon distances  <cit> . although dynamic programming has order n log n, we limit the valid connections by distance, such that "long" connections can only be made between the start of a really long gene and its stop codon. the end result is that prodigal must make a connection generally within  <dig> kb, so that it must choose a gene in this region, even if its score is negative. when the dynamic programming is complete, however, the program makes a final sweep through the models and removes any such genes with negative scores. in addition, the algorithm makes one final improvement to start calls that proved to be significant in our test set. when two starts are separated by a distance of less than  <dig> bp , prodigal sets the coding of the two choices to be equivalent and uses only the start score  to determine which start to choose for the final gene prediction.

the final output of prodigal consists of a complete list of gene coordinates and, at the user's specification, protein translations and/or detailed information about each potential start in the genome. prodigal can be run either in two steps, with a training phase and a gene prediction phase, or in a single step where the training is hidden from the user and only the final genes are printed. a complete description of the algorithm in pseudocode can be found in figure  <dig> 

prodigal runs very quickly, analyzing a  <dig> mb genome in about  <dig> seconds on a typical workstation. it is also extremely easy to use relative to other methods, consisting of only a single executable that can be run without the user needing to supply any organism-specific parameters. a web server has also been implemented at http://compbio.ornl.gov/prodigal/. the latest source code for prodigal is available via the same web site, and version  <dig>  has been included as an additional file .

RESULTS
assessing the performance of microbial gene-finding programs remains a difficult task due to the lack of experimentally verified gene start sets. the ecogene verified protein starts set  <cit>  remains the only large set of experimentally verified genes and translation start sites for typical bacteria. in addition, another large set was produced for two archaea, halobacterium salinarum and natronomonas pharaonis, using a special proteomics technique for extracting n-terminal peptides  <cit> . in addition to the above sets, numerous smaller sets exist for other genomes, but most of these are also atypical genomes such as cyanobacteria and archaea. nonetheless, these still provide a set of experimentally verified genes with which to test the accuracy of start site and gene predictions. for these genomes, we relied on the data set from the protisa database of confirmed translation initiation sites  <cit> . however, some of the genes in the synechocystis set were inconsistent with annotations in the genbank files, and subsequent manual inspection proved the genbank files to be correct. therefore, we removed genes from this set, as well as a few genes from the other genomes, that disagreed with the genbank annotations. we extracted all sets with more than  <dig> experimentally determined translation initiation sites, although we excluded numerous relatives of e. coli  in protisa whose starts were verified only through similarity search.

for purposes of assessing gene prediction quality, a gene call was considered correct if the algorithm identified the 3' end of the experimentally verified gene. table  <dig> shows the performance of prodigal relative to the programs genemarkhmm  <cit> , glimmer  <dig>  <cit> , easygene  <dig>   <cit> , and med  <dig>   <cit> . genemark  <cit>  and glimmer  <cit>  predictions for these genomes were downloaded from ncbi . easygene  <cit>  predictions were obtained from the easygene server. med predictions were run locally using default parameters. the second number for each program indicates exactly correct genes . to assess the quality of the start site correction programs tico  <cit>  and tritisa  <cit> , we chose to run these programs as postprocessors to prodigal. although this is different from the published results for these programs , we view this method as a more accurate way of assessing the ab initio value of such tools in an annotation pipeline.

as can be seen in table  <dig>  prodigal proved equal or better at locating genes in every organism with a few exceptions: glimmer  <dig>  <cit>  and easygene  <cit>  in p. aeruginosa, and genemarkhmm  <cit>  in n. pharaonis. prodigal also performed equal to or better than the other tools in translation initiation site prediction with a few exceptions: genemarkhmm  <cit>  and tritisa  <cit>  on b. subtilis, and tico  <cit> , tritisa  <cit> , and easygene  <cit>  on haemophilus influenzae. prodigal performs equal or better at locating existing genes, while also providing comparable performance in translation initiation site prediction to the start correction tools.

the above test set contains many unusual genomes. bacillus subtilis is remarkable for its extremely strong use of the sd motif. halobacterium salinarum and natronomonas pharanois make only limited use of the sd motif. aeropyrum pernix contains a different rbs motif in ggtg. synechocystis pcc <dig>  like most cyanobacteria, does not seem to use the sd motif at all, and instead favors at-rich regions upstream of its translation start sites. a quick scan of  <dig> finished genomes in genbank with prodigal's sd-motif routine revealed that 88% of them used the sd motif. it is our assertion that e. coli, b. subtilis, and p. aeruginosa from the table above provide a more typical look at performance in the vast majority of sequenced microbial genomes.

although genbank files doubtless contain many errors, results for these same organisms vs. genbank annotations were recorded to capture a "whole genome" view. table  <dig> shows these results. all the genomes in table  <dig> have sets of more than  <dig> experimentally verified protein starts . although it is likely that they are still far from perfect, it is an interesting result nonetheless that prodigal performed very well compared to all existing methods. prodigal's performances on the well-studied cyanobacteria synechocystis pcc <dig> and the highly curated pseudomonas aeruginosa are particularly interesting, in that the program matches many more start sites in the genbank file than the other methods.

these results cannot be seen as definitive, however, as it is always possible prodigal's algorithm contains a bias that is shared by whatever methods were used to create the original genbank files. in order to rule this bias out, we examined atg usage and "leftmost start" usage in each of the methods, but we could find no obvious bias shared by prodigal and genbank annotations relative to the other methods. if anything, prodigal seemed to call more starts internally and to truncate more genes, than the other methods. although the quality of the genbank files is impossible to estimate, we included the above results to demonstrate the concept of "genome-wide" performance, an important factor in microbial annotation pipelines.

determining the number of false positives for each method is an impossible task without knowing the complete set of protein coding genes for each genome. instead, we can only measure the number of genes predicted by each program relative to those retained by manual curators in the genbank files. table  <dig> shows the number of genes predicted by each program; the number in parentheses is normalized around the number of genes in the genbank file.

easygene  <cit>  predicts fewer genes than all other methods on every genome, with the one exception of pseudomonas aeruginosa; however, easygene  <cit>  is also less sensitive than the other programs . it is likely the program could be improved on these genomes simply by using a less stringent r-value threshold, though this would lead to an increase in the number of genes predicted. prodigal predicts equal or fewer genes vs. the remaining methods  in all cases except halobacterium salinarum vs. genemark  <cit> , while still retaining excellent sensitivity in locating genes. the gaps in b. subtilis and synechocystis are particularly noticeable.

in the future, we hope to improve prodigal's recognition of short genes, atypical genes, translation initiation mechanisms, and genomes. with a more detailed look at cyanobacteria and archaea, in general, it should be possible to build a better start site prediction algorithm than the one currently in place for non-sd motifs. also, identifying laterally transferred genes, genes in phage regions, proteins with signal peptides, and any other genes that do not match the typical gc frame bias for the organism in question, are areas where prodigal can improve. we will also seek to develop a version of prodigal to address the rapidly growing metagenomic data for microbial organisms.

CONCLUSIONS
we developed a new gene-finding program for microbial genomes called prodigal. the goals of prodigal were to attain greater sensitivity in identifying existing genes, to predict translation initiation sites more accurately, and to minimize the number of false positive predictions. the results of prodigal were compared to existing methods for both purely experimentally verified genes as well as curated genbank files for a number of genomes. prodigal's performance was found to be comparable or better to existing methods in the prediction of genes while also predicting fewer overall genes. in the prediction of translation initiation sites, prodigal performed competitively with existing methods. prodigal is currently already in use at many institutions, and it has been used to annotate all finished microbial genomes submitted to genbank by doe-jgi in  <dig> and onward . it is run regularly at ncbi alongside genemarkhmm  <cit>  and glimmer  <cit> , and it has also been incorporated into the swiss institute of bioinformatics microbial genomics browser  <cit> . in conclusion, prodigal should prove to be a valuable resource for genome annotation of either draft or finished microbial sequence.

availability and requirements
project name: prodigal

project home page: http://compbio.ornl.gov/prodigal/

operating system: any

programming language: c

license: gnu gpl

authors' contributions
dh wrote the code. dh and lh designed the algorithm. pl and glc examined the gc frame plot problem in high gc genomes. glc also performed a study on 16s rnas. ml and fl contributed ideas and suggestions to the algorithm, as well as practical testing of the code. all authors read and approved the final manuscript.

supplementary material
additional file 1
prodigal.v1_ <dig> tar.gz. archive containing the source code for prodigal.

click here for file

 acknowledgements
the authors wish to acknowledge robert w. cottingham, edward c. uberbacher, cynthia jeffries, and yun-juan chang for helpful discussions and suggestions. the authors also wish to acknowledge mark borodovsky for helpful discussions and the provision of the genemark software. support for this research was provided by the u.s. department of energy, office of science, biological and environmental research programs. oak ridge national laboratory is managed by ut-battelle, llc, for the u.s. department of energy under contract de-ac05-00or <dig> 
