BACKGROUND
modeling and analysis of large biochemical networks is in its infancy. networks' intrinsic capabilities and behavior arise both from the numerous network components and their complex interactions, thereby making the modeling task very challenging. in the field of computational systems biology, researchers modeling these networks often aim at predicting the system behavior in response to a given treatment. for example, lethality prediction for gene deletions  <cit>  and maximization of the yield of a metabolic product  <cit>  provide interesting applications.

currently the structures of various biochemical networks are under extensive research. best known are the structures of metabolic networks which are reconstructed on the basis of genome annotation, and biochemical and physiological evidence  <cit> . metabolic network models are reconstructed e.g. for yeast saccharomyces cerevisiae  <cit> , bacteria escherichia coli  <cit>  and streptomyces coelicolor  <cit> , and a number of other organisms  <cit> . the structures of other intracellular networks types than metabolic networks are poorer known. gene regulatory networks are explored in large scale in gene deletion studies  <cit>  and transcription factor binding experiments  <cit> , but various uncertainties relate to those studies. on the other hand, much information is available for protein-protein interaction networks and signal transduction networks  <cit>  but, for example, the modular composition of proteins retards their reconstruction  <cit> .

besides structural information, the modeling of biochemical network behavior needs information about reaction kinetics, too. reaction kinetics is much studied in biochemistry but, unfortunately, it still remains mostly unknown because of the difficult quantification of reaction velocities, especially in vivo  <cit> . in some cases it has been possible to construct kinetic models for reaction pathways  <cit> . in these situations, both the network structure and reaction kinetics are known, and the network model can be simulated using a system of ordinary differential equations . however, in most cases the lack of kinetic information prevents the construction of ode models or the model sizes remain very limited.

the usual approach to construct an ode model for a biochemical pathway is to collect the needed information from literature piece by piece. the process is time consuming, and uncertainties appear in model construction because of natural complexity of cellular systems and the varying conditions in which they are examined.

a complementary method to construct ode models is to adopt the available information, and then randomly generate the lacking information. these partially random models have several applications. first, they provide the ground truth data for objective evaluation of methods in data analysis and parameter estimation. the fundamental problem in those fields is that the goodness of the methods cannot be evaluated because data from real biological measurements is always noisy and the correct values remain unknown . second, a researcher can generate a practically unlimited number of networks in which given features are varied. this makes it possible to study interrelationship between network structure and function, and to obtain statistical significance on the results . third, the approach allows gradual model construction in which randomness is decreased after more information becomes available. for example, if the parameters of kinetic rate laws were previously drawn from a distribution, their values can be fixed when they become known. thus, the model becomes more similar to its biological example.

there are many software for time series simulation, parameter estimation, and other analysis of biochemical network models . to authors' knowledge, however, there is no freely available an easily extendable software toolbox for generation of random ode models for biochemical networks. the existing network generation softwares  <cit>  have different modeling approaches and principles.

implementation
research objectives may set various requirements for model generation. in the case of a metabolic network model generation, the network structure and its stoichiometry may be known, and only the kinetic laws have to be generated. in contrast, in generation of genetic regulatory network models, network structures are usually unknown, too, and their generation may be based on statistical rules. rmbntoolbox makes it possible to produce network models for various situations. however, there are infinitely different kinds of research objectives, and the toolbox may not be able to fulfill all the needs a user has. in order to help the user to implement her own functions easily, the toolbox has a modular structure, and the source code is freely available under gnu general public licence. rmbntoolbox is implemented in the matlab environment  <cit>  which provides a flexible environment for its further development. the toolbox is comprised of a set of matlab functions which make the model construction possible when used together. it is illustrative to consider the network generation task using a compact mathematical framework. especially for metabolic networks, the structural and kinetic information can be well summarized using a time variant concentration vector c, a time invariant stoichimetric matrix s, and a time variant reaction rate vector v. vector c contains concentrations for all the m species . the m × n matrix s represents the network structure by storing stoichiometric coefficients of all n reactions in its columns. the element s  >  <dig> if reaction j produces species i, s  <  <dig> if reaction j consumes species i, and otherwise s  =  <dig>  the reaction rate vector v describes reaction rates vj, j =  <dig>  ... n. reaction rates vary according to kinetic laws which are linear or nonlinear algebraic functions. typically, kinetic laws determine the rates based on the amounts of species participating to reactions as well as various reaction specific parameters. altogether, an ode model can be formulated as

 dcdt=sv.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdsgakhqabiab=ngajbqaaiabdsgakjabdsha0baacqgh9aqpcqwgtbwucqwf2bgdieaacqgfuaglaaa@36b3@. 

the reaction rates vj, j =  <dig>  ..., n are determined by kinetic laws fj as

 vj = fj , 

in which cj includes concentrations of species taking part in the reaction j, and pj contains the parameter values of the kinetic law.

in addition to the basic scheme shown in eqs.  <dig> and  <dig>  the model may contain other details such as assignment rules. an assignment rule makes it possible to assign a specific value for a variable independently from the system of differential equations above. the value may depend on time, species amounts, or whatever other model variables.

the generation of a biochemical network model using rmbntoolbox has three main steps. first, a network structure is determined. this includes defining both the network components, i.e., species and reactions, and their connections. as described in section 'network structure', the toolbox supports structure generation by providing a set of methods for random and deterministic approaches. in the second step of the network model generation, network kinetics are determined by setting kinetic laws for reactions, parameter values therein, possible assignment rules for species, etc. section 'network kinetics' describes how the toolbox makes it possible to accomplish these tasks. before the network can be simulated, its initial state must be defined. section 'initial state of the network' takes a look at this task. matlab scripts can be used to call the toolbox functions so that all the structural, kinetic, and state data are generated into the model. in practice, the model is constructed into a data structure which mainly exploits matlab vectors, matrices, and their indexing. the details of the data structure and toolbox functions are described in the toolbox manual which is delivered along with the toolbox. the usage of toolbox functions is described in their help documentation. figure  <dig> summarizes the main phases of model construction as well as further steps which are needed to export the generated model into the format of systems biology markup language .

network structure
the toolbox provides various methods for constructing network structures. the user can generate and import graph models as well as stoichiometric models. rmbntoolbox uses an incidence matrix representation to store a directed bipartite graph which describes the network structure. in the graph, species and reactions are nodes connected with directed edges. edges indicate the direction of mass flow or controlling activity. next we introduce the main approaches for setting up network structures.

the toolbox provides functions that make use of statistical rules in network structure generation. the user may specify the number of reactions, the number of species, and a probability density function. the probability density function defines the number of species that are connected to each reaction. for example, it may be required that the probabilities for reactions to have  <dig>   <dig> and  <dig> substrates, are 50%, 30%, and 20%, respectively. the method is useful when reactions have a known indegree distribution of substrates or outdegree distribution of products which is used as a determining feature for the structure generation. in various network systems, the structure of the network determines its stability. the toolbox offers a possibility to specifically generate stable or unstable linear systems as models for biochemical networks. methods with different structure generation principles are implemented for this purpose. the first method generates network structures and tests their stability until a network structure with a stable  behavior is found. the other methods generate network structures iteratively. one by one they connect random species to random reactions and check whether the network remains stable . all the methods examine the model stability using the eigenvalues of the constructed system matrix. further theoretical details are presented in an example of the section 'results'.

a network analysis study may be based on graph theoretical approaches, too. a tree is a graph in which no loops nor unconnected nodes exist. the toolbox makes it possible to generate trees as models of network structures. a tree sets up a network sceleton to which more reactions, species, or their connections can be added later on, or which can be analyzed further as such.

in addition to random structure generation, the user can specify any pre-defined network structure by providing a bipartite graph in the form of an m × n matrix m. in that case, the m rows represent species and n columns represent reactions, and the element m  equals one if species i is connected to reaction j. if a reaction and a species are not connected, then the respective element in m equals zero. this approach makes it possible for the user to easily generate any kind of network structure using her own methods, and to process the model further using the toolbox functions.

the toolbox supports the import of stoichiometric matrices. the user may find the import feature especially useful in the cases in which the structure of a metabolic network is known, but kinetics not. stoichiometric matrices s are provided as m × n matrices , possibly along with the names for the m species and n reactions.

network kinetics
the main task in the generation of network kinetics is to choose and set kinetic laws for reactions in the network model . rmbntoolbox has a function that randomly chooses kinetic laws from kineticlawlibrary  <cit>  which contains many of the basic kinetic laws from biochemistry textbooks  <cit> . kinetic laws have different forms depending on various features on their reaction mechanisms, such as the numbers of substrates and products, compulsory or arbitrary binding order of multiple substrates, and reversibility. two features related to network structure determine if a specific kinetic law can be set for a specific reaction in the network model. first, the numbers of subsrates and products must be the same in the kinetic law and in the reaction it is applied to. second, the reversibility of the kinetic law must match with the reversibility of the reaction. the choice of a kinetic law can be made randomly among those kinetic laws which fulfill these two requirements.

kinetic laws have various parameters for which values need to be determined. by default, the parameter values are random numbers from uniform distributions. the user can redefine the distributions, and she can set new values separately for individual parameters if needed.

in addition to reactions, the amounts of species may be determined by assignment rules. in this case, the user writes an assignment rule as a matlab m-file, and specifies the variables which are used for its evaluation. with a similar procedure, assignment rules can be set for parameters of kinetic rate laws. thus, assignment rules make it possible for species and parameter values to be functions of any other variables.

initial state of the network
an initial state has to be given for a network model before its dynamical behavior can be simulated. this includes defining the initial amounts for species, but also the values of other time-dependent variables which may exist. the toolbox provides a function for this task. on the other hand, there are many network analysis methods that do not need the state information . for those cases, the user can generate and export models without the state information.

exporting network models in sbml format
the network models created with the help of rmbntoolbox can be exported in the format of systems biology markup language   <cit> . an increasing amount of software tools support sbml for model exchange, and therefore the user can choose her favourite tool for further analysis of the generated models. rmbntoolbox bases its sbml support on other software. the network model generated by rmbntoolbox is converted to the format of sbmltoolbox  <cit>  which is another toolbox working in matlab. after kinetic laws are read from kineticlawlibrary  <cit>  and added to the model, sbmltoolbox makes it possible to export the model in sbml format. the export is done with the help of the libsbml library which is written in iso c and c++  <cit> .

RESULTS
in this section we present examples of the intended use of rmbntoolbox. in the first example we generate a large model for a genetic regulatory network that can be used to produce ground truth data for a microarray simulation  <cit> . in the second example the structure and stoichiometry of a metabolic network are known, and the kinetic laws are randomly generated. furthermore, the example demonstrates how metabolic fluxes in a steady state can be decomposed by elementary flux modes. the third example studies network stability using a control theoretic approach. the example generates small networks for which the network structure determines the stability. all the matlab scripts that are used to generate the following example networks can be found in the examples folder of rmbntoolbox. all the generated example networks can be downloaded as additional files of this article.

gene regulatory network
in gene regulatory networks a set of genes produce proteins called transcriptional regulators. transcriptional regulators bind to the promoter areas of genes, thereby activating or inhibiting their transcription. most of the genes do not produce transcriptional regulators but their functions may be related to other processes, such as metabolism or cellular growth. transcriptional regulators are usually thought as the key to the cellular control. in this example we produce a large network model with simple structural characteristics . the model mimics a gene regulatory network.

in the generated network there are  <dig> transcription reactions which produce one product each. the total of  <dig> of the products act as transcriptional regulators which control the network by activating and inhibiting the transcription reactions. each of the transcription reactions has one activatory and one inhibitory regulator which are selected randomly from the  <dig> regulators.

the synthesis of the gene products is modeled similarly in all cases. the modeling concentrates on the kinetics of transcription and uses the rate law suggested in  <cit> . the amount of the protein product, for which the gene is a precursor, is assumed to be equal to the produced transcript. because the number of gene copies is restricted and only a limited number of regulators are able to bind simultaneously, the kinetic law saturates both with the amount of activator and inhibitor. the rate of transcription is

 r=vbasalkiniini+kinianaana+kana,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgybgccqgh9aqpcqwgwbgvdawgaawcbagaemoyaimaemyyaemaem4camnaemyyaemaemibawgabeaakmaalaaabagaem4sas0aa0baasqaaiabdmeajbqaaiabd6gaunaabaaameaacqwgjbqsaeqaaaaaaoqaaiabdmeajnaacaaaleqabagaemoba42aasbaawqaaiabdmeajbqabaaaaogaey4kasiaem4sas0aa0baasqaaiabdmeajbqaaiabd6gaunaabaaameaacqwgjbqsaeqaaaaaaagcdawcaaqaaiabdgeabnaacaaaleqabagaemoba42aasbaawqaaiabdgeabbqabaaaaagcbagaemyqae0aawbaasqabeaacqwgubgbdawgaaadbagaemyqaeeabeaaaagccqghrawkcqwglbwsdaqhaawcbagaemyqaeeabagaemoba42aasbaawqaaiabdgeabbqabaaaaaaakiabcycasaaa@54f8@ 

where vbasal is the rate of transcription in the absence of activators and inhibitors, i and a represent the concentrations of inhibitor and activator, ki and ka represent the concentrations with which the inhibitor and the activator have the effect of half of their maximal effects, and ni and na act as hill coeffcients. the parameter values are random numbers from the following uniform distributions: vbasal ∈ u , ki ∈ u , ka ∈ u , ni ∈ u , na u . the initial concentrations i and a are random numbers from the uniform distributions i ∈ u  and a ∈ u .

the degradation kinetics of each gene product follows the mass action law

 r = k p, 

where k is a rate parameter and p is the concentration of the gene product. similarly to the kinetic laws of transcription reactions, the parameter values are unique for each degradation reaction. in this case, the value of parameter k is drawn from the uniform distribution u .

for a comparison, we additionally simulate a duplicate network which mimics a gene deletion . in the duplicated network, the production of a randomly chosen regulator is stopped by setting the parameter vbasal of its transcription reaction to zero. otherwise the duplicated network is identical to the original network.

the behavioral differences are illustrated by a time series simulation. after constructed, both networks are exported in sbml format and sbml ode solver  <cit>  is used to simulate them. figure  <dig> gives an overview to differences in simulation results. for each of the species, the figure shows concentration differences between the two simulations. for each time point t, the difference d  is calculated as

 d  = c  - c* , 

where c  and c*  are concentration values of the species in the first and in the second simulation, respectively. although most of the species act similarly in both simulations, there are large and unforeseeable dynamic variations too. the effects of the inactivation of the regulator do not fade away or relax to a constant but the inactivation seems to have complex behavioral consequences.

simulation and stoichiometric analysis
in this example, a time series simulation is used to illustrate a result from stoichiometric network analysis. as presented in  <cit> , any feasible steady state flux distribution of a metabolic network is a linear combination of so-called elementary flux modes . we show using random reaction kinetics that this holds in a small examplary metabolic network model. extreme pathways  <cit>  and elementary fluxes  <cit>  are similar concepts to efms, and they would be equally valid for this analysis.

in metabolic systems, the time derivates of metabolite concentrations c can be written as presented in equation  <dig>  i.e., dcdt=sv
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdsgakhqabiab=ngajbqaaiabdsgakjabdsha0baacqgh9aqpcqwgtbwucqwf2bgdieaacqgfuaglaaa@36b3@ where s is the m × n stoichiometric matrix with m metabolites and n reactions, and v contains the reaction velocites with vi ≥  <dig> for each irreversible reaction i. metabolites are classified to external for which it is assumed that the environment always balances their concentrations cext, and internal for which the concentrations cint are determined by the network. a network is then said to be in a steady state if

 dcintdt= <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdsgakhqabiab=ngajnaabaaaleaaiegacqgfpbqacqgfubgbcqgf0badaeqaaagcbagaemizaqmaemidaqhaaiabg2da9iab=bdawiabcycasaaa@3952@ 

i.e., there is no accumulation or depletion of internal metabolites. specific reaction velocities  are needed to maintain steady states.

elementary flux modes describe such reversible and irreversible pathways in the network which maintain steady states when working. in an elementary flux mode, each reaction is assigned with its relative velocity compared to other reactions in the same efm. efms are minimal in the sense that the active reactions in an efm cannot be a subset of the active reactions in another efm. elementary flux modes can be calculated based on a stoichiometric matrix and the respective reaction irreversibilities  <cit> . let vector e denote an elementary flux mode in which element ei =  <dig> if reaction i is inactive and ei ≠  <dig> if the reaction i is active. further, let the set of all n elementary flux modes of the network be in matrix e = . then any flux distribution v, which results a steady state into the network, can be described as a linear combination of the efms as

 v = e β,   βj ≥  <dig> if efm j is irreversible 

where the vector β weigths each of the elementary fluxes by a scalar. the weigths are non-negative for efms describing irreversible pathways.

because the calculation of efms uses the steady state assumption, equation  <dig> has solutions for β only if v maintains a steady state. usually the number of efms  is much larger than the number of reactions , and therefore unique solutions are rare for equation  <dig>  however, we can test the existence of solutions by setting up a linear programming problem

 max⁡1tβsuch thateβ=vβj≥ <dig> efm jisirreversible
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakqaabeqaaigbc2gatjabcggahjabciha4hqabiab=fdaxmaacaaaleqabaacbagae4hvaqfaaggacogae0nsdigabaqbaeaabigaaaqaaiab+nhazjab+vha1jab+ngajjab+hgaojabbccagiab+rha0jab+hgaojab+fgahjab+rha0bqaaiabdweafjab9j7aihgaaiab81da9iab=zha2bqaaaqaaiab9j7ainaabaaaleaacqwgqbgaaeqaaogaeyyzimraegimaajaeiilawiae4xraukae4nraykae4xta0kaeeiiaaccbigaesnaaomae4hiaaiae4xaakmae43camnae4hiaaiae4xaakmae4ncainae4ncainae4xzaumae4ndaynae4xzaumae4ncainae43camnae4xaakmae4nyaimae4hbawmae4xzaugaaaaaaa@6676@ 

the objective function is set to find the maximum of the sum of the weigths. rather than the maximum value, we are now interested in the existence of any solution. in the following, we utilize the fact that the maximum can be found only if any solutions exist.

a hypothetical example network, illustrated in figure  <dig>  consists of three species and six reactions  <cit> . the network structure is provided to rmbntoolbox as a stoichiometric matrix. initial amounts for metabolites, kinetic rate laws for reactions, and their parameter values are chosen randomly, because we aim at illustrating that an arbitrary steady state flux distribution is a linear combination of elementary flux modes.

program metatool  <cit>  is used to calculate the elementary flux modes of the generated network. the network is exported in sbml format  and simulated using sbml ode solver  <cit>  until a steady state is reached. during the simulation, the flux distribution v and time derivates of species amounts dcdt
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdsgakhqabiab=ngajbqaaiabdsgakjabdsha0baaaaa@3224@ are sampled for every second. linear programming problems, as described in eq.  <dig>  are solved for each flux distribution sample. figure  <dig> shows the time derivates and the existence of weights β for each sample. after a steady state is reached , then the flux distribution is a linear combination of the elementary flux modes .

network stability
neither rmbntoolbox nor systems biology markup language take care of the rationality of the generated network models. possible unstability of the generated model is a typical issue the user has to consider. in this example we look how to exploit control theory for generating models which are unstable and biologically unreasonable and, on the other hand, stable and biologically more reasonable.

in control theory, a system is stable if it has a bounded response to a bounded input  <cit> . we concentrate on network models which can be formulated as systems of first-order linear differential equations. their compact representation form is

 dcdt=ac,
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdsgakhqabiab=ngajbqaaiabdsgakjabdsha0baacqgh9aqpcqwgbbqqcqwfjbwycqwfsaalaaa@365d@ 

in which the vector c contains states of variables, and the system matrix a determines the system properties. the system is known to be stable if the eigenvalues of a have nonpositive real parts, and every eigenvalue with zero as the real part has an associated jordan block of order one  <cit> .

next we derive a model for which the user can determine if this stability requirement is fulfilled or not. for this purpose, the biochemical network model described by equations  <dig> and  <dig> needs to be represented in the format of equation  <dig> 

we begin the model reformulation from kinetic laws, i.e., equation  <dig>  because the intended model in equation  <dig> is linear, we can utilize for its construction such kinetic laws which are linear too. kinetic laws of the form first-order mass-action fulfill this need. for example, the kinetic law for reaction j is vj = kj cj where kj is a reaction-specific rate constant and cj is the concentration of the subsrate. kinetic laws of this form make it possible to represent the reaction rate vector v of equation  <dig> by a matrix-vector multiplication

 v = Γc, 

where Γ is a diagonal n × m matrix storing rate constants kj, for each reaction j =  <dig>  ..., n, on its main diagonal.

substituting this to equation  <dig>  it becomes

 dcdt=sv=sΓc.
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabdsgakhqabiab=ngajbqaaiabdsgakjabdsha0baacqgh9aqpcqwgtbwucqwf2bgdcqgh9aqpcqwgtbwucqqhtowrcqwfjbwycqgguaglaaa@3b96@ 

multiplication of the time invariant matrices s and Γ results to the m × m matrix a. the substition of a to equation  <dig> brings the network model to the form presented in equation  <dig> 

during the model construction, matrices s and Γ are randomly generated after which they are multiplied to produce the matrix a. the eigenvalues of a are calculated, and the values of their real parts are examined. the generation is repeated until the eigenvalues indicate the required stable or unstable behavior of the model.

as the first example, we generate an unstable network model  by requiring at least one positive eigenvalue for the system matrix a. the structure of the generated network is depicted in figure  <dig>  we note that the network includes two kinds of features that are not reasonable in real biochemical networks and which obviously cause instability for the model. the first unrealistic feature is that the mass balance does not hold: species s <dig> is decomposed in two parts, s <dig> and s <dig>  in reaction r <dig>  further, reaction r <dig> converts one s <dig> molecule back to two s <dig> molecules. this results that s <dig> can be decomposed to s <dig> and s <dig> without loss of mass and, after each decomposition, the amount of s <dig> becomes doubled. the second problematic feature is the generation of dead-ends in the model: species s <dig> is produced by reaction r <dig>  but it is not consumed by any reaction. therefore, the amount of s <dig> increases as long as there is a supply of s <dig>  all this causes unstable behavior for the model, as demonstrated by figure  <dig> in which species amounts increase rapidly towards infinity.

in the second example the generated network model  is stable. we note from figure  <dig> that the network does not have the two structural features which appeared in the previous model. instead, the structure is more treelike and without feedback loops, thereby enabling material flows through the network. correspondingly, the species amounts show relaxation towards constant values in figure  <dig> 

discussion
in network model generation, the user has to define various network characteristics that include network components, their connections, stoichiometries, kinetic rate laws, etc. rmbntoolbox helps the user in these tasks by providing functions that make it possible to create and modify various structural and kinetic features. many generation tasks are automated and, on the other hand, randomization can be exploited efficiently. the most of the features specified in systems biology markup language are supported by the toolbox. the toolbox does not oversee the rationality of the generated models, because an unreasonable model in one context may be reasonable in another one.

the model generation times are fair even for large models. for example, the genetic regulatory network model presented in section 'results' has  <dig>  species and  <dig>  reactions. the model and the corresponding sbml file were generated in appr.  <dig> seconds using a pc with 1gb ram and pentium m  <dig>  ghz processor. small network models, such as the one used in the stoichiometric analysis example, are generated within one second.

CONCLUSIONS
we have presented a software called rmbntoolbox that can be used to generate random models for biochemical networks. the toolbox functions make it possible to generate network models with various user specified characteristics. for example, network structure, stoichiometric coefficients, kinetic laws and parameter values can be easily generated and manipulated. with the help of sbmltoolbox and libsbml, the models can be translated into the format of systems biology markup language. the generated network models can be simulated and analyzed using any software that is able to use models provided in sbml format. the toolbox can be easily extended and modified, because it has a modular structure, it is implemented in matlab environment, and it is freely available under gnu general public licence. random network models can be applied to various purposes in the field of biochemical network modeling. artificial models are needed to produce noise free data in which the characteristics are precisely known. only that kind of data can be used for objective evaluation of various data analysis and parameter estimation methods. on the other hand, the new information acquired from biochemical networks can be included into the network model generation. this makes it possible to refine the model gradually while preserving the variations of the unknown parts of the network. further, it is possible to study various emergent properties in network behavior, such as the effects of varying network connectivity. for these kinds of purposes, a sufficiently large number of network models is generated and the features of interest are varied.

availability and requirements
project name: rmbntoolbox

project home page: 

operating system: platform independent

programming language: matlab

other requirements: libsbml  <dig> . <dig> or higher, sbmltoolbox  <dig> . <dig> or higher

license: gnu gpl

authors' contributions
ta designed and implemented the main data structures and functions of the toolbox. o-ps and jn designed and implemented the functions related to control theory. oy-h initiated the study and participated to the coordination. all authors read and approved the final manuscript.

supplementary material
additional file 1
model for gene regulatory network. gene regulatory network model presented in the first example .

click here for file

 additional file 2
model for gene regulatory network with a gene deletion. modified gene regulatory network model presented in the first example .

click here for file

 additional file 3
model for metabolic network. metabolic network model presented in the second example .

click here for file

 additional file 4
model for unstable linear system. unstable linear system model presented in the third example .

click here for file

 additional file 5
model for stable linear system. stable linear system model presented in the third example .

click here for file

 acknowledgements
this work was funded by the national technology agency of finland. in addition, the work was supported by the academy of finland, . ta aknowledges tampere graduate school in information science and engineering, signe and ane gyllenberg foundation, and tamperelaisen tutkimustyön tukisäätiö.
