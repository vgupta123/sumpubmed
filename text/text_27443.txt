BACKGROUND
in a directed evolution experiment library diversity is a key factor for its success. the diversity of a library is the amount of unique variants and, as many of which are represented multiple times, the library diversity distinct from the library size. the library needs to be sufficiently diverse to find improved variants , while not too rich in mutations to be swamped by non-functional protein. consequently, to best identify winning variants in an error-prone pcr  library, the mutations need to be at an optimal frequency   <cit>  and not overly biased towards certain bases; preferential mutation of at bases has been reported with manganese mutagenesis  <cit> .

one way to ensure an effective diversity of a mutagenised plasmid pool is to assess the diversity in a small test library. despite its cost of time and reagents  <cit> , this step is strongly recommended as it avoids heavily investing in a potentially suboptimal library further downstream  <cit> . a test library entails plating an e. coli culture transformed with the pool of variant plasmids for growth under non-selective conditions. the colony abundance is assessed and about 10– <dig> clones are sequenced in order to calculate the overall mutation frequency, the error rate of the polymerase, the individual mutation frequencies and the biases associated with them  <cit> . when extensive sampling is done a highly accurate picture of the diversity of the library is seen, including the identification of a variety of sequence-specific mutation hotspots and coldspot  <cit> , however a rough sampling is generally sufficient to estimate the main contributors of the mutational spectrum of the library. however, one major issue that arises is that the numbers may not be accurate.

in order to simplify and add statistical depth to these calculations, a new online calculator is presented here. the program, mutanalyst , uses the gene sequence and the list of mutations found to calculate the mutation frequency per sequence, the specific mutational frequencies  and various bias indicators tabulated and graphed . a novel feature of this tool is that it estimates the error associated with the values found. this implementation is driven by the need to determine the accuracy of the calculations in light of the limited sampling of the test library. this benefits the user greatly as it gives an indication of the reliability of each parameter, and thus a more informed perspective in determining the suitability of the library.

implementation
the site is written to be compatible with modern browsers and internet explorer  <dig> or above with javascript enabled . the site is a series of three static html files powered by client-side javascript. this was done in order to allow transparency in the calculations involved  and to allow a user to use the site offline . the operations of the site are explained in detail in the appendix.

the program has five parts with two different starting points. one starting point allows the user to input the wild type sequence and the list of mutations in the sampled sequences , to generate the analysis of the number of mutations per sequence.

RESULTS
the analysis of the number of mutations per sequence by mutanalyst is improved compared to standard protocols  <cit> . it shows not only the average number of mutations, but it also calculates the mean  of a poisson distribution fitted to the value. this distribution approximates the pcr-distribution of sun  <cit> , but does not require the knowledge of the pcr efficiency. the latter value is important in light of the inevitable error arising from the small sampling size, which can be ameliorated by imposing this valid assumption of the distribution of the values. the number of mutations per sequence is a key indicator of the diversity of the library and is also used by another program, pedel, to determine library completeness in terms of nucleic acid mutation coverage . together with nucleobase-specific mutational rates, the mean number of mutations per sequence is used both in pedel-aa  <cit>  and the library diversity program by volles and lansbury  <cit>  to determine the library completeness in terms of amino acids. albeit unaffiliated, the mutanalyst output can be linked directly to pedel-aa, circumventing the need for the user to copy the parameters manually.

in the third section, the user can input the nucleobase-specific mutational rates, which is otherwise obtained from the list of mutations and the wild type sequence. the resultant normalised nucleobase-specific mutational rates are displayed as both a table and as a diagram to concisely show the mutational spectrum.

the final section contains the standard indicators of bias with the addition of an error estimate. the calculation of errors is accomplished thanks to the complementarity of dna. specifically, a mutation from one base to another on one strand is matched by a complementary mutation on the opposite strand . consequently, these two separate values can be taken as replicates from which to derive the errors in the values. the propagation of errors was done parametrically using eqs.  <dig> and  <dig> with the assumption that the covariance is zero in light of the independence of each mutational event .  <dig> varx+y=varx+vary   <dig> varxy≈varxμy2+μx2⋅varyμy <dig> 

the indicators are as follows:the sum of the four transition frequencies, i.e. purine  to purine, pyrimidine  to pyrimidine,

the sum of the eight transversion frequencies, i.e. purine to pyrimidine, pyrimidine to purine,

the ratio of transitions over transversions,

the frequency of a weak-binding nucleobase pair  mutating,

the frequency of a strong-binding nucleobase pair  mutating,

the frequency of weak-binding nucleobases mutating to strong ones,

the frequency of strong-binding nucleobases mutating to weak ones and

the ratio of the latter two frequencies.



in particular the two ratios are the most important parameters as they cover the two largest sources of bias. even though, in terms of possible combinations, there are twice as many transversions as transitions, the steric difference between purines and pyrimidines means that transitions occur less frequently than transversions. due to the differences in binding strengths between weak-binding and strong-binding nucleobases, some eppcr methods more readily mutate weak-binding nucleotides. as a consequence, these two ratios are the two most crucial indicators of bias. thanks to the estimation of the error associated with them, these values can be compared with other libraries that may have been unsuccessful or successful, to those from the brochure provided with a commercial enzyme  or to a reference cut-off that the user may have chosen.

CONCLUSIONS
this easy-to-use online tool was designed to automate the calculations involved while simultaneously adding conservative error values. specifically, it simplifies laborious checking of sequence for mutations, tallying of mutations, normalisation steps and fiddly calculations of commonly used biases indicators. this is done with the addition of informative graphs and with the addition of statistical rigour. the graphs include a sankey diagram to show the directions of the mutation. the statistics that goes beyond current standards, includes a poisson fit for the distribution of mutations per sequence in order to force the data to not be overly affected by jackpot samplings, the estimation and the propagation of errors by taking advantage of the fact that a mutation on one strand is as likely as a mutation on the complementary strand. the main aim was to automate and to add statistical confidence to the values in order to give a better representation of the values, which are strongly affected by the small sampling and may be otherwise misleading.

ethical approval
no ethical approval was required for this study.

availability and requirements
the program is available at http://www.mutanalyst.com. the source code can also be found at https://github.com/matteoferla/mutant_calculator.

appendix
statistical notes
the derivation of the formula for the variance of a ratio is explained in this walk-through.

the mean  and variance  or σ2) of a distribution  are variables that describe the function — technically they are the first and second moments respectively. the expected value ) is the average of a series of values sampled of a random variable . the mean is the expected value of the values themselves , while the variance is the expected variable of the squared differences from the mean .  <dig> μx=∑i=1nxin=ex   <dig> varx=∑i=1nxi−μ2n=ex−μ <dig> 

to proceed we need to determine the variance of a function. the eq.  <dig> can be easily rewritten as eq.  <dig>  thanks to a binomial expansion and the rules of linearity of the expected value .  <dig> varx=ex−μ2=ex2−ex <dig>   <dig> ea=awhenaisaconstant∴eex=ex   <dig> ex+y=ex+ey 

a function at a set point can be approximated to a polynomial, thanks to the taylor series, which is an infinite sum, but for simplicity only the first two terms are shown in eq.  <dig>  which is what is known as a first-order approximation.  <dig> fx≈fμ+f'μx−μ 

rewritting eq.  <dig> for a function and expanding each term as a taylor series , gives us eq.  <dig>  the first term of eq.  <dig> is expanded by binomial expansion and then the expected value function is distributed to each member of the sum, whereas in the second term the expected values is distributed on two summands and then the square of the binomial is resolved. it should be noted that by definition the expected value of the  difference from the mean is zero . after that several terms cancel each other out giving the first-order approximation for the variance of a function .  <dig> varfx=efx2−efx <dig>   <dig> varfx≈efμ+f'μx−μ2−efμ+f'μx−μ <dig>   <dig> ex−μ=μ−μ= <dig>   <dig> varfx≈f'x2⋅varx 

higher-order approximations can be done , but not only there is a diminishing return in precision, the complications increase dramatically.  <dig> varfx≈f'x2⋅varx+fx⋅f''x⋅varx 

having proved the formula for the variance of a function , we can proceed to determine the variance of a ratio. first, the ratio can be converted into logarithmic form . the variance of a logarithm  can be calculated from the approximation found . this therefore allows the first order taylor approximation of the variance of a ratio to be found.  <dig> lnxy=lnx−lny   <dig> varlnx≈1x2varx   <dig> varxy≈varxμy2+vary⋅μx2μy <dig> 

site map and description
this section details how the program works and its knowledge is not needed to use the program. it is intended as an overview in case a researcher wanted to alter it for a different purpose or copy a function from it.

mutanalysis is composed of three html pages:mutational_bias_calculator

mutation_counter

variance_notes



each page uses a central css file, mut.css, and two external style resources, font-awesome and the source sans pro , two commonly used resources used in contemporary webpages.

the three html pages also use several external javascript  resources:jquery, an essential library that greatly simplifies js coding.

tooltip js , a library used to make tootips , which have several advantages over the inbuilt title attribute of html tags.

google charts, a js library that allows charts to be plotted, part of the google developers tool kit.

google analytics, a js widget that send asynchronously data to google allowing the author to see what browsers are being used. at present, mutanalyst is optimally viewed with google chrome on a mac or windows, but that may change in the future.



additionally the page mutational_counter uses a specific js file, mutationalcounter.js while mutational_bias_calculator uses two specific js files:mutationalbias.js, a script that handles the calculations and does not interact with the document or utilise any other script.

mutationalaux.js, a script that handles all the events of the buttons and other document interactions.



the key object in the mutationalbias.js calculations is called “mutball” , which store all the variables and contains several keys that match the id of elements in the html document allowing mutationalaux.js to modify them without unnecessary coding. its constructor is called mutagen. with a few exceptions  it is recreated in case the user alters anything. the exception get the object via sessionstorage. the attributes can additionally be passed by url query string. some of the attributes are:source: a string noting whence the object was called.

sequence: e.g. atatcgg.

baselist: e.g. g286a t306c a687t t880c\nwt\nwt.

freqmean: mean frequency of number of mutations per sequence, a simple arithmetic average.

freqvar: variance of number of mutations per sequence.

freqlist: array of the mutation counts  of the rows of baselist.

freqΣ: sum of number of mutations per sequence sampled.

freqλ: poisson distribution of number of mutations per sequence.

rawtable: 4x <dig> nested arrays containing the mutation spectrum observed.

muttable: as above but normalised.

suma, sumt etc. the number of as in the sequence.

a2t etc. number of incidents going from a to t. there are  <dig> of these. it is redundant with rawtable: but for html reasons it’s repeated.

size: gene size in kb.

tsovertv and tsovertv_error: transitions over transversions and its error. the keys with errors are as follows o tsovertv

o w2sovers2w

o w2n

o s2n

o w2s

o s2w

o Σts

o ts1

o ts2

o Σtv

o tvw

o tvn1

o tvs

o tvn2





the main methods are:calcfreq: calculates the parameters associated with the number of mutations per sequence, in turn it calls various functions including fit, which is a wrapper for the non-linear fitting fuction fminsearch , passing it the function of the poisson distribution —i.e. if you want to change function tinker with fit(). fminsearch  is a small function adapted from jmat 

calcbias: calculates the mutational spectrum parameters.

mutagen(): returns a blank mutball object.



abbreviations
a, t, c, g, k, m, s, w, p, yiupac nucleobase abbreviations for adenine, thymine, cytosine, guanine, guanine + thymine, adenine + cytosine, guanine + cytosine, adenine + thymine, adenine + guanine, thymine + cytosine respectively

eppcrerror-prone polymerase chain reaction

competing interests

the author declares that he has no competing interests.

authors’ contribution

mf designed, wrote both the code and the manuscript.

