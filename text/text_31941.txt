BACKGROUND
in medical literature, data of other groups are often not available in their raw formats but are presented in figures such as scatter plots, box plots, time series data or derived statistics such as kaplan-meier curves. however, incorporating these data in research projects is often necessary to compare one’s own results with those of the literature. this especially applies for systems-biological modelling for which time series data under different clinical conditions are required to calibrate the models and to validate their predictions. in order to include these data into environments used for model simulations, it is necessary to extract them from the presentations chosen in the literature. to support this task, we developed the tool ycasd  which can capture data from many kinds of graphical representations. the problem of skewed diagrams obtained from scanning papers is also addressed. for a typical example see additional file  <dig> 

the development of ycasd was motivated by our own work in the field of modelling blood formation. time series data of numerous blood parameters are required for parameterisation and validation of our models of human thrombopoiesis  <cit> , erythropoiesis  <cit> , granulopoiesis under chemotherapy and growth-factor applications  <cit>  and for other models currently under development.

since we believe that our tool is helpful especially for other research groups interested in dynamical modelling or meta-analyses, we aim at publishing it as an open source and freely available software. in the present paper, we describe the functionality and the interface of the programme, compare it with those of other publically available tools and provide a quick introduction to its use on the basis of example figures.

implementation
in this section, we describe the mathematics behind ycasd and corresponding practical limitations.

vector calculations
two pairs of pixels define the vectors of the axes provided that these vectors are linearly independent. setting values for the coordinates of the pixels and specifying the scaling of the axes  define the coordinate system. we aim to calculate the coordinates for any arbitrary fifth pixel regarding to this coordinate system. we restrict to a linear scaling of the axes in the following since logarithmic scaling can be traced back to this case by a simple transformation. as depicted in figure  <dig>  pixels p <dig> p <dig> and p <dig> p <dig> correspond to axis intercepts y <dig> y <dig> and x <dig> x <dig>  respectively. vectors a→ and b→ are coordinate vectors of the y- and x-axis respectively. when considering pixels, we can set

  p→i=pi1pi <dig> pi <dig> pi2∈nfori= <dig> ,…, <dig> 

  a→=p→1−p→2=a1a <dig> a <dig> a2∈z 

  b→=p→4−p→3=b1b <dig> b <dig> b2∈z 

for each new captured pixel p <dig>  the corresponding coordinate pair x <dig> y <dig> is calculated by estimating the intercept on each axis defined by a line, which is parallel to the respective other axis crossing p <dig>  we assume that vectors kαa→ and kβb→ are pointing in the same direction as the axes to account for rotated or linearly skewed figures, e.g. as result of scanning. orthogonality of both axes is not required. the system of resulting equations is as follows

  p→2+kaa→=p→5−kβb→ 

  p→3+kbb→=p→5−kαa→ 

we aim to determine the coefficients k
a
 and k
b
. solving the equations yields

  ka=p51−p21b2−p52−p22b1a1b2−a2b <dig> 

  kb=p51−p31a2−p52−p32a1a2b1−a1b <dig> 

a solution exists if a1b <dig> ≠ a2b <dig>  i.e. if both axes are linearly independent. the coordinates x <dig> y <dig> can now be calculated:

  x3=x1+kbx2−x <dig> 

  y3=y1+kay2−y <dig> 

if the y axis is logarithmically scaled, y <dig> can be determined by

  y3log=y1y2y1kafory <dig> y2> <dig> 

the clicking error is defined as the deviation of the estimated coordinates if a neighbouring pixel is selected. it can be estimated in units of each axis by the ratios of the axis interval lengths and pixel distances, i.e.

  xerr=x1−x2b12+b <dig> 

  yerr=y1−y2a12+a <dig> 

yerr is only valid for non-logarithmically scaled y axes.

limitations
the assumption that kαa→ and kβb→ are always parallel to the y and x axis is simple. although more elaborated methods for calculation of coordinate pairs x <dig>  y <dig> are conceivable to account for non-linearly distorted figures , our approach allows for rotation and linear skewness and is straightforward to implement into a c programme. if the assumption of linear skewness is inadequate, raw pixel data displayed by the software in case of incomplete axes definition can be used to perform own calculations of coordinates.

despite of the fact that ycasd is developed for microsoft windows, it can be used under linux with wine <cit> . mouse events are tracked by windows api  calls, therefore, only the graphical output of other windows programmes running in wine can be captured. as an example, one may use ghostscript and gsview for windows  <cit>  for displaying figures in pdfs under linux.

more technical limitations of the programme can be found in a readme file which is part of the ycasd package provided as additional file  <dig> 

RESULTS
general functionality
our freely available software tool ycasd supports capturing data points from figures of electronically available or scanned publications in order to make these data accessible by other software such as environments for data analysis or model simulations. data capturing is possible for all kind of figures, which can be displayed on the screen under microsoft windows. it only requires the definition of two points for each of the axes by clicking and setting their corresponding coordinates. for each subsequent click on the figure, a coordinate pair is estimated by vector calculations considering axes definition. vector calculations allow for capturing data points from rotated or skewed figures as a result of scanning papers. one can display the calculated coordinates either as a matlab or an r matrix with adjustable accuracy.

for quick use, a guide is shown in the output box after starting the programme. this quick guide is read from a text file, which is part of the ycasd package, see additional file  <dig>  during runtime, the status bar shows useful information, too. hotkeys for major functions are available.

overview of the programme interface
the interface of ycasd consists of a single window. it is divided in areas corresponding to different actions which are briefly described below. for each action we present a description, corresponding control options and their usage on a working example.

define axes
description
all settings regarding axes definition are located in the “define axes” area .

list of controls
• axis intercepts p1-p <dig>  are defined by four pixels on the screen. pixel pair p <dig>  p <dig> and p <dig>  p <dig> belong to the y-axis and x-axis, respectively. points should be chosen in such a way that they span a large distance on each axis which improves accuracy of derived coordinates.

• coordinates y <dig>  y <dig>  x <dig>  x <dig> of axes  must be defined in the next step and correspond to the intercepts p <dig> to p <dig> selected in the first step. the order y <dig>  y <dig>  x <dig>  x <dig> was chosen to minimise mouse distances when clicking on axes beginning on the upper left and moving to the lower right.

• reset p* button  clears the four pixels defining the axis intercepts. subsequently captured pixels redefine the axis intercepts.

• log y-axis selector  supports logarithmic scaling of the y-axis.

• x, y error  indicates the clicking error in units of the corresponding axis.

working example
step  <dig>  display figure  <dig> on the screen or open “example.pdf”  with your preferred pdf reader, e.g. gsview <cit> .

step  <dig>  define y <dig>  y <dig>  x <dig> and x <dig> by typing in the values  <dig>   <dig>   <dig> and  <dig>  respectively.

capture data
description
pixels are captured from the  screen independently of viewer or file format. if the four pixels of the axis intercepts are unset, i.e. at programme start or after “reset p*”, they will be captured first. the coordinates of subsequently captured pixels will be scaled regarding axes definition and displayed in the output box. the quick guide shown after starting the software automatically disappears when results from capturing are available.

list of controls
• start capturing button  activates data capturing. while capturing, the “start capturing” button is re-labelled as “stop capturing” allowing to stop the data retrieval.

• new data set button  clears the output.

working example
step  <dig>  push “start capturing” and capture the four pixels p <dig> to p <dig> defining the axis intercepts by simply left clicking p <dig> to p <dig> as depicted in figure  <dig>  i.e. intercepts at  <dig> and  <dig> on the y-axis and intercepts at  <dig> and  <dig> on the x-axis.

step  <dig>  while clicking on every data point of figure  <dig>  the coordinates are calculated with respect to the axes definition and displayed in the output box. the results should be similar to the values presented in figure  <dig> 

define output
description
settings in the “define output” area  control how results are displayed. each time output style or axes definition is changed, output coordinate pairs will be re-calculated accordingly. if the axes definition is incomplete, raw pixel data will be presented in the output.

list of controls
• output matrix selector  formats the output as n-by-two matrix either for the numerical software matlab <cit>  or the statistical software package r <cit> .

• output accuracy  defines the number of digits after the decimal point of the output.

• output box  contains the output. resulting coordinate pairs can be edited as follows: placing the cursor after an output coordinate allows insertion of pairs. if the cursor is placed within a coordinate pair, the whole pair will be selected. it can be overwritten by a new pair or deleted by pressing the “delete” or “backspace” key. if the selection of a pair is ambiguous or incomplete, deletion as well as capturing of new data points is blocked to prevent undesired results.

working example
step  <dig>  try to modify the output style, e.g. by changing it to an r matrix and increasing the output accuracy to  <dig> 

step  <dig>  overwrite the first output coordinate pair by placing the cursor within the first pair and re-capture data point .

step  <dig>  push “stop capturing” to inactivate capturing of data. the label of the button is replaced by “start capturing” again allowing to continue data retrieval.

tool survey
tool selection
since many software tools are available for data point extraction from figures, we conducted a comprehensive tool survey to compare these tools with ycasd. an introduction and a list of tools for analysing scanned graphs is given in wikipedia  <cit> . we considered only software for which source code is available and which fulfil the requirements of free software  <cit> . six tools were tested and compared with ycasd: dexter <cit> , digitize <cit> , engauge digitizer <cit> , g3data <cit> , plot digitizer <cit>  and webplotdigitizer <cit> . all programmes are protected by the gnu general public license  version  <dig>  or version  <dig>  or by the lesser gnu general public license  version  <dig> . for details of the gpl, see  <cit> . these tools differ in handling and functionality. therefore we consider different categories for comparison purposes as described below .

comparison of tools regarding different categories. not supported functions are denoted as “n.a.” .

platform and version
platform independence is an advantage when providing software. dexter and plot digitizer are implemented in java which is available for all common operating systems such as linux, mac os x or windows. similarly r, and with it, the r package digitize is available for different operating systems. webplotdigitizer is based on html <dig> which is supported by all popular browsers. hence, these tools can be considered as independent of the operating system.

in contrast, engauge digitizer, g3data and ycasd must be compiled for different operating systems. in principle, when the source code is provided, this is possible if an appropriate compiler is available, e.g. the gnu compiler collection  <cit>  for linux, mac os x and windows. but compiling fails if certain system dependent libraries are required, such as mouse tracking used by ycasd. for windows programmes, this problem can be handled by wine <cit> . on the other hand, it is challenging to build a programme from the most recent version of source code especially if non-default libraries are referenced or a certain library version is required as we experienced for engauge digitizer and g3data. therefore, we decided to use the most recently available binaries for both tools. the versions of all tested programmes are shown in table  <dig> 

documentation and handling
in preparation for data capturing from figures we studied the documentations of the tools which are either attached to the programme packages or accessible online. digitize provides only a description of function parameters via the r help system. for g3data, we found only a description of command line parameters in the linux man pages. we evaluate these documentations as “sparse”. dexter, plot digitizer and ycasd attached at least one document explaining how to calibrate axes, extract data points and access primary functions . additionally, engauge digitizer and webplotdigitizer provide multiple sources for help as faqs, tutorials or videos .

handling of tools refers to accessibility of major functions. for ycasd all functions are accessible via a single window which speeds up the data retrieval. in this sense, only dexter and g3data are similarly effective. the other tools are more complex containing sub-menus or sub–windows.

figure import and types of supported diagrams
in contrast to ycasd, all other tools directly import the graphic file to be analysed. as different graphic file formats were supported, we converted figure  <dig> to a jpg , which could be processed by all programmes and serves for testing. additionally, engauge digitizer supports importing images from clipboard which facilitates analysis of screenshots. webplotdigitizer supports importing images from clipboard only when google chrome is used. a major advantage of ycasd is that it does not depend on a certain file format.

in addition to analysing simple cartesian coordinates, engauge digitizer, plot digitizer, webplotdigitizer and ycasd are able to export raw pixel data which is useful for own calculations of coordinates. polar plots and  maps can be analysed by engauge digitizer and webplotdigitizer. the latter even supports data extraction from ternary plots.

axes calibration
almost all tools necessitate specification of four points for axes calibration, i.e. two points per axis. in this case, only the corresponding intercepts are required. engauge digitizer is based on another concept. here, three points with full coordinates must be specified. using plot digitizer, one can choose whether to share one axis point or not. for digitize, g3data, webplotdigitizer and ycasd, this can be imitated by selecting the second point used for axes calibration twice.

sometimes one or both axes of cartesian plots are logarithmically scaled. since digitize retrieves coordinates from a plot by a simple r function, it does not consider any logarithmic transformations. ycasd supports only logarithmic scaling of the y-axis, because the x-axis refers to time in our main field of application. the other tools facilitate logarithmic scaling of both axes.

retrieval of data points
retrieval of data points by clicking each point is the most cumbersome part of the work. aiming at the centre of a data point is easier when a magnifier is provided as implemented by dexter, g3data and webplotdigitizer. if no magnifier is available, the figure can be up-scaled either by using an option  or by manually adjusting the figure window .

another important issue are corrections necessary during the data retrieval process. for data points, engauge digitizer and plot digitizer present marks which can be shifted, deleted or inserted. however, plot digitizer only allows corrections as long as results are displayed as xml outputs. dexter or webplotdigitizer feature deletion of single data points. only ycasd supports deletion, insertion and overwriting of coordinate pairs by re-capturing selected data points. for correcting an arbitrary data point under g3data or digitize it is often more convenient to re-capture all points because g3data supports only removal of the last captured point. correcting outputs of digitize implies that the data points must be manipulated within r.

correcting axes without re-capturing all data points is also desirable. dexter and engauge digitizer allow shifting axis marks and updating the coordinates retrieved. when using digitize, g3data, webplotdigitizer or ycasd, axis points can be re-captured and the coordinates are automatically updated thereon. apparently, plot digitizer removes all results when re-calibrating axes.

figures of paper presentations are of particular concern since they must be scanned or photocopied prior to data capturing which might result in distorted or skewed diagrams. hence, we are interested how the tools perform if the figure would be rotated , and additionally being skewed , leading to non-orthogonal axes. digitize does not correct for any distortion, plot digitizer accounts for rotation only. all other tools can deal with non-orthogonal axes.

output format
captured data must be exported to a format required for further analyses. all tools display delimiter based outputs. digitize stores the output into an r data frame. then, export to other kinds of data files is possible using appropriate r-functions. similarly, the r matrix output of ycasd can be converted to a certain file format utilising r. ycasd can also export a matlab matrix , which we prefer for our modelling. beside delimiter based output, plot digitizer provides an xml file comprising extracted data points and calibration details. results from webplotdigitizer can be forwarded to plotly, an online analysis and visualisation tool  <cit> .

with all tools, we were successful in capturing the data points from the undistorted jpg . to get a feeling for the default output, we stored the extracted data points in an excel sheet . during import of the results into excel, the column delimiter was removed and the decimal delimiter was transformed to a dot.

ycasd in action
ycasd was extensively used in our own scientific work regarding models of human haematopoiesis under chemotherapy and growth-factor applications. for our modelling, detailed time series data of blood parameters such as blood cell counts or cytokine concentrations under different clinical scenarios are required to estimate unknown model parameters. this is done by optimising the agreement of model predictions and data or to validate model predictions. ycasd allowed us to establish a sufficiently rich data base for our modelling purposes. about n =  <dig> publications comprising about n =  <dig> graphical representations were processed with ycasd resulting in more than  <dig>  collected data points. an overview of retrieved data is presented in additional file  <dig> 

discussion
constructing dynamical mathematical models of biological or medical processes requires time series of clinical data in order to calibrate the models, estimate unknown parameters or validate model predictions. since access to raw data is hardly possible in most of the cases, these data must be retrieved from the literature. motivated by our own modelling work on human haematopoiesis for which we exploited data from numerous clinical settings, we developed ycasd, a tool for retrieving data points from figures of electronically available or scanned publications for which no raw data are available. in comparison to visual estimation or utilisation of a ruler, this kind of electronic data retrieval is more convenient, accurate and faster. in this paper, we provided an overview of the programme functions, and demonstrated how to use the tool on an example.

a couple of other tools are available for capturing data points from figures  <cit> . we compared the functionality of ycasd with other free software with emphasis on practical issues. observed differences probably mirror different key applications which the developers had in mind when developing the tools. however, these intentions were scarcely communicated. in general, tools which were developed for certain needs do not provide the same functional range as others, see also the discussion in  <cit> .

ycasd was developed to fulfil our needs regarding capturing data from a variety of graphical representations; most importantly time series data with many data points required for modelling purposes. therefore, the following key issues are important for our application: applicability to many kinds of graphical representations, easy accessibility of major functions, convenient calibration of diagrams, quick data collection with options for corrections and error estimation and export to required data formats. ycasd was optimised regarding these issues.

the most apparent aspect is that our tool, in contrast to all others, does not require a certain input file format to open and process figures. when using ycasd, figures only have to be displayed with one’s preferred viewer and pixels will be captured from the screen independently of the viewer or the file format of the figure. an alternative way of handling arbitrary graphic formats is to import screenshots via clipboard which is featured by some tools .

all functions of ycasd can be reached via a single window. this simplifies the usage of the software and speeds up the process of data collection as much as possible. on the other hand, this restricts its functionality.

we spend some efforts to deal with rotated and skewed figures which we often encountered in paper presentations. while rotation is a typical result of copying papers, skewness of presentations is of minor concern. most of the tools considered can deal with both, rotation and skewness.

since user mistakes occur frequently during data retrieval, we also optimised the way how to correct these. this applies for both, corrections of axes and data points. ycasd supports deletion, insertion and overwriting of data points and axes calibrations at any time during analysis without losing collected data. a comparable convenience regarding this issue is offered by engauge digitizer.

if one aims at performing statistical analysis of data, capturing error might be of concern. most tools display some kind of capturing errors, but it is unclear how they were calculated and therefore we neglected this issue for our comparisons.

we have to acknowledge that most tools allow more or less convenient workarounds of the above mentioned functions. for example, if not available, raw pixel coordinates can be retrieved by an appropriate definition of axes. correction of points can often be performed by deleting the data point, appending the corrected version and re-ordering. for some tools, only specific delimiters can be chosen for output. but it would be easy to generate an arbitrary delimiter by copying the output to a text editor and replacing it. in consequence, none of the tools lack essential functionality required for data retrieval. conversely, none of the tools can deal with every situation which might occur in figure presentations. especially problematic are irregularities of axes for example interruptions of scales or non-equidistant scales. this might require manual corrections of retrieved data. since we are both, developers and users of the software, we believe that our solution is a good compromise between functionality and requirements for medium-scale data retrieval from the literature. we used ycasd successfully for extracting a large number of data points from figures of several publications  to establish a data base for our modelling purposes  <cit> . we therefore believe that our tool could also be of significant value for other groups with similar research interests. we also believe that ycasd can be useful for other applications requiring data retrieval from literature such as systematic reviews and meta-analyses or to reconstruct survival time data  <cit> .

automated data retrieval would be a qualitative improvement. indeed, there are some efforts regarding this issue. dexter, engauge digitizer and webplotdigitizer support automatic detection of axes, of curves or of points. plot digitizer invokes the external tool autotrace <cit>  for automatic curve detection. however, this approach is technically challenging as also acknowledged by the developers. we experienced mixed quality of automated data retrievals. further improvements are desirable, especially with respect to reliability in different situations .

CONCLUSIONS
we conclude that we developed an easy to use software tool which is suitable for quick and convenient data retrievals from graphical representations such as papers. the software could be useful for many kinds of analyses for which published data are required but are not available in raw formats.

availability and requirements
project name: ycasd

project home page: https://sourceforge.net/projects/ycasd/

operating systems: microsoft windows

programming language: c, assembly

other requirements: none

license: gnu general public license version  <dig>  <cit> 

any restrictions to use by non-academics: gnu general public license version 3

development
our tool and its source code are freely available. it can be modified to suit certain needs. the binaries of the latest version  <dig>  of ycasd were compiled with mingw   <cit> . the binaries are located in additional file  <dig> and the source files reside in additional file  <dig> 

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ag and ms wrote the paper. ss contributed to writing and discussion. ag, ms and ss developed the programme. ag implemented the programme. all authors read and approved the final manuscript.

supplementary material
additional file 1
scanned example. the file contains an example of a distorted figure due to scanning. to achieve this, we scanned our paper draft several times after printing and selected one of the poor copies.

click here for file

 additional file 2

ycasd
 package. the zip archive contains the binary, dynamic link library, pdf with sample figure, quick guide, readme file and license information.

click here for file

 additional file 3
sample jpg. jpg version of the sample figure used for testing the tools.

click here for file

 additional file 4
sample jpg rotated. jpg version of the sample figure which is rotated by 18° counter-clockwise.

click here for file

 additional file 5
sample jpg rotated and skewed. jpg version of the sample figure which is rotated by 18° counter-clockwise and horizontally skewed.

click here for file

 additional file 6
table of extracted data points. table of data points of our sample jpg extracted with the specified capturing tools.

click here for file

 additional file 7

ycasd
 in action. the document provides an overview of the number of figures and data points which we collected by our tool.

click here for file

 additional file 8

ycasd
 source code. the zip archive provides all sources which are needed to build the binaries of ycasd.

click here for file

 acknowledgements
the work of ag was supported in part by the german federal research ministry , grant progress . ms was funded by life – leipzig research center for civilization diseases, university of leipzig. life is funded by means of the european union, by the european regional development fund  and by means of the free state of saxony within the framework of the excellence initiative. ss was funded by a grant of the federal ministry of education and research of the federal republic of germany . we acknowledge support from the german research foundation  and leipzig university within the program of open access publishing.
