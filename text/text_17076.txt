BACKGROUND
the biomoby project  <cit>  began in  <dig> as an initiative of the model organism database community and other interested parties to define standards and technologies that would facilitate greater interoperability between web-based bioinformatics and biological resources. it now boasts greater than  <dig> independent host providers spanning five continents, and offering more than  <dig> data retrieval and analysis services.

the interoperable behaviors observed between biomoby services are derived by the service-providers adherence to an ontology-based messaging structure that allows both biomoby clients and biomoby services to look-up data-types in the ontology, and thereby interpret and parse them correctly. in addition to this, an ontology-aware registry, moby central, is capable of brokering the interactions between a client holding a particular data-type and/or with specific analytical requirements and the service providers who can operate over that type of data, or ontologically compatible types, through queries over the relevant ontologies. in this way, moby central can suggest a subset of services from its database which are guaranteed to be capable of consuming the client's in-hand data.

biomoby-compliant web services are becoming increasingly easy to design and deploy thanks to a myriad of tools available to service providers through the open-source biomoby project, and collaborating projects such as mygrid  <cit>  and the generation challenge programme of the consultative group for international agricultural research  <cit> ; however, until recently, the full capabilities of the biomoby system have not been available through any publicly available client program, and thus many of the most useful behaviors required custom programming to access.

numerous clients have been created to utilize biomoby . most of these clients utilize the biomoby application programming interface  in a web interface, allowing users to start with a piece of data, a genbank gene identifier for example, and then discover services that consume that piece of information, followed iteratively by discovery of services that consume the output from the previous service, and so on. some clients allow you to create and save workflows of services that can be re-used at a later date. so far, however, none of these clients have been capable of enabling interoperability between biomoby services and non-biomoby services, or of assembling and/or decomposing biomoby data types at any point in the workflow to enhance service discovery.

the taverna  <cit>  workflow and enactment system from the mygrid project can "converse with the interfaces of web services and direct the flow of data between resources"  <cit> . while taverna was capable of accessing most typical web services, allowing end-users to drag-n-drop resources into a pipeline, it had not been able to exploit the biomoby ontologies to enhance the process of service discovery. importantly, taverna was not able to verify if services added to the workflow were truly capable of consuming the output data from the previous service, nor could it  suggest which services might be capable of doing so. as the number of resources available through the taverna interface continues to increase  this lack of guidance through the vast service-space has been a high barrier to entry for the naïve end-user.

with this in mind, we developed extensions to taverna that allow biomoby to guide the construction of functional workflows. moreover, the logic for decomposition of biomoby data-types into their component parts, and/or the aggregation of data from multiple workflow branches  into complex biomoby data-types, and the subsequent utilization of these in the workflow is also enabled. finally, a generic biomoby data parser has been included that allows raw data to be extracted from biomoby-xml and passed into traditional web service interfaces. for example, the workflow diagrammed in figure  <dig> was constructed using the biomoby plugin and shows the initiation of the workflow with a complex data-type, the pipelining of that data through a series of biomoby services, followed by the parsing of that data into a non-biomoby service, with the outputs gathered into various output data bins. here we describe these functionalities in detail, and argue that, with these functionalities present in the most widely used bioinformatics web service client, biomoby services are now significantly more useful than traditional web services.

implementation
the  <dig>  and greater releases of taverna include the biomoby plug-in and these are implemented as a java  <dig>  standalone application. the biomoby plug-in implements the iprocessor interface of the scufl package to describe biomoby services in taverna. in order to run biomoby services in taverna, all services must also implement the processortaskworker interface described in the scuflworkers package. finally, in order for the workbench to discover biomoby services, the biomoby plug-in extended the scavenger class from the scuflui package.

RESULTS
traditional web services versus biomoby services
the key difference between traditional web services and biomoby services is in the definitions of the input and output data structures. traditional web services utilize xml schema to describe the basic syntax of their interface  <cit> , but not its "intent". as such, an interface might define, for example, an xsd:string as one of its input parameters; however there is no way for a client program to determine if that string is intended to be a dna sequence or a pubmed abstract or any of the thousands of other bioinformatics data-types that are commonly represented as strings. to overcome this problem, biomoby defines an ontology of bioinformatics data-types  <cit> , and a xml representation of this ontology  <cit>  such that the position of a node in the ontology precisely defines the xml syntax by which that node will be represented, and the name and definition of the node define precisely the purpose of that syntax – i.e. the nature of the data it will contain. thus it is possible for a client program to precisely query the moby central registry for services that operate with the in-hand data-type, and moreover, that in-hand data can be passed verbatim to the service provider, thus not requiring the client to include any complex data-rearrangement code.

the core taverna interface
the taverna interface includes three main windows:

• the available services window provides a menu of possible widgets to add to a workflow, including both local java bean widgets, as well as remote web services. these are hierarchically organized based on the web service registry or wsdl file that contains their definitions.

• the advanced model explorer window provides details of all services and service-to-service connections that exist in the workflow under construction.

• the workflow diagram provides a graphical display of the current workflow.

new widgets are added to the workflow by right-clicking the widget in the available services menu and selecting the "add to model" menu option .

the inputs and outputs for a widget are called "ports", and the available ports for any given widget can be visualized in the workflow diagram, or can be accessed through expanding the widget tree in the advanced model explorer . connecting the output of one widget to the input of another is achieved by right-clicking on the output port in the advanced model explorer, and selecting the desired input port from the resulting pop-up menu .

taverna biomoby extensions
a complete, annotated and illustrated example of building a biologically meaningful workflow is available online  <cit> . here, in the interest of space and clarity, we will focus only on the individual functionalities that have been added to taverna by this plug-in, rather than how they might fit together in the context of any given workflow construction exercise. the biomoby-specific extensions to taverna include the following:

addition of moby object constructors/deconstructors
in earlier releases of taverna, it was possible to construct a base biomoby data object consisting of a database namespace and an id number. thus all biomoby workflows in taverna began with a database identifier. the lack of support for other biomoby data-types prevented intermediate service outputs from being combined and integrated into more complex objects, and similarly, complex data-types could not be deconstructed to pass sub-components into further downstream services. often, however, it is desirable to begin a workflow with a more complex data-type, and to construct and deconstruct data-types at arbitrary points along the workflow. this provides access to services, such as the various blast services, that consume sequence data with or without an associated identifier.

these limitations have been overcome in the biomoby plug-in by including the biomoby object ontology as a widget-set in the list of available services. these objects can be added at arbitrary points along the workflow from the usual right-click context menu . each time taverna is started the moby central api is used to retrieve a file from moby central describing the full object ontology in resource description framework  format and this is used to assemble the object widget set, ensuring that it is always up-to-date with the constantly changing biomoby object ontology. each widget presents all input ports necessary to fill-in the raw data content of that object, as well as an output port from which the resulting biomoby xml object construct will be extracted.

similarly, a set of de-constructor widgets is also now available. rather than adding these from the available services menu, these widgets are accessible from the moby service details context menu, which is accessed through a right-click on the service widget in the advanced model explorer . the service details menu displays the input and output of any given service, and by right-clicking on the output the user is provided the option of adding a parser for that output data-type . upon addition to the workflow, the parser is auto-connected to the appropriate port on the service. these widgets are crucial for compatibility between biomoby and non-biomoby services, since they provide access to the raw content of biomoby xml objects. thus it is possible to extract data-types such as strings, integers, and floats, from biomoby objects and pass them into non-biomoby services that consume raw  data

secondary parameters
in the biomoby api, a secondary parameter is a piece of data that is used to modify the behaviour of service execution, but is not useful for service discovery and is not modeled as a biomoby ontologically defined object – for example, the e-value cut-off of a blast service.

when last queried, about 30% of registered biomoby services consume secondary parameters. the potential of these services is now fully realized in taverna by the inclusion of another context-menu option. right-clicking on a service that requires secondary parameter configuration brings up a context-menu that includes the option to "configure moby service" . selecting this option opens a window in which each configuration parameter is presented with its registered default value selected. any user modifications of this value are validated against the minimum, maximum, data-type, and/or enumerated values as per the service registration details . this feature was implemented using the java secondary input panel code module from the moby dashboard application  <cit> .

semantically-aided workflow design
most, non-moby web services consume strings or numbers as input and produce strings or numbers as output. while these strings generally represent well-recognized bioinformatics data-types, the "intent" of any particular service parameter is opaque to taverna, and traditional wsdl documents cannot type data more precisely than the limited number of xml schema primitives. biomoby services, however, consume ontologically-typed data and, as such, services can be discovered that specifically consume these typed data entities. thus, by making it possible in taverna to query the biomoby registry based on particular data-types, workflows could be constructed more intelligently. moreover this would relieve the burden on the end-user of browsing through the > <dig> possible biomoby services in the available processors list to identify a service of interest, and ensure that those services presented are guaranteed to be syntactically and semantically compatible in the workflow.

service discovery by data-type is supported in the biomoby plug-in through a right-click context menu in the moby service details window. two search options are available – search for services that consume the exact data-type , or search for services that consume the data-type or one of its ontological parents  . discovered services are presented in an expandable menu, organized by service provider , and can be added to the workflow simply by selecting the desired service. mouse-over pop-up windows provide textual descriptions of what operations each service does. unlike the operation of adding a service from the available processors list, the biomoby plugin ensures that the connection between the newly added service and the service that feeds into it is created automatically. thus the creation of biomoby workflows is not only guided, but is simplified and more rapid than that of non-biomoby workflows.

enhanced support for simple versus collection inputs and outputs
in biomoby there are two ways to organize data objects when passing them to a service. objects that should be processed individually are passed as "simples", while objects that should be processed as a unit are passed as "collections" . a collection contains one or more simples of the same data-type.

by default, the biomoby plug-in to taverna attempts to make sensible decisions on how to organize data when passing it between services that expect different packages. if an upstream service has just output a collection , and the downstream service it feeds into expects simples  the decomposition of the collection into a series of simples, and the iteration over these simple inputs to the downstream service is automated. conversely, if an upstream service is outputting simples  and the downstream service expects a collection , the entirety of the upstream output is "wrapped" in a collection and passed to the downstream service as a unit.

discussion
taverna is among the most popular web service workflow design tools, and is the de facto client application for much of the biomoby user community. until recently, however, taverna's support for the most powerful features of the biomoby interoperability system has been limited. with the biomoby taverna plug-in, end-users now have the ability to:

• initiate workflows using any biomoby object of their choice

• compose and decompose biomoby objects to comply with a wider range of service interfaces

• parse data out of biomoby's xml message structure such that it can be used as input to non-biomoby services

• assemble raw output data from non-biomoby services into biomoby's xml structure

• access the moby central web service registry query system to achieve guidance during workflow construction, thus eliminating the need for the user to have prior knowledge of a particular service interface

• configure service parameters with guidance and sanity-checking of user-input

• construct workflows that automatically make correct decisions on how to package data as it passes between the various services.

certain features that are still not available include the ability to limit semantic searching by the type of service operation, by output data-type, or by keyword; however the mygrid project is currently designing a service query interface, feta  <cit> , which includes this functionality and will be compatible with both traditional and biomoby web services. as such, these additional features will be available in the near future.

CONCLUSIONS
the majority of functionality exposed by the moby central api is now available via the taverna graphical interface. when designing a workflow, the user-experience is simplified through a set of guided context-menu choices which ensure that only appropriate services are presented for selection, that selected services are appropriately connected into the workflow, and enable the user to easily move into and out of the biomoby interoperability framework.

we believe that taverna is now the most fully-featured client for biomoby web services, and that these enhancements make the taverna environment more accessible to bench scientists and non-expert bioinformaticians. we are now focusing our development efforts on enhancing the usability and visualization of the output data-sets within the taverna environment.

availability and requirements
project name: taverna biomoby plugin

project homepage:  for regular taverna releases including biomoby plug-in;  for newest plug-in releases.

operating systems: cross-platform

programming language: java  <dig>  or higher

other requirements: taverna core code

license: gnu lesser general public license 

any restrictions to use by non-academics: none

authors' contributions
ms wrote the original biomoby taverna plug-in, with support for base objects and basic parsing to enable interoperability between biomoby and non-biomoby web services. mdw created the biomoby api and designed the extended biomoby plug-in functionality described here. ek coded this extended plug-in. this manuscript was written by mdw. all authors read and approved the final manuscript.

