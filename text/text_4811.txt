BACKGROUND
the past decade has witnessed a revolution in high-throughput sequencing techniques, resulting in huge amounts of sequenced proteins. however, experimental determination of protein functions is not only expensive but also time-consuming. as a consequence, there is an increasing concern about using computational methods to predict protein functions. though many efforts have been made in this regard, the functions of most proteins in fully sequenced genomes still remain unknown. this is true even for the six well-studied model species. taking yeast as an example, approximately one-fourth of the proteins have no annotated functions  <cit> . therefore, functional annotation of proteins is one of the fundamental issues in the post-genomic era.

the most common approach to computational prediction of protein functions is to use sequence or structure similarity to transfer functional information among proteins. according to a recent survey  <cit> , homology-based transfer approaches can be further divided into two classes: sequence-based approaches and structure-based approaches. blast  <cit>  is one of the most widely used sequence-based approaches, which assigns un-annotated proteins with the functions of their homologous proteins. although sequence similarity is undoubtedly correlated to functional similarity, in many cases there is no need to treat a protein as a whole, this is because typically only the 100- <dig> amino acids in a functional protein domain perform their functions  <cit> . therefore, a protein can be represented as several sequence  based signatures  that are associated with some particular functions. prosite  <cit>  for example is a database of sequence motifs that is composed of manually selected sequence motifs. structure-based approaches are based on the observation that protein structure is far more conserved than sequence  <cit> , and thus structure is a useful indicator of function. fatcat  <cit>  and past  <cit>  are the most popular databases composed of 3d protein structures. the reason for using structure motifs is analogous to that of sequence motifs, one example is procat  <cit> , a library of 3d enzyme structure motifs. however, sequence similarity does not necessary imply functional equivalence and thus homology-based transfer approaches can result in erroneous predictions, and the original erroneous annotations may be propagated and amplified in databases  <cit> . furthermore, as the databases expand, the utility of the homology-based transfer approaches begins to break down. for example, it has been estimated that < 35% of all proteins could be annotated automatically when accepting error rates of ≤ 5%, while even allowing for error rates of > 40%, there is no annotation for > 30% of all proteins  <cit> .

recent advances in experimental biology have enabled the production of vast amounts of protein-protein interaction  data across human and most model species. these data are commonly represented as networks, where a node corresponds to a protein and an edge corresponds to an interaction between a pair of proteins. thus, using ppi data to assign protein function has been extensively studied. approaches based on ppi data assume that proteins with similar functions are topologically close in the network. in a review of the existing computational approaches based on ppi data for protein function prediction, sharan et al.  <cit>  distinguished two types of approaches: direct annotation schemes and module-assisted schemes.

direct annotation schemes predict the functions of a protein from the known functions of its neighbors, representatives are neighborhood counting approaches  <cit> , graph theoretic approaches  <cit>  and markov random field  approaches  <cit> . majority and indirect neighbors are two neighborhood counting approaches. majority  <cit>  is the simplest direct approach, it utilizes the biological hypothesis that interacting proteins probably have similar functions, it ranks each candidate function based on its occurrences in the immediate neighbors. indirect neighbors  <cit>  assumes that proteins interact with the same proteins may also have some similar functions. it exploits both indirect and immediate neighbors to rank each candidate function. functional flow  <cit>  is a graph theoretic approach, it simulates a discrete-time flow of functions from all proteins. at every time step, the function weight transferred along an edge is proportional to the edge's weight and the direction of transfer is determined by the functional gradient. deng et al.  <cit>  devised an mrf model in which the function of a protein is independent of all other proteins given the functions of its immediate neighbors. the parameters of the model are first estimated using quasi-likelihood method, and then gibbs sampling is used for inferring the functions of unannotated proteins.

instead of predicting functions for individual proteins, module-assisted schemes first identify modules of related proteins and then annotate each module based on the known functions of its members, examples include hierarchical clustering-based approaches  <cit>  and graph clustering approaches  <cit> . a key problem of this kind of approaches is how to define the similarity between two proteins. arnau et al.  <cit>  used the shortest path between proteins as a distance measure and applied hierarchical clustering to detecting functional modules. up to now, numerous graph-clustering algorithms have been applied to detecting functional modules, such as spectral clustering  <cit> , edge-betweenness clustering  <cit> , clique percolation  <cit>  and overlapping clustering  <cit> .

additionally, chua et al.  <cit>  presented a simple framework for integrating a large amount of diverse information for protein function prediction. this framework integrated diverse information using simple weighting strategies and a local prediction method. hu et al.  <cit>  hybridized the ppi information and the biochemical/physicochemical features of protein sequences to predict protein function. the prediction is carried out as follows: if the query protein has ppi information, the network-based method is applied; otherwise, the hybrid-property based method is employed.

however, most existing network-based approaches do not work well if there is not enough ppi information. in view of this, we proposed a new method that combines ppi information and protein sequence information to improve the prediction performance based on collective classification. our method divided function prediction into two phases: first, the original ppi network is enriched by adding a number of edges that are computed based on protein sequence similarity. second, based on the new network, a collective classification algorithm is employed to predict protein function. the main idea behind this method stems from the observation that existing network-based approaches ignore protein sequence information. therefore, we increase the amount of useful information in the networks by adding a number of computed  edges, which consequently improves the prediction performance.

we conducted experiments on s.cerevisiae and m.musculus functional annotation datasets. compared to four existing protein function prediction methods, our method performs better in many situations, which shows that adding implicit edges can indeed improve the prediction performance. furthermore, the experimental results also indicate that our method is significantly better than the compared methods in sparsely-labeled networks, and it is robust to the change of the proportion of annotated proteins.

methods
notation and problem definition
protein function prediction is a multi-label classification problem where we have a set of functions ℱ=. given a protein set, Ƥ= where the first l proteins are labeled as y <dig>  ..., yl, each yi is a vector with yij =  <dig> in case that the protein pi is associated with the j-th function fj, otherwise yij =  <dig>  our goal is to predict the labels y1+ <dig>  ..., yn for the remaining unlabeled proteins pl+ <dig>  ..., pn. in this study, we denote the ppi network as a finite undirected graph g=, with a vertex set ν=ℒ∪u where  ℒ corresponds to the set of annotated proteins and  u corresponds to the set of un-annotated proteins. each edge ei,j∈ ε denotes an observed interaction between protein vi and vj and a weight wi,j ∈ w indicates the interaction confidence between vi and vj. here, we employ collective classification to tackle this problem. in addition, we use both explicit edges that are extracted from ppi datasets and implicit edges that are computed from protein sequence information. in what follows, we present the method in detail.

generating blast-inferred edges
as we pointed out above, most existing network-based approaches do not work well when there is not enough interaction information in the ppi networks. considering this, here we propose a novel method that combines ppi information and protein sequence information to improve the prediction performance based on collective classification. the first step of our method is to enrich the original ppi network by adding a number of computed edges based on protein sequence similarity. note that the similarity between two proteins is not a reliable proof that the two proteins interact, nevertheless, enriching ppi networks by adding a number of computed edges can increase the amount of useful information to the original ppi network and hence improve the prediction performance. in this paper, the basic local alignment search tool  is employed to compute the similarity score between each pair of proteins.

for the protein vx, we define its sequence similarity scores with other proteins like this:

  s= 

where sx,i denotes the similarity score between protein vx and protein vi. we set sx,i =  <dig> if x = i, which means that we do not consider self-similarity. for each protein vx in the original network, we create k edges to the k vertices that have the highest similarity scores with vx, and use the similarity scores as the weights of these created edges in the enriched network. thus, we have

  stopk=. 

it is worth noting that there are two types of edges in the new network: blast-inferred edges  and explicit edges that are already there. here, two questions need to be answered. one is how many edges be added for each protein, that is, how to set the value of parameter k, and another is how to combine the weights of these two types of edges with different semantics. we will answer the first question in the experimental evaluation section and the second question in the next subsection.

gibbs sampling
the second step of our method is to employ the gibbs sampling   <cit>  based collective classification method o predict protein function based on the new network. gs is the most commonly used collective classification algorithm that aims at finding the best label estimate for each un-annotated vertex vx∈u by sampling each vertex label iteratively. gs based collective classification is divided into two phases: boot-strapping and iterative classification, its high-level pseudo-code is given in algorithm  <dig>  detailed description on the algorithm is presented in the following subsections.

algorithm  <dig> gibbs sampling based collective classification for protein function prediction with implicit and explicit edges in ppi networks.

1:     // bootstrapping

2: for each query protein vx do

3:         compute the initial ax→ using ℒ∩nxs and ℒ∩nxw

4: end for

5:     // burn-in period

6: for i= <dig> to b do

7:      for each query protein vx do

8:             update ax→ using current assignments to nxs, nxw

9:      end for

10: end for

11: // sampling period

12: for i= <dig> to s do

13:      for each query protein vx do

14:             update ax→ using current assignments to nxs, nxw

15:             create bxi→ to record the m-rank result

16:      end for

17: end for

18: for each query protein vx do

19:      calculate the final result cx→ based on matrix mx

20: end for

bootstrapping
according to the observation that proteins with shorter distance to each other in the network are more likely to have similar functions, weighted voting is employed to predict an initial functional probability distribution for the query protein. note that there are two types of annotated neighbors to vote: implicit neighbors  and explicit neighbors. thus, we introduce a combination parameter λ ∈  to control the tradeoff between these two types of neighbors.

formally, for a query protein vx that has k implicit neighbors and nx explicit neighbors, we define the corresponding edge weights like this:

  nxs=,nxw=. 

above, nxs and nxw are the vectors of implicit edges and explicit edges, respectively. then, the probability of vx associated with the j-th function fj is computed like this:

  pxj=λ1zxs∑i=1kfi,jsx,i+1zxw∑i=1nxfi,jwx,i 

where zxs and zxw are the normalizers:

  zxs=∑j=1k∑i=1mfi,jsx,izxw=∑j=1nx∑i=1mfi,jwx,i. 

the larger the value of pxj, the more likely protein vx is associated with the j-th function fj. given a query protein vx, its initial functional probability distribution is denoted as an m-dimensional vector:

  ax→=. 

note that when predicting the functions of the query protein vx, we consider only its labeled neighbor proteins . that is the reason why we use ℒ∩nxs and ℒ∩nxw in algorithm  <dig> , because unlabeled neighbor proteins can not be exploited in the bootstrapping phase. codes corresponding to the bootstrapping phase in algorithm  <dig> are from line  <dig> to line  <dig> 

iterative classification
the iterative classification process is divided to the following two periods: the burn-in period and the sampling period. the burn-in period consists of a fixed number b of iterations where we update ax→ using weighted voting. this period is implemented in algorithm  <dig> from line  <dig> to line  <dig>  the sampling period consists of s iterations. in each iteration, we not only update ax→ but also maintain the count statistics as to how many times we have sampled the j-th function fj for protein vx. this period is implemented in algorithm  <dig> from line  <dig> to line  <dig> 

it is worth noting that most proteins in vivo often perform more than one function, thus, protein function prediction is a multi-label classification problem. for the query protein vx, its most likely function can be computed as follows:

  bx1=argmaxj∈pxj 

where bx <dig> represents the argument j that maximizes the value of pxj, which is regarded as the 1st-rank result. accordingly, the second most likely function bx <dig> is regarded as the 2nd-rank result, and the third most likely function bx <dig> is regarded as the 3rd-rank result, and so forth. in rare case when more than one element pxj in eq.  has the same score, their ranks will be assigned randomly. so we can create an m-dimensional vector bxi→ for the query protein vx to record its ranking result in the i-th iteration as follows:

  bxi→=. 

when the threshold number s of iterations is reached, we can get a matrix mx with s rows and m columns for the query protein vx:

  mx=t. 

in the first column of the matrix mx, the most frequently sampled function is denoted by cx <dig>  called the first rank predicted function. accordingly, in the second column of the matrix mx, the most frequently sampled function  is denoted by cx <dig>  called the second rank predicted function. in the third column of the matrix mx, the most frequently sampled function  is denoted by cx <dig>  called the third rank predicted function, and so forth. finally, we get an m-dimensional vector cx→ for the query protein vx:

  cx→=. 

RESULTS
interaction and annotation data
we evaluated the performance of our approach with two ppi datasets. the firs dataset  used in this study is based on gene ontology  annotation scheme  <cit> . go annotations are arranged in a hierarchical order, and consist of three basic go namespaces: molecular function, biological process and cellular component. there are  <dig> go terms that constitute  <dig> levels of annotations, and the higher level terms are more generic while the lower level terms are more specific. in this setting, some vague terms such as "go: <dig> molecular function unknown" and annotations with evidence code "iea"  were excluded. furthermore, to avoid the bias problem in the annotations, we applied the concept of informative functional class  <cit>  to selectively identify go terms for validation. an informative go is referred as the one that 1) is annotated by at least  <dig> proteins; and 2) has no child terms annotated by at least  <dig> proteins. this ensures that terms used for validation have a reasonable number of annotations and do not have overlapping description. predictions were performed separately for each namespace. as a result, in the s.cerevisiae annotation dataset, there are  <dig>   <dig> and  <dig> informative go terms and in the m.musculus annotation dataset, there are  <dig>   <dig> and  <dig> informative go terms for the molecular function, biological process and cellular component namespaces, respectively.

protein interactions of dataset a were downloaded from the biological general repository for interaction datasets   <cit> . biogrid is a public database that archives and disseminates genetic and protein interaction data from model organisms and humans, it currently holds  <dig> interactions  obtained from both high-throughput data sets and individual focused studies, which were derived from over  <dig> publications in the literature.

in this study, we constructed one protein interaction network for each go namespace using only physical interactions. therefore, there are totally six ppi networks  in dataset a. in these networks, a node corresponds to a protein and a un-weighted edge corresponds to an interaction between two proteins. each node was assigned with at least one go term, and proteins without interaction data or sequence information were deleted. the details for these networks are shown in table  <dig> 

the second dataset  used in this study is based on functional catalogue  annotation scheme  <cit>  taken from munich information center for protein sequences  . fun-cat is organized as a hierarchically structured annotation system and consists of  <dig> main functional categories. funcat annotations for s.cerevisiae were downloaded from comprehensive yeast genome database   <cit> . cygd is a frequently used public resource for yeast related information. there are totally  <dig> proteins in the dataset, of which  <dig> were annotated. these proteins belong to  <dig> functional categories. the number of proteins for each functional category is listed in table  <dig>  funcat annotations for m.musculus were downloaded from mouse functional genome database   <cit> . mfungd provides a resource for annotated mouse proteins and comprises  <dig> annotated proteins. these annotated proteins belong to  <dig> functional categories, which are also shown in table  <dig> 

protein interactions of dataset b were downloaded from string database  <cit> , which is an integrated protein interaction database containing known and predicted protein interactions. these interactions were mainly derived from four data sources: genomic context, high-throughput experiments, conserved co-expression and previous knowledge. the most recent version of string covers about  <dig>  million proteins from  <dig> organisms. for dataset b, we constructed two ppi networks , proteins without interaction data or sequence information were deleted. as a result, in the s.cerevisiae interaction network, there are totally  <dig> distinct interactions among  <dig> proteins, and in the m.musculus interaction network there are  <dig> proteins and  <dig> interactions. additionally, protein sequence information for dataset a and dataset b were also downloaded from the string database.

competing approaches
we compared our method with a sequence similarity based approach  that does not take the ppi network into account. the blast-mined approach was performed in two steps. first, blast was adopted to compute similarity score between each pair of proteins. second, we employed the knn classifier to predict the functions of un-annotated proteins. we also conducted comparison with a graph based method: functional flow, as well as two neighbor counting methods: majority and indirect neighbors. functional flow  <cit>  treats each annotated protein as the source of a functional flow. after simulating the spread over time of this functional flow through the network, each un-annotated protein is assigned a score for having the function based on the amount of flow it received during the simulation. majority  <cit>  makes use of the observation that interacting proteins are more likely to have similar functions, it determines the functions of a protein based on the known functions of proteins lying in its immediate neighborhood. the principal advantages of the majority are its simplicity and effectiveness. indirect neighbors  <cit>  exploits both direct and indirect function associations. it computes scores based on level  <dig> and level  <dig> interaction partners of a protein.

experimental setup
for traditional classification problems, the standard evaluation criterion is accuracy. however, in this paper we can not simply determine whether a prediction is correct or wrong because of the partially correct phenomenon in multi-label classification problems  <cit> . therefore, as in  <cit>  we adopted the widely-used performance measure, the ratio of tp/fp, which depicts the relative magnitude between the number of true positives and the number of false positives. in this setup, we define the i-th rank overall true positive  as the number of proteins whose i-th rank predicted function cxi is one of the true functions of the protein vx and the i-th rank overall false positive  as the number of proteins whose i-th rank predicted function cxi is not one of the true functions of the protein vx. to evaluate the prediction performance of our method, leave-one-out cross validation was used to compare the performance of our method with that of the competing approaches. the idea behind leave-one-out cross validation is simply to treat each annotated protein as un-annotated in turn, then run the algorithm and compare the predicted functions to the known functions of the protein. it is worth noting that the iterative classification step is omitted in leave-one-out validation, this is because the label vector of the query protein is never updated after bootstrapping. however, in real ppi networks, there are a significant number of un-annotated proteins, thus leave-one-out cross validation seems impracticable in reality. therefore, we also compared the performance of our method with that of the competing approaches in sparsely-labeled networks. in our implementation, the proportion of annotated proteins was varied from 10% to 90%, we ran  <dig> experiments for each given proportion of annotated proteins and reported the average performance. moreover, the burn-in period and the sampling period were set to contain  <dig> and  <dig> iterations respectively.

effect of parameters λ and k
we studied the effect of two parameters used in our study. the first one is the combination parameter λ that controls the tradeoff between implicit  edges and explicit edges. we varied λ from  <dig>  to  <dig>  and compared the prediction performance. table  <dig> and table  <dig> lists the performance of different λ in dataset a, and table  <dig> details the performance of different λ in dataset b. the experimental results show that the prediction performance is not definitely sensitive to the value of λ, as long as it is not chosen extremely small or extremely large. thus, in our following experiments, the value of λ was set to  <dig>  for both datasets. next, we examined the effect of the number of blast-inferred edges k. we varied k from  <dig> to  <dig> for blast and compared the prediction performance. table  <dig> and table  <dig> gives the performance of different k in dataset a, and table  <dig> shows the performance of different k in dataset b. we can see that when using k= <dig> for both dataset a and dataset b the proposed method performs best. this is because adding blast-inferred edges with low sequence similarity  may produce false predictions. hence, in our rest experiments, the value of k was set to  <dig> 

leave-one-out cross validation experiments
to evaluate the prediction performance of our method, leave-one-out cross validation was used to compare the performance of our method with that of the competing approaches. for s.cerevisiae in dataset a, there are three ppi networks . the average number of functions that each protein has in these networks is  <dig> ,  <dig>  and  <dig> , respectively. so we considered only the top  <dig>  predictions. figure  <dig> shows the performance comparison of our approach to the competing methods for the top- <dig> predictions. for m.musculus in dataset a, as the average number of functions that a protein possesses in the three original networks is  <dig> ,  <dig>  and  <dig> , we considered only the first  <dig>   <dig>  and  <dig> predictions, respectively. the results are shown in figure  <dig>  in dataset b, there are two ppi networks . the average number of functions that each protein has in these networks is  <dig>  and  <dig> , so we considered only the top  <dig> ranks. the results are shown in figure  <dig>  it can be seen from figure  <dig>   <dig>   <dig> that our method can obtain more accurate predictions than the four competing approaches, due to the combination of implicit  and explicit edges. these results indicate that enriching ppi networks by adding a number of blast-inferred edges can indeed improve prediction performance. the experimental results also validate that the network-based approaches outperform the sequence similarity based approach in most cases. this is because the sequence similarity based approach is completely based on protein sequence information, and thus perform the worst. in addition, it is worth noting that higher rank functions are predicted better than lower ones, implying that the protein functions are well ranked by our approach.

performance in sparsely-labeled networks
here we compared the performance of our method with that of the competing approaches in sparsely-labeled networks. in our implementation, the proportion of annotated proteins in ppi networks was varied from 10% to 90%, with which we predicted the functions of the remaining  proteins. we ran  <dig> experiments for each given proportion of annotated proteins and evaluated the average performance. figure  <dig>   <dig>   <dig> and figure  <dig>   <dig>   <dig> present the results over s.cerevisiae and m.musculus data in dataset a, and figure  <dig> and figure  <dig> show the results over the s.cerevisiae and m.musculus data in dataset b. these results clearly show that our method performs better than the four compared approaches in most cases. the experimental results also validate that generally for all approaches the prediction performance gets better as the number of annotated proteins in the network increases. however, very interestingly we noticed that in figure  <dig>  the prediction performance of function flow and indirect neighbors slightly degrade as the number of annotated proteins in the network increases. and in figure  <dig>  when the ratio of annotated proteins increases up to 50%, prediction performance of our approach  turns slightly down. this may be due to the overfitting effect or annotation quality problem. specifically, when the proportion of annotated proteins is 90%, the predicted functions of the un-annotated proteins are mainly based on the immediate neighbors, annotation quality will considerably impact the prediction performance. however, when the ratio of annotated proteins is 10%, the predicted functions of the un-annotated proteins are mainly based on the whole network, which thus alleviates the impact of annotation quality.

CONCLUSIONS
in this paper, we proposed a new method to protein function prediction that combines ppi information and protein sequence information to improve prediction performance. it first reconstructs ppi networks by adding a number of blast-inferred implicit edges, and then applies the collective classification method to predicting protein functions based on the new networks. the key idea of our work is to enrich the ppi information of ppi networks by adding a number of computed edges, which subsequently improves the prediction performance. we carried out experiments on s.cerevisiae and m.musculus functional annotation datasets. the experimental results demonstrate that our method outperforms the existing approaches across a series of label situations, especially in sparsely-labeled networks where the existing approaches do not work well due to ppi information inadequacy. experimental results also validate the robustness of the proposed approach to the number of labeled proteins in ppi networks.

in this paper, we used a very simple scheme  to infer implicit edges. actually, there are some other methods that can be used to mine useful implicit edges, such as random walk. random walk exploits both local and global network information, should be able to discover more useful hidden edges. we will explore this direction in the future.

competing interests
the authors declare that they have no competing interests.

authors' contributions
shuigeng zhou and jihong guan conceived the study, and revised the manuscript. wei xiong performed all experiments and data analysis, and drafted the manuscript. hui liu prepared the datasets.

