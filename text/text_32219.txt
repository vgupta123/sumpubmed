BACKGROUND
as an important research field in molecular cell biology and proteomics, protein subcellular localization is closely related to protein function, metabolic pathway, signal transduction and biological process, and plays an important role in drug discovery, drug design, basic biological research and biomedicine research. experimental determination of subcellular localization is time-consuming and laborious, and in some cases, it is hard to determine some subcellular compartments by fluorescent microscopy imaging techniques. computational methods may help biologist select target proteins and design experiments.

recent years have witnessed much progress in protein subcellular localization prediction  <cit> . machine learning methods for predicting protein subcellular localization involve two major aspects: one is to derive protein features and the other is to design predictive model. state-of-art feature extraction methods are data- and model- dependent. we should guarantee that the features not only capture rich biological information but also should be discriminative enough to construct an effective classifier for prediction. on one hand, high throughout sequencing technique makes protein sequences cheaply available, and many computational models are based on protein primary sequences only in computational proteomics. on the other hand, data integration has become a popular method to integrate diverse biological data, including non-sequence information, such as go annotation, protein-protein interaction network, protein structural information, cell image features etc.

there are many effective protein features extracted specifically for protein subcellular localization prediction. amino acid composition  has close relation with protein subcellular localization  <cit>  and is the most frequently-used features. pseaa  <cit>  encodes the pair-wise correlation of two amino acids at Î» intervals using amino acid physiochemical properties. sliding-window based k-mer feature representation is often used to capture the contextual information of amino acid and the conserved motif information, such as gapaa, di-aa, and motif kernel  <cit> , etc. since the dimensionality of k-mer feature space  expands exponentially with the window size n, some researches  <cit>  compress  <dig> amino acids into  <dig> groups according to amino acid physiochemical properties. sorting signal and anchoring signal are important information for protein subcellular localization  <cit> , but with the disadvantages that the cleavage sites vary substantially with proteins and the signal peptides may be missing.

sequence profile is also important information for protein subcellular localization. marcotte e et al.   <cit>  revealed the relation between phylogenetic profile distribution and protein subcellular localization pattern. sequence profile reveals the approximately true amino acid distribution for each amino acid residue along protein sequence, and thus can be naturally used as evolutionary distance between amino acids for measuring the similarity between two protein sequences. through deliberate design, the similarity between two protein profile distributions can lead to a valid mercer kernel  <cit> . mak m et al.   <cit>  derived the alignment score between two protein profile distributions using dynamic programming, based on which to derive a valid profile alignment kernel. profile kernels  <cit>  used pssm & psfm to derive the similarity score between any two k-mers, based on which to measure the similarity between two protein sequences. kuang r et al.   <cit>  designed a profile kernel, a variant mismatch kernel  <cit> , which allowed a k fragment to match its corresponding k-mer if the fragment fell within the positional mutation neighbourhood defined by k-mer self-entropy. kuang r et al.   <cit>  extended the profile kernel by simple kernel fusion for prediction of malaria degradomes. spectrum kernel  <cit>  is based on exact k-mer match while  mismatch kernel  <cit>  allows l mismatches within each k-mer, both of which are based on protein sequence only without profile incorporation. actually, we can derive multiple kernels from multi-aspect knowledge about protein and then combine the kernels for more accurate definition of protein similarity. alexander z et al.  <cit>  used semi-infinite linear programming to derive the optimal kernel weights for motif kernels combination. mei s et al.   <cit>  derived multiple motif kernels from diverse physiochemical constraints on amino acid substitution and combined the kernels for protein subnuclear localization. kernel method is a good approach for heterogeneous data integration in computational biology.

although protein sequence contains all the information for proteins to be transported to due compartments, to form correct folding, to form proper 3-d structural conformation and to function properly, etc., quality feature extraction from protein sequence is still a challenging problem because there is no general law or complete knowledge for effective feature extraction from protein sequence. however, large amount of biological experiments and computational inference have accumulated reliable multi-aspect local knowledge about genes and gene products, which has been well organized in the biological knowledgebase: gene ontology . gene ontology is a controlled vocabulary that describes biomolecules and gene products in terms of biological process, function and components. with the rapid progress of experimental and electronic annotation, gene ontology has become a general feature of proteomics that can be used to boost the predictive performance of protein subcellular localization  <cit> . in what follows, we briefly review the go-based predictive models for protein subcellular localization from three viewpoints:  from the viewpoint of go term extraction, the previous models can be classified into three categories. the first type of method directly uses protein accession number to query go terms against goa database  <cit> , fast but not applicable to novel proteins  <cit> . the second type of method uses psi-blast to transfer the go terms of homologous proteins to the target protein  <cit> . the third method uses interproscan  <cit>  to transfer the go terms of signature proteins to the target proteins  <cit> , which may be more reliable than the psi-blast transfer. tung t et al.  enlarged the go term coverage by transferring to the target protein the go terms of physically interacting partners in yeast interacting network  <cit> .  from the viewpoint of go feature construction, the previous models also can be classified into three categories. the first way of go feature construction is to simply turn all goa go terms into a flat binary feature vector to represent proteins  <cit> . this method has large go term coverage but introduces many go terms irrelevant to the problem concerned. the second type of method uses genetic algorithm to select the most informative go component terms to minimize the irrelevant go terms  <cit> , but low go term coverage may be highly likely to turn the test proteins to be null feature vector, so that the effect of psi-blast go term transfer would be counteracted. the third type of method does not use explicit go feature representation but designs an implicit kernel function to measure the semantic similarity between two go terms  <cit> . actually, the three aspects of gene ontology have different discriminative abilities, but the aforesaid three types of method assume equal feature weight.  from the viewpoint of data integration, the previous models can be classified into two categories. the first type of method uses ensemble learning to combine protein sequence with gene ontology, such as k-nn ensemble  <cit> , fuzzy k-nn  <cit> , and svm ensemble  <cit> . the second type of method concatenates all the heterogeneous feature space  into a highly sparse high-dimension feature space  <cit> .

in this paper, we design an explicitly weighted kernel learning system to transfer the known knowledge in terms of go terms from related homology to the target problem, called gene ontology based transfer learning model , for the purpose of sharing knowledge between closely-evolved protein families and achieving better model performance for protein subcellular localization. we use interproscan to conduct multiple homologous signatures based queries against the interpro database, and then transfer the homologous go terms to the target protein. the transferred go terms are potentially prone to errors, partly because of possibly noisy annotations from fluorescent microscopy experiments, electronic annotations using text mining, computational inference, etc.  <cit> , or partly because of the outliers from homology transfer, that is, the homologous proteins actually have distinct function, process and subcellular localization patterns due to evolutionary divergence. therefore, we should further construct a learning system that is trained on the transferred go terms for reliable prediction. such a scenario of borrowing knowledge in terms of go terms from homologous proteins for further learning can be viewed as a case of transfer learning  <cit> , where knowledge is transferred between well-correlated domains for better learning in the target domain. dai w et al.   <cit>  proposed an instance-based knowledge transfer learning method, where auxiliary data were drawn in to augment the target training set using adaboost weighing system to reduce the unfavourable impact of auxiliary data that are subjected to different distribution. dai w et al.   <cit>  proposed a feature-based translated transfer learning method, where a translator was constructed between text feature space and image feature space for knowledge transfer from text data to image data. yang q et al.   <cit>  proposed a parameter-based knowledge transfer learning method, where the knowledge contained in annotated image of heterogeneous social web was transferred for target image clustering. pan s et al.   <cit>  reviewed the recent progress in transfer learning modelling. because of the unbalanced knowledge about protein, the three aspects of gene ontology may have distinct discriminative abilities. for this reason, we derive go process features, go function features and go component features individually, and then derive three individual go kernels from the three types of go feature representation. besides the three go kernels, we further derive another two sequence kernels from amino acid composition  and di-pepetide , which are actually spectrum kernel. these heterogeneous feature representations then are then merged into one kernel using linear kernel combination, a classical scenario of multiple kernel learning  <cit> . to reduce the computational cost of parameter optimization for multiple kernel learning, we use simple non-parametric cross validation to estimate the kernel weights instead. the model go-tlm is evaluated against three baseline models on three eukaryotic benchmark datasets using cross validation and independent test.

methods
go feature construction
the interpro database  <cit>  integrates into a single source the most frequently-accessed signature databases including prosite  <cit> , prints  <cit> , pfam  <cit> , prodom  <cit> , smart  <cit>  and tigrfams  <cit> . prosite uses regular expression to represent significant amino acid patterns or uses profile  to detect structural and functional domains; prints collects protein family fingerprints ; pfam is a database of protein domain families that contains curated multiple sequence alignments for each family and corresponding profile hidden markov models ; prodom provides automatic domain query that is based on recursive use of psi-blast homology search; smart collects domains that are extensively annotated with respect to phyletic distributions, functional class, tertiary structures and functionally important residues; tigrfams are a collection of protein families that are characteristic of curated multiple sequence alignments, hidden markov models  and associated information supporting functional identification of proteins by sequence homology. interproscan  <cit>  combines different protein signature recognition methods into one resource and provides a uniform web service interface to query signatures against the integrative interpro database. interproscan provides an option "--goterms" that enables go term query using protein sequence only, which can collect more reliable go terms than blast transfer  <cit> . parallel access and fast b-tree indexing make interproscan practicable to large problem. for the reason, we use the perl script interproscan.pl as a go term extraction tool. the go term set consists of three subsets: process, function and component. the three go term subsets are organized as three individual binary feature vectors: ; ; . it should be noted that interproscan can overcome the problem of data unavailability to a certain degree. if we set high threshold to query more reliable go terms with higher confidence, or the homology also is unannotated, interproscan could neither transfer go terms to the target proteins.

kernel weight
k-mer occurrence patterns can reveal some conserved sub-sequences  and k-spectrum kernel can be used to define the similarity between protein sequences. since the feature space expands exponentially with window size |Î£|k, we only use 1-mer  and 2-mer  as protein sequence feature representation, thus we can derive kernels kaa, kdiaa. based on the go feature representation, we define go process kernel kp, go function kernel kf and go component kernel kc. the  <dig> kernels are fused into single kernel for more accurate protein similarity definition. kernel fusion is equivalent to the kernel that is computed in the concatenated feature space, but kernel fusion has the advantage of explicitly weighing the importance of feature subsets. the information content transferred from go kernels to sequence kernels is measured by go kernel weights. the weights of feature subsets vary with problems and should be derived from data. the final kernel is defined as the following linear combination of sub-kernels:

  kgoâtlm=âeâ{p,f,c,aa,diaa}we*ke 

lanckriet g et al.   <cit>  used semi-definite programming to solve the problem, and alexander zien et al.   <cit>  used semi-indefinite linear programming to derive the optimal weights. both methods have rather large time & space complexity. here, we use simple non-parametric cross validation to derive the kernel weights we,e â {p, f, c, aa, diaa}. given a training data x, derive kernels kaa, kdiaa, kp, kf, kc and split x into k folds, then conduct k-fold cross validation, we can estimate the recall rate or sensitivity  for each kernel. sensitivity reflects the discriminative ability of kernel or feature subset, but sensitivity is highly biased towards predominant class in the case of unbalanced data, so we should include matthew's correlation coefficient  into performance measure to objectively estimate the kernel weights:

  we=see*mcceâcâ{aa,diaa,p,f,c}sec*mccc 

for denotation simplicity, the subscript e is omitted. assume confusion matrix m for some kernel , mi,j records the counts that class i is classified to class j. given the following variables that can be derived from the confusion matrix m:

  pl=ml,l,ql=âi= <dig> iâ llâj= <dig> jâ llmi,j,rl=âi= <dig> iâ llmi,l,sl=âj= <dig> jâ llml,j,p=âl=1lpl,q=âl=1lql,r=âl=1lrl,s=âl=1lsl 

we can derive the kernel's se and mcc measure as follows:

  se=âl=1lml,lâi=1lâj=1lmi,j,mcc=pqârs 

where, superscript l denotes subcellular locations.

as regards with ke, e â {aa, diaa, p, f, c}, gaussian kernel is used here:

  ke=exp 

Î³ should be fine tuned by experiments.

RESULTS
dataset description
we choose three highly unbalanced eukaryotic benchmark datasets to evaluate go-tlm performance. the first dataset multiloc collects  <dig> proteins that are unevenly distributed to  <dig> subcellular locations for plant data and  <dig> subcellular locations for fungi data and animal data  <cit> ; the second dataset bacelloc, originally from the work  <cit> , collects  <dig> proteins for plant,  <dig> proteins for fungi and  <dig> proteins for animal that are unevenly located in  <dig> subcellular locations for plant and  <dig> subcellular location for fungi and animal  <cit> ; the third dataset euk-mploc collects  <dig> proteins that are unevenly located in  <dig> subcellular locations, the largest dataset as far in terms of number of subcellular locations  <cit> . to overcome overestimation of model performance, a cut-off threshold of 25% sequence similarity is generally accepted in current researches  <cit> . in this paper, to allow more training data and as conducted as the baseline models do, 30% threshold of sequence similarity is adopted on all the benchmark datasets, except 40% threshold of sequence similarity for multiloc plant dataset and 25% threshold of sequence similarity for euk-mploc dataset.

model evaluation and model selection
among the independent dataset test, sub-sampling  test and jackknife test , the jackknife test is deemed the most objective model evaluation method, as elucidated in  <cit> . therefore, the jackknife test has been increasingly adopted and widely recognized by investigators to test the power of various prediction methods  <cit> . 5-fold cross validation is a commonly-accepted model evaluation approach in computational biology for large dataset or complex learning models, whereas leave-one-out cross validation   is a better choice for small data or simple computational model. we use 5-fold cross validation to evaluate go-tlm on data multiloc, bacelloc and euk-mploc, and evaluate go-tlm on bacelloc independent test as multiloc-go did. for 5-fold cross validation, the protein dataset is randomly split into five disjoint parts with equal size. the last part may have 1- <dig> more examples than the former  <dig> parts in order for each example to be evaluated on the model. one part of the dataset is used as test set and the remained parts are jointly used as training set. the procedure iterates for five times, and each time a different part is chosen as test set. the independent test is actually hold-out test that randomly partition the dataset into training set and test set. as performance measure, hold-out set is not so objective as cross validation because it does not ensure that each data point is chosen to be tested. for the sake of comparison, we also conduct performance evaluation on bacelloc independent sets.

as regards to the cross validation for kernel weight evaluation, we select the cvk from { <dig>   <dig>  10} that achieves best overall accuracy. we use four commonly-adopted measures: sensitivity , specificity , matthew's correlation coefficient  and overall accuracy. mcc is often used to evaluate the performance balance of model prediction. as compared to mcc, overall accuracy is a better candidate performance measure for model selection, because it has taken mcc into account. the overall mcc is not given, now that we pay more attention to the bias comparison between sub-categories. libsvm  is used together with the model go-tlm. the regularization parameter c is selected within { <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  211} and the kernel parameter Î³ is selected within {2- <dig>  2- <dig>  2- <dig>  2-4}. we adopt the cvk, Î³, c combination that achieves the best overall accuracy.

comparison with baseline model
we choose multiloc-go and euk-mploc as baseline models for performance comparison. both the baseline models incorporated gene ontology information to boost the model's predictive performance. multiloc-go used interproscan to draw in go terms while euk-mploc used protein accession to directly query go terms against goa database. we use specificity , sensitivity , mcc and overall accuracy as performance measures.

the baseline model multiloc-go gave overall accuracy only for cross validation estimation on multiloc dataset and bacelloc dataset without detailed sp, se and mcc. for intuitive illustration of eight comparison experiments between go-tlm and multiloc-go, we give performance comparison in a separate chart figure  <dig>  as can be seen from figure 1go-tlm significantly outperforms multiloc-go on all benchmark datasets. go-tlm achieves quite satisfactory performance for cross validation but significant decrease on bacelloc independent sets. the accuracy decrease may be caused by the subjective partition of training set and test set. from figure  <dig> we can see that go-tlm demonstrates more stable performance than multiloc-go. go-tlm's detailed performance measures see table  <dig>   <dig>   <dig> 

fungi
plant
animal
plant
fungi
animal
on multiloc plant dataset with  <dig> subcellular compartments, the best parameter combination is cvk =  <dig>  Î³ = 2- <dig>  c =  <dig> and the best overall accuracy is  <dig> %,  <dig> % increase from multiloc-go  <dig> %  <cit> ,  <dig> % sharp increase from multiloc  <dig> %  <cit> . as can be seen from table 1go-tlm demonstrates quite satisfactory performances on all the subcellular locations, with sp, se and mcc all greater than 90%, far better than sequence-based multiloc. multiloc-go gave no detailed cross validation performance measures on each subcellular location. the performance measures sp, se and mcc demonstrate that go-tlm shows no bias towards large subcellular locations, e.g. the smallest vacuole sp:  <dig> , se:  <dig> , mcc:  <dig>  on multiloc plant. similar conclusions can be drawn on multiloc animal. the best parameter combination is cvk =  <dig>  Î³ = 2- <dig>  c =  <dig> for multiloc animal. multiloc fungi dataset shares most proteins with multiloc plant, without chloroplast compartment, so we don't give results on multiloc fungi dataset.

we conduct two sets of experiments on the second dataset bacelloc. as can be seen from table  <dig> the cross validation experiments show that go-tlm achieves best overall accuracy  <dig> %,  <dig> % and  <dig> % on bacelloc plant, bacelloc fungi and bacelloc animal, respectively against multiloc-go  <dig> %,  <dig> % and  <dig> %, with accuracy increase  <dig> %,  <dig> % and  <dig> %, respectively. the performance measures sp, se and mcc demonstrate that go-tlm shows no bias towards large subcellular locations, e.g. the smallest extracellular sp:  <dig> , se:  <dig> , mcc:  <dig>  on bacelloc plant; the smallest extracellular sp:  <dig> , se:  <dig> , mcc:  <dig>  on bacelloc fungi; and the smallest mitochondria sp:  <dig> , se:  <dig> , mcc:  <dig>  on bacelloc animal. the best parameter combination is cvk =  <dig>  Î³ = 2- <dig>  c =  <dig> for bacelloc plant; cvk =  <dig>  Î³ = 2- <dig>  c = 27for bacelloc fungi; and cvk =  <dig>  Î³ = 2- <dig>  c =  <dig> for bacelloc animal. multiloc-go gave no detailed sp, se and mcc performance.

as can be seen in table  <dig> the independent test on bacelloc datasets show that go-tlm achieves  <dig> %,  <dig> % and  <dig> % on plant, fungi and animal, respectively, as compared against multiloc-go 76%,  <dig> % and  <dig> %, with accuracy increase  <dig> %,  <dig> % and  <dig> %, respectively. as can be seen from mcc performance, go-tlm generally shows less bias towards large subcellular locations than multiloc-go, e.g. cytoplasm , extracellular  on plant; nucleus , cytoplasm  on fungi; and nucleus , cytoplasm  on animal. the improvement on mcc measure may indicate the significance of incorporating mcc measure into go-tlm kernel weight estimation as illustrated in formula . at the same time, go-tlm also shows a little performance decrease on several measure values .

on euk-mploc data with  <dig> subcellular compartments, the best parameter combination is cvk =  <dig>  Î³ = 2- <dig>  c =  <dig> and the best overall accuracy is  <dig> %,  <dig> % substantial increase from euk-mploc  <dig> %  <cit>  and  <dig> % sharp increase from fuzzy k-nn  <dig> %  <cit> . fuzzy k-nn was evaluated on the old version of euk-mploc with  <dig> subcellular locations and  <dig> proteins. the multi-location proteins are excluded and only its single-location measure i is taken as the comparative baseline here. euk-mploc and fuzzy k-nn gave no detailed performance. as can be seen from table 3go-tlm shows quite satisfactory mcc performance on most subcellular locations, including most small compartments such as acrosome  <dig> , microsome  <dig> , hydrogenosome  <dig> , etc. there are two small compartments that achieve poor mcc performance: cytoskeleton  &melanosome . as compared to the previous models, go-tlm can help reduce the bias towards the subcellular locations with larger number of training proteins.

kernel weight distribution
the weights for kernel kaa, kdiaa, kp, kf, kc on the benchmark datasets are illustrated in figure  <dig>  for each fold of cross validation, the training set is further subjected to cvk-fold cross validation to estimate the five kernels' performance measures , based on which to further estimate the kernels' weights using formula . experiments shows that the kernel weights for 5-fold cross validation vary slightly . as can be seen from figure 2go-tlm demonstrates similar kernel weight distribution on all the benchmark datasets. go features show much stronger discriminative ability than sequence features and the go component terms from signature proteins contribute most to the predictive performance, go process terms the second and go function terms the third. the results may imply that go component terms are more directly indicative of subcellular location than go function terms and go process terms, or the training proteins have less component term missing rate than function and process term missing rate. take euk-mploc dataset for example, there are  <dig> proteins without go process terms, accounting for  <dig> % missing rate; there are  <dig> proteins without go function terms, accounting for  <dig> % missing rate; and there are  <dig> proteins without go component terms, accounting for  <dig> %, far less than the missing rate of function terms and process terms. on the other hand, the weights for kaa, kdiaa vary little with datasets, while the weights for kp, kf, kc vary widely with datasets, the higher for kc weight, the lower for kp, kf weights. go-tlm achieves the highest kc weight on euk-mploc and the lowest kc weight on bacelloc-fungi. the result may also be explained by the missing rate of go terms, e.g.  <dig> missing rate for bacelloc-fungi component terms, while  <dig> % missing rate for euk-mploc component terms. bacelloc-fungi has less missing rate of process term and function term, and has process weight and function weight slightly increased. we can see that the unbalanced go term distribution contributes much to the variation of go kernel weights.

now that kc weight is much higher than the other kernel weights, we had better further study the predictive performance of the model that is trained on all the kernels except kc , referred to as go-tlm. the performance comparison between go-tlm and go-tlm is illustrated in figure  <dig> which shows that the removal of kernel kc leads to substantial  <dig> %~ <dig> % performance decrease. the result demonstrates that the go component terms play a critical role in protein subcellular localization. however, the model go-tlm-i achieves over 80% overall accuracy on datasets multiloc-plant, multiloc-animal, bacelloc-fungi and bacelloc-animal, which demonstrates that the other  <dig> kernels also benefit the protein subcellular localization prediction. lu z et al.  has elucidated that go function terms are good indicator of protein subcellular localization  <cit> .

discussion
traditionally, the knowledge in terms of go terms about homology can be directly transferred to the target proteins based on signature or homology search. such a way of knowledge transfer generally benefits the research on unknown domain, species or family in biology. however, this process may be prone to introducing noise and outlier, partly because sequence similarity unnecessarily implies similar subcellular localization pattern, molecular function or biological process; or partly because the annotations in themselves may be noisy. for the reason, we design a transfer learning system to share knowledge between homology for reliable protein subcellular localization, called gene ontology based transfer learning model . go-tlm collects go terms based on signature or homology search against the integrative database interpro, and then transfer the go terms to the target proteins for further learning. all the transferred go terms are used to train a kernel-based svm classifier, which can effectively reduce the risk of outliers by allowing larger training error to achieve maximum margin between two-class separating hyperplanes. thus, the quite different go terms  would be viewed as outlier after svm training. such a way of constructing a learning system based on the transferred knowledge between related domains or data may benefit computational biology in many aspects. as compared to concatenation of heterogeneous feature subspace, multiple kernel learning has the advantage of explicitly weighing the feature subset/kernel contribution to the classification task. go-tlm uses simple non-parametric cross validation to estimate the kernel weights, serially one kernel in memory at a time, such that it requires much less time and space than the complicated semi-definite/semi-indefinite linear programming. simple non-parametric cross validation is used to estimate the kernel weights. meanwhile, the kernel weight estimation allows for both sensitivity and unbalanced measure mcc, such that go-tlm would work better in the scenario of unbalanced training dataset. experiments reveal that go component feature play more important role than go process feature and go function feature. with less missing rate, go function terms and go process terms would further increase the predictive performance.

go-tlm only uses those go terms that belong to the problem concerned, thus no irrelevant go term is into the go feature vector. however, this method of go feature construction may cause low go term coverage, that's, a test go term  may find no match in the training go term set. in such a scenario, we should include the test go term into the training go term set to re-train the well-trained learning system. re-training is generally time-consuming for large data and complex model selection. we had better pull in more statistically correlated go terms for those proteins with very few evidences. to avoid re-training, we had better use statistically correlated go term to replace the go term that may not hit the training go terms. lastly, there is still a large chance for interproscan to miss capturing go terms from homology because of the unevenly distribution of go terms. in such a scenario, we can lower the threshold for interproscan to draw in the go terms from remote homology. since user-friendly and publicly accessible web-servers represent the future direction for developing practically more useful predictors  <cit> , we shall make efforts in our future work to provide a web-server for the method presented in this paper.

CONCLUSIONS
in this paper, we design an explicitly weighted kernel learning system to transfer the known knowledge in terms of go terms from related homology to the target problem, called gene ontology based transfer learning model , to reduce the risk of outlier and achieve better model performance. on one hand, homology or signature based go term transfer enables reliable knowledge share between homology, protein subfamily or protein family. on the other hand, go-tlm uses simple and effective non-parametric cross validation to explicitly weigh the contribution of the three aspects of gene ontology. the explicitly weighted kernel combination can better cope with the different missing rates and different discriminative abilities between the three aspects of gene ontology. the kernel weight estimation takes into account mcc measure, such that go-tlm could perform better in the scenario of unbalanced data distribution among subcellular locations. experiments on three benchmark datasets show that go-tlm significantly outperforms the previous models.

competing interests
the authors declare that they have no competing interests.

authors' contributions
msy conducted the survey and the computational modelling. wf and sgz reviewed the study. all authors read and approved the final manuscript.

