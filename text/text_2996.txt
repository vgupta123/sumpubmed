BACKGROUND
mathematical modelling of epidemics has been carried out since the eighteenth century when daniel bernoulii used a model to show that life expectancy would be increased when a population was inoculated against smallpox  <cit> . since then, mathematical models have increased in sophistication  and are often accompanied by a wealth of epidemiological and population data .

it has become easier to collect and store large amounts of data that can be incorporated into epidemiological models, many of which require sophisticated analysis to make efficient use of these data . the form of this data is variable but might typically include records of numbers and types of individuals at specific locations at points in time , records of movement of individuals between locations, and results of diagnostic tests for disease  or specific pathogens. creating mathematical and computational models and analysing their output requires the development of complex computer code that is usually challenging and disease specific. therefore a generalised framework upon which complex models can be created, allowing the incorporation of large and flexible datasets whilst maintaining a clear and simple programming model is needed.

broadwick is a computational framework for developing sophisticated epidemiological models. it consists of several third-party java libraries and custom packages and removes the boilerplate code and complex data handling tasks so that researchers creating complex models can be more productive in their development. managers and policy makers can benefit from having a common framework for their projects, facilitating code reuse and sharing amongst research team members and enabling a rapid response rate in the case of a novel disease outbreak.

the components of broadwick are written in such a way that a user may combine them to rapidly prototype a model for a new specific scenario. each computational package included in the framework contains sensible default settings that can easily be overwritten. data can be handled from flat data files or from a database and model parameters can be supplied through a configuration file. the broadwick code contains a suite of tests that is incorporated into the build system to ensure code validity.

the philosophy driving the development of broadwick is to have a suite of tools/models written in a common framework that can be available and easily used when a disease outbreak occurs. having such a common framework allows researchers to quickly develop novel models based on previous ones or to enhance third party models without the investment of time in trying to understand a new code-base.

implementation
at its heart, broadwick is a library that controls how its models are run. it handles its own configuration, data handling and logging  allowing developers to concentrate on writing the code to simulate the epidemiology. to make this development process even easier, broadwick comes with a maven  <cit>  archetype that creates a complete but rather simple runnable model  complete with a useable configuration file, build script, ancillary code and a *nix shell script for running the project that configures the java runtime environment to be able to run a broadwick model. compiling and running this generated project will generate several logging messages as the project is initialised, run and closed. tutorials of how to create models and run simple examples using the framework, together with examples including an individual based stochastic compartmental model, and models incorporating movements over a network are available from http://epicscotland.github.io/broadwick.html.

the present version can accommodate two simple models types, event-driven models and ordinary differential equations . for event-driven models, a collection of events  and their transition rates is required by the solver which will determine when an event is fired and which event is to be performed whilst keeping track of the propensities of each agent . to use an ode solver, a collection of equations  are required by the solver which will apply the 4th order runge kutta method to solve the system over time. future versions of the library will add new ode solvers . examples of running a sir model using both paradigms are included in the broadwick distribution which can be modified and built upon to develop more complicated models. both of these solvers incorporate the observer design pattern  <cit>  to deliver results at the end of each time step . these solvers also incorporate a special type of event, which we call θ-events that is triggered at specific  times. these are useful to, for example, add new susceptible individuals at specific times  or to remove infected individuals . figure  <dig> shows the time series output of a sir model solved using broadwick’s stochastic and ode solvers and incorporating a single θ-event to add susceptible individuals.
fig.  <dig> example of an sir model using the ode solver  and the stochastic solver  within broadwick. both models start with  <dig> susceptible ,  <dig> infected  and  <dig> recovered  individuals with β= <dig>  and ρ= <dig>  with both solvers adding  <dig> new individuals at t= <dig> using a θ-event



broadwick contains several packages for simulating and fitting disease models to observed data . the classes broadwick use for simulating the spread of disease can be combined to quickly create sophisticated models. as an example the monte carlo class can run a model  a specified number of times and generate statistics of the simulation results and the markov chain class can generate a sequence of steps in some parameter space.

markov chain monte carlo can be implemented by adding an acceptor class to the markov chain class so successive steps are only accepted if they meet certain criteria . broadwick comes equipped with a metropolis-hastings acceptor class which may be used as a template to implement bespoke acceptors . optional classes such as a controller  can also be supplied to these simulation classes.

approximate bayesian computation  is an inference techniques that is growing in popularity and one that is supported by broadwick. a set of priors and a model is supplied to the abc class which will run the model in the prior space until it converges and reports the calculated posteriors. the abc class can be used in conjunction with the markov chain class to implement the abc-mcmc allgorithm as proposed by  <cit> . controllers and observers can also be supplied to the abc class as with the monte carlo and markov chain classes.

this methodology of supplying or overriding functionality within broadwick is key to the design of the framework. it endeavours to use sensible defaults for each package whilst allowing users to easily overwrite these defaults and combine packages.

data
many epidemiological models require large datasets  that can represent a prohibitively high cost of computational effort in parsing these datasets before a model can be run. broadwick overcomes this problem by storing the data in an embedded, in-memory database  allowing projects using the framework to use the database thus avoid lengthy start-up times whilst maintaining data integrity and memory efficiency.

incorporating large datasets  into computational models requires either loading the data into memory at the start of the simulation  or configuring a database and interrogating it via complex and often error-prone code . broadwick uses a mixed approach by loading all the data into an in-memory database when the code is run for the first time. the database is then saved for future runs, thus avoiding the long start-ups and memory hits associated with data file access. broadwick uses a sqlite database to store its data, the structure of which is detailed in the broadwick manual and can also be created and maintained  which can then be used by a broadwick model. this approach may be beneficial if one is performing a long-term study that regularly reports movements or population data that would be required for analysis.

broadwick accepts comma separated value  data files for locations, populations, movements and  test data with the layout of each data file described in the projects configuration file.

the location data consists of an identification number  of the location  and its’ x and y coordinates .

the population data can either contain individual level life histories  or group level information, i.e. the total population size at a location on a specific date . life history data contain the date and locations of each individuals birth and death.

test data files consist of a date and the results of a specific test type carried out at a given location or individual  allowing for tests to be recorded at an individual or group level.

movement data are recorded at different levels depending on whether an individual or groups movement is recorded   <cit>  and scoteid   <cit> . individual movements can be considered either full or directed. full movements contain the individual’s id, the date of the movement, and the ids of the destination and departure locations. directed movements contain the id of the individual, the date of the movement, the id of the location and the direction of the movement . group movements, on the other hand, contain the date, number of individuals moved , the location id and the movement direction. the tables used in the database are outlined in table  <dig> 


broadwick contains a facade for interrogating the database through which queries can be run. several useful methods for interrogating the database are included in this facade e.g. for getting all the movements within a date range , getting all the individuals alive at a given date or all the tests carried out at a specific location or on an individual.

RESULTS
broadwick was used to develop a generic compartmental model of disease spread through a network of animal holdings in scotland , incorporating movements of individual cattle through the network. soho was created to understand, through the use of the cattle movement network, how the disease transmission patterns change from a slow spreading to a fast spreading disease with different locations for the initial outbreak sources. it uses an sir epidemiological model where it considers three compartments for the number of susceptible , infectious  and recovered  individuals. it uses movement data from the cattle tracing system database for scotland , which consists of  <dig>  million animals at the beginning of  <dig> and each simulation incorporates more than  <dig> cattle movements per day. the duration of each simulation run can vary between  <dig> to  <dig> hours . more details about the soho model can be found in 

CONCLUSIONS
broadwick offers a computational framework that allows researchers to develop complex mathematical and simulation models of disease spread without having to worry about technical coding issues such as trying to efficiently read large datasets or develop a stochastic algorithm thus freeing time to devote to the model itself. broadwick contains many packages that can be used as required it is designed to be flexible, not putting any requirement on how the user uses it, e.g. it contains it’s own entry point and configuration and data handling routines but these can be ignored and broadwick used as a library of useful packages. it is a framework that provides considerable flexibility in developing epidemiological models, either for animal or human epidemiology. broadwick continues to be actively developed with distributed computing abilities planned for future versions.

availability of data and materials
the broadwick source and accompanying examples are freely available at http://epicscotland.github.io/broadwick.html
under the apache license, version  <dig>  license.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

rk conceived the software and participated in writing the manuscript. sl, td participated in the design and development of the software. td, ls developed the soho software and contributed the section of the manuscript. aoh designed and developed the software, drafted the manuscript. all authors read and approved the final manuscript.

