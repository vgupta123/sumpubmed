BACKGROUND
genome annotation largely depends on the determination of sequence intervals that are homologous, and if possible, orthologous to sequences of known identity and function in related genomes. orthologous genes  are derived from a common ancestor by a speciation event  <cit> . orthologs are of particular interest because they can be expected to have maintained at least part of their  biological function. for protein-coding genes, several well-known databases, including inparanoid <cit> , orthomcl-db <cit> , cog-database <cit> , homogene <cit> , eggnog <cit> , oma browser <cit>  and ensembl compara <cit>  compile such information. their content is restricted to data previously published in comprehensive databases of protein sequences such as uniprot <cit> . updates with additional proteomic data thus are published relatively infrequently. modern high-throughput technologies, however, produce huge amounts of protein data and even larger amounts of transcript data that are computationally translated to putative polypeptide sequences. oftentimes, therefore, it would be desirable to generate the orthology relation for a particular dataset, so that the availability of orthology data does not limit the set of species or genes that can be included.

the computation of genome-wide orthology data, however, is a challenging and time consuming task with the currently available tools. in many cases, orthologs cannot be identified unambiguously by means of sequence comparison. the main difficulty arises from the presence of paralogs  which can make it very difficult to recognize the correct ortholog among the other homologs. gene duplications following the speciation, furthermore, create two or more genes in one lineage that are, collectively, orthologous to one or more genes in another lineage. such genes are known as co-orthologs  <cit> .

the most widely used approach to identify  orthologs between two species is the reciprocal best alignment heuristic  <cit> . this approach was more recently extended e.g. in orthomcl <cit>  and multiparanoid <cit>  to detect orthologs within multiple species. all these tools, however, are limited to relatively small sets of species. in practise, analyzing the complete proteomes of more than about  <dig> prokaryote species goes beyond the capabilities of standard hardware and requires access to supercomputer resources. this limitation arises from both, technical issues such as insufficient parallelization and the algorithmic design that requires all reasonable alignments for each input protein to be held in the memory for efficient access in the clustering stage. proteinortho is specifically designed to deal with hundreds of species together containing millions of proteins. it achieves this performance both by optimizing the implementation and by modifying the reciprocal best alignment method in a way that allows alignment processing on the fly.

RESULTS
orthology prediction
theory
as for other approaches to large-scale orthology detection, the starting point is a complete collection of pairwise comparisons, typically performed using blast. for simplicity of presentation, we assume that the individual sequences that are compared represent proteins, although algorithms and pipelines are applicable also to other sequence data such as non-coding rna genes or conserved dna regions. typically, the results of pairwise comparisons are ranked by similarity, for instance based on blast statistics, evolutionary distances, or genome rearrangement analysis  <cit> . high-ranking alignments across multiple species then have to be combined in order to determine orthologous groups. however, these groups usually do not readily provide detailed insights since they can contain large numbers of related genes for each species. hence, meaningful units have to be identified. for this purpose, a variety of clustering algorithms has been applied to determine clusters of orthologous groups . the mcl-algorithm for instance uses a stochastic flow simulation to determine meaningful cogs  <cit> . in addition, multiparanoid explicitly searches and tags in-paralogs, i.e., recent paralogs that represent species-specific gene expansions. this strategy requires to directly compare proteins within each species. alternatively, data were curated by manual postprocessing  <cit> .

we will argue here that orthology determination can be understood as the problem of finding nearly disjoint maximal nearly-complete multipartite subgraphs in an edge-weighted directed graph  whose vertices are the proteins in the input set, and whose edges connect certain pairs of similar proteins of different species. the edge weights ωx→y encode the similarity of x and y. in our implementation, the bit score of the blast alignment  will serve as edge weight. an e-value cut-off is used beyond which blast alignments are not included into .

in order to motivate our point of view, we first consider an idealized dataset  in which  each protein x  has at most one ortholog in any other species b ≠ a,  if y ∈ b is an ortholog of x ∈ a, then a blast search of x against b yields at least one alignment and  the unique best alignment of query x against b is the true ortholog y of x. in this case, the well-know "reciprocal best alignment heuristic" , also known as "reciprocal best hits"   <cit> , can be used to retrieve the correct ortholog set. to see this, we construct a subgraph  of  as follows: for each protein x in species a and a given species b ≠ a we retain only the arc with maximal weight:   

the symmetric subgraph of , containing only reciprocal best alignments, can be regarded as an undirected graph ϒrbah. by construction, any two vertices are connected by edges in ϒrbah if and only if they are orthologs. a set of orthologs therefore corresponds to a complete multipartite subgraph of  in which every species is represented at most once. furthermore, we note that these subgraphs are disjoint, i.e., ortholog sets correspond to the connected components of .

when applied to real data, however, rbah usually gives rise to several artifacts. in general, therefore, it does not produce correct and complete sets of orthologs. first, gene duplications produce co-orthologs, destroying the uniqueness of best blast alignments. the blast comparison of two species both containing two co-orthologs will in general produce slightly different scores among those genes, so that  in general will not contain all arcs between them, see figure 2a. rbah now extracts the symmetric part of , i.e., it removes all non-reciprocal edges. thus the undirected graph ϒrbah has an edge {x, y} if and only if both  and  are arcs in . a missing arc in the example of figure 2a thus translates into a missing edge in ϒrbah. ortholog sets, therefore, are still located in disjoint connected components, but they are only approximately multipartite and there is no guarantee that they remain connected. as a remedy, it could be proposed to use the k-best blast alignments instead of a single best one. this leads, however, to another type of artifact: if distant homologs or spurious blast alignments with scores above the blast threshold are present, see figure 2b, the inclusion of up to k alignments can result in edges between paralogous but non-orthologous proteins.

in order to reduce such problems, we suggest to introduce a similarity cut-off value that itself depends on the quality of the matches, i.e., to consider all those blast alignments of each query against a given species whose e-values are only slightly smaller  than the queries' best blast alignments. more precisely,   

this has two advantages: it retains edges to likely co-orthologs while at the same time reducing the number of edges that are inserted in .

the symmetric part ϒ* of  now retains more edges than ϒrbah. in particular, it includes all the edges connecting similar co-orthologs. on the other hand, the threshold at fairly high bit scores disconnects at least most of the more distant homologs. sets of orthologs thus appear in ϒ* as nearly complete multipartite subgraphs. typically they will contain more than one node from the same species, among them, in particular, all in-paralogs. although this approach strongly reduces the problem with spurious edges, ϒ* may also contain additional edges connecting two or more sets of orthologs.

the problem of finding maximal complete multipartite subgraphs of a graph is np complete  <cit> . furthermore, we have seen above that ϒ* may lack a few edges which should connect orthologs , while at the same time there are also some additional "false positive" edges. in a two-species comparison there is no information that could compensate missing and spurious edges, while in the multi-species case, the graph ϒ* is in a sense "self-correcting" since we can formulate orthology detection as an optimization problem. more precisely, we search for a decomposition of ϒ* into a disjoint collection of complete multipartite subgraphs so that the number of edge insertions and deletions is minimized.

since no efficient approaches to this combinatorial optimization problem seem to be known, it appears fruitful to resort to a heuristic approach that employs a somewhat different point of view: nearly complete multipartite subgraphs are very dense subgraphs, which in our case either form connected components on their own, or which are connected to other dense clusters by a few additional edges. the problem thus is to determine for each connected component ϒ* of whether it is sufficiently densely connected, and if not, to partition it into its densely connected components by removing the spurious edges connecting them. here, we approach this issue by means of spectral partitioning  <cit> , see additional file  <dig> for a detailed description.

we remark, finally, that one could efficiently add the explicit determination of in-paralogs after ϒ* has been constructed, although currently this is not implemented in proteinortho. following e.g. inparanoid, sets of in-paralogs are subsets of proteins from the same species within the same connected component ϒ* of that are more similar to each other than to any protein in another species. it is sufficient, thus, to determine alignment scores for pairs of nodes from the same species within connected components of ϒ*. as in multiparanoid, in-paralogs could be collapsed to a single node.

implementation
blast searches
proteinortho expects fasta files containing either nucleic acid or amino acid sequences as input. proteinortho does not build a large database containing all proteins but rather keeps the protein complements of different species separate. this has multiple advantages:  the blast step can be partitioned into multiple runs. the available processor cores are used efficiently as each blast process can utilize one processor core to the full, which is usually not the case if threading is handled by blast itself. furthermore, the blast jobs can be distributed to several computers in a network.  the computationally expensive blast search of species against themselves  can be avoided.  the e-values returned by blast depend only on the proteome of each input species, not on the database of all input sequences. therefore, proteinortho implicitly enforces higher similarity for related proteomes but allows lower levels of similarity for larger evolutionary distances. conceptually, this replaces the normalization of the scores employed e.g. by orthomcl.  the scope of the analysis can be extended without the need to re-compute blast comparisons that have already been computed earlier. the e-values remain unchanged when species are included or excluded from the analysis. proteinortho can use several pcs with a shared storage . the implementation of distributed computing is illustrated in additional file  <dig>  furthermore, cluster infrastructure  is supported. a benchmark illustrating the performance improvements is shown in figure 3a. proteinortho is faster than orthomcl even if only a single processor core is available and gains much of its practical advantage from parallelization. in applications to large numbers of species, for which proteinortho is primarily intended, handling blast alignments dominates the spectral partitioning step by several orders of magnitude. as blast and the memory consumption of holding the graph structure for clustering are limiting, we do not investigate the complexity of the clustering step itself in detail.

most importantly, the algorithm outlined in the previous section avoids the memory bottleneck that limits previous approaches. suppose our input set comprises n species with, on average, m genes. the size of the input is thus n = n × m proteins. instead of storing all n × n pairwise blast scores, proteinortho processes the comparisons between any two species a and b immediately: first the blast alignments are filtered by two additional criteria:  the alignment must exhibit a minimum level of sequence identity.  the alignment must cover at least a minimum fraction of the query protein. this second rule ensures that fusion genes such as rice osuk/uprt <dig>  <cit>  are eventually assigned as homologs of the dominating part of the protein. then equ. is evaluated for all x in a, so that proteinortho directly constructs the sparse graph , while  does not need to be stored at all. proteinortho therefore uses chained arrays, requiring only n × k entries, where k is the average number of nearly optimal blast alignments per gene, and k = a × n, where a is the average number of orthologs of a gene in a single species. the value of a is independent of the size of the dataset. empirically, we found a ≤  <dig> in all datasets investigated so far. thus proteinortho saves a factor n2/n2ma = m/a ≥ m of memory. note that prokaryotes have m ≈  <dig> ...  <dig> proteins.

spectral partitioning
first we reduce the problem by determining the connected components ϒ* of since these can be treated separately. we use the well-known breath-first search approach  <cit>  to this end. in order to check whether a connected component Ξ is sufficiently dense to represent a single set of co-orthologs we compute its normalized algebraic connectivity . here n is the number of vertices of Ξ and αalpha <dig> is 2nd-smallest eigenvalue of the graph laplacian l = d - a of Ξ  <cit> . here a is the adjacency matrix of Ξ and d is the diagonal matrix of the vertex degrees. the eigenvalue αalpha <dig> can be computed iteratively, see additional file  <dig>  values of  indicate dense clusters that most likely correspond to coherent sets of orthologs. small values , on the other hand indicate that Ξ has a low connectivity and either consists of two or more dense components or it has  tree-like protrusions. very large components  can arise when genes duplicate frequently and diverge quickly according to the duplication-degeneration-complementation  model  <cit> .

the "fiedler vector" x <dig>  i.e., the eigenvector of l to eigenvalue α <dig> can be used to find a partition of Ξ into two connected components, one consisting of the vertices for which x <dig> has positive entries and one for which x <dig> has negative entries  <cit> . this decomposition is iterated until Ξ is partitioned into components with algebraic connectivity  above a certain threshold value and tree-like pieces, which most likely correspond to false-positive edges of ϒ*. in order to speed up the computation, trees are therefore removed from the component Ξ before the algebraic connectivity and the fiedler vector is computed. this is achieved by iteratively removing a vertex of degree  <dig> and its adjacent edge. this step is not performed if proteinortho is used to compare only two species.

we remark that the memory and cpu consumption for the clustering step of orthomcl can be drastically reduced by using a novel algorithm  <cit> , reaching a performance that is theoretically comparable to spectral partitioning as used by proteinortho . both require only the storage of edge or adjacency lists. the current implementation of spectral partitioning could be further optimized e.g. by employing the lanczos algorithm  <cit>  for computing the eigenvalues. spectral partitioning on average scales as o. this leads to an expected runtime of o for proteinortho which is comparable to the o complexity bound achieved for cog clustering in  <cit> .

evaluation of proteinortho
we compared proteinortho with the cog-database  <cit>  and orthomcl <cit> . the latter is the main competitor in terms of speed and memory. the cog-database provides a manually curated dataset that can be regarded as more reliable than fully automated approaches. for benchmark analysis, a set of  <dig> randomly chosen bacteria from three different classes  are used. the input set comprises  <dig>   <dig> protein sequences.

domain-wide commons
in order to demonstrate that proteinortho is suitable for large-scale analysis we asked which proteins can be found in all bacterial species? proteins that are conserved domain-wide are likely to be useful for the construction of a phylogeny of eubacteria as an alternative to the prevalent usage of 16s rrna sequences  <cit> . they can also serve as protein-based markers for identifying novel bacterial species as members of an established phylogenetic group. in addition, they can give insight into basic protein equipment of bacterial life. hence, we applied proteinortho to the set of all eubacterial proteomes available at ncbi at the beginning of  <dig> .

the input dataset comprises  <dig>   <dig>   <dig> proteins annotated in  <dig> bacterial genomes. the proteinortho run took less than two weeks using  <dig> processor cores  distributed over multiple pcs. only  <dig> gb memory were required. orthomcl could not be employed for this task on the hardware available in our lab. extrapolating from the benchmarks in figure  <dig>  we estimate that hundreds of gigabytes of memory and years of runtime would have been required.

proteinortho identified  <dig> proteins as core of the bacterial protein complement, occurring in at least 90% of all  <dig> free-living and endosymbiotic bacteria. of these,  <dig> are ribosomal subunits. the  <dig> apparently most indispensable proteins, occurring in 99% of all bacteria, are:

elongation factor tu 

elongation factor g

translation initiation factor if-2

rna polymerase subunits β and β'

atp-dependent metalloprotease ftsh

o-sialoglycoprotein endopeptidase

methionine aminopeptidase

f0f <dig> atp synthase subunits α and β

dimethyladenosine transferase

 <dig> ribosomal protein of the 30s rrna subunit

 <dig> ribosomal proteins of the 50s rrna subunit

 <dig> gtp-binding proteins

 <dig> trna synthetases

a more detailed list, including unique identifiers for groups of proteins can be found in the supplemental material. the sensitivity of proteinortho in this survey is limited by incomplete annotation in many species, which we complemented here by tblastn searches with fairly restrictive cut-off values, see methods for details. figure  <dig> summarizes the results quantitatively, emphasizing the effect of incomplete annotation. we remark that this example also shows that proteinortho can be used to complement existing annotations in an automatic fashion.

nevertheless, about one third of the  <dig> most conserved proteins could not be recovered in the genomes of the two species with the smallest proteomes in our dataset: candidatus carsonella ruddii pv and candidatus sulcia muelleri gwss. both are endosymbionts that are considered as organelle-like  <cit> . numerous genes that are otherwise considered to be essential for life have been reported as missing in both species. a more detailed and larger list of domain-wide common proteins can be downloaded at http://bioinf.pharmazie.uni-marburg.de/supplements/proteinortho/.

CONCLUSIONS
proteinortho implements a blast-based approach to determine sets of orthologous proteins or nucleic acid sequences that generalizes the reciprocal best alignment heuristic. the software is optimized for large datasets, and in particular provides a drastic reduction of the memory requirements compared to earlier tools. it can therefore be run on off-the-shelf pc hardware for large datasets. our implementation scales very well with the number of available processor cores. the blast searches can be trivially parallelized and distributed easily to multiple pcs without the need for a cluster management system, while deployment to existing cluster infrastructure is also supported.

proteinortho views orthology detection as a variant of graph clustering since co-orthologous sets correspond to maximal complete multipartite subgraphs, which at the same time are well separated from each other. due to the unavoidable noise in the real data, however, co-orthologous sets appear as dense subgraphs without clearly recognizable low-weight cuts. this property is measured quite well by the algebraic connectivity. at the same time, low-weight cuts between dense regions are identified very well by the corresponding fiedler vector. we therefore employ spectral partitioning instead of a direct graph clustering approach. the quality of the co-orthologous sets proposed by proteinortho is comparable to the performance of orthomcl.

both time and memory requirements are significantly reduced compared to earlier approaches, enabling applications that were infeasible before. for instance, we applied proteinortho to the complete set of  <dig>  million proteins from the  <dig> bacterial genomes available at ncbi at the beginning of  <dig>  we found  <dig> proteins that are present in more than 99% of the investigated sequences.

