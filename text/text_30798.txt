BACKGROUND
next-generation sequencing  technologies are important tools for studying genome-wide dna and rna expression, single nucleotide polymorphisms , mutations and alternative splicing  <cit> . when a sequencer calls a specific base, there is a small chance that it will make an error and call an incorrect base. this sequencing error rate is machine, run and sample specific, but it occurs at a rate of approximately 1/ <dig>  <cit> , resulting in tens of millions of errors in a single experiment. a quality score is also provided for each base, corresponding to the probability of a sequencing error. unfortunately, it has been shown that the reported quality scores are inaccurate . thus, it is essential to recalibrate base quality scores so that they more accurately reflect the probability of a sequencing error. incorporating these recalibrated quality scores into downstream analyses, such as variant calling, can produce more accurate and confident results  <cit> . 

ewing and green  <cit>  propose a method, phred, which calibrates quality scores using fluorescence intensity data. however, many labs do not have the resources to store fluorescence intensity data and are unable to use such calibration tools. therefore, there is a need to recalibrate the quality scores that are produced by the sequencer machine. there exist recalibration tools that only require aligned sequence data, with two of the most popular being gatk  <cit>  and the baq option in samtools  <cit> , which both run on unix.

here we present a novel r package, reqon , that recalibrates the quality scores from a bam file of aligned sequencing data. reqon also produces diagnostic plots  that identify read positions with a significant number of errors, visualize the distribution of quality scores before and after recalibration, and show the improvement in accuracy of the recalibrated quality scores. reqon uses a different model than other available recalibration tools and proposes an improved statistic for comparing recalibration performance. to our knowledge, reqon is the first recalibration tool written in r.

implementation
reqon is open source software, written in r and available through the bioconductor project  <cit> . this section describes the reqon algorithm developed to recalibrate base quality scores.

input
the input to reqon is an indexed and sorted bam file  <cit>  with quality scores reported in the qual field. the reads can be aligned to any genome using any alignment algorithm. the recalibration results will be dependent on the accuracy of these alignments.

algorithm
reqon uses logistic regression to recalibrate the quality scores. the following parameters must be specified:

· region: genomic coordinates of the region that the regression model is trained on. this training region must be large enough to obtain accurate coefficients for the regression model. on the other hand, specifying a larger than necessary region will increase run time and may overfit the model to the training set. we recommend training on one of the smaller chromosomes, or specifying maxtrain, described next.

· maxtrain : this allows the user to train on a fixed number of bases from a large training region. for example, training on the first  <dig> million bases of the genomic region given in region is achieved by setting maxtrain =  <dig> , <dig>  typically, results are consistent when training on at least  <dig> million bases and do not improve when the training size is larger than  <dig> million bases.

· refseq: file containing the reference sequence corresponding to the training set.

· snp : file of known variant locations to remove from the training set before recalibration.

· nerr: the maximum number of errors tolerated at a genomic position . positions with more than nerr errors may likely be true variants, so bases from these positions are removed from the training region.

· nraf: the maximum non-reference allele frequency at a genomic position that is allowed . positions with non-reference allele frequency greater than nraf are removed from the training set for the same reason as nerr.

the first step is to read the training region, specified by region and maxtrain, from the input bam file. positions that are listed in snp are removed from the training set. next, sequencing errors are identified as bases that do not match refseq. in reality, some of these identified bases will not be errors but instead correct calls, such as novel variants or mapping errors. in an attempt to remedy this issue, two different thresholds are set to remove positions most likely to contain false error calls. at each genomic position, thresh = max{nerr, nraf × coverage} is calculated. this threshold sets a maximum number of allowable called errors for positions with low coverage, and a maximum frequency of non-reference bases for positions with high coverage. the default settings allow up to  <dig> errors per position if the coverage is less than 60x, and more errors  for positions with at least 60x coverage. positions with more called errors than thresh are identified and removed from the training set. note that when we say that “a position is removed from the training set,” this is different than keeping the bases at this position in the training set but switching the call from error to non-error. instead, all bases at this position are removed from the training set due to low confidence of the error call.

every base in the training set has now been classified as either error or non-error. there is a strong relationship between errors and their position in the read. most errors occur at the end of the read, due to technical aspects of the sequencing process  <cit> . this same pattern is present in figure 1a, which shows the distribution of sequencing errors in the training set by their read position. the rest of figure  <dig> is described in more detail in the next section. to account for these high-error read positions in the reqon regression model, the algorithm flags read positions that have more errors than a specified threshold, set at  <dig>  times the average number of errors per read position. this threshold is visualized by the dashed cyan line in figure 1a. for notational purposes, assume that there are k flagged positions, denoted as fp1fp <dig>  … fpk.

regression coefficients  are obtained from the following logistic regression model,logitprobabilityofy=1=β0+β1x1+β2x2+β3x3+β4x4+β5x5+β6x6+β7x7+β8x8+···+β7+kx7+k,

where y is the  response vector and the xs are  vectors of explanatory variables, as defined below.

· y = i{base i is a sequencing error }.

· x1 = original quality score of base i.

· x2 = i{x1 = 0}. many base calling algorithms assign a quality of zero to indicate bad or randomly called bases, so these bases are treated separately.

· x3 = average quality score across all bases in the read containing base i. this helps identify reads for which all bases are assigned low quality scores.

· x4 = read position of base i.

· x5 = i{base i = a}.

· x6 = i{base i = c}.

· x7 = i{base i = g}.

· x7+m = i{x4 = fpm} for m =  <dig>  …, k. these indicator variables identify bases originating from one of the flagged read positions.

additional covariates were originally considered, but those that did not improve model performance were dropped from the final model.

due to memory constraints, it is not practical to fit the model when the training set contains tens of millions of bases. instead, the training set is split into smaller subsets of no more than  <dig> million bases and the regression model is run on all subsets. then, for each coefficient, the median is calculated over all regression models. once these median regression coefficients are obtained, the model is applied to each base in the input bam file to obtain predicted error probability values. these probabilities are transformed to the phred scale  <cit>  and rounded down to the nearest integer.

output and visualizations
reqon outputs a bam file with original quality scores replaced by the recalibrated scores. additionally, reqon produces diagnostic plots  which show the effectiveness of the quality score recalibration on the training set. plot a shows the distribution of errors in the training set by their read position. any read position above the threshold  is given an additional indicator variable in the regression model, discussed in the previous section. plot b shows the relative frequency distribution of quality scores both before  and after  recalibration.

the bottom two plots show the reported quality score versus the empirical quality score before  and after  recalibration. the empirical quality score is calculated by computing the observed error rate for all bases in the training set that are assigned a specific quality score. this error rate is then converted to the log-transformed phred scale. if the quality scores are accurate, which occurs when the observed and reported sequencing error rates match, the points will fall on the 45-degree line.

the bottom plots also report the frequency-weighted squared error , a measure of how close the points lie to the 45-degree line. fwse is calculated by squaring the error , weighting this squared error by its relative frequency  and summing across all quality scores. fwse will be close to zero if the quality scores accurately reflect the probability of a sequencing error.

RESULTS
accuracy
as an example, two replicates of rna from the u <dig> glioblastoma cell line  <cit>  were sequenced using illumina’s genome analyzer ii, representing identical sequence runs but of slightly differing quality. for both cell line replicates, reqon was run using the default settings with the model trained on chromosome  <dig> 

comparison of fwse for two cell line replicates between original quality scores reported from the sequencer machine and after recalibration with reqon, gatk and baq. reqon quality scores have the lowest fwse values, corresponding to increased accuracy. reqon does not overfit the model to the training set, shown by the roughly equivalent fwse values for both the training  and testing  sets after recalibration.

discrimination
another desirable property of quality scores is the ability to separate sequencing errors from true variants. to perform this analysis, all bases that do not match refseq  are analyzed. these non-reference bases are further classified as true variants  or sequencing errors . similar to the training set, bases identified as sequencing errors are removed if there are more than two errors at a position  as these may represent novel variants or systematic alignment errors. to increase confidence in the true variant calls, positions identified as true variants with less than  <dig> non-reference bases  are also removed, as these may actually be sequencing errors.

classification performance is measured by the area under the corresponding receiver operating characteristic  curve, or auc. figure  <dig> plots the relative frequency distributions of quality scores for non-reference bases in chromosome  <dig>  an independent testing set. the red curve plots the distribution of bases belonging to positions in dbsnp  and the blue curve plots the distribution of bases identified as sequencing errors . plot a shows the distribution of original quality scores before recalibration. the auc for the original quality scores is  <dig> , representing reasonable separation between the two classes. plot b shows the distribution of quality scores after recalibration with reqon. the two curves now have very different distributions. the quality scores of most bases at positions in dbsnp  have high quality scores . it is possible that many of the lower quality bases at positions in dbsnp may be sequencing errors, as bases belonging to any third alleles were not filtered out. in contrast, the quality scores of sequencing errors  are mostly below  <dig>  this better separation between the two classes is supported by the increased auc . this analysis shows that, in addition to providing quality scores that more accurately reflect the probability of a sequencing error, the recalibrated quality scores also do a better job of distinguishing sequencing errors from true variants. the auc statistics for both cell line replicates are shown in table  <dig> 

comparison of auc for two cell line replicates recalibrated with reqon, gatk and baq. bases from chromosome  <dig> that do not match the reference sequence are separated as belonging to positions in dbsnp version  <dig> or not. overall, all three recalibration methods outperform the original quality scores. reqon and gatk have similar auc values, with both methods outperforming baq.

comparison to gatk and baq
there are other available computational tools that recalibrate base quality scores. for example, some variant calling tools, such as atlas-snp <dig>  <cit>  and soapsnp  <cit> , recalibrate the quality scores as part of their algorithm. these tools incorporate the recalibrated qualities into their method, but do not output a file with the recalibrated scores. therefore, we are not able to compare their performance to reqon.

the most popular recalibration tool is embedded in the genome analysis toolkit   <cit> . there are four main differences between the recalibration algorithms of reqon and gatk.

 <dig>  gatk runs on unix. reqon is an r package.

 <dig>  gatk does not recalibrate bases originally assigned a low quality score, with the default threshold set at  <dig>  reqon recalibrates all bases regardless of original quality score.

 <dig>  gatk requires a reference sequence file for the entire genome and trains its model on all bases in the input bam file. reqon allows the user to specify a smaller region of the genome  to train the model, only requiring reference sequence for this training region.

 <dig>  gatk identifies sequencing errors by filtering out known variant positions, then calling all bases that do not match the reference sequence as errors. while reasonable on average, some of these non-reference bases will not be sequencing errors but instead novel variants or systematic mapping errors. in contrast, reqon utilizes information from multiple reads by removing positions from the training set that do not pass quality thresholds .

another commonly used recalibration tool is baq   <cit> . baq uses hidden markov models to accurately measure the probability of a base being incorrectly aligned. baq is not a traditional recalibration algorithm in the sense that it does not attempt to adjust quality scores so that they better reflect the probability of a sequencing error. to account for incorrectly aligned bases, original quality scores are adjusted by taking the minimum of the original quality score and the baq score. baq has been shown to improve the accuracy of snp discovery and resolve false snps caused by indels  <cit> . there are four main differences between the methods of reqon and baq.

 <dig>  baq is implemented in the samtools software package  <cit>  which runs on unix. reqon is an r package.

 <dig>  baq requires a reference sequence file for the entire genome. reqon only requires reference sequence for the specified training region.

 <dig>  baq can only decrease the base quality score. reqon allows quality scores to be adjusted both higher and lower.

 <dig>  baq only adjusts quality scores to account for alignment errors. we believe that alignment errors and uncertainty should be reflected in the mapping quality score and that the base quality score should correspond to the probability that the base is a sequencing error. to separate the effects of sequencing errors from alignment errors, reqon filters out bases that may be alignment errors from the training set before training the model.

in order to assess the accuracy of all three methods, table  <dig> compares the fwse statistic between reqon, gatk and baq for two separate chromosomes,  <dig> and  <dig>  on the two cell line replicates. note that while gatk and baq train their models on the entire genome, reqon only trained its model on chromosome  <dig>  in this regard, chromosome  <dig> can be viewed as an independent testing set when assessing model performance for reqon but not gatk or baq. error calls were made in the same manner as the reqon algorithm, which we feel more accurately identifies true sequencing errors, as described previously. in every case, fwse is much lower for quality scores recalibrated with reqon than gatk or baq. from this, we can conclude that the recalibrated quality scores from reqon more accurately represent the probability that a base is a sequencing error.

in order to determine how well gatk and baq quality scores distinguish between non-reference bases classified as sequencing errors and non-reference bases belonging to positions of known variants, the discrimination analysis was repeated using the gatk and baq recalibrated quality scores. table  <dig> shows the auc for the original quality scores and the recalibrated quality scores. all of the recalibration methods outperform the original quality scores for both cell line replicates. the discrimination performance of gatk and reqon is approximately the same, with gatk performing better in one replicate and reqon performing better in the other replicate, and both outperforming baq.

discussion
the previous analyses show that the original quality scores assigned by the sequencer machine are neither accurate nor do a good job of discriminating sequencing errors from non-errors. reqon, gatk and baq produce much more reliable quality scores, although the quality scores assigned by reqon are more accurate than those assigned by gatk or baq . in most cases, any of the three recalibration algorithms is reasonable to use, but there are some distinct differences.

the algorithms of reqon and gatk consider very similar covariates, yet tables  <dig> and  <dig> show that reqon performs just as well as, and in most cases better than, gatk. reqon’s better performance than gatk can be attributed to two main differences: recalibrating low-quality bases and filtering out mismatch bases that may be due to true variants or mapping errors.

first, as previously mentioned, gatk chooses not to recalibrate bases with very low quality scores, with the default quality threshold set at  <dig>  their reasoning is that these quality scores indicate bad or randomly called bases by the sequencer, so these original qualities should be kept as is. this makes sense if these low-quality bases are filtered out before later analyses. however, investigators may prefer not to filter out low-quality bases, such as when sequencing experiments are expected to yield low coverage. under this low coverage setting, it makes more sense to recalibrate all bases, regardless of quality score, which is how reqon operates. due to this difference, in general, the low quality bases of gatk have poor accuracy because they are not recalibrated. in contrast, the recalibrated low-quality scores from reqon are much more accurate.

the low-quality bases that gatk chooses not to recalibrate have a large contribution to its fwse , indicating decreased accuracy. if these low qualities are removed from the analysis, then fwse is approximately equal between gatk and reqon. for a more exact comparison, we could have changed the threshold for gatk and recalibrated all bases regardless of its original quality score. but, as most users will use the default settings when running either recalibration algorithm, we choose to only compare the output using these default settings.

a second main advantage of reqon over gatk is the criterion used for identifying sequencing errors. gatk identifies sequencing errors by filtering out known variant positions, then calling all bases that do not match the reference sequence as errors. in reality, some of these bases will not be sequencing errors but will be correct calls, such as novel variants or mapping errors. these miscalls disproportionately affect the higher quality scores. because gatk's observed error rate is approximately the sum of the sequencing error rate, the alignment error rate and the rate of novel variants, gatk will be underestimating the true quality. in contrast, reqon goes a step further by utilizing information from multiple reads and removing positions from the training set with low confidence in the error calls . figure  <dig> shows an example of such a position. for cell line replicate  <dig>  reqon removed  <dig>  bases at  <dig>  positions  from the training set that gatk called as sequencing errors. these removed positions are likely to be novel variants or mismatches due to systematic alignment errors. reqon identifies these positions without prior knowledge; in contrast, gatk would need information about these positions in order to remove them when building its model. therefore, reqon should be preferred when the data are aligned to unfinished genomes, where many mapping errors are expected, or when an input file of known variant positions is not available.

an additional main difference between the recalibration algorithms is that gatk tests model performance on the same data that were used in training the model . this approach leads to over fitting and overly optimistic estimates of the error. this issue, along with the concern of falsely identifying non-reference bases as sequencing errors, calls into question the true performance of gatk recalibration. on gatk’s software website  <cit> , the authors discuss the option of training their model on a smaller subset of the data to reduce runtime. the authors provide evidence that training the model on a subset of the data leads to decreased accuracy. they conclude that users interested in maximum recalibration accuracy should continue to train on the full data set. we view this as further evidence that the gatk model overfits to the training data and, thus, overestimates the true model performance. in contrast, reqon trains the model on a training set, which allows performance to be measured on a separate testing set. the analyses presented in the results section show that reqon does not overfit the model to the training data.

reqon was also compared to baq, which is not a traditional quality score recalibration algorithm in the sense that it does not attempt to adjust quality scores so that they better reflect the probability of a sequencing error. instead, baq only considers alignment quality and adjusts the base quality when the alignment quality is low. due to the difference in motivation, reqon greatly outperforms baq in terms of accurately representing the probability of a sequencing error, shown in table  <dig>  baq adjustment has been shown to improve snp calling  <cit> , especially in reducing false calls at positions near indels. table  <dig> shows that reqon does a better job at distinguishing non-reference bases belonging to dbsnp, representing true variants, from non-reference bases at other positions, representing mainly sequencing errors with possibly a few novel variants. although more detailed analysis is required, this suggests that, overall, reqon may be as effective at improving variant calling as baq.

like all available base quality score recalibration algorithms, the reqon results will be dependent on the accuracy of the read alignments. alignment becomes much more complicated when considering indels, variants, splicing or poorly annotated genomes. baq incorporates mapping quality into its recalibrated scores. however, as seen in table  <dig>  this comes at the cost of the quality scores accurately representing the probability that a base is a sequencing error. we believe that alignment quality should be represented in mapping quality scores and that base quality scores should only convey information about the likelihood of a base being a sequencing error. reqon attempts to separate out mismatches due to alignment by identifying and removing such bases from the training set. following the assumption that mapping errors occur in a more systematic fashion than stochastic sequencing errors, this filtering is achieved through the use of parameters nraf and nerr. while this may not remove all effects of alignment on the quality score, it demonstrates a marked improvement over gatk which fails to consider alignment-specific sources of error.

CONCLUSIONS
the results presented here demonstrate the need for quality score recalibration, especially if these quality scores are used in downstream analyses. we presented a novel r package, reqon, which produces quality scores that are both more accurate, in the sense that they more closely correspond to the probability of a sequencing error, and do a better job of discriminating between sequencing errors and non-errors. reqon was compared to two of the most commonly used recalibration algorithms, gatk and baq. all recalibration algorithms significantly outperform the original quality scores in terms of accuracy and discrimination performance. reqon produces more accurate quality scores than gatk and baq, although in most cases, any recalibration algorithm is reasonable to use. however, due to differences in the underlying assumptions and model used to recalibrate the quality scores, we strongly recommend recalibrating with reqon when trying to identify novel variants, or when aligning to genomes that are unfinished or have incomplete databases of known variant positions.

