BACKGROUND
phylogenetic trees are commonly used in evolutionary biology to represent the evolution of a set of extant species. trees are an appropriate representation of evolutionary history when dealing with species where genes are strictly vertically inherited. however, there are a rapidly growing number of well-supported cases of horizontal gene transfer  <cit> , and thus a need for the development of tools for detecting and identifying specific hgt events.

introduced to evolutionary biology by hein  <cit>  the graph-theoretical operation "rooted subtree prune and regraft"  is recognized as a way to understand and represent reticulate evolution  <cit> . loosely described, an rspr prunes a subtree of a rooted tree and then reattaches it to another part of the tree.

given any two incongruent rooted phylogenetic trees where the incongruence can be explained by a single reticulation event, one tree can be constructed from the other by a single rspr. if more than one reticulation event is needed to explain the incongruence, the events can be modeled by a series of rsprs. assuming that the two gene trees are correct, the minimum number of rsprs between them  gives a lower bound on the number of reticulation events required to reconcile their topologies. for any two gene trees there may be a number of minimal rspr solutions.

the general problem of calculating the minimum number of rsprs is np-hard, but it is also shown that when parameterized by the distance between the two trees, calculating the rspr distance is fixed-parameter tractable  <cit> . reticulation events are relatively rare in biology, indicating that in many biologically relevant cases the number of rsprs will be small enough to be found within reasonable time. two 3-approximation algorithms to the minimum rspr problem are suggested  <cit> , however both of them are actually 5-approximations  <cit> . a novel 3-approximation algorithm and a fixed parameter tractable exact solution are reported in  <cit> . another exact solution and implementation, sprdist, is reported in  <cit> .

our two main goals in this paper are to present a novel algorithm based in part on the findings in  <cit>  together with its implementation in software and to provide a benchmark comparisons of both exhaustive and heuristic software estimating the minimum number of rsprs between a pair of trees, i.e. the rspr problem. the software, sprit  determines the minimum number of rsprs needed to transform one rooted binary phylogenetic tree into another. in this section, we give the formal definitions needed to describe the algorithm as well as some additional background.

the definitions follow those of  <cit> .

let t be a rooted binary phylogenetic x-tree. to define the rspr we append a vertex p at the end of a pendant edge attached to the original root of t. let u be a vertex on the path from p to v and e = {u, v} an edge of t where e is not incident with p. let t' be the rooted binary phylogenetic tree obtained from t by deleting e and then adjoining a new edge f between v and the component cu that contains u by:

i. creating a new vertex u' which subdivides an edge in cu, and adjoining f between u' and v, and

ii. contracting the degree-two vertex u

a single rspr obtained t' from t.

the rspr distance between two rooted phylogenetic x-trees t <dig> and t <dig> is defined to be the minimum number of rspr needed to transform one tree into the other. this distance is denoted drspr .

let t be a rooted binary phylogenetic x-tree. the neighbourhood n of t is defined to be all rooted binary phylogenetic x-trees, which can be constructed by performing one rspr on t.

let t and t' be rooted binary phylogenetic x-trees. any pendant subtree t that occurs in both t and t' is replaced by a single leaf l with a new label in both t and t'  <cit> . we denote this process collapsing subtree t on t and t'. in figure  <dig>  trees n <dig> and n <dig> both have a subtree containing taxa  <dig> and  <dig> that can be collapsed with regard to tree t.

cumulative rsprs are sets of rsprs that operate on the same taxa in succession creating entangled rsprs, i.e. cycles of genetic inheritance. tree t' <dig> in figure  <dig> is separated from tree t by two cumulative rsprs, while tree t' <dig> has two non-cumulative rsprs separating it from t.

let t and t' be rooted binary phylogenetic x-trees. pendant subtrees occurring in t and t', including a minimum set of the same taxa, but with non-identical topology, is defined to be a minimal common cluster  of t and t'.

closely related to the minimum rsprs distance is the hybridization number of two trees. the hybridization number is defined to be the minimum rspr distance when no cumulative rsprs are included. mcc is a sound method to reduce the computational time when calculating the hybridization number, but it does not always preserve the rspr distance  <cit> . however, as being able to subdivide the rspr problem has the potential to reduce the time spend on identifying a solution significantly, we have added the following conjecture and an option to calculate solutions based on it in sprit.

we conjecture that:

let t and t' be rooted binary phylogenetic x-trees. any mcc of t and t' is considered a solvable common cluster  only if the parent of the mcc in t and t' has the same set of taxa. solving a scc instead of a mcc preserves the rspr distance.

the scc allows us to gain the speed-up from the cluster reduction, while still calculating the correct solution.

the proposed algorithm for identifying the minimum rspr distance consists of three major operations:

i. collapsing identical subtrees to reduce the problem size

ii. divide and conquer by identifying sub-problems in sccs

iii. depth first search to solve sub-problemsiv.

implementation
the algorithm can be broadly divided into two sections, a <dig> and a <dig>  a <dig> performs pre-processing, reducing the problem and identifying sub-problems suitable for solving individually. a <dig> calculates the rspr distance between two rooted binary phylogenetic x-trees t and t'. pseudo-code describing a <dig> and a <dig> are given in figure  <dig> and  <dig> respectively. below is an informal description of a <dig> and a <dig> 

a <dig> takes two rooted binary phylogenetic x-trees t and t' as input . it proceeds to kernalize the problem by collapsing identical subtrees t from t and t' until only collapsed or non-identical subtrees remain, thus creating the reduced tr and t'r .

using a divide and conquer approach the solvable common clusters  with the least number of taxa in tr and t'r are identified. t and t' are submitted to a <dig>  which calculates the drspr  and returns the solution to a <dig> 

the subtree t' is then collapsed in t and the process of collapsing and identifying sccs is repeated until t and t' are identical. a <dig> returns the sum of the solutions calculated by the calls to a <dig> 

a <dig> is recursive and takes two incongruent rooted binary phylogenetic x-trees, t and t' as input . a <dig> performs a greedy but exhaustive, depth first search for drspr . the greedy search quickly identifies an upper limit to the drspr . all possible solutions shorter than the upper limit are evaluated, ensuring a minimal solution. the depth first approach reduces memory requirements and the number of cases that need to be evaluated.

in a <dig>  the neighborhood n of t is created. each neighbor n in n is compared to t', if n is identical to t' a solution equal to the current level of recursion has been found and is reported as an upper limit. if no identical match to t' is found in n, a <dig> proceeds to evaluate all neighbors in n. each neighbor in n is compared to t' and any identical subtrees are collapsed. the number of remaining uncollapsed leaves in each neighbor is used to sort n with the lowest number of uncollapsed leaves first, thus creating the sorted neighborhood ns. for one n in ns at a time a recursive call a <dig>  is made. this dept first, greedy, recursive search is continued until a limiting solution is found. once a limiting solution is found an exhaustive search is performed, which will either validate the existing solution or identify new limiting solution. after completing the exhaustive search, a <dig> returns the final limiting solution drspr .

methods and data
two data sets were used in this study. the first set was created by randomly performing rspr on trees as described in  <cit> . this set was used to extend the study published in  <cit>  and add, since published, exhaustive and heuristic rspr identification software.

 <dig> pairs of trees were downloaded from the eeep website  <cit> . the trees are included in additional file  <dig>  calculations on the  <dig> pair data set where limited identically to the original paper, i.e.  <dig> gb of ram and  <dig> hours of running time.

the second data set was produced by manually curating trees to produce non-cumulative rsprs. a tree containing  <dig> taxa was downloaded from the bird supertree project  <cit> . the tree was manually curated to create a series of  <dig> trees ranging from  <dig> to  <dig> rsprs distance from the original tree. the curated trees and the original are available in additional file  <dig>  the rsprs are non-cumulative, i.e. they are not dependent on each other . the calculations on the bird supertree were limited to  <dig> gb of ram and  <dig> hours of running time.

the following software was included in the benchmark:

eeep  <cit>  uses evolutionary reasonable constraints on the search space to limit the computations. a strict or permissive ratchet is used to restrict the number of trees investigated further. the trees can also be partitioned into regions of discordance that allows no spr operations between regions. rooted, unrooted, bifurcating and multifurcating trees can be processed by eeep.

horizstory  <cit>  collapses identical subtrees and performs recursive sprs until the tree topologies are reconciled. the spr distance between multifurcating trees can also be calculated using horizstory.

lattrans  <cit>  uses a time constraint to ensure that no cycles are introduced when identifying the minimum spr distance.

phylonet's  <cit>  hgt is based on an extended implementation of the riata-hgt algorithm  <cit>  rooted, unrooted, bifurcating and multifurcating trees can be used with phylonet.

sprdist  <cit>  uses integer programming to find the minimum rspr distance utilizing the connection between the maximum agreement forest  and the rspr distance proposed in  <cit>  and later amended by  <cit> .

tnt  <cit>  represents the trees in a matrix of group membership variables with state  <dig> for members and  <dig> for non-members. the matrix is used to guide the search for a minimal rspr path from one tree to the other. bi- and multifurcating trees are allowed.

hybridinterleave  <cit>  is a java implementation of the algorithm presented in  <cit>  that calculates the exact number of hybridization events needed to reconcile two binary phylogenetic trees. the minimum number of hybridization events is not identical to the minimum number of rspr but hybridinterleave was included as it is exact.

of these eight pieces of software, lattrans, phylonet, eeep and horizstory have the option to return multiple solutions, i.e. if there are several rspr paths with the same distance, several of them will be reported.

all trees used in benchmarking are available in newick format in additional file  <dig> and  <dig> 

any calculation failing due to memory or time constraints was not rerun, but considered a failed attempt. three different kinds of results were considered in this study. failed, i.e. the software was either unable to complete the analysis within the given time and memory limitations or crashed during execution. minimal solution, i.e. the smallest solution found by any software included in the study for a specific tree pair. solution, i.e. the software reported a solution but not necessarily the minimal solution.

tnt  <cit>  was run at the most sensitive settings of one million iterations and  <dig> "stratifications". all other software was run with default settings. on the first test set, sprit was run both with five hours and  <dig> seconds time limit.

RESULTS
the benchmark from  <cit> , comparing eeep, horizstory  <cit>  and lattrans  <cit>  was expanded with data for sprit, tnt  <cit> , phylonet  <cit> , sprdist  <cit>  and hybridinterleave  <cit>  and the results are presented in figure  <dig> 

small and medium trees
sprit delivers solutions to all tree pairs in both  <dig> h and  <dig> s setting. for each data set with  <dig> leaves and six, eight or ten rspr, sprit overestimates the drspr with one rspr in a single tree pair. phylonet and tnt solved all trees but both overestimated drspr with two or more rsprs in  <dig> and  <dig> tree pairs, respectively. lattrans solved all tree pairs, except two tree pairs with  <dig> rsprs, but overestimates drspr with at least two rsprs in seven cases. sprdist returns minimal solutions, but fails to deliver solutions for one tree pair with eight rsprs and seven tree pairs with ten rsprs. hybridinterleave was only able to complete one tree pair with eight rsprs and none of the tree pairs with ten rsprs. eeep was at best able to solve tree pairs with eight rsprs and horizstory at best with six. eeep successfully returned the minimal solution for all tests with three or less rsprs or four rsprs and ten leaves. among the other tests, seven tree pairs were overestimated with one rspr and one test with two rsprs. hybridinterleave and horizstory both failed to deliver solutions for a number of tree pairs but only overestimated the drspr with one rspr for a single tree, respectively, when the successful calculations were considered.

lattrans, phylonet, eeep and horizstory all have options to identify multiple possible solutions. considering the subset of  <dig> tests were these four programs returned the minimal solution, lattrans and phylonet returned the highest number of solutions in  <dig> cases, which all were shared with the other programs. horizstory returned the highest numbers of solutions in  <dig> cases of which  <dig> were unique to horizstory. the corresponding numbers for eeep were  <dig> solutions with  <dig> unique to eeep. the number of solutions returned by lattrans, phylonet and eeep are generally in the same magnitude, while horizstory, especially for tests with more than four rsprs, returns much higher numbers .

the test was timed and lattrans, sprdist, phylonet, tnt and eeep never came close to the five-hour time limit . of these five programs, tnt was closest, with a maximum run time of three hours. in addition, when these programs fail, they do so within five hours. sprit was time limited to five hours and was forced to use the full time span on the larger trees with six or more rsprs, but still returned a solution. on the other hand, sprit returned the same solution when the time limit was changed from five hours to  <dig> seconds . hybridinterleave and horizstory were the only software's that exceeded the time limit without returning a solution in tests with four, six, eight or ten rsprs and  <dig> or more leaves. phylonet was the fastest software, with a maximum computing time of  <dig> seconds.

large trees
in addition, sprit, phylonet, tnt, sprdist, hybridinterleave and lattrans were timed performing a search for the minimal rsprs distance on a very large tree, containing  <dig> taxa, manually curated with between  <dig> and  <dig> rsprs . sprit was run in exhaustive mode and the times were ranging from three to  <dig> seconds as the number of rsprs was raised from one to  <dig>  hybridinterleave solved all test sets in  <dig> seconds. tnt was also able to calculate all the test sets, but took three minutes with  <dig> iterations and  <dig> "stratifications". lattrans consumed too much memory and was only successful when the number of rsprs was seven or below, with times between  <dig> seconds and  <dig> minutes. sprdist failed when drspr was above six rsprs. phylonet consumed more than  <dig> hours per test and was considered unsuccessful.

the table shows the time needed to find the minimum rspr distance using sprit, lattrans, sprdist, phylonet, tnt and hybridinterleave. where no data is presented, the computation was aborted due to exceeding  <dig> h of computation time or  <dig> gb of ram.

discussion
in this paper, we present sprit, a novel algorithm and software implementation that solves the rooted binary drspr minimization problem. sprit can be used to identify the exact drspr solution as well as quick approximate solutions. we have compared sprit to other software, with heuristic or exact approaches to identifying solutions of the drspr, to evaluate their performance and ability to find correct solutions.

we downloaded a set of  <dig> tree pairs from  <cit>  and compared the performance of sprit to the published performance of eeep, lattrans and horizstory  <cit> . we also included phylonet  <cit> , tnt  <cit> , sprdist  <cit>  and hybridinterleave  <cit>  in the benchmark.

the benchmark was included to compare the ability to infer a solution within a specified time and whether the solution found was the minimum solution. sprit, phylonet and tnt were able to deliver solutions to all tree pairs within the stated limitations. phylonet and tnt however have a large margin of error on the delivered solutions compared to sprit. lattrans only fails to solve two tree pairs, but overestimates  <dig> tree pairs with in total  <dig> rsprs. horizstory, hybridinterleave and sprdist have none or a single error on the reported solutions, respectively. they are however unable to deliver solutions for  <dig>   <dig> and  <dig> tree pairs respectively. as horizstory exceeds the five-hour time limit on a number of tree pairs it should be considered that calculating multiple solutions might be more time consuming than returning a single solution. on the other hand, the other three programs calculating multiple solutions do so well within the time limit. given that hybridinterleave calculates the hybridization number and not the rsprs distance, we can conclude that these two measures are comparable in most cases.

eeep, lattrans, horizstory and phylonet all have options to report multiple solutions if there are more than one minimal rspr path. as shown in additional file  <dig>  horizstory returns considerably more solutions for the tests with four or more rsprs. this is partly because horizstory permutates the order of rsprs that effect distinct taxa and returns them as separate solutions. having a set of equally parsimonious minimal solutions could be beneficial when investigating the course of the reticulation events.

the test sets can be broadly divided into two categories, easy and hard to solve. the easy to solve tree pairs are characterized by lending themselves to a high degree of cluster reduction, i.e. the subtrees where the rsprs are located are small and the search space therefore limited. the rsprs in an easy to solve tree pair are generally non-cumulative.

the hard to solve tree pairs have the opposite characteristics i.e. the subtrees where the rsprs are located are large and the rsprs are cumulative. this increases the search space and reduces the use of cluster reduction.

given the rare nature of reticulation events, cumulative rsprs could be expected to be unusual when dealing with biological data. at the same time, the increasing speeds of computers combined with the continuous growth of available data makes it possible to infer larger phylogenetic trees with higher resolution than before. here, we represent those circumstances with a large tree containing  <dig> taxa manually curated to create a series of  <dig> trees with 1- <dig> rsprs of the simple type . sprit's, lattrans', sprdist's, phylonet's, tnt's and hybridinterleave's ability to kernalize and solve this rsprs minimization problem were tested. as shown in table  <dig>  sprit, tnt and hybridinterleave were the only software that could complete the full test set within  <dig> hours/case using less than  <dig> gb of ram. comparing these results to those of the smaller test set, makes it clear that lattrans, sprdist and phylonet are limited by the size of the trees as well as the number of rsprs. sprit, tnt and hybridinterleave on the other hand are not limited by the size of the trees but by the number and nature of the rsprs.

the fixed parameter tractable nature of the drspr minimization problem  <cit>  and the low frequency of reticulation events indicate that sprit can be used to quickly and accurately identify the minimum number of rsprs in very large phylogenies.

CONCLUSIONS
sprit's combined ability to always deliver a solution, deal with very large phylogenies, run in heuristic as well as exhaustive mode and a very low rate of overestimation in heuristic mode makes it suitable for identifying rsprs and involved taxa.

availability and requirements
• project name: sprit 

• project home page: http://code.google.com/p/phylogenetics/

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> or higher

• license: gnu gpl

• any restrictions to use by non-academics: none

abbreviations
rspr: rooted subtrees prune and regraft; drspr: minimum rspr distance; sprit: spr identification tool; eeep: efficient evaluation of edit paths; hgt: horizontal gene transfer; np: nondeterministic polynomial; mcc: minimal common cluster; scc: solvable common cluster.

authors' contributions
th, ts and av performed initial studies. th, mt, rf and hs conceived the study and participated in its design. th and kn participated in its design and in the writing of the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
the software, documentation and example files are included in the file. the most recent version is available at http://code.google.com/p/phylogenetics/.

click here for file

 additional file 2
 <dig> pairs of trees were downloaded from the eeep website <cit> , they are included in this file.

click here for file

 additional file 3
a tree containing  <dig> taxa was downloaded from the bird supertree project  <cit> . the tree was manually curated to produce fifty trees ranging from one to fifty rspr in distance from the original tree. the file contains the fifty trees and the original.

click here for file

 additional file 4
lattrans, phylonet, eeep and horizstory all return multiple solutions. here, the distributions of the number of trees are presented as median . the tests have been separated in groups of ten depending on the number of rsprs and the number of trees. the first column for each program gives the distribution for the correctly solved trees and the second column represents the incorrect solutions.

click here for file

 additional file 5
the software was timed on each test in the small to medium size test set. the distributions of calculation time are presented on the form median . the first column for each piece of software gives the calculation times for correctly solved tests, the second gives incorrectly solved tests and the third gives the elapsed time when the calculations failed.

click here for file

 acknowledgements
the swedish research council , the swedish society for medical research , petrus and augusta hedlunds stiftelse, magnus bergvalls stiftelse and the novo nordisk foundation, supported the studies.
