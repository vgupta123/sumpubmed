BACKGROUND
flow cytometry  is a high-throughput technology that offers rapid quantification of a set of physical and chemical characteristics for a large number of cells in a sample. the technology is widely used in health research and treatment, including for monitoring of infection, diagnosis of cancers like lymphoma and leukaemia, and auto–immune diseases
 <cit> . it is also used for cross-matching organs for transplantation and in research involving stem cells, vaccine development, apoptosis, phagocytosis, and a wide range of cellular properties including phenotype, cytokine expression, and cell-cycle status
 <cit> . importantly, clinical trials in these fields often use flow cytometry to monitor the immune system or the progression of a disease over time, generating large amounts of data in the process.

variation in instrumentation, antibody staining, reagent lots, and other technical problems can crop up over time and manifest themselves as biases in the extracted cell subpopulation statistics or fluorescence intensities. such errors are neither obvious nor easy to detect via the examinations of dot plot outputs from individual fcs files that are performed as part of regular, daily quality control procedures in a flow cytometry core. careful and systematic examination of gated populations over time and in the context of the larger study design together with follow–up analysis of experimental metadata is often necessary to identify the problematic samples as well as the underlying cause of the bias . there is currently a paucity of tools to help investigators effectively and systematically perform quality assessment on large and complex flow cyotmetry data sets
 <cit> .

existing tools
bioconductor provides a suite of open-source tools and software infrastructure to analyze fcm and other high–throughput data
 <cit> . the core of this tool set includes flowcore, flowviz, flowq, and flowstats, which together provide functionality for basic data manipulation, visualization, automated gating, and some basic quality control
 <cit> . the flowq package provides high–level quality control procedures for ungated fcm data using statistical approaches to detect disturbances or unusual patterns in the signals of each channel during acquisition
 <cit> . however, the package is restricted to global measures of quality, as it can only handle ungated data and cannot leverage the complex metadata associated with the larger structure of an fcm study .

in order to perform quality assessment of manually gated data, the manual gates and gated data must be accessible to the computational framework for quality assessment. one of the most popular software packages for performing manual fcm gating is flowjo . this tool generates “workspace” files in xml format that define the preprocessing and gating applied to a set of fcs files. currently, the flowflowjo package provides some limited support for importing manually gated data into r from workspace files generated by older windows–only versions of the software . however, it does not support workspaces generated by newer versions of flowjo , or workspaces generated by flowjo for mac os x. importantly, flowflowjo does not correctly handle flowjo’s specific biexponential data transformation and it is limited to manipulating small data sets that can fit in the available physical memory of the computer
 <cit> . thus large, real–world fcm data sets generated in clinical studies and data sets analyzed using recent versions of the flowjo or other manual gating tools remain inaccessible to users of bioconductor’s flow tools.

to address these issues, we have developed two new bioconductor packages: flowworkspace and qualifier . flowworkspace makes manually gated data from large, arbitrarily complex fcm studies accessible in the r environment. it imports compensation matrices, data transformations, manual gates, and fcs files from analyses described in flowjo workspaces , and reproduces them using the bioconductor flow toolset, thus making manually gated data accessible to the computational flow community. the tool has methods implemented for visualizing, summarizing, extracting and exporting population statistics for gated cell populations. importantly, the tool can handle large fcm data sets through support of netcdf via the ncdfflow package
 <cit> . flowworkspace can also be used to export data to the labkey  tool, allowing one to use r as the engine for flow data analysis with a labkey front end and data repository
 <cit> . the package is closely integrated with other bioconductor flow tools, including normalization via the flowstats package and quality control using qualifier <cit> . flowworkspace makes manually gated flow cytometry data of arbitrarily large size  accessible for analysis using bioconductor’s flow tools, so that new or automated data analysis strategies can be rapidly compared against current best–practices manual gating methods.

the qualifier package uses flowworkspace to import the manual gates defined in the flowjo workspace and calculates summary statistics from each gated cell population. the tool also takes advantage of study metadata describing different samples, aliquots, staining panels and other experimental information to identify outlier samples and cell populations with respect to user–defined grouping variables. for example, the tool can be used to detect instrument variability or changes in reagent quality by monitoring the stability of fluorescence intensities across all samples over the time span of an entire study. these can be monitored in individual channels or in specific cell subpopulations. another example is use of qualifier to assess the consistency of gating specific cell populations in all samples in a study by monitoring the consistency of population statistics for samples derived from a common aliquot and performing outlier detection on cell population frequencies grouped by sample, conditional on the aliquot study metadata. the examples mentioned above are not exhaustive, and qualifier is a general, flexible framework for performing quality assessment flow data that integrates gating information with study–level metadata for each sample. a comparison of the quality assurance features available in flowq, flowjo, and qualifier is shown in table
 <dig> 

†although flowjo does not have internal qa tools, it can export arbitrary population statistics in csv format that may be analyzed in other software.

implementation
definitions
in the remainder of the paper we use bold face type to refer to software packages and teletype font to refer to object, classes, and functions in the packages.

integration
both packages make use of r’s s <dig> programming system to define classes and methods, adopting a formal object-oriented paradigm in their implementations
 <cit> . the packages are integrated with the larger flow cytometry package infrastructure available through bioconductor. flowworkspace is integrated with the bioconductor core flow packages, including flowcore for support of the full range of operations on flow data including compensation, transformation, and gating, large data set support through ncdfflow and visualization and plotting through flowviz. the qualifier package takes advantage of manual gates available through flowworkspace to perform quality assessment of both the gated and ungated fcm data, and produces visualizations of samples flagged as outliers for the further investigation through the flowviz package.

flowworkspace
flowworkspace makes use of r’s xml package and the xpath query language to parse and import flowjo xml workspaces 
 <cit> . the package reads in the list of samples, data transformations, compensation matrices, and gates associated with each sample in a workspace and constructs associated flowcore objects. the package implements two new data structures to represent this information: the gatinghierarchy and the gatingset. as the name implies, the gatinghierarchy represents the set of hierarchical gates applied to an individual sample. the gatingset represents a collection of gated samples from the workspace, analogous to grouped samples in flowjo <dig>  however, the design is sufficiently flexible to represent manually gated data coming from any external tool. each gatinghierarchy is formally a tree data structure associated with a single fcs file, a set of data transformations applied to the channels of the fcs file , a compensation matrix , and a set of gates . each node of the gatinghierarchy tree represents a cell subpopulation in the sample associated with a flowcore gate stored at that node. to save space, flowworkspace stores only one copy of the data together with a bit mask representing the events in the sample that are included in each gate.

the data import and gating steps are logically separated, allowing the user to import the workspace without necessarily performing the gating of the data. the package implements parallel import of workspaces using the parallel r package, and parallel gating over samples in a workspace using mpi  functionality from the rmpi package
 <cit> . the package is available through bioconductorhttp://www.bioconductor.org/packages/ <dig> /bioc/html/flowworkspace.html.

qualifier
the qualifier tool makes use of a local database to store and access extracted cell population statistics from multiple experimental runs , as well as study metadata, and resulting outlier calls, allowing qa tasks to span multiple experiments performed in the course of a larger study. the getqastats function extracts cell population statistics from each sample and gated population defined in a gatingset and stores them in the local database. the basic quality assessment functionality is defined by the qatask class, which is a general container that regroups all the information essential to perform a particular quality assessment task. the user pre–defines qatasks via an external configuration file or directly in an r script that runs the quality assessment procedure, and these are evaluated using the core qacheck method. this method performs the actual quality assessment for each qa task. methods for outlier detection, and the specific details of each quality assessment task are all contained in the qatask object and can be defined by the user or can use any of the pre–defined outlier detection functions or qatask objects. to visualize the quality assessment results, several plot methods have been implemented including methods for generating dot plots or density plots of gates across samples, and scatterplots or boxplots of population statistics grouped by user–defined or experimental metadata grouping variables. finally, qa.report collates the generated qatasks and generates html reports with interactive svg  graphics and plots for all quality assessment tasks. the package is implemented entirely in r, is publicly available on github as well as bioconductor. .

RESULTS

dataset description
we present an application of our pipeline to a subset  of a large study from the itn  monitoring immunosuppression withdrawal in paediatric recipients of living donor liver transplants
 <cit> .

the qualifier workflow
the workflow involved in using qualifier is relatively straightforward. it involves importing the data, extracting cell population statistics, defining qa tasks, performing outlier calling, and then generating an quality assessment report. the first three steps are handled by the qualifier function, which essentially combines the different pieces of information necessary to perform qa on a dataset. a more detailed description of these steps follows.

importing the qa gating template with flowworkspace
the code for running the following and other examples can be found in the package source at
http://mikejiang.github.com/qualifier.

the flowworkspace package is used to import the gating template from the flowjo workspace for the itn study dataset into r. note that although the workflow presented here uses template gates, the approach can be applied without loss of generality to any set of samples that has been gated in the same manner . this template includes the set of hierarchical manual gates that identify all the cell sub-poplulations of interest for qa . a call to openworkspace creates a flowjoworkspace object from the xml workspace file, then parseworkspace reads the template and constructs the necessary r–level objects for the gates, compensation matrices, and data transformations, and optionally reads in the fcs files and performs the preprocessing and gating while calculating the population statistics for each gated cell population. the results for each fcs file are stored in an object of the gatinghierarchy class, with multiple files regrouped in a gatingset object. this is the object which is ultimately passed on to the qualifier package.

the gating hierarchy for any sample can be inspected via plot  and the success of the import procedure verified via the concordance of the imported cell counts against flowjo’s cell counts using plotpopcv . slight discrepancies  are due to flowjo’s quantization of the data transformation function, which must be interpolated by flowworkspace. larger cvs may either indicate errors in the import process or small  populations where differences of two or three cells between the computed and imported counts result in a large coefficient of variation. individual gates and samples can be visualized with the plotgate function  to inspect populations flagged with a large coefficient of variation. importantly, these statistics and plots can be exported  to the labkey tool, which provides a web–based front–end for visualizing gated flow cytometry data
 <cit> .

extracting population statistics
after importing the data from flowjo, qualifier extracts population statistics from the gatingset , and stores them in a local database. subsequent quality assessment makes use of this database to rapidly query and manipulate the data. qualifier can apply filters to the population statistics and perform outlier calls based on grouping and conditioning variables defined in the associated study metadata. each quality assessment task is defined in a qatask object. the details for all the qatasks are provided in a qatask definition file , whereas the study metadata is supplied as an associated comma separated value file. this file associates each fcs data file with study metadata . the gatingset, qatask definition file, study metadata file, and database connection are passed to the qapreprocess() function, which does the work of extracting and combining the relevant information from each source into a coherent data structure. importantly, the qualifier package could be used to qa any manually gated data file format supported by flowworkspace and is not limited to the template gating qa process highlighted here. additionally, qualifier could be used in a stand-alone fashion to perform qa on a set of extracted cell-population statistics and study metadata. flowworkspace acts to simplify access to extracted statistics, but is not strictly required for use with qualifier.

defining qatasks
a qatask defines a specific quality assessment procedure and requires the following information: 

 <dig>  the specific cell population or gate for qa.

 <dig>  the cell population statistic  to qa.

 <dig>  the metadata variables for stratification and outlier calling.

 <dig>  how to present the data to the user .

the qatask class is a general container that allow users to define different quality assessment tasks using the information above. the class uses r’s familiar formula interface as a compact and flexible description of the qa task. briefly, it is generally of the form
y∼x|g1∗g2∗…, where y is the population statistic to monitor and takes four possible values: 

• mfi: median or mean fluorescence intensity of the cell population .

• proportion: the percent of the parent population represented by the population being qc’d.

• count: the number of events in the cell population.

• spike: applicable to each channel of an fcs file measured over the acquisition time. a windowed, cumulative z–score that quantifies spikes in the mfi of a channel over the acquisition time of the sample. in the absence of spikes, this is approximately zero.

in the right hand side of the formula, x specifies the x–axis variable for plotting. it can be any variable defined in the associated study metadata such as date or sample id. variables on the right of the vertical bar represent conditioning variables used to stratify the population statistics for outlier detection. these also must appear in the study metadata. outlier detection is performed within each level of the cross product of the grouping variables. if these are omitted, then outlier detection is performed on the entire set of samples.

the qatask also requires a plot type to be specified. this can be any of the standard lattice plot types, such as xyplot or bwplot. the plot type defines how the data will be summarized and presented to the user. qualifier defines some default qatasks such as monitoring the stability of the mfi for a channel over time, or monitoring the variation in the percentage of a cell population within and across aliquots .

the cell population to be monitored by the qatask is passed as a name to the pop argument of the qatask constructor. all of this information  can be provided for all the qatasks to be performed on a data set via an external csv file passed to the qapreprocess function. internally, the makeqatask function can read a set of these task definitions from the csv file and construct all the qatask objects simultaneously. users may also create individual qatasks directly via the new method.

aggregate qa populations
the population name defining a qatask generally refers to a unique gated cell population, either via the terminal gate name , or via a unique gating path  . qualifier also supports aggregating populations using common portions of gate names  . the tool supports regular expression and substring matching to select multiple, non–unique cell populations for qa assessment. in this way, the population “mfi” selects all five terminal populations matching the string “mfi”, which can then be visualized simultaneously in separate plot panels, with each panel representing a different channel, as defined in the formula . aggregating multiple cell populations in this way for quality assessment provides further flexibility to tailor the quality checks to the needs of the user. this aggregate approach is used throughout the template gates applied to the sample data set in this paper.

outlier detection and visualization
once data is imported and quality assessment tasks are defined, the qacheck and plot methods perform the quality assessment and visualization based on the definitions stored in each qatask object.

the actual outlier calls are performed by the qacheck method. the method reads the population statistics from the database and performs outlier detection within the groups defined in the formula. the qacheck method can accept a default or user–defined outlier detection function.

the package defines several outlier functions for general use in common qa tasks. these are summarized in table
 <dig>  briefly, the outlier.cutoff function is used to call outliers based on a threshold value of the statistic. the outlier.norm function is used for outlier detection in most qa tasks. it models the data within each group using a normal distribution with a robust estimate of the mean and variance. outlier calls are made based on a threshold, α  or a z–score cutoff, either of which can be provided as an argument to the function, which also allows for one or two–sided tests. if the plot type is bwplot , then outlier.norm is used to call between–group outliers  with a default z–score cutoff of  <dig>  based on the distribution of the log–transformed iqrs  of the groups. if the plot type is xyplot, the user can add a regression line to the plot via rfunc argument . individual observations are flagged as outliers based on the residuals. qoutlier implements the default box–plot outlier detection algorithm for outlier calls within groups for any observation beyond ±  <dig>  × iqr for the group.

outlier detection methods provided by qualifier include fixed threshold cutoffs , outlier calls based on t–statistic or z–score cutoffs or based on significance levels  , or calls based on the interquartile range  of a set of statistics  like that typically used for highlighting outliers in box–plots. use cases for each are shown in the table.

the qacheck method will record the outlier calls in the database. plots can be generated without outlier detection by simply omitting the call to qacheck. in some applications it may be desirable to simply examine trends rather than make explicit outlier calls .

we show an example for monitoring the efficiency of red blood cell lysis  from the itn data set. efficiency of lysis is measured as the fraction of total cells collected in the wbc_perct  gate . the qatask definition used to monitor this population statistic over time, conditioning on all staining panel  is: 

> data

> rbc.lysis<-new

> show

qatask: rbclysis

level : tube

description : sufficient rbc lysis

plot type: xyplot

gated node: wbc_perct

default formula :proportion ∼recddt | tube

the call to data loads the study data that has already been parsed and combined with metadata and quality assessment tasks as defined in the previous section. when constructing a qatask via new it is also necessary to supply a unique qaid, and the database  holding the extracted statistics and metadata  function, where it is populated).

to perform the outlier detection, the qacheck function is called on the rbc.lysis task and the results are stored in the database. a call to the plot method will generate the summary plot in figure
 <dig>  passing additional plotting parameters via the par argument. 

> qacheck

> plot)

the plot method is used to generate figures summarizing the outlier detection and quality assessment checks. this function takes the qatask as an argument, as well as options similar to the lattice package, such as subset, which allows a subset of the levels in the grouping variables to be plotted. for example, samples can be subset based on a range of dates, or the plot of the quality assessment task defined above could be restricted to samples within a single staining panel  by passing subset=tube%in%'cd8/cd25/cd4/cd3/cd62' to the plot method. this allows for flexibility in visualizing or analyzing subsets of the data.

adding robust regression lines to scatterplots
as data accumulates over the course of a study , qualifier stores this data in the qa database, and it becomes trivial to monitor trends in data collected over longer periods of time. as an example, the qa task for monitoring fluorescence stability in the fitc channel over time benefits from the addition of a robust regression line to the output plots within each panel in order to identify groups of samples where there are either non–linear effects or where the mfi is not stable over time . the outlier detection task for this procedure is defined in the following way: 

>mfivstime<-new

> qacheck

> plot

,rfunc=rlm

)

note the rfunc argument to the qacheck and plot functions. it allows us to fit a robust linear regression within each group in order to help visualize the changes in mfi over time. outliers within each level of the stain grouping factor are detected based on the deviation of the residuals from the regression line. by default these are called at a threshold of the absolute z–score of the standardized residuals  . if the qacheck call is omitted, but rfunc is passed to the plot function, the resulting plots will be generated without outlier detection, which may be desirable in some circumstances. importantly, all the qatask definitions can be pre–defined in a csv file read in by qapreprocess(), with column names for each argument to the qatask constructor.

creating a quality assessment report
the quality assessment tasks for a data set can be summarized via a quality assessment report. this is generated by the qa.report function, which creates an html report for all qa tasks defined in a list. the report organizes the results of the qatasks into categories based on assay, tube, channel, or other user–defined levels . summary tables of the fcs files failing each qatask are generated as well as summary plots of each qa task, and low–level, sample specific plots of individual cell populations that failed specific qa tasks . the html report makes use of svg  which allow for user interaction with the data. generated plots allow mouse–over events to highlight common samples across groups, and include links to more detailed dot plots of specific gates of interest, thus allowing the user to get a global overview of the quality of the data set, and to perform more detailed investigation to identify the root cause of outlier samples. the html report provides a convenient interactive mechanism to view and interact with the data in order to get a better understanding of problematic samples or files in the data set. components of an example report generated from the itn study data set are shown in figure
 <dig> and the complete report for the itn study data set can be found online at
http://mikejiang.github.com/qualifier/.

summary of the quality assessment report for an itn clinical trial dataset
the flowworkspace and qualifier packages were applied to a dataset of  <dig> fcs files from the immune tolerance network. the qa report  identified instances where issues with sample quality merited further review by domain scientists. the stability of the mfi  for each antibody stain showed non–linear effects and changes in stability in some instances, which may have been associated with experimental factors such as changes in the intensity of the staining antibody. the consistency of lymphocyte gating across sample aliquots identified several instances where an elevated amount of debris in the sample resulted in a lower proportion of lymphocytes and mononuclear cells in the mnc gate . evaluation of redundant staining  across sample aliquots allowed for rapid identification of samples with inconsistent staining. the quality of individual aliquots was evaluated by looking at the number of events collected for each aliquot, and identifying those samples where fewer than the number of expected events were collected . another approach to assess the quality of individual aliquots was to examine the consistency of lysis of red blood cells in each aliquot . aliquots with fewer than 80% of lysed red blood cells were flagged for further investigation. instrument stability during sample acquisition was evaluated by monitoring spikes or drifts in each measured channel for each sample . plots of cumulative z–scores of those drifts or spikes allowed identification of samples which showed significant deviations.

one of the key advantages of qualifier is that it provides an integrated environment for review of quality assurance data by flow domain experts. in the past, the flow analyst would either spot check and manually review plots within flow gating software tools or have data exported from such tools into spreadsheets for sorting, plotting, and viewing of trends over time or across tubes. should specific anomalies be found, the analyst would have to shuffle between applications, sort through files to review plots within the flow gating tool and return back to summary statistics or plots of trends for confirmation. the disjointed process was cumbersome.

qualifier takes a lot of this frustration out of the process so domain scientists can focus on the scientific questions of interest. it should be noted that the use of qualifier, whether in a research or clinical trial setting is to have the flow cytometry domain expert always review trends and patterns and not simply rely on automatic exclusion of flagged samples. there may be instances where a trend may be due to administration of therapy or other clinical event of interest. in those instances, having the system within the r/bioconducotor framework allows us to easily overlay qa concerns with potentially biological events in an integrated, seamless fashion, further demonstrating the ease and utility of the tool. to our knowledge it is the first tool to integrate this level of extensive quality assessment for large scale gated fcm data in a cohesive pipeline.

ongoing improvements to the software include complete flowjo support, as well as facsdiva  experiment files, improvements to the html report formatting, and generation of pdf output for quality assessment reports. the tool will also be integrated into labkey .

the features and description of the software herein refer to flowworkspace version  <dig>  and qualifier version  <dig> . <dig> found at the bioconductor website . the development version of flowworkspace supports windows and mac versions of flowjo, including the latest version  which is gating–ml compliant. support for bd’s  facs diva is actively being developed and the next release of flowworkspace will support some the most frequently used manual gating tools . flowworkspace data import and gating has also been reimplemented in c++ in the development release, for a 100–fold speed up over the current r–only version of the package.

CONCLUSIONS
flowworkspace is a bioconductor package that allows fcm data that has been preprocessed and manually gated using the flowjo tool  to be imported in the r statistical computing environment where the bioconductor suite of advanced fcm data analysis tools can be leveraged to further analyze the data. a good example of the utility of flowworkspace is its integration with the qualifier tool, performing flexible and robust quality assessment of gated and ungated fcm data. together, the flowworkspace and qualifier tools address the increasing demand for tools capable of performing qa on large fcm data sets generated in typical clinical trials. flowworkspace deals with the issue of working with more data than can be loaded into memory at once through its integration with ncdfflow that stores data in netcdf files on disk. qualifier provides an infrastructure for identifying outliers amongst the large number of samples collected in an experiment or clinical trial while taking into account the structure imposed by the trial metadata. it simplifies and summarizes the data and presents the results in an interactive way.

the qualifier tool automates what has been, for the most part, a manual qa process. within the itn, the template gates and subsequent qa are applied manually within flowjo, the resulting statistics extracted, and plots are generated and visualized by an analyst to identify possible problems. in addition, sas, excel, and other graphing tools made the process time consuming and disjointed. qualifier automates this entire process. the ease of use and customizable nature of the analysis output mark the advantage of the qualifier platform over the manual processes. additionally, qualifier brings all the steps of the qa procedure into one software tool. importantly, qualifier is not limited to the template gate-based qa process presented here, but can qa any set of manually gated data , provided that the data set identifies common cell populations across multiple samples.

qualifier objectively, efficiently, and reproducibly identifies outlier samples in an automated manner by monitoring cell population statistics from fcm data conditioned on study–level and experiment–level metadata for outlier detection. the tool has a flexible interface allowing users to define new qa checks and outlier detection routines that suit their data analysis needs. importantly, interactive quality assessment reports are generated automatically by the tool to facilitate exploration of the data by domain scientists and help identify the underlying causes of potential qa issues flagged by the tool. qualifier has uses beyond simple quality assessment. it can be used for exploratory data analysis, to look for correlations between gated populations and clinical covariates for biomarker discovery, and has been applied to evaluate datasets for the flowcap projects .

availability and requirements
project name: qualifier

project homepage:http://mikejiang.github.com/qualifier/

bioconductor link:http://bioconductor.org/packages/ <dig> /bioc/html/qualifier.html

operating systems: platform independent

programming language: r

version:  <dig> .1

other requirements: r, bioconductor

license: artistic  <dig> 

project name: flowworkspace

project homepage:http://github.com/gfinak/flowworkspace

bioconductor link:http://bioconductor.org/packages/ <dig> /bioc/html/flowworkspace.html

operating systems: platform independent

programming language: r and c++

version:  <dig> .0

other requirements: r, bioconductor

license: artistic  <dig> 

abbreviations
fcm: ; svg: ; itn: .

competing interests
the authors declare that they have no competing interests.

author’s contributions
rg and gf and wj developed the methodology and designed the software. wj and gf developed the software, and performed the analyses. aa and jp participated in its design and coordination. wj and gf drafted the manuscript. all authors read and approved the final manuscript.

