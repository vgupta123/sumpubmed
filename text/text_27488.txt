BACKGROUND
bacteria make up an enormous portion of the world around us. some estimate that there are 4– <dig> ×  <dig> prokaryotes on earth today  <cit> . they are known to live in virtually every environment on earth, playing critical roles in both human health  and the global ecosystem . understanding their genetic diversity is a crucial part in understanding how bacteria have evolved to play these various roles. recent advances in sequencing have made these studies more accessible than ever, with large amounts of sequencing data readily generated from a variety of machines at both a reasonable price and with turnaround times measured in days, not weeks. increasingly, this accessibility is being applied to both research and clinical studies and is revolutionizing our understanding of bacterial genetics and their diversity. these rapid gains in understanding of bacterial genetics promises to exponentially expand our understanding of the interplay between bacteria, the environment, and human health.

before such promises can be fulfilled it is important to develop best practices for how the genetic profiles of microbes are studied. which machines are used to sequence the bacteria, the reagents used to prepare the dna for sequencing, and the software used to analyze the resulting data all influence the depth of knowledge one can gain from any given sequencing experiment. an important step in understanding the genetics of bacteria, or indeed any organism, is to understand the genome – its structure, size and gene organization. assembling these genomes from next generation sequencing data is thus a critical task towards fully understanding bacterial functions and phylogenetic relationships – an assembly that is highly fractured or incorrect can impede further studies of gene expression, function, and phylogenetic relationships, while accurate assemblies open the door to a wealth of further studies.

two benchtop sequencers dominate the market today, the ion torrent pgm from life technologies  <cit>  and the miseq from illumina  <cit> . both facilitate rapid, cost-effective sequencing. data generated from these machines can be paired-end or single-end, and can range from  <dig> nt to ~ <dig> nt in length. assembling a genome of several million bases or more with reads of this length is a complicated process, although there are a number of freely-available tools to assemble the genome of bacteria using data generated from these machines  <cit> . although read lengths continue to improve on these instruments, we will refer to this method of assembly using the historical nomenclature of “short read only assembly”   <cit> .figure  <dig> 
the four bacterial assembly strategies examined here. a. short read only assembly. short next generation sequencing reads generated by the illumina or life technologies platforms  are assembled with any number of assembly software packages into contiguous sequences . here, the software packages velvet, ray, and mira were evaluated. b. hybrid assembly. in this method of assembly, short, higher accuracy reads from the illumina/life technologies platforms , error correct the long, lower accuracy pacbio reads  via alignment. the software package pacbiotoca was used for this purpose. these error-corrected reads are then assembled into contigs  using a software package suited to long read assembly such as the celera assembler. assembled contigs can be further scaffolded and gap-filled as in d. c. in pacbio-only assembly, long reads are aligned to each other, enabling self-correction. these self-corrected reads are assembled into contigs and can be further scaffolded and gap-filled as in d. d. hybrid scaffolding, in this method, preassembled contigs , derived from any of the methods laid out in a-c, are scaffolded with long pacbio reads . these long scaffolds, which can contain long strings of “n”s  in between the contigs, are then gap-filled with the program pbjelly.



just as the ion torrent and miseq can sequence a bacterial genome in less than a day, so can a third sequencing platform, the pacific biosciences rs . in addition to fast sequencing reactions, the pacbio distinguishes itself from the other two machines in at least three ways. first, the pacbio produces very long reads, some as long as 20 kb, with average read lengths of 4-5 kb, making the single, continuous reads generated by this machine an order of magnitude longer than any other  <cit> . second, the library preparation process does not include an amplification step, meaning dna is sequenced in its native form, a single molecule at a time. this style of sequencing in turn allows for the third distinguishing characteristic of the pacbio – the ability to call covalent base modifications  <cit> . while understanding the nucleotide sequence of bacterial genomes is an important step in understanding the biology of any given bacterial species, knowledge of the epigenome will also prove to be useful in elucidating biological functions, and indeed has already been applied to pathogenic bacteria  <cit> . recent work has also defined a roadmap for extending base modification identification to rna samples, using the hiv- <dig> reverse transcriptase enzyme instead of a dna polymerase, providing another sequencing application unique to the pacbio  <cit> .

the long read lengths generated by pacbio sequencing come at a price: the average base quality of any given base is substantially lower than that of either the illumina or life technology machines. still, the long read lengths offer a significant advantage during assembly, and this has led at least two groups to design algorithms that correct the errors found in long pacbio reads using the shorter, yet higher accuracy reads from the illumina and life technology machines  <cit> . referred to in this paper as hybrid assembly, these error corrected reads are more amenable to traditional assembly using overlap graph assemblers like the celera software package   <cit> . more recently, both pacbio and the research group responsible for celera have released versions of their software packages which self-corrects pacbio reads by aligning reads to each other and generating consensus sequences . these self-corrected, pacbio-only reads can be fed into the same assemblers as the hybrid reads .

bacterial genome sequencing and assembly is not a new phenomenon, and indeed many researchers have sequenced bacterial genomes and generated draft assemblies  <cit> . it is therefore not uncommon for researchers to look to improve upon their pre-existing assemblies through a process referred to here as hybrid scaffolding . in this method, a pre-existing bacterial assembly is improved by using pacbio long reads to connect two pre-assembled contigs into a longer sequence called a scaffold. these scaffolds consist of the previously assembled contigs connected by a string of n’s in between, called gaps. many of these intervening gaps can subsequently be filled using pbjelly software, ultimately resulting in a more complete assembly  <cit> .

in this report, we address best practices for bacterial assembly by sequencing the well characterized e. coli strain bl <dig>  <cit>  on the illumina miseq, ion torrent, and pacbio, performing de novo assemblies under a variety of conditions, and comparing those assemblies to the published genome. we examine the four primary methods of bacterial assembly – short read only assemblies, hybrid scaffolding, hybrid assembly, and pacbio-only assembly. we then extend those results to sequence and assemble two other e. coli strains, bal <dig> and the common laboratory strain dh5α  <cit> .

finally, with assembled bacterial strains in hand, we use pacbio sequencing to examine covalent base modifications present in each of the bacterial strains. the three predominant methyltransferases in e. coli are the dam methylase, the dcm methylase, and the ecoki methylase. each methylase has a specific base substrate within a larger sequence motif which it targets for methylation. the dam methylase targets the n <dig> position of the adenine in the sequence motif ga*tc. the dcm methylase specifically methylates the second cytosine in the sequence motifs cc*agg and cc*tgg. finally, the ecoki methylase modifies the second or third adenine in the sequence motifs aa*cgtgc and gca*cgtt, respectively. the three e. coli strains in this study were chosen specifically to address the accuracy and specificity of the pacbio sequence data and associated software to call these modifications on real world data. whereas dh5α has all three enzymes, bl <dig> is deficient in ecoki and dcm, while bal <dig> lacks the dam and dcm methylases.

RESULTS
short read assembly
we began our assembly comparisons with bl <dig>  since the completed genome is available from ncbi, and thus provides a reference against which we can compare the various de novo assemblies . bl <dig> was sequenced to a depth of over 100× on both the miseq and ion torrent pgm machines. miseq reads were paired end, 150 bp in length, while the ion torrent reads were single-end, approximately 200 bp in length on average .

several short read assembly software packages are available, and we chose to examine three: velvet, ray, and mira . ray and velvet have both been extensively used and validated in competitions such as assemblathon  <dig> and  <dig>  while mira has been widely used for over a decade  <cit> . to investigate the effects of assembly at lower coverages, we performed assemblies using coverages of 25×, 50×, 75×, and 100×, by randomly downsampling using the custom script randomfq  <cit> .

we first assembled data from both benchtop sequencers using velvet, an extensively used de bruijn graph assembler  <cit> . unfortunately, velvet’s assembly methodology resulted in very poor performance for ion torrent assemblies, and we therefore only report the data for miseq assemblies. as a de bruijn graph assembler, velvet was originally published using solexa data, and the poor performance with ion torrent data is likely due to its inability to cope with the ion torrent error profile. for the miseq data we assembled the data using  <dig> different kmers, ranging from  <dig> to  <dig>  for each of the different coverage depths, resulting in  <dig> miseq assemblies with velvet. each of these assemblies was examined on the basis of contig number, max contig length, percent of contigs > <dig>  and 21 bp dup-mer percentage. the 21 bp dup-mer statistic is based on the number of unique 21 bp kmers. the statistic, /, can be used to generally evaluate the number of expanded or collapsed repeats, especially when one knows the expected dup-mer number . a lower than expected number suggests the presence of collapsed repeats, while a higher than expected number indicates expanded repeats. for the reference bl <dig> genome, the 21 bp dup-mer is  <dig> . taking all of these statistics under consideration, the most complete velvet assembly for each of the miseq coverages is reported in table  <dig> table  <dig> 
short read only assembly statistics


59
100x
154
 <dig> %
430066
119241
 <dig> 
4493252
 <dig> %
36
100x
93
 <dig> %
332975
111161
 <dig> 
4565040
 <dig> %
29
25x
415
 <dig> %
75474
19997
 <dig> 
4470372
 <dig> %
n/a
50x
321
 <dig> %
221854
48362
 <dig> 
4589987
 <dig> %
n/a
25x
153
 <dig> %
281400
106822
 <dig> 
4559337
 <dig> %
the bolded assemblies represent the best assembly for the specified combination of sequencer and software.



next we examined ray, another de bruijn graph assembler  <cit> . both miseq and ion torrent data were assembled across a variety of kmer sizes . each assembly was evaluated using the same metrics used for velvet to determine the most complete assembly for each coverage/data source type. unlike velvet, ray was able to assemble the ion torrent data with reasonable results, however still performed better overall with the miseq data, again likely because de bruijn graph assemblers do poorly with lower quality reads the most complete assemblies for each combination of data type and coverage are reported in table  <dig> 

finally, the mira assembler was applied to our datasets  <cit> . mira produced the most complete ion torrent assembly, with optimal results produced with 25× coverage. in contrast to velvet and ray, the mira assembler is an overlap graph based assembler and has a specific parameter set tailored to ion torrent data, which may account for these superior results. on the other hand, mira struggled with the miseq data, possibly because these libraries were constructed using the illumina nextera kit. nextera kits utilize transposon-mediated fragmentation, and in our hands the resulting fragments had bimodal insert-size distributions, as opposed to the typical normal distributions that are characteristic of other fragmentation methods, such as acoustic methods . again, the most complete× assemblies based on contig number, percent of contigs >  <dig>  max contig size, etc. are reported in table  <dig> 

after determining the most complete short read assemblies for each combination of assembler/coverage/data type we were left with  <dig> different assemblies . while statistics such as number of contigs, percent of contigs >  <dig>  and max contig size can be used to evaluate assembly completeness, they are poor measures of assembly correctness. to further evaluate the assemblies based on correctness, each of the twenty most complete assemblies were run through an assembly evaluation script utilizing the mummer toolkit against the published bl <dig> genome sequence  <cit> . this package generates many statistics about the accuracy of an assembly compared to a reference. a selection of these statistics can be seen in table  <dig>  and based on these statistics coupled with completeness statistics in table  <dig>  five different assemblies were chosen as the best for each combination of assembler/data type . to better visualize assembly-correctness, dot plots for these five assemblies were generated . these figures, when combined with the statistics in tables  <dig> and  <dig>  demonstrate that the most accurate assemblies were those performed by ray.figure  <dig> 
dot plots of short read only assemblies. bl <dig> assemblies highlighted in table  <dig> were aligned and plotted against the reference genome using mummer. the y-axis shows the various contigs. deviations from the middle line indicate positions of misassembly. note the ray-ion assembly has the best fitting line but also the largest number of contigs.


evaluating the short-read only assemblies


59
100x
 <dig> 
13
38
2
0
16
42
36
100x
100
1
6
2
19
2
9
29
25x
 <dig> 
1933
3
0
1
1
54
n/a
50x
 <dig> 
31
5
15
0
9
113
n/a
25x
 <dig> 
524
10
9
0
3
34
the bolded assemblies represent the best assembly for the specified combination of sequencer and software.

hybrid scaffolding
in addition to the short read data, we sequenced bl <dig> to 185x coverage on the pacific biosciences rs. raw pacbio reads averaged ~ <dig>  kb in length. this dropped to approximately 2 kb in length after adapter removal, which reflects the average library dna insert size . each of the five short-read assemblies were improved by connecting the contigs with pacbio long reads. in this two step process, long pacbio reads are first used to connect two distinct contigs. the connected contigs, commonly referred to as scaffolds, are joined with unknown intervening sequences labeled as n’s. these strings of n’s, called gaps, can then be filled in using the pbjelly software package  <cit> . using the aha scaffolder   <cit> , contigs were scaffolded together using ~25×, 55×, or 110× pacbio long read coverage, and gap-filled with pbjelly.

in all cases examined, the number of un-connected contigs was reduced by 30% or more. the max sequence length increased by 40% or better, and in some cases the max sequence length was over twice that obtained with the short read only assemblies. for example, adding in 55x coverage of pacbio to the mira/miseq assembly increased the maximum sequence length by over  <dig> fold, from  <dig>  to  <dig> . in two thirds of the cases examined, the resulting scaffolds were less than  <dig> in number, far better than short read only assemblies alone, for which only  <dig> in  <dig> resulted in less than  <dig> contigs . these scaffolds were largely contiguous, as pbjelly was generally able to fill in the gaps between scaffolded contigs. with the exception of the ray-ion torrent assembly, the un-filled gaps numbered  <dig> or fewer, with median lengths of less than 250 bp. improvements were seen when incrementally more pacbio long read coverage was added to the scaffolding process, although there were diminishing returns, especially in contig reduction. at least 70% of total gains in the reduction of contigs were achieved with just 25× coverage. similarly, on average 64% of the maximum sequence length improvements were seen with 25× coverage, and 60% of the n <dig> gains. these results indicate that at least for these assemblies, 25× pacbio long read coverage was enough to achieve the majority of the gains available using the hybrid scaffolding approach.table  <dig> 
hybrid scaffolding assembly statistics




while significant gains were seen in assembly completeness, hybrid scaffolding introduced a significant number of errors into the short read assemblies, especially short indels, a well-known error profile of the pacbio . the dot-plots underscored the effect that these new errors had on accuracy, with striking degradation of assembly accuracy in some instances . for example, hybrid scaffolding doubled the number of snps and indels greater than 5 bp, and tripled the number of relocations in the mira-ion torrent assembly. indels less than 5 bp went up dramatically in many of the assemblies, in the case of the ray-miseq assembly going from  <dig> to nearly  <dig> figure  <dig> 
dot plots of hybrid scaffolding. the assemblies highlighted in table  <dig> were scaffolded and gap-filled with varying coverages of pacbio reads. the assembled results with ~100× pacbio coverage were aligned to the reference bl <dig> and dot plots were generated. note the more contiguous assemblies, but with more errors as compared to those in figure  <dig> 


evaluation of hybrid scaffolding assemblies


hybrid assembly
a third method of assembly involves using the short, higher accuracy reads generated by illumina or life technologies sequencers to error-correct the long pacbio reads and use those corrected reads for assembly . outside of the pacific biosciences analysis package there are at least two pieces of software do this, here we chose pacbiotoca, which is part of the celera assembler package  <cit> .

the 185x pacbio coverage and a downsampled subset  were error-corrected with either 100× coverage of ion torrent data or 100× coverage of miseq data. following this error correction, corrected reads were sorted on length and downsampled to two different coverage targets. previously published work has demonstrated that the best error-corrected read assemblies result from depths of 12-25×  <cit> . we therefore downsampled the error-corrected reads targeting two coverages of 12-15× and 20-25×. statistics for both downsampled data sets for both small read technologies can be found in additional file 3: table s <dig>  this left us with four data sets each for the ion torrent and miseq hybrid correction to assembly 1) the full data-set, error-corrected and downsampled to 12-15×, 2) the full data-set error-corrected, and downsampled to 20-25×, 3) the subset of data, error-corrected and downsampled to 12-15×, and 4) the subset, error-corrected and downsampled to 20-25×. the ion torrent error-corrected subsets of data were downsampled by selecting for corrected reads greater than  <dig>  and  <dig>  nucleotides in length, while the miseq error-corrected subset of data was downsampled for reads greater than  <dig> and  <dig>  respectively. when more pacbio data was added, the downsampling cutoffs were adjusted upwards, to  <dig> and  <dig> minimum read lengths for the ion torrent corrected data and  <dig> and  <dig> for the miseq corrected data.

each of the eight different corrected data sets was assembled with celera using  <dig> different parameters , for a total of  <dig> different assemblies. the most accurate assembly was chosen based on the software package amosvalidate coupled with frcurve  <cit> . amosvalidate is a software package designed to identify mis-assemblies based on a variety of metrics, each of which may indicate a poor assembly. importantly, this software does not rely on a reference, instead attempting to identify assembly problems in de novo assemblies. these potential mis-assembly features can be plotted via frcurve, with feature counts along the x-axis and total bases covered on the y-axis . the user can then choose the assembly that covers the most bases with the least number of features. across all samples we chose the assembly with the least features at 90% coverage of the putative genome size . the contigs from the chosen assemblies were then run through the same pipeline as those contigs examined in the hybrid scaffolding approach, i.e. scaffolded together with the aha package and filled in with pbjelly. assembly statistics can be found in table  <dig> table  <dig> 
hybrid and pacbio-only assembly statistics




in terms of assembly accuracy, the miseq hybrid assemblies had approximately 10-fold fewer short indels than the ion torrent hybrid assemblies. otherwise, the miseq and ion torrent hybrid assemblies were comparable in terms of accuracy. no assembly produced a contig or scaffold that was un-alignable to the reference genome, and all had identities that were over  <dig> % . however, the ion torrent hybrid assemblies were more complete than the miseq assemblies. when examining the number of contigs, mean, max, and n <dig> numbers, the ion torrent hybrid assemblies produced assemblies that were demonstrably superior to the miseq assemblies. for example, with 110× coverage the ion torrent hybrid assembly resulted in a maximum contig length of  <dig> , more than twice the maximum seen when the miseq was used . these results can be traced back to the error correction performed with each set of data. in each of the samplings, reads error-corrected with the ion torrent ultimately had longer lengths than those error-corrected with the miseq data. these longer reads in turn resulted in more complete assemblies. dot plots were generated with the assembled data showing that both hybrid assemblies were highly accurate and largely complete .figure  <dig> 
dot plots of hybrid and pacbio-only assemblies. bl <dig> was assembled with varying conditions as described. the best assembly for each combination of technology and pacbio coverage was determined using amosvalidate. assemblies were scaffolded with aha, gap-filled with pbjelly and finally polished with quiver. the resulting assemblies were aligned to the reference genome and dot plots generated with mummer.


evaluating hybrid and pacbio-only assemblies


pacbio-only assembly
two recent software releases, from pacbio and the celera assembler group, allows for the error correction of pacbio reads without the need for short reads from another technology  <cit> . to address the ability of these self-corrected reads to be assembled, we self-corrected both the 110× and 185× bl <dig> data sets using the pacbio software package. prior to error-correction the average base q score was ~  <dig> , post error-correction these qualities increased to between  <dig> and  <dig>  indicating that error correction was successful. similar to hybrid assembly, we downsampled based on length to coverages of approximately 12-15× and 20-25× . each of the four data sets were assembled with ten different parameter sets using the celera assembler. we were therefore left with  <dig> assemblies each for the original 185× pacbio data set and the 110× data set. the best for each of these coverages was again chosen using amosvalidate, scaffolded with aha, and gap-filled with pbjelly. remarkably, self-correction and assembly proved to be more complete than both the ion torrent and miseq-corrected assemblies across nearly every metric analyzed .

the mummer/gage package showed that the pacbio-only assemblies were not only more complete than the hybrid-assemblies, but largely more accurate. fewer snps, large indels, inversions and relocations were observed in the pacbio-only assembly as compared to the hybrid assemblies . this accuracy improved as more pacbio data was added into the assembly, with only  <dig> snps in the final self-assembly, compared to  <dig> or more in each of the hybrid assemblies. visual inspection of the dot-plots generated with the hybrid and pacbio-only assemblies also confirmed that pacbio-only assemblies were in fact more accurate than the hybrid-assemblies .

bal <dig> and dh5α assemblies
we next sought to sequence and assemble two additional e. coli strains for which reference genomes were not readily available. given that the most complete assemblies were achieved with hybrid and pacbio-only assemblies, short read only assembly and hybrid scaffolding were rejected in favor of these methods. again, over 100× coverage for each strain was generated on both the miseq and the ion torrent. pacbio long-insert libraries were prepared for both strains and sequenced to ~135× coverage for bal <dig>  and ~200× coverage for dh5α .

as described above for the bl <dig> data, the pacbio long reads were corrected with either 100× miseq data or 100× ion torrent data using pacbiotoca, or self-corrected using pacbio’s preassembler. for bal <dig> we corrected all 135× coverage of pacbio long reads. dh5α data was randomly downsampled to ~100× coverage and both the full dataset  and this subset were error corrected. for each data set, post-correction down-sampling was performed, twenty assemblies for each correction type-coverage combination were performed using the celera assembler, and the best assemblies chosen.

final assembly statistics are presented in table  <dig>  pacbio-only assemblies of bal <dig> were again superior to both types of hybrid-assembly across nearly all metrics analyzed. less than  <dig> contigs were assembled, with an n <dig> of over 1 mb, while the ion torrent hybrid assembly resulted in  <dig> contigs  and the miseq hybrid assembly with  <dig> contigs, and an n <dig> of only  <dig>  mb. hybrid assembly with ion torrent data proved to provide the most complete assembly with the dh5α strain, although again, the pacbio-only assemblies outperformed the miseq-hybrid assemblies by a considerable margin. specifically, the pacbio-only assembly resulted in less than  <dig> scaffolds, while the miseq assemblies resulted in over  <dig> scaffolds.table  <dig> 
bal <dig> and dh5α assembly statistics




assembly polishing
to reduce errors in the bl <dig> assembly, we next ran quiver on each of the hybrid and pacbio-only assemblies  <cit> . quiver is a software package that generates high quality consensus sequences by mapping long pacbio reads against a reference  <cit> . the assembled scaffolds were used as a reference, and uncorrected pacbio reads were used as the input to generate the consensus. after running quiver on each assembly, we again evaluated the bl <dig> assemblies for correctness using the gage and mummer package described earlier. we found quiver to be effective at reducing indels and snps, often dramatically improving the accuracy of the assembly . in particular, for each of the bl <dig> assemblies, snps were reduced by 50% or more. remarkably, the miseq hybrid assembly with 110x pacbio coverage went from  <dig> snps to  <dig>  small indels were also dramatically reduced, in some cases by more than 80%, demonstrating the utility of running quiver as a final finishing step.table  <dig> 
improvements seen with quiver




base modifications
a unique feature of data generated with the pacbio is the ability to call base modifications. identification of these modifications is based on the kinetics of base incorporation. when the interpulse distance ratio of base incorporation differs from expected, it indicates the presence of a modified base  <cit> . the specific kinetic signatures for 5mc, 6 ma, and 4mc can be reliably modeled and identified from sequencing data. to call 5mc base modifications, a specialized library preparation is required that increases the intensity signal above background  <cit> . current protocols for this library preparation require 500 bp - 1 kb insert libraries treated with tetracycline. these libraries were generated for all three strains, and sequenced to coverages of at least 60× for each strain.

the e. coli strains used in this study were chosen specifically for their known methylase genotypes. the dh5α strain of e. coli has functional copies of all three methylases, and therefore all types of methylation should be detectable. as an e. coli strain b bacterium, bl <dig> naturally lacks the dcm methylase, and therefore we would expect not to find the methylated sequence motifs ccagg and cctgg. bl <dig> also lacks the hsds subunit of ecoki, required for sequence recognition, and we therefore do not expect these motifs to be methylated  <cit> . finally, bal <dig> is known to lack both the dam and dcm methylases, and therefore we would expect not to find the motifs associated with these methylases to be methylated.

after sequencing the libraries to coverages of 60× or greater, we used smrtanalysis  <dig>  to identify base modifications and enriched motifs. this module requires a reference sequence, and for these studies we used the scaffolds that resulted from self-correction and assembly performed earlier. the sequence motifs associated with all three methyltransferases were enriched in the dh5α samples. specifically, over 98% of the motifs associated with the dam methylase and ecoki methylases were found to be modified. detection of 5mc associated with the dcm methylase was not as strong, but significantly over background, with 40% of the motifs identified as methylated. as expected, in the bal <dig> samples there was no enrichment for the dcm-related sequence motifs or the gatc motif, associated with the dam methylase. the gatc motif in the bl <dig> samples were enriched, with approximately 97% of the motifs identified as methylated, while lacking all other modifications, as expected. in short, all expected modifications were identified, with no false positives. table  <dig> shows the methylation patterns identified for each strain, and figure  <dig> shows the location of each motif and each modified motif mapped against the assembled scaffolds.figure  <dig> 
circos plots of base modifications. the pacbio-only assembly was fed into smrtanalysis  <dig>  and base modifications were called. in each figure, the assembled contigs are plotted as the inner grey bars. on either side of these grey contigs, the short lines indicate motif positions in the genome . outside of those are the location of the modifications and the intensity of those modifications. a. bl <dig> – yellow bars are positions of gatc motifs, purple are those motifs that are modified. b. bal <dig>  gcac6ngtt. c. bal <dig>  aac6ngtgc. d. dh5alpha, gatc. e. dh5alpha, gcac6ngtt. f. dh5alpha, aac6ngtgc. g. dh5alpha, ccwgg.


identified methylation patterns


the nucleotide bases in bold are the nucleotides that are covalently modified by their respective enzymes.

discussion
in this study we explore a variety of methodologies for the de novo assembly of bacterial genomes and analyze the epigenetic base modifications associated with the e.coli strains, bl <dig>  dh5α, and bal <dig>  understanding how best to assemble bacterial genomes de novo is important for at least two reasons. first, bacteria play an important role in nearly all ecological and biological processes on earth. full knowledge of how these bacteria interact with the world around them requires an understanding of their underlying genetic architecture. second, bacterial genomes are relatively simple when compared to more complex eukaryotic genomes. thus, a firm understanding of how best to assemble bacterial genomes can inform the assembly of larger, more complex genomes.

here we examined four different methodologies for the assembly of bacterial genomes: short read only assembly, hybrid scaffolding, hybrid assembly, and pacbio-only assembly . to evaluate the effectiveness of each strategy we generated 100× coverage of the three strains on both the life technologies ion torrent and the illumina miseq and at least 125× coverage with long-insert reads on the pacbio rs for all three strains.

as was expected, the assemblies with the greatest number of contigs came from assemblies using either the ion torrent or miseq data alone . for these studies we examined three commonly used assemblers, velvet, ray, and mira . both velvet and ray are de bruijn graph-based assemblers. these assemblers are known to be less tolerant of sequencing errors, which may explain why they struggled with the ion torrent data whose q scores were slightly below that of the miseq data   <cit> . we performed a kmer and coverage parameter sweep with velvet and the miseq data, examining  <dig> different assemblies. velvet was capable of assembling the miseq data effectively, with generally less than  <dig> contigs that were typically longer than any of the other short read assemblies. mira, which is not a de bruijn graph assembler, was able to assemble both sets of data, producing the lowest number of contigs with ion torrent data, although of the three methods, mira had the most trouble with the miseq data. ray stood apart as the most accurate of the three assemblers, based on the number of inversions, relocations, snps, and a visual inspection of the associated dot plots . these more accurate assemblies did not come at a cost of assembly completeness . in particular, the ray-miseq assemblies were often the most complete, with contigs of  <dig> or less for three of the coverages, the only short read assembler-data combination to achieve such results.

one interesting finding from this study is that more short read coverage does not necessarily guarantee a better assembly. we found that lower coverages, especially for the ion torrent data, often resulted in assemblies that were similar to those generated with higher coverage. this is not entirely unexpected for the mira assemblies, as overlap graph based assemblers are less tolerant of high coverage  <cit> . however this observation held true for the ray-ion torrent assemblies as well. we should also note here that while it is typically thought that paired-end data is significantly better for assembly than is single-end data, there was little difference in assembly completeness between the best miseq assembly  and the best ion torrent assembly .

after generating these short read assemblies, we chose  <dig> representative assembly from each data:assembler combination  and attempted to connect the contigs with long, uncorrected pacbio reads. hybrid scaffolding resulted in significant assembly improvements for all scenarios examined, with an average of 50% reduction in contig number across all pacbio coverages and an average of 5-fold improvements in n <dig> values. although much of the gains were realized with just 25× pacbio coverage, improvements did increase incrementally as more pacbio reads were added to the assembly. the assembly that seemed to benefit the most from hybrid scaffolding was the ray-ion torrent assembly . this is not terribly surprising, as the ray-ion torrent assemblies were the most accurate, and yet the most fractured, and therefore should be the easiest to connect. when 110× pacbio coverage was used in hybrid scaffolding, contigs were reduced by 80% and the n <dig> length went up by more than 10-fold. what was surprising was the number of errors introduced by using aha/pbjelly. far more relocations, inversions, indels, and snps are present in these assemblies than in the short read only assemblies . errors in hybrid scaffolding represent overly aggressive attempts to connect contigs, some of which are connected erroneously. others have shown it possible to effectively use pacbio data for scaffolding when implemented as a part of the all-paths lg sequence assembler recipe  <cit> . therefore, it should be possible to reduce the aggressiveness of this process in order to eliminate some of these introduced errors, and others may be resolved by running quiver post-assembly. reducing the aggressiveness of contig scaffolding will result in less complete assemblies, but the gains made in accuracy may be acceptable in some circumstances. in spite of these potential errors, we employed the hybrid scaffolding technique on all subsequent assemblies. often, the goal of assemblies is to achieve as complete an assembly as possible. there are always tradeoffs to be made, but in the end we believed that the gains resulting from scaffolding were worth the potential of introduced errors.

while short read only assemblies are still popular because of the relative newness, cost of entry, and throughput concerns associated with long read sequencing technology, the state of the art in genome assembly lies with the long reads generated by the pacbio. we therefore wanted to see how hybrid assembly and pacbio-only assemblies would compare with short read only assemblies and each other. unexpectedly, the ion torrent error-corrected reads assembled far more efficiently for each of the three strains examined across all coverages and parameter sweeps when compared to miseq error-corrected reads. these results can be traced back to longer corrected reads post-ion torrent correction. this may be due to the fact that the ion torrent reads themselves are longer than the miseq reads. these longer reads should be easier to map back to the pacbio reads, increasing error correction efficiency. it’s also possible that differences may be due to the manner in which the miseq libraries were generated. miseq libraries were made using the nextera kit, which fractures dna with transposons as opposed to the mechanical shearing used to create the pacbio and ion torrent libraries or chemical shearing typical of other illumina library preparation kits. the insert sizes associated with these libraries were far more varied than what is typically encountered with illumina libraries, and this may have contributed to the poorer performance of the miseq data in both hybrid assembly and the short read only data assembly using mira .

we used preassembler with the same pacbio data that was used in the previous analyses. remarkably, the pacbio-only assemblies were superior to the miseq-pacbio hybrid assembly across all strains and coverages examined. furthermore, the completeness of these assemblies were generally comparable to, and often slightly superior to the best ion torrent-pacbio hybrid assemblies . perhaps even more impressively, the bl <dig> pacbio-only assembly was the most accurate of all three types . this accuracy improves even further when one finishes the assembly with quiver .

the assembly results here fall largely in line with two recent papers  <cit> . chin et al. was the first paper to demonstrate the effectiveness of both self-correction using the pacbio software package and quiver. in koren, et al. investigators describe using the celera assembler package to self-correct pacbio long reads, as well as perform hybrid and short read assemblies. similar to the results shown here, the investigators found that self-correction of pacbio long reads lead to as good, or better, assemblies than hybrid-based approaches, and that assembly polishing with the quiver package led to highly accurate assemblies  <cit> . this investigation diverges slightly from these two reports in that we unable to close the genome of the three investigated e. coli strains. closing the genome of microbes is generally thought to be highly correlated to the number and size of the repetitive elements found in the sequenced genomes. sequence reads must span the repeat regions in order to properly resolve these elements. when these reads are not present, gaps will occur. two factors are thus important when considering whether or a bacterial genome can be closed – the expected maximum length of repetitive elements in the genome of interest, and the length of the sequencing reads. read lengths of the corrected reads must be longer than the longest repeat, and have sufficient depth as to cover and resolve the repeat regions. for bl <dig>  post-error correction reads averaged  <dig> nt and  <dig> nt with ~20x coverage. this should be close to the necessary lengths needed to resolve these repetitive elements, but were not sufficient in this case.

it should be noted that in the time since this data has been generated, both illumina and life technologies have introduced sequencing kits that produce even longer reads than what was used here – both platforms yield sequence reads that are twice as long as what was used in this study. these reads will undoubtedly improve assemblies with data generated solely by these machines. additionally, hybrid assemblies should be improved, as longer short read data seems to result in longer error-corrected reads. still, given the difficulty these two technologies have with repetitive sequences and read lengths that still fall far short of those produced by pacbio, it is unlikely that these advancements would alter any of the conclusions made here. however, illumina has recently purchased a technology that rivals the pacbio in read length, known as moleculo sequencing. this technology stitches together standard illumina reads into long reads of approximately 10 kb in length. these reads have the advantage of being both high quality and long, eliminating the need for error correction. unfortunately since it is based on stitching together short reads, resolution of repetitive regions is likely to remain difficult.

until moleculo becomes widely available, and the question of repetitive sequence resolution can be answered, the pacbio should be the platform of choice for any de novo bacterial assembly. in addition to superior assemblies, the pacbio offers a unique capability – the ability to call covalent base modifications. currently pacbio software can detect three types of base modifications, 6 ma, 5mc, and 4mc. the three strains in this study were specifically chosen to test the specificity and sensitivity of the pacbio sequencer and associated software to call modifications. the bl <dig> is a type b strain of e.coli, naturally lacking the dcm methylase, and therefore we expected to see no modifications of the cc×gg motif in this strain and did not. we failed to find enrichments of the motifs associated with ecoki, but in contrast, high rates of gatc modification were both expected and found. bal <dig> was expected to be both dam and dcm deficient, and while nearly every ecoki motif was found to be modified, no enrichments for the gatc or cc×gg motifs were detected. finally dh5α served as a positive control, as it is known to be wild-type for all three methyltransferases. indeed, we found all three motifs to be modified. for this strain, those motifs associated with 6 ma were highly modified, while the 5mc motifs cc×gg were detected as modified ~40% of the time. 5mc motifs are more difficult for the pacbio software to detect, and a special library preparation is required to call these modifications  <cit> . we cannot rule out the possibility that this library preparation  was not 100% effective in marking all modified bases, however, a recent report indicates that not all cc×gg motifs are modified, and this may explain the lower level of methylation found here  <cit> .

CONCLUSIONS
in summary, we compare and contrast competing methods for the assembly of bacterial genomes, demonstrating that pacbio-only assembly is comparable to hybrid assembly and significantly superior to assemblies performed with short read only data. we go on to demonstrate the sensitivity and specificity of calling base modifications using pacbio data.

moving forward, the results presented here demonstrate that to obtain the most complete and accurate assembly of a bacterial-sized genome, researchers should generate at least 100× coverage data on the pacbio. this data should then be self-corrected using the pacbio smrt analysis software or the celera error correction module, and assembled using celera . a recent report demonstrates that if enough long read data is obtained, a single contig will be the end result, however if individual contigs remain, researchers can improve the assembly by scaffolding with aha, and gap-filling with pbjelly . finally, using quiver as a final error correction step will improve the accuracy of the assembly even further and should be implemented to ensure the most accurate assembly possible.

