BACKGROUND
high-throughput genotyping technology has enabled cost effective typing of thousands of individuals in hundred of thousands of markers for use in genome wide studies  <cit> , in particular genome disease association studies  <cit> .

there are currently no standard file format for storing such genotype data, and most major analysis tools define their own textual input and output formats. only a few tools supports several input formats, and often several conversion scripts needs to be implemented in a study. these file formats of analysis tools usually only represent a restricted set of the data collected for the study – only the data necessary for the computations provided by the program – so a study either needs a secondary format for storing all data, with converter programs for import/export to analysis tools, or need several files for storing various types of data.

while spreadsheets and plain text files were adequate, if not optimal, solutions earlier, the increased data size mandates more efficient solutions. while plain text files formats have the advantage that they are human readable and can be edited in any text editor to correct mistakes, they have two major disadvantages: i) they are less space efficient than binary formats, often significantly so, and ii) text formats need to be parsed by tools before the data is analysed, a time consuming task when dealing with massive data sets.

here we describe a new binary file format, snpfile, for storing snp data and a software library for manipulating such files. the file format stores genotype data together with any kind of additional data, using a flexible serialisation mechanism. data is memory mapped as needed so even very large data sets can be manipulated with moderate ram requirements. the representation is optimised for accessing nearby markers together, and thus cache and disk efficient for the access patterns of most multi-locus analysis methods.

we have extended the suite of association mapping tools developed in our group  <cit> , including both single marker methods  <cit>  and multi locus methods  <cit>  and now successfully use it in our own studies.

RESULTS
we have developed a new file format and c++ library for manipulating snp genotype data and arbitrary secondary data. the design allows us to store all genotype and secondary data in a single file, using a flexible serialisation framework. the genotype data representation is designed to be memory and io efficient for the access patterns typical for multi-marker association mapping methods.

simple and efficient genotype data manipulation
the primary data in a snpfile is genotype data, represented as a matrix with one or two rows per individual  and one column per marker. a matrix representation for the primary data is a simple abstraction that makes it relatively easy to implement most analyses.

the actual implementation consists of a small hierarchy of classes for representing the data, depending on the size of the data and the usage pattern. small matrices can efficiently be stored in ram while for larger matrices we provide file storage. the abstraction for accessing the data is the same whether the actual data is stored in ram or on disk.

although the programming abstraction for ram based and file based matrices are the same, the time performance can differ significantly between accessing ram and file data. by representing the file based matrices in a "column by column" order on the disk  we have optimised the code for the common case where nearby markers  are accessed together .

we do not expect the disk storage matrices to ever outperform ram matrices. when the data can fit in ram, the ram matrices will always be more efficient to access, and when the matrix cannot fit in ram, the swapping strategy will be similar to the swapping strategy used for the memory mapped file matrices. the main advantage of using the disk based matrices is that the matrix representation is directly available after opening the file; potentially time and memory consuming parsing is avoided.

running time in seconds, for blossoc using text io and snpfile, as a function as the number of individuals.

framework for arbitrary secondary data
depending on the analysis of the data, various secondary data is needed, such as phenotypes, co-variates etc. most file formats support only a small fraction of the types of secondary data of interest in a study, since they only focus on the types of analysis intended when the file format was designed. a consequence is that data is often kept in several independent files, with ample risks for accidental inconsistencies between files.

to avoid such problems we have designed a flexible framework for secondary data into snpfile. through a serialisation framework, any c++ type can be stored in a snpfile and accessed through a text key. built-in types and stl containers are directly supported, and user-defined types can be supported by writing serialisation and de-serialisation methods. this can be done either through template methods in the user-defined types, or non-intrusively through global or name-space functions.

using snpfile
most multi-marker analysis methods can efficiently represent the genotype data in matrix form, with one or two rows  per individual and with a column  per marker. for such methods, implementing them using snpfile is straightforward. with the framework for storing arbitrary c++ data types, porting applications to use snpfile is usually a simple matter of changing the io routines to read the relevant secondary data through this framework, and then using snpfiles matrix classes instead of those used before.

we have ported our existing association mapping software  <cit>  – both single marker and multi-marker methods – to work on the new file format. since these tools already represented genotype data as matrices, porting them was a simple task, taking from a few hours to a day or two. we are currently successfully using the updated tools in our own studies, where the format has greatly alleviated the informatics problems in data management and completely eliminated the need for cutting data into windows for analysis, when the full data cannot fit in ram.

CONCLUSIONS
the size of data that can cost efficiently be collected for population genetics studies – and especially disease mapping studies – has increased immensely the last few years, and this has lead to an informatics challenge in how to efficiently store and manipulate this data together with any secondary data collected for the study.

the file format we have described enables us to store all relevant data – primary and secondary – in a single file. the primary data is stored as a matrix, with a memory layout that makes it io efficient to manipulate the data on disk, avoiding having to keep large data sets in ram. the secondary data is stored using a flexible serialisation framework that allows any c++ data type to be stored together with the primary data.

the format has been very useful for our own studies where it has significantly reduced the informatics burden in keeping track of various secondary data, and where the memory and io efficiency has greatly simplified analysis runs. a main limitation with the file format is that it is only supported by the very limited set of analysis tools developed in our own lab. through scripting interfaces to the file format, we hope to alleviate this in the future.

a different binary file format for massive genotype data is available in the plink project  <cit> . the purpose of the binary format there is also achieving better cpu and memory performance. where their format differs from ours is mainly in the treatment of secondary data. in the plink project, secondary data such as co-variates requires separate files from the genotype data. in contrast, we have designed our format such that we can store arbitrary secondary data together with the primary data in the same files.

