BACKGROUND
researches in many fields of knowledge have benefited from the use of representational resources such as terminologies, controlled vocabularies and ontologies. these resources are used not only to facilitate the development of computer systems but also to assist in the automated execution of different tasks by these systems. in the biomedical area the use of these resources has gained more visibility due to the rapidly growing volume of information. ontologies are especially able to support the biomedical research in many different ways  <cit> . the main applications of ontologies in the biomedical domain include the provision of a  vocabulary for the functional annotation of biological data  <cit> , the support for information retrieval across databases and biomedical literature  <cit> , and standardization and integration of information and computer systems in the domain  <cit> .

despite the increasingly use of ontologies in the biomedical domain, there are a number of challenges that hinder their effectiveness. these challenges include the use of different languages and approaches for ontology representation  <cit>  and the development of methods for ontology quality evaluation  <cit> . the need to integrate different ontologies, often pertaining to the same domain, poses an additional challenge  <cit> . as a consequence, a number of initiatives towards ontology development standardization have emerged.

the open biological and biomedical ontologies  foundry is a consortium that provides a repository of life-science ontologies  <cit> . these ontologies are developed according to a set of shared principles, including openness, orthogonality, collaborative development and the use of a well-defined syntax and common relations. the obo foundry ontologies include the gene ontology   <cit> , the chemical entities of biological interest ontology   <cit> , the phenotypic quality ontology   <cit> , the protein ontology   <cit>  and the xenopus anatomy and development ontology   <cit> , among others. additionally, the foundry also includes a number of candidate ontologies and other ontologies of interest in the life-science domain.

ontologies curated by the obo foundry are basically represented using text-based notations, viz., the obo flat file format  <cit>  and the web ontology language   <cit> . owl is an ontology definition language originally conceived for the semantic web. owl specifications are serialized using a machine-readable rdf/xml-based format  <cit> , i.e., owl specifications are exchanged as rdf documents. the obo flat file format or simply obo format is also a machine-readable, text-based ontology representation language. the obo format provides a subset of the concepts in owl, with a number of extensions. obo foundry ontologies are usually developed and maintained as obo format and automatically converted into owl.

another obo foundry initiative to foster ontology development and integration was the development of the obo relation ontology  <cit> . the obo relation ontology consists of a rigorously-defined set of relations commonly used in biomedical ontologies. the development of such ontology aims at providing consistent and unambiguous formal definitions for relations used to connect biological entity classes in biomedical ontologies. a class describes common characteristics to a set of biological entities existing in the real world. the use of relations and classes in a manner consistent with the definitions provided by the obo relation ontology facilitates the analysis and integration of biomedical knowledge represented in different ontologies using computational tools.

some authors argue that conceptual modeling artifacts, such as ontologies, are  intended to be used by humans, not machines  <cit> . mi and thomas also argue that in order to succeed, ontologies and standards in bioscience should be designed not only to be readable by computers, but also to be accurate and intuitive to  biologists  <cit> . visual  languages and formalisms have long been used to represent knowledge in complex  systems. graphical models are generated, communicated and comprehended by humans. still, these models can be manipulated, maintained and analysed by computer systems  <cit> . thus, efforts have been made to develop graphical notations  to represent biological knowledge  <cit> .

the unified modeling language   <cit>  is a standard graphical language widely used in the specification, documentation and visualization of computer artifacts and ontologies. uml wide acceptance is due to its semantically rich and well-defined set of modeling concepts, its independence of specific methodologies and a wide range of supporting tools. additionally, uml has a built-in extension mechanism named profile that can be used to provide new modeling elements specific to a particular domain, which facilitates its adoption and use across different application domains.

despite the broad acceptance of uml by the software engineering and conceptual modeling communities, little support is provided by the obo foundry for the development of ontologies using graphical notations in general and using uml in particular. obo foundry ontologies can be developed using the obo-edit  <cit> , an open source ontology editor that supports the obo format. however, no support is provided for uml.

this work aims at developing a uml profile for the obo relation ontology. we have studied the different types of biological entity classes and relations defined in this ontology in order to identify suitable extensions to uml that are used to create our profile. the proposed profile was then applied in the modeling of a number of fragments from obo foundry ontologies. the profile provides a number of uml modeling elements specific to the biomedical domain, which allows the creation of models for biomedical ontologies in a consistent and standardized way. moreover, the use of a widely established graphical language as uml facilitates the modeling and visualization of ontologies as well as helps preventing inconsistencies usually caused by misunderstandings. although the proposed profile can be used by any general-purpose uml modeling tool, it can also be embedded as part of specific tools in order to provide domain-specific graphical notation and/or automatic error detection.

methods
the following steps were used to create the obo relation ontology profile: 1) study of the obo relation ontology; 2) study of the uml metamodel, uml profile mechanism and the object constraint language ; 3) propose an extended version of the uml metamodel in conformance with the obo relation ontology; 4) propose a profile that implements the extended metamodel, and; 5) apply the proposed profile in the specification of a number of excerpts from different obo foundry ontologies.

obo relation ontology
the obo relation ontology  <cit>  defines a number of binary relations. most of these are class-level relations defined between classes of entities , also known as universals, types or kinds in the literature. this ontology also includes one  relation defined between an instance and its associated class . all obo class-level relations are formally defined in terms of a set of primitive instance-level relations, connecting either two instances  or an instance to its associated class.

according to the obo relation ontology, the two non-overlapping types of biological entity classes are continuants and processes  <cit> . continuants represent things, objects, structures, while processes represent biological activities and events in general. the distinction between continuants and processes, also called occurrents, was first introduced in the basic formal ontology   <cit> . additionally, continuants can be subdivided into material and immaterial. material is a specific type of continuant that has matter, such as cell, dna and hemoglobin. inversely, immaterial is a specific type of continuant that has no matter, such as the interior of holes, channels, cavities and tubes.

the different relations defined in the obo relation ontology are grouped into four categories: foundational relations, which include basic relations that are likely to be used in any biomedical ontology; spatial relations, which include relations that connect biological entity classes in terms of spatial regions occupied by their instances; temporal relations, which include relations involving biological entity classes whose instances exist at different instants of time; and, participation relations, which include relations between different types of biological entity classes . table  <dig> shows the different ontology relations and their respective categories.

unified modeling language
the unified modeling language   <cit>  is a widely disseminated language used in the modeling of computer systems. uml has been standardized by the object management group  <cit>  since the late  <dig> s. a major reason for wide acceptance and use of uml is the presence, in this language, of a set of semantically rich and well-defined modeling concepts. additionally, uml is independent of specific modeling methodologies and has a wide range of support tools.

uml is defined using a metamodeling approach: a model is specified through the instantiation of model elements defined in a metamodel, i.e., a model is an instance of a metamodel. so, the main purpose of a metamodel is to define how model elements can be instantiated in a model. this metamodeling approach can be recursively applied and, thus, a model defined from a metamodel serves as a metamodel for the specification of another model. each  model represents a different layer of the  metamodeling architecture.

the uml architecture is defined according to a four-layer hierarchy. the first and topmost layer, called meta-metamodel layer, uml meta-metamodel or simply m <dig>  defines a language for the specification of metamodels. this layer contains a handful of generic modeling elements. these elements are basically grouped into a core package. this package is then used in the specification of a number of other metamodels, including the uml metamodel itself, the meta-object facility   <cit>  and the profile mechanism, which since uml  <dig>  has been defined as a specific metamodeling technique  <cit> .

the second layer, called metamodel layer, uml metamodel or simply m <dig>  consists of an instance of the meta-metamodel layer. it defines a language to describe models of an information domain. the metamodel layer represents uml itself and therefore contains the description of all uml modeling elements. it also specifies how these elements can be combined to build uml models and their associated notation.

the third layer, called model layer or m <dig>  consists of an instance of the metamodel layer. it defines a language that describes an information domain. the model layer allows the creation of models of different interest domains, including software systems, business processes and user requirements.

finally, the fourth and lowest layer, called object layer or m <dig>  consists of an instance of the model layer. it comprises the  informational objects present in the interest information domain.

uml profile
the construction of models pertaining to a particular domain can benefit from the use of more specific modeling concepts  than those usually provided by the language . this can be achieved by adapting the uml metamodel in order to facilitate the construction of domain-specific models. the adaptation of the uml metamodel to a given domain provides not only specific terminology and semantics but also specific notation for the main concepts in the domain.

the adaptation of the uml metamodel can be carried out according two different approaches  <cit> . the first approach involves changing the metamodel itself, so that new elements can be added and the semantics of existing elements can be changed. the second approach extends the uml metamodel by adding constraints into existing elements of the metamodel in order to specialize their semantics. however, it is not possible to modify or contradict any original constraints related to these elements. the former type of adaptation is often called heavyweight extension and the latter is often called lightweight extension. the profile mechanism represents a built-in mechanism for the introduction of lightweight extensions to uml.

a uml profile is a specific type of package that contains a number of extensions to the uml metamodel  <cit> . a profile must always be related to a reference metamodel; it cannot be used without its reference metamodel. a profile defines a limited capability to extend metaclasses of the reference metamodel. these extensions are defined as stereotypes that apply to existing metaclasses of the reference metamodel. a stereotype is a specific metaclass that can be used to extend an element of the reference metamodel. thus, a stereotype defines how an existing metaclass may be extended to incorporate specific semantics and enables the use of domain-specific terminology or notation for the extended metaclass. an element of the metamodel can be extended by one or more stereotypes and, conversely, a stereotype may extend one or more elements of the uml metamodel.

the definition of a uml profile for the obo relation ontology allows the elements of uml metamodel to be extended only narrowly, ensuring that the specialized metamodel is still easily understood by modelers of other domains and supported by different tools. since a profile is a built-in mechanism of uml, it is possible to exchange profiles between uml modeling tools, as well the models to which they have been applied.

object constraint language
a constraint is an extensibility mechanism that allows one to refine the semantics of a modeling element or to add new semantics to this element. a constraint can also be used to limit how elements of a model can be created from elements defined in the uml metamodel. constraints are specified via an expression written in a constraint language, either a formal language or a natural language.

constraints specified using a natural language are intrinsically ambiguous. in order to specify unambiguous constraints a formal language must be used. the object constraint language   <cit>  is a formal language standardized by the omg for the description of constraints on uml models. ocl is a pure specification language. as such, the evaluation of an ocl expression can only return a value, but it cannot change the state of a model. moreover, since ocl is not a programming language, ocl expressions can neither be directly executed nor express any implementation issue.

ocl is a typed language. thus, each ocl expression is always associated with a type  represented by some element of the uml metamodel  <cit> . ocl expressions can be used to specify conditions that must be kept in modeling elements such as classifiers and stereotypes. additionally, ocl expressions can be used to specify queries on uml models and describe pre and post conditions on operations and methods defined in a model, among other applications.

constraints defined as part of the uml profile for the obo relation ontology have been specified using both natural language and ocl.

RESULTS
uml metamodel
after reviewing the definitions of the different types of biological entity classes and relations of the obo relation ontology, we have identified the elements in the uml metamodel that were relevant for the definition of our profile, viz., class, directedrelationship, association, generalization and dependency. figure  <dig> presents an excerpt of the uml metamodel containing these elements. a number of related elements were included for completion purposes. however, we exempted ourselves from representing all existing elements and associations. more information about the uml metamodel can be found in  <cit> .

the abstract metaclass element represents a component of a model. element is the common superclass of all metaclasses that are part of the uml metamodel. the abstract metaclass namedelement specializes element. namedelement represents an element of a model that may have a name used to unambiguously identify this element. the abstract metaclass typedelement specializes namedelement. typedelement represents an element that have a name and an associated type . the abstract metaclass type defines a set of values that constrains the range of values represented by a typed element. thus, elements associated with a type are restricted to represent only values defined by the type.

the abstract metaclass classifier specializes the metaclass type. classifier represents instances  with features in common . instancespecification is a named element that describes partially or completely an instance of an entity in a model. such description can include the entity classification, i.e., the classifier from which the entity is an instance, and, based on its classifier, the kind of instance . instancespecification can also be used to represent a snapshot of an existing entity at some point in time. the abstract metaclass feature is a named element that represents behavioral or structural characteristics of classifiers.

the metaclass relationship specializes the metaclass element. relationship represents a type of relation between two or more elements of a model. the abstract metaclass directedrelationship specializes relationship in order to represent directed relations between source and target elements. the metaclass dependency specializes directedrelationship. dependency represents a relation defined between named elements of a model in which a set of  elements require other elements  for their  specification. this relation establishes that the semantics of the client element is dependent on the definition of the supplier element.

the metaclass generalization also specializes directedrelationship. generalization represents a binary relation between a general classifier and a more specific classifier. this relation is used to represent that instances of the specific classifier are also instances of the general classifier. thus, any feature defined for the general classifier is inherited by the specific classifier. similarly, any constraint applied to the general classifier is also applied to the specific classifier. generalization has one boolean attribute, issubstitutable , which indicates whether or not the specific classifier can be used wherever the general classifier is usually used.

the abstract metaclass redefinableelement specializes the abstract metaclass namedelement. redefinableelement represents an element that can be redefined in the context of a generalization. since classifier and feature are specializations of redefinableelement, they can be redefined in the context of a generalization relation. the redefinition of an element can include semantics addition or restriction in a manner consistent with the semantics initially defined.

generalization relations can be aggregated into subsets. the metaclass generalizationset is a named element that represents collections of subsets of generalization relationships. generalizationset describes how a single general classifier  can be subdivided into several specific subtypes. generalizationset has two boolean attributes, viz., iscovering , which indicates whether or not every instance of a general classifier is also an instance of at least one of its specific classifiers, and isdisjoint , which indicates whether or not the set of specific classifiers in a generalization have an instance in common.

the abstract metaclass multiplicityelement specializes the abstract metaclass element.multiplicityelement defines an inclusive interval of non-negative integers beginning with a lower bound, attribute lower , and ending with a possibly infinite upper bound, attribute upper . multiplicityelement specifies the allowable cardinalities for an instantiation of this element. the abstract metaclass structuralfeature specializes the metaclasses feature, typedelement and multiplicityelement. structuralfeature represents a typed feature of a classifier that specifies the structure of instances of the classifier. the metaclass property specializes the metaclass structuralfeature. in the context of this work, property represents the types of association ends.

the metaclass association specializes the metaclasses classifier and relationship. association represents a semantic relationship that can occur between instances of typed elements. association instances are named links. an association has at least two  ends , each one represented by a property and indirectly associated to a corresponding type . a member end represents the participation of an instance of the classifier connected to an end of a link. thus, an association declares that there can be links between instances of associated types. additionally, an association may have one or more navigable ends . a navigable end can be more easily accessed at runtime from instances participating in the other end of the link. navigable ends provide a navigation facility.

aggregation represents a specific type of binary association in which elements representing "parts" are related to an element representing a "whole" . two different types of aggregation can be defined, viz., composition and shared aggregation. composition represents an aggregation relation in which instances of "part" can only be included in a single composition. additionally, if the instance representing the "whole" is removed, the parts are removed as well. a shared aggregation poses no such restriction. in such relation, instances of "part" can be included in more than one shared aggregation. further, if an instance representing the "whole" is removed, the parts may or may not be removed. both relationships are represented in the uml metamodel by the attribute aggregation, whose type is aggregationkind. aggregationkind is an enumeration type that represents different types of association: association without aggregation , association with composition  and association with shared aggregation .

the metaclass class specializes the metaclass classifier. class describes a set of instances  that share features, constraints and semantics. the structural and behavioral features owned by a class  are named attributes and operations, respectively. objects of a class have their own values for attributes. these values are in accordance with the types and multiplicities defined by the class. operations defined for a class can be invoked on objects of the class. as a result, the invocation of an operation on an object can return a value and/or cause changes in the values of attributes of this object. in addition, operation invocation can also cause changes in the values of attributes of other objects that can be reached through the links associated to the object on which the operation was invoked.

uml profile for the obo relation ontology
in order to define our profile for the obo relation ontology, we have proposed a number of extensions for the uml metamodel. these extensions were proposed based on the definitions of the types of biological entity classes and relations of the obo relation ontology.

the different types of biological entity classes defined in the obo relation ontology were represented as specializations of metaclass class. the metaclass class was initially specialized into the metaclasses continuant and process. the metaclass continuant was in turn also specialized into the metaclasses material and immaterial. by default, these metaclasses  are mutually exclusives. these definitions are consistent with the principles of the obo relation ontology that describes these categories as non-overlapping. thus, classes extended by process can not be extended by continuant or its subtypes and vice versa, and classes extended by material can not be extended by immaterial and vice versa.

each of the proposed extension elements corresponds to a stereotype in our profile. thus, four stereotypes were defined for representing the type of a biological entity class, viz., <<continuant>>, <<process>>, <<material>> and <<immaterial>>.

the abstract metaclass foundationalrelation represents basic relations that can be defined between two continuant entity classes or between two process entity classes. the metaclass is_a specializes the abstract metaclass foundationalrelation. is_a represents a subtype relation between a biological entity class  and another biological entity class  acting as a supertype. since the metaclass generalization defines a similar type of relationship, is_a also specializes generalization.

the metaclass instance_of specializes the abstract metaclass foundationalrelation. instance_of represents a primitive relation between a general biological entity class  and a particular instance of this class . since the uml metaclass dependency represents a relationship that can occur between named elements in general, such that a set of client elements is either semantically or structurally dependent on the definition of a set of supplier elements, we have used this metaclass as basis for the representation of instance_of. thus, instance_of was also defined as a specialization of dependency.

the metaclasses part_of and has_part also specialize the metaclasses foundationalrelation and association. part_of represents an association between a source and a target biological entity class, in which each instance of the source class is part of an instance of the target class . inversely, has_part represents an association between a source biological entity class and a target biological entity class, in which an instance of the source class  has other instances of the target class as its parts.

part_of is specialized into the metaclasses proper_part_of and integral_part_of. proper_part_of represents a part_of relation with the additional constraint that the source entity class is different than the target entity class . additionally, in a part_of relation defined between a source entity class and a target entity class, we cannot infer that the target has the source as its part. such semantics is captured by the integral_part_of relation. integral_part_of represents a part_of relation in which the target entity class has also the source entity class as its part .

similarly, has_part is also specialized into two metaclasses, viz., has_proper_part and has_integral_part. has_proper_part represents a has_part relation with the additional constraint that the source entity class is different than the target entity class. has_integral_part represents a has_part relation in which the target entity class is also part of the source entity class .

each of the proposed extension elements corresponds to a concrete stereotype in our profile, except for the abstract metaclasses oborelation and foundationalrelation. thus, the following stereotypes were defined for representing a foundation relation: <<is_a>>, <<instance_of>>, <<part_of>>, <<integral_part_of>>, <<proper_part_of>>, <<has_part>>, <<has_integral_part>> and <<has_proper_part>>.

the is_a relation  is formally defined as follows: if c instantiates c at a time t, then c instantiates c <dig> at t, where both c and c <dig> represent either continuant or process entity classes. the uml metaclass generalization, which we have used as basis for the definition of is_a, represents a relationship that can occur between one specific classifier and one general classifier, such that an instance of the specific classifier is also an instance of the general classifier. provided the specific and the general classifiers represent either two continuant entity classes or two process entity classes, we are able to capture in uml a semantic definition equivalent to the one defined in the obo relation ontology for this relation. these restrictions have been defined as part of <<is_a>> stereotype specification.

the instance_of relation  represents a primitive relation between an instance c and an entity class c, either continuant or process, which it instantiates at a specific time t. the uml metaclass dependency, which we have used as basis for the definition of instance_of, represents a relationship in which one or more named elements  are dependent on the definition of one or more named elements . provided the client represents a particular instance of an entity class  and the supplier represents the entity class itself, either continuant or process, which it instantiates, we are able to capture in uml a semantic definition equivalent to the one defined in the obo relation ontology for this relation. these restrictions have been defined as part of <<instance_of>> stereotype specification.

the part_of relation  is formally defined as follows: for all c that instantiates c at a time t, there is some c <dig> such that c <dig> instantiates c <dig> at time t and c part_of c <dig> at t, where both c and c <dig> represent either continuant or process entity classes and part_of represents a primitive instance-level relation. the all/some rule used in the definition of the part_of relation guarantees that this relation is valid for every instance of class c being related to some instance of class c <dig> 

the uml metaclass association, which we have used as basis for the definition of part_of, models the existence of a semantic relationship  between instances of typed elements. a link is an instance of an association. in order to relate all instances of class c to at least one instance of class c <dig> through links, we have constrained the <<part_of >> stereotype using the forall and exists ocl operators. however, the pivotal difference between the obo relation ontology and uml lies in the fact that instance-level relations are formally defined in the former, i.e., they form a set of primitive relations, whereas links are not formally defined in the latter. in this regard, our profile falls short in representing exactly the same semantics as defined by the obo relation ontology for the part_of relation.

the approach used to capture the semantics of the <<part_of>> stereotype has also been used in the specification of the remaining stereotypes of the profile because their corresponding obo relations have also been formally defined using the all/some rule and, similarly to <<part_of>>, they also specialize the metaclass association.

the abstract metaclass spatialrelation represents spatial relations defined between different continuant entity classes. spatialrelation specializes the metaclasses oborelation and association. the metaclasses adjacent_to, located_in, location_of, contained_in and contains are all specializations of spatialrelation.

adjacent_to represents that the spatial region occupied by a source continuant is adjacent to the spatial region occupied by a target continuant . located_in represents that a source continuant is located in the spatial region occupied by a target continuant. contained_in represents that a source material continuant is contained in the spatial region occupied by a target immaterial continuant. however, in this case, the material continuant is not part of the immaterial continuant. location_of and contains represent the inverse of relations located_in and contained_in, respectively.

each of the proposed extension elements corresponds to a concrete stereotype in our profile, except for the abstract metaclass spatialrelation, which is also used to aggregate common properties of its subtypes and help structuring the profile. thus, the following stereotypes were defined for representing a spatial relation: <<adjacent_to>>, <<located_in>>, <<location_of >>, <<contained_in>> and <<contains>>.

the abstract metaclass temporalrelation represents temporal relations defined between different entity classes. temporalrelation specializes the metaclasses oborelation and association. the metaclasses derives_from, derived_into, transformation_of, preceded_by and precedes are all specializations of temporalrelation.

derives_from represents that a source material continuant immediately derives from a target material continuant. the target continuant ceases to exist and  its matter is inherited by the source continuant. transformation_of represents that a source material continuant results from the transformation of a target material continuant . preceded_by represents that a target process occurs in an instant of time prior to the occurrence of a source process. derived_into and precedes represent the inverse of relations derives_from and preceded_by, respectively.

each of the proposed extension elements corresponds to a concrete stereotype in our profile, except for the abstract metaclass temporalrelation, which is also used to aggregate common properties of its subtypes and help structuring the profile. thus, the following stereotypes were defined for representing a temporal relation: <<derives_from>>, <<derived_into>>, <<transformation_of >>, <<preceded_by>> and <<precedes>>.

finally, the abstract metaclass participationrelation represents participation relations of continuants in the occurrence of processes. participationrelation also specializes the metaclasses oborelation and association. the metaclass has_participant specializes the metaclass participationrelation. has_participant represents that a target continuant participates somehow in a source process. has_agent specializes the metaclass has_participant. has_agent represents that a source process has a material continuant as its participant and that this continuant is responsible for the occurrence of the process. participates_in and agent_in represent the inverse of relations has_participant and has_agent, respectively.

each of the proposed extension elements corresponds to a concrete stereotype in our profile, except for the abstract metaclass participationrelation. thus, the following stereotypes were defined for representing a participation relation: <<has_participant>>, <<participates_in>>, <<has_agent>> and <<agent_in>>.

the abstract metaclasses oborelation, foundationalrelation, spatialrelation, temporalrelation and participationrelation were introduced to aggregate common properties of its subtypes and help structuring the profile. thus, we did not define a concrete syntax for these metaclasses in our profile. for each element defined in our profile, there is a brief description of its semantics, the base class extended by the stereotype, associated notation and at least one example of its usage. additionally, we also described any constraints that must be applied to elements extended by these stereotypes. these constraints were described using both text and an equivalent ocl expression. figure  <dig> illustrates an example of a profile element definition .

profile application
this section describes the application of the proposed profile in the development of a number of fragments from different  ontologies. the objective of this activity was to evaluate the use of the profile in the specification of a number of uml models. we have focused only on obo foundry ontologies. particularly, we have considered the following ontologies: gene ontology , protein ontology  and xenopus anatomy and development ontology . thus, no obo foundry candidate ontologies and/or other ontologies of interest were considered. additionally, since the relationships defined in the obo relation ontology represent the vast majority of the total relationships defined on these ontologies , the fragments were chosen to focus only on these relationships. we have used enterprise architect, from sparx systems, as our uml modeling tool.

the first ontology considered in our study was the gene ontology   <cit> . go provides a set of terms and relations used for standardization of genes and their products in eukaryotic organisms using three independent ontologies: cellular component, which describes subcellular structures and macromolecular complexes in which, generally, gene products can be located in or can be subcomponents of; molecular function, which describes activities that occur at the molecular level; and biological process, which describes collections of processes  related to the functioning of integrated living units. in the context of our work, we have considered only the cellular component ontology. in the fragments considered in the development of our models, only continuants were identified. examples of these continuants include cell part, cell body, membrane, etc. is_a and part_of, which account for over 92% of the total relationships defined by go, represent the only relationships used in these fragments.

the second ontology considered in our study was the protein ontology   <cit> . pro has been developed by the national institute of general medical sciences  to describe proteins  and protein evolutionary relationships . thus, pro has two overlapping components: protein evolution  and protein forms . proevo organizes proteins according to their evolutionary relatedness, while proform describes multiple proteins forms derived from a given gene, which arise through variations in splicing or post-translational modifications.

each concept represented by the ontology has a unique identifier within the scope of its components. additionally, multiple protein forms produced from a given gene are referred as isoforms, and polymorphic sequences as variants. in the fragments considered in the development of our models, only  continuants were identified. is_a and derives_from, which account for over 90% of the total relationships defined on the pro, represent the only relationships used in these fragments. in particular, derives_from is used to indicate proteins with post-translational modifications derived from non-modified proteins.

the class tgf-beta represents a protein involved in the regulation of cell growth and differentiation. the class tgf-beta  <dig> represents a tgf-beta protein that is a translation product of the tgfb <dig> gene. thus, it was modeled as a specialization of the class tgf-beta through an is_a relation . the class proteolytic cleavage product represents an amino acid chain produced as the result of peptide bond cleavage of a longer amino acid chain. the class tgf-beta  <dig> proteolytic cleavage product represents a proteolytic cleavage product that is derived from tgf-beta  <dig> protein. thus, it was modeled as a specialization of proteolytic cleavage product through an is_a relation. additionally, a derives_from relation  was also established between this class and the class tgf-beta  <dig> 

the class tgf-beta  <dig> isoform  <dig> represents a translational product of a specific transcript of the tgfb <dig> gene. thus, it was modeled as a specialization of the class tgf-beta  <dig> through an is_a relation. the class tgf-beta  <dig> isoform  <dig> cleaved  <dig> represents a specific product of tgf-beta  <dig>  which was modified by a specific proteolytic cleavage process. the class tgf-beta  <dig> isoform  <dig> cleaved  <dig> represents a tgf-beta  <dig> proteolytic cleavage product that is derived from a tgf-beta  <dig> isoform  <dig> protein that suffered a proteolytic cleavage process. thus, it was modeled as a specialization of tgf-beta  <dig> proteolytic cleavage product through an is_a relation. additionally, a derives_from relation  was also established between this class and the class tgf-beta  <dig> isoform  <dig> 

the third ontology considered in our study was the xenopus anatomy and development ontology   <cit> . xao was created to standardize the annotation of gene expression, normal and mutant phenotypes data of xenopus species. this ontology has two overlapping components, viz., xenopus anatomical entity and xenopus developmental stage. the former provides a description of anatomical structures and tissues of the specie and the latter provides a description of the developmental stages of the specie. each concept represented by the ontology has a unique identifier within the scope of these two components. in the context of our work, we have considered only the xenopus developmental stage ontology. in the fragments considered in the development of our models, only processes were identified. is_a, part_of and preceded_by, which account for over 63% of the total relationships defined on the xao, represent the only relationships used in these fragments. in particular, preceded_by is used between developmental stages with the purpose of indicating time intervals during which certain anatomical structures and tissues exist.

the class xenopus developmental stage represents any developmental stage of the xenopus species. classes unfertilized egg, embryonic stage, adult and death represent different developmental stages of this organism, each modeled as a specialization of xenopus developmental stage through an is_a relation .

the class embryonic stage represents a developmental stage that occurs in the time interval between fertilization and body feeding. the classes blastula and neurula represent specific embryonic developmental stages that occur within this time interval and thus they were modeled as specializations of embryonic stage through is_a relations.

blastula comprehends a range of developmental stages that occur between the nieuwkoop and faber  stage  <dig> and nf stage  <dig>  each of these stages was modeled as a separate class, viz., nf stage  <dig>  nf stage  <dig> and nf stage  <dig>  nf stage  <dig> represents a four hour 64-cell embryo. nf stage  <dig> represents a five hour 128-cell embryo. nf stage  <dig> represents a seven hour embryo whose cells are smaller at dorsal than at ventral side. since these classes are part of the range defined by blastula, each was related to blastula through a part_of relation .

classes nf stage  <dig>  and nf stage  <dig>  were related through a preceded_by relation . this same type of relation was defined between classes nf stage  <dig> and nf stage  <dig>  since stages nf stage  <dig>  nf stage  <dig> and nf stage  <dig> happen in xenopus species respectively at  <dig>   <dig> and  <dig> hours  after the embryo fertilization, the application of this relation was consistent with its definition because nf stage  <dig> occurs in an instant of time preceding nf stage  <dig> and likewise nf stage  <dig> occurs in an instant of time preceding nf stage  <dig> 

discussion
we have developed a uml profile for the obo relation ontology. first, we have proposed a number of extensions to the uml metamodel in conformance with the obo relation ontology. then, these extensions were mapped onto corresponding elements of our profile. finally, we have modeled a number of fragments of obo foundry ontologies using the profile. due to the graphical domain-specific modeling elements of the proposed profile, the modeling and visualization of ontologies in the biomedical domain was facilitated. additionally, the profile provided support for more intuitive forms of reasoning about the incorporation of elements into ontologies than text-based formats.

uml has increasingly been used for the representation of biomedical knowledge  <cit> . according to these works, uml graphical notation enables the representation of complex biological data and allows biologists to visualize and interpret information in an intuitive way. uml also improves the description of the semantics of a given domain. these works also highlight the use of uml intrinsic extension mechanism to tailor the language to particular biological purposes.

due to the ontological commitments of uml, we were not able to formally represent, for most of the relations in our profile, exactly the same semantics as defined by the obo relation ontology. this limitation is not a problem because the profile should not be used in isolation, but having in mind the formal definitions of the obo relation ontology.

the developed uml profile is useful for modeling and visualizing ontologies, but no complete ontology was modeled, i.e., only fragments of selected biomedical ontologies were modeled using the profile. biomedical ontologies are in general large artifacts, which poses a challenge regarding its representation and visualization using a graphical notation and supporting tool. actually, any large model presents the same limitation. however, this limitation can be overcome with adequate support from a modeling tool . additionally, the application of the profile aimed primarily at demonstrating its use to model different sets of biomedical entity classes and their relationships. since, for example, is_a and part_of represent over 90% of the go relationships and the remaining 10% of its relationships do not pertain to the obo relation ontology, it is needless to model the complete gene ontology for this purpose.

ontology developers and users can benefit from a well-established language such as uml. even though ontology developers are more likely to know uml, most ontology users in the biomedical domain, biologists in general, are less likely to know this language. however, the uml graphical notation is as difficult to learn as any other graphical notation. additionally, even in the biomedical domain uml graphical notation can be considered quite intuitive and easy to learn  <cit> .

continuous modifications of existing ontologies according to emerging new biological insights represent a common practice in the biomedical domain. thus, any standards proposed to represent  biomedical ontologies must be flexible enough to, possibly, accommodate these changes. recently, the obo foundry started developing a new version of the obo relation ontology  <cit>  to replace the current ontology. the new obo relation ontology includes a number of changes, such as the inclusion of some biomedical-specific relations and the restructuring of the hierarchy of entity classes. since this new version has been neither finalized  nor used in the development of any obo ontology, the ontology which was used as basis for our work remains the de facto standard.

eventually, the new version of the obo relation ontology will become the de facto standard and the developed uml profile will need to be restructured to incorporate the proposed modifications. basically, we will need to add and/or replace a number of abstract and concrete metaclasses to reflect both the new hierarchy of entity classes and the updated list of relations. then, these elements will be mapped to corresponding stereotypes in the profile. we believe our uml profile is flexible enough to accomodate these modifications in due time.

to the best of our knowledge this is the first initiative to provide a formal conceptual framework to support the uml-based development of ontologies according to obo principles. uml graphical notation facilitates the visualization of concepts and their relationships, which helps preventing inconsistencies frequently introduced during the incorporation of new concepts and/or relationships to an ontology. additionally, since the profile concepts are formally defined using ocl, their use can be subject to  reasoning which also helps preventing inconsistencies.

according to the obo relation ontology, a biological entity class is classified as either continuant or process. additionally, a continuant can be further classified as either material or immaterial. however, obo foundry ontologies do not make such distinctions. concepts are included in the ontology without any explicit reference or association to this ontological classification. our uml profile, by contrast, requires each modeled entity class to be stereotyped as either <<continuant>> or <<process>>. additionally, continuants can also be stereotyped as either <<continuant,material>> or <<continuant,immaterial>> to indicate a more detailed level of classification. however, in this case the <<material>> and <<immaterial>> stereotypes can simply be used instead.

the sole association of a concept to the different types of entity classes helps preventing the introduction of inconsistencies and/or facilitates the identification of existing inconsistencies in developed ontologies. consider, for example, the concept gene ontology, which was initially defined in the gene ontology to represent the ontology itself. according to the profile definition, the concept gene ontology could not have been stereotyped neither as <<continuant>> nor as <<process>>. thus, characterizing an invalid concept.

additionally, since the concepts contained in obo foundry ontologies are not explicitly classified, relationships between these concepts are also established based only on tacit knowledge. although ontology development is carried out largely by domain experts, such reliance on tacit knowledge favours the arising of  inconsistencies. on the other hand, since each modeled entity class using our profile is explicitly stereotyped, any relation established between them is subject to the  defined ontological constraints of this relation. for example, the relation has_agent connects a source process to a target material continuant. so, any attempt to connect other types of entity classes, e.g., a source process to a target immaterial continuant or two material continuants, using this relation is incorrect. the use of our profile allows ontology developers and ontology users to explicitly reason about these constraints. furthermore, in case automatic support is provided by the modeling tool for integrity check, an error message can be generated or the addition of the relation can be prevented at all , thus assuring the accuracy of the model under development.

considering once more the previous example of the gene ontology, the concepts biological process, cellular component and molecular function were all related to the gene ontology concept through separate is_a relations to indicate these concepts were terminological components of the gene ontology  <cit> . since gene ontology could not have been stereotyped neither as <<continuant>> nor as <<process>>, the is_a relation defined, for example, between biological process and gene ontology would have been clearly invalid because an is_a relation can only be used to connect either two continuants or two processes . all these inconsistencies have been removed from the gene ontology since the exclusion of the gene ontology concept.

basically, we can always relate two unspecified source and target continuants, i.e., two entity classes stereotyped only as <<continuant>>, through an is_a relation, provided there is semantic soundness in the association. however, once the source or the target continuant has been stereotyped either as <<material>> or as <<immaterial>>, the other continuant has to be properly stereotyped as well. so, we can only relate a source material continuant to a target material continuant, while we can only relate a source immaterial continuant to a target immaterial continuant.

similarly, we can always relate two unspecified source and target continuants through a part_of relation, provided there is semantic soundness in the association as well. however, once the source continuant has been stereotyped as <<material>>, the target continuant has to be stereotyped as <<material>> as well. additionally, once the target continuant has been stereotyped as <<immaterial>>, the source continuant has to be stereotyped as <<immaterial>> as well. so, a source material continuant can only be part of a target material continuant, while a target immaterial continuant can only have a source immaterial continuant as its part. nevertheless, a source immaterial continuant can be part of either an immaterial or a material continuant.

the use of the uml profile also improves the readability of developed ontologies. consider, for example, multiple inheritance in biomedical ontologies, i.e., a single source entity class specializing multiple target entity classes through separate is_a relations. on one hand, multiple inheritance facilitates the creation of compact and easily navigable models. on the other hand, multiple inheritance poses a problem to the  integration of different biomedical ontologies  due to the assignment of multiple meanings to the same relation within a single ontology  <cit> . multiple inheritance can be more easily spotted and understood using graphical models and, in many cases, it can be avoided by replacing one  is_a relation by other types of relations, thus eliminating this problem.

as a final example of how the proposed profile can be used to improve an existing ontology, consider the class cell-cell signaling involved in cell fate commitment, also depicted in figure  <dig>  according to the current version of the gene ontology , this concept both specializes cell-cell signaling and is part of cell fate commitment. however, instead of using cell-cell signaling involved in cell fate commitment to indicate a relation  between cell-cell signaling and cell fate commitment, it would be more appropriate to directly relate these two classes, using, for example, a relation involved_in, thus improving the quality of the ontology in general. other examples of concepts from the gene ontology representing the same type of relation include mapkkk cascade involved in osmosensory signaling pathway, wnt receptor signaling pathway involved in mammary gland specification and proteolysis involved in cellular protein catabolic process.

finally, we believe our uml profile can also be used in combination with model-driven approaches to adequately capture biological knowledge and promote fast system development. model-driven architecture  represents an approach to system development proposed by omg  <cit> . according to this approach, models are used throughout the software life cycle, including understanding, design, construction, deployment, operation, maintenance and modification of software systems. system models are developed according to different viewpoints or perspectives and support is provided for the  transformation of one  model into another  model until an implementation in a specific platform is obtained. mda has attracted increasing interest from the biomedical community  <cit> . we believe our profile can be used to support the development of models according to all defined mda viewpoints, but mainly computational independent and platform independent viewpoints.

CONCLUSIONS
ontologies are increasingly being used in the biomedical domain. not only new ontologies are being developed for new domains, but also existing ontologies are continuously being improved due to the efforts of a growing number of developers and users. initiatives to facilitate the development and integration of  ontologies have emerged. in this sense, the obo foundry provides a repository of life-science ontologies developed according to a set of shared principles. the obo foundry has also developed the obo relation ontology to allow the standardization of different types of entity classes and associated relationships in the biomedical domain.

correctness is key for the success of any ontology. in this sense, we have developed a uml profile for the obo relation ontology to support the development of uml-based models of biomedical ontologies in a consistent and standardized way, hence contributing for ontology correctness and accuracy. our results indicate that the use of the profile requires the domain expert to reason about the underlying semantics of the concepts and relationships being modeled, thus preventing the introduction of inconsistencies in an ontology under development and facilitating the identification and correction of errors in an existing ontology.

future research is needed towards the development of adequate tool support for the uml profile for the obo relation ontology. although one can use the profile in any general-purpose uml modeling tool, biologists can benefit from the development of domain-specific tools that support not only the visualization and editing of models, but also automatic processing of integrity rules representing defined ontological constraints over produced models. similarly to the translation of ontologies in obo format to owl  <cit> , tools can be initially developed to transform uml models developed according to the profile into obo format, possibly using a set of tags to represent additional semantics. later, other tools can be developed to transform ontologies in either obo format or owl into uml using, for example, the xml metadata interchange  format  <cit> , thus contributing to unfold the profile full potential.

competing interests
the authors declare that they have no competing interests.

authors' contributions
gg defined and applied the profile and drafted the manuscript. rv participated in the profile application and participated in the drafting of the manuscript. cf defined and applied the profile and drafted the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
specification of the uml profile for the obo relation ontology. detailed description of the stereotypes and metaclasses defined in uml profile for the obo relation ontology.

click here for file

 acknowledgements
this work was partially supported by brazilian ministry of education . we also thank the anonymous referees for their valuable comments.

this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2012: proceedings of the international conference of the brazilian association for bioinformatics and computational biology . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcgenomics/supplements/13/s <dig> 
