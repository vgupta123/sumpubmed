BACKGROUND
ontologies are knowledge representations using controlled vocabularies that are designed to help knowledge sharing and computer reasoning  <cit> . many ontologies can be represented by directed acyclic graphs , whereby the nodes of the dag, which are also called terms of the ontology, are assigned to items in the domain and the edges between the nodes represent semantic relations. ontologies are designed such that terms closer to the root are more general than their descendant terms. for the ontologies we consider in this paper, the annotation-propagation rule applies, that is, items are annotated to the most specific term possible but are assumed to be implicitly annotated to all ancestors of that term.

examples for ontologies are the foundational model of anatomy  ontology  <cit> , the sequence ontology  <cit> , the cell ontology  <cit> , and the chemical entities of biological interest  ontology  <cit> , which describe objects from the domains of anatomy, biological sequences, cells, and biologically relevant chemicals. in contrast, other ontologies are used to describe the attributes of the items of a domain. for instance, go terms are used to annotate genes or proteins by describing the biological functions or characteristics to the proteins. the mammalian phenotype ontology   <cit>  and the human phenotype ontology   <cit>  describe the attributes of mammalian and human diseases. in this case, the domain object is a disease such as marfan syndrome, whose attributes are the clinical features of the disease such as arachnodactyly and aortic dilatation. in other words, terms of phenotype ontologies such as the mpo and hpo can be conceived of as describing abnormal qualities  of anatomical or biochemical entities  <cit> .

semantic similarity between any two terms within an ontology is based on the annotations to items in the domain and on the structure of the dag. different semantic similarity measures have been proposed  <cit>  and the measures have been used in many different applications in computational biology. for example, different studies show that semantic similarity between proteins annotated with go terms correlate with sequence similarity  <cit> . other studies investigated the correlation of gene coexpression with semantic similarity using go terms  <cit> . in addition, semantic similarity measures for go terms have been used to predict protein subnuclear localization  <cit> .

in another application we have implemented a semantic similarity search algorithm in the setting of medical diagnosis. a user enters hpo terms describing the clinical abnormalities observed in a patient and a ranked list of the best matching differential diagnoses is returned  <cit> . this kind of search can be performed using raw semantic similarity scores calculated using any of the semantic similarity measures  <cit> . however, among these different measures the node-based pairwise similarity measure defined by resnik turned out to have the best performance in our previous study  <cit>  and is therefore considered in this work.

the search is based on q attributes  that describe the phenotypic abnormalities seen in a patient for whom a diagnosis is being sought. for each of the entries of a database containing diseases annotated with hpo terms corresponding to their characteristic signs and symptoms, the best match between each of the q terms of the query with one of the terms annotating the disease is found and the average of the semantic similarity scores is determined. the diseases are then ranked according to these scores and returned to the user as suggestions for the differential diagnosis.

the distribution of scores that a domain object can achieve varies according to the number and specificity of the ontology terms used to annotate it. in a recent study by wang et al.  <cit> , it was discovered that many of the commonly used semantic similarity measures, including the ones used in this work, are biased towards domain objects that have more annotations. the effect was termed annotation bias. applications that use the scores alone therefore tend to preferentially select items with higher numbers of annotations, which may lead to wrong conclusions  <cit> .

previously, we developed a statistical model to assign p-values to the resulting similarity scores on the basis of the probability of a random query obtaining at least as high a score in order to compensate for the fact that different domain objects may have a different number of annotations. using extensive simulations, we showed that this approach outperformed searches based on the semantic similarity scores alone  <cit> . a disadvantage of that procedure was the fact that extensive simulations using randomized queries were necessary in order to estimate the true distribution of the semantic similarity scores, which is needed in order to calculate a p-value for any given similarity score.

in this paper, we describe an algorithm to collapse a dag representing an ontology into connected components of nodes corresponding to terms that make identical contributions to the semantic similarity score. the new algorithm reduces the amount of computational time needed to calculate the score distribution  by many orders of magnitude compared to a naive calculation. a preliminary description of the algorithm was presented in a conference paper  <cit> . here, we validate the algorithm by comparing to sampling based approaches and show using simulations that the application of the exact p-value outperforms sampling based approaches in the context of clinical diagnostics with the hpo.

methods
notation
we consider an ontology o composed of a set of terms that are linked via an is-a or part-of relationship. the ontology o can then be represented by a dag g=, where every term is a node in v and every link is a directed edge in e. a directed edge going from node n <dig> to n <dig> is denoted e <dig>  and we refer to n <dig> as the parent of n <dig>  an item i is defined as an abstract entity to which terms of the ontology are annotated. let anc be defined as the ancestors of n, i.e., the nodes that are found on all paths from node n to the root of g, including n. we note that the annotation-propagation rule states that if an item is explicitly annotated to a term n, it is implicitly annotated to anc. in order to describe the implicit annotations we define timpl. let t be the set of terms that has been explicitly annotated to item i, then timpl=∪n∈tanc, namely all terms that are annotated to item i and all their ancestors in g. let the set of common ancestors of two nodes n <dig> and n <dig> be defined as comanc = anc ⋂ anc. let desc be the set of descendant nodes of n, again including n. note that in this notation descendant nodes are considered only once, even if there are multiple paths leading to them.

multisets
in what follows we need to compute the similarity also between a multiset and a set of terms. the concept of multisets  <cit>  is a generalization of the concept of sets. in contrast to sets, in which elements can only have a single membership, the elements of multisets may appear more than once.

formally, a multiset m is a set of pairs, m = {,..., }, in which si ∈ u = {s <dig> ..., sd} are the elements of the underlying set u. furthermore, mi defines the multiplicity of si in the multiset. the sum of the multiplicities of m is called the multiset cardinality of m, denoted |m|. only multiplicities in the domain of positive integers are considered, i.e., mi ∈ ℕ+. we define a multi subset relation between multiset n and multiset m, denoted as n ⊆ m, as a generalization of the subset relation between two sets:

 n⊆m⇔∀∈n:∃m≥n:∈m. 

the multiset coefficient m=n+q-1q denotes the number of distinct multisets of cardinality q, with elements taken from a finite set of cardinality n. it describes how many ways there are to choose q elements from a set of n elements if repetitions are allowed.

similarity measures
we will concentrate in this work on the class of similarity measures that are based on the information content  of a node:

  ic=-logp, 

where p denotes the frequency among all items in the domain of annotations to n, which implicitly contains all annotations of descendants of n due to the annotation-propagation rule. the information content is a nondecreasing function on the nodes of g as we descend in the hierarchy and is therefore monotonic. the similarity between two nodes was defined by resnik as the maximum information content among all common ancestors  <cit> :

  sim=max{ic|a∈comanc}. 

equation  provides a definition for the similarity between two terms. other popular pairwise measures that additionally incorporate the ic of the query terms, for example  <cit> , are not considered here .

one can extend this concept to define a similarity between two domain objects that are each annotated by multiple ontology terms by taking the average of the best pairwise similarities for all terms  <cit> :

  simavg=1|t1|∑n1∈t1maxn2∈t2sim. 

note that eq.  is not symmetric  <cit> , i.e., it is not necessarily true that simavg=simavg. we point out that in other works average often refers to a symmetric definition. using the nomenclature of pesquita et al.  <cit> , eq.  may be referred to as asymmetric best-match average, here average for short.

instead of taking the average the maximum similarity between a term annotating one of the domain objects and a term annotating the other domain object can be used to define the following symmetric measure:

  simmax= maxn1∈t <dig> n2∈t2sim. 

equation  can be considered a simplified case of eq.  because instead of averaging over all best-pairwise terms for each n1∈t <dig> compared to n2∈t <dig> only the highest similarity of all possible pairs is retained. therefore, we will show the algorithm applied to eq.  and sketch the changes for eq.  later. one can use equation  or  to define a similarity between a set of query terms q, i.e., t1=q and an object in a database. then, q can represent any set of terms from the ontology o whereas t <dig> refers to database objects . as we are using this setup for the similarity queries we will omit the index and refer to t <dig> as the target set t. see figure  <dig> for an example computation of simavg.

because we later make use of scores derived at the maximization step in eq.  we define:

  sim= maxn2∈tsim, 

to be the target set similarity score of n <dig> against a target set t. to avoid confusion we will denote scores of the score distribution of simavg by s and target set similarity scores sim by s.

definition of statistical significance for semantic similarity scores
in this paper we will present methods for analytically calculating the probability distribution of similarity scores for comparisons between a query set q with q terms against an item that has been annotated with a target set t of nodes. for example, if a clinician chooses a set q of hpo terms describing abnormalities seen in a patient and uses eq.  to calculate an observed score sobs to a disease that has been annotated with terms of the hpo, we would like to know the probability of a randomly chosen set of q nodes achieving a score of sobs or greater. in this case, each disease in the database represents a target set .

in other words, our methods will be used to calculate a p-value for the null hypothesis that a similarity score of sobs or greater for a set of q query terms q and a target set t has been observed by chance. we take all queries to be equally likely and define the p-value to be the proportion of queries having a score of at least sobs:

  pq,tsim=|{q|sim≥sobs,q={n <dig> ...,nq}⊆v}||v |q. 

in this definition all nodes of v can be part of a query, even if one node is an ancestor of the other. note that the number of distinct scores for the complete score distribution of pq,tsim is dependent on q,t, and the similarity measure.

simulation of patients for clinical diagnosis
similar to our previous work  <cit> , we use simulations to compare different approaches. using  <dig> omim diseases currently annotated with 2- <dig> hpo terms in the phenotypic abnormality subontology, we generated artificial queries by  taking all terms annotated to the disease with no noise or imprecision as the query ,  randomly exchanging one term if q =  <dig> or q =  <dig> and two terms if q =  <dig> ,  with probability  <dig>  exchange a term with one of its parent terms if possible, , or  using first imprecision then noise.

for each of the  <dig> omim diseases we generate the query as described above and rank all diseases using one of the measures . we then calculate the rank of the disease from which the query was generated. in case of ties we take the average rank . note that for the rankings using p-values  we ranked first by p-values and then by score.

RESULTS
a naive algorithm: exhaustive computation of score distributions
we represent the score distribution as sd={,…,}. every pair ∈sd contains a unique score si and a count fi that defines its frequency within the distribution.

a naive approach to calculating the complete score distribution is to determine the similarity of each possible term combination q ⊆ v of size q with the fixed target set t. the complete procedure is outlined in algorithm  <dig>  it requires two basic operations that are applied to the set sd. the first operation called getscorepair returns the pair that represents the given score or nil in case the entry does not exist. the second operation denoted putscorepair puts the given pair into the set sd, overwriting any previously added pair with the same score. for further analyses we assume that both operations have constant running time.

   input: v, q, t

   output: score distribution sd={,…,}

 <dig> sd=∅

 <dig> foreach q = {n <dig>  n <dig> ..., nq} ⊆ v do

3   snew←simavg

4   ←getscorepair

5   if  ≠ nil then

6      putscorepair)

7   else

8      putscorepair)

 <dig> return sd

algorithm 1: naive score distribution computation for simavg

as the number of possible term combinations is  and each similarity computation  costs o operations for eq.  algorithm  <dig> runs in o time. a typical size of |v| =  <dig> as for the hpo demonstrates that the naive approach is impractical for values q >  <dig>  the naive approach neglects the relationships of the nodes in g and t. we will exploit these relationships in the next section and group nodes in g according to their contribution to the score distribution computation.

a faster algorithm: exploiting redundant computations
recall that all terms from the target set t are contained in timpl. we will prove now that only the ic values of nodes in timpl are relevant for the score distribution computation.

lemma  <dig>  given a dag g=and a target set t={n <dig> …,nk}⊆v, all scores in the score distribution of the similarity measure of eq.  are derived from ic values of the nodes in timpl.

proof. computing the complete score distribution involves repeatedly evaluating simavg in alg.  <dig> using equation . the first step for the computation of eq.  is to maximize sim for each node n1∈q compared to nodes n2∈t. the maximum ic value for sim must be taken from a node in timpl, because by definition anc⊆timpl.

lemma  <dig> implies that the computations in the naive algorithm, which enumerates all nodes in v, are highly redundant as the size of timpl is an upper bound on the number of different target set similarities encountered during score distribution computation. figure  <dig> shows the contribution of all possible queries of size q =  <dig> for an example ontology. for instance, whenever node c or d are part of a query the target set similarity score obtained from eq.  is ic =  <dig>  highlighted in red in figure  <dig>  and used for computing simavg.

therefore, instead of enumerating over the nodes in v, we will first group nodes that have the same target set similarity score s in the maximization step in eq. . denote all nodes n ∈ v that have the same target set similarity score s for a given target set t as ns:

  ns={n|n∈v,sim=s}. 

example  <dig>  it can be seen in figure  <dig> that n <dig> = {a}, n <dig> = {b}, and n <dig> = {c, d} for g with t={a,b,c}.

observe that two nodes ni,nj∈timpl,ni≠nj, belong to the same set ns, if ic = ic. this observation will be essential when we devise an algorithm for computing ns.

the intuition behind the fast computation is that instead of selecting combinations of all nodes of v and constructing the score distribution one by one, we focus on the combinations of different target set similarity scores s and use their frequency |ns| to avoid redundant enumeration. for any t the set u of distinct target set similarity scores is defined as:

  u={ic|n∈timpl}. 

instead of considering sets of nodes in v we will now consider multisets mq of target set similarity scores in u, where |mq| = q. in order to do that we define as m the multiset induced by all target similarity scores s and their corresponding multiplicities m, that is,

  m={,…,|si∈u,mi=|nsi|}. 

then mallq represents the set of all multi subsets of m that have multiset cardinality q, i.e.,

  mallq={mq|mq⊆m,|mq|=q}. 

the value of simavg computed for a particular mq is the same for all query sets of nodes that correspond to mq . therefore, if we can calculate the number of such sets as well as the score corresponding to each multiset mq of target set similarity scores in u, we can determine the distribution of similarity scores simavg for all possible queries of any given size q.

denote the similarity for a multiset mq as:

  simavg=1q∑∈mqm⋅s. 

the number of ways of drawing m nodes from a component of size |ns| can be calculated using the binomial coefficient. the total number of combinations is then the product of all binomial coefficients, denoted as the multiset frequency for a multiset mq:

  freq= ∏∈mq|ns|m. 

example  <dig>  in total there are  <dig> query sets with simavg= <dig> for the dag in figure  <dig>  namely {a, c}, {a, d}. after preprocessing, we obtain n <dig> = {a}, n <dig> = {b}, and n <dig> = {c, d} . alg.  <dig> enumerates all valid multisets of cardinality  <dig> for the sets ns considering their size |ns |. the only way of attaining an average score of  <dig> is to select one node out of n <dig> and n <dig>  represented by the multiset m <dig> = {, } for which simavg =  <dig>  the multiset frequency of m <dig> gives the same result as shown in figure  <dig>  freq=|n0|1⋅|n4|1=1⋅2= <dig>  instead of iterating over two sets we consider one multiset.

theorem  <dig>  let sd={,…,}be the score distribution computed with simavg for an ontology dag g=, target set t⊆vand query size q. the frequency f with which any given score s occurs amongst all possible queries of size q is then:

  f= ∑mq∈mallq,simavg=sfreq. 

a proof of theorem  <dig> is provided in appendix a and a faster algorithm based on theorem  <dig> is shown in alg.  <dig>  we enumerate all distinct multisets of mallq and add their frequency to the score distribution sd, instead of iterating over all sets of size q in alg.  <dig>  thereby reducing the number of operations. in order to apply the algorithm to score distribution computation for simmax, line  <dig> of alg.  <dig> needs to be replaced. instead of computing the average of all scores in the multiset, the maximum among them is assigned to snew.

preprocessing of the dag for faster computation
so far we have neglected how we can compute the values |ns|,s∈u but we will introduce an efficient algorithm in this section. we denote the algorithm as preprocessing because computation of |ns| is independent of q. the preprocessing will divide the original graph into a set of connected components from which the |ns| values can be deduced.

   input: mallq

   output: score distribution sd={,…,}

 <dig> sd=∅

 <dig> foreach multiset mq∈mallqdo

3   snew ← simavg

4   ←getscorepair

5   if  ≠ nil then

6      putscorepair))

7   else

8      putscorepair))

 <dig> return sd

algorithm 2: faster score distribution computation for simavg

first, we invert the direction of all edges in e such that the edges are directed from the root towards the leaves of the dag, and introduce edge weights wi,j to the edges of g. let

  wi,j=ic,ifni∈timplmax{wh,i|eh,i∈e}otherwise. 

the edge weights are defined in a recursive manner. first, all weights of edges emerging from nodes in timpl are set. then the maximum edge weight of all incoming edges for each node not in timpl are propagated to all outgoing edges of the node, and as such propagated throughout the graph. computing the edge weights is efficiently done after the nodes of g have been sorted in topological order, see alg.  <dig>  we now iterate across all nodes ni ∈ v. for each node ni∈v,ni∉timpl, there is at least one path that leads to the node nj= argmaxnk∈tsim. if a node has multiple parents, then by construction of the edge weights, an edge with a maximum weight will be a member of a path to nj. we therefore remove all other incoming edges. if there are multiple incoming edges with an identical, maximum edge weight, one of them can be chosen arbitrarily and the others are removed . we now iterate over all remaining edges ei,j and remove all edges for which ni,nj∈timpl holds . note that exactly |timpl| many connected components ci one for each ni∈timpl remain.

for all pairs of connected components such that ic = ic for ni,nj∈timpl,ni≠nj, the connected components ci and cj are merged to arrive at the desired sets ns,s∈u .

all these steps are summarized in alg.  <dig> and figure  <dig> 

theorem  <dig>  given a dag g=and a target set t={n <dig> …,nk}⊆vthe score distribution of eq.  is computed by alg.  <dig> and alg.  <dig> in o)time and space.

proof. the preprocessing of the dag in alg.  <dig> involves inverting edges, topological ordering of v,

   input: v, timpl

   output: node sets with identical target similarity score, i.e., ns

 <dig> for ni ∈ v in topological order do

2   for j in ei,j ∈ e do                                                                  /* set weights */

3      if ni∈timplthen

4         wi,j ← ic

5      else

6         wi,j ← max{wh,i |eh,i ∈ e}

 <dig> for ni ∈ v \ root do

8      choose eh,i ∈ e s.t. |wh,i ≥ wh',i for all edges eh',i∈ e

9      remove all incoming edges of ni except eh,i

 <dig> for ei,j ∈ e do                                                      /* connected componentsci */

11      if ni,nj∈timplthen

12         remove ei,j from e

 <dig> for s∈{ic|ni∈timpl}do                              /* merging */

14      ns=∅

15      foreach ni∈timpldo

16         ns ← ns ∪ ci

 <dig> return ns

algorithm 3: graph preprocessing for faster computation

introducing edge weights to e, removing edges in e, and computing the connected components of g. this can be done with depth-first search  traversals of g with to a worst-case performance of o time and space.

algorithm  <dig> runs in o) time and space. the outer foreach loop runs over all distinct multisets with cardinality q. the multiset coefficient m provides an upper bound for the number of these multisets. in each iteration the computation of the similarity score  and the multiset frequency, freq, have constant cost assuming a preprocessed lookup table for binomial coefficients and if common partial simavg values are stored between the iterations, avoiding recomputation for similar multisets. in total, alg.  <dig> and alg.  <dig> run in o) time and space.

the theorem concludes the improvement to the naive algorithm, for example on average timpl~ <dig> for all diseases currently annotated with terms of the hpo, which currently has approximately  <dig> terms and  <dig> relations. for instance, for a query with  <dig> terms, the naive algorithm would thus run in time proportional to  <dig> ·  <dig> ·  <dig> =  <dig>  ×  <dig>  and the new algorithm in time proportional to  <dig> +  <dig> +  <dig> · m =  <dig>  ×  <dig> 

experiments
we now show the results of the new algorithm applied to the hpo  <cit> . in our previous work we implemented the phenomizer as a system for experts in the differential diagnosis in medical genetics; the phenomizer can be queried with a set of hpo terms to get a ranked list of candidate diseases most similar to the query based on p-values derived from resnik similarity scores, eq.   <cit> . however, for the phenomizer we used monte carlo sampling to approximate the score distribution and we will investigate now the difference in using the exact p-value compared to sampling.

as we are interested in ranking diseases for differential diagnosis we will take a similar simulation approach as in  <cit>  and generate sets of artificial patients for which we know the omim disease, see methods. in figure  <dig> the results are shown for the investigated scenarios none, noise, imprecision, and noise + imprecision. we compared the ranking of patients with the similarity score alone, sampling based p-values , and exact computation using the algorithm in this work. in all cases, using the exact p-value computation significantly outperforms the four alternative ranking methods  and ranks the true disease on rank one most of the time. the improvement for the exact score distribution computation is due to the fine-grained resolution especially for small p-values, where sampling is often underrepresented, but which are important for selecting the best rank .

we then investigated the runtime for different q values as compared to using the naive algorithm and monte carlo sampling . for that purpose we selected four diseases with a different number of annotated hpo terms, and therefore different size of timpl, and show the runtime of the three approaches in milliseconds. the naive algorithm cannot be utilized for q >  <dig>  the exact p-value computation is faster than random sampling with  <dig> repetitions for q =  <dig>  and for the disease with only  <dig> terms in timpl independent of the analyzed q. starting from q =  <dig> the sampling based approach is faster for large |timpl| because of the huge size of the score distribution to be computed, but even for q =  <dig> the complete score distribution can be computed in under  <dig> seconds for diseases with many annotations. note again that the average size of timpl is  <dig> in the hpo.

four omim diseases with a varying number of annotated hpo terms  were used; 264300: 17-β hydroxysteroid dehydrogenase iii deficiency, 613124: hydrops fetalis, nonimmune, with gracile bones and dysmorphic features, 113450: brachydactyly-distal symphalangism syndrome, 129500: ectodermal dysplasia  <dig>  hidrotic. entries denoted "-" were terminated after four hours. *sampling with  <dig> repetitions.

discussion
in this work we have tackled the unstudied problem of computing the score distribution for similarity searches with ontologies. we have devised an efficient preprocessing of the underlying dag of the ontology that reduces the complexity for similarity measures based on resnik's popular definition of similarity  <cit> . we have introduced a new algorithm based on multiset enumeration, which can be applied to score distribution computation for eq.  as well as variants based on maximum similarity eq. . in experiments with the hpo, as well as in theory, we show that the new algorithm is much faster than exhaustive enumeration of the score distribution or resampling approaches and that it is applicable to current ontologies.

the algorithm we describe here can be used as a component of a procedure to find the best hit in a database, i.e., we need to calculate the score for each entry in the database and rank the results according to p-value. this allows users to enter a list of characteristics or features in order to identify objects whose characteristics best match the query using semantic similarity. we have implemented our algorithm in the setting of medical diagnostics, where the features are the signs and symptoms of diseases and the domain objects are diseases. we have previously shown that this kind of search is useful for medical differential diagnosis  <cit> .

summarizing all nodes that have the same target set similarity score makes use of the fact that the pairwise similarity defined by resnik only considers the common ancestors of the relevant terms . extending the proposed algorithm for other popular semantic similarity measures based on the information content of a node, like jiang and conrath or lin  <cit> , or the symmetric definition of eq.   <cit> , has not been considered here as definition of pairwise similarity additionally incorporates the information content of the nodes in the query. therefore, additional steps are necessary which render the computations more complicated. although this can be considered a limitation of the current approach, we believe the methodology introduced here will prove useful for other measures as well. for example the term overlap similarity measure  <cit> , comparably, only considers common ancestors of query and target set terms, thus an algorithm with similar complexity appears possible from the results presented in this paper. one of the reasons why the p-value based rankings outperform the rankings based on scores is that the former account for the annotation bias as observed by wang et al.  <cit> . the best-match average semantic similarity measures based on resnik, like eq. , were shown to have a strong bias. the annotation bias is a further argument to use p-values instead of the similarity scores alone.

in the mentioned study by wang et al.  <cit> , the authors consider the comparison of two proteins via their annotated go terms, instead of considering any possible subset of the ontology terms as query as in our search setup. their approach is to compensate for the annotation bias by simulating the distribution of pairwise similarity scores for all annotated ontology term sets and normalizing using a power transformation. similarly to our experiments, their method might improve when the exact score distribution is computed using our algorithm.

in a practical implementation of our algorithm, the p-values could be precomputed for each entry in the database . for small q, the p-values could be calculated dynamically. this might be useful if users are allowed to filter out portions of the database from the search based on some predefined groups .

due to its simple structure the new algorithm could be parallelized to run with several threads with close to linear speedup, by keeping the scores in different hash structures for each thread and merging all hashes at the end to get the complete distribution. also, as often only the p-value is of interest, a branch and bound formulation of the new algorithm might lead to a significant speedup in practice.

CONCLUSIONS
the algorithmic improvement reported here might prove useful for p-value computation of other semantic similarity measures that are based on the information content of a node as introduced by resnik  <cit> . however, when the similarity score includes more dependencies the size of the complete score distribution may increase significantly. further algorithmic development will be necessary to increase the class of similarity measures for which p-values can be computed efficiently.

we believe that our methods would be applicable to other applications in which users search for domain objects that best exemplify a set of desired attributes and that they can be used to improve bioinformatic methods that use the semantic similarity scores alone. for that purpose we implemented a software in java that computes exact score distributions for both similarity measures discussed here. the software works with any ontology available in obo format and is available for non-commercial and academic usage under: https://compbio.charite.de/svn/hpo/trunk/src/tools/significance/

appendix a
in this appendix, we will prove theorem  <dig> for arbitrary q. in the following text, we will outline the approach of the proof and introduce a few new definitions. we can calculate the p-values, eq. , by computing the frequency fi of each score si in the score distribution, i.e., by calculating the number of queries that result in score si for each possible score. we will consider all query sets q that result in score s, denoted as qs later in eq. . these initial query sets consist of the nodes from the ontology dag g=. subsequently, we will substitute sets of nodes q by multisets mq over their target set similarity scores in eq. . this is the important switch that establishes the independence of the number of nodes in the graph by only considering their target set similarity scores. at this step, changing from sets to multisets is necessary, because the same target set similarity score may occur more than once given nodes in a single q. however, the induced multisets from all sets in qs are themselves not unique and therefore we will use the multiset frequency, eq. , over the set of unique multisets msq given qs to compute the desired quantity f in the proof.

we are interested in the set qs of all sets {n <dig> ..., nq} of nodes {n <dig> ..., nq} ⊆ v, which result in the same average score s. that is, qs is the set of all queries of size q that result in the same average score s:

  qs={{n <dig> …,nq}|{n <dig> …,nq}⊆v,simavg=s}. 

the core message of theorem  <dig> is that we can define a multiset mq over the target set similarity scores s whose frequency can be used to compute the frequency f of scores s in the score distribution. a necessary first step therefore is to express a query set q={n <dig> …,nq}⊆v as a multiset mq:

  mq={,…,|si∈uq,mi=msiq}, 

where

  uq={si|ni∈q,sim=si} 

and

  msiq=|{ni|ni∈q,sim=si}|. 

the underlying set uq for a multiset mq consists of all existing distinct target set similarity scores si of the nodes in q, eq. , and their multiplicity is the number of nodes in q that share the same score si, eq. .

now that we know how to create a multiset of target set similarity scores from any given set of nodes in v, we need another variable msq to represent all distinct multisets that can be generated using eq.  from the set qs. the set of distinct multisets msq generated for a given qs is defined as:

  msq={mq|q∈qs}. 

we can now state the proof of theorem  <dig> as follows.

proof.

  f=|qs| 

  = ∑mq∈msq∏∈mq|ns|m 

  = ∑mq∈msqfreq 

  = ∑mq∈mallq,simavg=sfreq 

eq.  merely restates the definition of the frequency f given by eq. , namely the number of all queries q⊆v that result in simavg = s. note that eq.  is representing the number of such queries in terms of sets of nodes of the ontology. eq.  switches the representation from nodes in v to multisets msq over the similarity scores of nodes in v using eq.  and the definition of multiset frequency given in eq. . eq.  follows directly from the definition of the multiset frequency in eq. . the equality between eq.  and  is a direct consequence of eq.  and .

authors' contributions
mhs, sk, and pnr planned the research work. mhs, and sb designed the algorithm. mhs, sk, and sb implemented the software and made the analysis. all authors wrote the paper and approved the final manuscript.

supplementary material
additional file 1
additional file 1contains some additional plots showing the differences in ranking by exact and sampled p-values for clinical diagnostics with the hpo.

click here for file

 acknowledgements
we thank martin vingron for his insights that led to an earlier version of this manuscript. the authors would also like to thank the two anonymous reviewers for insightful comments.

funding
mhs was funded by the international max planck research school for computational biology and scientific computing. sk and pnr were supported by the berlin-brandenburg center for regenerative therapies  . sb and pnr were supported by the deutsche forschungsgemeinschaft .
