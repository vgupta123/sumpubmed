BACKGROUND
classical biological experiments have focused on understanding changes in the expression of single genes across distinct biological states. such differential gene expression analyses while useful may not provide sufficient insight into their interactions or functional relationships . understanding frs is crucial as genes work in concert as a system as opposed to independent entities. on a related note, phenotype formation is mediated by pathways comprising of complex interactions between several genes as opposed to a single gene. recent development of high-throughput assays in conjunction with sophisticated computational tools has enabled modelling such interactions and gain system-level understanding.

several commercial and non-commercial software packages have been developed in the past for modelling gene interactions. ontology-based packages  <cit>  that rely on prior knowledge have been used traditionally to identify pathways enriched in a given experiment from existing documented pathways. commercial packages  and  provide menu-driven gui for retrieving functional relationships on a given set of genes from published literature. it is important to note that such techniques draw conclusions based on documented pathways and pooling knowledge across disparate sources. this in turn can render the conclusions noisy as genes and frs may exhibit considerable variations across studies. such an approach also relies implicitly on prior information, hence may have limited use in discovering novel frs. recent studies have provided compelling evidence of non-canonical signalling mechanism and cross-talk between pathways  <cit>  that demand inferring network structure from the given data as opposed to direct inference from documented/curated pathways.

bayesian structure learning  techniques  <cit>  have been used successfully to infer interactions between a given set of genes in the form of graphs. the inherent probabilistic nature of gene expression and access to high-throughput assays that facilitate simultaneous measurement of transcriptional, translational and post-translational activities  <cit>  are some of the reasons for their wide-spread use. gene expression data with interventions  <cit>  have also been recently shown to improve the conclusions drawn using bayesian network modelling  <cit> . probabilistic mechanisms underlying gene expression can be attributed to inherent noisiness and heterogeneity within/between cell population  <cit> . high-throughput assays such as microarrays  <cit>  and clonal gene expression profiling  <cit>  in conjunction with bsl  <cit>  had been used successfully in the past to capture functional relationships at the transcriptional level. more recently, high-throughput flow cytometry data from single-cells with perturbations in conjunction with bsl were used to obtain system-level understanding at translational and post-translational data  <cit> .

several open-source packages are available for bsl and can be used to model gene networks  <cit> . however, these packages expect the user to be familiar with the programming environment and syntax. natbox, fig.  <dig>  aims to overcome some of these obstacles by providing a menu-driven gui for modelling and analysis of gene expression networks. it invokes functions from existing r-packages to accomplish this  <cit> . reusing existing functionalities is strongly encouraged in an open-source environment and can minimize redundancy while improving transparency, reproducibility and sustainability. the target audience of natbox are interdisciplinary researchers and biologists who wish to explore the tools of systems biology and network modelling for investigating signalling mechanisms. natbox does not require the user to be familiar with r-programming or the algorithmic intricacies. suitable parameter recommendations along with popular default parameter choices are provided as required to the user. as with any r-package, natbox is open-source, hence lends itself to be customized by users with expertise in r. a detailed wiki help page accompanies the toolbox and provides a systematic overview of the toolbox functions along with examples at http://bioinformatics.ualr.edu/natboxwiki/index.php/main_page.

RESULTS
prior to a detailed description of natbox functionalities, we briefly review those of a closely related package bnarray  <cit>  which was designed to provide a higher-level abstraction of r-routines from existing packages for gene network modelling. bnarray is a command line driven package where the user is expected to be familiar with the r environment  <cit>  and syntax. it consists of four main modules  determine missing values in a given data using the functions llsimpute, also implemented in the r-package pcamethods  <cit>   learn acyclic network structure using bsl routines from the r-package deal  <cit> . subsequently display the graph by invoking functions from the r-package dynamicgraph  <cit>   identify what the author term as 1st order network structure using a resampling procedure and  reconstruct coherent sub-regulatory networks using an extended version of the algorithm codense  <cit> . in the following discussion, we describe the features of natbox as well as compare those implemented in bnarray in a systematic manner.

the comparisons are also enclosed under table  <dig> for a quick review.

bsl techniques implemented from bnlearn provide choice of several conditional independence tests and scoring criteria for continuous and discrete data sets under constraint-based and search and score techniques respectively.
conditional independence tests for constraint-based: mutual information, mutual information for gaussian distributed data, fast mutual information, pearson x <dig>  akaike information criterion, linear correlation and fisher's z.
confidence of an edge is determined by bootstrapping. uses r-package rgraphviz for visualization, which is designed to handle the layout of large graphs.
i. gui: natbox provides a convenient menu-driven graphical user interface  developed using tcl/tk for modelling and analysis of gene expression networks. this has to be contrasted with bnarray  <cit> , which is a command line driven package and demands the user to be familiar with the r-environment and syntax.

ii. input/output: the input data in natbox is assumed to be in tab-delimited text format, similar to that of bnarray. in natbox, the rows of the input file represent independent experiments whereas the columns represent the names of the genes. however, in bnarray the rows represent the genes of interest and the columns represent their expression across experiments. unlike natbox, bnarray does not specify whether the experiments need to be independent or dependent.

iii. missing values: gene expression profiles often have missing values. for instance, in microarray data such missing values are common and may be attributed to experimental artefact, improper hybridization and non-specific binding of the probes. it is prudent to use suitable statistical techniques to accommodate such data sets rather than discard them. natbox provides an option to determine missing values using nearest-neighbour averaging approach , impute.knn  which has been found to perform well for high-dimensional data sets  <cit> . bnarray also provides a neighbourhood-based imputation technique, namely the least local squares   <cit>  algorithm for determining missing values. a version of llsimpute algorithm is also available through the .

iv. functional relationships: natbox provides the option to model functional relationships using a battery of bayesian structure learning techniques from the r-package   <cit>  . it is important to note that they model the network structure solely from the joint probability distribution in the absence of explicit temporal information. the tab-delimited input data should be in the form of a matrix where the columns represents the number of genes, and rows the number of repeated  experiments. each element in the matrix represents the expression value of that gene in a given experiment.

constraint-based techniques in natbox that model the network based on the results of conditional independence tests include:

• grow-shrink algorithm   <cit> : gs is based on the grow-shrink markov blanket, the first  markov blanket detection algorithm.

• incremental association markov blanket algorithm   <cit> : iamb is based on the markov blanket detection algorithm. it uses a two-phase selection scheme. a forward selection followed by an attempt to remove false positives which scales well up to thousands of variables.

• fast incremental association markov blanket algorithm   <cit> : fast-iamb is a variant of iamb which uses speculative stepwise forward selection to reduce the number of conditional independence tests.

• interleaved incremental association markov blanket algorithm   <cit> : inter-iamb is another variant of iamb that uses forward stepwise selection to avoid false positives in the markov blanket detection phase. even though it often requires more conditional tests than the other iamb variants, it's still able to scale up to thousands of variables while maintaining its robustness against false positives.

• max-min parents children algorithm   <cit> : mmpc is a forward selection technique for neighbourhood detection based on the maximization of the minimum association measure. it learns the underlying structure of the bayesian.

several choices of conditional independence tests for categorical/discrete  as well as numerical/continuous distributions  are provided. natbox also provides an interface to the search and score algorithm  from bnlearn. hc searches the model space and retrieves the best model using a scoring criterion which is also provided. several choices of scoring criterion are provided for categorical/discrete  and numerical/continuous distributions . each bsl technique works under implicit assumptions and may result in spurious conclusions when these assumptions are violated. natbox provides a battery of bsl techniques to alleviate such concerns. for instance, constraint-based techniques can be affected by sample sizes and are sensitive to initial results of the conditional independence tests. search and score algorithms can result in local optima, hence may benefit from multiple random restarts unlike constraint-based approaches.

on the other hand, bnarray  <cit>  uses a greedy search implementation of the bsl technique implemented in deal to learn the network structure. it is important to note that algorithm implemented in deal is ideally suited for handling mixed data types consisting of continuous as well as discrete data types. although the authors  <cit>  of bnarray have demonstrated the performance of their approach on temporal gene expression profile, it is unclear as to whether deal algorithm accommodates such temporal explicit information during structure learning. this is in contrast with natbox which implements algorithms from bnlearn for learning the network structure from homogenous data types characteristic of gene expression profiles, i.e. either continuous or discrete data sets.

v. bootstrap parallelization: bootstrap techniques are commonly used for confidence estimation from a given empirical sample. confidence  <cit>  of an edge is determined by bootstrapping the given empirical data with replacement. edges whose confidence is greater than a user-defined threshold  are deemed robust. bootstrap procedures can be computationally demanding for high-dimensional data sets. search and score techniques such as hill-climbing implicitly require several random restarts during the confidence estimation. natbox provides an option to parallelize bootstrapping across multiprocessor or multi-core processor by invoking the appropriate routines from the r-package snow   <cit> . such parallelization fall under embarrassingly parallel problems. however, they can significantly reduce the overall time complexity. parallelization of the bsl routines themselves was not found to yield any significant improvement with increasing number of processors. we believe this may be due to inherent overhead in the master-worker configuration in snow. this is still under investigation. the performance for the various structure learning algorithms with increasing number of bootstraps and processors on bsl of the protein expression data  <cit>  is shown in fig.  <dig>  a marked decrease in computational time is observed with increasing number of processors. the computational time with  <dig> processor is almost  <dig> folds of that obtained by  <dig> processors across the three algorithms  and  <dig> bootstrap simulations.

the results of the bootstrap are written onto a tab-delimited file. an option is also provided for highlighting the robust frs  on the acyclic graph learned from the given data, fig.  <dig>  bnarray also implements bootstrap routines to determine what the author call as first-order network structures. unlike natbox, bnarray does not provide any options for bootstrap parallelization. bnarray uses routines from the package dynamicgraph  <cit>  for visualization of the resulting acyclic network.

in addition, natbox gui also provides options for incorporating  structural priors in bsl by whitelisting  and blacklisting  frs. such priors impose constraints on the network structure which implicitly rely on prior knowledge and needs to be chosen prudently in order to avoid bias during learning. however, a proper choice can alleviate uncertainty and improve accuracy of the conclusions. a text retrieval interface is provided for identifying structural priors and can be useful for investigating well-established signalling mechanisms.

vi. network analysis metrics: bsl techniques are useful in inferring the cause-effect relationships and network structure from the gene expression profiles. however, they provide no insight into the network's topological properties. natbox incorporates social network analysis metrics and motif finder from the package   <cit>  under  for investigating the topological properties of the networks generated using bsl techniques. such metrics can be especially useful in investigating large networks. the input is assumed to be a binary adjacency matrix of the network constructed using bsl with ones and zeros representing the presence/absence of an edge respectively. since bsl results in directed acyclic graphs, the corresponding binary adjacency matrix need not be symmetric. the centrality measures  along with their respective parameter options are provided for the user. a detailed discussion of these centrality measures are deferred to  <cit> . degree centrality is one of the commonly used measures of centrality and broadly classified into out-degree  and in-degree . the distribution of the degree centrality has been widely studied and provides crucial insight into the topology of a network. recent studies have elucidated the prevalence of power-law degree distribution in biological networks  <cit> . such power-law distributions may be accompanied by interesting properties such as the presence of hubs  and scale-free phenomena unlike exponential degree distributions. justification of power-law degree distributions can be challenging especially when the information about the tail of the distribution is insufficient  <cit> . betweenness centrality is useful in identifying genes that act as important mediators between other genes, although they themselves might not be densely connected to all the packages. genes with high betweenness centrality may play an important role in bridging the gap between densely connected subgroups. on the other hand, closeness centrality is useful in identifying genes that are directly or indirectly dependent on other genes. the menu also provides an option to determine the diameter and identify recurrent structures or motifs of sizes  <dig> and  <dig> in the given network by invoking the respective functions from igraph  <cit> . motifs are recurrent atomic structures with frequency distribution different from that of random network. recent studies have identified certain specific motifs that persist across distinct real world networks  <cit> . the igraph package incorporated into natbox also provides option to save the acyclic network in formats compatible with cytoscape  <cit>  for detailed visualization.

vii. retrieving frs from literature: finally, natbox provides options for retrieving frs of interest using ncbi esearch . the user has the option to input the  pairs of gene names  of interest through the gui or  upload a two-column matrix of frs of interest or those identified as robust by the bootstrap procedure. for well-documented studies, an integrated approach that incorporates the results from the text retrieval  in justifying the choice of whitelisted  and/or blacklisted  in bsl. the text retrieval results are in html format, with a list of pubmed identifiers hyper-linking to the respective abstracts/articles in pubmed. the results of text retrieval on gene expression data from  <cit>  is shown in fig.  <dig> 

CONCLUSIONS
modelling and analysis of gene expression networks is an area of active research. several tools have been proposed in the literature for the same. recently, bayesian structure learning  techniques in conjunction with high throughput assays were used successfully to capture functional relationships. existing packages may demand the user to have considerable programming expertise. natbox provides a convenient menu-driven gui along with appropriate parameter recommendations including default parameter choices for modelling and analysis of gene expression networks. it incorporates diverse functionalities from existing r-packages. this in turn encourages transparency and reproducibility, characteristic of open-source environment. natbox can also be used as a teaching and demonstration tool for graduate courses in systems biology. immediate future enhancements to the toolbox include  expand the choice of structure learning algorithms including dynamic bayesian networks  improve statistical inference of the network features  parallelization of the implemented routines across multi-core and multi-processor machines of bsl functions as well as bootstrapping  provide a web-interface so as to obviate the need for local installation of the toolbox  enhance text retrieval so as to accommodate advanced text mining approaches.

competing interests
the authors declare that they have no competing interests.

authors' contributions
ssc and mab implemented the toolbox under rn's guidance. ms developed the bnlearn package and was involved in trouble shooting the bayesian structure learning routines. rn wrote the manuscript.

