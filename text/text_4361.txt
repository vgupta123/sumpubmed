BACKGROUND
the annotation of biological entities with their properties using text mining systems is an important issue amongst biological databases  <cit> . these annotations are crucial to improve the work of microarray, mass spectrometry and other communities. as an example, the goa  project aims at identifying go  annotations to supplement the uniprot knowledgebase  <cit> . they provide high-quality manual go annotations but manual curation is a time-consuming task and currently covers only about  <dig> % of uniprot. thus, the goa database coverage mainly consists of electronic annotations, which have a lower quality than manual annotations. one approach to improve their quality is the use of text mining systems, since, besides the identification of annotations, these systems can also locate their evidence in literature. the quality of the annotations extracted by a text mining system is directly related to its ability to recognize and locate in the texts the biological entities and their properties. therefore, the recognition of biological entities and properties in text has become an important research topic.

this document presents figo , a novel unsupervised method to identify biological properties organized in a genomic ontology in unstructured text. figo uses the evidence content of each word present in the nomenclature of the ontology. this evidence content is inversely proportional to the number of times the word appears in the names of all properties. our definition of evidence content derives from the definition of information content made by resnik  <cit> . we assume that the evidence content of a word measures its importance to identify a property in text. for instance, consider the gene ontology  term 'punt binding'. if only the word 'binding' is present in the text, the probability of the go term being referred is very low, because 'binding' is used in many other names. on the other hand, if only the word 'punt' is present, then we have strong evidence that the go term is mentioned in the text, because this word is not part of any other name. we evaluated figo in biocreative tasks  <dig>  and  <dig> . this document describes its implementation details, and presents and discusses the results achieved.

methods
figo
figo receives i) an ontology ont and ii) a piece of text, txt, as input. each entry in ont represents a biological property that can be assigned to biological entities. the output is the list of properties that figo detected in the given text. figo returns these properties ranked according to their likelihood of being mentioned in the text. for example, ont can be the go with each biological property representing a go term, and txt can be a sentence taken from a document.

the words
figo derives a map between the properties and their names:

names  = {n <dig> ..., nk},

where prop ∈ ont and n <dig> ..., nk are its name and synonyms in the ontology. if prop does not have synonyms, then k =  <dig> and names = {n0}. the set of words that compose a name n is given by:

words = {w <dig> ...,wl}.

in addition, we define the set of words contained in an property prop as:

words = {w ∈ words : n ∈ names}

furthermore, the words of the ontology are

words = {w ∈ words  : e ∈ ont}

evidence content
the evidence content of each word decreases with its frequency. the frequency of a word w is the number of properties that contain the word:

freq = #{prop ∈ ont : w ∈ words}.

a word present in only one name has high evidence content. on the other hand, the word with the maximum frequency has no evidence content. the maximum frequency is defined using the following equation:

maxfreq = max{freq : w ∈ words}.

thus, wordec, the evidence content of a word w, is defined using the following equation:



since each name is composed of a set of words, we can define the evidence content of a name n as the sum of the evidence content of its words:



the evidence content of an property prop is defined as the highest evidence content of all its names:

ec = max{nameec : n ∈ names}.

local evidence content
the input text is transformed into a set of words:

txt = {w <dig> ...,wl}.

the local evidence content  is used to measure the likelihood that a given name n is mentioned in the text txt. lec is the sum of the evidence content of those words, which are present in the text as well as in the name:



the lec is also used to measure the likelihood that a given property prop is mentioned in the text txt:

lec = max{namelec : n ∈ names}.

the lec divided by the ec is a confidence level for the property prop occurring in the txt:



con f  ∈  <cit> , since lec is smaller than ec by definition.

if the confidence level is larger than a given threshold α ∈  <cit> , then prop is considered to occur in txt:

conf  ≥ α.

if α =  <dig>  the complete name has to appear in the text to be selected. thus, the α parameter is used to tune recall and precision of figo. an increase in α increases precision, a decrease in α increases recall. con f  is used to rank the returned properties, and represents the likelihood of each biological property occurring in text.

example
given a property prop with names = {'punt binding','punt function'}, and freq =  <dig>  freq =  <dig>  freq =  <dig>  and maxfreq =  <dig>  then, wordec = -log =  <dig>  wordec = -log =  <dig>  wordec = -log =  <dig>  wordec =  <dig> +  <dig> =  <dig>  wordec =  <dig> +  <dig> =  <dig>  and ec = max{ <dig>  5} =  <dig>  considering the following pieces of text: txt <dig> = 'the protein has a binding activity', txt <dig> = 'the protein has a punt activity', and txt <dig> = 'the protein has a punt binding activity', since lec =  <dig>  lec =  <dig> and lec =  <dig>  then we have conf = 1/ <dig>  conf = 2/ <dig> and con f  =  <dig>  which means that figo will decide that prop occurs in txt <dig> when α ≤ 1/ <dig>  in txt <dig> when α ≤ 2/ <dig>  and in txt <dig> when α ≤  <dig>  by comparing the case of txt <dig> and txt <dig>  we can realize how figo gives more importance to infrequent words to identify the properties in a given text.

biocreative application
this section describes the figo implementation used when preparing our submission to whose output we submitted to biocreative tasks  <dig>  and  <dig> . given an article and a go annotation, task  <dig>  consisted of identifying the text in the article that provided evidence for the annotation. given an article and the number of go annotations to find for each go class, task  <dig>  consisted of identifying the go annotations and extracting a section of evidence text for each of them from the article.

go pre-processing
in our implementation, we used the go genomic ontology, considering its terms as the properties to identify. figo identified the set words, and removed from this set all the stop words, such as 'in' or 'on'. figo then computed the evidence content of each word, name, and finally of each term. figo also computed the annotation frequency of each go term as the number of times the term and its descendants in the go hierarchy were annotated in goa. the most frequently annotated terms represent general go terms, such as 'protein', and 'binding'. these terms were discarded in the extraction of annotations from text.

the text
figo parsed the sgml file given for each article and structured the text in sentences. each sentence represented a piece of text from where figo identified go terms.

in task  <dig> , we selected from the ranked list of sentences returned by figo the ones where the given term occurred. in the case of having multiple sentences, we selected the one with the highest rank and also mentioning the protein. in the case of not having any sentence, we returned a sentence for the most similar term. to calculate the similarity between terms, we used fussimeg  <cit> . in this task, we executed figo three times with α assigned to  <dig> ,  <dig>  and  <dig> , resulting in three different submissions.

in task  <dig> , we selected from the ranked list of sentences returned by figo the ones mentioning the protein. then, we discarded the generic terms by selecting the sentences containing the most infrequent annotated terms. in this task, we executed figo three times with the α assigned to  <dig> ,  <dig>  and  <dig> , resulting in three different submissions.

to identify the proteins in the text, we applied a naïve method based on exact matching. given a sentence we consider that it mentions a protein if it contains all the words of its name or synonym. we collect the name and synonyms of each protein from uniprot database.

RESULTS
in the biocreative task  <dig>  each submitted prediction had a go term and a protein evaluation. both evaluations assigned a high, generally or low score to the prediction. high score means that the predicted evidence supports a correct go term or protein. generally score means that the predicted evidence supports a related go term or protein. low score means that the predicted evidence does not support a correct go term or protein. a prediction was considered perfect when both the go and protein evaluation assigned a high score to it.

discussion
figo achieved a good performance when compared to the other submissions. in both tasks, figo almost defined the highest number of correct predictions, but its precision was far from the best results. however, the submissions with higher precision were composed by fewer predictions that requested. we chose to always submit the requested number of predictions, even when they had a low confidence score. since the core of figo was the identification of go terms, a significant part of our predictions was not considered perfect just because of the protein evaluation. for example, in task  <dig>  with α =  <dig> , the go evaluation assigned a high score to  <dig> predictions . however, only  <dig> of them were considered perfect . this means that  <dig> out of  <dig> predictions  were not considered perfect because they did not provide high evidence of the protein. in addition to this major problem, we also identified the following problems in figo:

• in task  <dig> , it predicted about  <dig> obsolete go terms;

• it did not filter the go terms that could not be annotated with human proteins ;

• it selected sentences from irrelevant sections ;

• sometimes just one sentence is not enough to support an annotation. for instance, when the protein and the term are in the same paragraph, but not in the same sentence;

• it did not take in account the number of times a term occurs in the text;

• it did not take in account the word order in the name;

• in task  <dig> , it predicted go terms out of context.

the first two problems could be easily solved before biocreative, but we were not able to identify them at that time. on the other hand, the last five problems represent important topics of research that deserve further study by the research community. the performance in task  <dig>  was lower than in task  <dig>  mainly because of the last problem on the list. in our opinion, to discard terms out of context we have to use some domain knowledge about the proteins and the articles. for instance, in kdd <dig> cup challenge: bio-text task, statistical text classification systems reasoning without considering domain knowledge achieved also poor results  <cit> . an effective approach is to obtain the required domain knowledge from publicly available resources  <cit> .

in task  <dig> , the go terms with higher precision occurred in the literature exactly as described in go, such as 'cell proliferation'. this particular go term had the highest precision with  <dig> high and  <dig> low scores assigned. the go terms with lower precision were the ones whose name was composed by words with low evidence content, such as 'regulation of transcription'. this particular go term had the lowest precision with  <dig> high and  <dig> low scores assigned.

in task  <dig> , the go terms with higher precision were generic terms, such as 'binding'. those whose name had high evidence content, such as 'galactose 3-o-sulfotransferase activity'. this last go term had the second highest precision with  <dig> high and  <dig> low scores assigned. the go term 'binding' had the highest precision with  <dig> high and  <dig> low scores assigned. the go terms with lower precision were the ones whose name was composed by words with low evidence content or multiple meanings, such as 'receptor activity'. this particular go term had the lowest precision with  <dig> high and  <dig> low scores assigned, because 'activity' has low evidence content and 'receptor' can be used to mention other protein. for example, in uniprot there are more than  <dig> proteins whose name contains the word 'receptor'.

from figure  <dig>  we concluded that in task  <dig>  it was easier to find evidence for go terms from the biologic process. this can be explained because these terms use very specific names. on the other hand, we conclude that in task  <dig>  it was easier to predict terms from the molecular function class. this can be explained because normally we can find more occurrences of these terms in the articles.

the reason for having better results using a smaller α value in task  <dig>  is that there were a large number of terms not explicitly mentioned in the text. some sentences were correctly selected when only less than 70% of the term's name appeared in text. on the other hand, for smaller values of α, figo identified more terms out of context. thus, in task  <dig> , the selection of terms with a larger α turned up to be an effective approach to predict which relevant terms were mentioned.

CONCLUSIONS
this document presents figo, a novel unsupervised method for recognizing biological properties in unstructured text, involving the evidence content of their names. figo does not need training data, since it computes the evidence content based on the nomenclature of a genomic ontology that structures the properties. therefore, the use of figo represents little human intervention.

figo was designed for recognizing properties and not for extracting annotations, but besides that figo obtained a good performance in biocreative when compared to other submissions. from the results, we identified a set of problems that should be addressed in the next implementation. the main problem of our predictions was the protein identification. if instead of implementing a naïve method we used a more effective method, figo would have achieved a higher performance.

the performance of figo demonstrates that it provides an effective approach to recognize properties in scientific literature, improving the performance of automatic annotation systems.

authors' contributions
fmc conceived this study, designed the methods introduced, and implemented them. mjs and pc coordinated this study and performed an analysis of the results obtained. all authors collaborated since the beginning of the project. all authors read and approved the final manuscript.

