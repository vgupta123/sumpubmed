BACKGROUND
semantic web  technologies  <cit>  are increasingly being adopted by the scientific community, and life sciences researchers are no exception  <cit> . our own contribution to this emerging field has been the development of two semantically integrated knowledge bases - the cell cycle ontology  and biogateway  <cit> . sw technologies open a new dimension to data integration, one of the main current challenges in biological knowledge management  <cit> . these technologies provide a sound framework to share and combine information via standard data exchange formats. this enables the categorization of information  and fosters the scalability of the integrated system . moreover, sw technologies provide a sophisticated means to interrogate the originally integrated facts as well as the "hidden" bits of information . an increasing number of principal biological data providers, such as uniprot  <cit> , have started to make their data available in the sw formats, first of all in the rdf language  <cit> . in rdf the information is represented in the form of triples subject-predicate-object, e.g. "bmc bioinformatics -has_type- journal". unlike the current web, which utilizes just a single semantically undefined predicate , sw makes use of multiple predicate types with clearly defined semantics.

data in rdf format is typically stored in dedicated database management systems called triple stores  which expose so-called sparql endpoints. those endpoints allow querying of the store through sparql  <cit> , a standard query language recommended by w3c. the triples present in disparate stores form a unified cloud of triples which is accessible for querying from any individual endpoint. a paradigmatic example of such cloud of triples is constituted by the project linked open data  <cit> .

triple stores
currently, there are a number of solutions  <cit>  to store information as rdf triples and they are increasingly becoming adopted by the biological community for the purpose of overcoming some of the limitations  of classical storage solutions .

the development of triple stores has flourished during the last  <dig> years. currently, there are more than  <dig> systems available  <cit> . both the academic and private sectors have been involved in developing these triple stores. this race has created a healthy competition leading to rapid progress in key aspects of database management system performance -- querying and loading efficiency, scalability, and stability. the sw community has contributed to this progress by promoting open contests and providing proof-cases for sw applications  <cit> . it is encouraging for the scientific community that many of these triple stores are freely available for academic use. obviously, the performance of triple stores is an important issue, especially the response time experienced with sparql. the time that a user needs to wait before an answer is returned is a simple but crucial metric that determines the acceptance by the prospective users of the knowledge base in question and the sw technology as a whole. as the number of available triple store implementations is steadily growing, it becomes increasingly difficult to decide which one to use. this necessitates a systematic comparison of the available triple store implementations with respect to their performance .

benchmarking efforts
much of the benchmarking done previously on triple stores was based on computationally generated sets of triples that could at best only mimic an actual domain specific knowledge base. among the "standard" sets used are: the lehigh university benchmark  and the berlin sparql benchmark , which respectively emulate an organization and e-commerce knowledge bases. in the life sciences domain, studies performed by uniprot  <cit> , demonstrated the current limitations of some triple stores  <cit> . in this paper we present the 'ntnu sparql benchmark', which is based on a life science use case, and we report the outcome of the benchmarking of five popular triple store implementations. we tested two additional stores  not included in the previous benchmark experiments  <cit>  and instead of  computationally generated data, we used biologically relevant real life data from our knowledge base cco  <cit> , as well as queries which evolved from the direct interaction with the user community.

our benchmark fills the need for an empirical testing of the performance of triple stores with respect to queries and data whose characteristics are representative of life sciences information.

RESULTS
the ntnu dataset
the dataset used in our analysis consists of ten rdf graphs constituting the cell cycle ontology   <cit>  . there are four taxon-specific graphs  and an integrated graph. all of them share a core set of triples  and a set of taxon-specific triples. the integrated graph contains additional orthology relations for proteins. each of the five graphs has a counterpart graph augmented with pre-computed transitive and reflexive closures.

more details on the characteristics of this dataset can be found in table  <dig> 

a list is shown of the characteristics of the  <dig> graphs constituting the ntnu dataset. reported in this table are, for each graph: the number of triples, the number of classes , the maximum number of super classes for a class in the graph , the number of super classes averaged over all the classes , the number of relations  and the number of distinct relation types. for technical reasons the analysis of the super class statistics was performed on random selections of  <dig> classes.

the set of queries
in our analysis we used  <dig> queries which were defined to answer real life questions identified in close collaboration with the end users of cco . our query set encompasses a broad range of sparql features and combinations thereof, as summarised in table  <dig>  as shown in this table, queries used in our analysis ensure a comprehensive assessment of the performance of the triple stores with respect to a real life science use case.

the selected  <dig> queries  were used to evaluate the triple stores' responsiveness with respect to various query features. the table shows the full set of queries and the features used therein.

overall performance
a summary of the results of our analysis on the five selected triple stores is reported in table  <dig>  which summarize loading times and query answering.

load time - the total load time in seconds for the  <dig> graphs averaged over the three replicates. query time - arts in seconds summed over all the data points . rse - the relative standard errors averaged over all the data points .

first of all, we compared the loading performance of the five selected stores. loading performance is of paramount importance in the life sciences domain, as primary data sources are frequently updated and the content of triple stores needs to be maintained up-to-date. in this respect 4store shows an exceptionally good performance, followed by swiftowlim.

in order to get a bird's-eye view on the querying performance of the selected stores, we aggregated the averaged response times  into a single cumulative total response time and estimated the average relative standard errors for each of the stores. . the total query execution time varied in a very broad range over the triple stores .

load times have been found consistent across test-runs, whereas query answering times have presented some significant variation , even though individual test runs were performed in equivalent conditions . variability could be explained by the different environment of the operating system during different runs.

on the basis of these data, virtuoso emerges as an overall winner, however, the picture changes significantly when we look into the query-specific behaviour.

query-specific performance
the arts in seconds summed over the  <dig> graphs. the queries are sorted in the order of the response time averaged over the  <dig> stores .

the three slowest queries, q <dig>  q <dig> and q <dig>  display extremely idiosyncratic behaviour and defy any generalization. two of them affect specifically the performance of swiftowlim - q <dig>  and q <dig>  the only two cases where swiftowlim shows the slowest response of all the stores. the impact of q <dig> is more severe and it affects the performance of jena tdb, swiftowlim and 4store in the order of magnitude. in the case of 4store the art for q <dig> is  <dig>  times longer than the art of this store averaged over all the other  <dig> queries. both q <dig> and q <dig> include the order by modifier, not used by any other query, which might suggest that the implementation of this feature is suboptimal in the affected stores. however, this proposition is in conflict with the response of 4store to these two queries . on the other hand, q <dig> does not make use of any unique features; instead it includes a rather wide range of features found as well in other queries. at present it is not possible to determine whether any particular combination of these features is responsible for the long execution time.

scalability
finally, we wanted to see how well the arts scale up with respect to the graph sizes. the arts were summed over all the queries  and plotted against the total number of triples . the figure shows that swiftowlim scales up exceptionally well, followed by virtuoso. in contrast, 4store demonstrated the poorest performance with respect to scalability. however, as pointed out earlier, the behaviour of swiftowlim and 4store is strongly affected by a few outliers. therefore, to eliminate the impact of the outliers we excluded the three slowest queries q <dig>  q <dig> and q <dig> from the plot . although the mutual arrangement of the individual graphs on the plot changed in favour of swiftowlim and 4store, the conclusion about the scalability drawn above did not change. it should be noted that the fact that queries were developed using virtuoso should not have any impact on the scalability.

discussion
our benchmark is intended to represent a realistic usage of triple stores in the life sciences context. it is designed to measure loading and query answering times, which are key parameters in the choice of a triple store. however, there are other considerations to be made when selecting a triple store for a specific use case.

one of these considerations is the architecture for which a triple store is designed, and in particular whether this can be deployed on a cluster-based architecture. some of the systems we have benchmarked  can be deployed on a cluster making an efficient use of this affordable parallel architecture, which promises better scalability for very large datasets. as a note, swiftowlim, which we have tested, is designed for optimal performance for datasets below 100m triples, whereas bigowlim is designed for large datasets and offers improved performance on a cluster-based architecture.

triple stores vary also in the programmatic access they offer and in the features they support. as an example, the big difference in performance between tdb and sdb  are compensated by the different functionalities they offer. sdb performs less well in queries, but provides transactional support and concurrent access, which are not offered by tdb.

it should also be noted that the query performance of triple stores is dependent on the efficiency of their query optimization engines. the relevance of such optimization depends on the usage conditions of triple stores. where a few queries are routinely executed, optimization can be performed by users at design time and the lack of an optimizer is not penalizing. tdb is a peculiar case in that it offers an optimizer which is statistics based, and which needs to be updated after a change in the data content.

query performance may also depend on the characteristics of datasets in ways which can be difficult to detect. for example, we have observed that 4store loading times scale well with respect to the total number of triples, while the number of different properties in the dataset could be a limiting factor.

it should be noted that as our queries have evolved from real use cases on the cco ontology, which has been mostly accessed via a virtuoso-based sparql endpoint. it is not possible to rule out that queries displaying idiosyncratic behaviour towards virtuoso were naturally avoided or optimized. for this reason, we have provided figures which don't take such outliers in consideration. at the same time, it should be noted that neither sdb nor tdb show any particular outlier behaviour even though our queries were not optimised for these stores. we hope that the identification of such idiosyncratic behaviour will anyway be useful for the respective development communities.

finally, we did not include in our testing any element directly related to reasoning performance, which is a relevant issue in the life sciences, where simple chains of transitive properties are common in biomedical terminologies. testing reasoning features would have introduced an additional layer of complexity in the interpretation of results and we have preferred to focus on testing basic query-answering performance. for this reason, we have simulated transitive properties via a materialization of inferred triples .

CONCLUSIONS
we have compared the performance of a set of biologically relevant queries in five popular triple stores, openlink virtuoso , jena sdb, jena tdb, swiftowlim and 4store. we have used a dataset and a set of queries which are representative of a real life sciences application case. we have focused in our analysis on loading time, query time and its reproducibility, under "common" deployment and usage conditions.

in general, the performance proved to be quite query-specific. nevertheless, it was possible to identify three groups of queries displaying similar behaviour with respect to the different stores:

queries with relatively short art,

queries with moderate art,

queries with relatively long art.

swiftowlim proved to be a winner in the first group, 4store in the second one and virtuoso in the third one. virtuoso emerged from our analysis as a very balanced performer in our application case - its upload time and response time for all the  <dig> queries were better than average among the tested stores and it showed a very good scalability. even though in our study we used only moderately large triple stores , others demonstrated that virtuoso excels when confronted with much larger stores, up to 100- <dig> m triples  <cit> . from our experience we conclude that virtuoso is well suited for managing large volumes of biological data as is the case of our biogateway project where it gracefully supports querying over ~ <dig>  billion triples  <cit> .

note added in proof
after the completion of this work berlin benchmark v. <dig> has been released. a line-up comparable to the one in our work  was used for benchmarking and the conclusions reached are similar to ours  <cit> .

