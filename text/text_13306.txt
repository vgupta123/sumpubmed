BACKGROUND
rna-seq is a flavour of ngs that can generate extremely powerful datasets for a variety of research themes. gene discovery, digital gene expression profiling of entire tissues or developmental stages and population genetics  <cit>  are some of the broad applications to which this technology can be applied. for researchers working with nonconventional model organisms rna-seq is alluring because such analyses are often touted as being possible in the absence of an assembled genome to which such transcriptome data is ideally mapped. in these cases the researcher faces the significant bioinformatic challenge of accurately assembling an rna-seq dataset “de novo”  <cit> . this is a challenge because the currently dominant ngs platform  requires nucleic acid samples to be fragmented prior to sequencing, a process that needs to be accurately bioinformatically reversed in order to reconstruct the original transcripts. additionally, typical illumina read lengths are much less than 500 bp long  <cit> . these features result in both genome guided and de novo transcriptome assembly approaches displaying a large number of bioinformatically derived artefacts, a phemonenon that is well known  <cit> . the challenge of generating an accurate assembly of a transcriptome has generated many responses from the scientific community , with each assembly package having its own strengths and weaknesses. one de novo assembly strategy has been to generate multiple assemblies with different k-mer values, to combine these and then remove the redundancy of the resulting merged assembly  <cit> . however this approach first requires the user to identify an appropriate range of k-mer values , and may ultimately require the production of up to  <dig> transcriptomes for a single dataset  <cit> . related to this issue is assessment of assembly quality. this issue is highlighted when one considers that different assembly packages applied to the same raw dataset usually generate markedly different outputs, even with the same assembly parameters, . any critical user would ask “which assembly is appropriate for my project?”. for datasets with high proportions of “novel” genes , this problem has few solutions that can be generally applied to all datasets. statistics such as the n <dig>  average transcript size or coverage are not usually informative nor relevant when assessing the quality of an rna-seq assembly  <cit> . another approach is to focus on the annotatability of a given assembly. in combination with standard sequence similarity searches against public databases, the recently released busco  package falls under this umbrella, and can be used to assess the completeness of a given transcriptome or genome assembly  <cit> .

having been through the process of de novo transcriptome assembly optimization with our nonconventional model lymnaea stagnalis , we have developed a simple strategy that takes the consensus coding features of a set of three  independent assembly packages, and discards redundancy. this is not a new assembly method, but a way to survey the outputs of different assembly packages in order to generate a transcritpome that aims to be closer to the biological truth. we test our approach on simulated reads derived from the reference genomes of a fly and a nematode, and also on previously analyzed and publicly available raw rna-seq data derived from four eukaryotic lineages: two plants, a yeast, a fly and a nematode. in addition, we analyzed new rna-seq data derived from our model organism, lymnaea stagnalis. for each dataset, we performed de novo assemblies with three independently developed and widely used software packages . the outputs of these assemblies were then processed through our pipeline. we demonstrate both bioinformatically  and by validation in the lab for the l. stagnalis data, that this approach does indeed capture the most ‘biologically correct’ set of transcripts.

methods
raw data acquisition
we used illumina ngs data previously reported from three well-established model organisms: drosophila simulans, caenorhabditis sp and the unicellular eukaryote saccharomyces cerevisiae. to increase the phylogenetic diversity of this selection we also included two plants, hippophae rhamnoides and nicotiana benthamiana. we also sampled the foot tissue of an individual lymnaea stagnalis from our lab culture, and extracted total rna following the protocol described in  <cit> . a stranded truseq polya library was constructed and paired end sequencing was performed on the illumina hiseq <dig> platform.  <dig>  million pairs raw reads were generated.  <dig>  millon of these passed trimming and quality filtering and were used in all subsequent assembly analyses . the raw rna-seq data for drosophila simulans, caenorhabditis sp., saccharomyces cerevisiae, hippophae rhamnoides and nicotiana benthamiana were obtained from the ncbi sequence read archive  . the fastq data files were extracted using the sra tool kit provided by ncbi. for all datasets, individual reads were quality filtered using trimmomatic v <dig>   <cit>  with the following parameters: leading: <dig> trailing: <dig> minlen: <dig> . for l. stagnalis, truseq primer sequences were clipped with the following parameter: illuminaclip:primer_file:2:30: <dig>  the five datasets used in this study contained between  <dig> , <dig> and  <dig> , <dig> pairs of illumina rna-seq reads with read lengths of 100 bp, except for s. cerevisiae which had read lengths of 50 bp . between  <dig> and 100% of the read pairs passed trimmomatic quality checks . these quality filtered reads were used for our analyses.fig.  <dig> schematic outline of our pipeline. schematic representation of the steps involved in our pipeline




generation of simulated illumina reads from genomic references
we also generated artificial reads derived from the reference genomes of two well-established model organisms: drosophila melanogaster and caenorhabditis elegans. genomic reference sequences and gff annotations were donwloaded from ncbi database for d. melanogaster  and c. elegans . gff annotations were transformed into gtf format using the ‘rsem-gff3-to-gtf’ command from the rsem package with the option mrna for the rna-pattern parameter  <cit> . some annotations had to be deleted because strand information was not consistent with other records of the same transcript or cds. the gtf files contained  <dig>  transcripts for d. melanogaster and  <dig>  for c. elegans. the d. melanogaster genome is composed of  <dig> sequences and the c. elegans genome is composed of  <dig> sequences. transcripts were extracted from d. melanogaster and c. elegans genomes using ‘rsem-prepare-reference’ from the rsem package with the options mrna for gff3-rna-patterns and refseq for trusted-sources. fifty million read pairs were generated using the flux simulator complete pipeline with simulated expression  <cit> . library construction and sequencing simulation parameters for d. melanogaster are provided in additional file  <dig>  these artificially generated reads were also analyzed to calculate the read density per transcript. in order to represent variation in gene expression levels flux simulator does not simulate reads on all input transcripts. we therefore removed transcripts that lacked simulated reads for all downstream analyses. as for illumina datasets, simulated reads were quality filtered using trimmomatic v <dig>   <cit>  with the following parameters: leading: <dig> trailing: <dig> minlen: <dig> . in both datasets,  <dig> % of the read pairs passed trimmomatic quality checks . these reads were used for our analyses.

transcriptome assemblies
we selected three assembly packages with unique assembly strategies for our investigation: trinity v <dig> . <dig>  <cit> , clc genomics workbench v <dig>  and idba-tran  <cit> . while all of these packages employ the de bruijn method to perform their assemblies, clc and trinity use a single k-mer method whereas idba-tran uses a multiple k-mer method. in addition, while clc and idba-tran produce a single de bruijn graph , trinity produces one de bruijn graph per transcript, which are subsequently processed independently in order to extract all splice isoforms and to separate paralogous genes.

for each of the eight datasets we performed one assembly with each assembly package, resulting in three independent assemblies per dataset . clc assemblies were run using a word of  <dig> base pairs , a bubble size of 50 bp, with reads mapped back to the transcriptome using default parameters. idba_tran assemblies were run with k-mer values ranging from  <dig> to 100 bp with a step size of 10 bp. trinity assemblies were run with default parameters and a k-mer value of  <dig>  for each of these independent assemblies we recorded a variety of statistics .

concatenated-assembly generation
once the three individual assemblies for a given dataset had been generated we next produced a concatenated assembly. to do this we harmonized all assembly outputs into the same format. transcript names were also modified so that the origin of each sequence in the concatenated-assembly could be traced . we then performed an intra-assembly clustering step in order to remove all strictly redundant transcripts present within each of the individual sub-assemblies for each dataset . for this clustering step we used cd-hit-est  <cit>  with ten threads , a maximum memory of  <dig> megabytes , local sequence identity  with identity parameter of 100% , minimal coverage ratio of the shorter sequence of 100%  and minimal coverage ratio of the longest sequence of  <dig> % . the minimal ratio of the longest sequence was chosen in order to allow clustering of the whole range of transcript sizes. the resulting unique transcripts derived from each of the  <dig> assemblies for each dataset were then concatenated . transdecoder v <dig> . <dig>  <cit>  was then used to detect open reading frames  greater than  <dig> amino acids . the resulting coding sequence , were then clustered again using cd-hit-est with minimal coverage ratio of the longest sequence of  <dig> % , but a slightly lower sequence identity than the previous clustering step  in order to take in consideration the illumina sequencing error rate . the only parameter that can vary between clustering runs at this stage was the minimal coverage ratio of the shorter sequence . this parameter had values that ranged from  <dig> to 100% . an -as value was retrospectively selected in order to generate the most concise assembly . the resulting cluster info file  was retained in order to identify the transcript that generated the longest cds of each cluster, and also all other transcripts of this cluster for further analyses. we mined the cluster information file to determine the assembly origins of each cds and to calculate the cds extension size . the consensus of each cluster was then classified into one of seven categories:the cluster consensus was present in all three assembler outputs

the cluster consensus was present in clc and idba_tran outputs

the cluster consensus was present in clc and trinity outputs

the cluster consensus was present idba_tran and trinity outputs

the cluster consensus was present only present in the clc output

the cluster consensus was present only present in the idba_tran output

the cluster consensus was present only present in the trinity output




the perl script  used to perform all of these steps is provided in the additional file  <dig>  as input this script requires the path to a directory containing the assembly outputs to concatenate, and the paths to two binary files: cd-hit-est and transdecoder. variable options include the nucleotide identity and the minimal coverage ratio of the shortest sequence for the cds clustering step .

transcriptome assembly quality control
in order to test the quality of the assemblies generated by our pipeline we adopted two approaches, an annotatability based approach , and in vitro validation .

annotatability of assemblies
these analyses were performed with two different goals in mind. the first was to retrospectively determine the best minimal coverage ratio  for the final clustering step . to this end, we performed blastx searches for each of the above listed as values, and busco analyses for all assemblies based on illumina datasets  <cit> . for blastx searches the e-value was set to 1e- <dig>  a perl script was used to count the number of cdss with a blastx hit. in addition, the number of unique blastx hits were counted. these values were compared across the different assemblies in order to identify at which as value the concatenated-transcriptome began to lose information. the second goal was to evaluate any improvement that our concatenated-assembly approach gave relative to each of the individual assemblers. we applied transdecoder to the transcripts generated by each individual assembler with the same parameters as described above. subsequent blastx searches were also performed as described above for the concatenated-assembly. in addition, busco analyses of individual and concatenated transcriptomes were also compared.

in vitro validation of the l. stagnalis assemblies
we performed a small scale in vitro validation of our new l. stagnalis transcriptome data using  <dig> randomly selected transcripts from each of the following categories outlined above:  <dig>   <dig>   <dig> and  <dig>  although this is a small sample compared to the overall transcriptome size, the resulting trends were informative. transcripts were selected randomly using a perl script . we designed primer pairs for each of these  <dig> selected transcripts with a melting temperature of 60 °c using primer <dig>  <cit> . rt-pcr was performed on foot total rna isolated from three l. stagnalis individuals . reverse transcription reactions were performed in a final volume of 25 μl as follows. one microgram of high quality total rna was combined with  <dig> μmols of random hexamer and water to a final volume of 10 μl. this mix was put at 70 °c for 5 min in order to melt rna secondary structure and allow primer annealing. the mix was then cooled to room temperature. we then added to each reaction promega 5x mmlv-rt buffer , dntps ,  <dig> units of mmlv-rt h− mutant , and water to a final volume of 25 μl. for each reaction we performed a positive reverse transcription  containing all components mentioned above, and a negative reaction where mmlv-rt was replaced by water  to control for contaminating genomic dna. both rt+ and rt- reactions were incubated at room temperature for 10 min, and then heated to 42 °c for 90 min. the reactions were then heated to 70 °c for 15 min to inactivate the mmlv-rt. single stranded cdna was stored at -20 °c. pcr reactions were performed in a final volume of 25 μl containing the following: a final concentration of 1x enzyme reaction buffer,  <dig>  mm dntps,  <dig>  μm forward and reverse primers,  <dig>  u q <dig> polymerase , 1 μl of cdna template and water to a final volume of 25 μl. thermocycling was were performed in a sensoquest thermocycler with the following steps: 94 °c for 10 min, 35 cycles with denaturation at 94 °c for 30 s, primer annealing at 55 °c for 30 s, dna synthesis at 72 °c for 3 min with a final elongation step at 72 °c for 10 min. pcr products were loaded onto a 2% agarose gel containing ethidium bromide and electrophoresed at 130 v for  <dig> to 50 min and then visualized under uv light. for each primer pair, results were considered congruent when all three replicate rt+ reactions contained a distinct band at the expected size, and all three replicate rt- reactions were negative. a result was considered incongruent in any other case for the rt+ reactions. reactions with negative and incongruent results were repeated a second time to confirm the results.

RESULTS
individual transcriptome assemblies
in order to broadly compare the outputs of the individual assemblers  with our concatenated assemblies, we calculated some standard assembly metrics that are commonly used to characterize these kinds of datasets  <cit> . while each assembly output displayed different characteristics, a consistent pattern could be observed. assemblies produced by trinity always produced the highest numbers of transcripts and the largest transcriptome sizes , whereas clc generated assemblies with the lowest numbers of transcripts , and the smallest transcriptome sizes . number of input reads did not have any influence on these metrics. indeed, s. cerevisiae dataset has approximately twice the number of input reads than all other samples, and the smallest transcriptome output regardless of the assembly software. in general clc and idba_tran produced  <dig>  to  <dig>  and  <dig>  to  <dig>  times fewer transcripts than trinity respectively. n <dig> values for all assemblers lay between  <dig> and 4056 bp. idba_tran consistently generated the longest n50s, and clc generally the smallest . however we must point out that the number of transcripts and n <dig> values will be biased by differences in the smallest transcript size assembled by each software , and also by the biological realities of these transcriptomes - longer n <dig> values do not necessarily reflect a better transcriptome assembly. the longest transcript sizes varied from  <dig> to  <dig>  bp, with the longest transcripts generated by trinity . interestingly, for some datasets the longest transcript size varied by more than two fold according to the assembler used . these general observations confirm previous reports that the use of different assemblers , generate significantly different final assemblies . this led us to explore the possibility of combining these assemblies and removing any redundancy.

concatenated transcriptome assemblies
the main goal of our concatenated assembly approach was to improve assembly accuracy without generating a bloated assembly. in order to first remove intra-assembly redundancy, a stringent clustering step  was performed for each individual sub-assembly . for all datasets, the redundancy rate was zero for all idba_tran assemblies and below  <dig> % for all clc assemblies . for trinity transcriptomes, the redundancy rate was always significantly higher and ranged between  <dig>  and 30% . the redundancy in the trinity assemblies was also higher in the two simulated datasets  than in the illumina datasets  . higher intra-trinity redundancy is probably due to the fact that trinity is the only assembler to produce one de bruijn graph per transcript, and subsequently processes them one by one, whereas clc and idba_trans produce only one graph overall. the non-redundant transcripts produced by each assembler for each dataset were then pooled and transdecoder was used to detect putative orfs with a size of ≥ <dig> amino acids. the resulting datasets had concatenated transcriptomes with  <dig>  to  <dig>  transcripts, and transdecoder detected between  <dig>  and  <dig>  putative orfs . both simulated datasets fell within the range described by the illumina datasets, while the proportion of the simulated transcriptomes predicted to be coding was higher . this is most probably due to the fact that simulated reads were derived from mrna molecules.

the next critical step was to cluster the cdss produced by transdecoder in order to obtain the most concise coding transcriptome while minimizing information loss . to do this we used cd-hit-est with the nucleotide identity level set to 98% in order to be more conservative than the average illumina sequencing error rate of 1%. the size ratio of the longest transcript to the overall transcript was set to  <dig> % in order to include the shortest transcripts. the size ratio of the shortest transcript to the overall transcript  varied from  <dig> to 75% . to evaluate the amount of information lost at this step, we used annotation-based metrics  <cit>  that make more biological sense than metrics such as n <dig> or transcript size . blastx searches against swiss-prot database for each as value were performed to determine the impact of the as value in the above clustering step. it showed that the number of unique database entries decrease at 99% for both illumina derived and simulated datasets . in addition, busco analyses also showed that the completeness of each assembly began to decrease at an as value of 99% for each sample. on the basis of these analyses , the smallest as value was set to 100% for all datasets. nevertheless, it should be kept in mind that according to the dataset and the type of downstream analysis to be performed, a lower as value may be more appropriate. after this clustering exercise, between  <dig> and 68% of the cdss from each dataset were found to be redundant at the nucleotide level . c. elegans dataset is in the range of the illumina datasets whereas d. melanogaster is two point higher than the highest illumina dataset, which is d. simulans.table  <dig> assembly statistics

l. stagnalis
s. cerevisiae
caenorhabditis sp.
d. simulans
h. rhamnoides
n. benthamiana
d. melanogaster
c. elegans
unicds numberb
transcripts with multiple cdssc
redundant cdssd

astep number in fig. 1



bproportion of discarded cdss is indicated in brackets


cproportion of transcripts with > <dig> cds is indicated in brackets


dproportion of none unique cdss is indicated in brackets




our concatenated coding transcriptomes ranged in size from  <dig> transcripts for s. cerevisiae to  <dig>  transcripts for n. benthamiana . whatever the raw data origin, the number of transcripts in the concatenated assembly is less than the number of unicdss, and the number of cdss in the concatenated assembly is more than the number of unicdss . this is because transcripts often possessed more than one cds . transcripts with multiple cdss also influenced the number of redundant cdss in our concatenated assemblies . the proportion of cds redundancy for the simulated d. melanogaster data is within the range of all illumina datasets, while the simulated c. elegans is 5% lower than the smallest illumina dataset . transcripts with multiple cdss may be the result of sequencing or assembly errors, the activity of transposable elements such as group-ii intron or transposases that get inserted in genes  <cit> , or operon transcription  <cit> . compared to the individual assemblies generated by clc, trinity and idba-tran , the concatenated assemblies of l. stagnalis, d. simulans and n. benthamiana contained fewer transcripts than any of the individual sub-assemblies, whereas for s. cerevisiae, caenorhabditis sp, h. rhamnoides, d. melanogaster and c. elegans the number of transcripts within the concatenated assemblies were within range of those produced by the individual assemblers. considering the total transcriptome sizes, the concatenated assemblies were similar to the individual assemblies, but were always larger than the clc generated assemblies . for the s. cerevisiae dataset the concatenated transcriptome was larger than all individual assemblies . finally, the n50s of the concatenated assemblies were higher than all of the individual assemblies except for the s. cerevisiae and c. elegans dataset. this suggests that most of the transcripts removed during our concatenation and filtering steps had small sizes. these statistics also show that our pipeline did not increase the overall transcriptome size compared to the individual assemblers. in some cases the overall transcriptome size even decreased considerably . this phenomena has also been previously observed in other plant datasets  <cit> . the n <dig> values also suggests that our pipeline generates coding transcriptomes that have larger average transcript sizes than assemblies generated by the individual assemblers  <cit> .

in order to further assess the performance of our pipeline, we compared transcripts generated by the three individual assemblers and our pipeline with the original transcripts from which artificial reads were generated for both the d. melanogaster and c. elegans datasets . these comparisons were performed with blastn and we only considered hits with a nucleotide identity of 98% covering at least 50% of the original transcript. in both datasets, clc failed to recover the highest proportion of genuine transcripts , while our concatenated assemblies failed to recover the lowest proportion of genuine transcripts . in general, these concerningly high values are similar to those previously made on human and worm de novo transcriptome assemblies  <cit> . for both the d. melanogaster and c. elegans datasets, most of the missing genuine transcripts in the concatenated assembly  had read coverages of less than 10x, whereas most of the successfully recovered transcripts  had read coverages higher than 10x.table  <dig> comparison between original and assembled transcriptomes derived from simulated reads generated from d. melanogaster and c. elegans datasets


d. melanogaster

c. elegans



interestingly, and in contrast to the missing genuine transcripts, up to 27% of the assembled transcripts were not present in the original transcript set . idba_tran produces the lowest proportion of invented transcripts , whereas trinity produces the highest proportion of invented transcripts in d. melanogaster  and clc in c. elegans . in c. elegans, our concatenated assembly had a higher proportion of invented transcripts than any single assembler, whereas in d. melanogaster it had a lower proportion than clc and trinity .

evaluation of concatenated assemblies
in order to study the composition of the final unicds clusters in our concatenated assemblies we assigned all clusters to one of seven categories . the resulting pattern was consistent across all datasets, and all as ratios used  in the clustering step . cds clusters primarily belonged to either category  <dig>  or category  <dig>  . of all three individual assemblers, trinity consistently generated the most unique clusters , while clc consistently generated the fewest unique clusters  .fig.  <dig> categorization of concatenated clusters according to their presence/absence in the individual sub-assemblies. category 1: clusters found in all three assemblers; category 2: clusters found in clc and trinity; category 3: clusters found in clc and idba; category 4: clusters found in idba-tran and trinity; category 5: clusters found in clc; category 6: clusters found in trinity and category 7: clusters found in idba




in order to compare these distributions between samples, we performed kolmogorov-smirnov statistical tests. all paired comparisons were statistically non-significant except for  <dig> that always involved at least one of the plant transcriptomes  . distribution comparisons between concatenated assemblies from both simulated datasets without plant illumina datasets were always non-significant .

this categorization exercise led us to ask whether any one of these categories contained a higher proportion of “biologically correct” transcripts than others? in order to address this question, we performed an in vitro validation using the l. stagnalis dataset. we tested ten randomly selected clusters from categories  <dig> ,  <dig>   <dig> and  <dig> . the positive validation rate for categories  <dig>   <dig> and  <dig> ranged from  <dig> to 70%, and the negative validation rate ranged from  <dig> to 60% . category  <dig> had a positive validation rate of 80%, and a negative validation rate of 0% . these results suggest that clusters found by only one assembler  are likely to be either very lowly expressed or are assembly errors, while those found in all three assemblers  are more likely to be genuine molecules, giving further credence to the concept of our bioinformatic approach.table  <dig> in vitro validation of l. stagnalis clusters

category 1
category 5
category 6
category 7



we also retrospectively investigated the completeness of each individual assembly relative to our concatenated assemblies. the results of this analysis were striking. averaging across all eight datasets,  <dig> % ±  <dig> % of cds clusters in the concatenated assembly were present in the clc assemblies,  <dig> % ±  <dig> % were present in the idba_tran assemblies and  <dig> % ±  <dig> % were present in the trinity assemblies . both simulated concatenated assemblies were in the range of all illumina derived assemblies, excepted for clc where the proportion of detected cdss was higher than in any of the  <dig> other samples . on face value this result suggests that trinity alone provides the best overall picture of a coding transcriptome. however, when we looked retrospectively at the effect of our pipeline on cds extension, we found idba_tran to be the best performer for all datasets . between  <dig> and 44% of the cdss from each assembler were extended during our concatenating process . the proportion of extended cdss from the simulated transcriptomes were within the range of all illumina derived assemblies, excepted for clc in c. elegans which was 3% lower than the smallest illumina dataset  .
fig.  <dig> characterisation of cdss present in the final concatenated assembly and their presence/absence in the individual sub-assemblies. a proportion of cdss present in the final concatenated assembly present in each individual assembler for each dataset. b for those cdss present in each sub-assembler , the proportion of cdss from each individual assembler that matches  the length of the final concatenated cds


l. stagnalis
s. cerevisiae
caenorhabditis sp.
d. simulans
h. rhamnoides
n. benthamiaana
d. melanogaster
c.elegans
number of extended cdssa

athe proportion of cdss with an extension are indicated in brackets




we also compared the annotatability of our concatenated transcriptomes relative to assemblies generated by each of the three individual assemblers using blastx sequence similarity searches against swiss-prot  <cit> . the results of these analyses showed that annotatability was always higher in the concatenated assemblies compared to all of the individual assemblies . for all illumina derived datasets, the proportion of cdss with a blastx hit expressed as a percentage of that found in the corresponding concatenated assembly ranged between 94% for the trinity assembly of the s. cerevisiae dataset to 36% for the clc assembly of the l. stagnalis dataset . this trend also held true for the d. melanogaster and c. elegans simulated datasets .table  <dig> comparisons of assembly annotatability

l. stagnalis
s. cerevisiae
caenorhabditis sp.
d. simulans
h. rhamnoides
n. benthamiana
d. melanogaster
c. elegans
clca
idba_trana
trinitya
clca
idba_trana
trinitya

aeach value is also expressed as a percentage of the corresponding concatenated dataset value 




we were aware that an increase in the proportion of cdss returning a blastx hit does not necessary mean that annotation diversity also increases. indeed, an overall increase in the number of blastx hits could be due to a greater number of mis-assembled isoforms or paralogs present in a given assembly. to account for this phenomenon we investigated annotation diversity by calculating the number of unique database entries for all blastx searches. again in all cases the number of unique blastx hits was highest in the concatenated assemblies . for the illumina datasets, the number of unique database hits in the individual assemblies expressed as a percentage of that found in the corresponding concatenated assembly ranged between 98%  and 72% . these results demonstrate that an overall increase in the rate of annotation is accompanied by an increase in annotation diversity. this phenomena was also observed in the analysis of a n. benthamiana transcriptome  <cit> . it should be noted that the increase in annotation diversity in our concatenated assemblies was less extreme than the increase in the overall annotatability . this implies that most of the increase in the overall annotation is due to cds isoforms that were not found by a given individual assembler.

we also performed an analysis of assembly completeness using the transcription factor database busco  <cit> . in addition to the simple presence/absence pattern of busco entries, this analysis also provides interesting information regarding the number of duplicated and fragmented entries. the results of this analysis also confirmed the results obtained with our blastx searches; the number of detected buscos entries was always higher in the concatenated assemblies than in all of the individual assemblers for all illumina datasets and the simulated datasets . in addition, the number of fragmented copies was always lower in all concatenated assemblies than in the individual sub-assemblies, except for the caenorhabditis sp. dataset where the number of fragmented copies was equal in the concatenated and idba_tran assemblies and the c. elegans dataset where the number of fragmented copies is lower in trinity and equal in idba_tran .table  <dig> results of busco annotations

l. stagnalis
s. cerevisiae
caenorhabditis sp.
d. simulans
h. rhamnoides
n. benthamiana
d. melanogaster
c. elegans



there were always the fewest number of duplicated copies in all clc sub-assemblies, but clc was always the single assembler with the fewest total number of busco entries, except for the s. cerevisiae and c. elegans datasets . our concatenated assemblies always contained a higher number of duplicated copies than all three individual assemblers. this is apparently a weakness of our methodology that must be traded off against an assembly with more copies and fewer fragmented copies . our concatenated assemblies produced from the simulated datasets reflected the same patterns seen in the illumina derived data .

because the ncbi databases have evolved significantly over the last two years, we downloaded the previously reported  <cit>  cumulative transcriptome of n. benthamiana , repeated the blastx and busco searches and compared these updated results to our assembly of the same raw data. this comparison revealed that essentially the same proportion of both assemblies returned a blastx hit against the swiss-prot database . nevertheless,  <dig> more unique database entries were detected in our concatenated transcriptome . these two assemblies shared  <dig>  entries, while our assembly possessed  <dig> unique entries and the nakasugi et al assembly possessed  <dig> unique entries . this picture was supported by the busco analysis: both assemblies shared  <dig> buscos entries , with five entries unique to our assembly and eight unique to the nakasugi assembly. in addition, the number of duplicated copies was lower in our assembly than in the assembly reported by nakasugi et al. .table  <dig> comparison of blastx annotation rate of both n. benthamiana cumulative transcriptomes




CONCLUSIONS
as far as we are aware this is the first study to characterize the effects of combining multiple de novo transcriptome assemblies in order to both maximize the information content, and minimize the redundancy of the resulting coding transcriptome for a variety of eukaryotes. a similar method was previously reported for transcriptomes derived from plants in order to address assembly difficulties associated with polyploidy  <cit> . our approach however requires only three alternative assemblies in comparison with many tens of assemblies. in general our methodology produces a more concise and information-rich coding transcriptome assembly that will make subsequent analyses more efficient; from the comparisons we conducted here on six independent eukaryotic datasets using three popular rna-seq assembly packages we generated on average  <dig> x fewer transcripts, and significantly increased the degree and diversity of annotatability in comparison to any of the three individual assemblers. in addition, we tested our approach on two simulated datasets generated from reference genomes, confirming the results observed from ‘real world’ illumina datasets. we believe our approach  will allow researchers with minimal bioinformatics experience to extract the most information from their rna-seq datasets. a weakness we observe in our approach is the generation of slightly more “false” transcripts and redundancy than seen in the individual assemblers we employed. this phenomenon  will have an impact on subsequent analyses, for example differential gene expression . in the case of dge analysis, this weakness can be countered to some extent by allowing multiple read mappings as implemented by rsubread  <cit> . this also serves to emphasize the point that such analyses based on ngs data should always be confirmed by independent validation experiments.

additional files

additional file 1: table s <dig>  raw ngs data characteristics pre and post quality filtering with trimmomatic. 


additional file 2: parameter file for reads design with flux simulator on d. melanogaster. 


additional file 3: perl script used to perform our assembly pipeline. 


additional file 4: perl script used to randomly select candidates from a list of transcripts for our pcr validation experiments. 


additional file 5: table s <dig>  assembly metrics of the three sub-assemblies and the final concatenated assembly for each of the six datasets. 


additional file 6: table s <dig>  clustering metrics for the three sub-assemblies for each of the six datasets. 


additional file 7: table s <dig>  transdecoder metrics for the concatenated assemblies for each of the six datasets. 


additional file 8: table s <dig>  effect of the cd-hit-est as value on clustering. 


additional file 9: table s <dig>  
p-values generated by kolmogrov-smirnov distribution tests. 




abbreviations
buscobenchmarking universal single copy orthologs

cdscoding dna sequence

dgedifferential gene expression

dnadeoxyribonucleic acid

mrnamessenger rna

ngsnext generation sequencing

orfsopen reading frames

pcrpolymerase chain reaction

rnaribonucleic acid

srasequence read archive

