BACKGROUND
genome browsers are one of the most common bioinformatics tools used by biologists. browsers allow biologists to visualize genomic features such as genes, snps, cg islands, transcription factor binding sites, and many others and to place these features in their genomic context. they are also useful in adding and viewing genome annotations and feature-specific information. generally, genome browsers support analysis of a single genome, but there is often a need to compare features between one or more genomes. existing tools are not well-suited to doing this. many visualization methods have been developed to support comparative genomics of animals from different species. these include phylogenetic trees, alignment viewers, circos diagrams  <cit> , and dot-matrix methods  <cit> . tools which perform comparative analysis include blast   <cit>  and vista  <cit> . generally these methods support only comparisons between a small number of genomes. there is a need for comparative analysis and visualization tools supporting members of the same species with largely collinear genomes. our goal was to develop a system which supports simultaneous and dynamic analysis of many  collinear genomes.

a web-based resource for investigating genomic data from multiple samples simultaneously would aid many common comparative genome analyses including disease association studies and expression analysis. our system supports any generic genomic data set, allowing it to be an extensible framework for analysis, not simply a data resource. like existing genome browsers and viewers, we represent different categories of genomic data as horizontal tracks covering a particular region of the genome. unlike previous work, we use color to better indicate important regions and facilitate more intuitive comparison. in addition, we allow dynamic sorting and local reordering of tracks.

comparison between genomes of different samples of the same species, particularly the analysis of local haplotype and phylogeny, can provide insight into gene origins and individual variations. they also aid in understanding population structure. understanding local genomic variations and population structure is the key to studies of individual genes and their association with disease. we need to be able to not only determine similarities and differences between samples genome-wide, but also at the level of individual loci.

there are many genome browsers and viewers that can integrate multiple data sets pertaining to a particular genome sequence whether it is specific or a species consensus. many of these are standalone desktop applications. there also exist several web-based genome browsers. these browsers, including the ucsc genome browser  <cit> , gbrowse  <cit> , ensembl  <cit> , ncbi map viewer  <cit> , and jbrowse  <cit> , display multiple tracks of data and support a variety of useful navigation techniques that allow the genome to be traversed and visualized at various resolutions. however, existing browsers are limited in their ability to support dynamic and comparative analysis between multiple genomes.

the ucsc genome browser  <cit>  is the standard and most prevalent web-based genome browser. the ucsc browser originally targeted the human genome data as a part of the human genome project. it has since been extended to numerous other species. the goal of the ucsc browser is to make a particular set of data broadly accessible and navigable. it does not focus on any particular analysis but is a comprehensive resource for integrating, displaying, and navigating publicly accessible genome data. the browser supports standard functions including navigation by panning and zooming. data sets of interest can be displayed in tracks and reordered manually by the user. the ucsc browser functions as a window into very comprehensive sets of data for many different species, but does not support comparisons between either inter- or intraspecific genomes. the ucsc browser does not support dynamic interactions with the displayed data. instead, pages must be reloaded in their entirety any time that new data is requested. due to this limitation, data retrieval is necessarily limited to a small window or few data types to allow quick and easy analysis.

the generic genome browser   <cit>  is another widely used web-based genome browser available for human, mouse and other model organisms. the main difference between gbrowse and the ucsc browser is extensibility. gbrowse is designed to be extended with new and user-provided data sets, and as such it provides a flexible framework for displaying and navigating arbitrary genome information. otherwise, gbrowse uses the same basic navigation and display structure as the ucsc browser. data sets can be individually selected and are displayed as horizontal tracks stacked on top of one another and aligned to a common genomic scale. unlike the ucsc browser, gbrowse supports asynchronous retrieval and navigation of data, meaning the entire page does not need to be reloaded to update the genomic regions displayed. this reduces the computational overhead on both the server and client, refreshing only those parts that need to be changed. however, gbrowse is limited in its ability to display small-scale details at high resolutions. since the representation and visualization of data is essentially fixed, fine details such as snps are often omitted when viewing large regions.

the ensembl genome database project  <cit> , a joint venture between the sanger institute and the european bioinformatics institute , was initiated with a goal of providing full genome data along with various annotation as a public resource for researchers. the ensembl genome browser serves as a publicly available web-based browser for this data. although initially focusing on the human genome, the browser now includes many model-organism genomes with annotations including genes, dna and rna alignments, and many other annotations. the browser function itself is very similar to the ucsc browser, supporting traditional navigation techniques. ensembl also uses asynchronous data requests to retrieve data when it is needed. in addition, detailed annotations and links to more thorough information are displayed when a feature such as a gene or contig is selected.

the national center for bioinformatics information  provides the ncbi map viewer  <cit>  as an online tool for browsing genomes. unlike others, the ncbi map viewer displays the genome vertically with tracks for only the assembly, contigs, and genes while focusing on detailed description and annotation for these features linking to other useful ncbi tools for directly accessing related genes, snps, proteins, and more. map viewer also does not provide any dynamic navigation mechanism, therefore the entire page must be reloaded each time the genome window is adjusted. the browser serves best as a hub through which other resources are accessed by genomic position and is not a viable analysis tool by itself.

jbrowse   <cit>  is a more recent web-based tool designed to allow navigation and analysis of genomes and is available as a framework that researchers can set up and fill with their own data. jbrowse takes advantage of the dynamic features available to modern browsers and allows for more interactive and dynamic visualizations. jbrowse's focus is on supporting dynamic and fluid transitions between displayed windows, for example showing a smooth sliding transition as a user pans in one direction along the genome. jbrowse also supports client-side dynamic rendering rather than the server-side image or block rendering as in most other browsers. this reduces the server-side computation and time and cost associated with data transfer of full images between the server and client. jbrowse leverages the computational power on the user's browser to draw and dynamically shift and rescale the visualization, leading to a more intuitive understanding of the relationship between genomic features as a user shifts the frame of reference. jbrowse is a good tool for generic genome annotation analysis, but, as with other existing browsers, it does not provide suitable techniques for visualizing multiple genomes concurrently.

existing genome browsers are well suited for generic genome annotation and are useful for analysis of the specific data sets they are tailored to, but there are many limitations. available data is essentially static. in many cases, users have the ability to customize the browser to use different data or display only what they are interested in, but the underlying information representation remains constant. the visualization is essentially static, where the current region of interest is shipped to the viewer. data can be viewed at multiple resolutions, but no further attempt is made to improve upon the usability of the visualization for a particular purpose. it is hard to quickly glean information and understanding from the visualization. these tools are frequently used to provide access to publicly available data sources rather than to support novel visualizations for analysis. our browser addresses the following limitations of existing genome browsers: it supports simultaneous exploration of multiple aligned genomes, it allows for dynamic rearrangements of tracks to support comparisons, and it provides alternative visualization modes based on the current displayed scale.

methods
design
our genome browser is available as a public website allowing users to view, explore, and analyze multiple genomic data without requiring a standalone application http://msub.csbio.unc.edu. data is stored on the web server and the client side consists of only the web browser. it has been tested and works on most modern web browsers and operating systems. tested browsers include chromium/google chrome  <dig> , firefox  <dig> , firefox  <dig> , internet explorer  <dig>  and safari  <dig> . it even loads on iphones . platform interoperability and constant availability make it an easy and useful tool for genetic analysis.

our basic visualization techniques are similar to existing browsers and genome viewers in that separate types of genomic data are represented as vertically stacked horizontal bars  covering a selected region of the genome . we support various navigation techniques including manually selecting a region of the genome, panning backward and forward through the genome, and zooming in and out. clicking and dragging over any track highlights the region over which the pointer is dragged over all displayed tracks. this allows users to highlight regions of interest to easily compare between track groups. in addition, once a region is selected, a button appears to allow zooming in to the selected region such that it fills the entire viewing window . this allows for precise navigation to features of interest. there are also navigation buttons to zoom out by fixed small  and large  ratios of the displayed window size. panning side to side is supported by four buttons, two pan in each direction, one a short distance and one a long distance, 10% and 50% of the viewing window size, respectively. panning small distances allows the user to fine tune the display to focus on a region of interest. further panning allows users to scan the genome for nearby features while maintaining a local frame of reference. in addition to panning and zooming, when a point on any track is clicked, a vertical cursor line is highlighted to allow visual alignment of features at that point. the display window may then be recentered around the selected position to best show the chosen feature and its surrounding area . the displayed samples are selected or deselected by clicking the strain name in the selector region. data sets can also be individually shown or hidden depending on the analysis performed by clicking to toggle the show/hide button next to each track group.

we provide easy access to the data underlying the visualization through the browser interface. for most data types, the displayed information can be retrieved as a delimited text file by clicking the output button below each track, which retrieves the underlying data for the currently selected sets of active genomes and within the displayed window so that no further filtering is required.

the basic data representation used by our browser is a set of possibly overlapping intervals specified by their genome coordinates . intervals are displayed as horizontal blocks that are displayed along the viewing window based on the bounding positions of the interval. if intervals are smaller than the display resolution, they are presented as histograms. overlapping intervals can also be displayed on subsequent stacked tracks. this data representation supports a wide variety of genome annotations and allows the browser to be easily extended to novel data sets.

the visualization method used changes dynamically based on both content and scale. unlike previous browsers, the visualization changes to aid analysis based on the subset of samples chosen, the order of samples, and the viewing resolution of the data. when examining a small region of fine detail, features such as snps and genotype intervals are displayed as discrete blocks or points such that individual features and their exact relationship can be determined. at coarse levels of detail, when there are too many small-scale features to accurately display them individually, compound or consensus visualizations, such as a histogram, are shown, providing a more useful high level interpretation of the data . dynamic visualization techniques are also applied to the subset and order of comparative samples selected. samples can be displayed simultaneously and their tracks reordered such that they can be easily compared. in addition, a variety of visualizations are computed dynamically based on the current subset of samples selected, such as intervals of sequence identity among the selected set of samples.

our design focuses on the visualization of multiple simultaneous components from aligned data sets. to this end, we support a multi-row display, where individual data sets are displayed as vertically stacked tracks that be compared vertically, along with derived data tracks which integrate information over the selected subset of samples. we assume collinearity, common local coordinates, of all feature tracks of interest. our genome browser uses color to allow for more intuitive visualization. intervals for various data types are displayed as variable-width colored bars across the genome, easily highlighting similarities and differences between genomes by their respective color pattern. to allow users to further customize the visualization to their needs, we support dynamic recoloring of intervals  as well as dynamic sorting of samples at a user-selected position . dynamic coloring and reordering tools facilitate comparison of features by visually aligning regions where genomes are similar and different.

implementation
there are many critical design and resource allocation decisions which arise when handling very large sets of data. in traditional genome browsers, a relatively small amount of data needs to be handled at any one time. existing browsers only need to handle a single sequence. in order to visualize multiple sequences simultaneously  as in the case of our implementation, it is important to consider different methods for efficient data transfer and visualization. in addition to handling multiple sequences, we also support dynamic visualizations that vary based on the scale and local context. existing browsers, such as the ucsc genome browser  <cit> , do not support large-scale visualization of fine-scale features, like snps.

to support faster and more interactive visualization while dealing with remote data, we addressed issues of data transfer and efficiency and how to best allocate the rendering tasks. our implementation loads data as it is needed into the page using asynchronous requests to the server. to reduce data transfer costs in memory and speed, the page is loaded only once at the beginning of a session and, subsequently, only data is loaded. in addition, visualization and display are handled in the browser by dynamic scripts on the page so that complete images do not have to be transferred from the server. data rescaling, panning, and drawing are all handled by the client. requests are made asynchronously so that the tool is available to the user even while new data is transferred.

in order to increase usability as well as allow dynamic content and interaction, we require a set of web-based technologies that would allow wide platform interoperability and dynamic client-server interaction. in addition, to increase ease of development and extensibility, we wanted a framework that was easy to maintain, understand, and use without having to deal with the details of browser compatibility and scripting languages like html and javascript. to meet these objectives, we chose the pyjamas framework http://pyjs.org, a python implementation of the java-based google web toolkit . this framework allows development using the python language while outputting browser non-specific html and java- script. to increase efficiency and allow for dynamic client-server interaction, we used ajax to perform remote procedure calls to retrieve and reformat data as it is needed.

RESULTS
we have deployed an instance of our visualization tool to aid analysis and interpretation of a recently published nature genetics paper  <cit> . this browser analyzes a set of  <dig> classical laboratory and  <dig> wild-derived mouse strains along with  <dig> wild-caught mice. this study answers open questions regarding the subspecific origin of the laboratory mouse and provides the first detailed view of the haplotype diversity in most common laboratory mouse strains. we use our tool to visualize eight different data types to aid in comparative analysis of these  <dig> mouse samples.

several data sets are included to aid in analysis by placing features in a genomic context. we include snps from the mouse diversity array  <cit>  used in genotyping the mouse strains. when viewing small sections of the genome, snps are displayed individually as vertical bars along the track. in addition, alleles at each snp for each strain are displayed at fine-scale resolutions overlaying the subspecific origin and haplotype coloring tracks to allow for direct comparison . at coarse-scale resolutions, where snps are dense and thus cannot be displayed individually, snps are aggregated into a histogram representing the frequency of snps within uniformly sized windows. known genes  <cit>  are displayed in a similar manner. as with the snps, genes smaller than a pixel are displayed in a histogram and larger genes are displayed as horizontal bars. in the case where genes overlap, overlapping genes are displayed in additional stacked horizontal tracks.

a second data set of interest is the local subspecific origin of each sample's genome. the genomes of classical laboratory mouse strains arose through interbreeding of pet mice from three different mouse subspecies. in  <cit> , the mosaic of each genome was determined . subspecies are assigned to each strain as a mosaic of intervals representing mus musculus domesticus, mus musculus musculus, or mus musculus castaneus subspecies. subspecies intervals were inferred using a hidden markov model based on a set of diagnostic snps. snps were assigned their diagnostic status based on each allele's distribution among wild and wild-derived mouse strains of known subspecies. in addition to diagnostic alleles, diagnostic values were also assigned to snps based on the distribution vinos, novel variants not previously identified  <cit> . subsequently, genomic regions of mouse strains from unknown subspecies were assigned a subspecies and assigned a confidence based on these diagnostic values. an hmm was used to delineate subspecies intervals across the genome which integrated the diagnostic strength of the snp markers, a data-error model, and minimized the number of transitions. subspecific origin is visualized as a horizontal track made up of a mosaic of colored bars representing domesticus , musculus , or castaneus  regions for each selected strain. at fine scales, diagnostic snps are shown above the subspecies assignment for each strain, the height and color of the bar represent the relative diagnostic value and implied subspecies, respectively .

another data set annotates regions of heterozygosity, which are visualized for each selected strain . this is particularly important for outbred and wild-caught mice since laboratory mouse strains have little or no heterozygosity. heterozygosity is displayed as a mosaic of intervals representing inbred and heterozygous regions in addition to an individual locus-based visualization like the snp tracks. the locus-based visualization is similar to the snp visualization, displaying individual heterozygous alleles at fine scales and a histogram representation at coarse scales. the heterozygous block visualization is a computed track using a method similar to the subspecific origin hmm to detect large heterozygous regions.

genome mosaic representations, such as subspecific origins and heterozygous regions, are useful for revealing the evolutionary history or identifying more recent introgressions between mouse strains. existing laboratory and wild-derived strains are a mosaic of ancestral genomes that were selected for desired traits and subsequently inbred. our genome browser provides the first tool for exploring this genomic diversity at both a high level and at a fine scale.

for classical laboratory strains, several additional data tracks are displayed to show local variation and haplotype structure. these data include a mosaic of possibly overlapping intervals or compatible haplotype blocks that show no evidence of recombination. within these blocks, we dynamically compute identity-by-descent between the selected set of strains. we introduce an innovative visualization of haplotype identity among classical laboratory strains based on these compatible blocks. lastly, local phylogeny trees can be displayed for each interval.

we include a visualization of intervals that show no evidence of historical recombination  <cit>  among the classical laboratory strains . these blocks serve as not only a visualization of their own representing ancestral haplotypes but also serve as a framework over which other data sets and visualizations are based. this visualization is useful when analyzing other data sets in order to place those data in the context relative to these intervals. we expect that significant genomic features, specifically differences between strains, should fall within these breakpoints. compatible intervals are computed using a maximal-k scan  over  <dig> classical laboratory strains, that is, a minimal full covering of maximally sized intervals based on the 4-gamete test. such intervals each define a unique perfect phylogeny tree based on the set of sdps within the interval. intervals can overlap at most with one other interval on each side, so intervals are displayed as horizontal bars in one of two stacked horizontal tracks. at a scale too large to display individual intervals, the density of intervals is once again displayed as a histogram.

intervals of sequence identity are computed dynamically based on where the subset of selected strains share a common haplotype . strains are divided into haplotype identity groups within each compatible interval based on sequence similarity . we compute intervals of identity by descent  over the user-selected set of strains on the fly. we consider a region ibd if all selected strains are in the same haplotype group over that region. consecutive intervals of ibd are combined into larger blocks in part to reduce the data transfer size. as we will see in the following data description, regions of ibd should correspond directly to identical haplotype coloring patterns.

we also support a method for exploring the extent of shared haplotypes among the selected strains. blocks of color are used to depict haplotype similarity. colors are assigned and reused so that transitions are minimized. this provides a relative comparison of strain similarities . at any position along the genome, the haplotype identity among the displayed strains can be understood visually as dividing strains into haplotype groups according to their color such that strains with substantially identical haplotypes are the same color. over larger regions, haplotype identity is represented by a shared color pattern.

initial haplotype colors are precomputed for all classical laboratory strains, leading to frequent color/haplotype changes at a genomic scale. when viewing only a small sample of strains, this coloring can be simplified, essentially changing colors only when there are haplotype group changes among the selected strains. an interactive aspect of this visualization is that the colors can be dynamically reassigned according to the order of the selected strains such that colors are assigned in descending order . the topmost displayed strains is assigned a single color across the genome. the second strain is assigned the color of the previous strain where its haplotype matches the first and a second color where it differs. this process is repeated for subsequent strains. this has the effect of, for example, highlighting all regions where the first selected sample shares a haplotype with subsequent samples by using the same color. in this way, the haplotype coloring scheme can be substantially simplified for a small sample of strains allowing more intuitive analysis. a generic feature of the browser is that strain tracks can be dragged vertically to reorder their position within a track group, allowing the coloring order to be customized for the analysis required.

a final interactive tool facilitates similarity analysis at a particular position by allowing sorting of tracks within all groups at a user-selected position within the displayed genomic window. strains are sorted vertically according to the haplotype coloring at the selected position such that strains with identical haplotypes are grouped together. in addition, strains are further sorted according to their haplotypes at increasingly distant positions radiating in both directions from the selected position until either the edge of the displayed window is reached or all strains are distinct.

lastly, local phylogenetic trees can be displayed by selecting a compatible interval of interest within the genome . a tree is computed within the interval based on neighbor-joining on haplotype similarity. selected strains are highlighted according to the haplotype group they fall in, corresponding to a leaf in the tree structure. in contrast to the haplotype identity and ibd tracks, the phylogenetic trees show relative differences and possible ancestral relationships between similar haplotype groups rather than simply the group membership. strain names are colored according to their subspecific origin to show the relationship between subspecies assignment and tree structure.

CONCLUSIONS
an instance of our genome browser and its dynamic analysis methods has been deployed to display results of our recent publication  <cit>  at http://msub.csbio.unc.edu. it is continually used in comparative genome analyses of the mouse genomes presented. in the past twelve months of our tool's availability, we have had over  <dig> users make almost  <dig>  queries. the tool is used by researchers to perform comparative analysis between  <dig> common mouse strains. our tool is particularly well suited for selecting and partitioning strains while simultaneously considering phenotype variation as it relates to a given gene or genomic region. a recent focus of our browser has been to explore the predictive power of our local phylogeny and haplotype assignments. local comparative genomic analysis has been shown to be particularly effective in predicting disease susceptibility and other phenotypic states of the available set of mouse strains given the known state of a small sample. our notion of sequence similarity has also been used to inform genotype imputation by constructing a haplotype mosaic  <cit> . work is continuing to enhances the browser's support in this area.

we have also implemented another version of our framework to support preliminary analysis of the emerging collaborative cross  lines  <cit> . this browser supports analysis of  <dig> mouse lines in the collaborative cross in various stages of inbreeding as well as the  <dig> inbred founder strains  <cit> . visualized data sets include the assigned founder mosaic for each cc line, subspecific origin, haplotype diversity, and local phylogenetic trees. this resource is available at http://csbio.unc.edu/ccstatus/?run=ccv and is being used extensively by the collaborative cross consortium and others to analyze these data. figure  <dig> shows a snapshot of this tool.

there are many technical as well as structural improvements that can be made in the future to make our browser more useful, general, and effective for visualization and analysis of multiple genome data. although the browser is constructed in a modular format, separating our data from the browser itself, to add new user-specified data types or novel visualizations requires changes to the source code and recompiling. in order to support a larger range of users and wider adoption, it is possible to add a simple web-based user interface for adding new tracks and visualizations within the existing framework. we present our genome browser's application to a specific data set here, but it is suitable to other organisms and other data types where comparative analysis of multiple genomes is useful. likewise, we could provide an api for custom analysis of the existing data set. a more fundamental improvement we would like to make is to support local structural variations, such as insertions, deletions, repeats, and translocations, where the compared genomes are not strictly collinear as we assume. even samples of the same subspecies can have small scale copy-number variations and are not strictly collinear. assessing these differences is an important part of local haplotype and phylogeny analysis.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jw developed the methods, designed and implemented the tool, and drafted the manuscript. fpmv conceived of the resource and provided the data. lm participated in design of the methods and tool and helped draft the manuscript. all authors read and approved the final manuscript.

