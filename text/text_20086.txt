BACKGROUND
a vast amount of genomic data, including most of the human genome  <cit> , is now available in publicly accessible databases, and the deposition of additional data continues at a rapid pace. genomic data requires meticulous interpretation and annotation for meaningful information to be extracted. genes, the most important functional blocks in the human genome, require exact structural annotation for future biological experiments such as reverse genetics and microarray experiments.

most of the human genes have piecewise structure with a number of exons separated by introns. introns are excised from original gene transcripts  to form mature mrna. by aligning mrna with originating genomic clones, we can reconstruct gene structure.

several fast and efficient tools, such as blast  <cit>  and blastx  <cit> , were introduced in the early 90's to search databases for homologous blocks, an essential component of all gene structural prediction algorithms. an original method of gene structure prediction based on a set of protein-dna blocks  <cit> , implemented in genebuilder, was followed by procrustes implementation  <cit> . later, there were numerous implementations exploiting the idea of homology-based gene structure prediction, including geneseqer with splicepredictor  <cit> , aat  <cit> , ebest  <cit> , estmap  <cit> , tap  <cit> , sim <dig>  <cit> , spidey  <cit> , grailexp galahad  <cit> , blat  <cit>  and est2genome  <cit> . other genome annotation software is described in  <cit> .

homology-based methods of gene structure prediction, referred to as spliced alignment, are often classified according to the homology type they employ   <cit> ; frequently, programs employ more than one homology type. the purpose of a spliced alignment algorithm is to explore all possible assemblies of potential exons  to find a chain of exons which best fits an mrna target sequence.

in this paper we discuss gigogene, a gene structure prediction tool. gigogene, like existing spliced alignment software  <cit> , can deal with repeating domains, paralogs and pseudogenes. in addition, gigogene is capable of combining structural prediction of a gene from partial gene models that span across several genomic clones. the key to gigogene higher precision, in the case of mrna/dna spliced alignment, is in the use of new splice-enhanced affine gap penalty global alignment for noise-tolerant recovery of exon-intron boundaries, including non-canonical splice sites, with simultaneous prediction of short exons. gigogene uses a filtering step to remove suboptimal blocks for better prediction quality.

implementation
before we proceed with formal description of methods, we need to define a high-scoring segment pair , otherwise known as a block. in the context of this paper, an hsp is a statistically significant alignment between segments  in dna and mrna obtained from a blastn result. parameters characterizing hsps include location in the mrna query and in the dna target sequence, and different quality values such as expectation value , percent identity, and score.

below, we provide a brief description of the steps in our gene structural prediction process. some of these steps are self-explanatory, while others are considered in detail in the following subsections:

step  <dig> align curated mrna sequence with dna target sequence database using blastn  <cit> .

step  <dig> parse the blastn output and select genomic clones that score above  <dig> bits with an expectation value of no more than 1e <dig>  through experimentation we have determined that these values are optimal for recovery of most of the essential hsp sets needed for further analysis. these values can be easily adjusted.

step  <dig> by pairwise comparative analysis of an hsp set for each selected genomic clone, exclude hsps with mrna segments totally within other larger mrna hsp segments. the longest hsp is assumed to contain the true exonic boundaries; shorter subhsps usually result from paralogous and pseudogenic matches.

step  <dig> disambiguate the hsp sequences for all the selected clones, as discussed . the result of this step is a set of unambiguous hsp sequences.

step  <dig> build an interval graph of overlapping unambiguous hsp sequences. the interval graph captures intersection relations of nodes  as we put edges between nodes when nodes belong to different genomic clones, while their mrna composite segments intersect. edges between hsp sequences from the same genomic clone are not allowed.

step  <dig> occasionally, short exons missed by the blastn algorithm or dust low-complexity filtering result in interrupted unambiguous hsp sequences. their fragments reside in different interval graph nodes marked with the same genomic clone and transcript. we merge these nodes to form longer, original, uninterrupted unambiguous hsp sequences. an intuitive interpretation of this step is in figure  <dig> 

step  <dig> compact the interval graph, as discussed . this results in the biggest composite genomic clone containing the maximum number of possible exons.

step  <dig> use splice-enhanced affine gap penalty global alignment to identify possible intron/exon boundaries in the composite genomic clone, as discussed .

step  <dig> extract intron and exon segments from the composite genomic clone and print a report.

algorithm for an unambiguous hsp sequences allocation
it is well-known that genes, or parts of genes, are duplicated during the course of evolution. this can result in ambiguities during the assembly of a complete gene structure from hsp sequences, as illustrated in figure  <dig> 

the problem arises when a segment in an mrna transcript matches multiple segments in a genomic clone. to address this our algorithm for finding an unambiguous hsp sequence  adheres to the following biological principles:

 <dig>  transcripts are always linear. thus, we require the set of hsps to be sequential .

 <dig>  splicing of pre-mrna does not introduce any alternations in the order of exons.

 <dig>  alternative splicing does not affect the order of exons in a gene.

 <dig>  the similarity of homologous fragments of a gene gradually decreases due to sporadic mutations. as a result, hsps from the real gene usually have higher scores than hsps from corresponding pseudogene or paralog, as schematically shown in figure  <dig>  we thus reject unambiguous hsp sequences with average percent identities below a certain threshold; a threshold of 97% produced good results in our experiments with mrnas. threshold value could be easily adjusted, if needed, to find gene structure with distant homologs, such as expressed sequence tags .

 <dig>  pre-mrna splicing results in mature mrna, with exons arranged side by side. in the case of an hsp sequence containing potential exons, we require the entire mrna transcript to be covered with segments continuously, without breaks.

disambiguation of an hsp set is shown in figure  <dig> 

for the purposes of the disambiguating algorithm we build a bipartite graph structure, where segments are nodes and hsps are edges connecting the nodes. a dynamic programming disambiguation procedure with an affine gap penalty  is then used to disambiguate the hsps into a linear sequence. modifying our early system prototype  <cit> , we changed the criteria for solution optimality .

in our experiments, we noticed cases in which hsps from the real gene match have a smaller identity compared to hsps originating from paralogs and pseudogenes. thus, the disambiguation procedure finds the unambiguous hsp sequence covering the longest mrna segment with the minimum number of hsps. for the hsp sequences of equal length with the same number of hsps, we compare the maximum total weight where the weight of an hsp is a tradeoff between its identity and size:

weight = size·m100-x     

here x is the blastn-assigned percent identity for an hsp, size is the hsp length, and m < <dig> is the decay rate to ensure substantial weight loss for identity lower than the threshold value. the value m =  <dig>  produced good results in our experiments. weight function  characterizes the importance of any given hsp in a global solution.

the disambiguation procedure can be represented as a series of transitions between states . state iy is visited when a sequence of genomic segments is interrupted. this subtracts d, and e for every additional genomic segment missed, from the total weight. if a continuously overlapping transcript-side sequence of segments is broken, the total weight is nullified by visiting state ix. weight is gained at state m with a normal transcript-side overlapping sequence of hsps.

for this algorithm we must allocate a score matrix f of dimensionality  <dig> ×  ×  and a matrix c of the same size to record the intermediate hsp sequences in the dynamic programming procedure. for the convenience of indexing we introduce aliases m ← f <dig> and iy ← f <dig>  we ignore matrix ix as being unnecessary. the boolean function connected determines the overlap between segments i and j in the transcript.

to generate the final set of unambiguous hsp sequences for a given blastn result, the hsp sequences are restored from matrix c using the recursive algorithm shown in figure  <dig>  at the end of the disambiguating procedure we disregard hsp sequences of average identity lower than threshold value. as explained below, the resulting set of unambiguous hsp sequences can then be optimally connected using an interval graph.

joining unambiguous hsp sequences
to construct a complete hsp sequence out of several smaller overlapping ones, we build an interval graph. each node in the graph is an unambiguous hsp sequence originating from the disambiguating algorithm discussed . in order for the nodes to be connected by an edge, they must contain overlapping hsp sequences coming from different genomic clones. to join the nodes, a floyd-warshall all-pairs-longest-path algorithm  <cit>  known to run in o time is used . joining nodes provides both a larger hsp sequence and the ability to join two genomic clones at a common point.

if an attempt is made to connect nodes with overlapping hsp sequences from the same genomic clone, the program backs up and searches for other possible optimal unambiguous connections for different clones . this backing-up modification adds at most o for each step in the pairwise algorithm for a dense graph, resulting in an o procedure.

although the produced graphs may have different degrees of density, in our experiments they were not sparse enough to use johnson's modification  <cit> , which runs in o.

to connect the nodes, we solve the following maximization problem:

dk,i,j={combination hsp sequences i and j, if k= <dig> argmaxdk− <dig> i,j,dk− <dig> i,k∪dk− <dig> k,j,size)),if k> <dig> 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgebardawgaawcbagaem4aasmaeiilawiaemyaakmaeiilawiaemoaaogabeaakiabg2da9maaceaabaqbaeaabigaaaqaaiabboeadjabb+gavjabb2gatjabbkgaijabbmgapjabb6gaujabbggahjabbsha0jabbmgapjabb+gavjabb6gaujabbccagiabbieaijabbofatjabbcfaqjabbccagiabbohazjabbwgaljabbghaxjabbwha1jabbwgaljabb6gaujabbogajjabbwgaljabbohazjabbccagiabdmgapjabbccagiabbggahjabb6gaujabbsgakjabbccagiabdqgaqbqaaiabbycasiabbccagiabbmgapjabbagamjabbccagiabdugarjabg2da9iabicdawiabcycasaqaamaawafabewceaqaboqaaiabdseaenaabaaabagaem4aasmaeyoei0iaegymaejaeiilawiaemyaakmaeiilawiaemoaaogabeaacqggsaalaeaacqwgebardawgaaqaaiabdugarjabgkhitiabigdaxiabcycasiabdmgapjabcycasiabdugarbqabagaesokiufabagaemiraq0aasbaaeaacqwgrbwacqghsislcqaixaqmcqggsaalcqwgrbwacqggsaalcqwgqbgaaeqaaaaaleqaneaacqqghbqycqqgybgccqqgnbwzcqqgtbqbcqqghbqycqqg4baeaagcdaqadaqaaiabb2gatjabbggahjabbiha4naabmaabaqbaeqabiqaaaqaaiabbofatjabbmeajjabbqfaajabbweafnaabmaabagaemiraq0aasbaasqaaiabdugarjabgkhitiabigdaxiabcycasiabdmgapjabcycasiabdqgaqbqabaaakiaawicacaglpaaacqggsaalaeaacqqgtbwucqqgjbqscqqgabgwcqqgfbqrdaqadaqaauaabeqaceaaaeaacqwgebardawgaawcbagaem4aasmaeyoei0iaegymaejaeiilawiaemyaakmaeiilawiaem4aasgabeaakiablqiivbqaaiabdseaenaabaaaleaacqwgrbwacqghsislcqaixaqmcqggsaalcqwgrbwacqggsaalcqwgqbgaaeqaaaaaaogaayjkaiaawmcaaaaaaiaawicacaglpaaaaiaawicacaglpaaaaeaacqggsaalcqqgpbqacqqgmbgzcqqggaaicqwgrbwacqgh+agpcqaiwaamcqgguaglaaaacagl7baaaaa@c70a@

splice-enhanced affine gap penalty global alignment
in order to identify precise intron/exon boundaries in a genomic clone, a modified needleman-wunch global alignment algorithm with affine gap penalty is used to create a spliced alignment between segments of query and target sequences.

the basic needleman-wunch algorithm provides a scattered  mrna/dna alignment pattern, with no clear indication of exon/intron boundaries. with affine gap penalties, we penalize the score each time we break an alignment  <cit> ; this provides an alignment clustered within putative exons, but usually without precise indications of exon/intron boundaries. the addition of sensor information  results in precise gene structural prediction.

our implementation is a modification of the affine gap penalty algorithm  <cit>  and can be explained in terms of transitions between states in a hidden markov model   <cit> . specifically, there are thirteen matrices of size n × m introduced, corresponding to states as shown in figure  <dig>  the matrices are reduced to arrays of size  <dig> ×  <dig> × m, since we need only two rows in the scoring matrix f and backtracking matrices  <cit> .

in our algorithm, we introduce the match state m , which uses the blastn scoring matrix. the state iy corresponds to a gap penalty in the mrna transcript, while the other states correspond to forming gaps in the genomic clone and have nucleotide-specific score deductions. gap-opening matrices da and dg express score preferences to open a gap with either nucleotide a or g, respectively; d is a generic gap-opening penalty; and e is a generic gap-extending penalty. typically, the cost of extending a gap is set to be five to ten times lower than the cost for opening a gap. gap-extension penalty matrices ea, ec, eg and et express scoring preference to extend gaps with nucleotides a, c, g and t, respectively.

in order to save running time, we use anchors – short nucleotide segments from mrna and dna expected to contain exon/intron boundary fragments with donor/acceptor signals. a normal anchor does not have mismatches in state m. if a mismatch is encountered, it may mean a short exon is present. if necessary, the anchor can be expanded and the spliced alignment rerun with two full exons and intron between to identify possible short exons or address sequencing errors, as discussed .

according to our model, introducing or extending a gap is straightforward using the gt/ag rule. the penalty becomes severe if we try inserting a gap without the rule; we would rather use higher-extension-penalty state ix for short gaps frequently resulting from sequencing errors. the at/ac rule works in much the same way, except with a higher score penalty.

we implement the affine gap penalty spliced alignment algorithm in a linear memory of size s and running time o, where n is the size of a dna fragment and m is the size of an mrna fragment.

these are the steps in implementing the algorithm:

 <dig>  run the spliced alignment align to find indexes of u and v . here u is the vertical median index, and v is the horizontal index of a point where the optimal traceback intersects the median.

 <dig>  restore the matrix context for the recursive calls and prior-state information for proper backtracking.

 <dig>  make the recursive calls for nucleotide segments align and align, etc.

 <dig>  if either of the nucleotide segments' lengths in a recursive call is less than or equal to  <dig>  call the ordinary spliced alignment for these pieces to get the alignment states.

more detailed explanation of the spliced alignment algorithm we use is in  <cit> .

advantages of using splice-enhanced affine gap penalty global alignment in gene structure prediction
there are several advantages of using splice-enhanced affine gap penalty global alignment, discussed , for gene structure prediction:

• ability to recover canonical and non-canonical splice sites;

• noise-tolerant prediction of splice sites;

• ability to recover short exons;

• ability to handle low complexity regions in genomic dna, if sorted out by dust filtering.

a splice site usually happens on the boundaries of hsps, but in most cases mrna segments of neighboring hsps overlap with no clear indication of a splice site. recovery of a splice site could be formulated as a combinatorial problem of finding optimal exon/intron boundaries in hsps' overlap vicinity. a dynamic programming approach, such as the splice-enhanced affine gap penalty global alignment we use, allows us to consider all possible rearrangements around hsps' overlap to pick optimal splice sites in polynomial time.

the process of splice site recovery is schematically shown in figure  <dig>  segments of mrna and dna sequences used for splice site prediction are called anchors. to accelerate the gene structure prediction process we use small  anchors by default.

the ideal variant of splice site recovery is shown in figure  <dig>  in a small number of cases we have misalignment, as shown schematically in figure  <dig>  misalignment may occur if:

• neighboring hsps overlap too much, so that we can't reliably identify a splice site with small anchors;

• there is a sequencing error adjacent to a splice site;

• short exons are present.

all of these cases require additional application of splice-enhanced affine gap penalty global alignment with anchors expanded to include the entire hsp segments for maximum error tolerance, as shown in figure  <dig> 

as an example of a successful anchor expansion, consider an hsp sequence interrupted by undetected short exon . after combining interrupted unambiguous hsp sequences, as described , the small exons are recovered by processing the expanded anchors with our spliced alignment procedure.

similarly, low-complexity regions may interrupt hsp sequencing in blastn results due to dust filtering. in this case, interrupted unambiguous hsp sequences are combined and the gap will be closed by sequence matching, resulting in a monolithic exon .

RESULTS
experiments with genie learning set
gigogene was tested, along with spidey, est2genome, sim <dig>  galahad and blat on  <dig> mrna transcripts of the human genie multi-exon annotated learning set . we used transcripts corresponding to mrna or cds features in the genie learning set annotation.

sensitivity  and specificity  were calculated according to the formulas

esn=teae     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrcqwgtbwucqwgubgbcqgh9aqpdawcaaqaaiabdsfaujabdweafbqaaiabdgeabjabdweafbaacawljagaaczcamaabmaabagaeg4mamdacagloagaayzkaaaaaa@398c@

esp=tepe     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrcqwgtbwucqwgwbaccqgh9aqpdawcaaqaaiabdsfaujabdweafbqaaiabdcfaqjabdweafbaacawljagaaczcamaabmaabagaeginaqdacagloagaayzkaaaaaa@39b0@

here te is the number of accurately predicted exon boundaries, ae is the number of annotated exon boundaries in the genie learning set, and pe is the number of predicted exon boundaries. only internal exonic boundaries were considered. results are summarized in table  <dig> 

this test is designed as evidence of general prediction quality of different gene structure annotation tools. gigogene has the highest sensitivity and specificity in this case, which highlights advantages of the approach we use.

experiments with micro-exon detection
we followed the sim <dig> prediction compensating procedure described in  <cit>  to identify human genes containing canonical micro-exons . this way we were able to annotate  <dig> genes in the human dna phase  <dig> database. table  <dig> compares performance of different programs for a micro-exonic set of genes.

this study shows that the gigogene program has the highest structural prediction sensitivity and specificity in this case. blat recovered  <dig> % true exonic boundaries in the micro-exonic set, while other programs had fraction of true splice sites recovered no more than 90%, i.e. they most likely miss micro-exon from their prediction.

experiments with non-canonical splice sites
according to  <cit>  approximately  <dig> % of all splice sites are reported to be canonical,  <dig> % are in the biggest group of gc-ag non-canonical splices sites, and the remaining  <dig> % consist of small groups of size no more than  <dig> % each. following the description in  <cit>  we parsed the human splicedb database of est supported, corrected and genbank high throughput genome sequencing projects  supported pairs of non-canonical splice sites. then we aligned the pairs to the human refseq database using blastn to extract transcripts containing verified non-canonical splice sites. found transcripts were blast-aligned to the ncbi human phase  <dig> dna database to match corresponding gene-containing clones. we splice-aligned found transcripts and corresponding genomic clones using gigogene. a manual check on  <dig> gene structural predictions identified no problems on the gigogene side. a comparable performance study for other programs is shown in table  <dig> 

in this study est2genome made a mistake in annotating virtually every non-canonical splice site while reinforcing canonical splice rule. although blat was very sensitive in this experiment, it makes mistakes occasionally.

simulated est experiment
in order to research the est-related performance of different programs we introduced 4% noise in the genie experiment discussed . noise was equiprobably distributed between random nucleotide insertions, deletions and substitutions. results of a simulated est experiment are presented in table  <dig> 

with simulated est study our program performed worse than sim <dig> and est2genome, about as well as galahad, and substantially better than blat and spidey, the programs that were specifically designed for mrna/dna spliced alignment. the reason for substantial quality loss with gigogene is in splice site annotation strategy. if we get a number of nucleotide inserts between exon boundaries in mrna, they can be easily interpreted as micro-exon with non-canonical splice sites, rather than reinforcing the gt-ag rule in a genomic clone as sim <dig> and est2genome do. that is why these two applications have rather poor performance in micro-exonic testing , where they sacrifice micro-exons to reinforce canonical splice rule.

run-time comparison
in table  <dig> we compare running time for different programs required to annotate the set of micro-exon containing genes mentioned .

run time comparison on the set of micro-exons indicates that our program runs faster than est2genome but slower than other tools we have looked at. by using splice-enhanced affine gap penalty global alignment we traded execution time for quality, compare to simpler heuristics used to predict splice sites in other tools.

chromosome  <dig> experiment
for this experiment we chose human chromosome  <dig> whole draft sequence nc_ <dig>  from ncbi genbank. a total of  <dig> transcripts were mapped to the chromosome by parsing human refseq flatfiles, but only  <dig> transcripts have corresponding genes annotated in ncbi genbank.

we report running time for all  <dig> transcripts mapped to chromosome  <dig>  for the gigogene program it took  <dig> hours  <dig> minutes  <dig> seconds to parse blastn results, while blastn took  <dig> days  <dig> hours  <dig> minutes  <dig> seconds to align transcripts to the chromosome . such a long running time could be explained by extensive low-complexity domains duplicated across the chromosome. blastn with low-complexity filtering took only  <dig> hours,  <dig> minutes and  <dig> seconds, but the following gigogene gene structural prediction was inferior to the results reported in table  <dig>  blat annotation took  <dig> hours  <dig> minutes  <dig> seconds .

we report exon-level comparative performance of blat and gigogene in table  <dig> 

results of blat and gigogene comparison on chromosome  <dig> whole draft sequence annotation agree well with the previously observed tendency: with gigogene, gene structural prediction takes longer, compared to blat, and has higher prediction quality.

CONCLUSIONS
using a homology-based approach, we have designed a program for eukaryotic gene structural annotation. in case of mrna/dna spliced alignment we have been able to improve on exon-level sensitivity and specificity by addressing several possibilities of error. program domain is limited to mrna/dna spliced alignment with a reasonable fraction of sequencing errors. experiments on running time position our tool as a relatively slow utility for annotating specific cases of gene structural prediction.

several published spliced alignment algorithms were mentioned . our splice-enhanced affine gap penalty global alignment in some ways similar to the spliced alignment of protein/dna blocks described in the procrustes paper  <cit> . the key differences in our implementation is that it works in linear memory and is effective in annotation of both canonical and non-canonical splice sites. compared to protein-dna alignment, it has finer granularity, which translates to smaller possibility for incorrect structural prediction, especially for micro-exons. we can also annotate both cds and utr regions, while protein-dna homology programs, such as procrustes  <cit>  and genomescan  <cit> , are limited to cds region only.

the stand-alone program version, web implementation interface, test results and manual for gigogene are available at .

availability and requirements
project name: good in good out gene structural prediction tool 

project home page: .

operating system: platform independent

programming language: java

other requirements: java  <dig> . <dig> or higher

license: gnu lesser general public licence

authors' contributions
ac and dq conceptualized the project and set up computational facility. dq implemented blastn sax parser and made many valuable suggestions through the progress of our study. ac implemented and evaluated gigogene java code. mp extensively edited the manuscript and made many important changes. ha helped to conceptualize the tool, provided general support and gave final approval of the version to be published. all authors read and approved the final manuscript.

