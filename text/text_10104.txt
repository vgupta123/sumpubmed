BACKGROUND
the massively parallel research technique called microarray was developed  to take advantage of the unprecedented amount of information available about an organism's genetic makeup. microarray enables researchers to measure the relative amounts of every mrna transcript from the genome in a single scan, thus increasing the number of data points from an experiment by several thousand folds. biological researchers, who have been used to studying a small number of genes thoroughly over a period of years, must now use new concepts and methods to store and analyze their experimental results. because of variations in microarray technology and the immaturity of the field, the computation of gene expression level and usage of semantics varies between platforms. minimum information about a microarray experiment   <cit>  was proposed in  <dig> as a uniform standard for recording and reporting microarray gene expression data. miame has been widely adopted because it eases the interpretation of expression data and the independent verification of experimental results. an xml-based data format, microarray-based gene expression – markup language , was developed to facilitate the exchange of miame data  <cit> . the mage-ml is the xml representation of mage-om, which is an object model. the mage-om contains  <dig> classes grouped into  <dig> packages. for example, experiment is a package of mage-om to describe the experiment goals and design; bioassaydata package stores gene-expression data; biomaterial package describes biological materials used and description of their creation; and designelement package contains a mapping of features.

biologists have been accustomed to reading their experimental data directly from tables. however, microarray data are quite large and are stored in a series of files in a machine-readable format, so direct reading of the full data set is not feasible. even though a large amount of gene expression data can be integrated into tables, it is still difficult to browse. incoming integrated bioinformatics systems will support simultaneous query on both knowledge databases and microarray data simultaneously. for example, flymine for drosophila melanogaster is a data warehouse that integrates several genomic and proteomic data sets in one place and its website allows users to build arbitrary complex queries across all data  <cit> . but even when they have sophisticated tools like flymine, biologists will still want to preview the raw gene expression data in order to construct appropriate queries in the integrated database system. for example, a biologist is looking for the same gene expression profile from a microarray experiment. if the biologist can browse the raw data in the microarray, such as "ratio of means " values, he or she can have a preliminary idea of the experimental data, such as the range of values. the biologist can efficiently use other computer systems to construct queries or confirm the accuracy of the query results.

the challenge is to design a user interface that allows biologists to usefully view large tables of raw microarray-based gene expression data. this paper presents one such interface – an electronic table  that uses fisheye distortion technology. fisheye views have been widely used to deliver large amounts of data in limited screen space. their use is motivated by the observation that, at any one time, users are only focusing on a small part of the data. fisheye views use variable magnification: the data on which the user is focusing is large, neighboring data is smaller, and distant data is very small. the fisheye technique was initially called "bifocal displays"  <cit> . as this "degree-of-interest" approach developed, it came to be called "fisheye views"  <cit>  by analogy with the optical effect seen in photographs taken using fisheye lenses that have very short focal lengths. table lens  <cit>  is a "focus+context" based fisheye technology that works on tabular information to display of crucial label information and multiple distal focal areas. graphical information is also integrated in the display of large tables using visualization technology  <cit> . visualization help improve the presentation of tabular data because humans are good at spot patterns and features in well-designed graphical rendering of collection of values. in fact, the combination of fisheye and visual graphical technologies can reduce navigation time when viewing a large tabular data collection <cit> . in this project, an e-table for mage data was successfully implemented as a java application.

implementation
the fisheye viewer was implemented in java so that it could run on multiple platforms. it uses the mage-ml software toolkit   <cit>  to read mage-ml  <cit>  files. the mage-ml stk is itself based on the xerces xml parser  <cit> . the majority of the viewer's interfaces were built using netbeans mantissa  <cit> . rather than reinventing the wheel, we implemented the e-table by adapting jtable, a default table implementation in the java swing user interface library. this extended table class is called fisheyetable and contains methods to provide focus. the variation of row height and font sizes is handled by the fisheyetablecellrenderer class, which extends the defaulttablecellrenderer class of the java swing library.

fisheye views use variable magnification to balance magnification for easy viewing and compression for maximizing the amount of data on the screen. in our fisheye viewer, the user can click on any row to bring the focus to that row. the focus row is shown larger than all other rows and its text is larger and in bold face. the height and font size of other rows is determined by their distance from the focus row, with row height and font size becoming progressively smaller as the distance from the focus row grows. the height of the focus row is determined when the focus method of the fisheyetable class is called by a selection listener. once the row height is determined, the cells of the row are rendered using a corresponding font size by the fisheyetablecellrenderer class. the heights and text fonts of the neighboring rows are controlled by a listlistener that observes changes in the user's selection. a separate listener is required for the neighboring rows because of the protocol used by the classes of the jtable package in swing. finally, because the tables are too large to show in their entirety on a single screen, a scroll pane allows the user to scroll the table up or down to see the hidden rows.

for gene expression data tables, it is useful to have both column and row headings, but jtable and the default table model only support column headings. in a non-fisheye table, a list could be used as the row header. however, list item heights are fixed, so there would be no way to vary the heights of the rows based on the focus. so instead, we used a second e-table just for the row headers. then, we extended the listlistener class to be able can notify multiple tables and attached it to the fisheyetable object. so, when a row is focused in the data table, the row header is also notified which to set its focus on the corresponding row header.

RESULTS
the fisheye viewer for microarray-based gene expression data has been successfully developed to view miame data stored in the mage-ml format. the viewer can be downloaded from the project web site  <cit> . miame has six major components as follows.  experimental design: the set of hybridization experiments as a whole;  array design: each array used and each element  on the array;  samples: samples used, extract preparation and labeling;  hybridizations: procedures and parameters;  measurements: images, quantification and specifications; and  normalization controls: types, values, and specifications. the viewer can read mage-ml files and map the structure of the document to a tree structure for navigation. the fisheye viewer was tested on microarray experiment data in mage-ml format. the viewer allows users to view each component of the microarray data .

the e-table in the application allows the users to navigate through gene expression data values. the tool allows users to view the gene table with the row representing parameters and the columns representing genes, so users can compare a parameter across all the genes. if the user clicks the row for "median ratio", the viewer brings the focus to that row . the user can clearly view median ratio values and see the range of values for this parameter. if users identify a gene of interest, such as one with the largest ratio value, the user can use the application to view the gene with whatever mage-om designelement is actually being displayed  . the viewer also allows the user to see other miame data components, such as protocols and contacts . the user can use the tree on the left panel to select an element of interest.

a pilot user study was conducted to assess the user usability of this software. we used the questionnaire for user interface satisfaction   <cit>  as the evaluation instrument and recruited five volunteers to participate the study. the participants were three faculty members, one post-doctoral fellow and one graduate student from three laboratories in the biological sciences department at uwm. after participants used this tool at their offices, they completed the quis questionnaire. the users' evaluation are summarized and presented in a table .

user feedback was quite positive, with a mean overall reaction score of  <dig>  . the quis scale with the highest score was the system information scale , which includes 1) use of terms throughout system, 2) terminology related to task, 3) prompts for input, 4) computer informs about its progress, and 5) error messages. user  <dig> and user  <dig> gave all nines, the highest scores to each item, while users  <dig> and  <dig> gave many scores of  <dig>  user  <dig>  however, gave only  <dig>  on average to the software and he also questioned the usefulness of the software. in particular, he indicated that he did not think this software organized information well on the screen  and did not designed for all levels of users . user 4's overall reaction score was only  <dig> . the inconsistency of the user responses in the pilot study indicated that further improvements to the software will be needed for it to gain wide acceptance. however, the enthusiastic response of some users indicates that the system shows real promise.

discussion
the design of the e-table is generic for large tabular data, so it could also be integrated into other biological data warehouses to preview the data before constructing complex queries or to confirm the results after the queries.

the sizes of mage-ml files vary greatly: some are only several megabytes while other can require hundreds of megabytes. if the user attempts to view a large mage-ml file will cause an out of memory error. this is the nature of mage-ml documents: they are simply huge. we have tested the application on a desktop pc with  <dig> mb of ram running windows xp and linux, and on a tablet pc with  <dig> mb of ram running windows xp tablet pc edition. the sample mage-ml files used were around  <dig> –  <dig> mb in size.

CONCLUSIONS
a new mage data viewer using fisheye distortion technique was successfully developed. the viewer can be used to view most types of data elements in the mage-ml format. this fisheye viewer is a lightweight but useful tool for biologists to quickly overview the raw microarray-based gene expression data in an e-table. the software package is made freely available for the scientific community via the project web site  <cit> .

availability and requirements
project name: fisheye viewer for microarray-based gene expression

project home page: 

operating system: platform independent

programming language: java

other requirements: java jre  <dig> ,  <dig> mb of ram or more

license: n/a

any restrictions to use by non-academics: n/a

authors' contributions
mw identified the need for improving viewing interfaces for microarray-based biological data and guided the user interface design process. ct implemented the fisheye viewer application and its e-table component. xm designed and supervised the implementation of the fisheye algorithm. evm revised the paper. all authors read and approved the final manuscript.

