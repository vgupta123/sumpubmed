BACKGROUND
protein phosphorylation is an essential post-translational modification event for the regulation and maintenance of most biological processes. recent advances in high-throughput methods such as tandem mass spectrometry enable rapid and direct discovery of hundreds of phosphorylation sites in a single experiment  <cit> . the availability of large amounts of phosphorylation sites makes it possible to perform phosphorylation motif finding using data mining techniques.

according to  <cit>  and  <cit> , phosphorylation motif discovery is defined as finding a set of motifs that appear more often in the set of phosphorylated peptides p than in the set of unphosphorylated peptides n. that means each phosphorylation motif is “over-expressed” in p. here all peptides have the fixed length l and they are aligned on the phosphorylated residue. we often call p the foreground set and n the background set.

the discovery of phosphorylation motifs is computationally challenging. suppose a motif resides in the peptides of length l. this motif is a consensus sequence  that consists of conserved positions and wild-card positions that can match any residue. the number of all possible phosphorylation motifs is then  <dig> –  <dig>  though the length l is usually fixed to be a small value  in previous studies  <cit> , it is still infeasible to perform exhaustive search to check all potential phosphorylation motifs. besides, it is also unclear which metric is more suitable to measure the statistical significance of the motif.

to efficiently find phosphorylation motifs, two heuristic methods have been proposed. the motif-x method  <cit>  is a greedy algorithm that reports motifs in an iterative manner. in each round, one most statistically significant motif is detected. the peptides matching the motif identified in the first round are removed prior to the second round of searching. this procedure repeats a number of rounds until no significant motifs can be found. the modl method  <cit>  is an optimization-based algorithm, which formulates the motif-finding problem as the minimization of description length. in other words, modl tries to optimize the expressiveness of a set of motifs rather than quantifying the significance of a single motif. however, both motif-x and modl can only find a small subset of phosphorylation motifs. they cannot guarantee to find all statistically significant motifs so that some important phosphorylation patterns remain unknown to biologists. furthermore, motif-x is limited to discover non-overlap motifs while modl unusually reports at most three motifs.

in this paper, we present a new algorithm called motif-all for the discovery of all statistically significant phosphorylation motifs. motif-all uses the odds ratio to quantify the over-expressiveness of each motif in the set of phosphorylated peptides against the background set. to avoid exhaustive search, we impose a support constraint for each motif on the set of phosphorylated peptides. the use of support constraint enables us to borrow ideas from association rule mining  <cit>  to generate and prune candidates in a level-wise manner before calculating the odds ratio.

to demonstrate the superiority of motif-all method, we conduct experimental studies using the phosphat database  <dig>  of arabidopsis phosphorylation sites  <cit> . motif-all performs better than motif-x and modl in finding more significant phosphorylation motifs. furthermore, it is very fast and is able to finish the mining of large data sets within a reasonable time period.

the rest of the paper is organized as follows: section  <dig> presents the motif-all algorithm. section  <dig> shows the experimental results. section  <dig> gives some discussions and section  <dig> concludes the paper.

methods
there are two critical issues in phosphorylation motif finding. the first is how to measure the over-expressiveness of each motif. the second is how to perform the search in an efficient manner. in the proposed motif-all method, we use odds ratio to evaluate if one candidate motif is over-expressed. to search efficiently, we use the following strategies to improve the running efficiency of motif-all.

• we impose a support constraint on each candidate motif. here the support for a motif is defined as the percentage of phosphorylated peptides that match this motif. the notation of support is widely used in association rule mining  <cit> . one motif is said to be frequent if its support is no less than a given threshold. the aim of introducing support constraint is two-fold: on the one hand, it can filter out non-frequent motifs that may correspond to random artifacts; on the other hand, it makes it possible to generate and prune motifs in a level-wise manner so as to avoid brute-force search.

• we divide the mining process into two stages. in the first stage, we perform frequent motif finding using only the data set p since the number of phosphorylated peptides is much smaller than that of unphosphorylated ones. in the second stage, we collect support information using the data set n to calculate the statistical significance of those candidate motifs from the first stage. we will report all phosphorylation motifs whose p-values are no larger than a user-specified significance threshold.

odds ratio and statistical significance score
the odds of an event is the probability that this event occurs divided by the probability that it does not occur. the odds ratio is defined as the ratio of the odds of an event in one group to the odds in the complementary group  <cit> .

in the context of phosphorylation motif discovery, the first group corresponds to the set of phosphorylated peptides p and the second group is the set of unphosphorylated peptides n. for a given motif m, we can construct a contingency table as shown in table  <dig>  in this table, c <dig>  c <dig>  c <dig> and c <dig> are non-negative “cell counts” and  denotes that the motif m doesn’t exist. then, the calculation of odds ratio reduces to:   

                              

                              p
an odds ratio of  <dig> means that the target motif is equally likely to exist in both p and n. an odds ratio greater than  <dig> indicates that this motif is more likely to appear in the set p.

to conduct statistical inference, one approach is to use large sample approximations to the sampling distribution of the log odds ratio. more precisely, the sample log odds ratio is:   

and the standard error for the log odds ratio is approximately:   

then, the z-value

z = lor/se, 

follows a standard normal distribution.

finally, we can calculate the p-value to assess the statistical significance of each motif.

frequent motif mining
given a set of phosphorylated peptides p and a user-specified support threshold s, the objective of frequent motif finding is to discover all motifs whose supports are no less than s. the support for a motif is the percentage of phosphorylated peptides in p that match this motif. in other words, a motif m is frequent if and only if its cell count c <dig> in table  <dig> satisfies c <dig> ≥ |p|s with | • | denoting the size of a set. note that a similar occurrence constraint is utilized in the motif-x algorithm  <cit> , which represents the minimal number of phosphorylated peptides needed to match the residue/position pair in its greedy search procedure. there are two fundamental differences between our support constraint and their occurrence constraint:

• the support constraint is applied to the entire motif rather a single residue/postion pair.

• the support constraint can be used to prune the search space besides preventing the generation of random artifacts.

one may argue that such a support constraint will result in the loss of some less frequent motifs that are statistically significant. we will explain its rationale from two perspectives: first, since the motif describes the phosphorylation pattern, it should be applicable to many substrates; otherwise, such pattern might be random artifact due to the limited number of known phosphorylation peptides. second, we can use very small support threshold in the mining process to avoid missing infrequent motifs. in the extreme case, setting s = 1/|p| will guarantee the completeness. certainly, this may result in the report of many meaningless motifs. from this viewpoint, we can regard the support threshold as a parameter for controlling the trade-off between completeness and false positive.

more importantly, the use of support constraint enables us to exploit a level-wise pruning strategy so as to reduce the search space. this idea has been widely used since the introduction of apriori algorithm for association rule mining  <cit> . the application of this strategy to frequent motif finding is rather straightforward. for the sake of completeness, we will describe the mining procedure briefly.

in this paper, we focus on the discovery of pattern-based phosphorylation motifs, e.g., consensus sequences that consist of either conserved positions or wild positions  that can match any animo acids. each motif has a single phosphorylated residue, which is denoted with a underlined character .

we define the size of a motif as the number of conserved positions in that motif. we also call a motif of size k a k-motif. we define that one k-motif is the generalization of another motif if they have the same conserved residues at k positions. for instance, “d…s..p” and “d.y.s..p” are 2-motif and 3-motif, respectively. and the first motif is a generalization of the second one.

furthermore, we use fk to denote the set of all frequent k-motifs and zk to denote the set of all potential frequent k-motifs.

to find all frequent motifs, we utilize the level-wise search strategy rooted from the apriori algorithm  <cit> . more precisely, the search procedure has multiple iterations to obtain the set of all frequent motifs. in the first iteration, we scan p to count the the number of phosphorylated peptides that match each possible 1-motif. in the subsequent kth iterations, we perform the following two operations:

 <dig>  only the frequent motifs from fk– <dig> are used to generate zk since a k-motif will not be frequent if one of its  generalizations is infrequent. therefore, the search space for k-motifs is reduced. an example search tree is given in fig. <dig> 

 <dig>  the set p is scanned to count the support of candidates in zk. less frequent motifs are deleted from zk to generate fk.

we stop the search when fk is empty and return f = ∪fk as the final result.

motif-all algorithm
the motif-all algorithm takes the support threshold s and the significance threshold θ as input to find phosphorylation motifs from two sets: a set of phosphorylated peptides p and a set of unphosphorylated peptides n. as shown in fig. <dig>  it consists of the following steps:

 <dig>  finding the set of all frequent motifs f from p using the level-wise search method introduced in the previous subsection.

 <dig>  scanning the set n to calculate the log odds ratio for each motif m ∈ f. those motifs whose p-values are no greater than θ are returned to the user.

note that the statistical evaluation of motifs can be done in various ways. thus, we can also use other measures in motif-all by simply replacing the log odds ratio with the new significance measure in step  <dig>  the choice of significance evaluation measure will not change the completeness property of our algorithm.

RESULTS
data
to test the performance of motif-all, we use the phosphat database  <dig>  of arabidopsis phosphorylation sites  <cit>  to construct the set of phosphorylated peptides p. note that we only utilize unambiguous site identifications in the construction process. the length of each extracted peptide is  <dig> with a measured phosphorylated residue in the 11th position. to generate the background data set n, we first extract all 21-mers with a phosphorylated residue in the center position from the tair <dig> protein database. then, we remove all peptides already in p. the remaining peptides form the background data.

one may worry that such background data generation procedure will disable the extraction of meaningful motifs since n contains many peptides that can be phosphorylated but are not identified so far. we like to point out that these potential phosphorylated peptides are overwhelmed by those truly non-phosphorylated peptides in n. thus, this data generation does not change the characteristics of the background set n. overall, we generate three groups of data for serine , threonline  and tyrosine , respectively. their characteristics are the following:

• phats: it contains  <dig> foreground sequences and  <dig> background sequences.

• phatt: it contains  <dig> foreground sequences and  <dig> background sequences.

• phaty: it contains  <dig> foreground sequences and  <dig> background sequences.

performance comparison
in the experiments, we compare our motif-all algorithm against the motif-x algorithm  <cit>  and the modl algorithm  <cit> . note that we didn’t include other motif finding algorithms such as teiresias  <cit>  in the comparison. this is because these algorithms are not designed for phosphorylation motif discovery and it has been shown that modl  <cit>  is superior to these methods.

the results of motif-all, motif-x and modl are listed in fig. <dig>  some important observations are summarized as follows.

firstly, our algorithm is able to find more statistically significant phosphorylation motifs than existing algorithms. this is because our method has a theoretical guarantee on the completeness of results under a given parameter setting. in particular, almost all reported motifs of motif-x and modl are included in the motif set of motif-all. there are two exceptions: one is the motif “td” detected by motif-x and another is the motif “k . . t” found by modl. after checking these two motifs carefully, we found that the p-value of “td” is  <dig>  × 10– <dig> and the p-value of “k . . t” is  <dig>  × 10– <dig> according to our significance test. obviously, both motifs are not statistically significant according to the p-value threshold of 10– <dig>  secondly, the increase of support threshold for motif-all will generate motif set that is very similar to that of motif-x and modl. this is clearly visible in phatt and phaty. to further check if this is true, we also perform motif finding on phats at the support threshold of 15%. we obtain three motifs under this setting: “r . . s”, “s . s” and “sp”. this result set is almost identical to that of motif-x and modl listed in fig. <dig>  this means that motif-all not only can find more useful motifs but also is capable of serving as a substitute of existing algorithms in a flexible manner.

finally, we can generate more motifs using motif-x by lowering the occurrence threshold. for instance, if the occurrence threshold is set to  <dig> on phats, motif-x will return  <dig> motifs. to test whether motif-all can still find these motifs, we use an approximately equivalent setting of s = 1% to conduct the experiment. totally, motif-all detects  <dig> significant motifs that include all  <dig> motifs reported by motif-x. the detailed results are available at http://bioinformatics.ust.hk/motifall.rar.

effect of support constraint
to test the effect of support threshold, we vary this parameter from  <dig>  to  <dig>  and plot the corresponding numbers of discovered motifs and the running time in fig. <dig> and fig. <dig>  respectively. clearly, the number of identified motifs will decrease when the support threshold increases. moreover, the use of a smaller support threshold may generate too many motifs. therefore, it is plausible to give priority to larger support thresholds in parameter assignment.

the running efficiency test in fig. <dig> shows that the increase of support threshold will lead to the decrease of running time as well. more importantly, motif-all can finish the motif finding procedure within  <dig> seconds, which is faster than motif-x and modl. this means motif-all is capable of discovering motifs from large data sets very efficiently.

discussion
the discovery of phosphorylation motifs is a computationally challenging problem. this paper tries to resolve it through the introduction of motif-all algorithm. here we discuss several related problems that may need to be further investigated.

• problem formulation: one critical question is how to formulate the computational problem for phosphorylation motif discovery. currently, it is casted either as a search problem or as an optimization problem. motif-x falls into the first category while modl belongs to the second category. in this paper, we opt for the first category since such formulation guarantees that each identified motif is statistically significant. however, it may report too many motifs than necessary as the statistical significance may not necessarily agrees with the biological interpretation. in this regard, optimization-based formulation has the merit of generating a concise motif set. therefore, a better problem formulation incorporating the biological knowledge of phosphorylation is still needed.

• motif evaluation: in motif-all, we use two measures for motif assessment: statistical significance and support. though our initial motivation of introducing the support constraint was to reduce the search space, we later found that it is also of practical importance in motif evaluation. without the help of support constraint, it is almost impossible to obtain a concise motif set using only the significance test. from this perspective, we strongly recommend the adoption of support as one standard measure for phosphorylation motif evaluation in future studies.

furthermore, we also need to develop new evaluation measures since the combination of significance threshold and support is still insufficient for separating true phosphorylation motifs from false ones in some cases. the general question of developing an effective evaluation measure is open and needs more investigations.

• motif utilization: experimental methods to identify phosphorylation sites are time consuming, labor intensive and expensive  <cit> . the identified motifs can be used to predict potential phosphorylation sites before biological validation. for instance, the recent released scan-x method  <cit>  is one such representative, which is built on motif-x. the capability of finding more significant motifs using motif-all makes it possible to build more accurate classifiers for better prediction.

CONCLUSIONS
we introduced the motif-all algorithm for finding phosphorylation motifs. motif-all can identify all statistically significant motifs under a given parameter setting. meanwhile, it is very fast such that it is able to find hundreds of meaningful motifs from millions of peptide sequences within one minute on a personal computer. our experimental results show that it outperforms existing phosphorylation motif discovery algorithms.

we have shown that motif-all is able to find more phosphorylation motifs than existing algorithms. however, it is very expensive and difficult to perform biological validation. to measure the correctness of the identified motifs that are not reported by other algorithms, one alternative strategy is to perform permutation test so as to control the false positive rate. unfortunately, the permutation test is a very time-consuming procedure since it needs to execute motif-all many times. to address this issue, our future work will focus on the design and implementation of fast algorithms that support large permutation test.

competing interests
the authors declare that they have no competing interests.

authors' contributions
zh,cy and gg performed the implementations and drafted the manuscript. nl and wy conceived the study and finalized the manuscript. all authors read and approved the final manuscript.

