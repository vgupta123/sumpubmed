BACKGROUND
building a multiple sequence alignment  is a critical step towards understanding the function and evolution of a protein family. subsequent analysis typically includes phylogenetics, homology modeling, structure prediction, and binding site prediction. there are several excellent software packages that align multiple sequences  <cit> . alignment accuracy is usually dependent on the percent amino acid identity between sequences  <cit>  and manual editing is often a necessary step. alignment editing tools are available in pfaat as well as several other applications  <cit> . additionally, msa viewers provide various tools for sequence and structural analysis  <cit> . more recently, it has been recognized that msas can be used to validate and propagate annotations to other sequences  <cit> . pfaat specializes in the annotation and analysis of a msa, and since the release of version  <dig>   <cit> , we have continued to develop and add novel features to pfaat. we describe some of the main features below.

implementation
pfaat is written in java and runs on several operating systems . users initially download and install the program from the home page using java web start technology. updated versions of the application are automatically downloaded on subsequent launches if the user is connected to the internet; otherwise the cached executable is used. although pfaat was not explicitly implemented for viewing nucleotide alignments, many of the generic features can also be applied to nucleotide sequences.

RESULTS
the alignment viewer is shown in figure  <dig>  the alignment can be edited in a number of ways. a gap can be inserted with the space bar or by dragging residues to the right while holding the shift key down. a gap can be deleted with the backspace button or by dragging residues to the left while holding the shift key down. selecting multiple sequence names with the ctrl or shift key allows one to edit a collection of sequences simultaneously. one can easily delete alignment columns that are composed entirely of gaps .

double clicking on any of the three name panels will display the sequence annotations dialog box. double clicking on a residue will display the residue annotation dialog box. the tree viewer and structural viewer can be launched from the analysis and file menus respectively. the tool bar  contains several drop-down menus that change the alignment view. the top row of drop-down menus changes the displayed annotation in name panels 1– <dig>  the bottom row of drop-down menus sort sequences by annotation value and changes the font size.

sequence annotations
a sequence annotation provides a convenient way to assign a name and a value to one or more sequences in the alignment. figure  <dig> shows all sequence annotations for a sequence after double clicking on name panel  <dig>  the currently displayed annotation is indicated by the radio button and the text field allows editing of the annotation values. sequence annotations include but are not limited to synonyms, species, and cluster ids. the easiest way to create a new annotation name and value is to click on the add button. we recommend adding a uniprot entry name, as it can be used later to automatically extract sequence annotations from uniprot  <cit> . pfaat mines several uniprot fields which include synonyms, species names, pdb codes  <cit> , and hyper-linked ensembl  <cit>  ids. the user documentation on the pfaat home page describes other ways to create sequence annotations easily.

when working with a large number of sequences, sequence annotations facilitate rapid sorting and triaging of sequences. for example, the find menu allows one to find and select sequences that match one or more search terms . the selected sequences can then be moved to the top using view -> sort sequences by -> selection.

residue annotations
residue annotations are a useful way to flag residues of interest. they are typically used to specify binding sites, snps and post-translational modifications. figure  <dig> shows the residue annotation dialog box that appears after one double clicks on a residue. the first tab displays various numbering for the residue and allows users to assign their own numbering. this field is particularly useful when the user omits domains or segments of sequence that will offset the default numbering. the second tab allows the user to specify how a residue annotation will appear. each residue annotation must have a color and a symbol that is displayed above the alignment. there is also a check box that allows the user to show or hide the residue annotation. the third tab is where all annotation names and values are specified. after clicking on the save button, the annotation will appear as a residue with a colored oval. the annotations can be viewed by mousing over the residue or double clicking the residue again.

residue annotations provide a gateway for several types of subsequent analysis. for example, the find menu allows one to quickly find and select residue annotations that match one or more search terms. the residue selection can be extended to the alignment column, and there is an option to hide all other columns. as a next step, one might apply one of the many features that can be applied to selected columns, including sorting by percent identity and most of the features in the analysis menu.

phylogenetic analysis
pfaat reconstructs phylogenetic trees using an implementation of the neighbor joining algorithm  <cit> . an option to perform bootstrap analysis is also provided. trees can be reconstructed using selected sequences or selected columns. pfaat recognizes various tree formats  and can display tree files generated by other software.

the tree viewer  borrows much of its code from atv  <cit> . we have since added a number of new features that are tightly linked to the alignment viewer. sequence annotations can be accessed by double clicking on the terminal nodes. the tree viewer has the same advanced searching capabilities as the alignment viewer. sequence selection is synchronized between the tree viewer and the alignment viewer, allowing the user to quickly triage sequences based on evolutionary relationships. another popular feature is the assignment of the cluster ids in the tree viewer. cluster ids can be assigned based on gene duplication events or by dragging a vertical bar from left to right so it cuts the tree into clusters of a desired average size. as the cluster id is a sequence annotation, it can also be used to sort sequences in the alignment viewer or to compute conservation scores for particular clusters.

structural analysis
pfaat uses jmol  <cit>  to display three-dimensional protein structures. a sequence needs to be associated with pdb file to ensure that the sequence numbering is consistent with the pdb numbering. the pdb sequence is automatically aligned to the pfaat sequence and the user has the option of fixing any alignment errors. once the alignment is approved, the pdb numbering is applied to the aligned residues. secondary structure elements are drawn below the sequence and jmol is launched. by default, residue selection is synchronized between the alignment viewer and jmol. this is particularly useful when binding site residues need to be mapped from structure to sequence or vice versa. once the structure is associated, one can compute residue solvent accessibilities   <cit>  which are stored as residue annotations. this feature is useful, if one wants to focus analysis on exposed residues. for example, conservation scores can be computed for a cluster of sequences and mapped to surface residues on the structure  in a similar fashion to the evolutionary trace method  <cit> . a standard color spectrum is applied to the structure, where red is for invariant columns and violet is for the most variable columns.

sequence analysis
there are number of sequence analysis tools that are primarily found under the analysis menu. for example, amino acid percent identities can be computed between all sequences or a subset of their columns. there is also an identity count, which reports the number of sequences that have a residue that is identical to a particular sequence at each column. there are a variety of conservation scores, the default being a von neumann entropy based score  that can be applied to selected sequences as well as selected columns. the conservation scores can be mapped to a 3d structure as discussed above. the plsr method allows one to identify sequence trends that best correlate with numerical experimental measurements . immediately above each alignment column is a gray box. a single click on a box will show the number and type of residues that are found at a column. in sort mode, the user can select a residue type that will determine how the sequences are sorted. for example, one might be interested in moving all sequences that have a lysine or arginine at column  <dig> to the top. in filter mode, all sequences that do not have a lysine or arginine would be hidden. the sort mode is often used for mutagenesis experiments as it provides a nice summary of residues that are tolerated at a given position. the filter mode can be used when designing selective drugs for a large gene family. several other features are described in the documentation on the pfaat home page.

von neumann entropy
although shannon entropy is a popular measure of residue conservation, it incorrectly treats amino acids as being orthogonal. von neumann entropy overcomes this shortcoming and is the default measure of residue conservation in pfaat. shannon entropy is described in equation  <dig>  where i enumerates each mutually exclusive entity, λi > =  <dig> and Σλi =  <dig>  the λi are a measure of the probability of encountering the entity i in the collection.

 entropy = -Σλi log 

as the  <dig> amino acids are non-orthogonal  vectors, the set must be expressed in terms of an equivalent orthogonal basis set. the mutual overlap of the distinct amino acid vectors in each column is described by a matrix ρ encoding the pairwise similarities between these non-orthogonal vectors. we have found that the following simple  <dig> ×  <dig> matrix, also called the density matrix, works well for amino acid conservation:

 ρ = fs 

where f is a diagonal matrix of amino acid 'counts' or frequencies and s is an appropriate amino acid similarity matrix .

now ρ can be naturally expressed in terms of an orthogonal basis through diagonalization, i.e. by calculating its eigenvectors e and eigenvalues Λ = diag   <cit> :

 ρ = e Λ e^ 

the eigenvectors can be interpreted as  <dig> orthonormal amino acid properties spanning 'amino acid space'. if ρ is normalized such that trace  =  <dig> , the eigenvalues λi can be interpreted as the probabilities of encountering each of these  <dig> orthogonal eigenvector properties in the column. inserting the eigenvalues λi into the formula  now gives the entropy measure we desire. the entropy measure can in fact be written directly in terms of ρ itself

 von neumann entropy = - trace  

as can be seen by inserting  into  to recover . equation  is computationally more efficient than equation  and is implemented in pfaat.

CONCLUSIONS
a msa provides valuable information about a protein family. additional knowledge is provided by the user in the form of annotations. by combining these annotations with sophisticated analysis, pfaat allows researchers to test hypothesis that relate to sequence, structure and function. this release of pfaat marks a significant improvement in functionality over version  <dig> . the major improvements are described in the what's new? section of the user documentation. we eagerly anticipate user feedback and a 'request features' link is provided on the project home page. future areas of development might include the extraction of sequence annotations from additional databases  and employing mechanisms to propagate annotations to other sequences  <cit> .

availability and requirements
project name: pfaat

project home page: 

documentation: 

operating systems: platform independent

programming language: java  <dig> . <dig> or higher

license: gnu general public license

any restrictions to use by non-academics: none

abbreviations
pfaat – protein family alignment annotation tool

msa – multiple sequence alignment

plsr – partial least squares regression

competing interests
the author declares that there are no competing interests.

authors' contributions
drc wrote java code, implemented algorithms, specified and prioritized features, wrote user documentation, and contributed to the writing of the manuscript. vm wrote java code and re-architected the package. phd wrote java code and re-architected the package. mo wrote java code. ss specified algorithms for implementation and contributed to the writing of the manuscript. yw wrote java code. ejh wrote java code and implemented algorithms. sp wrote java code and implemented algorithms. bec wrote java code and implemented algorithms. esh contributed to the writing of the manuscript. all authors read and approved the final manuscript.

