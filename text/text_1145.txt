BACKGROUND
cancer is fundamentally the result of a wide range of genomic alterations. abnormal chromosome rearrangement is one of its key features and highly involved in hematopoietic diseases. the chromosome breakage and rejoining result in gene fusions, which hybridize the previously separated genes. an increasing number of gene fusions are being considered as important parameters in the diagnosis and prognosis of malignant hematological disorders  <cit> . a well-known prototype example is the bcr-abl <dig> fusion gene, which has been confirmed as a key pathogenic factor for chronic myeloid leukemia  <cit> . recent studies suggest that causal gene fusions may also exist in epithelial-origin carcinomas, and specify the tmprss2-erg gene fusion in prostate cancers  <cit> , and bcas4-bcas <dig> gene fusion in breast cancers  <cit>  as examples. analysis of these gene fusions from a perspective of genome sequence and structure could provide relevant data that could guide development of improved cancer diagnostics and targeted therapies.

advances in next-generation sequencing  technology have imparted a new approach to systematically identify genomic alterations. the sequencing instruments provide a set of deep coverage and base level sequence data, giving a new picture of genes expressed in a cell. application of one of the ngs approaches, whole transcriptome sequencing  technology, allows for the study of functional fusion genes, and gene structures and expressions. compared to whole-genome sequencing, rna-seq focuses on expressed gene fusions, which are very important in cancer development  <cit> . rna-seq technology has been shown to be a powerful tool for gene fusion detection.

recent gene fusion studies have developed several tools for gene fusion detection. fusionseq  <cit>  identifies gene fusions from discordant alignments, introducing numerous filters to separate the real fusions from many false-positive ones. however, this method can only detect the fusions between annotated genes, and may miss some fusions due to the incomplete annotation of a complex transcriptome. in addition, it is quite time and space consuming compared to other tools. the defuse  <cit>  uses dynamic programming to distinguish spanning pairs by split read analysis. however, it operates under the restriction that there are at least five spanning pairs; hence, it is very insensitive to fusions from rna-seq datasets with minimal sequence generation. meanwhile, the classifier to distinguish the true fusions from the false positives is highly related to a fixed training set generated from cell lines. the training set may not be applicable to other cell lines or clinical sample datasets. fusion-hunter  <cit>  and tophat-fusion  <cit>  use a splice algorithm for gene fusion detection. for splice algorithm, the problem occurs when confirming the alignments of the short sequences around the fusion point  <cit> . fusion-hunter simply aligns the short segments, which will introduce many false positives. tophat-fusion searches and merges reads together, but operates under the restriction that there should be 13bp on both sides of fusion points. in addition, all of the aforementioned approaches use the numbers of fusion reads to quantifying the fusion expression levels, which only represent the abundances of small regions around the fusion points.

in this article, we proposed a new tool, fusionq, which can detect gene fusions, construct the chimerical transcript structures, and estimate their expressions. fusionq uses a splice algorithm for fusion detection. a new approach, “residual sequence extension”, is proposed in fusionq to overcome the problem of multiple alignments of short sequences that is commonly seen in splice algorithms. based on this method, longer sequences can be obtained around the fusion point to confirm their alignments in fusionq. to reduce the false-positive rate, fusionq introduces a list of filters, including read number, sequence similarity, read position distribution filter. these filters guarantee fusionq to obtain results with high specificity. in addition, fusionq uses a more stable method to quantify fusion expressions. it incorporates the platform of expression estimation tool rsem   <cit> , and uses the expectation maximization  algorithm with sparse optimization to estimate chimerical transcript abundance. furthermore, this abundance quantification can be increase the identification accuracy of fusionq. taken together, these features allow fusionq to provide a more complete view of gene fusion events.

methods
in this study, we generated  <dig> datasets of simulated paired-end rna-seq reads using “eric the simulator”  <cit> . each dataset contained  <dig> simulated gene fusions, with the coverage from  <dig> to  <dig>  the simulation steps are summarized in the result section: comparison on simulated data. furthermore, we analyzed a published paired-end rna-seq dataset . it includes data from four breast cancer cell lines , which are known to contain  <dig> gene fusions. additionally, we employed a control group from this dataset, which is the rna-seq data from normal tissue.

in order to describe fusionq clearly, some concepts must first be clarified. according to paired-end rna-seq technology, a library of cdna fragments is derived from long rnas by rna or dna segmentation. short sequences from these paired-ends can be obtained after attaching adaptors to both ends of cdna fragments. these sequences are termed paired-end reads. due to the limitation of sequencing length, the middle portion of the cdna fragments may not be sequenced. these non-sequenced segments are called insert sequences. if a fusion point, which is the joint point of two fused genes, is located in a cdna fragment, it should exist in either one of the paired-end reads or the insert sequence. a read satisfying the former case is termed a split read, while paired-end reads satisfying the latter case are termed spanning pairs. as to a split read, if the segment on each side of its fusion point can align to a unique gene, the fusion reads are termed as uniquely mapped reads. we graphically describe these two types of fusion reads in figure  <dig> 

the fusion detection process of fusionq is schematically described in figure  <dig> 

as seen in figure  <dig>  fusionq is composed of three phases:

phase i transcriptome construction from rna-seq;

phase ii fusion reads detection based on the constructed transcriptome;

phase iii chimerical transcript quantification.

the transcript library constructed in phase i contains both known and new transcripts. fusionq then aligns reads to this constructed transcriptome. as a result, it can detect both known and novel gene fusions. in phase ii, fusionq detects the spanning reads by finding the paired-end reads with discordant alignments, with two ends aligned to different genes, while it detects the split reads by determining if the reads that cannot be aligned to the transcriptome harbor fusion points or not. a residual sequence extension method is proposed in this step, which can largely decrease the false-positive rate in fusion detection. the last phase, quantification of chimerical transcripts, is fulfilled using the expectation maximization  algorithm with sparse optimization. a detailed explanation of these phases is as follows:

phase i. transcriptome construction from rna-seq
one advantage of rna-seq technology is that it can identify transcript structures without knowledge from a pre-existing gene library, and is able to detect novel genes or isoforms. gene fusion detection from rna-seq data should also include the detection of these novel gene fusions to avoid missing fusions due to the incomplete annotation of a complex transcriptome. to address this problem, fusionq directly constructs the transcriptome from the rna-seq data using the transcriptome construction tool, cufflinks  <cit> . in addition, a reference annotation to guide the assembly steps is supplied. the output transcriptome by cufflinks includes all reference transcripts, as well as the novel isoforms. hence, this approach can report gene fusions between annotated genes and novel genes. supplying the reference annotation assists in ensuring that low expressed transcripts are not missed and that the constructed transcriptome is more complete. fusionq then creates a bowtie index of the transcriptome using the bowtie-build program  <cit> .

phase ii. fusion reads detection based on the constructed transcriptome
 <dig>  mapping

based on the created index from phase i, fusionq first uses bowtie to map all reads to the constructed transcriptome. the paired-end reads with concordant alignments and reasonable insertion lengths are filtered out from the consideration of fusion reads. the paired-end reads with discordant alignments are considered as spanning reads. some paired-end reads having neither ends aligned to the transcriptome are split into halves. if each end of one paired-end read has half mapped to the transcriptome, and the alignments are discordant, these paired-end reads are still considered as spanning reads. if one paired-end read has one end mapped to the transcriptome while the other not, the non-mapped end may harbour a fusion point. this type of non-mapped read is selected as a candidate split read. this mapping step allows a number of mismatches according to the transcriptome, considering sequencing errors and single nucleotide polymorphisms.

 <dig>  splitting reads into halves

the candidate split reads are split in the middle. for the purposes of this study, it was assumed that a split read harbors only one fusion point. if this read is then split in the middle, at least half can align to the transcriptome. this half read is called a seed. to guarantee that most half reads do not have too many mapping positions, read lengths are restricted to be more than 50bp, because 25bp reads have a high probability to align to unique genes of the constructed transcriptome. this conclusion is based on the following example. ten thousand  25bp reads that can align to a constructed transcriptome were chosen at random. almost 75% of them could align uniquely, with only less than 5% of the reads mapped to more than three genes. therefore, the detected seeds are restricted so as to have no more than one mismatch based on the transcriptome.

 <dig>  fusion breakpoint detection

in the following extension step, the detected seeds are extended, nucleotide by nucleotide. extension is stopped when further extension results in no mapping position. this stop point is regarded as the fusion breakpoint. the remaining segment that does not undergo seed extension is called a residual sequence. the implying genes of the seed and residual sequence are the gene fusion partners. clearly, the length of the residual sequences is less than half of the read length. consequently, it cannot be guaranteed that most of them align to less than three genes. some split reads may be missed by simply disregarding some of the short residual sequences. however, if those residual sequences have too many mapping positions, the false-positive rate may increase. consequently, while considering both detection sensitivity and specificity, the problem of how best to determine implying genes from the residual sequences presents. residual sequence extension is therefore proposed to address this concern.

 <dig>  residual sequence extension

based on deep sequencing, a split read should find some overlap reads harboring the same fusion point. if a fusion is only expressed in a single read, it cannot be determined if the detected fusion is actual or an internal error of the software. therefore, as to a split read, the 20bp segment with the fusion point in the middle is regarded as a contig. if the residual sequence is less than 10bp, the 20bp segment containing this residual sequence is regarded as the contig. all of the non-mapped reads other than the candidate split reads are then searched, and all reads that have this contig are selected. a set of these selected reads may have concordant overlap with this split read. they would be termed reference reads to the split read. the reference reads are then merged together to several longer sequences. the implying gene of the short residual sequence is decided by these longer sequences. this step is graphically described in figure  <dig> 

 <dig>  filtering false positives

a) reads number filter. after detecting the spanning pairs and split reads, the results are combined, and the reads that are less possible to be true fusion reads are filtered out. in the two-partner fusion transcripts reported from a split read, one should also be the aligned transcript of its mate read. the implying fusion points of the spanning pairs and split reads should be concordant. in addition, the fusions are discarded if either their supporting spanning pairs, split reads or fusion numbers are lower than the minimum numbers user specified.

b) similarity filter. some detected fusion junctions may be reported between two paralogous genes. they often result from misalignment due to their homology. this homology could be quantitatively measured by the degree of sequence match between the two genes. the matching degree is called similarity. the water output from the emboss  <cit>  pipeline is used to calculate similarity between every pair of reported partner isoforms. the fusion is discarded if similarity is more than 50%.

c) distribution filter. this filter is designed based on the hypothesis that the distributions of the positions of the reads involved in one transcript are similar. firstly, a large number of “real” transcripts are randomly selected, which have reads of both ends mapped to transcriptome. the positions of the supporting reads for these transcripts are collected and merged as “background positions”. secondly, the distributions similarity is estimated between the positions of the supporting reads for each of these transcript and the “background positions” using kolmogorov–smirnov  test. a list of p-values is then obtained, and their distribution is defined as the distribution of p-values . the null hypothesis is that the p-value of k-s test between the positions of supporting reads for a real transcript and “background positions” obeys the distribution of p-values. in consequence, as to each detected fusion, the positions of the spanning pairs are recorded, and the p-value of k-s test between each end read positions and “background positions” is calculated. because the two end reads are corresponding to two fused transcripts, according to the null hypothesis, both the two p-values should obey the distribution of p-values. if either p-value falls to the significantly low level in the p-value distribution , the corresponding fusion is discarded.

in order to reduce false positive rate of fusion detection, a list of filters are performed on the detected fusions in this step.

phase iii. chimerical transcripts quantification
in addition to the filters above, the identification accuracy of fusionq is further improved by quantifying the abundance of chimerical transcripts. generally speaking, highly expressed gene fusions are more important than those under a low expression levels. most tools use the number of reads supporting the fusion junction to determine the expression of this fusion. however, this number only reflects the expression level of the short region around the fusion point. some chimerical transcripts with higher expression levels may have many reads, but the reads do not contain the fusion points, resulting in low supporting read counts. in addition, due to the complexity of the transcriptome, some reads may be mapped to several genes. simply treating them as the supporting reads of certain fusion genes may cause misalignment and mistakenly increase their supporting reads counts. in order to provide more reliable expression levels for gene fusions, the quantifications should be based on the whole chimerical transcript. here, the framework of rsem  for chimerical transcripts quantification can be used by adding a l <dig> norm constraint to the number of expressed fusion transcripts.

the chimerical transcript set is denoted as Θ=θii=1m. all of the paired-end reads are denoted as x. the goal is to determine the abundances of Θ⌢ that can maximize the sampling likelihood of x. for one transcript i, it has a subset of supporting reads ∏xni aligned to it. the paired-end reads xnxn∈Πxni may come from multiple fragments Πxn. the probability of the xn takes the jth fragment of Πxn is pΠxnj. for each paired-end read xn, the probability of one fragment coming from i is θi. θi is normalized by pΠxnj as well as the length of transcript li. as to a paired-end read xn, the two ends are xnα and xnβ, with the insert sequence denoted as xnγ. p is the probability to get observation xn from this fragment, where the hidden indicator random variable znij =  <dig> means the alignment of jth read Πxn aligns to transcript i. then, taking all reads and all possible fragments of each read together, we aim to find Ψ that maximizes the likelihood of the sampling of the paired-end reads in x. this likelihood is

 px|Θ=∏n=1n∑i=1m∑πxnj∈∏xniθilipπxnjpxn|znij= <dig> 

where

 pxn|znij=1=pxnα|znij=1·pxnβ|znij=1·pdxnγ·pψ 

pdxnγ follows the empirical normal distribution of the mate-pair distance. the probability of the sequenced end reads taking the j-th element of ∏xn, pxnα|znij= <dig> and pxnβ|znij= <dig>  should be related with their sequence similarities to the reference genome and their base call quality score  <cit> . p is the probability of the junction crossed by one alignment of paired-end reads which can be calculated from the observed reads.

the expectation-maximization  algorithm is then applied to maximize the log likelihood of p. the key of the em algorithm is the expected value of the complete data log likelihood function, given current values for the parameters. the complete data log likelihood with group sparsity constraints is written as logpx,z|Θ=∑n,i∑πxnj∈∏xniθililogθilipπxnjpxn|znij=1−∑k=1kαk||Φk|| <dig> where Φk are the abundance of transcripts with detected junctions or fusions.

the q function of the em algorithm is qΘ|Θt=ez|x,Θtlogpx,z|Θ=∑n,i,jez|x,Θtznijlogθilipxn|znij=1−λ∑k∈flog|θk|.

during e-step, we calculate the expected values of the znij variables,

 ez|x,Θtznij=pznij=1|x,Θt=θit/lipxn|znij=1∑i',j'θi't/li'pxn|zni'j'= <dig> 

in the m-step, we maximize the likelihood of q and estimate Θ⌢ by the lagrange multiplier method.

based on this method, reads are mapped to the optimized positions. the corresponding expression levels of the detected fusions are then more reliable. some of these fusions may have expression levels approximate to zero. that would indicate that their supporting reads are the results of misalignment. these fusions are likely to be artificial and could be disregarded. in this way, the fusion identification accuracy is further improved.

RESULTS
in this section, the performance of fusionq was tested on simulated data and cancer cell line data. two fusion detection tools, “defuse” <cit>  and “tophat-fusion”  <cit> were adopted for comparison.

comparison on simulated datasets
fifty simulated paired-end rna-seq datasets were generated using “eric the simulator”  <cit> . each dataset was composed of two millions “background” reads and a set of “broken exons”  fusion reads. the “background” reads were the randomly selected ones from a published rna-seq dataset of the untreated human pulmonary microvascular endothelial cells  <cit> . the average length of the original cdna fragments was ~164bp and standard deviation was ~ <dig>  no fusion should exist in these background reads. the be fusion reads were generated from the 5’- and 3’- end of  <dig> simulated be chimerical transcripts using wgsim  . broken exon  means that the fusion breakpoints are randomly chosen without knowledge of known splicing sites of fused genes, in which case, the breakpoints may exist on exons. the coverage levels of the  <dig> simulated chimerical transcripts were from ranged  <dig> to  <dig>  these fused transcript partners were the randomly selected ones from ensemble transcriptome database version  <dig>  the read length was 50bp.

next, the three tools, fusionq, defuse, and tophat-fusion, were performed on these  <dig> simulated datasets using the same computational sources provided by the stampede server of “texas advanced computing center”. the number of threads was set as  <dig> as to all these three tools. we compared detection sensitivity and specificity of the three tools. sensitivity is defined as the number of true fusions detected divided by total number of true fusions , while specificity is defined as the number of true fusions detected divided by number of all fusions detected. the statistics were shown in table  <dig> 

specificity: number of true fusions detected divided by number of all detect fusions.

sensitivity: number of true fusions detected divided by total number of true fusions .

besides, roc curves were drawn based on 50-quantiles. firstly, the results of fusionq, defuse, and tophat-fusion were sorted in ascending order by fusion expression levels, estimated probabilities, and number of fusion reads, respectively. then, the roc curves were plotted with each point representing a pair of true positive rate  and false positive rate  when only the last kth 50-quantile results were considered. tpr and fpr were defined as follows: as to the last kth 50-quantile, tpr=tptp+fn and fpr=fpfp+tn,

where tp and fp were the number of true and false fusions in the last kth 50-quantile results, and tn and fn were the number of true and false fusions in the rest of the results.

according to table  <dig> and figure  <dig>  tophat-fusion cost the least time. however, it had the lowest detection sensitivity, with only 52% true fusions detected. although fusionq cost more time for computation, it outperformed the other two programs, and excelled defuse in both sensitivity and specificity. the time-consuming step of fusionq is the transcript expression estimation. however, it is a unique function that fusionq has but the other two tools do not. it can estimate the fusion transcript expression levels and largely reduces the false positive rate. as to these  <dig> simulated data sets, after the first three filters described in method section was performed, around 65% of the rest false fusions were excluded by means of expression filters. true fusions were seldom filtered out.

in addition, we estimated how the read coverage affected the detection ability. among the  <dig> simulated data sets, each contained fusions with coverage from  <dig> to  <dig>  as to the fusion transcript of each coverage level, we counted the number of times that the tools could detect it among the  <dig> data sets. hence, we obtained the detection rates of the three tools as to each coverage transcript. the relations between the detection rates to chimerical transcript coverage of the three tools were shown in figure  <dig> 

as shown in figure  <dig>  fusionq and defuse showed greater detection ability than tophat-fusion. fusionq was better than defuse when read coverage was low.

comparison on cancer cell line datasets
in the following, fusionq was tested on published paired-end rna-seq data from four breast cancer cell lines . these cell lines are known to contain  <dig> gene fusions  <cit> . data could be obtained from the ncbi sequence read archive . the control group of this dataset was also employed. it was the rna-seq data from normal tissue, which should have no gene fusions. a parallel computation was incorporated into the program to increase detection speed. as the dataset may contain many duplicate reads resulting from the pcr, quality control on reads level was performed to remove them. this filtered out the unnecessary reads and reduced the computational time. this method may reduce the reads coverage level, which could test our program on low coverage level conditions. table  <dig> lists the description of these datasets both before and after quality control.

when running fusionq, both the fusion partners were restricted to having at least 5bp involved in one split read. in addition, the detected split reads could have10bp segments around the fusion points having no mapping positions in the transcriptome. all of the reported fusions should have spanning pairs and split reads. furthermore, the mismatches between the reads and transcriptome were restricted to less than three, while those between the seeds and transcriptome to less than one. because quality control was performed on the data from the breast cancer cell lines and normal tissues, the detected fusion numbers should be smaller. as a result, fusions that have more than one split read and one spanning pair were reported, but the total numbers of supporting reads are more than three. additionally, ucsc hg <dig> was used as the reference human genome  <cit> , and the reference transcriptome was constructed using “tophat”  <cit> , then cufflinks . when using cufflinks, a reference annotation for ucsc hg <dig>  was supplied to guide the assembly steps.

besides fusionq, two fusion detection tools  were applied to datasets after performing quality controls, and their performances were compared with fusionq. the results of tophat-fusion were restricted to containing more than one split read, one spanning pair, and more than three supporting fusion reads, which is the same as fusionq. defuse requires at least five spanning pairs to nominate a gene fusion to the classifier. in consequence, defuse was restricted to having at least one split read and five spanning pairs. other parameters of these two tools are by default. after computation, the detected fusions by these three tools were listed in additional files 1: table s <dig>  additional file 2: table s <dig>  additional file 3: table s <dig>  table  <dig> provides a summary of the detection results.

comparison of the fusion number by fusionq, defuse, and tophat-fusion. empty cells denote a failure of the tool to report a particular fusion.

in total, tophat-fusion reported  <dig> fusions and fusionq reported  <dig> fusions, while defuse reported  <dig> fusions, as shown in table  <dig>  this demonstrated that fusionq reported less false-positive fusions than those reported by defuse. among the  <dig> documented fusions, fusionq detected  <dig> of them, while defuse and tophat-fusion detected  <dig> and  <dig> fusions, respectively. this is quite different from the results on data before quality control. while the quality control will significantly reduce the number of false-positives, its performing will result in a corresponding decrease in reads coverage, tophat-fusion showed unstable performance, and could not predict some very low coverage reads. fusionq showed more sensitivity in this occasion. the detection results of the  <dig> reported fusions by the three tools are presented in table  <dig> 

as shown in table  <dig>  fusionq includes gene fusion wdr67-znf <dig>  which is missed by the other two methods. this demonstrates that fusionq has the highest sensitivity. the number of reads detected by fusionq and tophat-fusion are comparable, although fusionq had much higher sensitivity than tophat-fusion. defuse seems to detect a higher number of fusion reads than that done by fusionq and tophat-fusion. this is probably because fusionq and tophat-fusion use bowtie mapping, of which the mapping criteria is more strict, whereas defuse uses dynamic programming to decide the sequence alignment, of which the criteria is loose, and false fusions may not be completely ruled out. in summary, fusionq could report more fusions among all reported when the reads coverage is low. this demonstrated the advantage of fusionq in detection sensitivity. meanwhile, the total number of fusions detected by fusionq is much less than that of defuse, which means that fusionq could report fusions with less false positives than defuse.

fusion structure construction
here, the bcas4-bcas <dig> gene fusion in the mcf <dig> cell line is used as an example to demonstrate fusion structure construction. this fusion results from the first exon of bcas <dig> fused to exon  <dig> of bcas <dig>  as shown in figure  <dig>  only a few fusion reads used in this example. the fusion points are the bars of each read, separating each read into two segments. using the “residual sequence extension” algorithm, the two segments of each read can be extended into longer ones. the extended segments are uniquely mapped to bcas <dig> and bcas <dig>  respectively. moreover, figure  <dig> describes all of the possible chemical transcripts of bcas4-bcas <dig> 

abundance quantification by fusionq
the proposed scoring function in phase ii is based on the numbers and distributions of supporting reads. fusions with higher scores have better features around the fusion point, and are more likely to be true fusions. the scoring function judges the fusions from a local view. furthermore, to profile the fusions from a global view, the abundance of the detected fusions is quantified using the method described in phase iii. this method could determine the optimized mapping positions of each read, as well as the average expression level of all transcripts, including the chimerical transcripts. fusions with very low expression levels could be disregarded after the analysis. this step improves the accuracy of the fusion detection.

here, the detection results based on the data from the kpl <dig> cell line are presented. in total,  <dig> fusion genes were detected, including  <dig> fusion transcripts. the ranking score and expression level of every detected fusion are shown in table  <dig> 

gene name with the prefix “cuff” are novel genes predicted by cufflinks.

the reported gene fusions are in bold.

as shown in table  <dig>  all of the three reported fusions in bold have higher expression levels, although one of them, nup214-notch <dig>  does not have many supporting reads. this confirms that the expression estimation by the em algorithm is significantly more reliable than read counts. in addition, some fusions with more supporting reads could have relatively low expression, such as bsg-nfic. the supporting reads of these fusions may contain some misalignments. furthermore, the misalignment could cause artificial fusion junctions. however, after abundance quantification, the expression levels of these artificial fusions are approximate zeros. as a result, this quantification could further improve the accuracy of fusion identification.

among the results listed in table  <dig>  the three reported fusions along with four other fusions  have higher expression levels. these fusions are mostly likely to be true fusions based on the fusionq program. besides, the gene partners with prefix “cuff” are novel genes predicted by cufflinks. the three fusions, bsg-nfic, sgk269-kiaa <dig>  and c9orf129-cuff. <dig>  have relatively lower expressions. their scores are relatively low. these fusion genes are judged as true fusions by fusionq. as to the three fusions, lrriq1-sec14l <dig>  astn2-cuff. <dig>  and astn2-cuff. <dig>  the expression levels are approximate zeros. this means that these fusion junctions are artificial, and could be disregarded. in summary, the scores and expression values could help to select the potential fusions for further validation.

discussion and 
CONCLUSIONS
in this study, we developed a novel tool, fusionq, to detect gene fusions, construct the chimerical transcripts structures, and estimate their expressions. fusionq uses a splice algorithm for fusion detection. to determine the position of short segments in the transcriptome, we proposed a new approach using a residual sequence extension algorithm. the short segments of the reads are extended by aggregating their overlapping reads. this approach makes the prediction more precise. we also incorporated filters to the detected results, which reduced the false-positive rate. moreover, instead of describing a fusion expression level using the number of supporting reads, we used sparse optimization to quantify the abundance of a fusion transcript. results show that this method is more reliable than using the supporting read count. the abundance quantification also further improves the identification accuracy of our approach. we compared fusionq with two current fusion detection tools, defuse and tophat-fusion using simulated data and cancer cell line data. fusionq showed better detection capacity than tophat-fusion in low coverage situations. its performance was comparable with defuse, but the total number of fusions reported by fusionq is much lower than that by defuse, as shown in table  <dig>  hence, fusionq could report fusions with a lower false-positive rate. as abnormal chromosome translocation is one of the important pathogenic factors in cancer development, our fusionq approach will facilitate accurate detection of gene fusions for disease diagnosis and identification of potential targets for gene therapy.

availability and requirements
project name: fusionq: a novel approach for detection and quantification of gene fusions from paired-end rna-seq

project home page: http://www.wakehealth.edu/ctsb/software/software.htm

operating system: 64-bit linux 

programming language: c++, perl and r

other requirements: boost c++ libraries, <dig> . <dig> and above.

competing interests
the authors declare that they have no competing interests.

authors' contributions
cl participated to study conception, tool development, and drafted the manuscript. xz participated to study conception and improved the manuscript. cc participated to study conception, and improved the manuscript. jm helped to study conception. all authors read and approved the final manuscript.

supplementary material
additional file 1: table s1
fusion reports from fusionq.

click here for file

 additional file 2: table s2
fusion reports from tophat-fusion.

click here for file

 additional file 3: table s3
fusion reports from defuse.

click here for file

 acknowledgements
this work was supported by the national institutes of health . funding for open access charge: national institutes of health. we would acknowledge the texas advanced computing center  at the university of texas at austin for providing hpc resources that have contributed to the research results reported within this paper. url: http://www.tacc.utexas.edu. in addition, we would like to thank zheng xia for his assistance with program development at the early stage of this work, to jing su for his parallel algorithm, and to hongyan wang and lei tang for their feedback on the program.
