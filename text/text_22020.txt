BACKGROUND
professionals in the biomedical domain collect, process and analyze large amounts of data, generally referred to as big data. data exploration has been hailed as the fourth paradigm in the investigation of nature, after empiricism, theory and computation  <cit> . the introduction to the  <dig> international conference on bioinformatics  <cit> , included some interesting, yet dramatic statements about the size of this big data, e.g. that genomic data is reaching tsunami proportions  <cit> , while at the same time, its clinical applications are rather a slowly rising tide  <cit> . moreover, the ability to perform complex experimental work on the computer, in addition to the laboratory, further increases freely distributed raw data on the web  <cit> .

for all these reasons, experts in bioinformatics are confronted with increased volumes of highly complex and often weakly-structured data  <cit> . research in human-computer interaction  and knowledge discovery in data and data mining , has long been working to develop methods that help end users to identify, extract, visualize and understand useful information from the huge amount of high dimensional  <cit>  and often weakly structured and/or non-standardized data  <cit> . supporting professional end users in understanding their data without becoming overwhelmed, while keeping the cognitive effort of the computational processes low  <cit> , so that the experts may concentrate on their scientific work, is a great challenge. various approaches, including statistical and graphical-theoretical methods, data mining, and computational pattern recognition, have been applied to this task in the past with varying success  <cit> . meanwhile, there are so many diverse methods and methodologies available  <cit> , each of these having strengths in some areas and weaknesses in other areas. such knowledge discovery methods are used to find patterns, similarities, anomalies, relationships etc. and other relevant information inside of highly complex data sets with the aim of obtaining insight into the data and towards sensemaking  <cit> .

consequently, such methods can greatly increase the efficiency of research in bioinformatics  <cit> . one of the biggest problems faced by researchers who want to use such knowledge discovery methods in their daily practice is, that there is no overall best method for each data set following the Şno free lunch theoremŤ  <cit>  and even an expert may not be able to recommend the application of a particular method to a particular problem without knowing details about the data.

hence, finding out which of the available, well studied approaches is the best one for a certain data set is a difficult task. depending on the size of the research project, the necessary effort to find a suitable method might be too great, especially if there is no efficient method to benchmark the used data on a large variety of different algorithms. in order to help researchers deal with the problem of finding a suitable method for knowledge discovery on their data, we have developed a software called knodwat , which is an extensible application framework for testing knowledge discovery methods  <cit> . the application provides features to manage projects and social features, and to administrate as well as end-users including sharing and commenting on data. moreover, by adding new knowledge discovery methods, it can be easily extended in various areas, thereby enabling researchers to test their own data with diverse, intuitive methods and compare the results in order to select the most suitable method for their particular data set. it is not necessary to know or understand the functionality of the algorithms behind these methods. the focus during the planning and implementation of the framework was on keeping it generic and extensible enough for a wide audience, especially for novice researchers in bioinformatics; but also to provide a strong functional body and an intuitive user interface to make it accessible and useful for researchers without a lot of experience in the field of machine learning.

implementation
the knodwat framework  was implemented using the java programming language based on the spring framework  <dig> . for data modeling and persistence, hibernate framework  <dig> . <dig> was used, mainly due to the very good spring integration of the framework. the software runs on java  <dig>  and above and requires a web server such as apache tomcat and a database server such as the mysql server. for frontend functionality and styling, twitter bootstrap was used as well as jquery for interactive user interface operations. the two already integrated algorithms, cart and c <dig>  were implemented using the weka data mining framework  <cit> .

typical for web-based applications, the framework follows the model view controller software architecture pattern  <cit> . the general architecture behind the framework allows for the extension the core functionality using the service classes, tag libraries and utilities that are already available. the addition of new algorithms to the application was implemented using the strategy design pattern, encapsulating the different algorithms for the same task and making them interchangeable, which should help developers add new functional algorithms to the project without having to know the inside of the actual framework.

arguably the most important architectural, or rather general design decision regarding the knodwat framework was to make it a web-based application. this crucial decision was based on three factors: usability, multi platform compatibility and the social aspect of research. with knodwat being aimed at researchers from all disciplines of science, especially at people with little experience in information technology  <cit> , introducing new users to the framework will be easier with the user interface similar to widely used services such as twitter and youtube. even with little it knowledge and experience, there is a high chance, that a researcher has been using the web, including search engines and social networks to communicate and find resources. this assumption leads to the conclusion, that a web interface based on the general design principles of well known services should make it easier for inexperienced users to be introduced to the application. the second concern was multi platform availability for the application. due to the popularity of both smartphones and tablets, there is an inherent need to make applications available to static and mobile devices  <cit> . this can be difficult, considering the different technologies involved in creating mobile applications , but all of these devices have web browsers installed, capable of displaying complex web applications and enabling user interaction on the same level as a pc. the third reason for making knodwat web-based was the social component of research meaning the creation and sharing of results with other people, or following other researchers’ progress.

extension
in order to make the knodwat framework applicable in many different disciplines of science, it has to be easy to add new methods to the existing platform. currently it is not possible to extend the framework without any software engineering experience, but considering the way in which the extensibility functionality of knodwat is built, even a rather inexperienced programmer with some knowledge of the java programming language and the ability to follow a few simple, well documented, steps is able to add new algorithms to the application. the whole extension process revolves around the concept of convention over configuration, using the java reflection framework to wire the different components together automatically when they are named correctly and located in the right places within the project.

the first step is to create a new configuration object for the chosen algorithm. basically, this object represents the custom parameters used for the algorithm. in the case of cart, one parameter will be created to enable the user to prune trees and another one to control how many data elements are used for training. it is important to note, that the extension of knodwat works by the use of convention over configuration, which means, that the naming of the created classes is relevant, as it will be used to link the created parts together. the configuration object is a pojo−plainoldjavaobject, where the setter- and getter methods are annotated with specifications regarding their later use for the automatic wiring.

after the configuration object has been created, the next step is to create an implementation class, extending the defaultmethodimpl class. this class has to override the run() method, where the execution of the algorithm will take place. the developer can freely create other methods, such as helper methods, but the run() method will always be called during method execution. the parameters as well as the input files are inside the map<string,object>data, which is the method parameter of the run() method. inside this data map, all relevant input objects can be found, identifiable by their names. the handling of these input objects will differ from algorithm to algorithm and has to be implemented according to the individual needs of the method at hand. if anything goes wrong, for example an exception occurs, it is advisable to use the fireerrorevent() method, in order to let users know that the method execution could not be performed successfully and what went wrong. another method with regard to events is firestartevent, which can be used, for example, after all input parameters and data have been validated and the execution can start. the third event function, firesuccessevent, is called automatically when the result creation is triggered.

the execution of the algorithm can start after the validation of input data and necessary parameters. when the algorithm is completed, the created output data has to be saved. once these result objects have been created, they are added to a list containing generalresult objects, describing a collection of output data. this output data list is then passed on to the method createresult(), which handles the persistence of a result object, adds and persists all the output data and fires the success event if everything worked, concluding the method execution. in essence, the developer responsible for adding a new method to the knodwat framework has to create a class, override a method, create a list containing output data within this method and call the createresult() method, which should be manageable for people with some experience in the java programming language and guided by this tutorial.

once both the configuration object and the implementation class have been created, positioned and named correctly, the only things left to do are to create a suitable view for the result detail and to create a database entry, which makes the method usable.

the last step is to create a custom jsp view file for presenting the results generated by the newly added algorithm. the developer should have some basic knowledge on how to create java server pages, especially if the goal is to present the results in an attractive and neat way, providing a high amount of transparency and clarity. nonetheless, the creation of this view is, again, fairly simple. all of the output data objects are available in the <dollar/>{outputdata} object and accessible via the jstl. there are no limits regarding frontend “magic” such as javascript based animations or widgets, as the created view will be included within the existing result.jsp view and is not restricted in any way.

after completing these three simple steps; the newly added algorithm can be used throughout the framework. it is of course advisable to execute some intensive testing before releasing an extended version of the framework, as bugs and errors regarding the convention over configuration concept behind the extension feature can lead to instability within the whole application.

comparison to other software in the field
the knodwat application framework was greatly inspired by existing software in the field, most notably orange  <cit> , for its extensibility and modular approach and weka  <cit>  for its abundance of implemented and tested algorithms within the field of knowledge discovery. knodwat however, while generally providing similar features as the above mentioned software, as well as other projects such as the weka web interface  <cit>  or knime  <cit> , differs from them in several aspects. one of these aspects is, that knodwat is a web-based platform built for user interaction and collaboration between researchers. it not only provides an interface for using existing algorithms, such as the weka web interface, which is web-based as well, but also provides social features for organizing research projects and to enable sharing of data and results both within and outside of the platform. another relevant aspect of knodwat, setting it apart from other software in the field is the fact that it was built with a focus on extensibility, meaning that the software is not meant to be a static library providing a certain amount of functionality, but rather an evolving platform which can be shaped according to the need of any user base. the knodwat user interface was specifically designed to make it easier for researchers with little experience in computer science and machine learning to use existing algorithms on their data, making these powerful knowledge discovery tools available to a broader audience of researchers, setting it apart from a non-technical perspective.

the main difference between knodwat and other knowledge discovery applications is that it is web-based. there are several advantages to this approach, the most important one being that most users, experienced with machine learning techniques or not, have used web applications such as social networks or search engines before and are thus more familiar with the general workings of them and the standard user interactions. this familiarity makes it easier to access the application, there is no need to download or install a bulky piece of software nor is there a need to regularly check for updates, users simply have to create an account and are ready to use the platform. another advantage is compatibility, as web applications work on just about any device, which gets more and more important considering the increasing market share of mobile devices such as tablets. the use of web-based clustered computation services and social network applications, while also possible in standalone applications, is more intuitive with web-based applications. the main drawbacks of applications based on the world wide web are concerns regarding security and data privacy, which are of course relevant issues for many research projects. in general, social features for collaboration in the form of sharing data and the methods with which the results were found are easier to implement and more intuitive to use in an already connected environment such as the world wide web, and with the prime motivation behind the project - the spreading of awareness and increased accessibility of knowledge discovery techniques implementing knodwat as a web-based application seemed obvious.

RESULTS
this section presents a feature list of the completed knodwat framework as well as a small knowledge discovery study using two biomedical data sets, which was conducted using knodwat.

features
the knodwat  is an extensible application framework for testing knowledge discovery methods. the current version, provides many features, the most important ones being the following: 

• web-based user interface designed for easy accessibility

• localization for english and german

• high performance result creation

• multi-file upload system

• helpful documentation for beginners

• event based notification system

• dynamic content filtering methods for fast navigation

•simple content management

• easy extension capabilities for knowledge discovery algorithms

• multiple user accounts and roles

• full administration capabilities within the system

• social features such as following, sharing and commenting

• multi-platform compatibility

usage
the basic knodwat application supports three different user roles: 

• administrator 

• researcher 

• user 

the usage of the application depends greatly on the active user role, but as the general purpose of the software is the generation of relevant research data, this section will show some functionality from a researchers point of view. as mentioned above, a researcher can, if appointed as a project leader, administrate a project. this allows the user to create, edit and delete subprojects, share the project to users and assign other researchers to subprojects using the project management panel . for every list or table within the framework, there is a javascript filtering option, to reduce clutter and improve efficiency while navigating through hierarchies.

every user can change their own password, the language of the application and choose which content to follow, from the subprojects shared within the framework using the settings-area . subprojects and their results can be shared to either the whole platform or to singular users. once this content has been shared with a user, that user can select it from the settings-panel and choose to follow it, the user can also view all results created within the shared subproject as well as comment on the visible subprojects and results.

researchers can commit input data to the platform using the data upload feature , consisting of a very user friendly jquery widget, enabling even inexperienced users to just select files from their harddisk and upload them to the application. the widget also supports multiple parallel file uploads simultaneoously. the uploaded data can also be managed by a researcher within the management area.

the most important process within knodwat is the generation of results, where a researcher chooses a project, a subproject and an algorithm, before proceeding to the result creation interface, where the chosen algorithm is documented and all the relevant parameters as well as input data can be specified. once the result generation has been started, the algorithm is executed. when the method finishes successfully, the user receives an event notification. the created result can be viewed within the subproject detail page. the view can vary depending on the algorithm used, but usually consists of the name of the subproject, the used algorithm and input data, the comment section and algorithm specific result data such as visualizations and statistics about the result .

case study
in order to test knodwat with regard to its usability, stability, usefulness and the correctness of the two implemented methods, a small study was performed. in this study, the two implemented algorithms, cart and c <dig>  were tested on two different data sets provided by the uci  <cit> . the algorithms were trained using three different training set sizes , with and without pruning, so that all in all there were  <dig> classifiers trained per method and data set. the results of this study are presented in the following section.

test data
the test data was acquired from the uci - university of california, irvine machine learning data sets  <cit> . the two data sets used in this study were the breast cancer data set and the hepatitis data set. both have their origin in the medical domain. example data rows for each set are: 

•breast cancer:

′50−59′,′ge40′,′15−19′,′0−2′,′yes′,′2′,′left′,′central′,′yes′,′no−recurrence−events′

′30−39′,′premeno′,′30−34′,′9−11′,′no′,′2′,′right′,′leftup′,′yes′,′recurrence−events′

•hepatitis:

 <dig>  female, no, no, no, no, no, yes, no, no, no, no, no,  <dig> ,  <dig>   <dig>   <dig>   <dig>  no, live

 <dig>  female, no, no, yes, yes, no, yes, yes, yes, yes, no, no,  <dig> ,  <dig>   <dig>   <dig> ,  <dig>  yes, die

analysis
the result images in figures  <dig> and  <dig>  were taken directly out of the knodwat result detail views. they represent a graph showing the fraction of correctly and incorrectly classified instances for the different classifiers.

obviously, the two data sets, each containing merely  <dig> to  <dig> data sets and only  <dig> different versions of the two algorithms to be tested on the data are not highly representative in a context of actually gaining useful knowledge and insights from the data. this was, however, not the goal of the study, which was to evaluate the functionality and framework that the knodwat application provides to conduct such studies. however, the results can be interpreted and compared, which can yield useful information on the usage and application of algorithms.

in figure  <dig>  the two algorithms, cart and c <dig>  and the results generated from their application to the breast cancer data set are displayed. the graph shows, that on the whole, the c <dig>  algorithm outperformed cart.

on the whole, the no-free-lunch theorem has been demonstrated in this small study as well, with each algorithm beating the other one on one of the data sets. even in the case of these small data sets and a very limited range of different configurations using only two parameters, some fairly interesting results were generated by the use of the knodwat application. the program behaved as expected and made it very easy to conduct this study. with regard to the result, the multi-file upload, different subprojects for the two studies and the intuitive user interface, creation and viewing were the most impacting factors throughout the experience.

CONCLUSIONS
this article introduced knodwat , a framework for testing knowledge discovery methods with a focus on making it easy for developers to add new functionality to the existing system. knodwat is a web-based application created for researchers with a graphical user interface designed towards usability and easy access. social features such as content sharing and the ability to express an opinion within the system as well as collaboration possibilities within projects, makes knodwat a modern environment for research groups. however, the application can not be extended without at least one expert who has programming experience and the skills to implement a certain knowledge discovery technique. the decision to create knodwat as a web-based application has both advantages and disadvantages. on the one hand, many users will have an easier time getting started with a web-based system due to the experience they have already gained with other systems of the kind, such as social networks or other prominent web sites. web-based applications also have the advantage of being very connectable to external services and inherently create connections between users and their generated content. on the other hand, however, there may be limitations given methods with high computational complexity or very specific and expensive graphical representations of results, as they can be harder to implement in a web-based application, than in a native client. nonetheless, with the trend of mobile devices becoming more and more capable and providing improved user interaction features, it was very important to make knodwat available for as many platforms as possible, which is definitely a strength of applications developed for the web.

on the whole, the idea of a globally connected research platform, making knowledge and the methods used to acquire it available to everyone, is very intriguing and knodwat is a small step in that direction.

availability and requirements
project name: knodwat

project home page: https://code.google.com/p/knodwat/

operating system: platform independent

programming language: java

other requirements: java  <dig>  or higher

license: apache license  <dig> 

any restrictions to use by non-academics: no

competing interests
we declare that we have not any competing interests.

