BACKGROUND
the emergence of several high throughput measurement technologies provides new possibilities to study biological organisms at the system level. new technologies produce such large amounts of data that can no longer be analyzed by hand. this has made computational techniques an inseparable part of data analysis. although new computational methods are continuously proposed for data analysis, their performance can not be objectively evaluated. this remains as a fundamental problem in method development. typically validation of data analysis methods is based on clinically determined labels of biological samples. if the computational method produces results which are consistent with the predetermined labels, then the method is considered to work reliably. this approach, however, relies entirely on a priori information about the data. furthermore, the clinical classification of samples is not always unambiguous  <cit> .

a more objective approach to validate the data analysis methods is to use data whose characteristics and ground truth are known  <cit> . unfortunately, in real life problems this kind of data usually does not exist. thus, to obtain data with known ground truth, one needs to produce the data by simulation. if simulated data is used to evaluate the performance of the analysis methods, can it be guaranteed that the same performance is obtained with real data also? to get meaningful results, the simulated data and the real biological data have to have similar biological and statistical characteristics.

a problem in the validation of data analysis algorithms using simulated data is that there is always an underlying mathematical model that is used to simulate the data. thus, when different computational methods are compared, this approach favors the ones that implement the same assumptions as the data generation process does. while this is a fundamental problem, it can be circumvented by evaluating the methods using simulated data produced by different kinds of models. when the results are combined, the bias due to the model assumptions can be avoided.

numerous studies have focused on mathematical modeling of biological and measurement errors, including both stochastic noise and systemic bias  <cit> . these studies have improved the analysis methods by utilizing the knowledge about the data properties  <cit> . this knowledge can be utilized in the generation of simulated data as well.

the error model itself is not enough for the simulation of biologically and statistically accurate data. before an error model can be applied, the ground truth biological signal needs to be obtained. depending on the application, a biological signal can be obtained for example by sampling a proper distribution or by modeling and simulating the biological system using differential equation models  <cit> .

once the biological ground truth signal has been generated and the error model has been applied, simulated data is still not comparable to real measurement data. real data is always extracted from a measurement system. in the case of gene expression microarrays, image processing algorithms are used to read the spot values from the scanned slide image. the applied grid alignment, segmentation and data extraction algorithms have a significant effect to the obtained data  <cit> .

there are numerous possible applications for a simulation model that can simulate realistic biological measurement data. the most obvious application is the validation and improvement of data analysis algorithms  <cit> . in addition, different data extraction algorithms can effectively be tested under different noise conditions. if the biological ground truth model is accurate enough one might even be able to simulate entire microarray experiments. if this could be done before performing expensive laboratory experiments, the proposed hypotheses could be tested with simulated data. this could help in finding problems in the design of the experiment and, thus, potentially save significant amount of time and money. 

while all the steps of the simulation process have been extensively studied separately  <cit> , not much work has been done to combine all the steps. we propose a model that combines these steps and can be used to produce microarray data with realistic biological and statistical characteristics. the proposed model is modular and it can be easily extended to include new error models and even new measurement technologies. the current implementation supports the simulation of spotted two-channel microarrays and oligonucleotide based single-channel microarrays. we have implemented the model in matlab environment . the simulation model is also available for download at our companion web page  <cit> . 

biologically meaningful input data can be obtained from various sources. we introduce some possibilities how this data can be obtained. we then review several previously published error models which model biological and measurement technology specific errors, and which can be used to add realistic statistical properties to the simulated data. the result data is used as a basis for simulating the production of the microarray slides. after that, we discuss about the final step in obtaining realistic measurement data: the extraction of the gene expressions from the slide. finally we demonstrate the applications of the proposed model by examples.

generation of the ground truth data
depending on the application, the requirements for the ground truth data may vary. a typical microarray experiment includes comparison of different classes of samples, measuring a response to a perturbation, or measuring time series behavior. validation of the data analysis methods developed for each of these applications sets different requirements for the ground truth data.

the simplest approach to generate the ground truth data is to sample data randomly from a specific distribution. first the distribution and its parameters can be estimated from real measurements. next the ground truth data can be obtained by sampling a simulated ideal distribution with estimated parameters  <cit> . this approach can be adequate for several applications. the detection of differentially expressed genes is often based on the comparison of statistical properties of microarray data from two different samples, for example from two different cancer types. therefore, the ground truth data suitable for validating data analysis methods can be obtained simply by sampling two distributions with different parameters.

if purpose of the data analysis is to study the behavior of the system in more detail, for example to study responses to perturbations, then biologically more detailed data can be generated. because microarray technology measures gene expressions, the natural source for biological data would be a model of a genetic regulatory network . unfortunately, grns are not generally known well enough so that they could be utilized in data simulation  <cit> .

however, in some cases parts of the networks are known and even simulation models that include parts of the genetic regulatory mechanisms have been proposed  <cit> . these kinds of models would be ideal for the generation of ground truth data. if a model is accurate enough, even hypotheses about the behavior of the real system could be tested before a real microarray experiment is done.

generation of data with biologically meaningful characteristics does not require the modeling of real grns  <cit> . instead one can use networks with random topology. if the interactions between network components are modeled properly, for example by utilizing interaction information from real grns, one could produce data with realistic characteristics  <cit> .

once the network model has been obtained and mathematical models for interactions have been formulated, the expression values of the genes in the network need to be simulated. there are several publicly available software packages that can be used to accomplish this task  <cit> .

yet another application for microarray data is network inference, that is, learning the network structure and the interaction rules between the network components from time series or perturbation measurements.

in network inference, the modeling of control mechanisms of a network plays an essential role. therefore, it is not necessary that all the interactions correspond to the ones of a real network and thus, even coarse scale models can be used. for example, it is shown that very simple models, even random boolean networks, can capture some of the essential characteristics of real grns  <cit> . thus it may be sufficient to use for example a boolean network as a ground truth in network inference studies  <cit> .

real measurement data can also be used as ground truth data. this is the case, for example, if we want to study how our data analysis algorithm performs under different types and amounts of noise. by adding noise to real measurement data we can effectively test if the performance of our data analysis algorithms degrades as the amount of noise increases. this can give us valuable insight into the robustness of the algorithms.

microarray simulation model
in this section, a model for microarray measurements is presented. the model can use input data from numerous different sources. in practice, there is no limitation on what kind of simulator or software is used to generate the ground truth data.

the proposed simulation model is modular and the configuration is very flexible. the structure of the model is presented in figure  <dig>  each module is independent of the others, and can easily be replaced.  this, for example, makes it possible to easily change the error model for the biological noise.

in the following we will discuss the most important characteristics of each module. model parameters are listed in tables  <dig>   <dig>   <dig>   <dig>   <dig>  a more detailed documentation about the effect and usage of each parameter can be found on our companion web page  <cit> .

file input
input data to the model is read using a file input module. this module converts the data to the internal format of the simulation model. input data can be gene expression values or expression ratios. for example data from affymetrix .cel files or simulated expression values can be used. in addition to data itself, the user should specify spot locations on the slide and their identifiers, such as probe names. requirements for the input data are listed in table  <dig>  more detailed information about the format of the input data are given on the companion web page  <cit> .

biological and measurement noise
the most important part in the simulation of realistic microarray data is the modeling of biological and measurement technology specific errors because they define the statistical characteristics of the simulated data. biological errors are typically considered to include the internal stochastic noise of the cells and error sources related to sample preparation  <cit> . this type of intrinsic noise is present in all measurements, regardless of the measurement technology. measurement errors, on the other hand, include error sources that are directly related to the measurement technology and its limitations, for example bias due to the used dyes. the properties of this kind of extrinsic noise depend on the measurement technology  <cit> . in addition to the fact that the simulated ground truth data is measurement error free, there is another major difference compared to real microarray data. microarray data are usually measurements from cell populations. thus the measured values are average expression values of all the cells in the population while the simulated data essentially presents the behavior of a single cell. furthermore, it is difficult to prepare a sample containing only one type of cells. therefore, the measured data is typically from a heterogeneous cell population, for example from a mixture of different types of cells  <cit> . the simulated data can be made more realistic by introducing a population effect. this can be done by using a kernel function to spread the ideal expression patterns as proposed in  <cit> . the population effect blurs the simulated ground truth data so that all the details can not be observed. small variations occurring only in some cells can not be observed because they are covered by the large trends of the majority of the cells.

after the population effect has been taken into account, we can add biological and measurement errors to the simulated data. there have been numerous studies characterizing the properties of the error sources  <cit> . while the formulations of different error models are slightly different, the main components in all the models are the same. all of these models contain components that are dependent and components that are independent of the expression level. thus, the errors are considered to be nonlinear in nature. biological and measurement errors can be presented in the compact form

y = f  + e,       

where f is a nonlinear function, depending on the gene expression level x, e is an error term independent of gene expression level, and y is the observed expression value. function f includes all error sources that are dependent on the true underlying biological gene expression level x. thus, error term e and function f include both stochastic noise and systemic bias that originate from biological and measurement technology specific error sources.

to make it possible to estimate the parameters of the error models from real data, error terms are usually factorized into a more detailed form. typically an error model includes separate terms for gene specific noise, measurement specific noise, array specific noise, biological sample specific noise, noise independent of all these, and so on  <cit> . some of the components model the intrinsic noise, that is, errors from biological origin while other components represent the extrinsic noise, that is, errors from the microarray measurement technology. however, usually both of these error types are modeled together regardless of their origin.

as there are error sources that are gene, array and biological sample specific, there needs to be a way to implement all these in the model. in addition to these error sources, there may be technology specific details which have to be considered. affymetrix type oligonucleotide arrays contain several probes that are a part of the same probe set and thus measure the same gene. furthermore, perfect match  and mismatch  probes need to be handled independently in the error model  <cit> . these issues are taken into account in the simulation model design, and all these type of errors can easily be included. for details on how different types of error sources can be implemented, see the documentation available on the companion web page.

our microarray simulation model includes several error models proposed in the literature  <cit> . along with the models, methods for estimating model parameters from real measurement data have been proposed  <cit> . these methods can be used to estimate realistic parameters for the simulation. some of the implemented error models are for oligonucleotide and some for cdna data. thus, to get statistically accurate results the right type of error model needs to be used together with the proper array type. the error models and their parameters are summarized in table  <dig>  after the error model and the population effect have been applied, the simulated data has realistic biological and statistical characteristics.

slide manufacturing
to model a real microarray experiment it is not enough to simulate the gene expressions and to apply the error model, but the extraction of the data from slides has to be considered too  <cit> . thus we need to model the microarray manufacturing process.

a slide image is simulated using a user specified layout, that is, how many subarrays there are on the slide and how many spots or probes are in each row and column. slide simulation introduces several error sources that are often visible in real microarray slide images. these include variation in the spot position and size. in addition the marks done by a print tip and deformations in the spot shape can be produced. for example, one type of deformations are chords that are cut away from the spots. these error sources are demonstrated in figure  <dig>  it is also possible to make the subarray layout imperfect by applying a non-linear error which makes the subarrays to drift from their ideal rectangular layout. this is shown in figure  <dig>  all the error sources can be controlled probabilistically by user adjustable parameters .

slide hybridization
the slide hybridization step simulates the shape of the hybridized spot on the microarray. several models for spot shape have been proposed. as different array technologies produce different types of spots, there is no single spot model that is suitable for all types of arrays. for example, it is shown that gaussian distribution can be successfully fitted over cdna microarray spots  <cit> . recent studies have also introduced more detailed spot models  <cit> . we have implemented several models for the spot shape, including gaussian and polynomial-hyperbolic spot shapes  <cit> . parameters for the spot shapes can be set by the user. the ideal shape of the spot is corrupted by multiplicative gaussian noise, again with user specified parameter values for the noise. the hybridized spot is then obtained by multiplying the noisy spot shape by the corresponding expression value. spot generation with the gaussian spot shape is presented in figure  <dig>  in the case of a single channel oligonucleotide microarray, rectangular spot corrupted by additive gaussian noise is used. an example of a simulated oligonucleotide microarray spot is shown in figure  <dig> 

like previously in the slide generation phase, the user can introduce several hybridization errors that are typical for microarrays. errors include background noise, spot bleeding, scratches, and air bubbles. these are demonstrated in figure  <dig> 

while the most relevant of these errors may depend on the array type, the simulation model makes it possible to use the same error sources on both spotted two-channel and oligonucleotide based single-channel arrays. introduction of these types of error sources might be of interest in validation of grid alignment and segmentation algorithms.

slide scanning
in real experiments the hybridized slide is digitized by scanning. as a result a digital rgb image is obtained in which each color channel corresponds to the intensity information from different dyes. while the modern scanners are usually of high quality, they still have an effect on the obtained data, for example, in the form of the dynamic range. all scanners have a finite dynamic range, and thus some measurement values might saturate.

the scanner can also be a source for other type of errors. because the slide is read by scanning each dye color separately, it might be possible that channels do not align perfectly. furthermore, it is not guaranteed that the slide is always scanned exactly straight. all these types of errors are included into the model.

image reading
the final step in obtaining the realistic simulation data is to extract the expression values from the image. because our simulation model produces images similar to real microarray slides, one can conveniently use any microarray feature extraction software.

we have however included an automatic grid alignment and image segmentation algorithm into the simulation model so that the data can be automatically extracted from images. these default algorithms can be easily replaced by other extraction algorithms.

RESULTS
we first demonstrate the use of the proposed microarray model using simulated gene expression data. the ground truth biological signals are generated using random network topology with kinetic rate laws that present rates for transcription processes, and kinetic rate laws for degradation rates of the gene products  <cit> . the details about the data generation can be found on our companion web site. we use a gene knock out experiment as a case study  <cit> . the reference data is obtained by simulating the generated network. then the test sample is obtained by knocking out a randomly chosen gene from the network and then running the same simulation using the network with the knocked out gene. simulated gene expression profiles of a few selected genes that were affected by the knock out are shown in figure  <dig>  next an error model is applied to the obtained ground truth data. we use the hierarchical error model to model the biological and the measurement specific noise  <cit> . figure  <dig> illustrates the simulated gene expressions profiles after adding the noise.

after the error model is applied, we generate the slide images. as an example we show two slide images in figure  <dig>  generated at time instants  <dig> and  <dig> minutes corresponding to the time scale in figures  <dig> and  <dig>  it can be observed that in the beginning only one spot shows a difference in the expression. this corresponds to the gene that was knocked out. at the later time instant the effect of the knockout has spread through the network, and many genes show change in their expression. that is, spot colors have changed from yellow to red or green. in this example the amount of biological and measurement errors is in the minimum in order to point out the spreading effects of the knock out. adding more measurement and biological errors would introduce more changes in the expressions already at the  <dig> minutes time instant. to illustrate that the simulated data has properties similar to real microarray data, we show scatter plots of the simulated data. for this example the ground truth data is drawn from predetermined distribution. common assumption is that the ground truth expression values are from an exponential distribution i = λe-λx  <cit> . we draw  <dig> expression values from this distribution, with λ = 1/ <dig>  as we are interested in evaluating the quality of the data, we do not introduce any differentially expressed genes, but simulate a self versus self experiment as explained in  <cit> . red and green intensities ir and ig are drawn from a normal distribution n , where α =  <dig>  and i is a realization from an exponential distribution. next, the final red and green intensities ir and ig are transformed with x^=xa0+a1
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacuwg4baegaqcaiabg2da9iabdiha4naacaaaleqabagaemyyae2aasbaawqaaiabicdawaqabaaaaogaey4kasiaemyyae2aasbaasqaaiabigdaxaqabaaaaa@369a@, where x = {ir, ig} with parameters a <dig> =  <dig> , a <dig> =  <dig>  for ir and a <dig> =  <dig> , a <dig> = - <dig>  for ig. this is a simplified version of the ground truth data generation proposed in  <cit> . scatter plot of the data is shown in figure  <dig>  to illustrate what is the effect of reading the spot values from a simulated slide image, we simulate a microarray without adding any biological or measurement errors to the ground truth data. only slide manufacturing and hybridization errors are introduced. scatter plot of the noise free data extracted from a simulated slide image is shown in figure  <dig>  it can be observed that the extraction of the data alone introduces some errors.

finally, we run the simulated ground truth data through a hierarchical error model  <cit> . the resulting scatter plot is shown in figure  <dig>  it is difficult to quantify objectively if the data is really realistic, but the scatter plot shows characteristics that are observed from real microarray data  <cit> . for example, the arrow head shape at the left is observed with real microarray data  <cit> . furthermore, the scatter pattern shows more variation at the small intensity values, which is the case with real microarray data also  <cit> . as another example we will demonstrate the simulation of a single-channel oligonucleotide microarray slide. as the ground truth data we use yeast data that can be downloaded from affymetrix web site  <cit> . we simulate a slide image based on the intensity values in the .cel file. figure  <dig> represents a crop of the simulated image and the corresponding real image from the original .dat file.

as the final application example, we present how the proposed simulation model can be used for comparing spot segmentation algorithms. spot segmentation, along with procedures such as spot addressing and estimation of background and foreground levels, is one of the successive steps affecting the estimation of the true signal intensity. simultaneous comparison of all the methods affecting the estimated true signal is a complex problem which would require more attention in order to be thoroughly studied. in our current example we estimate the spot and the background intensities by calculating the mean of segmented foreground and background pixels. thereafter, the expression value is obtained by subtracting the background intensities from the foreground intensities. our comparison example includes three different segmentation algorithms: the fixed circle  method  <cit> , the histogram segmentation  method  <cit> , and the seeded region growing  method  <cit> .

we simulate three test images consisting of eight subarrays with altogether  <dig> spots per image. each image has different quality characteristics. the first image is of high quality, with low variance noise  and relatively round and regularly sized spots. the second image has more noise  and more irregular spot shapes and sizes, while the third has even more disturbing noise which has higher variance . furthermore the spot shapes and sizes include more variation compared to the other images. air bubbles, scratches, spot bleeding, and print tip effects are added into the second and third image, the third including more such artefacts than the second image. figure  <dig> shows one subarray from each of the images used in this experiment. detailed information about the simulation parameters for these three images is available on the companion web page.

the results of applying the selected segmentation algorithms on the synthetic test images and calculating the spot intensities from the segmentation results are shown in figure  <dig> where the estimated spot intensities are plotted against the reference signal. figure  <dig> shows the scatter plots for the first image,  <dig> shows the plots for the second image of slightly degraded quality, and  <dig> presents the plots for the third, low quality image. after removing the estimated background, some of the spot intensities become negative. these negative intensities are replaced with zeros. to quantify the performance of different algorithms, we compute the correlation coefficient for each comparison. the results are given in table  <dig>  even though we mainly focus on simulating images with realistic parameters, some observations on the segmentation results are presented. the results presented in table  <dig> support intuition; all methods give worse results as the image quality is degraded. the fixed circle segmentation is likely to be confused by the irregular shapes and sizes of the spots in the second image ) and especially in the third image ). the other methods are corrupted mainly by the noise in the second and the third image. despite the high correlation with the reference expressions, the intensity given by hst segmentation method suffers from a relatively high bias. however, the low scattering of intensities given by hst, compared to that of fc and srg, explains the high correlation. hst has also less outliers on the lower side of the scatter plot. both the bias in hst and scattering in fc and srg are clearly visible in figure  <dig>  the results of the segmentation experiment are well in accordance with the basic assumptions. thus, the images produced by the proposed simulation model can be used for testing microarray image processing algorithms, and the model provides useful information about the available methods.

CONCLUSIONS
the previously proposed microarray simulation models have been suitable for specific simulation tasks only. the model we have proposed is modular and can be used in different kinds of analyzes. one of the most important properties of the proposed model is the ability to use almost any kind of input data. most models are limited to specific types of data, typically random data drawn from a predetermined distribution. thus, they can not exploit other data, such as data produced by network simulation. in addition, the proposed model utilizes several previously published error models in modeling the biological and measurement technology dependent variation. thus, the model is not dependent of any specific formulation of noise characteristics, and the performance of the analysis algorithms can effectively be tested under different noise assumptions. our model also supports both spotted two-channel and oligonucleotide based single-channel microarrays.

we have shown that the proposed model can be used to simulate microarray data which is valuable for validating various kind of data analysis algorithms. as an example, the performance of the microarray segmentation algorithms were compared under different noise conditions.

authors' contributions
mn and ma designed and implemented the microarray simulation model. ta was responsible for simulating the biological ground truth data. pr and al performed image processing experiments. oy-h conceived of the study and participated in the design and coordination. mn drafted the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
microarray simulation model. matlab implementation of the microarray simulation model.

click here for file

 acknowledgements
this work was funded by the national technology agency of finland and the academy of finland, project no.  <dig> ). we want to thank raija lehto and juho lahti for implementing the grid alignment and image segmentation tools.

figures and tables
s
                           type
s
                           spot
s
                           pix
s
                           movprob
s
                           mov
s
                           μ
sσ2
p
                           p
p
                           h
p
                           w
p
                           b
c
                           prob
c
                           num
c
                           cut
n
                           slides
n
                           time
n
                           channels
n
                           spots
n
                           height
n
                           width
b
                           space
b
                           curve
b
                           maxc
b
                           spots
b
                           height
b
                           width
hσ2
h
                           errors
h
                           bgnoise
h
                           bgvar
h
                           bggrad
h
                           noscratch
h
                           slength
h
                           swidth
h
                           noair
hμair
hσair2
h
                           bleed
h
                           bleedsize
h
                           bleeddist
r
                           power
r
                           b
r
                           eq
r
                           th
r
                           rch
r
                           gch
r
                           errors
r
                           angle
r
                           mm
μxi
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwf8oqbdawgaawcbagaemieag3aasbaawqaaiabdmgapbqabaaaleqaaaaa@31a1@, σxi2
μf, σf2
μg, σg2
μpj
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwf8oqbdawgaawcbagaemicaa3aasbaawqaaiabdqgaqbqabaaaleqaaaaa@3193@, σpj2
σεij2
σε2
σgi2
σcj2
σrij2
σbijk2
σn2
σε2
μα, σα2
ak, bk2
μλ, σλ2
