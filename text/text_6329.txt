BACKGROUND
for years, web-based systems have provided biological and medical scientists access to various data and computation resources to facilitate their scientific exploration. to achieve a fully functional data pipeline, scientists used to switch among browsers, copy from one web page, convert the obtained data and paste it to another one. the emergence of web services made their functionality accessible by computer programs which helped automate the data pipeline that was previously performed manually. today, the number of available web services has grown significantly. biocatalogue  <cit> , a curated catalogue of life science web services, has collected more than  <dig> services from over  <dig> providers, and a paper  <cit>  from  <dig> reported  <dig> publicly available services in molecular biology.

cancer biomedical informatics grid   <cit> , sponsored by the us national cancer institute , is an information network enabling cancer researchers and physicians to share data and knowledge, and thus accelerate the discovery of new cancer treatment methods. cancer grid   <cit>  is the underlying infrastructure of cabig, and is built on the globus toolkit grid middleware  <cit> . cagrid consists of web services as virtualized access points of data and analytical resources related to cancer detection, diagnosis, treatment and prevention. as of may  <dig>  cagrid hosts more than  <dig> data and analytical services. despite the diversity of cancer research related resources, cagrid organizes them into two categories: data resources are exposed as data services; analysis applications are exposed as analytical services. typical data services include human biospecimens, entrez genes, microarray, etc; typical analytical services include gene alignment, clustering, classification, principle component analysis, etc. most of cagrid services are accessible by all researchers without any security requirement. some of them limit their access to certain cagrid users, but researchers can obtain a cagrid credential easily and contact service owners for specific access permit.

due to diverse purposes and approaches of scientific investigations performed by researchers, few web services alone can fulfill the requirement of an in-silico experiment. instead, it is often required that services are composed and orchestrated in a given sequence to realize data pipelines, which are often called scientific workflows.

many scientific workflow systems, such as kepler  <cit> , triana  <cit> , trident  <cit>  and taverna  <cit> , and parallel scripting systems, such as swift  <cit>  and pegasus  <cit> , are available today to aid the execution of workflows. all these systems support the composition of local or remote executable components and execute them in a predefined sequence.

cagrid project selected taverna as its workflow execution system of choice due to its integration with web service technology and support for a wide range of web services, plug-in architecture to cater for easy integration of third party extensions, and a broad user base within the bioinformatics/biomedicine community  <cit> . the cagrid workflow toolkit, an extension to the taverna workflow system, is designed and implemented to ease building and running cagrid workflows. it provides users with support for various phases in using workflows: service discovery, composition and orchestration, data access, and secure service invocation, which have been identified by the cagrid community as challenging in a multi-institutional and cross-discipline domain.

 <dig>  service discovery -where to find services that are relevant to the scientific investigation of the user.

 <dig>  data access - what kind of data  can be obtained from a given service and how to transfer data from and to it.

 <dig>  service interaction - how to invoke services and maintain the session information in multi-steps interactions.

 <dig>  security enforcement - how to enforce authentication and authorization in service invocations and privacy and integrity in data transfers.

 <dig>  knowledge sharing - how to share workflows with the community, how to find out what other researches in the field are doing and to leverage the best practice from them.

we have followed two principles in the design and development of the toolkit. firstly, instead of reinventing the wheel, we have adopted the software tools which are widely used by the life science community, namely taverna and myexperiment  <cit> . we have provided added value to these tools by offering more advanced features in form of plug-ins that make cagrid infrastructure accessible from taverna. secondly, we have worked closely with scientists from cabig to fulfill their needs, while making our tool applicable to a broader user community that embraces a similar service infrastructure.

implementation
taverna workbench provides an extensible framework to interact with various executables, in our case, cagrid services. the cagrid workflow toolkit containing cagrid-specific extensions can be downloaded and installed in taverna workbench by pointing its plug-in manager to http://software.cagrid.org/taverna2/. please note that the five logical components in figure  <dig> correspond to only four physical plug-ins, i.e., cagrid-activity, cql-builder, cagrid-transfer-activity and cds-activity. this is because the five components on the diagram give a more abstract impression of the features the toolkit offers. however, in the actual software implementation we needed to comply with the taverna plug-in infrastructure that resulted in spreading the logical functionality to four plug-ins. the correspondence between the logical components and the actual taverna plug-ins is explained in table  <dig> 

service discovery
in a typical service-oriented infrastructure like cagrid, the address of a service of interest is not usually known to end users. this makes the task of locating appropriate services a challenge for the user, given the fact that cagrid now comprises more than  <dig> services storing different data or providing varied analysis capabilities, which are deployed at geographically distributed institutions.

on top of the globus index service  <cit> , cagrid provides the mechanism to discover services of interest by querying a live service registry. all cagrid services are required to publish the metadata that describes their functionality using the wsrf   <cit> , a family of specifications for web services to expose state and property information. this information is aggregated in the registry index service and used to find out information about the currently running services and their current wsdl addresses. clients can then query this aggregated information using standard wsrf operations.

the services' descriptive metadata includes service name, wsdl, hosting research center, operations with associated data types, and the semantic annotation on the aforementioned metadata. service discovery component locates cagrid services by querying the index service. it provides three types of querying methods leveraging cagrid's metadata and indexing infrastructure:

• string based querying performs free text searching in service descriptions. for example, one can search for services whose descriptions contain string 'array'.

• property based querying performs search towards pre-defined service properties. for example, to locate services hosted by ncicb , or whose name is caarraysvc, etc.

• semantic based querying. cagrid uses an ontology called nci enterprise vocabulary services   <cit>  to annotate services and their associated data. a vocabulary item in evs is called concept and the concept code is used to uniquely identify it. semantic based approach allows users to locate services which are annotated with some concept code .

data access
cagrid data service  <cit>  is used to share cancer research data. cagrid data services implement an object-oriented virtualization on top of the backend data source. based on this virtualization, data items can be searched for by their object classes, properties, and association relations. cagrid also defines a xml based object oriented query language called cagrid query language   <cit>  for querying purpose. data access component provides a gui to build cql queries against data services, and users can browse the data object model graph and build a cql clause easily without knowing the syntax of it.

another feature offered by the data access component is the data transfer tool called cagrid transfer. it leverages the cagrid transfer utility  <cit>  to move files between services and clients using http protocol, without embedding them in soap messages. in our practice, we found this is more efficient since it avoids data serialization or deserialization and saves a lot of memory on both client and server side.

service invocation
cagrid services use wsrf extension to enable stateful communications with clients. service invocation component implements wsrf specification so that it can interact with services in a stateful manner. this feature is extremely useful in a multi-step interaction with a service, which is quite common in scientific applications. for example, a scientist submits a data set to a cagrid service to run a computation-intensive task. since the computation usually takes some time in the backend system, result cannot be returned in a synchronous manner. in this case the service chooses to synchronously return an epr  which identifies the state of the service interaction. at a later time, the scientist uses the epr as a handler to query the status of the task that he submitted earlier, and obtain the result when it is ready. the wsrf implementation on the server side uses the epr to identify the instance of the service and return the specific result data appropriately. the issuance and management of an epr is handled by the globus toolkit and the service invocation component, and is transparent to users.

security enforcement
security is an important aspect in biomedical applications. scientists want to ensure the privacy, integrity, authentication and authorization in the sharing of data and computation resources in a multi-institutional environment. for example, scientists may constrain the access to their data to certain organizations or groups of users ; they may want to access their data in an encrypted way so no other people can intercept the content ; they may also want an assurance that the data the recipient gets is exactly the same as sent by the sender . all these issues have been addressed by the grid security infrastructure   <cit>  in the globus toolkit. gsi leverages public key infrastructure  and x. <dig> certificates  <cit>  to achieve these security requirements.

cagrid devised the grid authentication and authorization with reliably distributed services   <cit>  as an extension to the gsi to provide services and tools for the administration and enforcement of security policies in cagrid. security enforcement component  in figure 1) allows users to log in to cagrid, obtain a grid credential from the authentication service, store it locally and use it for subsequent service invocations for the lifetime of the credential . in addition to this single-sign-on feature, the security enforcement component also allows credential delegation so that a service can act on behalf of the user. for example, the federated query processor  service can use a delegated credential from a user, query multiple data services on the user's behalf, aggregate the results and forward them back to the user. more comprehensive explanation and an example are given in the results section.

knowledge sharing
myexperiment  <cit>  is a sister project of taverna and a web-based collaborative platform for sharing workflows and related research objects such as data items, papers, software bundles, etc. knowledge sharing component simply uses myexperiment website to publish the workflows  <cit>  built and used by cagrid community. these workflows contain detailed descriptions of what the workflows are set to achieve and instructions on how to use them . they also embed knowledge on how to use individual services as well as how to orchestrate multiple services into a full-fledged data pipeline. these workflows range from simple tasks such as querying microarray data and retrieving medical images, to full-fledged routines such as federated query over multiple data sources and lymphoma type prediction . for space limit we do not iterate over all the workflows and users are encouraged to visit the link given in  <cit>  to find the ones they are interested in. these workflows are modelled in a graphical way and organized into meaningful modules, so that they can easily be reused out of the box, or be modified and repurposed.

RESULTS
once cagrid workflow toolkit is installed in the taverna workbench, the four plug-ins show up in taverna's service panel : cagrid-activity plug-in  for service discovery, invocation and security; cql-builder plug-in  for visualized construction of cql against data services; cagrid-transfer-activity plug-in  for file transfers between clients and services; cds-activity plug-in  for credential delegation. these plug-ins can be utilized from workflows to access cagrid functionality.

in this section, we show the usage of these plug-ins through several typical application scenarios. a more complete list of functions can be found from the user manual and more example workflows from myexperiment  <cit> . for a more complete reference on how to use other types of services shown in figure  <dig>  please refer to  <cit> .

scenario 1: service discovery
as shown in figure  <dig>  there are two ways to add a cagrid service into a taverna workflow. in the case wsdl url of a cagrid service is known, it can be directly added to taverna's service panel. in a more general case, when users do not know which service to use, they first need to use the service discovery component. figure  <dig> illustrates a service discovery combining the string, property and semantic based approaches. in this case, we look for services whose description contains array, are hosted by ncicb, and are annotated with concept code c <dig>  figure  <dig> shows the search dialog  and the result service with operations . the discovery result is the ncicb hosted caarray service, to be explained in more detail in scenario  <dig> next.

scenario 2: access of caarray data using cql-builder and cagrid-transfer
caarray  <cit>  is an open-source, web and programmatically accessible microarray data management system developed by cabig. since it acquires, disseminates and aggregates a large volume of cancer related array data, cancer researchers in cabig frequently start their in-silico investigation by querying and retrieving data from caarray, and subsequently analyze them using tools and services on and off the cagrid.

in the cql builder gui , users can choose which service to query by giving the service's url, and then its object-oriented data model is populated and ready to be selected. users can select one of them  and edit the criteria clause .

scenario 3: secured query and credential delegation
the cagrid federated query processor  service provides a mechanism to perform distributed queries over multiple data services and result aggregation. fqp is a secure service so that a user who invokes it needs to use his x. <dig> certificate to encrypt or sign the invocation message. however, it is not sufficient that the fqp authenticates the invoker, since the fqp subsequently needs to query multiple data services on behalf of the invoker. therefore the fqp must be supplied with the invoker's credential so that those data services can give fqp the same privileges they would give to the original invoker.

gsi introduces x. <dig> proxy certificates  <cit>  that allow a user  to assign dynamically a new x. <dig> identity to an entity  and then delegate a subset of his rights to that entity. users create a proxy certificate by issuing a new x. <dig> certificate signed using their own credentials instead of involving a ca. in cagrid, the credential delegation service  is a wsrf-compliant grid service that enables users/services  to delegate their grid credentials to other users/services  such that the delegatee may act on the delegator's behalf.

in figure  <dig>  the fqp service  is configured as a secure service and the user of this workflow needs to provide his certificate to invoke it along with a cql clause . besides that, the invoker needs to ask cds to issue a delegated credential and return the epr of it . fqp uses this epr to fetch the actual delegated credential also from cds and uses it to invoke multiple data services on behalf of the invoker, aggregate and return the results  to the invoker.

scenario 4: lymphoma type prediction as a complex case
here we describe a real-life workflow built for cabig users to illustrate a fairly complex scenario. the workflow enables cancer diagnosis based on microarray analysis  <cit> .

as shown in figure  <dig>  the workflow starts with the extraction of hybridization data from a given experiment in the aforementioned caarray database . these hybridizations are from tumor samples that belong to two different lymphoma types, i.e., diffuse large b-cell lymphoma  and follicular lymphoma . next, the hybridization data are pre-processed  and then used to learn a classification model using two machine learning methods, i.e., support vector machine  and k-nearest neighbor . this model is used for lymphoma type prediction when an unknown sample comes in . the type prediction result is shown in the right part of figure  <dig>  samplename represents different tumor samples; trueclass is the lymphoma type obtained by manual investigation ; svmpredclass and knnpredclass represent the types predicted by svm and knn, respectively. prediction errors are highlighted. while figure  <dig> shows the skeleton of the lymphoma workflow by condensing the nested workflows, figure  <dig> gives a detailed view with nested workflows expanded.

discussion
several other taverna extensions for specific uses exist, such as cdk-taverna  <cit>  and an r-extension  <cit> . cdk-taverna is an extension to access a cheminformatics library called cdk, and the r-extension allows users to submit a statistical calculation job to a remote r server. the cagrid extension of taverna is implemented from the perspective of service computing, enabling users to access a broad range of remote services in a more standard, secure and scalable manner. in this way scientists can greatly improve their productivity by accessing powerful information provision tools and automate their data analysis, without knowledge of, or control over, the internal workings of those tools. in addition to cagrid services, we have successfully applied the cagrid workflow toolkit in other projects which use similar services technology stack, for example, the cardiovascular research grid   <cit> . this effort is part of the service-oriented science mission  <cit> .

new challenges rise in the cabig community when more users rely on the cagrid workflow toolkit to document and execute their in-silico experiments. while the current toolkit offers day-to-day functions to search, compose, orchestrate services and share workflows, it does not address much of knowledge transfer and reuse. a framework called caas   <cit>  is positioned to overcome the isolated nature of current service composition approaches in which knowledge can neither accumulate nor be shared among people who do similar research. in short, caas is a recommendation framework that provides composition recommendations to stakeholders and collects feedback from them. it leverages cutting edge technologies like social network analysis, web  <dig> , recommendation systems, etc.

CONCLUSIONS
in biomedicine and bioinformatics, service computing infrastructure now plays a key role in the integration of various data and computational resources in a uniformed manner. workflow technology is widely used in the orchestration of multiple services to facilitate in-silico research. by extending the taverna workbench, cagrid workflow toolkit provided a comprehensive solution to compose and coordinate services in cagrid, which would otherwise remain isolated and disconnected from each other. using it users can access more than  <dig> services and are offered with a rich set of features including discovery of data and analytical services, query and transfer of data, security protections for service invocations, state management in service interactions, and sharing of workflows, experiences and best practices. although we currently focus on application domains such as cancer  and cardiovascular , the proposed solution does not limit itself to any specific application and general enough to be applicable and reusable within other service-computing infrastructures.

availability and requirements
* project name: cagrid workflow toolkit

* project home page: http://wiki.cagrid.org/display/workflow/

* operating system: platform independent

* programming language: java

* other requirements: java  <dig> . <dig> or higher, http://java.sun.com/. taverna  <dig> . <dig> 

http://www.taverna.org.uk/download/taverna-2-1/

* license: cabig® open source software license cagrid  <dig> ,

http://cagrid.org/display/downloads/cagrid+ <dig> +license

* any restrictions to use by non-academics: none

authors' contributions
rm and if conceived the project and led its design and coordination. wt was responsible for writing the manuscript. wt developed the cagrid workflow toolkit with the help from ds, ss-r and an, and composed the cagrid workflows uploaded to myexperiment. ss-r and an are developers on the taverna and mygrid projects which are led by cag. ss-r and an also developed the initial version of cagrid-activity plug-in. all of the authors have read and approved the final manuscript.

