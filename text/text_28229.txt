BACKGROUND
repeats of high sequence complexity – mostly transposable elements  – account for a large portion of many eukaryotic genomes. in humans they comprise almost half of the  genome  <cit> , and in some plants  most of the dna  is repetitive  <cit> . in addition to genome size evolution, repetitive sequences are fundamentally implicated in structural and functional genome evolution. sequence similarity and complementarity form the basis of many biochemical reactions involving nucleic acids. hence the occurrence of repeated sequences may mediate genome, epigenome and transcriptome interactions, such as chromosomal rearrangements  <cit> , centromere  <cit>  and telomere  <cit>  function, and chromatin remodelling and gene silencing mediated by repeat-induced small rnas  <cit> . in addition to the effects of sequence repetition, te insertions may have sequence-specific phenotypic consequences. for instance, they encode regulatory signals that can potentially affect gene expression  <cit> .

given the importance of repetitive dna sequences for genome structure and evolution, systematic annotation of repeats is essential for inferring biological organisation and function from genomic sequences. when large amounts of sequence data are analysed, automation of the annotation procedure is indispensable. repeatmasker <cit>  has become the default computational tool for automated repeat annotation. despite the current indispensability and efficiency of repeatmasker in annotating genomic regions similar to known families of repeats, the repeatmasker annotation contains relatively little information on the origin and evolution of repeats. for example, if a given te insertion is subsequently targeted by further insertions, the original te sequence will be interrupted and fragmented by sequences of later origin. in such a situation repeatmasker may annotate multiple sequence similarity hits to the given te family without establishing the common origin of these sequences  <cit> , and no information on the temporal order of insertion of overlapping repetitive elements is obtained without human analysis. this situation is common as tes are non-randomly distributed within genomes and are often 'nested', i.e. inserted into another te. nesting has been observed in diverse genomes across the eukaryotic kingdom  <cit> . thus, post-processing is necessary to improve the biological interpretation of repeatmasker annotations .

here i describe reannotate , a computational tool for automated defragmentation and evolutionary analysis of  repetitive dna elements . the term re-annotation reflects the use of repeatmasker annotation as input to reannotate, and in this context it means neither the prediction of previously unannotated sequence features  nor the detection of false positives in the original annotation. rather, it means adding "layers" of information that contain new kinds of inferences not present in the original annotation. reannotate automatically generates up to three layers of re-annotation: i) defragmentation, via construction of repetitive element "models" consisting of sequence features originally annotated as separate similarity hits; ii) order of insertion, where te models constructed in  overlap; and iii) age, for long terminal repeat -elements in particular . in addition to annotation, reannotate can output the sequences of defragmented repetitive element models, with appropriate gaps so that elements classified in a given family are all pairwise aligned to the family reference sequence; in this form they can easily be multiply aligned  and are ready for phylogenetic analysis.

reannotate is ready to re-annotate existing repeatmasker annotation – either in its original format or as repeatmasker track tables from the ucsc genome browser web site . the first two layers of automated re-annotation can be visualised in the apollo genome browser  <cit> , and in addition they can be combined with other kinds of annotation , facilitating direct human analysis when required.

among the functions performed by reannotate, defragmentation of genomic sequence regions homologous to tes has been previously addressed by other tools  <cit> . matcher <cit>  uses a dynamic programming algorithm to defragment tes, but does not include biological constraints that can assist the defragmentation process. plotrep  <cit>  is an interactive tool that assists manual defragmentation but cannot provide fully automated defragmentation necessary for genome scale analysis. recently, tcf  <cit>  has become available for automated identification and defragmentation of te clusters, but tcf does not attempt to defragment all tes – notably pieces of ltr-elements found in clusters, and fragments of tes nested within another te. reannotate provides fully automated defragmentation of any kind of te using biologically informed constraints. importantly, reannotate is able to defragment ltr-elements, which are often represented by separate query sequences for ltrs and internal regions, and to estimate the age of ltr-element insertion events. other important differences between reannotate and tcf include: i) tcf was developed for mammalian genomes and visualisation of annotation is limited to genomes available in the ucsc genome browser web site, whilst reannotate is ready for the re-annotation of any genome and its visualisation ; ii) tcf effectively defragments only tes that are interrupted by other previously characterised te sequences, whilst reannotate allows interruptions by any kind of sequence  and also re-annotates complex repeats other than tes; iii) parameters in the reannotate defragmentation algorithm may be set by users to adapt the algorithm to the repetitive content of a particular genome; and iv) the annotation produced by reannotate has been validated by comparison with manually curated annotation of sequences containing highly nested clusters of tes. during the write-up of this paper, another tool, tenest <cit> , has become available that has similar functionality to reannotate. however, there are also important differences between reannotate and tenest: i) tenest currently uses plant repeat databases, and is therefore designed to annotate plant genomes, whilst reannotate is ready to annotate any genome. ii) tenest itself manages the sequence similarity searches  against the repeat library, whilst reannotate processes the similarity annotation produced by repeatmasker. the similarity search is the most computationally expensive step in the annotation process, and because repeatmasker annotation is already available for many genomic sequences, the re-annotation of such sequences is computationally cheaper with reannotate. iii) the visualisation method employed by reannotate allows the repetitive dna annotation to be combined with other kinds of genome annotation .

in order to illustrate the kind of analysis that become possible with reannotate, an application of whole chromosome re-annotation is provided for a human sex chromosome and two autosomes, providing analyses of i) repetitive element patterns of nesting , and ii) the age distribution of endogenous retroviruses.

reannotate is open source and freely available under the gnu public license at 

implementation
repetitive element model construction and re-annotation algorithm
a. input repeatmaskerannotation
repeatmasker annotation either in its original format or as a ucsc table is input to reannotate. if this annotation reports similarity to n different reference repetitive elements, let r = {r <dig>  ... rn} denote this library set of n reference elements. here i call a hit to the reference element r a query sequence region homologous to r and with higher sequence similarity to r than to any other reference element in r, annotated by repeatmasker. as an example, a visual representation of the input annotation is given in figure 1a.

b. defragmentation of repetitive elements
reannotate constructs repetitive element models assigned to the different families in the reference library r. a given reference element r defines a set of hits along the query sequence. reannotate will search for subsets of hits to r that are to be defragmented into an element model if they satisfy the criteria:

 colinearity with the reference element.

 maximum span.

criterion  requires that the defragmented hits be in the same orientation on the query sequence, and that they match consecutive  regions of the reference element r.  an example is illustrated in figure 1b. the reference element in question is prem2_zm_i , and hits to this reference element along the maize sequence are highlighted in magenta. reannotate constructed a model defragmenting the three innermost hits to prem2_zm_i, shown in red, which respectively match nucleotide positions 1- <dig>  783- <dig>  and 4956- <dig> along the reference prem2_zm_i sequence. note that there is a small overlap between the matching coordinates along the reference sequence , which is an ostensible deviation from strict colinearity between the three hits on the maize chromosome and the reference sequence. this situation is common and is due to uncertainty about the ends of local alignments. reannotate has a user-definable tolerance parameter ϵ in the requirement for colinearity between the element model and the reference element that allows for an overlap  between the matching coordinates of two defragmented hits along the reference sequence, if o ≤ ϵ. .

criterion  requires that the span  of candidate repetitive element models do not exceed a  length δ .

for each reference family in the library r, reannotate searches for candidate repetitive element models that satisfy  and , but only constructs models that additionally satisfy:

 uniqueness.

 maximum defragmentation.

 recursive model nesting.

criterion  requires that constructed models comprise mutually exclusive sets of hits.

if two candidate models are such that all the hits defragmented in one model are present in the other model that defragments a higher number of hits, then criterion  requires that only the model defragmenting the maximum number of hits be constructed.

if two candidate models  comprise different sets of hits with at least one hit in common, then criterion  requires that the candidate model whose hits span the narrower region of the query sequence be constructed. if a hierarchy of such models exists then this pairwise criterion is repeated recursively. additionally, if two candidate models  are such that a) they comprise non-intersecting sets of hits and b) they span overlapping regions of the query sequence, then criterion  requires that they cannot both be constructed unless the span of one candidate model lies entirely within the span of the other.

defragmentation of chromosomal elements matching multiple reference sequences
if, upon human inspection of either the original repeatmasker annotation or the automated re-annotation, the occurrence of fragments of a given repetitive element matching multiple reference sequences is detected, a user may supply as input to reannotate a text file containing lists of "related" reference elements, so that hits to different reference elements within one such list may be considered for defragmentation into a repetitive element model. the use of this option was essential for the re-annotation and analysis of human endogenous retroviruses in results; the erv names equivalence lists are provided in additional file  <dig> 

c. defragmentation of ltr-elements
the defragmentation procedure described in step b above applies to any high-complexity repetitive element. both the ltr and the internal region  of a given ltr-element family may be found as dispersed repeats. fossil remains of a given insertion may contain only ltr sequence or only internal region  sequence. reannotate performs additional analysis of ltr-elements  if the reference library contains separate entries for the ltr and ir sequences. names of reference ltr and ir elements of the same family should be identical  apart from a suffix. reference ltr names do not need a suffix, but they may be suffixed with either the string '-ltr' or '_ltr' . reference ir names should be suffixed with either '-int', '_int', '-i', or '_i' . this is the naming convention used in repbase update for ltr-elements in most genomes, though currently with the notable exception of human/primate endogenous retroviruses .

models of ltrs and irs are separately constructed with the defragmentation algorithm in step b. reannotate then constructs higher-order models combining models of defragmented ltrs and defragmented irs. higher-order model construction proceeds with requirements analogous to those in step b, but now the colinearity criterion refers to the ltr-ir-ltr structure of a canonical ltr-element. an example is illustrated in figure 1c. recursive model nesting  is used to defragment ltr-element structures within structures. where nested structures corresponding to the same family are identified, these are resolved by mapping the coordinates of the component ltr or ir fragments onto their respective reference sequences. a nested element should interrupt the nesting element. .

if a candidate higher-order model contains only one ltr and one ir model, a higher-order model for a truncated ltr-element is constructed only if the ltr and ir are separated on the query by less than a  distance σ . furthermore, truncated higher-order models are only constructed when the constituent ltr and ir models cannot be accommodated in a model of a 'complete' ltr-element.

reannotate classifies ltr-element models as either  'complete', if they contain at least part of the sequence of both their original ltrs and of the ir; or  'truncated', if they are not 'complete' and not a 'solo' ltr; or  a 'solo' ltr, if a model contains only sequence corresponding to a single ltr, and if this is separated from the nearest ltr or ir model – of the same family and inserted in the same orientation – by a distance greater than σ.  flanking the original element, however reannotate currently does not check for tsds, and such a check would only be possible if the termini of the original element had not been truncated).

dna rearrangements other than transposition
reannotate will flag the possibility that ltr-element sequences have been involved in dna rearrangements other than transposition of an entire element when an ir-ltr-ir structure is detected, i.e. two ir models flanking an ltr model of the same family, in the same orientation. here "flanking" means that either i) the ltr model and the ir models are contiguous on the query sequence , and that neighbouring ends have no missing sequence  – this excludes the possibility of a nested insertion of an ir or ltr of the same family being considered; or ii) the ltr and ir models are not contiguous on the query and they are not complete, but the length of the gaps between them equals the amount of sequence they are missing  – this includes structures in which the ir-ltr boundaries have been obliterated , or structures with segments that are not homologous to the closest library sequence; or  the structure is highly symmetrical, i.e. the two ir models are equidistant from the ltr model between them , and provided that this separation on the query is less than σ.

d. inference of nesting order
after all hits to high-complexity repetitive elements have been defragmented into element models, any nested structures can be resolved by comparing the coordinate ranges of the models along the query sequence. if the span of a given model is contained within the span of another model, the former is classified as 'nested' in the latter . an example is continued from step c and shown in figure 1d.

reannotate also provides an optional algorithm for the identification of 'truncated nesting': if one terminus of a given element model interrupts another model, the interrupting element may be classified as nested even if the interrupted element does not contain detectable sequence on both sides of the interrupting element. truncated nesting is annotated only if there is no sequence missing from the the interrupting terminus of the interrupting element .

e. dating of ltr-elements
for each  complete ltr-element model constructed, reannotate outputs the gapped sequence  of each intra-element ltr separately. reannotate then generates automated intra-element ltr alignments using the clustalw  <cit>  alignment program. the number of nucleotide substitutions per site  between intra-element ltr sequences  is then estimated  using the kimura 2-parameter model  <cit> . if a rate of substitutions per site  is provided, the time elapsed since the insertion of a 'complete' ltr-element  is estimated as t=k2s. in addition to the variance propagated from the estimation of k, the variance of the time estimate  accounts for the fact that the accumulation of nucleotide substitutions occurs stochastically over time, which can be modeled as a poisson process; the variance in t is then estimated as σt2=2+kl <dig>  where σk is the standard deviation of the estimate of k, and l is the length of the intra-element ltr alignment.

gapped sequence output
each repetitive element model constructed by reannotate is associated with a given reference element r; each similarity hit defragmented into a given model is locally aligned to r by the sequence similarity search engine used with repeatmasker, either wublast <cit>  or cross_match <cit> . for each model reannotate outputs the chromosomal sequences  of its hits, separated by gaps if necessary. the gaps refer to local alignment positions along r: in the output model sequence the gap length between two hits does not correspond to their distance along the chromosomal sequence, but rather to the distance between the hits' terminal alignment positions along r. terminal gaps are also included if the hits to do not align as far as the termini of r. an example is given in figure  <dig> 

if reannotate is run with the option to estimate the age of structurally complete ltr-element models then the clustalw <dig> pairwise alignments of gapped intra-element ltr sequences are also output.

evaluation of reannotate's predictions
accuracy of the defragmentation layer of re-annotation was assessed by its sensitivity and specificity at the element level. a high sensitivity would indicate that most of the hits in the input repeatmasker annotation that correspond to fragmented repetitive elements in the manually annotated query sequence have been correctly assembled into multi-hit element models by reannotate. a high specificity would indicate that few hits that are not part of fragmented elements have been incorrectly included into multi-hit element models. the sensitivity and specificity were respectively calculated according to the formulas tptp+fn and tntn+fp, where tp  is the number of hits correctly assembled into multi-hit repetitive element models; fn  is the number of separate element models constructed by reannotate that correspond to the same elements in the manual annotation; tn  is the number of hits correctly modeled as single-hit elements; and fp  is the number of hits incorrectly assembled into multi-hit models. accuracy of both the nesting structure and the time layers of re-annotation was calculated as the proportion of reannotate predictions in agreement with manually curated annotation.

input to reannotate
analysis of maize and wheat sequences
both the maize  and wheat  sequences were annotated with repeatmasker using a cutoff score of  <dig>  maize repeat sequences in the repbase update <cit>  repeatmaskerlibrary version  <dig> were used as a reference library, supplemented with sequences from the tigr zea repeat database v <dig>   <cit> . library elements cinful1_zm and cinful2_zm are closely related, and hits to these elements were considered together for defragmentation into element models. in the diploid wheat analysis the monocot library from the repbase update repeatmaskerlibrary version  <dig> was used.

analysis of human and fly sequences
repeatmasker annotation was downloaded directly from the university of california at santa cruz  genome browser web site .

annotation of the human genome sequences was further processed with a custom script  to suffix the names of reference ltr and ir elements for defragmentation. additionally, a file with erv reference name equivalence lists  was input to reannotate. this is because many herv reference sequences in repbase update  are closely related but may have disparate names, and for most erv families the corresponding ltr and ir reference sequences have different names.

re-annotation output
the main annotation is output to a tab-delimited text file. as an example, the annotation of the maize sequence analysed here is given in additional file  <dig>  and its data fields are described in additional file  <dig> 

a copy of the input repeatmasker annotation is also output, with the original "id" column replaced with identifiers of defragmented elements in the main reannotate annotation file.

benchmarking of processing time
in order to illustrate the computational cost of re-annotation, i have benchmarked the cpu time used by reannotate for processing the entire arabidopsis thaliana genome. repeatmasker annotation of the a. thaliana genome was downloaded from , and the corresponding genome sequence was downloaded from .

running  on a  <dig>  ghz intel e <dig> processor, reannotate took:

•  <dig> cpu seconds to re-annotate the entire genome and output sequence. out of these  <dig> seconds,  <dig> seconds were used by clustalw <dig> to produce alignments. .

•  <dig> cpu seconds  in total, to re-annotate the five a. thaliana chromosomes if the input repeatmasker annotation was processed separately for each chromosome .

•  <dig> cpu seconds  to re-annotate the entire genome when equivalence lists of reference repeats were used to defragment chromosomal elements matching multiple reference sequences. . .

processing times will be much longer if many equivalence lists  are input to reannotate.

RESULTS
re-annotation
reannotate creates up to three new 'layers' of repetitive dna annotation over existing repeatmasker <cit>  annotation taken as input. the new layers of annotation are:

layer  <dig> – defragmentation
after integration, the sequence of a repetitive element may become fragmented by subsequent insertion/deletion events or other rearrangements. reannotate generates models of repetitive element insertion events into an ancestral state of a query genomic sequence, in order to identify query sequence regions that originated in the same insertion event and that correspond to  multiple hits in the input repeatmasker annotation. therefore for a given re-annotated query sequence the number of te hits in the repeatmasker annotation is usually greater than the total number of repetitive element models obtained from the defragmentation of hits performed by reannotate . figure 3a shows a visual representation of the repeatmasker annotation of multiple similarity hits to tes along a dna sequence. figure 3b shows, as an example, the re-annotation of  <dig> similarity hits that were defragmented into the same te model.

fragmentation of repetitive element sequences in the repeatmasker annotation may also result from divergent or chimeric elements relative to the reference sequences used in the similarity searches, or from matches to closely related sequences in the reference library, rather than sequence evolution of a repetitive element since its integration into the genome. reannotate provides a facility to defragment hits in this situation as well . additionally, dna re-arrangements other than transposition of an entire element  may occur involving repetitive elements after their integration; in this situation a single insertion model is not adequate to describe all of a query sequence that is homologous to a given repetitive element in the re-arranged region. currently for ltr-elements  reannotate checks for the possibility of re-arrangements that result in multiplication of segments of elements, and generates models of such re-arrangements .

repeatmasker annotation implicitly contains the chromosomal distribution of sequence similarity hits to dispersed repeats along the query sequence. this first layer of re-annotation consequently contains the chromosomal distribution of repetitive element integration events.

layer  <dig> – nesting structure
as the genomic distribution of repetitive elements is not random, families of elements may vary in their distribution patterns, which may reflect biases towards chromatin states or proximity to particular classes of genes or other sequence elements  <cit> . clustering of repeats occurs not only at the chromosomal level, but also at smaller scales. in eukaryotic genomes, repeat deserts are commonly punctuated by regions of high repeat density, where subsequent insertions have occurred into previous repetitive element insertions   <cit> . building upon the insertion models of the defragmentation layer of re-annotation, reannotate resolves any nested structures among the repetitive elements identified. figure 3c shows resolved clusters of re-annotated tes. the temporal order of insertion events in nested structures is reflected by the nesting level of each element model.

layer  <dig> – time
the direct, long terminal repeats  of any individual ltr-retrotransposon or retrovirus are created from the same parent template, and are therefore identical at the time the element integrates into the host molecule. nucleotide substitutions in either of the two intra-element ltr sequences can accumulate as time passes, so that their sequence divergence works as a molecular timer, set to zero at the time of integration  <cit> . reannotate can generate automated intra-element ltr alignments and then estimate the number of nucleotide substitutions per site  that have occurred between the intra-element ltr of a given element since its insertion event. estimates of k are a relative measure of time; but if the user can provide a rate of nucleotide substitution, estimates of k can be converted to estimates of absolute ages of  'complete' ltr-elements. . although direct dating of insertions is only available for 'complete' ltr-elements , in nested structures bounds on the ages of other kinds of sequence elements can be estimated by using the age estimate for an overlapping ltr-element. if a 'complete' ltr-element is found in a nested cluster of repetitive elements, the previous nesting structure layer of re-annotation allows the placement of i) an upper bound on the age of any elements nested within, and ii) a lower bound on the age of any elements nesting, the ltr-element. figure 3d shows examples of both direct dating of insertion events and indirectly using the nesting structure. additionally, indirect dating of host molecules is possible in cases such as i) segmental duplications with a differential content of, and ii) haplotypes bearing insertional polymorphism for, 'complete' ltr-elements. here a paleontological analogy is particularly apt, as the dating of both the molecular fossil and its sequence context are interrelated, just as real fossils can be dated by either absolute  or relative  methods. in eukaryotic genomes nesting of repetitive elements  and insertional polymorphisms  <cit> , for example] are common – in plants particularly for ltr-elements.

this layer of re-annotation implicitly contains the age distribution of 'complete' ltr-elements, and bounds on the ages of other kinds of sequences that may be found overlapping ltr-elements.

visualisation of re-annotation
in addition to the main re-annotation output to tab-delimited text files, for visualisation and human analysis of the automated annotation reannotate generates a general feature format  annotation file. the gff annotation can be visualised  in the apollo genome browser  <cit> . figure 3c is taken from a screenshot of such a visualisation. the gff output can be combined with any other kinds of annotation of the query sequences that are available in the gff format.

sequence output
reannotate retrieves  and assembles the sequence of all repetitive element models constructed. for each element model, it outputs the sequences of all the fossil fragments associated with a given model without intervening  regions of the query sequence . each pair of neighbouring fragment sequences is either i) output contiguously if they match contiguous segments of the reference sequence, or ii) output separated by a gap of length equal to distance between the respective matching segments of the reference sequence . thus these gapped sequences reflect the element insertion model and exclude the sequence of subsequent insertions into the element. for each 'family' of repeats : gapped element sequences are all aligned relative to the reference sequence. alignment of all the elements within a family, whose sequences may contain large indels relative to one another, is a powerful feature for the evolutionary  analysis of repetitive elements.

validation: nested transposable elements in cereal genomes
in order to validate annotation and evolutionary analysis generated by reannotate, i have re-annotated repetitive elements in maize and wheat sequences, and then compared their automated re-annotation with published human annotation of these sequences. the term 'molecular paleontology' was coined by sanmiguel et al.  <cit> , who produced manual annotation of nested clusters of ltr-retrotransposons within  <dig> kb around the adh <dig> locus of a particular maize cultivar and inferred a doubling of the maize genome size due to ltr-retrotransposon activity over a period of three million years – an inference that was possible by dating  insertion events. approximately  <dig> kb of contiguous sequence and annotation for this locus are available. detailed annotation of highly nested clusters of ltr-retrotransposons  and other types of tes is also available for a  <dig> kb segment of chromosome 5am of the diploid wheat triticum monococcum  <cit> . both the  <dig> kb- and  <dig> kb-long maize and diploid wheat sequences were annotated with repeatmasker and re-annotated with reannotate . the automated re-annotation and evolutionary analyses are illustrated in figure  <dig>  and figure  <dig> , and compared to the manually curated annotation in table  <dig> 

manual annotation results of maize  <cit>  and diploid wheat  <cit>  sequences are shown in italics. reannotate results are shown in regular font style. only elements spanning sequences that were annotated as tes both in the manual annotation and in the input  to the automated re-annotation are listed. in the first column letters indicate maize elements and correspond to labels in figure 3c, numbers indicate wheat elements and labels in figure  <dig> 

a uppercase names correspond to reference element sequences in repbase update , numbers correspond to reference sequences in the tigr zea repeat database. rows without an entry for the manually annotated repeat name indicate that reannotate constructed multiple models  corresponding to a single element in the manual annotation: for instance, sabrina_f2- <dig> corresponds to three automated models, a result due to the fact that  different ru reference elements, sabrina2_tm, sabrina3_tm and sabrina_hv are closely related, and were best matches  to different segments of sabrina_f2- <dig> 

b number of similarity hits reported by repeatmasker that were defragmented into a single element model by reannotate.

c number of repetitive elements nesting a given element.  the first wheat element listed was annotated in  <cit>  to be inserted into a te sequence with no detectable similarity to reference elements in ru ; the last wheat element was annotated by reannotate to be interrupting a fragment of an element homologous to claudia1_tm, which is not present in the manual annotation.

d estimated number of nucleotide substitutions between intra-element ltrs.  reannotate did not date milt because the 3' ltr is in inverse orientation relative to the rest of the element: an element model was built including the milt 5' ltr and internal region, and another model for the 3' ltr.  eway g1- <dig> was originally annotated as having identical ltrs, but they are in fact quite divergent.  elements ji- <dig>  tekay and kake- <dig> were dated in the original annotation, but these elements are truncated at the ends of the available  <dig> kb of contiguous sequence re-annotated here.

e estimated time of insertion , obtained with the substitution rate for the adh loci of grasses  <cit> . the standard deviations computed by reannotate are larger than in the manual annotation: in the latter the variance in time was propagated from the variance in k, whilst reannotate additionally accounts for the poisson variance  in the accumulation of nucleotide substitutions.

although the analyses above focused on the annotation of ltr-elements, they also validate the automated re-annotation of other kinds of repetitive elements and were chosen for two main reasons: i) models of ltr-elements in the first  layer of re-annotation are more complex than models of other repeats. ltr-element models involve defragmentation of ltrs  and defragmentation of the internal regions  using the same algorithm as for other repeats, and an additional algorithm to defragment ltrs and internal regions modeled as parts of the structure of the same element . therefore validation of the automated defragmentation of ltr-elements can be extended to other repetitive elements. the second layer  of re-annotation builds on the first layer and uses the same algorithm for all elements. finally, the third layer  of re-annotation is directly applicable only to  complete ltr-elements . note that results for the time layer are obtained independently from any information on nesting structure . the time layer annotation of the ltr-elements in the maize and wheat sequences analysed is completely consistent with the nesting structure annotation , adding support to the method for dating ltr-elements. consistency between nesting structure and age estimates  has also been shown for mammalian tes using tcf  <cit> , suggesting that this result is a general feature of the molecular paleontology of tes. ii) for the maize and wheat sequences analysed, manually curated annotation of transposable elements was available that contained detailed information on the nesting order of repeats and dating of ltr-elements, providing a standard for comparing automated inferences against.

here i compared  only te sequences that are present both in the manual and in the repeatmasker annotation input to reannotate, because only those are relevant for evaluating reannotate's inferences. reannotate's predictions in the three layers of re-annotation achieved excellent accuracy relative to manual annotation, with results shown in table  <dig> . the actual accuracy of predictions may be higher, as for some of the discrepancies the correct prediction may be attributed, upon inspection, to the automated re-annotation, despite the generally high quality of the human-curated annotation. for instance, the given accuracy of the time layer predictions for the wheat sequence was obtained from  <dig> correct predictions out of  <dig> complete ltr-elements dated . the one disagreement refers to the element eway_g1- <dig>  that was originally misannotated as having identical intra-element ltrs; the ltr sequences are actually quite divergent and reannotate predicts the element to be the oldest of all complete ltr-elements found in the analysed query sequence.

accuracy of predictions in the defragmentation layer of re-annotation is given by their sensitivity and specificity according to the formulas tptp+fn and tntn+fp respectively, where tp is the count of true positives, tn true negatives, fp false positives, and fn the count of false negatives  relative to the manual annotations. here a 'prediction' refers to a sequence similarity hit reported by repeatmasker that has been defragmented into a te model by reannotate. for the nesting structure and time layers accuracy is given as the proportion of predictions in agreement with the original manual annotation  <cit> .

repetitive dna rearrangements other than transposition
in order to demonstrate that reannotate can correctly detect and annotate dna re-arrangement events  that have occurred after integration, i have re-annotated a region of the d. melanogaster genome that has previously been shown to contain a large number of te fragments that have arisen by the joint effects of integration and duplication  <cit> . this region lies between the hsp <dig> genes on chromosome arm 3r and is denoted in ref.  <cit>  as nest_fbti <dig> , and in ref.  <cit>  as "high density region  <dig> " . the re-annotation of nest_fbti <dig> is shown in figure  <dig>  which can be compared to figure  <dig> in ref.  <cit> . this serves to illustrate an additional type of inference that can be generated by reannotate: the identification of segmental duplications contained in dispersed repeats . such a rearrangement could result from tandem duplication of a segment of an element, or from inter-element recombination events . note that here reannotate attempts to construct an explicit model of sequence duplication to distinguish the origin of the repetitive sequences from independent transposition events.

the periodic structure of the ltr-element sequences in figure  <dig> strongly suggests tandem multiplication. the multiple similarity hits  to ltr-elements  in the structure  all belong to the same family , periodically map to the same regions of the reference sequence, and were re-annotated as elements that have been involved in a dna rearrangement other than transposition. the 'solo' ltrs re-annotated as nested in the copia <dig> sequences all belong to the same family , they are also periodically arrayed , and are inserted at the same position within the reference copia <dig> ltr.

hence it is evident that the invader <dig> ltr was inserted in the copia <dig> ltr prior to tandem multiplication. arrangements of the kind found in the d. melanogaster cluster nest_fbti0020655/hdr <dig>  have also been reported for ltr-elements in yeast  <cit> , for human ervs  <cit> , and have been detected with reannotate in the arabidopsis thaliana genome . thus it is possible that expansion of clusters of te sequences via mechanisms in addition to transposition is a common phenomenon in eukaryotic genomes  <cit> .

although prediction of dna rearrangements other than transposition is under-annotated by reannotate , these annotations have value in i) cautioning the user against the validity of dating ltr-elements that may have been involved in post-integration recombination events; and ii) marking structures with unusual features for human inspection of their annotation.

genome paleontology
the advent of automated defragmentation and sequence analysis of fossil fragments of dispersed repeats makes possible the study of the evolutionary dynamics of these elements  at the scale of entire chromosomes or genomes  <cit> .

in order to further illustrate evolutionary analyses that become possible with reannotate, here i highlight the re-annotation of dispersed repeats in a human sex chromosome  and in two autosomes .

nesting of repeats in the human genome
nesting patterns and counts of insertion events of repeats re-annotated on human chromosomes y and  <dig> are summarised in table  <dig>  one striking result is the scarcity of te insertions nested in satellite repeats, especially on chromosome y. even though, from these data, the possibility of functional constraint on satellite arrays cannot be ruled out, it is plausible that this result reflects a recent expansion of satellite repeats on human chromosome y. taking chromosome  <dig> as an example, not only the density of te insertions into satellite sequence is almost four times that on the y chromosome, but also there are ten times as many satellite repeats on the y as in chromosome  <dig> . the density of te insertions into satellite arrays has been recently used to infer an age gradient for domains of such arrays around the primate x chromosome centromere  <cit> .

anumber of repetitive elements  in each group. bpercentage of available  chromosome sequence. cpercentage of elements in each group that are inserted into any other repetitive element. ddensity of repetitive element insertions  per kilo base pairs of sequence within each group. ‡non-repetitive sequence here means that similarity to known families of high complexity repeats was not detected, but it includes low-complexity repeats. †excludes satellite repeats arrayed in tandem. .

another noteworthy nesting pattern in the re-annotation is the difference between lines on the one hand, and sines and ltr-elements on the other. on chromosome  <dig>  lines harbour on average over twice the density of te insertions  per unit of line sequence than do sines per unit of sine sequence or ltr-elements per unit of ltr-element sequence. in addition, on chromosome  <dig>  the proportion of sine and ltr-element insertions nested into other repetitive elements is higher than that of lines . multiple factors such as age, base composition, and insertional biases may contribute to these differences, although automated analysis of such factors is beyond what is currently implemented in reannotate.

autosomal vs y chromosome comparison of endogenous retroviral ages
the age distribution of endogenous retroviruses  on human chromosomes  <dig>   <dig>  and y was obtained from their automated re-annotation, and shown in figure  <dig>  ervs on both chromosomes  <dig> and  <dig> have less divergent intra-element ltrs than those on chromosome y , whilst there is no significant age difference between chromosomes  <dig> and  <dig> . the main period of retroviral activity over evolutionary time must have generated most erv insertions on all chromosomes, therefore the older estimated ages are consistent with a faster rate of evolution on the y than on chromosomes  <dig> and  <dig>  given that the "old" tail of the age distributions on those three chromosomes are similarly shaped, the age difference is not purely an effect due to longer persistence of ervs on the y. evidence  for a faster rate of evolution of the human y chromosome relative to autosomes has been previously reported .

in contrast to plant  genomes where ltr-element polymorphisms make the dating of these elements potentially useful for dating haplotypes from different lines within the same species, most primate erv insertions are ancient. using the rate of evolution for mammalian repeats estimated in  <cit> ,  <dig>  × 10- <dig> substitutions per site per million years, the age distributions of ervs in the genome of the lineage leading to human peaks at around  <dig> myr ago.

discussion of potential applications
re-annotation of repetitive elements via automated defragmentation, resolution of nesting structures, and  dating of ltr-elements form the basis for the evolutionary analyses exemplified above. re-annotation also makes possible other kinds of analyses that were not explored in this report. for example, i) analysis of the insertion sites of tes, which would require proper defragmentation of fossil sequence fragments to identify the both termini of the ancestral te sequence at the time of integration; ii) dating of ltr-elements could be useful for dating events on their host molecules, for instance when comparing haplotypes from cereal genomes where insertional polymorphism is common; and iii) analysis of global patterns of te family nesting using network or interruption matrix analysis  <cit> .

defragmentation of repeats performed by reannotate could also solve a problem that has plagued automated annotation of complex repeats: low-complexity regions within library sequences of reference high-complexity  repeats, which results in low-complexity repeats in chromosomal sequence being annotated by repeatmasker as high-complexity repeats  <cit> . if these regions were masked on the reference sequences prior to their use in similarity searches, multiple hits might be reported even when the chromosomal sequence of a repetitive element is intact – this artefactual fragmentation is resolved by reannotate into an element model, and masking of low-complexity regions in the reference library would be recommended in order to avoid low-complexity sequences being annotated as dispersed repeats. in addition to the re-annotation, the sequence output from reannotate also has potential uses that were not explored in this report. here this output was only utilised for dating ltr-elements, but alignment of all copies within a given family of repeats  is a powerful resource for evolutionary studies of repetitive elements. for instance, alignment of human erv sequences  supported an analysis showing that members of the herv-k family have been re-infecting the germline of the human lineage for  <dig> million years – from the inference of selective constraint on the herv-k envelope gene  <cit> . further examples of potential applications aided by multiple alignments of te sequences are analyses of i) transition/transversion ratios in tests for the detection of hypermutability associated with cytosine methylation  <cit> , ii) insertion/deletion spectra, used to estimate rates of spontaneous dna loss  <cit> , and iii) evolutionary relationships among individual elements or families via phylogeny re-construction  <cit> .

limitations and scope for development
reference library issues
as reannotate takes as input similarity-based  annotation, only elements homologous to known families of repeats can be re-annotated. for genomes with poorly characterised repeat families, any similarity-based detection methodology needs to be complemented with de novo repeat discovery . even though de novo discovery is useful for identifying uncharacterised families of repeats, it is not appropriate for genomic sequence annotation as it will fail to predict many repetitive elements that are are nested or fragmented. new families should be added to form an augmented reference library, and query sequences annotated with repeatmasker and reannotate. generally, sequence divergence between repetitive element lineages exposes the dependence of similarity-based annotation on the quality and comprehensiveness of the reference library. for defragmentation, the most difficult situation occurs when a chromosomal element is divergent from all available library elements. for example, if the chromosomal element is in parts homologous to two different library elements, then reannotate would construct two element models instead of one. note that reannotate does provide a facility to correct defragmentation, provided that this situation is noticed through human inspection in the first place .

chimeric elements also present a challenging form of sequence divergence. they arise, for instance, when i) a transposable element nesting an unrelated element is mobilised, transducing the nested element; or ii) recombination between te or erv sequences leads to a new replication-competent element. if the progenitors of a chimeric element, but not the element itself, are both represented in the reference library, then repeatmasker will report separate hits to each progenitor reference, and reannotate will construct separate element models for segments of the chimeric element. however, if upon human inspection of the automated annotation such chimerism is noticed, reannotate does provide an option to combine hits to prescribed reference elements into element models, so that a new round of re-annotation will construct models capturing the full sequence of chimeric elements.

the optional reannotate facility to defragment elements matching multiple reference sequences is also useful for solving another problem – overrepresentation of a lineage in the reference library, when the library redundantly contains very closely related sequences. again this may cause repeatmasker to report matches to different reference elements that correspond to segments of the same chromosomal element. finally, user-prescribed association of reference elements is essential for the construction of ltr-element models if the library entries for the ltr and ir representing the same family of elements have different names .

however, the ideal approach for optimum similarity-based annotation is the construction of a reference library that non-redundantly represents repeat lineages as comprehensively as possible. in some cases, even when it is noticed  that chromosomal elements match multiple library sequences, the reannotate facility to defragment such elements will not help. this is the case when the rules for element model construction and defragmentation are violated. for example, the element labeled "3" in table  <dig>  and in figure  <dig> was present in the original human annotation  <cit>  with the name sabrina_f2-2", an ltr-retrotransposon. the ir of this element was matched by three disntinct reference elements in the library used . so in this case reannotate constructed three separate element models, which correspond to the element "sabrina_f2-2" in the human annotation. the longest of these three models  defragmented four hits to the reference element sabrina2_tm . the other two short element models are marked in figure  <dig> by a horizontal bar and a "*". they correspond to the hits to sabrina3_tm and sabrina_hv. in the current defragmentation algorithm, these shorter hits could never be defragmented into the longer model containing the four sabrina2_tm hits. this is because the sabrina2_tm hits have in fact the opposite orientation on the chromosome relative to the sabrina3_tm and sabrina_hv hits.

dna re-arrangements
reannotate assembles fossil sequence fragments colinear with a given reference element into an element model, and the model assumes that such fragments are also colinear with the ancestral sequence of a repetitive element at the time of integration. dna rearrangements involving a te after its insertion into the genome may disrupt colinearity of its sequence with a reference element. the issue then arises as to whether to classify the re-arranged sequence as a single repetitive element. reannotate will normally construct a separate model for any sequence segment violating colinearity with the reference. dna rearrangements other than transposition  pose challenges for te annotation; for example, if a segmental duplication has occurred within an element that remained replication-competent and that subsequently generated new copies, then for these new copies, colinearity with the reference element  is violated and two separate models are constructed. reannotate does construct models of dna rearrangements involving ltr-elements . one of the purposes of such annotation is cautioning against the validity of dating such an element, as the rearranged structure may be the result of inter-element recombination. the occurrence of post-integration, inter-element ltr recombination would invalidate the use of intra-element ltr sequence divergence as a molecular timer. it is also possible that inter-element ltr recombination may occur without altering the structure of the elements involved – in this case the re-arrangement will remain undetected by the algorithm currently implemented in reannotate. nevertheless, the aligned sequence data output by reannotate can be used to reconstruct the phylogeny of all ltrs within a family: inter-element recombination would be detected if intra-element ltrs did not cluster on the phylogeny. there is scope for future implementation of algorithms for improving the detection and annotation of recombination, segmental duplication, and inversion events involving repetitive elements.

CONCLUSIONS
reannotate improves repetitive element annotation of genomic sequences by constructing models of evolutionary events involving dispersed repeats. currently, automated repetitive element annotation is largely limited by default use of repeatmasker output, which reports genomic regions that have sequence similarity to known repeats. reannotate is ready to post-process existing annotation or to be incorporated into annotation pipelines that use repeatmasker. reannotate processes the similarity annotation to infer the common origin of dispersed repetitive sequences, resolve complex nesting patterns, and date insertion events ltr-elements with a detectable structure. these analyses become possible even in genomic regions with a high-density of repeats, such as heterochromatin. the annotation and repetitive element model sequences output by reannotate therefore provide automated paleontology of complex repeats and, consequently, their host genomes, as the evolution  of genomes is linked to their repetitive content.

availability and requirements
project name: reannotate

project home page: 

operating system: gnu/linux or any other unix-like environment

programming language: perl

license: gnu gpl

any restrictions to use by non-academics: none

the current version of reannotate is also available as additional file  <dig> 

usage, input, and output are described in the user manual, which is available as additional file  <dig> and also at .

the programme clustalw  <cit>  or clustalw <dig>  is currently required for dating 'complete' ltr-elements.

abbreviations

erv: endogenous retrovirus; herv: human erv; ir: internal region ; line: long interspersed nuclear element; ltr: long terminal repeat; sine: short interspersed nuclear element; te: transposable element.

supplementary material
additional file 1
equivalence table of different reference sequences corresponding to the same families of ervs. names of reference ltrs and internal regions of primate ervs in repbase update that correspond to the same erv family may be dissimilar. this text file contains lists  of equivalent  names. this file must be input to reannotate for defragmentation of primate ervs if the input annotation was performed with the repbase update library. the first name in each line is used by reannotate to assign a family to an element model that may contain hits matching different reference sequences within an equivalence class.

click here for file

 additional file 2
script for pre-processing primate erv names in repeatmasker annotation. a shell script for pre-processing repeatmasker annotation so that appropriate suffixes are added to the names of reference primate erv internal regions . this is necessary for defragmentation of primate ervs if the input annotation was performed with the repbase update library.

click here for file

 additional file 3
output re-annotation of dispersed repeats in the maize accession . this is the main repeat re-annotation file output by reannotate as a tab delimited text file. each line corresponds to a repetitive element model.

click here for file

 additional file 4
description of data fields in the main re-annotation file. data fields in additional file  <dig> 

click here for file

 additional file 5
reannotate. current version of reannotate.

click here for file

 additional file 6
reannotate user manual. user manual.

click here for file

 acknowledgements
i thank casey bergman and adam eyre-walker for useful comments.
