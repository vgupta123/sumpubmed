BACKGROUND
the number of protein structures obtained experimentally becomes larger every year. this large database is the source of data for the study of important problems in structural biology: the classification of protein structures according to their function, and the correlation of sequence and structure. studies on the classification of proteins available in the protein data bank   <cit>  have already provided important insights into the nature of protein evolution and folding  <cit> . with the increase in computer power and the expansion of the database, using this information for protein design and for the characterization of the protein folding landscape  is becoming possible  <cit> .

reliable methods for assessing similarities or discrepancies between structures are thus required. algorithmic reliability is now most important since the description of the fold space is changing from a discrete to a continuous representation of similarities in terms of geometrical measures  <cit> . it is not clear whether these measures are meaningful if obtained by methods that do not necessarily converge. furthermore, in protein folding it was recognized that the stable folds are minimizers in complex energy landscapes  <cit> . if one intends to obtain insights into the landscape of protein folding from similarity measures , these measures must be meaningful. this means that relevant scores must be developed  <cit> , and that the algorithms that perform the alignment must converge to score maximizers .

studies on the organization of the protein fold universe employ multidimensional scaling  <cit>  or kernel methods  <cit> . from scores that measure the similarity between pairs of proteins, distance-like functions are derived, and proteins are represented as points in the 3d-euclidean space that best fit the distances. the structure space map developed in  <cit>  provides good predictions of function similarities in many cases. pairwise scores, which are the essential ingredients to compute distances, are given by alignment algorithms. the score information may be "crude, noisy, incomplete or inconsistent"  <cit> . in particular, scores related to very dissimilar proteins are usually badly computed. obviously, poor scoring information is not an advantage for the mapping project and alignment methods that give reliable similarity measures, even for very different proteins, should be preferred. in this sense, if we define a score as the best possible association between substructures of two proteins, the best way to proceed is to compute the global maximum of the association measures with respect to relative positions. this is the philosophy of the algorithm by kolodny and linial  <cit>  which, on the other hand, is unacceptably expensive for the present computer facilities. therefore, as currently done in optimization, we must turn to algorithms that very likely compute global maximizers and are guaranteed to compute critical points .

summing up, algorithms for protein structural comparisons that provide theoretical tools for a more profound analysis of the relationships between sequence, folding, and structure must have some desirable properties: they must converge, in the sense that a solution must always be encountered, and the solutions must have known properties in terms of the similarity function being considered. the algorithm must also be versatile  since the study of the correlations between structural similarity and functionality may require specific similarity measures. furthermore, a good method must be competitive with current algorithms in terms of computer time.

structural alignment algorithms
algorithms for protein alignment usually fall into two categories: a large group is based on the comparison of relative internal coordinates of the proteins  <cit>  whereas the second class relies on the explicit superposition of the two structures  <cit> . structural alignment methods are also affected by the measure of similarity being adopted  <cit> . the more straightforward comparison tool is the root mean square deviation , but rmsd is not a measure of similarity by itself, since it must be accompanied by the number of cα atoms of each structure being aligned and is not sensitive to the presence of gaps  <cit> . scores that take into account the presence of gaps and automatically incorporate the number of cα atoms being compared have been developed  <cit> . algorithms for the maximization of such scores or for the minimization of the rmsd under some conditions use different levels of information on the structure of the proteins: from internal distances only, to secondary structures  <cit> . the comparison of the performance of these methods is not trivial, since each one is based on a different score and the packages often do not provide clearly comparable outputs. however, a comprehensive evaluation of several of these methods was recently elaborated and the results obtained suggest that the structal algorithm  provides the best alignments to date  <cit> . these results indicate that the search of the maximizer of distance-dependent additive scores is a valuable strategy for obtaining meaningful alignments. all these algorithms are, however, heuristic in the sense that a rigorous characterization of the solutions that they find is not provided, and the relation of such solutions and score maximizers is uncertain.

convergent algorithms for protein alignment
kolodny and linial  <cit>  introduced a method for solving the protein alignment problem whose complexity is polynomial in the number of cα atoms. the idea is to use an exhaustive ε-grid search in the space of rotations and to exploit the polynomiality of the dynamic programming procedure to optimize a score function. they also illustrate their approach by the maximization of the structal score, but other scores could be maximized with the same strategy. if one could define a clearly biologically meaningful similarity measure, this algorithm would provide the optimal alignment for any pair of proteins.

the method of kolodny and linial obtains the global solution  of the alignment problem at the expense of an unaffordable computational effort. therefore, as mentioned in  <cit> , this method is not practical with the present computer facilities, although it sheds light on the complexity of the problem. this is a very common situation in optimization practice. methods that converge to global optimizers can be defined but practical methods are based on local optimization principles.

an algorithm is said to be convergent if it finds stationary points of the objective function, independently of the initial approximation . we will show that the interpretation of the protein alignment problem in the context of low order value optimization theory  <cit>  suggests how convergent algorithms can be formulated. moreover, we will describe how the structal algorithm can be modified in order to obtain convergence. then, we will introduce a new strategy for obtaining the correspondence between the cα atoms of the proteins that provide the algorithms with high efficiency while maintaining good score maximization and allows for non-sequential alignments. numerical experiments will be presented that demonstrate that the methods are also competitive in terms of computer time with state of the art algorithms. remarks and perspectives are given in the conclusions. the methods section contains details of the implementation of the line-search newtonian algorithm proposed and rigorous convergence proofs.

RESULTS
general methodological principles
in this section we describe the low order value optimization problem. we explain the way in which structural alignment can be interpreted as a lovo problem, and we show how this interpretation naturally suggests robust convergent algorithms for protein alignment.

protein alignment as a low order value optimization problem
given f <dig>  ..., fm a finite set of real functions, the low order value optimization  problem consists of finding x such that the maximum of f <dig>  ..., fm is maximal. that is, defining f = max{f <dig>  ..., fm} the objective of lovo is to maximize f . the application of lovo to more general problems, an equivalent formulation in terms of minimization and suitable definitions of criticality  <cit>  are given in  <cit> . general algorithms of newtonian type that globally converge to stationary points were defined in  <cit>  and applied to several practical problems. the main ideas of how convergence is obtained with the application of lovo methods to protein alignment will be given below. theoretical details and convergence proofs can be found in  <cit> .

in structural alignment one wishes to obtain the best three-dimensional superposition of two sets of points . this assumes that there is a correspondence between the atoms of one structure and the atoms of the second structure. given the correspondence, the structural alignment is usually obtained by the minimization of the rmsd of corresponding cα atoms, by rotating and translating one of the structures. therefore, each correspondence defines a function  of the translations and rotations, as represented schematically in figure  <dig>  since the number of possible correspondences is finite, the functions of the rigid-body transformations also form a finite set. in theory, one could maximize the scoring function for each correspondence independently, and the correspondence with maximal score value would be the best alignment between the two structures. therefore, as in the lovo theory, in structural alignment one wishes to obtain the optimal value of a finite set of real smooth functions   <cit> . the objective function to be maximized assumes the value of the fi that has the optimal value for each point of the domain, as represented in figure  <dig> 

the structal algorithm
structal  <cit>  was recently reported as being a quite successful algorithm in terms of the quality of the alignments obtained  <cit> . this indicates that the strategy of maximizing a score that incorporates the distance between atoms, the aligned length and the presence of gaps is valuable for obtaining meaningful alignments. the goal of the structal method is to maximize the structal score,

 structal=∑201+2−10ng
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwucqwgubavcqwgsbgucqwgvbqvcqwgdbwqcqwgubavcqwgbbqqcqwgmbatcqgh9aqpdaaeabqaamaalaaabagaegomaijaegimaadabagaegymaejaey4kasiaeiikagiaemizaqmaei4la8iaegomaijaeiola4iaegomaijaeginaqjaeiykakyaawbaasqabeaacqaiyagmaaaaaaqabeqaniabgghildgccqghsislcqaixaqmcqaiwaamcqwgubgbdawgaawcbagaem4zacgabeaaaaa@4b2c@ 

where d is the distance between corresponding cα atoms and ng is the number of gaps in the sequence alignment.

the apparent success the structal method probably comes from the fact that it is based on two strong ideas that are incorporated in several state-of-the-art alignment algorithms: 1) for a given spatial orientation of the two structures, the correspondence that globally maximizes a distance-dependent score can be obtained using dynamic programming  <cit> ; and 2) for a given correspondence, a rigid-body transformation that globally minimizes the rmsd can be obtained analytically   <cit> . the structal algorithm consists in the iterative application of these two methods: for the current spatial orientation of the proteins, a correspondence is obtained using dynamic programming, and this correspondence is used for a best rigid-body superposition  in order to obtain a new relative spatial orientation of the structures. the goal of the structal algorithm is to maximize the structal score.

from the point of view of score maximization given a spatial orientation, the use of dynamic programming is quite effective and theoretically justified, since this procedure obtains the bijection that globally maximizes the score itself  <cit> . however, obtaining the rigid-body transformation that minimizes the rmsd for the current bijection between cα atoms is not a score-maximizing strategy. therefore, although this procedure seems to be adequate because alignments with low rmsd are desirable, it is not the best choice if one wants to maximize the scoring function. in particular, the algorithm usually does not converge to a maximizer of the score, and many times oscillates between two different alignments.

convergent lovo algorithms for protein alignment
figures  <dig> and  <dig> show how the objective function of protein alignment can be interpreted as the maximal function of rotations-translations corresponding to each admissible correspondence between cα atoms of the two structures.

a convergent method for maximizing this function must have two abilities, as sketched in figure 1:

 <dig>  for a given displacement , a suitable subalgorithm must be able to identify which is the correspondence that maximizes the score. this corresponds to steps of type a in figure  <dig> 

 <dig>  once the best correspondence is found, another subalgorithm must be able to obtain a new rotation-translation displacement that improves the score for the correspondence obtained by the step of type a. these are the steps of type b in figure  <dig> 

in the context of protein alignment, steps of type a may be performed using the classical dynamic programming algorithm  <cit> . unfortunately, procrustes rigid-body superpositions do not satisfy the conditions required for the steps of type b, since they do not guarantee the improvement of the score. however, reliable optimization algorithms exist that are always able to obtain improvements of the score merit function. therefore, a natural approach consists of replacing procrustes by an iteration of one of these algorithms. this is the principle governing the methods proposed here. interestingly, note that point c in figure  <dig> is non-smooth because two correspondences provide the same score for the given rotation-translation. as justified by the lovo theory, however, the non-smoothness of the objective function may be simply ignored: a smooth optimization algorithm that takes any of the concurrent gradients may be used for improving the merit function at each iteration  <cit> .

algorithms
the low order value optimization approach suggests that, for obtaining a convergent score optimization algorithm, one should replace the procrustes best rigid-body transformation by some algorithm that guarantees increasing the score during the structural alignment step. here, we propose a classical safeguarded line-search newtonian algorithm, leading to the dynamic-programming-line-search method. next, motivated by the rather high computational cost of the dynamic-programming step, we propose a second lovo algorithm that preserves the line-search step but uses a non-bijective correspondence that can be computed very fast. this will be the non-bijective-line-search method, which will allow also for the study of non-sequential alignments. both algorithms converge to stationary points of the scores, in the sense defined above.

dynamic-programming-line-search method 
the dp-ls method preserves the dynamic-programming step. however, it uses a safeguarded line search newtonian method that guarantees a sufficient increase of the score during the structural alignment step  <cit> .

safeguarded line search newtonian step
the basic computations underlying line search newtonian algorithms are the following:

 <dig>  obtain a strictly concave quadratic approximation of the objective function at the current point.

 <dig>  maximize this quadratic approximation. the maximizer of the quadratic model is called  trial point, as shown in figure  <dig> 

 <dig>  if the true objective function increased enough at the trial point, then the trial point is accepted as the new iterate.

 <dig>  if the objective function did not increase enough, a new point is obtained in the segment determined by the current point and the trial point using safeguarded quadratic interpolation. this step is represented in figure  <dig>  in this way one obtains a new trial point and the control returns to step  <dig> 

the quadratic approximation uses the hessian matrix, modified in such a way that the model is strictly concave. this guarantees that an ascent direction is generated at every iteration and that the objective function increases sufficiently at every iteration. as a consequence of sufficient increase, every limit point generated by the method is stationary and, under reasonable conditions, the local convergence rate is quadratic.

the reasons why this algorithm converges to a critical point of the objective function are the following: the quadratic model is a good approximation of the true objective function at the current point, since it has the same first and second derivatives than the objective function, as shown in figure  <dig>  furthermore, the model is concave, so that either the current point is a maximizer of the quadratic model or there is a direction along which the model  must increase. the first trial point is obtained by the maximization of the quadratic model, but it may not increase the function value, as represented in figure  <dig>  if the function value is not increased, a new trial point is obtained, closer to the current point, along the line connecting the current point and the first trial point. since the parabola that represents the quadratic model along this line is concave, any point in this line must have a greater value for the quadratic model. furthermore, since the model is a good representation of the true objective function in the vicinity of the current point, for a trial point close enough to the current point, the true objective function must also increase. the strategy of reducing the distance between the current and the trial point guarantees that, eventually, the function value will be improved, and the method must converge to a critical point .

dp-ls algorithm
eeach iteration of the dp-ls algorithm is, therefore, defined by the following three steps:

 <dig>  given the three-dimensional orientation, compute the bijection that maximizes the score using dynamic programming.

 <dig>  given the current bijection, perform a single safeguarded line search newtonian iteration to obtain a new orientation for the second protein that guarantees a greater score for the current bijection.

 <dig>  if the score increased more than a given tolerance, go to step  <dig>  otherwise stop.

dp-ls deals with the same objective function at the two phases of the algorithm, in contrast with structal, that maximizes the score in the first phase and minimizes the rmsd in the second one. for this reason, we expect that the convergence to score maximizers should be more robust in dp-ls than in the structal algorithm. their computational cost must be similar, since both use the dp step, and the cost of performing a newtonian iteration is similar to the cost of a procrustes best rigid-body superposition.

non-bijective-line-search method 
motivated by the fact that dynamic programming is computationally expensive, we define here a new correspondence that sacrifices some of the requirements of a good correspondence but that may be computed much more rapidly. moreover, this procedure makes it possible the generalization of the methods presented here for problems that do not require the correspondence to be monotone and sequential. the nb-ls method can be used for the structural superposition of other structures than proteins, such as ligands.

the dynamic-programming step was designed to globally maximize the score for a bijective and monotone correspondence. both properties are reasonable from the point of view of protein alignment, since the cα atoms of each protein are ordered along the protein chain.

we propose now a new  correspondence, that sacrifices both bijectivity and monotonicity, but is very cheap to compute: for each cα atom of the first protein, the cα atom corresponding to it is the closest cα atom of the second protein. clearly, this correspondence violates both the bijective and monotone characteristics of the dp correspondence, since different cα atoms of the first protein may be associated to the same cα atom of the second protein. this correspondence has the somewhat undesirable property that it is not symmetric relative to the interchange of the two proteins. here we consider systematically the first structure as the smallest one because, as will be shown bellow, this is favorable for obtaining the correspondence rapidly.

this correspondence globally maximizes any score that increases monotonically as the distance between atoms decreases. the structal score is one of the many scores that satisfy this property. therefore, the use of this correspondence associated with the line-search newtonian method also results in a convergent lovo algorithm, although the functions fi are defined in a different way. the advantage of the non-bijective correspondence is that it may be computed very rapidly, as will be shown below.

fast algorithm for obtaining the nb-correspondence
our fast algorithm for computing the nb-correspondence involves a preparatory step and an actual algorithmic step. the preparatory step consists in:

 <dig>  obtain the internal distance-matrix of one  protein .

 <dig>  sort the elements of each column of the internal distance-matrix. therefore, the ordered internal distance-matrix will contain, for each cα atom of protein b, the distances to other cα atoms of the same protein in increasing order.

given the ordered internal distance matrix for protein b, one can compute the atom of b being the closest to each atom of a using the following procedure:

 <dig>  compute the distance d <dig> of the first atom of a  to some atom of b , as shown in figure  <dig> 

 <dig>  since we seek the atom of b that is closest to atom 1a, this atom of b cannot be farther than the atom 1b. therefore, it necessarily belongs to the sphere of radius d <dig> around atom 1a, as shown in figure  <dig> 

 <dig>  as shown in figure  <dig>  the condition above implies that the atom of b closest to 1a is in the sphere of radius 2d <dig> around atom 1b.

 <dig>  therefore, one needs to compute the distances of the cα atom 1a only to those atoms of b that are closer than 2d <dig> to atom 1b. we know which are these atoms because we have the ordered internal distance matrix of b.

in practice, the first distance computed may be to some atom already known to be close to 1a according to previous iterations. for the second atom of a, the first distance computed may be to the atom which was found to be closest to the first atom of a, and so on. these procedures maintain the initial distances d <dig> small, keeping also small the number of distances that have to be computed for each atom of a. we observe that the number of distances computed for each atom of the first protein is of the order of  <dig>  almost independently of the size of the protein b.

using this algorithm for a single protein-protein comparison might not result in time savings due to the cost of the preparatory step. however, when performing database comparisons, the time savings are large because the preparatory steps may be performed in a rational way: for a comparison of a single protein to a database of structures, the ordered internal distance matrix may be computed only for that single protein, which is then systematically treated as protein b. for all-on-all protein comparisons, one computes the ordered distance matrix for the largest protein, treats it as protein b, and aligns it to the whole database. then we move to the second largest protein, repeat the operation, and so on. only a single preparatory step is performed for each protein. the computation of the ordered distance matrices was observed to take only about 4% of the total alignment time.

testing
the theoretical reasons why the methods presented here should be robust and fast for score maximization were presented in the previous sections. now we discuss how these methods behave in practice and whether the theoretical expectations were fulfilled.

our comparison involves the alignment of  <dig>  protein pairs . for each problem, our first comparison is based on which of the three methods  was able to obtain the best score up to relative precision of 10- <dig>  considering all the alignments, the best scores are obtained in about 50% of the cases by the dp-ls method, in 45% of the cases by the structal algorithm and in only about 7% of the cases by the nb-ls method. however, most alignments in a database are not meaningful and, therefore, the capacity of the method in identifying good alignments is more important. therefore, the percentage of best-scores obtained by each method were classified in terms of the best score obtained by the three methods, resulting in figure  <dig>  in this comparison, the structal scores are scaled by the number of atoms of the smallest protein involved in each alignment: the structal score for a perfect alignment with no gaps is 20na, where na is the number of atoms of the smallest protein involved. therefore, scaling the scores allows one to compare alignments containing proteins with different number of atoms. scaled scores are always between  <dig> and  <dig> 

the first clear observation is that dp-ls is systematically able to obtain the best scores in the highest percentage of cases for all alignment qualities. for alignments with  best-scores greater than  <dig>  for example, dp-ls obtains the best scores in at least 90% of the cases. for alignments with best scores greater than  <dig>  dp-ls obtains the best scores in 98% of the problems. the structal algorithm is competitive with dp-ls for bad alignments  and for very good alignments .

the nb-ls method obtains the best scores only in about 7% of the cases in general . however, as the overall quality of the scores increases, the algorithm linearly improves its winning percentage, obtaining the best scores for 90% of the cases for scores greater than  <dig> and for 98% of the cases for scores greater than  <dig>  in terms of this evaluation, this algorithm obtains better results than structal for all scores greater than  <dig> 

these results are as expected in view of the theoretical predictions: the dp-ls algorithm systematically obtains the best results, since it contains only monotone score maximization steps. the best scores obtained by this algorithm are mostly related to the fast local convergence of the ls algorithm. for bad alignments this difference is not as important as it is for good alignments. the nb-ls also behaves as expected: it does not penalize gaps or forces monotonicity during optimization, therefore it is not effective for obtaining good scores for alignments which do not naturally satisfy monotone-bijection and few-gaps properties. however, as the overall alignment quality is improved, these properties are automatically satisfied, and the deleterious effect of the non-bijective correspondence is reduced. for alignments with best scores greater than  <dig> the sacrifice of the bijection is not as important as the improvement provided by the ls step, and the results are better than the ones obtained by structal.

implementation
in this section we provide technical details that should be useful to replicate algorithms and experiments.

line search
at steps of type b of the algorithms proposed here we used a single line-search procedure. one could perform the full optimization of the score given the current bijection using the ls algorithm until convergence is achieved. however, this is not worthwhile, since after a single movement of the proteins, the bijection that maximizes the score for the new orientation of the proteins frequently changes. therefore, for every new three-dimensional orientation of the proteins, it is reasonable to recompute the bijection.

also some safeguards must be taken into account in order to guarantee that the line-search newtonian method converges. for instance, the current-trial point distances must not be reduced abruptly. moreover, the increase of objective function value must be at least a fraction of the increase predicted by the quadratic model at the accepted point. the details on how the line-search must be implemented in order to obtain practical and theoretical convergence can be found, for example, in  <cit>  for smooth optimization and in  <cit>  for the  structural alignment problem. more details of the current implementation and convergence proofs can be found in the methods section.

initial approximations
the initial points for the alignments were obtained using an approximate alignment based on the internal coordinates of the proteins: for each protein with n atoms, a set of n -  <dig> points in r <dig> are defined by the distances of atom i to atoms i +  <dig>  i +  <dig>  and the distance between i +  <dig> and i +  <dig>  for n consecutive indices i. these are the three distances that determine the dihedral of the atoms that follow atom i. this creates a "pseudostructure" with n -  <dig> atoms for each protein. the correspondence between the atoms of the pseudostructures of the two proteins is obtained using dynamic programming to maximize a structal-like score . the superposition that minimizes the rmsd for this bijection is obtained using procrustes and this orientation of the proteins was defined as the initial point for the alignments. this algorithm was observed to directly provide the solution for the alignment of very similar proteins. furthermore, this method provides good approximations for all algorithms, in such a way that even the classical circularly permuted pair 2pel:a-5cna:a  <cit>  was correctly aligned with all the methods reported here.

for comparing the alignment obtained by the nb-ls method relative to structal and nb-ls we compute, as a post-processing step, the actual bijective and monotone structal scores relative to the  optimal monotone bijection, for the final alignment obtained.

numerical examples
we selected, at random,  <dig> proteins from the publicly available dali alignments  <cit> . for each of these  <dig> proteins, the  <dig> best matches found by dali were also included in our data set. therefore our database contained  <dig> proteins, including similar proteins  as well as structurally non-correlated proteins. all-on-all alignments within this set of proteins were performed with the three methods, comprising  <dig>  alignments for each algorithm. the list of the  <dig> proteins used can be obtained at the web site of lovoalign. for sorting the distances during the calculation of the ordered internal distance matrices for the nb-ls method we used the flashsort algorithm  <cit> . the methods are implemented in fortran <dig>  the tests were run on an amd opteron  <dig> with  <dig> gb of ram running linux. the software was compiled with the gnu fortran compiler version  <dig>  with the "-o <dig> -3ast-math" options.

CONCLUSIONS
here we presented two contributions, one theoretical, and other practical, to the problem of structural alignment. the theoretical contribution is the interpretation of the alignment problem as a low order value optimization problem, a framework under which convergent algorithms can be developed. furthermore, the solutions obtained are critical points of the scoring function. this means that the solutions obtained by our algorithms admit a precise mathematical description in terms of necessary conditions for score maximality.

from the point of view of practical computation, the algorithms presented here seem to be very successful: the study  <cit>  seems to indicate that the structal method is a quite robust algorithm for protein alignment. the present paper improves the structal algorithm in the following senses:

 <dig>  the structal algorithm iteration has two phases: maximizing the structal score for fixed positions  and modifying the relative positions with rmsd minimization . these two objectives might be conflictive leading to oscillation. our dp-ls modifi-cation improves the score at both phases. therefore, the score increases monotonically at all the iterations.

 <dig>  one of the theoretical consequences of the monotone behavior of dp-ls is that this algorithm enjoys convergence to stationary points independently of the initial approximation.

 <dig>  the first phase of the structal algorithm and dp-ls uses dynamic programming. with the aim of reducing the cost of this procedure we introduced a nonbijective correspondence at the first phase of the iterations. the nonbijective association is computationally very cheap.

 <dig>  as expected, nb-ls is faster than the algorithms based on first-phase dynamic programming. perhaps surprisingly, for medium to good alignments, its robustness is similar to the one of the structal algorithm and dp-ls. the reason is that meaningful alignments usually satisfy the bijective and monotone properties for the best correspondence without being necessary to force them at every step of the optimization procedure.

in this paper, we do not address the problem of whether the structal score is the best merit function for the evaluation of the biological relevance. the functional relevance of the alignments obtained here is intrinsically linked to the functional relevance of the score being maximized. an ideal score would be one that increases as functional similarity increases. although several scores have been proposed  <cit> , the design of a score that maximizes biological relevance is still an open problem. this occurs, in part, because reliable practical methods for score optimization were unavailable. the algorithms presented here should be effective tools for the maximization of any distance-dependent score. therefore, these methods may be used for the development of new scores designed to be functionally meaningful.

the approaches described here can be employed for more general structural alignment problems. the substitution of the procrustes procedure by the newtonian algorithm can be used to introduce internal transformations  in the proteins being aligned. on the other hand, the replacement of the dynamic-programming strategy by the nb-correspondence makes it possible the treatment of structural alignment problems where monotonicity does not hold. these possibilities were theoretically investigated, and succesfully tested, in a previous work  <cit> , but an effective implementation of these methods including flexibility or other transformation on the structures is an area of future research.

