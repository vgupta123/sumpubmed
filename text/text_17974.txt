BACKGROUND
there is a vast and ever growing amount of literature in biology, ecology, biomedicine, biodiversity, genomics and proteomics. the u.s national library of medicine’s medline
 <cit>  database is one such source with more than  <dig> million abstracts of journal articles in life sciences with focus in biomedicine. major efforts to digitize legacy literature undertaken by consortiums like the biodiversity heritage library 
 <cit>  generate vast amounts of text data from the optical character recognition  of scanned literature. extraction of knowledge from sources like medline can significantly speed up biomedical research by providing access to relevant information about diseases, genes, gene-protein, protein-protein interactions, model organisms and drugs. while gene/protein identifications and binary interactions have been the focus of biomedical text mining, more ambitious tasks like identifying complex nested structures are also being pursued currently
 <cit> .

identification of species names and the normalization task of mapping them to identifiers in a database are considered essential sub-tasks for many text mining projects
 <cit>  like recognizing gene names
 <cit>  or extracting organism-specific information like life history, geographic distribution and predator–prey relationships from biodiversity and biomedical literature. a scientific name is a genus name or a species level name with genus followed by species or a name below the species level with genus, species and subspecies information. it can also be a higher order taxonomic name like family, order, etc. a scientific name is one of the named entities that can be connected with other entities like gene names, protein names, geographic locations, diseases, common names of organisms and names of people who first described the species. recognition of named entities is frequently a first step in the process of performing more complex information extraction tasks like finding relations between the named entities or for question answering
 <cit> . the name of an organism is one of the few identifying elements associated with almost all biological data
 <cit> . a scientific name extraction system will be very useful in gathering all contexts in the form of sentences or paragraphs associated with organism names. these sentences and paragraphs can help enrich the existing content and add new content for projects like the encyclopedia of life , which aims to create a webpage for every single species on earth
 <cit> . natural language processing and machine learning methods can be applied to extract fine-grained, atomic information that can be used to populate biological databases and repositories. the organism name serves as an important metadata element for linking information from various biological sources
 <cit> , so a species name identification system is an essential tool in information integration.

most of the approaches in the literature addressing the problem of name finding from text sources primarily rely on dictionaries with a list of scientific and/or common names
 <cit> . taxongrab
 <cit>  is a dictionary-based approach that uses a dictionary generated by combining dictionaries of english words and biomedical terms instead of a list of scientific names. words that do not appear in this dictionary  and that follow simple rules for capitalization, abbreviations, variants and subspecies mentions used in scientific names are considered as organism names. approaches that primarily rely on this kind of an inverse lexicon tend to have low precision as this can gather many false positives from misspelled english words, ocr errors and non-english words that pass through the rule filters. the precision of the system can also vary significantly from one text source to another depending on the number of words covered by the inverse lexicon. hence such a system is also likely to perform very poorly on non-english texts.

taxonfinder
 <cit>  is designed to find scientific names from text with the help of separate dictionaries for species and genus names. though the approach is likely to have fewer false positives, the number of false negatives  can be high as it cannot find anything that is not a genus and species combination from the dictionaries used in the approach. such an approach cannot find misspelled names, names with ocr errors, new species names and other names not present in the dictionary. such a system can also have false positives due to the presence of incorrect names, names that are spelled the same as some common english words and geo-location names .

the approach “linnaeus”
 <cit>  uses dictionaries for scientific and common names to construct a dfa 
 <cit>  to match species names. the system also tries to resolve acronyms for organisms  using the frequencies of most commonly used acronyms in medline calculated using acromine
 <cit> . linnaeus only focuses on finding species names and currently does not deal with genera or other higher-order taxonomic units. inherently being a dictionary based approach, linnaeus also will have issues that were discussed above for approaches like taxonfinder. there are also other dictionary-based approaches that identify species names based on the ncbi taxonomy
 <cit> . fat 
 <cit>  is another tool that uses a combination of rules, dictionaries of scientific names and non-names along with input from users to find scientific names. wang et al.
 <cit>  developed approaches to tag and disambiguate genes, proteins and protein-protein interaction with species names from the ncbi taxonomy, uniprot
 <cit>  and manually created dictionaries using a rule based approach and/or with a machine learning based classifier. their main objective was to disambiguate gene/protein or protein-protein mentions in text using species tags.

here we focus on recognition/discovery of scientific names of organisms from various text sources. the problem of discovery of binomial and trinomial scientific names along with genera and higher taxonomic units can be quite complex. for example, biodiversity literature and legacy text sources like bhl  contain many names with ocr errors, alternative names and misclassified names. thousands of new species are discovered every year and many are reclassified. some names are spelled the same as geo-locations or people names and therefore disambiguation of names is required. we have developed approaches and built tools that address all of the above.

netineti is a solution for scientific name recognition/discovery. this approach enables finding scientific names in literature from various domains like biomedicine and biodiversity. it can discover new scientific names and also find names with ocr errors and variations. the system is based on probabilistic machine learning methods where a given string has a certain probability of being a scientific name or not being a scientific name depending on the name string itself and the context in which it appears. netineti builds a machine learning classifier from both the structural features of a string and its contextual features. in the process of classifying a string, the approach can differentiate between common words like names of places or people from scientific names based on the context in which a name appears. for example, atlanta is a scientific name in the sentence, “atlanta is a genus of pelagic marine gastropod molluscs”. however, in the sentence, “the city atlanta is in the state of georgia”, atlanta is a geographic location and not a genus name. netineti correctly recognizes the word atlanta as a scientific name in the first context and does not recognize it as a scientific name in the second context. simple rules for capitalization and abbreviations in species names are applied as a pre-filtering step to generate candidate names. candidates with common english words were also removed in the pre-filtering process. the candidate names along with their contexts are then classified using a supervised machine learning classifier. while the system can disambiguate and discover what scientific names of organisms are mentioned in a document, the approach is not about discovering documents that are about specific organisms based on their presence in the document.

we evaluated netineti on legacy biodiversity texts  and biomedical literature . we compared results of netineti and a dictionary based scientific name finder with the results of manual annotation of a bhl book. a comparison of some of the probabilistic machine learning algorithms on our annotated dataset for scientific name finding is presented. we also present the results of running netineti on other biological text sources.

methods
pre-filtering and candidate generation
the input text is first tokenized using a tokenization scheme that breaks the characters in a stream of characters in natural language text into distinct meaningful units called tokens. we followed the conventions used by the penn treebank project
 <cit>  to tokenize text. word trigrams, which are groups of three tokens along the token-sequence are then generated from the tokenized text and each trigram is then passed through a simple rule filter which checks if the tokens in the trigram have the right capitalization, abbreviations, etc. and checks if the trigram has no common english words. each trigram that passes through the rule filter is then classified by a machine learning classifier as “scientific-name” or “not-a-scientific-name” using the structural and contextual features of the trigram. the trigram that was classified as a scientific name corresponds to a trinomial name, which is a name below the species level with genus, species and usually a subspecies. if a trigram fails to pass though the rule filter, the first two tokens  of the trigram are then tested to see if they can become a candidate for a binomial name, with genus followed by a species mention. the classifier then classifies such candidate bigrams. similarly, the first token of a failed bigram is analysed if it can become a candidate for a uninominal name , which gets classified accordingly if it is deemed as a candidate. netineti also resolves abbreviated species names by noting that an abbreviation can be used for a species after a mention of its genus or an abbreviation can follow a mention of a full name  or an abbreviated name for a species can be used after a mention of another species name from the same genus.

machine learning based classification
we applied probabilistic machine learning algorithms like naïve bayes and maximum entropy to classify candidate names. the objective is to estimate the probability of a label  given a candidate string along with its contextual information. naïve bayes and maximum entropy classifiers learn or estimate the probabilities from a training set.

  p=pci,sjpsj=p label=argmaxci∈c 

we are primarily interested in the conditional probability of a class label,
ci∈c='yes','no' given an input string and its contexts sj as in eq. <dig>  the ‘yes’ and ‘no’ labels correspond to whether a string is a scientific name or not. once we get these conditional probabilities, we simply choose the label with the highest probability for a given string. the naïve bayes classifier
 <cit>  as seen in eq. <dig>  actually models the joint probability
pc,s of a class c and a string s and makes an assumption that all the features
f <dig> f <dig> …fkfor the string and its contexts given the class label are independent as in eq. <dig> this independence assumption is strong, but it helps to easily estimate the probability
psj|ci, of a string sj given the class label ci from a training set of labelled examples. even with this independence assumption, the naïve bayes classifier performs surprisingly well in many document classification tasks
 <cit> .
pfk|ci can be estimated from the number of training examples having the feature value fk, and the number of examples with class label ci and also having the feature value fk we can then get the class label for a string  from eq. <dig> with probabilities taken in the log scale.

the naïve bayes approach is called generative as it is based on a model of the joint distribution p. the maximum entropy classifier, also known as a logistic regression classifier, is called a discriminative approach as it is based on the model of the conditional distribution p maximum entropy is widely used for many natural language processing tasks like text segmentation
 <cit> , parts-of-speech tagging
 <cit> , language modelling
 <cit> , text classification
 <cit>  and named entity recognition 
 <cit> . the principle behind the maximum entropy approach is to model all that is known and assume nothing about what is unknown
 <cit> . given a collection of facts , the approach chooses a model that is consistent with all facts with a distribution that is as uniform as possible i.e., the distribution that allocates its probability as evenly as possible obeying all the constraints derived from the training set. the conditional probability of a label
ci given the string context
sj takes the following exponential form
 <cit>  in eq. <dig> 

  p=1zsjexp∑m=1mλmgmci,sj 

where each
gmci,sj is a binary valued feature function defined on the class label and the string context,
λms are the weights to be learned from the training set for the feature functions and
zsj=∑ciexp is a normalizing factor that ensures that
∑cipci|sj= <dig>  the parameters
λm are estimated via hill climbing approaches like improved iterative scaling 
 <cit>  or generalized iterative scaling 
 <cit> . limited-memory variable metric optimization methods like l-bfgs
 <cit>  have been found to be effective for maximum entropy parameter estimation
 <cit> . in our scientific name recognition task, we have applied and compared the iis, gis and l-bfgs methods for parameter estimation on a corpus that was manually annotated with scientific names. for both naïve bayes and the maximum entropy classifiers, we used the python
 <cit>  implementations in the nltk
 <cit>  package. megam
 <cit>  optimization package was used for l-bfgs optimization.

training set generation
an initial set of about  <dig>  names was used as a positive example set. candidate strings from unigram, bigram and trigrams of a tokenized bhl book
 <cit> , which does not contain any scientific names, was used as an initial negative example set. an initial maximum entropy classifier was trained with the initial training set using only the structural features of strings. a set of medline abstracts, a small portion of content from eol
 <cit>  and biodiversity texts from bhl were segmented into sentences using the sentence tokenizer in nltk, pre-filtering and candidate generation steps were performed for each sentence, and the initial classifier was used to get scientific names that were identified with high confidence. the scientific names along with the sentences in which they occur together form the positive example set. features were derived from the scientific names and a neighborhood of word contexts appearing around the scientific names in the sentences. we tokenized a geography book from the internet archive
 <cit>  and the strings derived from word unigrams, bigrams, and trigrams in the tokenized text of the book form the negative example set. about  <dig>  positive examples with contextual information, another  <dig>  examples from scientific names without contextual information were used as the positive example set. abbreviated names from these examples were also added to the positive example set. a total of about  <dig>  positive examples together with another set of about  <dig>  negative examples were used to generate a training set of  <dig>  examples for the two class labels. features used include the last three, last two and the last characters along with the first and second characters of the unigram, bigram, and trigram candidates. binary features like whether the last, second last, and third last characters are present in different partitions of the set, ’a’,’e’,’i’,’o’,’u’,’s’,’m’ were also used. presence or absence of a particular word in unigram, bigram, and the trigram candidates in a dictionary of genus and species combinations were also part of the binary features. when a word token is part of the dictionary of names it contributes to the conditional probability of the candidate name given the structural and contextual features. numerical features like the number of vowels in various parts of the candidate names were also used. for contextual features, words appearing in the neighborhood of candidate names and their parts-of-speech tags were used.

RESULTS
evaluation sets
netineti focuses on discovering/identifying scientific names of organisms including names with spelling and ocr errors from text sources across domains like biodiversity and biomedicine. we present the results of running netineti on three different text sources.

bhl is a rich source of biodiversity data with over  <dig>  volumes corresponding to over  <dig> million scanned pages converted to text. a gold-standard biodiversity corpus marked with scientific names by an annotator was created, as there are no previously reported annotated corpora for biodiversity information. also, the evaluation sets that were previously reported were not specifically annotated for scientific names of species along with errors and variations. all the scientific names, including names with ocr errors, occurring in a  <dig> page bhl book “american seashells”
 <cit>  were extracted manually by the annotator. we used netineti to identify all names in this book and compared our results to the list of names that were manually extracted. we also compared our results with the results of the dictionary-based taxonfinder
 <cit>  and the fat tool integrated into the goldengate editor
 <cit>  for finding scientific names the comparison results have been summarized in table 
 <dig>  we also ran netineti on medline, which contains over  <dig> million bibliographic records from journal articles in life sciences with a concentration on biomedicine. we present the results of running two of the best performing algorithms against the medline database summarized in table 
 <dig>  we also evaluated netineti on a small subset of  <dig> tagged pubmed central’s 
 <cit>  open access full-text articles. these  <dig> articles were selected from the evaluation set used by linnaeus species identification system
 <cit>  with only scientific name tags, as their full pmc evaluation set consists of articles also tagged with common names.

comparison of machine learning classifiers
we performed a series of training experiments with the naïve bayes classifier using different neighbourhoods for contextual features, different sizes of positive and negative training examples and evaluated the resulting classifiers with the precision and recall measures on the “american seashells” book
 <cit>  using the manually extracted set of names from it. precision is the fraction of the retrieved names that are relevant scientific names and recall is the fraction of scientific names retrieved from all the scientific names in a document. “cspan” in figure 
 <dig> indicates the number of contextual features. when no contextual features were used, increasing the number of training examples did not yield any significant improvements in precision or recall as in figure 
1a indicated by the red circles which all clustered together. figure 
1b illustrates this more clearly, where all the red circles are close to each other in the p-r space. the blue circles are the result of using classifiers with a single contextual feature on either side of the candidate name. we can see that all the classifiers corresponding to the blue circles perform better than any of the classifiers corresponding to the red circles that did not use any contextual information during the training phase. all the circles colored other than red in figures 
1a and
1b represent the precision and recall values of classifiers trained with one or more contextual features on either side of the candidate names.
1ccorresponding to cspan =  <dig> were all summarized in figure 
1dwith different symbols. the star is figure 
1d is 4th star from the top in figure 
1c.

figure 
1c illustrates the effect of increasing number of contextual features and increasing the number of positive examples in the training set. for example, the blue stars in figure 
1c correspond to using five contextual features on either side of the candidate name with increasing positive example size during training. this was more clearly represented in figure 
1d, where we used five contextual features  on either side of the candidate name for each classifier with increasing sizes of positive example sets form  <dig>  to  <dig>  in increments of  <dig>  for training. it can be seen from figure 
1d that increasing the positive example set contributed to the better precision of the corresponding classifier with a slightly lower value for recall.

in our subsequent experiments we compared the precision and recall values of naïve bayes and maximum entropy classification algorithms with various parameter estimation methods like gis, iis, and l-bfgs on the manually annotated american seashell book. we also compared the decision tree learning algorithm
 <cit>  implemented in the nltk toolkit. for the comparison of the algorithms, we used a context span of  <dig> corresponding to features derived from a word on either side of the candidate name for which the recall was higher than the other configurations with a good precision . comparison of the algorithms was performed both with and without the use of a stop-list of english words used as part of the pre-filtering process as described in methods. the results are summarized in table 
 <dig>  the naive bayes algorithm has the highest f-score  compared to other algorithms for this dataset when applied with and without a stop-list during pre-filtering. all the algorithms with the exception of the decision tree learning algorithm performed well with a better precision when a stop-list was used, although it did not have much impact on the recall values. having a stop-list eliminates english words or other common words to generate a cleaner set of candidate names. however, the results from decision tree learning algorithm, which is an implementation of the c <dig>  algorithm
 <cit> , are not significantly improved through use of the stop-list. if we have more labelled datasets for scientific name recognition, it would be interesting to see how well the learned decision tree performs on them. the maximum entropy algorithm with the limited memory variant of the bfgs algorithm also performs well with a high precision of  <dig>  with a stop-list and  <dig>  without the stop-list, but the recall values are relatively lower. however, with the gis estimation, the maximum entropy approach has the second best f-score of  <dig>  after the naïve bayes algorithm as shown in table 
 <dig> 

results on biodiversity text with errors
figure 
 <dig> summarizes the results of running the netineti with naïve bayes algorithm on the annotated corpus . we also compare our results with those of taxonfinder. it can be seen that netineti performs better both in terms of precision and recall. we further analysed the  <dig> names that did not match the manual lookup from netineti and  <dig> names from taxonfinder and noticed that among the  <dig> names, about  <dig> names were true false positives like geographic locations, common names and author names. the remaining  <dig> names were either a part of a scientific name, a different variant of a string that the system found from the one that was annotated, etc. among the  <dig> names missed by taxonfinder, about  <dig> names were true false positives and the rest of the names again were only part of a name or a different variant of a scientific name. the  <dig> names that are present in netineti and taxonfinder but not in the manual list were mostly parts of scientific names identified by both approaches and some common true false positives.

when calculating the precision and recall reported in figure 
 <dig>  we have taken into account only the true false positives. we can see that the recall for taxonfinder is significantly lower compared to netineti, while the precisions are comparable. for a dictionary-based approach like taxonfinder, it is less likely to have many false positives as it only retrieves what is already present in a known set of names in the dictionary and so can have higher precision, but the recall can be very low as we have seen in the results summarised in figure 
 <dig>  the number of false negatives  can be high as it cannot find anything that is not a genus and species combination from the dictionaries used. such an approach also cannot handle misspelled names, names with ocr errors, new species names, or other names not present in the dictionary. netineti on the other hand will handle these well and it is a name discovery tool. a comparison of netineti, taxonfinder and fat tool for the bhl book is presented in table 
 <dig>  the fat approach has lower precision and recall values compared to netineti and taxonfinder approaches for this corpus. the names marked up by the fat tool were compared with the manual mark up.  <dig> of the names identified by fat did not match with the manually marked up set of names. most of these unmatched names are species epithets with authorship information. we further analyzed a random sample of  <dig> names out of these  <dig> names and examined genus information interpreted by the tool in the marked up tags.  <dig> of the  <dig> mismatched names have correctly interpreted genus names and the remaining are all true false positives with incorrect genus tags. we estimated that  <dig> of these  <dig> are correct identifications and the adjusted precision and recall values for the fat approach were summarized in table 
 <dig>  for many of the true false positives, the fat tool tags the species epithet, but does not seem to recognize the genus name immediately preceding the species name.

results on new species web pages
we have also conducted several small experiments on web pages with information about newly discovered species along with their scientific names. netineti successfully discovers almost all the new species from the descriptions while the dictionary based taxonfinder finds in most cases either only the genus or does not recognize the new name at all. the results were summarized in table 
 <dig>  the double starred names are those that were detected by netineti and not detected by taxonfinder. a few uninominal names that were not detected by netineti but identified by taxonfinder are displayed with a single star in the table. in this set, it can be seen that netineti has only one false positive  and was able to discover almost all of the new species’ mentions in web pages with new species. the name “stephania” in the first entry in table 
 <dig> corresponding to taxonfinder is a false positive as the name in the context refers to a photographer not the genus “stephania”.

results on pmc full text and medline
the results of running netineti with naïve bayes algorithm for classification on  <dig> pmc full text articles are summarized in figure 
 <dig>  here we chose a subset of the articles that were specifically tagged with scientific names from the set of articles tagged with both common names and species names as an evaluation set in linnaeus system. among the  <dig> names that did not match with the manual annotation,  <dig> names are scientific names with misspellings mostly in one or two characters and names that were missed by the annotators. only  <dig> names were true false positives that do not correspond to any scientific names. so the precision and recall for netineti on this data set were  <dig>  and  <dig>  respectively. the linnaeus system deals with species level names including common names, so we cannot make a direct comparison with our system.

we also analysed the results of running netineti on the whole of medline with naïve bayes and maximum entropy  classifiers, which were the top two algorithms in terms of f-scores in table 
 <dig>  the results were summarized in table 
 <dig>  netineti with the naïve bayes algorithm found  <dig>  unique binomial and trinomial names while the maximum entropy algorithm found  <dig>  names. that is more than  <dig> times the number of species found by the dictionary-based linnaeus system even though we focus only on scientific names. in the names extracted from medline, the errors include disease names like enterohepatitis, terms like amputatio interilio-abdominalis which was extracted from title of a pubmed article in russian, chemical names like aminoanthracene. some of the errors in biodiversity text include terms like operculum corneous, words associated with some geographic locations like panaina. biological terms and certain words associated with geographic locations can be the kind of errors common to both the corpora. also, named entities with latin-like endings can be incorrectly identified as scientific names of organisms by the system especially when there is little or no contextual information.

the system is highly scalable and we ran name finding on the recent update of medline with over  <dig> million abstracts in under 9 hours on a  <dig>  ghz intel core i <dig> based machine running mac ox  <dig>  using  <dig> cores.

as netineti also extracts names with errors and variations, a need to map the names to known identifiers in a master list of names or a database arises. we are working on highly efficient methods based on suffix-trees to do such a mapping.

availability and requirements
the software system implementing netineti can be accessed at
http://namefinding.ubio.org. currently a naïve bayes classifier is applied by default for name finding. the american seashell book and a list of pubmed central ids used for evaluation of netineti can be found at
http://ubio.org/netinetifiles

CONCLUSIONS
in this article, we presented an approach for recognizing/discovering scientific names along with spelling errors and variations from various text sources in domains like biodiversity and biomedicine. we present netineti as a solution to name discovery that uses machine learning techniques to classify candidate names generated by applying rules and pre-filtering methods on text. netineti is highly scalable and configurable.

whether to know the number of scientific names covered in a text, to extract all the sentences/paragraphs associated with scientific names or to tag mentions of genes, protein or other entities with scientific names or whether to incorporate species names as meta data elements for search, etc. or for taxonomic indexing, an identification and discovery tool like netineti is very useful.

authors’ contributions
lma designed, developed the appraoch and implemented the system, performed the experiments described and is a major contributor in the preparation of this manuscript. hjm supervised the project and provided support for manuscript preparation and contributed to the manuscript. cnn reviewed the draft and provided support for the project. all authors read and approved the final manuscript.

