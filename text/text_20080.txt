BACKGROUND
the rapid development of high throughput sequencing and microarray technologies in the last years and the simultaneous introduction of the so-called next-generation sequencing instruments have produced two main consequences: a large amount of data generated, new and complex laboratory procedures  <cit> .

a laboratory management information system  is designed considering the need to carry out the research in an efficient and transparent manner allowing the implementation of different quality control strategies and improving the accessibility of the instruments. the improvement of the laboratory activities involves three primary factors: technology, information and people. in order to develop an effective lims all the three resources must be recognized and a thorough study of the laboratory processes must be taken into consideration.

till the late 1970s all the activities concerning the management of laboratory samples, associated analysis and reporting were time-consuming and error prone due to manual processes  <cit> . this gave some organizations impetus to optimize data collection and laboratory procedures. initially some custom in-house solutions have been developed, while some analytical instrument manufacturers, at the same time began to develop some commercial systems to run on their instruments.

the term lims entered the commercial world in the early 1980s to describe systems used in the pharmaceutical and related industries as quality assurance and quality control tools  <cit> .

in  <dig> the first generation of lims was introduced in the form of single centralized minicomputer provided with automated reporting tools. second generation lims became available in  <dig> and used third-party commercial relational databases to provide application-specific solutions. most of them relied on minicomputers  <cit> . third generation lims began in  <dig>  as personal computers became more powerful and prominent. they combined the personal computer's easy to use interface and standardized desktop tools with the computational power and reliability of minicomputer servers in a client/server configuration. by  <dig> fourth generation lims came into the picture decentralizing the client/server architecture further, optimizing resource sharing and network throughput by enabling process to be performed anywhere on the network  <cit> .

from  <dig> to  <dig> additional features and functionalities were included in lims, from wireless networking capabilities and geo-referencing of samples, to the adoption of xml standards  <cit> .

in the latest generation lims the adoption of web oriented software technologies assumes a key role  <cit>  together with a rising interest in the software as a service  distribution model through which the customers can save the expense of license fees and the costs of hardware and maintenance.

in this paper, we propose qtreds, a software platform initially born to address the specific needs of the crs <dig> sequencing laboratory. the main purpose of our in-house solution was to set up a system that provides the researchers with a complete knowledge of the laboratory processes at each step, managing and verifying the:

• workflow creation;

• samples traceability;

• diverse experimental protocol definitions;

• inventory of reagents;

• users' roles and privileges.

why develop an in-house lims rather than buy a commercial one? a great number of proprietary lims have been developed. starlims  <cit> , exemplar lims  <cit> , labvantage sapphire  <cit>  just to name a few, allow customers to benefit from vendors long-established experience and valuable resources.

on the other hand, most often these commercial solutions are large, complex and feature-rich products designed to be sold to large laboratories. their license fees are usually prohibitive and each extra feature or module they provide might come at additional costs  <cit> . furthermore the laboratories have to buy also the servers, peripherals, storage devices and other software licenses . most small or medium-sized laboratories cannot afford this expense  <cit> .

many commercial lims vendors are now offering rented, hosted and saas-based lims solutions. the rental approach is almost identical to the purchased one, except that the laboratory rents the software rather than purchasing the license. all the other purchases  remain the same, as do other costs  <cit> . the major difference is a staged payment for the software.

some lims vendors provide hosted thin-client solutions. a thin-client lims is an architecture which offers full application functionality that can be accessed through a simple web browser. rather than requiring the customer to purchase hardware and software, the customer simply uses the software running at the vendor's site. however, hosted software providers often do not rewrite their products to take advantage of new internet-based technologies, but simply put a different front-end onto dated systems.

another approach is the cloud-based model. while it bears some resemblance to the hosted model, the cloud-based saas model is usually built from the ground up using a service-oriented architecture. they are designed for multi-tenancy, where multiple customers share the same instance of the application running on the same operating system, on the same hardware, with the same data-storage mechanism.

these software applications are designed to virtually partition their data and configurations, so that customers do not see each other's data and work within their customized virtual application instances. according to this model, data are stored on the servers of the service provider and this fact can raise a number of issues if data confidentiality is critical, as it often happens in the biomedical field  <cit> .

many open-source lims are now available, but some of them had not been published when we started the development of qtreds in early  <dig>  <cit> .

before starting the development phase, we tried some of the solutions available at the time: we tested open-lims  <cit>  by installing it on our server but it was very unstable, in fact it was not recommended by the developers to use it in any productive environment; we also tried bika lims  <cit>  which is one of the leading open source lims, with a wide range of applications from agriculture to environmental monitoring. it offers many functionalities for free, but optional modules at a cost. it is based on python and the plone content management system. we programmed web services with python zope and plone, and our experience is that it is not a trivial software stack. furthermore plone performs better on a dedicated server and that could represent an hidden cost. other systems we have looked at, but not considered because we felt they did not correspond well to our needs are: labkey server  <cit>  a very much oriented to data analysis tool. in our case, the experiments are done "as a service", and the results are given to the researchers. the analysis are not done in the laboratory.

slims  <cit>  a sample-based laboratory information management system with a web-based interface to create, edit and view sample information. slims is designed to store and manage biological data in fact it features a micro-plate annotation tool and supports sds-page gels. it can also generate and export reports, but it does not provide any inventory management system and its web interface does not include the latest web technologies.

gnomex  <cit>  a very complete platform that includes a next generation sequencing/microarray lims, an analysis project center, and an application for annotating and programmatically distributing genomic data. it is much more complex than qtreds and it was designed for large research centers and clinics. because of that it does not meet the needs of a relatively small entity like the csgp laboratory. we tested also other solutions, but some of them were in a very early development stage or they were buggy and crashing and not stable enough to run in a production environment  <cit> .

the most important factor for the development of an in-house solution, even more than the license fees or the confidentiality issues, was the fact that the application had to be developed to meet the specific needs of the researchers of the csgp laboratory. when we started to develop qtreds, the main project in our laboratory was related to the dna sequencing of  <dig> individuals from sardinia  <cit> . at the same time other projects concerning rna and exome sequencing of a large part of the same set were in their early stages.

while for the dna sequencing the techniques and procedures in use were well defined and standardized, in the case of rna and exome sequencing, the methodologies and the protocols had not been decided yet, so we began to develop qtreds not only to collect the data, trace and manage each lab activity, but also to help researchers choose the best protocol to implement for their experiments.

we designed a system flexible and responsive enough to keep up with the speed at which the laboratory evolves.

implementation
development methodologies
qtreds has been developed adopting an agile software development approach. indeed, we have worked closely and continuously with researchers, operators, managers and other stakeholders involved in the project. in particular, we followed a behavior-driven development  strategy, asking questions focused on the behavior of the platform before and during the development stages, to avoid or at least reduce misunderstandings between stakeholders.

requirements were written down in the form of user stories, which described the expected use of each part of the application. user stories, a lightweight approach to use case analysis, have been compiled and continuously refined, in nontechnical language allowing all stakeholders to be involved in the process of creation and prioritization of the requirements.

starting from a general description of the needs of the csgp laboratory and the main functional requirements that the system was expected to have, we created a working but incomplete prototype, refining it constantly through a continuous interaction with the researchers and the personnel of the laboratory until the achievement of the desired results.

software architecture and design patterns
qtreds is a web application with a client-server architecture developed in the ruby programming language, using the framework rails  <cit> .

the application, according to the architectural pattern known as model-view-controller , has been organized dividing the code into three kinds of components . models implement business logic and are concerned with the manipulation of the data: how to store it, to change it or move it. typically for each type of entity managed by the application, we have created a corresponding model that encapsulates it. views serve as the interface between application users and model data. they contain information about the models with which users can interact and manage how to display it. controllers have the role of intermediaries between views and models in both directions: when a user interacts with a view, a precise controller action corresponding to that activity is invoked and it saves or updates data from the user to the model. on the other hand, the controller makes the model data available to the view so that it can be displayed to the user.

one important job of the model is to persist data which requires that some correspondence must be established between the operations on a model object in memory and how it is manipulated in the storage tier.

models implement the active record architectural pattern, providing an object relational mapping  layer which supports a wide variety of relational database management system . for the qtreds persistence tier we have chosen the mysql rdbms  <cit> . each instance of a model class corresponds to a single row in a specific table of the mysql database. the model object has built-in behaviors that allow to directly operate on the tables of the storage layer of the application.

the implementation of qtreds also relies on the use of different open-source programming libraries. the web user interface has been developed combining the ruby's built-in erb templating system with the prototype javascript framework  <cit>  that enabled us to deal with the asynchronous javascript and xml   <cit>  technology in a very easy and efficient way.

furthermore the use of the script.aculo.us  <cit>  set of javascript libraries provides us with a visual effects engine, that we used to enhance the interactive user experience with the application.

RESULTS
functional overview
all the activities and operations allowed by the qtreds platform can be assigned to four different functional blocks: 1) workflow management system, 2) sample handler, 3) inventory management system, 4) authorization system.

workflow management system
the workflow management system is a key component of our application. figure  <dig> illustrates the main concepts related to this functional block: it has the responsibility for defining and verifying a protocol and to convert it into the sequence of steps and tasks that represent a particular procedure or experiment.

a protocol, in our system, is a formal representation of an experimental procedure, expressed in the xml language  that has to be compiled according to a strict set of rules that we defined and collected in an xml schema definition  document .

this task can be accomplished manually by an authorized member of the laboratory with basic informatics knowledge. but writing down a protocol manually can be a very long, boring and error-prone task that requires the observation of precise syntactic and semantic rules. to reduce the probability of error and to allow users with no technical background to create an experimental protocol, we have developed a user-friendly visual tool, which we describe later in this article.

the xml protocol is interpreted and checked by the protocol parser module that processes the document, extracting and sending information to some support classes. coordinating the activities of these classes and of the experiment-related controllers and views, it provides the system with all the information needed to graphically represent the experiment workflow as a sort of "state diagram" that guides the user step by step, enabling him to manage and monitor the progression of his experiment. figure  <dig> illustrates the steps of an exome library preparation workflow of a running experiment. exome library preparation is one of the procedures performed within the exome sequencing technology. the workflow is graphically represented as a sequence of different color balls. each labeled ball describes a single step of the laboratory procedure  and its color defines its state: a green ball represents a completed activity, an orange ball an activity ready to be executed or in progress and not completely carried out; a red ball indicates that the corresponding activity has been terminated abnormally for some reason, and that the workflow cannot be carried out. grey balls represent steps of the workflow not yet available that require the completion of previous activities to be performed . when a user clicks on the ball of the step he wants to begin - order as we said, is mandatory at the moment - he will get a web page with forms to enter data and information related to that particular step . if default values have been set in the protocol/workflow definition then these will be already filled in the form. the user will then only have to fill what is different from the default, and then start the process. the complexity and level of detail of each of these web pages depends on how the users have defined that step in the protocol: it can be general or describe precisely every single phase of the process. it is up to the "workflow supervisor", i.e. the user authorized to create workflows, to decide the level of granularity of the information and the community standards to be used .

workflows can be created directly in xml or using the visual tool. plugins can be implemented for the visual tool to check for the required information of the chosen standard. plugins can also be written to export the data to various formats for inclusion in submissions to public databases. none of the laboratories we are collaborating with, is equipped with robots that can transfer samples and reagents between machines; because of that human intervention is always required between different steps of the workflow. so far the workflows that have been implemented reflect this and do not automatically activate the next step.

visual tool
whenever an authorized user creates a new protocol he has to upload the related xml protocol description file to the system. at this point, the system checks the file for syntactical correctness and semantic coherence and it stops when the document does not follow the rules defined in the xsd document.

as already mentioned, the process of defining and writing down an experimental protocol can be very complex and annoying. in order to simplify this task, we developed a special tool for creating protocols: it allows the user to drag-and-drop graphical objects to create experimental protocols in the xml format . each visual object has the aspect of a box and can be filled up with other objects, according to the rules defined in the xsd document. this reproduces the hierarchical structure of the xml protocols written down manually.

the interface is made up of two main components: a workbench in which the user can combine all graphical elements, and a floating palette in which he can find different elements needed to define an experimental protocol: an activity object, that represents a single step of an experiment, an instrument object, which can identify any device or machine present in the laboratory, a dose object to describe a particular reagent to use and so on. the user can combine all these elements, organize them in the appropriate hierarchical order and set all the parameters that are needed. the result of this graphical representation can be easily exported in the xml format and used by the workflow management module of the system. through the visual tool the user can also import an existent xml protocol, convert it to a graphical representation and manipulate it with the editing tools provided.

the tool has been implemented in pure html <dig> and javascript. html <dig> defines an event-based mechanism and additional markup for natively supporting drag and drop operations. this allowed us to develop a faster and more responsive tool, without the support of any other javascript library or framework.

sample handler
qtreds enables the users to enter either one single sample or multiple samples at a time using an excel spreadsheet-based wizard. in the first case the user should fill in a web form providing some mandatory information, for instance a unique sample identifier .

in the second case, the user loads a group of samples through an excel file: the wizard allows the mapping of each column of the spreadsheet to one of the attributes used by the system to describe a sample. after a sample is entered into the system, a new record is saved to the database with its defined set of attributes.

if the number of columns of the spreadsheet mapped exceeds the number the samples' attributes or if the user needs to associate a sample with some extra parameters, the system will store them in a different table. to characterize each sample, we have defined two attributes, the original id that corresponds to the identifier with which a sample is submitted to the laboratory and the lab id that is an internal parameter used by the system for the sample tracking process. samples may be inputs of an experiment in which they are processed to generate new samples. the output samples created, keep their relationship with the inputs, holding the same original id value, while they change their lab id in relation to the particular experiment in which they were involved.

qtreds checks for the uniqueness of the combination of the two attributes, refusing samples with the same original id and lab id.

depending on the experimental procedure carried out, the system internally associates to each sample an attribute called state, which describes the current status of the sample . the value of this attribute is exploited by the system to identify which processing activity can be done and the class of experiment each sample can be associated with .

inventory management system
the inventory management module allows the tracking of all the reagents and items used by the researchers for their experiments. it includes four different components:

• catalog: all items  involved in some laboratory process, are represented in qtreds as abstract entities that we defined as categories. a category is not a physical item that can be found inside the laboratory, but it is an abstract description of a set of objects that share some features. the catalog collects all these categories, allowing the basic crud operations on them;

• stock: the smallest physical instance or unit of a particular category is referred to as stock. a stock indicates an item physically present in the laboratory and it specifies its quantity. to prevent the danger that a running experiment may be interrupted due to shortage of reagents or other consumables, the system provides a mechanism of "real time" assessment of stock levels, warning the researchers if some item goes below a defined threshold;

• personal stock: before starting an experiment, qtreds lists all reagents and consumables needed to conduct it. the personal stock is a sort of "shopping cart" in which each researcher must insert all the items required to perform his experiment. each experiment is represented as a sequence of consecutive steps called activities. the system does not allow the user to begin his experiment if his personal stock does not contain at least the reagents needed to perform the first activity.

• topology: starting from a simple yamal file, qtreds builds a hierarchical map of the laboratory modeled as a rooted tree. the root of the tree is the whole laboratory, the subsequent nodes are the different rooms, then the freezers, going down to the granular level of the shelves, racks, etc. this representation is used by the system to track sample location.

authorization system
qtreds is a web-based multi-user application. many users can access the system simultaneously, define their own projects, experiments and manage the inventory. within this context, it is very important the definition of user privileges and roles. the authorization module defines different user roles, each with a different access profile; each role includes a set of features and privileges to which the assigned user have access. so far, we have implemented six main roles: administrator, supervisor, simple user, inventory manager, analyzer and viewer. depending on the role assigned, each user is allowed to perform different levels of operations and access different kinds of information. for example a simple user can see only data related to his experiments or to the projects in which he is involved, while the administrator has a complete view of all the activities and data processing operations in the laboratory. a user can have different roles in different projects. the core of the authorization module includes a set of database tables in which is stored all of the information about user roles and privileges, and a centralized authorization function. this function provides access rights and privileges to each user according to:

• user identity ;

• specific action to be performed ;

• some additional parameters.

the response this function returns can be a boolean value, which tells if the user is allowed or not to perform that action or a sql query that is used by the system to extract all the information a user can access to, according to his role.

each user's request to gain access to a specific resource, involves a call to the centralized authorization function, passing along some arguments  to it. to retrieve these parameters, the system has to perform some queries on those database tables that are related to the authorization mechanism. in order to reduce duplicate queries and repeated function calls, we have implemented a caching strategy that allowed us to improve the performances of the system in terms of responsiveness and reactivity.

CONCLUSIONS
qtreds has been developed, starting from the local needs of the csgp  <cit> , where it has been used since late  <dig> to make almost one hundred dna library preparation and sequencing experiments, processing thousands of samples. we received two different kinds of reaction from the users of the qtreds system: the ones working in team fully adopted the tool for their daily activities, providing us continuously feedback for the development of new features; on the other side some of those working on individual assignments had more difficulties to accept it.

a positive point for the users of qtreds has been the fact that it has an ipad optimized user interface: all users of our laboratory are equipped with tablets and can enter data into our system as they would with a paper notebook while moving around for the experiments. another point of satisfaction has been the implementation of the "personal stock" tool in the inventory management system. it warns users about all consumables and items needed, helping them in the smooth run of the experiments by preventing an abrupt stop due, for example, to lack of a given reagent. when a first demo version of qtreds was released, some users complained the absence of simple computational tools to convert measurement units or to calculate some common physical quantities like mass, concentration and so on.

the requests have been addressed and satisfied in a later stable release introducing new elements and attributes in the xsd file and enriching the xml protocols with new functionalities.

as a whole, most of the users appreciated the way qtreds improved the management of information especially when there was a huge increase of the number of samples being treated.

a new version of qtreds is currently being tested and it is going to be released. the upcoming version is provided with an efficient application programming interface  in order to allow a smart and automated access to information. the api has been implemented according to the representational state transfer  architecture  <cit> . using this api any authorized user or system can retrieve resources and information via a standard hypertext transfer protocol request, appending the appropriate query parameters to the url.

the restful web service, based on a dedicated web server, handles requests from clients, processes and then returns the appropriate response as an xml document. the api can also be used to insert data into the qtreds database tables, creating this way, a bidirectional communication channel between our system and any other external application or tool. the new release will also provide a complete reporting system to visualize and export data in different file formats.

thanks to its flexibility our system can be easily adapted to address the issues and the needs of other kinds of laboratories; therefore we are currently developing some implementations for various research groups in the fields of metabolomics and proteomics, with whom we are actively collaborating.

availability and requirements
• project name: qtreds 

• project home page: http://qtreds.crs <dig> it

• operating systems: platform independent

• programming languages: ruby, html, javascript

• server requirements: apache  <dig>  mongrel, rails  <dig> . <dig>  mysql  <dig> 

• web browser requirements: firefox 19+, chrome, safari 5+

• license: free for academic use

list of abbreviations
ajax: asynchronous javascript and xml; api: application programming interface; bdd: behavior-driven development; crud: create read update delete; csgp: crs <dig> sequencing and genotyping platform; http: hypertext transfer protocol. lims: laboratory information management system; mvc: model-view-controller; orm: object-relational mapping; rest: representational state transfer; rdbms: relational database management system; saas: software as a service; sql: structured query language; xml: extensible markup language; xsd: xml schema definition; yaml: yamal ain't markup language.

competing interests
the authors declare that they have no competing interests.

authors' contributions
pp wrote this paper, designed and implemented the system, gf designed and defined the architecture of the system coordinating development activities, lv contributed to the gathering of requirements from stakeholders and tested the application under real world conditions leading to major improvements in usability and responsiveness. prt coordinated and supervised the entire project and contributed feedback and advice for this paper.

supplementary material
additional file 1
exome library preparation workflow. the file illustrates an example of the structure of an experimental workflow that can be generated through the visual tool or directly in xml, provided it adheres to the syntactic rules defined in the xsd file.

click here for file

 additional file 2
workflow grammar. this file expresses the basic set of rules to which an experimental workflow written in xml must conform in order to be considered valid by qtreds.

click here for file

 acknowledgements
the authors would like to thank all the members of the crs <dig> genotyping and sequencing platform for their advice and contributions. a special thank goes to maria francesca urru and marco marcelli for the continuous feedback and support provided.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2014: integrated bio-search: selected works from the 12th international workshop on network tools and applications in biology . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/15/s <dig> 

declarations
the publication costs for this article were funded by sardegna ricerche.
