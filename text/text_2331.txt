BACKGROUND
in this paper we consider the problem of calculating the expected time spent in a state and the expected number of jumps between any two states in discretely observed continuous time markov chains . the case where the ctmc is only recorded at discretely observed time points arises in molecular evolution where dna sequence data is extracted at present day and past evolutionary events are missing. in this situation, efficient methods for calculating these types of expectations are needed. in particular, two classes of applications can be identified.

the first class of applications is concerned with rate matrix estimation.  <cit>  describes how the expectation-maximization  algorithm can be applied to estimate the rate matrix from dna sequence data observed in the leaves of an evolutionary tree. the em algorithm is implemented in the software xrate  <cit>  and has been applied in  <cit>  for estimating empirical codon rate matrices.  <cit>  uses the eigenvalue decomposition of the rate matrix to calculate the expected time spent in a state and the expected number of jumps between states.

the second class of applications is concerned with understanding and testing various aspects of evolutionary trajectories. in  <cit>  it is emphasized that analytical results for jump numbers are superior to simulation approaches and various applications of jump number statistics are provided, including a test for the hypothesis that a trait changed its state no more than once in its evolutionary history and a diagnostic tool to measure discrepancies between the data and the model.  <cit>  assumes that the rate matrix is diagonalizable and that the eigenvalues are real, and applies a spectral representation of the transition probability matrix to obtain the expected number of state changes.

 <cit>  and  <cit>  describe a method, termed substitution mapping, for detecting coevolution of evolutionary traits, and a similar method is described in  <cit> . the substitution mapping method is based on the expected number of substitutions while  <cit>  base their statistics on the expected time spent in a state. furthermore  <cit>  describes an application concerned with mapping synonymous and non-synonymous mutations on branches of a phylogenetic tree and employs the expected number of changes between any two states for this purpose.  <cit>  uses the expected number of state changes to calculate certain labeled evolutionary distances. a labeled evolutionary distance could for example be the number of state changes from or to a specific nucleotide. in  <cit>  substitution mapping is invoked for identifying biochemically constrained sites. in  <cit>  and  <cit>  the summary statistics are calculated using the eigenvalue decomposition method suggested by  <cit> . in  <cit>  and  <cit>  the substitution mapping is achieved using a more direct formula for calculating the number of state changes. in this direct approach an infinite sum must be truncated and it is difficult to control the error associated with the truncation. an alternative is described in  <cit>  where uniformization is applied to obtain the expected number of jumps.  <cit>  uses the expected number of jumps on a branch to detect lineages in a phylogenetic tree that are under selection.

a third algorithm for obtaining the number of changes or time spent in a state is outlined in  <cit> . the algorithm is based on  <cit>  where a method for calculating integrals of matrix exponentials is described. a natural question arises: which of the three methods  for calculating conditional expectations of summary statistics for a discretely observed ctmc should be preferred? the aim of this paper is to provide an answer to this question. we describe and compare the three methods. our implementations in r  <cit>  are available at http://www.birc.au.dk/~paula/.  the performance and discussion of the algorithms are centered around two applications. the first application is concerned with rate matrix estimation; we estimate the goldman-yang codon model  <cit>  using the expectation-maximization algorithm. the second application is based on the labeled distance estimation presented in  <cit> .

consider a stochastic process {x:  <dig> ≤ s ≤ t} which can be described by a ctmc with n states and an n × n rate matrix q = . the off-diagonal entries in q are non-negative and rows sum to zero, i.e. qcc = - Σd≠c qcd = -qc. maximum likelihood estimation of the rate matrix from a complete observation of the process is straight forward. the likelihood of the process, conditional on the beginning state x, is given by 

  l:0≤s≤t})= exp-∑cqctc∏c=1n∏d≠cqcdncd, 

where tc is the total time spent in state c and ncd is the number of jumps from c to d. the necessary sufficient statistics for a ctmc are thus the time spent in each state and the number of jumps between any two states. in applications, however, access is limited to dna data from extant species. the ctmc is discretely observed and we must estimate the mean values of tc and ncd conditional on the end-points x = a and x = b. from  <cit>  we have that

  e=e=iccabpab 

  e=e=qcdicdabpab 

where p = ) = eqt is the transition probability matrix and

  icdab=∫​0tpacpdbdu. 

many applications require a linear combination of certain substitutions or times. examples include the number of transitions, transversions, synonymous and non-synonymous substitutions. in the two applications described below the statistics of interest is a linear combination of certain substitutions and times. let therefore c be an n × n matrix and denote by Σ the matrix with entries

  ∑= ∑c,dccdicdab. 

we describe, compare and discuss three methods for calculating Σ. the evaluation of the integrals  takes o time and therefore a naive calculation, assuming that c contains just one entry different from zero has a o running time. even worse, if c contains o entries different from zero, then the naive implementation has a o running time. for all three methods our implementations of Σ run in o time.

RESULTS
applications
application 1: rate matrix estimation
our first application is the problem of estimating the parameters in a ctmc for evolution of coding dna sequences which we describe using the  <dig> ×  <dig> rate matrix  given by goldman and yang  <cit> :

  qij=0ifthereismorethanonedifferencebetweencodonsiandjακπjifjisobtainedfromibyasynonymoustransitionαπjifjisobtainedfromibyasynonymoustransversionαωκπjifjisobtainedfromibyanon - synonymoustransitionαωπjifjisobtainedfromibyanon - synonymoustransversion 

where π is the stationary distribution, κ is the transition/transversion rate ratio, ω is the non-synonymous/synonymous ratio and α is a scaling factor. the stationary distribution π is determined directly from the data using the codon frequencies. we estimate the remaining parameters θ =  using the expectation-maximization  algorithm  <cit>  as described below.

suppose the complete data x is available, consisting of times and types of substitutions in all sites and in all branches of the tree. the complete data log likelihood is, using  and ,

  ℓ=-αls,tv-αωlns,tv-ακls,ts-ακωlns,ts+nlogα+ntslogκ+nnslogω, 

where we use the notation

  ls,ts= ∑iti ∑jπj1∈ls,ts)andnts= ∑i,jnij1∈lts) 

where e.g.

 ls,ts={:i and j differ at one position and the substitution of i with j is a synonymous transition}. 

a similar notation applies for ls,tv, lns,ts, lns,tv, nns and n, where the last statistic is the sum of substitutions between all states  that differ at one position and s, ns, ts and tv subscripts stand for synonymous, non-synonymous, transition and transversion.

the complete data log likelihood can be maximized easily by making the re-parametrization β = ακ. we find that

  α^=ntvls,tv+ω^lns,tv,β^=ntsls,ts+ω^lns,tsandω^=-b+b2-4ac2a, 

where a = -lns,tvlns,tsns, b = lns,tvls,ts + lns,tsls,tv and c = ls,tvls,tsnns.

in reality the data y is only available in the leaves and the times and types of substitutions in all sites and all branches of the tree are unaccessible. the em algorithm is an efficient tool for maximum likelihood estimation in problems where the complete data log likelihood is analytically tractable but full information about the data is missing.

the em algorithm is an iterative procedure consisting of two steps. in the e-step the expected complete log likelihood

  g=eθ <dig> 

conditional on the data y and the current estimate of the parameters θ <dig> is calculated. in the m-step the parameters are updated by maximizing g. the parameters converge to a local maximum of the likelihood for the observed data.

the expected log likelihood conditional on the data y and under the three parameters α, κ and ω is

  e=-αe-αωe-ακe-ακωe+elogα+elogκ+elogω. 

therefore the e-step requires expectations of linear combinations of waiting times in a set of states and number of jumps between certain states. because of the markov property this calculation can be divided in two parts. first we use the peeling algorithm  <cit>  to obtain the probability ℙ that a branch k of length tk with nodes γk and βk above and below the branch, respectively, has end-points a and b. second, we calculate the desired summary statistic by summing over all branches. for example we have

  e= ∑branchk∑a,bℙe 

  e= ∑branchk∑a,bℙe. 

the e-step thus consists of calculating conditional expectations of linear combinations of times such as e and substitutions such as e where ls,ts and nts are given by . in our application n =  <dig> and the first type of statistics e is ) on the form  with diagonal entries cii= ∑jπj1∈ls,ts) and all off diagonal entries equal to zero. the second type of statistics e is also on the form  with off-diagonal entries cij=qij1∈lts) and zeros on the diagonal.

application 2: robust distance estimation
the second application is a new approach for estimating labeled evolutionary distance, entitled robust counting and introduced in  <cit> . the purpose is to calculate a distance that is robust to model misspecification. the method is applied to labeled distances, for example, the synonymous distance between two coding dna sequences. as it is believed that selection mainly acts at the protein level, synonymous substitutions are neutral and phylogenies built on these type of distances are more likely to reveal the true evolutionary history. the distance is calculated using the mean numbers of labeled substitutions conditioned on pairwise site patterns averaged over the empirical distribution of site patterns observed in the data. in the conventional method the average is done over the theoretical distribution of site patterns. the robustness is therefore achieved through the usage of more information from the data and less from the model.

let q be the rate matrix of the assumed model, p = eqt, the labeling be given through a set of pairs ℒ and the data be represented by a pairwise alignment y =  of length m. as data only contains information about the product qt, where t is the time distance between the sequences, we can set t =  <dig> 

suppose we observe the complete data consisting of the types of substitutions that occurred in all sites and let nl= ∑i,jnij1∈l) be the labeled number of substitutions. a natural labeled distance is given by dl=e. the labeled distance is estimated as the average across all sites of the expected number of labeled substitutions conditioned on the observed end points:

  d^l=1m∑s=1me=1m∑s=1me∑i,jni,j1∈l)| <dig> y1s,y2s. 

therefore this application requires evaluating a sum on the form  with off-diagonal entries cij=qij1∈l) and zeros on the diagonal.

algorithms
the calculation of Σ is based on the integrals icdab. in this section we present three existing methods for obtaining the integrals and extend them to obtain Σ.

eigenvalue decomposition 
when the rate matrix q is diagonalizable, the computation of transition probabilities pab and integrals icdab can be done via the eigenvalue decomposition . evd is a widely used method for calculating matrix exponentials. let q = uΛu- <dig> be the eigenvalue decomposition, with Λ = diag. it follows that

  p=eqt=et=ueΛtu- <dig>  

because Λ is diagonal, eΛt is also diagonal with ii=eλit.

the integral  becomes

  icdab= ∑iuaiic ∑judjjbjij 

  wherejij=teλitifλi=λjeλit-eλjtλi-λjifλi≠λj. 

replacing icdab with  in , rearranging the sums and using acj= ∑dccdudj,bij=jij∑cicacj,dib= ∑jbijjb and Σ= ∑iuaidib we find

  Σ=uu- <dig> 

where ○ represents the entry-wise product.

the eigenvalues and eigenvectors might be complex, but they come in complex conjugate pairs and the final result is always real; for more information we refer to the supplementary information in  <cit> . if the ctmc is reversible, the decomposition can be done on a symmetric matrix obtained from q , which is faster and tends to be more robust. let π be the stationary distribution. due to reversibility, πaqab = πbqba, which can be written as Πq = q*Π where Π = diag. let s = Π1/2qΠ-1/ <dig> 

we have that

  s*=Π-1∕2q*Π1∕2=Π-1∕2Π-1∕2=Π-1∕2Π-1∕2=Π1∕2qΠ-1∕2=s 

where s* is the transpose of s. then s is symmetric. let Λ, v be its eigenvalues and eigenvectors, respectively. then vΛv- <dig> = s = Π1/2qΠ-1/ <dig>  which implies q = Λ and it follows that q has the same eigenvalues as s and Π-1/2v for eigenvectors.

the results can be summarized in the following algorithm:

algorithm 1: evd

input: q, c, t

output: Σ

step 1: determine eigenvalues λi.

            determine the eigenvectors ui for q and compute u- <dig> 

step 2: determine matrix j from .

step 3: determine matrix Σ from .

uniformization 
the uniformization method was first introduced in  <cit>  for computing the matrix exponential p = eqt. in  <cit>  it was shown how this method can be used for calculating summary statistics, even for statistics that cannot be written in integral form. let μ = maxi  and r=1μq+i, where i is the identity matrix.

then

  p=eμt= ∑m=0∞rmmm!e-μt= ∑m=0∞rmpois 

where pois is the probability of m occurrences from a poisson distribution with mean λ. using  we also have

  icdab= ∫0tpacpdbdu= ∫0t∑i=0∞acii!e-μu∑j=0∞db)jj!e-μdu= ∑i=0∞∑j=0∞acdbμi+ji!j!e-μt ∫0tuijdu= ∑i=0∞∑j=0∞acdbμi+ji!j!e-μti!j!!ti+j+1=1μ∑i=0∞∑j=0∞acdbi+j+1!e-μt=1μ∑m=0∞pois∑l=0macdb. 

replacing  in , rearranging the sums and using that ∑dccddb=cb and ∑caccb=ab we derive

  Σ=1μ∑m=0∞pois∑l=0mrlcrm-l. 

the main challenge with this method is the infinite sum and we use  to determine a truncation point. in particular if we let λ = μt and truncate at s we can bound the error using the tail of the poisson distribution:

 pab-∑m=0sabpois= ∑m=s+1∞abpois≤∑m=s∞pois. 

we have that, for large values of λ, pois≈ℕ, where ℕ is the normal distribution with mean μ and variance σ <dig>  therefore, for large λ, the error bound

 b= ∑m=s∞pois≈1-Φs-λλ, 

where Φ is the cumulative distribution function for the standard normal distribution. consequently we can approximate the truncation point s with λΦ-1+λ. if b = 10- <dig> we obtain Φ- <dig>  =  <dig> .

another way to determine s is to use r to evaluate pois for values of m that gradually increase, until the tail is at most b = 10- <dig>  combining these two approaches, we performed a linear regression, approximating the tails from r by c1+c2λ+c3λ. we obtained c <dig> =  <dig> , c <dig> =  <dig> , c <dig> =  <dig>  but, in order to be conservative, we use s=4+6λ+λ where ⌈x⌉ is the smallest integer greater than or equal to x. in figure  <dig> we compare the exact truncation value and the linear regression approximation.

the linear regression provides an excellent fit to the tail of the distribution.

in summary we have the following algorithm:

algorithm 2: uni

input: q, c, t

output: Σ

step 1: determine μ, s and r.

step 2: calculate rm for  <dig> ≤ m ≤ s.

step 3: calculate a= ∑l=0mrlcrm-l for  <dig> ≤ m ≤ s.

            using the recursion a = ar + rm+1c.

step 4: determine Σ from .

exponentiation 
this method for calculating the integral  was developed in  <cit>  and emphasized in  <cit> . suppose we want to evaluate ∫0tequbeqdu, where q and b are n × n matrices. to calculate this integral, we use an auxiliary matrix a=qb0q and the desired integral can be found in the upper right corner of the matrix exponential of a:

  ∫0tequbeqdu=1:n,:2n. 

we are interested in

  icdab= ∫0tpacpdbdu=∫0tac)dbdu=∫0tequ1{}eqduab 

where 1{} is a matrix with  <dig> in entry  and zero otherwise. we can use this method to determine icdab by simply setting b=1{}, construct the auxiliary matrix a, calculate the matrix exponential of at, and finally read off the integral in entry  in the upper right corner of the matrix exponential.

replacing  in  and rearranging the terms we have

  Σ= ∫0tequ ∑c,dccd1{}eqduand∑c,dccd1{}=c. 

therefore by setting b = c in the auxiliary matrix we obtain Σ.

the expm algorithm is as follows:

algorithm 3: expm

input: q, c, t

output: Σ

step 1: construct a=qc0q.

step 2: calculate the matrix exponential eat.

step 3: Σ is the upper right corner of the matrix exponential.

testing
we implemented the presented algorithms in r and tested them with respect to accuracy and speed.

accuracy
the accuracy of the methods depends on the size of the rate matrix and the time t. to investigate how these factors influence the result, we used two different ctmcs that allow an analytical expression for . the first investigation is based on the jukes-cantor model where the rate matrix has uniform rates and variable size n:

 qij=-1ifi=j1n-1ifi≠j. 

q has two unique eigenvalues:  <dig> with multiplicity  <dig> and -nn- <dig> with multiplicity n- <dig>  we obtain

 pij=1n+n-1nexp-ntn-1ifi=j1n-1nexp-ntn-1ifi≠jandicdab=1n2t+texp-ntn-1-2n1- exp-ntn-1ifa≠c,d≠bt+2texp-ntn-1+22n1- exp-ntn-1ifa=c,d=bt-texp-ntn-1+n1- exp-ntn-1otherwise. 

we compared the result from all three methods against the true value of  for size n ranging from  <dig> to  <dig>  t =  <dig>  and random binary matrices c. entries in c are  <dig> with probability  <dig>  for each fixed size, we generated  <dig> different matrices c. the average normalized deviation is shown in figure  <dig> 

the second ctmc is the hky model:

 q=⋅κπgπcπtκπa⋅πcπtπaπg⋅κπtπaπgκπc⋅ 

where π =  is the stationary distribution and κ =  <dig>  is the transition/transversion rate ratio. this rate matrix has an analytical result for  which can be obtained through the eigenvalue decomposition. the eigenvalues and eigenvectors of q are

 λ=whereπr=πa+πgandπy=πc+πt,u=1-πyπr0-πgπa1-πyπr0111-πtπc <dig> u-1=πaπgπcπt-πa-πgπcπrπyπtπrπy00-πcπyπcπy-πaπrπaπr <dig>  

from this, using the symbolic operations in matlab  <cit> , we obtained the final analytic expression for . using this model we compared for all three methods the true value of  for various values of t and randomly generated binary matrices c. for each t we generated  <dig> different matrices c. the average normalized deviation is shown in figure  <dig> 

in both cases, all methods showed good accuracy as the normalized deviation was no bigger than  <dig> × 10- <dig>  we also note that expm tended to be the most precise while uni provided the worst approximation. to further investigate the accuracy, we performed calculations on randomly generated reversible rate matrices: we first obtained the stationary distribution from the dirichlet distribution with shape parameters equal to  <dig>  then all entries qij with i ≥ j from the exponential distribution with parameter  <dig> and finally calculated the remaining entries using the reversibility property. in all the runs the relative difference between evd, uni and expm was less than 10- <dig>  this indicated that all three methods have a similar performance in a wide range of applications.

speed
partition of computation
assume we need to evaluate Σ for a fixed matrix c and multiple time points t ∈ {t <dig> ...tk}. in each iteration of the em-algorithm in application  <dig> we need this type of calculation while in order to calculate the labeled distance in application  <dig> just one time point is required. using evd  we do the eigenvalue decomposition  once and then, for each time point ti, we apply step  <dig> and step  <dig>  the eigenvalue decomposition, achieved through the r function eigen, has a running time of o. in step  <dig> we determine j and this takes o time. step  <dig> has a running time of o due to the matrix multiplications.

if instead we apply uni , we run steps 1- <dig> for the largest time point max and then, for each time point ti, we apply step  <dig>  steps 1- <dig> take o ) n3) time, and step  <dig> takes on2) time for each i ∈ { <dig> ..., k}. therefore, even though the total time for both methods is o, the addition of one time point contributes with o for evd, but only on2) for uni. recall that the constant s is the truncation point for the infinite sum in the uniformization method.

in the case of expm  we need to calculate the matrix exponential at every single time point. we used the expm r package  <cit>  with the higham <dig> method. this is a padé approximation combined with an improved scaling and squaring  <cit>  and balancing  <cit> . the running time is o.

experiments
we tested the speed of the algorithms in six experiments based on the presented applications and two more experiments using a non-reversible matrix.

gy
the first experiment corresponded to running the em algorithm on real data consisting of dna sequences from the hiv pol gene described in  <cit> . hiv has been extensively studied with respect to selection pressure and drug resistance and in  <cit>  the authors document convergent evolution in pol gene caused by drug resistance mutations. the observed data y was a multiple codon alignment of the sequences. for simplicity, we did not consider the columns with gaps or ambiguous nucleotides. to compare the performance of the methods as a function of the size of the data set, we applied the em algorithm for  <dig> data sets containing from  <dig> up to  <dig> sequences each, extracted from the hiv pol gene data. for each set we assumed the sequences were related according to a fixed tree; we have reconstructed the phylogenies in mega  <cit>  using the jukes-cantor model and neighbor-joining. we ran the em algorithm until all three parameters converged. experiments two and three used the previously estimated matrix q given by  with α =  <dig> , κ =  <dig>  and ω =  <dig> . we let cij = qij and cii =  <dig>  corresponding to calculating the total number of expected substitutions e, and computed the value of Σ for  <dig> equidistant sorted time points tk with  <dig> ≤ k ≤  <dig> .

the table shows the time points tk, μtk and the approximation of the poission tail s. for experiment  <dig>  tk spanned the interval that contains the  <dig> longest branch lengths from the phylogeny of the  <dig> hiv pol sequences. in experiment  <dig> we started at  <dig>  and ended at  <dig>  we wished to design experiment  <dig> such that the corresponding s was the same as s from experiment  <dig>  this allowed us to illustrate the relative performance of the methods when running on different sizes of the rate matrix. experiment  <dig> was done on time points starting from  <dig>  and ending at  <dig> . as before, we wished to design experiment  <dig> such s corresponded to experiment  <dig>  experiment  <dig> used the same tk as experiment  <dig> 

gtr
in the fourth experiment we estimated the robust labeled distance of two sequences, using the same set-up as in  <cit> . for each considered evolutionary distance t between  <dig>  and  <dig>  we generated  <dig> pairwise sequence data sets of length  <dig> which have evolved for time t under the general time reversible  model with

 q=⋅r1πgr2πcr3πtr1πa⋅r4πcr5πtr2πar4πg⋅r6πtr3πar5πgr6πc⋅ 

where r =  and π = . for labeling, we considered the jumps to and from nucleotide a, leading to cij = qij if i or j represents nucleotide a. for each data set, we estimated the gtr parameters as described in  <cit>  and calculated the robust distance. experiments  <dig> and  <dig> used the same gtr matrix and cij = qij if i or j represents nucleotide a and zero otherwise, and computed the value of Σ for  <dig> equidistant sorted time points tk with  <dig> ≤ k ≤  <dig> .

unr
in the last two experiments we used the same set-up as in experiments  <dig> and  <dig> but with a different matrix and time points . as the speed of evd is influenced by the type of the model, we decided to employ a non-reversible matrix. we chose the unrestricted model and carefully set the rates such that the matrix has a complex decomposition:

 q=-42110-32110-32211- <dig>  

discussion
the evd algorithm assumes that the rate matrix is diagonalizable. however, a direct calculation of the integral  in the non-diagonalizable case is actually possible using the jordan normal form for the rate matrix. let q = pjp- <dig> where j is the jordan normal form of q and p consists of the generalized eigenvectors , i.e. j has a block diagonal form j = diag where jk = λki + n is a matrix with λk on the diagonal and  <dig> on the superdiagonal. we have

  eqt=pdiagp- <dig>  

and noting that n is a nilpotent matrix with degree dk  we obtain

  ejkt=etλketn=eλkti+tn+t22n2+…+tdk-1!ndk- <dig>  

in order to calculate the integral  the expressions  and  are used. it is evident that this procedure is feasible but also requires much bookkeeping.

in  <cit>  an extension of uniformization, adaptive uniformization, is described for calculating transition probabilities in a ctmc. the basic idea is to perform a local uniformization instead of a global uniformization of the rate matrix and thereby have fewer jumps in the jump process.  <cit>  considers a model with rate matrix

 q=-3v3v00μ-2v00μ-v <dig> 

. if this process starts in state  <dig> then the first jump is to state  <dig> and the second is from state  <dig> to either state  <dig> or state  <dig>  this feature can be taken into account by having a so-called adaptive uniformized  jump process where the rate for the first jump is 3ν, for the second is μ + 2ν and, assuming μ + ν > 3ν, the rate for the third jump is μ + ν. from the third jump the rate in the au jump process is μ + 2ν as in the standard uniformized jump process. the au jump process has a closed-form expression for the jump probabilities  but is of course more complicated than a poisson jump process. the advantage is that the au jump process exhibits fewer jumps. this procedure could very well be useful for codon models where the set of states that the process can be in after one or two jumps are limited because only one nucleotide change is allowed in each state change.

in an application concerned with modeling among-site rate variation,  <cit>  applies the uniformization procedure  to calculate the transition probabilities instead of the eigenvalue decomposition method .  <cit>  shows, in agreement with our results, that uniformization is a faster computational method than eigenvalue decomposition.

the presented methods are not the only ones for calculating the desired summary statistics. for example, in  <cit>  it is suggested to determine the expected number of jumps from the direct calculation

 pabe= ∫0tacqcd)acds= ∑i=0∞∑j=0∞acqcddb ∫0tsiji!j!ds= ∑k=1∞tkk!∑m=0k-1acqcddb, 

where the infinite sum is truncated at k =  <dig>  the problem with this approach is that it is difficult to bound the error introduced by the truncation. in uni a similar type of calculation applies but the truncation error can be controlled.

CONCLUSIONS
recall that evd assumes that the rate matrix is diagonalizable and this constraint means that evd is less general than the other two algorithms. we have shown in the discussion how a direct calculation of the integral  is actually still possible but requires much bookkeeping. on top of being less general, evd is dependent on the type of the matrix: reversible or non-reversible. we have shown how this discrepancy can make evd slower than uni even when the state space has size of only  <dig> 

we found that the presented methods have similar accuracy and expm is the most accurate one. with respect to running time, it is not straightforward which method is best. we found that both the eigenvalue decomposition  and uniformization  are faster than the matrix exponentiation method . the main reason for evd and uni being faster is that they can be decomposed into a precomputation and a main computation. the precomputation only depends on the rate matrix for evd while for uni it also depends on the largest time point and the matrix c. we also remark that expm involves the exponentiation of a matrix double in size. uni is particularly fast when the product μt is small because in this case only a few terms in the sum  are needed.

authors' contributions
pt extended the existing methods to linear combinations of statistics, implemented the algorithms and performed the testing. ah conceived the study and guided the development and evaluation of the methods. both authors wrote the paper. all authors read and approved the final manuscript.

