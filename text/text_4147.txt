BACKGROUND
in contrast to the gene-centric approach, systems biology  <cit>  emphasizes the importance of the interactions between different genes in determining the phenotype. instead of asking "what is the role of gene a", the question becomes "what is the role of gene a in system b". the activity  of a gene is therefore not viewed as an isolated event, but assigned a meaning in the context in which it is active. an analogy from the sphere of computer science equates the genome to a database, and the system's dynamic behavior to the execution of a computer program that uses the database  <cit> . this paradigm shift has two major implications for the biomedical community. first, it complicates understanding cellular processes as each component must be considered with respect to its environment. second, the fact that alternative phenotypes correspond to alternative dynamic behaviors of the system offers considerable advantages, because it is technically easier to influence the dynamics of a cellular network than to modify the information coded in the genome. combining computational tools, which can help overcome the complexity of biological networks, with wet lab testing can spearhead system-oriented research. in this paper we present a method that was developed with this principle in mind. focusing on gene regulatory networks, we develop a method to find minimal perturbations that change the network dynamics. by modifying established network analysis algorithms from the field of computer science, we are able to cope with some of the difficulties commonly associated with this objective.

an important tool for network analysis that will be used in this work is network perturbation. a common procedure in model analysis, it refers to applying a modification of the network and observing its resulting dynamic behavior. knockout, knock-down or overexpression of a gene in the network are examples of possible perturbations. the exact type of perturbation varies with the model and the goals of the modeler. in some cases the motivation is to observe how single entities respond  <cit> , while in others it is to determine network robustness  <cit>  or change in the global state  <cit> . for example, sridhar et al.  <cit>  find enzymes whose inactivation eliminates compounds from a metabolic network. the implementation of a perturbation for our purposes is described in the methods section.

a related concept in theoretical computer science is minimal cut sets  <cit> . in reliability theory, network elements  have a failure probability . a network is called reliable if a set of paths within it connect a given subset of vertices, and the joint probability of the paths is above a given threshold. a minimal cut set is the smallest set of elements whose removal from the network makes the network unreliable. network reliability shares some important similarities with the concepts proposed in this work, as we also associate the existence of non-existence of network elements with probabilities. a main difference between the two approaches is that identification of minimal cuts sets is a method for analyzing a network via its structural properties. in contrast, our analysis will address the network dynamics and hence will be based on the concept of trajectories, as explained below.

our first modeling choice will be to model the network's regulators as discrete entities, an approach that proved effective in previous genetic regulatory network  analyses  <cit> . this level of abstraction reduces the need of the modeler to provide fine details  <cit> , while being detailed enough to capture the main features of the grn dynamics and render them easier to analyze. in addition, the abstraction lends itself to the development of effective methods for incorporating uncertainty in the regulatory functions  <cit> . the global state of a network is defined as a vector whose entries are the local states of all the network's components. the network traverses from a certain global state to another in discrete time steps as a result of the activity of regulation functions. we assume that regulation functions act in an asynchronous manner: that is, that at each time step any regulation function can occur, provided its output changes the global state. a trajectory is a sequence of global states that the network can traverse in sequence.

given a set of trajectories t and a set of global states s, s is called a phenotype of t if every trajectory in t visits only states of s. similarly, s is called a prohibited phenotype of t if no trajectory in t reaches any state in s. we say that a network n has a phenotype s  with respect to a global state g if the set s is a phenotype  of the group of trajectories that the network generates starting from the initial state g. the following question can now be formulated: "how can the network dynamics be manipulated in order to generate or avoid a specific phenotype?" answering this question has important practical implications, such as promoting the discovery of novel drug targets  <cit>  or the design of synthetic biological systems  <cit> . therefore, it is desirable to have a systematic way to answer the question for different networks under different conditions.

this is quite difficult, even under the simplified discrete model of grns: first, model dynamics can be highly complex, and second, experimental methods give only indirect clues about the network design. the second problem makes it difficult to construct models for networks that have not been extensively studied, especially when the number of participating entities is large. as for the complexity of network dynamics, consider the simple example of a network of n genes where each gene is regulated by some of the others. assuming that a gene can be in one of two states, on or off, the network can assume 2n different global states. for ten genes, this results in over one thousand states. for twenty genes, there will be over a million states. hence, it is possible that from some initial states the network will traverse an exponential number of states. even this scenario is a simplification, because it assumes the network is known with perfect accuracy, which is seldom true. we will address these problems in the following sections.

in this study, given some initial states of the system and a desired phenotype, we will determine how a network should be perturbed in order to generate that phenotype, where a perturbation sets the level of one or more entities and thus changes the network's traversals between global states. in order to apply our algorithm efficiently to the boolean model, we translate the network into a petri net  <cit> , and utilize mcmillan's unfolding algorithm  <cit>  to search the state space of a perturbed network. when the structure of the network is not fully known, we assign probabilities to alternative structures, redefine a phenotype probabilistically, and generalize our method to handle this case. to the best of our knowledge, this is the first method that integrates the trajectories of multiple alternative network structures, an important objective given the quality of current knowledge about biological networks. we demonstrate this methodology on the human glioma grn.

RESULTS
algorithm
our model represents each gene by a distinct entity that can take one of two levels: level  <dig> means a gene is expressed and level  <dig> means it is not. the levels of genes are controlled by boolean regulation functions, which can have any of the other genes  as inputs. the initial global state of the model is a vector that assigns an initial level to each gene. starting from the initial state, the global state of the network can change in discrete time steps, where one regulation function is activated at each step. in other words, regulation functions can act in any order, and not all at the same time. this means that there can be more than one trajectory per initial global state. figure 1a illustrates the model with a simple grn.

we first give a description of our algorithm, followed by its implementation using petri nets. the algorithm takes as input a network model, the network's state graph, a set of initial states a, and a group of states b. it outputs all the minimal perturbations that cause the network to have phenotype b with respect to every state in a.

given a grn n, its state graph is a directed graph g whose nodes are global states of n. in g there is an edge  if and only if there is a regulation function f that can act in state a and lead directly to state b. the label of  is the function f. note that several labels are possible on the same edge if it is a self loop. figure  <dig> illustrates a simple grn and its state graph.

we define two operations on a network: an activation of a gene causes the gene to stay fixed on level  <dig>  for example, if we activate gene b in figure 1c, the network dynamics will lead to the endpoint state  <dig>  similarly, a repression of a gene causes the gene to stay fixed on level  <dig>  in figure 1c, repressing gene a will result in cyclic behavior that will lead back to the initial state. self loops in the state graph are meaningless under these definitions, and therefore are omitted.

the biological means of activation and repression vary depending on the mechanisms of regulation  <cit> . common examples are knock-down, overexpression, and addition of inhibitors and activators, but less standard examples can be thought of, such as insertion of artificial entities  <cit>  or de-novo network design  <cit> .

a network perturbation is a set of operations  on genes. the maximal allowed size k of a perturbation p is assumed to be a small constant. an edge in the state graph contradicts perturbation p if it leads to a state in which an activated gene is at level  <dig> or a repressed gene is at level  <dig> 

let a and b be two groups of states in the state graph g, such that a âŠ† b. we want to find a minimal perturbation such that the network has phenotype b with respect to every state of a. assuming that k is constant, the following algorithm runs in time polynomial in the size of g

 <dig>  for i =  <dig> ...,k do

for every possible perturbation set p of size i, do

i. modify the group a according to p; i.e. set the level of activated genes to  <dig> and the level of repressed genes to  <dig> 

ii. add a node s and connect it by outgoing unlabeled edges to all the nodes of group a.

iii. add a node t and connect each node of group  to it using outgoing unlabeled edges.

iv. create a modified graph g' from g by removing all edges that contradict operations in p.

v. if there is no path from s to t, output the set p and stop.

 <dig>  if this step is reached, then there is no solution of size â‰¤k.

if one is interested in all the minimum solutions, then instead of halting after finding the first good perturbation of size i, halt only after enumerating all perturbations of size i. if b is a prohibited phenotype then step 1a should be changed: the node t should be connected to b instead of .

the running time on a state graph g =  is o), where n is the number of entities in the grn: the creation of g' and searching for paths in it can be accomplished by a bfs, and the loop occurs o times. hence this algorithm is practical if we assume that g is not too large. however, since |v| = 2n, only very modest sized grns can be directly solved this way in practice.

to address this complexity problem, we will formulate our problem using petri nets and present a methodology that copes better with the state explosion problem.

petri nets are a modeling formalism that has been used to model different types of biological networks  <cit> . a petri net is a bipartite graph composed of two sets of nodes: places and transitions . the transitions set contains nodes that represent discrete events that can occur concurrently. the places set represents network entities. transitions and places are connected by directed edges that represent interactions between network entities. the places having an edge into  a transition are called its preset  places. the global state of the network is given by a discrete assignment of tokens to different places , and is referred to as marking. for example, the network in figure 2a has three places, and the marking in i assigns one token to each of the place p <dig> and p <dig> and zero tokens to p <dig>  tokens can be consumed and produced by transitions. the rule that determines token consumption and production is called the firing rule, and it allows a transition to fire  if every one of its preset places contains a specified amount of tokens. when fired, a transition consumes these tokens and produces a set number of tokens to every one of its postset places. see figure 2a for an example.

reddy et al  <cit>  introduced the use of petri nets in the context of systems biology. later, chaouiya et al.  <cit>  suggested a methodology for translating boolean regulatory networks into petri nets, which we adopt. additional examples of modeling grns with petri nets are refs.  <cit> . translating the network to this framework has the advantage of a rich literature on techniques for analyzing the dynamics of petri nets. in addition, petri nets are suitable for describing other types of biological networks, such as grn models with additional metabolic and signaling layers.

mcmillan's unfolding algorithm  <cit>  is a method for dealing with the state explosion problem for petri nets. a full description of the unfolding algorithm can be found in ref.  <cit> . briefly, given an initial state, mcmillan's algorithm gradually and implicitly records the states reachable from it by constructing a directed graph called a branching process. a branching process graph begins with places that correspond to the initial marking of the petri net, and transitions that are added to it can consume from these places and produce new places, thereby representing consumption and production of tokens. a transition can consume only from places that do not belong to conflicting firing sequences, i.e. firing sequences that cannot occur concurrently. thus, additions of new transitions preserve the acyclic property of the branching process graph, and ensure that it represents only feasible firing sequences . refs.  <cit>  provide excellent illustrations of the algorithm's capacity to reduce the search space on larger network instances.

every reachable marking has a subset of transitions in the branching process graph that correspond to the firing sequence that generates it. these subsets are called configurations. for a transition t, the set of transitions from which there is a directed path to t is referred to as t's local configuration , and is associated with a marking. the marking of  is the marking obtained by firing all the transitions that belong to .

in the grn representation that we adopted, every entity e corresponds to two places: one represents its active level and the other represents its inactive level. the firing rules are set so that exactly one of the places is marked at any time, i.e. each pair is place invariant  <dig>  these places will be called the active and inactive places of the entity e. figure  <dig> illustrates this concept.

the unfolding algorithm can produce a much smaller graph than the complete state graph. the following preprocessing to the algorithm spans all the states that are reachable from a given initial state under a perturbation p:

 <dig>  for every activated entity e in p, set a token in the active place of e.

 <dig>  for every repressed entity e in p, set a token in the inactive place of e.

 <dig>  remove all transitions that have edges outgoing to places contradicting p.

when there are several initial states, a branching process graph is generated for each initial state.

the above algorithm requires full information about the grn model. since this is usually not the case, we now address the handling of ambiguities in the grn logic. consider a network in which every gene can have several alternative regulation functions, each associated with a probability that it is the true regulation. the events corresponding to the true regulations of different genes are assumed to be independent. hence, the probability of a trajectory is the product of the probabilities of the regulation functions involved in it. given a parameter Î±,  <dig> â‰¤ Î± â‰¤  <dig>  the definition of a phenotype can now be extended as follows: a network has a phenotype p with respect to a set of initial states if every subset s of regulation functions that has probability â‰¥Î± generates only trajectories that remain in p. note that if the condition holds for s it will hold also for every s' âŠ† s, which can have higher probability. this definition induces a distribution of all alternative networks into layers. the top layer contains networks with probability â‰¥Î±. sets of networks with lower probabilities belong to lower layers, each layer corresponding to a different probability. the lowest layer has probability Î±n, where n is the number of entities. higher layers have lower capacity because there can be less networks with high probability than networks with low probability . for networks in the top layer we examine every possible trajectory - this follows from the definition of probabilistic phenotype, since the full set of regulation functions of these networks has probability â‰¥ Î±. as we descend in the hierarchy, layers have greater capacities and contain networks of lower probabilities. for every such network we examine only trajectories that are generated by strict subsets of their regulation functions, because the full sets of regulation functions of these networks have probability <Î±. in other words, in lower layers we still follow the dynamics of every network, but to a lesser extent than in higher layers, and so each structure has an influence on the phenotype in proportion to its probability.

similarly, a network has a prohibited phenotype p with respect to a set of initial states if every subset s of regulation functions that has probability â‰¥Î± does not generate any trajectory that leads to p.

a naÃ¯ve way to test for a probabilistic phenotype would be to repeat the non-probabilistic algorithm for every set of regulation functions with probability >Î±. however, the number of such sets grows exponentially with the number of entities that have more than one regulation function. more specifically, assume that there are n genes and every gene has k alternative regulation functions. for each gene, a set can specify one of the k regulation functions or leave that gene unregulated, i.e. not commit to a specific function. this gives rise to n alternative sets of regulation functions. if k is constant, the expression is exponential in n. next we discuss how to modify the unfolding algorithm to test for a probabilistic phenotype.

since we translate a regulatory network into a petri net, every transition of a configuration c in the branching process graph corresponds to a regulation function . denote by Ï† the set of regulation functions that are represented by the transitions of c. note that if c contains a single regulation function for each entity, the size of Ï† is at most the number of entities in the model. denote by Ï†' the subset of Ï† that contains only regulation functions with probability < <dig> . we say that Ï†' is unambiguous if it does not contain two regulation functions that regulate the same entity.

a key concept in the original unfolding algorithm is a cutoff point; it is a transition t whose local configuration  is associated with a marking that is also associated with some other local configuration  that contains fewer transitions. at cutoff points one can prune redundant branches in the constructed branching process graph. given such a pair of transitions t and t', we modify mcmillan's cutoff criterion to handle probabilities by adding another condition that must hold for t to become a cutoff point:

cutoff criterion 1: Ï†' âŠ† Ï†'

in addition, we make sure that each local configuration is unambiguous by keeping track of the functions that have been utilized in it, and allowing a transition t to fire from c only if Ï†' is unambiguous.

finally, in order to save time and space, we add another cutoff criterion to the algorithm

cutoff criterion 2:

a transition is a cutoff point if the product of the probabilities of regulation functions that are used in its local configuration is <Î±.

note that since we tightened the cutoff criterion, the size of the branching process graph can become larger than in mcmillan's algorithm.

theorem 1: the modified version of mcmillan's algorithm maintains:

 <dig>  for a phenotype p: if there is a set of regulation functions f with probability â‰¥Î± that generates a trajectory that does not remain in p, then such a trajectory will be represented by a configuration c in the branching process graph and Ï†' âŠ† f.

 <dig>  for an avoided phenotype p: if there is a set of regulation functions f with probability â‰¥Î± that generates a trajectory that leads to p, then such a trajectory will be represented by a configuration c in the branching process graph and Ï†' âŠ† f.

the proof is provided in the appendix. given that the theorem holds, we simply need to construct the branching process graph and test for such a configuration c in order to verify that a phenotype is maintained or avoided.

a test case
shmulevich et al  <cit>  constructed a probabilistic model of a small autonomous subnetwork of genes based on human glioma gene expression data  <cit>  obtained for  <dig> known genes, in tissue samples with differing levels of glioma severity. the inferred network was used for a probabilistic boolean network  simulation  <cit>  by akutsu et al.  between expression levels of each of its input genes and the output gene divided by the sum of cods of the expression level of the output gene and all its potential regulators  <cit> .) in view of its intriguing dynamic behavior and biomedical relevance, we used that network model to test our minimum perturbation set algorithm. after removing a gene that had no regulators,  <dig> entities remained, each associated with 1- <dig> regulation functions. when there is more than one function for an entity, the functions are assigned probabilities that add up to one. six genes have a single regulation function, seven genes have two alternative regulation functions, and one gene has three possible regulation functions. a description of the logic functions appears in ref.  <cit> 

we transformed this network into a petri net , and applied our algorithm to find minimum perturbations from  <dig> random initial states. the initial states were tested in this way because the "biologically correct" initial states cannot be derived from current knowledge. moreover, since the glioma network is manifested in dividing cells that constantly redistribute their molecular contents, it is not unrealistic to assume a variety of initial states.

we defined the prohibited phenotype s of the network as where as the set of global states in which the gene tie- <dig> for the receptor tie- <dig> <cit>  and the gene gnb <dig> for the human g-protein beta subunit  <cit>  are both expressed . the set s was selected following reports that vasculogenesis, an important phase in tumor progression, is initiated by a signal to the receptor tie- <dig> that is propagated through a g protein  <cit> . since repression of either tie- <dig> or gnb <dig> is a trivial solution, these genes were excluded from the perturbations tested. similarly, initial states in which both tie- <dig> and gnb <dig> are active were excluded from the set of possible initial states, because there is trivially no solution from these states. the parameter Î±, which determines the least probability of a trajectory that will be explored - and hence the running time of the algorithm, was set to  <dig> .

â€¢ mice deficient in gstp are viable, fertile, with life spans essentially similar to animals not deficient in the gene. however, they show an enhanced susceptibility to carcinogen-induced skin papillomas.

â€¢ the absence of gstp increases the activity of stress kinases, which results in changes in gene expression that enhance cell proliferation pathways.

â€¢ hypermethylation of the gstp regulatory region is a common somatic alteration identified in human prostate cancer. this alteration results in the loss of gstp expression and is proposed to occur during pathogenesis of the disease.

â€¢ in the latter case it was suggested that there could be therapeutic value in restoring gstp activity, although it has not been tried.

our results are consistent with these observations. they single out the activation of gstp as an operation that blocks tumor progression.

in initial states where no size  <dig> perturbation suffices, gstp does not participate in a perturbation. this is consistent with the observation that gstp is often highly expressed in cells that have already turned malignant.

there are four common perturbations of size  <dig>  all of them include repression of natural killer enhancing factor b, accompanied by activation of one of bcl2a, tgf-Î², nfÎºb, or beta-actin. the first two operations are associated with repression tumor cell death, while the latter three are associated with constant induction of cell migration.

the most common perturbations of size  <dig> are activation of both tgf-Î² and nfÎºb or repression of these entities in addition to activation of the entity bcl2a <dig> 

these results can be understood in the context of the stages of glioma progression zagzag et al. distinguish three stages that precede the formation of new blood vessels.

a. in the first stage tumor cells migrate and adhere to existing blood vessels. huber et al. concluded that nfÎºb, at least in part, substitutes for tgf-Î² in the process of emt, which is essential for tumor migration.

b. in the second stage of tumor progression, blood vessel cells undergo apoptosis, and the nearby tumor cells undergo necrosis. breaking cell-to-cell adhesion is thought to be a trigger for the apoptotic process. disrupting cell migration or preventing apoptosis may halt the regulatory program at the second stage.

c. in the final stage, new blood vessels are formed. the initial states that correspond to this stage are included in the prohibited phenotype.

thus, the combination of anti-apoptotic signals in addition to setting of cell migration signals in size  <dig> and size  <dig> perturbations may correspond to blocking of apoptosis and disrupting the formation of blood vessels, and halting the regulatory program at the second stage. the most common size  <dig> perturbation may correspond to prevention of the first stage of tumor progression.

we interpret our findings in light of existing experimental data as follows: gstp can prevent the initiation of the vasculogenesis program. in later stages it is no longer effective, but other genes can be disrupted in order to halt this program, depending on the stage of vasculogenesis - the later the stage the larger the perturbation that is needed.

all executions were performed on x <dig>  <dig> bits machines with pentium iv or zeon processor and at most  <dig> gb ram. jobs were run in a time-sharing environment and therefore the running times are only an upper bound. the program code was written in c. after  <dig> hours, 70% of the jobs finished. since the rest of the jobs required more than  <dig> hours, we used only those 70% that concluded early in our analysis.

discussion
system-level analysis presents researchers with new challenges and at the same time offers new opportunities for better understanding of the biology. the complexity of reconstructing biological networks and analyzing their dynamics makes computational tools essential for system-level approaches  <cit> 

we have described a computational method that determines the minimum size perturbations required for obtaining  a specific phenotype. because the function of genes depends on the global context in which they are active - the state of the system - the phenotype cannot be represented by the activity or inactivity of a single gene, but rather by the global state of the network. we therefore defined a phenotype based on network dynamics as a set of global states that must be preserved , and designed an algorithm that follows this definition. the method was implemented for a probabilistic boolean model, and was demonstrated on a glioma network.

we showed that two major problems in network analysis, namely state explosion and partial knowledge, can be alleviated by translation to petri nets and extensions of the unfolding technique. our method demonstrates the power of computational analysis of the network's dynamics. on the glioma network it singled out one perturbation of size  <dig> whose effect on the phenotype was strongest. that perturbation has strong support in the literature. in addition, the most prominent perturbations of sizes  <dig> and  <dig> can be explained in the context of glioma progression. we expect this method can be used to derive such insights for other networks, because it does not require perfect knowledge and uses the broadly applicable petri net semantics.

though the paper focuses on grns, the suggested computational method can be applied to signaling or metabolic networks and to networks that integrate several layers, e.g. metabolic and regulatory. petri nets have been used for modeling all these network types.

our method has several limitations: some instances of the problem still require exponential running time, making our method impractical for finding a minimal perturbation for large models. our method is sensitive to modeling accuracy and depends on the correctness of prior knowledge, albeit in a probabilistic setting. in addition, we assume that the network is asynchronous, while in some cases the order of occurrence of regulation functions may be determined by large rate differences among them.

improving the algorithm's performance is one of our future goals. the minimal perturbation algorithm can be used in practice only when the size of a perturbation is small; allowing larger perturbations requires new algorithmic ideas. however, to date it is impractical to perturb more than a few entities in the cell, making speed-ups useful primarily for analyzing larger networks. the case where some of the entities are synchronized and some are not can also be considered . finally, the unfolding algorithm may be improved by modifying the cutoff criterion.

other model checking techniques for petri nets are described in ref.  <cit> . though not directly related to unfolding, they provide alternative attempts to battle the state explosion problem when using the petri net semantic.

CONCLUSIONS
the ability to effectively manipulate a given network's dynamics in order to produce a desired behavior depends both on advances in experimental techniques and on the ability to computationally analyze the network. we presented a computational methodology for determining a minimum size perturbation yielding a desired phenotype that copes with some of the urgent difficulties in modeling. application of this methodology to ongoing experimental projects and extension of its theoretical foundations are among our future goals.

authors' contributions
the authors designed and developed the method together. gk implemented the algorithm and carried out the testing. both authors wrote the manuscript.

appendix
theorem
let p be a phenotype . if there is a set of regulation functions f with probability â‰¥Î± that generates a trajectory that does not remain in p , such a trajectory will be represented by a configuration c in the branching process graph and Ï†' âŠ† f.

proof of the theorem
we prove the theorem for a phenotype. the proof for a prohibited phenotype is symmetric.

let s be a state that does not belong to the phenotype, and let f be a set of regulation functions with probability â‰¥Î± such that f generates some trajectory that reaches s.

the proof is by induction on the number of state traversals  in the state graph that are needed for reaching the state s. for purposes of the proof, we will use the term "infinite branching process graph" for a branching process graph in which cutoff points are not applied, and the term "finite branching process graph" for the branching process graph that is created by the algorithm.

base
zero state traversals, i.e. the initial state. the initial state is reachable by every set of regulation functions. in the branching process graph it is represented by the initial marking. the set Ï† of the initial marking is the empty set, and therefore the theorem holds for the base case.

assumption
every state that is reachable by a set of regulation functions with probability â‰¥Î± and n- <dig> edge traversals is represented in the branching process graph.

step
let Ï€ be the path in the state graph that leads to s, and let n be the length  in Ï€. we want to show that some trajectory leading to s that is generated by a set of regulation functions with probability â‰¥Î± is represented in the branching process graph.

let e be the last edge  in Ï€. the resulting path Ï€' = Ï€/{e} ends at some state s' and is of length n- <dig>  since there is a path of length n- <dig> to s' whose functions belong to the set f, by the inductive hypothesis s' is represented by some configuration c' in the branching process graph and Ï†' âŠ† f.

let t' be the transition that represents the edge e. we want to show that t' can be added to the branching process graph to yield a configuration c that represents Ï€.

first, all of the input places that t' requires are output places of c', and therefore are not in conflict. add t' to the branching process graph such that it consumes from these places. since Ï†' âˆª {t' }âŠ† f, t' will not be set as a cutoff point according to cutoff criterion  <dig>  if t' is not set as a cutoff point due to cutoff criterion  <dig> either, then we are finished, because we obtained a configuration c that represents s. therefore assume that t' is set as a cutoff point according to cutoff criterion  <dig> 

in the latter case,  is already represented by some local configuration c''. according to cutoff criterion  <dig>  Ï†' âŠ† Ï†' âŠ† f. if Ï† âŠ„ f, i.e. there are some regulation functions with probability  <dig>  that are used in c'' and not in , then we will build the configuration c for a set f' that has the same probability as f, i.e. probability â‰¥Î±. otherwise, we will build c for the set f. in any case we will have Ï†' âŠ† f.

now, note that if  was not set as a cutoff point, then the set of transitions c/ could have been added to  in the branching process graph to yield the configuration c. intuitively, imagine that the branching process graph is infinite, i.e. cutoff points are not used at all. since c'' corresponds to the same marking as , transitions that correspond to the transitions of c/ in the original petri net can be added to c'' in an infinite branching process graph to produce a new configuration c''' that is smaller than c and Ï†' âŠ† f. if the new configuration is not represented in the finite branching process graph, then it must also contain a cutoff point t''. we can repeat the same process with the cutoff point t'', until we get a configuration that has the same marking as c, uses only functions of f , and is represented in the finite branching process graph. we will surely obtain such a configuration because each time that we repeat this process the local configuration that corresponds to the cutoff point becomes smaller, and the minimal size of a configuration is  <dig> 

