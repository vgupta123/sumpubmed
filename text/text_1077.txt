BACKGROUND
modern sequencing technologies provide sample substrate for the analysis of large amounts of genetic information. specifically, single-cell sequencing  is now one of the most powerful methods in genome discovery and analysis. named method of the year  <dig>  <cit> , it plays an increasingly important role in many domains. notable areas of research include medicine and the analysis of disease pathways  <cit> , especially in cancer biology  <cit>  and the development of targeted treatments   <cit> . additionally, scs has proven a valuable and very powerful tool in evolutionary and environmental microbiology, for example by assessing intra- and inter-phylum relationships of bacteria and archaea  <cit>  and providing insights into key metabolic functions of uncultivated clades within their ecosystems  <cit> .

a primary challenge in single-cell sequence data is the potential presence of contamination and the detection thereof  <cit> . foreign dna which does not belong to the target genome of a given single cell, might be introduced into a sample in different ways. sources of contamination can include unclean lysis or whole genome amplification reagents, in addition to sample introduced non-target dna  <cit> .

while much effort has been invested into engineering devices and methods for cell isolation and amplification steps that minimize contamination caused by the surrounding sequencing setup  <cit> , careful quality control is vital to prevent the propagation of misleading results in public databases.

given those obstacles, prodege, an automated protocol for the decontamination of genomes was recently developed  <cit> . prodege combines the blast algorithm  <cit>  as a popular choice for database sequence alignment with reference-free pca-reduced oligonucleotide profiling to enhance classification accuracy. another method, checkm  <cit> , solely relies on the presence of multiple single-copy marker genes as an indication for contamination in a given sample, not operating reference-free. more recent classification methods  <cit> , most notably kraken  <cit> , are as accurate as blast but much faster, thus can speed up supervised detection. all these techniques heavily rely on references, hence they require existing knowledge about the characteristics of possible contaminants, making them less applicable either in the case of contaminants not being contained in databases or marker genes not being present in the sample . since the majority of species is unknown  <cit> , they are difficult to detect by such methods and unsupervised, taxonomy-free analysis is required  <cit> .

complementary to reference-based methods, clustering of oligonucleotide signatures is a promising approach that already found early application in metagenomic binning . from the perspective of computational intelligence, contamination detection as a clustering problem is very similar to metagenomic binning. both metagenomic and scs samples can be represented as a set of high-dimensional data points. binning and also contamination detection then address the same challenge of reliably detecting clusters in a high-dimensional data space. in this context, quite a few challenges arise: to circumvent negative side effects in such high-dimensional spaces  <cit>  and to enable human expert inspection, it is crucial to use appropriate subspace embeddings to transform the data into an easily visualizable representation, i.e. two or three dimensions. modern, non-linear dimensionality reduction methods, in particular barnes-hut-sne   <cit>  have proven successful  <cit>  in that context.

the automatic determination of the number of clusters and its cluster validity, a deep and crucial question in the context of clustering  <cit> , poses yet another challenge. in contrast to metagenomic binning where the aim is to accurately bin sequences in a larger number of clusters, contamination detection in scs requires the discrimination between one or more clusters . this complication heavily reduces the set of applicable clustering algorithms: the majority of methods for estimating the number of clusters rely on cluster-specific measures such as internal validity indices  <cit> . since these are not defined for only one cluster, a distinctive null model for unimodal data is required, i.e. the techniques are usually not suited to distinguish one versus more than one cluster, hence cannot reliably identify non-contaminated samples.

last, machine learning methods such as dimensionality reduction and clustering are based on statistics of the data and introduce certain amounts of variance. to overcome this limitation and to provide accurate and interpretable results, it is useful to integrate confidence measures. for this task, bootstrapping  <cit>  is a popular choice.

in this contribution, we present a novel software tool called acdc , which seamlessly integrates reference-based with reference-free methods. being based on both, very fast exact database alignments and modern techniques from unsupervised machine learning, acdc is able to accurately identify contamination in single-cell sequencing data. to our knowledge, integrating entirely reference-free methodologies is a novelty, and complements existing high performing database-driven approaches such as prodege. the use of appropriate clustering algorithms allow the removal of foreign sequences to yield clean single-cell genome assemblies. additionally, the integration of statistically profound confidence values support expert interpretation. as we expect single-cell genomes to further and rapidly populate public databases, acdc will be a resource-effective tool in the quality assurance of single-cell draft genomes, especially for users who do not have the background to use the included techniques directly.

implementation
acdc detects contamination in a series of steps which are depicted in fig.  <dig>  starting with contigs from a given single-cell genome assembly, both reference-free and reference-based methods are employed. in the former, tetramer frequencies are calculated first , resulting in a high-dimensional vectorial representation which makes it possible to apply suitable machine learning algorithms. as its high dimensionality would introduce a number of adverse side effects in further processing, it is crucial to reduce dimensionality . this enables the accurate estimation of contamination confidences on the basis of clustering . external tools are then used to both classify sequences using ultrafast exact alignment  and to predict 16s rrna genes . in the case of detected contamination, further clustering algorithms are employed to enable decontamination and export of clean samples . results are then interactively visualized using a flexible web interface . most of these steps include a number of hyper-parameters crucial in machine learning, for which acdc provides an auto-selection mode with well-tested default values . in the future, the integration of results from existing tools such as prodege will help to increase detection performance.
fig.  <dig> acdc contamination detection pipeline: results from both reference-free and reference-based techniques are fusioned and post-processed to end up with a clean sample


i is the length of contig i. default choices of Δ
w=w/ <dig> and k= <dig>  are robust. for contigs with l
cc mutual nearest neighbors. the parameter k
cc can be interpreted as the minimum number of data points contained in a separate cluster. to be able to detect also very small contamination, we use a default value of k



reference-free detection
 <dig>  data pre-processing
in order to apply machine learning techniques, it is necessary to transform contigs, represented as sequences, into a vectorial representation. here, it is common practice to use oligonucleotide signatures  <cit> . a window of width w is fixed and subsequently shifted over the contig sequence using step Δ
w . for each shift, the underlying k-mer frequencies are evaluated. this results in one 4k-dimensional data point per shift, accounting for the  <dig> nucleotide bases. for example, taking k= <dig>  would result in  <dig> dimensions, however, by accounting for reverse complements, it can be reduced to  <dig> dimensions. it is worth noting that taking k= <dig> corresponds to the gc content. the choice of window parameters has considerable influence on the resulting representation. here, choosing a large window width, capturing genome-specific, rather than gene-specific information will result in less noise  <cit> . however, a small number of data points is disadvantageous for clustering, such that is has to be taken care to choose w not too large. acdc automatically adjusts window parameters such that for large contigs w is homogeneous and for small contigs w is adapted to it’s length, i.e. no contigs are discarded. table  <dig> includes further information on the setting of w. besides using k-mers as a characteristic genomic signature, we looked into using coverage, too. however, due to the coverage bias in multiple displacement amplification  <cit> , using this data for single genomes is problematic.
fig.  <dig> data pre-processing that transforms a sequential data representation into vectorial data using a sliding window technique: exemplary for k= <dig>  on each shift, a 256-dimensional vector is generated by counting all permutations of the four bases




 <dig>  dimensionality reduction
in machine learning, the analysis of high-dimensional data is severely limited by the so-called curse of dimensionality  <cit> . to be able to accurately cluster tetramer frequencies, it is crucial to reduce data dimensionality while keeping desired properties such as cluster structure. for this task, modern non-linear dimensionality reduction  and its recent, efficient barnes-hut approximation  is employed. it puts a particular focus on the formation of cluster structures, which enables further clustering algorithms to deliver accurate results. both qualitative and quantitative analysis  <cit>  of bh-sne have shown it is superior to both pca  <cit>  and to using raw high-dimensional vectors, when applied to tetramer frequencies.

 <dig>  estimation of contamination confidences
an integral part of acdc is the confidence and decision of whether a sample is contaminated or not. this problem can be seen as a clustering task. optimally, one operational taxonomic unit  is represented as one cluster, implying that the presence of more than one cluster indicates contamination. thus, the task is to estimate the number of clusters k. this requires careful selection of methods and parameters  <cit> . in contrast to other applications such as metagenomic binning  <cit> , one is not primarily interested in the actual number of clusters, rather in the distinction between k= <dig>  and k> <dig> . as the notion of a cluster is ill-posed, this is an inherently difficult task: most techniques for estimating k operate on cluster-specific characteristics, defined for k> <dig> only, making them inapplicable in our case. the case k= <dig> requires an appropriate null model to which the data is compared to in order to be able to detect no structure. we reviewed techniques for this task in the context of contamination detection  <cit>  and found two particularly promising approaches: 
the dip-statistic test for multimodality of pair-wise distances , where a significant multimodal distribution indicates k> <dig>  <cit> .

counting the number of strongly connected components  in a k
cc-nearest-neighbor graph .  <cit> 




contamination may occur in a variety of different cluster shapes and sizes. both methods have been chosen to be employed in acdc to detect those in an antagonistic fashion. while the former is able to detect large and possibly overlapping clusters, the latter is able to detect small and outlier clusters . consequently, a given genome assembly is marked as contaminated when dip or cc indicate more than one cluster.
fig.  <dig> illustration of the complementary detection capabilities of dip and cc using two different contaminated samples. left: using a mutual 9-nearest-neighbor graph, cc identifies two clusters  while dip isn’t able to detect multimodality as seen in the distribution of pairwise distances below. right: two overlapping clusters prevent cc from detecting two components while dip detects significant multimodality in the distribution of pairwise distances




furthermore, noisy data, e.g. from very short contigs or from the inherent structure of some species might form separate clusters even in the presence of only one otu. to prevent false positive contaminant identification from wrongly formed clusters, acdc post-processes cluster assignments in two steps: 
disregarding the possibility of chimeric contigs, a contig is expected to appear in only one otu. thus, data points that occur in different clusters, but belong to the same contig, indicate a wrong clustering. all points of such a contig are reassigned to the cluster which has the most points of the contig assigned.

we include an aggressive threshold that determines the minimum number of base pairs that is allowed to form a separate cluster. smaller clusters are considered as outliers and are neither included into the calculation of contamination confidences nor into cleansing. the default threshold of  <dig> bp works well throughout all tested data sets. a lower threshold provides more sensitive results towards very low levels of contamination and can be adapted by the user easily.




last, the machine learning techniques used in acdc, namely dimensionality reduction and clustering, depend on data statistics and hence introduce certain amounts of variance over different runs. in the case of clear contamination, i.e. well separated and compact clusters, these techniques agree with high probability. the same holds true for the case of a clean sample and one well-shaped cluster. however, in the case of an unclear contamination state such as strongly overlapping clusters, results may vary. hence, it is desirable to provide confidence values gathered over different runs. for this task, acdc employs bootstrapping  <cit>  with which it is possible to calculate statistically substantiated and interpretable confidence measures. we generate bootstraps by randomly sub-sampling  <dig> percent of the original high-dimensional tetramer data b-fold. each fold is processed by applying dimensionality reduction with bh-sne and subsequent testing using dip/cc. a contamination confidence value is obtained by counting the percentage of folds which detected contamination.

reference-based detection
 <dig>  sequence classification
we employ kraken  <cit>  as a fast alternative to the popular blast method  <cit> . based on a pre-built database, kraken assigns taxonomic labels to each contig from a sample. through the use of exact alignments of l-mers, it achieves classification accuracy comparable to blast while being much faster. in acdc, kraken classifies contigs on a species level and assigns a taxonomy label to each data point, depending on it’s originating contig. in case of an unclassified species, a contig remains unknown.

acdc primarily focuses on de novo analysis without existing knowledge from databases and it tackles the challenge to reliably answer the question whether a given sample is contaminated or not. we restricted reference-based cleansing to the fast kraken method and added an extension for unsupervised detection of potentially non-linear data clusters as performed by acdc. this distinguishes acdc from prodege which relies on both blasting predicted genes and a supervised linear separation of contaminants, primarily aiming for an aggressive cleansing with high precision.

 <dig>  16s rrna gene prediction
acdc utilizes rnammer  <cit>  to predict the location of highly conserved 16s rrna gene sequences. even if data could not be classified by kraken, this enables researchers to identify the higher-level taxonomy of novel species quickly. additionally, the location of the 16s rrna gene sequence can be seen as a marker: it is representative for the whole cluster it is located in, and by exporting a clusters , the taxonomy for a full otu can be obtained.

post-processing
 <dig>  cleansing
if contamination is detected, acdc finds a clustering which allows the export of contigs from individual clusters, i.e. from the otu of interest. as this is a process of cleaning the sequence data from unwanted contaminant data, we refer to this as cleansing or decontamination.

for this task, an optimal clustering has to be estimated. while cc provides an optimal assignment by itself, for dip the number of clusters k has to be estimated. in contrast to detecting contamination where the task is to determine either k= <dig> or k> <dig>  the cleansing step is slightly different. similar to metagenomic binning, it is known that k> <dig>  which makes it possible to apply methods that estimate the number of clusters using cluster-specific characteristics, only defined for that case. many clustering and k-estimation techniques are available for this task. in  <cit>  it is suggested that the combination of k-means++ as a clustering algorithm and the davies-bouldin index  <cit>  as a cluster validity measure works well for binning metagenomic tetramer profiles. in acdc, we replace the k-means++ algorithm by hierarchical clustering using wards method  <cit> . we found that it estimates the number of clusters more accurately when there are imbalanced cluster sizes, which we found to be the case in contaminated scs samples. therefore, an optimal cluster assignment is determined by finding the minimal  davies-bouldin index for a given range of k∈{ <dig> , <dig> }-clusterings using wards hierarchical clustering.

 <dig>  result visualization
acdc provides contamination screening results as interactive web pages. an exemplary result of twenty simulated scs samples is shown in fig.  <dig>  for each sample on the left hand side, confidences from cc and dip are shown. a sample is marked clean when for both cc and dip less than  <dig> percent of all bootstrap folds found contamination. if either dip or cc found more than  <dig> percent of all folds to be contaminated, the sample is marked appropriately. in case of no clear result, a sample is marked with a warning status symbol. a third column with the number of species reported by kraken is shown. the user is able to inspect each sample for cc, dip and kraken. on the right hand side, the sample is visualized using bh-sne by default. in the event of a wrong cluster assignment, the number of clusters k can be selected manually, with the most likely k being selected by default. for kraken, the assignments are fixed and can be inspected by hovering on each data point. contigs from each cluster can be exported by clicking on the corresponding color in the panel below. locations of predicted 16s rrna gene sequences as reported by rnammer are indicated by an orange star. a click on it will show the corresponding sequence.
fig.  <dig> acdc result interface. for each sample shown in the left-hand side table, visualizations are shown on the right-hand side. individual clusters can be exported in fasta format by clicking on the respective cluster color on the bottom right




computational performance
acdc has low computational requirements. input data sizes are in the order of a few megabytes, as we work on assembled contigs, not on the raw data. given that, using a quad-core consumer laptop, runtimes ranged from a few seconds to ten minutes per sample, depending on the actual size and contamination status. the computationally most expensive step is the calculation of the dip statistic which has quadratic runtime in it’s worst case and has to be run for all bootstrap folds. this is sped up by parallelization. memory usage scales linearly with input size.

RESULTS
the evaluation of our tool can be divided into supervised  and unsupervised detection analysis. while the former is restricted to only the method to classify sequences and the size of the underlying database, the latter requires more careful assessment. in order to obtain accurate results, it is necessary to use data with correct ground truth. as the manual assignment of contamination is biased, the simulation of single-cell samples or the analysis of existing samples with references are vital.

to cover a broad range of contaminant varieties, we tested acdc on several simulated and real single-cell sequence data sets: 

simulated: we simulated  <dig> single-cell genomes with varying amounts of contamination and contaminant relatedness. by manually selecting complete genomes from the ncbi database  <cit> , clean and contaminated data sets, each containing up to  <dig> genomes were generated. species were chosen such that they are related on different phylogenetic levels, expecting that distantly related species can be better separated than very similar species. for each level,  <dig> samples were generated, containing  <dig> –  <dig> species. the simulation of reads was done using art  <cit>  followed by subsequent assembly using spades  <cit> .


mix:  <dig> samples containing  <dig> draft genomes and  <dig> single chromosomes were obtained from various sequencing projects . all samples are known to be contaminated, however, an exact quantification of contaminated sequences is missing due to the novelty of the data. a detailed description of these data can be found in the additional file  <dig> 


benchmark: sequence data from  <dig> single-cell genomes with low levels of contamination were obtained  <cit> . containing cross-contamination between  <dig> species , the median per-sample contaminant proportion of 3% is very small .


mdm: furthermore,  <dig> single-cell samples from the microbial dark matter  project  <cit>  were taken to test the capability of our tool on non-contaminated data. these data were manually curated.



herbinix luporum sd1dt





methanobacterium formicicum mft






we compared acdc to the state-of-the-art contamination detection tool prodege  <cit>  both in terms of supervised and unsupervised detection capabilities. prodege has been optimized to obtain a high precision in the context of a known taxonomic level and database support. it integrates a linear classification model to extend predicted genes to all k-mers, displaying excellent behavior in aggressively curating according samples. unsupervised inspection is restricted to linear pca only. in contrast, acdc has been optimized to provide good f-measures  in curating, and it addresses database independent de novo detection of contamination, thus providing a tool highly complementary to prodege.

supervised analysis
both prodege using the blast algorithm and acdc using kraken with the “minikraken db” were tested on the simulated and benchmark data sets. these are the only two data sets for which entries for known contaminants existed in both used databases. both tools showed nearly identical high performance  in identifying contaminant sequences and didn’t require any further evaluation.

unsupervised analysis
the evaluation of unsupervised detection performance was carried out a) by testing the ability to detect the correct contamination state of a given sample, and b) by measuring the ability to correctly identify clean and contaminant contigs.


a) acdc correctly identified the majority of both contaminated and clean genome assemblies throughout all data sets . this result demonstrates the ability of acdc to single out contaminated versus clean genome assemblies, specifically without any reference to a database in de novo settings. for this part of the evaluation, we could not compare to existing methods because they either do not have the functionality to distinguish clean and contaminated samples , or operate reference-based only . warnings are sometimes issued for assemblies with unclear contamination state. here, further inspection often revealed the presence of small outlier clusters throughout a small number of bootstraps. in the rare case of strongly unbalanced and additionally overlapping clusters, acdc is not able to detect contamination because of missing structure in the data. further, if the contaminant is too related to the target , genomic signatures differ only by a very small percentage of all basepairs, making it impossible for acdc to detect them. interestingly, mdm samples that have been identified as contaminated display a quite distinct cluster structure. further manual investigation on a small subset of these samples revealed the presence of true contamination which was not identified during manual curation. furthermore, the sequence of a bacteriophage was identified. horizontally transferred genetic material such as from bacteriophages or plasmids often have significantly different genomic signatures. hence, the found structures highlight biologically interesting phenomena.

simulated

mix

benchmark

mdm




b) we compared <dig> acdc to prodege in terms of precision/recall performance with respect to the number of correctly identified clean basepairs in each sample. for this task, the functionality to export clean sequences common in both tools was used. since the evaluation is performed for the setting of limited prior biological information, no taxonomy is provided for prodege, restricting the use of reference sequences from databases. results in table  <dig> were averaged over different samples from the simulated and benchmark data sets. both prodege and acdc correctly identified clean contigs in the benchmark data set with high precision. however, on average acdc was able to recall 22% more clean sequences on the data set, due to the more aggressive design of prodege. next, prodege was not able to identify the majority of clean sequences in the simulated data set without taxonomic information. in those cases, mostly all contigs were marked as contaminants, resulting in an empty clean sequences file. this fact can be attributed both to prodeges behavior of selecting contaminants with high specificity  <cit>  and to it’s missing ability to distinguish between clean and contaminated samples. results of  <dig> samples could not be obtained, because computation didn’t provide any output. on the same data, acdc was able to correctly identify the majority of clean sequences with high precision and recall. for samples that contain closely related species, it is difficult to split clean and contaminated sequences. for example, in our simulated data, samples from the same genus contain species with an average nucleotide identity  of 73%. this fact led to a slight drop in performance. sequences containing strains from the same species  didn’t contain enough distinct information to be correctly identified, showing the limits of acdc’s reference-free detection capabilities.1-scores of predicted clean base pairs for both prodege and acdc on the simulated and benchmark data sets

precision
recall
f
1
precision
recall
f
1

 <dig> 

 <dig> 

 <dig> 

 <dig> 

 <dig> 

 <dig> 

 <dig> 

 <dig> 

 <dig> 

 <dig> 
each row contains average values of the given sub data set. bold values depict the best performing entry. entries marked as “no result” either produced an empty clean fasta file or did not finish computation




CONCLUSIONS
operating both in the presence and absence of references from databases, acdc was able to predict the contamination state in the large majority of samples from four unrelated data sets, containing a total of  <dig> single-cell genome assemblies. additionally, clean and contaminant sequences were correctly identified with high recall and precision. in the absence of a given target taxonomy which is required by similar methods , acdc was still able to correctly predict contamination based on state-of-the-art techniques from unsupervised machine learning. complementary to other tools, our software does neither require the prediction of  genes nor existing knowledge from databases to detect contaminants and to separate contaminant from clean sequences. although, supplemental database information will aid identification, for example of closely related species. these findings make acdc an ideal tool to complement state-of-the-art contaminant detection and cleansing methods such as prodege or checkm in the context of de novo analysis with limited taxonomic information or limited availability of reference sequence information. last, as contamination detection and metagenomic binning are closely related, we look forward to applying a modified version of our pipeline to this type of data in the near future.

availability and requirements


project name: acdc


project home page:
https://github.com/mlux86/acdc



operating system: linux


programming language: c++11


other requirements: none


licence: mit




endnote

 <dig> for the comparison the prodege online version at https://prodege.jgi.doe.gov/was used.

additional file

additional file  <dig> a detailed description of the mix data set. 




abbreviations
acdcautomated contamination detection and confidence estimation for single-cell genome data

aniaverage nucleotide identity

bh-snebarnes-hut-sne

ccconnected components

dipdip-statistic test for multimodality

mdmmicrobial dark matter

otuoperational taxonomic unit

pcaprincipal component analysis

scssingle-cell sequencing

t-snethe-distributed stochastic neighbor embedding

