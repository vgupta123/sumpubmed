BACKGROUND
although, up to now, there is no model that efficiently and accurately represents the gene interactions underlying regulatory mechanisms in their whole complexity, recent experimental evidence seems to confirm the adequacy of a specific class of odes to describe their essential dynamical features. these models assume that genes are controlled by transcriptor factors, and that the effect of a transcription factor on the transcription rate of a gene, the response function, is threshold-dependent. such switch-like behaviors across variable thresholds are mathematically well represented by steep sigmoidal functions.

although these models provide detailed description of gene regulatory molecular mechanisms  <cit> , their predictive usefulness, at quantitative level, is rather limited even when the network at hand is very well studied. in fact, the exploitation of classical numerical approaches is mostly impracticable as precise and quantitative information on  the biochemical reaction mechanisms underlying regulatory interactions, and  kinetic parameters and threshold concentrations are currently unknown and not identifiable from available data. however, at the current state of knowledge, qualitative predictions of the dynamical properties are not make-shift solutions but rather appropriate to get insight into the functioning of systems not completely understood as molecular interaction networks are.

the application of generic qualitative simulation approaches, as originally proposed in the artificial intelligence research framework  <cit>  under the label qr, is not the proper solution. the mathematical tools they are grounded on are too simple to compensate for knowledge incompleteness. this results in a number of drawbacks, e.g. their inability to upscalability, the exponential growth of the generated behaviors, and the generation of spurious behaviors, that seriously limit the range of applicability of such methods to predict the nonlinear dynamics of regulatory networks. a qualitative study of grns dynamics could, in theory, be performed by analytical methods  <cit>  based on the classical theory of qualitative analysis of dynamical systems, and properly adapted to the specific class of models. but, in practice, the network complexity makes quite hard or even unfeasible traditional analysis.

pioneering work towards automated qualitative analysis and simulation of grns has resulted in a computational tool, called gna <cit> . although gna has been successfully applied to study real world networks, namely the initiation of sporulation in bacillus subtilis  <cit> , and the response to nutritional stress and carbon starvation in escherichia coli  <cit> , it is not flawless. gna circumvents the hard problem of dealing with sigmoidal nonlinear response functions by approximating them with step functions, discontinuous in the threshold hyperplanes. such an assumption considerably simplifies the analysis as the model results in piecewise-linear equations, but it raises the problem to find a proper continuous solution across the threshold hyperplanes, or, in other words, to seek for generalized solutions of odes with discontinuous right-side terms. the solution to this problem is not straightforward as  there exist in the literature several definitions of generalized solutions,  it is not yet completely understood what are the relationships between different definitions, and then,  it is not clear how to choose the "right" definition for a particular task  <cit> . gna adopts the filippov approach  <cit>  that results particularly convenient to deal with control problems but it may present drawbacks when applied to approximate the limit solutions of a continuous ode model: it might find "too many" solutions, and fail to reach all stable ones. thus, gna suffers from the same problems, that in addition to those raised by a further approximation introduced to deal with computational issues, might compromise its soundness and completeness .

the qualitative simulation algorithm we propose works under the assumptions that  threshold-dependent regulation mechanisms are modeled by continuous steep sigmoid functions, and  any two genes are never regulated at the same threshold by a certain variable. the sigmoidal-nonlinearities make the problem quite hard to be tackled. but, the assumption that all sigmoids have very high steepness allows us to apply a systematic way of analysis. let us observe that, due to the switch-like behavior of the response functions around the thresholds, the grn dynamics occurs at different time-scales. to be able to deal with both slow and fast nonlinear dynamics we theoretically base our algorithm on a classical singular perturbation analysis method properly adapted to the assumed class of odes  <cit> . such a method suitably combined with qr key concepts computationally drives, starting from initial conditions, the construction of all possible state transitions, and calculates the sets of symbolic inequalities on parameter values that hold when specific transitions occur.

a class of models of grn dynamics
as phenomenological model of the complex dynamics of grns made up of n components, we consider the following generic equations:

   

where the dot denotes time derivative, xi is the concentration of the i-th gene product, γi >  <dig> is the decay rate of xi, z is a vector with zjk as components, and zjk = s is a sigmoid function with threshold θjk. the response, or regulatory, function s : r+ →  <cit>  is a continuous monotonic s-shaped map depending on the parameter q , that determines the steepness of s around the threshold value θjk, such that for q →  <dig> we have s =  <dig>  when the value of xj is smaller  than θjk .

each xi, with domain Ωi ⊂ r+, is associated with ni thresholds ordered according to θij <θik if j <k. the state equations describe the balance between the production process fi and the degradation one, herein supposed to be linear. the functions fi are multilinear polynomials in the variables zjk, and are frequently composed by algebraic equivalents of boolean functions. more precisely,

   

where κil are real values that denote kinetic rate parameters, li is the possibly empty number of interactions that synthesize xi, and, in accordance with the network structure, αjkl assumes value either equal to  <dig> when zjk takes part in the l-th interaction or equal to  <dig> otherwise.

the validity of the biological assumptions underlying the model described by eq.  has been confirmed by recent experimental evidence  <cit>  and theoretical studies  <cit> . thus, we can reasonably assume that such a model is suitable to give a phenomenological description of a wide range of regulatory systems in which the combined effects of a series of genetic processes, e.g. transcriptional and translational regulation, protein-protein interactions, metabolic processes, etc., can be properly described by threshold-dependent response functions.

let us represent the dynamics of the n state variables xi, modeled by the eq.  and associated with appropriate initial conditions, in the phase space. the ordered sets Θi of the ni threshold values θij associated with each xi naturally induce a partition of the phase space into qualitatively distinct domains. in the set Δ of all the domains identified by the partition, we can distinguish the set Δs ⊂ Δ of switching domains from the set Δr ⊂ Δ of regular domains, such that Δ = Δs ∪ Δr .

a regular domain dr  is an open rectangular region between adjacent threshold hyperplanes in which the values of all response functions zjk equal either  <dig> or  <dig>  a switching domain ds is a narrow region, whose width depends on the parameter q, surrounding either a section of a threshold hyperplane or an intersection of threshold hyperplanes. in a switching domain ds we distinguish σ  switching variables, xs, from n - σ  regular ones xr. the values of a variables xs lies in the neighborhood of one of its thresholds and zsk takes values in , while the values of a variable xr lies between two adjacent thresholds. the network dynamics in each domain d ∈ Δ is described by different models. the motion in dr ∈ Δr is described by linear odes, and its analysis is straightforward. the motion in ds ∈ Δs, or equivalently around the thresholds, is described by nonlinear equations, and occurs at different time-scales. therefore, to capture the salient features of the nonlinear dynamics in a switching domain, and to determine how the trajectories cross it to move towards other domains, a specific mathematical method is required.

methods
singular perturbation analysis in the switching domains
singular perturbation analysis  is a classical approach to study phenomena that occur at different time-scales  <cit> . the dynamics of such phenomena are described by odes, associated with appropriate initial conditions, in which a small parameter  multiplies either one of the derivatives or higher order derivative. let us indicate this initial value problem by ℳq, and by ℳ <dig> the same problem where q =  <dig>  as q →  <dig>  the solution of ℳq identifies a "small" region, called boundary-layer region, of non-uniform convergence to the solution of the reduced system ℳ <dig>  the region of uniform-convergence of ℳq to ℳ <dig> is called outer region. taken together, the outer and boundary-layer solution approximate the solution of ℳq for small nonzero values of q.

such a general approach is not directly applicable to our problem, but it must be tailored to it  <cit> . in outline,  the eqs.  related to the xs variables are rewritten into the standard form of spa through a change of coordinate system,  the boundary-layer and outer solutions are calculated in the new coordinates, and  they are converted back into the usual frame of reference.

let Σ: Ω ↦  <cit> n be the coordinate transformation that converts the xs coordinates into the zs ones. as under our assumptions, , where ds is a continuous and limited function, we can rewrite eq.  as in the following:

   

where zs, zr are the vectors of switching and regular variables zs and zr, respectively.

the fast dynamics in the boundary-layer is studied by suitably scaling the time variable, namely τ = t/q. in the limit, the fast dynamics is obtained by solving the system:

   

associated with appropriate initial conditions, where the prime denotes the derivative with respect to τ. as zr is constant in any ds ∈ Δs, we focus on the switching variables zs only. the system  has a manifold of stationary points, called slow-manifold, given by the solutions, for all s, of the stationary equations  =  <dig>  we call exit point set  the set of points in the slow-manifold that are stable and satisfy the tikhonov-levinson theorem, and we call z-cube Ƶ =  the frame of reference where we search for exit points.

the motion in the original time t along the exit points is described by the reduced system ℳ <dig>  thus, under the hypothesis that at least one exit point  exists, the motion equations of regular variables, or equivalently the outer solution, is represented by:

   

the problem  is linear, and then, given the initial conditions, the outer solution, that determines how the trajectories move along the xr directions, is easily calculated.

the calculation of the slow-manifold generally leads to an heavy, nonlinear computational problem as it consists in the solution of a set of polynomial equations. in the current implementation we adopt a further assumption that sounds realistic:

assumption . every gene product only regulates one gene at each of its thresholds

such an assumption considerably simplifies the calculation of the slow-manifold. mathematically, it implies that each zjk only occurs in one equation, and thus the terms fs are linear.

remark 1

the location of each exit point is crucial in our analysis as it indicates the next adjacent domains the trajectories are moving towards along the xs directions.

let us observe that stationary points always exist on the vertices of Ƶ as they are the roots of ds =  <dig>  the computational cost of the search for all the other exit points could be quite high, but it can be considerably reduced by checking first a necessary condition for the existence of a stationary point on the other elements of Ƶ. let f be a face or the interior of Ƶ. in  <cit> , it has been proved that necessary condition for the existence of a stationary point in f is that the jacobian matrix  restricted to the switching variables in f has a complete loop. this holds if and only if there is a non-zero loop involving all variables in jf, and can be checked by using concepts from graph theory.

let  be a stationary point located on  ∈ Ƶ, and  = {l : l ∈ {l,..., σ },  ∈ { <dig>  1}}.  is an exit point if  it is stable. if  is on the boundary of Ƶ, it is required, in addition to , that  zl, ∀ l ∈ , heads towards . the stability of  is checked by analyzing the spectrum of the jacobian matrix, and the condition  is verified when, ∀ l ∈ , the sign of , in a neighborhood of  is in agreement with the motion of zl towards . more precisely, in a neighborhood of ,  >  <dig> and  =  <dig> or  <  <dig> and  =  <dig> 

remark 2

spa works out in the limit q →  <dig>  but the calculated solution approximates the solution of eq.  for sufficiently small q . moreover, it can be proved that the jacobian matrix is stable for  <dig> <q < ≪  <dig>  thus, the exit points calculated in the limit are also valid for values of q <.

remark 3

under the assumption , the reduced equations are always independent of the variables zs in the eq. , and the two sets of equations are mutually independent. thus, the behavior of the variables xs in a z-cube is completely independent of the values of variables xr, and the motion in a switching domain may be studied by first analyzing the former variables, and then the latter ones.

qualitative reasoning concepts
among the generic qualitative approaches proposed in the literature, qsim provides both the most suitable formalism and algorithm to represent and simulate models qualitatively abstracted from odes  <cit> . thus, we revise and ad hoc tailor its key concepts to our specific class of models.

qualitative value
the real values of each state variable xi with domain Ωi =  <cit>  are discretized into a finite ordered set of values qualitatively important from the biological point of view. in our context, the qualitative value space of each xi is defined by the ordered set Θi made up of both its ni threshold symbolic values and the endpoints of Ωi. the partition of the whole system domain, induced by the sets θi, i =  <dig> ..., n identifies qualitatively distinct hyper-rectangles d that define all possible system qualitative values.

qualitative state
let a be the set of domains adjacent to d ∈ Δ. the qualitative state of d, qs, is defined by all of its adjacent domains dk towards which a transition from it is possible:

  

each transition from d identifies a domain next traversed by a system trajectory. more precisely, if we number by i the domain d traversed at time ti, each dk ∈ qs will be traversed by different trajectories at time ti+ <dig> 

state transition
qualitative simulation of network dynamics is achieved by iteratively applying local transition strategies from one domain to its adjacent domains. the possible transitions from any d are determined by different strategies according to whether d ∈ Δr or d ∈ Δs.

in the case d ∈ Δr, like in traditional qr methods and in gna <cit> , possible transitions are determined by the signs of . as  are defined by linear expressions, such signs are easily determined by exploiting the inequalities that define the parameter space domain.

in the case d ∈ Δs, a sign-based strategy is not practicable as the expressions for  are nonlinear. a convenient way to proceed is given by spa: transitions from d towards adjacent dk are determined by the locations of the exit points on the boundary elements of the associated Ƶ. due to assumption , each boundary element of Ƶ may contain at most one exit point. but, as, in a qualitative context, knowledge incompleteness on the parameter values is expressed by coarse constraints, the boundary element of Ƶ where an exit point is located is not, in general, uniquely determined. thus, unless the exit point is located in the interior of Ƶ and a stable solution is reached, the successors of d are not uniquely determined. however, through symbolic computation procedures, it is possible to calculate the set of inequalities, , on parameter values that hold when the transition from di to dk occurs. then, the 3-tuple ⟨di, dk, ⟩ clearly and uniquely identifies each path from di to dk.

qualitative behavior
a finite sequence of paths, where each path is clearly both linked and consistent with its predecessor and successor, defines a qualitative behavior: , where d <dig> is the initial domain, and df either contains a stable fixed point or identifies a cycle, i.e it is an already visited domain. i <dig> is the initial set of inequalities that defines the parameter space domain, and if the set of inequalities on parameter values associated with df.

qualitative simulation
starting from an initial domain d <dig> and a set, i <dig>  of symbolic inequalities on parameter values, qualitative simulation generates all possible state transitions, and represents them by a directed tree rooted in d <dig>  bt, where the vertices correspond to di, and the arcs, labeled by the inequalities , to the transitions from di to dj. each branch in bt defines a qualitative trajectory qb from d <dig>  that traverses specific domains and occurs when the values of parameters satisfy its related inequalities. such a trajectory abstracts all those numerical solution of the ode model with initial conditions x <dig> varying in d <dig>  and with kinetic parameter values fulfilling the inequalities.

RESULTS
given as input,  n symbolic state equations of the form ;  n qualitative value spaces Θi = {θij} of the state variables;  d <dig> ∈ Δ;  a set of symbolic inequalities i <dig> on parameters defining a parameter space domain psd <dig>  the algorithm, through an iterative procedure initialized by ⟨d <dig>  i0⟩, provides as output the entire range of possible network dynamics represented by bt. its main steps are outlined in the following:

 <dig>  define the qualitative values by partitioning the phase space into regular and switching domains.

 <dig>  calculate the qualitative state qs of the current domain di.

 calculate the symbolic state equations in di, and the set a;

 determine constraints on parameters that need to be fulfilled to have a transition from di to dk ∈ a;

 check consistency of with i <dig>  and build the path eik = di → dk ;

 <dig>  append ⟨di, dk, ⟩ to bt, and mark di as visited domain.

 <dig>  repeat from step  <dig> for each not visited dk.

step  <dig>  and in particular the calculation of the conditions on parameters , is the core of the overall algorithm. a transition from di to dk actually occurs, and then dk ∈ qs, only if the set  is consistent with the set i <dig>  i.e. when it defines a not empty parameter space domain  such that  ⊆ psd <dig>  the calculation of an inequality set  is performed by two distinct algorithms that implement a different transition strategy according to whether di ∈ Δ r or di ∈ Δs.

moving from a regular domain
the algorithm in charge of the construction of the possible paths from regular domains is, in principle, similar to that one proposed by gna, but it is more informative as it calculates the s. in the limit, we indicate di ∈ Δr by the product  where ) denotes the interval of xj in di.

 symbolic state equations in di ∈ Δr. in each box di, zjk equals either  <dig> or  <dig> in the step function limit. this simplifies eq.  as they reduces to linear equations:

   

where μj depends on di, and is given by the sum of some κjls. from eq.  we can easily find the focal point  the trajectories are heading towards. herein, we assume that focal points do not belong to switching domains. if x* belongs to di, there is a stable point in it. such a stable point exists in di, i.e. di ∈ qs, if the set of inequalities  ∀j ∈ { <dig> ..., n} exists and is consistent with i <dig>  otherwise, the trajectories move towards a switching domain dk adjacent to di.

 constraints on parameters. ∀ dk ∈ a, the algorithm calculates the set of inequalities on parameters  that need to be fulfilled to have a transition from di to dk. as in di all the equations  are linear, and all the trajectories head towards a focal point x* in a regular domain, such inequalities are calculated by imposing that the signs of state variable rates match the relative position of dk with respect to di. we define the relative position of dk with respect to di, indicated by  where vj ∈ {- <dig>   <dig>  1}, through the comparison of the intervals defining di and dk. , initialized to i <dig>  is updated, ∀ j ∈ { <dig> ..., n}, with either the inequality  if vj =  <dig> or  if vj = - <dig> 

 possible transitions from di to dk. if the calculated inequality set defines a not empty parameter space domain  ⊆ psd <dig> then a transition towards dk is possible and the qualitative state qs is updated accordingly.

to exemplify how the algorithm works we consider the ode model:

   

where the parameters are positive, and all the response functions are expressed by the hill function commonly used in the literature.

let us consider the domain d <dig> in fig.  <dig> as current di, and let us define i <dig> as follows:

   

the conditions on parameters in table  <dig> that are consistent with i <dig> identify the possible transitions from d <dig> towards adjacent domains in a = {d <dig>  d <dig>  d <dig>  d <dig>  d17}. among the inequalities in table  <dig>   is the only one in agreement with i <dig>  thus, qs = {d12} and the only possible transition from d <dig> occurs when  ∧ i <dig> holds.

moving from a switching domain
in a domain di ∈ Δs, the nonlinear dynamics is characterized by fast and slow motions, respectively associated with xs and xr, that are independently calculated. let us reindex the variables xj, zj such that the switching variables come first, and proceed first with the construction of the fast motion by exploiting the spa approach.

a – fast motion
the study of the fast dynamics is performed in Ƶ in the scaled time τ = t/q, and aims at localizing the set of exit points in Ƶ rather than at detailing the dynamics within it. such points clearly identify the next adjacent domains the trajectories are moving towards from di along the xs directions.

to this end, the algorithm defines, in the limit, the mapping :  → Ƶ, where  = di ∪ a, such that the interior of Ƶ, and its boundary are the images of di, and a, respectively. more precisely, the domains dk ∈ a are mapped into the faces of Ƶ when dk ∈ Δs or into its vertices, otherwise. let ℱ be the set of both the faces and the interior of Ƶ, and f its generic element.

to exemplify, let us consider the switching domain d <dig> in fig.  <dig>  the set ℱ has five elements, the four faces corresponding to d <dig>  d <dig>  d <dig>  d <dig>  and the interior of Ƶ that correspond to d <dig>  moreover, the vertices of Ƶ are the images, through the mapping Σ, of the adjacent regular domains d <dig>  d <dig>  d <dig>  and d <dig> .

  <dig>  symbolic state equations in di ∈ Δs
the algorithm symbolically calculates the boundary-layer equations  in the z variables associated with the current switching domain.

as an example, let us consider the model , and the domain d <dig>  where both variables x <dig>  x <dig> are switching in it, respectively, around the thresholds θ <dig>  θ <dig>  in d <dig>  characterized by fast motion only, the boundary-layer system is given by:

   

 <dig>  identification of the candidate next traversed domains dk
among all the domains dk ∈ a only those that correspond to an element on the boundary of Ƶ where a stationary point is located are possible domains next traversed by the trajectories. then, the algorithm first builds the subset of elements of a that are candidate successors of di.

let us denote by ep the set of stationary points, initially made up of the vertices of Ƶ. under the assumption a, each element f ∈ ℱ, may contain at most one stationary point. a necessary condition for the existence of a stationary point on f is the presence of a non-zero loop in jf, the jacobian matrix calculated on f. then, ∀ f ∈ ℱ, the algorithm calculates jf and searches for a non-zero loop involving all variables in jf. in case, it symbolically calculates the stationary point on f, and updates accordingly the set of candidate exit points ep. let us observe that one internal stationary point exists if all variables in Ƶ are involved in a loop.

in the example, only  and  have a non-zero loop. then, the algorithm looks for the stationary state on f <dig> and f12:  and . finally, the exit point candidate set is updated with the points  and  ).

 constraints  on parameters
the inequality set , initialized to i <dig>  is calculated for each candidate exit point  by requiring that each point is stable and fulfills other motion conditions on parameters. more precisely, the algorithm:

 <dig>  analyzes the spectrum of the jacobian matrix jf, and imposes possible conditions  on parameters to ensure stability of ;

 <dig>  imposes conditions ik, l on the sign of , ∀ l ∈ ℒf, in a neighborhood of  so that the motion of zl heads towards ;

 <dig>  for those  located on elements of ℱ, imposes the further condition, ik,,  <dig> < <  <dig> for each  that does not take value  <dig> or  <dig> 

finally,  is an exit point if  holds.

conditions  <dig>  and  <dig>  are easily checked, while the stability condition is checked by using concepts from graph theory, and the usual definition of stability based on the sign of the eigenvalues of jf. it follows from assumption  that the matrix jf is block-structured, where each block is a permutation matrix associated with a sub-loop. it can be proved that  is stable if:   has no blocks with dimension strictly greater than 2;  in 1-dimensional blocks the elements are negative;  in 2-dimensional blocks the loop products are positive.

remark 4

let us consider the general case when di ∈ Δs is characterized by both switching and regular variables. the motion from an exit point located in the interior of di occurs in a sliding mode along a stable point in the slow-manifold of the boundary-layer system, and is described, in the normal time, by the reduced system. then, a stable stationary point exists in di, i.e. di ∈ qs, if a stable point exists in the interior of Ƶ, and the regular variable rates are zero in a point inside di. the set of inequalities that checks the latter condition are defined by  ∀j ∈ {σ  +  <dig> ..., n}.

 possible transition from di to dk
the exit points located on Ƶ clearly identify the set of all possible exit domains, i.e. those domains towards which a transition from di is possible. such domains are easily calculated by applying the map Σ- <dig> to each element of Ƶ that contains an exit point. let us observe that the remaining unstable stationary points in ep are possible entrance points to di.

in the example, both  and  are 1-dimensional block matrices with negative elements. then, both exit points  and  fulfill the stability condition  <dig>  without further constraints imposed on the parameters. the condition  <dig>  on variable zl, l =  <dig> imposes:

   

   

the inequality i <dig>  defined by  is compatible with , but the inequality i <dig>  is not. then,  is removed from the exit point set. to be an exit point  must satisfy the condition  <dig> :

  

finally,  is an exit point if , defined by i <dig> ∧ i <dig>  ∧ i <dig> , holds.

as for vertices in the example, the conditions  <dig>  and  <dig>  are fulfilled in the point  =  that corresponds to the vertex defined as image of d <dig> by the map Σ.

finally, the only exit domains are d <dig>  d <dig>  and then qs = {d <dig>  d11} ).

b – slow motion
the slow motion of regular variables xr along the exit points is studied in the normal time t in the usual frame of reference, and it is reconstructed from the reduced system  through the same symbolic procedure given for regular domains.

qualitative simulation outcomes
through the described iterative procedure, the algorithm builds  a behavior tree, rooted in the initial domain, and  sets of inequalities on parameter values that characterize specific state transitions. the behavior tree captures the entire spectrum of network dynamical behaviors that are invariant for ranges of parameter values defined by the calculated inequalities.

to illustrate the type of output the algorithm produces, let us consider the results of the simulation of the ode model  starting from d <dig> with the parameter space defined by the inequalities i <dig> . through the described iterative procedure, the algorithm builds the behavior tree, bt, showed in fig.  <dig>  and calculates the inequalities on the parameters, listed in table  <dig>  that are associated with each path in bt. as in the example n =  <dig>  the trajectories described by the tree are also easily summarized in the phase plane . three reachable stable states, located in d <dig>  d <dig> and d <dig>  are identified by the final leaf of each branch in bt. as d <dig> ∈ Δs, one of them is a singular stable point whereas the others are regular stable points. these stable states are reached by different predicted qualitative behaviors, each of them occurring under specific constraints on parameters. for example, the trajectory qb <dig> starting from d <dig>  crossing d <dig>  and reaching a stable point in d <dig> is allowed when the inequalities  and i <dig>  consistent with i <dig>  hold.

in general, for n >  <dig>  due to graphical difficulties, each branch in the tree is given a time representation. more precisely, a specific qualitative behavior, e.g. qb <dig>  is described by the temporal evolution of each variable . the behavior in fig.  <dig> abstracts all numerical trajectories of the ode model  obtained with different initial values in d <dig>  and different sets of parameter values that fulfill the same inequalities associated with qb <dig> .

discussion
the algorithm is currently under implementation. as for symbolic calculus, the implementation requires to tackle complex tasks, such as:  update an inequality set with an another one;  check the consistency of two sets of inequalities i <dig> and i2;  solve systems of equations;  find cycles in the jacobian matrix. as for , the original equations are multilinear in zs, but due to assumption  they can be straightforward solved and analyzed for stability. also the solution of problems  and  benefits from assumption  as the inequalities are always linear. then, thanks to the assumption , and to algorithms proposed both by the literature and common symbolic computation package, such as mathematica  <cit> , the tasks - are simplified and feasible. as for the task , it is performed by using cycle-detection algorithms and matrix graph theory tools  <cit> .

soundness and completeness
soundness
the algorithm guarantees that the behavior tree captures all of the sound behaviors for values of q sufficiently small. a closed-form expression of a symbolic upper bound of q, , in terms of model parameters guarantees the jacobian matrix stability. then, the generated behaviors are sound for values of q <. however, for a complete formal proof of soundness we need to prove that assuming, in the limit, stability instead of asymptotic stability does not affect the results for values of q <.

completeness
at the current stage, the algorithm may generate spurious behaviors. there is a twofold explanation for that. first, we have not yet performed a thorough analysis with respect to entrance-exit transition, or in other words, we have not yet solved the problem of identifying the only admissible connections between entrance and exit points. moreover, singular perturbation analysis is a local procedure that works quite well in a quantitative context but that needs, in a qualitative context, to be supported by a global criterion when local paths are connected to produce a specific trajectory. for example, the behavior qb <dig> is spurious as  is not consistent with . similarly, qb <dig> is spurious.

the characterization of the paths from one domain to the next ones by sets of inequalities constraining the model parameters is quite new in the field of qualitative simulation, as for both general-purpose and specifically tailored algorithms. such a strategy may reveal quite useful in the definition of a "global criterion" that allows us to distinguish sound behaviors from spurious ones by requiring that the sets of inequalities that label the local paths in a specific trajectory are consistent with each other. both the definition of such a criterion and its implementation are not a trivial task, especially from a computational point of view. as for algorithm completeness, another essential methodological and computational issue to be deepened deals with the definition of the transition map that properly connects the entrance points to the exit points associated with a switching domain.

comparison between the algorithm and gna
until now, to the best of our knowledge, gna is the only computational counterpart of the algorithm herein proposed. unlike gna, that simplifies the simulation problem by approximating the sigmoid response functions by step functions discontinuous in the thresholds, our qualitative simulation algorithm tackles the problem in all of its complexity, and works for models of gnas with continuous sigmoid response functions. as a matter of fact, it has been designed to both provide a tool for a more realistic modeling framework and overcome the limits of gna. furthermore, in addition to more solid mathematical grounds for soundness and completeness, our algorithm differs from gna as far as the required input information and the output outcomes are concerned. in gna, the trajectories are constructed under the assumption that the locations of the focal points associated with the regular domains, symbolically expressed by a set of inequalities on parameters, are specified as input. but, as this precise knowledge is unlikely available, a thorough study of the dynamics of the system at hand might require several runs of the algorithm to simulate the gna dynamics under possible different assumptions on focal point locations. then, the study could result quite heavy due to the high number of possible scenarios, and the need to check, to avoid further causes of generation of spurious behaviors, the consistency of all the parameter inequalities that precisely localize a specific focal point.

our algorithm does not need precise information on the location of focal points but, to be fired, it just requires the parameter space domain, that is inequalities on parameters that univocally determine the sign of direction of change of each state variable in the initial domain. afterwards, it is up to the algorithm to calculate and refine the parameter inequalities that distinguish each simulated behavior. due to more relaxed constraints, a single run of our algorithm leads to a richer and more informative set of behaviors than that one obtained by gna as it is highlighted by the comparison of fig.  <dig> with fig.  <dig>  let us observe that any other possible definition of parameter inequalities would not have led to the set of behaviors in fig.  <dig> but to one of its subsets.

a complete and fair performance evaluation of our approach when compared with gna would not disregard its application to those real world networks successfully simulated within the gna framework, namely the initiation of sporulation in bacillus subtilis  <cit> , and the response to nutritional stress and carbon starvation in escherichia coli  <cit> .

application to systems/synthetic biology
the qualitative simulation algorithm presented provides powerful computational grounds for dry experiments to be performed in both systems and synthetic biology contexts. it is an economic tool for hypothesis testing and knowledge discovery as it allows us to understand how specific activation patterns are derived from models of fixed network structures, and which different dynamical behaviors are possible.

in a systems biology context, its exploitation is useful in the formulation phase of new hypotheses and theories that explain, in both physiological and pathological situations, experimental data either previously unobserved or not interpretable by the well-established biological knowledge. the result of the comparison of the simulated behaviors with the observed ones allows us either to confirm or to refuse the model that represents the new formulated biological hypotheses. moreover, as qualitative simulation derives the entire range of network dynamics consistent with the initial conditions, the simulation outcomes might capture behaviors never observed. such behaviors need to be experimentally tested by ad hoc designed experiments to possibly further confirm or suggest how to revise the model, i.e. the underlying biological hypotheses. the effective applicative potential of the proposed algorithm within a model-based reasoning cycle for the deep comprehension of complex real world biological systems is currently under study. more precisely, it will be applied  to explain and interpret the dynamics of the complex regulatory network that controls motility in bacillus subtilis  <cit> , and  to explore the molecular mechanisms that regulate the transition of a normal cell phenotype to an invasive-metastatic phenotype  <cit> .

the model-based reasoning cycle results particularly convenient and useful also when applied to synthetic biology problems in the design phase. the construction of a synthetic biological network in the cell, able to perform specific tasks or to produce desired behaviors of a biological process in response to external stimuli, could benefit from a preliminary dry design of the network. to this end, models of different network structures can be simulated in correspondence to different inputs, i.e signals either exogenous or cellular, till the desired stable behaviors are obtained. let us remind that, in our simulation framework, each specific simulated behavior is characterized by a chain of parameter inequalities. thus, the actual construction of a synthetic network could benefit from such a piece of information as it provides the admissible parameter space domain for the target behaviors. the synthetic network irma <cit>  built in the yeast saccharomyces cerevisiae is made up of a small number of components but rather complex in their interconnections as it includes multiple feedback loops generated by the combination of transcriptional activators and repressors. it offers a suitable benchmark for in vivo testing our computational framework.

CONCLUSIONS
the assumption of continuous response functions makes the simulation problem hard to be tackled but it is crucial in view of the realization of tools that can be gradually extended to tackle more and more realistic models. our algorithm is grounded on a set of symbolic computation algorithms that carry out the integration of qualitative reasoning techniques with singular analysis perturbation methods: the former techniques allow us to cope with uncertain and incomplete knowledge whereas the latter ones lay the mathematical groundwork for a sound and complete algorithm capable to deal with regulation processes that occur at different time-scales.

the modeling framework and the simulation algorithm proposed can be applied to predict the possible qualitative behaviors of grns of any size and complexity, both natural and synthetic. the range of applicability of such a computational approach is quite large. first, it makes possible the validation of hypothesized models of grns by matching the simulated predictions against observed gene expression profiles, the derivation of the most plausible model, and the identification of parameter inequalities that account for the observations. then, it greatly facilitates the investigation of the effects on the dynamics of a specific grn in response to external stimuli. finally, it allows us to build a total envisionment of the model through the generation of all possible state transitions, and to search, within them, for the parameter constraints and initial conditions that allow us to achieve a desired behavior, e.g. a stable solution. in term of tasks, besides its undoubted contribution to the comprehension of complex networks of genes and interactions, the proposed computational approach could be fruitfully used in the design of either new drugs or synthetic regulatory networks.

the code will be freely available for non-profit academic research by making a user licence request to ironi@imati.cnr.it.

competing interests
the authors declare that they have no competing interests.

authors' contributions
li devised the work, and drafted the manuscript. both authors participated in the design and development of the algorithms. lp implemented the software. all authors read and approved the final manuscript.

