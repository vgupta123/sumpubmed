BACKGROUND
rna-seq and other high-throughput methods in biology have the ability to identify thousands of genes that are altered between conditions. these genes are often correlated in their biological characteristics or functions, but identifying these functions remains challenging. to interpret these long lists of genes, biologists need to abstract genes into concepts that are biologically relevant to form hypotheses about what is happening in the system. one such abstraction method relies on gene ontology . go provides a controlled set of hierarchically ordered terms  <cit>  that provide detailed descriptions about the molecular, cellular or biochemical functions of any gene. for a given gene list, existing software programs can query whether a particular term is enriched . one area of biological significance that go does not include is anatomy. one way to address this shortcoming is to use a ‘tissue ontology’ that provides a complete anatomical description for an organism , in this case for c. elegans. such an ontology has been described previously for this organism  <cit> . cells and tissues are physiologically relevant units with broad, relatively well-understood functionalities amenable to hypothesis formation. the c. elegans database, wormbase  <cit> , maintains a curated list of gene expression data from the literature. here we provide a new framework that analyzes a user-input list for enrichment of specific cells and tissues.

another problem frequently associated with go enrichment analysis is that it is often difficult to interpret due to the large number of terms associated with a given gene . david, a common tool for go enrichment analysis, clusters enriched terms into broad categories  <cit> , whereas panther  <cit>  attempts to solve this issue by employing a manually reduced ontology, goslim . to reduce verbosity, we have filtered our ontology using a small set of well-defined criteria to remove terms that do not contribute additional information. to our knowledge, such filtering has not been performed in an algorithmic fashion for a biological ontology before; indeed, david does not employ term trimming a priori of testing, but rather fuzzy clustering post testing to reduce the number of ontology terms. other pruning methods do exist , but the pruning is query-dependent or generates a brand new ‘brief ontology’ which satisfies a set of logic relationships and has certain connectivity requirements. we do not propose to regenerate a new ‘brief ontology’, but instead we use our approach to select those nodes that have sufficient annotated evidence for statistical testing. we believe our trimming methodology strikes a good balance between detailed tissue calling and conservative testing.

we have developed a tool that tests a user-provided list of genes for term enrichment using a nematode-specific tissue ontology. this ontology, which is not a module of gene ontology, is verbose. we select nodes from the ontology for statistical testing using an algorithmic approach, outlined below, that reduces multiple hypothesis testing issues by limiting testing to terms that are well-annotated. the results are provided to the user in a gui that includes a table of results and an automatically generated bar-chart. this software addresses a previously unmet need in the c. elegans community for a tool that reliably and specifically links gene expression with changes in specific cells, organs or tissues in the worm.

RESULTS
generating a gene-tissue dictionary by specific node selection
reducing term redundancy through a similarity metric
for our tool, we employ a previously generated cell and tissue ontology for c. elegans  <cit> , which is maintained and curated by wormbase. this ontology contains thousands of anatomiy terms, but not every term is equally well-annotated. as a first step to generate our tissue enrichment software, we wished to select tissue terms that were reasonably well-annotated, yet specific enough to provide insight and not redundant with other terms. for example, nematodes have a number of neurons that are placed symmetrically along the left/right body axis, and are functionally similar. these left/right neuronal pairs  have almost identical annotations, with at most one or two gene differences between them, and therefore we cannot have statistical confidence in differentiating between them. as a result, testing these sister terms provides no additional information compared with testing only the parent node to these sisters. to identify redundancy, we defined two possible similarity metrics  that can be used to identify ontology sisters that have very high similarity between them. intuitively, a set of sisters can be considered very similar if they share most gene annotations. within a given set of sisters, we can calculate a similarity score for a single node by counting the number of unique annotations it contains and dividing by the total number of unique annotations in the sister set. having assigned to each sister a similarity score, we can identify the average similarity score for this set of sisters, and if this average value exceeds a threshold, these sisters are not considered testable candidates. an alternative method is check whether any of the scores exceeds a predetermined threshold, and if so remove this sister set from the ontology. we referred to these two scoring criteria as ‘avg’ and ‘any’ respectively.
fig.  <dig> schematic representation of trimming filters for an acyclical ontology. a the parent node  contains at least as many annotations as the union of the two sisters. these two sisters share annotations extensively, as expressed by the overlap in the venn diagram, so they qualify for removal. b nodes with less than a threshold number of genes are trimmed  and discarded from the dictionary. here, the example threshold is  <dig> genes. nodes ε,ζ,η, shown in red are removed. c parent nodes are removed recursively, starting from the root, if all their daughter nodes have more than the threshold number of annotations. nodes in grey  were removed in the previous step. nodes α,β shown in red are trimmed because each one has a complete daughter set. only nodes γ and δ will be used to generate the static dictionary



terminal branch terms and parent terms can be safely removed in an algorithmic fashion
another problem arises from the ontology being scarcely populated. many nodes have 0– <dig> annotations, which we consider too few to accurately test. to solve this issue, we implemented another straightforward node selection strategy. for a given terminal node, we test whether the node has more than a threshold number of annotations. if it does not, the node is not used for statistical testing. the next higher node in the branch is tested and removed recursively until a node that satisfies the condition is found. at that point, no more nodes can be removed from that branch. this completion is guaranteed by the structure of the ontology: parent nodes inherit all of the annotations of all of their descendants, so the number of annotated terms monotonically increases with increasing term hierarchy . in this way, we ensure that our term dictionary includes only those tissues that are considered sufficiently well annotated for statistical purposes.

additionally, we reasoned that for any parent node if all its daughters were selected for testing, there was no additional benefit to test the parent. we removed parent nodes from the analysis if all their daughter nodes passed the annotation threshold . we called this a ceiling filter. applying these three filters reduced the number of ontology terms by an order of magnitude.

filtering greatly reduces the number of nodes used for analysis
by itself, each of these filters can reduce the number of nodes employed for analysis, but applying the filters in different orders removes different numbers of nodes . we chose to always execute annotation and similarity thresholding first, followed by the ceiling filter. for validation  we made a number of different dictionaries. the original ontology has almost  <dig>  terms of which  <dig> have at least  <dig> gene annotations. after filtering, dictionary sizes ranged from  <dig> to a maximum of  <dig> terms, which shows the number of terms in a scarcely annotated ontology can be reduced by an order of magnitude through the application of a few simple filters . these filters were used to compile a static dictionary that we employ for all analyses . our trimming pipeline is applied as part of each new wormbase release. this ensures that the ontology database we are using remains up-to-date with regards to both addition or removal of specific terms as well as with regard to gene expression annotations.
the ‘method’ column refers to the trimming criterion for the similarity metric. we used two such criteria, ‘any’ and ‘avg’.‘any’: for a given sister set, if any sister had a similarity exceeding the corresponding threshold, all sisters were removed from the final dictionary. ‘avg’: for a given sister set, if the average similarity across all the sisters in the set was greater than the corresponding threshold, all sisters were removed from the final dictionary



tissue enrichment testing via a hypergeometric model
having built a static dictionary, we generated a python script that implements a significance testing algorithm based on the hypergeometric model. briefly, the hypergeometric model tests the probability of observing ni occurences of a tissue i in a list of size m if there are mi labels for that tissue in a dictionary of total size n that are drawn without replacement. mathematically, this is expressed as: 
  <dig> p=minim−min−ninni. 

although a user will input gene ids, we test the number of ocurrences of a term within the gene list, so a single gene can contribute to multiple terms. due to the discrete nature of the hypergeometric distribution, this algorithm can generate artifacts when the list is small. to avoid spurious results, a tissue is never considered significant if there are no annotations for it in the user-provided list.

once the p-values for each term have been calculated, we apply a standard fdr correction using a benjamini-hochberg step-up algorithm  <cit> . fdr corrected p-values are called q-values. genes that have a q-value less than a given alpha are considered significant. our default setting is an alpha of  <dig> , which is a standard threshold broadly agreed upon by the scientific community . this threshold cannot be altered in the web gui, but is user tunable through our command-line implementation.

users input a gene list using any valid gene name for c. elegans. these names are processed into standard wormbase gene ids . the program returns a table containing all the enriched terms and associated information such as number of terms in gene list and expected number of terms. finally, the program can also return a bar chart of the enrichment fold change for the fifteen tissues with the lowest measured q-values. the bars in the graph are sorted in ascending order of q-value and then in descending order of fold-change. bars are colored for ease of viewing, and color does not convey information. our software is implemented in an easy to use gui . anatomy terms are displayed in human-readable format followed by their unique ontology id . in summary, each time the ontology annotations are updated, a new trimmed ontology is generated using our filters; in parallel, users can submit their gene lists through wormbase for testing, with results output in a number of formats .
fig.  <dig> screenshot of results from the web gui. after inputting a gene-list, the user is provided with the results. an html table is output with hyperlinks to the ontology terms. a publication-ready graph is provided below, which can be saved by dragging to the desktop. the graph is colored for better visualization; color is not intended to convey information. the graph and the table show anatomy terms in human-readable format, followed by their unique wbbt id. finally, lists of the genes used and discarded for the analysis are also presented

fig.  <dig> tea workflow. the complete ontology is annotated continuously by wormbase curators. after each update, the ontology is processed to remove uninformative terms, and the remaining terms are used for statistical testing. users can select a gene list and input it into our tool using our wormbase portal. the gene list is tested for enrichment using the trimmed ontology, and results are output in tabular and graphic formats for analysis



validation of the algorithm and optimizing parameter selection
we wanted to select a dictionary that included enough terms to be specific beyond the most basic c. elegans tissues, yet would minimize the number of spurious results and which had a good dynamic range in terms of enrichment fold-change. larger tissues are correlated with better annotation, so increasing term specificity is associated with losses in statistical power. to help us select an appropriate dictionary and validate our tool, we used a set of  <dig> gold standards based on microarray and rna-seq literature which are believed to be enriched in specific tissues . these data sets are annotated gene lists derived from the corresponding expression cluster data in wormbase. some of these studies have been used to annotate gene expression, and so they did not constitute an independent testing set. to correct this flaw, we built a clean dictionary that specifically excluded all annotation evidence that came from these studies.

as a first attempt to select a dictionary, we generated all possible combinations of dictionaries with minimal annotations of  <dig>   <dig>   <dig>   <dig> and  <dig> genes and similarity cutoffs of  <dig> ,  <dig>  and  <dig>  using ‘avg’ or ‘any’ similarity thresholding methods . the number of remaining ontology terms was inversely correlated to the minimum annotation cutoff, and was largely insensitive to the similarity threshold in the range we explored. next, we analyzed all  <dig> datasets using each dictionary. because of the large number of results, instead of analyzing each set of terms individually, we measured the average q-value for significantly enriched terms in each dataset without regard for the perceived accuracy of the terms that tested significant. we found that the similarity threshold mattered relatively little for any dictionary. we also noticed that the ‘any’ thresholding method resulted in tighter histograms with a mode closer to  <dig>  for this reason, we chose the ‘any’ method for dictionary generation. the average q-value increased with decreasing annotation cut-off , which reflects the decreasing statistical power associated with fewer annotations per term, but we remained agnostic as to how significant is the trade-off between power and term specificity. based on these observations, we ruled out the dictionary with the  <dig> gene annotation cut-off: it had the fewest terms and its q-values were not low enough in our opinion to compensate for the trade-off in specificity.
fig.  <dig> kernel density estimates  for  <dig> gold standard datasets. we ran tea on  <dig> datasets we believed to be enriched in particular tissues and pooled all the results to observe the distribution of q-values. the mode of the distribution for dictionaries with annotation cut-offs of  <dig> and  <dig> genes are very similar; however, when the cut-off is lowered to  <dig> genes, the mode of the distribution shifts to the left, potentially signalling a decrease in measurement power



to select between dictionaries generated between  <dig>   <dig> and  <dig> annotation cut-offs, and also to ensure the terms that are selected as enriched by our algorithm are reasonable, we looked in detail at the enrichment analysis results. most results were comparable and expected. for some sets, all dictionaries performed well. for example, in our ‘all neuron enriched sets’  <cit>  all terms were neuron-related regardless of the dictionary used . on the other hand, for a set enriched for germline precursor expression in the embryo  <cit> , the  <dig> cutoff dictionary was only able to identify ‘oocyte wbbt:006797’, which is not a germline precursor although it is germline related; whereas the two smaller dictionaries singled out actual germline precursor cells—at the  <dig> cutoff, our tool identified the larval germline precursor cells ‘z2’ and ‘z3’ as enriched, and at the  <dig> gene cutoff the embryonic germline precursor terms ‘p4’,‘p3’ and ‘p2’ were identified in addition to ‘z2’ and ‘z3’. we also queried an intestine precursor set  <cit> . notably, this gene set yielded no enrichment when using the  <dig> cutoff dictionary, nor when using the  <dig> cutoff dictionary. however, the  <dig> cutoff dictionary identified the e lineage, which is the intestinal precursor lineage in c. elegans, as enriched. both of these results capture specific aspects of c. elegans that are well known to developmental biologists.
we ran the same gene list on a dictionary with a minimum annotation cutoff of  <dig>  similarity threshold of  <dig>  and similarity method ‘any’ versus another with a minimum annotation cutoff of  <dig>  similarity threshold of  <dig>  and similarity method ‘any’. in the table, columns are labeled with their significance value  or enrichment fold change followed by a hyphen and a number which indicates which the cutoff for the dictionary that was used for testing. not all tissues are present in either dictionary. hyphens denote not-applicable values, which occurs when a particular tissue is not present in both dictionaries



not all queries worked equally well. for example, a number of intestinal sets  <cit>  were not enriched in intestine-related terms in any dictionary, but were enriched for pharynx and hypodermis. we were surprised that intestinal gene sets performed poorly, since the intestine is a relatively well-annotated tissue.

we assessed the internal agreement of our tool by using independent gene sets that we expected to be enriched in the same tissues. we used two pan-neuronal sets  <cit> ; two pvd sets  <cit> ; and two gabaergic sets  <cit> . overall, the tool has good internal agreement. on most sets, the same terms were enriched, although order was somewhat variable , and most high-scoring terms were preserved between sets. all comparisons can be found online in our github repository . the complete list of gene sets and results can also be found in additional files  <dig>   <dig> and  <dig>  overall, the dictionary generated by a  <dig> gene annotation cutoff with  <dig>  redundancy threshold using the ‘any’ criterion performed best, with a good balance between specificity, verbosity and accuracy, so we selected this parameter set to generate our static dictionary. as of this publication, the testable dictionary contains  <dig> terms.
fig.  <dig> independently derived gene sets show similar results when tested with the same dictionary. set 1) gabaergic gene set from watson  <cit> . set 2) gabaergic gene set from spencer  <cit> . arrowheads highlight identical terms between both analyses. all terms refer to neurons or neuronal tissues and are gaba-associated. dictionary with cutoff: 33; threshold:  <dig> ; method: ‘any’



applying the tool
we applied our tool to the rna-seq datasets developed by engelmann et al.  <cit>  to gain further understanding of their underlying biology. engelmann et al. exposed young adult worms to  <dig> different pathogenic bacteria or fungi for  <dig> h, after which mrna was extracted from the worms for sequencing. we ran tea on the genes engelmann et al. identified as up- or down-regulated. initially we noticed that genes that are down-regulated tend to be twice as better annotated on average than genes that were up-regulated, suggesting that our understanding of the worm immune system is scarce, in spite of important advances made over the last decade. up-regulated tissues, when detected, almost always included the hypodermis and excretory duct. three of the five samples showed enrichment of neuronal tissues or neuronal precursor tissues among the down-regulated genes. as an independent verification, we also performed go analysis using panther on the down-regulated genes for d. coniospora. these results also showed enrichment in terms associated with neurons . a possible explanation for this neuronal association might be that the infected worms are sick and the neurons are beginning to shut down; an alternative hypothesis would be that the worm is down-regulating specific neuronal pathways as a behavioral response against the pathogen. indeed, several studies  <cit>  have provided evidence that c. elegans uses chemosensory neurons to identify pathogens. our results highlight the involvement of various c. elegans neuronal tissues in pathogen defense.
fig.  <dig> 
d. coniospora gene enrichment analysis and tissue enrichment analysis results. we compared and contrasted the results from a gene enrichment analysis program, pantherdb, with tea by analyzing genes that were significantly down-regulated when c. elegans was exposed to d. coniospora in a previously published dataset by engelmann et al.  <cit>  with both tools. a pantherdb screenshot of results, sorted by p-value. only top hits shown. b tea results, sorted by q-value  and fold-change. both pantherdb and tea identify terms associated with neurons . the two analyses provide complementary, not redundant, information



discussion
we have presented a tissue enrichment analysis tool that employs a standard hypergeometric model to test the c. elegans tissue ontology. we use a hypergeometric function to test a user-provided gene list for enrichment of anatomical terms in c. elegans. our hope is that the physiological relevance of anatomical terms will enable researchers to make hypotheses about high-dimensionality data. specifically, we believe an enriched term may broadly suggest one of two hypotheses: if a list is enriched in a particular anatomical region, that anatomical region is affected by the experimental treatment; alternatively, the anatomical regions that are enriched reflect biologically relevant interactions between tissues. we believe the first hypothesis is a reasonable one to make in the case of whole-worm rna-seq data for example, whereas the second hypothesis may be more plausible in cases where a researcher already knows what tissues a particular gene list came from, as may be the case in single-cell rna-seq.

our tool relies on an annotation dictionary that is continuously updated primarily with data from single gene qualitative analyses, does not require retraining and does not require ranked genes. to our knowledge, this is the first tool that tests tissue enrichment in c. elegans via the hypergeometric method, but similar projects exist for humans and zebrafish  <cit> , highlighting the relevance of our tool for high-dimensionality biology. chikina et al.  <cit>  have previously reported a tissue enrichment model for c. elegansbased on a support vector machine classifier that has been trained on microarray studies. svms are powerful tools, but they require continuous retraining as more tissue expression data becomes available. moreover, classifiers require that data be rank-ordered by some metric, something which is not possible for certain studies. furthermore, this tissue enrichment tool provides users with enrichment results for only  <dig> large tissues. in contrast, our tool routinely tests a much larger number of terms, and we have shown it can even accurately identify enrichment of embryonic precursor lineages for select data sets.

we have also presented the first, to our knowledge, ontology term filtering algorithm applied to biomedical ontologies. this algorithm, which is very easy to execute, identifies terms that have specificity and statistical power for hypothesis testing. due to the nature of all ontologies as hierarchical, acyclical graphs with term inheritance, term annotations are correlated along any given branch. this correlation reduces the benefits of including all terms for statistical analysis: for any given term along a branch, if that term passes significance, there is a high probability that many other terms along that branch will also pass significance. if the branch is enriched by random chance, error propagation along a branch means that many more false positives will follow. thus, a researcher might be misled by the number of terms of correlated function and assign importance to this finding; the fact that the branching structure of go amplifies false positive signals is a powerful argument for either reducing branch length or branch intracorrelation, or both. on the other hand, if a term is actually enriched, we argue that there is little benefit to presenting the user with additional terms along that branch. instead, a user will benefit most from testing sparsely along the tree at a suitable specificity for hypothesis formation. related terms of the same level should only be tested when there is sufficient annotation to differentiate, with statistical confidence, whether one term is enriched above the other. our algorithm reduces branch length by identifying and removing nodes that are insufficiently annotated and parents that are likely to include sparse information.

we endeavoured to benchmark our tool well, but our analysis cannot address problems related to spurious term enrichment. although we were unable to determine false-positive and false-negative rates, we do not believe this should deter scientists from using our tool. rather, we encourage researchers to use our tool as a guide, integrating evidence from multiple sources to inform the most likely hypotheses. as with any other tool based on statistical sampling, our analysis is most vulnerable to bias in the data set. for example, expression reports are negatively biased against germline expression because of the difficulties associated with expressing transgenes in this tissue  <cit> . as time passes, we are certain the accuracy and power of this tool will improve thanks to the continuing efforts of the worm research community; indeed, without the community reports of tissue expression in the first place, this tool would not be possible.

CONCLUSIONS
we have built a tissue enrichment tool that employs a tissue ontology previously developed by wormbase. we use a simple algorithm to identify the best ontology terms for statistical testing and in this way minimize multiple testing problems. our tool is available within wormbase or can be downloaded for offline use via ‘pip install’.

