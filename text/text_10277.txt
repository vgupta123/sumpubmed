BACKGROUND
modern proteomes are generated from ancestral ones by modifications that occur at the dna level of the corresponding coding genomes. such modifications  have different sources, among them: mutations, genetic recombination and alternative splicing . all generate variability in the protein repository present in one population. as a result, after isolation and speciation events, populations carrying closely-related proteomes can produce highly related protein sets.

however, a great part of the cognate proteins encoded by distinct proteomes is strictly similar, at the sequence level, to their counterparts in related species. this similarity is more than structural, often reflecting also in the function of these proteins in the biological system. proteins derived from a common ancestor are termed homologs.

there are different subtypes of homology relationships attributed to proteins based on an evolutionary point of view. among these, we highlight those proposed by sonnhammer and koonin  <cit>  which defines orthologs, in-paralogs and out-paralogs as subtypes of homolog protein/genes, which can be operationally used by bioinformatics tools.

several approaches have been designed to cluster related sequences from different organisms into the same ortholog group. some of them use either all-versus-all alignments among different species  <cit>  or pair-wise alignment among target organisms  <cit>  as well. each of these techniques is based on information deposited for fully sequenced genomes, and generate distinct ortholog groups using customized algorithms or thresholds in their searches  <cit> .

despite the prosperity of methods for definition of ortholog proteins among complete proteomes, there are few developments when it is desired to define such groups when poorly sequenced or unfinished proteomes are included in the search. furthermore, most of the available methods are used in a high-throughput way, considering the whole protein dataset.

here, we propose a methodology for finding highly-related groups of proteins to one single desired seed sequence, classifying each of them as potential orthologs or in-paralogs into complete and or unfinished proteomes.

methods
algorithm
input dataset
seed linkage runs using as input a fasta formatted database and a mysql  <cit>  table that contains taxonomic information  for all sequences contained in the database. the fasta file is expected to contain seed sequences and all candidate sequences with which one aims to establish a clustering relationship. using the access to the mysql database the program automatically recognizes which sequence belongs to which organism, a procedure that facilitates the setup and limits blast searches to the set of interest . we have tested and established the best thresholds that allows a sequence to be selected as a correct member of a group, which allows the possibility of working with sequences from organisms with incompletely-sequenced genomes.

alignment details
alignments between sequences are obtained with ncbi blast: blastp program  <cit> , 10- <dig> e-value cutoff, low complexity filter off , tabular output . blast parameters specified in the seed linkage configuration file can be altered by the user. to minimize the problem of fused genes/domains we defined 50% as the cut-off for both minimum identity and alignment coverage , as explained by remm et al.  <cit> ; this too can be customized.

the main trait that distinguishes the seed linkage method from other approaches is the manner by which the alignments are conducted. the seed protein from the seed organism is used in a blast search against the full database, and the best hit from each organism is used as secondary query sequence. the secondary query is considered a bidirectional best hit subject  for its organism when the original seed is its best hit from the seed organism. the bbhsj is considered as a putative ortholog in that organism; from the information contained in these alignments inparalogs are gathered as described below.

inparalog search into seed organism
the seed-to-bbhsj score from the best scoring organism is used as a threshold to limit inparalog inclusion for proteins encoded by the seed organism. this means that only inparalog candidates that are more  similar to the seed sequence than the highest scoring bbhsj will be grouped with the seed . besides surpassing the thresholds, an inparalog candidate is grouped only if it shows a bbh relationship with either the seed or with an already-grouped inparalog.

if the seed does not establish any bbh relationship with sequences from other organisms, the inparalog retrieval score limit in the seed organism is set to a minimum value for the parameter called seed-inparalogrelative_score given by the formula:

  seed-inparalogrelative_score = score_inparalog_vs_seed/score_seed_vs_seed 

this parameter is set to a default value of  <dig>   but can be customized during setup. this means that all inparalog candidates have to present a score that is at least 30% of the score of the seed against itself. similarly, for other searches, an inparalog candidate is grouped only if it shows a bbh relationship with either the seed or with an already grouped inparalog .

inparalog search for candidate species
candidate species are organisms where a bbhsj was found by the initial alignment to the seed. the score of the bbhsj against the seed is used to limit the inparalog search within this respective species, as shown in figure  <dig>  moreover, an inparalog candidate is grouped only if it shows a bbh relationship with either the bbhsj or with an already grouped inparalog.

iteration
all inparalogs from the seed organism, but not the grouped proteins from the candidate species , are brought to the condition of seed and the process of clustering is repeated either until it converges or by a limited number of rounds, set by the parameter "r" in the script. the default is r =  <dig>  but this can also be customized during input. that means that all inparalogs from the seed organism are allowed to gather additional inparalogs, plus orthologs and their respective inparalogs in candidate species, until at the most the 10th search for inparalogs from the seed organism is done. however, iterations will always respect the inparalog retrieval score limit defined by the original seed in the seed organism; and the score between the added inparalog used as seed against its bbhsj as threshold to limit the inparalog inclusion from the candidate species.

search of almost identical inparalog candidates
the tree diagram in figure  <dig> exemplifies a case of what we term 'hidden inparalogy'. consider sequence a <dig> from organism a , and two other sequences a <dig> and a <dig> generated by a lineage-specific duplication event so they are more similar to each other than to sequence a <dig>  then, a <dig> and a <dig> will not match a <dig> reciprocally; instead, they will match each other. to solve this problem, when an already-grouped protein  is 2nd in the returned alignment, the candidate is considered to have a reciprocal match, given that the pair a2-a <dig> does establish a bbh.

search initiated by a seed with an almost identical inparalog
similar to the previous case, when a sequence a <dig> from organism a is used as seed in a search for bbhsj from organism b, often sequence b <dig> matches reciprocally a <dig> in the organism a. however, consider sequence a <dig>  an inparalog of a <dig>  being more ancient in organism a than a <dig>  in this scenario, b <dig> will match reciprocally a <dig> instead of a <dig>  to cope with this event, when seed  is 2nd in the returned alignment, the candidate is considered to have a reciprocal match, given that the pair a2-a <dig> actually establishes a bbh.

batch search
though not aiming to generate clusters starting with multiple seed sequences, the seed linkage approach permits users to create such clusters by initially defining individual clusters through a batch search executed by the program, followed by the application of disambiguation rules. thus, the user does not need to verify whether or not seed sequences may be inparalogs.

cluster disambiguation
considering two clusters i and j, with size  ni and nj, we defined four relationships between clusters i and j:

 i is contained in j: in this case, if all the sequences of cluster i also belongs to cluster j, then cluster i is deleted.

 i is identical to cluster j: in this case, just one of the clusters is maintained.

 i is completely distinct from j: in this case both clusters are kept separately.

 i has elements in common with cluster j: in this case, if cluster j is larger than cluster i, and more than 50% of the sequences in cluster i are present in cluster j, than clusters i and j are merged, otherwise they are maintained separately.

implementation
core scripts
the algorithm described above was implemented as a linux command line script written in php command line interface  <cit> . the script is connected to a mysql database where the information regarding to the sequence source database is stored as simple tables. furthermore, it is also necessary to set a fasta sequence database and the path of the alignment software must be edited in the script. to facilitate database formatting we have developed a configuration file, in which the parameters pertaining to the script can be easily adjusted.

the main package consists of three files, clearly documented. additional scripts to parse the model databases are provided within the package as additional file  <dig> 

algorithm evaluation
manually curated database and non-related sequences
to validate the seed linkage approach a manually-curated dataset of  <dig> trans-membrane proteins  <cit>  previously grouped into  <dig> reference clusters was used as seed against the proteome sequences of the following organisms: c. elegans , d. melanogaster  and h. sapiens , comprising  <dig>   <dig> and  <dig> sequences, respectively. the rebuilt clusters  were disambiguated and the resultant clusters were compared to the original reference clusters.

RESULTS
to develop and verify a procedure that results in clusters of proteins linked to seed sequences, we have chosen to assay the same manually-curated database of trans-membrane proteins that was used to verify clusters using the inparanoid procedure. briefly, inparanoid drives automatic clustering of orthologs and inparalogs shared by different organisms with completely-sequenced genomes  <cit>  or even by multiple proteomes from large taxonomic groups  <cit> . the manually-curated database contains  <dig> sequences that are expected to constitute  <dig> manual clusters . the seed linkage procedure was applied to each sequence as seed. as a challenge to correctly form clusters without including additional sequences, the blast database also included the complete proteomes from worm, fly and man, adding up to  <dig>  entries. grouped inparalog candidates were then iteratively treated as new seeds and the resultant clusters were disambiguated.

clustering
the batch search script provided by the seed linkage package was used to run the  <dig> individual processes. as detailed in "methods," only the cutoff for the parameter seed-inparalogrelative_score was omitted. moreover, for the primary analysis , cluster disambiguation was not performed. of the generated clusters,  <dig> seeds  remained as clusters of size  <dig> , while the remaining  <dig> sequences formed clusters whose size ranged from  <dig> up to  <dig> sequences . a lesser number of seeds  participated in the largest clusters . sequences grouped by seed linkage always require a bbh relationship with either a seed or previously grouped sequences so, in this experiment, a total of  <dig> bbh events occurred, with  <dig> events  composed of sequences from the original trans-membrane dataset, and  <dig> events involving additional sequences . thus, additional filtering seemed to be necessary to reduce the chance of mis-inclusion of spurious sequences; some of these might be out-paralogs, which could have diverged significantly to acquire new functionalities  <cit> .

inparalog threshold evaluation
the thresholds  used in blast alignments, together with the requirement of a bbh relationship for the sequence to be grouped, were not enough to limit the inclusion of additional sequences. in clusters lacking a reference bbhsj, this could be even more relevant since the search for inparalogs from the seed organism might tend to include outparalogs, which iteratively could include undesirable sequences. we decided to investigate two variables potentially useful in this task: raw and relative scores.

raw score
we graphed the number of sequences from the original  and additional  datasets that were recruited into the rcs against the raw score between each accepted inparalog candidate and either seed  or bbhsj . due to the expected possibility that the same sequence is gathered by different query sequences into distinct clusters, we reported all inclusion events for both original and additional sequences. the analysis was applied to clusters initiated either with or without a bbhsj reference hit . figure  <dig> shows the raw score distribution in the batch search. for clusters initiated with a bbhsj , the distribution of raw score resulting in the recruitment of additional sequences  resembles, although in lower proportion, that of original sequences . this suggests that additional filtering would not significantly avoid gathering undesirable proteins. in these cases, the score seed/bbhsj might have acted as a natural inparalog retrieval score limit for inparalog inclusion. however, the distribution of raw scores presented during the recruitment of additional sequences in the absence of a bbhsj  was remarkably concentrated at the low raw scores, indicating that an inparalog retrieval score limit could be set to a value such as  <dig> bits, since 58% of the gathering events for additional sequences were concentrated below this range, as opposed to 19% for original sequences.

relative score
the second analyzed parameter was the relative score. the ratio between the score of each gathering event and the score of seed self-alignment was recorded. again, in the presence of a bbhsj, the distribution of relative scores for the additional sequences is not distinct from those for the original ones . however, figure  <dig> shows that 57% of the gathering events of additional sequences occur in relative score ranges less than or equal to  <dig>  . in the same range, only 8% of gathering events of original sequences happen.

alternative inparalogs thresholds definition
considering the results above, we tested raw score  <dig> and relative score  <dig>  as thresholds to minimize the inclusion of additional sequences to the mcs during seed linkage rebuilding. data in figure 6a shows that gathering events of original sequences represent 34% and 46% of the total alignments in clusters with and without a bbhsj, while gathering events of additional sequences represent 3% and 16%, respectively.

adopting a threshold for inclusion of sequences with relative score higher than  <dig>  , the percentage of gathering events of original sequences decreased very little . similar behavior was observed for gathering events of additional sequences in clusters with a bbhsj . remarkably, these events decreased to 7% in clusters without a bbhsj. analyzing the effect of a raw score cutoff of  <dig> bits , it is observed that the proportion of gathering events of original sequences decreased slightly more than using the relative score cutoff , reaching 37% in the clusters lacking a bbhsj, without an effect on the gathering events of additional sequences in absence of bbhsj. thus, adoption of a cutoff based on relative score  <dig>  appears to be more efficient than using a raw scrore  <dig> cutoff. furthermore, the adoption of an extra inparalog retrieval score limit does not appear to be necessary in when a bbhsj is established. a direct comparison between the two approaches – raw and relative score – is presented by roc curves shown in figure  <dig>  in the presence of a bbhsj  the percentage of accumulated original sequences increases linearly as the cutoff is made less stringent. however, for the clustering initiated without a bbhsj  a cutoff less than either  <dig>  or  <dig>   drives the procedure to recruit relatively more additional sequences than original sequences. the use of the relative cutoff appears to be advantageous, so it has been adopted as default.

post-filtering analysis of remaining additional sequences
having applied the  <dig>  relative score cutoff to clusters initiated both with and without a bbhsj, an analysis of the order in which the sequences were gathered reveals a curious phenomenon: the inclusion of original sequences after the inclusion of additional ones. data in figure  <dig> indicates that this scenario is frequent , 52% of all events. these events comprise a total of  <dig> additional sequences, whereas  <dig> out of them  have been gathered before an original one at least once. this might suggest that some gathered additional sequences were not recruited inappropriately. in fact, an analysis of the structural presence of trans-membrane domains  shows that most of the additional sequences gathered with manual sequences a posteriori display at least two tm segments . from the  <dig> additional sequences gathered at the last position by the algorithm, an additional  <dig> sequences also displayed at least two tm segments. thus, possibly  <dig> plus  <dig> out of the  <dig> additional sequences  might have had been suitably gathered.

cluster disambiguation and comparison to manually curated dataset
after applying the  <dig>  threshold to filter all inparalog sequences below or equal to this level in clusters initiated without a bbhsj, the resultant clusters were disambiguated using the rules described in "methods." after disambiguation, a total of  <dig> unique sequences remained in the dataset. this represents an increase of 20% over the initial number of seeds used, corresponding to the inclusion of  <dig> additional sequences to the original  <dig> ones. as suggested above, some of them  might have not been inappropriately gathered, what would represent an increase of just  <dig> % in the initial universe of  <dig> original sequences.

with disambiguation, the initial  <dig> clusters formed by the  <dig> seed sequences were reduced to  <dig> clusters and  <dig> singlets , which approximates the expected number of  <dig> mcs. some mcs  were split into more than one rc, while the remaining  <dig> mcs  were represented by only one rc each. conversely,  <dig> out of the  <dig> rcs  were built with sequences from only a single mc, and within these, just  <dig> rcs  have gathered additional sequences. indeed, in  <dig> of these  <dig> rcs, all additional sequences display more than two tm segments.

seed linkage has merged sequences from  <dig> mcs to produce  <dig> of the  <dig> disambiguated rcs. this is unlikely to be explained by mixing of unrelated proteins since all alignments are required to surpass a 10- <dig> e-value cutoff. from these  <dig> rcs,  <dig> result from the merging of all elements of the involved mcs. as an example, the neighbor joining  tree for the sequences present in rc <dig> is shown in figure 9a, wherein three mcs plus two additional sequences have been grouped. moreover, the three remaining merged clusters represent exclusive cases also illustrated in figure 9: rc <dig> has mixed all sequences from mc <dig>  together with one sequence from mc <dig> , the other sequence from mc <dig> has not built a cluster when used as seed . note that, when used as seed, sequence gi <dig>  was able to gather  <dig> out of  <dig> sequences from mc <dig> , what is the likely reason for all sequences being merged in rc <dig>  in figure 9c it is shown the merging of all sequences from mc <dig>  divided in two main branches, with one sequence  from mc <dig> , closely placed between them. the two remaining sequences from mc <dig> have built a duplet with each other  and none of them included gi <dig> when they used as seed. the last case of partial merging of clusters occurred for rc <dig> that merged all sequences from mc <dig> with four out of five sequences from mc <dig>  while the remaining sequence from mc <dig>  that was not included in rc <dig>  has built the rc <dig> by recruiting two additional sequences. all these examples illustrate the consistence of clusters generated by single linkage that merge proteins judged as distantly related by manual curation.

comparison to multiparanoid approach
we compared our approach to another method, multiparanoid, that has been shown to be very efficient in defining inparalog and ortholog clusters among multiple proteomes  <cit> . the result of the comparison of seed linkage versus multiparanoid using the manually curated clusters as reference is shown in table  <dig>  while multiparanoid produces a slightly reduced number of clusters  as compared to the manual curation , seed linkage produced  <dig> rc. this might indicate that seed linkage is more stringent for propagating information between clustered sequences since seed linkage yielded a larger number of clusters . furthermore, seed linkage has rebuilt clusters with a larger number of seed sequences, since the number of singlets is rather small  as compared to multiparanoid. addition of sequences not included in curation was not restricted to seed linkage given that multiparanoid presented a compatible number. as mentioned above,  <dig> of them provide evidence of being appropriately gathered as judged by the criteria used during curation – detection of over two tm domains. agreement with manual curation seems weak at first glance, since only  <dig> rc are a perfect match as compared to  <dig> multiparanoid clusters; however, in  <dig> rc all additional sequences display over two tm domains, thus  <dig> rc compare better with these  <dig> multiparanoid clusters.

aadditional sequences display two or more tm segments; bincluding or not additional sequences, mc: manually curated clusters, rc: rebuilt clusters.

as mentioned above,  <dig> seed linkage rc merge mc, but this is not restricted to our procedure, since in nine events a multiparanoid is split in two or more manual  <cit> .

usage with partial proteomes
we selected from the  <dig> rc generated by seed linkage those clusters containing four or more sequences from organisms which we would artificially deplete to simulate an unfinished genome. for worm , fly  and human , the respective set of  <dig>   <dig> and  <dig> clusters contained  <dig>   <dig> and  <dig> sequences. for each test, we randomly deleted  <dig> –  <dig> sequences from each of the  <dig> ,  <dig> , or  <dig>  clusters, in turn, then dissolved the clusters. we then attempted to rebuild them using only the sequences of the remaining two organisms as seeds . the results are shown in figure  <dig>  with zero deletions from the test organism , about 80% of the sequences were clustered by the seeds from the other two organisms. this indicates that the clustering of the remaining 20% sequences from the test organism depends, at least in part, on paralogs from that test organism. deletion of  <dig>   <dig>  or  <dig> sequences per cluster yielded a linear recovery rate. for example, for fly, when three sequences per cluster were removed , 30% of all fly sequences  were clustered . the average clustering for each depletion test was 82%  indicating that seed linkage can be applied to unfinished proteomes as well.

usage with a single iteration
besides being used up to convergence, seed linkage can be used in single-run mode . a comparison of performance is shown in table  <dig>  together with an execution that limited the gathering of only one reciprocal best hit  per seed per organism . clustering with the default usage produced clusters of mean size similar to the manual ones, while rbh grouped  <dig> sequences in  <dig> clusters. the recall rate  that represents the amount of manual sequences that were clustered  was comparatively high  for both single iteration and convergence. determination of sensitivity with the raw results favors rbh execution; however, if one considers the recruited additional sequences that bear two or more trans-membrane domains  as valid gathering events, then the specificity* favors both single iteration and convergence. thus, the advantage of using the convergence method seems to be increasing the linkage between clusters, resulting in a closer approximation of their number and mean size to the manual set.

asensitivity = originals in clusters/total of manual sequences; bspecificity = true positives/total of sequences; cspecificity* was determined considering sequences with  <dig> or more tm domains as true positives.

discussion
seed linkage was developed as an application to enrich the knowledge of similar proteins in species other than the seed organism. the present large size of proteome databases such as uniprot  <cit>  suggests that a blast search involving all sequences against themselves would require an excessive amount of processing. seed linkage simplifies the search, focusing on the subjects of the seed.

similar to the approach used by inparanoid, particular importance is given to the score between seed and the best scoring seed subject that establishes with seed a bidirectional best hit  relationship. using a manually-curated dataset of trans-membrane proteins from worm, fly and man, we found that 37% of all gathering events  were initiated by finding a bbh subject  in a species different from the seed organism. when this happens, the inparalog retrieval score limit is made equal to the score obtained by the alignment of seed and bbhsj, both within the seed organism and in the candidate species as well . most of the grouped sequences when a bbhsj is attained corresponded to the ones listed in the manually curated database used as reference. however, it is possible that additional sequences are actually correct recruitments .

seed linkage then continues the search for related proteins by two means, aiming to group inparalogs both in seed organism, using seed as bait, and in candidate species, using the bbh relationship established by a recruited inparalog in the seed organism. we tested the performance of seed linkage and found better results when the iterative searches of sequences in candidate species that are initiated by a recruited inparalog is limited by the initial score between seed and its bbhsj , which makes the procedure more robust since one intended use of seed linkage is to identify circumstances that warrant propagation of information associated with seed.

inparalogs from the seed organism often are able to simultaneously recruit additional inparalogs in the seed organism, by establishing an additional bbh relationship with a candidate species. for example, from all gathering events in a cluster initiated by a seed-bbhsj match, 11% do not involve the seed itself.

special attention was given to cases when a bbhsj was not found, to establish an inparalog retrieval score limit. for the studied curated database, such events occurred often . two possible limits were investigated: a raw score and a relative score. the relative score was chosen to reflect a proportion of the score that the seed shows when aligned to itself, thus incorporating the information of its size. analysis of the distribution of the scores during the event of recruitment allowed us to find an empirical value for the inparalog retrieval score limit, so we could attain results that are similar to the processes initiated in the presence of a bbh relationship between seed and bbhsj. the greatest performance was yielded by setting the value to  <dig>  , which reduced the recruitment of additional sequences to an acceptable rate. in our implementation, we provide support for users who wish to apply more stringent limits based on inspection of figure  <dig>  in the absence of a bbhsj, the inparalog retrieval score limit of  <dig>  might benefit of an adjustment a posteriori to adapt to each protein family. further studies in this respect are envisaged.

many databases group similar proteins and propagate the information amongst the members. two examples of such databases are goa  and kog . if we consider a database as a table composed of a column for each organism and a row for each protein, it might be noticed that goa prioritizes the enlargement of the columns, which will contain very different number of gene entries per organism. conversely, databases such as kog strictly target the completion of the rows, listing all genes with similar function in the constituting organisms. several approaches tend to focus more on these rows  than to enlarge the columns , although they might actually work on between those goals, such as inparanoid/multiparanoid, orthomcl  <cit> , kegg orthology  <cit> , and ego  <cit> , amongst others. seed linkage joins these efforts with a declared option for grouping cognate proteins from multiple organisms beginning with only one sequence, through connectivity saturation with that seed sequence. as an example, using a protein from a dicot plant as seed, it might be able to gather similar proteins in monocot plants, which in turn can act as a better reference sequence for similarity searches in the monocot species. moreover, seed linkage adds two relevant functionalities:  it does not require the candidate species to have completed genome and  it saves computing time since it does not require alignment of all sequences to each other.

certainly the recruitment yielded by seed linkage is amenable to additional approaches to validate the clustering such as literature support  <cit> , mapping of conserved domains  <cit> , alignment of secondary structure, etc. indeed, a comparative analysis of seed linkage and multiparanoid did not yield the same results , although a similar number of clusters and performance were obtained. however, seed linkage recruits, with an acceptable level of confidence, a significant number of candidates, maximizing the search on all available proteomes while minimizing computing time. the software is made available for the research community, and a web service dedicated to seed linkage is currently under construction. seed linkage is also currently being used to construct a database for protein defense mechanisms in plants.

CONCLUSIONS
the seed linkage software was produced with the aim of clustering cognate proteins from multiple organisms beginning with a single sequence through connectivity saturation with that seed sequence. the method results were comparable to conventional clustering approaches. generating clusters based only on a protein of interest is less time consuming than generating clusters for whole proteomes, and can be applied to establish members from unfinished proteomes as well.

availability and requirements
• project name: seed linkage clustering of related protein sequences;

• project home page: ;

• operating system: linux;

• programming language: php;

• other requirements: php  <dig> or higher, mysql  <dig> or higher, ncbi blast package;

• any restrictions to use by non-academics: license needed.

• ncbi taxonomy database:

authors' contributions
ab-s created, implemented and tested the proposed algorithm; created and conducted the pilot tests and wrote the paper. vps helped in the algorithm discussion, development and implementation. rs and jmo advised in the algorithm implementation, discussed the pilot tests and coordinated the method development. jmo created the paper's main idea and supervised the writing of the paper. all authors read and approved the final manuscript.

supplementary material
additional file 1
seed linkage package. compressed core of scripts written in php necessary to run the seed linkage procedure. also contains a documentation file about each sub item.

click here for file

 acknowledgements
we would like to sincerely thank darren a. natale  for critically reviewing the manuscript and to mauricio de alvarenga mudado  for indispensable comments and suggestions, besides his unquestionable technical support. we thank especially to vps and rs for the valuable training given to ab-s during his special external doctorate training in the european molecular biology laboratory  – germany. this work was developed as part of ab-s phd thesis, which has been sponsored by the brazilian ministry of education  and foundation for research support of minas gerais state .
