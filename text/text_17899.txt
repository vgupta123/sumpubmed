BACKGROUND
in comparative genomics, the study of genome rearrangements has been one of the most promising methods for tracing the evolutionary history using gene order comparisons between organisms. the mathematical model simply treats a chromosome in the genome as a permutation of integers, where each integer represents a gene. specifically, these integers are associated with signs, + or -, to indicate the corresponding orientation  of the gene. a basic task in genome rearrangement studies is to economically transform one permutation into another using restricted types of global mutations. compared with local  mutations, global mutations are rare, but can provide valuable clues about the evolutionary history of organisms.

the most widely studied type of global mutations is the reversal  which inverts a segment in the permutation and changes the sign of each integer in that segment. if we only consider reversals, the so-called problem of sorting by reversals  is to find the shortest series composed of reversals that transforms the given permutation into another, where the minimum number of reversals is often regarded as the  distance between two permutations. sbr is a well-studied subject in computational biology, and its first polynomial-time algorithm was proposed by hannenhalli and pevzner in  <dig>  <cit> . other groups have subsequently simplified and improved this algorithm  <cit> . to date, the best running time of an algorithm for sbr is o in theoretical analysis, as presented by han  <cit> . it remains unclear whether sbr can be solved in o time, but a plausible answer was recently given by swenson et al.  <cit> , providing two new algorithms; the first runs in randomized o time, whereas the other is a deterministic algorithm with running time o, where k is a data-dependent parameter and both its average and standard deviation are small constants derived from extensive experiments  <cit> . moreover, a linear-time cost is sufficient to compute the reversal distance  <cit> .

in addition to reversals, transpositions and block-interchanges are also global mutations that act on a permutation. the former exchanges two adjacent segments, and the latter is a generalization of a transposition in which exchanged segments do not have to be adjacent. the problem of transpositions is called sorting by transpositions , in which the minimum number of transpositions required to complete the transformation is sought. currently, we know nothing about its complexity, but several approximation algorithms have been proposed  <cit> . however, the problem of sorting by block-interchanges  using block-interchanges only is tractable and was first studied by christie  <cit>  using the graph approach and then by lin et al.  <cit>  using the algebraic formalism. recently, feng and zhu  <cit>  introduced a new data structure to improve the approximation and exact algorithms for sbt and sbbi, respectively, to achieve the time complexity o.

considering reversals and transpositions together leads to the problem of sorting by reversals and transpositions , i.e., it allows one to perform reversals and transpositions alternatively during the transforming process. because of the two operations used, we assign weights wr to reversals and wt to transpositions, and thus seek a transforming series with a minimum sum of weights. for wr : wt =  <dig> :  <dig>  lin and xue  <cit>  and walter et al.  <cit>  presented approximation algorithms with a factor of  <dig>  by incorporating inverted transposition, which inverts one of two swapped segments of a transposition and usually has equal weight wit to wt, in the transformation, 2-approximation algorithms have been reported by two groups  <cit> . furthermore, eriksen  <cit>  developed a -approximation algorithm for the weighted assignment of wr : wt =  <dig> :  <dig>  bader and ohlebusch  <cit>  recently devised a  <dig> -approximation algorithm with time o for any weight proportion of wr : wt between  <dig> :  <dig> and  <dig> :  <dig>  nevertheless, it remains unknown whether tractable results can be derived for sbr+t.

in contrast, studying the block-interchanges  along with reversals seems easier, i.e., the problem of sorting by reversals and block-interchanges . for wr : wbi =  <dig> :  <dig>  three groups of researcheres began from different perspectives but all achieved tractable results for sbr+bi  <cit> . yancopoulos et al.  <cit>  introduced a universal double-cut-and-join operation that accounts for reversals, translocations, fissions, fusions and block-interchanges by assigning a weight of  <dig> to block-interchanges and  <dig> to others. with a slight modification to their algorithm, one can optimally solve sbr+bi  <cit> . in addition, the approach of lin et al.  <cit>  based on the so-called breakpoint graph  <cit> , whereas mira and meidanis  <cit>  adopted the algebraic viewpoint by introducing the parameter norm to represent the weight of a rearrangement event. by adding a number of local mutations, bader  <cit>  tackled the problem of unequal gene content using a heuristic algorithm. despite tractable results when studying sbr+bi under wr : wbi =  <dig> :  <dig>  to our knowledge, this is the only type of weight assignments that have been considered so far. in this paper, we study genome rearrangement problems by considering reversals and block-interchanges simultaneously using various weight assignments.

on the other hand, a traditional yet effective way to approach a complex problem is to devise an approximate solution that is "not too far from" the exact solution. approximation algorithms are, indeed, a well-developed branch of the computer sciences  <cit> . a β-approximation algorithm  for a minimization problem runs in time polynomial to the input size and returns a feasible solution having a quality value that is, at most, β times the optimum. more interestingly, since the factor β is obtained from the worst-case analysis, an approximation algorithm with a higher factor does not imply poor average performance. to address genome rearrangement problems, two approximation algorithms are developed in this work, together with theoretical analyses and experiments to evaluate their performance.

methods
preliminaries
a signed linear permutation  is a permutation of { <dig>   <dig>  ..., n}, where each element is labeled by + or - to indicate the orientation of its corresponding gene. a reversal r  is an operation that inverts the order of elements in a segment of  by transforming  into . another operation, block-interchange bi , exchanges two non-intersecting segments () and  by converting  to . for the two operations considered in our study, the weights of reversals and block-interchanges are denoted by wr and wbi, respectively.

given two permutations  and , the wgrp, abbreviated from weighted genome rearrangement problem with wr and wbi, is used to find a minimum weighted sequence of reversals and block-interchanges for transforming  into , and its sum of weights  is regarded as the distance between  and . in general, the problem is simplified as follows. first, the elements in  and  are relabeled such that  becomes the identity permutation  = , and therefore the transformation from  to  is similar to a sorting process. the distance  is also simplified as dist(). next, for wr >  <dig>  we replace wbi with wbi/wr and fix wr to  <dig> 

when dealing with the signed permutation  of size n, most studies extend and transform  into an unsigned mapping π =  of { <dig>   <dig>  ..., 2n + 1} beforehand by replacing each positive element x of  by 2x -  <dig> and 2x, each negative element -x by 2x and 2x -  <dig>  and adding two elements π <dig> =  <dig> and π2n+ <dig> = 2n +  <dig>  for example, if  = , then its unsigned mapping is π = . each operation on  also corresponds to a specific operation on π as follows: a reversal of the form r is said to be legal for π since it mimics the reversal r on  <cit> , and similarly a block-interchange bi is legal on π since it acts like the block-interchange bi on . considering the above  as an example, the reversal r and block-interchange bi are legal, whereas r and bi are not. furthermore, performing r ) on π is equivalent to performing r ) on . in other words, the wgrp between  and  can be solved by computing a minimum weighted sequence of legal reversals and block-interchanges for converting π to i. we hereafter use π and i instead of  and , and legal reversals and block-interchanges in our algorithms.

breakpoint graph
let π be the permutation mentioned previously. the so-called breakpoint graph bp is a powerful analysis tool for studying genome rearrangement problems, and is defined as an edge-colored graph with 2n +  <dig> vertices as follows: for  <dig> ≤ i ≤ n, π2i connects to π2i+ <dig> by a black edge and 2i is joined to 2i +  <dig> by a gray edge . in bp, a gray edge  is said to be oriented if i + j is even, and otherwise it is unoriented. a cycle is said to be alternating if it contains alternating black and gray edges. since the degree of each vertex is  <dig> , the graph bp can be uniquely decomposed into edge-disjoint and alternating cycles. in addition, a cycle is oriented as long as it has an oriented gray edge, otherwise, it is unoriented. the length of a cycle is the number of black  edges it contains. we use l-cycle to denote an alternating cycle with length l, and c to denote the number of cycles in bp, e.g., in figure  <dig>  c = 2: one is a 5-cycle and the other is a 3-cycle. note that c = n +  <dig> if and only if π = i.

each gray edge g =  is associated with the interval < i, j >, and two gray edges overlap if their corresponding intervals overlap but neither of them properly contains the other. moreover, two cycles overlap if their gray edges overlap, and a set of overlapping cycles forms a component. as with oriented cycles, a component is oriented if at least one of its cycles is oriented, and it is unoriented otherwise. using the result of bader et al.  <cit> , the oriented and unoriented components can be efficiently determined in linear time.

a complex and interesting component of the hannenhalli and pevzner  theory copes with the hurdle, which currently has several slightly different definitions  <cit> . here we adopt a similar statement to the work of eriksen  <cit>  but with linear permutations. a hurdle h is an unoriented component such that there is an interval containing all vertices in h but no vertices in other unoriented components. here we allow continuous intervals by setting  <dig> to be the successor of 2n +  <dig>  for the permutation π in figure  <dig>  c <dig> is a hurdle since <  <dig>   <dig> > ∪ <  <dig>   <dig> > is an interval containing the unoriented component c <dig> only. although <  <dig>   <dig> > contains c <dig> only, c <dig> is not a hurdle since it is an oriented component. as a result, the number of hurdles of π in figure  <dig> is one, i.e., h =  <dig> 

the hp theory shows that the variations in c and h guide the transformation between two permutations. for an arbitrary operation ρ acting on π, let Δcρ = c - c and Δhρ = h - h. for convenience, we further abbreviate Δcρ  to Δcr  if ρ is a reversal and to Δcbi  if ρ is a block-interchange. hp showed that Δcr ≤  <dig> and Δhr ≤  <dig>  <cit> . christie presented that Δcbi ≤  <dig> but on unsigned permutations  <cit> . a similar argument as christie's work  <cit>  can extend the upper bound of Δcbi on signed permutations.

lemma  <dig> for every permutation π and block-interchange bi, Δcbi ≤  <dig> 

proof: a block-interchange exchanges two non-overlapping segments, whereas a segment can be specified by two black edges. let vbi be the set of vertices connected by the black edges for determining the block-interchange bi, and c be the number of cycles containing the vertices in vbi. for example in figure 2a, vbi = {a, d, e, b, c, f} and c =  <dig>  according to the number of black edges containing vertices in vbi, we have the following two cases:

case1: three black edges. applying bi to π affects only the cycles whose vertices are in vbi. due to the three black edges in this case, we have  <dig> ≤ c ≤  <dig> and the same is true after applying bi, implying that Δcbi ≤  <dig> .

case2: four black edges. a similar statement as case <dig> shows that Δcbi ≤  <dig> as a result of  <dig> ≤ c ≤  <dig>  the only possibility in which Δcbi =  <dig> comes from the result of breaking the cycle in π into four cycles in bi·π, but it cannot happen with the subsequent argument. as shown in figure 2b, the block-interchange bi* with c =  <dig> results in c =  <dig> after performing bi*, and hence, Δcbi* ≠  <dig> -  <dig> = - <dig>  however, if there is a bi such that Δcbi =  <dig>  then the vertices of vbi will be in four cycles of bp. then the bi* exchanging the two swapped segments of bi has Δcbi* = - <dig> when it acts on bi·π, a contradiction. consequently, Δcbi ≤  <dig>    □

wgrp
for a sorting series s = ρ <dig>  ρ <dig>  ..., ρt transforming π into i, where ρi represents either a reversal or a block-interchange, let the number of reversals be dr and the number of block-interchanges be dbi. thus, the weighted sum of s is d = wr·dr + wbi·dbi. the distance dist is then the minimum d among all sorting series s of converting π to i. first, we set wbi =  <dig> and consider wgrp . lemma  <dig> gives a lower bound of dist in a more general case when  <dig> ≤ wbi.

lemma  <dig> dist ≥ n +  <dig> - c for wgrp with  <dig> ≤ wbi.

proof: since Δcr ≤  <dig> and Δcbi ≤  <dig>  an operation increasing the number of cycles by one costs at least , which equals  <dig> in the case of wr =  <dig> and  <dig> ≤ wbi. however, in the best situation, there are at least n +  <dig> -c cycles to be increased because of n +  <dig> cycles in bp. as a result, the cost of any transformation from π to i is at least n +  <dig> -c for wgrp with  <dig> ≤ wbi.   □

to deal with wgrp, lemma  <dig> shows that if the rearrangement sequences for sorting π are composed of reversals with Δcr =  <dig> and block-interchanges with Δcbi =  <dig>  the cost of such a sequence is equal to the lower bound of dist, and hence is optimal. the strategy for selecting best reversals and block-interchanges is the core of the algorithm proposed by lin et al.  <cit> . their algorithm distinguished between oriented and unoriented components, and then sorted them separately, i.e., used the algorithm of kaplan et al.  <cit>  to sort all oriented components and the algorithm of lin et al.  <cit>  to deal with the unoriented components. here we also utilize a known algorithm for sbr, called asbr, to tackle oriented components but we modify the method for sorting unoriented components using the following theorem.

theorem  <dig> let g =  and f =  be unoriented gray edges of a component. if g and f overlap, then there is a block-interchange with Δcbi =  <dig> in this component.

proof: wlog, we assume that i and l are even and j and k are odd with i <j <k <l . according to the number of cycles containing g and f, there are two main cases:

case1: g and f are in the same cycle. we further consider two subcases according to whether πi and πj are connected by a black edge:

 j = i +  <dig>  i.e., there is a black edge linking πi and πj . using the assumption of k < l, and that k is odd and l is even, there is no black edge between πk and πl. therefore, we use the three black edges, , , and  to determine the block-interchange bi. after performing it, the number of cycles is increased by two , i.e., Δcbi =  <dig> 

 j >i +  <dig>  let vbi = {πi, a, b, πj, c, πk, πl, d . there are no alternating paths from vertex a to c without passing a vertex in vbi\{a, c} since g and f are in the same cycle. consequently, one of the two cases of alternating paths linking vertices a, b, c, and d is demonstrated in figure 3b. in this case, let the block-interchange be bi and thus, in bp·π) the four vertices, a, b, c, and d, belong to one cycle.  we have c·π) = c +  <dig>  which implies that Δcbi =  <dig> 

case2: g and f are in two different cycles . recall that the order and positions of i, j, k, and l are fixed via the assumption. on the condition that g and f are parts of different cycles, πi and πj are never joined by a black edge. in addition, the vertex a connects to b  by an alternating path that will result in the subcase  of case <dig>  as a consequence, figure 3c is the unique possibility in this case, and performing the block-interchange bi leads to Δcbi =  <dig> -  <dig> =  <dig>    □

all gray edges are unoriented in unoriented components by definition, and furthermore, hp theory presents that for every gray edge g not in a 1-cycle, there is another gray edge f that overlaps with g  <cit> . in other words, it is always feasible to find two unoriented gray edges overlapping in unoriented components. by repeatedly applying the block-interchanges constructed in theorem  <dig>  all unoriented components are eventually sorted. we summarize the procedures as awgrp as follows:

algorithm for wgrp )

input: a signed permutation .

output: a sorting series composed of reversals and block-interchanges for optimally transforming  into .

1: transform  into its unsigned mapping π and construct bp;

2: use the algorithm developed by bader et al.  <cit>  to distinguish between oriented and unoriented components;

3: perform the algorithm of han  <cit>  to sort all oriented components;

4: repeatedly apply the block-interchanges constructed by theorem  <dig> to sort all unoriented components;

5: mimic the sorting series of π to i to the transformation between  and ;

in awgrp, step <dig> and step <dig> cost linear time, while step <dig> can be implemented in o time  <cit> . recently, feng and zhu  <cit>  developed a new data structure, called the permutation tree, to improve certain algorithms for sbt and sbbi, to achieve the time complexity o. this group used the permutation tree to implement two core procedures, query and transposition, which were developed by hartman and shamir  <cit>  on the breakpoint graph. the former is used to find a pair of black edges intersecting the given pair of black edges, and the latter is used to adjust the data structures after applying transpositions. although the term "intersecting" is defined on black edges  <cit> , it is indeed the same concept as "overlap" here, and thus, can be used to find two overlapping unoriented gray edges to piece together block-interchanges. moreover, since a block-interchange can be mimicked by two transpositions, a slight modification of the transposition procedure  <cit>  can be applied to retain the structures after performing block-interchanges. in short, the method of feng and zhu  <cit>  to enhance the algorithm of hartman and shamir  <cit>  can also be extended to cope with performing block-interchanges on unoriented components in step <dig>  for which we do not give a detailed description here. accordingly, step <dig> costs o time. the running time of step <dig> is o in a theoretical analysis  <cit> , which is currently the best, or o in most cases  <cit> , depending on which algorithm is used to address sbr. as a result, theoretically, the total time complexity of awgrp is o.

wgrp
in this subsection, we adjust the weight of block-interchanges to  <dig> < wbi <  <dig> and investigate wgrp. a lower bound of n +  <dig> c for dist is given in lemma  <dig>  and on the other hand, taking the parameters Δhr and Δhbi into account can establish another lower bound. let Δr = Δcr - Δhr and Δbi = Δcbi - Δhbi. we know that Δhr ≤  <dig> and Δr ≤  <dig> from the literature  <cit> , and subsequent work is required to obtain a lower bound of Δhbi for bounding Δbi.

let bi be a block-interchange and vbi be the set of vertices connected to the black edges of bi. if a hurdle h has no vertices of vbi in its interval ℐh, then after performing bi, ℐh still contains all vertices of h but no vertices in other unoriented components, i.e., h will be unchanged in bp. this provides that Δhbi ≥ -h, where h is the number of hurdles including vertices of vbi, since there are h hurdles whose intervals contain the elements in vbi and performing bi removes h hurdles at most. by using the bound for Δhbi, lemma  <dig> immediately derives an upper bound for Δbi.

lemma  <dig> for every permutation and block-interchange bi, Δbi ≤  <dig> 

proof: let ca be the number of cycles containing vertices of vbi after performing bi. clearly, c, ca ∈ { <dig>   <dig>   <dig>  4} and recall that ca - c = c - c ≤  <dig>  we prove this lemma by first considering the achievable situations of c =  <dig> and ca =  <dig>  lemma  <dig> demonstrates that the only possibility for ca =  <dig> is Δcbi =  <dig> -  <dig> =  <dig>  in which the two cycles including vertices of vbi belong to a component. consequently, Δhbi ≥ -h ≥ - <dig>  and then Δbi ≤  <dig> -  =  <dig>  using a similar argument, another case of c =  <dig> has Δcbi =  <dig> -  <dig> = - <dig> and h ≤ c, indicating that Δbi ≤ - <dig> -  =  <dig>  both cases satisfy this lemma.

next, consider that c, ca ∈ { <dig>   <dig>  3} is sufficient to show the remaining instances. in these cases, we have Δhbi ≥ -h ≥ -c, and thus Δbi ≤  - c) - ) = ca ≤  <dig>  this completes the proof.   □

next, from lemma  <dig>  we compute another lower bound for dist. hp proved that one must decrease distr = n +  <dig> -  - h - f) to  <dig> to complete the sorting process if only reversals are allowed, where f is the characteristic function for the existence of a fortress, i.e., f is  <dig> if π is a fortress and  <dig> otherwise. in addition, by using a similar argument as lemma  <dig>  since Δr ≤  <dig> and Δbi ≤  <dig>  an operation of increasing c - h by one costs at least min , which equals  when  <dig> < wbi <  <dig>  there are, however, at least n +  <dig> - c + h to be increased, leading to a lower bound for dist in the following lemma.

lemma  <dig> dist ≥   + h) for wgrp.

after obtaining two lower bounds of dist, we can evaluate the approximation ratios of two proposed algorithms, awgrp and asbr, as they are employed to solve wgrp, where asbr is an algorithm used to optimally solve sbr.

theorem  <dig> asbr is an approximation algorithm for wgrp with a ratio close to .

proof: the sorting series given by asbr comprises distr reversals and therefore, to be an approximation algorithm for wgrp, asbr has the factor close to   □

in theorem  <dig>  we bypass the effect of f for two reasons: first, the probability that a random signed permutation of size n contains a fortress is Θ, which is extremely rare  <cit> . second, hp illustrated the concept of fortress with a permutation π having distr =  <dig> +  <dig> -  <dig> +  <dig> +  <dig> =  <dig>  <cit> , which is, in fact, the minimal distr for a permutation being a fortress. in other words, for f  =  <dig>  the ratio is at most  when  <dig> <wbi <  <dig>  which is nearly .

theorem  <dig> awgrp is a -approximation algorithm for wgrp.

proof: for sorting a permutation π with only oriented components, hp presented that ϕ = b - c reversals are sufficient, where b is the number of black edges in π. more specifically, for sorting an oriented component , we need  reversals, in which b() ) is the number of black edges  in . similarly, if sorting a set  of oriented components, an asbr will produce  reversals, which is also the same in awgrp. when dealing with a set  of unoriented components, awgrp constructs  block-interchanges since each decreases  by two.

to convert π to i, awgrp outputs a sorting series with weight sum , and a lower bound of dist is ϕ = n +  <dig> - c by lemma  <dig>  as a result, awgrp is an approximation algorithm for solving wgrp with the factor given by   □

theorems  <dig> and  <dig> give the approximation ratios of asbr and awgrp, respectively, for approaching wgrp, where their ratios are both at most  <dig> . by always selecting the better result of awgrp and asbr, we receive a smaller ratio of , whose maximum is / <dig> ≈  <dig>  when the two terms coincide.

wgrp
in the sequel, we readjust the weight of block-interchanges to  <dig> ≤ wbi <  <dig> and examine wgrp. two lower bounds mentioned above,   + h) and ϕ, are not proper here since the former is too small and the latter is no longer correct. a concise way to obtain a feasible lower bound is to take all oriented components in π as unoriented ones. owing to the increase of at most two cycles by a block-interchange, a lower bound of dist for wgrp is .

with the bound, then we have the following theorem.

theorem  <dig> awgrp is a -approximation algorithm for wgrp.

proof: recall that awgrp produces a sorting series with ϕ() reversals and  block-interchanges. consequently, to be an approximation algorithm for wgrp, awgrp has the factor of   □

since reversals are main mutations from the evolutionary viewpoint, its weight is often no more than weights of other mutations. therefore, we focus on improving the algorithm to efficiently cope with wgrp.

we first observed the variation of the approximation ratio in theorem  <dig>  when wbi is close to  <dig>  the factor  approaches  <dig>  which is insufficient to be used in practice. there are two ways to approach this inefficiency. the first is to make the lower bound higher by considering the fact that block-interchanges do not remove oriented components, and thus, an oriented component has at least one reversal to sort it. however, this does not indicate that  is a new lower bound for k oriented components contained in π, since an operation may merge most of the oriented components into a single one. figure  <dig> is an example of this, and this type of operations may result in the overestimate of  becoming a lower bound. therefore, we slightly enhance the lower bound by considering that if there is a permutation π whose bp contains an oriented component, then , where the result of ϕ -  <dig> is caused by an optimal reversal.

next, we improve the algorithm by adding a new component. when  <dig> ≤ wbi <  <dig>  the block-interchange is superior to the reversal since the former decreases ϕ by at most two whereas the latter decreases it by at most one. therefore, a straightforward idea is to use optimal block-interchanges whenever possible. theorem  <dig> says that if two gray edges are unoriented and overlapping, then the corresponding block-interchange has Δcbi =  <dig>  which is true regardless of oriented or unoriented components. nevertheless, there may be no gray edges to satisfy the conditions of theorem  <dig> in oriented components. whenever there are no gray edges to form a block-interchange, we adapt a heuristic method to choose the oriented gray edge oge with maximum p = n - n, where n and n are the number of oriented and unoriented gray edges overlapping with oge, respectively.

let oge =  be an oriented gray edge, and roge be a reversal defined by two black edges linking πi and πj. then, we immediately know that i + j is even, and hence, both i and j are either even or odd. the reversal roge, irrespective of "even" or "odd" case, results in breaking a cycle into two smaller ones, i.e.,  =  <dig>  as demonstrated in figure  <dig>  notice that an oge can correspond to a reversal having Δcr =  <dig>  and it is false conversely, i.e., not all optimal reversals can map to oriented gray edges; take  =  and r as an example. besides, a reversal roge complements the gray edges overlapping with oge. in other words, after applying roge, oriented gray edges overlapping with oge become unoriented and vice versa. the heuristic used to compute p and select the maximum results from which we want to leave as many unoriented gray edges as possible after performing a reversal. then, the algorithm is summarized as follows:

approximation algorithm for wgrp )

input: a signed permutation .

output: a sorting series composed of reversals and block-interchanges for transforming  into .

1: transform  into its unsigned mapping π and construct bp;

2: while π is not sorted

3:   repeatedly apply block-interchanges if theorem  <dig> holds;

4:   compute p for each oriented gray edge oge;

5:   select the maximum p and perform the corresponding reversal;

6: end while;

7: mimic the sorting series of π to i to the transformation between  and ;

lemma  <dig> after o) steps, the algorithm aawgrp stops and returns a sorting series for converting to .

proof: let π be the unsigned mapping of . the block-interchanges used in step  <dig> and reversals in step  <dig> have Δcbi =  <dig> and Δcr =  <dig>  respectively. in other words, ϕ = n +  <dig> - c is strictly decreased after each applied operation. due to this fact, aawgrp terminates after performing at most ϕ operations.   □

now, let us examine the time complexity of aawgrp. step <dig> and step <dig> are mentioned in awgrp, and the two steps require o and o time, respectively. to find two unoriented overlapping gray edges, a linear cost to scan π is sufficient. applying a block-interchange also spends linear time, indicating that the running time to execute step <dig> once is o. the computation of p for an oriented gray edge oge can be done simply by visiting the vertices that lay on the interval of oge one by one, and then counting the number of oriented and unoriented gray edges overlapping with oge, which costs o time at most. furthermore, at most n computations for p implies that step <dig> can be done within o time. in step <dig>  an o-time cost is needed to select the maximum p and next perform a corresponding reversal. therefore, to apply a reversal, the time complexity is o. finally, aawgrp terminates after constructing at most ϕ operations, and consequently, it takes at most o time in the worst case.

comparing aawgrp with awgrp, the former is preferable to the latter when analyzing oriented components provided that  <dig> ≤ wbi <  <dig>  aawgrp seems feasible for producing a sorting scenario with a smaller sum of weights, but its performance in worst cases is the same as that of awgrp for solving wgrp. this is a consequence of certain specific permutations in which their weight sums conducted by both aawgrp and awgrp are far from the corresponding lower bounds. for example, if π has k oriented components, each with a 2-cycle only, in its bp, then both aawgrp and awgrp output k reversals; however, the lower bound is just  when wr = wbi =  <dig>  due to the existence of these challenging cases, the approximation ratio of aawgrp is identical to that of awgrp when they are used to analyze wgrp.

wgrp
wgrp can be easily solved by considering the fact that an arbitrary block-interchange can be mimicked by three specific reversals. for example, performing the block-interchange bi on  =  is the same as doing three reversals of r, r and r in turn on . in other words, as long as a rearrangement sequence consists of a block-interchange, it can be replaced by three corresponding reversals without increasing the weighted sum. as a result, an asbr is sufficient to optimally solve wgrp, and its best running-time to date is o  <cit> .

RESULTS
simulation
despite the appearance of difficult cases with aawgrp, it works well in the general situation, even very close to the lower bounds when wbi is near  <dig>  to assess its performance, we conducted several experiments with the sample data generated by applying αn operations on  = , where n ∈ { <dig>   <dig>  100} and α ∈ { <dig> ,  <dig> , ...,  <dig> , 1}. the rearrangement operations of either reversals or block-interchanges were selected randomly with equal probability, and each operation was specified at random by selecting two  or four  integers ranging from  <dig> to n. moreover, we examined 10n test cases and kept track of the mean for each pair of α and n.

at the beginning, we considered wgrp. then for the simulated data, we computed the corresponding lower bounds as well as the average weight sums of sorting sequences created by aawgrp. for comparison, the results of awgrp were also marked . the weight sums of four sources, created series, awgrp, aawgrp and lower bounds, increased with the number of applied operations, but at different rates. furthermore, in the first three diagrams of figure  <dig>  regardless of the size n or the number of applied operations on permutations, the two curves corresponding to aawgrp and the lower bound exhibited the same relative behavior, with only a small gap between them . this result indicates that aawgrp consistently produces a closer estimate of the exact dist for wgrp.

subsequently, in figure 6d, we fixed n =  <dig> and adjusted wbi =  <dig> ,  <dig> , and  <dig>  individually to investigate wgrp, wgrp, and wgrp, respectively. note that although three problems were included, we only plotted a curve to represent awgrp. in addition to simplifying the chart, there was hardly any difference among the reconstructed sequences of awgrp for the three problems. in other words, the vast majority of operations in the sorting sequences of awgrp were reversals, and hence, their weight sums for the three problems were virtually identical. this phenomenon is expected based on two facts: first, the probability that a component will be unoriented is the same as that of a hurdle, which is Θ on a random permutation of size n  <cit> . second, the strategy of awgrp to remove oriented components is to use an asbr to generate reversals. as a result, the components of the generated permutations are generally oriented, and the sorting sequences of awgrp consist mostly of reversals.

notwithstanding awgrp was shown to be a factor  <dig> approximation algorithm for wgrp by theorem  <dig>  it is indeed infeasible in our experiments. the performance of awgrp is gradually improved as wbi moves towards  <dig> . in contrast, aawgrp improves dramatically when  <dig> ≤ wbi <  <dig>  figure 6d suggests that the performance of aawgrp is superior to that of awgrp in such cases. even in our simulation of wbi =  <dig> , two curves of aawgrp and the lower bound were almost the same .

contribution
a large body of work has been devoted to genome rearrangement problems to study the evolutionary changes in the macrostructure of individual chromosomes according to the parsimonious principle. here, we investigated the weighted genome rearrangement problem by considering reversals and block-interchanges simultaneously with various weight assignments, i.e., wgrp. our objective was to find a rearrangement series composed of reversals and block-interchanges for converting  to , as well as the most parsimonious series, that is, the minimum weight sum. we began studying the algorithm wgrp by setting wr=  <dig> and wbi =  <dig>  and then developed awgrp to optimally solve it. the idea used in awgrp is similar to that of lin et al.  <cit>  but differs when coping with unoriented components. we also provided a rigorous proof to show the correctness of awgrp.

furthermore, we adjusted the weight of block-interchanges so that  <dig> <wbi <  <dig> to study wgrp. two algorithms asbr and awgrp were employed as approximation algorithms, whose ratios were given by theorems  <dig> and  <dig>  respectively. the approximation ratio of asbr is , and hence it decreases if wbi is close to 3; however, the ratio of awgrp , which decreases when wbi is near  <dig>  even if both factors are at most  <dig>  for  <dig> <wbi <  <dig>  their behaviors are completely opposite. consequently, we obtained a better result by always selecting the best output of the two algorithms to acquire a smaller approximation ratio around  <dig> .

later, the weight of block-interchanges is again varied to fit wgrp. to address this problem, we first showed that awgrp is a -approximation algorithm. nevertheless, the factor becomes larger as wbi moves towards  <dig>  from our experimental results on wgrp , most of the weighted sums of sorting sequences provided by awgrp were more aggravated than the weighted sums of created sequences. therefore, we improved it with aawgrp by adding a new component for selecting operations. our idea was to choose as many best block-interchanges as possible, and determine plausible candidates for the best reversals once no best block-interchanges were available. as a heuristic, aawgrp does not have a smaller approximation ratio than awgrp.

consequently, we conducted several experiments to evaluate its performance and illustrated the results in figure  <dig>  our result indicated that, although the theoretical approximation ratio of aawgrp trends towards  <dig> if wbi is close to  <dig>  its average performance is significantly improved. table  <dig> further summarizes our current and previous results for solving wgrp.

CONCLUSIONS
in this work, we present several approaches to examine genome rearrangement problems by considering reversals and block-interchanges together under various weight assignments. provided that the weight of reversals is no more than that of block-interchanges, our algorithm reports an acceptable solution with theoretical guarantees and experimental evidences. our results are promising, and these approaches should be used as an initial step for considering the two operations simultaneously. future research must focus on improving both the approximation ratios and running times of these algorithms.

authors' contributions
ycl conceived the research, implemented the program and wrote the manuscript. cyl provided comments and discussion, and also assisted in revising the paper. crl helped to draft and revise the manuscript. all authors read and approved the final manuscript.

