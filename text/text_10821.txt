BACKGROUND
cancer, at its most basic, is caused by the accrual of somatic mutations within oncogenes and tumor suppressors in the genome  <cit> . while mutations within tumor suppressors usually lower or completely disrupt the activity of genes that promote cell apoptosis or regulate the cell cycle, oncogenic mutations typically increase or destabilize the resulting protein output. as it is easier to disrupt protein function than restore it, there has been significant pharmacological research geared towards inhibiting oncogenic mutations as described in  <cit>  and  <cit> . coupled with the idea of “oncogene addiction”, that a small set of “driver” genes promote uncontrolled cellular growth in a wide variety of cancers and that inactivation of these genes can significantly impair tumorigenesis  <cit> , the identification of driver oncogenic mutations has become of key importance due to its potential translational benefit.

due to the biological importance of this problem, a variety of methodologies have been proposed to identify regions where activating mutations may occur. one approach is based on the idea that compared to the background mutation rate, driver mutations will have a higher frequency of non-synonymous mutations  <cit> . several improvements to this approach have been made such as normalizing for gene length  <cit>  as well as accounting for different mutation rates due to features such as transitions versus transversions, location of cpg sites and tumor type  <cit> . relatedly, instead of comparing the mutational frequency directly to the background rate, one can also compare the ratio of nonsynonymous  to synonymous  mutations per site  <cit> . recently,  <cit>  and  <cit>  showed that somatic mutations appear to cluster within protein kinases while  <cit>  and  <cit>  demonstrated that mutational clustering can be a sign of positive selection for protein function and thus sites for protein engineering.

alternatively, several machine learning methods have been developed to determine the nature of a specific mutation. for instance, polyphen- <dig> <cit>  attempts to discern whether a mutation is deleterious while chasm <cit>  attempts to distinguish between driver and passenger mutations. these methods use a wide range of sequence and non-sequence features to build a set of rules that are then used to score each mutation with the score value determining the mutation classification. the rules are developed on a training data set via a variety of methods such as random forests  <cit> , bayesian networks  <cit>  and support vector machines  <cit> . the features used often include information on the size and polarity of the substituted and original residues, available structural information as well as evolutionary conservation  <cit> . some classifiers are optimized to use only a small set of features in prediction. for example, the sift classifier  <cit> , only uses evolutionary conservation to predict whether the protein functional change is tolerated or damaging.

while all these methods have shown some success in identifying damaging or deleterious mutations, they nevertheless have limitations. methods that rely upon differentiating the frequency of synonymous and non-synonymous mutations as compared to the background rate may fail to take into account that selection may occur upon only a small region of the gene and that signal loss may occur when the gene is considered in total. the methodologies proposed by  <cit>  and  <cit>  fail to distinguish between activating and non-activating non-synonymous mutations while the method developed by  <cit>  may be biased if the background mutational rate is not accurately estimated. furthermore, not only do machine learning classifiers require several sources of information that need to be periodically updated to account for new research, it is often the case that much of the requisite information needs to be collected for the first time at significant expense.

building upon the hypothesis that driver mutations tend to cluster in functionally relevant protein regions,  <cit>  and  <cit>  recently developed several statistical methodologies to identify mutational clusters. specifically,  <cit>  developed non-random mutational clustering  which identifies clustering by testing against the null hypothesis that missense substitution locations are distributed uniformly. if two mutations are closer together than expected by chance, the null hypothesis that every amino acid has an equal probability of mutation is thus rejected. however, as the distance between every pair of mutations needs to be tested, a large multiple comparison penalty is incurred. ipac <cit>  and graphpac <cit>  expanded upon nmc by taking into account protein tertiary structure via a multidimensional scaling approach   <cit>  and a graph theoretical approach, respectively. while both of these methods improved over the linear nmc method, they nevertheless remap the protein to one dimensional space resulting in information loss.

in this article, we provide an improvement to ipac, graphpac and nmc by considering the protein directly in three dimensional space and thereby avoid the information loss inherent in dimension reduction algorithms. using this new approach, we are able to identify proteins with significant clusters, such as fgfr <dig> and chrm <dig>  which are otherwise missed by ipac, graphpac and nmc . in addition, spacepac provides better “localization” for mutational hotspots . finally, we show that many of the mutational hotspots identified by spacepac are categorized as activating mutations by chasm and damaging mutations by polyphen- <dig>  overall, by avoiding the protein remapping step required by ipac and graphpac as well as the multiple comparison penalty these methods incur for looking at every pairwise combination of mutations, we are better able to identify mutational hotspots that are indicative of driver mutations. for the rest of this paper, we refer to the set of nmc, graphpac, and ipac as the “pairwise methods” as they consider every pairwise combination at the cost of an extra multiple comparison adjustment.

methods
spacepac uses a three step process to identify mutational clusters. step one is to obtain the mutational and structural data . step two is to reconcile the databases so that the mutational information can be mapped onto the protein structure . the third step is to simulate the distribution of mutation locations over the protein tertiary structure and identify if any regions of the protein have observed mutational counts in the tail of the distribution . finally, although not part of the spacepac algorithm, we perform a multiple comparison adjustment to account for the multiple structures considered .

obtaining mutational data
the 65th oracle version of the cosmic database, the latest version as of when this paper was written, was used to obtain the mutation data. first, only missense substitution mutations recorded as “confirmed somatic variant” or “reported in another cancer sample as somatic” were used. further as both spacepac and the pairwise methods are tested against the null hypothesis that mutations are randomly distributed along the protein, only mutations from whole gene or whole genome screens were retained in order to avoid selection bias. next, only genes labeled with a uniprot accession number  <cit>  were kept as the uniprot identification was used to match the protein sequence to the protein structure. finally, as several studies may report mutational data from a single cell line, mutation duplications were removed in order to avoid over counting specific mutations . mutations are then aggregated from various sources  to help provide a complete mutational distribution for the protein during the analysis described in section “algorithm for identifying sphere positions”.

obtaining 3d structural data
protein structures were obtained from the pdb. the spatial coordinates of the α-carbon atom in each amino acid were used to represent that amino acid’s location in 3d space. further, as multiple structures are often available for the same protein, all structures that matched the protein’s uniprot accession number were analyzed and an appropriate multiple comparison adjustment applied afterwards . if multiple polypeptide chains within the same structure matched the uniprot accession number, the first matching chain shown in the file was used . similarly, if the structure determination provided more than one protein conformation, the first conformation listed in the pdb file was kept. we note that while we only used the first conformation displayed in the file, as done by  <cit>  and  <cit> , the spacepac software allows the user to select the desired conformation should an analysis of more than one alternative conformation be required. for a full listing of the  <dig>  structure/side-chain combinations considered, see “additional file 2: structure files”.

reconciling structural and mutational data
as the residue numbering scheme often differs between the cosmic and pdb databases, we reconciled the information in both sources. similar to ipac and graphpac, spacepac provides the user two possible reconciliation options. the first option is based upon a numerical reconstruction from the structural data available directly in the pdb file while the second performs a pairwise alignment as detailed in  <cit> . as the pdb file structure may change depending upon when the file was added to the database along with other technical difficulties, we used pairwise alignment to reconcile the mutational and positional information for each structure unless specifically noted. for further information on the pairwise alignmnent, please see the ipac package available on bioconductor. successful alignment was obtained for  <dig> proteins corresponding to  <dig>  individual structure/side-chain combinations. note that structures that did not have tertiary data on at least two mutations were considered blank  and dropped from the analysis. see “additional file 2: structure files” for full details of each combination.

identifying mutational hotspots
the general principle for spacepac is that we identify the one, two and three non-overlapping spheres that cover as many of the mutations as possible at various radii lengths. we then normalize the number of mutations covered by the spheres and find the maximum normalized value. this value is then compared to a simulated distribution to obtain a p-value. specifically, we proceed as follows: 

• let s be the number of spheres we consider. s∈{ <dig> ,3}.

• let r be the radius considered. here we consider, r∈{ <dig> , <dig> , <dig> , <dig> , <dig> }.

• simulate t distributions of mutation locations over the protein structure. specifically, for each simulation, every mutation is randomly assigned to a residue i where 1≤i≤n and n is the total number of residues in the protein.

next, let x <dig> s,r represent the number of mutations that occur within the s spheres over all samples. for instance, suppose we had three tumor samples, a, b and c, and were considering two spheres. further, suppose that sample a had mutations at residues  <dig> and  <dig>  sample b had mutations at residues  <dig> and  <dig>  and sample c had only one mutation at residue  <dig>  thus, if sphere one overlapped residues  <dig> and  <dig> while sphere two overlapped residues  <dig>   <dig>  then x <dig> ,r= <dig>  specifically, there are  <dig> mutations from samples a, b, c within the first sphere and  <dig> mutations within the second sphere.

given, s we then identify the sphere centers in such a way that capture as many of the total mutations as possible . for instance, if s= <dig>  we then need to identify three sphere centers, p <dig> p <dig> and p <dig>  let xi,s,r represent the same statistic but for simulation i. for given {s,r}, calculate μs,r=mean1≤i≤t{xi,s,r} and σs,r=std. dev.1≤i≤t{xi,s,r}. for each simulation, calculate zi= maxi{/σs,r}. the p-value is then estimated as: /t. note that while we identify up to three spheres  that contain mutational clustering, only one p-value is necessary to reflect the statistical significance of all the hotspots. this process is best seen through figure  <dig>  for the rest of this paper, we will refer to “hotspot” and “cluster” interchangeably.

while our algorithm is generalizable to m spheres , we note that the worst case running time is onm. due to the nature in which we traverse the sample space of possible sphere orientations , we rarely hit the worst case scenario, and even then, in the case of three spheres the running time is only on <dig> which is still computationally possible. further, our algorithm was able to identify only  <dig> or  <dig> significant spheres for over 70% of the structures considered. even more so, for the structures that did have  <dig> statistically significant spheres , the three spheres covered on average more than 75% of all the mutations available. given these empirical results, three spheres were selected to balance computational costs.

while sphere radii ranging from  <dig> to 10Å were considered in this study, the researcher can input larger values. however, over all the structures evaluated in this study, our methodology never required spheres of radius 10Å. optimal sphere orientations were always found at smaller radii. thus while larger sphere radii could of been considered, they would not have been selected by the algorithm.

finally, due to our consideration of only non-overlapping spheres, additional constraints on the number of possible sphere orientations are placed which allows spacepac to efficiently solve for the optimal sphere orientation. for example, if two nearby residues are mutated, spacepac will incorporate them into a larger sphere and then use the remaining spheres to identify more distant clusters. if sphere overlap was permitted, not only would it become difficult to assign a mutation to a specific sphere but it could also lead to uninformative results. for instance, consider a worst case scenario where one residue has very many mutations and two spheres are being used to find the mutational hotspots. if the rest of the protein has no mutations, the two spheres will perfectly overlap which would in turn provide a meaningless result. if the mutations were spread over two nearby residues, the sphere overlap would again be almost perfect and not informative. by using the non-overlapping sphere constraint, spacepac will dynamically increase the sphere radius and capture the mutations in one sphere. on the whole, by considering only non-overlapping spheres we impose boundary constraints in order to find meaningful sphere configurations.

algorithm for identifying sphere positions
in the approach described in section “identifying mutational hotspots”, we find the  <dig>   <dig> and  <dig> non-overlapping spheres that cover the most mutations given a pre-specified radius length. ignoring sphere overlap for the moment, if only one sphere is considered, the number of possible spheres is linear in the length of the protein . if two spheres are considered, there are n <dig> possible sphere combinations if the protein is n residues long. similarly, if three spheres are considered, there are n <dig> such combinations . for a medium-sized protein like pik3c α which is  <dig>  residues long, considering three spheres allows for  <dig> = <dig> , <dig> possible positions. this makes it prohibitively expensive to perform a brute force approach. to quickly find the best sphere orientation, we execute algorithm ?? below. algorithm ?? is presented for  <dig> spheres but is trivially extendable to  <dig> or more spheres as well.   

to help illustrate this algorithm, consider a protein n residues long with five mutated amino acid positions and suppose that we are interested in finding the two spheres that capture the most mutations. without loss of generality and for ease of exposition, number the mutated residues  <dig> through  <dig>  further, suppose that after aggregating all the mutational counts from all samples the following mutational counts are recorded: residue  <dig> -  <dig> mutations, residue  <dig> -  <dig> mutations, residue  <dig> -  <dig> mutations, residue  <dig> -  <dig> mutations and residue  <dig> -  <dig> mutations. for clarity, we assume that the mutation counts are unique, but the algorithm is unaffected if there are identical mutation counts for some residues. we first construct the table shown in figure  <dig>  where the inside of the matrix is calculated to be the sum of the number of mutations at amino acid i and amino acid j. observing, that the table is symmetric, we only need to evaluate the residues below the diagonal as the entries on the diagonal originate from residues that overlap each other perfectly. thus for entry  we are considering two spheres, one centered at residue i and one centered at residue j.

the algorithm proceeds by appending to the “candidate” stack the element directly below and the element directly to the right starting from the  entry. an “element” consists of a 3-tuple  where i represents the row, j represents the column and s represents the value in position . after every two potential appends to the stack, the maximum value over the 3rd position is found . the two spheres that contribute to this max element are then checked for overlap. if the spheres do not overlap, then a successful case has been found and the algorithm completes. if the spheres do overlap, the next set of elements are appended and the process continues. by proceeding in the way described in algorithm ??, at each iteration, the pair of spheres being considered contains the maximum number of mutations possible from the remaining set of sphere combinations. hence, once the first pair of non-overlapping spheres is found, the optimal sphere combination has been found and the algorithm can terminate. to see this process, see figure  <dig> 

it is worth noting, that by proceeding as presented above, we are able to traverse the space of possible solutions in a manner that does not require every combination to be explicitly considered and yet at the same time results in a globally optimal solution. at each step, every subsequent combination of spheres will capture fewer mutations . as soon as the first combination of non-overlapping spheres is found, it is immediately known that all the other remaining sphere combinations will capture fewer mutations. therefore, there is no longer any need to explicitly consider them. in the worst-case scenario , spacepac will still need to consider all n <dig> combinations, just as the brute force method. however, by leveraging the fact that at small enough radii the algorithm quickly identifies a case where the spheres do not overlap, the worst-case scenario almost never occurs and the running time is drastically reduced.

multiple comparison adjustment for structures
a multiple comparison adjustment was performed to account for testing  <dig>  protein structures. since many structures may pertain to one protein, a bonferroni adjustment is too conservative and an fdr approach was used. specifically, a rough fdr   <cit>  approach, which is a good approximation to the standard fdr approach  <cit>  when there are a large number of positively correlated or independent tests, was applied. in our case, the cutoff is set at: 

 rfdr=αk+12k 

 where k= <dig> , the total number of structures in the study. using an α= <dig> , the rfdr≈ <dig> . to be conservative, we rounded down and deemed all clusters with a p-value less than or equal to  <dig>  to be significant.

RESULTS
of the  <dig> proteins considered, spacepac identified  <dig> proteins with significant clustering as shown in table  <dig>  for a full list of which structures were found significant under spacepac, graphpac and nmc, see “additional file 3: results summary”. we note that while table  <dig> shows the p-values for the  <dig> proteins found significant by spacepac, there were  <dig> proteins that were found significant only by graphpac,  <dig> protein only by ipac and  <dig> protein only by nmc . however, we also note that spacepac identified the largest number of proteins with significant clustering at the same false positive thresholda. we further note that several of the proteins identified only by spacepac have already been associated with cancer as shown in section “spacepac identifies additional proteins containing clusters”. furthermore, as shown in figure  <dig>   <dig> out of the  <dig> proteins identified by spacepac have their most significant hotspot overlap a biologically relevant region and three of the remaining four proteins  have been implicated with cancer. for a full description regarding the overlap between spacepac identified hotspots and structurally significant regions, see “additional file 5: relevant sites”.

this table shows the p-value of the most significant cluster for each of the  <dig> proteins identified by spacepac as well as the corresponding p-value under ipac, graphpac and nmc. a blank entry in position  signifies that methodology j did not find any structures with significant clustering for protein i. note that given ni total mutations for protein i, the pairwise methodologies perform ni <dig> comparisons, one for each pair of mutations. as such, the p-values shown for ipac, graphpac and nmc have been multiplied by ni <dig> in order to account for the multiple comparison and provide a number directly comparable to the spacepac p-value. also, while the graphpac methodology was run under all three insertion methods  as described by  <cit> , we display the minimum p-value over the three methods. note that since  <dig> simulations were used for spacepac, the most significant result we can report is p< <dig> e− <dig>  please see figure  <dig> for further explanation.

specifically, for ctnnb <dig>  the spacepac identified hotspot covers mutations g34r and g34v, which are associated with hepatocellular carcinoma and hepatoblastoma  <cit> , respectively. further, fshr has been shown to be expressed in the vascular endothelial tissue of a wide range of human tumors including lung, breast, prostate, colon and leiomyosarcoma  <cit> . for more detail on fgfr <dig>  see section “spacepac identifies additional proteins containing clusters”.

finally, we evaluated spacepac performance via two common machine learning methods, polyphen- <dig> <cit>  and chasm <cit> . before we summarize the results, we note that polyphen- <dig> and chasm utilize a large set of features when evaluating each mutation. the advantage of spacepac is that it is able to be run with vastly less a priori information. out of the  <dig> mutated amino acids that fall within spacepac identified hotspots, polyphen- <dig> identifies  <dig>  as damaging while chasm identifies  <dig>  as driver mutations at a fdr of 20%. on the protein level, polyphen- <dig> identifies all the  <dig> proteins identified by spacepac as significant while chasm identifies  <dig> proteins as significant. moreover, spacepac identifies several proteins with significant clustering that are missed by the machine learning methods. for instance, spacepac identifies fshr as significant, which, as described above, has recently been associated with cancer. however, chasm calculates a fdr of  <dig>  for fshr, which is above the significance threshold. see “additional file 6: performance evaluation” for more information.

spacepac identifies additional proteins containing clusters
as described in section “results and discussion”, spacepac identified three proteins with significant clustering that were missed by nmc, ipac and graphpac. we will now consider two of these proteins, fibroblast growth factor receptor  <dig> , and muscarinic acetylcholine receptor m <dig> .

the chrm <dig> structure   <cit>  was identified by spacepac as having two significant mutational hotspots  located at residues  <dig> and  <dig> . chrm <dig>  essential for the physiological regulation of cardiovascular function  <cit>  has been implicated in a variety of cardiovascular diseases. recently, chrm <dig> has also been associated with both autoimmune diseases and cancer  <cit> . current research shows that m <dig> receptors are expressed in both glioblastoma cell lines and human samples. moreover, the m <dig> agonist arecaidine strongly decreases cell proliferation in both primary cultures and cell lines in a dose and time dependent response profile. this suggests that m <dig> activation has an important role in suppressing glioma cell proliferation and can provide a novel therapeutic target  <cit> . had the spatial structure not been taken into account, as under nmc, or if the structure was accounted for but only via remapping to 1d space followed by a pairwise multiple comparison adjustment, as under ipac and graphpac, this cluster would have been missed.

spacepac identified the fgfr <dig> structure   <cit>  as having one significant hotspot  centered at amino acid  <dig> . fgfr <dig> is a tyrosine-protein kinase which plays a critical role in regulating cell differentiation, proliferation and apoptosis and is often associated with cancer and developmental disorders  <cit> . mutation r248c occurs in the ig-like domain and is a severe and lethal mutation associated with bladder cancer  <cit>  along with a variety of other phenotypes such as thanatophoric dwarfism  <cit>  and epidermal nevi  <cit> . this cluster represents a perfect example of signal loss when all pairwise mutations are considered. in the case of our data, as all the mutations occur on one residue, a cluster is formed at that one residue only. there is therefore no difference between any of the pairwise methods as the remapping step has no effect. however, since ipac, graphpac and nmc need to account for all pairwise comparisons between mutations , the signal is lost under all three methods. on the other hand, as spacepac does not need to perform such a correction, it is successfully able to detect the cluster. moreover, we note that  <cit>  recently developed an anti-fgfr <dig> monoclonal antibody that interferes with fgfr <dig> binding and inhibits r248c  <cit> .

spacepac improves cluster localization
for protein-structure combinations in which mutational clusters are detected by other methods, spacepac is often able to provide a smaller set of clusters compared to the pairwise methods while still covering the majority of mutations. to illustrate this point we consider two examples, the braf structure   <cit>  where spacepac identifies  <dig> mutational hotspots and the alk structure   <cit>  where spacepac identifies  <dig> mutational hotspots.

braf is a well known oncogene that is part of the ras-raf-mek-erk-map kinase pathway which is often activated in human tumors. further, it is estimated that approximately 90% of mutations in this gene are a substitution of a glutamate for a valine at residue  <dig>   <cit> . in our mutational data,  <dig>  mutations were on residue  <dig> with the remaining  <dig> mutations spread over  <dig> other residues. mutations on v <dig> typically result in constitutively elevated kinase activity and have been found in a wide range of cancers such as metastatic melanoma, ovarian carcinoma and colorectal carcinoma  <cit> . due to the large number of v <dig> mutations, spacepac and all the pairwise methods identified residue  <dig> as the most significant “cluster” in all structures where tertiary information was available for that residue. it is worth noting that braf v <dig> inhibitors, such as vemurafenib, have already been developed, further supporting the hypothesis that mutational clusters may represent pharmaceutical targets  <cit> .

as the signal presented by v <dig> is so strong, it may mask the signal from other mutations within the braf protein. as such, we considered structure 3q <dig> which does not have tertiary information for residues  <dig> and  <dig>  of the remaining  <dig> mutations spread over  <dig> residues, spacepac identifies three hot spots with 7- <dig> mutations per cluster as shown in table  <dig> . moreover, each of the three regions identified have been associated with oncogenic elevated kinase activity as well as a variety of cancers such as lung adenocarcinoma, melanoma, colorectal adenocarcinoma and ovarian serous carcinoma  <cit> . see figure  <dig> for a visual orientation of the clusters presented in table  <dig> 

the three hot spots identified by spacepac for the braf structure  at an optimal radius of 4Å. see figure  <dig> for a visual orientation.

together, the three hot spots identified by spacepac cover 79% of the mutations for which tertiary information is available. moreoever, while nmc, ipac and the three graphpac methods report approximately  <dig> to  <dig> times as many clusters as spacepac , the additional clusters only cover the remaining 21% of mutations. finally, all the residues that do not fall within spacepac hot spots are those which have only one mutation. these additional clusters stem from the fact that nmc, ipac and graphpac must consider every pairwise combination of mutations resulting in many clusters that only differ from each other by a few residues. further, by considering every pairwise combination, many smaller clusters are often combined into larger clusters with a less significant p-value. while technically still a “significant” cluster, these extra clusters provide little additional information. as spacepac does not have to consider every combination, it does not suffer from this issue.

the number of clusters found under each method. as spacepac does not need to consider every pairwise combination of mutations, the method provides a much smaller number of potential hotspots while still covering the majority of mutations.

we now consider the anaplastic lymphoma kinase  protein for which spacepac identifies two mutational hotspots  . the alk protein is a receptor-type tyrosine kinase that is preferentially expressed in neurons during the late embryonic stages  <cit> . mutations in this protein have been associated with both neuroblastoma as well as non-small cell lung cancer  <cit> . hotspots a and b in table  <dig> both occur in the protein kinase. further, mutations on f <dig> and r <dig> can cause constitutive activation which impairs receptor trafficking  <cit> . we note that spacepac perfectly identifies both hotspot locations. moreover, it has recently been shown that activating mutations f1174l and r1275q provide therapeutic targets in neuroblastoma  <cit> , supporting the hypothesis that mutational clusters are indicative of activating mutations. see figure  <dig> for a visual orientation of the clusters presented in table  <dig> 

the two hot spots identified by spacepac as significant for the alk structure   <cit>  at an optimal radius of 4Å. see figure  <dig> for a visual orientation.

the two hotspots identified by spacepac cover  <dig> % of all the mutations in our data with the remaining mutations occurring on residues with only one mutation each. further, as seen in table  <dig>  the pairwise methods have  <dig> to  <dig>  times as many clusters as spacepac. as before, by not having to consider every pairwise combination and thus not reporting similar clusters, spacepac is able to better localize the critical mutational areas.

CONCLUSIONS
in this article we provide a novel algorithm to account for protein tertiary structure when identifying mutational clusters in proteins. by considering the protein structure directly in 3d space, we avoid the use of a dimension reduction algorithm and potential information loss. further, by not considering every pair of mutations, we are able to reduce the multiple comparison penalty and identify additional clusters. we show several examples of clusters that are not identified by alternative methods as well as the ability to improve cluster localization while still covering the majority of mutations. moreover, several of our examples identified clusters which overlap potential therapeutic targets, supporting the hypothesis that clusters may be indicative of activating driver mutations. finally, since the spacepac methodology does not need to look at every pairwise combination of mutations it also runs much faster for proteins with many  mutations. in these situations, while the pairwise methods may take several days to complete, spacepac still finishes in a matter of hours. for proteins with fewer mutations, the running time of all the pairwise methods as well as spacepac is comparable, with the majority of protein/structure combinations terminating in under  <dig> minutes when executed on a consumer desktop with an intel i7-2600k processor  and  <dig> gb of ddr <dig> ram.

spacepac, while presenting an important alternative to the one dimensionality restriction required by ipac and graphpac, is nonetheless subject to several limitations. first, spacepac is currently limited to at most three mutational hotspots to save on computational time. while it is unlikely that a single structure will have more than three hotspots, the extension to allow spacepac to account for more than three hotspots is algorithmically simple. as spacepac was able to process our entire database of protein/structure combinations in under  <dig> hours , this restriction is minimal and will only grow smaller as computational power increases.

second, to satisfy the uniformity assumption, the mutational status of each amino acid must be known. however, due to improvements in high-throughput sequencing, this is rapidly becoming a non-issue. next, unequal rates of mutagenesis in specific genomic regions may violate the assumption that each residue has an equal probability of mutation. to help ensure that our data met this statistical assumption, we only considered missense mutations as many insertion and deletion mutations are sequence dependent. relatedly, while the literature shows that cpg dinucleotides often have a mutational rate ten times or higher when compared to other locations  <cit> , approximately only 14% of the clusters presented in section “spacepac identifies additional proteins containing clusters” and “spacepac improves cluster localization” overlapped cpg sites. similarly, cigarette use typically causes transversion mutations within lung carcinomas  <cit>  while colorectal carcinomas result in transition mutations  <cit> . in the case of kras however, the vast majority of mutations are located on residues  <dig>   <dig> and  <dig> for both cancers. this signifies that while the mutational type may differ, the impact on mutation location is minimal and does not violate the uniformity assumption. we also note that while we used a uniform mutational distribution for our simulations , this is not a requirement of the overall approach. prior knowledge of varying mutation rates can be integrated into the simulation step described in section “identifying mutational hotspots”. this would allow for increased accuracy when identifying clusters by potentially increasing both the specificity and sensitivity of the statistic. further research is required in this area to realize the full benefit of such an approach. lastly, it is worth noting that as we obtained our mutational data from the cosmic database, specific tissue types may be more represented than others. however, under this situation our analysis would be more conservative and the resulting findings even more significant. specifically, aggregating over all tissues increases the total number of mutations, thus increasing the number of simulated mutations within any given segment of the protein. the resulting p-value of any observed hotspot would lose significance as more mutations would be simulated within the cluster. overall, while this as well as previous studies are impacted by several external factors, it appears that selection of the cancer phenotype is the primary cause of clustering.

in conclusion, spacepac presents a novel approach to account for protein tertiary structure when identifying mutational hotspots. we show that spacepac identifies novel clusters of biological relevance, improves cluster localization and in several cases identifies pharmaceutical targets for which therapies are already in production. in turn, we further confirm the hypothesis that mutational hotspots are indicative of driver mutations and show that spacepac can be used to quickly locate such potential mutations as additional structures are published. several novel areas for further research are directly applicable as well. first, while the algorithm developed here uses up to three spheres, the methodology can be expanded to use more spheres when identifying clustering. further, the approach proposed here is not limited to identifying human mutational clusters in proteins, but can be extended to other species as well as dna and rna, once the requisite positional information is available.

endnote
a the graphpac algorithm was run using each of the three insertion methods described in  <cit> . while the methodology is the same, the nature of the algorithm leads to different results when different insertion methods are considered. spacepac outperformed graphpac in comparison to each of the individual insertion methods.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
gr, rb, dz and hz developed the spacepac methodology. kc and yc were responsible for obtaining the mutation data from the cosmic database. gr and yc executed the methodology on the protein structures. gr drafted the original manuscript while kc, yc, ym, dz and hz were responsible for revisions. hz finalized the manuscript. all authors have read and approved the final text.

supplementary material
additional file 1
cosmic query. shows the sql query used to extract mutations from the cosmic database.

click here for file

 additional file 2
structure files. a list of which protein-structure-chain combinations were considered for the study.

click here for file

 additional file 3
results summary. shows the significant structures and their p-values under the ipac, spacepac, nmc and graphpac methodologies.

click here for file

 additional file 4
results table. a summary of which proteins were identified as significant under spacepac and each of the pairwise methods.

click here for file

 additional file 5
relevant sites. a description of which of the spacepac hotspots fall within structurally relevant regions.

click here for file

 additional file 6
performance evaluation. in-depth analysis of the spacepac hotspots when evaluated using polyphen- <dig> and chasm.

click here for file

 acknowledgements
this work was supported in part by nsf grant dms  <dig> , nih grants gm <dig> and ca <dig> , and gm <dig> .
