BACKGROUND
the bacterium staphylococcus aureus secretes α-hemolysin monomers that bind to the outer membrane of susceptible cells. seven monomers can oligomerize to form a very stable water-filled transmembrane channel  <cit> . the channel can cause death to the target cell by rapidly discharging vital molecules  and disturbing the membrane potential.

suspended in lipid bilayer, as shown in figure  <dig>  the α-hemolysin channel can be used as a sensor  when large molecules interact with the channel environment under an applied potential . when a  <dig> bp dna hairpin enters the pore, the loop is caught at the vestibule mouth, leaving the stem terminus perched to readily bind to the amino acid residues near the limiting aperture, resulting in a consistent toggle for thousands of milliseconds as shown in figure  <dig> 

many approaches to characterizing of nucleic acid analyte – channel interactions use 2-d scatter plot analysis  <cit> . a recently proposed method of discriminating translocating rna polynucleotide orientation  <cit>  uses a combination of six sigmoid phenomenological functional forms to approximate possible blockades. a hybrid method of automated analyte classification was used in  <cit>  that discriminates among 8gc, 9gc, 9cg, 9ta and 9at molecules by first obtaining features extracted with expectation maximization  learning on a single 50-state fully connected hidden markov model . they then construct a feature vector based on the hmm parameters and pass that to a support vector machine  for classification . although the process shown in fig.  <dig> is scalable, and has high classification accuracy, it can also involve high data rejection rates . this motivates effort to have a less scalable, but lower data-rejection rate . later study of the data examined in  <cit> , with pca reduction on states followed by a simple, uninformed, adaboost classification , led to similar improvement on zero-rejection accuracy, and thus similar improvements  on the data-rejection needed for high-accuracy classification  <cit> . that approach, however, didn't begin with the stronger  feature extraction method described here. this is the first test of what is expected to be a highly accurate feature extraction method , where the critical limitation in general use, however, is in its scalability in number of classes to discriminate.

in an interview , one of the pioneers in the development of nanopore technology, dr. mark akeson, states that getting a machine to learn base pair or nucleotide signatures and report the results automatically will be a key feature of a nanopore sequencing instrument. here we propose a new method of unsupervised learning of ionic flow blockades with mixture of hidden markov models  profiles that has a number of attractive attributes, at the expense of restricting learning to a smaller state space. for genome sequencing, the problem reduces to identifying the classes {a, c, g, t}, i.e., there are only four classes to discriminate. thus, for some important problems the non-scaling constraint is not an issue and this approach may offer the best performance.

the maximum a posteriori  molecular classification with our model opens the possibility for making distributed decisions in real time. the em algorithms running on our model are computationally expensive procedures, thus, an important method in this work involves computational speed-up efforts via distributed processing implementations.

RESULTS
we have learned blockade signal clusters for five different types of molecules: two such profile mixtures, learned in  <dig> iterations, are shown in figure  <dig>  the classification accuracy is shown in figure  <dig>  where we used 10-fold resampling of  <dig> labeled toggle sample subsets from our test set  . the resampling offers a similar stabilization on classifications, and at similar computational expense, to what is done via data-rejection in  <cit> . accuracy here is defined as

  accuracy=tp+tntp+fp+tn+fn, 

where true positives , true negatives , false positives  and false negatives  are among the classified data samples. we have systematically investigated how the model complexity affects accuracy as shown in figure  <dig>  where average accuracy does not improve for the model of more than  <dig> components and more than  <dig> blockade levels, although some individual molecules take advantage of increased model complexity as their classification becomes more accurate. we have also investigated the blockade signal duration needed for proper classification, as shown in figure  <dig>  and for the data-sets examined found that samples with more that  <dig> ms duration yield little in either average classification accuracy or classification time. we tried using ionic flow blockade samples of  <dig> ms in the mhmm training, for example, with no apparent improvement to classification accuracy over the  <dig> ms duration samples. this behavior was not observed with the non-map, large-state , approach used in  <cit> , where greater observation times led to improved classification .

the accuracy of consecutive same-analyte toggle samples classification is shown in figure  <dig>  where we reach 100% performance within  <dig> classifications, except for the 9gc molecule, which underperformed when compared with  <cit> . the difficulty with 9gc classification accuracy convergence could be explained by substantial confusion with 9at toggles, which reaches ~17% at first classification round and reluctantly reduces to ~3% after  <dig> classification rounds.

the accuracy improvement is consistent with the accuracy of the previously reported classification process  <cit>  as shown in figure  <dig> . the failure to discern 9gc from 9at in the approach described here, and not in prior efforts  <cit> , may simply be the result of better blockade-level resolution 'fine-structure' with the prior model.

the better resolution between 9gc and 9at channel blockades obtained with the 50-state single hmm  may simply be due to the fixed 1pa resolution  providing a critical resolving capability between very similar blockade signals. if true, a hybrid solution may be to directly incorporate fine-structure into the 4-state multiple hmm processing model that is used here, by adding fine-structure states at 1pa distances on either side of the  <dig> states identified by em. efforts along these lines are ongoing .

the mhmm analysis framework first has been implemented in a concurrent fashion on a quad-core sun ultra  <dig> m <dig> machine with speedup factor  <dig>  as compared to a conventional implementation, and then distributed to the five machines of the same type with java rmi with additional speedup of  <dig> , which translates to the total speedup of  <dig>  ×  <dig>  =  <dig> .

methods
in our approach we used unsupervised distributed learning of nanopore ionic flow blockade toggles with an mhmm. mhmms have a long record of successful implementations that started in speech recognition  <cit>  and later were used for clustering protein families  <cit> , sequences  <cit>  and in the search for splicing enhancers  <cit> . we use the hmm profile shown in figures  <dig> and  <dig> to model the channel blockade process using mhmm components as shown in figure  <dig>  justification for using such profiles is provided in  <cit> , where we have found the duration of ionic flow blockade levels to be distributed with a simple geometric distribution. the noise at a fixed-level blockade level is typically found to be gaussian, consistent with the overall thermal and shot noise background for the transient-binding fixed-flow-geometry environments formed by channel and blockading elements.

the ionic flow blockade records were obtained from the previous studies  <cit> . two axon binary files  have been used to learn the probabilistic profiles for each hairpin molecule. the first  <dig> ms of each channel blockade is the basis of the first test set. four other axon binary files, with uninterrupted recordings , for each hairpin molecule and recorded on the same day, are then used for testing. the test set was formed by equiprobable sampling of  <dig> labeled blockade samples from the pool of test files.

another test set was constructed from the above data files to measure accuracy of consecutive same-analyte toggle sample classification. in this instance we take all the available blockade signal coming from the test files of a certain molecule  and use multiple sample draws from the same signal blockade . with the  <dig> ms signal samples drawn from the same blockade event, we perform map scoring followed by majority vote .  accuracy is calculated as the number of correct classifications matching the known molecule type to the total number of classification events. as in  <cit> , the ionic flow in each record has been normalized to the open channel current  <dig> pa prior to learning and testing.

for our distributed mhmm system implementation we have used cluster of five workstations sun ultra  <dig> m <dig>  each equipped with two amd dual-core opteron processors , connected through gigabit ethernet switch.

hmm definition and em learning
the following parameters describe the conventional hmm implementation according to  <cit> :

• a set of states s = {s <dig> ..., sn} with qt being the state visited at time t,

• a set of pdfs b = {b <dig> ..., bn}, describing the emission probabilities bj = p for  <dig> ≤ j ≤ n, where ot is the observation at time-point t from the sequence of observations o = {o <dig> ..., ot},

• the state-transition probability matrix a = {ai,j} for  <dig> ≤ i, j ≤ n, where ai, j = p,

• the initial state distribution vector ∏ = {π <dig> ..., πn}.

a set of parameters λ =  completely specifies an hmm. here we describe the hmm parameter update rules for the em learning algorithm rigorously derived in  <cit> . when training the hmm using the baum-welch algorithm , first we need to find the expected probabilities of being at a certain state at a certain time-point using the forward-backward procedure as shown in table  <dig> 

let us define ξt as the probability of being in state i at time t, and state j at time t +  <dig>  given the model and the observation sequence

  ξt=p=αtai,jbjβt+1p, 

and γt as the probability of being in state i at time t, given the observation sequence and the model

  γt=p=αtβt∑i=1nαtβt=∑j=1nξt. 

the hmm maximization step using these probabilities is shown in table  <dig> 

em learning of hmm mixture
the objective of mixture learning is to maximize the likelihood function p=Πi=1np=ℒ, i.e. we wish to find the locally optimal set of parameters Θ∗=argmaxℒ by using the expectation maximization  iterative procedure and the set of data points o.

the expectation step in the mixture fitting algorithm is done by computing the responsibility matrix of the components given the data points:

 p⋯pp⋯pp⋯p⋯⋯⋯p⋯p︸m mixture components}k data points 

we use bayes' rule to find the posterior probability  of a mixture component with parameters λm and emission sequence ok:

  p=αmp∑j=1mαjp. 

the expectation step is followed by the maximization step where we re-estimate parameters.

• mixture proportions

  α^m=1k∑k=1kp, 

• initial probabilities

  Π^m=∑k=1kΠ^mkp∑k=1kp, 

where Π^mk is an estimate of initial probabilities for the component m given sequence ok,

• transitions

  a^m=∑i=1ka^mkp∑k=1kp, 

where a^mk is an estimate of transition probabilities for the component m given sequence ok,

• emissions

  b^m=∑k=1kb^mkp∑k=1kp, 

where b^mk is an estimate of emission parameters for the component m given sequence ok.

distributed em implementation
as discussed in  <cit> , the computational gain of a parallel implementation can greatly depend on model topology. in the speech recognition community researchers are able to use a highly parallel hmm architectures for phoneme and dictionary word recognition. typically, when a large number of processing elements  is used, the utilization of each element drops due to communication overheads. therefore, the communication overhead in any parallel architecture must be strictly managed, ideally reduced to a constellation of pes with shared memory  <cit> . in recent work  <cit>  we describe the performance of the following hmm em algorithms :

• conventional em due to leonard e. baum and lloyd r.  <cit>  takes o memory and o) time, where t is the length of the observed sequence, n is the number of hmm states, qmax is the maximum hmm node out-degree, e is the number of free emission parameters, q is the number of free transition parameters.

• checkpointing em  <cit>  takes o memory and o) time,

• linear memory em  <cit>  takes only o) memory and o) time.

similar improvements are also described for the hmm viterbi implementation in linear memory  <cit> . in actual usage with the comparatively small durations generally examined, the checkpointing algorithm was found to be the most memory efficient.

distributed checkpointing algorithm for learning from large data samples
the distributed checkpointing em algorithm is shown in figure  <dig>  here are the steps in our distributed checkpointing algorithm implementation:

 <dig>  client machine splits data sequence o into subsequences o <dig> ..., ot,..., ot each of size t and distributes them across the servers along with λ,

 <dig>  find forward and backward t checkpoints in sequential manner at the corresponding servers where emission matrices for ot were calculated and stored,

 <dig>  reconstruct dynamic programming tables of size nt at the servers according to locally stored checkpoints to make local parameter estimate λ^t=,

 <dig>  after calculating local parameter estimate, communicate λ^t back to the client machine and calculate λ^=,

 <dig>  redistribute newly found λ^ among the server machines for another em round.

distributed mhmm parameter estimate
an mhmm can easily split the responsibilities calculation between several cluster nodes with minimum communication overhead in the following way:

 <dig>  for each parameter λ <dig> ..., λm,..., λm and sequence o <dig> ..., ok,..., ok calculate likelihood p on the server nodes and communicate them back to the client,

 <dig>  client finds responsibilities for each mixture component and a sequence according to formula ,

 <dig>  estimated mixture proportions α^ <dig> ...,α^m,...,αm are found on a client node according to ,

 <dig>  the server nodes find λ^mk estimates for parameter λm and sequence ok and send them back to the client,

 <dig>  on the client node these newly computed parameters are weighted according to responsibilities , , ,

 <dig>  newly found hmm parameters λ^ <dig> ...,λ^m are disbursed back to the server nodes for the next round of em training.

discussion and 
CONCLUSIONS
there are several advantages in our approach:

• classification is highly accurate with no data dropped from consideration,

• model parameters may have intuitive physical interpretation ,

• the mhmm implementation is distributed, such that:

- learning can take a larger number of samples ,

- enables real-time analyte classification, currently takes only  <dig>  sec to classify  <dig> ms sample,

- checkpointing algorithm keeps the memory profile low both on server and client sides without compromising the running time  <cit> .

the need for using a mixture model beyond a simple hmm comes from the observation that generally no more than half of hairpin blockades come from the same mode of hairpin molecule interacting with nanopore . other mode contributions require different probabilistic profiles for classification which naturally leads to a mixture analysis problem. the method shown in figure  <dig> doesn't introduce such modes at the hmm-processing stage, relying instead on the strengths of the svm classifier directly.

increasing em-learning model complexity beyond  <dig> levels and  <dig> mixture components increases the log-likelihood of fully trained model, but does not lead to better prediction accuracy as shown in figure  <dig>  the likelihood increase is caused by the model overfitting the data. overfitting with hmm-profile models, however, isn't found to be as detrimental to the generalization performance as with other learning methods – the main penalty is that the learning and classification times increase dramatically, as we need to estimate progressively increasing number of parameters.

since we did not computationally exhaust all the possible parameter settings , we provide a rationale for the parameter choice we believe is optimal. with preliminary experiments learning on 9cg toggle samples with mhmm of  <dig> toggle clusters we have consistently exhausted the number of components, many of them converging to the same simple blockade as shown in figure  <dig> at the top right. this observation prompted us to use no more than  <dig> components in the channel blockade signal-mode mixture model.

the number of four blockade levels corresponds to the physical model of dna hairpin interacting with nanopore  <cit> . from the physical perspective the hairpin molecule can undergo different modes of capture blockade, such as intermediate level , upper level , lover level  conductance states and spikes   <cit> . when a  <dig> bp dna hairpin initially enters the pore, the loop is perched in the vestibule mouth and the stem terminus binds to amino acid residues near the limiting aperture. this results in the il conductance level. when the terminal basepair desorbs from the pore wall, the stem and loop may realign, resulting in a substantial current increase to ul. interconversion between the il and ul states may occur numerous times with ul possibly switching to the ll state. this ll state corresponds to binding of the stem terminus to amino acids near the limiting aperture but in a different manner from il. from the ll bound state, the duplex terminus may fray, resulting in extension and capture of one strand in the pore constriction resulting into short term s state. the allowed transition events between the levels il ⇔ ul ⇔ ll ⇔ s to happen at any time during the analysis procedure. the spikes model, as described in  <cit> , could possibly be used to increase prediction accuracy. however, with the scenario discussed in this manuscript use of such additions did not lead to higher performance since the primary blockade modes shown in figures  <dig> and  <dig> are void of spikes.

a demo program implementing distributed mhmm analysis framework is available free of charge on our web site .

competing interests
the authors declare that they have no competing interests.

authors' contributions
ac conceptualized the project, implemented and tested the mhmm em algorithm for nanopore ionic flow analysis. swh helped with writing the manuscript and provided many valuable suggestions directing the study. all authors read and approved the final manuscript.

