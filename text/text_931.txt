BACKGROUND
the obo flatfile format  <cit>  is used to represent most biomedical ontologies, among them the gene ontology   <cit>  and most of the obo foundry ontologies  <cit> . to achieve interoperability between ontologies of the life sciences and semantic web ontologies, a formal semantics for the obo format is important. while several mappings from obo to owl exist  <cit> , none provides a flexible representation of the obo semantics that corresponds with the intended meaning of the ontology developers. the obo relationship ontology   <cit>  has been adopted as the reference resource for the semantics of relations within the obo foundry. the current mappings between obo and owl do not provide the means to take the ro into consideration. the ro provides definitions for relations used in the obo ontologies in first-order logic, of which the logic implemented by owl is a fragment. however, the current mappings of obo to owl do not respect the specificity of the considered relation because a relation r between the categories c and d is uniformly translated as c subclassof: r some d .

a mapping of an obo ontology to owl that ignores the meaning of the relations fails to comply with obo foundry criteria and leads to incorrect representations. for example, the problem arises with the lacks-part relation, which is used in some biomedical ontologies, although not included in the ro. the meaning of c lacks-part d is that all instances of c have no instance of d as part )  <cit> , yet current mappings translate it to c subclassof: lacks-part some d. the latter statement implies the presence of an instance of d where the lacks-part relation conveys that such an instance does not exist.

our proposal aims to contribute to the further development of the syntax and semantics of the obo flatfile format, based on the assumption that any owl axiom with two variables for classes defines a relation between these classes. additionally, we aim to provide a method for implementing and further developing the ro and related ontologies in such a way that the relations and their definitions become amenable for automated reasoning using owl. furthermore, our method can be used to provide an easy-to-use obo-style interface to complex owl ontologies by inferring relations between owl classes using automated reasoning. combining the steps of our method enables the use of automated reasoning and other semantic web technologies for existing biomedical ontologies. it also contributes to making complex owl ontologies available to domain experts in an obo-style graph representation.

these are important steps towards bridging the gap between biomedical ontologies and semantic web ontologies. it allows for the reuse of the myriad of semantic web tools, methods and libraries in the domain of biomedical ontologies, and paves the way for the gradual move towards using powerful knowledge representation languages such as owl to represent, process and query biomedical domain ontologies.

methods
obo relationship ontology
the semantics of relations used in biomedical ontologies is provided by the obo relationship ontology   <cit> . the ro defines relations between classes using relations between instances of these classes. for example, the definition of the part-of relation is:

  cpart−ofc1=deffor all c,t, if cct then there is some c1 such that c1c1t and c part-ofc1 att. 

this definition states that the relation part-of - a relation between classes  - holds between c and c <dig>  when for every instance of c some instance of c <dig> exists such that these stand in the relation part-of - a relation between individuals. continuants are instantiated or have parts only at specific time points. therefore, the universally quantified temporal argument t is used, in the definition.

in the definition of a relation between two classes c and d, these symbols are interpreted as variables varying over classes. whenever this relation is used, such as in the statement

  nucleus part-of cell 

the variables are replaced with the actual class names.

the ro distinguishes two categories, occurrents and continuants. most relations for continuants, including instantiation or parthood, are ternary and include a temporal argument, i.e., at which time the continuant instantiates a class or is part of another continuant. in the definitions for binary relations between classes provided by the ro, the temporal argument in relations between individuals is universally quantified. owl only supports binary relations between individuals, and consequently, no explicit definition of the ro definition patterns is possible in owl.

currently, the ro provides only natural language definitions and formal definitions in first order logic  <cit>  for relations between classes. the owl implementation of the ro consists of a list of owl object properties  <cit> , but does not include the definition patterns, i.e., how a relation between classes is reformulated using the owl object properties.

relational pattern definitions
while the ro defines relations using first order logic, we are interested in using owl as a knowledge representation language for biomedical ontologies. owl is based on description logics and, in contrast to full first order logic, decision procedures are available to support automated reasoning about owl ontologies.

we introduce a new type in owl which represents a relation specification. to provide compatibility with the obo flatfile format  <cit> , we focus on binary relations between classes first and extend our method later. any owl class axiom in which two variables for classes occur represents a binary relational pattern definition. when a binary pattern is applied to two owl class descriptions, the variable symbols are replaced with the class descriptions to yield a valid owl class axiom. therefore, relational pattern definitions are templates for complex owl axioms.

extensions to owl syntax and semantics
to permit human agents to understand and specify relational pattern definitions, we have extended the manchester owl syntax  <cit>  with the variable symbols ?x and ?y. both are symbols that are intended to represent classes.

this extension introduces variables for classes in owl, and in order to remain within a decidable fragment of first order logics, we do not use a higher-order semantics for statements involving these class-variables. although it is possible to give a decidable semantics for relations between classes in owl  <cit> , we do not need to use relations that contain class variables. in the obo flatfile format, the relations are always used between named classes. therefore, the variables in the extended owl syntax are always filled by a named class. consequently, every application of a relational pattern definition translates to a valid owl axiom.

for example, we can provide a definition for the pattern lacks-part using the following definition:

?x subclassof 

whenever this pattern is applied, it is asserted to hold between two named classes, c and d. in the semantics, this definition together with an assertion that c lacks-part d is expanded to the owl statement

c subclassof 

more complex ontology design patterns can be asserted using different relational pattern definitions. table  <dig> lists a translation of some relations that are used in biomedical ontologies to relational pattern definitions. our approach can be restricted to unary or extended to arbitrary n-ary relations, n >  <dig>  unary patterns require a single variable symbol, while n-ary relational pattern definitions use the variable symbols ?x <dig>  ?x <dig> ...,?xn. we implemented only binary pattern definitions to provide compatibility with the obo flatfile format, and to enable graph-based access to owl ontologies.

emphasized relations are not a part of the obo relationship ontology, but are included in its extensions.

extension to obo syntax and semantics
we focus on applying relational pattern definitions to extend the obo language and make the semantics of relations used in obo ontologies explicit. for this purpose, we add an owl definition of the relations used in an obo ontology to the obo language, and use this definition for the conversion to owl  <cit> . a basic definition of an ontological category in the obo flatfile format has the following form:



id: term-id

name: term-name

is_a: term-id-super

relationship: relationship-id term-id-r

this definition states that a category with the identifier term-id and the label term-name stands in the is-a relation to the category with the identifier term-id-super, and in the relationship relationship-id to the category identified by term-id-r. the grammar of the currently used version of the obo flatfile format lists several additional elements which a term definition may contain  <cit> .

the key issue that the ro  <cit>  attempted to resolve is the provision of a uniform and flexible interpretation of the relationship statements in the obo flatfile format. currently, translations to owl for a relationship statement in the obo flatfile format occurring in the definition of a category with the identifier term-id

relationship: relationship-id term-id-r

result in

term-id subclassof: relationship-id some term-id-r

such translations fix a particular interpretation of what a relation between two terms in the obo flatfiles designates. although the intension of the owl relation relationship-id is not specified, the relationship represented in the obo flatfile, as a relationship between two terms , is defined uniformly using a new relationship between the instances of these categories; and this new relationship is used in an existential statement.

the typedef environment is used to define relationships in the obo flatfile format, and assert basic axioms to these relations. we provide a minimal extension of the current obo flatfile format to include owl relational pattern definitions in the typedef stanza of the obo flatfile. since the obo flatfile format is intended to be read both by machines and read by humans, we selected the manchester owl syntax to represent the relational pattern definitions. we add an owldef statement to the typedef environment of the obo flatfile format such that a relationship can be defined using a relational pattern definition:

owldef: owl-pattern-definition

applying our method to extend the obo flatfile format syntax and semantics permits a view on obo ontologies where an ontology consists of  a list of relations that are used in the ontology, and  the actual domain content of the ontology. the actual domain content is intended to be modified and curated by domain experts. the list of relations and the definitions of the relations in this list can be developed and maintained in close collaboration by domain experts and experts in formal logics and ontology, similar to the approach taken in the ro. this leads to a reuse of existing resources and curation efforts, improve interoperability and the correct use of relations within domain ontologies.

implementation
we implemented the obo flatfile format syntax and semantics  <cit>  together with our extensions as a java software. the software implements a generic parser for the obo flatfile format. it represents the obo ontologies as a list of ontological categories and a list of relation types. the relation types include the relational pattern definitions.

to convert this representation to owl, we use the manchester owl api  <cit> . every relation assertion that is not explicitly defined is translated using the standard semantics of the obo flatfile format, i.e., as an existential statement. for example, if the relation part-of contains no owldef definition, its use in the definition of the class nucleus

relationship: part-of cell

will be translated as

nucleus subclassof 

on the other hand, when a relational pattern definition is available, the variable symbols ?x and ?y are replaced with the first and second argument of the relation and then converted to an owl axiom using an inline parser for the manchester owl syntax of the manchester owl api. for example, the relationship statement

relationship: lacks-part nucleus

in the definition of the class red blood cell, together with the definition of lacks-part

owldef: ?x subclassof 

is first converted to the statement:

redbloodcell subclassof 

this statement is obtained by replacing the variable symbols with the names of the categories, red blood cell and nucleus. it is then parsed using the manchester owl api and added as an axiom to the owl ontology.

our implementation replaces the obo parser that is available in the manchester owl api. based on this implementation, we developed a command-line interface to convert ontologies from the obo flatfile format to owl. the source code is also available as a library so that our extension to the obo flatfile

format can be integrated easily into software applications. furthermore, we provide a web interface to perform conversions online to ease the adoption of our method. the web-interface can also be used to generate new obo files that include owl definitions. all software is freely available from our project website  <cit> .

further, we provide a prototype implementation to extract relational patterns from an owl ontology. for this purpose, an owl ontology is read using the manchester owl api. based on a list of relational patterns and the list of all class names in the loaded owl ontology, binary relations between classes are generated as owl axioms: each class name in the signature of the owl ontology is used to replace ?x in the pattern and then combined with all class names to replace ?y in the same pattern. consequently, all combinations of named classes are generated to fill variables in the relation patterns, leading to a list of owl axioms.

using the hermit owl reasoner  <cit> , we then attempt to prove each of these owl axioms and keep track of those that the reasoner could infer from the axioms asserted in the ontology. as a consequence, we obtain a list of theorems that hold in the ontology. we can convert these back to the obo flatfile format by asserting the relations in the obo ontology that were inferred using owl reasoning.

the extraction of relational patterns from owl ontologies is prototypically implemented using a naive approach. we currently use every pair of named classes and attempt to prove the axiom resulting from replacing ?x and ?y in the definition patterns with the named classes. consequently, this approach requires n <dig> inferences using an owl reasoner, where n is the number of named classes in the owl ontology. designing a more efficient algorithm is subject to future work.

RESULTS
use cases
missing parts or dispositions
the first obvious example where the current semantics fails is the class of lacks relations  <cit> . using our extension, the relation lacks-part will be defined in the following typedef statement:



id: lacks-part

owldef: ?x subclassof: not has-part some ?y

then, a definition of the category taillessmouse is



id: taillessmouse

name: mouse that has no tail

is_a: mouse

relationship: lacks-part tail

our mapping approach will yield the following owl axiom for the obo flatfile statement:

taillessmouse subclassof: 

the definition of the lacks-part relation can be refined by defining the has-part relation using the meta-property assertions in the obo flatfile format. using these meta-properties, has-part can be asserted to be transitive and symmetric. these assertions influence not only the interpretation of has-part but also of lacks-part when the definition we introduce is used. another example where missing parts are relevant include red blood cells, which may be defined as cells which lack a nucleus as part. similar to absent body parts, we can define absent dispositions, e.g., in the case of dysfunctional entities  <cit> .

functions and dispositions
however, lacks relations are not the only application of our owl definition patterns. many relations between categories do not imply the existence of an instance of one of the categories, but restrict the class membership if there are instances. they are used to assert that the instances of a class c stand in a relation r only to instances of a class d  <cit> .

an example of such a relation is the realized-by relation between a disposition or function and a process that realizes the disposition or function  <cit> . because some functions or dispositions are never realized, it would be false to assert that there is necessarily an instance of a process that realizes the function. instead, if there exists a realization, it must be of a certain kind. consequently, the definition of realized-by is

?x subclassof realized-by only ?y

in addition to the all-all pattern, more complex definitions can be used. for example, the relation has-function-realized-by  <cit>  is a relation between a class of function bearers and a class of processes which are the realizations of functions borne by instances of the first class. we de ne has-function-realized-by as:

?x subclassof: has-function some 

implementing the obo relationship ontology
in addition to domain-specific use cases, relational pattern definitions provide a means to implement and distribute the ro  <cit> . relational pattern definitions make the definitions of relations between classes explicit and integrate them with owl ontologies and biomedical ontologies using the obo flatfile format. in contrast to definitions in first-order logic, an implementation in owl takes advantage of the large number of tools and libraries that are available for owl. in particular, an owl implementation can be used to support automated reasoning with ontologies.

our implementation of the ro was manually performed and ignores temporal arguments, because owl does not support ternary relations. once a standard owl-based semantics for temporal arguments of ro relations is available, appropriate pattern definitions that include temporal arguments can be defined.

ternary relational pattern definitions provide a means to avoid universal quantification over the temporal arguments in the ro relation. except for the derives-from and derives-into relations, the implementation we provide is formally equivalent to the first order version of the ro without temporal arguments. in the ro, the relations derives-from and derives-into are defined using sequences of changes in identity, which we approximate by introducing a new relation between instances.

towards a standard semantics for the obo flatfile format
relational pattern definitions and using the owldef method provide a flexible way to de ne relations using complex owl statements in biomedical ontologies and the obo flatfile format. however, owldef statements interfere with other parts of the obo flatfile format. in particular disjointness, intersection and union statements do not inter-operate well with the owldef method. the following definition of a category in the obo flatfile format illustrates the problem:



id: id:1

intersection_of: id:2

intersection_of: integral-part-of id:3

the difficulty is that integral-part-of id: <dig> is not a class description when the owldef method is used. instead, id: <dig> integral-part-of id: <dig> would translate into one owl axiom. axioms cannot be disjoint from classes  in owl.

however, the current translations of the obo flatfile format to owl do not provide an adequate semantics for this statement either, because the relation integral-part-of is not translated appropriately. one possible solution would be to disallow the use of relational statements in intersection, disjointness or union statements, and allow only class names as arguments. another would be to restrict the kind of relation that can be used in these statements.

solving this problem is subject to future research, and falls in line with the effort to provide a standard semantics for the obo flatfile format that is compatible with currently available resources and allows expressive relation assertions between categories.

evaluation
to evaluate our method, we applied it to the celltype ontology   <cit> . we chose the cl due to its average size , relative maturity and lack of formal definitions. the cl uses two relations, is-a and develops-from. the patterns for is-a and develops-from are ?x subclassof: ?y and ?x subclassof: develops-from some ?y. we implement the pattern for develops-from using the owldef statement in the obo flatfile format:



id: develops_from

name: develops_from

owldef: ?x subclassof: develops-from some ?y

the cl contains  <dig>  is-a and  <dig> develops-from statements, i.e.,  <dig>  axioms that restrict cl categories using one of these two relations. we classify the generated owl ontology using the hermit owl reasoner. based on the classified owl ontology, we attempt to prove the two patterns for each pair of named classes in the ontology. we use the hermit reasoner to perform these inferences. using this approach, we identify  <dig>  is-a and  <dig>  develops-from statements that we can add to the obo flatfile representation of the cl. the inferences are obtained from owl reasoning on the semantics of the ontology, which take transitivity of is-a and develops-from relations into account.

the cl only uses the is-a and develops-from relations which are interpreted correctly by most obo to owl converters. therefore, we used the malaria ontology  <cit>  to evaluate our method. the malaria ontology uses the relation realized-by which should be defined as  <cit> :



id: realized_by

name: realized_by

owldef: ?x subclassof: realized-by only ?y

using our method, we infer  <dig> realized-by relations from three assertions of realized-by in the obo version of the malaria ontology.

furthermore, we added the axiom that exon is integral-part-of a transcript to the sequence ontology   <cit> , in accordance with the so developer's proposal for defining so classes  <cit> . from this assertion, we could infer that exon stands in the has-part relation to sequence feature and biological region, neither of which was asserted in the obo flatfile implementation of the so.

this shows that the application of our method provides a powerful means to complete the information in an ontology implemented using the obo flatfile format through automated reasoning. in combination with our novel implementation of the ro, we provide a way to present the inferences of the assertions in a domain ontology to the curator so that they can be used to verify, correct and complete the ontology's content.

in our use-case using the celltype ontology  <cit> , the conversion of owl to obo required  <dig> minutes on an amd opteron processor with  <dig>  ghz and using  <dig> gb of memory. in the future, we will attempt to reuse already performed inferences and use heuristics to speed up the process of inferring the patterns.

future research
the main task for the future will be to work with the developers of the obo flatfile format to agree on a common specification of the syntax and semantics of the obo flatfile format. several suggestions for developing the semantics of the obo language were proposed  <cit> , each with their own advantages and disadvantages. the closest to our approach is a proposed semantics  <cit>  based on common logic  <cit> . however, common logic is, in general, undecidable and does not benefit from the variety of software tools and libraries that have been developed for owl. we therefore suggest including our extension, or a variant of it, in a next version of the obo flatfile format.

furthermore, to use owl reasoning for ontology engineering in the obo flatfile format, we intend to include our extension in the obo-edit ontology editor. the current semantics of the obo flatfile format, in particular the use of existential statements for relations, limits the possibilities for discovering inconsistencies in ontologies. expressive owldef definition patterns that may include negation provide a means for automatic consistency verification and reasoning, and consequently support the ontology engineering process.

performing the roundtrip between the obo flatfile format and owl would permit a seamless integration of owl and graph-based languages such as the obo flat file format. the current main limitation is the performance of extracting relational patterns from owl using automated reasoning. to make our approach widely applicable within the semantic web community, more sophisticated algorithms must be investigated to extract relational pattern assertions between classes.

although our main application is to provide a semantics for biomedical ontologies, owl relational pattern definitions can also be applied to unstructured rdf data to provide a semantic layer and an interpretation of relations used in rdf stores. one use-case would be to apply our method to linked data  <cit> . linked data is a web of data where uris denote things and links between uris are expressed using rdf and represent relations between things. at least a fragment of the linked data cloud contains uris of classes, not individuals, and relations between these classes are expressed in rdf. similar to the obo flatfile format, the semantics of the relation between classes is not made explicit. using owl relational pattern definitions, we can provide a way to represent some parts of the linked data cloud in owl, utilizing the expressive semantics of owl to formalize, structure and verify pieces of data. an implementation and evaluation of applying owl relational pattern definitions to rdf and linked data is subject to future work.

CONCLUSIONS
we developed a method to apply relational pattern definitions in biomedical ontologies, and we extended the syntax and semantics of the obo flatfile format to allow the use of relational pattern definitions. the patterns we introduce are based on the assumption that any owl class axiom in which variables for classes are used defines a relation between two classes. the patterns are formulated using an extension of the manchester owl syntax, which is a human readable and writable syntax for owl. the patterns can be used to provide a graph-based front-end for owl ontologies.

to facilitate interoperability of our method with biomedical ontologies, we implemented an extension to the obo flatfile format to include relational pattern definitions. our proposal properly extends the obo flatfile format to generate accurate and highly expressive owl ontologies. additionally, it permits the use of flexible interpretations of relations between classes.

we show the merit of our approach in several use cases. in particular, negation and universal quantification can be expressed in the obo flatfile format when relational pattern definitions are used. our approach is compatible with the obo relationship ontology and permits an implementation of the obo relationship ontology both in owl and in the obo flatfile format. for this purpose, we have translated the obo relationship ontology to relational pattern definitions as required by our approach. our proposal benefits the development of biomedical ontologies through the reuse of methods and software applicable in the semantic web. we suggest extending the obo flatfile format by including relational pattern definitions in its syntax and semantics. additionally, we propose a method for continued development of the obo relationship ontology that makes the relationship definitions in the ro amenable for automated reasoning using owl reasoners.

the application of our method does not only provide a means to make currently available biomedical ontologies amenable for automated reasoning using owl software tools and libraries. the use of relational pattern definitions makes graph-based ontologies available in owl, and makes complex owl ontologies accessible in a graph-based form. thereby, our method provides the means to gradually move the representation of biomedical ontologies towards a formal knowledge representation languages that incorporates an explicit semantics.

availability and requirements
• project name: obo2owl-patterns

• project home page: http://bioonto.de/obo2owl

• operating system: platform independent

• programming language: java, groovy

• other requirements: manchester owl api  <dig>  or higher

• license: modified bsd license; the original bsd license was modified to remove the advertisement clause and thus make it compatible with free software licenses such as the gnu general public license.

authors' contributions
rh conceived of the project and drafted the paper. hh and rh developed the semantics for the language extensions. rh and ao implemented the software. jk provided use-cases from biology, md use-cases in the semantic web. hh, jk and dr supervised the project. all authors have read and approved the final version of the manuscript.

