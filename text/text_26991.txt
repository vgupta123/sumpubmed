BACKGROUND
expressed sequence tags  are generated by single-pass sequencing of complementary dna   <cit> . because ests correspond to the transcribed regions of a genome, est sequencing has been a common strategy for gene discovery â€“ especially for organisms with complex genomes. for example, many agriculturally important plants  have enormous genomes containing many repetitive elements and large intergenic regions. for these taxa, est sequencing remains  the only efficient way to discover genes on genome-wide scale, since the repetitive elements still pose an unsolved challenge for whole genome assembly. even for species with draft genome sequences, ests remain the gold standard for accurate gene structure annotations  and serve a variety of biological research applications . because of improved reliable protocols for cdna library construction, normalization and sequencing, generating est data is now standard practice. as a result, the number of est sequences is growing at an ever-increasing pace for diverse organisms  <cit> . after est sequencing, the next step is to analyze the generated est data. typical est analysis involves  base calling to convert raw chromatograms generated by dna sequencers into human-readable sequences,  data cleaning that removes cloning vector, adaptor and bacterial host sequence contamination,  assembling individual est sequences into contigs that reduce redundancy and represent a unique gene set,  functional annotations of the potential encoded proteins by sequence similarity to annotated proteomes, and  designing microarray oligonucleotide probes from the est sequences for expression profiling. for many of the above tasks, bioinformatics groups that specialize in est data  usually implement their own in-house est analysis pipelines. however, those pipelines are generally not portable or accessible to outside users, due to specialized hardware requirement . many biologists with smaller-scale est projects can not afford dedicated bioinformatics teams or computational clusters. therefore, individual biologists can face significant challenges to process and analyze their est data. these include identifying, installing and executing the proper computer programs for each step. this is especially challenging if data processing requires additional programming . in most cases, significant computational resources are also needed . therefore, web-based est analysis pipelines are critical for biologists to perform their analysis simply, via a web browser, without unnecessary technical hassles. although some web-based tools for est analysis are becoming available, their scope and capacities need continuous improvements. to enrich the biologists' toolkit, we have developed a web-based computational pipeline called estpiper, which streamlines typical est analysis steps. in the sections below, we discuss the technical implementation of estpiper, its unique features compared to other web-based est analysis tools, and the application of estpiper in support of the daphnia pulex genome sequencing project .

implementation
the estpiper flow chart is illustrated in figure  <dig>  the intuitive web interface guides the researcher through each step: base-calling, data cleaning, assembly, genome alignment, annotation, go functional analysis, and microarray oligonucleotide probe design. at each step, the user sets the parameters to be used by the underlying analysis programs. once the computation is completed, the user is notified via email and given a url for viewing and downloading the results. for convenience, the results are temporarily stored on our server for  <dig> days. each specific component of estpiper is described below.

base calling
estpiper incorporates the phred program  <cit>  for base calling with quality scores, which is the de facto standard program for converting dna sequence trace files  generated by the sanger method into nucleotide sequences. to speed up the file upload for large numbers of trace files, estpiper only accepts compressed data files in either .ab <dig> or .scf format and produces the sequence and the corresponding quality file in fasta format.

data cleaning
to obtain high quality est assemblies, contaminant sequences are properly identified and removed. these include sequences from ligated adaptors, cloning vectors and the bacterial host. estpiper first invokes the commonly used lucy program  <cit>  for vector removal and to trim low quality regions at both ends of sequence reads. in addition, the user has the option to trim polya/t tails from the sequence reads, which is a necessary step to avoid mis-assembly but optional if the user intends to identify transcriptional termination sites on the genome. finally, the sequences are compared against bacterial genomes  and other adapters and primers  based on stringent blast searches . the output of this step is the cleaned sequence and quality files in fasta format.

assembly
ests usually correspond to only partial cdna sequences and they are typically redundant, even when normalized during library construction. therefore, overlapping est sequences are commonly assembled to derive a set of unique putative genes . estpiper provides de novo assembly using the popular cap <dig> program  <cit>  to assemble ests into contigs based on mutual percent identity over a minimum number of overlapping bases. in addition, if the 5' and 3' ests derived from the same cdna clones follow the standard naming convention , such clone-pair information can be used to produce unigene clusters that include non-overlapping contigs. for this purpose, estpiper performs single-linkage clustering by default. the user may choose a more stringent clustering criterion, i.e., at least two est clones must be shared for linking two contigs together in order to reduce potential false linkages .

genome alignment
if a draft genome sequence for the species of interest is available, ests are routinely aligned to genomic dna for gene discovery, for annotation of intron-exon structures, and for identifying alternative splice forms. for such purposes, we have also implemented a genome-alignment module. specifically, the blat program  <cit> , which is designed to align native or closely related ests to the genome, is called by estpiper to perform spliced alignment of each est against user-supplied genome sequences. if an est sequence matches multiple genomic loci, only the best match is considered as the cognate match. after ests are aligned to genomic dna, the mapping coordinates  allow the user to cluster overlapping ests into unigene sets. genome-based est clustering is usually considered more accurate than de novo assembly  <cit> . without draft genome sequences for guidance, de novo assemblers solely consider the pairwise est sequence overlap, and may mistakenly assemble different transcripts from paralogous genes into the same cluster, which is a serious problem for species that have extensive gene duplicates. moreover, de novo assemblers often disconnect alternative transcripts derived from the same gene locus into different clusters, thus overestimating the number of expressed genes. therefore, we have implemented a genome-guided strategy for clustering the mapped ests similar to other published studies . particularly, ests aligned to the same genomic locus are clustered based on user-supplied parameters, e.g., minimum number of overlapping nucleotides between the neighboring aligned est sequences. then, transcript sequences can be derived based on the exons defined by each matched est produced by the blat program. specifically, estpiper invokes the well-known pasa package to generate contigs for each alternative splice variant by merging sets of compatible overlapping est alignments  <cit> . if multiple splice variants are identified, all will be reported. however, only the longest splice variant from each gene cluster is selected as the representative of the gene transcript for the following modules .

functional annotation
the next natural step when processing ests is to identify the potential protein products encoded by the clustered unigene sequences, particularly whether they are similar to known sequences in proteomic databases. therefore, each assembled contig sequence is searched against the uniprot protein database  <cit>  using the blast program  <cit>  in estpiper. a local copy of the uniprot database is automatically synchronized with the uniprot server via a monthly cron job. the uniprot database has the advantage over other comprehensive datasets for annotation of providing gene ontology  terms in its protein records  <cit> . go terms associated with the top statistically significant database sequence matches are propagated in estpiper to the contig sequence following common practice . the go terms allow biologists to conveniently summarize the gene product attributes of their sequences with controlled vocabulary. estpiper allows the user to create a summary of go terms in tabular format based on different go categories  and at a user-selected go hierarchical level. estpiper also allows the user to input a list of go terms  and reference set , and to perform statistical analyses that identify overrepresented functional attribute terms. specifically, the p-value of each go term is calculated based on the hypergeometric test with benjamini and hochberg multiple testing correction  <cit> .

microarray oligonucleotide probe design
despite increasing popularity of whole-genome tiling arrays and expression profiling by direct sequencing, oligonucleotide arrays remain an efficient and cost effective tool for studying co-transcriptional biases of genes on a large scale for species without full-genome sequence information. therefore, designing microarray oligonucleotide probes is a critical task for biologists to create gene chips for their functional genomic investigations. previously, our center conducted an extensive survey to compare the existing microarray probe design programs  <cit>  and chose the oligopicker program  <cit>  to successfully design microarray probes within estpiper for a number of expression profiling studies in different species . the coding strand  of each assembled sequence must be pre-defined before designing microarray probes, which is seldom straightforward. in estpiper, the coding strand is determined by a simple two-tier strategy. first, sequences on dna strands that match to the protein database , are confidently determined from the blast output. if a sequence has no match to protein sequences , the sequence is passed to the orfpredictor program  <cit> , which identifies the longest open reading frame to predict the coding strand.

automated pipeline
each of the above steps is completely modularized. therefore, depending on the user's specific needs, multiple entry points into the pipeline are possible. for example, instead of starting with base calling for processing trace files, the user can simply upload pre-processed fasta-format sequence files and quality scores  into our pipeline for assembly. similarly, intermediate results can be downloaded from our pipeline  to be imported within other preferred computer programs for further analysis . in addition, estpiper provides an option for the user to select and combine multiple  modules automatically. data can be effectively transferred among adjacent modules without any human intervention. parameters can be saved for repeated use, i.e., the user can input previously returned parameter files for multiple new runs with different source data.

RESULTS
comparison with other existing est analysis programs
a number of standalone software packages are available for est data analysis  <cit> . however, those programs require researchers to install and maintain the software locally, which many biologists find inconvenient . instead, biologists often prefer web-based analysis tools, where data can be uploaded on a host machine and the analysis can be performed through an easy-to-use interface. therefore, several online tools have been published recently that simplify computational tasks. although helpful, none of the existing web-based tools offer a comprehensive est analysis workflow. for example, many tools are limited in scope: e.g., orest  <cit>  is only designed for processing mammalian and fungal sequences, not necessarily applicable to other research communities. in addition, orest does not provide some of the critical modules in estpiper . for general-purpose est analysis tools, preassemble  <cit>  and webtraceminer  <cit>  specialize in base calling and quality trimming but do not provide assembly or annotation functionality. egassembler  <cit>  mainly focuses on de novo est assembly but users must perform base calling and annotation elsewhere. estexplorer  <cit>  and estpass  <cit>  extend egassember with additional functional annotations, but these programs lack genome alignment and microarray probe design functionality. here, we present an alternative est analysis pipeline, estpiper, for research communities. in addition to streamlining the steps of base calling, quality trimming and removing contaminant sequences, assembly, annotation and go analysis, estpiper provides two unique modules compared to existing web-based est analysis tools:  genome alignment and  microarray probe design. as discussed above, both functions are now standard practice in a typical est project. however, these functions are not available in existing est analysis tools . although standalone web servers exist for similar tasks , estpiper integrates such functionalities into a comprehensive pipeline with additional enhancements. for the genome alignment module, the existing tools for est to genome alignment do not provide customizable clustering function. estpiper allows users to specify how ests aligned to the genome should be clustered, by defining a minimum distance between the neighboring aligned est sequences. moreover, such clustering can be improved by providing clone pair information. for the probe design component, all existing probe design software requires researchers to identify the coding strand before executing. however, for a large number of est-derived sequences, it is not trivial for biologists to determine the correct strand for each. therefore, we integrated the database similarity search  and ab initio prediction  for coding strand determination. in addition, we also enhanced the de novo assembly function. specifically, beyond simply invoking cap <dig> as other services do, estpiper provides users an option to perform single-linkage clustering based on clone-pair constraints. this allows the user to better define a true set of unigenes . furthermore, some of existing web-based tools allow researchers to process only relatively small input files. for example, estpass imposes an upper limit of  <dig>  ests  on files uploaded to their web server. we impose no file size limit for estpiper. however, we do recommend that users input less than  <dig>  est sequences to ensure successful de novo assembly without running out of computer memory on our current server. yet we have nonetheless successfully assembled more than  <dig>  daphnia ests with our present configuration.

other features
our workbench is designed for biologists to perform and document computational analysis on est data. computational analyses in estpiper are documented for reproducibility. for example, the percent identity cutoff limits used by cap <dig> program for assembly are recorded, which determines the resulting contigs. therefore, estpiper provides the user with a complete, time-stamped description of estpiper's usage history . we believe that this feature will greatly facilitate tracking results, especially if the user initiates several rounds of trial-and-error analyses, experimenting with different program and parameter combinations in order to obtain the highest quality results. finally, unlike many other web-based tools that are not portable, the user can download and install estpiper on local computers. for example, advanced users may use the core estpiper code to process the est data without having to navigate through the web interface, or they can integrate estpiper into their own customized pipeline .

application
we applied estpiper to process and analyze a large set of daphnia pulex est data as part of the daphnia genomics consortium sequencing project. we began our data analysis with  <dig>  est sequences that were filtered from an initial set of  <dig>  trace files that were generated by sequencing  <dig> cdna libraries for discovering condition specific gene transcripts . after data cleaning, estpiper returned  <dig>  high-quality sequences. polya/t tails were further removed; the minimum length of continuous polya/t was set to  <dig> bp, the maximum number of mismatches within the polya/t region was  <dig>  the searching range of polya/t was limited to  <dig> bp from both ends of the sequence. we also configured estpiper to remove sequences with at least  <dig> bp continuous a/t or adaptors occurring in the middle of sequence reads to avoid potential chimerical clones. furthermore, mitochondrial sequences and contaminated e. coli sequences were identified and removed based on blast similarity search . finally, resulting sequences less than  <dig> bp were also removed. a total of  <dig>  high-quality ests were therefore used in subsequent steps of our analysis.

we conducted both a de novo assembly using the cap <dig> program and an assembly based on alignment to the dappu v <dig>  draft genome sequence assembly . first, by feeding the cleaned ests into the de novo cap <dig> assembly program ,  <dig>  contigs and  <dig>  singletons were generated, and  <dig>  unigene clusters were derived based on clone-pair constraint. second, for genome-based assembly, ests were first aligned to the daphnia genome using the blat program . if an est sequence matched multiple genomic loci, only the best match was considered as the cognitive match. out of  <dig>  ests,  <dig>  ests matched to the genome sequence. ests were clustered based on their overlapping matching positions on the genome. we required that two neighboring ests be considered part of the same cluster if they shared at least  <dig> bp minimum overlap. a total of  <dig>  unigene sets were derived. for genes identified from each est library, estpiper matched them to uniprot using blastx . the go term associated with the top matches to the protein database were also created for different libraries. statistic analysis of go terms overrepresented in each library was performed using the entire est collection as a reference. finally, a  <dig>  element daphnia cdna microarray  was produced with the oligonucleotide probes designed based on estpiper. the microarray has been successfully applied by the daphnia research community to study daphnia gene expression under different environmental stress conditions .

CONCLUSIONS
web-based tools are most convenient for biologists to effectively process large est data sets. to supplement the existing tools, we have developed a comprehensive web-based est analysis pipeline called estpiper that streamlines the numerous est analysis components and offers unique features such as genome alignment and microarray probe design.

availability and requirements
the estpiper program is freely accessible, using a web browser at . we recommend that users provide their email address when they upload their data. then, once their submitted jobs are finished, emails will be automatically sent to the users with the instruction for retrieving their results. the software is also available from the web site for local installation. currently, estpiper is installed on a virtual machine hosted on a sun x <dig> with four  <dig>  ghz cpus, each cpu having four cores for  <dig> total cores. the machine has  <dig> gb of memory. there are two  <dig> k rpm sas system disks in a mirrored zfs pool, and all project/app storage is done over nfs via dedicated gigabit ethernet. at our center, we can easily migrate estpiper among our virtual servers as resource requirements change.

project name: estpiper

project home page: 

operating systems: local installation requires linux/unix.

programming language: perl, javascript, java

license: the software is under the apache license  <dig> .

authors' contributions
zt designed and implemented estpiper and its web server. jhc contributed to the system design and provided technical assistance with the software implementation. ch critically enhanced the web interface, on-line descriptions, and the probe design module. as and ch improved the genome alignment module. qd and jc conceived the project and guided the development process. qd and zt prepared the manuscript. all authors read and approved the final manuscript.

