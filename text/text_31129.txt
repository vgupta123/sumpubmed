BACKGROUND
many algorithms have been developed recently that search dna sequences looking for various types of subsequences  <cit> . all of these algorithms were developed to help life science researchers efficiently and accurately find short segments of dna within entire genomes. some search for short tandem nucleotide repeat  sequences that are commonly found throughout the genomes of higher organisms  <cit> . others search for variable length tandem repeats  and multi-period tandem repeats   <cit> . most of them require that the sequence be repeated at least a few times in order to guarantee being detected and all of them require that the repeat be of a certain minimum length. many of the algorithms can identify repeats without a priori knowledge of the repeat pattern. they do this by identifying short segments of dna, termed words, and then manipulating the properties of these words as a process moves down the length of the sequence. a word's properties include, for instance: location, distance to the nearest identical word, and hamming distance  <cit>  to similar words. once the process is finished, the results are displayed with accompanying statistics. each new search must proceed from the beginning of the sequence. however, ning, cox, and mullikin  <cit>  have developed a different type of algorithm called 'sequence search and alignment by hashing algorithm', ssaha, that stores information about the locations of dna words into a hash table. during a homology search, these locations are sorted and then examined for a series of numbers that are word-length apart. since the hash map is in main memory, this search can be quite fast. for instance, a search through  <dig>  gbases of dna took only  <dig>  seconds per query on average while searching for homology with  <dig> query sequences . however, in this experiment, the system required a minimum homology of 2k -  <dig> bases  to guarantee a match. furthermore, under no circumstances can the ssaha algorithm find matches for sequence lengths less than k. also, since the hash map is in main memory, scaling becomes a problem for multiple species searches.

in addition to ssaha, other algorithms employ a static index of the database to speed retrievals. for instance, blat  <cit>  is very effective for aligning mrna and genomic dna taken from the same species. it uses an index of non-overlapping length k dna words  to find short matching sequences that can be extended into longer matches. as with the ssaha algorithm, blat cannot locate hits smaller than length k. also, blat excludes from the index k-mers that occur too often as well as k-mers containing ambiguity codes in order to reduce the number of initial matches to extend. this practice improves performance at the cost of missing some hits.

the flash  <cit>  and teiresais  <cit>  algorithms were designed to manage mismatches between a query sequence and sequences in the database. flash uses a strategy where non-contiguous dna words are concatenated and then indexed. the algorithm generates a very large number of concatenated dna words from each portion of an original string. teiresais was built to discover patterns in biological sequences by scanning input sequences to locate the set of all patterns with at least minimal support. then, it builds larger patterns by matching prefixes and suffixes of patterns in the initial set. however, like the ssaha algorithm, scaling becomes a problem for flash and teiresais for multiple species searches.

while accuracy and efficiency are important to life science researchers, they undoubtedly would like to do more than just locate their query sequences. for example, suppose a researcher knows the sequence of a transcription factor binding site and wishes to search through several species to see what genes this factor might be controlling. current algorithms could easily generate tens of thousands of hits but leave the researcher with weeks of additional work in order to locate more specific information. if, however, the researcher also had an idea about possible annotation terms that would accompany specific genes of interest, then they could substantially narrow the search results by simultaneously searching for those terms. the expected results would be all genes that contain both the sequence and the annotation terms. this would add value to the search and help the researcher to understand a biological meaning in the results.

we have developed a search algorithm based on a unique and fast hash function that can search for a query sequence of any length in any number of genomic sequences. like most other recent search algorithms, our algorithm uses the properties of dna words, or more specifically their location. we have also incorporated an information retrieval function into our hash structure for fast retrieval of the annotation data that accompanies genomic sequences. this can possibly help facilitate knowledge discovery through cross-species conservation of sequences.

RESULTS
algorithm efficiency and utility
we report three experiments in this paper; the first experiment demonstrates the efficiency of our algorithm while the second and third demonstrate the potentials to the life science community. our current implementation features a dual xeon  <dig>  ghz processor with  <dig> kb cache,  <dig> gb ram, and  <dig> gb eide  <dig> rpm hard drive.

experiment 1: efficiency study
for our efficiency study, a random number generator was used to select locations from within arabidopsis thaliana chromosome  <dig>  which is over  <dig> , <dig> base pairs. then a sequence was retrieved from each location. for each sequence length, ten thousand different sequences were obtained and searched. presently, our database consists of  <dig> different chromosome sequences from arabidopsis thaliana, haemophilus influenzae, helicobacter pylori  <dig>  helicobacter pylori j <dig>  homo sapien and saccharomyces cerevisiae. each chromosome was searched for each query. since we obtained query sequences from a chromosome within our database, we can expect to find at least one hit per query. the average search times and the average number of hits over all chromosomes for each query length are listed in table  <dig>  for instance, length  <dig> queries require approximately  <dig> seconds to retrieve  <dig> , <dig> hits on average. length  <dig> queries require just over one second to retrieve an average of  <dig>  hits while length  <dig> queries require approximately  <dig>  second to retrieve  <dig> hit on average. the discussion below details an explanation of these results.

experiment 2: refining repetitive sequence searches
our abstract mentioned that a whole genomic array analysis in yeast had revealed  <dig> pho-regulated genes. the promoter regions of all but one of them contain at least one of the two core pho4p binding sites, cacgtg and cacgtt  <cit> . using these sequences, we tried a simple test of the utility of our algorithm. first, the yeast genome was searched for both sequences without adding any annotation terms to find  <dig> total hits. assume that we are interested in learning more about these sites. we can try to focus the search by adding annotation terms. pho-regulated genes are involved in phosphate metabolism in yeast so the term 'phosphatase' was added to the search which narrowed the results to  <dig> total hits. we found  <dig> hits for cacgtg,  <dig> hits for cacgtt, and  <dig> hits for aacgtg . if the promoter region is defined as  <dig> base pairs upstream of the start codon, then cacgtg was located in  <dig> different promoters, cacgtt was in  <dig> different promoters and aacgtg was in  <dig> promoters. in other words,  <dig> genes in the yeast genome contain at least one of the two core pho4p binding sites in their promoter region and also contain the term 'phosphatase' in their annotation data. this figure is  <dig> %  of the results reported in reference  <cit>  and gives a high level of confidence for further investigation of these genes. if the promoter region is extended by  <dig> base pairs, then there are  <dig> more hits – protein ids  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig>  these searches were repeated for the other genomes in our database and the results are shown in table  <dig> 

experiment 3: cross-species study
in this experiment, the findings from a published work involving phase-variable sites in helicobacter pylori were used as an impetus to identify a potentially new phase-variable site in haemophilus influenzae. furthermore, there is supporting evidence for the new site in another published work involving haemophilus influenzae. although the experiment presented is specific to phase-variable sites in two species of microorganisms, the methodology is flexible enough to be applied to other similar biological problems.

a recent study  <cit>  of helicobacter pylori  <dig> and j <dig> reported  <dig> candidate phase-variable genes that were identified by either having a homopolymeric tract greater than or equal to  <dig>   <dig>   <dig>  and  <dig> or having a dinucleotide repeat greater than or equal to four copies. seven of the  <dig> genes reported in the study were classified as lipopolysaccharide-biosynthesis related. a search of our database was conducted for the same set of repetitive sequences in the same species. we refined the search by concurrently searching for the term 'lipopolysaccharide' similarly to the previous experiment. the search returned eight distinct genes – two of them  were identified by having a  <dig> repeat in their open reading frames. this finding was used as an impetus for a new search in a different species.

assuming that  <dig> also plays a role in the phase-variable properties of lipopolysaccharide genes in other microorganisms, a search for  <dig> was conducted in haemophilus influenzae. of the  <dig> total hits, one gene  is described as a 'lic- <dig> operon protein'. this gene is a lipopolysaccharide biosynthesis-related gene because 'lic-1' is a homologue of lipopolysaccharide and 'operon' is a group of closely linked genes that produces a single messenger rna molecule in transcription. the paper by hood et.al.  <cit>  reports three phase-variable lipopolysaccharide biosynthesis genes  in haemophilus influenzae that were identified by multiple  caat repeats. a search for  <dig> in haemophilus influenzae with a concurrent search for 'lic-1' returned protein id  <dig> which abuts to protein id  <dig> and is part of the same operon. thus, the 'lic- <dig> operon' of haemophilus influenzae contains both  <dig> repeats as well as  <dig> repeats – separated by approximately  <dig> base pairs.

a molecular biological analysis would be required to verify whether the  <dig> repeat in the lic- <dig> operon plays a role in phase-variability, but since it is known in helicobacter pylori  <cit>  it might also in haemophilus influenzae. the purpose of the experiment in this paper is to illustrate how cross-species searches using our database can quickly help discern hidden correlations in the data.

the search algorithms presented here are available on our web site  <cit>  so that users can conduct experiments similar to the ones presented above. users wanting a brief introduction to the web site can read the paper  <cit> . the current paper describes the hash function in detail and gives example searches. here we also present detailed experiments which are not found in the previous paper that demonstrate the usefulness of our approach to the research community.

discussion
our hash function described below processes dna words that are eight bases in length. therefore, length  <dig> queries will retrieve one hash bin in an average of  <dig>  seconds. length  <dig> queries must retrieve  <dig> contiguous hash bins because there are  <dig> possible combinations that make a length  <dig> query into a length  <dig> query. for longer queries, although the query lengths double, the search times do not because the recursive search function has been optimized to reduce io operations. when it has been determined that the query is not present, no further io operations are performed. the search times presented grow at o time, where n is the number of chromosomes searched. the chromosomes are searched sequentially so searching a very large number of chromosomes should be possible with our system. after the hits have been retrieved for the current chromosome, its pages are free to be swapped by the operating system.

CONCLUSIONS
we have presented a novel algorithm for homology searches in dna sequences. our hash function approach can quickly locate exact matches with a query sequence of any length. also, our new search engine has several information retrieval features to assist researchers in finding functional homologies across species. several more data mining features are in development. as more species are added to our database, we anticipate a richer data mining experience for the life science research community.

