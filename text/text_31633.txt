BACKGROUND
at least  <dig>  genomes have now been sequenced and released to the public, the vast majority of which are microbial genomes. for example, the seed currently contains over  <dig> bacterial genomes that have been completely sequenced .) for several years now it has been realized that the most efficient and accurate way of annotating these genomes is not by considering each in isolation, but by comparing them all together in unified integration platforms  <cit> . the seed http://www.theseed.org/ contains all publicly available genome sequences. the underlying set of databases includes functional annotations, subsystems  <cit> , and ec, reaction  <cit> , and go terms  <cit>  for proteins in all microbial genomes. the database also houses precomputed "all-versus-all" blast comparison of a non-redundant database , functional coupling data that describes genes that are linked together based on homologs in other genomes, links to other data resources, and so on  <cit> .

1draft genomes are incompletely assembled and contain more than  <dig>  bp of sequence.

the seed platform provides the underpinnings to several common microbial genome annotation services . the rapid annotation using subsystem technology  provides high throughput accurate annotations for complete microbial genomes  <cit> . the development of the rast server for complete microbial genome annotation provides consistent and accurate annotations, automatic connections to metabolic reconstructions, and detailed comparative genomics tools previously only available in limited environments. the metagenomics-rast produces high throughput annotations of random community genomes  <cit> . the development of an annotation pipeline for random community genomics  has opened the field to researchers, providing high-performance bioinformatics analysis previously only available to researchers with dedicated compute power. together the seed family are more than just databases, as they include all the data, the access methods, and the encodings. they are open source software, freely available to all researchers, and there are no restrictions on their use. they are frequently updated as new microbial genomes are released to the public, and annotated via the rast system  <cit> .

since their inception by the fellowship for interpretation of genomes , these tools were built around an open-source framework that encourages development of new tools and ideas. although the primary servers are maintained at argonne national laboratory and the university of chicago, several remote seed installations have been provided for groups requiring programmatic access to the seed data. however, the main difficulty with remote installations is the maintenance and constant updates that are required, often beyond the capability of the average bioinformatics group. a series of web services has therefore been developed to provide an api to the annotations of microbial genomes without requiring any downloads or installation.

soap services are available from ebi  <cit> , kegg  <cit> , and ncbi  <cit> . the existing methods were taken into consideration when developing the seed web services interface and our aim is to provide compatible services. however, as further web service apis are developed, a common set of methods, or a thesaurus to compare methods, should be defined to ensure maximum compatibility and computability between services.

to aid programmatic access to the seed family of services, an application programming interface  was developed based on the simple object access protocol  standard. here, we describe the basic implementation of the api, and provide example code to query the databases.

implementation
the web services are implemented as a perl abstraction to the seed database on the remote server, however the distal implementation does not limit the user's choice in language or implementation methods. the examples shown here include perl, python, and java, and many other programming languages support soap allowing the user to choose their favourite language for their implementation.

RESULTS
before the services are described, a couple of formalities about the underlying seed database are introduced. these are provided to orient new users of the database.

internal identifiers
the seed family of databases and services has their own internal identifiers, called fig identifiers , in the format fig|xxxxx.i.type.yyyy. in this representation, the fig| denotes that it is a fig internal identifier, the xxxxx is usually the ncbi taxon id of the genome, the .i is the increment of the genome , the type is the feature type, and the yyyy is the number of the feature on the genome. feature types are typically peg , rna, pp , pi , and so on. the feature type is lower case, and the number is usually incremented along the chromosome. however, features that are inserted will get the next available, unused, feature number, and the numbers from deleted features are not recycled. therefore although features with adjacent numbers are usually adjacent to each other on the chromosome, that is not guaranteed.

thus, "fig| <dig> .peg.4400" refers to the 4400th protein encoding gene in the 1st increment of the genome with taxonomy id  <dig> . the functional annotation of this protein is "Î²-subunit of the dna-directed rna polymerase ". the identifier "fig| <dig> .rna.23" refers to the 23rd rna feature of the same genome. for simplicity, these two examples are used throughout this discussion. the genome identifier in this case is  <dig>  . for access to web pages and user controlled material, the link-in urls based on http://www.theseed.org/linkin.cgi provide access to pages related to the genome, proteins, subsystems and associated data. for example, http://www.theseed.org/linkin.cgi?genome= <dig>  links to the organism overview for vibrio cholerae o <dig> biovar eltor str. n <dig>  and http://www.theseed.org/linkin.cgi?id=fig| <dig> .peg. <dig> links to the page related to the protein sequence.

external identifiers
in addition to these internal identifiers, the seed database maintains mapping to other commonly used identifiers wherever possible. for example, the peg shown above also has the following aliases: geneid: <dig> np_ <dig>  vc <dig> gi| <dig> gi| <dig> kegg|vch:vc <dig> sp|q9kv <dig> uni|q9kv <dig>  typically, the source database is abbreviated, precedes the identifier, and is separated from the identifier with a vertical bar .

accessing the seed via web services
the web services api provides ready access to commonly used methods to retrieve sequence and related data from the underlying database. an appropriate web services description language xml  file must be retrieved to discover which services are available. this file contains required information about each call, and informs the soap client of urls and namespaces for the servers, procedures that are available, and parameters required for those calls. wsdl files are often generated statically, and have to be updated to reflect changes to the api. in contrast, the seed wsdl files are dynamically generated from the publicly exposed methods at the time of calling, and thus the files are constantly current and updated as new methods are exposed. the currently available list of methods that can be used for web service calls, their input parameters, and their output strings are shown in table  <dig> 

the examples discussed below all use perl http://www.perl.org/ and the soap::lite perl module available from http://search.cpan.org/. in the examples below we use the simple soap::lite interface making http calls via port  <dig>  this will be sufficient for most api calls, and more details about the soap::lite interface can be found online or in the o'reilly programming web services with perl  <cit> . python and java code that works with the web services interface is included in the online examples.

to initiate a connection using perl and soap::lite, the constructor soap::lite->service is provided the url for the publicly available wsdl file. the dedicated web services server machine at http://ws.theseed.org/ is optimized for handling web services calls rather than user-initiated calls . the constructor generates method stubs that can then be called as methods of the service. most commonly used methods are described below.

searching the seed
to search the seed, two different access methods are provided. the simple_search accepts a query string, and returns all data that matches the string. for example, searching for "vc0328" returns the text separated by tabs as shown in code  <dig> in the additional file  <dig> 

the first item is the internal identifier, and the second the genome from which it came. the third item is a list of all other aliases for this peg. the alias list is constructed based on sequence identity  <cit> . fourth is the functional annotation of the protein, and the last item is the person that made the annotation - in this case a master  annotator made the annotation.

the second method provided for searching the seed is via search_and_grep. this method takes two arguments, the first is what to search for, and the second is a regular expression that should be found within the search string. this provides a server-side mechanism for reducing the output of the search. for example, a simple_search for dnaa returns  <dig>  items, but a search_and_grep for "dnaa" and "vibrio" reduces the list to  <dig> items .

working with genomes
to retrieve all the genomes in the current instantiation of the seed database, a call to genomes is made. this method takes three optional constraints, the first is a boolean, if true only "complete" genomes will be returned, if false all genomes will be returned. the second, is a set of restrictions that can be applied on a genome-by-genome basis, and the third option is a domain to return . the block of code shown in code  <dig> in the additional file  <dig> returns all complete bacterial genomes in the seed. the same code is shown in java, python, and perl to demonstrate the portability of the web services approach.

the returned data is an array of tuples of  separated by a tab. additionally, the genome name can be retrieved using the genus_species call, that accepts a genome id as its sole argument.

for any genome id, every protein encoding gene  of the genome can be retrieved by using the call pegs_of. this simply returns a list of fids in each genome that can be parsed using the methods described below. as noted above, the pegs are typically in numerical order along the chromosome but that is not guaranteed as pegs may be added to fill in missing genes. the method adjacent takes a list of pegs and sorts them in order along the chromosome. thus, the combined call shown in code  <dig> in the additional file  <dig> will return a list of ordered pegs. of course, as shown below, the location of each peg can be retrieved and sorted locally by the user, if desired.

working with genes and proteins
many methods are available to retrieve the data underlying the seed, and most work at the level of the protein. as noted above, both internal and external identifiers are maintained, but typically api requests are made with internal identifiers , as shown here. simple functional calls include the ability to retrieve the location of a fid on a contig, the dna or protein sequence, the annotation, as shown in table  <dig> 

for example the block of code shown as code  <dig> in the additional file  <dig> will retrieve the location of the sequence , and the protein sequence of the peg from vibrio cholerae. the protein sequence is in fasta format, suitable for feeding into other bioinformatics applications. similarly, the fid2dna method returns the dna sequence in fasta format.

an underlying resource in the seed database is the precomputed coupling of proteins along and between genomes  <cit> . coupling is an evidence-based metric of the co-occurrence of any pair of proteins in unrelated genomes, and infers that proteins are involved in the same cellular process. coupling evidence is one of the pieces of information seed annotators use to infer function. two methods are currently provided to return coupling data. first, coupled_to takes a given peg and returns a list of pegs that it is coupled to, along with a normalized score for that coupling  <cit> . the score is the number of genomes in which similar coupling is retained in nearby pegs.

the second method, abstract_coupled_to is related to the coupling. coupling requires that two genes co-occur near each other on two genomes, however we realized that sometimes genes co-occur but are not next to each other. abstract coupling does not require that two genes be adjacent in a genome if there is evidence from other genomes that suggests that the genes are adjacent. this "abstract evidence" can be used to assert related functions. as shown in table  <dig>  the direct coupling shows genes that are related to fig| <dig> .peg. <dig>  both in terms of location and function. the abstract coupling identifies the same related genes, but also identifies near neighbors that are implicated by distant genomes, but are not neighbors in v. cholerae n <dig> 

1these proteins are not coupled directly.

the seed contains precomputed similarities for all proteins compared to all other proteins in the database. this is maintained essentially as the tabular output from ncbi blastall  <cit>  appended with the length of the query protein and the length of the database protein and the method used to identify the similarity. the sims method takes a peg and returns everything that is similar to it, within the optional limits provided by the user. two limits are supported, the maximum number of similarities returned and the maximum expect  value for the sims. thus, when executed the code shown in code  <dig> in the additional file  <dig> returns the output shown in table  <dig> 

key:


database: database sequence identifier

p: percent similarity

l: alignment length

g: gaps

m: mismatches

qs: start in the query sequence

qe: end in the query sequence

ds: start in the database sequence

de: end in the database sequence

e: e value

bs: bit score

ql: query length

dl: database length

me: method

timing web services
the major drawback to the web services approach to computational biology is the significant delay that may be incurred accessing and retrieving data. this is particularly exacerbated in bioinformatics applications where often very many small calls need to be made . two tests were developed to quantify this delay and provide an estimate of the additional burden of using the web services interface compared to direct access to a local installation of the api. the web services were used to access machines at argonne national laboratory from san diego state university, representative of a typical use of web services to access data. in the first example the dna sequence was retrieved for each of the complete bacterial genomes in the seed database, and the time required compared to the length of the sequence. as shown in fig.  <dig>  access times are linear with respect to sequence length, showing that there is minimal delay in instantiating the backend and accessing the data. the web services approach takes approximately ten times longer to access the dna sequence than direct access, but still remain at microseconds per base, placing relatively complex calculations within the realm of realistic computation time. secondly, a real-world example was used to compare the computational speed using web services and direct access to the data. the shannon.pl code provided online is the perl code to compute shannon's uncertainty index  <cit>  on intergenic and genic dna sequences for an entire genome. a minor modification of the script that just redirects the web services call to a local instantiation  was used to compute the same analysis with local access to the data. each calculation was run five times independently on different days and at different times to calculate the uncertainty of intergenic and genic sequences in v. cholerae. in each case, more than  <dig>  calls were made to the api. using local access to the api those calls and the computation took  <dig>  seconds , but using web services the computation took  <dig>  seconds . there is an overhead for using the web services, however the benefit is that there is no need to install or maintain a local copy of the data. therefore, accessing the data via web services maybe a more attractive and feasible alternative to maintaining a local installation if rapid computation is not an issue.

discussion
web services provide a mechanism for computational access to the data housed in our databases. the api allows all users to access our systems, retrieve data, and develop tools for mining genomes and metagenomes essentially without restriction. the api provides a flexible interface that has evolved in response to common requests for our end users and will continue to morph in response to demand. the primary advantage of accessing our data via the api is that the data are constantly updated. although stand-alone seed installations are available, almost as soon as the installation is complete, it is out of date and needs updating. in contrast, the web services access data that is mirrored nightly to ensure constant quality and timeliness.

the main drawback with using the web services approach to access the data rather than via a local installation is the additional overhead associated with transferring the data over the internet. accessing the data indirectly over a typical internet connection takes about ten times longer than having direct access to the data. however, as the computational processing time increases, those delays are mitigated. on the back-end, the overhead is being mitigated with server-side controls to limit the amount of data transferred. for example, the search_and_grep method described here significantly reduces the data returned from database searches. on the front-end prefetching the data, and maintain local caches of limited parts of the data may prove an attractive alternative to continually retrieving large data sets.

in this work to date, we have chosen to implement an rpc/encoded style of web service. there are two common web services approaches: rpc/encoded and document/literal  <cit> . the general advantage of the former is that it is significantly easier to implement and has a more "natural" style. for example, blast search results are returned as tab separated text, just as if they had been computed locally. the disadvantage is that it is much harder for the programmer accessing the data, as they have to individualize each call and the way the data is processed. in contrast, the document/literal style uses xml for both the call and response. the xml returned is self-descriptive and self-validating, allowing more automated analysis of the data. currently we only support the rpc/encoded style of web services. in part it was a design decision based on the perl back end of the seed api . in addition, this decision allowed us to provide immediate unfettered access to our data while we develop and deploy the more formal document/literal style of encoding. we anticipate future releases of the seed web services api will move towards document/literal even while we continue to support the rpc/encoded style.

the current seed api does not limit access in any way. for example, there is no limit on how frequently calls may be made. however, too many repeated calls may be misconstrued as a denial of service  attack by the host, and therefore users are cautioned to throttle their requests appropriately.

we have provided many code examples both in the additional file  <dig> and online at http://ws.theseed.org/. the service is also included in the biocatalogue http://www.biocatalogue.org/ and future services will also be included there. users are encouraged to contact the authors to share code and to provide reusable code fragments.

CONCLUSIONS
the seed family of databases and associated software , are a comprehensive set of microbial genome annotation and analysis databases. every microbial genome sequenced to date is stored in these databases, and the annotation servers provide a flexible framework for both complete genomes and metagenomes. researchers are encouraged to try the programmatic access to the seed as an alternative means of retrieving data.

availability and requirements
â¢ project name: seed web services api

â¢ project home page: http://ws.theseed.org/

â¢ operating system: platform independent

â¢ programming language: language independent

â¢ other requirements: soap

â¢ license: seed toolkit public license

â¢ any restrictions to use by non-academics: no limitations

abbreviations
fid: ; fig: ; mg-rast: ; rast: ; seed: .

authors' contributions
td and re developed the web services and wrote most of the example code. sa developed the shannon.pl code and performed the efficiency tests. dc developed and tested the java code. all authors have contributed to instantiating, testing, and using the services and the underlying databases. all authors contributed to, read, and approved the final version of the manuscript.

supplementary material
additional file 1
example code snippets. the additional file contains example code in perl, python, and java that demonstrates how to access the seed using soap.

click here for file

 acknowledgements
part of this project has been funded with federal funds from the national institute of allergy and infectious diseases, national institutes of health, department of health and human services, under contract no. hhsn266200400042c.

we thank the beta-testers of this service especially bahador nosrat and scott kelley at san diego state university.
