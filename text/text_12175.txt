BACKGROUND
high throughput screening  technologies are commonly understood to encompass assays that generate tens of thousands of data points, usually acquired in 96-, 384-, or 1536-well microplate format. use of hts technologies is becoming standard in academe to identify small molecule research tools and to support genome-scale rnai screening  <cit> . high throughput screening facilities are expensive to establish and maintain due to the cost of laboratory automation, screening libraries, and personnel. thus, many organizations create economies of scale by providing shared "core" hts facilities to support multiple screening projects run by multiple research groups. such facilities require an informatics infrastructure that supports access to and analysis and sharing of experimental data.

in the case of the iccb-longwood/nsrb screening facility  <cit>  and  <cit>  at harvard medical school, which was one of the first high throughput screening facilities established in academe, the informatics infrastructure had developed into an ad hoc, divergent set of independent web applications, databases, and file repositories. to address the diverse experiment- and administrative-based requirements of the facility, while simultaneously addressing the need to unify its data storage and access infrastructure, the iccb-longwood/nsrb facility initiated development of the screensaver web application.

screensaver aids an hts facility by managing the data for its libraries and reagents, its screening experiments, along with the screeners and daily activities associated with these experiments, the generated raw and annotated data, and the follow-up requests for reagents to be cherry picked from library stock plates. a sample screening workflow and its interface with screensaver is diagrammed in figure 1a. additionally, screensaver allows users to perform cross-screen comparisons across screen result data and third-party annotation data, which is available from databases such as pubchem  <cit> , drsc  <cit> , genomernai  <cit> , chembl  <cit> , and chembank  <cit> .

implementation
screensaver is a database web application written in the java programming language. the software has been developed using free, open source software technologies, including the postgresql relational database system  <cit> , hibernate  <cit> , spring  <cit> , apache myfaces  <cit> , facelets  <cit> , and the apache tomcat servlet engine  <cit> . the system's architecture thus incorporates technologies and design techniques that are intended to facilitate rapid modification of the software, including a clearly-defined domain model implementation, an object-relational mapping framework, a component-based web user interface, and a dependency injection framework. these architectural aspects, described below in more detail, have helped the developers update the software in response to the quickly evolving informatics requirements of our hts facility. the architecture has also benefited other hts facilities that have already adapted screensaver for their own use .

domain model
screensaver employs a domain-driven design  <cit>  where the conceptual domain model  <cit>  upon which it based is explicitly represented within the structure of the software. the domain model layer forms the foundation of the screensaver application and is comprised of entity definitions  that specify the properties, relationships, constraints, and operations for each entity type. meta data, in the form of java annotations, are also specified on each entity and used by hibernate to map the entity properties and relationships to a physical database schema, which can then be automatically generated. as hibernate provides the implementation of all persistence operations, changes made to the domain model do not require developers to update database access code. most service-layer and presentation-layer dependencies upon the domain model can be detected at compile-time, so that the impact of domain model changes can be reliably determined and addressed by developers.

since the domain model is defined as a set of java-based entity classes whose persistence behavior is automatically managed, custom data import and export utilities can be readily developed without writing database-specific code or sql statements. import and export routines can be written directly in terms of the java entity classes that represent the data needed. at iccb-longwood/nsrb, we found this design to be a significant help during the task of migrating data from the legacy systems that were in use at our facility. other facilities that need to migrate data into or out of screensaver should realize similar benefits.

high-level, facility-specific operations that manipulate the domain model entities are placed into separate service, policy, and input/output layers. this design allows the domain model layer to remain a canonical representation that can be more readily adapted for use in new screensaver deployments.

the primary entities of the screensaver domain model are highlighted in figure 1b and are described in more detail in the results and discussion section, below.

web application technologies
the screensaver web application is deployable to a tomcat  <dig>  servlet engine. use of the spring application framework provides screensaver with the necessary "enterprise services," including database connectivity and transaction management. the spring framework technology also provides screensaver with a high-level, xml-based application configuration, offering a mechanism by which screensaver can be customized for new deployments. for example, an alternate data access policy or user authentication mechanism can be specified with minimal effort. the pairing of spring and tomcat provide a simple yet powerful web application environment that avoids the use of more sophisticated, and harder to administer, application servers.

screensaver's user interface is based upon the javaserver faces and facelets web development technologies, allowing its web pages to be defined in terms of reusable templates and high-level components. for users, this results in a consistent "look and feel" across the application. for developers, the web page definitions are concise and easily interpreted, which facilitates modification. finally, as javaserver faces allows its user interface components to "bind" their data contents directly to the domain model abstraction, the user interface can be readily updated in response to domain model changes.

data tables
data tables are employed throughout screensaver's user interface. as data tables are implemented in terms of a reusable ui component, each instance provides a consistent, feature-rich user interface element for browsing, filtering, and exporting data of a particular type. data tables provide the user with paging and sorting controls, multi-column searching/filtering , column selection , and data export to applicable file formats .

internally, the data table framework allows each column to be defined in terms of the domain model entity property  it represents. this allows developers to quickly update data table declarations to reflect changes in the model, and also allows the framework to automatically generate the database queries needed to populate a table's contents. the model-based column bindings are strongly typed, allowing the data table user interface to provide type-safe filtering and sorting operations for numeric, textual, and boolean data, controlled vocabularies, and other special-case fields, such as well volumes and reagent concentrations. finally, the framework scales to handle large data sets by loading only viewable data on-demand and minimizes the computational expense of filtering and sorting over large data sets by delegating these functions to the database layer, when necessary.

a data table can present data from multiple, related entity types, providing the user with sophisticated, customizable "views" into the domain model. for example, for an rnai library, screensaver's "library contents browser" data table joins together entity properties from the library's wells, the rnai reagent in each well, the gene targeted by each rnai reagent, and experimental result data from any screen that tested the well's reagent. note that by supporting side-by-side viewing of screen result data from multiple screens, this data table functions as a general mechanism for comparative analysis.

user permissions
as screensaver is intended to service a broad group of users, including screeners and staff, it has been designed to provide selective access to data and associated functionality using a role-based system. user interface functions are exposed or hidden, as necessary, based upon a user's assigned data access roles. staff members may be granted roles that control the types of data they are allowed to create and modify. similarly, screeners may be granted data access roles that control the extent of data that they may access from others' screens.

to calculate data accessibility rights from user roles, screensaver provides a pluggable data access policy mechanism where data access rights are enforced on a per-entity instance basis. as these policies are defined via java code, sophisticated policies can be implemented by developers that take into account both user roles and the state of data. for example, the data access policy currently in use at iccb-longwood/nsrb supports varying levels of mutual data sharing among screeners, such that screens of a given data sharing level are made accessible to users with sufficient data access roles. this creates a tiered data access policy where screeners that are willing to share more aspects of their own screening data  are allowed to access similar levels of data from other screens.

screeners that prefer to keep their data private are also accommodated and, similarly, do not have access to others' data and protocols.

RESULTS
screensaver features can be partitioned into the following categories that, by design, mirror the primary entity types of the underlying domain model: users, libraries, screens and studies, cherry pick requests, and activities . each of these primary entity types may be browsed or searched via the standard data table user interface, while the creation, viewing, and editing of entity details is accomplished via separate "viewer" pages.

users
screensaver manages two categories of users, screeners and staff. all user accounts are associated with data access roles. roles for screeners control the types and levels of data access that are available to them. roles for administrators are used to selectively provide data modification permissions to specific staff members, helping to ensure data integrity and enforce the facility's workflow conventions. a special "screensaver user login" role is used to grant or revoke login privileges to both screeners and administrators.

for screeners , screensaver maintains contact information, relevant id numbers, user classification , lab affiliation, and a list of project collaborators. a system-wide configurable list of "checklist items" is also maintained for each screener, allowing the facility to track the status of any number of required administrative tasks such as account setups, required equipment and safety training, and inclusion on mailing lists. finally, screensaver tracks the user's associated screens and the corresponding lab activities .

libraries
a primary function of screensaver is to manage the set of screening libraries that are maintained at the facility . a "library" entity represents a set of small molecule or rnai reagents and their layout in 96-, 384- or 1536-well microplates. the library entity includes the layout of control and other special purpose wells in the library stock plates. the reagents in a given library are intended to form a cohesive set that is arbitrarily grouped by supplier, target, biological function, chemical similarity, date acquired, or any combination thereof. a given reagent may exist in multiple libraries.

screensaver provides functionality to import, query, view, and export detailed information about each small molecule and rnai reagent. for both reagent types, screensaver maintains vendor information and plate/well locations. for small molecule reagents, screensaver additionally maintains common chemical names, structural representation  and molecular mass. it also maintains externally-assigned identifiers such as pubchem compound ids   <cit>  and chembank ids  <cit> , with appropriate links to the respective online resources. for rnai silencing reagents, information about the targeted gene is stored, including entrez gene  <cit>  and genbank  <cit>  identifiers, as well as targeted gene sequences.

from the well search results page , a user may locate reagents by querying on any of the reagent entity properties. users can also perform a batch search for a set of wells or reagents in a single operation, by providing a set of plate/well designations or vendor reagents identifiers, respectively. the well data can then be exported as an excel workbook or sd file for further analysis or communication of screen results. details about well contents can be viewed in the well viewer , including graphical rendering of small molecule structures.

the technical considerations of library storage and use  dictate that library reagents be aliquoted into working copies, for use in the screening facility. screensaver therefore tracks the copies that have been produced for each library. to handle considerations of library reagent aging and obsolescence, both individual library plates and individual reagent wells can be arbitrarily retired. when library copies are used to produce assay plates in the lab, screensaver tracks well reagent volume usage and reports on the remaining well volumes on library copy plates. if necessary, individual well volumes can be manually updated to reflect deviations between expected and actual volumes .

library well contents are imported from structure data files  <cit>  and microsoft excel files for small molecule and rnai libraries, respectively. for small molecule libraries, structure images can be imported for display on screensaver's well viewer page. screensaver provides utilities to add additional annotations to reagents  from online resources such as pubchem, entrez gene, and chembank. if updated data becomes available for a library, screensaver allows a new version of the library contents to be imported, while maintaining the old versions of the data for auditing purposes. this is particularly useful to handle the evolving nature of gene information, but has also aided in tracking vendor-provided corrections to well and reagent information.

screens and studies
as its name suggests, screensaver maintains a comprehensive record of the screens that are performed at an hts facility. a key requirement for screensaver is that it will store the screen information sufficient to interpret and reproduce each screening experiment. this sort of "minimal information" about a screening experiment is described in detail in the work of the mibbi  project  <cit> , in particular in the miaca   <cit>  and miare   <cit>  projects. screensaver does not currently fully match the miaca and miare recommendations, but we are working towards that goal.

in screensaver, a "screen" entity  tracks the progress of performing a screening assay, including a description of its biological significance, its experimental protocol, the raw data , and the screener-curated results. an important curated result of the screen is the set of "screening positive" reagents that have been identified as having the desired biological activity in the screening assay. each screen entity also maintains considerable meta data in order to support the administrative needs of the facility .

screening data are structured such that all experimental results for a given library reagent are presented in a single table row. stored raw screen result data are quantitative. currently, image data are not directly stored or managed by screensaver. for each reagent, the raw data is associated with one or more data collection dimensions, presented in independent columns, that include replicate number, readout time point, and assay readout technology . the raw data for each library reagent are generally normalized and scored  and these intermediate analytical calculations can be added to the screen result as additional data columns. the reagents that are identified as "screening positives" are so annotated in data columns using either boolean , "partitioned" , or threshold-based numerical values.

all of the above screen result data are imported into the system via the web application or a command-line utility, both of which accept a microsoft excel file conforming to screensaver's screen result import file format. once imported, all screen result data columns are viewable in a data table, which provides the expected sorting, filtering, and data export features . screensaver also provides a basic facility for viewing per-plate data as a heat map .

in addition to screens, screensaver provides a "study" entity type, the purpose of which is to maintain externally-available annotations for reagents, such as data provided by journal publications or public databases. the reagent annotations provided by a study allow biologically- or experimentally- relevant information to be utilized by screeners during analysis of their own screen result data. for example, a study might provide cell toxicity or fluorescence data on small molecule reagents, allowing a researcher to rule out reagents that might otherwise be considered positives. similarly, for rnai assays, a study might provide information about known or putative off-target effects of rnai reagents. study annotation data can be imported into screensaver using the provided command-line utility, which accepts an excel file conforming to screensaver's study import file format.

screensaver enables a user to make use of study data by adding one or more study annotations into a screen result data table as additional columns . by utilizing the data table's filtering and sorting functions, the user can assess the significance of these annotations. similarly, data from screens that have tested common reagents can be merged into a single data table. this provides a basic mechanism for performing cross-screen comparisons, thereby leveraging the screening data being warehoused by the facility. for example, this feature may be used to compare "screening positive" reagents or reagent-specific comments between related screens. information derived from this type of comparison might aid in the determination of whether different screens address functionally-related cellular pathways.

cherry pick requests
after a primary screen has been performed, screeners will generally perform follow-up validation assays to confirm the biological effects of screener-selected "positive" reagents. the reagents chosen for confirmation in the initial follow-up assay are "cherry picked" from library plates to form a custom sub-library plated for re-screening. the reagents chosen for this purpose constitute a "cherry pick request" and are plated in "cherry pick plates." for a small molecule screen, the number of compounds requested for cherry picking is typically  <dig> %- <dig> % of the total number of compounds screened in the primary screen. for genome-scale sirna screens, cherry pick requests can include reagents for 1%-3% of the total number of genes screened.

using the cherry pick request entity type , screensaver manages the following workflow to format cherry pick plates for follow-up experiments:

 <dig>  the screener initiates the process by submitting his cherry pick list as a set of library plate/well designations, which are then are entered into screensaver as a new cherry pick request. screensaver reviews the set of cherry picks and enforces policies on the cherry pick count, uniqueness, and availability . for pool-based sirnai libraries, screensaver automatically deconvolutes cherry picks into constituent individual rnai duplexes.

 <dig>  screensaver then reserves the specified volume of reagent from selected wells of library plates, ensuring that sufficient volume exists in each of the source wells. "unfulfillable" cherry pick wells can be rolled over into a new cherry pick request for later processing.

 <dig>  a machine-readable plate mapping file is then generated to layout the reagents into the wells of one or more cherry pick plates. this file is used by automation specialists to program the liquid handling instruments to carry out the cherry picks. the plate layout can be randomized, can keep arbitrary wells empty , and will order and batch together reagents by source plate in order to work effectively with lab automation.

 <dig>  as the cherry pick plates are produced in the lab, staff members can update screensaver to indicate the status of the production effort on a per-plate basis, so as to confirm  the reservation of reagent volumes, or to indicate a physical plating failure, which will repeat the reagent reservation and plate mapping workflow for the affected plates .

a cherry pick request data table allows staff to efficiently determine and organize pending requests and remaining work.

activities
screensaver introduces a hierarchy of "activity" entity types for tracking and auditing various events that occur in the lab and within screensaver itself, providing a general mechanism for maintaining the "who", "what", "when", and "why" for these events. split into two major subtypes, "lab activities" are used to represent actual events that have been performed in the laboratory by either screeners or staff, while "administrative activities" represent data-related updates and decisions made by the staff. while the hierarchy of activities is extensible, currently used types include:

• library screening : records the act of screening a set of plates, which can be used to calculate library copy usage statistics 

• cherry pick liquid transfer : records the act of creating cherry pick plates, for cherry pick request workflow management

• well deprecation : records the decision to flag sets of library wells as no longer being valid for screening

• well volume correction : records the decision to manually adjust the volumes for a set of wells

• checklist item event : records the completion or activation/deactivation of screener-associated "checklist items"

as each of the above activities are associated with a specific entity type , their information appears in appropriate areas of the user interface. however, activity data are also viewable en masse via a data table, for general viewing and reporting purposes.

current usage
screensaver has been in production use at the iccb-longwood/nsrb hts screening facility at harvard medical school since june,  <dig>  more recently, it has been implemented in screening facilities at the netherlands cancer institute   <cit> , jointly by the a*star institute of molecular and cell biology   <cit>  and bioinformatics institute   <cit> , the high throughput screening & translational research facility  at the fox chase cancer center  <cit> , and the cellular screening center  at the institute for genomics & systems biology   <cit> .

at iccb-longwood/nsrb, screensaver is managing a set of  <dig> small molecule and rnai screens, growing at a rate of approximately  <dig> to  <dig> new screens per week. the database contains over  <dig> million "raw" data values from screening instruments. more than  <dig>  screeners are managed by the system, most having user accounts with login privileges. managed libraries contain over  <dig>  distinct silencing reagents  and more than  <dig>  small molecule reagents.

future work
screensaver is being actively developed and continuously improved. because many screeners require guidance with data quality assessment and result analysis, screensaver development efforts are shifting to address these needs. currently, data analysis tasks are performed by external software applications, and the resultant data are simply imported into the system. however, integration of screensaver with third-party analysis tools, such as the open source cellhts  <cit>  data analysis package is underway. for example, cellhts integration will provide standardized mechanisms for scoring and normalizing raw data, as well as providing quantitative and graphical quality metrics, including normalized plate intensity, heat maps, and assay robustness metrics. another future focus will be improved support for cross-screen comparisons, including per-reagent aggregate counts of "positives" across all screens, incorporation of validation screen results, and, potentially, dynamic incorporation of data from public databases, such as pubchem bioassay  <cit> , chembl  <cit> , and genomernai  <cit> . to facilitate data sharing with the greater hts community, we intend screensaver to provide functions for automating the publishing of selected data to public databases.

in response to feedback from a growing community of open source collaborators, screensaver may become further modularized in design and deployment configurations, and may implement additional design strategies to minimize the effort needed to configure facility-specific policies and extend the data model to meet facility-specific requirements. finally, due to the maturation and growing awareness of the mibbi standards  <cit>  for experimental reporting, we intend screensaver to provide interoperability with the prescribed data formats. to this end, the structure of the screening protocols, now stored as a text , will need to be broken out into discrete fields.

CONCLUSIONS
to support a high volume of interleaved screening projects, an hts facility requires a sophisticated informatics and administrative infrastructure that may be best managed by a single, integrated, web-accessible application such as screensaver. as screensaver has proven useful in servicing the needs of the iccb-longwood/nsrb facility, it may provide similar benefits to other hts facilities.

screensaver was originally developed for the specific needs of the iccb-longwood/nsrb facility, however, the design of the system has already allowed other groups with appropriately skilled informatics developers to adopt and customize screensaver to meet the needs of their hts facility. in particular, the separation of the domain model layer from the technical infrastructure, the use of a component-based user interface framework, and the integration of a sophisticated data table component combine to make the software easy to adapt and extend. with the project team's commitment to this maintainable and extensible design, paired with the efforts of a community of facilities providing feedback and contributions via the open source development model, screensaver will continue to accommodate the growing needs of high throughput screening facilities.

availability and requirements
• project name: screensaver

• project home page: http://sourceforge.net/projects/screensaver/

• operating system: platform independent

• programming language: java

• other requirements: java se  <dig> , tomcat  <dig> , postgresql  <dig> 

• license: gnu gpl2

• any restrictions to use by non-academics: none

authors' contributions
ant wrote this paper and has been developing the software since april,  <dig>  jps and jlm initiated the project and developed the software through april,  <dig> and april,  <dig>  respectively. sde has been developing the software since october,  <dig>  dw, slc, kr, sr, jn, lms, dg, and ces contributed intellectual effort towards the design of the domain model and data workflows, aided in the determination of feature requirements, and contributed feedback for this paper. all authors read and approved the final manuscript.

