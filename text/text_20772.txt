BACKGROUND
the inference of evolutionary trees with computational methods has many important applications in medical and biological research, such as drug discovery and conservation biology. a rich variety of tree reconstruction methods based on sequences have been developed, which fall into three categories,  maximum parsimony methods,  distance based methods and  approaches applying the maximum likelihood principle. the latter two are the most popular. distance based methods calculate pair-wise distances between the sequences with each other, and support the tree that best fits these observed distances. the prominent distance based method is neighbor joining   <cit> , in which partial trees are iteratively combined to form a larger tree in a bottom-up manner. due to low computational time complexity and demonstrated topological accuracy for small data sets, nj and its variants have been widely used.

maximum likelihood methods aim to find the tree that gains the maximum likelihood value to have produced the underlying data. a number of studies  <cit>  have shown that maximum likelihood programs can recover the correct tree from simulated datasets more frequently than other methods, which supports numerous observations from real data and explains their popularity.

however, the main disadvantage of maximum likelihood methods is that they require much computational effort. maximum likelihood reconstruction consists of two tasks. the first task involves edge length estimation: given the topology of a tree, find edge lengths to maximize the likelihood function. this task is accomplished by iterative methods such as expectation maximization or using newton-raphson optimization. each iteration of these methods requires computations that take on the order of the number of sequences times the number of sequence positions. the second, more challenging, task is to find a tree topology that maximizes the likelihood. the number of potential topologies grows exponentially with the number of sequences n, e.g. for n =  <dig> sequences there already exist  <dig> * <dig> alternative topologies; a number almost as large as the number of atoms in the universe . in fact, it has already been demonstrated that finding the optimal tree under the maximum likelihood criterion is np-hard  <cit> . consequently, the introduction of heuristics to reduce the search space in terms of potential topologies evaluated becomes inevitable, such as, the hill climbing based reconstruction algorithms  <cit> ; the genetic algorithm based ones  <cit> , etc.

although using different search strategies, the heuristics are all to try to improve a starting tree/starting trees by a series of elementary topological rearrangements, until local optima is found. it is obvious that the performance of the heuristics depends on the degree of exhaustiveness of the topological rearrangements on some extent. the three often used topological rearrangements include nearest neighbor interchange , subtree prune and regraft  and tree bisection and reconnection .

the nni move swaps one rooted subtree or leave on one side of an internal edge e with another on the other side. for every internal edge, a nni move can produce two different topologies as shown in figure  <dig>  for a tree containing n sequences, the size of the neighborhood induced by nni is o. the neighborhood of an evolutionary tree t under a topological rearrangement move is defined as be the set of all trees that can be obtained from t by one move.

a spr move on a tree t is defined as cutting any edge and thereby pruning a subtree t, and then regrafting the subtree by the same cut edge to a new vertex obtained by subdividing a pre-existing edge in t-t. for a tree containing n sequences, the size of the neighborhood induced by spr is o.

in a tbr move an edge is removed from t, creating subtrees t and t-t, and then a new edge is added between the midpoints of any two edges in t and t-t, creating a new tree. for a tree containing n sequences, the size of the neighborhood induced by tbr is o. see figure  <dig> for schematic representation of spr and tbr.

as shown above, the neighborhood size produced by nni, spr and tbr acting on an evolutionary tree t comprising of n sequences is o, oand o respectively. thus, tbr are the most exhaustive. even tbr searches, however, can often get trapped in local optima, since there are not many trees accessible in one step from any given tree, which motivates the introduction of p-edge contraction and refinement   <cit> . a p-ecr move means to contract p edges all at once, creating unresolved nodes in the process, then refine these unresolved nodes to give back a binary tree. a contraction collapses an edge in the tree and identifies its two end points, while a refinement expands an unresolved node into two nodes connected by an edge. for example, the trees t <dig> and t <dig> in figure  <dig> are separated by one 2-ecr move. from the definition of p-ecr, nni is the special case of p-ecr when p equals to  <dig> 

let su be the number of unresolved nodes produced in p-ecr and di the degree of the unresolved node i, since the number of trees produced by n sequences is !!, refining the unresolved nodes can produce ∏i=1su!!) different trees. when p edges are deleted from a tree, the location relationship between the deleted edges determines the number of unresolved nodes produced and the degrees of the unresolved nodes. now two extreme special cases are analyzed.

the first extreme special case is when all the p edges are adjacent. in this case, only one unresolved node with degree- is produced. then the number of trees produced by one p-ecr is !!. another extreme special case is when all the p edges disjoin. in this case, p unresolved nodes with degree- <dig> are produced. then the number of trees produced by one p-ecr is !!)p, that is 3p.

in other cases, the number of possible trees produced is intermediate of the two special cases. observe that there are cnp ways of selecting p edges to contract, there are Ω trees produced by p-ecr. thus, although an every sequence of p nni moves on a tree is a p-ecr move on that tree, there are p-ecr moves that can not be performed by a sequence of p nni move). with such a wide search space, getting trapped in bad local optima can often be avoided, resulting in an exhaustive local search. moreover, the exhaustiveness degree of a p-ecr move is dependent on the value of p, that is, a larger p means a larger search space for the correct tree, which could be potentially useful in selecting a suitable range of p.

however, how to quickly select the best one from so many possible evolutionary trees is a hard problem facing the p-ecr move, since there are so many potential topologies to evaluate and it is very time-consuming to compute the likelihood of a given topology as mentioned above. the straight answer is to simply evaluate every potential tree and select the best. even for medium size of p, the answer is apparently impossible. until now, there is no an efficient and general implementation of p-ecr. consequently, people often yield up the exhaustive p-ecr and turn to some simpler one, such as nni. in order to make p-ecr efficient, a method called p-ecrnj motivated by nj is presented in this paper. the main idea of p-ecrnj is to use nj to refine the unresolved nodes produced in p-ecr. in this paper, we use nj to refine the unresolved nodes to improve p-ecr.

nj
nj is a greedy algorithm, which attempts to minimize the sum of all branch-lengths on the constructed tree. conceptually, it starts out with a star-formed tree where each leaf corresponds to a sequence, and iteratively picks two nodes adjacent to the root and joins them by inserting a new node between the root and the two selected nodes. when joining nodes, the method selects the pair of nodes i, j that minimizes

  qij = dij -  

where dij is the distance between node i and j, rk is the sum over row k of the distance matrix: rk = ∑xdkx , and r is the remaining number of nodes adjacent to the root. once the pair i, j to agglomerate is selected, a new node c which represents the root of the new cluster is created. then the length of branches  and  is estimated by the following eq. 

  dci= <dig> dcj= <dig> 

finally the distance matrix is reduced by replacing the distances relative to sequence i and sequence j by those between the new node c and any other node k using

  dck= <dig> 

this formulation of nj gives rise to a canonical algorithm that performs a search for mini, jqij, using time o, and joins i and j, using time o to update d. the search and joining is continued until only there three nodes are adjacent to the root. the total time complexity becomes o, and the space complexity becomes o . an example of nj is illustrated in figure  <dig> 

with a running time of o on n sequences, nj is fast and widely used. moreover, empirical work shows it to be quite accurate, at least for small data sets. st. john et al.  <cit>  even suggest it as a standard against which new phylogeny reconstruction methods should be evaluated. in this paper, we use nj to refine the unresolved nodes to improve p-ecr.

RESULTS
in order to test p-ecrnj, we conducted experiments on real datasets to compare the heuristic ecrml and ecrml+phyml with four most popular reconstruction methods, including bionj  <cit>  , phyml version  <dig> . <dig>  <cit>  , raxml-iii <cit>   and fastdnaml version  <dig> . <dig>  <cit>  . ecrml is the heuristic base on p-ecrnj and hill climbing as shown in methods. ecrml+phyml is the heuristic based on the combination of the p-ecrnj move with nni, where rounds of nni and p-ecrnj are alternated as follows. ecrml is called once each time the phyml is stuck on a local optimum. if the ecrml is able to improve the tree and get out of the local optimum, the phyml is applied again until it is trapped in another local optimum, etc. when a pre-defined times is reached or ecrml cannot find an improvement anymore either, the program terminates. the real datasets include the ones used in  <cit> , in particular, mouselemurs, 4dat, 3dat,  <dig>  rbcl <dig>  101_sc,  <dig>  150_sc, 150_arb, 218_rdpii, 250_arb and 500_zilla. table  <dig> shows the number of sequences and the number of sites for each dataset.

all the programs are run with default options. in addition, the parameter p in ecrml and ecrml+phyml is set as  <dig> and iteration times as  <dig>  computing time is measured on a pc pentium iv  <dig>  ghz running with windows xp.

since the bionj cannot compute the likelihood values of final trees and there is a difference between all the maximum likelihood algorithms in the way of likelihood computation, all final trees found by bionj, phyml, raxml and fastdnaml are re-evaluated using ecrml to enable a direct comparison. the main results are shown in table  <dig>  table  <dig> and table  <dig>  in addition, stars in table  <dig> and table  <dig> indicate entries where the algorithm was deemed to be too slow to bother with that test.

at the same time, we can also see from table  <dig> that although slower than the two fastest maximum likelihood methods phym and raxml, ecrml and ecrml+phyml are faster than fastdnaml, especially for large datasets.

CONCLUSIONS
we have proposed the p-ecrnj move, which can be used as a topological transformation in heuristics on evolutionary tree reconstruction algorithms by itself or can be used to improve local topological transforms. the p-ecrnj move first randomly select the p edges to contract from the current tree, and then refine the contracted tree to give back a binary tree according to the fast nj algorithm. experiments on real datasets show that the p-ecrnj in limited iterations can find better trees than the best-known maximum likelihood methods so far and can efficiently improve local topological transforms without much time cost. therefore, the p-ecrnj is an efficient implementation of p-ecr.

