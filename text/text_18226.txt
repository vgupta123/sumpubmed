BACKGROUND
the recent explosions in culture-independent studies of environmental dna sequences  and automated dna sequencing capabilities have prompted the creation of numerous software applications designed to aid the analysis of an avalanche of sequence data. however, many of the commonly used, freely available applications require some facility with the unix/linux operating system and/or specialized scripting languages to either manipulate files in batch or pipe data between applications. as automated dna sequencing and sequence analysis has become commonplace in laboratories that do not specialize in bioinformatics, need has arisen for the development of powerful, yet simple-to-use, software.

xplorseq, written for the macintosh os x operating system, provides a graphical user interface  that integrates the use of several popular unix-based dna sequence analysis applications. a number of additional features have been incorporated in order to track, annotate, and analyze sequence information in a manner conducive to high-throughput metagenomics. implementation of a common gui  eliminates the need for the user to possess the kind of knowledge generally restricted to bioinformaticists and computer professionals: unix/linux command shells  and associated scripting languages. by presenting a unified gui, xplorseq, simplifies sequence analysis projects by allowing the user to focus on science, rather than the details of disparate software.

xplorseq was developed for rapid compilation and analysis of rdna clone libraries, but should be applicable to any sequencing project . although several commercial and non-commercial software packages implement some of the same basic functionalities as xplorseq, the development of xplorseq was motivated by the absence of gui-based software designed specifically for high-throughput, batch analysis of rdna sequences, such as arise from culture-independent metagenomic studies. specifically, the extant software could not accommodate the phylogenetic orientation of analyses and sequence annotations that are most useful for metagenomics. in contrast, xplorseq implements several domain-specific software tools  that are not available in general-purpose dna analysis packages. many published studies, from a variety of laboratories engaged in metagenomics, have used xplorseq, and thereby established its stability, ease-of-use, and capabilities  <cit> . the software is freely available for non-commercial use at .

implementation
xplorseq is written in objective-c using the cocoa application framework . releases are compiled for the os x operating system  as universal binaries, which run natively on macintosh computers with intel or powerpc microprocessors. similar to cocoa, the architecture of xplorseq is based on the model-view-controller  design pattern. xplorseq is multi-threaded and can adjust its operation to accommodate multiple shared-memory microprocessors.

the rationale for implementing xplorseq as a standalone macintosh application involved 1) desire for a highly responsive, feature-rich graphical output, thus precluding web-based applications; 2) recognition that the bsd-unix operating system underpinning os x would allow leveraging of existing open-source software; 3) observation that many computer novices  were more comfortable with os x than other operating systems; and 4) the maturity, stability, and support inherent in the cocoa application framework.

third-party software packages and plugin executables  were written in c and c++. when possible, compiled executables are incorporated directly into the xplorseq application bundle  so that users can install and operate xplorseq without the need for local compilation or extensive configuration. full implementation of xplorseq requires separate installation of phred and phrap .

RESULTS
the following sections outline the data structures and analytic tools that form the basis of the xplorseq workflow.

data organization and gui architecture
xplorseq uses a document-based approach for project data management in which multiple sequences and their associated data are stored and accessed in a single file. as a project evolves, sequences may be added, deleted, amended and analyzed as needed. xplorseq does not enforce a highly constrained analytic schema and thereby grants the user more autonomy in designing and implementing an analysis plan than typically is possible in a hard-wired software pipeline.

data are organized as a hierarchy of data objects , which represent the model layer in xplorseq's model-view-controller design pattern architecture. each data object class  is associated with a window  that is used to inspect data associated with particular instances of the class.

the top layer data object is the "project", which stores all other data and is synonymous with the document as a whole. hence, the main xplorseq window  is the project inspector window. projects organize and manage lists of "clones", which represent individual cloned genes or pcr amplicons. clones, in turn, manage groups of "sequences" which map to unique dna sequences. sequences can be imported directly , read from dna sequencer traces, or assembled from other sequence objects . for each sequence analyzed by blast, xplorseq creates a "blastinfo" object that summarizes pertinent blast output data: identity and phylogenetic lineage of the sequence's closest blast hit, blast statistics, etc. each clone ranks its constituent sequence objects based on blast bit-score and the "best sequence"  serves as a proxy for the entire clone. "oligo" objects encapsulate data that describe oligonucleotide sequences used in construction of clone libraries.

one of xplorseq's more important design goals is to provide users with an extremely flexible and simple means of annotating data objects with meta-data consisting of user-specified information. xplorseq implements meta-data through two strategies: 1) hard-coded data objects  and 2) a customizable "metadata" object. metadata objects are implemented as key-value dictionaries  that can be linked to project, clone, and sequence data objects. users specify keys and values for particular objects through import of tab-delimited spreadsheets in which the first column designates the names of objects  and subsequent columns specify values  to attach to the objects. alternatively, object inspector windows provide gui-based features in which to display and edit meta-data .

data display and control of data processing
a project's clone, sequence, and blastinfo objects are displayed in the project inspector window , which functions as the main xplorseq window. data are arranged hierarchically to reflect nesting of data structures. for each clone, a summary of its best blast hit, which includes the taxa name, percent sequence identity and bit-score is displayed in the main xplorseq window. the phylogenetic lineage of the top blast hit can be imported  to provide information about the taxonomic placement of a clone.

the user controls all steps of data processing by selecting objects to be acted upon and then choosing a function from menu items presented in the tool panel that extends from the main xplorseq window . methods to import, export, and analyze data are accessible through these menus. below the menus lie controls through which oligonucleotides used to generate pcr libraries can be designated, if relevant to the project; entries in the oligo menus can be modified through a preferences dialog.

project specific meta-data can be recorded in several text fields presented in the project window, under the "project info" tab. an editable text box is presented in which the user can enter comments, for instance details specific to a project .

by double-clicking on an entry in the project window, the user can display and edit more detailed information associated with that entry. for example, the clone inspector window  summarizes the content of the clone object, including its top blast hit sequence and corresponding blastinfo object. the phylogenetic lineage and domain of the clone object can be set through the controls at the bottom of the window. a panel extending from the clone inspector window presents user-specified meta-data associated with the clone object.

dna sequences, including contig sequences, are displayed in a sequence inspector window . individual nucleotides are color-coded to represent quality scores generated by the base-calling software  or trimmed sequences . basic sequence information, such as primer sequences and trimmed sequence length, is displayed in a set of text fields at the bottom of the sequence inspector window. similar to clone objects, sequence specific meta-data can be viewed through a panel that extends from the inspector window.

tools for data import and analysis
1command line executables are listed in parentheses.

xplorseq facilitates batch blast  <cit>  analyses of dna sequences through both networked and local searches of nucleotide databases. local blast searches require properly formatted sequence databases, which may be downloaded from ncbi  or created by use of the formatdb executable . xplorseq dispatches sequences to the appropriate client software  and then parses the resulting output file into blastinfo objects.

xplorseq provides graphical interfaces for several commonly used command-line phylogenetic tools are shown in fig.  <dig>  phylip modules for distance matrix calculation, neighbor-joining/upgma trees, data-set bootstrapping, and consensus tree generation are accessible through these interfaces  <cit> . similarly, fast neighbor-joining and maximum-likelihood phylogenetic tree inference are available . in each case, following selection of the appropriate options, sequence data are exported in the required format, the analysis performed, and results imported  into xplorseq. for tasks that may take prolonged time to execute , a file listing the command-line invocation of the program is saved along with all data required for the task; these files can be transferred to another computer for subsequent execution of the scripted command.

otu clustering is implemented through the program sortx, which was written in tandem with xplorseq . sortx uses a fast radial clustering algorithm to bin aligned sequences based on uncorrected pairwise sequence distances . clusters can be assembled based on furthest-, mean-, or nearest-neighbor rules. following cluster formation, sortx selects a representative sequence for each cluster, which maximizes both pairwise similarity to other cluster members and sequence length . finally, the user can select a range of pairwise sequence distance thresholds by which to assemble otus in order to create multiple data sets at different phylogenetic depths.

estimates of biodiversity indices  can be reported through either of two modes. first, the export function otu diversity... reports basic calculations of commonly used indices  for a set of selected sequences. alternatively, the same biodiversity estimates can be made in a more thorough manner through execution of the analysis function biodiversity ..., which invokes the program biodiv, a standalone command-line tool built in conjunction with xplorseq. as shown in fig. 6g, the user selects otus definitions for the selected sequences through choice of meta-data options. to compare indices between different groups of sequences, the user can also select multiple "environments" by which to differentiate the sequence subsets; biodiv then performs separate analyses for each designated environment. biodiv performs random resampling of otus and calculates collector's curves and associated biodiversity indices as a function of sampling effort  <cit> . biodiv also reports rarefied biodiversity indices, based on resampling, with 95% confidence intervals for each type of environment  <cit> .

tools for data export and transformation
xplorseq provides several features by which to export sequences and data for further analyses. data reports are generated in tab-delimited format for import into spreadsheets. a particularly useful export feature tabulates sequence abundances and/or prevalences on the basis of user-defined terms that define how data are categorized and enumerated. for instance, as shown in fig.  <dig>  the user has opted to create a table in which rows are defined by meta-data that specify otus and columns are specified by meta-data that organize samples by the results of a pcr assay; alternatively, similar sequences can be grouped by blast results, or phylogenetic lineage. the cells of the output tables enumerate the abundance or presence/absence of sequences for a given row and column .

preparation of sequence data for submission to public databases can be tedious and error-prone, despite the availability of tools such as ncbi's sequin software tool. xplorseq can facilitate the submission process by automating the organization of sequences and their annotations into a form suitable for input into sequin . the user can modify the output of the sequin script export function to include or exclude particular information and to tailor genbank descriptors and/or features .

for detailed phylogenetic studies, sequences assembled by xplorseq can be exported in formats suitable for input into other software packages, such as arb  <cit> , dotur  <cit> , nast  <cit> , silva  <cit> , or unifrac  <cit> . users can choose sequences to be exported by selecting particular objects or through filters for sequence length, bit-score, type of sequence , or other meta-data. finally, "placeholder" newick-formatted phylogenetic trees can be exported in order to select specific subsets of sequences in tree visualization software such as arb. in this format, taxa belonging to user-defined subsets  are placed in clades and assigned artificial branch-lengths of  <dig> ; inter-group distances are set to  <dig> , which produces a well-demarcated organization of sequences into assigned groups. import of such a tree into arb allows rapid, graphical marking of different sets of taxa , the results of which are propagated to other "real" trees in arb.

performance issues
the data analysis tools employed by xplorseq  are invoked in separate threads, so that multiple tasks can be run in parallel. during these steps, feedback to the gui is limited in order to minimize the overhead of performing analyses through xplorseq. typical latencies associated with xplorseq contribute no more than an additional ~10% to the total elapsed time required for an analysis, relative to the same task performed through command line execution of the underlying 3rd party software . this overhead is due primarily to data import/export and parsing of results, which add value to the functionalities provided by command line utilities. consequently, xplorseq should not place any undue limitations on the use of command-line software to process and analyze sequence data, beyond those inherent in the computer system and/or software tool being used. in other words, tasks that can be performed on a particular macintosh system through the command line should also be feasible through xplorseq.

1elapsed time of execution: mean  seconds.

2executed on a  <dig> ghz intel core duo macbook pro.  <dig> gb  <dig> mhz ddr <dig> sdram. mac osx version  <dig> . <dig> 

3executed on a workstation with  <dig> ×  <dig> ghz quad-core intel xeon processors.  <dig> gb  <dig> mhz ddr <dig> fb-dimm. mac os x server version  <dig> .4

4elapsed time includes export and import of data.

the xplorseq file format, implemented using the cocoa software framework, does not significantly add to the size of data files. for example, an xplorseq file containing an alignment of  <dig>  rrna sequences  requires  <dig> megabytes  of storage, compared to  <dig> mb for a fasta formated file storing the same alignment. the addition of metadata, such as blast results, increases file size in roughly linear proportion to the size of parsed input text.

although the use of a flat file format by xplorseq greatly simplifies data storage and transfer, it does require that all data be read into memory before being manipulated. for relatively large files, bottlenecks are apparent primarily in tasks requiring import and export of data. thus, sequence analysis projects are likely to be limited as much by computer hardware  and the performance of underlying 3rd party software tools as by xplorseq. however, the xplorseq environment is scalable from laptops to more advanced workstations  so its capabilities can be expanded as need arises and hardware evolves.

as a rough guide to system requirements, table  <dig> presents benchmark comparisons of common xplorseq tasks performed on a laptop and a workstation. to open the  <dig>  sequence xplorseq alignment file described above, for example, requires ~ <dig> or ~ <dig> seconds, on the laptop or workstation, respectively. test datasets of  <dig> ×  <dig> 25-nucleotide sequences can be manipulated with similar lag times. more fully annotated files containing ~ <dig>  16s rrna sequences, each of length ~ <dig> nucleotides, have been used routinely on a laptop with little performance degradation  <cit> . however, projects with >  <dig>  annotated sequences likely will require higher performance workstations to insure the responsiveness customary to users of gui-based software. alternatively, sequence data can be spread across multiple files, each of which maintains information generated from a particular experiment . more complex data storage strategies, such as the use of application-specific databases may be implemented in the future if they do not compromise the xplorseq philosophy of ease of software installation and use.

CONCLUSIONS
although xplorseq was developed to expedite the phylogenetic analysis of ribosomal rna  gene libraries, it should prove useful in any sequencing project, particularly ones facilitated by batch analysis of multiple clones. moreover, any unix-based dna sequence analysis tool that can be ported to mac osx can be readily incorporated into xplorseq. suggestions for the addition of other modules to the xplorseq package are most welcome.

availability and requirements
project name: xplorseq

project home page: 

operating system: macintosh os x 

programming language: cocoa/objective-c, c, c++

other requirements: phred and phrap are available at 

license: daniel n. frank. free for non-commercial use

any restrictions to use by non-academics: contact corresponding author. users are requested to notify the corresponding author when xplorseq is cited.

supplementary material
additional file 1
example of sequence enumeration table.

click here for file

 acknowledgements
the author wishes to thank prof. norman r. pace for encouragement and support, charles e. robertson for invaluable mentorship in software engineering and web-site support and laura baumgartner, j. kirk harris, jeffrey walker and members of the pace laboratory for extensive software testing and feedback. both anonymous reviewers are thanked for their constructive feedback.
