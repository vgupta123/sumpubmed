BACKGROUND
the growth of high-throughput technologies such as microarrays and next generation sequencing  has been accompanied by active research in data analysis methodology, producing new analysis methods at a rapid pace. the international bioconductor project  <cit>  has been particularly important in this regard, demonstrating the power of open software development for bioinformatics. while most of the newly developed methods are freely available, their use requires substantial computational skills, such as knowledge of the r programming language in the case of bioconductor. this can be a bottleneck for wet lab scientists, who typically have a life science background and no programming experience. in order to enable experimental biologists to benefit from the method development in a timely manner, we have created the chipster software  <cit> . chipster brings a powerful collection of up-to-date analysis methods and visualization tools within the reach of bioscientists via its intuitive graphical user interface. being a versatile and easily extendable platform, chipster can be used for different types of high-throughput data such as microarrays, proteomics and ngs. in this article we describe its comprehensive collection of analysis and visualization tools for microarray data using three case studies.

implementation
chipster's ability to provide a biologist-friendly access to a powerful bioinformatics platform is technically based on a desktop application user interface, a flexible distributed architecture, and the ability to integrate many types of analysis tools.

the chipster client software is a full graphical java desktop application, since we saw it the best way for offering an intuitive user interface with highly interactive visualisations and an overall smooth user experience. to make the client installation and updates as easy and automatic as possible, chipster uses the java web start technology.

in order to provide a comprehensive set of analysis tools, we have made it easy to integrate any kind of tools in chipster, regardless of how they are implemented . as r/bioconductor provides a rich collection of analysis functionality for microarray and ngs data, we have built a strong support for r integration: wrappers manage communication with r processes and pool them for rapid responsiveness, and several r versions can be run side-by-side. integration of command line tools is also supported and can be accomplished even automatically. the tool selection offered by the local server can be augmented by external web services . for example, we currently use the pathway analysis tools for intact, reactome and consensuspathdb in this manner. from the user's point of view these remote services look like any other tools and are included in the workflows as usual.

adding new tools to chipster is easy. first you write a short description for the tool's inputs, outputs and parameters using simple notations . then you place the description and the tool code, for example an r script, to a specific directory in the computing service. in the case of a command line tool, instead of copying the tool code, you just add a reference to the tool binary in the chipster configuration file. the new tool is then picked up by the computing service and becomes automatically visible in the chipster client.

in the basic setup, chipster is a client-server system. server architecture allows tasks to be performed in optimal places: for example, interactive visualizations happen in the client, whereas the actual analysis tasks are processed by computing services, which can be run on server machines with ample cpu and memory resources. this way the user can run several analysis tasks simultaneously without burdening his/her computer. in addition, there is no need to install any analysis tools or libraries to the user's computer as they are installed and maintained centrally in the computing servers. to avoid transferring data multiple times between the client and server, a caching mechanism is used. the caching extends to multi-user scenarios thanks to chipster's cryptographically strong data identifiers: when a previously saved analysis session is opened from a different computer, possibly by a different user, the system still uses the original cached copy of the data and does not transfer it again to the server side.

a chipster server can be run on a single server computer or even a laptop. the chipster server itself contains multiple independent services, so it can be scaled across a cluster of servers to distribute computational and data transfer load. reliability is also improved as failed services can be replaced on the fly. the runtime scaling has proven to be useful when operating large national and institutional chipster services, as usage peaks can be managed by adding computational servers when required. the system consists of compute, authentication and management services, and message and file brokers, which act as the communication channels between the components . because of the message oriented architecture, only the broker components require open network ports and therefore local firewalls should not pose problems. only the message broker needs to be configured as an entry point into the system, all the other server components are automatically discovered. for running the computing services, a 64-bit linux or mac computer is recommended. the other server parts and the client software only require java  <dig> .

chipster is freely available and is open source software under the gnu general public license  version  <dig> or later. we provide an installation package for the software of the complete chipster server system at the sourceforge site  <cit> , and installation instructions for this package can be found on our wiki pages  <cit> . free short-term evaluation accounts to our chipster server are provided for those wanting to try chipster first, and long term accounts are also available  <cit> . installation of the basic server setup is straightforward using the tools provided, and the wiki pages also document the more advanced adaptations, such as distribution to a cluster, integration into local authentication systems, and deployment of secure communication protocols. after unpacking the server software and running an automatic configuration script, the server can be started and the chipster client launched via a web site provided with the package. all analysis tools are included in the installation by default, but most of them require r or other supporting applications to function. a setup script is provided that automatically installs the r packages, and instructs how the supporting applications should be installed. the server administrator is free to tailor the tool selection and install tool support only for those functionalities that are needed. for even more rapid deployment of the chipster server environment, we are developing a virtual machine based package.

RESULTS
general functionality of chipster
user interface
chipster's user interface consists of four panels: analysis tools, datasets, workflow and visualization . the panels for the datasets and the workflow display essentially the same files, but while the former provides a typical folder view, the latter shows the relationships between the files. it is therefore easy to keep track of which analysis steps were taken to produce a particular file. both views allow the user to export, rename, and delete files, and the workflow view also allows the user to prune and save workflows. the analysis tool panel displays chipster's analysis tools grouped into categories such as normalization, preprocessing, statistics and pathway analysis for easy discovery. once a tool has been selected, the user can view its short description, the manual page and the source code, and change parameters if necessary. a complete list of the current analysis tools is available on the chipster web site, and the analysis functionality is described in more detail in the corresponding section of this article. the visualization panel allows the user to view the selected dataset using different visualization methods, which are discussed in more detail below.

describing an experimental setup is accomplished using a phenodata editor. chipster's normalization tools produce a phenodata file, which the user can complete by entering the experimental groups for the different samples. any other variables such as time, dose, pairing and technical replicates can also be entered by adding new columns to the phenodata. the description column allows the user to enter the sample names that s/he wants to be used in visualizations. phenodata is by default created during normalization, but users can also import normalized data and generate a phenodata file for it in chipster, as demonstrated in the second case study of this article.

when an analysis task has been submitted, its progress can be monitored by opening the task manager window from the bottom panel of the user interface. task manager lists the status , starting and running times, and tool parameters. it also allows the user to cancel a task if needed.

chipster allows users to save their analysis sessions, so that the work can be continued later, even on another computer, or shared with collaborators. work on different datasets can be saved into separate sessions, and the sessions can also be combined later if needed. a session file is a zip-file containing all the data files, their relationships, and the tool parameters used for each analysis step. it is also possible to save just the commands for the analysis steps taken as a workflow, which can be applied to another dataset or shared with other users. the workflow functionality of chipster is described in more detail later in this article.

a complete manual for chipster describing data import, user interface and the individual analysis tools is available on the web  <cit> . it also contains step-by-step tutorials which cover whole analysis from data import to downstream applications such as pathway enrichment using publicly available datasets. while helpful for individual users getting started with chipster, the tutorials can also serve as teaching material in microarray data analysis courses. several chipster training sessions are organized every year in different locations, the details can be found on chipster website.

visualizations
visualizing data and inspecting it by eye is one of the most powerful ways of finding patterns that are interesting for further analysis. we have therefore made a lot of effort to provide rich and powerful visualizations in chipster. currently there are about  <dig> different visualizations, which are divided in two categories: interactive visualizations generated by the client program, and static images generated by r/bioconductor on the server. both types of visualizations are viewed in the visualization panel . this panel can be maximized if more area is required for viewing, or detached as a separate window if several visualizations need to be viewed simultaneously.

chipster's interactive visualizations include 2d and 3d scatter plots, histogram, expression profiles, array layout, volcano plot, venn diagram, heatmap and self-organizing map clustering  visualization. in addition to zooming and changing titles and colors etc, the interactive visualizations allow users to select datapoints and create new gene lists based on these selections. there is cross-talk between the different visualization methods, so that datapoints selected in one visualization are highlighted when the same data is visualized using another method. all interactive visualizations can be saved in png format by right-clicking on the image.

r/bioconductor provides a wide variety of visualizations for microarray data, many of which are available in chipster. these include box plot, density plot, heatmap, correlogram, annotated dendrogram, ma plot, idiogram, quality control plots, gene set enrichment plots, and several visualizations for array comparative genomic hybridization  data. as opposed to the interactive visualizations generated by the chipster client program, the images generated by r/bioconductor are static, although in many of them the user can change the sample names by entering the desired names in the phenodata file as described above.

automatic workflows speed up analysis and enable reproducible and collaborative research
microarray data analysis typically involves performing several analysis steps and trying different parameter settings. once a suitable combination has been found and analysis completed, it is often desirable to save the steps taken as an automatic workflow. reusing workflows serves many purposes. firstly, it saves time as multi-step analysis can be executed with just one mouse click. sharing workflows within a research group brings consistency to analysis and provides an easy way for bioinformaticians to help biologists. sharing workflows in a wider context is also beneficial as providing a downloadable workflow file facilitates the reproduction of published results and increases the collaboration of the bioinformatics community in general.

the need for automatic workflows is widely recognized and many programs such as genepattern, taverna and galaxy  <cit>  provide different approaches towards this goal, ranging from pure workflow enactment engines to analysis software with web forms for workflow construction. in chipster we have taken an approach where, instead of specifically constructing workflows, the user performs the analysis normally. the system keeps track of the analysis steps taken, and displays them visually in the workflow panel . the user can experiment with different methods and parameters, and prune the resulting workflow by deleting the unwanted steps. when a satisfactory analysis pipeline is ready, the user simply clicks on the desired beginning point of it in the workflow panel and saves the workflow. the workflow is saved as a file, which contains instructions to run certain analysis tools with the selected parameter settings in a certain order. importantly, chipster also supports branched workflows, as real life analysis workflows are seldom simple linear sequences of steps.

users can easily apply a workflow to another dataset, or share it with other chipster users by giving them a copy of the workflow file. in addition to the user-made workflows, chipster provides ready-made workflows for finding and analyzing differentially expressed genes, mirnas and proteins. the user can continue analysis from the workflow results as normal, so they don't restrict the analysis in any way but can be used rather as a backbone.

the primary goal of chipster's workflow functionality is to enable non-programming users to construct workflows. however, users with programming experience can extend the java beanshell code of a workflow file with any functionality desired: the workflow environment is a complete programming environment and the functionality of the client can be accessed using a workflow programming interface.

analysis functionality
data import and supported array types
chipster is able to import any tab-delimited data. while affymetrix cel-files and illumina beadstudio/genomestudio-files are recognized automatically, other files are imported using an import tool, which allows the user to specify the data columns corresponding to identifiers, sample and background intensities, etc. chipster offers the possibility to import data not only from user's computer, but also directly from public databases such as arrayexpress  <cit> , gene expression omnibus   <cit> , and cangem  <cit> , and from a given url.

it is important to note that while the tools for preprocessing, statistics, clustering and visualizations work for any tab-delimited data, tools for annotation, pathway and promoter analysis require annotation information for the array. chipster has annotation packages for most affymetrix expression arrays , all illumina expression arrays and the human  <dig> k methylation array, and the most common agilent expression arrays. in addition, rudimentary support is offered for affymetrix and illumina snp arrays. for acgh arrays it is essential to know the exact genomic coordinates for the probes, and chipster has a dedicated tool for fetching these annotations from the cangem database  <cit> . for a full list of supported array types, please see the website  <cit> . annotation packages for new arrays can be created using the annotationdbi package offered in the bioconductor project.

normalization
chipster is capable of normalizing most of the commonly used chip types. it has dedicated normalization tools for affymetrix 3', gene and exon arrays, illumina arrays, and agilent 1- and 2-color arrays. chipster also offers a general normalization tool for cdna arrays that can be used for normalizing other 2-color data. similarly, the agilent 1-color tool can be used for normalizing other 1-color data. the actual normalization methods, such as robust multi-array average , li-wong , loess, quantile, robust spline and variance stabilizing normalization, are implemented as parameters of the tools  <cit> .

it has been shown that a significant number of probes on several affymetrix and illumina arrays map to different genes than indicated by the manufacturer  <cit> . as remapping probes to the current genome and transcriptome databases has been shown to improve the interpretation of gene expression data, chipster's normalization tools offer the possibility to use the remapped information. for affymetrix' 3'-expression arrays the user can decide whether to use the alternative mappings  in the summarization step. for affymetrix exon and gene arrays and for illumina arrays the remappings are used automatically. the first case study of this article demonstrates how to apply the alternative mappings for affymetrix' 3'-expression arrays.

after the initial normalization using a platform-specific tool, the data can be further normalized to specific genes or samples. chipster also includes a tool for removing random  effects, e.g. where samples cluster according to preparation day instead of the biological groups under study, using a linear mixed modelling approach to the normalization.

quality control
chipster has an extensive selection of tools for quality control. these include platform-specific tools, such as plots for rna degradation, relative log expression , normalized unscaled standard error , scaling factor summary, percent of present probesets, and quality control probe expression in the case of affymetrix arrays. the more general tools, such as principal component analysis , clustering and non-metric multi-dimensional scaling , can also be used for quality control of samples. if quality control tools indicate that certain samples need to be excluded from further analysis, this can be easily accomplished in chipster by either excluding the deviant samples from the already normalized data or by re-normalizing the acceptable samples. the latter approach is recommended for certain normalization methods such as rma, which are affected by the context .

filtering
chipster includes tools for filtering genes by standard deviation, coefficient of variation, inter-quartile range, expression and flags. another, more versatile way of filtering is to first calculate several descriptive statistics for each gene by using the specific tool for that, and then apply the "filter using a column value" tool to filter the genes based on any of these. annotated gene lists can also be filtered based on chromosomal location, pathway terms, etc. different filters can be combined by using the interactive venn diagram to create new subsets. venn diagram can also be used for filtering the dataset with a list of gene identifiers.

statistical testing
statistical tools in chipster can be divided into tests for finding differentially expressed genes, ordination methods and association analysis. tools for pathway analysis as well as the statistical tools dedicated for acgh data are described in their own sections below.

tests for finding differences in mean gene expression between groups are divided into separate tools according to the number of groups to be compared . several tests are available in every tool, and they usually include both parametric tests such as t-test, empirical bayes  <cit> , anova, and non-parametric tests such as mann-whitney u and kruskall-wallis' test. chipster also contains separate tools for significance analysis of microarrays   <cit>  and reproducibility-optimized test statistic   <cit> . a linear modelling tool, an implementation of linear regression modelling, allows analysis of several variables at the same time. it can take into account three main effects and their interactions, as well as technical replicates and pairing, and its use is demonstrated in the first case study of this article.

ordination methods include pca, nmds, and canonical correspondence analysis . pca can be performed for either genes or samples, and the results can be visualized as an interactive 3d-scatter plot, where samples can be colored according to any experimental variable defined in the phenodata file.

association analysis can perform case-control analyses on snp array data. it tests hardy-weinberg equilibrium, and association of the genetic markers with the case-control status using both dominant and recessive models of inheritance.

unsupervised and supervised clustering
chipster's tools for unsupervised clustering include k-means, hierarchical and quality threshold clustering and som. hierarchical clustering results can be visualized as interactive heatmaps and plain trees, and the reliability can be checked using bootstrapping. for k-means clustering, chipster includes a separate tool for estimating the optimal number of clusters to generate .

classification or supervised clustering tools include k-nearest neighbor -classification and the more versatile general classification. knn-classification allows validation of classifiers by using either a cross-validation approach or a test set of new samples. the general classification tool offers many more classification methods, such as support vector machines , linear discriminant analysis , and naïve bayes networks, but it does not allow classifying new samples like the knn-classification does.

annotation
chipster uses annotation packages provided by the bioconductor project and the brainarray site  <cit> . there are two ways to annotate the data: either by generating a separate annotation file or by appending the annotation to the actual data. this latter option allows for filtering genes based on pathway involvement, chromosomal location, or other annotation information.

pathway and promoter analysis
the pathway tools include gene enrichment analysis for gene ontology  terms  <cit>  and kegg pathways  <cit>  based on the hypergeometric test implemented in the gostats package  <cit> . users can select conditional testing for go terms in order to avoid redundancy caused by the hierarchical structure of go. in this mode, the gene list is tested for the most specific go terms first. if significant terms are found, the genes mapping to these terms are removed before testing for the more general parent terms. as opposed to testing genes individually, the user can also perform gene set tests based on the globaltest package  <cit>  and safe  <cit> , which calculate a test statistic per go category or kegg pathway taking into account the expression levels of the genes. in addition to these tools running on the actual chipster server, pathway tools running elsewhere are also offered in the chipster client program. these include over-representation analysis with consensuspathdb provided by the max-planck institute. consensuspathdb integrates functional interaction data from  <dig> databases covering protein-protein, metabolic, signalling and gene regulatory interaction networks  <cit> , thus providing a powerful and combinatorial approach to pathway analysis.

the promoter analysis tools in chipster offer a possibility to search for common sequence motifs with weeder  <cit>  or cosmo  <cit> , or search for known transcription factor binding motifs using the jaspar matrices  <cit> . transcripts are linked to the corresponding promoter sequences using refseq accession numbers. promoter sequences for human, mouse, rat, drosophila and yeast are obtained from the ucsc genome browser  <cit> .

mirna analysis
the tools for mirna analysis are applicable to most mirna arrays including agilent and exiqon, as long as the data includes mirna systematic names which chipster uses as identifiers. the user can retrieve mirna target genes from six different databases, run pathway enrichment analysis for the targets, and correlate mirna expression with matching gene expression data if available.

acgh data analysis
chipster contains a comprehensive collection of tools for analysing dna copy number data measured by acgh. the tools include calling copy number aberrations   <cit> , identifying commonly aberrated regions  <cit> , removing wavy artifacts from acgh profiles  <cit> , and measuring known copy number variation for the areas of interest  from the database of genomic variants  <cit> . dedicated tools are also available for clustering  <cit> , group comparisons  <cit> , and hypergeometric tests for enriched go categories. these take into account the specific characteristics of acgh data, and are therefore more suitable than the equivalent tools developed for gene expression studies. importantly, it is also possible to integrate acgh data with expression data to assess expression changes induced by aberrated gene copy numbers  <cit> . the third case study of this article demonstrates how to integrate acgh data with gene expression data in chipster.

as the mapping of microarray probes to their genomic coordinates is essential for all acgh data analysis, this information can be downloaded from cangem, which is a public database focusing on acgh microarray data  <cit> . these mappings have been obtained from probe sequences using megablast  <cit>  and are available for different builds of the human genome. direct importing of entire data sets from cangem is also supported.

data export to public databases and other software
in addition to analysis sessions, individual data files can also be exported from chipster in a tabular text format at any time. these files are suitable for submission to many third-party software. chipster can also export data in a suitable format for uploading to the arrayexpress  <cit>  and geo  <cit>  databases.

case studies demonstrating chipster's analysis and visualization tools
in this section we present three case studies to illustrate the merits of some data analysis and visualization options in chipster, such as linear modelling, alternative probe mappings, and data integration. the analysis sessions of these case studies are available for download  <cit>  and further inspection in chipster.

using linear modelling to analyze several factors simultaneously
this case study demonstrates how to apply the linear modeling tool for a biological problem using data from the case-control study published by lenburg  <cit> . they compared renal cell carcinoma tissue samples with healthy tissue from the same person, which effectively introduces a pairing structure to the data. we will model the pairing explicitly here, and also include the gender of the individual and the side of the affected kidney  as independent variables in the model. in this example we also show how to apply alternative probe mappings for affymetrix data, in this case for the u133a arrays.

the cel-files for the  <dig> samples were imported to chipster and the quality of the data was checked using the affymetrix-specific quality control tools including rle and nuse. as no deviant arrays were identified, all the arrays were retained in the dataset and normalized using the rma method and the alternative probe mappings . using altcdfs for the summarization step practically halved the number of probesets, reducing it from  <dig>  <dig> to  <dig>  <dig>  next the experimental setup was described using the phenodata file, which was generated during normalization. the variable corresponding to the most interesting hypothesis  was coded in the group column. all the other variables of interest such as gender, side and pairing were added as new columns to the phenodata and coded with numbers. several quality controls including pca, nmds and dendrogram run on the normalized data showed that the sample groups separate well from each other. affymetrix control probes and 90% of the genes that showed the lowest coefficient of variation were removed using the tools "search by gene name" and "filter by cv", respectively. chipster's filtering tools "filter by cv" and "filter by standard deviation" allow users to set the filtering percentage according to their needs. we used a relatively high level of stringency in this and the following case studies in order to focus on the more prominent changes in expression and to minimize false positive findings in the downstream analyses.

the genes that are differentially expressed between cases and controls, males and females, or left and right kidneys, can be analysed using tests suitable for comparing two groups. however, this is a suboptimal solution, since possible interactions between the variables can not be tested, and the effect of interest can be masked by confounding variables. to address this we used the linear modelling tool in chipster to build a linear regression model that allows us to include all the variables in the same analysis and to take the pairing structure into account. chipster's linear modelling tool is an implementation of the limma package  <cit>  from the bioconductor project. the case-control status, gender and side of the kidney were included as main effects and the patient was included as pairing. all variables were treated as categorical variables . thus, the following model was fitted

 y= a+ b1*status + b2*gender + b3*side + b4*patient + e 

the benjamini and hochberg false discovery rate  correction was applied to the p-values to adjust them for multiple comparisons.

results for the case-control comparison were visualized using the interactive volcano plot, where the x-axis contains the log2-transformed fold change values, and the y-axis contains the -log <dig> -transformed p-values . the linear modelling result was filtered for p-values using the tool "filter using a column value".  <dig> genes were statistically significantly differentially expressed  between the cases and controls,  <dig> genes were significant for gender comparison, and no genes became significant for the comparison between left and right kidneys. the list of genes that were up-regulated in cancer  was enriched for go categories blood vessel development  and response to hypoxia , as judged by the tool "hypergeometric test for go". similarly, enrichment for hif1-alpha transcription factor network and several adhesion pathways was indicated by the tool "hypergeometric test for consensuspathdb". these results are consistent with the fundamental role of angiogenesis in the renal cell carcinoma pathogenesis  <cit> .

in contrast to the analysis conducted by lenburg et al, our results for the case-control comparison are adjusted for the other variables in the model. in other words, the results given for the case-control comparison take into account additional knowledge of the samples such as gender, side of the kidney and the patient. lenburg et al reported  <dig> unigene clusters and  <dig> unannotated probesets  that had changed more than three-fold. in order to compare their result to ours, the differentially expressed genes were filtered for fold change using the tool "filter using a column value". the list of more than three-fold changed genes  was then compared to that of lenburg in the interactive venn diagram visualization, using gene symbol as the common identifier. only  <dig> genes were common to both datasets. in addition to the different analysis methodology, this difference probably reflects the use of remapped probes, which has been shown to cause up to 50% discrepancy in genes previously identified as differentially expressed  <cit> . interestingly, the  <dig> genes detected only by chipster included genes involved in hypoxia response , cell migration , and cell proliferation . taken together, chipster's linear modelling tool and alternative probe mappings enabled us to find additional genes potentially relevant to renal cell carcinoma, while keeping false positive findings due to outdated probe mappings to a minimum.

analyzing a prenormalized dataset: comparing gene expression between two populations
in this example we demonstrate how to analyse prenormalized data in chipster by using expression data from the study by stranger et al.  <cit> . they performed gene expression profiling of epstein-barr virus-transformed lymphoblastoid cell lines of the  <dig> individuals genotyped in the hapmap consortium using illumina's wg- <dig> version  <dig> arrays. in this example we compare gene expression in the european  and african  populations using a subset of  <dig> samples .

normalized data from the genevar site  <cit>  of the sanger institute were imported to chipster using the import tool. the data was converted to chipster format and the phenodata was created by using the tool "process prenormalized". the population was indicated with numeric codes  in the group column of the phenodata, and the population codes  were entered in the description column in order to use them as sample labels in visualizations.

differential expression between the populations was visualized using the nmds tool, which produces a two-dimensional map  based on sample dissimilarity calculated using euclidean distance. as is instantly evident from the image, the yri samples are more to the top-left of the image, and the ceu samples more to the bottom-right, indicating that there are differences in gene expression between the populations. the samples were also visualized in a 3-dimensional interactive scatterplot using the three most significant components from a pca analysis. again, it was noted that samples clearly segregated according to population, but no further sample clustering could be observed upon close examination of the data points along any axis and direction of view, suggesting that no additional underlying sample characteristics exhibited any major impact on the expression patterns.

differentially expressed genes were analysed using the empirical bayes test, after filtering out  <dig> percent of the probes that showed the lowest standard deviation.  <dig> probes corresponding to  <dig> known genes were statistically significantly differentially expressed between the populations at the 5% false-discovery rate. in order to gain functional insight, the differentially expressed genes were analysed for enrichment in go categories for biological process using the tool "hypergeometric test for go" with default parameter settings. interestingly, the most enriched category was immune response. the list of differentially expressed genes was further filtered on fold change using the tool "filter using a column value". only  <dig> probes corresponding to  <dig> known genes showed a fold change higher than  <dig>  taken together, it seems that gene expression differences between populations are commonplace, but most of the differences are very subtle.

integrating dna copy number and gene expression data
this third case study illustrates the integration of acgh and mrna data to assess expression changes induced by dna copy number aberrations. as the aberrations typically contain also bystander genes in addition to the driving ones, integration with expression data helps to identify the potential cancer genes. we used  <dig> breast cancer samples with matching acgh data  <cit>  and expression data  <cit> . this is a subset of the original study containing  <dig> samples, because we were able to pair data only for  <dig> samples using the supplementary material of the referred articles. attempts to obtain the pairing information from the original authors were also unsuccessful.

the agilent 4x44k acgh data was normalized using the agilent 2-color normalization tool with normexp background correction  and loess normalization  <cit> . the affymetrix u133a expression data was gcrma normalized  <cit> , and 75% of the probesets with the lowest standard deviation were filtered out. quality of the two data sets was checked with respective quality control tools, and since no deviant samples were observed, all arrays were retained. in order to enable the integration of the copy number and expression data, the agilent probes and affymetrix probesets were annotated with their chromosomal positions using the tool "fetch probe positions from cangem"  <cit> .

acgh profiles typically show a wavy artefact related to their gc content. this pattern can be removed by using clinical genetics samples measured on the same array platform as calibration data  <cit> . we applied the tool "smooth waves from normalized acgh data" using a calibration dataset of mental retardation samples  <cit>  which had been previously normalized using the same settings as described for the acgh data above. smoothed log ratios were then analyzed with the tool "call copy number aberrations from acgh data"  <cit>  to detect gains and losses. the acgh data set was studied further by identifying commonly aberrated regions  <cit> , which showed most frequent gains in 8q and 1q. the amount of known copy number variation  within these regions was measured with the tool "count overlapping cnvs"  <cit> , which annotates the data with two metrics: the number of reported cnvs that overlap with the region of interest, and the proportion of base pairs that falls within the reported cnvs. these values were compared to the mean and median across the whole genome, obtained by running the tool "calculate descriptive statistics".

in order to assess expression changes induced by dna copy number aberrations, the acgh and mrna data sets were first integrated using the tool "match copy number and expression probes", which locates the closest copy number probe for each expression probeset. it also generates a heatmap showing the two data sets organized by chromosomal position. the effect of copy number changes on mrna expression levels was then evaluated by a permutation-based non-parametric test  <cit>  implemented in the tool "test for copy number induced expression changes" using the default parameter settings. probesets with a p-value smaller than  <dig>  were selected with the tool "filter using column value". our analysis identified  <dig> genes  which showed copy number induced expression changes. in the original paper, andre et al.  <cit>  highlighted a list of  <dig> frequently amplified genes,  <dig> of which showed significant correlation between expression and copy number. chipster detected nine of these genes: brf <dig>  ddhd <dig>  eif4ebp <dig>  erbb <dig>  erlin <dig>  fgfr <dig>  grb <dig>  lsm <dig>  and rab11fip <dig> 

the resultant gene list was explored further using different filters. as errb <dig> is a well-known breast cancer gene, we filtered the gene list for involvement in the errb <dig> signaling pathway by using the tool "extract genes from kegg pathway". five such genes were found, in addition to erbb <dig> itself. we filtered the gene list also for effect size , and for the coefficient of determination, r <dig> . there were  <dig> genes for which the effect size of the dna copy number on the gene expression was higher than two and explained over 50% of the variation in gene expression. interestingly, one of these genes was tob <dig> , which has been recently implicated in breast cancer metastasis  <cit> . the relation between the copy number and expression data for tob <dig> was illustrated using the tool "plot copy number induced gene expression" . taken together, these results demonstrate chipster's ability to identify potential cancer related genes. while the integration method used by andre et al. simply divides the samples into two groups based on dna copy number calls, the method implemented in chipster also takes into account the probabilities with which these calls are made , which has been shown to yield improved results  <cit> .

discussion
comparison with other microarray data analysis software
as microarrays have become a standard experimental technique for many genome-wide applications, a large number of software has been developed for their analysis. for a comprehensive review the reader is referred to the recent survey by koschmieder et al  <cit> . in their thorough comparison of the currently available microarray analysis software, chipster was the most complete in terms of analysis functionality, and it was also considered particularly user-friendly and easy to install.

chipster differs from many other software in that it combines several important features in one package. firstly, chipster facilitates reproducible and collaborative research by enabling users to save the performed analysis steps as reusable, automatic workflows, which can also be shared with other users. as chipster keeps track of the analysis, it can also produce textual reports of the steps taken. secondly, chipster allows the integration of different data types such as gene expression, mirna expression and acgh data. thirdly, chipster avoids the all too common "black box" approach by allowing the user to view the source code of the analysis tools. fourthly, chipster is a client-server system, where the client software utilizes java web start technology for automatic installation and updates. the actual analysis modules, r libraries, annotations, and promoter and pathway databases are installed and updated centrally on the server side. the client-server system combines the benefits of a standalone program and web based tools: having a full graphical user interface makes it easy to provide responsiveness and interactivity when compared to web-based applications, while the centralized approach for the analysis tools reduces the maintenance burden. it also enables the analysis jobs to benefit from the cpu and memory of central computing servers, so that the user's desktop computer is freed for other tasks. in fact chipster's flexible architecture allows the analysis computations to be distributed to several servers, and the tool and database collection can be further expanded by connecting external web services to the system. finally, chipster is open source, and new analysis tools can be easily added by using a simple tool description notation.

among the leading freely available software that most closely resembles chipster are mayday  <cit>  and mev  <cit> , which offer rich analysis functionality and interactive visualizations. however, chipster differs from them both technically and functionally in many ways. in terms of functionality, the main differences lie in the quality control and normalization tools. mayday doesn't provide array specific quality control tools, such as rle and nuse for affymetrix data, and mev includes hardly any quality control tools at all. the normalization options in both mayday and mev are very limited: while mev includes basic scaling and various transformations, there are for example no specific tools for normalizing affymetrix raw data . therefore users have to install additional software to handle importing and normalization tasks. mayday includes support for cel files, but the only normalization algorithm provided is rma. neither software has built-in support for illumina arrays, nor do they offer the possibility to use remapped probe information. the tool selection for statistical testing is fairly similar in chipster, mayday and mev. however, mayday doesn't provide a linear modeling tool for the analysis of more complex multi-factorial experiments, and mev's tool allows the analysis of only two factors without considering the interaction effects between them. on the other hand mev offers a statistical tool for survival analysis, which is not available in either chipster or mayday. while the clustering options of chipster, mayday and mev are very similar, the latter two provide a wider choice of classification tools. acgh analysis is supported only by chipster and mev, but mev lacks the ability to include gene expression data in an integrative analysis approach. analysis of mirna expression data and integration with gene expression data is only available in chipster.

all the three software provide workflow functionality, allowing users to automate and share analysis pipelines. however, the implementation of the this functionality is very different. in chipster the workflow is created automatically as the analysis progresses and gradually builds to a complete pipeline, which the user can edit and save at any time. in contrast, both mev and mayday use separate workflow building applications, which the user has to learn in addition to the main software. while the workflow panel in chipster makes saving workflows easy, it also greatly enhances general usability: by clearly displaying the relationships between datasets it enables the user to quickly get an overview of the analysis session.

from the technical point of view both mayday and mev are standalone applications, while chipster is a client-server system. both approaches have their limitations and advantages: while standalone software doesn't need to transfer data over the network to the server, its performance is limited by the cpu and memory of the user's computer. this can be a serious limitation when performing computing intensive tasks such as hierarchical clustering, permutation-based statistical testing, or normalization of exon arrays. taken together, the choice of software is not trivial and depends on factors like ease of installation and use, the type of data to be analyzed, the capability of the user's computer, and the availability and extent of it infrastructure and support.

future development
while this paper describes chipster's microarray data analysis functionality, it is important to remember that chipster is a generic platform and easy to extend to other areas, even beyond bioinformatics. for example, developing the sequence analysis software embster  <cit>  was very fast by integrating the emboss package  <cit>  and several other analysis tools to this platform. also adding ngs data analysis functionality to chipster has been easy, and the current release candidate version of chipster already contains tools for rna-seq, mirna-seq, chip-seq and methyl-seq data. it also contains a built-in interactive genome browser for viewing reads and results in their genomic context. while server based systems such as chipster and galaxy  <cit>  have the advantage of being able to handle computationally heavy ngs analysis tasks, they face the challenge of transferring large amounts of data over the network. chipster's flexible architecture has allowed us to tackle this problem efficiently using the following approaches. as described in the implementation section of this article, a caching mechanism is used so that data is not transferred multiple times. in order to optimize data transfer even further, we are currently developing lightweight sessions which only contain links to the data stored on the server. we are also developing plugins that allow the user to connect different data servers to the system so that transfers are done directly between the servers . in terms of distributed processing we are currently working with the hadoop map-reduce framework  <cit>  so that large jobs can be run in the cloud.

CONCLUSIONS
taken together, chipster is a user-friendly open source analysis software for microarray and other high throughput data. its intuitive user interface brings a comprehensive collection of analysis methods within the reach of experimental biologists, enabling them to analyze and integrate different data types such as gene expression, mirna and acgh. the analysis tool arsenal is complemented with powerful interactive visualizations, allowing users to select datapoints and create new gene lists based on these selections. importantly, users can save the performed analysis steps as reusable, automatic workflows. chipster promotes collaboration at several levels: while biologists can collaborate by sharing workflows and analysis sessions, bioinformatics core facilities can also easily share their expertise with research groups by providing ready-made workflows and new analysis tool scripts. finally, chipster integration is an easy way for analysis method developers to provide their tool with a graphical user interface, thereby making it available for a wider group of users.

availability and requirements
• project name: chipster

• project home page: http://chipster.csc.fi/

• operating system: platform independent

• programming language: java

• other requirements: java  <dig> 

• license: gnu gpl version 3

• any restrictions to use by non-academics: none

abbreviations
acgh: array comparative genomic hybridization; altcdf: alternative affymetrix library file; cca: canonical correspondence analysis; chip-seq: chromatin immunoprecipitation sequencing; cnv: copy number variation; fdr: false discovery rate; geo: gene expression omnibus; gnu general public license; go: gene ontology; kegg: kyoto encyclopedia of genes and genomes; knn: k-nearest neighbor; lda: linear discriminant analysis; ngs: next generation sequencing; nmds: non-metric multi-dimensional scaling; nuse: normalized unscaled standard error; pca: principal component analysis; rle: relative log expression; rma: robust multi-array average; rots: reproducibility-optimized test statistic; sam: significance analysis of microarrays; soap: simple object access protocol: snp: single nucleotide polymorphism; som: self-organizing map; svm: support vector machine.

authors' contributions
mak and th designed and implemented the chipster software platform and participated in drafting the manuscript. jtt, mg and is implemented the data analysis tools in chipster and participated in drafting the manuscript. pk, mk and jk designed and implemented the graphical user interface of chipster. eik conceived the study, and participated in its design and coordination and drafted the manuscript. all authors read and approved the manuscript.

supplementary material
additional file 1
this file contains a figure showing the different components of the chipster server environment.

click here for file

 acknowledgements
this work was supported by a grant from tekes - the finnish funding agency for technology and innovation to eik under the sysbio research programme. this work was funded in part by the embrace project grant to eik which is funded by the european commission within its fp <dig> programme, under the thematic area "life sciences, genomics and biotechnology for health", contract number lung-ct-2004- <dig>  we would like to thank the department of computer science of the university of helsinki and drs. dario greco and laura elo for development collaboration, and dr. vera hansper for proofreading the english language of the manuscript.
