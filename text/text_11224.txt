BACKGROUND
finding gene regulations is an important objective of systems biology  <cit> . causal gene regulatory interactions are widely described using gene regulatory networks. estimating gene regulatory networks can help reveal complicated regulations.

recently, microarray  <cit>  has rapidly produced a wealth of information about gene expression activities. the volume of data necessitates computational methods to identify and analyze the underlying gene regulatory networks  <cit> . a number of analytical methods have been proposed to estimate gene regulatory networks from gene expression profiles. boolean networks, graphical gaussian models , differential equation models, and bayesian networks  are widely used models.

a boolean network is a discrete dynamical network  <cit> . in a boolean network, the state of a gene is represented by a boolean variable  and interactions between the genes are represented by boolean functions that determine the state of a gene on the basis of the states of certain other genes. hence, continuous gene expression data must be transformed into binary data before a boolean network can be estimated, and much information is lost in this binary encoding. as gene expression cannot be described adequately by only two states, boolean networks are limited by their definition.

a ggm is an undirected probabilistic graphical model  <cit> . this model allows the identification of conditional independence relations among the nodes under the assumption of a multivariate gaussian distribution of the data. in a ggm, regulations between genes are estimated by calculating the correlation between pairs of variables. therefore, the ggm does not identify the direction of regulatory relationships between two genes, but rather only calculates the correlations between their gene expression data.

a differential equation model describes gene expression changes as a function of the expression of other genes and environmental factors  <cit> . their flexibility allows the complex relations among components to be described. in a differential equation model, a gene regulation is described as the function of several gene expression levels. when the input data includes experimental noise, this model cannot estimate the gene regulatory network accurately. also, if there is not sufficient data input, overfitting occurs.

bn is a graphical model for representing probabilistic relationships among a set of random variables  <cit> . these relationships are encoded in the structure of a directed acyclic graph whose nodes are the random variables. the relationships between the variables are described by a joint probability distribution. in a bn, causal interactions between more than three genes can be estimated. bn has advantages over the above models in applications where bn deals better with the experimental noise.

using a bn, it is hard to estimate a large-scale network because the search space grows exponentially as the number of genes increases. therefore, overcoming this problem has been the focus of much research. the proposed solutions to this problem can be divided into three types. the first type limits the number of estimated genes. even when estimating a large-scale network, part of the network is often attracted. the second type parallelizes the estimation by supercomputer or other high-performance computer. effective parallelizing makes it possible to estimate large-scale networks. the third type improve the algorithm itself. these methods reduce computational time and estimate the network by a heuristic.

an example of the first type of solution is proposed by peña et al.  <cit> . this method overcomes the problem of the user having to decide in advance which genes are included in or excluded from the learning process. the method receives a seed gene s and a positive integer r from the user, and returns a bn. it starts the bn from s genes, then adds the parents and children of all the genes in the bn r +  <dig> times, and prunes some genes. in this way, the user avoids deciding in advance which genes to include.

a solution of the second type proposed by tamada et al.  <cit>  can estimate gene regulatory networks consisting of more than  <dig>  genes from gene expression data. the method uses a supercomputer, and it is massively parallelized. it repeatedly estimates subnetworks by hill climbing in parallel for genes selected by neighbor node sampling. the method high-handedly overcomes the problem of the bn by using the supercomputer. even if a supercomputer can effectively provide a large-scale network, an estimation method designed to run on a workstation is also required.

a solution of the third type for estimating gene regulatory networks was implemented by bøttcher et al.  <cit> : the greedy hill climbing  method. by comparing networks that differ only by a single directed edge, either added, removed, or reversed, a ghc method can estimate networks of larger scale than a search of all possible networks and do so on a workstation rather than a supercomputer, thus overcoming two problems at once. however, the estimation accuracy of this method is not high, because the method tends to produce only local optimal solutions.

in this paper, we present a novel bn-based deterministic method with reduced computational time to overcome the above-mentioned problems. the proposed method can estimate a network as large-scale as those estimated by the ghc method, run on a workstation, and estimate more accurately than the ghc method. we take another approach to estimate more accurately than the ghc method. first, our method generates all the combinational subsets with three genes. then, we estimate all possible networks for each subset using the bn method and unite the networks into a single network including all genes. this approach enables us to estimate more accurately for the same computational time than the ghc method.

in order to verify the effectiveness of the proposed method, we perform two experiments, to evaluate scalability and accuracy: i.e., one to verify the proposed method can estimate networks as large-scale as those estimated by the ghc method, and one to verify it can estimate more accurately than the ghc method. these experiments are performed using randomly sampled genes. in addition, we conduct a third experiment to confirm that our method outperforms the ghc method using real data.

RESULTS
bayesian networks
let d =  be a directed acyclic graph , where v is a finite set of nodes and e is a finite set of directed edges between the nodes  <cit> . the dag defines the structure of the bn.

each node v ∈ v in the graph corresponds to a random variable xv. the set of variables associated with the graph d is then x = {xv}. often we do not distinguish between a variable xv and the corresponding node v. to each node v with parents pa, a local probability distribution, p), is attached. the set of local probability distributions for all variables in the network is p. a bn for a set of random variables x is the pair . directed edges in d encode conditional dependencies between the random variables x through the factorization of the joint probability distribution.

  p= ∏v∈vpxv|xpa. 

as a measure of how well a dag d represents the conditional dependencies between the random variables, we use the relative probability

  p=pp, 

and refer to it as a network score, where d is data and p is called the likelihood of d.

the log network score contribution of a node is evaluated whenever the node is learned. the log network score n is given by

  n= logp. 

the number of possible dags grows exponentially with the number of nodes, and the problem of identifying the network with the highest score is np-hard. if the number of random variables in a network is large, it is not computationally possible to calculate the network score for all possible dags. for these situations, the search strategy ghc method is implemented.

the ghc method is as follows.

 <dig>  select an initial dag d <dig> randomly from which to start the search.

 <dig>  calculate the bayes scores of d <dig> and all possible networks that differ by only one directed edge, that is, an edge is added to d <dig>  an edge in d <dig> is deleted, or the direction of an edge in d <dig> is reversed.

 <dig>  among all these networks, select the one that increases the bayes score the most.

 <dig>  if the bayes score was not improved, stop the search. otherwise, make the select network d <dig> and repeat from step  <dig> 

in the ghc method, we can limit the maximum number of these steps in the search algorithm. also, the search algorithm can restart an arbitrary number of times. more details on the parameter setting will be described later in this paper.

methods
we propose a new method to estimate a gene regulatory network with reduced computational time. the proposed method is composed of three steps: dividing the whole problem into partial problems, estimating gene regulatory networks of partial problems, and uniting the estimated networks. in this section, we describe our bn-based method using the analysis of a set of expression data as an example. this example includes five genes v = {vi| <dig> ≤ i ≤ 5}. a conceptual representation of our approach is presented in figure  <dig>  we call a search of all possible networks an exhaustive search to distinguish it from the ghc method.

step 1: dividing the whole problem into partial problems
our approach first divides the set of all genes v into all the combinational subset with three genes  t = {vi, vj, vk ∈ v| <dig> ≤ i <j <k ≤ 5}. for example, our approach obtains 5c <dig> =  <dig> partial problems {v <dig>  v <dig>  v3}.{v <dig>  v <dig>  v4}, ..., {v <dig>  v <dig>  v5}.

step 2: estimating gene regulatory networks
after making partial problems, we next calculate independently the scores of all the possible networks of each partial problem by exhaustive search and obtain estimated dags g. the number of possible alternative networks for a triplet {v <dig>  v <dig>  v3} is  <dig> =  <dig> because there are three cases for each potential edge  : a directed edge from vi to vj , a directed edge from vj to vi, and no edge.

let c =  be a tuple, where d ∈ g is a dag, sd = p is a score of d, where p is given by equation  <dig>  and rd is a rank of d.

we add tuples of all the partial problems to z, where z is a set of c. for example, when we have  <dig> partial problems {v <dig>  v <dig>  v3}.{v <dig>  v <dig>  v4}, ... , {v <dig>  v <dig>  v5}, we add  <dig> tuples of networks to z.

step 3: uniting estimated partial problems
to solve the original problem, this step unites three-gene networks into a single gene regulatory network. the policy of the step is to classify relationships between genes, i.e., determine   into one of the three edge types  according to the score calculated in step  <dig> 

to select an edge type between genes vi and vj, we calculate an edge  value for each of the three types t using the following:

  ∑∈zsd, 

where d has edge . then we select one edge type that has the highest total value.

when two or more edge types have the highest total value, we use edge scores of the partial problems whose ranks are  <dig> or more.

algorithm
input: v = v <dig>  ..., vn: a set of genes, gep: gene expression profiles of v

output: gv : dag including genes v

variable:   z: a set of tuples 

1: make a collection of set v that includes all the subsets of v with three elements

2-1: for each u in v do

2-2:   make a collection of set du that includes all the dags of u

2-3:   for each d in du do

2-4:      calculate rank rd and score sd with gep

2-5:      add  to z

2-6:   end for

2-7: end for

3-1: i ← 1

3-2: repeat

3-3:   for each edge between genes  in d of  do

3-4:      add all sd of  for each of the three edge types

3-5:      if one edge type has the highest total sd then

3-6:         add an edge between genes  to gv

3-7:      end if

3-8:      if two or more edge types have the highest total sd then

3-9:         for each edge between genes  in gv , where w is a gene ≠ x, y do

3-10:            select edge between genes  from d of , where d includes genes x, y, and w.

3-11:         end for

3-12:         add edge  selected in  with the highest sd to gv

3-13:      end if

3-14:   end for

3-15:   i←i+1

3-16: until directions of all edges in gv are assigned

3-17: return gv

a flowchart of the algorithm can be found in figure  <dig> 

computational experiments
to verify the effectiveness of the proposed method, we performed three experiments. the first experiment determines computational time for different numbers of genes. the purpose of this experiment is to verify that the proposed method is able to estimate gene regulatory networks that are as large-scale as those estimated by the ghc method. the second experiment demonstrates that the proposed method is more accurate than the ghc method. the third experiment shows, through an example, that our algorithm works well for inferring real gene regulatory networks. we estimate the networks, including the known gene regulatory network, and compare the network estimated by the proposed method and that by the ghc method.

implementation, system, and materials
steps  <dig> and  <dig> are implemented using the deal package version  <dig> - <dig> written in r. we use r  <dig> . <dig>  step  <dig> is implemented using perl  <dig> . <dig> 

the ghc method is implemented in the deal package version  <dig> - <dig>  in these experiments, the maximum number of actions, i.e., adding, deleting, or reversing a directed edge, is set at  <dig> and the number of restarts is set at  <dig>  we call these parameters the default parameter set.

we performed all the experiments on a computer with intel core <dig> duo  <dig> cpu  <dig>  ghz processors with  <dig>  gb memory. the operation system is ubuntu  <dig> .

we used a dataset of two time-series gene expression profiles including  <dig> genes from a mouse adipocyte and osteoblast. the number of time points is  <dig> 

experiment 1
we verified that the proposed method can estimate gene regulatory networks as large-scale as those estimated by the ghc method. we used the proposed method, an exhaustive search, and the ghc method, and compared the estimation time for from  <dig> to  <dig> genes. in this experiment, we selected genes from the gene expression profile from a mouse adipocyte by random sampling. we ran this process  <dig> times and calculated the mean estimation time. the results are summarized in figure  <dig> 

in figure  <dig>  the horizontal axis corresponds to the number of genes and the vertical axis corresponds to the logarithm of the estimation time. the proposed method was able to estimate the network including  <dig> genes, and the estimation times were almost the same as those of the ghc method. the estimation time of the proposed method was shorter than that of the ghc method for  <dig> or more genes. the estimation time of the proposed method was longer than that of the ghc method for  <dig> or fewer genes. the estimation time of the exhaustive search was very large by  <dig> genes.

experiment 2
we verified that the estimation accuracy of the proposed method is higher than that of the ghc method for nearly identical estimation times. we compared the estimation results of the exhaustive search with the results of the proposed method and the ghc method. in this experiment, we selected five genes randomly from the gene expression profile  <dig> times from a mouse adipocyte and osteoblast. we estimated the network of these five genes by the proposed method and the ghc method. there are  <dig> dags for five genes, and all the dags are ranked by the scores of the exhaustive search. the ranking was used to evaluate the networks estimated by the proposed method and the ghc method. the results are listed in figure  <dig> 

the two bar charts in figure  <dig> show the ranks of  <dig> networks estimated by the proposed method and the ghc method. the left bar chart is the results for adipocyte, and the right are those for osteoblast. the correspondence count is the number of times that the network estimated by the proposed method or the ghc method corresponded with the network of the exhaustive search. the ranking in the exhaustive search is the ranking of the networks estimated by the exhaustive search. the networks are ranked by the scores of the exhaustive search. as there are  <dig> dags for five nodes, the ranks are from 1st to 59049th.

the correspondence count of the proposed method from the 1st to 10th networks of the exhaustive search exceeded  <dig>  for the correspondence count from the 30001th to the 59049th network of the exhaustive search, the ghc method exceeded  <dig> and the proposed method was less than  <dig> 

experiment 3
we used a known gene regulatory network and verified that the proposed method can estimate more accurately than the ghc method with the same or less computational time. we compared the regulations estimated by the proposed method with those of the ghc method. in this experiment, we used  <dig> genes from the gene expression profile from a mouse adipocyte. of these,  <dig> genes are pparγ and the genes that regulate or are regulated by pparγ in adipocyte. these are shown in figure  <dig>  the remaining  <dig> genes were selected by random sampling. the results and known networks are shown in figure  <dig>  in this experiment, we used two parameter sets for the ghc method. one is the default parameter set. in the other parameter set, the maximum number of actions is  <dig> and the number of restarts is  <dig>  which will return a better network but requires about 20-fold longer computational time than the default.

in figure  <dig>  results of the default and other parameter set are shown as networks  and , respectively. we call  the network estimated by the highly accurate ghc method in this experiment. network  is estimated by the proposed method. the edges in networks , , and  are categorized according to the edges of network . the red edges are also in network , the blue edges have a different direction from those in network , and the black edges have no relationship in network .

discussion
the ghc method tends to produce local optimal solutions. for example, in figure  <dig>  the results of the ghc method have two peaks, corresponding to the classes of 1- <dig> and 30001- <dig>  we cannot completely avoid selecting a local optimal solution when using the ghc method, because the solution accuracy depends on the initial dag from which the search is started. to obtain the best network when using the ghc method, the estimation must be repeated using different initial dags. in contrast, the proposed method can produce one result as the best network.

the results of our experiments indicate that dividing the set of all genes and uniting the network results can estimate more accurately than the ghc method. with the ghc method, the maximum number of actions, i.e., adding, deleting, or reversing a directed edge, and the number of restarts can be adjusted. if these parameters are increased as much as possible, the estimation accuracy can be made comparable to that of the exhaustive search. however, this would spoil the advantage of the ghc method that it can estimate with high speed. the ghc method selects the action that increases the network score the most; therefore, a regulation that increases the network score only slightly is rarely selected. in this sense, the search of the ghc method is considerably biased. this aspect becomes pronounced when the limiting parameters are set strictly. with the proposed method, regulations that have a positive effect will be selected independently of whether that effect is slight or strong. for example, in figure  <dig>  the regulatory relationship between pparγ and c/ebpβ could not be estimated by the ghc method, even if the parameters of the restart and the actions were significantly increased.

we verified that the proposed method can estimate networks as large-scale as those estimated using the ghc method. we spend at most  <dig>  second to estimate the network of one partial problem with three genes and repeat the estimation nc <dig> times in the proposed method. therefore, the proposed method can estimate the network with a low amount of memory compared with the ghc method, which, like the exhaustive search, requires much memory. when we estimate a network for a data set from a large number of genes using the ghc method, it is easy to run out of memory, making the actual computational time longer than the theoretical time.

CONCLUSIONS
in this study, we present a novel bn-based deterministic method with reduced computational time. we confirmed experimentally that the proposed method can reduce the computational time drastically without degrading the solution accuracy. the proposed method can estimate networks as large-scale as those estimated by the ghc method. furthermore, the proposed method can estimate more accurately than the ghc method, even if the computational time of the ghc method is increased to more than  <dig> times that of the proposed method.

competing interests
the authors declare that they have no competing interests.

authors' contributions
yw implemented the algorithm and performed the analyses. yw, ss, yt, and hm conceived and designed the experiments and wrote the paper.

