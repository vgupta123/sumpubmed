BACKGROUND
the gene ontology  project  <cit>  provides ontologies for the categorization of gene products according to their locations of action, the molecular functions that they carry out, and the processes that they are normally involved in. these categorizations propagate up the ontology graph structure, from specific classes to more general classes. this is known as the "true path rule", and great care is taken in ontology development to ensure that the true path rule holds, and detection of errors is a high priority. over  <dig> million go annotations are currently available from the go consortium, supplying functional information for almost  <dig>  different taxonomic groups . many of these go annotations have been generated through manual curation, in which a curator extracts data from published literature. others have been generated by reviewed computational predictions. a large number are also produced by minimally supervised automatic prediction pipelines. a number of different automated prediction methods are applied by members of the go consortium. these methods include transfer of manual go annotations to closely related orthologs , use of protein signatures to predict functionally-similar proteins , and mapping of external functional concepts to equivalent go classes . the number and type of go annotations available for a set of gene products relies heavily on the amount of funded curation work and the experimental literature available. therefore, although many model organisms have a large amount of manual go annotation, automated go annotation is the principal source of functional data for many other organisms. each go annotation records the type of evidence associating a gene product with a particular go class using an evidence code. sixteen evidence codes are used to describe manual go annotation efforts, and one code, 'iea' , describes all automatically-predicted go annotations http://www.geneontology.org/go.evidence.shtml. there are many different methods of automatically predicting go annotations, and one of the most popular is the interpro2go method  <cit> , which uses a mapping file between protein domains and go classes to predict annotations on the basis of domain predictions.

go contains in excess of  <dig>  classes, and the go as a whole is intended to cover the full range of species. go classes are defined to be taxon neutral, avoiding reliance on taxon information for full definition of the given process, function, or component. as an example of this, the class 'lactation'; go: <dig> is defined as 'the secretion of milk by the mammary gland.' rather than 'the secretion of milk by the mammary gland in mammals.'. in classes such as this, however, there is obvious implicit taxon specificity, such that this class should only be used to categorize gene products from mammalian species. it is possible to automatically detect errors in the ontologies by looking for inconsistencies between the taxonomic origin of the annotated gene products, and the implicit taxon specificity of the go classes. for example, either direct or indirect automated annotation of a bacterial gene product to the class 'lactation' would give a clear indication that either the ontology or the annotation set required some improvement. although it may seem trivially obvious to a human curator that a bacterial gene product could not be involved in lactation, this connection is not apparent to an automated annotation system. inclusion of automated checking is essential for detection and correction of flaws in such a system.

quality control is of critical importance in both the ontology structure and the annotations. to improve both datasets we have developed a system to automatically find inconsistencies between the implicit taxon specificity of go classes and the species of origin of the annotated gene products. using this system, inconsistencies are automatically detected and passed on to curators for correction. this work builds upon the prior publication of three logically defined relations  used to link classes in the gene ontology with taxonomic classes  <cit> .

RESULTS
specification of taxonomic constraints
the mainstay of this inconsistency detection system is the capture of taxon specificity of go classes using two new relationships. where a go class should only be used for annotation of gene products from a given taxonomic grouping, the relationship used is only_in_taxon. conversely, where a gene product should never be used for annotation of gene products from a given taxonomic grouping, the relationship is never_in_taxon. the syntax in which this information is recorded, and that of the other associated files, can be viewed at the locations noted in the methods section.

where a go class x has the only_in_taxon relationship to a taxonomic group y, this indicates that that go class and its sub-types and parts should only be used for annotation of gene products from organisms of that taxonomic group and its sub-types. there may be some sub-types of the taxonomic group that do not carry out the process, but there will certainly be no examples of the process outside of the named taxonomic group. to give an example, if the class 'lactation' is restricted to use with mammalia , then this class may only be used for annotation of mammalian gene products. as the relationship is inherited by all mammalian sub-types, the class can be used for annotation of gene products from species such as ornithorhynchus anatinus  and desmalopex leucopterus , but not for species outside of mammalia such as arabidopsis thaliana  and gallus gallus . the constraint is inherited by sub-types and parts of the go class, and it can be seen in figure  <dig> that 'lactation' inherits this constraint from the go class 'mammary gland development'. the only_in_taxon relationship corresponds to the previously published specificity relationship  <cit> . the checking system currently contains  <dig> only_in_taxon constraints . we anticipate that there will be scope for a great expansion in the number of constraints, however these are added as the terms are spotted by curators, so the number will continue to build up gradually for some time.

where a go class x has the never_in_taxon relationship to a given taxonomic group, this indicates that that go class and its sub-types and parts should never be used for annotation of gene products from organisms of that taxonomic group or its sub-types. it also indicates that there is no restriction on using the go class for annotation of gene products from any taxonomic group outside of the one mentioned. to give an example, if the cellular component class 'secretory granule' has the relationship never_in_taxon to the taxonomic group ascomycota, then that means that the class cannot be used for annotation of gene products from any of the ascomycota, including schizosaccharomyces pombe  and saccharomyces cerevisiae . this relationship does not place any restriction on using the class outside of this taxonomic grouping. the never_in_taxon relationship is particularly useful in cases where gene products of some taxa are known to be inappropriate for annotation to a given go class, but where we do not yet have enough information to make an only_in_taxon grouping, or in situations where it would be inappropriate to make an only_in_taxon relationship because the class is widely applicable, having just a few exceptions. the checking system currently contains only two never_in_taxon constraints, as we try to use the more comprehensive only_in_taxon relationship where possible.

taxon classes are drawn from the ncbi taxonomy hierarchy and supplemented with union classes created for use in-house. for example, to capture the set of organisms carrying out photosynthesis in any form we have created the union class 'bacteria or archaea or viridiplantae or euglenozoa' . this is necessary because sub-types of all of these classes carry out photosynthesis, but in the ncbi taxonomy hierarchy there is no common super-class that includes all of these groups. where sub-types of a taxon-restricted go class have narrower implicit taxon specificity than the ancestor class, this is asserted by applying a stricter relationship. for example, photosynthesis is restricted for use with gene products of the group that is the union of 'bacteria or archaea or viridiplantae or euglenozoa'. however, the sub-type of photosynthesis known in go as 'pep carboxykinase c <dig> photosynthesis' is restricted for use to the smaller viridiplantae group . this narrower taxonomic group further constrains the applicability of the class relative to the ancestor go class.

consistency checking using taxon constraints
the main utility of this set of formalized constraints is in checking for inconsistencies between the annotations and the ontologies. a script is run once a week to check for annotations that contravene the constraints . for example, one of the checks is to see if any gene products from species outside of the taxon mammalia has been annotated to the go class 'lactation' or to any of its sub-types. discovery of an annotation contravening such a constraint would give a clear indication that work was required to improve either the ontology or the annotation. all annotations in the go central repository are checked with each of the constraints, and a set of the inconsistencies flagged is made available to the groups that produced the annotations.

there are several beneficial outcomes of this regular checking. problems in the ontology structure or annotation set are quickly spotted and corrected. a common type of error is an inaccuracy in the inheritance path down the long series of relationships in the ontology. though these are hard to spot by eye, they are easy to automatically detect with this new checking system. another frequently occurring problem is an ambiguity in a go class definition that may have led annotators to interpret and use classes in a very different way from that intended by the editors. prompt detection and reporting of such problems greatly enhances the accuracy of the ontology and the speed of correction. one of the most common errors that we have found with the checks is the annotation of a viral gene product to a cellular component term rather than the equivalent 'host' cellular component term. this can particularly be seen with the exp and tas annotations . in these cases many viral gene products were annotated to terms such as 'endosome lumen' instead of 'host endosome lumen'. as this appears to be a significant issue, we are reviewing our policies on the annotation of viral gene products to these terms. on closer examination we discovered that the majority of these exp and tas viral annotations are sourced from reactome  <cit>  . we are exploring the possibility of automatically fixing these annotations to use the "host" term.

experimental
computational analysis
author statement
curator statement
a large number of inconsistencies have been found, and the problems corrected. the number of inconsistencies in each evidence code group are shown here, both as an absolute number, and as a percentage of the total annotations with that code. note that the high rate of exp annotation flags are due to reactome virus annotations . for interpretation of evidence codes see http://www.geneontology.org/go.evidence.shtml

the following section shows further specific examples of improvements that have been made to the annotation sets. a summary of the numbers of annotation inconsistencies being flagged by a selection of the constraints is shown in table  <dig>  it is important to note that inconsistencies may reflect problems in either the annotations or ontologies, even though they are flagged as inconsistent annotations. we have been able to make extensive improvements to both datasets as a result of these checks. a summary of the number of annotation inconsistencies that have been found and fixed is shown in table  <dig> sorted by evidence code, and in table  <dig> sorted by ontology. these tables do not include annotations from the goa uniprotkb electronic annotation dataset, as we have not yet been able to fully check this very large dataset. we would like to stress that only a very tiny minority of annotations and go classes are problematic, reflecting the diligence of go annotators and ontology developers, and the quality of our electronic annotation methods. this is indicated by the very low percentage error rate shown in the last column of each table. however, even a small number of errors can cause problems for our users, and so we consider this checking system to be a valuable contribution to quality control in the go dataset.

a large number of inconsistencies have been found and various repairs made. this table gives a summary of the numbers of annotation errors found using a selection of the rules that we have implemented. for interpretation of evidence codes see http://www.geneontology.org/go.evidence.shtml

a large number of inconsistencies have been found, and the problems corrected. the number of inconsistencies in each ontology are shown here, both as an absolute number, and as a percentage of the total annotations to that ontology.

inconsistencies found and fixed -- electronic annotations
automated pipelines can quickly produce large volumes of annotation for a diverse set of species. in situations where there is no funded manual annotation program such methods are extremely valuable, but generation methods must be strictly controlled to reduce production of incorrect annotations. a large proportion of the queries returned by this checking system were triggered by automatically generated annotation, and so we conclude that implementation of the system is a valuable contribution to quality control in this area.

as examples of this, drosophila two iea annotations to go: <dig> 'photosynthesis, light reaction' and eight annotations to go: <dig> 'bacterial-type flagellum' have been caught and removed, prompting a review of the flybase automatic annotation pipeline. these spurious annotations arose because of low probability matches between drosophila proteins and short interpro domains. the automated interpro2go pipeline mapped these false positive domain hits to go classes. by increasing the stringency for interpro domain to protein mapping, these taxon errors have been eliminated and the confidence level of all iea-based go assignments has improved in flybase.

similarly, automatic transfers of annotations to orthologs needed to be further restricted when the class go: <dig> 'in utero embryonic development' was found to have been transferred from a mammalian gene product to an avian gene product by ensembl compara  <cit>  for  <dig> annotations.

inconsistencies found and fixed -- manual annotation or ontology development
excluding the viral exp annotations, the majority  of remaining inconsistencies found were derived from unvetted automated prediction programs, but errors were also found in experimentally derived and manually checked annotations. some problems in manual annotations were found to have resulted from misunderstandings of the meanings of go classes between the ontology editors who wrote the class definitions and the annotators who were using them. for example, the class 'sensory perception' was originally defined as 'the series of events required for an organism to receive a sensory stimulus, convert it to a molecular signal, and recognize and characterize the signal.'. to an annotator reading the class name and definition it would seem that this class could be used for annotation of bacterial gene products that enable the bacterium to sense and recognize outside influences. however, the go class has in its ancestry the class 'cognition', indicating that this is a neurological process and therefore not suitable for annotation of bacterial gene products. to avoid future annotation errors, the definition was clarified by the addition of the sentence: 'this is a neurological process.'. the incorrect bacterial annotations were removed from the source database.

in some cases the class names and definitions can be quite subtle and gene products can accidentally be annotated to classes that are almost, but not quite correct. for example the fungal microtubule organizing center is called the 'spindle pole body', whilst in mammals the microtubule organizing center is called the 'centrosome'. in go we have classes for 'centrosome organization' and for 'spindle pole body organization', and only fungal gene products should be annotated to the 'spindle pole body organization' class.

application of a taxon constraint has enabled annotations applied to this class in error to be caught and corrected. having caught this kind of error once, the ontology developers can improve the definition so that in future the meaning will be more apparent to annotators. this kind of check is particularly useful where a constraint has been applied to a fairly high-level class, showing up ambiguity and consequent errors in the use of the sub-types of the class. the advantage here is that all the sub-types do not need to be individually considered for application of constraints, but that they can be caught using a single high-level constraint.

a small number of other inconsistencies were found to have been brought about by typing errors in accession numbers, and these have been fixed.

novel electronic annotations
in addition to preventing errors, the new system enables us to produce a large volume of new electronic annotations. in previous years many mappings have been omitted from the interpro2go mapping files, because they would not be applicable to all species. however, now such mappings can be used in conjunction with the taxon constraints to ensure that annotations are only transferred to gene products from appropriate species. the new combined system will enable generation of a very large body of novel electronic annotation.

discussion
in creating this system we have examined the previously published relationship options  <cit>  and adapted them to provide a simple, useful checking system. this has brought about improvement to both the annotation set and the ontologies.

in developing the taxon constraints there is always the concern of over- or under-constraint. if the constraints are too tight then we risk flagging correct annotations, whilst if the constraints are too loose, we risk failing to detect problems in the annotations or ontologies. the system has been designed to work hand-in-glove with the manual annotation and ontology development processes, so that there is a virtuous circle of error detection and correction. to best integrate the system into our existing processes, we have chosen to start with excessively tight constraints, and then immediately correct any errors in the constraints that are shown up by the annotation set. as we have a very large and diverse annotation set available, errors in the constraints can be quickly detected and removed.

currently we have not integrated the taxonomic constraints directly into automated function prediction tools, instead opting to use the constraints to vet the resulting annotations, to minimize false positives during error detection. we are currently integrating the constraints into our phylogenetic annotation inference tool   <cit> , which allows a curator to rapidly propagate experimental annotations across species using common descent in a semi-automated fashion. the curator is notified if an attempt to propagate an annotation violates a constraint.

in addition to the core utility of annotation and ontology checking, the development of this system brought about a few other interesting avenues for exploration. the most notable surprise to us was the frequency with which we found annotations indicating horizontal gene transfer between viral and host genomes. for example, one check flagged a viral gene product that encodes a component of the photosynthetic machinery  <cit> . another set of checks highlighted functional gene products encoded by an endogenous retrovirus in the mouse that can produce mature envelope proteins  <cit> . clearly this information was already in the scientific literature for individual gene products, however our system has fortuitously shown us a way to automatically mine such cases. this situation presents a slight difficulty for the checking system, as viral gene products are being found in many processes that would be expected to be carried out only by the host. to accommodate this we are keeping the checks that flag these cases, but then the database groups are ignoring the flagged gene products in the violations file. we may investigate more satisfactory approaches in the future - for example, indicating genes that arose through horizontal transfer in the annotations.

creation of the union classes also gave us an opportunity to reflect on the diversity of taxonomic groups that carry out very similar processes. initially we created a union class 'viridiplantae or bacteria' as a constraint for the high level class 'photosynthesis'. annotation checking showed us that we needed to expand this to 'bacteria or archaea or viridiplantae or euglenozoa'. this demonstrated to us an interesting automated method for detection of diverse taxonomic groups that carry out very similar processes. it should be noted that the union classes do not give any indication of the relatedness of taxonomic groups, or of either convergent or divergent evolution in the past. they simply give an indication of which diverse groups of organisms might be investigated for either phenomenon.

CONCLUSIONS
the go consortium provides a highly developed ontology structure associated with a large volume of annotations. it is essential that a range of automatic checks are carried out on these resources to ensure provision of a maximally correct dataset. the feedback generated from the described taxon checking system has benefited both ontology development and annotation in the go consortium. it is intended that the simple format of these taxon sanity checks will allow go annotation providers and external go annotation prediction tools to directly integrate the checks into their tools, so that annotations can, in future, be checked pre-release. such efforts are already being undertaken by the uniprotkb-goa and interpro groups at the ebi.

