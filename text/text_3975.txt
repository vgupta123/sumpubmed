BACKGROUND
a bayesian network  represents a set of variables and their joint probability distribution using a directed acyclic graph  <cit> . a dynamic bayesian network  is a bn that represents sequences, such as time-series from speech data or biological sequences  <cit> . one of the simplest examples of a dbn is the well known hidden markov model   <cit> . dbns have been applied with great success to a large number of problems in various fields. in bioinformatics, dbns are especially relevant because of the sequential nature of biological molecules, and have therefore proven suitable for tackling a large number of problems. examples are protein homologue detection  <cit> , protein secondary structure prediction  <cit> , gene finding  <cit> , multiple sequence alignment  <cit>  and sampling of protein conformations  <cit> .

here, we present a general, open source toolkit, called mocapy++, for inference and learning in bns and especially dbns. the main purpose of mocapy++ is to allow the user to concentrate on the probabilistic model itself, without having to implement customized algorithms. the name mocapy stands for markov chain monte carlo and python: the key ingredients in the original implementation of mocapy . today, mocapy has been re-implemented in c++ but the name is kept for historical reasons. mocapy supports a large range of architectures and probability distributions, and has proven its value in several published applications  <cit> . this article serves as the main single reference for both mocapy and mocapy++.

existing packages
kevin murphy maintains a list of software packages for inference in bns  <cit> . currently, this list contains  <dig> packages. a small subset of these packages share some key features with mocapy++ . these packages have an application programming interface , perform parameter estimation and are free of charge . mocapy++ is mainly intended for use in scientific research, where reproducibility and openness of scientific results are important. commercial closed source packages are therefore not included in this discussion.

the abbreviations are n: source code is not freely available, bp: belief propagation, ep: expectation propagation, jti: junction tree inference, gibbs: gibbs sampling, mcmc: markov chain monte carlo, vb: variational bayes, is: importance sampling. jags is available online from http://www-fis.iarc.fr/~martyn/software/jags/

in bioinformatics, models are typically trained using large datasets. some packages in table  <dig> only provide exact inference algorithms that are often not suitable for training models with large datasets. other packages have no or little support for dbns, which is important for modelling biomolecular structure. to our knowledge none of the publically available open source toolkits support directional statistics, which has recently become of crucial importance for applications in structural bioinformatics such as modelling protein and rna structure in 3d detail  <cit> . furthermore, mocapy++ is the only package that uses the stochastic em  <cit>  algorithm for parameter learning . these features make mocapy++ an excellent choice for many tasks in bioinformatics and especially structural bioinformatics.

implementation
mocapy++ is implemented as a program library in c++. the library is highly modular and new node types can be added easily. for object serialization and special functions the boost c++ library  <cit>  is used. all relevant objects are serializable, meaning that mocapy++ can be suspended and later resumed at any state during training or sampling. the lapack library  <cit>  is used for linear algebra routines.

mocapy++ uses cmake  <cit>  to locate packages and configure the build system and can be used either as a static or shared library. the package includes a doxygen configuration file for html formatted documentation of the source code. an example of a python interface file for swig http://www.swig.org is also included in the package.

data structures
most of the internal data is stored in simple standard template library   <cit>  data structures. however, stl or other public libraries offer little support for multidimensional arrays when the dimension needs to be set at run-time. in mocapy++ such a multidimensional array is for example needed to store the conditional probability table  of the discrete nodes. the cpt is a matrix that holds the probabilities of each combination of node and parent values. for example, a discrete node of size  <dig> with two parents of sizes  <dig> and  <dig>  respectively, will have a  <dig> ×  <dig> ×  <dig> matrix as its cpt. mocapy++ therefore has its own implementation of a multidimensional array, called mdarray. the mdarray class features dynamic allocation of dimensions and provides various slicing operations. the mdarray is also used for storing the training data and other internal data.

specifying a dbn in mocapy++
consider a sequence of observations. each position in the sequence is characterized by n random variables . each slice in the sequence can be represented by an ordinary bn, which is duplicated along the sequence as necessary. the sequential dependencies are in turn represented by edges between the consecutive slices. hence, a dbn in mocapy++ is defined by three components: a set of nodes that represent all variables for a given slice, the edges between the nodes within a slice  and the edges that connect nodes in two consecutive slices .

node types
mocapy++ supports several node types, each corresponding to a specific probability distribution. the categorical distribution , multinomial , gaussian , von mises   <cit> , kent   <cit>  and poisson distributions are supported. some node types, such as the bivariate von mises and kent nodes, are to our knowledge only available in mocapy++. the bivariate von mises and kent distributions are briefly described here. these distributions belong to the realm of directional statistics, which is concerned with probability distributions on manifolds such as the circle, the sphere or the torus  <cit> .

kent distribution
the kent distribution  <cit> , also known as the 5-parameter fisher-bingham distribution, is a distribution on the 2d sphere . it is the 2d member of a larger class of n-dimensional distributions called the fisher-bingham distributions. the density function of the kent distribution is:  

where x is a random 3d unit vector that specifies a point on the 2d sphere.

the various parameters can be interpreted as follows:

• κ: a concentration parameter. the concentration of the density increases with κ.

• β: determines the ellipticity of the equal probability contours of the distribution. the ellipticity increases with β. if β =  <dig>  the kent distribution becomes the von mises-fisher distribution on the 2d sphere.

• γ1: the mean direction.

• γ2: the main axis of the elliptical equal probability contours.

• γ3: the secondary axis of the elliptical equal probability contours.

the normalizing factor c is approximately given by:  

the kent distribution can be fully characterized by  <dig> independent parameters. the concentration and the shape of the equal probability contours are characterized by the κ and β parameters, respectively. two angles are sufficient to specify the mean direction on the sphere, and one additional angle fixes the orientation of the elliptical equal probability contours. the latter three angles are in practice specified by the three orthonormal γ vectors, which form a  <dig> ×  <dig> orthogonal matrix.

the advantage of the kent distribution over the von mises-fisher distribution on the 2d sphere is that the equal probability contours of the density are not restricted to be circular: they can be elliptical as well. the kent distribution is equivalent to a gaussian distribution with unrestricted covariance. hence, for 2d directional data the kent distribution is richer than the corresponding von mises-fisher distribution, i.e. it is more suited if the data contains non-circular clusters. the kent distribution is illustrated in figure  <dig>  this distribution was used to formulate fb5hmm  <cit> , which is a probabilistic model of the local structure of proteins in terms of the cα positions.

bivariate von mises distribution
another distribution from directional statistics is the bivariate von mises distribution on the torus  <cit> . this distribution can be used to model bivariate angular data. the density function of the bivariate von mises  distribution is:  

where c is the normalizing factor and ϕ, ψ are random angles in [ <dig>  2π[. such an angle pair defines a point on the torus.

the distribution has  <dig> parameters:

• μ and ν are the means for ϕ and ψ respectively.

• κ <dig> and κ <dig> are the concentration of ϕ and ψ respectively.

• κ <dig> is related to their correlation.

this distribution is illustrated in figure  <dig> and described in greater detail in mardia et al.  <cit> . the distribution was used by boomsma et al.  <cit>  to formulate a probabilistic model of the local structure of proteins in atomic detail.

inference and learning
mocapy++ uses a markov chain monte carlo  technique called gibbs sampling  <cit>  to perform inference, i.e. to approximate the probability distribution over the values of the hidden nodes. sampling methods such as gibbs sampling are attractive because they allow complicated network architectures and a wide range of probability distributions.

parameter learning of a dbn with hidden nodes is done using the expectation maximization  method, which provides a maximum likelihood point estimate of the parameters. in the e-step, the values of the hidden nodes are inferred using the current dbn parameters. in the subsequent m-step, the inferred values of the hidden nodes are used to update the parameters of the dbn using maximum likelihood estimation. the e- and m-step cycle is repeated until convergence. parameter learning using the em algorithm requires a method to perform inference over the possible hidden node values. if one uses a stochastic procedure to perform the e-step , a stochastic version of the em algorithm is obtained. there are two reasons to use a stochastic e-step. first, deterministic inference might be intractable. second, certain stochastic versions of the em algorithm are more robust than the classic version of em  <cit> . em algorithms with a stochastic e-step come in two flavors  <cit> . in monte carlo em , a large number of samples is generated in the em step. in stochastic em   <cit>  only one sample is generated for each hidden node, and a 'completed' dataset is obtained. in contrast to mc-em, s-em has some clear advantages over deterministic em algorithms: s-em is less dependent on starting conditions, and has a lower tendency to get stuck at saddle points, or insignificant local maxima. because only one value needs to be sampled for each hidden node in the e-step, s-em can also be considerably faster than mc-em. s-em is especially suited for large datasets, while for small datasets mc-em is a better choice. mocapy++ supports both forms of em.

RESULTS
hamelryck et al.  <cit>  sample realistic protein cα-traces using an hmm with a kent output node. boomsma et al.  <cit>  extend this model to full atomic detail using the bivariate von mises distribution  <cit> . in both applications, mocapy was used for parameter estimation and sampling. zhao et al.  <cit>  used mocapy for related work. mocapy has also been used to formulate a probabilistic model of rna structure  <cit>   and to infer functional interactions in a biomolecular network  <cit> .

to illustrate the speed of mocapy++, we use three parameter estimation benchmarks and report the execution time on a standard pc . the first benchmark is an hmm with  <dig> slices and two discrete nodes in each slice . all nodes have  <dig> states. the second benchmark is similar, but with a 4-dimensional gaussian output node and a  <dig> state hidden node. the third benchmark is more complex and is shown in figure  <dig> 

using a training set consisting of  <dig> sequences,  <dig> iterations of s-em take  <dig> seconds for the discrete hmm,  <dig> seconds for the gaussian hmm and  <dig> seconds for the complex bn. the evolution of the log-likelihood during training is shown in figure  <dig> 

in practice, the most time consuming step in parameter learning is gibbs sampling of the hidden nodes. the running time for one sweep of gibbs sampling for a hidden discrete node is o where l is the total number of slices in the data and s is the size of the node. the largest model that, to our knowledge, has been successfully trained with mocapy++ is an extension of torusdbn  <cit> . the dataset consisted of  <dig> sequences with a total of more than  <dig>  million slices. the model has  <dig> parameters and one em-iteration takes  <dig> seconds. the number of s-em iterations needed for likelihood convergence is around  <dig> 

toolkits for inference and learning in bayesian networks use many different algorithms and are implemented in a variety of computer languages ; comparisons are thus necessarily unfair or even irrelevant. therefore, we feel it suffices to point out that mocapy++ has some unique features , and that the benchmarks clearly show that its performance is more than satisfactory for real life problems - both with respect to speed and data set size.

future directions of mocapy++
the core of mocapy++ described here is not expected to change much in future versions of mocapy++. however, mocapy++ is an evolving project with room for new features and additions. we therefore encourage people to propose their ideas for improvements and to participate in the development of mocapy++. potential directions include:

• additional probability distributions

• structure learning

• graphical user interface

• plugins for reading data in various formats

CONCLUSIONS
mocapy++ has a number of attractive features that are not found together in other toolkits  <cit> : it is open source, implemented in c++ for optimal speed efficiency and supports directional statistics. this branch of statistics deals with data on unusual manifolds such as the sphere or the torus  <cit> , which is particularly useful to formulate probabilistic models of biomolecular structure in atomic detail  <cit> . finally, the use of s-em for parameter estimation avoids problems with convergence  <cit>  and allows for the use of large datasets, which are particularly common in bioinformatics. in conclusion, mocapy++ provides a powerful machine learning tool to tackle a large range of problems in bioinformatics.

availability and requirements
• project name: mocapy++

• project home page: http://sourceforge.net/projects/mocapy

• operating system: linux, unix, mac os x, windows with cygwin

• programming language: c++

• other requirements: boost, cmake and lapack, gnu fortran

• license: gnu gpl

competing interests
the authors declare that they have no competing interests.

authors' contributions
th designed and implemented mocapy in python. mp designed and implemented mocapy++. mp drafted the manuscript and th revised the manuscript. both authors read and approved the final manuscript.

