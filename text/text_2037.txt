BACKGROUND
despite the commercial availability of affordable genome wide genotyping panels, custom-designed snps panels are frequently used for high resolution genotyping studies focusing on specific genes or chromosomal regions. the design of custom snp panels for genotyping studies aims to minimize the number of snps to genotype while maximizing the information content of the panel.

the number of snps to genotype can be minimized by taking advantage of linkage disequilibrium  between snp alleles in the same population. a number of algorithms are available to assess ld between snps and select tag snps representative of groups of correlated snps called bins  <cit> . these bin-tagging algorithms use population specific sets of reference genotypes to compute bins and tag snps and report all possible tag snp candidates for each bin. note that tagger, which reports the best tag snp, also provides an exportable table of r <dig> values between snps that can be used to compute all tag snps candidates. since these tag snps candidates are theoretically equivalent from a linkage disequilibrium point of view, only one tag snp per bin needs to be genotyped to account for the genetic variation of the snps in that bin. in practice, choosing tag snps based on ld criteria alone, without considering assay constraints, can lead to selecting tag snps that might fail experimentally. therefore the design of a panel needs to account for experimental factors to maximize genotyping success. these factors include genotyping score  and distance constraint between snps. furthermore, cost constraint should also be taken into account. for instance, when a snp panel is designed to genotype two or more populations, snps that tag bins in multiple populations should be prioritized. finally, user-defined preferences such as inclusion or exclusion of specific snps and their prioritization by functional category  should also be accounted for in the design of the panel. therefore the design of a snp panel is a complex task that involves the optimization of multiple parameters. applications like mpoptag <cit> , tagzilla <cit> , tagster <cit> , multipoptagselect  <cit> , and snagger  <cit>  provide partial solutions to this problem while also including some level of support for multi-population tag snp selection.

however, none of these applications provides control over a comprehensive enough set of parameters to effectively customize and optimize tag snp selection for the illumina infinium assay. snppicker was developed to fill this gap and since the infinium assay can support custom panels with up to  <dig>  snps, snppicker also support simultaneous tag snp selection over multiple genes or chromosomal regions. snppicker is an application for the design of genotyping panels that accounts for experimental platform constraints, user specific preferences, and optimal selection of tag snps across multiple populations. snppicker focuses on the illumina platforms since affymetrix and applied biosystems  provide their own procedures for tag snp selection. however, configuration parameters can be adjusted to apply to other platforms.

methods
snppicker is a post-processor of ld bin-tagging algorithms. the application can process the output of ldselect, tagzilla, tagger, and snagger to obtain tag snps and bin definitions. alternatively, bin definitions, number of snps per bin, and tag snps per bin can be specified via tab-delimited files. snppicker can be configured for different genotyping platforms and user preferences. a command line interface enables control of snppicker options and specification of project-specific input and output files.

optimization constraints
the optimization process takes into account several factors such as:

platform-specific factors
conflicting tag snps: snps that are in close proximity along the dna sequence can interfere with each other when assayed  <cit> . for instance, illumina recommends snps to be separated by more than  <dig> bp on their goldengate assay  <cit> . snppicker optimizes the avoidance of conflicting tag snp based on a distance cut-off. in addition, the user can request the distribution of conflicting tag snps across multiple panels to force conflicting tag snps to be genotyped. when specified, this request will be first taken into account by snppicker. remaining conflicts will be resolved by selecting non conflicting tag snps.

genotyping probability: the probability that a snp will be successfully genotyped depends on several physico-chemical and experimental factors that can be empirically assessed. ingersoll and co-workers suggested combining a predicted genotyping score provided by vendors and experimentally established confidence classes into a probability reflective of the chance that a snp has to succeed during the assay  <cit> . snppicker uses a similar approach, allowing the specification of two properties per snp that are converted into probabilities. by default ingersoll et al. parameters for are loaded into snppicker. the mapping function is under user control, but snp probabilities must be limited to a small set of discrete values to enable functional prioritization.

illumina infinium-specific factors: the infinium assay developed by illumina introduces a new design constraint. snps with rare complementary allele combinations  are genotyped using pair of bead types whereas all other allele combinations are genotyped with only a single bead type  <cit> . since the panel include a fixed number of bead types, the total number of snps that can be included in a panel can be maximized by avoiding a/t or c/g snps. snppicker can be used to perform this optimization.

user-specified factors
functional rank: different functional categories can be assigned to a tag snp such as nonsense, missense, non-synonymous, coding, etc. each category is assigned a configurable rank to define the order of preference in which tag snps will be included in the assay panel. this rank prioritization is only taken into account when tag snps have the same genotyping probability.

number of assay panels: snppicker can organize snps on multiple snp panels. when more than one panel is used, snppicker attempts to remove conflicting tag snps by distributing conflicting pairs across panels. conflicts due to dna template competition can thus be avoided.

maximum number of tag snps per bin: the maximum number of tag snps to select per bin can be defined by the user. this number can be assigned as a function of the total number of tag snps. the default is one tag snp per bin. this feature is useful to avoid failures for large bins which represent a large fraction of the genetic variation.

maximum genotyping probability of a bin: a genotyping probability threshold can be set in the program. this threshold defines the limits above which the user considers that a bin will be successfully assayed. from a technical point of view, this threshold speeds up the search for solutions since once the threshold is reached tag snps are no longer added to a bin even if the maximum number of tag snps per bin has not been reached. by default the threshold value is set to  <dig>  which turns off this optimization since no bin can reach that probability.

existing genotypes: snppicker can account for snps that have been genotyped in a previous experiment. snppicker will not pick any tag snps for bins where these genotyped snps are tag snps.

minimum genotyping score threshold for a snp: a threshold can be set to exclude snps with a low predicted genotyping score from the optimization process. in addition to having a higher risk of failure, it is suspected that some of these snps can interfere with the performance of other snps in the panel by non-specifically binding to dna <cit> .

user imposed tag snps inclusion and exclusion: the user can force tag snps to be present  or excluded from the final assay panel. if two obligate snps are in violation of the proximity constraint, the one being selected will be decided based on the optimization of the score of each alternative.

optimization strategy: bin clusters
snppicker's optimization strategy focuses on finding a solution that maximizes the score of a panel while minimizing the total number of tag snps or bead types to genotype. since the exhaustive enumeration of all possible tag snps panels that match user defined criteria can be time consuming, snppicker groups non-independent bins into clusters for joint optimization. non-independent bins are transitively grouped by single linkage clustering. two bins are non-independent when each has a member of a pair of conflicting tag snps or when these bins share at least one tag snp . each resulting cluster of bins, called a bin cluster, is optimized and scored independently during the optimization process.

the tag snps selected from each bin cluster are combined into the final panel and scored as a function of the genotyping probability of the snps in the panel. optimization first maximizes coverage criteria and then a score for each bin cluster. lastly, the sum of the functional classes of all the selected tag snps is minimized for solutions with equal bin cluster score.

scoring functions
coverage selection criteria
the panel has to optimize the following coverage criteria for each bin cluster before the bin cluster score is optimized.

 has the most number of bins tagged by at least one tag snp.

 has the maximum number of obligates.

 has the lowest difference between the expected and actual total number of tag snps in the panel. the expected total number of tag snps is derived from the maximum number of tag snps per bin set by the user. no penalty is applied if a bin has less than the user defined number of tag snps because the bin has too few tag snps or because the bin probability reaches the user defined maximum genotyping probability of a bin.

bin cluster score
the bin cluster score is computed from the genotyping probability of a bin divided by the total number of tag snps to favor a solution with fewer tag snps. the ratio is weighted by the number of tag snps in a bin, a strategy  <cit>  that increases the statistical power for association with a phenotype.

the score of sp a panel p is computed by summing scores over each bin cluster:  

where the score for the kth bin cluster is computed as follows:   

where pitagged_bin is the probability of successfully genotyping at least one tag snp per bin, nitagsnps is the number of tag snp in bin i, and nktags is the total number of tag snps selected for bin cluster k. note that if the -infinium command line option is selected, nktags in equation  <dig> is replaced by the number of bead types nkbeads.

the probability pitagged_bin is computed from  

where the probability plsnp_success of successfully genotyping a snp is a configurable function of the predicted genotyping score and the confidence class. plsnp_success is obtained from retrospective analysis of snps that have been successfully genotyped.

functional prioritization and functional score
during the first two phases of solution search, tag snps with equal probability are considered for inclusion in the panel in order of their functional rank  insuring that the first solution found with a given coverage and score will have the best functional rank among equivalent solution. however, during the search for a final solution, a swapping procedure is used , which breaks the functional ordering. during that phase, the functional rank prioritization is achieved by picking the solution with the maximum sum of the functional rank of the tag snps in the bin-cluster .

optimization algorithm
pre-processing
prior to optimization, tag snps are organized to facilitate and speed up the enumeration of solutions. three pre-processing steps are executed in the following order:

 selection of initial set of candidate tag snps: during this step, tag snps not meeting minimum score criteria and snps excluded at the user's request are removed from the list of tag snps.

 identification of bin clusters: next, bin clusters are created by linking bins with conflicting tag snps or sharing overlapping tag snps. the latter happens when multiple populations are analyzed. note that remaining isolated bins are treated as bin clusters.

 ranking of tag snps in bin cluster: lastly, tag snps in each bin cluster are sorted in descending order of genotyping probability. since tag snp probabilities are discretized, many tag snps may have the same probability. tag snps with the same probability are ordered by decreasing functional rank.

optimization procedure
snppicker's optimization procedure operates on each bin cluster of tag snps independently and proceeds in three consecutive phases. the first phase is designed to ensure rapid convergence towards a nearly optimal solution via a heuristic algorithm. the second and third phases further explore the solution space until the user specified time limit is reached or an exhaustive search has been completed.

phase 1: nearly optimal solution
the first phase focuses only on non conflicting tag snps and tag snps genotyped by a single bead when the illumina infinium protocol is used.

single population optimization: for each cluster, tag snps are selected for inclusion in the panel in order of ranking until the maximum genotyping probability threshold or the maximum number of tag snps has been reached for each bin in the cluster.

multi-population optimization: a nearly optimal solution is created using a dynamic programming search: tag snps are ordered in each cluster as a function of the number of populations they tag , and their rank in the bin cluster. each tag snp with the same nptag is selected iteratively. once a tag snp is selected, nptag is updated for the remaining tag snps, counting only bins that still need more tag snps. the remaining tag snps are then reordered as a function of nptag and their rank in the list. when only tag snps tagging single bins remain, tag snps are picked independently for each bin. this procedure is repeated recursively until the maximum bin cluster probability score or the maximum number of tag snps has been reached for each bin in the cluster. the best solution serves as the starting point for phase  <dig> 

phase 2: swapping in conflicting tag snps and tag snps assayed by a pair of bead types
the second step is more time consuming. it attempts to add to the panel tag snps from pairs of conflicting tag snps or tag snps requiring a pair of bead types when the -infinium option is specified. a swapping strategy similar to the one described by howie and co-workers is used  <cit>  by simultaneously adding one or more of the not previously considered tag snps while removing subsets of tag snps from the panel to avoid proximity conflicts or superfluous coverage.

phase 3: exploring full solution space
finally in an attempt to further refine the nearly optimal solution obtained from previous phases, the systematic replacement of zero or more selected tag snps already in the panel with the remaining tag snps is performed. since this swapping procedure can be time consuming, a time limit can be set by the user. tag snp swapping is performed independently for each bin cluster. note that the number of removed tag snps can be different from the number of added tag snps to ensure the exhaustive exploration of solutions that meet the coverage requirements, yet have a better score. the swapping process stops when the time limit allocated for the search is exhausted or the full search for a better solution is complete. if a better solution is found by swapping, the entire swapping procedure is repeated with the new baseline solution. the numbers of snps to swap out is limited to be no more than  <dig> to limit computational time.

approximate solution
bin clusters with a large number of tag snps can require more time to optimize than the limit set by the user. when the time limit is reached or if the cluster has more than  <dig> tag snps to swap, the exhaustive search from phase  <dig> is reduced to a simpler version that sequentially tries to swap in a single tag snp at a time instead of multiple tag snp while still trying to swap out multiple tag snps. the tag snps are considered in the order of the ranked tag snp list. although not optimal, the time to find a high scoring solution is significantly reduced by avoiding swapping in multiple snps at the same time.

final panel and report
the tag snp panel is reported in a tabular format: obligate tag snps are listed first followed by the remaining tag snps. the predicted genotyping score, functional class, bin id, population tagged, and genotyping probability is also provided for each snp. other than obligates, tag snps are reported in order of their contribution to the panel score. the incremental contribution to the panel score of each tag snp is listed as well. if the multiple panel design option was selected, a panel identifier is provided for the conflicting tag snps. finally, if a bin has no selected tag snp, the report includes the reason why each tag snp in that bin was not selected.

integration of snppicker with snpapp
snpapp is an in-house application developed to facilitate the selection of snps and computation of tag snps in genes or chromosomal regions. snpapp accesses multiple sources of public reference genotypes including hapmap <cit>  phase ii, release  <dig>  niehs snps <cit> , and seattlesnps <cit> . the application has recently added genotypes from the  <dig> genomes project <cit> . gene definitions are obtained from entrez refseq <cit> . snpapp uses ldselect for tag snp calling <cit> . snpapp returns ld bins and tag snp data for each gene or chromosomal region submitted as input. snpapp provides this information for each source of reference genotype along with coverage information. snppicker is interfaced to snpapp to provide a comprehensive solution for genotyping panel design. for this work, snpapp was used to generate tag snps with the following parameters: r2>=  <dig> , minor allele frequency cut-off of >=  <dig> percent, and inclusion of snps up to  <dig> kb 5' or 3' of each gene.

RESULTS
validation datasets
 <dig> genes validation set
snppicker was used to design a  <dig> gene single-population goldengate panel for the hapmap ceu population. the  <dig> innate and adaptive immune response genes dataset was assembled from  <dig> classes of genes. the first class includes innate immune response genes including antiviral proteins and associated pathway genes, interferon and interferon inducible genes, toll-like receptor and associated pathway genes . the second class includes a broad spectrum of immune response genes such as cytokine  and cytokine receptor genes  regulating th <dig>  th <dig>  and inflammatory responses to rubella. the third class includes genes encoding nuclear receptors for vitamin a and d  that play an important role in the regulation of both innate and adaptive responses to viral vaccines.

a total of  <dig> tag snps were provided to snppicker using snpapp, with  <dig> being above the minimum score threshold.  <dig> of those tag snps being considered for the panel  had at least one other tag snp in close proximity .

 <dig> genes validation set
snppicker was also used to design a multi-population goldengate panel to genotype  <dig> cardiovascular disease related genes  <cit> . tag snps were extracted from hapmap for the european whites  and african yorubans  population using snpapp. the analysis of the  <dig> tag provided to snppicker showed that  <dig> tag snps  are shared between the ceu and yri population.  <dig> tag snps  have at least one other tag snp in close proximity .

validation
quality of the optimization procedure
snppicker was configured to generate a single panel optimized for the golden-gate assay with a single tag snp per bin. pairs of tag snps separated by  <dig> bp or less were not allowed in the final panel. tag snp selection was performed independently for each chromosome containing at least one gene, allowing up to  <dig> seconds of optimization per bin cluster. for the  <dig> and the  <dig> gene panels, out of a total of  <dig> and  <dig> bin clusters optimized respectively,  <dig> and  <dig> bin clusters respectively were not completed within the fifty seconds allocated due to too many tag snps. the approximate solution was returned for those clusters. the computational time was dominated by the time spent to optimize the large bin-clusters.

quality of the designed panel
to assess the quality of the solution returned by snppicker, one million random solutions per chromosome were generated for each panel. these solutions were constrained to include as many or fewer tag snps than the optimized panel returned by snppicker. because of conflicts, some bins may not end up with any selected tag snp, therefore bins need to be assigned tag snps in randomized order to avoid bias about which bins do not get tagged. for each chromosome, random solutions were generated by iteratively randomly selecting a bin and randomly assigning a tag snp to that bin. the procedure for each solution terminates when i) the total number of tag snps in the panel has been reached or ii) no more tag snps can be added to any bin because of conflicts or because all bins have reached their maximum number of tag snps. this randomization procedure takes into account the selection of multiple snps per bin.

none of the random solutions had better coverage than snppicker's solution. for the random solutions with equal coverage, none of the random solutions for any of the chromosomes had scores better than snppicker's optimized solution. the results were similar for the  <dig> genes panel. the same analysis was also performed independently on each of the bin clusters for which an approximate solution was generated. in these cases as well, after one million permutations for each of those bin clusters, no better solutions were found.

enrichment of high probability tag snps
to assess the enrichment of high probability tag snps upon optimization, the normalized distribution of tag snp probabilities in the initial set of tag snps was compared to that of the panel after optimization . the highest enrichment of 25%  is observed for tag snps with probability> <dig> . the probability enrichment is limited because the optimization can only operate on bins that have more than a single tag snp  of bins).

enrichment of functional tag snps
feature comparison with other tag snps selection applications
differentiating features between the multi-population tag snps algorithms. features similar to all  <dig> applications were omitted.

optimization comparison with snagger and multipoptagselect
the performance of snppicker, snagger, and multipoptagselect was compared on the design a snp panel for the genotyping of the  <dig> genes validation set. for this comparison, two panels were designed for infinium and goldengate assays. to make results comparable, the same tag snp and ld information produced by snagger was converted to bins in order to perform the comparison between the three applications. tag snps were computed to tag snps with minor allele frequency greater of equal to  <dig>  at a minimum r <dig> of  <dig> . bins were created according the procedure in  <cit> , but limiting the central tag snps to the tag snps selected by snagger and proceeding in the population order of snagger . it should be noted that the bin construction procedure led to different number of bins in the two panels because snagger chose different tag snps in the two cases.

snagger was run with the -minbinsize option set to  <dig> and minprobsucc to  <dig>  to disable the selection of multiple tag snps per bin. genotyping scores were obtained from illumina. missing scores were set to - <dig>  a minimum genotyping score of  <dig>  was required for a snp to be selected as candidate tag snp. snppicker was limited to using at most  <dig> seconds per bin cluster to make the total runtime of all applications similar.

tables  <dig> &  <dig> provide an overview of the multi-population panels designed by snppicker, multipoptagselect, and snagger. table  <dig> reports the comparative statistics of the panel designed for the goldengate assay that is sensitive to snps in close proximity . note that multipoptagselect does not handle conflicting tag snps. from the  <dig> bins produced by snagger,  <dig> are tagged by snppicker compared to  <dig> by multipoptagselect. however, multipoptagselect includes in the panel  <dig> conflicting snp that might lead to assay failure, resulting in only  <dig> bins that are likely to be successfully tagged. when compared to snagger, the other tool that can handle conflicting snps, snppicker is able to tag  <dig> additional bins using only  <dig> tag snps instead of the  <dig> tag snps required by snagger. snppicker can also design a panel that tags all of the  <dig> bins tagged by multipoptagselect by spreading the conflicting tag snps across multiple panels.

discussion
snppicker automates the design of tag snp genotyping panels with maximum likelihood of genotyping success while minimizing the number of tag snps to assay.

snppicker also optimizes functional tag snps, but only after maximizing genotyping probability. this approach makes snppicker different from other applications, such as multipoptagselect and snagger, that prioritize functional class at the expense of the genotyping success of a snp.

snppicker maximizes genotyping success by optimizing two properties: the genotyping probability of a bin , statistically derived from the individual genotyping probability of each snp; and, for some platforms, the proximity distance between snps. the genotyping probabilities currently used by snppicker are derived from a retrospective analysis of experimental genotyping results. snp proximity is a strictly enforced constraint. although, in this article, this feature was used only on the goldengate custom genotyping design, this constraint can significantly impact the design of the panel for any genotyping platform that is based on hybridization <cit> . the importance of this effect was measured in two datasets. fifteen and thirty three percent respectively of snps with minor allele frequency  >= 5% were within  <dig> base pairs of another snp in the american european whites  population for the hapmap ii  <cit>   and for the  <dig> genomes pilot  <dig> data  <cit> . snppicker also includes options to avoid any conflict, not only between selected tag snps, but between any snp supplied by the user in the score files.

snppicker uses a time-constrained algorithm to search for an optimal solution. this option provides more flexibility and control over the time that will be allocated for the optimization, particularly when bin clusters with a large number of tag snps and spanning several populations have to be processed. the time allocated for the search is guided by the user. if the search completes before the time limit, the returned solution is optimal. if not, snppicker returns a solution that, while not guaranteed to be optimal, may in fact be the optimal solution.

finally, snppicker includes a set of useful features that makes the tool versatile and easy to customize for the needs of a specific study. these features include: i) accounting for constraints of the goldengate or infinium chemistry, ii) accounting for tag snps that have been previously genotyped , iii) distributing tag snps on multiple panels to avoid proximity constraints, iv) simultaneous design of a multi-gene panel, and v) simultaneous multi-population optimization.

one limitation of snppicker's post-processing design is that if a bin has all of its tag snps excluded because of score or proximity constraint, the non-tag snps in the bin remain untagged. this limitation is easily mitigated by running a second round of tag snp selection, only including snps that are in untagged bins and not in proximity conflicts with the tag snps chosen in the first pass.

CONCLUSIONS
snppicker is an application for the design of single and multi-population genotyping panels based on the linkage disequilibrium of snps and additional constraints imposed by the user or by the genotyping assay. snppicker is currently the only tool that can optimize bead type selection for the infinium assay, an assay that is frequently used when large snps panels have to be designed. its integration with snpapp provides an easy to use comprehensive solution to the design of genotyping panels. the extensive set of criteria that are offered to control the selection of snps make it also a flexible tool for the designed of customized snp panels. finally, snppicker is a command line application that can straightforwardly be integrated within data processing pipelines.

authors' contributions
hs and jpk equally contributed to the design of the method, the design of the experiments, and the manuscript preparation. hs wrote most computer codes and analyses. dr contributed the initial requirements and testing of the implementation. gap and dnr contributed to the design of the  <dig> gene panel and edited the manuscript. all authors reviewed and approved the final manuscript.

