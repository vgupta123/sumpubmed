BACKGROUND
minisatellite maps
a dna region is categorized as a minisatellite locus if it is composed of tandemly repeated dna stretches and spans more than  <dig> bp. each of these stretches is called a unit and it holds  10- <dig> bp. the units are not necessarily identical due to point mutations, and their number and organization may vary among individuals as a result of subsequent evolutionary events. the variant repeat mapping by pcr  is a popular technique to reveal the structure of a minisatellite locus as it enables unit typing and minisatellite map production. unit typing is the classification of the variable units into distinct types  according to their dna sequences. a minisatellite map is a compact representation of the minisatellite locus, where each unit is replaced with the respective symbol. figure  <dig> shows an example of a minisatellite locus and the respective map.

applications of minisatellite map analysis
minisatellite maps have manifold applications in forensics and population studies. foster et al.  <cit>  used minisatellite maps to resolve the dispute on the fatherhood of president jefferson to a son of his slave. they showed that jefferson is the biological father of her last son, but not her first son as thought before. based on the ms <dig> dataset, armour et al.  <cit>  confirmed the african origin for modern humans, alonso et al.  <cit>  proved a european affiliation for the basques, and rogers et al.  <cit>  dated the eurasian population as 52000- <dig> years and the oldest european as 37600- <dig> years. using the msy <dig> dataset, which was first investigated by jobling et al.  <cit> , brión et al.  <cit>  showed that european lineages are more similar than north african ones. bonhomme et al.  <cit>  used minisatellites to study house mouse population and provided a migration map for them. very recently, yuan et al.  <cit>  used the ms <dig> minisatellites to study the population specificity among thai, chinese, and japanese. they showed that the ms <dig> minisatellite is an effective tool to distinguish individuals from these populations.

the functional and medical roles of minisatellites have also been addressed in many studies for the last two decades, and the interest increases with more individual genomes becoming available. to mention a few examples, thierry et al.  <cit>  discovered a class of minisatellites involved in cell adhesion and pathogenicity. vafiadis et al.  <cit>  proved that the insulin minisatellite plays an important role in the regulation of insulin and the authors of  <cit>  showed that it is associated with polycystic ovary syndrome, obesity, and type i diabetes. raeder et al.  <cit>  showed that the mutations in the cel minisatellite is correlated with exocrine dysfunction in diabetic patients. tsuge et al. conjectured that polymorphisms in minisatellites at the flanking region of smyd <dig> are susceptible risk factors for human cancer  <cit> . for more studies, we refer the reader to the review of vergnaud and denoeud  <cit>  and the wikigenes page in  <cit> .

computational challenges in minisatellite analysis
researchers analyzing minisatellite maps usually perform the following computational tasks:

 <dig>  comparison of minisatellite maps by computing all pairwise alignments.

 <dig>  construction of a phylogenetic tree based on all pairwise distances, to show the relatedness between the involved individuals.

 <dig>  studying structural variations, to examine how the unit types vary and distribute along a minisatellite map.

 <dig>  studying duplication dynamics, to infer the type from which the map originated and in which direction the map elongates.

recent studies often relied either on visual inspection or on heuristic methods. to our surprise, most did not make use of the recent advancement in the bioinformatics methods developed for pairwise map comparison  <cit> . we think this situation is mainly due to the lack of both web-servers and open source tools performing the aforementioned tasks. to the best of our knowledge, there is currently just one server, called ms_align  for minisatellite map comparison  <cit> . it is, however, limited to computing all pair-wise alignments, with no post-processing and visualization of map alignments.

in this paper, we present the web server wami for the analysis of minisatellite maps. the server uses a recent algorithm for map alignment, improved over the one in ms_align, and provides a workflow for the execution of the four computational tasks mentioned above, including visualization. these capabilities are demonstrated here by the analysis of the msy <dig>  <cit>  and ms <dig>  <cit>  datasets.

implementation
model of minisatellite map evolution and alignment
minisatellite maps can be studied in an independent or a comparative fashion. in the former, a map is analyzed to identify the evolutionary history that gave rise to the observed sequence of units. in the latter, two maps are aligned together to figure out regions of common and individual evolution histories. however, both tasks are entangled, since a region of individual evolution, juxtaposed to a gap in the map alignment, must have a plausible individual history. this makes minisatellite map alignment algorithmically more challenging than the standard sequence alignment problem.

map evolution
our evolutionary model of minisatellite maps includes the following operations acting on the unit level:

• unit mutation: this is the change of one unit type into another. for example, the unit b in the map abd mutates into c leading to the map acd. the unit mutation is a consequence of point mutations  acting on the dna sequence of the units. in the example of figure  <dig>  the differences between the three unit types are attributed to nucleotide substitutions.

• duplication: duplication  is the generation of new copies of the units by tandem duplications. replication slippage, reciprocal exchange , and gene conversion  are potential mechanisms for unit duplications. the first is suggested for short segments while the others are for long ones; see  <cit>  for more details. figure  <dig> illustrates the unequal cross over mechanism, where the paired homologous chromosomes exchange unequal segments during the cell division. this results in the duplication of the unit b in one chromosome and the deletion  of it in the other. the single-copy duplication model assumes that one unit can duplicate at a time while the multiple-copy duplication model assumes that multiple adjacent units can duplicate at a time. for example, the adjacent units bc in the map abbc can duplicate in one event, leading to the map abbcbc.

• insertion/deletion: insertion is the appearance of unit types, possibly due to errors or translocation events. for example, insertion of unit z in the map ac leads to the map azc. a dual operation to insertion is deletion where one unit disappears, leading also to map contraction. potential mechanisms for these events include the ones mentioned above except for replication slippage.

each of these operations is assigned a cost to reflect the relative rate at which it occurs in nature. the cost of a unit mutation is proportional to the hamming/edit distance between the nucleotide sequences of the units. we write dm to denote this cost between two units x and y.  =  <dig> if x = y.) in figure  <dig>  dm =  <dig> because of one mismatch at the last nucleotide, and dm =  <dig> because of mismatches at the fourth and the last nucleotide. the costs of duplication, insertion, and deletion are arbitrary and usually chosen such that the duplication is less than the mutation, deletion and insertion cost.

reconstruction of evolutionary history
the evolutionary history of a map is the series of evolutionary operations leading to the observed sequence of units. this history is also called duplication history, because the duplication is the main event contributing to map evolution. the cost of a duplication history is the total cost of the occurring operations. an optimal  history is one with the minimal cost. for example, one history of the map bcaccbb originated from the leftmost unit b is as follows: the leftmost unit b duplicated three times to the right leading to the sub-map bbbb. then the second b mutates into c leading to the sub-map bcbb. the unit c duplicates two times to the right producing the sub-map bcccbb. the second c mutates into a and the last c duplicates once again to the right leading to the final observed map. assuming that dm = dm and dm <dm, we leave it as an exercise for the reader to verify that this scenario is indeed an optimal one.

map alignment
the alignment of the minisatellite maps includes the operations of replacement , free insertion/deletion , and duplication. given a cost for each operation, an optimal alignment is the one of minimum cost. an efficient algorithm for finding optimal map alignments is arlem  <cit> .

an optimal map alignment delivers a three-stage scenario: the aligned units  refer to common ancestors, the duplications refer to differences in the individual duplication histories, and the indels may refer to errors or translocations. figure  <dig> , shows an alignment of two maps where the replaced  characters are put above each other and the units evolved by duplications are attached to arcs. in this representation, an arc connecting two identical units corresponds to a duplication event, and an arc connecting two different units corresponds to a duplication followed by a mutation. in this alignment, the sub-map bcaccbb has emerged as a result of duplication/mutation events from the leftmost unit b. this sub-map is the example given above in the duplication history, and no indels exist.

biologically, the map alignment, compared to individual map analysis, provides clues about the timing and direction of map evolution as well as the type of operation. in the alignment, we can conclude that the replaced units had appeared before the units evolved by duplications because of inheritance. we can also conclude that the evolved regions emerged from the inherited units that occur either on its left or right side. furthermore, if we know that one sequence is the ancestor of the other, then we can distinguish better between the loss and gain of units, i.e. contraction versus duplication and insertion versus deletion.

extension beyond the single-copy model
for wami, we extended arlem with a simple heuristic algorithm to account for double-copy duplications, where at most two different units can duplicate at a time, e.g., bc→bcbc. the idea of our algorithm is to pre-process the map to locate each sub-array of units of the form "xyxy...", where x ≠ y. we then create a new type x = xy and replace the units in this array with the new type to yield the array "xx...". the distance between the new type x and each original type z is the cost of optimal duplication history of xy emerged from or contracted to z. the distance between two new types x = xy and x' = x'y' is the cost of aligning xy and x'y'. finally, the alignment algorithm of arlem runs on the transformed map using the new distances between the map units. in wami, the use of double copy model is optional, because the single copy duplication model is already sufficient for many data sets.

computationally, it is infeasible to infer a history under the still more general, multiple copy duplication, model involving arbitrary number of copies  <cit> .

four tasks supported by wami
fast computation of pairwise map alignment
the basic step in wami is the computation of all pairwise alignments of the input maps, uploaded or edited online in multi-fasta format. the user can use default parameters  or specify other ones through the use of a cost file uploaded to the server.

the map alignment model implemented by arlem allows that aligned units duplicate either to the left or to the right. for example, the sub-map dd in the aligned lower sequence of figure  <dig>  was originated from the inherited unit c on the right, where c duplicated to the left to produce cc, then the leftmost c mutated into d which eventually duplicated to the left to produce another d. previous programs allowed duplication only in left-to-right direction, where such a scenario cannot be modeled. this leads to an alignment of higher cost. this symmetric feature is crucial for studying the direction of map elongation, discussed below.

phylogenetic tree construction
wami uses the program bionj  <cit>  to construct the phylogenetic tree from the pairwise distances computed by arlem. bionj is based on a neighbor joining algorithm. the program njplot  <cit>  is then used to visualize the tree.

analysis of structural variation
in studying structural variation, researchers try to identify highly variable regions of the map. most previous studies showed that map extremities are more variable than other map regions, a phenomenon known as polar variability  <cit> . wami can automatically provide evidence of polarized variation for a given dataset based on a scramble  test.

the program arlem was augmented with an extra option that determines the location associated with half of the optimal score in the aligned maps. we call this location the pivot-point. the rationale of the pivot point is that if the variations were accumulated at one end, then the pivot-point would be shifted towards this end. the pivot-points are calculated for all pairwise alignments and normalized with respect to the respective sequence lengths. a histogram for the pivot-points is then generated. to qualify the results, wami computes another histogram for a randomized dataset obtained by shuffling the units in each map of the input dataset. it is expected that the histogram for uniformly distributed unit types along the maps is close to the gaussian distribution, centered around the value  <dig> . wami produces a single plot containing the two histograms overlaid on each other. the results section contains examples of applying this procedure to ms <dig> and msy <dig> datasets.

analysis of duplication dynamics
determining the direction in which the units duplicate is an interesting issue that can help in inferring the evolutionary processes and the source/origin unit of the map. for the msy <dig> dataset, for example, jobling et al.  <cit>  conjectured that type  <dig>  is the source of the map and assumed that the units preferably duplicate in the 3' →' 5' direction. wami has a procedure that can test this kind of hypothesis based on another scramble test.

in arlem, units are allowed to duplicate towards the left or towards the right to achieve the best alignment score, while accommodating the most parsimonious series of duplication events. we added an option to arlem to restrict the duplications to originate either from the leftmost or from the rightmost unit of a map interval with duplication events. for example, if only the option imposing left-to-right duplication origin was set, then the sub-map "dd" in the aligned lower sequence of figure  <dig>  could not have been originated from the unit "c" on its right, leading probably to increased alignment cost under this restriction.

to detect directional bias, wami invokes arlem three times on the dataset: 1) with both duplication directions allowed, 2) with only left-to-right duplications allowed, and 3) with only right-to-left duplications allowed. the latter two cases tend to yield higher cost than the first, because the duplications may be forced to follow a non-parsimonious scenario. then the number of alignments in the second invocation with cost higher than the optimal one  is counted. let el denote this number. the analogous number er for the third invocation is also computed. a normalized value combining both figures en = /el + er) is then computed. the idea is that if el was different from er, and er was small, then en would converge to +  <dig>  and one could argue that the duplications in the right-to-left direction are almost sufficient to yield alignments close to the optimal ones. hence, right-to-left duplications appear preferred in the evolution of the minisatellites at hand. to further validate the results, wami runs a scramble test and computes the normalized en values for many random datasets, obtained by shuffling the map units. finally, the en values are summarized in a histogram and plotted along with a peak representing en of the original dataset. for random datasets where duplications to the left and to the right occur in an equal rate, it is expected that the distribution of en is close to the gaussian distribution centered around the value zero.

the scramble test is compute intensive, because the map alignment phase is repeated many times over scrambled datasets of the same size as the original. to speed up the computation, we use an approximation technique. we reduce each map to its modular structure, which is the sequence of distinct units in the map. for example, the modular structure of the map aaabbc is abc. this is reasonable because transitions between unit types strongly indicate the direction of duplication. because the modular structure is typically much shorter than the map, a significant speed up is achieved.

user interface
wami has an easy to use and intuitive interface. the main web-page contains four examples to help the user format map data and cost file.  tool tips and a help menu are also provided. for sustainability of service, we attached a blog to the web-site, to collect user feedback and learn about new features requested by the community. a part of the main interface is shown in figure  <dig> .

upon job termination, the user is directed to the results page, where pairwise alignments are displayed and one can toggle between them, see figure  <dig> . the duplication events within optimal alignments are represented by arcs. the images depicting the alignments are produced based on latex. . if the phylogeny option was chosen, the tree in newick/jpeg/pdf format can be retrieved. the results of structural variations and duplication dynamics options are summarized and presented to the user in the form of histograms. for datasets larger than  <dig> sequences, the user is prompted to enter an email address to receive a notification when the job terminates. all these results can be downloaded as a compressed file.

computational efficiency
the program arlem uses a highly optimized algorithm for map alignment. it is based on a compression technique to save redundant computations and its speed is not affected by any increase in the number of types. in  <cit> , we reported that arlem is  <dig> to  <dig> times faster than the previously available algorithm ms_align, using real and artificial datasets. for further speed-up, the options for computing phylogeny, analyzing structure variations, and duplication dynamics run in parallel over a computer cluster of four nodes, where each node contains two quadcore cpus  with  <dig> gb ram.

RESULTS
the examples given in the sequel are based on the minisatellite datasets msy <dig>  <cit>  and ms <dig>  <cit> . the former dataset is composed of  <dig> maps and the number of distinct unit types is eight; the types are assigned the codes { <dig>   <dig>  1a,  <dig>   <dig>  3a,  <dig>  4a}. the latter dataset is composed of  <dig> maps of which  <dig> valid maps belong to haplotype c  <cit> . the number of distinct unit types is two and the types are assigned the codes {a,t}.

alignment and phylogeny
running times in minutes on wami for the msy <dig> and ms <dig>  datasets. the column titled "dataset" contains the dataset used. "random100", "random200", and "random400" are datasets with  <dig>   <dig>  and  <dig> artificial maps, respectively. the column titled "num." contains the number of pairwise map alignments which need to be computed. the column titled "iteration" includes the number of randomization steps  in the analysis of duplication dynamics. the number of iterations in the task of analyzing structural variation is  <dig> because it runs one time on the original dataset and one time on randomized dataset of the same size.

structural variation
we applied wami to both datasets to investigate structural variation. when studying structure variation with ms <dig>  armour et al.  <cit>  noticed polarized variability at the 3' end, where most of the differences between the alleles  accumulate at the 3' end. figure  <dig> and  <dig> shows the histograms of the pivot points obtained for the original ms <dig> dataset and a subset of it including haplotype c. it is clear that the histograms of the original datasets are biased to the right in comparison to that of a randomized datasets. this bias indicates polar variability towards the 3' end. these plots confirm the results obtained by armour et al.  <cit> . 

for the msy <dig> dataset, lying on the y chromosome, jobling et al.  <cit>  noticed high variability at the 5' end in contrast to the autosomal ms <dig> dataset, and they noticed also that types  <dig> and 4a, existing almost solely at the 3' side, causes another source of variation at this end. this suggests bi-polar variability of this dataset. for us it was interesting to see how wami can thus help in spotting not only polar but also bi-polar variability. figure  <dig> shows our observations for the msy <dig> dataset. the resulting histogram has peaks at both ends. this indicates that the variations are bi-polar. to further verify our procedure on the msy <dig> dataset, we removed type  <dig> and 4a from the 3' end and repeated the experiment. figure  <dig> shows biased histogram to the 5' end. that is, both extremities of the msy <dig> maps are highly variable, and the unit types  <dig> and 4a already introduces another source of variation, verifying the observation of jobling et al.  <cit> .

duplication dynamics
we used wami to study duplication dynamics with the msy <dig> and ms <dig> datasets. figure  <dig> shows the resulting histogram for msy <dig>  the peak value on the right shows en of the real dataset, where el =  <dig>  and er =  <dig>  it is clear that this value is far from the en values of the randomized datasets with expected equal rates of left-to-right and right-to-left duplications. that is, the plot indicates that left and right duplications do not contribute equally to the duplication history, and the units duplicate preferably in the direction 3' → 5', as conjectured by jobling et al.  <cit> . in figure  <dig> , we show the histogram for the ms <dig> dataset , which also shows directional bias, but this time towards the right . these results for both datasets may indicate the existence of unknown  dynamic constraints governing the duplication of the minisatellite units. hence, they call for further investigation.

CONCLUSIONS
in this paper, we presented wami, a web server for comprehensive analysis of minisatellites. the server provides many of the functionalities needed by researchers in this area. future versions of the server are planned to provide data-mining functionalities for associating the map comparison results to other features, like age, ethnicity, or genetic markers on the chromosomes.

the algorithms of wami for minisatellite map analysis can also be used for comparing arrays for tandemly repeated units within proteins or gene sequences; the work of rivals et al.  <cit>  shows an example of this application. the alignment part of wami can also be used to compare parent/son microsatellite datasets, provided that the microsatellite units are mapped to symbols, in analogy to the unit typing step of minisatellites. in addition to its applications in parental tests, this comparison helps in studying the mutation rates in association with other map characteristics and helps in estimating parental ages. the work of dupuy et al.  <cit>  is an example of such studies.

in this paper, we rely on a map evolution model based on single- and double-copy duplications. in spite of the computational difficulty, it is still interesting to incorporate the multiple copy duplication model in map alignment, eventually through heuristic algorithms. furthermore, it is also desirable to incorporate recently suggested evolutionary operations, such as boundary switch and modular structure change  <cit>  appearing in some minisatellite datasets. these operations could be modeled by block exchange within the map, in an analogous way to the block exchange operation in genome rearrangement studies. but a practical solution to this problem is algorithmically challenging and remains a subject of future research.

availability and requirements
project name: wami: a web server for the analysis of minisatellite maps.

project home page: http://www.nubios.nileu.edu.eg/tools/wami.

operating system: platform independent .

programming language: perl, c, java script, jsf

other requirements: better viewed on the browsers firefox, internet explorer  <dig> , safari, and opera. for local installation, tomcat  <dig>  or more, jdk  <dig>  or more, apache ant  <dig>  or more are needed.

license: free for academics. authorization license needed for commercial usage .

any restrictions to use by non-academics: no restrictions.

authors' contributions
ma and rg contributed to theoretical developments which form the basis of wami. ma and mek developed and tested the software. all authors wrote and approved the manuscript.

