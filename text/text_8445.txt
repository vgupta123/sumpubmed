BACKGROUND
phylogenetic trees are hypothetical statements about the evolutionary relationship among species. the methods to generate the most probable evolutionary hypothesis are usually based on search algorithms that try to maximize the fit between tree topology and the data, given a model of evolution  <cit> . although biologists increasingly aim to take phylogeny into account in their studies , phylogenetic uncertainty is routinely ignored. an important source of phylogenetic uncertainty arises when biologists use incomplete phylogenetic data to make inferences about evolutionary mechanisms that supposedly affect a group of species  <cit> . in particular, phylogenetic uncertainty may arise from three distinct sources:  weak empirical support for hypothesized relationships among species in a given clade,  errors associated with tree topology and branch lengths, and  incomplete and unrepresentative sampling of known species. biologists have employed different strategies to deal with phylogenetic uncertainty. the first approach is to focus only on clades for which complete phylogenies are available, but this strategy restricts studies to a very small number of groups and can undermine assemblage-level studies if only certain species can be included. a second and more radical strategy is to ignore the species that are absent from the available phylogeny, therefore assuming that evolutionary processes captured by sampled species can be extrapolated to the missing species  <cit> . finally, the most common approach consists in assembling supertrees from small overlapping trees, assigning unknown evolutionary relationships among species as polytomies . clearly, these strategies are sub-optimal, as they hide or ignore phylogenetic uncertainty.

neglecting phylogenetic uncertainty may seriously affect inference of evolutionary processes that drive biological patterns. incomplete phylogenies composed of biased samples of species can potentially provide empirical evidence towards an incorrect evolutionary model, therefore misleading biological inference. for example, one of the goals of conservation biology is to design a network of conservation units that maximize the protection of biodiversity. however, given a biased and incomplete phylogeny the estimate of biodiversity across regions may support the creation of a biological reserve in a locality that harbors sub-maximum phylogenetic diversity.

even in the total absence of genomic information about a species, morphological, behavioral and ecological characters can provide important clues about the evolutionary relationship with other species  <cit> . in general, these non-genetic sources of information are not accurate, as they are insufficient to indicate the closest species or phylogenetic distances between species. however, such additional sources of information can be reliably used in evolutionary studies provided that the statistical uncertainty can be properly estimated  <cit> . one of the most accepted strategies to account for uncertainty in statistical analysis is monte carlo simulation, which rely on repeated random sampling to model phenomena with substantial uncertainty in the input data  <cit> .

the advantage of estimating statistical error associated with inference based on uncertain data comes at the cost of highly replicated computations. the computational demands required to replicate statistical analyses that rely on phylogenetic information have prevented biologists to fully employ simulation methods in large-scale ecological and evolutionary studies. few notable exceptions are available in the literature. for example,  <cit>  used simulation of incomplete phylogenetic information to estimate rates of diversification of fishes, and  <cit>  developed likelihood approaches to infer the effect of trait on diversification rates, testing their new method using simulated phylogenies with varying degree of resolution. finally,  <cit>  employed the method described in this paper to study the consequences of extinction of endangered frogs to the biodiversity, indicating regions across the new world where biodiversity is significantly threatened. the tools developed in this study have the potential to enable biologists to expand the scale of biodiversity analysis while accounting for uncertainty in the available phylogenetic information. potential applications of this method are unlimited, ranging for the study of evolution of species traits, distribution of biodiversity in time and space, and designing network of reserves to protect biodiversity.

to account for phylogenetic uncertainty in statistical analyses using simulation, one would have to build a large set of phylogenetic trees, in which phylogenetic uncertain taxa  would be randomly assigned to partially known trees . however, as some phylogenetic knowledge about put is usually available, the insertion point for each put should not be totally random across the phylogeny. hence, for each put one must determine the most derived consensus clade  that unequivocally contains the put. this is done using all available biological information and, when necessary, classification based on the best available taxonomy. thus, a mdcc defines the sub-tree that is known to include the species, and constrains the scope of random allocation of the put. this repeated insertion of puts in the partially known tree produces expanded trees that can be used in statistical analyses required for the simulation process.

the information contained in the topology of the phylogenetic trees is of maximum interest to biologists, as inferences of evolutionary processes are derived from the phylogenetic relationship between species. this relationship can be captured by the pairwise phylogenetic distance between species and, when multiple species are included in the analysis, such information can be conveniently stored in a squared distance matrix  <cit> , the so called patristic distance matrix . a patristic distance is the sum of the lengths of the branches that link two species in a tree. some of the statistical methods used to study evolutionary processes require the raw or standardized patristic distance matrix , whereas other methods require the transformation of the distance matrix into a variance-covariance matrix . in any case, if there is uncertainty in the relationship among species, simulations can be used to estimate the phylogenetic uncertainty by generating multiple random phylogenetic trees with phylogenetic uncertain species inserted into the main tree. thus, in addition to the computational burden of inserting put into a tree, one must compute a pairwise distance matrix for each randomly expanded phylogenetic tree. of course, the next step in the phylogenetic comparative analysis consists in the replication of the statistical methods using each phylogenetic distance matrix. the averaged phylogenetic measure across replicates of the analysis captures the best estimate of the true parameter , whereas the variance of the phylogenetic measure combines the error due to sampling size  and phylogenetic uncertainty in the statistical analysis.

there have been some proposals to integrate non-molecular phylogenetic information into incomplete molecular phylogenies in order to conduct phylogenetic comparative analyses. two main approaches have been proposed for the analyses of diversification. a skeletal tree approach  <cit> , that works by collapsing the under sampled clades and producing a complete but terminally unresolved tree, and an expanded tree approach that creates a complete and terminally resolved tree by randomly inserting missing taxa along the branches belonging to its likely clade. the former approach was implemented in the diversitree r package  <cit> , whereas the latter approach was implemented in  <cit>  as an r script using ape functions  <cit> . in this work we use the expanded tree approach since many statistical methods used to study evolutionary processes require a complete and terminally resolved tree. our approach involves an algorithm for randomly expanding trees that performs a single tree traversal for each tree being expanded.

as for the calculation of patristic distance matrices, there are many software tools that provide this functionality, e.g.  <cit> . however, most implementations were not meant to support simulation studies and thus are not prepared to deal efficiently with a large number of trees. to calculate each matrix element, i.e. the pairwise phylogenetic distance between species, an efficient method has to be used to sum up all branch lengths connecting them. otherwise, too much time is spent recalculating distances along the branches. this situation is aggravated in a scenario containing a large number of trees. we use a heavy chain decomposition  to structure the expanded trees and thus produce a fast solution to the pairwise distance matrix calculation.

the work presented in this paper aims at contributing to conduct large-scale phylogenetic comparative simulation that take uncertainty into account. we present efficient algorithms and implementations to generate random expanded trees, with the insertion of phylogenetic uncertain taxa , and to calculate patristic distance matrices, both commonly used in large-scale statistical analyses. the rest of the paper is organized as follows. in the next section we present the algorithms proposed. the experimental results are shown in the following section, together with a comparative analysis with respect to well-known tools. finally in the last section we present the conclusions and future works.

implementation
in this paper we present a computational tool named sunplin  that allows one to use an existing phylogenetic tree, along with a list of species to be inserted, and to produce randomly expanded versions of the input tree as well as distance matrices for the corresponding trees. the input phylogenetic tree is assumed to be in the newick format  <cit> , one of the most widely used tree formats, while the species to be inserted should be in a plain file containing one species per line. the most derived consensus clade  must be indicated following the species name, separated by a space.

in this section we use the terminology given by the following definitions: 

• species and ancestors in a phylogenetic tree are both named nodes;

• the descendants of a node u are all nodes in the subtree rooted at u but not including u;

• the term tree is used as abbreviation of the term phylogenetic tree;

• nodes without descendants  in the tree are referred to as leaf nodes;

• ancestor nodes are named internal nodes;

• the internal node without ancestors is the root node of the tree;

• the direct ancestor of a node u is referred to as the parent node of u;

• if a node p is an ancestor node, each of its direct descendants is a child node of p;

• a line connecting a parent node p to one of its child node c is a branch or an edge;

• each branch has a length which is a real number;

• a node u and all its descendants form a subtree with u as root node;

• a path in the tree from node u to a node u′ is the sequence 〈v <dig> v <dig> …,vt〉 of nodes such that, u = v <dig>  u′=vt and there is a branch connecting vi to vi +  <dig>  for 0≤i≤t- <dig> 

in the following subsections, we present the tree expansion problem and the distance computation problem. this follows a detailed description of the proposed algorithms, auxiliary functions, examples and a complexity analysis.

tree expansion
the tree expansion problem has as input the following data: 

a) a phylogenetic tree t0;

b) an integer number m;

c) a set s={〈s <dig> vmdcc1〉,…,〈s|s|,vmdcc|s|〉}, where each pair 〈si,vmdcci〉 in s is composed by a species si to be inserted in the subtree with root vmdcci in copies of t <dig> 

the tree expansion problem consists in making m copies of the original tree t <dig> and inserting all the species of s in each of the copied trees. the insertion of a species si from s must occur in a place randomly chosen in the subtree with root in node vmdcci. thus, a solution to the problem produces m expanded trees t <dig> …,tm. each one of the expanded trees contains the same nodes , however they are different from each other, because each species si in s was inserted randomly in distinct positions in the subtree with root vmdcci in each tree tj, 1≤j≤m.

in this work, we consider two possible random insertion methods: the node-based method and the branch-based method. the first method chooses randomly a node p in the subtree with root in the mdcc and inserts the species as a child of p. in this case, the chance of receiving a new species is equal for all nodes. for example, consider a copy t <dig> of the tree in figure  <dig>  the insertion of species  <dig> in mdcc  <dig> involves choosing randomly one node among the nodes  <dig>   <dig>   <dig>   <dig>   <dig>   <dig> or  <dig> as the insertion point.

the branch-based method is characterized by giving to long branches a higher chance of being split due to the insertion of a new species. this is obtained by randomly choosing a number between zero and the sum of branch lengths below the mdcc. this number corresponds to the accumulated lengths of a sequence of branches ordered according to a depth-first traversal in the subtree with the mdcc as root. for example, let us consider the insertion of species  <dig>  the sum of the lengths of branches in the subtree with root in node  <dig>  equals to  <dig>  we choose randomly a real number between  <dig> and 6; let us say  <dig> . a depth-first walk in subtree with  <dig> as root reaches the branches in the following order: , , , ,  and . we follow the branches in that order accumulating their lengths while this accumulated value is less than or equal to  <dig> . thus, this procedure stops when we reach branch . consequently, node  <dig> is chosen as the insertion point.

efficient implementation of both insertion methods is crucial to solve the tree expansion problem. an obvious but inefficient solution is to perform a traversal in the subtree with root in the mdcc. during this traversal, nodes are collected, in the case of the node-based method, or branches are collected, in the case of the branch-based method, and the insertion point is chosen randomly in each case. this is inefficient because we have to perform a walk for every subtree and every species to be inserted. also, the mdcc for some species to be inserted might be located too high in the tree, next to the root, which would imply that almost the whole tree would have to be traversed.

in this article, we propose a method that allows for deciding the insertion point, in both node-based and branch-based methods, with only one depth-first traversal of the original tree t <dig>  this traversal occurs in a preprocessing phase of the algorithm and computes for each node in the tree some information used to define the insertion point. our insertion algorithm relies on a numbering of the nodes of t <dig> with numbers assigned in an increasing order, starting with number  <dig> that is assigned to the root of t <dig>  the numbers are assigned to the nodes through a depth-first search , following a post-order traversal. in figure  <dig>  the number of each node is shown just at the right of the node.

the preprocessing phase is performed by the function preprocessexpansion(). during this phase, the following information is computed for each node u of the tree t0: 

• the number of descendant nodes of node u. this counting is represented by the array descendants in the function.

• the sum of the lengths of branches on the dfs traversal of the tree starting at the root and ending at node u. this value is represented by the variable sumlengths in the function.

functionpreprocessexpansion
for example, consider the tree shown in figure  <dig>  the number of descendants of node  <dig>  equals to two, while descendants <cit>  equals to seven. the following branches are reached through a dfs traversal starting at the root node and ending at node 7: , , , , , . the sum of the lengths of these branches  equals to six. analogously, sumlengths <cit>  equals to eight.

the tree expansion method is described in algorithm treeexpansion. the algorithm receives as input the phylogenetic tree t <dig>  the number m of expanded trees, the set s of species to be inserted and the method of insertion to be used.

algorithmtreeexpansion
the treeexpansion algorithm starts by activating the function preprocessexpansion() to compute the values of variables descendants and sumlengths for each node u in t <dig>  next, at each iteration i≤m, the algorithm makes a copy ti of t <dig> and for each pair 〈s,vmdcc〉 of s it chooses randomly an insertion point p in the subtree with root in vmdcc to insert the species s. this choosing is done using only information of the original tree t <dig>  computed during the preprocessing phase. the preprocessing phase takes time o to execute, because it has to traverse through all nodes and branches of the tree t <dig> to compute the number of descendants and the sum of branch lengths for each node.

if the insertion method is node-based, a random node must be chosen among all nodes in the subtree with root in node vmdcc. however, because of the numbering strategy used to number nodes in the tree and the previous computation of the number of descendants of each node, the random insertion point can be easily and efficiently computed as shown in line seven of the algorithm. for instance, to insert species  <dig> in mdcc  <dig>  the algorithm chooses randomly a number in the interval , that is,  <cit> . this interval comprises all node numbers in the subtree with root in node  <dig> . the random choosing of the insertion point takes o, however it is repeated for each of the |s| species to be inserted. thus, the total time spent by the node-based method to insert all the |s| species is o.

if the insertion method is branch-based, the sum σ of lengths of branches in the subtree with root in vmdcc can be easily computed without traversing the tree. it is given by the computation in line  <dig> of algorithm treeexpansion. for example, the sum of branch lengths in the subtree with root in node  <dig> is given by sumlengths - sumlengths = sumlengths- sumlengths <cit> =12-6= <dig>  in line  <dig> of the algorithm, a random value between  <dig> and the sum σ is obtained. in line  <dig> of the algorithm, the random value obtained is added to the value of sumlengths and assigned to δ. the point of insertion is the node p such that sumlengths is most similar to δ. the algorithm has to search for such p among the subtree rooted at vmdcc that is, it has to search in the interval ,sumlengths ]. once the insertion point p has been found, the algorithm treeexpansion inserts  species s at node p of the copied tree ti, taking time o independently of the insertion method used.

the good news is that values in vector sumlengths are ordered, thus a binary search can be used to find such node p, in time o). the worst case occurs when the mddc for a species is the root of the tree. in this case, the binary search has to be applied in the whole vector that has size |t0|. this operation takes time o. since the binary search has to be applied for each of the |s| species, in the worst case the branch-based mode has execution time o.

distance computation
in this section we present the more generic problem of computing distances between nodes in a phylogenetic tree - node-to-node distance problem. the case of computing distances between only leaf nodes  can be seen as a subproblem of node-to-node distance problem in which we discard the computation for nodes that are not leaves. we show an efficient solution to the node-to-node distance problem that can be easily adapted to compute the patristic distance, as is explained at the end of this section.

the node-to-node distance problem consists in computing for each pair , where u and v are nodes of a phylogenetic tree t, the distance between u and v in t. the distance between u and v corresponds to the sum of branches lengths in the path that connects u to v in t. for example, in figure  <dig>  the distance between nodes  <dig> and  <dig> is the accumulated lengths of branches connecting both nodes, which equals to four.

the objective of the problem is to compute a distance matrix dist of dimension |t|×|t|, where |t| is the number of nodes in t. this matrix is symmetric, with zeros in the main diagonal, so we only need to calculate half of the elements of the matrix. however, to calculate a single distance between a pair of nodes we need to sum up the lengths of all branches connecting the nodes. in the worst case, we have a tree whose internal nodes form a list and each internal node has a single leaf node, except the last one which has two leaves . in this case, if one of the elements of a pair is the deepest leaf node and the other is the root of the tree, the computation of the distance of nodes in the pair takes time o to complete. however, the computation of the distance between two nodes is repeated / <dig> times, thus the time complexity of the distance matrix calculation becomes o.

we propose an algorithm that avoids traversing entire paths repeatedly and thus reduces this complexity to o. our solution first calculates the distance of every node to the root of the tree. this is done in a preprocessing phase executed by function preprocessdistance(). the array distroot keeps the distance between each node u and the root of the tree. this function also computes for each node u in the tree the number of descendants of u. this information is kept in array descendants.

functionpreprocessdistance
once the distances between the root and the other nodes in the tree has been computed, the distance between any two nodes u and v can be computed by first finding the lowest common ancestor of u and v, i.e., the deepest node in the tree that has both nodes as descendants. the distance between the pair of species is then calculated by summing the distances of each node to the root minus twice the distance of the lca to the root, i.e., dist = distroot + distroot- <dig> ·distroot. for example, let us consider figure  <dig> again. the lca for nodes  <dig> and  <dig> is node  <dig>  the dist <cit>  can be computed as distroot <cit>  + distroot <cit> - <dig> ·distroot <cit> , which is equal to 2+4- <dig>  thus, dist <cit>  =  <dig> 

since the lca calculation has to be repeated for each pair of species, this computation has to be performed efficiently. we propose a method to find the lca of any two nodes in the tree that performs a decomposition of the tree into chains of nodes. our method is based on the heavy light decomposition, a method that was introduced by sleator and tarjan  <cit> . our solution is named heavy chain decomposition.

to explain the heavy chain decomposition we first need to present some definitions. a chain from node u to one of its descendant node u′ is the sequence 〈v <dig> v <dig> …,vt〉 of nodes such that, u = v <dig>  u′=vt and vi is the parent node of vi +  <dig>  for 0≤i≤t- <dig>  there is a chain from each node u to itself, because in this case the chain is the unitary sequence 〈u〉. we refer to node u as the leader node of the chain from u to any of its descendant or to itself, because it is the first node of the chain. we define the cost of a chain c = 〈v <dig> v <dig> …,vt〉 as:

  cost=∑v∈cdescendants 

that is, cost is the accumulated number of descendants of nodes belonging to chain c. we define the heavy chain for a node u as the chain c that contains u as its leader and conforms to the following conditions: 

• the last node in c must be a leaf node;

• c is the chain with the highest cost among every chain from u to leaf nodes.

for example, consider the tree in figure  <dig>  the value between parentheses besides the number of a node represents the number of descendants of that node . the cost of the chain from node  <dig> to node  <dig> is given by the following sum: 22+14+12+6+2+ <dig> which, equals to  <dig>  this chain is the heavy chain for node  <dig> since there is no other chain from node  <dig> to another leaf node which, has a higher cost.

given an internal node u, let children be the set of child nodes of u. we say that a node v∈children is the heaviest child of node u, if for every node x∈children, descendants≥descendants . one way of obtaining the heavy chain for a node u is to construct a chain recursively, starting with node u, then inserting in the chain the heaviest child of u, say v, as the second node of the chain, then inserting the heaviest child of v and so forth, until a leaf node is reached. for instance, the heavy chain of node  <dig> in figure  <dig> can be obtained by inserting node  <dig> in the chain. next, inserting its heaviest child which is node  <dig>  then inserting the heaviest child of node  <dig> which is node  <dig> and continuing this way until we reach node  <dig> 

the heavy chain decomposition aims at partitioning the input tree into a collection of disjoint heavy chains. it is a recursive procedure that starts by obtaining the heavy chain for the root of the tree. whenever it reaches a leaf node in a heavy chain c it goes back in c. for each node x in the way back in c, the procedure obtains the next heavy child of x that has not been inserted previously in any heavy chain. it then makes this heaviest child the leader of a new heavy chain and starts constructing the new heavy chain of this node. function heavychaindecomposition() describes precisely the heavy chain decomposition method. if there is a tie for the heaviest child of a node, any node with the greatest number of descendants is chosen.

functionheavychaindecomposition
once the heavy chain decomposition is obtained, the lca for any two nodes can be found efficiently as described in function lca(). this allows us to calculate the lca in o time, by skipping over chains rather than considering each branch in the chain individually.

functionlca
the whole computation of the distance matrix calculation is shown in algorithm distancematrixcomputation(). the algorithm starts by activating function preprocessdistance() which computes for each node u the distance from u to the root and the number of descendants of u. this involves traversing the tree t in time o. then, the algorithm invokes function heavychaindecomposition(), which also executes in time o. next, the distance matrix is finally computed. the computation of the distance matrix  involves determining the lca for each pair of nodes. the time of this computation is o multiplied by the time necessary to obtain the lca for each pair of nodes. we have that the worst case for function lca() occurs when the tree is a balanced tree, that is, a tree t with |t| nodes organized in such a way that t has the smallest height among all possible organizations of trees with |t| nodes. in this case, depending on which heavy chain each node of a pair is, it is possible that function lca() iterates through nodes along the height of the tree. consequently, the execution time of function lca() in the worst case corresponds to the height of the balanced tree which is o. thus, the total execution time of the distance matrix computation iso+o+o, which equals to o.

most applications in phylogeny involve computing only the distance between species that correspond to leaf nodes in the phylogenetic tree. the distance matrix containing only leaf nodes is referred to as patristic distance matrix. algorithm distancematrixcomputation can be easily adapted to compute patristic distance matrix. all that is needed is an additional condition in the test of line  <dig> of the algorithm, requiring that both a and b is leaf nodes. if we consider |tℓ| as the number of leaf nodes in a phylogenetic tree t with |t| nodes then, the execution time of algorithm distancematrixcomputation to compute the patristic distance matrix is o.

algorithm distancematrixcomputation
RESULTS
the experiments were conducted using an amd phenom ii x <dig>  <dig>  <dig>  ghz,  <dig> gb ram, and the linux  operating system. our algorithms were implemented using the c++ programming language . we report execution times in seconds, with the reported numbers being the average of  <dig> independent runs. the execution times consider only processing time and do not take into account any input/output file operation. the following phylogenies were used in the experiments: phyllostomidae   <cit>  with  <dig> species, carnivora   <cit>  with  <dig> species, hummingbirds  <cit>  with  <dig> species, and amphibia   <cit>  with  <dig> and  <dig> species .

we do not know of any other tree-expanding tool, as described in this paper, except for the addtips r script used in  <cit> . since addtips uses ape functions  <cit>  on top of the r environment, there is an expected overhead due to the use of an interpreted environment. for the sake of comparison, we generated a shared object that encapsulates our c++ compiled program so that it can be dynamically loaded and called from within the r environment.

tables  <dig>   <dig> and  <dig> show the execution times, in seconds, when varying the number of species |tl|, the number m of trees to be expanded, and the number |s| of species to be inserted, respectively. the reported times were obtained with the branch-based insertion method. we noticed hardly any difference in the results produced by the node-based insertion method.

ℓ

|= and m= <dig> 

|t

ℓ

time in seconds for generating m =  <dig> expanded trees, each one receiving |s| =  <dig> new species, for different input trees with |tℓ| =  species .

ℓ

|= <dig> and m=

time in seconds for generating a varying number m =  of expanded trees, given a single input tree containing |tℓ| =  <dig> species  and |s| =  <dig> species to be inserted.

ℓ

|= <dig> and m= <dig> 

time in seconds for generating m =  <dig> expanded trees, given a single input tree containing |tℓ| =  <dig> species  and a varying number |s| =  of species to be inserted.

while addtips takes tens of minutes as the number of species to be inserted increases , our solution takes only a few seconds in the r environment and a fraction of a second with the standalone c++ version. inserting  <dig> species on a  <dig> species tree  can take hours using the addtips script, if the number of generated trees is high. on the other hand, the same task can be done in a few seconds with our c++ implementation and in less than a minute if our r version is used. as can be seen in table  <dig>  our implementations can handle an increase in the number of species to be inserted more smoothly than the addtips script.

the distance matrix computation time for real data phylogenies is shown in tables  <dig> and  <dig>  for different number |tℓ| of species and number m of trees to be expanded, respectively. we compare our implementations  to the ape  <cit>  and phylocom  <cit>  tools. ape is a package written in r for the analysis of phylogenetics and evolution. we used its function cophenetic.phylo to calculate the patristic distance matrices. phylocom is a well-known open source software  for the analysis of phylogenetic community structure and trait evolution. it calculates various metrics, including the patristic distance matrix . the execution times for ape and phylocom were obtained by repeatedly calling their distance matrix calculation functions.

ℓ

|= and m= <dig> 

|t

ℓ

time in seconds for the computation of m =  <dig> distance matrices, for different input trees with |tℓ| =  species .

ℓ

|= <dig> and m=

time in seconds for the computation of a varying number m =  of distance matrices, each one associated with a |tℓ| =  <dig> species  expanded tree.

to calculate the distance matrices associated to  <dig>  trees , our c++ implementation is at least 20× faster than ape and 4× faster than phylocom. when called from within the r environment our solution is still competitive, being approximately 10× faster than ape and 2× faster than phylocom. as we increase the number of trees to be analyzed, the ape implementation can take tens of minutes , while our c++ implementation takes less than  <dig> minute. phylocom also shows a good performance but is still 4× slower than our c++ implementation and 2× slower than our r solution.

if we consider a large-scale simulation consisting of the generation of  <dig>  expanded trees  and the corresponding distance matrices calculations for a 304-species tree  in the r environment, the current tools would take hours to complete, while our solution is able to get the job done in approximately  <dig> minutes. the total time can be further improved if the c++ code is used directly, i.e., without being called from the r environment.

we also generated random trees to study the behavior of the algorithms with increasing number of taxa. the computation time in seconds for the c++ code is shown in tables  <dig> and  <dig> for randomly generated phylogenies. the results for expanding and calculating distance matrices of random trees with  <dig>   <dig>   <dig>   <dig> and  <dig>  species are shown in table  <dig>  for each tree,  <dig> species are inserted and the resulting expanded trees are used in the distance computation algorithm. this process is repeated  <dig>  times, that is,  <dig>  copies are produced for each input tree. the results are similar to those using real data phylogenies . for the  <dig> -species tree , the generation of  <dig>  expanded  trees takes less than a second, and when the distance matrix computation is taken into account, the overall time is less than a minute. the performance of the algorithms for a varying number of expanded trees is reported in table  <dig>  an input 500-species tree is expanded with  <dig> species and the process is repeated  <dig>   <dig>   <dig>   <dig>  and  <dig>  times. the distance computation algorithm then processes the resulting expanded trees, each one containing  <dig> species. the results follow the same pattern as shown in tables  <dig> and  <dig>  with the distance computation taking much longer than the expansion phase, as predicted by our complexity analysis. the generation of  <dig>  expanded trees  takes less than  <dig> seconds, while the distance matrix computations requires no more than  <dig>  minutes.

|t

ℓ


ℓ

t


ℓ

time in seconds for generating m =  <dig>  expanded trees and to calculate distance matrices. the input trees contain |tℓ| =  species  and each one is expanded with the insertion of |s| =  <dig> species.


ℓ


ℓ

time in seconds for generating a varying number m =  of expanded trees and to calculate distance matrices. the input tree contains |tℓ| =  <dig> species  and is expanded with the insertion of |s| =  <dig> species.

CONCLUSIONS
in this article, we proposed a new computational tool to conduct large-scale phylogenetic comparative simulations that take uncertainty into account. we presented efficient algorithms and implementations to generate random expanded trees and to calculate patristic distance matrices, both commonly used in large-scale statistical analyses. the algorithm proposed for generating random expanded trees performs a single tree traversal for each tree being expanded, inserting the provided phylogenetic uncertain taxa  randomly into the partially known tree. the calculation of the patristic distance matrices is performed using a heavy chain decomposition, which structures the expanded trees in a way that avoids some of the calculations along the branches of the tree. these strategies were implemented using c++ language and in r system through loadable shared objects, and compared to some of the current tools used for similar tasks. our experimental evaluation showed that the tree expansion proposed could be done in only a few seconds, which is at least three orders of magnitude faster than the other tool analyzed. our results also showed that the distance matrix calculation of our implementation could be up to one order of magnitude faster than the other similar tools. given the wide adoption of the r package by the biology community, our implementations allow one to take uncertainty into account in their analyses, and seamlessly use a number of additional statistical analyses available in r. overall, our results showed that the proposed algorithms and implementations can play an important role in helping biologists conduct their comparative phylogenetic simulations with uncertainty.

availability and requirements
project name: sunplin.homepage:https://sourceforge.net/projects/sunplin/.webserver:http://purl.oclc.org/net/sunplin/. operating system: linux, macos and windows.programming language: c++.other requirements: sunplin-r requires r.windows users need also the rtools.license: gnu general public license version  <dig>  .any restrictions to use by non-academics: none.

abbreviations
put: phylogenetic uncertain taxa; mdcc: most derived consensus clade; pdm: patristic distance matrix; lca: lowest common ancestor; dfs: depth first search.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
wsm and tfr conceived the project and contributed to the writing of the manuscript. wsm and wcc designed the algorithms. wcc implemented and carried out all computational experiments. tcr and hjl formalized the algorithms and provided feedback on the software development and manuscript. all authors read and approved the final manuscript.

