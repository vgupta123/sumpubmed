BACKGROUND
recent developments in culture-independent microbiology now permit "metagenomic" analyses of complex microbial communities in which mixtures of genes or genomes are sequenced and analyzed in parallel  <cit> . concomitant advances in automated dna sequencing technology have greatly increased the scale of genomic and metagenomic studies  <cit> . in many instances, project throughput can be accelerated by parallelization of sample processing, sequencing, and analysis steps. high-throughput sequencing platforms now have the capacity to analyze multiple specimens in a single run. such multiplexing can be accomplished either through physical separation of samples on the sequencing instrument  or by tagging genomic dnas with unique, sample-specific sequences that serve as molecular barcodes  <cit> .

two strategies are in general use for barcoding samples in preparation for high-throughput sequencing. in one approach, barcoded, double-stranded adapters are ligated to target dna through the activity of dna ligase; both shotgun genomic libraries and pcr amplicons can be tagged in this manner  <cit> . the second strategy, the topic of this paper, incorporates barcodes into oligonucleotides that are used to prime dna synthesis, for instance, through polymerase chain reaction . typically, gene-specific oligonucleotides are used to amplify and tag a particular gene, for instance the ribosomal rna gene .

because dna ligation is relatively sequence-independent, the design of barcoded adapters using the ligated adapter strategy is straightforward. in contrast, proper design of barcoded primers requires careful consideration of how the inclusion of barcode sequences  may impact the specificity, sensitivity, and overall efficiency of primer-dependent steps of the workflow. these design issues have motivated the creation of a computer program, barcrawl, for automated design of barcoded primer pairs. barcrawl constructs a set of barcodes, each separated in sequence space from all other barcodes by a minimum number of base substitutions . barcodes are evaluated within the context of other sequences contained in the forward and reverse pcr primers in order to cull potentially problematic sequences . finally, barcrawl sorts the set of barcodes by the number of  <dig> gs-flx nucleotide flows required to pyrosequence each barcode sequence. use of more efficiently sequenced barcodes  should help maximize read lengths within the template regions of amplicons. to facilitate manipulation of barcoded sequence data sets following multiplexed sequencing, we present the program bartab, which is a general purpose tool for polishing and annotating sequence data sets. source code for both barcrawl and bartab is freely available for use under the gnu general public license at . pre-compiled, universal binaries for the macintosh platform are provided in the mac os-x gui package xplorseq  <cit> .

implementation
barcrawl and bartab are command-line executables written in c++ and available as source code for compilation on multiple platforms. the software was developed on a macintosh os-x  system, using xcode and gcc version  <dig> . <dig>  and has been tested on macintosh os-x  and multiple linux platforms .

RESULTS
the following sections outline the algorithms used by barcrawl to design primers and bartab to post-process multiplexed dna data sets. these are followed by an experimental test-case that outlines the design and validation of a set of  <dig> barcoded primers for broad-range pcr amplification of bacterial large subunit ribosomal rna genes .

barcrawl algorithm and operation
in overview, barcrawl creates a list of all possible dna sequences of a specified length and then progressively culls sequences that may interfere with primary pcr amplification and/or sequencing steps . the primary structures of forward and reverse pcr primers used to barcode amplicons are schematized in fig.  <dig>  regions labeled "sequencing" in fig.  <dig> are not required for barcrawl function, but are included in this example because they encode sequences necessary to perform direct pyrosequencing of amplicons on the  <dig> gs-flx. at a minimum, the barcode must lie upstream of the specificity region of the oligonucleotide and in a position that can be sequenced by a particular platform. well-designed barcode sequences must be robust to both mutation during amplification and errors in base-calling during sequencing. to this end, barcrawl performs an exhaustive pairwise comparison of all potential barcodes and discards those that differ in sequence compared to other barcodes by less than a user-specified cutoff value. the default value of  <dig> base differences insures that multiple substitution events or base-calling errors must occur for one barcode to be mis-classified as another.

barcrawl is invoked on the command line by typing barcrawl . the default implementation requires no input from the user, although several options can be set on the command line . specific primer sequences to which the barcodes will be linked  along with a reverse primer sequence can be designated on the command line. the algorithm used by barcrawl to create and evaluate potential barcode sequences in the context of other primer sequences is as follows :

1minimum value for numerical options.

2maximum value for numerical options. n = any non-negative integer.

 <dig>  for barcodes of length l , generate 4âˆ§f l strings encoding all permutations of the four standard dna nucleobases . store strings in a list.

 <dig>  remove from list all barcodes with g+c content > cutoff value .

 <dig>  remove from list all barcodes with g+c content < cutoff value .

 <dig>  remove from list all barcodes that contain homopolymers of length > = cutoff value .

 <dig>  concatenate potential barcode to 5' and 3' sequences  to form composite forward primer. remove from list all barcodes in which 5' base of barcode is identical to 3' base of upstream primer .

 <dig>  remove from list all barcodes in which 3' base of barcode is identical to 5' base of downstream primer .

 <dig>  remove from list all barcodes for which composite forward primers potentially form intramolecular hairpins of length >= cutoff value .

 <dig>  remove from list all barcodes for which composite forward primers potentially form heteroduplexes with reverse primer of length >= cutoff value .

 <dig>  for all pairwise combinations of barcodes, i and j, remaining in list , compute d, the number of base differences between barcodes i and j. retain barcodes i and j if d >= cutoff value , otherwise remove barcode j from list.

 <dig>  for all pairwise combinations of barcodes, i and j, remaining in list , determine whether any deletion within barcode j creates a string that is an exact match to a substring of i. determine whether any deletion within barcode i creates a string that is an exact match to a substring of j. if an exact match is found in either search, then remove barcode j from list.

 <dig>  sort list of remaining barcodes by number of nucleotide flows  required to sequence through a primer.

 <dig>  output list of barcodes, corresponding composite forward primers, and required pyrosequencing flows to tab-delimited file.

barcrawl outputs the results of a search in two files: 1) a tab-delimited list of barcoded forward primers, the corresponding barcode sequences by themselves, and the number of pyrosequencing nucleotide flows required to sequence each barcode using the  <dig> gs-flx system and 2) a logfile that summarizes the command options for a barcrawl run, statistics for number of barcodes output, distribution of flows for the set of barcodes, and elapsed execution time.

bartab algorithm and operation
the process of multiplexed high-throughput sequencing typically requires physical mixing of barcoded pcr libraries. consequently, sequence reads generated with different barcoded primers must be identified and sorted into barcode-specific groups in order to associate sequences with the appropriate libraries. the command line software bartab provides a set of post-processing tools for checking sequence quality, identifying barcodes, annotating sequence reads, parsing sequences into barcode-specific groups, and de-replicating sequence sets . while designed to complement the function of barcrawl, the two software programs function independently of one another.

bartab is invoked on the command line by typing bartab . command line options are summarized in table  <dig>  as input, bartab requires a fasta formatted dna sequence file and a corresponding file of quality scores in fasta format. optionally, a tab-delimited file that lists valid barcode sequences  can be provided as input ; sequences that do not encode a valid barcode are discarded if this file is present. the decision to discard sequences with invalid barcodes, rather than to infer the most likely barcode for a sequence, is based on the premise that sequences with mutated barcodes may encode other, non-correctable mutations in coding regions. this conservative approach does not unduly affect the total number of reads obtained from a sequencer run; we typically discard ca. 2% of sequences on the basis of invalid barcodes.

1minimum value for numerical options. n = any non-negative integer.

2maximum value for numerical options.

fig.  <dig> presents a flow chart of the main bartab functions. in overview, bartab applies a user-configurable series of filters to check the quality of each sequence read. these include filters based on minimum quality scores , presence of ambiguous base calls , removal of primer and barcode sequences, and minimum polished length above a threshold .

in addition to validating barcodes, inclusion of a barcode file provides a ready means for both sorting sequences and annotating them with metadata that is keyed by barcode sequences. for instance, if unique barcodes are assigned to individual pcr libraries , then metadata specific to a library can be assigned to all of its constituent sequences. for this purpose, additional tab-delimited columns of data are included in the barcode file  in order to associate barcodes with metadata. column headers specify keys , and data elements falling under a given column specify particular values to be associated with the barcode listed on the same row. a sequence can then be annotated with all key-value pairs associated with its barcode sequence. for ease of subsequent parsing, metadata are listed in fasta definition lines using the format "key:value" . such annotation is not mandatory. if a barcode file is not specified on the command line, bartab simply skips the barcode validation and sequence annotation steps .

polished sequences are output in fasta format, as are corresponding quality scores. in addition, sequences  that are rejected based on their failure to satisfy the conditions of the filter steps, are discarded into a separate file . the default behaviour is to aggregate all acceptable, polished sequences into a single file. alternatively, sequences assigned to different groups on the basis of barcode metadata can be split into multiple files by setting the "-spl <string>" option on the command line, where "<string>" denotes the name of a column in the barcode file. for instance, "-spl barcode" creates a separate output file for each unique barcode and then directs the output of polished sequences to the appropriate files based on their barcodes. other annotation keys in the barcode file could also be selected as the basis of sorting. analogously, selection of the rename option "-rnm <string>" replaces sequence names with a base name determined by the barcode file and a unique, sequential integer value for each sequence in the group .

because high-throughput sequencing libraries may include multiple identical sequences, identifying, denoting, and removing such replicate sequences, can bring significant performance improvements to downstream applications. toggling on the sort option  causes bartab to de-replicate groups of like sequences. for each primary fasta file that is output, bartab uses a hash function to identify unique sequences  and subsequently output the representative sequences to a fasta file with the suffix "<filename>.rep.fa", for representative sequences. in order to preserve information about the relative abundances of sequences, bartab adds metadata to each representative sequence that specifies the number of sequences in the group , designated by the key "xsrep_count" .

lastly, bartab compiles detailed summary statistics, written either to a log file or the terminal, that include histograms and cumulative distributions of sequence length before and after trimming, as well as polished sequence counts for each barcode. bartab can be executed in a dry run mode  to tabulate these statistics without actually modifying sequence data. this feature allows the user to adjust input parameters if desired.

case study: application of software to rrna metagenomics
in order to validate, refine, and demonstrate the use of barcrawl and bartab, a set of  <dig> barcoded oligonucleotides were designed and analyzed in a real world application. barcoded-forward and reverse primers were constructed for broad-range pcr amplification of the bacterial lsu rdna, using the highly-conserved lsu130f and lsu559r sequences . the design goal of this exercise was to construct a bank of  <dig> barcoded lsu559r primers, while minimizing the number of pyrosequencing flows required to sequence each barcode.

to explore the sequence space of possible barcodes in the context of the required gs-flx and lsu sequences, multiple barcrawl analyses were performed under systematic permutation of the program's parameters. results and execution times for a subset of the runs are summarized in table  <dig>  as expected, barcode length was the primary determinant of the size of final barcode pools. regardless of the parameters, the number of barcodes in an output set typically was ~1% of the size of the starting pool, indicating that most potential barcodes were rejected. for example, the default values produced a pool of  <dig> barcodes out of a starting pool of  <dig>  sequences . relative to the default settings, enhancing the stringency of the analysis either by increasing the minimum distance between barcodes  or decreasing the permissible homopolymer length  reduced the final pool sizes by 4-fold or 3-fold, respectively. in comparison, modifying the permissible gc-contents, hairpin lengths, or heteroduplex lengths produced only marginal changes in the extents of final set sizes.

 <dig> elapsed time of execution: mean  seconds.

 <dig> executed on a  <dig> ghz intel core duo macbook pro.  <dig> gb  <dig> mhz ddr <dig> sdram. mac osx version  <dig> . <dig> 

 <dig> executed on a workstation with  <dig> Ã—  <dig> ghz dual-core intel xeon  <dig> processors.  <dig> gb  <dig> mhz ddr <dig> fb-dimm. fedora core  <dig> operating system.

 <dig> default parameters

fig.  <dig> presents cumulative distribution plots of barcodes as a function of pyrosequencing nucleotide flow, for 8-mers , 9-mers , and 10-mers . as demonstrated in this plot, for pyrosequencing flows greater than  <dig>  the cumulative number of barcodes available at a given nucleotide flow increased with barcode length. for example, in the case of either 9-mer or 10-mer barcodes, the desired sets of  <dig> barcodes could be selected from barcodes that required <=  <dig> nucleotide flows. in contrast, a comparable set of 8-mer barcodes would have required selection of barcodes requiring  <dig> nucleotide flows. although somewhat counterintuitive, this result indicates that the choice of longer barcode lengths  can be used to minimize overall sequencing effort  relative to shorter barcodes. in other words, longer barcode lengths can in some circumstances decrease the average number of sequencing flows required to sequence a set of barcoded oligonucleotides.

the default parameters produced a set of  <dig> potential barcodes of length  <dig> nt. inspection of these results indicated that cutoff values for maximum hairpin and heteroduplex lengths could be made more stringent  without compromising the design goal of  <dig> barcodes. therefore the parameters specified in table  <dig>  run  <dig> were used to select a set of lsu559r barcoded primers. in this example, barcrawl was invoked with the following command:

barcrawl -l  <dig> -m  <dig> -p  <dig> -a  <dig> -b  <dig> -c  <dig> -g  <dig> -f <dig> gcctccctcgcgccatcag -f <dig> nncattmtacaaaaggyacgc -r gccttgccagcccgctcagnnccgaatggggvaaccc -j <dig> -j <dig> -d

the starting pool consisted of  <dig>  oligonucleotides. of these,  <dig>  oligonucleotides were discarded by application of the gc-content , homopolymer , hairpin , join , deletion , and minimum base difference  filters. the final pool of  <dig> acceptable barcodes was sorted in ascending order of  <dig> gs-flx flows and oligonucleotides were synthesized for the top  <dig> barcodes.

the relative abilities of the barcoded lsu559r oligonucleotides to prime broad-range pcr were assessed by setting up parallel pcr reactions that used the same cocktail of pcr reagents, metagenomic dna, and reverse primer. real-time pcr reactions were conducted and ct scores measured for each oligonucleotide . as shown in figs. 5a and 5b, the distribution of ct scores was approximately normal. in this experiment, ct values ranged from  <dig>  to  <dig>  cycles . under perfectly efficient exponential pcr amplification, this would translate to a 6-fold difference  in yield across the range of ct scores.

to assess whether the observed differences in amplification within the set of primers was due to factors intrinsic to the barcode sequences or to normal experimental variability, the experiment was duplicated using different metagenomic dna and newly diluted sets of lsu559r oligos. fig. 5c presents a comparison of the ct values obtained for each primer in duplicate experiments. we interpret the pearson correlation coefficient for these data , as indicating that only 48% of the variability could be attributed to intrinsic differences in the set of barcoded oligonucleotides. this could represent sequence-specific factors or variability in the concentrations of oligonucleotide stocks provided by the manufacturer.

finally, barcoded lsu559r oligos were tested for their ability to support multiplexed pyrosequencing on the roche gs-flx platform. pre-sequencing pcr amplification, clean-up, and pyrosequencing steps were performed as described in materials and methods. a selection of  <dig> barcoded primers was assayed in order to balance sequencing costs against the need to ensure an adequate distribution of sequences across oligonucleotides; for the purposes of this experiment, we predicted that a 1/ <dig> platform run would provide sufficient sequencing coverage of all  <dig> oligos .

to mitigate the effects of experimental variability, each barcoded lsu559r primer was tested in triplicate sequencing reactions. despite this redundancy, one well of the pcr plates  was systematically prone to evaporation during the triplicate experiments. although earlier experiments demonstrated that the barcoded primer in this well of the microtitre plate was functional, only minimal pcr product was obtained prior to sequencing in this set of experiments. consequently, the results for this oligo were censored.

pyrosequencing data were provided in two files containing either fasta formatted sequences  or their corresponding quality scores . these, along with a file specifying sequences of the  <dig> barcodes under investigation , were provided as input to bartab. sequence reads were trimmed and barcodes identified using the bartab system call: bartab -in lsu599r.fa -qin lsu599r.qual -bar lsu559r.bar -min  <dig> -out lsu559rout"). a total of  <dig>  raw reads were generated in the 1/ <dig> plate gs-flx run. from this starting pool, bartab output  <dig>  polished sequences and rejected  <dig> sequences  with length <  <dig> nt.,  <dig> sequences  with ambiguous base calls, and  <dig> sequences  with no valid barcode.

each of the  <dig> barcoded lsu559r primers was well-represented in the sequence data set, with a range of 219- <dig> sequences recovered per barcode. as shown in figs. 5d and 5e the distribution of sequence counts obtained for each barcode sequence was approximately normal . a scatterplot of the number of sequences generated by barcoded primers vs previously measured qpcr ct values for the primers showed no correlation between pcr and sequencing efficiencies . thus, no bias was observed in the ability of a primer to support high-throughput sequencing under the protocols employed. we conclude that this set of lsu specific barcoded primers is validated for multiplexed sequencing projects.

software performance issues
as a rough guide to system requirements, benchmark comparisons for common barcrawl and bartab tasks are summarized in tables  <dig> and  <dig>  respectively. barcrawl stores all processed data in ram, so performance likely will be limited as much by memory as by raw processor speeds. barcrawl operates in approximately exponential time, o, proportional to the length of barcodes. selection of the  <dig> lsu559r barcodes by barcrawl required  <dig> seconds on a linux workstation . performance was most critically affected by the filter that screened for robustness of barcodes to deletion .

 <dig> elapsed time of execution: mean  seconds.

 <dig> executed on a  <dig> ghz intel core duo macbook pro.  <dig> gb  <dig> mhz ddr <dig> sdram. mac osx version  <dig> . <dig> 

 <dig> executed on a  <dig>  ghz amd phenom  <dig> agena quad-core processor.  <dig> gb  <dig> mhz ddr <dig> fb-dimm ubuntu  <dig>  operating system.

 <dig> executed on a macintosh workstation with  <dig> Ã—  <dig> ghz quad-core intel xeon processors.  <dig> gb  <dig> mhz ddr <dig> fb-dimm. mac os x server version  <dig> .4

 <dig> executed on a workstation with  <dig> Ã—  <dig> ghz dual-core intel xeon  <dig> processors.  <dig> gb  <dig> mhz ddr <dig> fb-dimm. fedora core  <dig> operating system.

bartab operates in approximately linear time, o, proportional to the number of sequences to be processed. in contrast to barcrawl, bartab does not store extensive data in ram; only the file dereplication step stores multiple  sequences in ram at any given time. a linux workstation required  <dig> seconds to trim, annotate, and export  <dig>  sequences , a comparable number of sequences to that generated in a full run on a gs-flx pyrosequencer. dereplication of output files required little additional computational time. in contrast, the overhead required to sort sequences into barcode-specific files was considerable  for the mac osx operating system. to enhance performance, sequence data can be spread across multiple files. alternatively, more complex data storage strategies, such as the use of application-specific databases may be implemented in the future.

CONCLUSIONS
the software programs barcrawl and bartab were developed to expedite the design, optimization, and tracking of barcoded oligonucleotides in projects that require highly multiplexed pcr and dna sequencing. the software has been used to construct and experimentally validate sets of  <dig> 16s rdna and  <dig> 23s rdna primers. any suggestions for improving the capabilities of this software are welcomed.

