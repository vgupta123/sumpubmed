BACKGROUND
short, linear sequence motifs in protein or nucleic acid sequences are of considerable interest to biologists. this type of sequence pattern is often indicative of important biological sequence signals such as transcription factor binding sites  or splice junctions in nucleotide sequences, and of sumoylation sites and stabilization domains in proteins. consequently, there has been long and continuing interest in developing software algorithms that can automatically discover functional sequence motifs in sets of biopolymer sequences suspected to harbor one or more common sequence signals.

biological sequence motifs are often quite subtle, and discovering them in a set of sequences is often impossible since real motifs may be indistinguishable from random artifacts. this has encouraged the development of specialized motif discovery algorithms that can effectively utilize information in addition to the sequences themselves.

one successful approach for improving motif discovery using auxiliary data has been to incorporate evolutionary conservation information into the discovery process  <cit> . this approach typically augments the set of input sequences with one or more phylogenetic relatives of each of the original sequences. such motif discovery algorithms are designed to emphasize motifs that are conserved across related species, on the assumption that such motifs are more likely to be functional.

another fruitful approach has been to utilize biological information to select a "negative" set of sequences, and to modify the search process to seek motifs that are relatively over-represented in the "positive" sequences. this second approach can be also viewed as discovery of discriminative motifs  <cit> . using negative sequences has the effect of steering the motif discovery process away from sequence patterns that are due to effects unrelated to the particular type of motif being sought. this is desirable when searching for binding site in genomic sequences due to the extremely non-random nature of genomic dna.

a third approach for improving motif discovery has been to seek motifs whose presence in sequences is correlated with some biological signal such as mrna level. these approaches typically use a regression model, and look for motifs that minimize the residual error between a biological signal associated with each input sequence and a motif-based mathematical model of the signal  <cit> .

recently, a general approach has been proposed that allows the incorporation of almost any type of auxiliary information into the class of motif discovery algorithms based on gibbs sampling  <cit> . the additional information is converted into a measure of the likelihood that a motif starts at each position in each sequence in the input. this is measure is referred to as a "position-specific prior" . gibbs sampling algorithms optimize a bayesian sequence model, and the psp approach allows the  auxiliary information to bias the optimization toward real motifs.

the psp approach has several advantages. firstly, it can directly and simultaneously incorporate multiple types of auxiliary data into motif discovery. secondly, it cleanly separates the problem model optimization from any issues arising from trying to incorporate heterogenous data into the biological sequence model. thirdly, the psp methodology can sometimes avoid the severe increase in computational complexity suffered by many of previous approaches to incorporating auxiliary information into motif discovery.

the psp approach has shown great promise in extending the power of gibbs sampling-based motif discovery algorithms  <cit> . for example, a "discriminative conservation" () prior has been shown to be extremely effective for discovering tfbs motifs in yeast sequences when used with a gibbs sampling algorithm  <cit> . incorporation of nucleosome positioning and transcription factor structural class information into a psp has also proved useful in the discovery of yeast tfbs motifs  <cit> . however, the benefits of psps to em-based algorithms  has yet to be studied.

in this paper, we describe extending meme to enable it to use position-specific priors. like gibbs sampling-based algorithms, the popular meme motif discovery algorithm  <cit>  uses a bayesian probabilistic model in the search for motifs. to allow comparison with previous work, we study the affect of using the  psp with meme. this psp combines evidence of evolutionary conservation with the ability of a motif to discriminate between sequences binding the tf and those that do not.

to explore the benefits of using psps with meme, we focus on discovering tfbs motifs in chromatin immunoprecipitation  data for yeast and mouse transcription factors. we show that using the  psp greatly improves meme's ability to discover motifs in an extremely well-studied example of  <dig> sequence sets derived from tf chip-chip  experiments in yeast. in fact, using this psp, meme discovers the correct tf motif in more of the yeast chip-chip datasets than six other algorithms that use conservation information, including the gibbs sample using the same psp. we further show that using the  psp, meme discovers more accurate motifs in mouse chip-seq  data  <cit> .

methods
we describe the enhancements to meme required for reading in and utilizing a file containing a position-specific prior corresponding to the input dna or protein sequences. we cover how psp information is utilized during each of meme's three major phases. we also describe how meme converts a prior on motifs of a width w <dig> to a prior on motifs of width w ≠ w <dig> in order to allow meme to discover motifs of a width different than that for which the prior was derived. 

incorporating position-specific priors into meme
the basic task of biological sequence motif discovery is, given a set of dna or protein sequences, to determine which positions in the sequences are motif occurrences . meme does this using a statistical sequence model that it creates based on certain hints provided by the user about the number of sites expected in each sequence and the width of the motif sites. the parameters of the model are referred to here collectively as ϕ. meme discovers motifs by optimizing the statistical parameters of the model using the expectation maximization  algorithm. the statistical parameters of the model include a position-specific probability matrix  representation of the motif, referred to here as θ. the pspm specifies the probability of each possible letter  at each of the w positions in the motif. a motif is a model of aligned words of a specific length k , each from a different sequence, representing the likelihood of a given letter appearing at each position.

to discover a motif, meme proceeds in three phases. in phase i, meme determines good starting points for the em algorithm. since meme automatically determines the width of the motif and the number of sites, this first phase actually selects starting points for various combinations of motif width and number-of-sites. in phase ii, meme runs the em optimization algorithm from each starting point determined in the first phase in order to produce a candidate pspm representation of the motif. in phase iii, meme scores each of the candidate motif pspms found by em. to do this, it uses the candidate motif pspm to predict motif sites, and calculates the statistical significance of the relative entropy of the predicted sites. meme outputs the candidate motif with the highest statistical significance. once the motif has been selected and output, meme "probabilistically erases" the motif's sites, and begins the process again at phase i in order to discover further motifs.

we describe below how we have enhanced meme to utilize psp information in each of its three phases. in what follows, we assume that meme has been provided with a set of n sequences x = {x <dig>  ..., xn}. for notational convenience we assume, without loss of generality, that all input sequences have the same length, l.

overview of position-specific priors
by default, meme assumes that every position in every sequence is equally likely a priori to be a motif site. position-specific priors allow the user to change this assumption, thereby causing the sequence model to favor motifs that include high-probability sites over those that do not. a psp defines, for each position in a given set of n sequences, our prior belief that a site  starts at that position. to express this in notation, we introduce the binary "missing information" variables z = {zi,j}, where zi,j =  <dig> if a site starts at position j in sequence xi, and zi,j =  <dig> otherwise. we can then specify a psp completely by the set of values p = {pi,j}, where  

for convenience, we define the special value pi, <dig> to be the prior probability there is no motif site anywhere in sequence xi. to complete our definition of what a psp is, we add the assumption that a psp is tied to a particular motif width, w <dig>  therefore, the meaning of pi,j is the prior probability of any motif of width w <dig> having a site at position j in sequence xi. 

meme only allows sites that fit completely within a sequence, so we require that the last w -  <dig> positions in a sequence have pi,j =  <dig>  meme can require every sequence to have one site  or it can allow sequence to have zero or one sites . clearly, this implies  that pi, <dig> =  <dig> in the oops sequence model. for the zoops model, we allow pi, <dig> to have any value in the range . meme has one more model–the anr model–that allows any number of motif sites any sequence. we have not yet implemented psps for this model.

meme searches for motifs in the protein or dna sequences given in its input. however, meme can also search for dna motifs that may have sites on either strand. in that case, we index the sites on the opposite strand from -l to - <dig> and we then define zi,j and pi,j for j ∈ . in order for the pi,j to define a probability distribution, they must all lie in the the range  and, for the oops and zoops sequence models they must sum to  <dig> for i =  <dig>  ..., n, where n is the number of sequences in the input to meme. for all sequence models, the sum over site position, j, runs from  <dig> to l  in the protein and single-stranded dna cases. note that we define pi,j =  <dig> for all values of j where a motif would not fit entirely within the sequence.

our implementation of psps in meme has one additional constraint. when we are considering motifs that may occur on either dna strand , we require that the psp be symmetrical. that is, we require that pi,j = pi,-j for all sequences xi and sequence positions j. this restriction seems reasonable to us, since the prior probability of any dna motif in a set sequences by definition is the same as that of its reverse complement motif.

providing position-specific priors to meme
meme can now read psps in a format described in additional file  <dig>  when a psp file is not provided, meme assumes, as before, a uniform prior over motif site positions. psps can be generated using hartemink software  <cit>  followed by conversion to meme's psp format as described in additional file  <dig>  the meme psp format requires that the set of prior values, {pi,j} for i =  <dig>  ..., n and j =  <dig>  ..., l, be specified, and that they obey all the constraints described above. for any sequences for which priors are not supplied in the psp file, priors are calculated as uniform priors. the meme psp format includes the width, w <dig>  of the motifs for which the prior is designed. if meme is run in double-stranded mode on dna, the symmetry restriction allows us to generate the psp for the second strand automatically.

renormalizing position-specific priors for motifs of different widths
as mentioned above, a psp is tied to a particular motif width for which it is derived. when meme is considering motifs of width w, different from w <dig>  the one specified in the psp input file, it renormalizes the psp. the renormalization attempts, in a heuristic fashion, to extend the information captured by the psp about motifs of width w <dig> to a psp suitable for motifs of width w. renormalization also insures that the new psp obeys all of the constraints described above. in particular, when w >w <dig>  there are fewer legal positions for motif sites in a given sequence, so the constraint that the pi,j sum to  <dig> would be violated without renormalization.

for motifs that are wider than the width for which the input psp was designed, the renormalized psp uses the geometric mean of pi,j for all width-w <dig> sites that are completely contained by a width-w site. the intuition behind this definition is that the information in each of the completely contained sites should be included in our estimate of the prior probability of the longer site containing them. when w >w <dig>  a width-w site at position j completely contains width-w <dig> sites starting at positions j through j + w - w <dig>  if we let c = w - w <dig> +  <dig> be the number of shorter sites a longer site contains, our renormalized psp, psp, is computed as   

for i  and j ∈ . to keep computation costs reasonable, and because the value of information contained in a prior on shorter motifs decreases as the width of the longer motif increases, we constrain c ≤ w <dig> in eqn.  <dig> 

for motifs that are shorter than those for which the psp was designed , meme does not renormalize the input psp. in this case, it simply uses the input psp as though it were designed for the shorter width motifs, setting psp = psp. this has the implication that some potential motif sites at the ends of sequences will be ignored when searching for shorter motifs, since their pi,j values will remain zero even though they are legal starting positions for the shorter motif. for example, if the psp width is  <dig> and meme is searching for motifs of width  <dig>  the last possible position for a motif in each sequence will have pi,j =  <dig>  this seems more sensible than setting the value of pi,j based, say, on the value of pi,j- <dig> since the width- <dig> psp contains no explicit information on the prior probability of a site starting at position j. this is because removing the first letter of the word starting at position j -  <dig> might result in a word with a much lower prior probability. in any case, we expect that useful priors will tend to be relatively short  in relationship to the lengths of the sequences containing the motifs. in what follows, we always assume that the psp has been normalized to the current motif width being considered by meme, so we drop the width notation from psp and pi,j,w.

meme phase i: finding starting points
to find starting points for em, meme converts each subsequence of the data into a "starting" pspm and calculates a score for it using an algorithm that approximates one step of em followed by the scoring phase. creation of the starting pspm from a subsequence has been previously described  <cit> . each such pspm, θm is then used to calculate the probability under the motif model of every potential site in the input sequence, pr. previously, for the oops and zoops models, the single site with the highest likelihood from each sequence was determined. for the oops model, these sites were then assigned a score. for the zoops model, these sites were sorted in decreasing order by their likelihoods, and the top t sites for successively larger values of t were scored.

to incorporate psps into this phase of meme, sites are now sorted by a value proportional to their posterior probabilities, prpr, where pr is the prior probability of the potential site being a real site, as specified by the psp. that is, if the site starts at position j in sequence xi, then pr = pi,j. we found this approach was not sufficient to insure that the best starting points for em were found, but that incorporating the psp into scoring the sets of sites with the highest posterior probabilities helped significantly . consequently, the prior probability of each site is now used by meme when it scores the predicted sites, as described in the next paragraph.

the final score for a potential starting point is a weighted version of the log likelihood ratio  of its set of predicted sites. the llr of a set of sites is normally computed by aligning the sites, counting the number of times each letter occurs in each column of the aligned sites, and normalizing the counts to frequencies. to calculate the weighted llr, meme scales the individual priors independently in each sequence so that the largest of pi,j in each sequence is  <dig>  these scaled priors are then used as weights on the counts of the numbers of letters in each column of the motif.

in more detail, the weighted llr is computed by meme as follows. first, meme computes weights  

where  is the maximum value of pi,j in sequence xi. the weighted count, ca,k, of letter a in position k of the motif, is computed by adding the weight ,  <dig> ≤  ≤  <dig>  to ca,k when the site at position j in sequence xi has letter a in position k of the site. thus, sites with higher prior values will contribute more to the weighted counts than sites with low prior values.  the weighted counts are then turned into weighted frequencies by dividing by nwt, fa,k = ca,k/nwt, where nwt is the sum of the weights, , of all sites included in the alignment. we now define a new motif model in terms of parameters  = {fa,k}. let pa = pr be the probability of letter a under the zero-order markov background model supplied as an input to meme . if the weights were all equal to  <dig>  the llr of the set of sites under this new model would be   

we refer to eqn.  <dig> as the "weighted llr" of the set of sites when the weights on the sites are not all equal to  <dig> 

for each potential starting pspm, meme computes the llr using eqn.  <dig> on different numbers of predicted sites, t. meme does this by considering only the t predicted sites with the largest posterior probabilities for successively larger values of t. for the oops model, the only value of t tried is the number of input sequences, t = n.

meme repeats this entire process for successively larger values of w. for each combination of t and w, meme runs em using the potential pspm that has the largest weighted log likelihood ratio. em is described in the next section.

meme phase ii: expectation maximization
meme uses em to maximize the expectation of the joint likelihood of the sequence model given the sequences x and the missing information variables z . em proceeds by iterating an e-step followed by an m-step. the only change required to meme's existing em implementation is the replacement of uniform assumption of site positions with the position-specific prior in the e-step.

for oops and zoops models, the parameters of the sequence model are ϕ = {θ, γ, p}. em re-estimates the pspm, θ, but holds fixed the psp, p. the additional parameter, γ, represents the probability that a randomly chosen sequence in the dataset contains a motif site. this is always equal to  <dig> for the oops model, and is estimated by em for the zoops model.

the e-step of em computes new estimates of the conditional probabilities of the missing variables z, conditioned on the current estimate of the model parameters,   

where ϕ is the parameter estimate at the start of the current iteration, t, of em. the current estimate of the probability of each possible site based only on the model is pr). for notational convenience, we define variables that represent this probability for j ∈ ,  

where m = l - w +  <dig> is the number of places a motif site will fit in a sequence.

with these definitions, the computation in the e-step of the new estimates of the conditional probabilities of missing variables z for the oops and zoops models can be written as   

for i ∈  and j ∈ . when searching both dna strands, the sum in the denominator in eqn.  <dig> goes from -m to m, and we define  for j ∈ .

the m step re-estimates ϕ by solving   

the m-step of the em algorithm in meme is unchanged. see bailey and elkan  <cit>  for more details on how the terms in eqn.  <dig> and eqn.  <dig> are computed.

meme phase iii: scoring the motifs
the scoring phase of the meme algorithm assigns scores to the motifs discovered by em. the criterion is based on the statistical significance of the log-likelihood ratio  of the most likely sites for the motif in the sequence dataset. unlike the starting point phase , the scoring phase of meme computes the unweighted llr, even when using non-uniform positional priors. this choice was motivated by tests which showed that the weighted llr performed no better, so we chose to keep this part of the meme algorithm unchanged . although the scoring phase of meme was not changed as a result of incorporating psps, it has not been documented previously, so we describe it briefly here.

the significance measure used to rank motifs takes into account the llr of the motif, its width and the number of sites it contains. the sites of a candidate motif are those with the largest final values of z. for the oops model, meme scores the motif consisting of these sites. with the zoops model, meme sorts the sites by decreasing zi,j value, and scores each prefix of the sorted list.

meme scores a motif consisting of a set of sites as follows. the llr of each column of the aligned sites is computed, and the p-value of the column-llr is computed based on the background markov model using the dynamic programming method of hertz and stormo  <cit> . these p-values are then multiplied together and the p-value of the resulting product is computed as described in bailey and gribskov  <cit> .  to make the scores of various motif widths and numbers of sites compatible, meme multiplies the p-value of the motif by the number of possible ways to select positions for the given number of sites in the set of sequences, x. this final score is referred to as the e-value of the motif.

measuring the benefits of using psps
to evaluate the benefit of using psps in motif discovery, we search for motifs in sets of sequences predicted to bind different tfs in yeast and in mouse. the yeast data is from  <dig> chip-chip experiments each measuring the binding of a single tf  <cit> . the mouse data is from  <dig> chip-seq experiments measuring binding of a tf  <cit> . the yeast tf data has been used extensively as a test case for evaluating motif discovery algorithms, so using it allows us to easily compare meme with psps to a large number of other algorithms. since chip-seq data is inherently of a higher quality than chip-chip data, the mouse tf data allows us to measure the benefit of using psps on a slightly easier motif discovery task. the mouse data covers  <dig> tfs–nanog, oct <dig>  sox <dig>  smad <dig>  e2f <dig>  tcfcp2l <dig>  ctcf, zfx, stat <dig>  klf <dig>  esrrb, c-myc and n-myc.

we measure accuracy of meme both with and without the use of psps. the psp we use is the discriminative conservation prior (), which has previously been shown to be very effective for discovering tf binding site motifs in the yeast dataset  <cit> . the  prior is based on the degree to which the 8-mer starting at position xi,j is conserved in the input sequence set x and a set of orthologous sequences from other species, compared with a negative set of sequences and their orthologs. for comparison, we measure the accuracy of the priority motif discovery algorithm using the  psp . we also compare with previously published results on the yeast dataset.

on the yeast data, we use the  psp as reported by gordân et al  <cit> . this prior is based on intergenic regions from s. cerevisiae that have a chip-chip fluorescence p-value ≤  <dig>  and the orthologous regions from the six related organisms s. paradoxus, s. mikatae, s. kudriavzevii, s. bayanus, s. castelli, and s. kluyveri. the negative sequences are all s. cerevisiae intergenic regions with a p-value ≥  <dig>  and their orthologs.

we create our own  psp for each of the  <dig> mouse datasets. for each dataset, the positive sequences are  <dig> base pair  regions centered on the chip-seq peaks reported by chen et al.  <cit> . we use the maffrags program to obtain orthologous sequences for sixteen additional species from the multiz17way alignment  <cit> . we obtain negative sequences and their orthologs for constructing the mouse  psp by extracting  <dig> bp regions on either side of each positive sequence. we use the -psp creation scripts provided by the hartemink group  <cit>  to create the mouse psps from the positive and negative sequence and ortholog sets. 

to measure the accuracy of motif discovery on the yeast datasets, we utilize the same metric as previous researchers  <cit> . this metric compares the single motif reported by a motif discovery algorithm to a known motif for the tf by computing the scaled euclidean distance between the pspms for the motifs. the distance is scaled so that the maximum distance is  <dig>  and the minimum distance is  <dig>  the scaled euclidean distance between pspms f and g is defined as   

where fa, i and ga, i are the probabilities of base a at position i in the two motifs. we use the same known pspms as used by previous researchers  <cit> , and the same criterion for successful motif discovery–scaled euclidean distance < <dig> . since the reported motif may be of a different length or on the opposite dna strand from the known motif, we actually compute the minimum value of d for all possible alignments of the reported motif  with the known motif, with the minimum overlap the length of the shorter motif.

our evaluation of motifs discovered in the yeast chip-chip datasets utilizes a human-curated set of motifs that represents the consensus predictions of many motif discovery algorithms on those datasets. such a "gold standard" set of motifs does not exist for the  <dig> mouse chip-seq datasets. consequently, we take a different approach to measuring the accuracy of motifs discovered in those datasets.

with the mouse chip-seq datasets, our underlying measure of motif quality is the amount of correlation between a motif-based binding affinity score and a chip-based binding score. we believe that a high correlation between an in vivo measure of tf affinity and a motif-based in silico measure is indicative of an accurate tf binding motif.  for each chip-seq dataset, we measure this correlation in a cross-validation setting, discovering motifs on randomly chosen sets of positive and negative sequences, and computing the correlation measure on held-out sequences. to compare algorithms, we compare our correlation-based quality measure between motifs found on the same sample of sequences.

the details of our evaluation of motifs in the mouse chip-seq data are as follows. our chip-based estimate of binding by the chip-ed tf at a genomic location is the "peak score" reported by chen et al.  <cit> , and is the normalized count of the number of sequence tags overlapping the peak's genomic location. this is our best direct evidence that the tf was bound in the neighborhood of the peak. each positive sequence is assigned the peak score of the peak it contains. our motif-based measure of binding by the chip-ed tf is for each positive sequence is its "average motif affinity"   <cit>  score. the ama score is justified as a measure of tf binding affinity on theoretical grounds  <cit> , and it has been used for motif discovery  <cit>  where it showed strong correlation with gene expression, and for motif enrichment analysis  <cit>  where it showed strong correlation with tf binding. because the ama score estimates the average binding affinity of a region of dna, it captures contributions from multiple sites in a given region. our motif quality measure is the spearman correlation coefficient  between the ranks of the held-out positive sequences sorted by their ama and peak scores, respectively. we use a rank-based statistic because it is less sensitive than a correlation between the original values to dissimilarities in the distributions being compared  <cit> . to compare pairs of algorithms, we use each algorithm to learn one motif in each of  <dig> random samples consisting of  <dig> positive sequences and  <dig> negative sequences. we then apply the sign test to the quality measures of pairs of motifs learned on the same input set to decide if one algorithm discovers significantly better motifs.

all yeast runs use a third-order markov background model, for consistency with reported priority results. we let meme search for a single motif of width from  <dig> to  <dig>  with sites on either dna strand. for all mouse runs, meme and priority- use a fifth order background markov model, computed from the negative set, and search for motifs of widths  <dig> to  <dig>  to compute ama, we use the ama program, which is part of the meme suite of programs  <cit> , using the same background model as we use in motif discovery. in all cases, we use priority  <dig> . <dig> with its default settings, except for changing to a fifth-order background model for the mouse runs. we test meme with both the oops and zoops models, with and without the  psp, with sites on either strand.

RESULTS
improved motif discovery using meme with psps in yeast tf chip-chip datasets
our evaluation of the effect of adding psps to meme starts with measuring improvement in finding tf motifs in yeast chip-chip datasets. we run meme using the oops and zoops models with and without the  prior on each of  <dig> chip-chip datasets, and compare the single reported motif pspm to the known pspm for the tf pulled down in the chip-chip experiment. success is defined as scaled euclidean distance < <dig>  between the reported pspm and the known pspm for the tf. note that, to insure our results are directly comparable to the results reported by gordân et al.  <cit> , we use the script provided by them to compute the scaled euclidean distance, which reports a distance of  <dig>   if the found motif does not contain a region of width six with average information content at least  <dig> bit.)

the improvement in the number of motifs successfully discovered is quite dramatic. using the  psp with meme more than doubles the number of yeast tf motifs successfully discovered . the most successful approach is using meme with the zoops model with the  prior , which discovers the correct motif in  <dig> of the  <dig> datasets. without the  prior, meme with the zoops model only discovers the correct motif in  <dig> of the datasets.

the table shows the number motifs  successfully discovered by the named algorithms. the results in the top half of the table are taken from gordân et al.  <cit> . results in the bottom half are for new experiments performed by us. each algorithm is allowed to report one motif, and success is declared if the scaled euclidean distance to the known pspm is < <dig> . proportions  successes are rounded to the nearest integral percent.

the accuracy of motif discovery by several other algorithms using these same yeast tf chip-chip datasets and success metric has been reported previously  <cit> , allowing us to compare our current results more broadly. as seen in table  <dig>  the success rate of zoops-  is substantially higher than a number of conservation-based em or gibbs sampler motif discovery algorithms .

the zoops- approach also performs at least as well on the yeast datasets as the gibbs sampler-based algorithm priority, when priority is given the same  psp as meme. the developers of the priority algorithm  reported a success rate of  <dig> out of  <dig> on the yeast datasets . however, since gibbs sampling algorithms are stochastic–their outputs vary from run to run–we wished to place error bars on priority-'s success rate. we therefore ran priority- ten times on each yeast dataset. the success rate varied from  <dig> to  <dig> correct motifs, with an average success rate of  <dig> , as shown in the last line of table  <dig>  the fact that we did not observe any priority- run with as high a success rate as previously reported  <cit>  may be a result of the stochastic nature of the algorithm, or may be due to us using a more recent version of priority .

improved motif discovery using meme with psps in mouse tf chip-seq datasets
as an additional check on the value of using psps with meme, we measure the improvement in tf motif discovery on  <dig> mouse tf chip-seq datasets. our evaluation of mouse data is intended to demonstrate that the results generalize to a data set of different properties–a higher eukaryote, with sequence data derived from a different technology. we measure the correlation between the chip-seq peak score ranks of the sequences, and the ama score ranks assigned using the discovered motif. to insure that this measurement is unbiased, we measure the correlation using held-out sequences, which are not used in discovering the motif. we compare pairs of motif discovery algorithms by sampling from all the sequence data , and applying a paired significance test  to the pairs of correlation scores.

on the mouse datasets, using the  prior improves the accuracy of the motifs discovered by meme , although the improvement is slight compared to that seen in the yeast chip-chip datasets. the oops model with the  prior has significantly better accuracy than without the prior on  <dig> of the  <dig> datasets, and shows no significant difference in accuracy on the other  <dig>  according to the sign test. similarly, the  prior improves the zoops on  <dig> of the  <dig> datasets, but degrades the performance on  <dig> datasets. meme using the  prior finds better motifs for tfs c-myc and n-myc with both the oops and zoops models. the motifs for three other tfs  are improved using the  prior with one or the other of the two sequence models. these results indicate that using the  prior with meme will likely improve the accuracy of tf motifs found in chip-seq data from higher eukaryotes.

the table compares the relative accuracy of pairs of motif discovery algorithms. relative accuracy is measured by the correlation on held out sets of sequences of the sequence ranks based on chip-seq peak scores versus the ranks based on the motif-based ama score. a check in the "win" or "w"  column indicates that the motifs found by the first  algorithm had significantly better spearman rank correlation, as judged by the sign test on the  <dig> random repeats . a check in the "tie" or "t" column indicates that there was no significant difference. the "total" line shows the totals using the sign test to judge significance. oops, zoops, oops- and zoops- refer to meme with those models and with or without the  prior.

as a further evaluation of our method with chip-seq data, we also directly compare the motifs found by meme using the oops- prior with those reported by chen et al.  <cit> . in figure  <dig>  we show the chen et al. motifs along side the motif found by meme using a random sample of  <dig> chip-seq peak sequences that achieved the highest value of our unbiased correlation-based quality measure. for all  <dig> of the  <dig> chen et al. chip-seq experiments where they reported a motif, meme using the oops- prior discovers a strongly similar motif. those authors reported no motif for the e2f <dig> experiment, but the motif found by meme resembles the transfac  <cit>  e2f <dig> motif. we also show the scaled euclidean distance  between each chen et al. motif and the meme motif in figure  <dig>   all  <dig> motifs discovered by meme have distances less than or equal to  <dig>  to the corresponding chen et al. or transfac motif, and  <dig> out of  <dig> have distances below  <dig> . we emphasize however, that this result only indicates that meme is finding motifs similar to those found by those authors, and we believe that our correlation-based quality measure is more appropriate with this data.

to answer the question of whether using the  prior with the oops or zoops model is more appropriate with the mouse chip-seq data, table  <dig> shows the relative accuracy of oops- versus zoops-. according to the sign test, oops- finds significantly more accurate motifs in more datasets  than zoops-. although the sample size is small , it seems reasonable to conclude that the oops- approach will produce better motifs on average with chip-seq data.

a direct comparison of the accuracy of motifs found in the mouse datasets by oops- and priority- indicates that meme with using the  prior and the oops model has a slight edge. according to the sign test, oops- produces significantly better motifs for  <dig> of the  <dig> mouse chip-seq datasets, compared with priority-. on  <dig> of the datasets, priority- produces more accurate motifs. this result is in agreement with our results using the yeast chip-chip datasets, where meme using the  prior and the zoops model was  more successful than priority-. as we expect, the zoops model works better for chip-chip data, while the oops model works better for chip-seq for the examples we present here.

CONCLUSIONS
position specific priors are an elegant and flexible way to utilize prior information from heterogeneous sources to improve the discovery of sequence motifs. in addition to allowing information from multiple sources to be incorporated into a bayesian motif discovery framework, positional priors can even incorporate information from negative examples . furthermore, using psps does not increase the running time of the underlying motif discovery algorithm. this flexibility has the potential to extend the range of applications and sensitivity of motif discovery algorithms that can utilize psps. although we only study dna datasets, our modifications to meme are not dna-specific. meme is freely available for academic use and downloading at http://meme.nbcr.net.

psps had previously been shown to be of benefit when used with a gibbs sampling motif discovery algorithm. we have shown here that they can also be of great benefit to meme, which is based on em and a heuristic search for starting points. we focused on using a prior that combines evolutionary information gleaned from orthologous sequences with positively and negatively labeled sequences in a discriminative prior . using this psp on well-studied sequence datasets from  <dig> yeast tf chip-chip experiments improves the performance of meme dramatically–more than doubling the number of datasets where meme identifies the correct tf binding motif as its first prediction. furthermore, using the  prior allows meme to achieve prediction accuracies that are superior to a large number of motif discovery algorithms, without increasing its running time.

we also confirm the benefit of psps to meme when applied to tf motif discovery in chip-seq data from a higher eukaryotic species . to increase the independence of this second test, we used a novel way to measure the accuracy of the discovered motifs that obviates the need to rely on a set of known motifs . although the observed benefits were somewhat small, they were substantial enough to indicate that constructing a  prior and utilizing it with meme is worthwhile even for higher eukaryotic chip-seq derived data.

in follow-up work, we plan to investigate psps designed specifically for chip-seq data. one approach might be to create a psp that encodes the increased prior probability of the primary motif being located near the center of the chip-seq peak. we also plan to investigate psps designed for motif discovery in protein sequences. for protein motifs, psps based on spaced triples rather than the k-mers used here for dna psps might be more appropriate, given the larger protein alphabet. we also intend to implement psps for use with meme's anr model, which allows multiple repeats of a motif within a single sequence. we don't foresee any major difficulties in incorporating psps into the anr model but have focused on the oops and zoops models in this work in order to facilitate direct comparison with previous work by others on psps.

authors' contributions
tlb designed the experiments, adapted the meme algorithm to use psps and wrote the final draft. mb worked on the mouse evaluation method. tw assisted with processing the chip-seq data. pm did most of the programming, performed the experiments and wrote the initial draft.

supplementary material
additional file 1
additional details on algorithm implementation and methods of evaluation.

click here for file

 acknowledgements
tlb and pm are funded by nih/ncrr award r <dig> rr <dig>  tlb and mb are funded by the arc centre of excellence in bioinformatics. the authors thank alexander hartemink and raluca gôrdan for providing the scripts for computing the  prior.
