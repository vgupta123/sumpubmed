BACKGROUND
the concept of networks is ubiquitous in systems biology. in the past decade, high-throughput experimental techniques such as yeast 2-hybrid systems and mass spectrometry-based proteomics led to an influx of biomolecular interaction data in curated databases such as hprd  <cit> , dip  <cit> , and bind  <cit> . computational methods to predict protein interactions with domain interaction profiles  <cit> , co-expression patterns  <cit> , and term co-occurrences based on text mining  <cit>  have also led to the development of databases such as ophid  <cit> , internetdb  <cit> , unihi  <cit> , happi  <cit> , and string  <cit> . these databases support the transformation of biological network studies into essential biological data analysis tasks that include inferring global protein functions  <cit> , assembling protein modules  <cit> , integrating different omics data sets  <cit> , reconstructing biological pathways  <cit> , predicting disease-relevant genes/proteins  <cit>  and developing panel biomarkers  <cit> .

many network visualization software tools have been developed recently to help biological researchers visually query, annotate and analyze biomolecular network data. for example, cytoscape  <cit>  is one of the most commonly used software platforms that contains all basic functions for visualizing and annotating a network graph derived from protein-protein or protein-dna interaction data. it has a robust graph layout engine that allows for automatic layout and manual control of network graph nodes and edges attributes corresponding to user annotation data. cytoscape adopts an open and flexible software architecture that supports software plug-ins, which extends the core functionality of cytoscape through third-party software extensions. visant  <cit>  competes with cytoscape by offering several built-in statistical functions to help users calculate several key network topological parameters and perform global real-time network analysis. webinterviewer  <cit>  uses a ultra-fast graph-layout algorithm that can scale up for manipulating the layout of a biomolecular interaction network up to tens of thousands of nodes on a desktop computer, while providing several network abstraction and comparison operators. the most recent feature-rich network data analysis software tool, biological networks  <cit> , enables advanced bioinformatics users to integrate microarray data analysis with biomolecular interaction network analysis over a diverse set of database choices through powerful template-based query interfaces. pathway studio  <cit> , which is available commercially, also uses powerful visualization engine and query interfaces, and allows its users to manage and access data stored in relational databases and to integrate biomolecular interaction data from its pubmed literature mining engine with other sources. in summary, current development trend is to equip users with extended ability to query and interpret existing experimental data, particularly those from "omics" platforms, in the emerging context of biomolecular interaction networks.

recent research in network biology has expanded beyond the study of protein-protein interactions or protein-dna interactions, therefore presenting new challenges and opportunities for biological network visualization and analysis software. these networks are more complex, with heterogeneous types of biological entities spanning broad range of scales from molecular , to super-molecular , to intercellular , to tissue and physiological  levels. for example, goh et al. explored all known associations of disease phenotypes by representing disease phenotypes instead of molecular entities as nodes in a network graph  <cit> . they described two new types of biological networks, "disease interaction network" and "disease-gene network", in which the former represented disease names as nodes and disease associations at the molecular level  as edges, while the latter represented genes as nodes and gene associations shared in a common disease  as edges. to characterize the global relationships between protein targets and all chemical drug compounds available today, yildirim et al.  <cit>  built a drug-target association network representing all known drugs and their targets recorded in the drugbank database  <cit> . the network offered an intriguing view with "hot" drug intervention points  and multi-targeted drugs clearly displayed. analyzing the data in multi-scale biological networks is inherently more challenging than that of biomolecular interaction networks, primarily because the heterogeneous interacting biological entities may differ significantly in size, quality, complexity and annotation requirements, making it combinatorial more difficult to develop user interfaces that preserve usability and robustness at the same time. few existing tools today can empower users to perform "visual analytics"–to discover novel information through visualization–for multi-scale biological networks.

to support multi-scale biological network visual analytics studies, new software tools must meet three basic requirements. first, the bulk of data should be managed by robust backend engines that support rich schemas such as relational database management systems  or xml/rdf data stores . flat files quickly become unsustainable beyond one or two spreadsheets of custom user input data, due to lack of a standard schema and difficulty in combining information from separate spreadsheets. second, iterative, exploratory and bi-directional data analysis capabilities to save temporary results and build visualization sessions on top of one another should be a pre-requisite. many current software tools support only one-way information flow from data sheets to visualization, and therefore should be referred to as "visual annotation" or "visual display" tools instead of "visual analytic" tools. third, visual querying languages, even if borrowed directly from sql in relational database querying or sparql in semantic web based data querying, will become quite beneficial to advanced users, who have to filter different facets of biological networks and manipulate complex network analysis tasks, by automating tasks that are "menu-driven" or "mouse-click intensive". as suderman et al recently surveyed, none of the  <dig> commonly used biological network visualization tools supported such query languages embedded directly  <cit> .

we developed proteolens as a new visual analytic software platform for creating, annotating and analyzing multi-scale biological networks. when compared with existing biological network visualization tools, proteolens introduced a new set of design choices, which made it easy for bioinformatics expert data analysts work on large sets of biological networks and omics data. there are three primary characteristics that distinguish it from existing network visualization tools. first, it supports direct database connectivity to oracle and postgresql database and sql statements including both data definition languages  and data manipulation languages . users of proteolens can use the tool to iteratively prepare data stored in relational databases without leaving the visual analytic environment. data from different tables in a complex relational database schema can also be queried on the fly to create networks at the appropriate level for exploration. second, proteolens supports graph/network represented data expressed in standard graph modeling language  formats. therefore, visual layouts performed in comparable software tools can interoperate with proteolens as long as they also support gml standards. this allows users to perform visual network analysis for data from heterogeneous sources that are syntactically represented in non-relational format. third, it supports the decoupling of complex user interfaces for network visualization into two separate functional layers: data annotation and data visualization. the concepts of "node association rules" and "edge association rules" provide users with significant flexibility in choosing what data attributes  to map to nodes or edges, and association visualization display options allow to select visual effects to represent values of these attributes later.

in the next several sections, we first describe proteolens implementation and then demonstrate how it can be used to enable multi-scale biological network-based research through three case studies.

implementation
proteolens is a standalone software tool written in java programming language. its software architecture consists of two separate functional layers – a data processing layer at the backend and a data visualization layer at the frontend–connected by a network data association engine . different from conventional network visualization software, where data preparation prior to visualizations is usually not supported by the software itself, the proteolens data processing layer allows network data to be pre-processed and integrated using built-in database management utilities. the data visualization layer at the frontend enables users to iteratively build and layout query-based networks and overlay them with visually displayed annotations as additional data sets are brought in. the network data association engine bridges the two functional layers by creating network data association rules  between pre-processed data elements and identifiers of network nodes or edges. this design enables users to navigate between data management and data visualization iteratively until useful insights from the proper visualization are established.

network data association rules: the concept
network data association rules represent a basic concept in proteolens design. a network data association rule defines a relationship between a network data attribute such as an edge or a node and other non-network data attributes such as a computed score or an expression value. such an association rule establishes the mapping between data in the data processing layer and data in the data visualization layer. there are two types of association rules:

1) graph node association rules. for example, rule x: {protein id} → {protein name}defines the network data attribute "protein id" as an identifying attribute for a network node further annotated with a node attribute "protein name". note that the network attribute "protein id" and associated non-network attribute "protein name" may not necessarily be stored in the same database table and may be defined using a complex sql query for visual data mapping purposes only.

2) graph edge association rules. for example, rule x: {protein id a, protein id b} → {} defines the combination of two network data attributes, "protein id a" and "protein id b", as identifying attributes for a network edge without further annotations; whereas rule y: {protein id a, protein id b} → {interaction score} defines the combination of two network data attributes, "protein id a" and "protein id b", as identifying attributes for a network edge further annotated with an edge attribute "interaction score". similar to graph node association rules, the network attributes and non-network attributes may come from different physical data structures.

data processing layer
the data processing layer is the place where biological data from different sources, including flat files, xml data and tabular data in relational databases, can be managed and converted from one format into another for subsequent analysis. in proteolens, users could specify the sources of data, pre-process data and make certain subsets of data available to the subsequent data analysis. unlike conventional visualization software tools, proteolens supports full structured query language –including both data definition languages  and data manipulation languages –for these tasks. the combination of ddl and dml is particularly powerful for network biological studies, since many network data association rules may require selected data sets  and nested definition of complex data structures  by pulling data from many physical table locations. in proteolens, the data processing layer is implemented with the combination of gml data handler and oracle  <dig> g/postgresql relational database engines.

data visualization layer
the data visualization layer is the place where specified network data attributes and data association rules are converted to network layouts and network visual properties. the data visualization layer accepts network data association rules, lays out the drawing of networks as graphs, and visualizes network nodes and edges using graphical attributes defined in the network data association rules. in proteolens, the data visualization layer is implemented with a fully functional graph editor, which supports laying out the nodes and edges in the network and editing their graphical attributes such as colors and shapes with rules defined in network data association rules. proteolens supports multiple independent network views. in a network view, each associated attribute specified by the association rule can be added either as a node attribute or an edge attribute, depending on the association rule type. any numbers of associations can be selected as annotation sources to modify the appearance of network nodes and edges. in proteolens, the graph layout is extended from yworks java package  <dig> , a commercially available graph layout library.

RESULTS
new features
*a summary of attributes of cytoscape, visant and biologicalnetworks as presented in detail by matthew suderman et al in review.  <cit> 

a. relational and xml data support
currently, proteolens supports two types of physical data sources: tab-delimited text files on the local file system and tables/views in relational tables managed by oracle  <dig> g or postgresql  <dig> x database management systems. a user can manage and query the data stored in the relational database, create network data association rules from the view, and immediately make the rule available for visual annotation. since only meta-data are stored when a data association is created, the query execution can be performed in real time of visualization against the underlying complex data structure in the database. this design allows for an efficient data retrieval and analysis, and saving of the data file and workspace resources. almost infinite configurations of data views can be created from multiple underlying data sources, and be used for building complex integrated visualizations. proteolens also supports semi-structured data format in graph modeling language  – the standard file format in the graphlet graph editor system, for non-relational graphs. network visualization is created in a view can be saved in a gml file, thus allowing for reopening and further editing in a new session, or data exchange without relational databases. the network view can be exported as a jpeg or png file. the user can import and manipulate any network data using standard gml file formats in addition to structured data stored in the relational databases. proteolens stores every data association in a session configuration xml file. users can save the session and recommence their analysis at any time.

b. sql-based visual data analysis
proteolens supports direct database connectivity through java database connectivity  to oracle and postgresql database tables and views, and the entire set of database operations can be specified using full sql statements including data definition languages  and data manipulation languages . this extends the range of data that expert users may bring into later network visualizations for annotation and visual exploration tasks. users of proteolens can iteratively prepare data stored in relational databases without leaving the visual analytic environment. data from different tables in a complex relational database schema can also be queried on the fly to create networks at the appropriate level for exploration. sql queries are also used to present "views" of different underlying database tables for network data associations, therefore making it possible for users to perform all visualization pre-analysis without leaving the proteolens platform.

c. flexible network data visual annotation
in proteolens, users can explicitly define network data association rules. as described earlier, the ids of the nodes in the network are used for attaching multiple attributes in the rule for subsequent visual annotations. the annotation of an edge is based on the mapping of attributes in the rule identified by two interacting node ids for each edge. graphical attributes currently available for automatic node annotations are: label, size, shape, and fill color. the latter annotation allows mapping multiple or multiple-valued properties , in which case pie-chart style filling will be drawn. graphical attributes currently available for automatic edge annotation are: line style, width, color, and text label. there are two types of mappings between attributes and visual properties: 1) the categorical mapping type that allows displaying attributes with discrete set of specific property values ; and 2) the continuous-range mapping type that allows displaying properties with continuous numerical values , using color gradients, shape sizes or line widths.

the use of declarative sql to specify how data should be managed, pre-processed, associated, and then subsequently mapped to visual properties is characteristic of proteolens. a user can use sql queries to specify and store "associations" between nodes/edges and other attributes. these associations can be used to visually annotate large displayed networks using node/edge shape, size, weight, color and text. this gives users more choices and flexibility than any custom-built annotation user interface for complex visual network analysis.

d. sub-network manipulations
users of proteolens can conveniently specify sub-networks based on existing networks to conduct studies in a specific biological context. users could specify what types of nodes or edges to include in the sub-network according to set of qualifying conditions. for example, a user may retrieve all the interactions where at least one of the partners is annotated as "cell-cycle related" proteins. this does not require bringing into the view a huge biomolecular network in its entirety and then filtering/zooming in onto its part. neither this specification requires users to prepare the data outside the proteolens visualization software platform; instead, users could write a sql statement to first create a relational view between protein nodes and gene ontology annotations and then to create a new network data association of "nodes", with which a new sub-network could be retrieved from the original network and annotated. this approach can be imagined as a huge underlying biomolecular network stored in the backend databases and/or files and integrated  by the virtue of data associations. only the relevant part of the network is physically pulled into the visualization layer for detailed examination. such visualized sub-networks are not "final" either but could be gradually updated by iteratively using additional queries to bring more data from different sources into the view, until the final complex network is built. in comparison, cytoscape does not support a network filtering feature and requires the entire network for visual data analysis to be pre-formatted properly and imported from the input data files. a cytoscape software plug-in, bubble router, has became available recently; however, it allows only creating a sub-network with one-pass filters, which cannot be iteratively extended to fit the exploratory nature of visual analytic operations.

case studies
to demonstrate the new functionalities of proteolens, we show several case studies that demonstrate how the software is used to solve real-world biological problems.

case study 1: human cancer association network
decade-long study of disease-causing genes has generated a comprehensive set of "disease disorders – genes" relationship pairs , which are represented in the omim morbidity map  <cit> . goh et al. recently showed a global view of the "human disease network" , which included  <dig> disease disorder classes,  <dig> disease disorders, and  <dig> disease genes  <cit> . in the hdn, nodes represented disease disorders, while edges represented the presence of at least one common gene between two connected disease disorders. the study of hdn showed how diseases related to one another and formed major disease clusters connected by underlying shared molecular entities. the initial construction of the network for hdn, however, was labor-intensive, since preparation of the disease-gene association file and other gene/disease annotation files needed to be processed separately with different software tools before visualizations were to be performed.

in this case study, we show how to reproduce a similar human disease network with proteolens, using data for  <dig> common types of cancers derived from the omim database, papers by goh et al, and public biological databases  <cit> . the visual analytic process can be divided into four steps, network data pre-processing, network data association rule specifications, initial network visualization, and iterative visual data analysis, all without leaving the software platform:

network data pre-processing
at the beginning of the analysis, only one database table–the gene_disease_map table–is available. the table contains the pairing relationships between disease disorders and genes. from this table, we could define the relationship of two individual diseases as "associated" if and only they shared at least one common gene implicated in both diseases. the sql to create such a specification is quite straightforward: 

the constructed view put together three attributes. the first and second attributes represent paired cancer diseases that share at least one common disorder gene. the third attribute represent the total count of shared genes between the shared diseases. to create an annotation for cancers and total count of genes implicated in each cancer, we can write the following sql statements inside proteolens: 

network data association rule specifications
here, we assign visual attributes of interest to either network nodes or edges, using network data association rules. in this case study, we can create the following sample association rules using proteolens:

• disease_gene_implicated: {disease_name} → {cnt_gene}

• d2d_gene_shared: {disease_a, disease_b} → {cnt_gene_shared}

note that network data association rules must involve mapping from either the node  or edge  to an annotation attribute such as "cnt_gene" or "cnt_gene_shared". the former data association rule is "node-styled" and the latter data association rule is "edge-styled", since they provide annotations  for nodes and edges, respectively.

initial network visualization
the final construction of the human cancer association network in proteolens is now simplified. first, we lay out the basic network disease pairing information from "d2d_interaction"; then, we apply all the node-style network data association rules to the annotation of "nodes" and all the edge-style network data association rules to the annotation of "edges". in this case study, we chose to represent the total numbers of genes implicated in a given disease as sizes of the disease nodes, and the total numbers of genes shared between two diseases as the edge widths.

iterative visual data analysis
proteolens supports iterative visual analysis by allowing additional visual information to be captured as network nodes/edges annotations later. in this case study, after examining that breast cancer is well studied  and lung cancer is not, we decided to further incorporate first-time incident frequency during  <dig> in the u.s., by retrieving relevant statistics from the american cancer society  <cit>  and annotating disease names represented as network nodes with color gradients from white to red. the final view of the annotated network is shown in figure  <dig>  the figure reveals intriguing insights into the relations of the human cancers to each other. interestingly, lung cancer studies are found to be under-represented for all cancers, given its large number of new incident rates; the discovery opportunities for lung cancer seem huge.

case study 2: compound-target interaction network
different from conventional network biology studies or case study # <dig>  this case study is concerned with two different types of biological entities–chemical compounds and drug target proteins. we attempt to understand the specificity of drug compound actions and to visualize potential drug targets for major diseases.

using proteolens, we created drug-target network visualization, using hierarchical layout and two different node shapes to represent drugs and protein targets separately. in figure 4a, we show a snapshot of the network, which contains all the drug compounds developed for acm2_human and its direct interacting protein partners. acm2_human is an acetylcholine binding receptor and a member of the g-protein-coupled receptors  protein family–a major class of current drug targets that accounts for more than 50% of known contemporary drug compounds  <cit> .

the entire protein-drug interaction data was downloaded from drugbank  <cit>  and stored in oracle  <dig> g database tables. it is interesting to note that target proteins could be visually clustered, and the clustering relationships correlate well with the evolutionary relationship defined by separate alignments of protein sequences . while a few acm2_human interacting proteins such as sc6a1_human, sc6a2_human and acha2_human are not members of gpcrs, all other proteins belonged to gpcrs. acm1_human to acm5_human are acetylcholine receptors. as shown in figure  <dig>  the results suggest that proteins with similar phylogenetic profiles tend to share similar core set of drug compounds, perhaps due to similarities of underlying protein structures in the proximity of the functional site. the visualization of such drug-target network opens up new "network pharmacology" study opportunities, in which a drug may be evaluated for its ability to find multiple "targets" related to a specific biological sub-network  <cit> ; while the effects of drug compounds may also be evaluated in the context of common structures of all interacting target proteins. this type of visual network studies could help users develop novel perspectives for drug designs and/or protein target validations.

case study 3: peptide-protein mapping networks
in this case study, we apply proteolens to the study of mass spectrometry  based proteomics. in each tandem mass-spectrometry experiment, many partially trypsin-digested peptides can be detected by the ms/ms spectrometers and identified by ms analysis software. the software normally aims to identify all the peptides from ms spectra and to map them unambiguously to proteins in the sample. traditional ms analysis software identifies proteins from peptides by directly mapping them to the most common protein isoforms found in the pre-computed ms search database; therefore, incomplete results may arise, especially in cases where common peptides may be shared by two or more protein isoforms.

in figure  <dig>  we show how proteolens could be used to help establish all the relationships between found peptides and possible protein isoforms that they may link to, in the hip <dig> database–an online database that collects all experimentally identified proteins and peptide-mapping evidence in normal human plasma <cit> . two proteins, a1ag1_human and a1ag2_human, are shown in the visualization network. by writing sql inside proteolens, we identify all the potential protein-peptide relationships: .

in the peptide-protein mapping network shown, the common peptides identified and mapped to either protein in the original experiments are colored green, whereas newly mapped peptides are colored yellow. we also used different node shapes to annotate peptides identified from different ms instrument types, e.g., ims-ms instruments, lc-ms/ms instruments or maldi-ms instruments. by visualizing the raw data in the protein-peptide network, we can see that both protein isoforms are found in human plasma, since both common peptides and protein-specific peptides are found and mapped. interestingly, ims-ms instruments are seen to resolve only one protein isoform "a1ag1_human", suggesting that either the platform could be biased towards identifying certain types of peptides or the search database used for this experiment might have not contained a1ag2_human. proteolens makes it easy for users to explore different hypothesis and continue scientific explorations through iterative network visual data analysis.

CONCLUSIONS
we developed proteolens as a multi-scale network visual analytic software tool for advanced network biology studies. it is built on robust software architecture that supports flexible network data association specification using rules, integrates data processing through relational databases and gml data files, and scalable data visualization through layered annotations. it is intended for advanced bioinformatics users who manage large existing sets of biological data in the oracle or postgresql databases, and who are skilled in sql programming. proteolens is by far the first bio-molecular network visualization software with full sql support. proteolens enables iterative visual layout, annotation and exploration of bio-molecular networks. it effectively liberates advanced data analysts from the burden of data preparation and processing prior to generating visualization, and thus helps to better concentrate on the scientific visualization itself. the support for both "network browsing" and "network querying" operations makes proteolens a promising visual data analytic and visual data mining tool for hypothesis-driven network biology studies. with future releases of proteolens, we plan to add open application program interfaces  so that 1) proteolens can interoperate with other software tools in bioinformatics, and 2) third-party plug-ins could be developed to accommodate expanding user community needs.

availability and requirements
project name: proteolens

• project home page: 

• operating system: the software is platform independent and can run anywhere java virtual machine runtime is available. an installer is provided for windows nt/xp/2003/vista users.

• programming language: java

• other requirements: java runtime environment  version  <dig>  or above is required.

• license: free software license to all users.

• any restrictions to use by non-academics: non-academic users can freely use the software for research purposes. non-academic users cannot redistribute, modify, reverse-engineer, or resell the software for commercial purposes.

list of abbreviations used
giny- graph interface library; sql -structural query language; psi-mi – proteomics standards initiative – molecular interactions.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jyc is the principal architect and custodian of the software. jyc and as conceptualized the multi-scale biological network visualization ideas together, designed computing architecture, and implemented the software in 2003– <dig>  th and shh took over the software improvement and maintenance tasks since then by rewriting significant portions of the software, developing new documentations, testing it on different platforms, developing a set of case studies. th outlined the paper and all authors have read and approved the final version of the manuscript.

