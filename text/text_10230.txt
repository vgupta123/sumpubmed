BACKGROUND
the development of novel methods of data classification – including in this general term both supervised  and unsupervised  methods – is being stimulated by the massive generation of genomic and proteomic data. classification algorithms can be divided into two categories, hierarchical and non-hierarchical, also known as partitioning  <cit> . a problem of very general interest is how to compare a hierarchical classification with a dichotomic "flat" classification, i.e. a partition that divides the elements into two non-overlapping groups. actually, many apparently unrelated cases exist that are particular examples of this general situation . a typical case, and a basic problem in microarray data analysis, is when genes are divided, according to a threshold value, into either differentially expressed or non-changed in an experimental sample respect to a control and then the differentially expressed genes are tested for enrichment in a particular cellular function, for example as defined by those genes being annotated or not with a gene ontology  term . this situation implies comparing two flat classifications. on one hand, genes are divided into genes differentially expressed and genes with background level of expression. on the other hand, genes are partitioned into those annotated and those not annotated with the go term. however, this is equivalent to compare a flat classification with a hierarchical one, provided that only the deepest dichotomy of the latter  is tested . a second typical example is how to establish whether the top items of a list, ordered according to a particular parameter, are more often than expected characterized by having a second, independent feature. taking again an example from the microarray analysis field, this would correspond to a case in which genes are ordered according to a value that measures their level of overexpression  in an experimental sample respect to a control and then it is decided to check whether there is an enrichment of a particular function  among the top scorers . this situation can also be envisaged as the comparison of a hierarchical and a flat classification, provided that the hierarchical classification  has the particular asymmetrical structure shown in figure 1b. significantly, there is a very extensive literature that explores the two cases summarized in figures 1a and 1b , but it is always in isolation, without considering whether the methods developed for these particular cases could be applied to the general case of hierarchical classifications with more complex topologies .

to our knowledge, in the whole bioinformatics literature there have been only four recent studies in which it has been attempted to establish general methods to compare hierarchical and non-hierarchical classifications, all of them in the context of microarray data analysis. in two of these studies  <cit> , the method is similar, and very much related to those used for the two simpler cases discussed above and exemplified in figures 1a and 1b. starting with a hierarchical classification of expression data, which may be obtained with any conventional method, such as upgma, the degree of enrichment for a particular class  for each cluster is estimated by calculating the probability p of finding such enrichment by chance, using either a cumulative hypergeometric distribution, the equivalent fischer's exact test or a cumulative binomial distribution. then, the most significant cluster, the one with smallest p value, is determined and all clusters that contain any element in common with it  are eliminated. the process is repeated until all non-overlapping clusters with small p values are determined. finally, bonferroni's correction is used to take into account the effect of multiple tests either considering the number of classes tested  <cit>  or the number of clusters tested  <cit> . a third study followed the same strategy, but only up to the calculation of the p values, without further refinement of the results  <cit> . finally, a fourth study  <cit>  followed a totally different strategy, based on establishing a heuristic search for minimization of edge crossings in the bigraph generated by the two classifications.

we became interested in this topic after generating a strategy, implemented in the program uvcluster  <cit>  that allows the efficient conversion of complex graphs into dendrograms. we recently used this strategy of analysis both on graphs derived from protein-protein interaction data  <cit>  and on those based on protein domain data  <cit> . although we determined that the results obtained in those two works were biologically meaningful, an obvious question to be solved was to establish a standard procedure to determine whether the hierarchical classification obtained was congruent with other classifications . in this work, we describe a method that follows on the steps of previous studies  <cit> , but improves the characterization of the significant classes by using permutation tests that take into account the topology of the hierarchical classification. the method is applied to several cases and, most especially, to explore a hierarchical representation of the mitochondrial interactome, characterizing the clusters that correspond to known protein complexes.

RESULTS
algorithm
our goal is to detect the clusters of a hierarchical tree that contain an overrepresentation of elements belonging to a particular class. a class is defined by a dichotomic flat partition of the elements in such a way that each element in the tree either belongs or not to it. the likelihood of finding a particular level of enrichment by chance must be evaluated and, in this evaluation, we want to consider the topology of the tree. as we describe in detail below, evaluation is based on a quantitative comparison of the observed enrichment value with the enrichment values of a set of simulated results, generated by random permutation of class labels while keeping constant the topology of the tree.

let us call m the number of elements in the tree. then, the total number of clusters in that tree is m -  <dig>  for each cluster, we can calculate the probability p of finding by chance a particular enrichment for a class. to do so, we calculate a cumulative hypergeometric function:

 p=∑c=rmin⁡
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaacpc6xni=xi8qivkypfjydhavhbbf9v8qqaqfr0xc9vqfj0dxdbba91qpepei8k8fii+fsy=rqgqvepae9pg0db9vqaivgfr0xfr=xfr=xc9adbaqaaegacagaaiaabeqaaeqabiwaaagcbagaemicaanaeyypa0zaaabcakqbagaadawcaaqaamaabmaabaqbaeqabiqaaaqaaiabd6gaubqaaiabdogajbaaaiaawicacaglpaaadaqadaqaauaabeqaceaaaeaacqwgtbqbcqghsislcqwgubgbaeaacqwgrbwacqghsislcqwgjbwyaaaacagloagaayzkaaaabawaaewaaeaafaqabegabaaabagaemyba0gabagaem4aasgaaagaayjkaiaawmcaaaaaasqaaiabdogajjabg2da9iabdkhaybqaaigbc2gatjabcmgapjabc6gaujabcicaoiabd6gaujabcycasiabdugarjabcmcapaqdcqghris5aaaa@5032@ 

in this formula, m is, as we just said, the total number of elements in the tree; n is the number of elements among those m that are included in a class, according to a defined flat partition; r is the number of common items between the class and the cluster analyzed; finally, k is the cluster size.

our strategy starts by defining all the clusters in a tree and calculating their p values. then, the clusters are ordered according to those values, from minimum to maximum, and the cluster with the minimum value is selected. now, to establish a null probability distribution of p for this first cluster, the program performs a random permutation of class labels. most significantly, the simulations to generate this distribution take into consideration the topology of the original tree, which is kept constant throughout the permutation process . the probability of finding the observed enrichment is determined by establishing the number of times that the minimum value of p in the set of simulations is lower or equal than the observed one. if that corrected probability  is lower than a particular threshold , the cluster is labelled as significant. as a rule of thumb we recommend, when the number of elements of the tree is smaller than  <dig>  about  <dig> permutations to establish a significance value of p' lower than  <dig> , and no less than  <dig> for a value of p' <  <dig> .

the process described for the first cluster is then repeated for all the rest, going from that with the second lowest p value to the one with the maximum p value. that is, in each case, the p value of the cluster that is analyzed is compared with the p values of those clusters found in the same relative position in a new set of simulations  and p' values are determined. a significant point is that, given that each ranked value is compared with the values of the same rank of sets of independent simulations, we avoid the need of a further correction for multiple comparisons .

once all the results are obtained, it is necessary to filter the results to avoid multiple significant correlated clusters. the rule used is that a significant cluster eliminates all the clusters in the tree that contain any element in common with it  with less significant p values. finally, all significant clusters in which the number of elements belonging to the class that is being considered is lower than  <dig> are also discarded.

this method has been implemented in a perl script which is freely available, together with instructions for using it, in our web page  <cit> . this script may be used for analyses as those shown in the next section, i.e. with up to 500– <dig> elements. as an example, the mitochondrial interactome analyses shown in the last section of this article, focused on detecting classes in a tree of  <dig> elements, required on a standard personal computer from  <dig> to  <dig> minutes  with  <dig> permutations. this range of times is related to how soon significant clusters are found in the particular case examined. we are currently developing a c program called treetracker  to be used in cases in which more than  <dig> units must be analyzed. although the program is still not fully optimized, its current version already allows to study large trees in relatively short times. we have performed analyses with a tree of  <dig> elements generated from microarray-derived transcriptional data for saccharomyces cerevisiae genes. its exploration, again with  <dig> permutations, required an average of  <dig> minutes  on a standard pc. permutations can be easily divided among multiple computers or processors and therefore the analyses can be speed up using more sophisticated hardware.

examples of application of this novel strategy
to check for the ability of our new strategy to detect significant similarities between a hierarchical and a flat classification, we have analyzed several real cases. we also tested how our method compares to the already published procedures to determine whether it significantly improves on them.

comparison of a hierarchical classification based on coexpression data and a flat classification based on go
in this first example, we compared a hierarchical classification based on gene coexpression data obtained using microarrays and flat classifications based on establishing whether those same genes belong or not to particular go classes. we chose to analyze a well-known dataset. gasch et al.  <cit>  obtained data for the transcriptional response of saccharomyces cerevisiae cells when they were exposed to diverse environmental changes. from the  <dig> microarrays of this dataset, we extracted information for  <dig> s. cerevisiae genes annotated as belonging to the general go class "response to stress". those genes were hierarchically clustered  and then we explored using our strategy whether  <dig> different go classes, all them included in the general class "response to stress" , were overrepresented in clusters of the tree. results are summarized in figure  <dig>  a total of  <dig> significant clusters were detected for  <dig> of those classes , while no clusters were detected for the other three . in this case, the coverage, defined as the percentage of genes in the whole dataset that are detected in significant clusters was  <dig>  %, and the purity, defined as the percentage of proteins in the significant clusters that belonged to the corresponding go classes, was in average  <dig>  %, ranging from  <dig>  to  <dig> %. very significantly, in this analysis we detected only four significant clusters following the procedures of toronen  <cit> . these four clusters were also detected by our method. moreover, three of those four clusters had size <  <dig>  toronen did not considered clusters of size <  <dig> in his original report, but if only clusters of size ≥  <dig> are considered, a single cluster is detected by his method. following buehler et al. method  <cit> , we only detected two clusters, also both found by our strategy. in summary, the previous methods detected at most  <dig> clusters while ours detected the same clusters plus  <dig> additional ones. we conclude that our strategy is much more sensitive. the difference is clearly due to the fact that bonferroni's correction  is too strict, an effect that becomes more and more noticeable when the number of tested classes increases. it is obvious that this qualitative advantage in sensitivity clearly compensates for the fact that our method is more computer intensive.

comparison of coexpression data versus protein complexes
it is widely accepted that, at least in yeasts, proteins appearing together in a protein complex are likely to be encoded by genes with a degree of coexpression higher than expected by chance  <cit> . thus, as a second example of our strategy, we decided to search in a hierarchical tree based on coexpression data for clusters in which genes encoding proteins of particular complexes were overrepresented. to do so,  <dig> protein complexes, containing a total of  <dig> proteins, were arbitrarily selected from sgd . then, we grouped, using hierarchical clustering based on coexpression data , the  <dig> corresponding genes. applying our novel strategy to compare both datasets, we detected significant associations for  <dig> out of the  <dig> protein complexes. the coverage was here  <dig>  %  and the purity was in average  <dig>  % . these results show that, in this particular dataset, the classification based on coexpression is only partially congruent with the classification based on protein complexes. this relatively low level of congruence and the fact that the complexes were in general of small size  makes difficult the characterization of significant clusters. however, our results  are again qualitatively better than those provided by the other related strategies, because in this case we failed to detect a single significant cluster following the procedures of toronen  <cit>  or buehler et al.  <cit> , even if cluster sizes <  <dig> are considered.

comparison of two unsupervised clustering processes
another type of situation in which it is relevant to compare a hierarchical and a non-hierarchical classification is found when two different methods of clustering, one of them hierarchical and the second not, are used with the same data. for example, it is often significant to establish whether a hierarchical clustering result is compatible with a k-means-based flat partition. to see how our strategy performed in this case, we randomly select microarray data for a set of  <dig> yeast genes  and obtained a hierarchical upgma tree  <cit> , and two k-means classifications  <cit> , in which the results were fitted into  <dig> or  <dig> clusters, respectively. in this example, we obtained significant hierarchical clusters for all the either  <dig> or  <dig> classes defined by the k-means partitions. however, when  <dig> classes were used, only  <dig> of them had corresponding single significant clusters, while the other  <dig> produced multiple separated significant clusters. on the other hand, when  <dig> classes were established with k-means, we found that  <dig> of them corresponded to single significant clusters. the weakest point in the k-means strategy of partition is the need of an a priori definition of the number of classes and our strategy can be useful to establish the optimal value for that number. in our example, it was clear than the division into  <dig> classes was more similar to the hierarchical classification of the same elements that a division into  <dig> classes. this type of comparison may be thus used both as to roughly establish the best number of clusters in which to divide a group of elements by k-means analyses and also to determine which ones of those clusters are supported by both hierarchical and k-means classifications.

the structure of the yeast mitochondrial interactome
we finally examined in detail a more difficult case, to see if it was possible to successfully recover the structure of part of a complex interactome by using uvcluster analyses, which builds a hierarchical structure starting from a graph  <cit> . we thus compared a uvcluster-based hierarchical dendrogram derived from general protein-protein interaction data for mitochondrial yeast proteins with a flat partition based on known mitochondrial protein complexes. a total of  <dig> proteins were considered . out of  <dig> protein complexes tested,  <dig> of them  were detected as significant clusters in the hierarchical tree . a thirteenth  was located at the bottom of the tree together with unconnected proteins and therefore it was considered not significant. this situation occurs because, as often happens in this type of biological graphs  <cit> , most proteins are connected, forming a large core. unconnected proteins are those not directly linked to any protein of that main core, and therefore they appear as an artifactual cluster in the hierarchical trees.

in this case, the coverage was  <dig> % and the purity of the clusters was  <dig> %. therefore, the correlation between the hierarchical and the flat partition was very high, demonstrating that significant portions of the yeast interactome can be meaningfully characterized using unsupervised, fully automated uvcluster hierarchical clustering.

the comparison of the hierarchical, global, structure of the protein-protein interaction graph with the known protein complexes provides two different levels of novel knowledge. first, we can visualize the relationships between elements inside a protein complex. second, we can study the global hierarchical relationships among protein complexes. several well-known relationships among complexes are observed in figure  <dig>  being the most obvious the close proximity between the subunits of the large and small ribosomal subunits. similarly, we can see the close relationships among different complexes involved in protein translocation from the cytosol to the mitochondria, such as the tom complex, the tim <dig> and tim <dig> complexes and the presequence translocase-associated import motor . the analysis of the congruence of the two types of data may also provide novel information about proteins of unknown function. for instance, the cluster that contains known members of the tom complex  contains four additional proteins: pet <dig>  mdm <dig>  tim <dig> and the unknown protein yhr003c. our analysis suggests that a functional relationship among these proteins and the tom complex is likely and in fact data exist confirming this relationship for two of the proteins: mdm <dig> is involved in the assembly of the tom complex  <cit>  and tim <dig> has been recently described as a mediator between the tom complex and the presequence translocase import motor  <cit>  . pet <dig> is known to be involved in the transport of s-adenosylmethionine  into the mitochondria, although the molecular mechanism is still unknown  <cit> . our results suggest a possible involvement of the tom machinery in sam transport, with pet <dig> linking both processes. finally, yhr003c has been located to the mitochondrial outer membrane in a massive screen  <cit> , which is congruent with an interaction with the tom complex. interestingly, yhr003c has a high similarity with the thif family of proteins, which in eukaryotes comprise a large family of ubiquitin-activating enzymes  <cit>  suggesting a possible control of these aspects of the mitochondrial protein transport by the ubiquitin-proteasome system.

of course, congruence is not perfect. for example, other known members of the tom complex, such as tom <dig>  tom <dig> and tom <dig> are outside the corresponding significant cluster. however, inspection of our datasets demonstrated that this is due to the fact that protein-protein interaction data for these proteins and the rest of the tom complex is lacking in the dip database, and therefore we can attribute this problem to incompleteness of the data used to generate the hierarchical tree. in any case, all these results demonstrate that our strategy of analysis is useful to detect relevant correlations between a hierarchical and a non-hierarchical partition of the same data and that uvcluster can be used to extract significant portions of a complex graph in order to determine its hierarchical structure, confirming our previous findings  <cit> .

discussion
in this paper, we describe a new strategy that allows establishing the clusters of a hierarchical tree that are congruent with a non-hierarchical classification of elements. the main novelty of our strategy is the use of permutation analyses, which generate a distribution of ranked probability values, to check for significantly enriched clusters. the method outlined here has the main advantage of being more sensitive than similar, previously published methods  <cit>  due to taking into consideration the topology of the tree to evaluate the likelihood of obtaining by chance each level of overrepresentation. the advantage of our method is especially evident in cases in which many classes are analyzed, due to the fact that bonferroni's correction, used by those authors, is then too conservative.

there are many papers already published using permutation methods to establish the significance levels of enrichment for the particular cases shown in figures 1a  and figure 1b . it is relevant to point out here that our method reduces to those other methods provided that the hierarchy has the particular structure shown in those figures. this is obvious for the case depicted in figure 1a, in which only one test is performed. however, it is also true for the more complex case in figure 1b. it can be analyzed with our strategy and will provide exactly the same results that those already established by other methods, in spite of the fact that here we use a ranking for the significant clusters. the reason is that, if, and only if, the hierarchical structure is as shown in figure 1b, the maximally significant cluster  eliminates all the other possible clusters, because all the rest are "parents" or "children" of it. our study may thus be considered the logical conclusion of a line of research that has been developed in the last years without actually being studied in the right, general context. it is the first one in which it is shown that those two are just particular cases of the general situation in which a hierarchical and a dichotomic flat partition are compared, and a general solution for such comparison is offered.

as we have indicated in the introduction of this work, all published methods that we know of in which hierarchical and non-hierarchical classifications are compared are restricted to the field of microarray data analysis. we have shown above an example of its use in a different context, namely protein-protein interaction data, and of course this method may be used in many other different contexts to undertake biological or non-biological problems. in particular, the combination of uvcluster, which establishes the hierarchical structure that more faithfully reflects a graph, and this strategy, which may be used for establishing the meaning of that hierarchical structure, allows for the analyses of complex graphs in ways that had not been hitherto possible.

CONCLUSIONS
here we present a new strategy for the comparison of a hierarchical and a non-hierarchical classification of elements. this strategy can be applied to very different situations, among them the particular cases of comparing flat classifications  with two lists of genes , or with an ordered list of genes. the main improvement is that our strategy considers the topology of the tree during the calculation of significance levels. the use of permutation analysis and the rank-based comparisons of p values allows the method to be highly sensitive.

