BACKGROUND
in recent years there has been growing interest in the problem of building explicit models of reticulate evolution  <cit> . this work has to a large part been motivated by biological research highlighting the potential importance of hybridization in the origin of biotic diversity, biological invasion and rapid adaptation  <cit> .

one simple and widely used approach for detecting hybridization has been to compare gene trees built from independent gene loci, and to consider gene tree incongruence as evidence for hybridization  <cit> . however, hybridization is not the only possible cause of gene tree incongruence. other explanations include phylogenetic error  <cit> , unrecognised gene duplication and loss  <cit> , incomplete lineage-sorting  <cit>  and lateral gene transfer  <cit> .

in light of current genome sequencing efforts and the ease of sequencing large numbers of independent gene loci using new generation sequencing technologies, it is important to find ways to differentiate between various explanations of gene tree incongruence. here we focus on distinguishing hybridization from incomplete lineage-sorting. in this regard, a helpful concept might be "principal trees", which are the trees displayed by a hybridization network . if a phylogeny contains no hybridization or lateral gene transfer, then the expectation is for one principal or "species" tree. however, if hybridization has occurred, then there will be multiple principal trees. in the absence of incomplete lineage-sorting, each principle tree will represent the evolutionary history for a large collection of loci, but where incomplete lineage-sorting occurs gene trees may differ from their underlying principal tree.

here we investigate the potential of filtered z-closure  <cit>  and q-imputation  <cit>  supernetworks to distinguish phylogenetic signals arising from principal trees from phylogenetic signals caused by a combination of incomplete taxon-sampling and incomplete lineage-sorting in evolutionary histories involving hybridization. we consider these methods since they are not only designed to cope with conflicting phylogenetic signals, but also with data that current genome sequencing efforts can fail to gather  databases, gene sequences are often missing for species of interest). in particular, using gene trees generated under a coalescent process, we test whether these methods can be used to filter out phylogenetic signals that do not correspond to edges in principal trees, signals that have the potential of confounding efforts to reconstruct complex phylogenies.

methods
overview
analogous to the supertree framework  <cit>  our input is a set of trees on overlapping but not necessarily identical taxa. we refer to the complete taxa set as the union of the taxa sets of the input trees; complete splits are bipartitions of the complete taxa set and trivial splits are splits where one part consists of precisely one element. furthermore partial trees and partial splits are trees and splits on a subset of the complete taxa set. we denote a split of the taxa set x as a|b where a and b are both subsets of x, a ∪ b = x, and a ∩ b is the empty set.

our overall approach is to first generate a collection of partial trees along a hybridization network in the presence of incomplete lineage-sorting , to then apply a supernetwork method to this collection of partial trees to obtain a collection of complete splits, and to then apply a filter to reduce the complexity of this collection. the reduced collection of complete splits is then compared to the splits associated with the hybridization network to determine if they have been accurately recovered. we use this approach to study two supernetwork methods – z-closure  <cit>  and q-imputation  <cit> , and two types of filter – one counting-based and one homoplasy-based  <cit> .

supernetwork methods
we begin with a brief description of the two supernetwork methods that we considered. supernetwork methods take as input a set of partial trees and produce a set of complete splits. unlike the supertree framework, these splits need not be compatible, allowing possible conflict within the set of input trees to be represented. the first supernetwork method we consider, z-closure, is underpinned by the z-closure rule and is introduced in  <cit>  and implemented in splitstree <dig>  <cit> . the method begins with a collection of partial trees from which a list of partial splits is obtained – each partial split coming from an edge in some partial tree in the list . the z-closure rule takes a pair of partial splits a|b and c|d, and if a ∩ c, b ∩ c and b ∩ d are all non-empty and a ∩ d is empty, then it replaces the partial splits a|b and c|d with the extended splits a| b ∪ d and a ∪ c | d . to ensure that as many partial splits in the list as possible are extended to complete splits, the rule is iteratively applied to the partial splits in the list by taking pairs of partial splits and either overwriting them with two splits on a more inclusive taxa set, or, if the rule does not apply, returning the same two partial splits. when the z-closure rule can no longer be applied the method returns the list of complete splits that have been generated.

note that the output of z-closure is dependent on the order of elements in the list of partial splits, and so we repeat the procedure for  <dig> random orderings keeping a cumulative count of how many times each complete split appears.  also note that the z-closure implementation used for this paper differs slightly from that in splitstree <dig> in that it keeps track of multiple copies of partial splits and complete splits, as this information is required by the counting filter that we apply later.

the other supernetwork method we consider, q-imputation  <cit> , also uses partial trees as input but uses an alternative approach to generating complete splits that is based on the four-taxon subtrees  of the partial trees. for each partial tree with missing taxa – that is, taxa that are in the complete taxa set but not in the taxa set for that tree – the missing taxa are inserted in the tree. this is done by processing the missing taxa in a fixed order and placing each taxon within the partial tree to maximise the number of quartets that contain the missing taxon and are also quartets of the other partial input trees. once all the trees have been completed the list of complete splits displayed by the completed trees is returned. .

filtering methods
we apply two different kinds of filter to the lists of complete splits obtained from the two supernetwork methods, a homoplasy-based filter and a counting-based filter. the homoplasy filter  <cit>  requires two user-defined parameters x and y. the level of homoplasy for each complete split and partial tree is determined by recoding the split as a binary character, reducing it to the same taxa set as the partial tree, and evaluating the number of character state changes required to explain the character on the partial tree . splits that have a parsimony score greater than a given number x in more than a given number y of the partial trees are filtered out. the counting filter has one user-defined parameter n and keeps the n splits that appear most frequently in the list of complete splits . note that for q-imputation this is equivalent to the filter described in  <cit>  for some choice of threshold.

simulations
the starting point for each simulation is a hybridization network such as the one shown in figure 2a. formally such networks are rooted, leaf-labelled, directed-acyclic-graphs in which the nodes are of one of four types: nodes with in-degree  <dig> and out-degree  <dig> correspond to hybridizations; nodes with in-degree  <dig> and out-degree  <dig> correspond to speciation events; nodes with in-degree  <dig> and out-degree  <dig> correspond to the extant species; and one special node of in-degree  <dig> and out-degree  <dig> is the root. such a network can be thought of as a collection of rooted principal trees: these trees are obtained by starting from the tips of the hybridization network  and choosing one of the two possible paths at each hybridization node that is encountered on the way towards the root. the set of principal trees consists of the trees possible to obtain in this manner . this leads to a natural definition of the collection of splits associated with a hybridization network as being the union of the splits associated with each of the principal trees of the network . we will refer to such splits as the true splits of the hybridization network. the purpose of the simulations is to assess if filtered supernetworks can identify the splits present in the principal trees of the hybridization network. to be successful these splits need to be distinguishable from those arising from incomplete lineage-sorting under the coalescent process.

the main flow of our simulation is shown in figure  <dig>  given a hybridization network, a collection of trees was created by sampling with replacement from the collection of principal trees . we used the software package coal  <cit>  to simulate trees according to the coalescent process given a principal tree with branch lengths specified in coalescent units . we employed two different branch length settings. in each of the principal trees all branch lengths were either assigned coalescent units of  <dig> or all branch lengths were assigned coalescent units of  <dig> . these choices for the branch length settings were also used in  <cit> , a more sophisticated approach might be to assign branch lengths to the hybridization network itself and then have the principal trees inherit these branch lengths. we also simulated a situation where there were no lineage-sorting effects. in this case the only random aspect to the data generation is the choice of the principal trees. each tree was then pruned of m taxa at random with the restriction that each taxon in the network must appear in at least one partial tree. these collections of partial trees were then used as input to each of the supernetwork methods. note that, although coal produces rooted trees, neither of the  <dig> supernetwork methods considered use any information about the root, so in effect they consider only the corresponding unrooted trees.

accuracy of the supernetwork methods was determined by counting the number of false positive and false negative splits. a false positive is a split that is displayed by the supernetwork, but is not a true split of the hybridization network; a false negative is a split that is displayed by at least one of the principal trees of the hybridization network, but not displayed by the supernetwork. note that these definitions differ from those used in  <cit>  in that they measure accuracy with respect to an underlying hybridization network that has been used to generate the data.

we based our simulations on ten different hybridization networks each labelled by  <dig> taxa, and representing  <dig> to  <dig> hybridization events . for each network the parameters in the simulation that varied were the number of trees , the branch lengths used by coal  <cit>   and the number of taxa missing from each tree . for each parameter setting we made  <dig> replicate data sets, giving  <dig> sets of partial trees for each of the ten hybridization networks.

the column h gives the number of hybridization events, and the column s gives the number of unique non-trivial splits contained in the principal trees.

we applied  <dig> different homoplasy filters to the lists of complete splits returned by z-closure and q-imputation:

•  keep only splits with no homoplasy  on all partial trees,

•  keep only splits with no homoplasy on 75% or more of the partial trees,

•  keep only splits with no homoplasy on 50% or more of the partial trees,

•  keep splits with a parsimony score of  <dig> or less on all partial trees.

we also applied the counting filter  to both z-closure and q-imputation. for each hybridization network we selected n splits, where n was fixed to be the number of unique non-trivial splits associated with the principal trees of the network .

RESULTS
results were generated for each of the hybridization networks given in table  <dig>  but for brevity, in figures  <dig>   <dig>   <dig>   <dig> and table  <dig> we only show results for hybridization network  <dig> . results for the other hybridization networks follow the same general trends .

filtering
as can be seen in figure  <dig>  the  filter is far too stringent in combination with either z-closure or q-imputation; it gives almost no false positives but false negatives increase with increasing g towards the maximum value of  <dig>  the  filter is not stringent enough in combination with either z-closure or q-imputation; it gives almost no false negatives but false positives increase with increasing g. moreover,  is ineffective in combination with z-closure as the number of false positives increases with increasing number of partial trees, in combination with q-imputation the average number of false positives stays close to  <dig> for all values of g.  is the most effective of the homoplasy filters, as for both z-closure and q-imputation both types of errors either decrease or stay reasonably constant with increasing g, a property that we would expect any filtered supernetwork method to satisfy. the counting filter also displays this property for both z-closure and q-imputation; both false positives and false negatives decrease with increasing number of input trees.

for the rest of this section, we restrict our attention to the best homoplasy filter  and the counting filter .

missing taxa
incomplete lineage-sorting
recall that the parameter b affects the probability that the trees generated by coal  <cit>  will match the principal tree sampled from the hybridization network, b =  <dig> corresponds to trees that match exactly. figure  <dig> shows the trends in the number of false positives and false negatives for different values of b. results are averaged over the  <dig> possible settings for the number of partial trees g and the number of missing taxa m. as expected, both methods and filters perform better when b is large.

overall performance
figures 8a and 8b show the average number of false positives and false negatives respectively  versus the number of true splits for hybridization networks 1– <dig>  hybridization network  <dig> is not shown in the figures, as it is an outlier with  <dig> true splits, but results for this network follow the same trends as the other hybridization networks. for  both types of errors increase slowly with increasing number of true splits. for  false positives appear fairly constant, but false negatives increase linearly with a slope close to one with increasing number of true splits.

CONCLUSIONS
we have evaluated the potential of z-closure and q-imputation filtered supernetworks to identify splits belonging to the sets of principal trees associated with hybridization networks. we have found that this approach can recover these splits when there are few hybridization events. however, our results imply that  if gene trees have many missing taxa then many gene trees are required;  if the gene trees are frequently incongruent with the principal trees of the hybridization network due to incomplete lineage-sorting then a large number of near complete gene trees is required;  and if there are few gene trees available they need to be both near complete and highly congruent with the principal trees.

in our simulations the counting filter picked the n best-supported splits, where n was chosen to be the known number of true non-trivial splits. of course with real data n will not be known, although in practice n could be chosen by, for example, greedily introducing splits with highest support as long as the corresponding network does not become too complex to easily interpret. approaches to do this are described in  <cit>  for consensus networks. note that by increasing n the risk of introducing false positive splits is increased, although the risk of failing to identify true positive splits is reduced.

despite these limitations, with the potential now of obtaining large numbers of splits from independent gene loci using new generation sequencing technologies, our findings may nevertheless be applicable for tree-like phylogenies where some degree of hybridization is inferred  <cit> . in such cases, filtered supernetworks can be used to identify the true splits of the underlying hybridization network. once these are obtained, the method of  <cit>  can be used to convert the split system into a hybridization scenario.

one of our most interesting findings is that the choice of whether to use z-closure or q-imputation seems to have much less impact on accuracy with regards to recovering the splits in the underlying hybridization network than the choice of filter. for both q-imputation and z-closure the counting filter  has the desirable property that as the amount of data increases  the rate of both false positives and false negatives goes down. several settings were tried for the homoplasy-based filter . hf <dig> was too stringent, and hf3/hf <dig> tended to either suffer from increasing false positives or increasing false negatives as the number of gene trees increased. hf <dig> gave the best compromise between these extremes.

using the hf <dig> filter, we found that z-closure had a higher false positive rate than q-imputation over a range of parameter combinations . one explanation might be that z-closure can potentially generate more splits than q-imputation. for example, given g fully resolved gene trees on 8-m taxa , q-imputation can generate at most 5*g non-trivial complete splits, whereas z-closure can produce at most 10**g non-trivial complete splits . hence the maximum number of splits that z-closure could generate decreases as m grows, whereas the number of splits that q-imputation could generate stays constant. what we observe for both methods and filters is that false positives increase with increasing m . therefore, the maximum number of splits that z-closure and q-imputation could generate does not appear to explain the difference in false positive rates. we think a more likely explanation is that q-imputation places missing taxa in such a way as to maximize agreement with the input trees, hence tending to produce multiple copies of the same splits. conversely, z-closure aims to find all possible complete splits that can be derived by extending partial splits using the z-closure rule, a process that can yield many different splits. hence we expect that q-imputation would be likely to generate fewer false positives than z-closure in general. this difference is not greatly reduced by hf <dig> as, in contrast to cf, it does not place a cap on the total number of splits.

we found that hf <dig> resulted in more false negatives than cf . this may be due to the fact that this filter only selects splits that have no homoplasy when restricted to 75% of the input trees. since the principal trees are obtained from a network, they can be different and in some cases may only agree on a small number of edges. even a true split may have a high homoplasy score when restricted to a particular principal tree. in contrast, cf only selects splits that occur with high frequency, irrespective of whether they are in agreement with any of the input trees.

although all the trees used in our simulations were fully resolved, both supernetwork methods considered here can be applied to partially resolved trees. thus, when inferring gene trees to be used as input to a supernetwork method, it would probably be a reasonable approach to only retain those edges in the estimated gene trees that have high support .

in cases where there are many hybridization events, especially between individuals that are not closely related, there will be many principal trees and corresponding splits . many of these splits will occur at low frequencies making them hard to distinguish from phylogenetic error. this means that phylogenetic inference will be limited, as gene-tree incongruence will be extensive. in such cases, rather than attempt to reconstruct a hybridization network, it may be more appropriate to formulate objective tests to better understand the complexity of the data and the extent to which hybridization contributes to this complexity. joly, mclenachan and lockhart  have recently proposed such a test.

an unexplored idea worthy of study is the investigation of model-based, rather than combinatorial, methods of filtering. one approach might be to consider posterior probability distributions on species trees  <cit> . it will be interesting to investigate whether such posterior distributions can also be analysed for evidence of distinct principal trees in cases where evolutionary relationships are complex.

authors' contributions
brh developed and applied the simulation scheme, implemented the modified z-closure method, homoplasy filter and counting filter, and contributed to writing the ms, especially the methods and results section. sb conducted initial simulations with z-closure. pl ensured biological relevance, and contributed to writing the ms, especially the introduction and conclusions. vm ensured mathematical correctness and developed the overall concept. kh ensured mathematical correctness and developed the overall concept, contributed to writing the ms, especially the methods and results section.

