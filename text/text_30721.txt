BACKGROUND
an increasing amount of gene expression data sets is becoming available through public repositories . all this new information offers potential clues for treatment of different diseases but one of the current challenges in the field is to unlock the potential of this data. combining a large number of gene expression data sets originating from different labs could be beneficial for the discovery of new biological insights and could increase the statistical power of gene expression analysis, but then this data should be combined in a consistent manner.

the first hurdle for large-scale gene expression analysis is obtaining access to consistently annotated and preprocessed data  <cit> . inside the insilico project <dig> the insilicodb r/bioconductor package was released  <cit> , offering programmatical access to all expertly-curated and uniformly preprocessed expression profiles from the insilico db repository  <cit> .

however, accessing uniformly represented data is only the first step when combining and integrating gene expression data sets since the use of different experimentation plans, platforms and methodologies by different research groups introduces undesired batch effects in the gene expression measurements  <cit>  thus severely hindering downstream analysis. the problems raised by the batch specific unwanted variation as well as the potential sources leading to batch effects have already been revealed and widely discussed in a number of publications l  <cit> . it is clear that it is necessary to incorporate the adjustment for batch effects as a standard step in the analysis of high-throughput data  <cit>  and several methods to remove this specific type of bias - while preserving the biological variance - have been proposed these last years  <cit> . unfortunately, there is no single best method yet that can be used in all situations.

we present here the insilicomerging r/bioconductor package, which combines several of the most used methods to remove the unwanted batch effects in order to combine, or merge different data sets in an intuitive and user-friendly manner.

evaluating and validating the results of batch effect removal methods is perhaps as important as the batch effect removal process itself. without good and reliable evaluation tools, these methods could result in an even increased distortion of the data, introducing serious errors in the results of any downstream analysis performed. therefore, five simple but powerful visual inspection tools and six quantitative measures to evaluate the different batch-effect removal methods, are provided as well.

although this package can be used as a stand-alone tool, its power lies in combining it with tools like the insilicodb package, thereby paving the way towards large-scale meta-analysis of gene expression repositories.

implementation
the insilicomerging package is part of the open-source bioconductor  <cit>  project since release  <dig> .

data formats
a conscious choice has been made to work with the internal data formats of bioconductor for handling gene expression data objects, namely expressionsets. each function can take as input a list of expressionset objects and the returned value of the different merging methods is a single expressionset, containing the merged data.

link with insilico db
there is a programmatic link with the insilico db genomics data hub  <cit>  through the r/bioconductor insilicodb package  <cit> , providing uniformly curated and preprocessed gene expression data. all genomic data sets are formatted as fully annotated expressionsets which can be used immediately within the insilicomerging package. examples in the next section will illustrate this seamless integration.

on the browse page of insilico db  it is also possible to download gene expression data sets in the same format. after loading these data sets in r, they can similarly be used within insilicomerging.

implementation of merging algorithms
a set of six batch effect removal methods for merging gene expression data is currently provided: bmc , combat , dwd , genenorm , none and xpn . for a detailed description of the major algorithms we refer to the original publications and in addition each of those six methods is also described in the accompanying package vignette. for more information about merging through batch effect removal in general please consult  <cit> .

the implementation of combat was based on the orginal r code made available by the authors on their website http://www.bu.edu/jlab/wp-assets/combat/download∖_files/combat.r. the implementation of dwd uses the kdwd function from the corresponding package  <cit> . xpn has been implemented based on matlab code provided by the authors https://genome.unc.edu/xpn/. the remaining merging algorithms were implemented using basic r functions. all implementations were tested by empirical validation and when possible, by comparing results with those from the original implementations.

note that gene expression data sets from different platforms can be merged by keeping only the common features  in the merged data set. some merging techniques are only reported and implemented to merge exactly two studies . to merge multiple studies, an additional step was added in which all studies were combined two-by-two in a recursive way.

implementation of validation algorithms
for the visual inspection of merging results, five qualitative validation methods are provided. in addition, six quantitative validation methods are provided as well. these quantitative indices provide a more accurate evaluation of the batch effect removal and they are very effective tools for comparing the results of different methods. below a brief description of each validation method is provided, for an extensive survey we again invite the reader to consult  <cit> .

qualitative validation methods
five qualitative validation methods are implemented:

plotmds
creates a double-labeled multidimensional scaling  plot.

plotrle
creates a relative log expression  plot, initially proposed to measure the overall quality of a data set  <cit>  but also useful in this context.

plotgenewiseboxplots
provides a local visualization by looking at the box plots of a specific gene across all samples.

plotdendrogram
creates a sample-wise hierarchical clustering plot.

plotgenewisedensity
is another local visualization tool which plots the estimated density of genes across different data sets.

if available we extended the relevant existing functions from r and bioconductor.

quantitative validation methods
six quantitative validation indices were implemented, based on the description in  <cit> :

measureasymmetry
this measure compares the sample asymmetry by calculating the skewness before and after batch effect removal. good merging methods should not alter the samples’ skewness.

measuresamplesmeancorrcoef
this measure compares the correlation between the same samples before and after batch effect removal. good merging methods should maintain similarity and therefore correlation should be high.

measuregenesmeancorrcoef
this measure compares the correlation between the same genes before and after batch effect removal. good merging methods should maintain similarity and therefore correlation should be high.

measuresignificantgenesoverlap
this measure compares the number of known control genes found in the top ranked genes according to a particular method for differential expressed genes discovery in the adjusted study with those found in the original studies.

measuresamplesoverlap
this measure is an indication of how well the samples from each study are mixed after batch effect removal. for each array in each study the distance to the nearest array in all other studies is calculated. the average of these distances is used as a measure. the lower the average distance, the better the overlap, and the better the quality of the batch effect removal.

measuregenesoverlap
we also implemented a novel quantitative validation index which calculates the average difference in the distribution of all genes in the individual studies as follows:


  govi=∑|pxi−pyi| <dig> 

where pxi and pyi are the normalized probability density functions  of gene gi in the first respectively second data set and they are empirically estimated using the parzen-rosenblatt density estimation method  <cit> . note that this index is bounded in  <cit> , the minimum value being obtained when the two distributions are identical while the maximum value is reached when the two distributions are completely separated. the global cross-studies genes’ overlapping index is given by:


  gov=∑imgovim 

where m is the number of common genes between the two data sets. note that gov  is still bounded in  <cit> , providing a clear quantification of the batch effect or of the quality of the data integration process.

RESULTS
in the following sections we demonstrate the ease and power of the insilicomerging package based on an example analysis of two lung cancer data sets assayed on different platforms. we will discuss a complete workflow consisting of search and retrieval of data, followed by merging and corresponding validation.

accessing data
we start our example analysis by using the insilicodb package to search for data sets containing lung cancer samples, assayed on two different platforms: affymetrix human genome u133a array  and affymetrix human genome u <dig> plus  <dig>  array . we restrict our search to data sets with the number of samples between  <dig> and  <dig> . all data sets retrieved from the insilico db database are consistently preprocessed using frozen rma  <cit> , as explained in  <cit> .


> library;

> lung <dig> = getdatasetlist;

> lung <dig> = getdatasetlist;

> select = function {

+ n = nrow));

+ if { return; }

 + };

> lung <dig> = unlist);

"gse2603" "gse10072" "gse3218"

> lung <dig> = unlist);

"gse8332" "gse19667" "gse19804" "gse19407" "gse20257"

for both platforms we select one study from the above lists and retrieve the fully annotated and preprocessed data set:


> eset <dig> = getdataset;

> eset <dig> = getdataset;

> table);

control lung cancer

4958

> table);

control lung cancer

6060

both studies contain normal and tumor samples with a common disease annotation label and were selected for this example because they are almost equally divided in both disease subdivisions as can be seen in the previous code example.

batch effect removal and merging
the different merging methods implemented in the insilicomerging package can now all be applied on the retrieved expressionsets by calling a single function merge. for example, simple combination without batch effect removal can be done as follows: > merge;with esets a list of expressionset objects. the method parameter can be one of the options described above: bmc, combat, dwd, genenorm, none or xpn.

next to the merged set where no transformation  is applied and we also build a merged set using the combat method, hence creating two different expressionset objects containing merged data set:


> library;

> esets = list;

> eset_none = merge;

> eset_combat = merge;

> table)

control lung cancer

109118

validation
five visual validation methods are provided by the package in order to immediately enable a first inspection of the merged data sets. for this example, a first global visual inspection of the two merging approaches applied is demonstrated via the plotmds function.


> par);

> plotmds");

> plotmds;

in figure  <dig> the two mds plots are shown. samples are labeled by color, based on the target biological variable of interest  and are labeled by symbol, based on the study they originate from. this information was retrieved from the curated phenotype information of the data sets using the targetannot and batchannot arguments, respectively. no extra manual step was required.


we can observe the effect of using combat on the right part of figure  <dig>  where samples are more clustered together based on the target biological variable of interest , instead of the study they originate from . on the left part, if no merging technique is applied, a huge inter-study bias can be observed, hindering any further analysis of this combined data set.

similarly, on a local scale we demonstrate the use of the plotgenewisedensity function for a specific gene.


> par);

> plotgenewisedensity");

> plotgenewisedensity;

gene myl <dig> was arbitrary selected and its estimated density across both studies is shown in figure  <dig>  we can observe that the combat method makes the distributions of this specific gene across the two studies more similar to each other. note that the magnitude of the batch effect at the gene level is very dependent on the specific gene selected.


r code illustrating the five visual inspection methods is provided in the additional file  <dig>  the results for the three remaining methods can be found in figures  <dig>   <dig>   <dig> 


comparison with existing tools
we compare insilicomerging, together with insilicodb, on three axes: data access, data merging and validation algorithms.

data access
geoquery  <cit>  is an existing package to retrieve gene expression data sets in r/bioconductor. however, the information about the samples is in a raw form requiring a manual curation step in transit between a data repository  and a data analysis platform . a lack of standardized phenotypic meta-data and inconsistent preprocessing can hinder the integration and combination of different raw form data sets.

data merging
several of the batch effect removal techniques included in the insilicomerging package have been implemented prior to this package in different programming and/or script languages . a major advantage of insilicomerging is the consistent interface for all merging methods and its integration in the r/bioconductor framework. we will briefly discuss the added value of our package compared to those already available in r.

the authors of the combat method provide an implementation on their website which allows the input of known covariates . they work with several matrices containing the numerical data, and relevant annotations and covariates. within our package, all this information is bundled and encoded in the expressionset structure.

the authors of the dwd method recently have released the dwd r/bioconductor package  <cit> . this package is intended as a general use of the dwd technique and is not specific for the goal of batch effect removal. it is therefore not straightforward to use as a merging technique for gene expression data sets and once again the relevant data is dispersed over several objects. in addition, the necessary transformation of the gene expression values was added to the insilicomerging package in order to obtain a merged data set as result.

the conor package which is available through the cran repository  <cit> , most closely resembles our software as it includes multiple batch effect removal methods and several methods based on discretizing the gene expression data. however, it lacks the user friendliness provided by our package and the direct integration with the bioconductor framework.

validation
evaluating and validating the results of batch effect removal methods is perhaps as important and difficult as the batch effect removal process itself. without good and reliable evaluation tools, these methods could result in an increased distortion of the data, introducing serious errors in the results of any downstream analysis performed.

to the best of our knowledge no explicit software has been developed for validating the quality of the batch effect removal process of microarray gene expression data sets. the collection of both qualitative and quantitative validation methods is therefore a unique property of the insilicomerging package.

CONCLUSIONS
the insilicomerging r/bioconductor package enables the integration of batch adjustment in any workflow dealing with large-scale analysis of gene expression data, paving the road towards unlocking the potential of the massive amount of publicly available microarray data. moreover, its seamless integration with the r/bioconductor framework for further analysis and the insillicodb package for retrieval of consistent data, minimizes the need for manual intervention. as a result transparency, trackability and reproducibility of large-scale gene expression analysis is significantly increased.

availability and requirements
project name:insilicomergingproject home page:http://www.bioconductor.org/packages/release/bioc/html/insilicomerging.htmloperating system: platform independentprogramming language: rother requirements: bioconductorlicense: gpl-2any restrictions to use by non-academics: none

endnote
1http://www.insilico.ulb.ac.be

competing interests
the authors declare that they have no competing interests.

author’s contributions
jt, sm and cl designed and implemented the insilicomerging package and drafted the manuscript. jt, ds and rd designed and implemented the insilicodb package. ac, cm and dws were involved in the development of the back-end software. vds provided the expert-curated annotation data of the underlying database tool. hb and an conceived the study and participated in its design and coordination. all authors read and approved the final manuscript.

supplementary material
additional file 1
r script. code_example.r r script using both insilicodb and insilicomerging packages generating figure 1- <dig> 

click here for file

 acknowledgements
this work was partially funded by the brussels institute for research and innovation .
