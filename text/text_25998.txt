BACKGROUND
illustrating evolution using phylogenetic trees is a natural way of depicting evolutionary processes. indeed, already darwin drew trees and there exist many tools for automatically producing graphical representations of phylogenies. some phenomena are, however, better viewed as trees-within-trees. for example, gene family evolution should be put in the context of species evolution, parasite evolution is best understood in relation to a host tree, and a speciation process that is affected by geological processes, such as continental breakup and movement, is often viewed as a species tree that evolves within an area tree. the relation between the two trees is called a reconciliation  <cit> . more precise, a reconciliation describes how a guest tree, g , evolves inside a host tree, s , and allows the prediction and dating of evolutionary events  corresponding to vertices of g with respect to s. a special case is the most parsimonious reconciliation, mpr, i.e., the reconciliation that minimizes the number of evolutionary events. in order to avoid confusion, we will here use the term general reconciliation to indicate the set of all possible reconciliations .

illustrations of these phenomena are common in the literature today, but, apart from mprs, graphic representations of general reconciliations must be created by hand. early support for viewing mprswas available in component  <cit> , genetree  <cit>  and treemap  <cit> , featuring a nested view of co-evolving trees as well as an opportunity to look at them side-by-side. the mesquite  <cit>  coalescence package also provides automatic calculation and viewing of mprs. the tree viewer atv  <cit>  has support for displaying vertices corresponding to gene duplications in a different color, thus implicitly defining the reconciliation, but the relation to the species tree is not directly visualized. the atv interface has been inherited and improved in notung  <cit> , which is a program for e.g. gene family analysis, including methods for tree reconstruction, mprsand gene-tree rooting. the rap system  <cit>  visualizes mprs similar to atv, but also  supports interactions with databases through a graphical  query language for gene tree features, thereby helping the  user find gene families with a given evolutionary pattern. duploss  <cit>  displays mprsbut is an exploratory tool for algorithmic research rather than a general reconciliation viewer and cannot, for example, read input with arbitrary leaf names. another approach to identify duplications, that implicitly relies on  mprs, is taken by treesimplifier  <cit> , which shows guest  trees on a hyperbolic surface and supports collapsing  subtrees that are isomorphic to the host tree. finally, we  mention treedyn  <cit> , a powerful tree editor that, while not  directly handling reconciliations, allows visualization of  relations between leaves in host trees and guest trees. we present primetv , to our knowledge the first computer program that produce tree-within-tree illustrations of general reconciliations, i.e., not restricted to mprs. for convenience, a primetv web service is also available where a user can create illustrations without installing any software.

implementation
input to primetv is a host tree, s , and a reconciled tree, , where the guest tree, g, typically is a gene tree and γ is a reconciliation between g and s. formally, the reconciliation is a mapping between vertices in g and the edges in s on which they evolve. a reconciled tree is a guest tree given together with a reconciliation.

the output of primetv is an illustration of s, g and γ that has g nested in s : the host tree s is drawn using wide edges and ellipses for vertices. the guest tree is drawn using narrow edges and circles or squares for the vertices: vertices in g that γ associates with vertices in s, i.e., speciations in the case of a gene family, are marked by circles and placed within the corresponding ellipses of s. the remaining vertices in g, i.e., duplications in gene family evolution, are marked by squares and are evenly distributed over edges in s. there is a number of options affecting colors and format of the output; these are further described in the results and discussion section.

primetv is written to work closely with output from prime , a line of tools we are writing for performing probabilistic tree reconciliations  <cit> . thus, reconciled trees from these computer programs can be used as input directly. the prime reconciled tree format is documented in detail at the primetv web site. in brief, it is based on the newick  <cit>  tree format. a reconciled guest tree may have additional vertex markups, of the type used in the nexus  <cit>  and nhx  <cit>  formats, that indicates the host tree vertex to which it is reconciled, see example in figure  <dig>  a user can take any phylogenetic tree, add markup following the prime format, and view manually constructed reconciliations. since such an exercise is quite tedious and error prone, we provide two helper programs to simplify this task.

the first, readreconciliation, is a translator that takes a guest tree, a host tree, and a separate reconciliation description and returns a reconciled tree in prime-format. the input guest and host trees are in newick or prime-format, and the input reconciliation is in tabular form, see figure  <dig> and  <dig> and the results and discussion section. the output is in prime-format and can be directly fed into primetv. the second helper program, reconcile, is an implementation of zhang's algorithm  <cit>  for most parsimonious tree reconciliation. for simplicity of implementation, a quadratic time version of the least-common-ancestor subroutine was used. its input is in the newick or prime format and the output is either a reconciled tree in prime-format that can be directly fed to primetv, or a reconciliation in tabular format that can provide a starting point for a user's adaptation to non-mpr reconciliations.

the programs are all implemented using c++. a simple graphical user interface is provided for the web-service. the gnu plotutils  <cit>  package was used to generate the graphics. it has the advantage that we can produce output in a number of practical formats. besides the popular bitmap-based image formats such as gif and png, there is eps, svg, and fig for vector-based illustrations that also can be manipulated and improved manually with programs such as adobe illustrator , inkscape  <cit>  and xfig  <cit> .

RESULTS
to illustrate the competence of primetv we give two examples of its application, illustrating different inputs to primetv. these two examples also illustrate the formatting options of primetv.

the first example is a test case from the major histocompatibility complex class i, mhci, in primates, analyzed using prime in  <cit> . the species tree consists of three primates, its branch times are taken from  <cit> , and the gene tree is from  <cit> . the reconciliation is estimated with prime and the reconciled tree from prime is used as input to primetv. the output from primetv is presented in figure  <dig> 

the relation between the gene tree and the species tree is clear when using primetv: identifying the gene tree's speciation vertices and their corresponding vertices in the species tree is straightforward. gene losses are also apparent from missing gene lineages at speciations in the species tree. another advantage with this type of illustration is that deciding which species a gene belongs to is immediate; you do not need to rely on a prefix or suffix notation in the gene names. notice that the reconciliation in figure  <dig> is not the mpr: the second gene tree vertex from the left in figure  <dig> would in the mpr be denoted as a speciation. however, as described in  <cit> , if auxiliary evidence, i.e., mhci representatives from the human genome, is included it becomes evident, also with the most parsimonious reconciliation, that this vertex indeed represent a duplication. the ability to output non-mpr illustrations is currently unique to primetv.

the second example illustrates how to manually construct input to primetv using readreconciliation or reconcile. assume that we want to reconcile the guest tree g to the host tree s, figure  <dig> and  <dig> respectively, to achieve the reconciled tree in figure  <dig>  the input to readreconciliation comprises s and g in newick-  and  <dig>  respectively) or prime-format, and a reconciliation in tabular format as described below. the reconciliation associates vertices in s with vertices in g using their unique identity number. the prime programs, including primetv, automatically assign such identity numbers in a consistent way, and primetv can be used to view the assigned identity numbers, e.g., figure  <dig> and  <dig> shows automatically assigned identity numbers on g and s, respectively. however, as a convenience user-defined identity numbers  can be assigned using the tag id in the tree file, as exemplified in figure  <dig> 

the tabular format for the reconciliation is given as a two column table where, for each row, the left column holds the identity number of a host tree vertex and the right column holds the identity numbers of the guest tree vertices reconciled to this host tree vertex. depending on how the guest tree vertices are given, there are two 'flavors' of the tabular format. in the full reconciliation, denoted γ, the right column comprise the guest tree vertices whose incoming edge appear on the incoming edge of the host tree vertex. an example is given in figure  <dig> and row  <dig> in this table, i.e., γ is graphically indicated in figure  <dig>  notice that the guest vertices mapped to a host tree vertex in γ form subtrees of g. the reduced reconciliation, denoted , comprises for each host vertex the leaves of these subtrees, cf. figure  <dig>  reduced reconciliations are generic in prime, but full reconciliations may be more intuitive for users. the result of readreconciliation run with s, g and either γ or  as arguments is the reconciled tree  shown in figure  <dig>  here the tag ac for a guest tree vertex v comprise the host vertices to which v is mapped in the reduced reconciliation . the primetv output for this reconciled tree is given in figure  <dig> 

the program reconcile produces most parsimonious reconciliations, mprs, of trees. it takes as input a host tree and a guest tree in newick format and a leaf-map in tabular format that maps the name of a guest tree leaf to the name of the corresponding host tree leaf, see example in figure  <dig>  the output is either the most parsimonious reconciliation, γ*, in tabular format, or the reconciled tree  in prime format. the output reconciliation in tabular form may be used as a starting point for the construction of user-defined reconciliations. the reconciled tree output can be fed directly to primetv; the most parsimonious reconciled tree for the host tree and guest tree in figure  <dig> is shown in figure  <dig> 

as a further convenience, the programs can be accessed using the web interface, . there, guest and host trees in prime format are put into text boxes. the user can then choose between creating an mpr or giving a reconciliation on a tabular or prime format; if the mpr alternative is chosen, an additional leaf map  is needed as input to reconcile. in either case a primetv-generated illustration is presented along with options for layout and color changes. the computed reconciliation is also given in a text box to allow for modifications and immediate updates of the illustration.

figures  <dig> and  <dig> also illustrate the customization options available in primetv. the layout can be altered in various ways: the tree in figure  <dig> is drawn horizontally, ladderized right and with the subtrees positioned asymmetrically, while the tree in figure  <dig> is drawn vertically, ladderized right and with subtrees distributed symmetrically. in these figures, the host tree edges are scaled in relation to their edge times; this scaling, however, can be removed as in figure  <dig>  it is also possible to remove either the guest tree, as in figure  <dig>  or the host tree, as in figure  <dig>  for this last option no host tree needs to be given, thus primetv can be used to illustrate any tree, i.e., not only reconciled trees. colors of guest and host tree vertices and edges are highly customizable and examples are shown in figures  <dig> and  <dig>  some annotation can also be customized. the time annotation of the host tree can be shown as divergence times on a time axis, as in figure  <dig>  or as the time intervals associated with host tree edges, as in figure  <dig>  as shown in figure  <dig> and  <dig>  vertex annotation with identity numbers assigned by prime can be shown. further options not shown include scaling of fonts and change of page size or bitmap size. the result can be shown on an x11-window or saved to file in a number of formats, see section implementation.

CONCLUSIONS
our tool primetv is a simple and compact computer program dedicated to visualizing reconciled trees. it is the first tool to visualize general reconciliations and not only mprs. primetv visualizes reconciled trees as trees within trees. this type of illustration clarifies and accentuates the underlying structure in a reconciled tree, for example the impact of a species tree on a gene family phylogeny or how parasite evolution has followed its host species. many visualization attributes, such as colors and layout parameters, can be adjusted according to the user's needs, thus making it possible to adapt the style of the illustration to the style of a presentation. the range of output formats make adaptation easier as well.

these attributes makes primetv a powerful tool for illustrations of gene family histories, orthology analysis, biogeography and co-speciation studies, especially since primetv allows for alternative reconciliations. primetv has formats suitable for manuscript preparation, immediate inspection, web applications, and presentations. the clarity and intuitiveness of trees-within-trees illustrations is also ideal for pedagogic illustrations of the above-mentioned processes in an educational setting.

two programs distributed jointly with primetv simplify input adaption by removing the need to create input by hand. the primary user interface of primetv is the command line, hence it is easy to include it into scripts allowing automatic visualizations in large data sets. for the casual user, the web interface provides a simple gui and also avoids the need for installing software.

availability and requirements
project name: primetv

project home page: 

release  <dig> . <dig> of primetv is also distributed with this manuscript .

operating systems: primetv has been tested on linux systems , mac os x  and microsoft windows .

programming languages: the software is a command-line tool written in c++. we have compiled primetv using the gnu c and c++ compilers,  both versions  <dig> ,  <dig> . <dig> , and  <dig>  . 

the casual user is recommended to use our web server which, besides being platform independent, provides an easy-to-use user interface.

other requirements: the graphics interface of primetv makes use of the gnu plotutils  <cit>  package. there are a couple of adjustments to plotutils needed to compile on linux using a modern c++ compiler. the patched source are available on our website, where we have also put executable binaries. for mac os x and microsoft windows, patched versions of plotutils are available, e.g., through macports and cygwin  <cit> , respectively.

license: the software is distributed under the gnu general public license.

authors' contributions
this project was conceived and supervised by bs, acbs, jl, and la. es wrote most of the software. bs and la contributed code and wrote this article. la implemented the web interface.

supplementary material
additional file 1
relase  <dig> . <dig> of primetv. the source code distribution of primetv.

click here for file

 acknowledgements
the authors wishes to express their thanks to rod page and two anonymous reviewers for valuable comments on the manuscript. this work was funded by the foundation for strategic research , the swedish research council and carl tryggers stiftelse.
