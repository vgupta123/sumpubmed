BACKGROUND
analysis of tree structured data is important in bioinformatics because there exist various kinds of tree structured biological data, which include rna secondary structures  <cit> , phylogenetic trees  <cit> , glycans   <cit> , and vascular trees  <cit> . various techniques have been applied to analyses of these tree structured data. though machine learning techniques have been extensively applied to analysis of glycan structures  <cit> , it is still important to develop simple comparison/search methods because machine learning methods are not appropriate for fast search of similar objects. indeed, in analysis of biological sequences, such sequence search/comparison tools as fasta, blast and sseaech are still widely used. therefore, it is worthy to develop search/comparison methods for tree structured data. in order to compare tree structured data, it is required to define some measure of similarity or dissimilarity between two trees. among various measures, the tree edit distance is the most fundamental and has been extensively studied  <cit> . it measures the distance between two trees by means of the minimum cost sequence of edit operations that transforms one tree into another tree, where an edit operation is either a deletion of a node, an insertion of a node, or a substitution of a label of a node. for the tree edit distance problem for ordered trees, tai developed an o time algorithm  <cit> , where n is the number of nodes in a larger input tree. several improvements followed from this work. demaine et al. recently developed an o time algorithm and showed that this bound is optimal under some computation strategy  <cit> .

the tree edit distance between ordered trees is useful if the ordering among children has an important meaning . however, in some applications, it is preferable to regard input trees as unordered trees. at least, in many applications, more flexible matching can be made possible if input trees are regarded as unordered trees and thus the chance that similar data is missed can be decreased. it is to be noted that edit distance for unordered trees is always smaller than that for ordered trees. unfortunately, zhang et al. proved that the tree edit distance problem for unordered trees is np-hard  <cit> . furthermore, zhang and jiang proved that it is max snp-hard  <cit> , which means that there exists no polynomial time approximation scheme unless p=np. in order to cope with this hardness, akutsu et al. developed a fixed parameter algorithm which works in o) time  <cit> , where k is the maximum allowed edit distance. their algorithm might be useful for comparison of very similar trees . however, it is not useful for comparison of non-similar trees. horesh et al. developed an a* algorithm  <cit> . their algorithm works efficiently for moderate size trees. however, their algorithm can only handle unit cost cases . some alternatives to the tree edit distance for unordered trees have been proposed  <cit> . however, none of them is widely accepted as a measure of similarity for unordered trees. therefore, it is still needed to develop a practical method for calculating tree edit distance between unordered trees.

in this paper, we propose a practical method using algorithms for computing the maximum clique. the idea of the method is simple: the edit distance problem is reduced to the maximum clique problem and then practical solvers for the maximum clique problem are applied. the maximum clique problem is a fundamental problem in computer science and is to find a complete subgraph of the maximum number of vertices in a given undirected graph. though the maximum clique problem is proven to be np-hard, several practical algorithms have been developed and successfully applied for practical problems  <cit> . by utilizing such algorithms  <cit> , we can solve the edit distance problem for unordered trees of moderate size . though similar reductions have been proposed for similar edit distance problems  <cit> , to our knowledge, it is the first method that exactly solves the proper tree edit distance problem for unordered trees using maximum clique, where we use the fastest maximum clique algorithms  <cit>  developed by one of the authors and his collaborators. furthermore, to our knowledge, it is the first practical method for computing the unordered tree edit distance with general editing cost functions.

in order to evaluate the proposed method, we perform computational experiments using glycan structure data stored in the kegg database  <cit> . the result suggests that our proposed method can efficiently compute the edit distance for moderate size unordered trees. it also suggests that the proposed method has the accuracy comparative to those by the edit distance for ordered trees and by an existing method for glycan search.

methods
tree edit distance
here, we briefly review tree edit distance and edit distance mapping  for rooted, labelled and unordered trees  <cit> .

let t be a rooted unordered tree. we assume that each node v has a label ℓ over an alphabet Σ. r, v, and e denote the root of t, the set of nodes in t, and the set of edges in t, respectively. for a node v ∈ v, anc denotes the set of ancestors of v. in the following, n denotes the number of nodes in a larger input tree |, |v|}).

an edit operation on a tree t is either a deletion, an insertion, or a substitution, where each operation is defined as follows :

deletion: delete a non-root node v in t with parent u, making the children of v become children of u. the children are inserted in the place of v into the set of the children of u.

insertion: inverse of delete. insert a node v as a child of u in t, making v the parent of some of the children of u.

substitution: change the label of a node v in t.

for each of edit operations, the cost is defined as follows:

γ: cost of substituting a node with label a to label b,

γ: cost of deleting a node labeled with a,

γ: cost of inserting a node labeled with a.

the edit distance dist between two unordered trees t <dig> and t <dig> is defined as the cost of the minimum cost sequence of edit operations that transforms t <dig> to t <dig>  in this paper, we adopt the following standard assumption so that dist becomes a distance metric  <cit> :

• γ ≥  <dig> for any  ∈ Σ′ × Σ′,

• γ =  <dig> for any a ∈ Σ′,

• γ = γ for any  ∈ Σ′ × Σ′,

• γ ≤ γ + γ for any a,b,c ∈ Σ′ × Σ′ × Σ′,

where Σ′ = Σu {∈}. we call t <dig> a subtree of t <dig> if t <dig> is obtained from t <dig> only by deletion operations. it should be noted that this definition of subtree is different from a subgraph of a tree.

there exists a close relationship between the edit distance and the edit distance mapping  <cit> . m ⊆ v  × v is called a mapping if the following conditions are satisfied for any two pairs ,  ∈ m:

 u <dig> = u <dig> iff v <dig> = v <dig> 

 u <dig> ∈ anc iff v <dig> ∈ anc.

let i <dig> and i <dig> be the sets of nodes in v and v not appearing in m, respectively. then, the following relation holds  <cit> :  

here we define a score function f for  ∈ v × v by

f = γ, ∈) + γ) - γ, ℓ).

it is seen that f = f ≥  <dig> holds. it should also be noted that under the unit cost model  =  <dig> for all a ≠ b), f =  <dig> and f =  <dig> hold for ℓ ≠ ℓ. let score be the score of a mapping m defined by score = ∑∈m f. let mopt be the mapping with the maximum score. then, we can see from the definition that the following property holds  <cit> :   

assuming that the root of t <dig> corresponds to the root of t <dig> in mopt, where this assumption can be removed if we add dummy nodes having the same label to t <dig> and t <dig> as the new roots.

reduction to maximum clique
let g be an undirected graph. then, a subgraph g′ of g is called a clique if it is a complete subgraph . the maximum clique problem is to find a maximum clique  in a given undirected graph. though the maximum clique problem is known to be np-hard, several practical algorithms have been developed  <cit> . in some cases, weighted versions of the maximum clique problem are utilized. among such variants, we consider the case that weights are given to vertices. let w denote the weight of a vertex v in g. then, a weighted version of the maximum clique problem is to find a clique g′ which maximizes ∑v∈v′w. in this paper, we call this variant the maximum vertex weighted clique problem, whereas the maximum clique problem denotes the original one.

our proposed method is based on a simple reduction from the edit distance problem for unordered trees to the maximum clique problem. based on eq. , for calculating the tree edit distance, it is enough to find a mapping m which maximizes ∑∈mf. in order to find such a mapping, we construct an undirected graph g from two input trees t <dig> and t <dig> by

v = { | u ∈v, u ≠ r , v ∈v, v ≠ r},

e = {{, } | u <dig> ≠ u <dig>  v <dig> ≠ v <dig>  u1∈anc iff v <dig> ∈ anc, u <dig> ∈ anc iff v <dig> ∈ anc},

where the first two conditions and the last two conditions in the definition of e correspond to conditions  and  for the edit distance mapping, respectively. we can see that there is a one-to-one correspondence between the set of cliques and the set of edit distance mappings, where we let r correspond to r . here, we assign weight w to each vertex x =  ∈v by w = f. then, we can see from eq.  that the tree edit distance can be obtained by finding a maximum vertex weighted clique.

it is to be noted that if we consider the case of γ = γ =  <dig>  γ =  <dig> for all a ∈ Σ, and γ =  <dig> for all a ≠ b, we have f =  <dig> and f =  <dig> for ℓ ≠ ℓ, and thus we can use a non-weighted version of maximum clique algorithms . in such a case, the resulting mapping gives a largest common subtree   <cit> .

maximum clique algorithms
in this study, we use algorithms for both the maximum clique problem and the maximum vertex weighted clique problem. for both problems, tomita and his collaborators have been developing several algorithms. recent studies on comparison with other existing algorithms suggest that their algorithms are fastest in most cases <cit> . based on several preliminary experiments, we chose mcq and mwcq as algorithms for the maximum clique problem and the maximum vertex weighted clique problem, respectively, where mwcq is basically an extended version of mcq. details of mcq and mwcq are given in  <cit>  and  <cit> , respectively.

though there are some theoretical studies on related algorithms  <cit> , the worst case time complexities of mcq and mwcq are left open. therefore, we cannot discuss the time complexity of our proposed method, whereas it is straight-forward to see that the graph obtained by reduction from input trees has o| × |v|) nodes and o| <dig> × |v|2) edges.

RESULTS
we implemented the above mentioned maximum clique-based method  and maximum vertex weighted clique-based method  using c language. we performed computational experiments using a pc with intel core  <dig> duo  <dig>  ghz cpu and  <dig>  gb ram running under the cygwin/widnows xp operating system. as tree structures, we used glycan structures obtained from kegg/glycan database  <cit> .

results on efficiency
first we examined the computational efficiency of mwcq-based method, where we used the standard weighting scheme  =  <dig> and f =  <dig> for ℓ ≠ ℓ) corresponding to the unit cost edit distance. we randomly selected  <dig> pairs of glycan structures with a specified range of the total number of nodes  and measured the average cpu time  per pair. unbalanced cases in which the size of one structure was not larger than 1/ <dig> of the other structure were excluded. for each of the ranges in  <dig> ~  <dig>  we took the average over  <dig> pairs because there did not exist an enough number of pairs, where we could use  <dig> pairs among  <dig> pairs for the range of  <dig> ~  <dig> because there were two very bad cases for which the program could not output a solution within  <dig> minutes. for the ranges of  <dig> ~  <dig> and  <dig> ~  <dig>  we could use only  <dig> and  <dig> pairs, respectively. the result is shown in table  <dig>  from this table, it is seen that the proposed method works efficiently for moderate size trees , which means that the proposed method works efficiently for most glycan structures.

next we examined the computational efficiency of mcq-based method, which corresponds to the case of computation of the largest common subtree  =  <dig> and f =  <dig> for ℓ ≠ ℓ). as in the case of mwcq-based method, we randomly selected  <dig> pairs of glycan structures with a specified range of the total number of nodes and measured the average cpu time, where we used a fewer number of pairs when the number of nodes was no less than  <dig> as in the case of mwcq-based method. the result is shown in table  <dig>  from this table, it is seen that mcq-based method works very fast for most glycan structures. it is to be noted that cpu time does not necessarily increase as the size of input trees because the size of transformed clique instances strongly depends on the distribution of identical labels in input trees and thus does not so much depend on the size of input trees.


though mcq-based method is very fast, it makes extensive use of identity of node labels  becomes very small). on the other hand, mwcq-based method takes all node pairs between t <dig> and t <dig> into account and thus is not very fast. compared with an existing method  <cit> , mcq-based method is much faster but solves an easier problem  though cpu time is not shown in  <cit> ). on the other hand, it seems from table  <dig> that mwcq-based method has a similar performance with that in  <cit>  though  <cit>  solves non-labeled cases whereas we solved labeled cases. however, mwcq-based method has a merit: it can handle general editing cost functions whereas the method in  <cit>  can only handle the unit editing cost.

results on similar structure search
though the ordered and unordered tree edit distances are widely-accepted similarity measures on trees, we performed computational experiments in order to examine how it is useful for similarity search for glycans. we used a dataset compiled by yamanishi et al.  <cit>  on four properties on glycans, where we used  <dig> structures among  <dig> glycan structures listed in their list since we could not obtain one structure. though this dataset is prepared for evaluating machine learning methods, we applied it to evaluation of search methods. we compared the following four similarity search methods: global glycan alignment and local glycan alignment implemented in the kcam glycan search tool   <cit> , unit cost ordered tree edit distance, and unit cost unordered tree edit distance . glycan alignment scores were introduced for efficient comparison of glycan structures. though it is based on tree edit distance, the deletion  operation is simplified so that only one child and its descendants can survive if a node is deleted. therefore, there is a possibility that similar structures are missed by glycan alignment.

we evaluated the performance of similarity search using the auc score  <cit> . in order to apply the auc score, we need positive and negative samples. for that purpose, each pair of sequences in the dataset is regarded as a positive sample if the distance  is smaller  than a given threshold. otherwise, it is regarded as a negative sample. each positive sample is classified into either true positive or false positive according to whether sequences in the pair belong to the same class. similarly, each negative sample is classified into either false negative or true negative according to whether sequences in the pair belong to the same class. then, true positive rate and false positive rate are defined as the ratio of the number of true positive samples to the number of true positive and false negative samples and the ratio of the number of false positive samples to the number of false positive and true negative samples, respectively. the roc  curve is a graphical plot of the true positive rate vs. the false positive rate obtained by varying the threshold. the auc  score is defined as the area under the roc curve: auc scores of  <dig> and  <dig>  correspond to complete classification and random classification, respectively. the resulting roc curves are shown in figure  <dig> and figure  <dig>  and the resulting auc scores are shown in table  <dig>  it should be mentioned that we could not obtain meaningful auc scores for plasma and serum datasets . since it seems that these data sets are not appropriate for simple search, table  <dig> lists auc scores only for leukemia and erythrocyte datasets. it is seen from the table that the tree edit distance measures are better than the alignment scores for leukemia data but are worse for erythrocyte data. it is also seen that the auc scores for ordered tree edit distance are very close to the auc scores for unordered tree edit distance. though we cannot conclude that the unordered tree edit distance is better than other similarity measures for glycan search, it is comparative to other measures.
 roc curve for erythrocyte dataset

in order to see more differences between ordered tree edit distance and unordered tree edit distance, we computed ordered tree edit distances when the order of children of every node was reversed in one of the input trees. the results are also shown in table  <dig> , figure  <dig>  and figure  <dig> . for the result on the erythrocyte dataset, it is seen that the difference between ordered tree edit distance and unordered tree edit distance becomes larger  though it is still small. though we do not clearly understand the reason of this small difference, it might be because a single path in each glycan structure is relevant for the features studied in this paper.

the total cpu time for computing the distances  between all pairs of glycans in the dataset is also shown for each method in table  <dig>  though the proposed clique-based method took more cpu time than other methods, the differences were not very large. it should be mentioned that we used a clique-based method for computing ordered tree edit distance for simplicity of implementation and thus cpu time on ordered tree edit distance would be much larger here than that by an efficient dynamic programming-based algorithm  <cit> , but that is not relevant because cpu time for unordered tree edit distance is fast enough in table  <dig> 

here, we briefly explain the methodological differences among measures. figure  <dig> illustrates the difference between unordered tree edit distance and ordered tree edit distance. as shown in figure  <dig>  suppose that there exist two trees t <dig> and t <dig> with roots r <dig> and r <dig>  suppose further that r <dig> has two subtrees a and b, and r <dig> has two subtrees b′ and a′ in these orders, where a and a′  are similar to each other, and a is larger than b. if two trees are regarded as ordered, ordered tree edit mapping takes only matching between a and a′ into account. otherwise, unordered tree mapping takes matchings between a and a′, and between b and b′ into account. figure  <dig> illustrates the difference of the deletion operation between tree edit and glycan alignment. in tree edit, all children of the deleted node u become children of the parent v of u. however, in glycan alignment, only one child can be a child of v and the other children are deleted along with their descendants, where the surviving child is chosen so that the resulting score is maximized. it is seen from these figures that the tree edit distance for unordered trees provides the most flexible matching.

CONCLUSIONS
in this paper, we have proposed a clique-based method for computing the tree edit distance between rooted unordered trees. we implemented two versions: one using a maximum clique  algorithm  <cit>  and the other one using a maximum vertex weighted clique  algorithm  <cit> .

the former one is faster than an existing a* algorithm  <cit> . however, it uses a non-standard editing cost scheme and thus is not more useful than the a* algorithm. the efficiency of the latter one is similar to that of the a* algorithm. however, it has two merits: it can handle general cost distances whereas the a* algorithm can only handle the unit cost distance, improvements of maximum clique algorithms lead to improvements of the efficiency of edit distance computation.

we also compared the unordered edit distance with ordered edit distance, global and local glycan alignment scores for glycan similarity search. though the result did not show clear advantage of the unordered edit distance, it was comparative to these three measures. it is to be noted that the unit cost model was used for edit distance measures whereas score functions specialized for glycans were used for glycan alignments. therefore, if we use editing costs specialized for glycans, we may obtain better performances. such a development is left as future work.

finally we again note that the edit distances for both ordered and unordered trees are already established measures for calculating the similarity between trees  <cit> . therefore, application of the proposed method is not limited to glycan structures. it might be applied to analysis of various tree structure data if each tree consists of up to several tens of nodes.

authors' contributions
the basic idea of use of a reduction to maximum clique was born in discussions among df, tt, at and ta. et provided the codes of maximum clique algorithms along with valuable comments. df and ta implemented the method, and df, tt and ta performed computational experiments. ta drafted the manuscript. all authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

