BACKGROUND
the one-to-one mapping of a dna molecule to a sequence of letters suggests that sequence comparison is a prerequisite to virtually all comparative genomic analyses. due to this, sequence comparison has been used to identify regions of similarity which may be a byproduct of evolutionary, structural, or functional relationships between the sequences under study  <cit> . sequence comparison is also useful in fields outside of biology, for example, in pattern recognition  <cit>  or music analysis  <cit> . several techniques exist for sequence comparison; alignment techniques consist of either global alignment  <cit>  or local alignment  <cit>  techniques. alignment-free techniques also exist; they are based on measures referring to the composition of sequences in terms of their constituent patterns  <cit> . pairwise sequence alignment algorithms analyse a pair of sequences, commonly carried out using dynamic-programming techniques  <cit> ; whereas multiple sequence alignment  involves the simultaneous comparison of three or more sequences .

analysing multiple sequences simultaneously is fundamental in biological research and msa has been found to be a popular method for this task. one main application of msa is to find conserved patterns within protein sequences  <cit>  and also to infer homology between specific groups of sequences  <cit> . msa may also be used in phylogenetic tree reconstruction  <cit>  as well as in protein structure prediction  <cit> .

using a generalisation of the dynamic-programming technique for pairwise sequence alignments works efficiently for msa for only up to a few short sequences. specifically, msa with the sum-of-pairs score  criterion is known to be np-hard  <cit> ; and, therefore, heuristic techniques are commonly used , which may not always lead to optimal alignments. as a result, suboptimal alignments may lead to unreliable tree estimation during phylogenetic inference. to this end, several methods aimed to have shown that removing unreliable sites  of an alignment may lead to better results  <cit> .

several discussions of existing filtering methods provide evidence that the removal of blocks in alignments of sufficient length leads to better phylogenetic trees. these filtering methods take a variety of mathematical and heuristic approaches. most of the methods are fully automated and they remove entire columns of the alignment. a few of these programs, found in  <cit> , are based on site-wise summary statistics. several filtering programs, found in , are based on mathematical models. however, experimental results found in  <cit>  oppose these findings, suggesting that generally, not only do the current alignment filtering methods not lead to better trees, but there also exist many cases where filtering worsened the trees significantly.

circular molecular structures are present, in abundance, in all domains of life: bacteria, archaea, and eukaryotes; and in viruses. they can be composed of both amino and nucleic acids. exhaustive reviews can be found in  <cit>   and  <cit>  . the most common examples of such structures in eukaryotes are mitochondrial dna . mtdna is generally conserved from parent to offspring and replication of mtdna occurs frequently in animal cells  <cit> . this is key in phylogenetic analysis and the study of evolutionary relationships among species  <cit> . several other example applications exist including msa of viroid or viral genomes  <cit>  and msa of naturally-occurring circular proteins  <cit> .

a fundamental assumption of all widely-used msa techniques is that the left- and right-most positions of the input sequences are relevant to the alignment. however, the position where a sequence starts  or ends  can be totally arbitrary due to a number of reasons: arbitrariness in the linearisation  of a circular molecular structure; or inconsistencies introduced into sequence databases due to different linearisation standards. in these cases, existing msa programs, such as clustal
Ω  <cit> , muscle  <cit> , or t-coffee  <cit> , may produce an msa with a higher average pairwise distance than the expected one for closely-related sequences. a rather surprising such instance is the published human  and chimpanzee  mtdna sequences, which do not start in the same genetic region  <cit> . it may be more relevant to align mtdna based on gene order  <cit> , however, the tool we present in this paper may be used to align sequences of a broader type. hence, for a set of input sequences, a solution for these inconsistencies would be to identify a suitable rotation  for each sequence; the sequences output would in turn produce an msa with a lower average pairwise distance.

due to the abundance of circular molecular structures in nature as well as the potential presence of inconsistencies in sequence databases, it becomes evident that multiple circular sequence alignment  techniques for analysing such sequences are desirable. since mcsa is a generalisation of msa it is easily understood that mcsa with the sp-score criterion is also np-hard. to this end, a few programs exist which aim to improve mcsa for a set of input sequences. these programs can be used to first obtain the best-aligned rotations, and then realign these rotations by using conventional alignment programs, such as clustal
Ω, muscle, or t-coffee. note that unlike other filtering programs, these programs do not remove any information from the sequences or from their alignment: they merely refine the sequences by means of rotation.

the problem of finding the optimal  alignment of two circular sequences of length n and m≤n under the edit distance model can be solved in time o  <cit> . the same problem can trivially be solved in time o with substitution matrices and affine gap penalty scores  <cit> . to this end, alignment-free methods have been considered to speed-up the computation  <cit> . the more general problem of searching for a circular pattern in a text under the edit distance model has also been studied extensively  <cit> , and an average-case optimal algorithm is known  <cit> .

progressive multiple sequence alignments can be constructed by generalising the pairwise sequence alignment algorithms to profiles, similar to clustal
Ω  <cit> . this generalisation is implemented in cyclope  <cit> , a program for improving multiple circular sequence alignment. the cubic runtime of the pairwise alignment stage becomes a bottleneck in practical terms. other fast heuristic methods were also implemented in cyclope, but they are only based on some  sequences from the input dataset.

another approach to improve mcsa was implemented in csa  <cit> ; a program that is based on the generalised circular suffix tree construction  <cit> . the best-aligned rotations are found based on the largest chain of non-repeated blocks that belong to all sequences. unfortunately, csa is no longer maintained; it also has the restriction that there can be only up to  <dig> sequences in the input dataset, and that there must exist a block that occurs in every sequence only once.


bear  <cit>  is another program aimed to improve mcsa computation in terms of the inferred maximum-likelihood-based phylogenies. the authors presented two methods; the first extends an approximate circular string matching algorithm for conducting approximate circular dictionary matching. a matrix m is outputted from this computation. for a set of d input sequences s
 <dig> …,s
d− <dig>  m holds values e and r between circular sequences s
i and s
j, where m.e holds the edit distance between the two sequences and m.r holds the rotation of sequence s
i which will result in the best alignment of s
i with s
j. agglomerative hierarchical clustering is then used on all values m.e, to find sufficiently good rotations for each sequence cluster. the second method presented is suitable for more divergent sequences. an algorithm for fixed-length approximate string matching is applied to every pair of sequences to find most similar factors of fixed length. these factors can then determine suitable rotations for all input sequences via the same method of agglomerative hierarchical clustering.


our contributions. we design and implement mars, a new heuristic method for improving multiple circular sequence alignment using refined sequences. mars is based on a non-trivial coupling of a state-of-the-art pairwise circular sequence comparison algorithm  <cit>  with the classic progressive alignment paradigm  <cit> . experimental results presented here, using real and synthetic data, show that mars improves the alignments and outperforms state-of-the-art methods both in terms of accuracy and efficiency. specifically, to support our claims, we analyse these results with respect to standard genetic measures as well as with respect to the inferred maximum-likelihood-based phylogenies. for instance, we show here that the average pairwise distance in the msa of a dataset of widely-studied mtdna sequences is reduced by around 5% when mars is applied before msa is performed.

definitions and notation
we begin with a few definitions, following  <cit> , to allow further understanding. we think of a string  x of length
m as an array x where every x, 0≤i<m, is a letter drawn from some fixed alphabet
Σ of size |Σ|=o. string ε denotes the empty string which has length  <dig>  given string y, a string x is considered a factor of y if there exist two strings u and v, such that y=u
x
v. consider the strings x,y,u, and v, such that y=u
x
v. we call x a prefix of y if u=ε; we call x a suffix of y if v=ε. when x is a factor of y, we say that x
occurs in y. each occurrence of x can be denoted by a position in y. we say that x occurs at the starting position
i in y when y=x; alternatively we may refer to the ending position
i+m− <dig> of x in y.

a circular string of length m may be informally defined as a standard linear string where the first- and last-occurring letters are wrapped around and positioned next to each other. considering this definition, the same circular string can be seen as m different linear strings, which would all be considered equivalent. given a string x of length m, we denote by x
i=xx, 0<i<m, the ith rotation of x and x
0=x. by looking at the string x=x
0=baababac; this string has the following rotations: x
1=aababacb, x
2=ababacba, x
3=babacbaa, etc.

given a string x of length m and a string y of length n, the edit distance  <cit> , denoted by δ
e, is defined as the minimum total cost of operations required to transform string x into string y. in general, the allowed edit operations are as follows: 

insertion: insert a letter in y, not present in x; , b≠ε



deletion: delete a letter in y, present in x; , a≠ε



substitution: replace a letter in y with a letter in x; , a≠b,and a,b≠ε.




a q-gram is defined as any string of length q over alphabet Σ. the set of all such q-grams is denoted by Σ
q. the q-gram profile of a string x of length m is the vector g
q, where q> <dig>  and g
q denotes the total number of occurrences of q-gram v∈Σ
q in x.

given strings x of length m and y of length n≥m and an integer q> <dig>  the q-gram distance
d
q is defined as: 
  <dig> ∑v∈Σqgq−gq. 


for a given integer parameter β≥ <dig>  a generalisation of the q-gram distance can be defined by partitioning x and y in β
blocks as evenly as possible, and computing the q-gram distance between each pair of blocks, one from x and one from y. the rationale is to enforce locality in the resulting overall distance  <cit> . given strings x of length m and y of length n≥m and integers β≥ <dig> and q> <dig>  the β
-blockwise q-gram distance
d
β,q is defined as: 
  <dig> ∑j=0β−1dqxjmβ…mβ− <dig> yjnβ…nβ− <dig>  


we assume that the lengths m of x and n of y are both multiples of β, so that x and y are partitioned into β blocks, each of size mβ and nβ, respectively.

implementation
algorithm mars
we present mars; a heuristic algorithm for improving mcsa using refined sequences. for a set of d
input sequences s
 <dig> …,s
d− <dig>  the task is to output an array r of size d such that s
r, for all 0≤i<d, denotes the set of rotated sequences, which are then input into the preferred msa algorithm to obtain an improved alignment. mars is based on a three-stage heuristic approach: 
initially a d×d matrix m holding two values e and r per cell, is computed; where m.e holds the edit distance between sequences sim.r and s
j. intuitively, we try to compute the value r that minimises e, that is, the cyclic edit distance.

the neighbour-joining clustering method is carried out on the computed distances to produce a guide tree.

finally, progressive sequence alignment using refined sequences is carried out using the sequence ordering in the guide tree.




stage  <dig>  pairwise cyclic edit distance
in this stage, we make use of a heuristic method for computing the cyclic edit distance between two strings. this method is based on grossi et al’s alignment-free algorithm  <cit>  for circular sequence comparison, where the β-blockwise q-gram distance between two circular sequences x and y is computed. specifically, the algorithm finds the rotation r of x such that the β-blockwise q-gram distance between x
r and y is minimal.

the second step of this stage involves a refinement of the rotation for a pair of sequences, to obtain a more accurate value for r. an input parameter 0<p≤β <dig> is used to create refined sequences of length 3×p×mβ using x
r and y, where m is the length of x
r. the first refined sequence is x0rx1rx2r: x0r is a prefix  of string x
r; x1r is a string of the same length as the prefix consisting only of letter $∉Σ; and x2r is a suffix  of string x
r. the same is done for string y, resulting in a refined sequence of the same form y
0
y
1
y
 <dig>  note that large values for p would result in long sequences, improving the refinement of the rotation, but slowing down the computation. a score is calculated for all rotations of these two smaller sequences using needleman-wunsch  <cit>  or gotoh’s algorithm  <cit> , making use of substitution matrices for nucleotides or amino acids accordingly. the rotation with the maximum score is identified as the new best-aligned rotation and r is updated if required.

the final step of this stage involves computing the edit distance between the new pair of refined sequences. for unit costs, this is done using myers bit-vector algorithm  <cit>  in time omwn, where w is the word size of the machine. for non-unit costs this is computed using the standard dynamic programming solution for edit distance  <cit>  computation in time o. hence, for a dataset with d sequences, a d×d matrix m is populated with the edit distance e and rotation r for each pair of sequences.

remark for stage 1
the simple cost scheme used in stage  <dig> for the pairwise cyclic edit distance is sufficient for computing fast approximate rotations. a more complex  scoring scheme is used in stage  <dig> for refining these initial rotations. a yet more complex scoring scheme, required for the final msa of the sequences output by mars, can be carried out later on by using any msa program, and is therefore beyond the scope of this article.

stage  <dig>  guide tree
the guide tree is constructed using saitou and nei’s neighbour-joining algorithm  <cit> , where a binary tree is produced using the edit distance data from matrix m.

stage  <dig>  progressive alignment
the guide tree is used to determine the ordering of the alignment of the sequences. three types of alignments may occur: 
case 1: a sequence with another sequence;

case 2: a sequence with a profile;

case 3: a profile with another profile;




where a profile is an alignment viewed as a sequence by regarding each column as a letter  <cit> . we also need to extend the alphabet to Σ
′=Σ∪{−} to represent insertions or deletions of letters . for the rest of this stage, we describe our method using the needleman-wunsch algorithm for simplicity although gotoh’s algorithm is also applicable.

for case  <dig>  where only two sequences are to be aligned, note that rotation r has been previously computed and stored in matrix m during stage  <dig> of the algorithm. these two sequences are aligned using needleman-wunsch algorithm and stored as a new profile made up of the alignment of two individual sequences which now include gaps. in this case, for two sequences s
i and s
j, we set r:=m.r and r:= <dig>  as the second sequence is left unrotated.

the remaining two cases of alignments are a generalisation of the pairwise circular sequence alignment to profiles. in the alignment of a pair of sequences, matrix m provides a reference as to which rotation r is required. in the case of a sequence and a profile , this may also indirectly be used as we explain below.

as previously seen, when two sequences s
i and s
j are aligned, one sequence s
j remains unrotated. this pair then becomes a profile which we will call profile a. given the same occurs for another pair of sequences, profile b is created also with one unrotated sequence, sj′. when profile a is aligned with profile b, another profile, profile c is created. in this case, only the sequences in profile b are rotated to be aligned with profile a. this results in s
j to be left unrotated in profile c where s
j previously occurred in profile a. given a sequence s
k to be aligned with profile c, this sequence has a current rotation of  <dig> as has not yet been aligned with another sequence or a profile. we can identify which rotation is needed to rotate sequence s
k to be aligned with profile c, by using the single rotation m.r.

the same condition applies when aligning two profiles . all sequences in profile b will need to be rotated to be aligned with profile a. however, once a single sequence s
j in profile a as well as a single sequence sj′ in profile b with r= <dig> have been identified, in this case sj′ has already been aligned with other sequences. this means gaps may have been inserted and m[j
′,j].r will no longer be an accurate rotation. by counting the total number g of individual gaps inserted in sj′, between positions  <dig> and the single rotation m[j
′,j].r of sj′, the new suitable rotation for profile b would be m[j
′,j].r+g.

example
consider the following sequences:


s
0: tagtagct



s
1: aagtaagcta



s
2: aagcctttagt



s
3: aagtaagct



s
4: ttaatatagcc


let profile a be:


s
0: a
-
g
-
c
-
-
tta
-
gt



s
1: aag
-
c
-
-
taaagt



s
2: aagcc
-
ttta
-
gt


let profile b be:


s
3: a
-
-
-
agtaag
-
c
-
-
t



s
4: a
-
ata
-
ta
-
gcc
-
tt



profile c:


s
0: a
-
g
-
c
-
-
tt
-
a
-
-
gt



s
1: aag
-
c
-
-
ta
-
a
-
agt



s
2: aagcc
-
ttt
-
a
-
-
gt



s
3: aag
-
c
-
-
ta
-
-
-
agt



s
4: a
-
gcc
-
tta
-
ata
-
t


by looking at the original set of sequences, it is clear s
 <dig> in profile a and s
 <dig> in profile b have a rotation of  <dig>  the other sequences have been rotated and aligned with the remaining sequences in their profile. it is also clear from the original sequences that m <cit> .r= <dig>  when aligning profile b with profile a, the rotation of r= <dig> is no longer accurate due to gaps inserted in s
 <dig>  as g= <dig> gaps have been inserted between positions  <dig> and r of sequence s
 <dig>  the final accurate rotation for profile b is m.r+g=4+3= <dig> . □

in the instance when a sequence is to be aligned with a profile or two profiles are to be aligned, a generalisation of the needleman-wunsch algorithm is used, similar to that by  <cit> , to compute the alignment score. profile a will always hold the largest number of sequences, allowing profile b with fewer sequences to be rotated.

a frequency matrix f is stored, which holds the frequency of the occurrence of each letter in each column in profile a. equation  <dig> shows the scoring scheme used for each alignment, where s holds the alignment score for column i in profile a and column j in profile b. ga is the cost of inserting a gap into profile a and gb likewise for profile b. matrix s is initialised in the same way as in the needleman-wunsch algorithm; and sim denotes the similarity score between letter c∈Σ
′ and the letter at column j of row k  in profile b. 
  <dig> s=maxs+pscores+gbs+gapscore=∑c∈Σ′sim×f0≤k<|b| 


this scoring scheme can be applied naïvely for profile a and every rotation of profile b to find the maximum score, equating to the best-aligned rotation. however, as information about rotations has already been computed in stage  <dig>  we may use only some part of profile b to further refine these rotations. this refinement is required due to the heuristic computation of all pairwise cyclic edit distances in stage  <dig> of the algorithm. to this end, we generalise the second step of stage  <dig> to profiles. this step of stage  <dig> involves a refinement of the rotation for a pair of sequences via considering only the two ends of each sequence, to create two refined sequences. similarly here we generalise this idea to refine the rotation for a pair of profiles via considering only the two ends of each profile, to recreate the profiles into profiles with refined sequences. the rotation r with the maximum score according to the aforementioned scoring scheme is identified as the best-aligned rotation and array r is updated by adding r to the current rotation in r, for all s
i in profile b.

RESULTS

mars was implemented in the c++ programming language as a program to compute the rotations  required to best align a set of input sequences. given a set of d sequences in multifasta format, the length ℓ of the β blocks to be used, the length q of the q-grams, and a real number p for the refinement, mars computes an array r according to the algorithm described in the “implementation” section. there is also a number of optional input parameters related to gotoh’s algorithm, such as the gap opening and extension penalty scores for pairwise and multiple sequence alignment. a different substitution matrix can be used for scoring nucleotide or amino acid matches and mismatches. the output of mars is another multifasta file consisting of d refined sequences, produced using the rotations computed in r. the output of mars can then be used as input to the preferred msa program, such as clustal
Ω, muscle, or t-coffee.

the implementation is distributed under the gnu general public license , and it is available freely at http://github.com/lorrainea/mars. experimental results were also produced for cyclope and bear to compare their performance against mars. the experiments were conducted on a computer using an intel core i5- <dig> cpu at  <dig>  ghz under gnu/linux. all programs were compiled with g++ version  <dig> . <dig> at optimisation level  <dig> .

synthetic data
dna datasets were simulated using indelible  <cit> , which produces sequences in a multifasta file. a rate for insertions, deletions, and substitutions are defined by the user to vary similarity between the sequences. all datasets used in the experiments are denoted in the form a.b.c, where a represents the number of sequences in the dataset; b the average length of the sequences; and c the percentage of dissimilarity between the sequences. substitution rates of  <dig>   <dig>  and 35% were used to produce the datasets under the jukes and cantor   <cit>  substitution model. the insertion and deletion rates were set to  <dig> and 6% respectively, relative to a substitution rate of  <dig> 

nine datasets were simulated to evaluate the accuracy of the proposed method. each dataset consists of a file with a varying number of sequences, all with an average length of  <dig> base pairs . the files in datasets 1− <dig> each contain  <dig> sequences. those in datasets 4− <dig> each contain  <dig> sequences; and datasets 7− <dig> contain  <dig> sequences. all input datasets referred to in this section are publicly maintained at the mars website.

for all datasets, we made use of the following values for the mandatory parameters of mars: q= <dig>  ℓ= <dig>  and p= <dig> . table  <dig> shows the results for the synthetic datasets made up of three files which each contained  <dig> sequences . the first column shows results for the original datasets aligned using clustal
Ω. all sequences in these datasets were then randomly rotated, denoted in table  <dig> by a.b.c.rot. the second column shows the results produced when mars was first used to refine the sequences in the a.b.c.rot dataset, to find the best-aligned rotations; and then aligned them again using clustal
Ω. the third and fourth columns show likewise using muscle to align the sequences. tables  <dig> and  <dig> show the results produced for datasets 4– <dig> and 7– <dig>  respectively.
clustal
Ω
mars+ clustal
Ω
muscle
mars+ muscle

clustal
Ω
mars+ clustal
Ω
muscle
mars+ muscle

clustal
Ω
mars+ clustal
Ω
muscle
mars+ muscle



to evaluate the accuracy of mars seven standard genetic measures were used: the length of the msa; the number of polymorphic sites ; the number of transitions and transversions; substitutions, insertions, and deletions were also counted; as well as the average distance between each pair of sequences in the dataset .

remark for accuracy
the use of standard genetic measures to test the accuracy of mars with synthetic data is sufficient. this is due to the fact that the main purpose of this test is not to check whether we obtain an msa that is biologically relevant. the ultimate task here was to show that when mars is applied on the a.b.c.rot datasets before msa is performed we obtain msas whose standard genetic measures are similar or even identical to the msas of the a.b.c datasets  when using the same msa program.

the results show indeed that mars performs extremely well for all datasets. this can be seen through the high similarity between the measurements for the original and the refined datasets. notice that, in particular with muscle, we obtain an identical or less average pairwise distance in  <dig> out of  <dig> cases between the original and the refined datasets produced by using mars, despite the fact that we had first randomly rotated all sequences .


raxml  <cit> , a maximum-likelihood-based program for phylogenetic analyses, was used to identify the similarity between the phylogenetic trees inferred using the original and refined datasets. a comparison with respect to the phylogenetic trees obtained using muscle and raxml was made between the alignment of the original datasets and that of the datasets produced by refining the a.b.c.rot datasets using mars, bear, and cyclope. the robinson–foulds  metric was used to measure the distance between each pair of trees. the same parameter values were used for mars: q= <dig>  ℓ= <dig>  and p= <dig> . the fixed-length approximate string matching method with parameter values w= <dig> and k= <dig> under the edit distance model, were used for bear, where w is the factor length used and k is the maximum distance allowed. parameter v was used for cyclope to compute, similar to mars, a tree-guided alignment.
table  <dig> relative rf distance between trees obtained with original and refined datasets

bear
cyclope
mars
 <dig> 
 <dig> 
non-zero values shown in bold




real data
in this section we present the results for three datasets used to evaluate the effectiveness of mars with real data. the first dataset  includes  <dig> mtdna sequences of mammals, the second dataset  includes  <dig> mtdna sequences of primates, and the last one  includes  <dig> viroid rna sequences. all input datasets referred to in this section are publicly maintained at the mars website. the average sequence length for mammals is  <dig>  bp, for primates is  <dig>  bp, and for viroids is  <dig> bp.
table  <dig> standard genetic measures for real data

clustal
Ω
mars+ clustal
Ω
muscle
mars+ muscle



since time-accuracy is a standard trade-off of heuristic methods, in order to evaluate the time performance of the programs, we compared the resulting msa along with the time taken to produce it using bear, cyclope, and mars with muscle. parameter values h= <dig> and k= <dig> were used to measure accuracy for the mammals and primates datasets for bear; w= <dig> and k= <dig> were used for the viroids dataset. parameter v was used for cyclope to compute a tree-guided alignment. the following parameter values were used to test the mammals and primates datasets for mars: q= <dig>  ℓ= <dig>  and p= <dig> ; q= <dig>  ℓ= <dig>  and p= <dig>  were used to test the viroids dataset.
table  <dig> elapsed-time comparison using real data

bear
cyclope
mars



a common reliability measure of msas is the computation of the transitive consistency score   <cit> . the tcs has been shown to outperform existing programs used to identify structurally correct portions of an msa, as well as programs which aim to improve phylogenetic tree reconstruction  <cit> . bear, cyclope, and mars were used to identify the best rotations for the sequences in the viroids dataset; the output of each, as well as the unrotated dataset was then aligned using muscle. the following tcs was computed for the viroids dataset when unrotated:  <dig>  as well as when rotated with bear, cyclope, and mars, respectively:  <dig>   <dig>  and  <dig>  the same was done using clustal
Ω to align the output sequences, with a tcs of  <dig> for the unrotated dataset. the following scores were computed for the rotated dataset in the respective order:  <dig>   <dig>  and  <dig>  these results show that when using two different msa programs, mars obtains a higher tcs than the unrotated dataset in both cases, outperforming bear and cyclope, which do not always obtain a higher tcs compared to that of the unrotated dataset.

CONCLUSIONS
a fundamental assumption of all widely-used msa techniques is that the left- and right-most positions of the input sequences are relevant to the alignment. this is not always the case in the process of msa of mtdna, viroid, viral or other genomes, which have a circular molecular structure.

we presented mars, a new heuristic method for improving multiple circular sequence alignment using refined sequences. experimental results, using real and synthetic data, show that mars improves the alignments, with respect to standard genetic measures and the inferred maximum-likelihood-based phylogenies, and outperforms state-of-the-art methods both in terms of accuracy and efficiency. we anticipate that further development of mars would be desirable upon dissemination. our immediate target is to employ low-level code optimisation and thread-level parallelism to further enhance the performance of mars. a web-service for improving multiple circular sequence alignment based on mars is already under way.

availability and requirements

project name:
mars
project home page:
https://github.com/lorrainea/mars
operating system: gnu/linux programming language:
c++
other requirements: n/a license: gnu gpl

abbreviations
avpdaverage pairwise distance

bpbase pairs

marsmultiple sequence alignment using refined sequences

mcsamultiple circular sequence alignment

msamultiple sequence alignment

mtdnamitochondrial dna

pm sitespolymorphic sites

rfrobinson-foulds

sp-scoresum-of-pairs score

tcstransitive consistency score

we would like to acknowledge king’s college london for funding open access for this article.

funding
laka is supported by an epsrc grant .

availability of data and materials
the datasets generated during and/or analysed during the current study are available in the github repository, https://github.com/lorrainea/mars.

authors’ contributions
spp conceived the study. laka and spp designed the solution. laka implemented the solution and conducted the experiments. laka and spp wrote the manuscript. the final version of the manuscript is approved by all authors.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
