BACKGROUND
often studied in isolation, interest is now increasingly focused on how non-genetic factors, such as social behaviors, influence population genetic diversity. the pioneering social anthropologist claude lévi-strauss  <cit>  exhaustively described global variation in human marriage systems, and population geneticists are now beginning to explore how marriage rules affect patterns of human genetic diversity  <cit> . because societies typically dictate different rules for men and women, genetic loci on the sex-linked x and y chromosomes, as well as mitochondrial dna , often respond in different ways. the impact of some social processes has been explored analytically  <cit> , but the inherent complexity of genetic and social systems limits mathematical results to relatively simple questions.

limited progress in this field can in part be attributed to a paucity of appropriate simulation tools. coalescent theory, the workhorse of modern population genetics, makes the strict assumption of random mating . because marriage rules automatically impose non-random mate choices, coalescent approaches  cannot be employed. some forward-in-time simulators do possess the required flexibility to accommodate complex social rules – simupop being an excellent example  <cit> . however, this application is written in the interpreted language python, and the price of its flexibility is markedly reduced speed . other software, such as fregene  <cit> , are fast but cannot simulate sex-specific genetic loci or mating alliances. modern statistical inference procedures, such as approximate bayesian computation , are extremely resource intensive, and demand simulation tools that can perform at least an order of magnitude faster than most current applications. smartpop, written in parallelized c++ code and heavily optimized for speed and reduced memory usage, is designed to fit this niche.

implementation
smartpop – simulating mating alliances as a reproductive tactic for populations – implements a forward-in-time simulation framework. each individual carries a complete set of dna, comprising sequences of unlinked loci on the autosomes, x chromosome, y chromosome and mtdna, which are inherited in the appropriate biological manner. populations are defined by the user and evolve forward-in-time. the number of loci and their lengths can be chosen by the user.

each simulation can be considered as containing three features: 

•a demographic model, such as changes in population size.

•a set of mutation rates for different loci. by default, smartpop implements kimura’s two-parameter mutation model.

•a set of marriage rules – currently monogamy, polygamy, polygyny, polyandry and close-relative inbreeding avoidance, although a wider range of models are under active development.

the challenge of all forward-in-time simulators is how to define the initial state of the simulation  <cit> , as neither extreme condition – all individuals identical or all individuals different – is biologically meaningful. one possibility is to allow the deme to evolve for a sufficiently long time , such that starting conditions no longer affect the progression of the simulation. however, this approach is computationally wasteful and assumes that population diversity starts from an equilibrium. as an alternative, we allow an optional buffering phase before each simulation, which employs an elevated mutation rate to reach levels of within-population diversity chosen by the user. this ‘accelerated’ evolutionary process mimics natural patterns of genetic variation  generated under standard runs, but with a much reduced runtime . from this point, the population evolves for a user-defined number of generations under a set of demographic constraints and marriage rules. to simulate complex social and demographic scenarios, the user can save, stop and restart the simulations with different parameters .

smartpop reports a battery of summary statistics and/or full dna sequences both at the end of the simulation, and if requested, at set time intervals during the run. summary statistics include the number of segregating sites s, watterson’s theta θ
w
, the mean pairwise distance and its related diversity index θ
π
, the number of haplotypes h, allelic heterozygosity h
a
 and nei’s mean heterozygosity per site h
n
. summary statistics  can be returned for the entire deme, or for a user-defined sample .

a key feature of smartpop, compared with other forward-in-time simulators, is its speed. simulating dna sequences for every individual within a population requires substantial computational resources, and runtime often increases linearly with the length of the locus. benchmarking against other forward-in-time software shows that smartpop can simulate datasets of a few thousand nucleotides within seconds, whereas alternative simulators may take minutes to hours . smartpop gains its speed from i) a code base written in c++, ii) use of the boost library for random computation and optimized array structures, iii) a dna representation that packs  <dig> nucleotides into every 64-bit integer, iv) manipulation of dna sequences by optimized bit operations, and v) code parallelized under the message passing interface  framework. for most scenarios representative of real human communities, the resulting runtime is less than one second per simulation – often more than an order of magnitude faster than comparable forward-in-time simulators.

validation formed an integral part of code development. detailed discussion of the validation process, including comparisons with coalescent expectations, summary statistic matching and metamorphic testing, is presented in additional file  <dig> 

smartpop is a dynamic, open source project that aspires to provide an extendable statistical tool base for modeling the effects of social behavior on population genetic diversity. it is released with a supporting website containing exhaustive documentation about the source code and model implementation . the code is under active development to address a range of ongoing anthropological and ecological questions. for instance, population structure and inter-deme migration are currently being implemented to explore mating systems that depend on spousal exchange between communities. additional features are planned for subsequent implementation.

methods
to illustrate the range of models that smartpop can simulate, we present four relatively simple case studies .

first, we model genetic diversity on the paternally-inherited y chromosome through time in two small communities  – the first monogamous , the second polygynous . simulations  modeled  <dig> mb of the y chromosome with a mutation rate of 3×10− <dig> mutations/site/generation in constant sized populations of  <dig> individuals. leveraging the buffering phase, we mimic the founding of these two populations from a larger source group with much higher genetic diversity . figure 1a shows the mean  and 95% confidence interval  of the number of y chromosome haplotypes observed through time.

second, we model a shift in mating systems. simulations  modeled  <dig> mb of the y chromosome with a mutation rate of 3×10− <dig> mutations/site/generation in constant sized populations of  <dig> individuals under a switch from monogamy  to polygyny . figure 1b shows the mean value of watterson’s theta  for the y chromosome through time.

third, we model genetic diversity in a population experiencing demographic change. simulations  modeled  <dig> mb of the x chromosome with a mutation rate of 3×10− <dig> mutations/site/generation. the population size is initially constant  for  <dig> generations and reaches an equilibrium state. the population then grows by two individuals per generation for  <dig> years, after which it evolves for  <dig> generations with a larger constant size of  <dig> individuals . figure 1c shows the mean pairwise diversity  of the x chromosome through time.

finally, we model the impact of sibling mating avoidance in small populations. simulations  modeled  <dig> fully unlinked autosomal loci, each of  <dig> nucleotides, with a mutation rate of 3×10− <dig> mutations/site/generation in constant sized populations of  <dig> individuals. leveraging the buffering phase, we mimic the founding of these two populations from a larger source group with higher genetic diversity . figure 1d shows the mean value of watterson’s theta  through time in two polygamous populations that allow  or prohibit  sibling matings.

RESULTS
usage
smartpop runs from the command line with user-defined parameter flags. all parameters, except population size, have default values. if desired, parameters can be read from a command file. given the complexity of the models that smartpop is able to model, the interface is relatively simple and should rapidly become familiar to users of coalescent simulators such as ms  <cit> . full documentation and support for using smartpop is available on the project website .

to simulate  <dig> instances of a  <dig> kb mtdna sequence in a population of  <dig> monogamous individuals , for  <dig> generations, with a mutation rate of 2×10− <dig> mutations/site/generation, with θ
π
  reaching  <dig> in the buffering phase, the following command line would be used:  

in the following example, an equivalent set of simulations parallelized under mpi would be distributed across four processors:  

speed comparison
smartpop has been highly optimized for speed. simulation runtimes for the serial version of smartpop were benchmarked against comparable forward-in-time simulators. . table  <dig> reports runtimes with regard to three main parameters: population size, length of the dna locus, and number of generations. in all cases, the runtime is reported for  <dig> simulations of an autosomal locus with a mutation rate of 10− <dig> mutations/site/generation in a constant sized population. the programs were all executed on a linux system running ubuntu v.  <dig>  with a  <dig>  ghz intel xeon cpu x <dig> processor. simulations were not memory or i/o constrained. runtimes for smartpop varied from  <dig> to 153-fold  faster than other software applications . the parallel version of smartpop achieves even higher speedup than presented in this benchmarking exercise. because the message passing interface  implementation is embarrassingly parallel, runtimes decrease approximately linearly with the number of available cores.

worked examples
example 1b explores the effect of a switch in mating systems from monogamy to polygyny. genetic diversity first reaches an equilibrium under monogamy. after switching to polygyny at  <dig> generations, genetic diversity decreases to a new equilibrium state of lower diversity. such shifts between mating systems have also been documented in human communities. a particularly well-known example are the mormons who practiced polygyny during the early history of the western us  <cit> .

although these examples are relatively simple for didactic purposes, smartpop can be used to explore far more complex social rules. we emphasize that this software is not specifically designed for humans, and as shown above, can be used to model a much wider range of biological systems in which social behaviors are thought to impact on patterns of genetic diversity.

CONCLUSIONS
developed to tackle the issue of computational speed when modeling interactions between genetic diversity and social behavior, smartpop simulates complex social and demographic scenarios on a large range of genetic markers .

the examples presented here illustrate the capacity of smartpop to quantify the impact of social constructs, like mating systems, on population genetic diversity. they also highlight the importance of modeling the dynamics of population genetic diversity through time, emphasizing non-equilibrium outcomes of rapid shifts between social and demographic states over short timescales.

smartpop is well suited for studying human social systems, but is equally applicable to other species that exhibit complex social rules  <cit> . smartpop can handle most haploid, diploid or haplo-diploid systems, thus enabling investigation of a wide range of socio-ecological questions in a wide range of social species.

availability and requirements
project name: smartpop project home page: http://smartpop.sourceforge.netoperating system: linux, windows, os x programming language: c++ other requirements:  <dig> bit machine; c++ compiler; boost v.  <dig>  or higherlicense: gnu gpl v.  <dig>  any restrictions to use by non academics: none

competing interests
the authors declare that they have no competing interests.

authors’ contributions
egg designed and developed smartpop, and drafted the manuscript. mpc contributed to software design and analyses, and drafted the manuscript. both authors read and approved the final manuscript.

supplementary material
additional file 1
implementation and validation. an extended discussion of implementation choices and a complete description of the software validation process.

click here for file

 acknowledgements
computational resources were provided by massey university and the new zealand escience infrastructure . we thank martin hazelton , stephen lansing , michael charleston  and tim white  for helpful comments.

funding
egg was funded by a doctoral scholarship from the institute of fundamental sciences, massey university. the royal society of new zealand provided research support via a rutherford fellowship  and marsden grant  to mpc.
