BACKGROUND
the distance between two genomes is often computed using only the common content, which occurs in both genomes. such distance takes into consideration only organizational operations, which change the organization of the genome, that is, the positions and orientations of dna segments, number and types of chromosomes. inversions, translocations, fusions and fissions are some of these operations  <cit> . all these rearrangements can be generically represented as double-cut-and-join  operations  <cit> . the dcj model has simple linear algorithms to compute the distance and to find an optimal sorting sequence  <cit> . however, while sorting a genome into another by dcj, circular chromosomes can appear in the intermediate species  <cit> . in the general model many circular chromosomes can coexist in some intermediate species. due to this fact, when the compared genomes are linear, it is desirable to consider the so-called restricted model, in which we proceed the reincorporation of a circular chromosome immediately after its creation  <cit> . these two consecutive dcj operations, which create and reincorporate a circular chromosome, mimic a transposition or a block-interchange. in other words, in the restricted model most of the classical organizational operations  cost one dcj, while transpositions and block-interchanges cost two dcjs.

when comparing genomes with the same content and without duplicated dna segments, it is already known that the genomic distance for the restricted dcj model is the same as the distance for the general model and can be computed in linear time  <cit> . in contrast, while the genomes can be sorted also in linear time in the general model  <cit> , the best sorting algorithm in the restricted model up to now takes o  <cit> . figure  <dig> shows an example of a general and a restricted sorting sequence.

if the genomes have unequal contents, in addition to dcj operations it is necessary to consider insertions and deletions of dna segments. insertions and deletions are jointly called indels. in this context, linear algorithms were proposed to compute the distance and to find a sorting scenario in a general, unrestricted model that handles genomes without duplicated dna segments, considering dcj and indel operations  <cit> . during the evolution of many organisms, indel operations are said to occur more often than organizational operations and, consequently, should be assigned to a lower cost. examples are bacteria that are obligate intracellular parasites, such as rickettsia  <cit> . the genomes of such intracellular parasites are observed to have a reductive evolution, that is, the process by which genomes shrink and undergo extreme levels of gene degradation and loss.

the general dcj-indel model has the flexibility of assigning different positive costs to dcj and indel operations  <cit> . but, again, many circular chromosomes may coexist in intermediate stages of the sorting process. thus, while sorting linear genomes, it would be more plausible to consider a restricted dcj-indel model, in which a circular chromosome must be reincorporated immediately after its creation. figure  <dig> shows an example of a general and a restricted sorting sequence with dcjs and indels. in this case, no algorithm was provided up to now and even the question whether the distance is the same for both the general and the restricted dcj-indel models remains open. here we address this issue and give a sorting algorithm and a tight upper bound for the restricted dcj-indel distance, also allowing the assignment of distinct costs to indel and dcj operations and with the restriction that the indel cost is upper bounded by the dcj cost.

this paper is organized as follows. in the remainder of this section we recall some key concepts of the dcj-indel model with distinct operation costs  <cit> , which is based on the dcj-model  <cit> . we then develop a restricted dcj-indel sorting algorithm, that gives an upper bound for the restricted dcj-indel distance. finally we conclude our work with some final remarks.

the dcj model
a linear genome is composed of linear chromosomes and can be represented by a set of strings as follows. for each chromosome  c of each genome, we build a string obtained by the concatenation of all markers in  c. each marker g is a dna fragment and is represented by the symbol g, if it is read in direct orientation, or by the symbol  ḡ, if it is read in reverse orientation. each one of the two extremities of a linear chromosome is called a telomere, represented by the symbol ○.

given two linear genomes a and b, possibly with unequal content, let  g,  a and  b be three disjoint sets, such that the set  g is the set of markers which occur in a and in b, the set  a is the set of markers which occur only in a and the set  b is the set of markers which occur only in b. the markers in  a and in  b are also called unique markers. as an example, consider the genomes a={∘bsuc¯avd¯e∘} and b={∘awbx¯c∘,∘ydze∘}. here we have g={a,b,c,d,e}, a={s,u,v} and b={w,x,y,z}.

given two genomes a and b, we denote the two extremities of each g∈g by gt  and gh . a  g-adjacency or simply adjacency  <cit>  in genome a  is a string v=γ1ℓγ2≡γ2ℓ¯γ <dig>  such that each γi is a telomere or an extremity of a marker from  g and ℓ is a substring composed of the markers which are between γ <dig> and γ <dig> in a  and contains no marker which also belongs to  g. the substring ℓ is the label of v. if ℓ is empty, the adjacency is said to be clean, otherwise it is said to be labeled. if a linear chromosome is composed only of markers which are not in  g, it is represented by an adjacency ○ℓ○.

dcj operations
a cut performed on a genome a separates two adjacent markers of a. a cut affects a single adjacency v in a: it is done between two symbols of v, creating two open ends. a double-cut and join or dcj applied on a genome a is the operation that performs cuts in two different adjacencies in a, creating four open ends, and joins these open ends in a different way. in other words, a dcj rearranges two adjacencies in a, transforming them into two new adjacencies.

consider a dcj ρ applied to adjacencies v <dig> = γ1ℓ1ℓ4γ <dig> and v <dig> = γ3ℓ3ℓ2γ <dig>  which creates x <dig> = γ1ℓ1ℓ2γ <dig> and x <dig> = γ3ℓ3ℓ4γ <dig>  we represent such an operation as ρ = . the two adjacencies v <dig> and v <dig> are called the sources, while the two adjacencies x <dig> and x <dig> are called the resultants of ρ  <cit> . one or more labels among ℓ <dig>  ℓ <dig>  ℓ <dig> and ℓ <dig> can be equal to ε , as well as one or more extremities among γ <dig>  γ <dig>  γ <dig> and γ <dig> can be equal to ○ , a dcj operation can correspond to several rearrangement events, such as an inversion, a translocation, a fusion or a fission  <cit> .

adjacency graph and the dcj distance
given two genomes a and b, the adjacency graph ag  <cit>  is the bipartite multigraph whose vertices are the adjacencies of a and of b and that has one edge for each common extremity of a pair of vertices. the graph ag is composed of connected components that alternate vertices in genome a and in genome b. each component can be either a cycle, or an ab-path , or an aa-path , or a bb-path . a special case of an aa or a bb-path is a linear singleton, that is a linear chromosome represented by an adjacency of type ○ℓ○. in figure  <dig> we show the example of an adjacency graph.

components with  <dig> or more vertices need to be reduced - by applying dcj operations - to components with only  <dig> vertices, that can be cycles or ab-paths  <cit> . this procedure is called dcj-sorting of a into b. the number of ab-paths in ag is always even and a dcj operation can be of three types  <cit> : it can either increase the number of cycles by one, or the number of ab-paths by two ; or it does not affect the number of cycles and ab-paths ; or it can either decrease the number of cycles by one, or the number of ab-paths by two . we assign the same cost to any dcj operation. for simplicity, we consider the dcj cost equal to one. then, the dcj distance of a and b, denoted by ddcj , corresponds to the minimum number of steps required to do a dcj-sorting of a into b and is given by the following theorem.

theorem  <dig> given two genomes a and b without duplicated markers, we have ddcj=|g|-c-b2
, where  g is the set of common markers and c and b are, respectively, the number of cycles and of ab-paths in ag .

the dcj-indel model with distinct costs
although the dcj-model was defined in the previous sections for genomes with unequal contents, only the common markers were handled. in this section we explain how to deal with unique markers, that are markers which occur only in genome a and markers which occur only in genome b.

indel operations
in order to deal with unique markers, we need operations that change the content of a genome. these operations can be an insertion or a deletion of a block of contiguous markers. insertions and deletions can be jointly called indel operations. we consider a model in which an indel only affects the label of one single adjacency, by deleting or inserting contiguous markers in this label, with the restriction that an insertion cannot produce duplicated markers  <cit> . in other words, while sorting a into b, the indel operations are the steps in which the markers in  a are deleted and the markers in  b are inserted.

given ℓ <dig> ≠ ε, the deletion of ℓ <dig> from the adjacency γ1ℓ1ℓ3ℓ2γ <dig> is represented as , while the insertion of ℓ <dig> in the adjacency γ1ℓ1ℓ2γ <dig> is represented as . one or both extremities among γ <dig> and γ <dig> can be equal to ○ , as well as one or both labels among ℓ <dig> and ℓ <dig>  can be equal to ε . observe that at most one chromosome can be entirely deleted or inserted at once. moreover, since duplications are not allowed, an insertion of a marker that already exists is not allowed. consequently, in this model, it is not possible to apply insertions and/or deletions involving the markers in  g.

given two genomes a and b, the dcj-indel distance of a and b, denoted by ddcjid, is the minimum cost of a dcj-indel sequence of operations which sorts a into b, assigning the cost of  <dig> to each dcj and a positive cost w ≤  <dig> to each indel operation. if w =  <dig>  the dcj-indel distance corresponds exactly to the minimum number of steps required to sort a into b  <cit> .

runs, indel-potential and the dcj-indel distance
let us recall the concept of run, introduced by braga et al.  <cit> . given two genomes a and b and a component c of ag, a run is a maximal subpath of c, in which the first and the last vertices are labeled and all labeled vertices belong to the same genome . a run is then a subpath of a component and can be represented by its list of vertices. a vertex v that corresponds to an entire run is called a compact-run. if a run is not compact, it is a long-run. an example of a component with  <dig> runs is given in figure  <dig>  a run in genome a is also called an  a-run, and a run in genome b is called a  b-run. we denote by Λ the number of runs in a component c. while a path can have  <dig> or any positive number or runs, a cycle has either  <dig>   <dig>  or an even number of runs.

a set of labels of one genome can be accumulated with dcjs. in particular, when we apply optimal dcjs on only one component of the adjacency graph, we can accumulate an entire run into a single adjacency  <cit> . it is possible to do a separate dcj-sorting using only optimal dcjs in any component c of ag  <cit> . we denote by ddcj  the number of optimal dcj operations used for dcj-sorting c separately  depends only on the number of vertices or, equivalently, the number of edges of c  <cit> ). the dcj distance can also be re-written as ddcj = ∑c∈ag ddcj.

runs can be merged by dcj operations. consequently, during the optimal dcj-sorting of a component c, we can reduce its number of runs. the indel-potential of c, denoted by λ, is defined by braga et al.  <cit>  as the minimum number of runs that we can obtain doing a separate dcj-sorting in c with optimal dcj operations. an example is given in figure  <dig> 

the indel-potential of a component depends only on its number of runs:

proposition  <dig>  given two genomes a and b and a component c of ag, the indel-potential of c is given by λ=Λ+ <dig>  if Λ ≥  <dig>  otherwise, if Λ =  <dig>  then λ =  <dig> 

let λ <dig> and λ <dig> be, respectively, the sum of the indel-potentials for the components of the adjacency graph before and after a dcj operation ρ, and let Δλ = λ <dig> - λ <dig>  if ρ is an optimal dcj acting on two adjacencies of a single component of the graph, the definition of indel-potential implies Δλ ≥  <dig>  we also know that Δλ ≥  <dig>  if ρ is counter-optimal, and Δλ ≥ - <dig>  if ρ is neutral  <cit> . this allows us to exactly compute ddcjid, that is the dcj-indel distance of a component c of ag:ddcjid=ddcj+wλ <cit> . we can then derive the following upper bound for the dcj-indel distance:

lemma  <dig>  given two genomes a and b without duplicated markers and a positive indel cost w ≤  <dig>  we have

 ddcjid≤ddcj+w∑c∈agλ. 

recombinations
until this point, we have explored the possible effects of any dcj that is applied to two adjacencies belonging to a single component of the graph. however, there is another type of dcj that must be considered. a dcj operation ρ applied to adjacencies belonging to two different components is called a recombination and can have Δλ <  <dig>  <cit> . thus, depending on the value of w and on whether the recombination is an optimal, a neutral or a counter-optimal dcj, a recombination with Δλ <  <dig> can lead to a sorting sequence with lower cost. as an example, a neutral recombination with Δλ = - <dig> is represented in figure  <dig> 

although many different recombinations can occur, it is possible to explore the space of recombinations in linear time and compute the maximum deduction that we can obtain with respect to the upper bound of lemma  <dig>  <cit> .

RESULTS
in this section we develop a restricted dcj-indel sorting algorithm, from which we can derive an upper bound for the restricted dcj-indel distance.

chained operations
let us generalize to the dcj-indel model a concept introduced in  <cit> . let s = ρ1ρ <dig> ... ρn-1ρn be a dcj-indel sequence of operations sorting genome a into genome b. two consecutive operations ρi and ρi+ <dig> of s are said to be independent when no source of ρi+ <dig> is a resultant of ρi. otherwise, ρi+ <dig> use as a source a resultant from ρi. in this case, the operations ρi and ρi+ <dig> are said to be chained.

bi-directional approach
although in general a sorting algorithm is conceived to follow a single direction, in which all operations are applied on the initial genome, here we design a bi-directional algorithm, in which some operations are applied on genome a and the others are applied on genome b. running a bi-directional algorithm we actually transform genomes a and b into an intermediate genome i. however, with the operations that transform a and b into i, we can derive an optimal sequence of operations simply sorting genome a into b. given any dcj or indel operation ρ = , the inverse of ρ is ρ- <dig> =   <cit> . this notation can also be extended to a sequence of operations: given a sequence s = ρ1ρ <dig> ... ρn , we have s-1=ρn-1ρn-1-1⋯ρ2-1ρ1- <dig>  observe that the inverse of a deletion is an insertion, and vice-versa.

proposition  <dig>  given two genomes a and b, and a pair of sequences s <dig> and s <dig> composed of dcj and indel operations applied respectively on genomes a and b, transforming both a and b into an intermediate genome i, such that |s1|+|s2|=ddcjid, then s1s2-1is an optimal sequence of dcj and indel operations that transforms a into b.

accumulating x splitting labels
a dcj that accumulates labels is always applied to two labeled adjacencies and results into a clean adjacency and an adjacency containing the concatenation of the labels of the original adjacencies. in general, we can represent such an accumulating dcj ρ by . if ρ accumulate labels of an  a-run, it is denoted by aaa≻b. similarly, if ρ accumulates labels of a  b-run, it is denoted by bbb≻a.

the inverse of an accumulating dcj ρ is a splitting dcj ρ- <dig> = . observe that, if ρ is applied on a, ρ- <dig> is applied on b and split a label of an  a-run. in other words, the inverse of an aaa≻b is a dcj applied on b that separates vertices belonging to the same  a-run in two different cycles, denoted by b≺aaa. similarly, the inverse of a bbb≻a is a dcj applied on a that separates vertices belonging to the same  b-run, denoted by a≺bbb. an a≺bbb or a b≺aaa is called an inverted-split. in table  <dig> we summarize the operations described above.

accumulation-deletion x insertion-split
let n be a positive integer, such that n ≥  <dig> and let r <dig> = v1x1v2x <dig> ... vixi ... vjxj ... vn-1xn-1vn be a long-run, in which v <dig> and vn are labeled, each vk  can also be labeled and all xk
 are clean. we say that two vertices vi and vj  in r <dig> are partners if vi and vj are labeled and all vertices between vi and vj in r <dig> are clean. we can apply an accumulating dcj on the two partners vi and vj, accumulating their labels into a new vertex vi-j, reducing r <dig> to r <dig> = v1x1v2x <dig> ... vi-1xi-1vi-jxjvj+1xj+ <dig> ... vn-1xn-1vn. the subsequent step of accumulation then occurs between two partners of r <dig>  reducing r <dig> to r <dig>  and so on. assuming that the initial r <dig> has m ≤ n labeled vertices, we need to apply m -  <dig> accumulating operations. in the end of the process, we obtain the compact-run rm, that corresponds to a single vertex whose label is the accumulation of all labels of r <dig>  observe that all labeled vertices will be used in some accumulating dcj, until the compact-run rm is obtained.

as an example, take v <dig> = γ1ℓ1γ <dig>  x <dig> = γ2γ <dig>  v <dig> = γ3ℓ2γ <dig>  x <dig> = γ4γ <dig>  v <dig> = γ5ℓ3γ <dig>  x <dig> = γ6γ <dig>  v <dig> = γ7ℓ4γ <dig>  with all ℓk ≠ ε and let r <dig> = v1x1v2x2v3x3v <dig> be a  b-run. we can start the accumulation with a dcj of type bbb≻a on partners v <dig> and v <dig>  creating v2- <dig> = γ3ℓ2ℓ3γ <dig> and γ4γ <dig>  reducing r <dig> to r <dig> = v1x1v2-3x3v <dig>  we then apply another dcj of type bbb≻a on partners v <dig> and v2- <dig>  creating v1-2- <dig> = γ1ℓ1ℓ2ℓ3γ <dig> and γ2γ <dig>  reducing r <dig> to r <dig> = v1-2-3x3v <dig>  finally, we apply a dcj of type bbb≻a on partners v1-2- <dig> and v <dig>  creating v1-2-3- <dig> = γ1ℓ1ℓ2ℓ3ℓ4γ <dig> and γ6γ <dig>  reducing r <dig> to r <dig> = v1-2-3- <dig>  if we follow the accumulation of a run, considering only the labeled vertices, we obtain a rooted tree that is built from the leafs to the root . the root of the tree indicates the possible positions of a deletion.

the inversion of the run accumulation described in the example above is the inverted-split of the label of the compact-run r <dig> = v1-2-3- <dig> into the labeled vertices v <dig> = γ1ℓ1γ <dig>  v <dig> =γ3ℓ2γ <dig>  v <dig> = γ5ℓ3γ <dig> and v <dig> = γ7ℓ4γ <dig>  we start by applying a b≺aaa dcj on v1-2-3- <dig> = γ1ℓ1ℓ2ℓ3ℓ4γ <dig> and γ <dig> γ <dig>  obtaining v1-2- <dig> = γ1ℓ1ℓ2ℓ3γ <dig> and v <dig> = γ7ℓ4γ <dig>  we then apply a b≺aaa on v1-2- <dig> and γ2γ <dig>  obtaining v <dig> = γ1ℓ1γ <dig> and v2- <dig> = γ3ℓ2ℓ3γ <dig>  finally we apply a b≺aaa on v2- <dig> and γ4γ <dig>  obtaining v <dig> = γ3ℓ2γ <dig> and v <dig> =γ5ℓ3γ <dig>  if we follow the inverted-split of a run, considering only the labeled vertices, we obtain a rooted tree that is built from the root to the leafs . in this case, the first inverted-split defines the root. then, each one of the subsequent inverted-splits must be chained with a dcj in this tree. the root of the tree indicates the possible positions of an insertion.

an indel does not have to occur while a circular chromosome exists
we now show that an indel must not be applied while a circular chromosome exists.

proposition  <dig> shows that an insertion can always be "moved up" in a dcj-indel sorting sequence.

proposition  <dig> let s = ρ1ρ <dig> ... ρn-1ρn be a dcj-indel sequence sorting genome a into genome b, such that, for an integer  <dig> ≤ i <n, ρi is a dcj operation and ρi+ <dig> is an insertion. then ρi ρi+ <dig> can be replaced θ1θ <dig>  such that θ <dig> is an insertion and θ <dig> is a dcj and s' = ρ1ρ <dig> ... ρi-1θ1θ2ρi+  <dig> ... ρn-1ρn is also a dcj-indel sequence sorting genome a into genome b.

proof: observe that, if ρi and ρi+ <dig> are independent, it is easy to see that they can be simply switched, that is: θ <dig> = ρi+ <dig> and θ <dig> = ρi. we still need to examine the case in which ρi and ρi+ <dig> are chained.

observe that a dcj in any optimal sorting scenario either accumulates or does not change the composition of runs. take ρi = . furthermore, since an insertion in any optimal sequence is performed without breaking any existing label, without loss of generality, take ρi+ <dig> = . then ρiρi+ <dig> could be replaced by: θ <dig> =  followed by θ <dig> = .

similarly, a deletion can always be "moved down" in a dcj-indel sorting sequence.

proposition  <dig> let s = ρ1ρ <dig> ... ρn-1ρn be a dcj-indel sequence sorting genome a into genome b, such that, for an integer  <dig> ≤ i <n, ρi is a deletion and ρi+ <dig> is a dcj operation. then ρiρi+ <dig> can be replaced by θ1θ <dig>  such that θ <dig> is a dcj operation and θ <dig> is a deletion and s' = ρ1ρ <dig> ... ρi-1θ1θ2ρi+ <dig> ... ρn-1ρn is also a dcj-indel sequence sorting genome a into genome b.

proof: analogous to the proof of proposition  <dig>     □

from the previous propositions we observe that finding a position to perform an indel imposes no difficulties to design a restricted dcj-indel sorting algorithm. the trick is how to determine the dcj part of the sorting sequence, so that we reincorporate each circular chromosome after its creation and achieve the indel-potential per component.

restricted dcj-indel sorting
basically, our approach disregards recombinations and sorts the components of the graph separately, using optimal dcj operations to achieve the minimum number of indels per component, that is given by the indel-potential. in this way, we achieve the distance given by the upper bound of lemma  <dig>  as we will see in the remainder of this section.

capping
disregarding recombinations, we can first perform the genome capping, a technique that helps us to avoid difficulties and special cases produced by telomeres: we adjoin new markers  to the ends of the chromosomes  so that we do not change the distance and we do not have to worry about telomeres  <cit> . after the capping, the two genomes have the same number of chromosomes and the corresponding adjacency graph contains only clean paths of size  <dig> and cycles. recall that, since ag is bipartite, all cycles have even length and can have  <dig>   <dig> or an even number of runs. capped genomes can be then sorted with translocations , inversions, circular chromosome excisions and reincorporations.

merging runs in cycles
an important step of the dcj-indel sorting is to merge runs in cycles with at least  <dig> runs, so that the indel-potential for each cycle is achieved.

proposition  <dig> the indel-potential of a cycle c with at least  <dig> vertices and  <dig> or more runs can be achieved by extracting from c a cycle with a single run.

proof: for any positive integer i let λ=i+ <dig>  if Λ =  <dig>  we can split c into two cycles containing a single run each, and the indel-potential is preserved. for any cycle c with  <dig> or more runs, since the number of runs in this case is always even, we have λ=i2+ <dig>  we then denote by λ' the alternative potential, obtained by extracting cycles with a single run from c. observe that, for any i =  <dig>   <dig>   <dig>  ..., λ' = λ +  <dig>  it is easy to check the base case, that is λ′=λ+1=2+1=3=42+1=λ. by induction, for i =  <dig>   <dig>   <dig> ..., we have λ′=λ+1=i-22+1+1=i2+1=λ    □

chromosome reincorporation
in the restricted sorting of linear genomes a circular chromosome has to be immediately reincorporated after its excision - these two consecutive operations mimic either a transposition or a block-interchange  <cit> . as we have seen before, the general dcj-indel sorting is bi-directional - the operations can be applied on genome a or b, depending on whether we accumulate runs in a or in b. however, when a dcj creates a circular chromosome, we need to apply the subsequent dcj on the same genome, and it is not easy to see how this interferes with the indel-potential of ag.

suppose that a dcj performed an excision of a circular chromosome. let  be a pair of vertices, such that v <dig> and v <dig> are in the same genome and belong to the same cycle in ag, v <dig> is an adjacency at the circular chromosome and v <dig> is an adjacency at a linear chromosome. the pair  is called a link. since v <dig> and v <dig> are in the same cycle, a chromosome reincorporation can always be done by applying a dcj on the two vertices v <dig> and v <dig>  <cit> .

the cycle to which a link  belongs is called a connection cycle. let c be a connection cycle of ag with 2k ≥  <dig> vertices. since c has k vertices in each genome, there are at least k -  <dig> and at most k <dig> k <dig> distinct links in c.

the two vertices v <dig> and v <dig> of a link in a connection cycle c are connected by two distinct subpaths of c. the distance between v <dig> and v <dig> is given by the number of edges in the shortest path connecting them. since both v <dig> and v <dig> are in the same genome, this distance is always even and positive. if the distance between v <dig> and v <dig> is  <dig>  v <dig> and v <dig> have a common neighbor, and  is called a short-link.

proposition  <dig> after the excision of a circular chromosome by a dcj, there is at least one short-link in ag.

proof: suppose that the circular chromosome is in genome a. if ag contained no connection cycle, genome b would also have a circular chromosome, which would be a contradiction. let c = v1x1v2x <dig> ... vnxn be a connection cycle in ag, in which the vertices v <dig>  ..., vn are in a and the vertices x <dig>  ..., xn are in b, and let  be a link in c such that vi is in the circular chromosome and vj is in a linear chromosome of a. consider without loss of generality that i <j. then take the vertex vk, i ≤ k <j, such that k is the largest index of a vertex between vi and vj belonging to the circular chromosome. then  is a short-link.    □

in order to find out whether the indel-potential of the connection cycle c can be preserved after applying a dcj on a certain link , basically we need to analyze how the connection cycle c is split, by analyzing the vertices that are between v <dig> and v <dig> in c.

we focus on the short-links only. let  be a short-link in a connection cycle c, such that v <dig> = γ1ℓ1γ <dig> and v <dig> = γ3ℓ2γ <dig> . without loss of generality, let z = γ2ℓ3γ <dig> be the common neighbor of v <dig> and v <dig> . we then define the optimal dcj ρ = , such that x <dig> = γ2γ <dig> and x <dig> = γ1ℓ1ℓ2γ <dig>  observe that ρ always extracts z together with a new clean vertex x <dig> into a cycle, and accumulates the labels of v <dig> and v <dig> into a new vertex x <dig>  which is extracted into a cycle with the remaining vertices of c. there are three different cases:

 <dig>  gaps: if the two vertices of a short-link have a clean common neighbor, it is called a gap. a dcj applied to a gap of a connection cycle c splits c into a clean cycle c' and a cycle c'' that has the same indel-potential of c.

 <dig>  compact-runs: let  be a short-link in ag, such that the common neighbor z of v <dig> and v <dig> is a compact-run. an optimal dcj ρ extracts the compact-run z and a new clean vertex into a new cycle. according to proposition  <dig>  ρ preserves the indel-potential of ag.

 <dig>  inverted-splits: if a short-link  is not a gap nor is separated by a compact-run, only one possiblity remains: the common neighbor z of v <dig> and v <dig> is labeled and belongs to a long-run r. observe that an optimal dcj ρ splits c into a cycle c' containing a new clean vertex and z  = 1) and a cycle c'' containing all remaining runs of c and the remaining vertices of r, that is, we have Λ = Λ.

although the overall indel-potential seems to be increased, the dcj described above is an inverted-split of type a≺bbb if the circular chromosome is in a and r is in b . we have seen that inverted-splits, if properly applied, do the backtracing of the insertion position of a run in the opposite genome and do not increase the indel-potential of ag.

it is important to guarantee that, after applying a dcj that inversely splits a run r <dig> and another dcj that inversely splits another run r <dig>  the runs r <dig> and r <dig> are not merged. we do this by simply extracting the residual part of an inversely split run into a new cycle. furthermore, during the merging or accumulation of runs, a run r can be inversely split by successive dcjs. in this case, we need to guarantee that each new inverted-split of r is either the first or chained with one of the previous inverted-splits.

we can always reincorporate the circular chromosome with a dcj applied to any short-link , except if ρ splits a run r that is already inversely split and ρ cannot be chained with a previous inverted-split of r. however, in this case, r will be separated alone in a cycle .

after an excision, suppose that the circular chromosome is in genome a . let c be a connection cycle in ag. for each vertex v of c in a , there is at least one link containing v. due to this fact, when we have a cycle containing a single inversely split run r, it is easy to find a link chained with a previous inverted split of r.

proposition  <dig> if a connection cycle c with a single run r has links in one genome and its run r is in the other genome, we can always reincorporate the circular chromosome and preserve the indel-potential.

proof: let c have links in genome a. each short-link of c is either a gap, or a compact-run, or the first inverted-split of the  b-run r. otherwise, c has in genome a a vertex v that was created by a previous inverted-split ρ of r. since each vertex of c in a is part of a link, we can choose a link that contains v and, consequently, is chained with ρ.    □

the sorting algorithm and an upper bound for the restricted dcj-indel distance
we put everything together in algorithm  <dig>  and describe the sorting of capped genomes for the restricted model, in which each circular chromosome is reincorporated immediately after its creation. applying this procedure we can find a sequence of optimal dcjs that sort a into b while preserving the indel-potential. in other words, this algorithm results in a sorting sequence in the restricted model that has exactly the same cost given by the upper bound of lemma  <dig> 

CONCLUSIONS
in this work we have presented a method to compute a restricted dcj-indel sequence of operations that sort a linear genome into another linear genome. this method leads to a tight upper bound for the restricted dcj-indel distance. the general dcj-indel distance can be computed exactly and is a lower bound for the restricted dcj-indel distance. however, the question whether these bounds are equal, meaning that both distances are equal, remains open.

competing interests
the authors declare that they have no competing interests.

authors' contributions
phs, mdvb, rm and sd have elaborated the model, proved the results and written the paper.


algorithm  <dig> restricted sorting of genome a into b with optimal dcjs and indels

input: two linear genomes a and b

output: a restricted sequence of dcj and indel operations sorting a into b

     cap genomes a and b;

        

     r ← null;

     if there is a cycle c ∈ ag with at least  <dig> vertices and at least  <dig> runs then

         r ← run from c;

     while r ≠ null do

         extract r into a cycle; 

         r ← null;

         if a circular chromosome was created then

             find a short-link ; 

             if  is a gap or a compact-run then

                   apply the optimal dcj ρ;

             else

                let r <dig> be the run that would be inversely split by ρ;

                if ρ is the first inverted-split of r <dig> then

                      apply the optimal dcj ρ;

                    let r <dig> be the residual part of r1;

                    if r <dig> is in a cycle with more runs then

                       r ← r2; 

                  else

                       

                    find a link  such that x <dig> is a vertex created by a previous inverted-split of r1; proposition 7]

                      apply the optimal dcj ρ;

         if r = null and there is a cycle c ∈ ag with at least  <dig> vertices and at least  <dig> runs then

             r ← run from c;

        

     while there is a long-run r in ag do

            apply an optimal dcj accumulating the labels of two partners of r;

         if a circular chromosome was created then

             find a short-link ; 

             if  is a gap or a compact-run then

            apply the optimal dcj ρ;

             else

             let r <dig> be the run that would be inversely split by ρ;

             if ρ is the first inverted-split of r <dig> then

                apply the optimal dcj ρ;

             else

                

             find a link  such that x <dig> is a vertex created by a previous inverted-split of r1; 

             apply the optimal dcj ρ;

        

     while there is cycle c ∈ ag with at least  <dig> vertices do

         extract a cycle from c, with an optimal dcj applied on genome a;

         if a circular chromosome was created then

            find a short-link ; 

            

            apply the optimal dcj ρ;

invert all dcjs applied on genome b;

insert each  b-run r before the first inverted-split of r;

move up insertions that occur in circular chromosomes;

delete all  a-runs from the dcj-sorted components;

supplementary material
additional file 1
click here for file

 acknowledgements
this research was partially supported by the brazilian research agencies cnpq and faperj.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2012: proceedings of the tenth annual research in computational molecular biology  satellite workshop on comparative genomics. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/13/s19
