BACKGROUND
constructing multiple sequence alignments  is an important problem in bioinformatics. for sequences with sufficiently high similarity, there exist many msa tools that can produce good alignments, but for sequences with similarity below  <dig> %, no tools have satisfactory performance. however, these sequences are also of great interest to biologists because even though they have low similarity, many of them have similar secondary and tertiary structures. this paper introduces a new software tool pnpprobs. it can construct significantly better alignments for sequences with low similarity, and it also improves the alignments for general input.

pnpprobs is based on an adaptive approach we proposed in  <cit> , in which we observed that sequences having different similarities have different characteristics and structural properties, and by using some reliable measure to estimate the similarity of the input , we may exploit the corresponding properties to help generate better alignments. to study the feasibility of this idea, we have modified the open source code of msaprobs  <cit>  and developed a new adaptive msa tool called glprobs. roughly speaking, both tools construct the alignments in the following three stages: 
determine the substitution scores for pairwise sequences based on some pair-hidden markov model, and then refine the scores to make them consistent with all input sequences.

construct a guide tree and based on it align the input sequences progressively to generate the multiple sequence alignment.

refine the alignment given by stage  to a better alignment for the final output.



the major difference between msaprobs and glprobs is in the first stage: msaprobs uses a single model to determine the substitution scores, while glprobs determines the scores adaptively. glprobs first estimates the similarity of the input sequences by computing its average pid , which is defined as follows: the pid of two sequences is the percentage of identical columns in their optimal  alignment, and the average pid of a sequence family is the average of the pids of every pair of sequences in the family. if the input’s average pid is high, glprobs uses the global pair-hidden markov model  to determine the scores; otherwise, it uses some local pair-hmms.

we have made thorough comparisons between glprobs and a dozen other leading msa tools, and glprobs had the highest accuracy in many of the comparisons .

in this paper, we have some ideas for improving glprobs, and we implement them by developing the alignment tool pnpprobs. we have tested pnpprobs extensively on three benchmark databases balibase  <cit> , oxbench  <cit> , and sabmark  <cit> , and in section “benchmark comparison”, we compare its performance with  <dig> leading multiple sequence alignment tools, including  <dig> using the progressive method: clustalw  <cit> , clustal Ω  <cit> , t-coffee  <cit> , mafft  <cit> , muscle  <cit> , probcons  <cit> , contralign  <cit> , probalign  <cit> , msaprobs  <cit> , glprobs, and  <dig> using the non-progressive method: align-m  <cit> , picxaa  <cit> , and dialign-pfam  <cit> . pnpprobs’ performance is significant better, specially for distantly related sequences. for example, for families of sequences in oxbench with similarity from  <dig> to  <dig> %, pnpprobs achieved an improvement  over clustalw by  <dig>  %, over picxaa by  <dig>  % and glprobs by  <dig>  %.

we have also evaluated the performance of pnpprobs on phylogenetic inferencing over two benchmarks, namely yule-harding tree simulated data  <cit>  and sabmark empirical data  <cit> . in section “phylogenetic analysis”, we compare pnpprobs with five other msa tools, namely glprobs, msaprobs, picxaa, muscle and clustalw, and our results showed that the phylogenetic trees generated from the outputs of pnpprobs are closer to the model phylogenetic trees than those constructed from the five other msa tools.

for verification of our results, all test data can be accessed from  <cit> , and pnpprobs can be downloaded via the link https://github.com/ytye/pnpprobs.

ideas for improving glprobs
we observe some new structural properties and believe that by exploiting them we can further improve glprobs’ accuracy in general, and improve its accuracy significantly for sequences with low similarity. we focus on improving the second stage of glprobs. based on the substitution scores given in stage  <dig>  this stage determines a guide tree, which is supposed to capture the phylogeny relationship of input sequences. then, it generates an msa by performing profile-to-profile alignment according to the order suggested by the guide tree. unlike glprobs, we will use an adaptive approach to construct the guide trees. we classify the input sequences into two types:  distantly related sequences, whose similarities  are smaller than some threshold , and  normally related sequences, whose similarities are no smaller than the threshold. pnpprobs handles these two types of sequences differently.

for normally related sequences, we exploit some structure property for better guide tree generation. to explain, we show in fig.  <dig> two protein families, f and g, whose average pid’s are both  <dig> , but their structures are quite different. in particular, each sequence of g has two regions  over which the sequences are identical, and the sequences are totally different elsewhere. we note that similar structures can be found in real protein families, especially from those with similarity around 20– <dig> %: 
 their sequences have a number of conserved regions over which the sequences are very similar, and the sequences are very different elsewhere.
fig.  <dig> some structure property that we use for handling normally related sequences





we have two observations about this structure: 
 the average pid cannot help us discover , but the standard deviation can. as shown in fig.  <dig>  while f and g have the same average pids, the standard deviation of their pid’s are quite different: for f, the pids of its sequence pairs are  <dig>  ,  <dig>  , and  <dig> , and their standard deviation is significantly greater than  <dig>  and for g, the pids of its sequence pairs are all equal to  <dig>  and their standard deviation is  <dig>  this is not surprising because the sequences in g are identical over the two conserved regions, and are totally different elsewhere. in general, if a family has small standard deviation of pid, it may have structure .

 when aligning a family g with structure  to some other family f, we should aim at finding alignment that is good mainly over g’s conserved regions, because g’s sequences are quite different elsewhere and even biologists may not know how to align the sequences correctly over there. furthermore, since g’s sequences are very similar over the conserved regions, having a good alignment  for one sequence of g will essentially give us good alignments for all the others. this suggests that when aligning g to f, we may proceed as if we were aligning a single -sequence to f .



observation  motivates the following strategy to determine whether a family has structure : if the standard deviation of the pids of the family is sufficiently small, we bet that it has structure . for ease of reference, we will say that such family has low pid discrepancy, or simply low discrepancy.

observation  motivates us to try a guide tree construction method different from glprobs’ when handling families with low discrepancy. note that the method upgma  <cit>  is used in glprobs to construct guide trees. the method iteratively merges clusters of sequences into larger clusters, and the two closest pair of clusters are chosen and merged in each iteration. the distance dℓk between two clusters cℓ and ck, where ck is obtained after merging the clusters ci and cj, is 
  <dig> dℓk=|ci||ci|+|cj|dℓi+|cj||ci|+|cj|dℓj. 

in this paper, we try another guide tree construction method for families with low discrepancy; we will use the wpgma method  <cit> , which is the same as the upgma method, but it uses the following definition of distance: 
  <dig> dℓk=12dℓi+12dℓj. 

note that  is equal to  when |ci|=|cj|= <dig>  or when both ci and cj can be regarded as containing only one single sequence , as suggested by observation  for families with low discrepancy.

for distantly related sequences, they are only similar at some local domains or motifs, and these homologous regions may be rather small and are hidden in some long divergent regions. this causes troubles for the progressive alignment method, which is based on global pairwise alignments to merge and align iteratively clusters of sequences together to construct the msa, and the order of merging depends solely on the guide tree. by insisting global alignments for inputs that have only local similarity, the progressive method may introduce, even in the early stage of execution, many mis-aligned columns and other mistakes, and these early mistakes cannot be corrected and may be propagated  <cit>  and create more mistakes. to improve the alignment quality for distantly related sequences, we forget about the progressive methods and instead, we try non-progressive ones.

there exist many non-progressive msa methods. for example, the non-progressive sequence annealing technique described in  <cit>  combines successively confident alignable regions to build up the multiple alignment; the most similar segments  will be aligned first in order to preserve those conserved motifs or domains.

we use this sequence annealing technique to handle input of distantly related sequences. recall that in stage  <dig>  we have used the adaptive method to determine substitution scores. during the process, we have also found, for every pair of sequences x and y in the family, and every 1≤i≤|x| and 1≤j≤|y|, the probability pr of aligning the ith character of x and the jth character of y in the best alignment. to construct an msa for distantly related sequences, we will first sort all the character pairs  in descending order of pr. then, starting from the first character pair in the sort list, which has the highest probability of being aligned at the same column, we follow the character pairs in the list and try to insert each pair to the alignment  one by one. however, we will actually make the insertion only if the alignment is still consistent after the insertion.

for checking of consistency, we will maintain a collection of “same-column” sets, which contains all the characters that we have determined that they should be aligned at the same column. we will keep track of these sets using a graph, in which its nodes are the sets, and for any two same-column sets s and s′, we have a direct edge  in the graph if the column for s must precede that of s′ in the alignment . when we insert a pair  to the alignment, we will update the graph by either 
 introducing a new same-column set , or

 adding either xi or yj in some existing same-column set ), or

 merge two same-column sets  we need to merge s and s′ together).



we also need to update the edge set of the graph to reflect the changes. note that we will not actually make the insertion unless the updated graph is still acyclic, which means that the column constraints are still consistency. when we have finished processing all the character pairs in the sorted list, we topological-sort the graph to get a skeleton of the msa. we obtain the final msa by adding to it those characters not in the skeleton. see  for more details.

methods
construct better guide trees for normally related sequences
pnpprobs uses an adaptive approach to generating guide trees for normally related sequences. as mentioned in section “ideas for improving glprobs”, we have two methods, the upgma and the wpgma method to construct guide trees. to study which methods is better, we have modified glprobs such that it uses the wpgma method to construct guide trees. for ease of reference, we use glprobs-upgma to refer the original glprobs, and glprob-wpgma to refer the modified one. we used both tools to align the normally related families in sabmark, oxbench and balibase, and compute the tc scores of the resulting alignments, which is one of the most commonly used performance measure for evaluating multiple sequence alignments; the higher the scores, the better. figure  <dig> shows the accumulated differences of their tc scores. to explain the figure, let us denote by σg the standard deviation of the pids over all pairs of sequences in family g . the curve in the figure is constructed as follows. 
we first classify the input families according to their σs, and for each group i, i.e., the group with σ =i, we compute the average tc scores tc¯wpgma and tc¯upgma over the alignments returned by glprobs-wpgma and glprobs-upgma for the families in this group, respectively. then, we compute Δi=tc¯wpgma−tc¯upgma.
fig.  <dig> accumulated tc score difference between glprobs-wpgma and glprobs-upgma



we put a point  on the curve if k=∑i≤hΔi, i.e., the accumulated differences up to the group with σ =h is k.



note that if the curve is increasing at , we have Δh> <dig> and glprobs-wpgma is doing better than glprob-upgma. as shown in fig.  <dig>  the accumulated differences is mainly increasing until σ reaches around  <dig>  %, and hence glprobs-wpgma is doing better up to this point. afterwards, the curve is decreasing, which means glprobs-upgma is doing better. therefore, as default, pnpprobs decides that a family has low discrepancy if its σ is smaller than  <dig>  %, and uses the wpgma method to construct its guide tree.

non-progressive alignment for distantly related sequences
recall that pnpprobs uses a non-progressive method to generate the msa for distantly related sequences. to get more insight into the relative strength of the progressive and non-progressive methods, we have compared the performance of glprobs with that of another msa tool, picxaa, which uses the nonprogessive sequence annealing method. to make the comparison more meaningful, we have modified the first stage of picxaa so that it uses the same adaptive approach as glprobs for generating substitution scores. we call the modified tool picxaa-ad. figure  <dig> shows the accumulated tc score difference between picxaa-ad and glprobs for aligning families in the three benchmark databases, namely sabmark, oxbench and balibase. note that the accumulated differences is increasing until the point around  <dig> %, and then is decreasing afterwards. this means that the non-progressive tool picxaa-ad is doing better when the similarity of the input is less than  <dig> %, and the progressive tool glprobs is doing better for the other inputs.
fig.  <dig> accumulated tc score difference between picxaa-ad and glprobs



the algorithm of pnpprobs
given an input family of sequences, pnpprobs constructs its msa as follows. 
calculate the percent identity  for every pair of sequences, and compute the average avg and standard deviation σ.

use the avg to determine proper pair-hidden markov model to compute the posterior probabilities.

transform the posterior probabilities for consistency and use them as substitution scores.

based on avg to determine which alignment approach to use:

if avg < <dig> %  
sort the probabilities p in descending order.

construct an acyclic graph with the same-column sets as its nodes, and insert the character pairs  to the graph iteratively according to the sort probabilities.

topologically sort the graph, and from it constructs the msa.



if avg ≥  <dig> %  
compute the distance matrix for every pair sequences.

determine the guide tree construction method based on some threshold τ on the standard deviation σ of the pids, whose default value is  <dig>  % as suggested by our study in section “construct better guide trees for normally related sequences”: if σ <τ, use the wpgma method to construct the guide tree; otherwise, use the upgma method

based on the constructed guide tree, perform the profile-to-profile alignments to construct the msa.



refine the msa given in the previous step as follows: we iteratively divide the msa into two groups by randomly assign each sequence one of them, and we re-align these two groups using standard profile-profile alignment method to see if any improvement can be made. we stop when either  we have made 2n iterations and still cannot make any improvement, or  we have made 4n iterations. here, n is the number of input sequences.



RESULTS
to evaluate the performance of pnpprobs, we have compared it with thirteen other leading multiple sequence alignment tools on three popular benchmark databases. pnpprobs has the best performance in almost all cases, and it achieves significant improvements over the other tools on distantly related sequences. we have also studied its practicability by using it for phylogenetic analysis.

benchmark comparison
we have compared pnpprobs with the following multiple sequence alignment tools, ten of them use the progressive method: clustalw  <dig> , t-coffee  <dig> , mafft  <dig> , muscle  <dig> . <dig>  probcons  <dig> , contralign  <dig> , probalign  <dig> , msaprobs  <dig> . <dig>  clustal Ω  <dig> . <dig>  glprobs, and three of them use the non-progressive method: align-m  <dig> , picxaa, dialign. we used these tools to align families of sequences obtained from the three benchmark alignment databases, namely oxbench  <dig> , sabmark  <dig>  and balibase  <dig> . to measure the accuracy of their alignments, we used the sum-of-pairs score  and the total-column score , which were commonly used in previous studies  <cit> .
fig.  <dig> mean tc score on oxbench 

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
clustal Ω
the table shows the average sp and average tc score . the best and second best results in each column are marked in bold and with *, respectively. the last column shows the running time using a single cpu thread. note that we use default parameters for all tools


table  <dig> average sp and tc scores on sabmark

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
clustal Ω
the best and second best results in each column are marked in bold and with *, respectively

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
clustal Ω
the best and second best results in each column are marked in bold and with *, respectively



for the efficiency of pnpprobs, we note from the last column of tables  <dig>   <dig> and  <dig> that even using a single cpu thread, the running time of pnpprobs is comparable to most other tools. moreover, it is straightforward to “parallelize” step  <dig>   <dig>   <dig>  4a, 4i, 4iii and  <dig> of the algorithm of pnpprobs, and thus we can speedup pnpprobs’ execution easily by using multiple-cores cpus. figure  <dig> shows pnpprobs’ speed when running on a platform of six i7-3930k dual-cores with 64g ram for inputs with different number of sequences. we note that pnpprobs takes an average of half an hour to align  <dig> sequences.
fig.  <dig> running time of pnpprobs



phylogenetic analysis
to compare the practicability of pnpprobs with other existing tools, we have used it, as well as five other msa tools, namely glprobs, msaprobs, picxaa, muscle and clustalw, to construct phylogenetic trees. given a set of sequences, we first used the six msa tools to construct six msas, and used them as input to the maximum parsimony method  <cit>  to infer six hypothesized phylogenetic trees. then, for each of these hypothesized trees, we calculated the robinson-foulds distance  <cit>  between the tree and the model phylogenetic tree; the smaller the distance, the closer the two trees, and hence the better the corresponding msa. our tests used input sequences chosen from two benchmark databases, namely yule-harding tree simulated data  <cit>  and sabmark empirical data  <cit> .

simulated datafig.  <dig> similarity between hypothesized trees and model trees for simulated data



note that the yule-harding database is divided into four categories according to the simulated branch length diameter, and the larger the branch length diameter, the more divergent the phylogeny. figure  <dig> uses 1−rf distance  as the score for measuring the similarity of two trees. note from the figure that in most cases, the hypothesized trees derived from pnpprobs’ alignments achieve scores higher than that of the other tools, and we can argue that the alignments of pnpprobs are better. furthermore, as shown in fig.  <dig>  the rf distance differences between refaln and the other hypothesized trees become larger when the phylogenies are more divergent . however, the differences for pnpprobs increase mildly and are smaller than those of the five other msa tools.
fig.  <dig> rf distance difference between refaln and other hypothesized trees



empirical datafig.  <dig> similarity between hypothesized trees and model trees for empirical data



discussion and 
CONCLUSIONS
our msa tool pnpprobs aims at combining the strength of progressive and non-progressive methods for multiple sequence alignment; it uses progressive method for normally related sequences, and uses non-progressive method for distantly related ones. in  <cit> , we proposed to use the average percent identity to estimate the similarity of a family of sequences, and in this paper, we proposed to use the standard deviation of the percentage identity to estimate the discrepancy of a sequence family. for normally related sequences, pnpprobs uses different methods to construct guide trees depending on the discrepancy of the family. our experimental results showed that pnpprobs has the best tc scores in all but one test. we have also evaluated pnpprobs’ practicability, and our results suggested that pnpprobs will be a useful tool for downstream phylogenetic analysis.

for possible future research direction, we note that most of the msa tools try a certain range of sizes of components to assemble multiple sequence alignment. for example, the progressive alignment method uses big components of sequence profiles, and the non-progressive sequence annealing technique uses small components, e.g., alignable columns or residue pairs. a natural research direction is to consider multiple sizes of decomposed components in one algorithm to build up the msa such that families of sequences with long conserved regions apply large components and those with small conserved patterns use small components.

