BACKGROUND
relative expression analysis examines the relative ranked abundance of genes, as opposed to absolute gene expression values. the basic unit of comparison is the relative expression reversal, where the expression value between two biomolecules  reverses between phenotypes. these rank comparisons can then be generalize to larger numbers of biomolecules  <cit> . changes in the relative ranks of expression have been shown in several studies to accurately classify disease phenotypes, cancer subclasses, and disease outcomes based on tumor-derived rna expression profiling  <cit> . relative expression analysis also has tremendous potential for identification of potential diagnostic and prognostic markers, and can function as a hypothesis generator for investigating the underlying biological processes of interest.

currently, subsets of relative expression analyses are available as matlab functions  <cit> , perl scripts  <cit> , and r scripts  <cit> . the limited availability of these algorithms on specific platforms restricts their usage to researchers well versed in the languages in which they were developed or familiar with the environments in which they are implemented. aurea is the first application that provides these algorithms  in a unified framework and with a simple-to-use graphical user interface . aurea is open source and available for all major operating systems. furthermore, the gui enables intuitive control over the parsing of input data, which can sometimes be a bottleneck given the lack of standard formats across gene expression studies. finally, while the methods combined in aurea are designed to operate with relatively few tunable parameters, the choice of settings—and even algorithm—to obtain the best classification signature presents an extensive search space for both lay and advanced users. we have addressed this problem by including a optimization-based approach to adaptively determine algorithm settings. we hope the accessibility of aurea, combined with efficient data processing features and adaptive parameter tuning, will allow a broader range of scientists to incorporate relative expression methods into their analytical toolbox.

implementation
aurea: an overview
aurea incorporates the relative expression analysis algorithms tsp, k-tsp, tst and dirac. the top-scoring pair   <cit>  algorithm identifies the pair of genes with the maximum likelihood of being ordered consistently within each class, but differently between classes. the k-tsp  <cit>  algorithm, by extension, uses internal cross-validation  to identify the set of ‘k’ or less tsps  that exhibits the greatest collective accuracy for separating classes when combined by majority vote. the top-scoring triplet   <cit>  algorithm identifies the triplet of genes with the maximum likelihood of being ordered consistently within each class, but differently between given classes. the differential rank conservation   <cit>  algorithm identifies a gene set  with maximum likelihood of showing consistent relative expression  within a class, while displaying different relative expression between given classes.

unification of methods was achieved through developing a consistent programming interface across all algorithms. this unified interface allowed us to create a single data acquisition/presentation layer that is extensible and easy to use. aurea can process soft  <cit>  and comma-separated values -formatted data files, which are handled by parser sub-modules in the aurea system library. extending aurea to new user-specified data file formats requires development of a parser for the new data format and presentation of the results of the parser to the packager module, which then presents a consistent data layer to the rest of the system. the merging of multiple data files is also handled in the packager module, via a python implementation of babel  <cit> , which maps between different microarray platforms. within the gui, users are not required to know anything about these processes because data acquisition, parsing and merging are handled automatically.

adaptive parameter tuning with the relative expression analysis algorithms was also enabled by the consistent programming interface. this tuning initiates a broad search of algorithm parameter space, which is guided by accuracy, running time and the relative number of iterations an algorithm has previously performed. using these variables as heuristics allows a simple and effective automated method of finding the parameters and algorithm that best characterize the phenotype of interest.

using aurea: an example workflow
prototypical usage of aurea begins with a selected dataset of interest  from the geo database  <cit> . upon opening the aurea gui, the data summary screen is displayed , with button links to each task or module on the left side. while aurea allows for some tasks to be performed in a nonlinear manner, the links are ordered according to the most logical flow in a typical scenario. the first task in this example is acquiring the data set; data are imported via the import data screen , which is accessible by clicking import data. at the import data screen, data can be added for analysis by either browsing the local hard drive or by entering the geo accession in the download dialog box. entry of the geo accession number initiates automatic retrieval of the data from geo, which are added to the workspace. if the user intends to run either the dirac or adaptive algorithm, specification of a gene network file to map genes onto networks is also required on this screen ; such files typically comprise dozens to hundreds of gene lists representing biological pathways  or other relevant groupings. this specification can also be done at a later time. once all data files are specified, the task is executed by clicking the import files button.

after expression data have been imported, profiles in the dataset must be partitioned into two groups  prior to classifier training. these groups represent the two classes that the learning algorithms are attempting to discriminate. the class definition screen  provides descriptive information and convenient functionality for completing this step. single or multiple samples can be selected and moved to class  <dig> or class 2; samples not moved to one of the two groups will not be considered in the analysis. soft files from geo have the additional benefit of grouping samples into various cohorts based on the meta-data provided. this information for individual samples can be easily viewed at the bottom of the screen, and each profile can then be moved to class  <dig> or class  <dig> by clicking the left or right arrow, respectively. alternatively, selecting and moving any of the individual cohort tags automatically moves all samples within the cohort to the corresponding class, allowing for batch partitioning of the data—i.e., all samples with the ‘cancer’ subset tag can be moved to class  <dig> or class  <dig> with one click).

the final step is training classifiers on the defined classes. each individual relative expression algorithm  can be run from the train classifiers screen  to identify the associated signature  that best distinguishes between the defined classes. by selecting adaptive training, aurea runs through a combination of settings and algorithms, learning which appears to be most useful for the dataset . when the training times out  or an algorithm reaches perfect accuracy on cross-validation, aurea returns the results of the training, reporting the accuracy and the molecular phenotype characteristics that were most discriminative from the defined classes.

at any point during the analysis, returning to the home screen will give a summary report on the current state of the analysis. the user can also perform k-fold cross-validation on the dataset for each of the learning algorithms  or select a subset of the data for classification .

aurea libraries: system design
the gui was designed to utilize the information provided by relative expression analysis. the unification of the learning algorithms was achieved through object-oriented design. encapsulation of the learning algorithms into self-contained modules with compatible interfaces was done throughout the design of the rest of the system. while aurea is a desktop application designed for use by people with little programming expertise, aurea is also a software library that maintains the same functionality for the python interpreter as is available through the gui. this means that scripts can be written in python to perform any of the included algorithms.

python was chosen for this project because it is a cross-platform language that is fully object-oriented, uses a simple syntax and has a large developer community. aurea was designed to impose a minimal number of dependencies on the user. the only external module required is the tk/tcl windowing module, allowing cross-platform guis. scripts can be run from any standard python installation, version  <dig>  or higher.

the aurea libraries are broken up into a set of modules: the gui, packager, learner, adaptive and parser modules. the gui module handles the graphical interface to the aurea libraries. the learner module contains the relative expression algorithms. the adaptive module provides the adaptive learning features in aurea. the parser and packager modules are of particular interest to those who wish to extend aurea to their problem domains; the packager module contains objects that take parser objects, transform those objects into data tables, and then merge those data tables to create inputs for the learning algorithms. as such, extending the functionality of aurea to an unsupported data format only requires a new parser to provide a mapping of the parse to the packager module.

another extensible aspect of the aurea libraries is the learner module, which allows for the addition of a new learning algorithm using the interface of the existing relative expression analysis algorithms. by implementing train, classify and crossvalidate methods for the new learning algorithm, aurea can utilize the new method as if it were one of the stock algorithms, greatly decreasing development time by removing the need to develop an entirely new framework. it is not necessary to develop a new learning algorithm in c or another lower level language, as was done with the current relative expression analysis algorithms, but it is recommended, since python, as an interpreted language, is much slower than a compiled language like c/c++. in accordance with this point, aurea uses python where performance is i/o bounded, i.e., in the parsers and graphical interfaces, and as a wrapper around the optimized c/c++ code on the computationally intensive relative expression algorithms.

the api documentation is available  <cit> , and all code is provided under the gpl v.  <dig> affero license. developers can use the source code to create their own adaptations of aurea, although we encourage them to contribute their changes back to the main project to simplify ease of use in the community.

RESULTS
using aurea, we analyzed datasets representing diverse disease phenotypes, clinical outcomes and tissue types. these analyses were carried out to demonstrate the performance of the adaptive parameter tuning module; however, they also demonstrate the flexibility of the methods aurea employs, and show that aurea can be utilized by researchers as a hypothesis generator in crafting directed inquiries into the molecular characteristics of the phenotypes being studied.

adaptive parameter tuning
each algorithm used in relative expression analysis relies on parameters—albeit relatively few compared to those needed for most classification algorithms—that affect accuracy and running time. finding the best set of parameters for a given dataset can be a time-consuming task. for example, tsp, tst and k-tsp can all operate on a subset of genes for analysis based on the differential expression of the presented gene set . aside from the dramatic effect that this feature selection step can have on the computational complexity of the algorithms , very few conditions result in a complete change in genomic expression; examining too large a set of genes can therefore result in over-fitting, and lead to spurious results. the performance of dirac, on the other hand, is sensitive to the minimum size of the networks examined and the number of networks used for classification. the adaptive parameter-tuning tool automates the process of finding both the relative expression algorithm and associated settings—the algorithm-parameter configurations —that most accurately characterize the selected dataset.

the adaptive module computes the estimated running time for each algorithm based on a user-defined range of parameter values; it generates a score for each possible configuration using the estimated running time and the previous accuracy of the algorithm on the data set. in short, an algorithm’s likelihood of running is inversely proportional to the estimated running time, inversely proportional to the number of times it has run, and proportional to how well it scored the previous times it ran. the score is defined as follows:

  δx=tx∏y∈xαy 

where t is the estimated running time of the algorithm, x is the set of all the previously run learning algorithms of the same type as x and α is the linear mapping of the matthews correlation coefficient —our selected metric for classification accuracy, which ranges from − <dig>  and  <dig> —of y  to . the adaptive module then runs the apc with the smallest δ. this process can be run exhaustively, but generally is restricted to run until some time limit is reached, or a sufficient accuracy in the training set is achieved.

our tests show the variability of accuracy between different phenotype studies and demonstrate that while the adaptive module does not always achieve the highest accuracy, it does generally have an accuracy level comparable to the best possible, making it a good default choice for exploring a dataset .

targeted users
aurea is targeted to a diverse community of biological researchers and can be leveraged to improve analysis, streamline development cycles and guide human intuition. aurea simplifies the process of data analysis and new tool development, whether the goal involves investigation of new phenotypes or applying a new algorithm. a biologist looking to quickly view a new dataset or a computer scientist wanting to test a new classification scheme can quickly and easily leverage aurea.

aurea  is designed to remove the technical barriers to using relative expression analysis by simplifying and streamlining the discovery process. without the need of stringing together multiple command line tools across languages and platforms, each with its own learning curve, biologists can instead focus on the biological, as opposed to technical, problems underlying molecular phenotype characterization.

the modular design of the aurea software libraries presents many opportunities for computational biologists to integrate or extend the capabilities of relative expression algorithms. we have successfully used aurea on clusters and desktops, integrating it with databases and, in a dozen short lines of code, performing more complex molecular phenotype characterization on a diverse range of projects.

for computer scientists, aurea presents a platform on which to create and run their own classification algorithms, without the need to develop supporting software for data acquisition and user interaction.

comparison with existing implementations
current implementations of relative expression analysis methods include the tspair  <cit>  package, which is included in the bioconductor suite of r software; rxa  <cit> , also in r, which includes tsp and tst; tan et al.’s k-tsp <cit>  perl package and the original dirac  <cit>  implementation, available as a matlab script . none of these implementations provide integrated data parsing or pre-processing capabilities, although it should be noted that each environment does have a rich set of tools for doing so. furthermore, none of these programs provide a graphical interface, which restricts their use to analysts familiar with the programming environment. aurea is the only implementation to automatically examine the parameter space and assist the analyst in determining the best settings for their data set; it is also the only tool that includes all four of these methods in one package. it should be noted that each of these implementations has unique advantages and features such as the tspair package’s significance testing routine.

CONCLUSIONS
aurea is an easy-to-use, open-source, cross-platform system that unites several relative expression analysis algorithms in a framework that enables application by a broad range of users. through minimal system requirements and simplicity of interface and configuration, these tools can be applied far more casually and broadly than previously possible. as computational tools become more powerful and easier to understand through reduced technological overhead, they will become more accessible to non-computational scientists, who can use them to fully harness actionable biological meaning and understanding.

source code
all of the source code and documentation is available on the price lab website .

availability and requirements
• project name: aurea 

• project home page:http://price.systemsbiology.net/aurea/

• operating system: windows, os x, linux

• programming language: python, c/c++, swig  <dig> .36

• other requirements: python  <dig> .x or  <dig> .x, tkinter package 

• license: gnu affero general public license v.3

competing interests
the authors declare that they have no competing interests.

authors’ contributions
jce provided the primary design and development of the system. ndp and jae conceived and directed the project. jae contributed to the development of the dirac module. atm contributed to the development of tsp and tst modules. yk contributed to the development of the adaptive module, the wilcoxon module and the k-tsp module. jce, jae, atm and yk performed software testing and debugging. all persons contributed to the writing and editing of the manuscript. all authors read and approved the final manuscript.

