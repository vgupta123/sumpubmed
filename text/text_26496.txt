BACKGROUND
analysis of biological networks is one of the primary goals of systems biology  <cit> . databases, like kegg  <cit> , hprd  <cit>  and pathwaycommons  <cit>  nowadays store tens of thousands of literature reported molecular interactions and thus facilitate the interpretation of biological data. one particular aspect within this context is the construction of sub-networks connecting specified seed genes or proteins of biological interest. whereas an obvious way to address this problem is to enumerate and join all possible shortest paths between the molecules of interest  <cit> , this solution is not guaranteed to produce minimal sub-networks. inclusion of large numbers of auxiliary nodes and edges in addition to the ones of primary interest, however, can greatly complicate the visualization and interpretation of the constructed sub-networks.

the task of identifying an optimal sub-network for a given set of seed genes or proteins can be viewed as an instance of the steiner tree  <cit>  or the prize collecting steiner tree problem  <cit> , depending on whether or not additional weights for nodes  and edges  are available. briefly, a steiner tree is a sub-graph connecting all seed nodes  within the original molecular interaction network. the steiner tree problem is to find a steiner tree of minimal size, i.e. minimal number of edges. this problem is known to be np-complete  <cit> . the same holds true for the prize collecting steiner tree  problem, where the task is to find a steiner tree with maximal profit at minimal cost.

several authors have noticed the relationship between optimal sub-network identification in molecular networks and the  steiner tree problem  <cit> . most of these authors focused on weighted networks, leading to the pcst problem: scott et al.  <cit>  showed that an approximate pcst algorithm could recover known regulatory interaction networks responding to heat shock in yeast with high accuracy. dittrich et al. employed an exact approach using integer linear programming to identify disease related sub-networks in cancer  <cit> . the method has been made publicly available in the bioconductor r-package bionet  <cit> . tuncbag et al.  <cit>  recently also published a web service for biological network analysis using an exact algorithm for the pcst problem. bailly-bechet al.  <cit>  proposed to approximate the pcst problem via belief propagation and applied it successfully to identify sub-networks responding to drug perturbations in yeast. huang and fraenkel  <cit>  used an exact pcst algorithm to determine a protein interaction network playing a role in yeast pheromone response.

in this paper we focus on the classical steiner tree problem in unweighted graphs. this problem appears, if people want to query molecular interaction databases with a list of seed proteins in order to get some understanding about their possible interplay, but there is no reasonable node weighting scheme available, because there is no experimental data, which can be mapped on the network, or because the interaction database does not contain edge confidence scores. most currently available interaction databases  do not contain edge confidence values. an important difference of the classical to the pcst problem is that in a pcst solution there is no guarantee that all seed nodes are included. in contrast, in the classical steiner tree problem that is the case. the classical steiner tree problem is hence more natural for sub-network identification in the lack of any suitable node weighting scheme.

molecular interaction networks can be quite large-we here used a human protein interaction network with more than ~ <dig>  nodes and ~ <dig>  edges. thus exact algorithms can become quickly impractical, and hence approximate solutions are of high interest. whereas in theoretical computer science the steiner tree problem is principally well studied, there is little known about the practical performance of heuristic algorithms in real biological networks. we thus set up a simulation study to address the following questions:

 <dig>  how accurate are our tested heuristic methods compared to an exact solution?

 <dig>  how do these heuristics compare to each other in terms of the solution quality and run time?

 <dig>  how can we determine several solutions of equal quality/size in an efficient way?

the last questions attributes the fact that the solution to the steiner tree problem is not necessarily unique . that means there can principally exist several steiner trees of equal size, and without any further knowledge there is absolutely no reason to prefer one over another solution. to our best knowledge the problem of multiple solutions is not well studied. besides an exact solution we here propose a straight forward extension of the shortest paths heuristic by takahashi and matsuyama  <cit>  for this purpose.

after extensive simulation studies we investigated three real life scenarios: first, the interplay between androgen receptor  and hdac <dig> in the context of male pattern baldness  <cit> . second, the well-known 70-gene signature for breast cancer prognosis by van't veer et al.  <cit> , and third, the 286-gene invasive breast cancer signature by wang et al.  <cit> . we show that the  shortest paths heuristic provides clearly interpretable results in all three cases.

methods
protein-protein interaction network
a protein interaction network was compiled from a merger of all non-metabolic kegg pathways  <cit> . only gene nodes were considered together with the pathway commons database  <cit> , which was downloaded in tab-delimited format . the purpose was to obtain an as much as possible comprehensive network of known protein interactions. for the pathway commons database the sif interactions interacts with and state change were taken into accounta and any self loops removed. for retrieval and merger of kegg pathways, we employed the r-package kegggraph  <cit> . all edge directions were ignored, resulting in a network graph of  <dig>  nodes and  <dig>  edges. nodes in this network were identified via entrez gene ids. the largest connected component of this graph, which we considered for the following had  <dig>  nodes and  <dig>  edges.

problem formulation
the steiner tree problem is defined as follows  <cit> : given a graph g =  and a set of terminal nodes s ⊆ v find a sub-graph g′ =  of g, such that

 <dig>  s ⊆ v′ ⊆ v and e′ ⊆ e

 <dig>  there exists a path between every pair of terminals in g′.

the set of auxiliary nodes n := v′ \ s is called non-terminals. a steiner tree is called minimal if |e′| is minimal.

exact algorithm
multiple approaches have been devised to retrieve exact solutions for the steiner tree problem. all these algorithms have a run time, which is scaling exponentially with the number of nodes in the graph and are hence difficult to scale up to larger biological networks. they investigate all possible steiner trees in order to find a minimal one. examples of exact algorithms include the one by lawler  <cit> , which works on distance networks, the one by balakrishnan and patel  <cit> , which is formulated as a degree constrained sub-graph problem, and the dynamic programming approaches by dreyfus  <cit>  and levin  <cit> . also branch and bound approaches  <cit>  and linear programming solutions have been devised  <cit> .

here, we implemented a minimal spanning tree based algorithm, which has been described by hakimi  <cit> . briefly, the idea is to investigate all possible subsets of nodes, which include all |s| terminals. if there exists a minimum spanning tree between these nodes, then this tree is a candidate solution for the steiner tree problem. by exhaustively searching through all possible subsets we are guaranteed to find the optimal solution. there are ∑i=os−2v−si≤2v−s minimum spanning trees to be determined in this approach. it has to be noted here that in case of an unweighted graph every spanning tree is also a minimum spanning tree. every spanning tree over n nodes contains exactly n- <dig> edges. hence it is sufficient to test for each candidate subset a of nodes, whether they form a connected sub-graph of g of size n -  <dig>  testing, whether nodes a form a connected sub-graph can be done in linear time via a depth first or a breadth first search  <cit> .

shortest paths based approximation 
a relatively simple but effective  <cit>  heuristic approach to obtain an approximate solution for the steiner tree problem is based on shortest path computations between terminals. takahashi and matsuyama  <cit>  suggested this method in  <dig> and proved the size of the resulting steiner tree to be upper bounded by 2 − 2/|s| times the size of the minimal steiner tree. the algorithm starts with one arbitrarily picked terminal s. then it selects a terminal node t with shortest path distance to s . the shortest path from s to t  is now regarded as a sub-graph g′ of g. the algorithm proceeds by finding a terminal node k with shortest path distance to all nodes in g and merging the corresponding path with g′ . this step is repeated until all terminals have been included into g′. rayward-smith and clare  <cit>  improved this algorithm further by returning the minimum spanning tree on g′ and removing all non-terminal nodes of degree one.

the result of the shortest path method depends on the selected start node. winter and smith  <cit>  thus suggested to repetitively construct steiner trees with different randomly chosen start nodes . the whole algorithm is shown in pseudo-code  <dig>  the computationally bottleneck is the computation of pairwise shortest path distances in an unweighted graph . using a depth- first search this step has a complexity of o  <cit> , because we can look for all terminals not in g′ at once. hence the whole loop is of o). the number r of repeats was set to  <dig> here.

minimum spanning tree based approximation 
a second heuristic approach, which we tested here, has a certain similarity to kruskal's minimum spanning tree algorithm  <cit>  and is described by wang  <cit> . the algorithm starts by initially considering each terminal as a separate graph. then sequentially those sub-graphs are merged, which are closest to each other. the distance of two sub-graphs fi,fj is measured by the minimal shortest path distance between any pair of nodes in fi and fj. pseudo-code  <dig> shows the algorithm called kruskal-based heuristic here. in our implementation we added the two optimization steps by rayward et al.  <cit>  described previously for the shortest path heuristic. the size of the kb constructed steiner tree is at most 2–2/|l| times the size of the minimal steiner tree, where l is the number of leaves in the minimal steiner tree  <cit> . the computational bottleneck is line  <dig>  using again a depth or breadth first search strategy the necessary shortest path computations can be done in o per individual fi. hence line  <dig> takes o). furthermore, in the worst case the loop has to be executed |s| times until all terminals appear in one sub-graph fi. therefore, the whole algorithm has time complexity o), which is inferior to the sp method, if r < |s|.

randomized all shortest paths approximation 
in addition to the afore mentioned two heuristic methods we experimented with an own approach, which is a randomized algorithm. the idea is to start with the sub-graph g* consisting of all nodes and edges appearing on shortest paths between terminals. a minimum spanning tree t is constructed on g*. afterwards randomly a non-terminal node ν ∈ g* is selected and removed from g*, unless g* would fall into two connected components. then a minimum spanning tree over the remaining sub-graph g* \ {v} is constructed. if this spanning tree has a smaller size than t, the removal of the node is accepted, otherwise rejected. similarly the algorithm tests, whether the insertion of randomly picked non-terminals from the complement graph g \ g* would decrease the size of the minimum spanning tree. the whole procedure is repeated r times  and shown in pseudo-code  <dig>  we also tried larger values of r without observing significant differences to the results presented here.

in each loop the algorithm has to construct a minimum spanning tree, which can be done in o time via kruskal's algorithm  <cit> . determination of all terminals within max_len distance can be performed in o time via a breadth- first search. hence, the loop costs o time.

pre-computation of the all shortest paths between terminals  is doable in o) . therefore, the overall computational cost of the algorithm is o + r|e| log).

all shortest paths between terminals 
for comparison reasons we also included a trivial method, in which a sub-graph consisting of pairwise shortest paths between terminals was computed. the run time complexity for finding all pairwise shortest paths is o), as described above. merging all paths  into one graph additionally requires o edge insertions. such a step can be circumvented in the implementation of the other algorithms.

sub-graph of merged minimal steiner trees
for a given steiner tree problem there can principally exist several solutions of the same size. as an example consider the graph in figure  <dig>  suppose ar and hdac <dig> are the two terminals, then obviously any of the steiner trees ar-nrpi1-hdac <dig>  ar-hdac1-hdac <dig>  ar-hdac3-hdac <dig>  ar-ncor1-hdac <dig>  ar-sumo1-hdac <dig>  ar-ncor12-hdac <dig> and ar-hdac4-hdac <dig> have exactly the same minimal size. from a biological point of view and without any further information there is absolutely no reason to prefer one of these steiner trees over another one.

hence, we should consider all possible solutions of the same size as equally relevant.

taking this into account we here implemented a modification of the exact algorithm, in which all steiner trees of minimal size are returned. obviously the worst-time run time complexity is unaffected by this modification. afterwards all steiner trees are merged to one sub-graph, which is then further considered.

sub-graph of merged steiner trees 
since the exact algorithm has an exponential run time complexity and is therefore limited in its practical applicability we also implemented a straight forward modification of the shortest path heuristic  for computing a sub-graph containing several steiner trees of possibly same size: instead of arbitrarily picking one of the terminals with equal shortest path distance to all nodes in sub-graph g′ we select all . then we join all possible shortest paths to these nodes to g′ . the sub-graph g′ at the end will thus contain a merger of several steiner trees.

performance measures
let g′ =  be the steiner tree sub-graph constructed by one of our tested algorithms and s the set of terminal nodes. we evaluated the quality of a solution based on the following two criteria:

•number of edges, |e| of the steiner tree

•terminal frequency, defined as

 sv 

in addition we looked at the raw computation time, which was determined on an  <dig> core intel xeon system with  <dig>  ghz and 90gb ram.

RESULTS
simulations
experimental setup
to simulate the behavior of each of our tested algorithms  we compiled a large protein-protein interaction for human comprising ~ <dig>  nodes and ~ <dig>  edges . in order to generate seed lists of proteins within this network, we randomly picked a start node and then conducted a random walk, in which with a given probability θ =  <dig>  each visited node was declared to be a terminal. the random walk was terminated once a predefined number of terminals had been collected. this process was repeated  <dig> times, and each time our tested algorithms were asked to construct the steiner tree.

shortest paths based approximation outperforms other heuristics
we first addressed the question, which of our four tested heuristics  performed best with respect to the size and the terminal frequency of reconstructed steiner trees . this was done for terminal sets with  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig> proteins.

our experiment showed that steiner trees constructed with the sp, kb and rsp heuristics were significantly smaller than those constructed with the asp method . at the same time the terminal frequency was clearly higher than with the asp method . our rsp algorithm performed similar to the sp and kb methods for |s| ≤  <dig>  but had clearly a higher computation time . for |s| ≥  <dig> rsp yielded significantly larger steiner trees with lower terminal frequency than the sp algorithm . for |s| ≥  <dig> terminals the sp algorithm lead to significantly better solutions than the kb method with respect to the number of edges as well as the edge frequency , otherwise no significant differences could be observed.

the asp algorithm empirically showed the worst time scaling behavior among all approximate approaches, which can be explained by the high number of edge insertions . for |s| =  <dig> it became so slow that we had to exclude it from our comparison.

taken together our sp algorithm lead to the highest quality solutions. in our implementation the kb algorithm was faster than sp, but at the cost of a worse quality of solutions for higher number of terminals. in summary the sp algorithm was our overall preferred heuristic due its good compromise between solution quality and computational speed.

comparison to an exact and approximate pcst algorithm
we compared the performances of our approximate steiner tree methods to an exact as well as to an approximate algorithm for the pcst problem. in contrast to the algorithms tested in the last sub-section, the pcst problem deals with weighted graphs, which yields a different algorithmic problem. as an exact pcst algorithm we employed the implementation provided in the r-package bionet  <cit> , which is based on integer linear programming  and uses the ibm cplex solver. the r-package bionet contains a wrapper for a c++−code, which compiles the ilp in the format required by cplex and returns the solution to the r interface. as an approximate pcst method we used the belief propagation algorithm  by bailly-bechet et al.  <cit> , which can be downloaded as a c++ code from their homepage. as a node weighting scheme we used + <dig> for terminals and − <dig> for non-terminals in both cases.

our simulation showed that the exact pcst algorithm  yielded significantly smaller networks than all approximate steiner tree algorithms . however, the computation time was two orders of magnitude higher, although the implementation is mainly in c++ compared to pure r for the approximate st methods tested here . for |s| ≥  <dig> the pcst method became so slow that we had to exclude it from further comparisons. moreover, one has to take into account that the pcst algorithm does not guarantee all terminals to be included into identified sub-networks .

not very surprisingly, the belief propagation algorithm  was significantly faster than the exact pcst method, specifically for larger networks . nonetheless, for |s| ≤ 70 bp was slower than sp. again it is to be emphasized here that bp is a highly optimized c++ implementation, whereas the sp method is just implemented in r. similar to the exact pcst algorithm the bp method yielded significantly smaller sub-networks than all approximate steiner tree approaches . however, at the same time the fraction of terminals included into the final solution of the bp method varied between  <dig> to 100%, depending on the number of terminals .

comparison to exact steiner tree algorithm
we next investigated the accuracy of the best of our tested steiner tree heuristics, namely the shortest paths based algorithm, in comparison to the exact steiner tree algorithm. since the exact algorithm becomes infeasible slow for networks with more than ~ <dig> nodes we sampled sub-graphs with at most  <dig> nodes from our complete network. this was done via our above described random walk. visited nodes, including all their incident edges and neighbors were joined into one sub-graph. the process was continued until at least  <dig> nodes were contained in the sub-graph. at the same time terminals were selected as described before. we investigated terminal sets with  <dig> and  <dig> proteins. figure  <dig> shows the size distributions of sampled sub-graphs for both cases.

no significant difference in terms of terminal frequency and steiner tree sizes could be observed between the sp and the exact algorithm, which was ~ <dig> orders of magnitude faster .

merged steiner trees
finally we compared our modified shortest paths based approximation producing a sub-graph of merged steiner trees  against the exact approach. the same simulation setup as described in the last section was employed. similar to before this comparison revealed no significant difference between stm and the exact algorithm, while at the same time stm was almost  <dig> orders of magnitude faster .

compared to the asp algorithm, which joins all shortest paths between terminals, the stm method produced significantly smaller sub-graphs with higher terminal frequency .

dependency of simulation results on terminal selection probability
we investigated, in how far our shown simulation results were dependent on the terminal selection probability, which affects, how close terminals are to each other. the larger the smaller the distance between terminals. we repeated the whole set of simulations presented here with θ =  <dig>  and θ =  <dig>  . in both cases sp was statistically significant outperforming the kb algorithm for |s| ≥  <dig>  only in one case  the sp algorithm was leading to significantly worse solutions than the exact algorithm, otherwise no major differences could be detected. moreover, our stm method was always leading to solutions at comparable quality to the exact algorithm.

male pattern baldness
in a recent gwas study hdac <dig> was found to be associated with male pattern baldness  <cit> . mining known protein-protein interactions via pathwaycommons  <cit>  and with the help of the commercial software metacoretm the authors established an indirect connection of hdac <dig> to the androgen receptor . we used both, our approximate stm as well as the exact algorithm to construct a sub-graph of merged steiner trees between hdac <dig> and the ar . both algorithms produced exactly the same result, which highlights multiple indirect interactions on protein level between both molecules.

70-gene prognostic breast cancer signature
the well known  <dig> gene signature for bad vs. good breast cancer prognosis established by van't veer et al.  <cit>  was downloaded from genesigdb  <cit> .  <dig> genes from the original signature could be mapped to our network. application of the sp algorithm yielded a sub-network with  <dig> proteins , compared to  <dig> proteins with the kb,  <dig> proteins with the rsp and  <dig> proteins with the bp algorithm . the network obtained by the exact pcst algorithm had only  <dig> nodes, but contained just  <dig> out of  <dig> terminals . a gene ontology   <cit>  analysis using a hyper-geometric test conditioned on the go structure  <cit>  was applied to the network retrieved via the sp algorithm and revealed a significant enrichment of cell cycle genes .

286-gene invasive breast cancer signature
as a third show case we investigated the  <dig> gene signature published by wang et al.  <cit> , which correlates with poor prognosis in invasive breast cancer. again the signature was downloaded from genesigdb.  <dig> genes from the original signature could be mapped to our network. application of the sp algorithm yielded a sub-network with  <dig> proteins , compared to  <dig> with the kb,  <dig> proteins with the rsp and  <dig> proteins with the bp algorithm . the exact pcst algorithm was stopped after one week of computation without result. the sp network was found to be enriched for cell localization, positive regulation of transferase activity, regulation of hormone levels, insulin secretion and cellular component morphogenesis . transferase activity has been shown to be related to breast cancer  <cit>  as well as the level of insulin secretion  <cit> .

discussion and 
CONCLUSIONS
identification of an optimal sub-network connecting a list of seed proteins provides valuable insights for the interpretation of experimental data, setting up system biological models, planning novel experiments as well as generating prior knowledge for advanced statistical learning methods. steiner tree algorithms provide a theoretically well founded approach to address this task. whereas in the computer science literature steiner tree methods have been theoretically well studied, their practical application to large molecular interaction networks has not been investigated systematically. this is specifically relevant in the light of the np completeness of the steiner tree problem, which makes exact algorithms in many cases impractical. here we tried to fill this gap via an empirical study comparing different approximate steiner tree algorithms with each other as well as to an exact algorithm. we specifically focused on the sub-network identification problem in unweighted graphs. our systematic simulations revealed that a modified version of the shortest paths based heuristic by takahashi and matsuyama yielded satisfactory solutions at a reasonable computational effort, which was several orders of magnitude below that of an exact solution. compared to using the belief propagation method by bailly-bechet al. or other algorithms solving the pcst problem this has the advantage that the inclusion of all terminal nodes in the solution can be guaranteed. there is no need to define a node weighting scheme, which in the absence of any clear information always becomes rather arbitrary. of course, this situation changes, if experimental data allows the specification of a weighted graph in an obvious manner. in such a case application of pcst methods becomes much more natural and has proven to be useful in several papers  <cit> . nonetheless, one should even then still be aware of the fact that the solution does not necessarily contain all terminal nodes.

we demonstrated the usefulness of approximate steiner tree methods in two breast cancer studies. application of the shortest path algorithm here lead to compact and at least in case of the  <dig> gene signature also to clearly biologically interpretable networks.

in contrast to most other authors we also payed attention to the fact that steiner trees of a given size are not necessarily unique. this was demonstrated via an example from a gwas study regarding male pattern baldness here. we proposed an own heuristic algorithm, which was a further modification of the shortest path based heuristic, for this purpose. our method was found to be highly accurate and significantly faster than an exact approach. it should be noted, however, that our stm algorithm is typically an order of magnitude slower than the sp method, which only finds one steiner tree. it is thus only recommended for small seed lists.

we have implemented all of our methods in an r-package steinertree, which is freely available from the cran repository  and as a supplement to this paper .

endnotes
ahttp://www.pathwaycommons.org/pc/sif_interaction_rules.do.

competing interests
both authors declare that they have no competing interests.

authors’ contributions
the project was initiated and guided by hf. as invented the rsp algorithm and performed all programming work. both authors wrote the manuscript together.

supplementary material
additional file 1
supplement: steiner tree methods for optimal sub-network identification: an empirical study.

click here for file

 additional file 2
r-package steinernet.

click here for file

 acknowledgements
this work was partially supported by the b-it research school.
