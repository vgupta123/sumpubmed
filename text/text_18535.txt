BACKGROUND
recursive partitioning is a non-parametric modeling technique, widely used in regression and classification problems. recursive partitioning methods like random forests™  <cit>  are able to deal with large number of predictor variables even in the presence of complex interactions. “classification and regression trees”   <cit>  is one of the most commonly used recursive partitioning methods that can select from among a large number of variables that are most important in explaining the outcome variable. the basic idea of cart algorithm is to sequentially split the data to identify groups of observations with similar values of response variable. during each step, a number of bivariate association models are run using every suspected predictor variable, and the one that has the strongest association with the response variable is selected. then the data is split into two or more subgroups based on the optimal cutpoint in the selected predictor  <cit> . thus the selected predictor becomes a partitioning variable. for binary predictor the split is unambiguous, but for a continuous one the bets split is used and the strength of association is usually adjusted for multiple choices, strobl et al.  <dig>  <cit> . the subrgoups formed by such split are often called nodes or “leafs”. the partitioning of the data continues till a stopping condition is met such as a) nodes contain observations of only one class, b) no predictor variable shows strong association within a given node, c) number of observations within a node are less than the specified minimum threshold.

model-based recursive partitioning  <cit>  partitions the groups of observations with similar model trends . this is different from partitioning that identifies groups of observations that show similar value of the response variable. for example, a linear regression could be used to model the efficacy of treatments considered in a study. however, the treatment effects as well as the intercept parameter of this model may be different for different subgroups of patients. in this example, the model of interest relates treatment and clinical response but the model parameters can be different for different subgroups. “model-based recursive partitioning” partitions the feature space to identify subgroups of patients with similar treatment effects and predicts clinical response based on the estimated treatment effects within different subgroups. the mob() function  <cit>  implemented in the “party” package in r  <cit>  allows one to perform model-based recursive partitioning. this function takes the model of interest and partition variables  as input arguments and returns a tree with fitted models in each terminal node.

regardless of the choice of recursive partitioning method , single tree models could be instable to small changes in learning data. in other words, a slight change in learning sample can produce substantially different tree structures thereby inducing high variability in predictions obtained across trees  <cit> . therefore, ensemble methods like “bagging”  <cit>  and “random forests” - random selection of features  - are commonly exercised to build large number of tree models and aggregate predictions cross the diverse set of trees to obtain stablepredictions  <cit> . both the methods, bagging and random forests, construct trees on random samples of learning data. random sampling is achieved either through bootstrapping  or subsampling . bagging, involves fitting trees to each random sample while considering the complete set of predictor variables during the process of splitting a tree node. “random forests” produces a more diverse set of trees because at each level of a tree, a random subset of predictor variables is considered from which one might be selected for splitting the node. this allows a tree model to incorporate useful but weaker predictors that otherwise would be dominated by stronger predictors  <cit> .

the main objective of this paper is to introduce the mobforest r package which implements random forest for both bagging and random variable selection methodology for model-based recursive partitioning. the mobforest package is available from the comprehensive r archive network  at http://cran.r-project.org/package=mobforest. this package computes predictions on multiple model-based trees that are constructed through random forest methodology. predictions are aggregated across trees to produce stable predictions. the package provides functions to compute predictive accuracy estimates on individual trees and the complete mobforest. predictive performance is computed on out-of-bag  cases – cases not used in a tree building process  <cit> . the metrics implemented to compute predictive performance are “pseudo r2” and mean square error  for continuous outcome and “proportion of correctly classified”  for binary outcome. the pseudo r <dig> predictive accuracy metric is defined as the proportion of total variation in outcome explained by the tree model . both metrics “pseudo r2” and pcc range between  <dig> and  <dig>  the mobforest package computes variable importance scores and provides functions to draw variable importance and predictive performance plots. this package can use multiple cores/processors for parallel computation. the parallel package that supports parallel computing  is utilized for building trees on multiple cores/processors simultaneously. the computation time is greatly reduced if the analysis is run on a multi-core machine.

implementation
overview of functions available in mobforest package
the mobforest package contains functions for constructing model-based trees incorporating random forest methodology, computing predictions, predictive accuracy estimates, residuals plot, and variable importance plot. the detailed description of all the implemented functions is provided in the manual posted at cran . here we outline most important functions.

tree modeling
the main function used to develop model-based trees incorporating random forest methodology is called mob_rf_tree(). the mob_rf_tree() is a modified version of mob() function, implemented in the party package in r. the source code in the mob() function was modified such that a random subset of partitioning variables is selected during the process of splitting a tree node.. from this subset, a variable associated with the highest “parameter instability”  <cit>  is selected as a splitting variable.

setting up forest controls
before starting the analysis the users are recommended to specify the parameters that control forest growth. the parameters can be set using mobforest_control() function that returns an object of s <dig> class mobforestcontrol containing forest controls. the parameters include:

• ntree: number of trees to be constructed in mobforest 

• mtry = number of input variables randomly sampled as candidates at each node .

• replace = true/false. replace = true performs bootstrapping. replace = false  performs sampling without replacement.

• fraction: number of observations to draw without replacement . this parameter is relevant only if replace = false).

• mob.control: object, implemented in party package, used to set up control parameters for building model-based trees. a few important parameters in this object include:

○ alpha: a node is considered for splitting if the p value for any partitioning variable in that node falls below alpha .

○ bonferroni: logical. should p values be bonferroni corrected? .

○ minsplit: integer. the minimum number of observations  in a node .

the main function mobforestanalysis()
the mobforest package provides one main function called mobforestanalysis() that takes all the necessary parameters as input arguments to start the mobforest analysis for model-based recursive partitioning. the input arguments to this function are kept similar to those in mob() from the party package, so users familiar with that function have an easy transition to using mobforestanalysis(). mobforestanalysis() takes following input parameters:

• formula: an object of class formula specifying the model that will be fit within each node. this should be of type y ~ x1 + … + xk where the variables x <dig>  x <dig>  …, xk are predictor variables and y represents an outcome variable. in this paper, this model will be referred to as the node model.

• partitionvariables: a character vector specifying the partition variables used to build trees within the mobforest.

• data: input dataset that is used for constructing trees in mobforest. learning samples and out-of-bag  samples are created from this data . the mobforest is constructed using learning samples and validated on out-of-bag samples.

• mobforest.controls: object of class mobforestcontrol returned by mobforest_control(), that contains parameters controlling the construction of mobforests.

• model: model of class statmodel used for fitting observations in current node, and it is used in the same manner as used in mob(). this parameter allows fitting a linear model or generalized linear model with formula y ~ x1 + … + xk. the parameter “linearmodel” fits linear model. the parameter “glinearmodel” fits poisson or logistic regression model depending upon the specification of parameter “family” . if “family” is specified as binomial() then logistic regression is performed. if the “family” is specified as poisson() then poisson regression is performed.

• family: a description of error distribution and link function to be used in the model, and it is used in the same manner as used in mob(). this parameter needs to be specified if generalized linear model is considered. the parameter “binomial()” is to be specified when logistic regression is considered and “poisson()” when poisson regression is considered. the values allowed for this parameter are binomial() and poisson().

• newtestdata: a data frame representing test data for independent validation of mobforest model. this data is not used in the tree building process.

• processors: the number of processors/cores on your computer. by default only one core is used for computations. if a computer has more than one core then increasing this variable to a value less than or equal to the number of cores will allow the package to exploit the multi-core parallelism and produce results relatively faster.

the function mobforestanalysis() returns an object of class mobforestoutput which stores results from random forest analysis. this object stores predicted values, predictive accuracy estimates, residuals and variable importance scores produced during the analysis. this object is passed as an input argument to other functions to extract the relevant results.

predictions
after constructing a model-based tree on a learning set using the function mob_rf_tree(), the predicted values for each subject are computed using the function treepredictions(). this function, called within mobforestanalysis(), takes a dataset and a tree model as input arguments and returns fitted values of response variable on each observation within the dataset. based on the characteristics of each observation, the treepredictions() function traverses through the tree model to an appropriate terminal node and obtains model parameters to compute fitted values of response variable. if the model of interest is logistic regression, then the fitted values are predicted probabilities of a classification . the mobforest package summarizes predictions obtained across multiple model-based trees. the fitted values are averaged across the tree models  and can be obtained using the function getpredictedvalues(), which is a s <dig> method of class mobforestoutput. this function returns fitted values averaged on oob data only, complete data or a new test data ). the getpredictedvalues() function takes three input arguments.

• mobforestoutput object - returned by mobforestanalysis()

• oob = true/false: oob = true  returns predictions across tree model on out-of-bag data . oob = false returns predictions on complete data.

• newdata = true/false. if newdata = true, the oob parameter is ignored and the predictions on the new test data, supplied as a newtestdata argument to mobforestanalysis(), are returned. newdata = false  ignores newdata parameter and returns predictions based on the oob parameter.

the function getpredictedvalues() returns a matrix with  <dig> columns. the first column contains average predicted value for each subject across all the trees models. the predictions are averaged on oob data, complete data or a new test data . the second column contains standard deviation of predictions, for each subject, across all the tree models. the third column contains residuals – difference between observed outcome and expected prediction - for each subject across the tree models. the residuals are reported only when linear or poisson regression is considered as the node model.

predictive accuracy and error estimates
metrics
the oob cases provide a fair means of performance/error estimation based on training data alone. the predictive accuracy estimates are computed differently for a logistic regression model than linear or poisson regression model. when linear or poisson regression model is considered, predictive accuracy metric r2k is defined as the proportion of total variation in outcome variable explained by the kth tree on oob cases. in case of logistic regression model, the predicted probabilities for oob cases are converted into classes  based on the probability cutoff specified by the end user  and predictive accuracy pcck is defined as the proportion of oob cases correctly classified by the kth tree model. both metrics pcck and r2k range between zero and  <dig>  in case of linear regression model, r2k is a function of “sum of squared errors”  and “total sum of squares”  on oob data used to build the kth tree. it is computed as

  rk2=1−sseksstok 

where, 

  ssek=∑x=1nyx−y^x <dig> 

  sstok=∑x=1nyx−y¯ <dig> 

and yx is the observed outcome for xth oob case, y^x is the predicted outcome for xth oob case, n is the number of oob cases not considered in building kth tree, and y¯ is the mean observed outcome of oob cases. it should be noted that r2k can be negative when ssek is greater than sstok. in such situations, we force r2k to zero. the other metric used for measuring predictive accuracy is “mean square error”   <cit> . msek defined as the mse estimate on oob cases for the kth tree model and is calculated as follows.

  msek=∑x=1nyi−y^x2n 

predictive performance is also estimated at “forest level” - after aggregating oob predictions across all the trees and then computing r <dig> and mse.

predictive accuracy function
the function predictiveaccuracy()  can be used to extract predictive accuracy estimates over oob cases and/or a new test data. it takes three input arguments:

• mobforestoutput object

• newdata = true/false. if newdata = true, r <dig>  and mse are obtained for the new test data supplied as a newtestdata argument to mobforestanalysis(). newdata = false  ignores newdata parameter and returns r <dig>  and mse estimates based on oob predictions and complete dataset predictions summarized across all trees.

• plot = true . this allows user to purview the distribution of r <dig>  and mse estimates for oob cases across all the trees, overall r <dig>  and mse estimates when oob predictions are aggregated across all the trees, and overall r <dig>  and mse estimates when predictions on new test data are aggregated across all the trees. plot = false produces no plot.

predictiveaccuracy() returns a list containing: a) oob r <dig>  estimates across all the trees, b) mse estimates on oob data across all the trees, c) overall r <dig>  estimate when oob predictions are aggregated across all trees, d) overall mse estimate when oob predictions are aggregated across all trees, e) r <dig>  estimates on complete data across all the trees, f) mse estimates on complete data across all the trees, g) overall r <dig>  estimate when complete-data predictions are aggregated across all the trees, h) overall mse estimate when complete-data predictions are aggregated across all the trees, i)the node model and partition variables used, j)if newdata = true, overall r <dig>  and mse estimates when predictions on new test data are aggregated across all the trees.

variable importance variable importance assessment is a process of ranking variables in the predictor set according to their importance in producing accurate predictions. “permutation accuracy importance” method  <cit>  is used to compute importance scores for each variable. to determine the importance of a variable m, values of m in the oob cases are randomly permuted and pccp  or msep  is obtained through variable-m-permuted oob data. next, msep is subtracted from msek  which was obtained using original un-permuted oob data. the average of this number over all the trees in the forest is the raw importance score for variable m. one can invoke functions getvarimp() and varimplot()  to produce variable importance scores and variable importance plot.

residual plot one can invoke the function residualplot()  to produce the following diagnostic plots.

• residuals vs. predicted outcomes for oob cases: this plot should produce a distribution of points randomly scattered across  <dig>  regardless of the size of the fitted value.

• histogram of oob residuals: this plot is expected to be roughly normal with mean  <dig> 

it should be noted that the above diagnostic plots are typical when the fitted values are obtained through linear regression but not when logistic or poisson regression is considered as a node model. therefore, mobforest package produces the above residual plots only when linear regression is considered. for logistic or poisson models, a message is printed saying “residual plot not produced when logistic of poisson regression is considered as the node model”.

RESULTS
we illustrate the use of mobforest package on alcohol treatment data from the combine study  <cit> . the purpose of this study was to evaluate the efficacy of pharmaceutical and behavioral therapies  for treatment of alcohol dependence. the study enrolled  <dig> alcohol-dependent adults  from  <dig> different sites. subjects were randomized into  <dig> treatment groups. there are  <dig> groups made up of 2 × 2 ×  <dig> factorial design in treatments; naltrexone/placebo, acamprosate/placebo, and cbi + medical management/medical management only. the treatment duration was 4 months. the goal for this analysis was to estimate the effects of treatments on a continuous outcome variable “fifty.reduce” – indicator variable  representing if a subject reduced his/her drinks per drinking day by at least 50% from the baseline. our node model of interest was

  logpy=11−py=1=β0+β1x+β2t2+β3t3+β4t4+β5t5+β6t6+β7t7+β8t8+e 

where y represents “fifty.reduce”, x represents baseline percent drinking days , tj is a 0/ <dig> dummy variable representing the jth treatment,, β <dig> represents the intercept term of regression model, β <dig> represents baseline effect, β <dig> …,β <dig> represent the treatment effects for treatments t <dig> …, t <dig> , and e represents residuals . we used mobforest package to estimate the treatment effects for different groups of patients, partitioned through model-based recursive trees, and summarize outcome predictions across large number of trees.

prior to the analysis, the data was loaded in r and partitioned into learning and validation sets. the training set contained  <dig> subjects  and the independent validation set contained  <dig> subjects . the validation set was used as an independent dataset for evaluating the performance of random forest model. we ran mobforestanalysis() function on the training data with following forest settings: trees =  <dig>  replace = f , alpha =  <dig> , bonferroni = t, and minsplit =  <dig> . the parameter “prob.cutoff” was set to  <dig> . predicted probabilities, p, are converted to classes  based on the threshold “prob.cutoff”  <dig> . a list of  <dig> variables was supplied as partition variables . it took 28 minutes to perform mobforest analysis on a  <dig> bit machine with microsoft windows xp professional operating system. the machine had  <dig> gigabytes of ram and intel i7- <dig> @  <dig> ghz cpu . all the eight cores were used during the mobforest analysis on the combine dataset.. the results  on oob data, complete data, test data) were produced through this analysis. after producing results, we used the function varimplot() to produce a variable importance plot. the figure  <dig> shows the variable importance plot. according to figure  <dig>  the top  <dig> variables show the strongest association with the treatment outcome include “likely.to.d” – likely to drink score, “focdsrci” – obsessive compulsive drinking scale, “action” - university of rhode island change assessment score, “pssscore” – perceived stress score, and “tnegaff” – negative affect from alcohol abstinence on self efficacy. then we produced plots of predictive accuracy estimated across individual trees using the function predictiveaccuracy(). figure  <dig> shows the predictive performances  on oob data and the independent validation set. figure  <dig> also reports the predictive accuracy estimates at “forest level” - after aggregating predictions ) of subject across all the trees. this plot is not a comparison of performance of single trees to the performance of a forest, but simply a graphical representation of selected measures of predictive accuracy. the overall pcc estimate measured after combining oob predictions across all  <dig> trees is  <dig>  . the pcc estimate on the independent validation dataset was  <dig> . the “tree level” performance estimates obtained on oob cases ranged from  <dig>  -  <dig> . we also computed area under roc curve  for predictions obtained on training and independent validation datasets. auc was computed using wilcoxon-mann–whitney statistic implemented in “rocr” package in r. auc estimate on training dataset was  <dig>  and validation dataset was  <dig> .

we also did fit the learning data using a logistic regression model containing all the parameters in equation  plus the best subset of partition variables - selected through stepwise regression analysis with forward selection procedure. four of the top  <dig> important variables obtained through mobforest analysis were also selected in the final model obtained using stepwise regression. these variables include “likely.to.d”, “focdsrci”, “action”, and “pssscore”. the auc estimate for predictions obtained through stepwise regression on the training dataset was  <dig>  and validation dataset was  <dig> . therefore, mobforest showed better performance than the stepwise regression method.

CONCLUSIONS
the r package mobforest implements random forest method for model-based recursive partitioning. this package combines predictions obtained across diverse set of trees to produce stable predictions. the mobforest provides functions for producing predictive performance plots, variable importance plots and residual plots using data contained in the mobforest object. the package uses multiple cores/processors to perform parallel computations. the parallel package that supports parallel computing  is utilized for faster computation. the mobforest package supports linear, poisson and logistic regression models for use in model-based random forest type analysis.

availability and requirements
project name: alcohol dependence study

project home page:

operating system: windows platform

programming language: r

license: gpl 

competing interest
the authors declare that they have no competing interest.

authors’ contributions
be conceived the project and oversaw its design. nrg and be developed the algorithm. nrg packaged the classes and functions into an r package and drafted the manuscript. be and gb contributed in writing sections of the manuscript. all the authors read and approved the final manuscript.

