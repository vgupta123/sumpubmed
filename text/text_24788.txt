BACKGROUND
the emerging field of synthetic biology
 <cit>  applies rational engineering principles to the design of biological systems. work in this area has often focussed on the creation of small-scale genetic devices, such as oscillators
 <cit> , toggle switches
 <cit> , clocks
 <cit> , boolean logic gates
 <cit>  and half-adders/subtractors
 <cit> .

one interesting aspect of such devices concerns their potential for multifunctionality . most existing engineered gene circuits have been constructed to perform a single function, but recent results suggest that such devices may be able to implement multiple functions
 <cit> . this property is often observed in neuronal networks
 <cit> , as it allows organisms to select multiple behavioural “programs” using the same group of neurons. the ability to engineer multifunctionality into genetic circuits may have significant performance benefits when a range of different responses or behaviours is required. in this paper we describe a model for such a genetic circuit, which may be dynamically reconfigured  to serve as both a nor gate  and a nand gate , depending on its input. we give the results of single cell computational experiments, before showing how two-dimensional, population-based simulations can shed valuable light on both the behaviour of the system and its beneficial features.

we describe this circuit in the context of our previous work
 <cit>  on continuous computation in engineered gene circuits. by “continuous computation”, we mean gene-based computation that maximises the period during which outputs are valid and “readable”, by using “real-valued” signals.this addresses issues of reliability in such circuits, by  carefully interpreting binary signal values in terms of continuous/analogue value thresholds over time, and  using the concept of branch prediction . during the execution of a program, a “fork” may occur as the result of a conditional statement , as in the operation of a logic gate, where the output depends on the inputs. branch prediction is a technique generally used for saving time when a device faces this kind of decision, and a prediction may be either conditional or unconditional. the latter  is used when the probability of one branch being taken is significantly higher than the other; in this case, the high probability branch is taken by default, and the situation is only corrected if it transpires that the decision is incorrect, based on the expression evaluation. the circuit proposed here uses conditional prediction, by assuming that the previous output expressed will be carried forward to the next output  before processing the inputs.

we present our circuit design in figure
 <dig>  although it can behave as either a nand or a nor gate, for clarity we describe here only the nor logic interpretation of the circuit, and present the multi-functional behaviour in the results and discussion section. the nor  logic circuit is formed by three sub-components: 1) a logic or gate, 2) a logic not gate  and 3) a genetic switch. as the nor logic function is an inverted or, the output of the inverter  could be taken as the output, along the lines of a classical genetic nor
 <cit> . however, in our design, the output is denoted by the protein expressed by the switch, , as this allows us to implement branch prediction . in the results and discussion section we highlight the advantages of the proposed circuit.

the inputs of the circuit, represented by molecules a and b, induce the expression of both genes g <dig> and g <dig>  which produce, in turn, proteins x and i <dig> respectively. product x represses the production of i <dig>  which is expressed by the inverter using gene g <dig>  inducers i1and i2are in charge of controlling the switch, and change its direction. this third part of the circuit  is formed by two promoters which control the expression of three genes. repressor r <dig> represses the expression of gene g <dig> unless inducer i <dig> sequesters it, forming the complex c <dig> . symmetrically, r <dig> represses the expression of both genes g4and g6which, in turn, produces the reporter out.

we now briefly consider the possible implementation of our system. the two main components we use are a genetic toggle switch and nor gate, both of which have previously been successfully demonstrated in the laboratory
 <cit> . the main novelty in our proposed scheme  lies in the connection between both components. we believe that this is where attention should be focussed during future laboratory work. the outputs of the nor gate  are inhibitors of the r <dig> and r2repressors. by being sequestered, the repressors are rendered inactive, and the implementation of such a scheme is supported by a recent study
 <cit> , in which examples of such negative inhibition are demonstrated. further investigations may also focus on alternative implementations of the connection scheme, without altering the fundamental behaviour of the device. one possible route to this may lie in directly repressing the switch promoters, instead of implementing the protein-protein interaction. there is also the possibility of using rna-based logic to implement connections, as described recently in
 <cit> . the key consideration that should inform the engineering process is the fact that the maximum expression level of the nor output must be at least equal to the maximum expression level of the switch inputs. this is what allows the switch to “flip”. conversely, the minimum expression level of either nor output must be lower than the minimum levels of either switch input. these two features allow the device to have the desired multi-functional behaviour.

in terms of traditional electronic logic, our circuit therefore corresponds to a system that produces, by default, a “high”, or “1”, signal in the absence of any input signals equal to “1”. as soon as either inputs equal “1”, the output signal is “pulled low” to “0” . once all “1”-valued inputs are removed, the circuit defaults back to “high”. in the results and discussion section, we study the dynamics of the circuit and - more importantly - the meaning of a logic “1”-valued input, from which the multi-behaviour feature of the system is derived.

RESULTS
we perform a number of computational simulations , with the two main aims of investigating the behaviour of the branch-predicting nor gate, and then examining its potential as a reconfigurable device. in both cases, we perform single-cell and population-based experiments, to investigate both the internal dynamics of the circuit and its effect on a spatially-distributed collection of cells .

single cell nor
we first emphasise the difference between static and dynamic  observations. static measurements are performed by testing a single logic case , observing from the initial state of the circuit until a steady-state is reached. dynamic measurements are taken once initialisation has occurred, and the logic input cases are modified sequentially. the outputs obtained are not always consistent, and we conclude that the continuous paradigm is more appropriate  for these circuits.

figure
 <dig> shows static observations of the nor gate. we represent its output value in terms of the concentration of out:  <dig> nm corresponds to an input value of “0”, and 5nm corresponds to an input value of “1”. as expected, we only observe an high positive output when both inputs are absent . in the other cases, although the output is initially expressed due to the constitutively expressed inducer i <dig>  it is soon repressed due to input action.

it is important to note, however, that this performance is only observed when the system starts from a “pristine”  state. therefore, this behaviour is only useful if the circuit is intended for “single use”. in non-trivial synthetic biology applications, it may well be the case that a circuit is used many times, with different inputs, so it is important to test its behaviour over an extended period. once the system has been initialised with a set of inputs, we therefore need to switch over to a dynamic observation model
 <cit> .

in order to study the behaviour of the logic gate over time, we compare the concentrations of inducer i <dig> and our output signal, out. figure
 <dig> shows the concentration of these two proteins over time while the inputs to the circuit are changed dynamically. we observe correct branch prediction, in that an output tends to reflect the previous output. both i <dig> and out are produced at the outset, when there are no inputs to the system. as soon as one of the inputs is introduced , the correct output must be “0”. a nor without prediction, represented here by i <dig>  would switch off the expression almost immediately, but out is still expressed for some time . this is due to the fact that it takes some additional time to “flip” the switch that is controlling out, but this delay makes our circuit much more reliable . by illustration, unwanted noise in the input will instantly affect i <dig>  but the noise needs to be very persistent in order to affect out. the same behaviour is observed when the proteins are again expressed , where outdelays its expression before returning to “1” . in both delays, the system is still predicting the previous output.

single cell nor with noise
the effect of noisy inputs is shown in figure
 <dig>  where both input concentrations are affected by stochastic noise within different intervals. we highlight in this way the different behaviour of the classic nor represented by the product i2and our approach represented by out. during the 0- <dig> input phase  the input values vary within the range  nm. this underlines the importance of interpreting binary values in terms of ranges of analogue biological variables. the small changes in a and b test the definition of logic “0” in this experiment. higher concentrations within that range are enough to stop the production of the inducer i <dig> , but are still understood as a logic “0” by our circuit . that “understanding” is precisely due to the engineered predictive behaviour: as the previous state was 0- <dig> , the circuit keeps that state regardless of the noise present.

dynamic predictions are observed after the 0- <dig> case, as the initial - static - conditions are no longer valid. during the 1- <dig> input phase  input a varies within the interval  nm  while input b is still varying within the range  nm . in this scenario, the expression of protein i2is completely repressed, as the circuit senses this input as a clear logic “1” -not noise- for both i2and out. the same thing happens during the next  cases, where the inputs vary within the same intervals for both logic values and output concentrations are the same. in order to get a more valuable insight into the system, we change the meaning for a logic “0” for the final case 0- <dig>  where it varies within the interval . such a low signal causes the production of i2but not at full capacity due to existing x repressors in the system. that amount, which can be interpreted as a positive output of i <dig>  it is not enough to change the direction of the switch. thus, the low inputs  are interpreted as noise for our system and out will stay in the previous state, which is a “0” output. the noise causes an unclear signal to be received at the input: neither a clear logic  <dig> nor a clear logic  <dig>  thus the system predicts the previous behaviour.

in figure
 <dig>  the results of a full stochastic simulation are shown, using the input profile of figure
 <dig>  the objective is to test the system in a situation where the concentrations of all proteins are subject to randomness. for this purpose, we added gaussian noise  at every iteration of the integration. as we see, the overall behaviour remains the same, which allows us to conclude that the logical input values are the key factor determining the correct functioning of the genetic gate. we also observe that the levels of out are more distinct  than the levels of i <dig> 
 <dig>  all expression products in the system are subject to randomness,with gaussian noise applied to all concentrations in the integration steps of the equations.

population-based nor
we now study the behaviour of the circuit inside a population of simulated cells growing on a two-dimensional surface. we use an agent-based simulation approach, which considers the physical factors within the system  the first 2-dimensional experiment considers the surface divided in two different areas depending on the inputs they contain  as seen in figure
 <dig>  the left-hand side of the surface has both input molecules present , and the right-hand side has no input molecules present . as before, the logic “1” concentration is set at 5nm and the logic “0” is set at 0nm. we begin with a single cell in the centre of the surface; cells are “washed out” at the edges, and we assume the constant presence of nutrients . in these simulations, we assume out to be a green fluorescent protein , and the cell generation time is kept very high , in order to aid visualisation. that is, because of the delay caused by the switch, we would not be able to observe the desired behaviour at this scale with much lower cell doubling times. thus, in order to perform the spatial study with a scale that allow us to visualise single cell shapes we increase the doubling time to  <dig> hours .

we depict the behaviour of the simulated colony in figure
 <dig>  starting with a single cell in the centre of the region. as the number of cells increases, those to the right-hand side eventually exhibit fluorescence, as they inhabit the 0- <dig> region, while those to the left  show no fluorescence, as expected.

after  <dig> hours, we notice some cells on the right-hand side that are not producing light, when they should actually display a high output concentration. this is due to the fact that those cells are moved from the left-hand side  at high speed while they are being pushed strongly. therefore, the circuit inside those cells has not had time enough to respond and start expressing out . after 130h the cells clearly signal the input concentration corresponding to the inputs on the surface .

we now look at the issue of cell movement in more detail. in figure
 <dig> we show a population growing in a half and half  world , until we obtain an almost perfect pattern . this precision is obtained due to the low speed  of the cells in the centre. in figure
 <dig> we show the result of a subsequent experiment to investigate the effect on pattern formation of a higher velocity field.

in this experiment, the environment  is divided into two zones: the centre: with a 1/ <dig> input profile, and the remaining area, with a 0/ <dig> input profile. the cells start growing once inoculated at the centre of the trap . obviously, as seen in the velocity field , the cells move in one of two different directions, depending on their physical location: from centre to left, and from centre to right . when the cells reach the 0/ <dig> area we would expect a cell’s circuit to display a “1” state. this is what we observe, but with a time delay, as seen in the previous differential study. in this particular case, the higher a cell’s velocity, the more space it will cover before processing the inputs. this explains the gap between the beginning of the 0/ <dig> area and the region in which the cells start expressing the output out. this time-space delay plays a very important role in attempts to generate specific patterns in a cell population. if that is the case, there is a key parameter to bear in mind: the velocity of the cells, which can - of course - vary within the same colony .

it is important to notice that our circuit offers significant possibilities for pattern formation or sensing studies. instead of recognising only a logic “1” and a logic “0”, the circuit is also able to distinguish between a high logic “1” and a low logic “1”, and change its behaviour accordingly. we now investigate further this useful property.

multi-functional behaviour
in this section we use different sets of simulations to illustrate one of the main features of the circuit: the possibility of reusing it  for evaluating a function other than nor. the key factor lies in how we define input “1”. in contrast to our previous experiments, where this is denoted by an input concentration of 5nm, here we reduce the input “1” concentration to  <dig> nm. by “flipping” the high input signal from  <dig> to  <dig> nm, we obtain a change in functionality, from nor to nand . such a possibility could prove invaluable in terms of saving space in a hybrid bio-device, if differential behaviour is required for a range of input values. we compare our approach to that of budyka
 <cit> ; their gates use light as an input, and the functionality of a gate may be altered by changing its wavelength .

in figure
 <dig> we show the behaviour of the circuit with a concentration of  <dig> nm representing input logic “1”, in contrast to the  <dig> nm of figure
 <dig>  we observe how i2reacts to the changes in exactly the same way as before, thus displaying a nor behaviour. however, the out signal now gives the correct output reading for a nand logic function . when both inputs are introduced , the circuit stops producing out, and does not express it again until the inputs are gone .

figure
 <dig> shows the behaviour of out and i2over time when different input concentrations are used as logic values. we show logic “0” on the x-axis of the surface graphs, and logic “1” on the y-axis. the z axis  represents the cumulative value of the targeted output protein  over  <dig> simulated hours, while inputs are changed according to the profile of figures
 <dig> and
 <dig>  for example, if we fix the value of logic “0” to  <dig> nm, we observe a change in the concentration of out when the concentration of logic “1” exceeds  <dig>  nm, when out abandons the contour line of  <dig> and enters the area of  <dig> . however, that change is not present in the expression of i <dig>  where the scenario is more homogeneous. this feature is the root cause of the multi- functional behaviour we have just demonstrated.
 <dig> and
 <dig> are performed, and the cumulative values of out and i <dig> over time are recorded. those values are depicted in two ways:  colour surface  with a linear scale from  <dig> to  <dig> , and  contour lines  with a logarithmic scale for detail behaviour. output values  shown in arbitrary units corresponding to the cumulative value.

multi-functional behaviour in cell populations is shown in figure
 <dig>  where a bacterial colony grows on a surface with inputs that are spatially distributed as follows: top-left quadrant has no inputs , top-right quadrant has input a , bottom-left has input b , and bottom-right has both inputs, a and b . the top row shows the level of out when logic “1” is fixed to  <dig>  nm, and the bottom row shows it set to  <dig>  nm . we clearly observe the difference between the nor and nand behaviour of the same circuit placed in different input scenarios.

CONCLUSIONS
the definition of logical values is of vital importance if different synthetic regulatory networks are intended to work together. here we show that a given genetic circuit can display very different behaviours, depending on the thresholds of a specific input logic signal. this will be of significance for future genetic circuit design. the circuit proposed in this paper harnesses this fuzzy behaviour by reconfiguring its behaviour between the nand and nor logical functions in response to different input standards. in this way, the circuit can be reused for either of those two functionalities without modification. we highlight the importance of computational studies in order to find abnormal behaviours inside circuits, and to identify the key features of a system. although in this work we take all parameter values from the literature, the simulation results help us to focus on the specific areas of interest to parts selection for future laboratory validation.

