BACKGROUND
the steady increase in biomedical data and publications has led to the need for computational methods for integration and analysis  <cit> . controlled vocabularies and ontologies for representing biomedical entities, their terms and their relationships are being developed in order to accomplish this task, with the gene ontology  <cit>   probably being the most successful current bio-ontology. there are multiple ontologies for specific disciplines in biomedicine, which enable scientists to deal with the huge amount of data produced, but a major problem is the lack of interoperability between ontologies of different domains of biomedical knowledge.

the open biological and biomedical ontologies  foundry aims to coordinate a family of ontologies that are interoperable and logically well-formed  <cit> . these ontologies are constantly growing as knowledge grows , which implies that new quality checking approaches are needed, since manual creation and maintenance of large ontologies is time-consuming and error-prone.

in principle, a good way to develop ontologies is to define concepts in terms of other more elementary  concepts . groups involved in the go  <cit> , the mammalian phenotype ontology   <cit> , the human phenotype ontology   <cit> , and the worm phenotype ontology  <cit>  are now developing logical definitions for ontology terms using terms from other ontologies, with pato, an ontology of phenotypic qualities, being a key tool in this effort  <cit> . for instance, consider the following logical definition of the hpo term hypoglycemia, specified in obo format:



id: hp: <dig> ! hypoglycemia

intersection_of: pato: <dig> ! decreased concentration

intersection_of: qualifier pato: <dig> ! abnormal

intersection_of: towards chebi: <dig> ! glucose

intersection_of: inheres_in fma: <dig> ! portion of blood

hypoglycemia refers to a decreased concentration of glucose in the blood. the logical definition uses relations and follows the pattern described in previous work on defining phenotypes  <cit> . the logical semantics are made explicit in the translation to the ontology web language   <cit> . the translation used in this manuscript represents a relatively simple design pattern that nonetheless leads to the desired inferences.

class: hypoglycemia

equivalentto: 'decreased concentration' and towards some 'glucose '

and inheres_in some 'portion of blood' and qualifier some 'abnormal'

note that we use the term labels rather than identifiers for the purposes of readability. here, the class hypoglycemia is defined as being equivalent to the intersection of all classes of things that are "a concentration which is lower relative to the normal" , "deviate from the normal or average" , with respect to  glucose, and inhering in "blood"   <cit> ). we use the formal inheres_in relation to relate qualities to their bearers - here the bearer of the quality is the blood. the relation towards is used to connect the quality  to the additional entity type on which the quality depends   <cit> . we use this together with the term for glucose from the chemical entities of biological interest  ontology  <cit> , essentially stating that the concentration is a concentration "of" glucose. we have thus defined hypoglycemia as the intersection of these four classes. defining ontology terms in this way assists in automating ontology construction, and provides a tool for integrative computational analysis of human and model organism phenotypes against the background of the knowledge incorporated in ontologies such as go, fma, and chebi  <cit> .

in owl, an ontology is a collection of axioms. an axiom can be thought of as a statement or a sentence, and includes ontological relationships such as those involving is_a or part_of. in the context of this paper, we say that axioms can be asserted  or inferred .

having created logical definitions, one can apply automatic reasoners, which are systems for computing the logical consequences that can be inferred from a set of asserted axioms. because reasoning systems can infer the positions of classes in a subsumption hierarchy based on their computable, logical definitions, they can serve as powerful tools in ontology development and maintenance  <cit> . the asserted subsumption hierarchy of a target ontology  should be a logical consequence of the definitions of the terms. as seen in figure  <dig> the terms abnormal ion homeostasis and abnormal copper homeostasis of the target ontology, the mpo, are defined logically. this has been done by referencing the go term ion homeostasis for the first and copper homeostasis for the latter mpo term. since there exists a subsumption axiom between the referenced go terms  a reasoner will infer that the mpo term abnormal copper homeostasis is a subclass of the mpo term abnormal ion homeostasis.

thus we assume that this relationship should also be asserted in the mpo, i.e., the knowledge represented in building block ontologies should generally be reflected in the target ontology as well.

we assume that a major goal is to create agreement between the relationships that are asserted in the target ontology and those that can be inferred from the building block ontologies. this can pave the way for extensive data integration with other ontologies to facilitate mining and querying biological knowledge  <cit> . the creation of the logical definitions for ontology terms mainly depends on manual curation by experts. the curators have to deal with imprecision, missing knowledge and regular changes and updates in the referenced ontologies, and so this can be an enormously complex task. therefore, one approach to evaluate a target ontology is to run an automatic reasoner over the combined ontologies and logical definitions and then to check how well the manually asserted class-level axioms agree with the ones found by the reasoner. depending on the knowledge and the kind of disagreement detected, one may either adapt the logical definitions or revise the subclass relationships of the target ontology. of course cases may also exist in which the knowledge of the target ontology cannot be fully reasoned over, or cases in which the asserted relationships and inferred relationships represent different views or aspects of knowledge on a particular entity. in many cases, however, it is likely that a disagreement between the asserted hierarchy in ontologies such as the mpo or the hpo with the hierarchies of ontologies for anatomy, biological process, cell types, etc., indicates a logical error that should be manually reviewed by a curator. the developers of the logical definitions therefore need simple tools to evaluate their definitions and the target ontology in a fast and easy way.

currently, the standard approach is to do minimal assertion in the target ontology, and using a reasoner such as pellet  <cit>  or hermit  <cit>  to deductively infer the target ontology polyhierarchy. most ontology environments such as protégé <dig>  <cit>  or topbraid composer  <cit>  are geared towards this workflow. however, we are faced with the reverse situation in application-driven biological ontologies where the target ontology is often constructed before the building block ontologies, and we want to leverage assertions in the target ontology to improve the building block ontologies and the logical definitions through an iterative process of mutual alignment. this has been the case for both the gene ontology logical definitions  <cit>  and for phenotypes  <cit> . for example, the mpo frequently classifies phenotypes anatomically, which when combined with logical definitions allows us to improve anatomical ontologies. existing owl-based deductive reasoning environments are less well suited to this "two-way" information flow scenario  <cit> . in addition, reasoners can have unpredictable performance when used with multiple large ontologies such as the fma.

numerous other schemes have been put forward to increase coverage, consistency and quality of biomedical ontologies. these include graph-based approaches  <cit> , linguistic methods for improvement of term names  <cit> , and others . a related approach  <cit>  runs only in conjunction with protégé frames. the lack of a freely available tool that is based on obo and owl semantics and is able to work with more complex logical definitions motivated the work presented here.

implementation
in this work, we present and implement a method for using automated reasoning to evaluate a set of logical definitions against the target ontology compared with the knowledge represented by all of the ontologies referenced in the logical definitions. the method first collects only the parts of the referenced ontologies that are relevant for reasoning . note that the referenced ontologies are expected to be provided with subsumption axioms. for the ontologies being considered in this work, it is only necessary to import terms that are directly referenced in the logical definitions and all of their ancestors back to the root in order to infer subclass relationships in the target ontology . we will refer to the graph made up of all referenced terms on an ontology as well as all ancestors on all paths back to the root as the induced ancestral graph of the ontology. note that we add all relationships between the extracted terms to this graph. for example, by looking at the definitions of the terms from the mpo  <cit>  the induced ancestral graph contains only  <dig>  classes of the  <dig>  classes in the complete go . since reasoning does not require any of the other terms in the referenced ontology, one can obtain identical reasoning results over a smaller ontology containing just these terms with a substantial savings in computational resources. there are three types of disagreements between the logical definitions and the target ontology that we would like to detect:

less than  <dig> % of the terms of the external ontologies are used by the logical definitions of the mpo terms. "fraction of terms referenced in logical definitions" denotes the percentage of terms in the ontology that are members of the induced ancestral graph and are used by the logical definitions of the mpo terms.

 <dig>  a subclass relationship  is implied by the logical definitions but is not explicitly asserted in the target ontology.

 <dig>  a subclass relationship  is asserted in the target ontology but is not implied by the logical definitions.

 <dig>  the logical definitions imply that two separate classes  in the target ontology are in fact equivalent.

while these three kinds of disagreements are trivial to detect in owl ontologies, current software such as protégé was not designed to present lists of detected disagreements in a way that curators can easily use for ontology maintenance. the software presented in this work, gulo , therefore imports the induced ancestral graphs from all ontologies referenced in the logical definitions of the the target ontology, uses computational reasoning to identify the set of all relationships between terms of the target ontology that are implied by the logical definitions and the referred ontologies, and compares them to the relationships that have actually been asserted in the target ontology. any disagreement is then presented to the user in a set of easy-to-use files together with the reasons derived by the reasoner for the disagreement derived by the reasoner. these results can be used by ontology curators for ontology maintenance and debugging.

we provide a stand-alone software implemented in java that parses a set of definition files  and a set of user-defined external ontologies that are referenced in the logical definitions. we will now explain the workflow together with the impact of the several program options that the user can specify. a schematic summary of the workflow is shown in figure  <dig> 

generation of relevant ontology subsets and running the reasoner
all the ontology files  are parsed using the owl api  <cit> . note that for ontologies in obo format we use the oboformat library  <cit> , which provides a parser for obo format  <dig>  syntax and an implementation of a mapping to owl using the owl api. we also use the owltools package  <cit> , a convenience java api on top of the owl api, which among other things provides convenient graph-operation capabilities over ontologies.

after parsing the definition file and the external ontologies, a single composite ontology is constructed. by default, the composite ontology is generated using only subsets  of the external ontologies; alternatively, the external ontologies are imported in their entirety if the option -s is chosen. the composite ontology  is written to file and if desired can be imported into protégé for manual inspection. following this, the reasoner is started. the reasoners fact++  <cit> , hermit  <cit> , or pellet  <cit>  can be specified using the option -r. note that in order to use fact++, the corresponding fact++ java native interface library must be defined and available in the java library path.

comparison against target ontology
after reasoning, a new ontology is created from the inferred axioms . this ontology is then compared against the specified target-ontology . gulo performs a comparison in both directions; i.e., the reasoned axioms are checked for presence in the target ontology  and conversely all links between  terms in the target ontology are sought in the reasoned ontology .

output files
gulo writes several files to a user-defined output folder . a list of the most important files that are generated by gulo are given in figure  <dig> . the merged ontology and the ontology generated by the reasoner are written to the output folder. during the comparison of these two ontologies the axioms that are found by the reasoner are written to inf_ax_found.txt/inf_ax_not_found.txt according to whether they are present/not present in the specified target ontology. similarly we report every link in the target ontology between decomposed terms that the reasoner has detected/not detected in the file assert_ax_found.txt/assert_ax_not_found.txt

note that inf_ax_not_found.txt and assert_ax_not_found.txt also list the definitions  for all the listed axioms. furthermore, a file with inferred equivalence axioms  is generated, where the listed equivalences can either point to duplicates in the target ontology  or to errors in the logical definitions .

RESULTS
software for automated reasoning evaluations
here we present an application that automatically reasons over a set of logically decomposed terms and evaluates the resulting ontology against a specified target ontology. the goal of this process is to define terms of a target ontology and use a reasoner to create a new ontology by only using the logical definitions. the resulting ontology ideally has the identical structure as the target ontology in which the subclass axioms have been manually asserted. our program gulo generates subsets of the external ontologies that only contain the terms of the induced ancestral graphs that are referenced in the logical definitions.

finally, mismatches between the manually asserted subclass axioms and the reasoned axioms are reported and can be used to improve the structure of the target ontology or the axioms used to define the terms contained in the target ontology.

the mammalian phenotype ontology
to demonstrate that our software is applicable and important for developers and curators of ontologies and/or logical definitions, we tested it by using the mammalian phenotype ontology  and the corresponding definition file containing the logical definition of a majority of the mpo terms. note that for our testing procedure we also generated a bridge between anatomical terms and uberon  <cit> , since the mpo logical definitions refer to ontologies that are cross-referenced by uberon . a bridging file was generated that transforms the subclass axioms of uberon  into correspoding equivalence axioms . this step makes the output of gulo easier to interpret. the code and a runnable jar  can be obtained from the gulo subversion repository . the ontologies used and the output files are also listed there .

running time and memory
for testing the computational requirements of our program, we also used the test case of the mpo and the corresponding definitions and ran gulo on a computer with an intel core  <dig> duo  and  <dig> gb ram. when using subset creation  the reasoning  and evaluation took ~ <dig> seconds . running the same analysis without the construction of subsets gave us identical reasoning/evaluation results, but took around  <dig> seconds .

evaluating the mpo
as described above, gulo can be used to detect disagreements or differences in the representation of knowledge between an ontology created from automatically reasoned axioms using logical definitions and a target ontology , where the axioms between terms have been generated by manual curation . the first file presents examples where reasoned axioms could not be found in the mpo .

statistics of gulo running on the mpo. a total of  <dig>  axioms were inferred by gulo, of which  <dig> were directly asserted in the logical  definitions. of these,  <dig>  were explicitly and  <dig> implicitly asserted by the mpo.  <dig> new axioms were identified that require attention by curators.

in the first example the reasoner infers that abnormal copper homeostasis  is a subclass of abnormal ion homeostasis . this inference originates from the knowledge representation in the go, where copper ion homeostasis is a descendant of ion homeostasis . in the mpo these two terms are currently not in any ancestor-descendant relation, which suggests that further manual curation of these terms is necessary.

a similar example is the reasoned subclass axiom enlarged inguinal lymph nodes  and enlarged lymph nodes . as before there is a disagreement between knowledge representation in the mpo and an external ontology . in this case the ma ontology states that inguinal lymph node is a subclass of lymph node, an axiom that is not represented in the mpo. as before we suggest structural changes in the mpo, so that this part of the mpo is aligned with the corresponding part of the ma. further examples of links suggested by gulo for addition to the mpo are increased prostaglandin level subclass of increased unsaturated fatty acid level, decreased quadriceps weight subclass of decreased muscle weight, and long radius subclass of increased length of long bones.

note that in total gulo finds  <dig> subclass axioms between mpo terms that are currently not explicitly asserted in the mpo. these terms and the relationships between them now represent priority items for further manual curation.

evaluating mpo logical definitions
another important feature of gulo is that it can be used to identify curator errors made during the creation of logical definitions. we detected numerous disagreements, but here we will describe only one example. the file equivalence_ax.txt showed us an equivalence between abnormal urine uric acid level and abnormal blood uric acid level owing to an erroneous definition of abnormal urine uric acid level which used the ma term for blood instead of the term for urine.

gulo is capable of indicating more complex disagreements. an axiom generated by the reasoner  is the subsumption axiom between abnormal sperm motility  and abnormal locomotor activity . this axiom is not contained in the mpo. both terms were decomposed as abnormal  and quality . the disagreement here comes from the third term used to define both mpo terms, which is in the first case sperm motility  and locomotion  for the definition of the latter mpo term. this produces a mixture between a statement about the motility of a single cell  and about the movement behavior of a whole organism . here we are not confronted with a curator error, rather go is too unspecific, as can be seen in the definition of locomotion . it is hard to say what the best solution to this problem might be. one solution would be for go to restructure terms representing movement such that cellular movement and the movement of an entire organism are represented by separate hierarchies of terms.

CONCLUSIONS
we provide a software package  for automatic reasoning over a set of logical definitions and the ontologies referenced by the definition statements. the referenced ontologies are automatically reduced by removing all classes that are not referred to by the definitions in order to reduce computation time and memory requirements. we assume that the ontology generated by the reasoner optimally should reflect the structure of the manually asserted links given in the target ontology. the reasoned ontology and the target ontology are compared with each other and disagreements are listed. these lists of differences are a powerful resource for the detection of errors in both the logical definition statements and the structure of the target ontology. of course there may also be cases in which the knowledge of the target ontology cannot be fully reasoned over or cases in which the asserted axioms and inferred axioms represent different views or aspects of knowledge on a particular entity. the methodology presented here can thus be used as a system to help expert curators efficiently identify terms and relationships that require attention. the method is not intended to be used to automatically repair or generate an ontology.

the software presented here uses standard techniques for reasoning over owl dl ontologies. it is especially designed to be used by curators of biomedical ontologies that use logical, cross-product definitions  <cit>  for the classes of the ontology. this is currently the case for several prominent ontologies in the obo language, including the go, the mpo, the hpo, and the worm phenotype ontology  <cit> . we have demonstrated the usage of gulo by applying it to the manually created logical definitions of the terms of the mpo. we explained in which way users can get hints for disagreements and errors in both the mpo and the corresponding logical definitions of mpo terms. curators of logical definitions of any kind of biomedical ontologies can use gulo as a tool for validation and consistency checking.

availability and requirements
• project name: gulo 

• project home page: http://compbio.charite.de/svn/hpo/trunk/src/tools/gulo

• operating system: platform-independent

• programming language: java

• other requirements: java  <dig>  or higher

• license: new bsd license

list of abbreviations
mp/mpo: mammalian phenotype ; hpo: human phenotype ontology; go: gene ontology; ma: mouse anatomy; pato: phenotype, attribute and trait ontology

competing interests
the authors declare that they have no competing interests.

authors' contributions
sk, sb, cjm, pnr, ps, and gvg planned the research work and set up the experiments. sk, sb, and cjm implemented the software. sk, gvg, ps, gc, and cls performed the evaluations. sk, sb, cjm, and pnr contributed to writing the manuscript. all authors have read and approved the final version of the manuscript.

acknowledgements and funding
we would like to thank michael ashburner for developing many of the ideas on which this work was built, and for his enthusiastic support. we would also like to thank the two anonymous reviewers for the valuable comments on our manuscript.

this work was supported by grants of the deutsche forschungsgemeinschaft , the bundesministerium für bildung und forschung , and the nih .
