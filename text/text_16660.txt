BACKGROUND
introduction
microarray technology has made it possible to simultaneously monitor the expression levels of thousands of genes during important biological processes and across collections of related samples. elucidating the patterns hidden in gene expression data offers a tremendous opportunity for an enhanced understanding of functional genomics. however, the large number of genes greatly increases the challenges of analyzing, comprehending and interpreting the resulting mass of data. selecting a subset of important genes is necessary to address the challenge for two primary reasons. first, multivariate methods are prone to overfitting. this problem is aggravated when the number of variables is large compared to the number of examples, and even worse for gene expression data which usually has ten or twenty thousand genes but with only a very limited number of samples. it is not uncommon to use a variable ranking method to filter out the least promising variables before using a multivariate method. the second reason for ranking the importance of genes is that identifying important genes is, in and of itself, interesting. for example, to answer the question of what genes are important for distinguishing between cancerous and normal tissue may lead to new medical practices.

gene selection has been investigated extensively over the last decade by researchers from the statistics, data mining and bioinformatics communities. there are basically two approaches. one approach treats gene selection as a pre-processing step. it usually comes with a measure to rank genes. fold change is a simple measure used in  <cit> . dudoit, et al.  <cit>  performed a selection of genes based on the between-group and within-group variance ratios. golub, et al.  <cit>  used a different method for standardizing the data for selecting genes. pepe, et al.  <cit>  considered two measures related to the receiver operating characteristic curve  for ranking genes. strength of statistical evidence, such as p-values of hypothesis testing  <cit> , are also commonly used measures for gene selection. storey and tibshirani  <cit>  proposed a measure of significance called q-value based on the concept of false discovery rate. the other common approach to gene selection embeds gene selection into a specific learning procedure. fan and li  <cit>  proposed penalized likelihood methods for regression to select variables and estimate coefficients simultaneously. lee, et al.  <cit>  proposed a hierarchical bayesian model for gene selection. they employed latent variables to specialize the model to a regression setting and used a bayesian mixture prior to perform the variable selection. recursive feature elimination  methods with support vector machines , e.g.  <cit> , have been shown to be successful for gene selection and classification. l <dig> svms perform variable selection automatically by solving a quadratic optimization problem, e.g.  <cit> . diáz, et al.  <cit>  applied a random forest algorithm for classification and at the same time for selecting genes based on the permuted importance score. mukherjee and roberts  <cit>  provided a theoretical analysis of gene selection, in which the probability of successfully selecting relevant genes, using a given gene ranking function, is explicitly calculated in terms of population parameters. for a more comprehensive survey of this subject, the reader is referred to  <cit> , and  <cit> .

in most of the cases, genes selected by the aforementioned procedures are not sufficient for accurate inference of the underlying biology, because biological significance does not necessarily have to be statistically significant  <cit> . for example, suppose the gene with low differential expression is a transcription factor that controls the expression of some other genes. the transcription factor itself may be activated by the treatment but its expression may not be significantly changed. hence, an ideal selection procedure should be able to highlight the transcription factor. to do so, additional biological knowledge must be integrated into it. with the development of biological knowledge databases, biologically interesting sets of genes, for example genes that belong to a pathway or genes known to have the same molecular function, can be compiled, for example from gene ontology  <cit> , see go consortium . there have been many publications combining gene expression with go lately. one common approach is to find enriched gene sets annotated by go terms which are over-represented among the differentially expressed genes in the analysis of microarray data. see  <cit> , and  <cit>  for details of enrichment. the other approach is to use a go graph to improve identification of differentially expressed genes. morrison, et al.  <cit>  constructed a gene-gene graph derived from go and used generank, which is a modification of pagerank , for prioritizing the importance of genes. gene expression data was cleverly used to specify "the personalization vector" in pagerank. ma et al.  <cit>  first computed an individual score for each gene from gene expression profiles, then combined the scores of a gene and its direct and indirect neighbors in the gene-gene graph derived from go or protein-protein interaction network to obtain a more accurate gene ranking. daigle and altman  <cit>  developed a probabilistic model that integrates biological knowledge with microarray data to identify differentially expressed  genes. they introduced a latent binary variable  and used a learning algorithm on a stochastic, binary state network to estimate ranking score. srivastava, et al.  <cit>  used the go structure to compute the similarity between genes and combined gene expression data in a ridge regression for gene selection. clearly, an approach integrating go and gene data captures dependent structure of genes without sacrificing gene-level resolution. it provides more reliable results than the methods relying on gene expression data alone, which is justified later.

in this paper, we propose an exploratory framework of gene ranking that utilizes gene expression profiles and go annotations. the contributions of this paper are described as follows.

our contributions
• bi-graph representation of biological information of genes. we extract biological information from the go database. one of the three go ontologies  is used . a bipartite graph is constructed with one partition being genes and the other molecular functions. if a gene is associated with a particular function, the gene and the function are joined by an edge. such a graph structure represents species-independent biological knowledge among genes indirectly . furthermore, using gene expression studies, the weight of the edge is assigned to be the expression level of the gene associated with the edge. this integrates the species-dependent information into the graph. the weighted graph conveys gene dependency structure nicely.

• a new graph ranking algorithm. we introduce a new measure, kernelized spatial depth , to rank the nodes of a graph. spatial depth  provides a center-outward ordering of a data set in an euclidean space ℝd. it is a global concept. ksd generalizes the notion of spatial depth by incorporating the local perspective of the data set. applying ksd to a graph provides the ranking of nodes, which takes into consideration both global and local structures of the graph. for sparse graphs, the algorithm is efficient with computational complexity , where n is the number of nodes of the graph. the algorithm can be easily modified to handle dynamic data sets. it can also be parallelized to scale up for large data sets.

• better interpretation. under a specified condition, not only is the importance of genes ranked, but the importance of functions is also ranked. this provides us with a better understanding and insight into the roles of various genes and molecular functions by analyzing bigraphs with gene expression profiles under different conditions. we demonstrate the performance of the proposed procedure using gene data from gene expression omnibus . the new methods exhibit a higher level of biological relevance than competing methods.

unlike a gene-gene network construction used in generank, the gene-function bigraph structure has several advantages. it combines the gene expression profiles easily and naturally by assigning them to be weights of the graph. in addition, the importance of genes and molecular functions can be simultaneously ranked. bipartite graph modeling was also used by dhillon  <cit>  and zha, et al.  <cit>  to co-cluster documents and words due to those advantages. tanay, et al.  <cit>  formed a gene-condition bigraph to find gene clusters in gene expression data.

the rest of this paper is organized as follows. after a brief introduction of some preliminaries on graphs, we introduce the ksd measure to rank vertices of a graph, followed by a discussion of choice of kernels and their comparison. in application, gene-function bigraphs are constructed to combine biological species-independent knowledge extracted from go and species-dependent information contained in gene expression profiles. we apply our ksd ranking method to real data sets. our conclusions and discussion are given in the last section.

methods
preliminaries of graphs and a motivating example
a graph g consists of a set of vertices  v and a set of edges e that connect vertices. the vertices are entities of interest and the edges represent relationships between the entities. edges can be assigned positive weights w to quantify how strong the relationships are. such a graph is called a weighted graph. un-weighted graphs are just the special case with all the weights equally being  <dig> 

a bipartite graph  is a graph whose vertices can be divided into two disjoint sets v <dig> and v <dig> such that every edge connects a vertex in v <dig> to one in v <dig>  in our application, a bipartite graph is constructed with one set of vertices being genes and the other set of vertices being one of the gene ontology  molecular functions.

the degree of a vertex v ∈ v denoted as dv is defined as the sum of the weights related to v, i.e. dv = Σuw ;  ∈ e. obviously, for an un-weighted graph, the degree of v is the number of incident edges.

vertices with high degree play an important role in the graph. ranking vertices purely by degree, however, may fail because the degree only contains the local information of a graph. for example, figure  <dig> shows a  <dig> by  <dig> grid graph with  <dig> vertices. vertices on the two inner layers have the same degree, four. there is no difference between vertex  <dig> and vertex  <dig> if one ranks them by their degrees. but intuitively vertex  <dig> should be more "central" than vertex  <dig> in the sense that it takes fewer steps to reach any vertex if one starts from vertex  <dig> than it does from vertex  <dig>  pagerank with damping parameter  <dig> produces the same ordering as ranking by degree. for other values of damping parameter, the ranking of pagerank is provided by figure  <dig>  the colors from dark blue to light blue represent changes of the ranking score from large to small. vertices  <dig>   <dig>   <dig> and  <dig>  have the highest rank. such ordering also demonstrates local focus. we propose kernelized spatial depth to rank vertices. the ordering induced by ksd  agrees well with what we expect. it suggests ksd as a promising measure for graph ranking.

spatial depth and kernelized spatial depth
we first introduce spatial depth in the euclidean space ℝd, then generalize it to kernelized spatial depth, which is the spatial depth on the feature space induced by a positive kernel. in order to extend the concept of ksd to a graph, the kernel on the graph must be specified. we define several graph kernels and present the ksd algorithm to obtain the depth of every vertex of the graph.

spatial depth
statistical data depth provides a center-outward ordering of a point in ℝd with respect to a data set or a distribution. multi-dimensional points can be ranked based on their depth. among various notions of depth functions, spatial depth is appealing due to its computational ease and mathematical tractability  <cit> . the spatial depth of a point x ∈ ℝd with respect to a data set  = {x <dig>  x <dig> ...,xn} is defined as,   

from the definition, it is not difficult to see that points deep inside a data cloud receive high depth and those on the outskirts get lower depth. each observation from a data set contributes equally, as a unit vector, to the value of the depth function. in this sense, spatial depth takes a global view of the data set. on the one hand, the spatial depth downplays the significance of distance and hence reduces the impact of those extreme observations whose extremity is measured in  distance, so that it gains resistance against these extreme observations. robustness is a favorite property of spatial depth  <cit> . ding, et al.  <cit>  constructed a robust clustering algorithm based on it. on the other hand, the robustness of the depth function trades off some distance measurement, resulting in certain loss of the measurement of similarity of the data points. to overcome this limitation of spatial depth, chen, et al.  <cit>  proposed kernelized spatial depth  incorporating into the depth function a distance metric  induced by a positive definite kernel function.

kernelized spatial depth
a positive definite kernel, κ: ℝd × ℝd → ℝ, implicitly defines an embedding map  

via the inner products in the feature space ℱ, i.e.  

by evaluating spatial depth on the feature space ℱ, we obtain ksd which is   

with simple algebra,  can be rewritten as  

where .

the value of ksd depends upon κ without knowing explicitly what the ϕ is. in ℝd, one of the popular positive definite kernels is the gaussian kernel κ  = exp, which can be interpreted as a similarity between x and y, hence it encodes a similarity measure. for a graph, we must consider what a good similarity measure will be, and how to construct an appropriate kernel matrix efficiently.

choice of graph kernels
various kernels on graphs can be found in recent literature, for example  <cit> , and  <cit> . ando and zhang  <cit>  provide some theoretical insights into the role of normalization of the graph laplacian matrix. we consider five laplacian kernels, including complement laplacian kernel, which is proposed here. each kernel is described, followed by a comparison and discussion of computational issues of these kernels.

laplacian kernel
for a given g =  and an associated weight matrix w, the laplacian of the graph is l = d - w and the normalized laplacian kernel is   

where d is a diagonal matrix with the diagonal entities being the degrees, i.e. dii =  = Σjw.

we confine our attention to a graph without self-loops, that is, w = 0; i =  <dig> ...,n, where n is the number of vertices. then all the diagonal entities of ℒ are  <dig>  and the off entry  if vi and vj are adjacent and  <dig> otherwise. by spectral graph theory  <cit> , ℒ is positive definite symmetric and can be treated as a kernel matrix. we must determine how well it measures similarity between vertices of the graph. let us calculate the distance between two vertices vi and vj in the feature space ℱ induced by ℒ.  

from the above result, we can see that the distance between two adjacent vertices in the feature space is larger than that of two disconnected vertices. the mapping ϕ reverses the relationship between two vertices in the graph. in this sense, we can view the laplacian kernel as a dissimilarity matrix. in other words, a vertex close to the center in the graph turns into a vertex far from the center in the feature space. therefore, a smaller ksd value indicates a higher rank of the vertex in the graph when choosing the laplacian as the kernel. it is interesting but not consistent with the usual kernels that describe the similarity between two vertices. next we look at several alternatives to laplacian kernel.

laplacian of complement graph kernel
considering the inverse of the laplacian kernel, we may look for some kernels that can "turnaround" the laplacian kernel. one natural way is to consider the laplacian of the complement graph of the original graph. the complement of a graph g, denoted as , is the graph with the same vertex set but whose edge set consists of the edges not present in g. for simplicity, we only consider un-weighted graphs. let w be the weight  matrix and d be the degree matrix of graph g as above. the weight matrix  of the complement graph  can be expressed as  

where e is the square matrix with all entries of  <dig> and i is the identity matrix. the degree matrix  of  is  

hence the laplacian matrix of  is  

therefore we can choose  as the complement laplacian kernel:   

there is no question that ni - e - l is symmetric and positive semi-definite. notice that the laplacian of the complement graph is defined in terms of negative laplacian of the original graph. hence it reverses the dissimilarity measure of lg. in other words, the laplacian of the complement graph is a similarity matrix. therefore, the larger ksd value with laplacian of the complement as the kernel indicates the deeper the vertex is in the graph as we expect. this kernel is specially useful for dense graphs. the laplacian of the complement of the graph may be a sparse matrix which leads to an efficient implementation of the ksd algorithm.

diffusion laplacian kernel
one could also consider other laplacian based kernels that perform opposite operations of the laplacian. one such meaningful alternative would be the diffusion kernel. the name "diffusion kernel" is due to the fact that it is a fundamental solution of the following heat diffusion equation:  

in a way, the laplacian is associated with the rate of diffusion of heat. for any t ≥  <dig>  the diffusion kernel ht of g is  

in particular, we take h <dig> as the diffusion laplacian kernel:   

from taylor expansion of exponential function, it is not difficult to show that kd is symmetric positive definite and all entries are non-negative.

kd can be computed from the spectral decomposition of ℒ, which is  

where u is the matrix with columns being the eigenvectors and Λ is the diagonal matrix containing the eigenvalues of ℒ. then  

with .

diffusion laplacian kernel performs in an "opposite" way to the laplacian kernel. therefore like the laplacian of the complement graph kernel, the larger ksd value using diffusion laplacian kernel indicates the "central" vertex in the graph.

pseudo-inverse laplacian kernel
similar to the diffusion laplacian kernel, pseudo-inverse of the laplacian is a kind of "opposite" operation. due to the singularity of ℒ, the penrose generalized inverse  is used for the kernel to represent the similarity between vertices of the graph.   

where Λ- is a diagonal matrix with the  diagonal element being . for convenience, we define  =  <dig> if λi =  <dig>  clearly, kp is also positive semi-definite, which means that it is indeed a valid kernel.

p-step random walk kernel
the last kernel we consider is called p-step random walk kernel with the form   

where p is a positive integer and a ≥  <dig>  the name of the kernel is based on the fact that p is up to scaling terms equivalent to a p-step random walk on the graph with random restarts. since it involves negative ℒ in the form, it is a similarity kernel.

in particular, a p-step random walk kernel with a =  <dig> and p =  <dig>  kr = 2i - ℒ, converts the off-diagonal dissimilarites in a laplacian kernel to off-diagonal similarities. it is simple in form and is much more attractive for practical purposes.

ranking algorithm based on ksd for graphs
given a graph g and a specified kernel, the following pseudocode describes the procedure to calculate the kernelized spatial depth values of all vertices.

algorithm  <dig> ksd algorithm
 <dig> get the laplacian ℒ of the input graph g

 <dig> choose and compute the kernel matrix k

 <dig> for 

 <dig>    for 

 <dig>       

 <dig>       if t = 0

 <dig>          αi = 0

 <dig>       else

 <dig>          αi = 1/t

 <dig>       end

 <dig>    end

 <dig>       for 

 <dig>          mij = kmm + kij - kmi - kmj

 <dig>       end

 <dig>    

 <dig> end

 <dig> outputd
                     κ
                  

from the above algorithm, the computation cost of ksd for all vertices depends on the sparseness of the kernel matrix. for a sparse kernel matrix, it is , otherwise it is . it is worthwhile to remark that the algorithm can be sped up by running it on multiple cpus or computers even without the help of parallel programming techniques.

comparison of kernels
all five kernels are based on laplacian which contains information of topological structure of the graph. from our simulated random graph data sets, they all perform well and similar. for example, figure  <dig> is a random graph with  <dig> vertices. ranking by ksd with all kernels and pagerank provide exactly the same top  <dig> vertices:  <dig>   <dig>   <dig>  their top  <dig> lists also are very similar. so our comparison of kernels focuses more on practical issues.

in the real world, most networks  such as the world wide web, biological networks including the gene-function bipartite graphs we will construct later, are sparse, which means that the associated weight matrices are sparse. complement laplacian kernel is not suitable because of its expensive computation cost . since the diffusion kernel and pseudo-inversion kernel require spectral decomposition of ℒ, which has  complexity and also the resulting kernels usually are very dense, they are not attractive. the laplacian kernel has some difficulty on interpretation, so we prefer to choose the p-step random walk kernel.

in our application work in the next section, we rank the importance of genes by ksd using the p-step random walk kernel with a =  <dig> and p =  <dig> 

application to gene data
in our application, gene expression involving budding yeast  cells treated with dna-reactive compounds cisplatin , methyl methanesulfonate , and bleomycin  to induce genotoxic stress will be compared with gene expression of saccharomyces treated with dna non-reactive ethanol  and sodium chloride  compounds to produce cytotoxic stress. our goal is to identify a small number of biologically relevant genes capable of differentiating mechanisms of toxicity between the known genotoxic compounds from the cytotoxic compounds. in order to do so, we use the following basic methodology:

• construct an unweighted gene-function bigraph based on go with one partition representing genes and the other representing molecular function.

• preprocess and combine data from the gene expression samples into one set per compound.

• for each compound, add weights to the bigraph using the gene expression data.

• run the ksd algorithm on each bigraph to develop a gene expression profile of ranked genes for each compound.

• compare the ranked gene sets.

details of these steps are provided below.

general construction of gene-function bigraph
in order to integrate biological information and gene expression data, one of gene ontologies – molecular function descriptions of genes are used. in the go database, the ontologies are structured as rooted directed acyclic graphs . the terms close to the root are more abstract than the terms far away from the root. we first extract the most specific functions associated with each gene to form the set of go function terms. with one set of functions and the other set of genes, a bipartite graph is established. consider figure  <dig>  gene ygr098c is associated with the go function term  <dig>  which describes the cysteine-type endopeptidase activity. genes ymr154c and ynl223w also have the same function. so in the bipartite graph, gene ygr098c is more related to ymr154c and ynl223w than it is to ybl069w.

to make the bigraph more informative, the "closeness" information between function terms are included into the bigraph. in this way, we not only use the low level  descriptions but also the whole dag structure of the ontology. for example, both go term  <dig>  and  <dig>  belong to purine nucleotide binding . to represent this association, we add edges between go: <dig> and the genes which are associated with go: <dig>  the added edges are represented as dash lines in figure  <dig>  the weights of the added edges will be the gene expression of the associated gene multiplied by a factor r ∈ , where r depends on the closeness of the two functions. we take r to be of the form ck, where c is a user-specified value between  <dig> and  <dig>  and k is the number of up-trace levels in the go dag between the function and the lowest common ancestor shared by the two functions . the pseudocode of algorithm below states the procedure to construct the gene-function bigraph.

algorithm  <dig> gene-function bigraph construction algorithm
 <dig> inputc, user specified parameter

 <dig> input gene data

 <dig> extract associate go function termsf

 <dig> form weighted bigraphg = 

 <dig> for each term f
                  i 
               inf

 <dig>    obtain all ancestorsm off
                  i 
               and their generation levelsl
                  im
               

 <dig> end

 <dig> for every pairi, j inf

 <dig>    find the nearest common ancestors

 <dig>    k = max 

 <dig>    add edges offj andgt:  ∈ e with weightswti × ck intog

 <dig>    add edges offi andgt:  ∈ e with weightswtj × ck intog

 <dig> end

 <dig> outputg

the construction of the gene-function bigraph combines gene expression profiles and topological similarity in a single framework. khatri and drăghici  <cit>  summarized three ways to determine the abstraction level of annotation in their section  <dig> . our approach is a variation of their second method. the user may decide k, the bottom-up level, for annotations. the difference is that we treat the children terms unequally, similar to the weight strategy presented in  <cit> .

preprocessing of gene expression data
our test data was obtained from the gene expression omnibus , a database repository of high throughput gene expression data. we used the data set with access number gds <dig>  the data were conducted by  <cit> . there are a total of  <dig> samples under  <dig> treatment agents with different dosages and control data. the series includes  <dig> control samples,  <dig> nacl-treated samples,  <dig> etoh-treated samples,  <dig> mms-treated samples,  <dig> ble-treated samples and  <dig> cis-treated samples. we combine the data into one control set and  <dig> treatment sets by taking the averages of gene expression values within treatment group. for each gene, log base  <dig> of the ratio of treatment to control was used. the distribution of log- <dig> expression differences under each agent is given in figure  <dig>  the plot shows that, in general, yeast cells produce distinct gene expression responses to individual agents. however, some evidence shows the similarity of expression profiles between nacl and etoh, the two cytotoxic compounds. their log- <dig> expression differences have a similar range and their density plots have similar long left tails compared with those with long right tails, cis and mms.

bigraphs for gene data under each treatment
in our application, we choose c = 1/ <dig>  since r dramatically decreases on k for such choice of c, we truncate r to be zero for k >  <dig> to reduce computation memory and time. under algorithm  <dig>  the bigraph under treatment mms agent has total  <dig> vertices including  <dig> genes and  <dig> function terms. the number of edges are  <dig>  hence the resulting bigraph is very sparse with sparsity  <dig>  comparing with  <dig> in the full graph . we use p-step random walk kernel to analyze the graph. since we take log- <dig> expression differences with respect to the control agent, genes with positive log- <dig> expression difference are up-regulated and down-regulated genes have negative values. we are not able to directly assign weights of edges in the bigraph. we separate the bigraph into two subgraphs: one with all over-expressed genes and the other one with all under-expressed genes. for the subgraph containing "down-regulated" genes, the weights are assigned to be the absolute values of log- <dig> expression differences. then we rank the important genes in those two graphs separately. it is reasonable to do so because we are interested in important induced genes and also repressed genes. all graph construction and algorithms are implemented using r and bio-conductor.

validation of improvement using go
before we present the result on the genes that are able to potentially differentiate genotoxicity and cyto-toxicity, we would like to demonstrate that integrating go will provide more reliable results than methods only using gene expression data. we consider the three nacl samples individually, ranking differentially expressed genes in each sample and comparing the degree of overlap of the top  <dig> gene lists.

for the simplest fold-change method, which ranks genes by the ratio of expression level of a nacl treated sample over the mean expression in the control group, there are seven common genes appearing in the top  <dig> of the three samples, and only three overlapping in the top  <dig>  when t-statistics are used for ranking genes, there are no genes in the overlap of the top  <dig> genes from the three samples, and only five genes in the overlap of the top  <dig> genes. moreover, only one gene is identified in each sample by both methods. the reasons for such a poor performance include the noise level and experimental variability of microarrays. ranking each gene independently is also one of the attributed reasons. incorporating gene expression profiles and biological knowledge can improve performance.

by integrating go annotations, a gene-function bigraph is constructed with weights being fold-changes or t-statistics for each sample. the ksd ranking on fold-change weighted graph provides an overlap of  <dig> genes in the top  <dig> and  <dig> in the top  <dig>  there are  <dig> common genes in all the top  <dig> and  <dig> in the top  <dig> if we rank the t-statistic weighted bigraph. furthermore,  <dig> common genes are identified in every bigraph based on each sample using either a fold change or t-statistic. for other compounds, we obtained a similar result: a small overlap for methods on gene data alone, a relatively larger overlap for our approach on the go derived graph. while our testing used go function annotations, similar results are expected with the other two ontologies. it is noted that there is a complete overlap if only go information is used. gene-function bigraphs which combine gene data with go enhance the experimental signal and capture the dependent structure of genes. hence, ranking on bigraphs improves the results.

RESULTS
applying the ksd ranking algorithm to the bigraphs constructed from gene expression responses to each agent, all induced and repressed genes were ordered separately according to their ksd values. the top  <dig> important genes are listed in table  <dig>  our goal is to identify genes differentially modulated between the genotoxic and the cytotoxic agents. we first identify the genes that exhibit similar behavior in the groups. we then find those genes induced by one treatment group but repressed by the other treatment group.

we seek the genes that are on the top  <dig> list for all three treatments of genotoxic stress or for two cytotoxic agents. there are  <dig> genes common to dna-reactive genotoxic compounds, of which  <dig> are induced and  <dig> are repressed. for two cytotoxic treatments,  <dig> over-expressed and  <dig> under-expressed genes are significant and common to etoh and nacl. see the table  <dig>  this clear overlap between genotoxic compounds, and similar overlap between the cytotoxic compounds gives added confidence that the profiles are stable. gene egt <dig>  is an important gene that is down-regulated by all three genotoxic compounds. gene rnr <dig>  is the only gene that is up-regulated for genotoxic stress but down-regulated for cytotoxic stress. it encodes an essential small subunit of ribonucleotide reductase. it is known to be induced by dna replication and dna damage checkpoint pathways via localization of the small subunits in response to genotoxic stress.

responses of the genes in this table are similar for genotoxic or cytotoxic stress. they are the common genes that appear in the top  <dig> induced or repressed list for dna-reactive treatments or non-reactive treatments.

we enlarge the search of differentially regulated genes between the two groups to the top  <dig> genes. eight other genes are capable of discriminating between genotoxic and cytotoxic agents. they behave similarly within group but totally different between groups. genes over-expressed for genotoxic treatments but down-regulated for cytotoxic agents include tfs <dig>  nth <dig>  atg <dig> and un-characterized ymr090w. tfs <dig> is a carboxy peptidase y inhibitor, which is targeted to vacuolar membranes during stationary phase and involved in protein kinase a signaling pathway. nth <dig> is required for thermotolerance and may mediate resistance to other cellular stresses. type i membrane protein, atg <dig>  is involved in autophagy and the cytoplasm-to-vacuole targeting pathway. for gene ymr090w with unknown function, we should treat it with caution. go term  <dig> is manually created for unknown molecular functions. because our method utilizes the go dag structure, the identification of ymr090w may be caused by  <dig>  but not by significant changes of mrna levels. further study about this gene is worthwhile.

four genes pus <dig>  cax <dig>  wsc <dig> and mlp <dig> are induced for cytotoxic stress but repressed for genotoxic stress. pus <dig> protein is a mitochondrial trna, associated with pseudouridine synthase activity targeted to mitochondria, specifically dedicated to mitochondrial trna modification. response to decreased yeast viability and slow growth caused by cytotoxic stress, cax <dig> is induced to increase the level of n-linked glycosylation. wsc <dig> is an er membrane protein involved in the translocation of soluble secretory proteins and insertion of membrane proteins into the er, which plays an important role in the stress response. mlp <dig>  a myosin-like protein associated with the nuclear envelope, connects the nuclear pore complex with the nuclear interior and is involved in the tel1p pathway that controls telomere length.

a summary of the results is listed in table  <dig> which provides a gene profile that can potentially distinguish between genotoxic and cytotoxic stresses.

genes selected in this table are capable of discriminating between genotoxic and cytotoxic agents. they behave similarly within group but totally different between groups. genes with * are over-expressed for genotoxic treatments but down-regulated for cytotoxic components. genes without * are induced for cytotoxic stress but repressed for genotoxic stress.

genes with * are over-expressed under treatment of genotoxic stress but under-regulated for cytotoxic stress. genes without * are induced for cytotoxic but repressed for genotoxic compounds.

comparison with pagerank
we also use pagerank to analyze each weighted bigraph under each treatment. it yields very similar results as our ksd. considering up-regulated genes for mms,  <dig> out of the top  <dig> ranked genes by pagerank coincide with the top  <dig> by ksd. for down-expressed genes in the mms treatment, there are  <dig> common genes appearing in both top  <dig> lists by pagerank and ksd. the other compounds have a similar overlap in top  <dig> lists. pagerank and ksd produce similar ranking lists for gene data, so why do we need ksd?

there are two major advantages of ksd over pagerank. first, pagerank needs a damping parameter to be specified. from some empirical studies, the parameter being  <dig>   seems to work well on the balance between the convergence rate and stability in many applications. but there are some circumstances where  <dig>  may be far from the "optimal" value. the choice of the damping parameter is a concern for pagerank and hence for generank also. this is however not an issue for ksd if we use laplacian, complement laplacian or psedo-inverse kernels. second, since spatial depth is a robust measure for centrality, we expect that ksd will inherit this nice property and obtain a more robust ranking result. to demonstrate the robustness, we design the following experiment to compare the sensitivity of our approach and pagerank against incorrect annotations on the artificial data.

suppose that all annotations are correct in the original bigraphs. we generate incorrect annotations by removing and adding some edges. for the weighted up-regulated gene-function bigraph under mms, we randomly select a certain percentage of genes. for each selected gene, we randomly delete one of its correct annotations  and add an incorrect annotation. the resulting bigraph contains contaminated data with incorrect annotations. we compare the ranking list on the contaminated graph and the one on the original graph by ksd and pagerank. we define a ranking error as the percentage difference between the top  <dig> ranking lists. figure  <dig> provides the boxplots of ranking error versus the contamination percentage for ksd and pagerank where each boxplot is based on  <dig> random repeats. ksd has lower ranking errors than pagerank. on average, the ranking error of ksd is 6% lower than pagerank, which means that on the contaminated data, ksd can identify  <dig> more important genes than pagerank. this shows that ksd is more robust than pagerank. given that microarray data is often "noisy", robustness is an important requirement for any method used with microarray data.

CONCLUSIONS
the gene-function bigraph integrates molecular function annotations with gene expression data. the general relevance of genes is described in the graph . weights of the graph are assigned to be gene response expressions. the resulting bigraph includes more biological information than the gene data alone. consequently, ranking on the bigraph may provide more biologically significant genes than ranking procedures based only on gene data. also, we propose a new ranking algorithm for graphs based on the ksd measure. ksd balances the local and global topological structure of the graph, hence it provides a good and meaningful ordering of vertices of the graph. experimental results on artificial data show that ksd is more robust than the well-known pagerank against incorrect annotations. the proposed method provides an exploratory framework for gene data analysis.

competing interests
the authors declare that they have no competing interests.

authors' contributions
xd and yc contributed to the theoretical development of the ranking algorithm. dw contributed to the bigraph formulation of go data set. cg and dw contributed to the experiment and development of the computer code. cg and xd contributed to the draft. all authors read and approved the final manuscript.

