BACKGROUND
a main objective of functional genomics is to understand the relationship among genes and molecular functions. researchers try to elucidate these relations through the systematic investigation of genes activity, for instance by using the microarray technique that enables the monitoring of all the genes during the cell phases or during the response to an external stimuli  <cit> . the central dogma of molecular biology merges together dna, rna, and proteins in a close relation, so the investigation of the rna elucidates the functions of dna. dna microarrays enable the investigation of the activity of genes in different conditions . recent microarray chips, such as the affymetrix  <cit>  human gene  <dig>  st, enable the simultaneous investigation of more than  <dig>  genes. such technology uses a single chip to monitor the activity of a set of genes through the investigation of the mrna. each chip uses a large number of probes to bind the mrna of the biological sample under investigation. each probe is marked with a fluorescent colour, so the fluorescence intensity takes into account the amount of the mrna present in the sample. usually, microarrays employ a redundant number of probes in order to minimise the experimental error in intensity measurement. thus the value of fluorescence intensity associated to each gene has to be deducted from the values of all the associated probes.

the first output of a microarray experiment is an image where pixels intensities are related to gene expressions values. images are then encoded into numerical data by using proprietary tools that extract regions corresponding to probes and convert their pixel intensities into a numerical value. these files usually use a proprietary format defined by the microarray vendors and are not automatically readable by existing analysis platforms, thus the analysis of microarray data requires a preliminary preprocessing activity before the further analysis  <cit> . the preprocessing involves several phases, among those: denoising, background correction, normalization and summarization, i.e. the computation of a specific gene expression value obtained by combining the values of corresponding probes  <cit> .

for instance, let us consider the analysis of microarray data derived by affymetrix chips with the tm <dig>  <cit>  platform. this platform is not able to directly manage the affymetrix cel files, so the user has to perform some steps manually employing external tools such as the affymetrix expression console  <cit>  or the affymetrix power tools  <cit> , or third part software such as rmaexpress  <cit> . the process starts with the summarization phase, i.e. converting images into numerical data. this phase combines multiple probe intensities into a single expression value. all arrays employ more than one probe for each gene as introduced before. summarization takes into account all of the probes for the same gene and averages them enhancing the signal-to-noise ratio. summarization requires the use of proper libraries that store the association among pixels and probesets. such libraries are provided by affymetrix as chip description file .

for affymetrix arrays, summarization is usually done together with the normalization, using the same affymetrix libraries which store the topological information about probes. there exist different summarization algorithms for expression arrays, such as the robust multi-array average   <cit>  and the probe logarithmic intensity error   <cit> , included into the affymetrix tools. moreover, for exon arrays, the detection above background   <cit>  method is also used to generate a detection metric to enhance the detection of background noise.

the simplest approach for normalizing microarray data is to re-scale each expression value of a dataset. there exist two main approaches for normalization: the quantile algorithm  <cit>  and the sketch-quantile algorithm that requires less computational resources.

for instance, the following command line shows the use of apt to normalize and summarize an affymetrix dataset:

apt-probeset-summarize -a rma -d huex-1_0-st-v <dig> cdf -o/home/output -cel-files/home/list.txt

in particular, the rma option specifies the rma summarization algorithm, the -d huex-1_0-st-v <dig> cdf option specifies the human exon  <dig>  st library, while the -o -cel-files options specify respectively the output and input folders .

after summarization and normalization, the user has to associate to each expression value the related gene and eventually some further biological annotation, such as the gene symbol or information extracted by gene ontology  <cit> . often annotation files are provided by the chip manufacturer and contain different levels of annotation, e.g. database identifier, description of molecular function, associated protein domains. it should be noted that not all the preprocessing tools allow the annotation of gene expression values. finally, preprocessed data, organized in a suitable data structure , can be read and analyzed by the tm <dig> platform. the main drawbacks of such an approach are:  the need to generate and store intermediate files in a manual way that prevent the automation of the process;  the need to know the details of the used chips and related preprocessing tools and libraries;  the need to manually download the most updated summarization and annotation libraries from the vendor website, and  the need to manually import preprocessed files in the analysis platforms, that may introduce errors. the automation of the preprocessing pipeline could speed-up the entire analysis process and reduce possible errors, allowing the user to concentrate on biological aspects. from this scenario, in order to enable the sharing and cross-comparison of microarray results from different platforms and laboratories, we propose a software tool to automatize the preprocessing of raw microarray data.

the proposed tool, named μ-cs, is able to preprocess affymetrix microarray data in order to simplify and automatize the summarization, normalization, and annotation of microarray data. μ-cs is based on a distributed architecture and uses the client/server model. the μ-cs server is in charge of tracing the versions of libraries used to preprocess arrays data and made available by microarray vendors, allowing a transparent access to the right and most updated versions of preprocessing libraries. the μ-cs client implements the preprocessing methods by wrapping the affymetrix apt preprocessing tools and implements the annotation process by joining summarized data with annotation libraries. the main idea of μ-cs is to reduce the number of information provided by the user during the data preprocessing, by embedding chip and software details into the μ-cs databases. examples of such details are the chip type and version, the software version, the link where to download the last version of the affymetrix power tools and annotation libraries, what chip library and annotation library need to be used for a given chip, and so on.

implementation
the μ-cs tool adopts a client/server architecture as depicted in figure 1: the μ-cs client wraps the apt preprocessing tools and offers the summarization and annotation functions to the user through an intuitive user interface, while the μ-cs server maintains the association between chip type and summarization/annotation libraries and an updated list of pointers  to the last available versions of such libraries. the μ-cs client is implemented both as a standalone tool and as a plugin for the tm <dig> platform.

the μ-cs system has been implemented using different techniques:  the standalone and the plugin versions of the client are implemented as java  <cit>  desktop applications that wrap the apt executable through the runtime support of java,  the server is implemented by using the web services  <cit>  technology and the php  <cit>  language and has been deployed on an apache web server,  the client communicates with the server using standard soap messages over http protocol,  the server communicates with the affymetrix  <cit>  repositories through http messages.

the μ-cs client
the μ-cs client offers to the user the normalization, summarization and annotation of microarray data. the plugin version, embedded into tm <dig>  also offers the analysis features of tm <dig>  while the standalone version makes available the preprocessed and annotated data for further analysis.

the μ-cs client  comprises the following modules:  the apt wrapper,  the library manager, and  the annotation manager. the library manager and the annotation manager store, respectively, the summarization and annotation libraries on two databases named librarydb and annotationdb. the apt wrapper is able to invoke the affymetrix power tools executable without user intervention by using the libraries mentioned above. moreover, it includes a procedure to join the summarized data with the annotations contained in the annotationdb.

a tm <dig> user needing to analyze a cel files dataset launches the μ-cs client plugin version. the μ-cs client asks to the μ-cs server for the last available libraries and obtains a reference  to them. then, it downloads the needed libraries and stores them into the local databases as depicted in figure  <dig>  the communication among server and client is based on the exchange of an xml file containing the urls of the libraries. finally, the apt wrapper invokes the apt executable by providing the right summarization library contained in librarydb. an instance of apt is invoked whenever a preprocessing request is received. after the normalization and summarization job is completed, the apt wrapper generates the preprocessed data stored in a comma separated values table. if annotations are available, the μ-cs client annotates the data by using the right annotation library contained in annotationdb.

the μ-cs server
the μ-cs server implements a repository of medatata about the type of chips, the preprocessing and annotation libraries and their location inside the affymetrix repository. the goal of the μ-cs server is to provide to the μ-cs client an updated version of summarization and annotation libraries that periodically can be updated by the vendors, hiding to the users the details of such data updates as depicted in figure  <dig>  the μ-cs server comprises the following modules: the updater web service, the librarydb and the annotationdb. the librarydb and annotationdb contain references  to the summarization and annotation libraries stored in the affymetrix repository. the updater web service, implemented as a web service  <cit> , periodically  verifies the existence of newest version of libraries and annotations by connecting to the affymetrix repository. if it finds available updates for the librarydb or for the annotationdb, then it downloads the references to these updates and stores them into the annotationdb and librarydb.

the rest of the section shows the functionalities of μ-cs through a case study on affymetrix binary files: the analysis of a human gene  <dig>  dataset freely available for download on the affymetrix web site  <cit> . this dataset contains various mixture levels of two tissues: brain and heart from human samples. we selected  <dig> arrays from these to perform our study.

the following paragraphs describe the step-by-step use of the μ-cs client . the functions of the plugin and standalone versions are identical. they differ only in the following: the former is launched from the tm <dig> menu and then preprocessed data are directly available for analysis in tm <dig>  while the latter is launched as an autonomous tool and then preprocessed data are available for different analysis platforms.

step 1: installing/updating libraries
after the generation of raw affymetrix microarray data, the main preprocessing steps are:  normalization,  summarization, and  annotation. normalization consists of reducing the bias among chips and within different regions of the same chip, aiming at removing non-biological variability within a dataset. summarization combines multiple preprocessed probe intensities to a single expression value. annotation associates to each probe its known annotations such as gene symbol or gene ontology. each step of preprocessing requires proper tools and libraries that are provided by affymetrix and that are periodically updated. the μ-cs client maintains a list of libraries that are shown to the user through the gui  as depicted in figure  <dig> 

after launching the tm <dig> platform  the user can invoke the plugin from the tm <dig> toolbar menu, as depicted in figure  <dig>  as depicted in figure  <dig>  through the gui of μ-cs the user can:  load a new cel files dataset ,  load a previously used dataset , or  downloading or updating libraries .

this last step can be skipped if libraries are already installed, or if the user does not want to update them. alternatively the user has to install the libraries as described in the following. nevertheless, the first time when μ-cs is used, the user has to install the needed libraries as depicted, while the subsequent times μ-cs checks only for available updates.

the μ-cs client queries the μ-cs server for the needed libraries and receives the references to the updated libraries so it can download and install them. after the first use, the μ-cs client stores the last used libraries in its local databases. then the μ-cs client automatically presents to the user the installed libraries that are up to date with the vendor repository. user can select libraries to be installed by simply point and click on the chip name, as depicted in figure  <dig> 

step 2: loading dataset and selection of chip libraries
first of all the user has to select the proper chip type, e.g. human gene  <dig>  st, that also identifies the library. in fact, the choice of the chip determines what preprocessing executable need to be invoked and what summarization and annotation libraries are needed. the selection of chip type and version is performed through the interface. then the user has to select and load into the μ-cs client the raw microarray data files forming the dataset to be preprocessed .

step 3: apt parameters setting
after obtaining the updated libraries, the user has to set the parameters of the apt preprocessing executable. in particular, μ-cs allows to use different parameter settings of apt to allow a flexible use to different categories of users. by selecting the standard analysis mode, most of the users may set the most important parameters, while in advanced analysis mode advanced users may explicitly set all apt parameters. user can choose to perform a standard analysis or an advanced analysis . in the first case, the μ-cs client, as depicted in figure  <dig>  permits the choice of the summarization algorithm  and the normalization type . in particular, in figure  <dig>  the following parameters have been selected: summarization methods = plier and sketch = yes. in advanced analysis mode, the user can set manually all the parameters and options of apt. for instance, if the user inserts the following apt parameters in the μ-cs gui: -a rma -a plier - mm sketch -o chip.pgf -c chip.clf/home/hiram/output *.cel, the following command line will be generated apt-probeset-summarize -a rma -a plier - mm sketch -o chip.pgf -c chip.clf/home/hiram/output *.cel.

step 4: preprocessing and annotation
after selecting the input dataset, the chip type and libraries, and the apt parameters, the μ-cs client proceeds with the preprocessing and annotation of the data, by invoking the apt executable with the user's specified parameters. different procedures are necessary if the user want to conduct a gene level or an exon level analysis. in fact for exon level analysis the user can use two times the μ-cs, the first time to normalize and summarize data and the second one to find the background noise trough dabg. when summarization is completed, the μ-cs client annotates the results, with an algorithm developed inside μ-cs, by using the right, chip-specific, annotation library. the resulting preprocessed and annotated data  is structured as a table whose attribute columns contain:  the probeset identifier,  the identifier of each sample,  the name of the sequence, e.g. the gene name,  the strand of dna,  the position of start and stop coding region,  the total number of probes,  the cross reference to protein and rna databases, and  the gene ontology annotation. preprocessed and annotated data can then be analysed with tm <dig> or eventually with other tools.

the structure of preprocessed and annotated data
at the end of a preprocessing job, μ-cs generates different output files in a single folder, in order to bring together numerical results, parameter settings and log of activities. let us suppose that the preprocessing job executed by the user is named myanalysis. then the output folder will contain the following files:

myanalysis-preprocessed-data.txt this file contains the preprocessed data without the annotations. results are encoded in a simple tabular structure as shown in table  <dig>  the first column contains the gene identifiers, while the remaining ones contain the expression values of genes in different arrays.

myanalysis-preprocessed-annotated-data.txt this file contains the preprocessed and annotated data: for each gene, the annotations provided by the affymetrix library are reported. the file has a simple tabular structure as shown in table  <dig>  the first column contains the gene identifiers, while the remaining ones contain the expression values of genes in different arrays. finally the last one contains the annotation extracted from the affymetrix annotation library.

affymetrix-annotations.csv this file contains only the annotations as provided by affymentrix and is a copy of the affymetrix annotation library used during the annotation phase. it can be useful to compare data annotated in different times in the case annotation libraries are updated.

myanalysis-aptlog.txt this file contains the log report generated by the apt-probeset-summarize executable. it is useful to detect possible run time errors happening during preprocessing. future implementations of μ-cs will use this file to keep trace of preprocessing parameters that will be encoded in miame format.

myanalysis-mcslog.txt this file contains the log report of μ-cs. it is useful to detect possible run time errors of μ-cs, happening during preprocessing or annotation.

step 5: analysis
finally, preprocessed and annotated data can be loaded and analysed by using the functions of tm <dig> 

RESULTS
we presented μ-cs , a software tool allowing the semi-automatic summarization and annotation of affymetrix binary data. the μ-cs client allows the summarization and annotation of affymetrix cel files datasets by using the proper and most updated affymetrix libraries. a case study on preprocessing publicly available data is available as supplementary material . in particular, it wraps off-the-shelf preprocessing tools  and hides to the user the localization and updating of needed preprocessing and annotation libraries. on the other hand, the μ-cs server maintains a repository of metadata about all the entities involved in microarray data preprocessing, among those: chip type, preprocessing and annotation tools and libraries. moreover, it maintains an updated lists of pointers to relevant preprocessing and annotation libraries that are sent on-demand to the μ-cs client via the internet.

thus, a main contribution of this paper is a software tool that reduces the manual activities needed when preprocessing microarray data and allows to the user to concentrate on the analysis activity hiding the details of libraries localization and updating. in addition, μ-cs implements the annotation of data that may improve the analysis process.

finally, the tm <dig> plugin version of the μ-cs client allows tm <dig> users to load, preprocess and annotate affymetrix cel data that can be further analyzed within the tm <dig> suite without wasting time in file management and avoiding possible mistakes due to manual summarization and annotation. by using the μ-cs plugin version, tm <dig> users do not need to know details about preprocessing tools nor need to download and maintain their most recently updated versions, but can easily concentrate on analysis by learning and using tm <dig> only.

comparison with other tools
in the following we compare, respectively, the use of μ-cs with respect to the use of other preprocessing tools, among those: dchip, rmaexpress, expression console, easyexon and taverna workflows. to compare μ-cs with the other tools we refer to the workflow of analysis depicted in figure  <dig> 

comparison with dchip
dchip is a standalone program for summarizing affymetrix gene expression arrays that is available only for the windows platform. compared to μ-cs, dchip:

• does not perform automatically the download of libraries ;

• performs the model based intensity normalization only;

• does not perform the annotation of files;

• offers both preprocessing and analysis;

• is available only for windows platform.

comparison with rmaexpress
rmaexpress is a standalone program for summarizing affymetrix gene expression data that is available for the windows platform and may be compiled for the linux platform. compared to μ-cs, it presents some main drawbacks:

• it does not perform automatically the download of libraries ;

• it performs only the rma normalization;

• it does not perform the annotation of files;

• it must be compiled for running on the linux platform.

comparison with expression console
expression console  <cit>  is a software provided by affymetrix that supports probe set summarization of binary cel files for all the expression arrays. it includes both summarization and quality control algorithms.

compared to μ-cs expression console presents some main drawbacks:

• it is not extensible for the preprocessing of multivendor datasets;

• it is not available for linux platforms.

on the other hand, the current version of μ-cs lacks in quality control capabilities compared to expression console. figure  <dig> compares μ-cs against expression console.

comparison with easyexon
easyexon  <cit>  is an integrated pipeline for preprocessing and analysis of exon array data. easyexon can receive as input either summarized files or binary cel files that is able to manage by calling affymetrix apt tools. easyexon implements some main algorithms for analysis of alternative splicing events and it is integrated with external software tools, such as the apt and the integrate genome browser  for, respectively, the preprocessing and the biological interpretation of data. compared to μ-cs  it presents the following main differences:

• μ-cs has a broaden range of applications in terms of managed chips, in fact easyexon focuses only on exon array data;

• μ-cs focuses only on the preprocessing, while easyexon offer analysis capabilities;

• μ-cs can summarize even exon arrays for detecting alternative splicing by using the dabg algorithm integrated into apt and selectable through the μ-cs interface.

comparison with taverna workflows
there exist other approaches for preprocessing microarray data that employ distributed architectures based on web services and soap messaging. for instance, the work  <cit>  presents a workflow of identification of differentially expressed genes by using different web services available into the taverna platform. the proposed workflow aims to retrieve microarray data stored into an ad hoc developed database and to process them by using the r statistical package deployed as a taverna service. compared to this solution, μ-cs presents the advantage that it does not require the movement of data from the analysis laboratory to an external service  and the installation and the usage of the taverna platform. on the other hand, it does not perform all the analysis steps that are available in such a workflow, for instance the identification of differentially expressed genes.

CONCLUSIONS
the study of gene expression data is nowadays an important field of research strategy. microarrays enable the investigation of such reality by using chips that are able to scan the whole genome, e.g the affymetrix human gene  <dig>  st array.

the preprocessing of microarray data is an important task that is often: i) performed manually, i.e. by using proprietary tools and related libraries and taking care of file management; and ii) conducted outside of common analysis platforms, such as tm <dig>  thus limiting the throughput of the analysis pipeline and augmenting the probability of errors due to manual activities.

so, the automation of the preprocessing tasks and their integration into main analysis platforms may improve the entire microarray pipeline, by reducing the manual interventions on data  and by guaranteing the usage of the most recent libraries made available by microarray vendors.

in this paper we proposed μ-cs, a client/server tool that natively reads and preprocesses affymetrix microarray data by wrapping existing preprocessing tools and by providing the most updated summarization and annotation libraries. the μ-cs server, that adopts a web services architecture, maintains an updated list of libraries available on the affymetrix repositories. the μ-cs client, made available both as a standalone tool and as a tm <dig> plugin, allows the integrated preprocessing and analysis of affymetrix data by using just one platform.

the existing version of μ-cs has been tested using microarray data publicly available on the affymetrix web site. we also compared μ-cs with respect to the main preprocessing tools, considering qualitative aspects such as:  automatic update of summarization libraries,  automatic annotation of gene expression data,  independence from the operating system,  integration with tm <dig>  the summarization tools considered in the comparison are: dchip, rmaexpress, expression console, easyexon, and webservices available on taverna. dchip does not implements all the summarization algorithms provided by μ-cs and requires the manual installation of libraries. rmaexpress supports the summarization of cel files but compared to μ-cs presents four main drawbacks:  it does not provide the automatic updating of the needed libraries,  it implements only the rma algorithm,  it does no provide annotation, and  it is available only for windows operating system. easyexon is a java tool that is able to implement alternative splicing events but with respect to μ-cs is not easily extensible to other chips. finally web services available on taverna require more expertise to be used. moreover apt tools offer only a command line interface and do not automatize the management of libraries. future work will regard two main directions: the generalisation of the preprocessing steps in order to make possible the management of many microarray data, e.g. illumina bead array, and the implementation of the preprocessing tasks as a service.

availability and requirements
• project name: μ-cs

• project home page: http://bioingegneria.unicz.it/m-cs.

• operating system: μ-cs tool is available for windows and linux operating systems.

• programming language: java

• other requirements: java  <dig> . <dig> runtime or higher.

• license: gnu gpl.

• any restrictions to use by non-academics: the software is for academic purposes only.

authors' contributions
mc and phg conceived the idea and designed the proposed software tool. all authors read and approved the final manuscript.

supplementary material
additional file 1
s <dig>  file contains the discussion of some case studies and a deeper comparison with respect to other softwares.

click here for file

 acknowledgements
authors are grateful to andrea greco for his work in developing main software modules.
