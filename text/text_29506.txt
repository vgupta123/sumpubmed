BACKGROUND
the most widely used methods for aligning dna sequences rely on dynamic programming algorithms initially developed by smith-waterman and needleman-wunsch  <cit> . these algorithms create the mathematically best possible alignment of two sequences by inserting gaps in either sequence to maximize the score of base pair matches and minimize penalties for base pair mismatches and sequence gaps. although these methods have proven invaluable in understanding sequence conservation and gene relatedness, they make several assumptions. one of their assumptions in generating the "best" alignment is that sequence features are collinear. for example, segments x, y, z in sequence one are also ordered as x, y, and z in sequence two. another assumption is that short segments, like y, have not become inverted or duplicated . these rearrangement events are prone to be gapped out in dynamic programming and thus described as unrelated. local alignment algorithms can be used to identify these rearrangements provided an exhaustive search is performed, but typically, only the highest scoring local alignments are considered valid and other, lower scoring local alignments are assumed to be spurious matches between unrelated sequences.

when aligning protein coding sequences, dynamic programming works quite well. evolution exerts significant functional constraint on protein coding sequences. when an inversion, duplication or segment-shuffling event occurs, the protein is often compromised by truncation due to the introduction of frame shifts and stop codons. these deleterious mutations are typically lost and not observed in the surviving population. when aligning this type of constrained sequence element, dynamic programming works quite well.

functional non-coding sequences do not appear to be as constrained in the ordering of elements as protein coding sequences  <cit> . compact cis-regulatory modules, for example, enhance or suppress eukaryotic gene expression in response to external stimuli and play key roles in development and differentiation. one of the best characterized eukaryotic enhancers is the even-skipped stripe  <dig> element in drosophila that controls transcription of the second transverse stripe of even-skipped mrna during embryogenesis. functional and comparative sequence analysis of stripe  <dig> clearly demonstrate that the enhancer maintains its specific activity across species yet displays significant small-scale insertions, deletions, and rearrangements of transcription factor binding sites within the module  <cit> . tracing the evolutionary path of such non-coding elements is proving difficult with current alignment tools and may be assisted by a visual alignment program like gata.

implementation
gata employs a two tiered architecture in aligning dna sequences. gataligner executes and processed blastn output. gataplotter displays the processed alignments and annotation from gataligner.

gataligner
the gataligner application  uses the ncbi bl2seq and blastn programs  <cit>  to generate all possible local alignments between two input dna sequences that score above a very low cut off . to avoid problems associated with visualizing both large and small local alignments, see results/ discussion, a sliding window is advanced at one base intervals across each local alignment. windowed sequences scoring above a defined score are saved. to reduce the number of windowed sequences, each is compared to its neighbours and joined if they are of the same score and orientation. the score is not changed. these "sub-alignment" objects contain several features: a score, an orientation, a reference to the parental local alignment, the aligned sequences, and start and stop coordinates for each sequence. the sub-alignments are then saved to disk. this alignment and post-processing takes less than a minute for two  <dig> kb sequences using a window size of  <dig> and a score cut off of  <dig> bits on an  <dig> mhz powerpc laptop computer.

our initial goal was to create a high resolution sequence alignment and visualization tool to use in identifying small sequence rearrangements, like those associated with evolving non-coding regulatory dna. we initially divided the first sequence into overlapping windows offset by one base pair. a smith-waterman dynamic programming algorithm was then used to align each window against the entire second sequence. windows were scored, merged, and saved as above. although this method is more rigorous than using blastn, it took 20â€“ <dig> times as long, and did not produce significantly different results . it should be noted that blastn requires seven consecutive identical bases to align two sequences. thus in rare cases, some windows will be missed, for example, ggggggcttttttaccccccgaaaaaa versus ggggggattttttgcccccctaaaaaa.

gataplotter
the gataplotter application  takes sub-alignment objects created by gataligner and displays them graphically. two boxes connected by a line are used to represent each sub-alignment. the boxes are plotted against horizontal representations of the input sequences with the reference sequence on top. the size of each box is determined by the start and stop positions in the sub-alignment. the shading of the boxes and connector line are scaled according to the sub-alignment score where solid black represents the highest score obtained, light grey the lowest. lastly the colour of the connecting line is used to indicate the sub-alignment orientation, black for +/+, red for +/-. where windows overlap, those with the highest score are displayed on top. single clicking on overlapping windows retrieves all of the underlying windowed sequence alignment information. double clicking fetches all of the associated local alignment information as parsed from blast.

gataplotter also has the capability to display extensive gene annotation for one or both input sequences. the principle component of gene annotation rendering by gata is the "genegroup" . each genegroup is drawn independent of other genegroups and is allowed to float within the panel to avoid overlap. a typical genegroup contains one dna sequence from which one or more "transgroups" are derived. each transgroup contains exons, an rna transcript and possibly a protein translation. each of these features are described using the berkeley drosophila genome project gff format  <cit> . coding and non-coding dna sub features are only created in the presence of translation features and represent the most conservative estimation of what is protein coding sequence. if any translation predicts a larger coding region than the others, this is adopted for the entire genegroup. a point of confusion by many is that exons encode protein peptides. this is not necessarily true  and has lead to a variety of annotation rendering errors. when parsing a gff file, gataplotter looks for the following gff features: exon, translation, transcript, *gene*, *rna*, *transpos*, *misc*, where an * represents one or more wild cards. these wild card "genes" are interpreted as the closing feature on the genegroup from which all the proceeding transgroups are derived. annotation for both strands is drawn together; arrows are used to indicate orientation. features not recognized by the parser are interpreted as novel user defined elements and rendered in their own tracks. gff annotation examples, templates, and extensive descriptions are provided under the gataplotter "documentation" menu. see table  <dig> and  <dig> for a complete listing of program options.

RESULTS
to illustrate the types of rearrangements gata can distinguish, examine figures  <dig> and  <dig>  both contain alignments between drosophila melanogaster and d. pseudoobscura. figure  <dig> contains three highly similar genes. figure  <dig>  inversions of putative enhancers. annotation for each was obtained from whole_genome_annotation_dmel_release3- <dig> gff  <cit> . orthologous sequences were isolated using the flycatcher program  <cit> . in cases where alignment windows overlap, the lowest scoring windows are drawn first and higher scoring windows placed on top. both, connecting lines and their associated boxes are shaded according to score.

several related alignment and visualization tools have proven useful in comparative sequence analysis. dot plot analysis can be used to identify duplications and inversions. programs such as dotter, jdotter, dotlet, and family relations  <cit>  generate graphical representations of sequence conservation by scoring identity between two perpendicular sequence representations. although, mapping annotation to dot plots containing duplications and inversions is rather difficult and counter intuitive. programs such as artemis/act, lalnview and to some extent, plalign  <cit> , utilize alignment information generated from dynamic programming algorithms to create box-line-box representations of each local alignment. these are similar to gata but do not divide local alignments into window scored sub-alignments. this is unfortunate since window scoring enables a more detailed view of the actual sequence similarity within a large local alignment. moreover, meaningful visualization using these browsers requires setting a high cut off score for the visualized local alignments. this effectively eliminates smaller, lower scoring local alignments that may provide alternative or even better inverted local alignments. gata's windowed post-processing overcomes these associated problems.

one program that is proving quite useful in avoiding the collinearity problem while still using a dynamic programming algorithm is shuffle lagan  <cit> . alignments generated by shuffle lagan are combine with alignment annotation viewers such as vista  <cit>  to align entire genomes. k-browser/ mavid and mauve are two additional genome browser/ aligners that look equally promising  <cit> . although, it should be noted, these programs are designed to provide genome wide alignments and identify large-scale rearrangements, gata is best suited at interrogating non-coding dna sequences between 0â€“ <dig> kb in size for both large and small rearrangements.

one of the major challenges facing bioinformaticians is the development of alignment and visualization tools for multi-species comparative sequence analysis. within the fly community alone,  <dig> divergent species of diptera and hymenoptera will be sequenced within  <dig> years. a variety of higher eukaryotes including human, mouse, rat, dog, chimp, cow, chicken, opossum, and platypus have or are in the process of being completely sequenced. how can one visualize the alignment and species-specific annotation for  <dig> orthologs of a particular gene or a genomic segment? the gata alignment paradigm is well suited to this challenge and will play a prominent role in gata's development.

CONCLUSIONS
as comparative sequence analysis accelerates, scientists need more sophisticated alignment and visualization tools to define the evolutionary relationships and functional significance between particular orthologous sequences. this is especially true for regulatory, non-coding dna that can show significant small-scale rearrangements. these new tools must incorporate detailed annotation alongside views of sequence conservation while providing easy access to the underlying sequence information. gata provides one such solution.

availability and requirements
project name:

gata, graphic alignment tool for comparative sequence analysis.

project home pages:

 and 

operating system:

platform independent

programming language:

java

other requirements:

java  <dig>  or higher

license:

gnu gpl

any restrictions to use by non-academics:

none

authors' contributions
dan designed and constructed the gata programs with advice and supervision from mbe.

