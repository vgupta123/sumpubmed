BACKGROUND
recent analysis of prokaryotic genomes has lead to the discovery of a new class of repeat characterized by short, perfectly conserved elements of typical length  <dig> to  <dig> bases separated by unique sequences of similar length  <cit> , fig.  <dig>  these are conventionally known as clustered regularly interspaced short palindromic repeats . the use of the term palindromic is somewhat misleading as the sequences are not palindromes, though some have short  terminal regions that are approximately or exactly reverse-complemented. crisprs have been implicated in dna rearrangement  <cit> , host cell defense, replication and regulation  <cit>  and provide new tools for evolutionary study and strain typing  <cit> . due to the high conservation and regular spacing of crispr repeats , many of them can be found relatively easily using ad hoc software tools  <cit>  or existing software tools such as reputer  <cit> , as used in  <cit> , and patscan  <cit> , as used in  <cit> . however, the output of such tools is not necessarily ideal for this purpose, and significant post-processing and manual curation may be needed. we have therefore developed piler-cr, a dedicated software tool for the identification and preliminary analysis of crispr repeats. we will present validation suggesting that piler-cr has both high sensitivity and high specificity.

implementation
algorithm
piler-cr is designed to identify the characteristic signature of crispr repeats. once a repeat has been identified by piler-cr, more sensitive search tools such as blast can be used to find fragmented or degraded copies of the repeat family. piler-cr builds on techniques developed in the piler family of algorithms for repeat analysis  <cit> . we will generically refer to the input sequence as the genome. it may be useful to use several genomes as input as this will result in related repeats being clustered together . an array is a single crispr locus, i.e. set of crispr repeats and the intervening unique sequences known as spacers. the goal is to find a chain of local alignments that meet the criteria for being a crispr array, i.e. the repeats and spacers are within the expected ranges of length and sequence conservation. these ranges are parameters of the algorithm and can be changed by the user .

this table describes the most important parameters of piler-cr algorithm. the parameter column gives the name of the command-line option for the pilercr program. "ratios"  are defined as the ratio of the smallest to the longest, thus a value close to  <dig>  requires lengths to be similar,  <dig>  means identical lengths. spacer lengths sometimes vary significantly, so the default ratio is smaller than for repeat lengths. using a value of  <dig>  for minrepeatratio or mincons is not recommended as this may lead to false negatives due to boundary mis-identification.

step 1: local alignments
the first step is to find local alignments  of the genome to itself; each hit is a candidate for being an alignment between two copies of a crispr repeat. as crisprs are separated by short distances, it suffices to search for alignments of two regions that are close to each other. viewed as a self-similarity plot , this corresponds to searching for hits within a band around the main diagonal of the plot. piler-cr uses a variant of rasmussen et al.'s filter  <cit>  to reduce the dynamic programming space. searching within a band is accomplished by sliding a window along the genome. the filter utilizes a word index giving the sequence coordinates of each unique word. the index  is updated in the obvious way as the window moves: words on the leading edge of the window are added to the index, words on the trailing edge are deleted. regions of the dynamic programming matrix remaining after application of the filter are then explored for local alignments. those local alignments that are too short or too long to plausibly align two crisprs are discarded. as an optimization, this is done during the dynamic programming step so that time is not wasted constructing long alignments.

step 2: pile construction
a pile is a contiguous set of bases, each one of which is covered by at least one local alignment. in other words, a pile is a repetitive region. by definition, piles are separated by unique regions, i.e. regions with no local alignments. as crispr repeats are separated by unique regions, a pile cannot contain more than one repeat. piles are identified by sorting hit begin- and end-points by genome position, then traversing from beginning to end of the genome, keeping track of the coverage count at each point . a pile begins where the coverage count rises above zero, and ends when it falls to zero again. associated with each pile is the set of hits that cover it .

step 3: graph construction
each hit connects two piles. using hits as edges and piles as nodes, a graph is constructed and the connected components of the graph are identified. each connected component is a candidate for containing one or more crispr arrays. this is not essential but significantly reduces the search space for the following step.

step 4: draft array identification
within each connected component, each pile is tested as the possible first member of a putative crispr array by following each possible chain of local alignments, abandoning the search as soon as the array fails the test criteria . hits with the shortest spacers are considered first . when an array is positively identified, hits in the range of coordinates covered by the array are discarded and a search for additional arrays in any remaining hits continues. a multiple alignment of the pile sequences is constructed using fast options of the muscle algorithm  <cit> , and a consensus sequence is generated.

step 5: array refinement
given output from step  <dig>  several heuristics are applied in an attempt to improve the inferred arrays.

5a. partial or degraded copies of the repeat at the beginning or end of the array are deleted. these are often found in practice, and deleting them may expose conserved columns in flanking regions that correctly belong in the repeat. a partial or degraded repeat is identified by having three or more gaps when aligned to the current consensus sequence for the array, or by having more than twice as many gaps as the average for the array. this is repeated until there are no such repeats.

5b. a 100% conserved column immediately preceding or following the current boundary is moved into the repeat. this is repeated until there are no such columns.

5c. a column at the repeat boundary that is < 90% conserved is deleted from the repeat, i.e. moved into the flanking region. this is repeated until there are no such columns.

step 6: adjacent array merge
adjacent arrays with similar consensus sequences and similar spacer lengths are merged. here, "merging" means that the two arrays are reported as a single array. the reason for this step is that it is quite common for there to be one or a small number of missing or degraded repeats embedded in an array. for two arrays to be merged, the following criteria must all be met. the ratios  of the repeat length and  spacer lengths for the two arrays must be ≥  <dig> . the two consensus sequences must be globally alignable, where global alignability is defined as having an optimal local alignment  that covers ≥ 95% of the bases in the first array. finally, the distance between the end of the first array and the beginning of the second array must be approximately k, where k is  <dig>   <dig>   <dig> or  <dig>  r is the average repeat length of the first array, s is the average spacer length, and "approximately" means that the ratio must be ≥  <dig> .

step 7: clustering and alignment
it is often found that repeats in different arrays have recognizably similar sequences. the program therefore clusters consensus sequences into similar groups, meaning groups of sequences having estimated mutual identities of ≥ 50%. for speed, the identity of two  sequences is estimated by counting the number of identical words of length  <dig>  multiple alignments are created for each group, again using fast options of muscle.

step 8: report generation
finally, a report is generated; for an example see additional file  <dig>  a detailed section specifies each repeat in an array, indicating any differences from the consensus sequence. summary sections group arrays by estimated sequence similarity  and by position in the genome.

complexity
the time and space complexities of the algorithm are strictly o where l is the genome length. steps  <dig> though  <dig> are o under reasonable assumptions; the cubic term arises in step  <dig>  in practice, time and space requirements scale approximately as o.

estimating sensitivity
the most common error made by piler-cr is to mis-identify the endpoints of a crispr repeat by one or more positions . however, in most such cases the array is essentially correctly identified, and the correct endpoints are immediately evident to the user from the report. when comparing two repeat sequences, we therefore define three categories of match: an exact match, a close match and no match . an exact match requires the two sequences to be identical. a close match is defined by the following procedure. a local alignment of the two sequences is made using the smith-waterman algorithm, and the number of matching bases m in this alignment is computed. if the longest of the two full sequences has length l, the identity of the two sequences is defined as s = m/l. . if s exceeds a pre-defined threshold, which we choose to be  <dig> , then we consider the match to be close.

estimating specificity
while false positives cannot be reliably determined in all cases, due to the lack of known complete reference data, some can be identified by visual inspection or by searches of databases of other types of repeat. some rna genes occur in arrays that are remarkably similar to crispr repeats, with the gene sequence and spacer lengths 100% conserved; these are occasionally reported by piler-cr as crisprs.

RESULTS
here we report the results of running piler-cr on  <dig> prokaryotic genomes , and compare the reported crispr repeats with two previous surveys due to jansen et al.  <cit>  and godde and bickerton  <cit>  . for brevity, we shall refer to these studies as j and g respectively. while j appears to be an attempt to identify all crispr repeats in the studied species, g is limited to crisprs that are associated with cas genes. we can thus use a comparison with j as a guide to both the sensitivity and specificity of piler-cr, while g can be used as a guide to sensitivity only . we also reviewed each array manually and attempted to assess whether the array itself appeared to be a crispr, and if so whether the endpoints were correctly identified. while we believe this validation strategy gives a good qualitative overview of the accuracy of piler-cr, it should not be considered rigorous. there is no independent experimental technique for identifying "true" crispr arrays, so we are comparing different computational methods against each other, each one of which has a priori unknown accuracy. also, as accession numbers are not given in j or g, the input sequences used in the different studies may vary due to differences in the strains being sequenced, further data being added to partially sequenced genomes, and differences in draft versus finished genomes. it should also be noted that there is a subjective element in evaluating arrays, especially when they are short . finally, the entire j and g sets were used to assist in algorithm parameter tuning. a more rigorous strategy might divide j and g into test and training sets, though we see limited value in this approach given the lack of independent experimental evidence.

this table shows a comparison between repeats found by piler-cr compared with those found by jensen et al. and by godde and bickerton. see estimating sensitivity for definitions of the categories exact, close and no match. this shows that piler-cr finds exact or close matches with most sequences in the reference sets. of the no match cases, most appear to be due to differences in the genome sequences used in this study versus the previous study, most likely due to the use of different strains.

sensitivity
additional file  <dig>  table  <dig> summarizes the agreement between crispr sequences reported by piler-cr and those in the g and j sets . in some cases, we found no instances of the sequences reported by g or j in the genome, which is presumably explained by differences in the sequences used here versus the other studies. in other cases, all in the j set, piler-cr found longer sequences that include the reference repeat as a subsequence, suggesting that jensen et al. may have failed to identify the full repeat sequence. in a few cases, piler-cr concatenates two arrays with similar repeat sequences, causing the consensus sequence to be truncated. there were no unambiguous false negatives. thus, the sensitivity of piler-cr with default parameters may approach 100%.

specificity
again, additional  <dig>  file table  <dig> is used . if longer lengths are allowed for crispr repeats, this may result in false positives due to rna genes; the one example found in our experimental data with default algorithm settings is the longest repeat in chromohalobacter salexigens. in additional file  <dig>  table  <dig> we have marked clear false positives as fp and questionable repeats as q. we found  <dig> questionable and  <dig> false positives in a total of  <dig> repeats. we assume that repeats classified as close or truncated , or are novel versus the reference data, are true positives as there is no reason to suppose otherwise. if we further assume that all the questionable repeats are errors, we get an estimated specificity of 94%. this estimate is necessarily very approximate, and may be quite optimistic.

CONCLUSIONS
we have presented piler-cr, a new software program for the identification of crispr repeats, and have shown that the algorithm probably has both good sensitivity and good specificity. while other repeat-finding methods can be applied to finding crisprs, sometimes requiring post-processing of their output, piler-cr provides an integrated package generating a comprehensive and readable report. the program executes rapidly, completing the analysis of  <dig> prokaryotic genomes in about  <dig> minutes on a  <dig> ghz desktop computer. the output is designed to facilitate manual analysis of the reported crispr arrays. in addition to a multiple alignment of the repeats in each array, flanking regions and spacers are shown, making it visually obvious when piler-cr mis-identifies the repeat boundary by one or a few positions. repeats are clustered by similarity, exposing relationships between different arrays and, where applicable, providing confirmatory evidence of marginal arrays .

availability and requirements
piler-cr is donated to the public domain. source code is written in c++ and is designed to be easily ported across platforms. it has been compiled and tested using microsoft visual c++ on windows and gcc on i <dig> linux. source code and a linux binary are freely available as additional file  <dig>  which contains the version used in this study, and at , where any updates and bug fixes will be posted.

authors' contributions
rce is solely responsible for the manuscript and the work described herein.

supplementary material
additional file 2
sample output generated by piler-cr. the report has three sections: detailed, summary by similarity and summary by position. the detailed section shows each repeat in each putative crispr array. the summary sections give one line for each array. columns in the detailed section are: pos, sequence position; repeat, length of the repeat; %id, identity with the consensus; spacer, length of spacer to the right of this repeat; left flank,  <dig> bases to the left of this repeat, repeat, sequence of this repeat ; spacer, sequence of spacer to the right of this repeat, or  <dig> bases if this is the last repeat. the left flank sequence duplicates the end of the spacer for the preceding repeat; it is provided to facilitate visual identification of cases where the algorithm does not correctly identify repeat endpoints. at the end of each array there is a sub-heading that gives the average repeat length, average spacer length and consensus sequence. columns in the summary sections are: array, number  <dig>   <dig> ... referring back to the detailed report; sequence, fasta label of the sequence; from, start position of array; to end position of array; # copies, number of repeats in the array, repeat, average repeat length; spacer, average spacer length; +, +/-, indicating orientation relative to the first array in the group, distance, distance from previous array; consensus, consensus sequence. in the summary by similarity section, arrays are grouped by similarity of their consensus sequences. if consensus sequences are sufficiently similar, they are aligned to each other to indicate probable relationships between arrays. in this example, arrays 1– <dig> are very similar and are thus aligned; array  <dig> appears to be unrelated and stands alone. in the summary by position section, arrays are sorted by position within the input sequence file. the distance column facilitates identification of cases where a single array has been reported as two adjacent arrays. in such a case,  the consensus sequences will be similar or identical, and  the distance will be approximately a small multiple of the repeat length + spacer length. in the above example, we see how the flanking sequences provide immediate visual feedback. array  <dig> has only three repeats, and the last column in the repeat alignment is , i.e. is not conserved. this column should probably be deleted from the repeat and moved to the spacer. array  <dig> has a similar issue, but here it is not so clear that the last column should be deleted. the first three repeats in the array are perfectly conserved, and it is common to find degraded copies of the repeat at the beginning and end of an array. this also illustrates the difficulty of developing heuristics that are able to match human performance in making judgments in more difficult cases.

click here for file

 additional file 1
additional file tables  <dig> and 2

click here for file

 additional file 3
tar with gzip compression. source code and i <dig> linux binary.

click here for file

 acknowledgements
the author funded this work. the author is grateful to viktor kunin for suggesting that piler could be adapted to find crispr repeats and for helpful feedback on early versions of the program.
