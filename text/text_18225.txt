BACKGROUND
named entities such as names of genes, proteins, chemicals, tissues, and diseases play a central role in information extraction from biomedical documents  <cit> . to fully utilize the information they convey in the document, we generally need to perform two steps. in the first step, which is commonly called named entity recognition, we identify the regions of text that are likely to be named entities and classify them into predefined categories. substantial research efforts have been devoted to the improvement of named entity recognizers, and today we can identify biomedical named entities in the literature with reasonable  accuracy by using rule-based or machine learning-based techniques  <cit> .

in the second step, we map the recognized entities with the corresponding concepts in the dictionary . this step is crucial for making the extracted information exchangeable at the concept level  <cit> . this mapping task has proven to be non trivial especially in the biomedical domain  <cit> . one of the main problems is that biomedical terms have many potential variants, and it is not possible for a dictionary to cover all possible variants in advance.

one possible approach to tackle this problem is to use soft string matching techniques. soft matching enables us to compute the degree of similarity between strings, and thus we can associate a term with its concept even when the dictionary fails to contain the exact spelling of the term. in fact, soft matching methods have been shown to be useful in several gene/protein name mapping tasks  <cit> . soft string matching, however, is not without drawbacks: the method requires a considerable computational cost when looking up the dictionary  <cit> . this problem is particularly serious when we use large dictionaries such as those for gene/protein names and disease names, which can contain more than hundreds of thousands terms. although there are techniques to speed up the computation for simple similarity measures like uniform-cost edit distance  <cit> , it is hard to apply those techniques to the sophisticated similarity measures needed in real mapping tasks. to make matters worse, the size of the literature that we need to analyze for biomedical information extraction could be huge—medline abstracts contain more than  <dig> million sentences, let alone full papers.

another approach to alleviate the problem of term variation is to normalize the terms by using heuristic rules  <cit> . for example, converting capital letters to lower case has been shown to be an effective normalization rule for gene/protein names  <cit> . the distinct advantage of the normalization approach over the soft matching approach is the speed of looking up the dictionary. once the terms are normalized, we can use a hashing technique to lookup a dictionary with a constant computational cost regardless of its size, while the cost for soft matching increases linearly with the size of the dictionary.

what is most important in the normalization approach is how we normalize the terms. bad heuristic rules often lose important information in the terms. for example, deleting all digits from a term is probably a bad rule for gene/protein names, because the rule makes it impossible to distinguish ‘ace1’ and ‘ace2’ although it enables us to match ‘ace’ with ‘ace <dig> ’

although using good heuristic rules is certainly important, their development is not straightforward. it requires good intuition and extensive knowledge of the terminology in question; the developer has to know the types of variation and potential side effects of normalization. consequently, it remains to be seen what normalization rules would work well for various classes of named entities in the biomedical domain.

in this paper, we present a novel approach for the automatic discovery of term normalization rules, which requires no expert knowledge of the terminology. to achieve this goal, we leverage the important insight provided in previous studies  <cit>  in which contrast and variability in gene names were analyzed to test the effectiveness of several normalization heuristics. their work suggests that one could distinguish good normalization rules from bad ones by analyzing the effect of normalization on the relationships between terms and their concept ids in the dictionary. we take their work one step further and present a framework for discovering a list of “good” normalization rules from a dictionary in a fully automated manner.

methods
ambiguity and variability
in this section, we describe two notions that are needed to quantify the utility of a normalization rule. we call them ambiguity and variability.

first, let us define a dictionary simply as a list of terms {t <dig>  …, tn} where each term is associated with a concept id cj ∈ {c <dig>  …, cm}. in the biomedical domain, concept ids typically correspond to the unique identifiers for conceptual entities such as genes, chemicals, and diseases defined in biomedical databases .

 = 1n ∑i=1nc, 

where n is the number of terms in the dictionary, and c is the number of the concept ids that include a term whose spelling is identical to ti.

 this is an imaginary dictionary consisting of three concept ids. all terms belonging to the same concept id are assumed to be synonymous .

the variability value, in contrast, quantifies how variable the terms are. this is calculated as:

 = 1m ∑j=1mt, 

where m is the number of concept ids in the dictionary, and t is the number of unique terms that the concept cj includes.

for the dictionary shown in table  <dig>  we can calculate these values as follows:

  =       19                                     =       <dig> ... =      13                                       =      <dig> 

these values can be seen as the indicators of the complexity of terminology. ideally, we do not want the terms to be ambiguous or variable, because both lead to impaired performance in mapping tasks. we thus favour smaller values for these factors.

now let us see how a normalization rule can change the situation. suppose that we have the normalization rule that removes hyphens. by applying it to the terms in the dictionary, ‘il-2’ becomes ‘il2’, and ‘il-3’ becomes ‘il3’. then we obtain new values for ambiguity and variability:

  =       19                 =       <dig> ...   =       13                 =     <dig> ... 

we have succeeded in reducing the variability value without increasing the ambiguity. this indicates that this normalization rule is a good one.

for the same dictionary shown in table  <dig>  we could think of a different normalization rule that replaces all digits with the special symbol ‘#’. if we apply this rule to the dictionary, ‘il2’ and ‘il3’ become ‘il #’, ‘il-2’ and ‘il-3’ become ‘il-#’, and ‘zfp580’ and ‘zfp581’ become ‘zfp###’. we then obtain:

  =       19                 =       <dig> ...   =       13                 =        <dig> ... 

although we have a decreased value for variability, the ambiguity value has increased. this indicates that this normalization rule may not be a good one.

the examples above demonstrate that we could distinguish good normalization rules from bad ones by observing the change of the ambiguity/variability values defined in the dictionary. in general, a normalization rule reduces the variability value at the sacrifice of the increase in the ambiguity value. therefore, what we want is a rule that can maximize the reduction of the variability value and keep the increase of the ambiguity value minimal.

we now need to integrate the two values in order to quantify the overall “goodness” of a normalization rule. we define a new value, which we call complexity, as follows:

     =         ×    α, 

where α is the constant that determines the trade-off between ambiguity and variability.

now the problem has become very simple; if a normalization rule can reduce the complexity value for the dictionary, then the rule is a good rule, otherwise it is a bad rule.

generating rule candidates
the next problem is how we automatically generate normalization rules. ideally, we want to allow normalization rules to be of any type, such as regular expressions and context-free grammars. however, we found it difficult to incorporate such complex rules in a fully automatic manner because it entails a huge search space for rule hypotheses.

in this work, we focus only on character-level replacement rules. by focusing on this type, we can easily generate rule candidates from the terms in the dictionary. for example, the first and the second terms in the dictionary given in table  <dig> constitute the following pair.

il2

il-2

from this pair, we can easily see that we will be able to match the two terms if we remove the hyphens , which in turn will reduce the variability value of the dictionary. in other words, we can automatically generate the rule that removes hyphens, by observing this term pair.

more formally, we can represent any pair of terms x and y as follows:

lxcr

lycr

where l is the left common substring shared by x and y, r is the right common substring, and xc and yc are the substrings at the center that are not shared by the two strings. from this representation, we create the rule that replaces yc with xc, which will transform y into x.

for the above example pair ‘il2’ and ‘il-2’, l is ‘il’, r is ’2’, yc is ‘-’, and xc is the null character. if we take the first term ‘il2’ and the third term ‘interleukin’ from the dictionary in table  <dig>  l is ‘i’, r is the null character, yc is ‘nterleukin’, and xc is ‘l2’.

discovering rules
in the previous sections, we have defined a measure to quantify the utility of a normalization rule and presented a method to generate a rule candidate from any given term pair. now we describe the whole process of rule discovery. the process is as follows:

 <dig>  generate rule candidates from all possible pairs of synonymous terms in the dictionary .

 <dig>  select a rule that can reduce the complexity value defined by equation  <dig> 

 <dig>  apply the rule to all the terms in the dictionary.

 <dig>  go back to 1—repeat until the predefined number of iterations is reached.

notice that the process is iterative—we apply the discovered rule immediately to the dictionary and then use the updated dictionary for the next iteration. this is because the rules discovered are to be used in sequential manner; the end product of our rule discovery system is a list of normalization rules, and we shall use them exactly in the same order specified in the list. thus the terms in the dictionary have to be sequentially updated in the rule discovery process to make sure that they go through the same rule applications.

in step  <dig>  we need to select a good rule from the rule candidates generated in step  <dig>  the obvious strategy would be to select the rule that maximizes the reduction of the complexity value of the dictionary. however, we found this strategy impractical when the dictionary is large, because it requires us to try applying every rule candidate to the dictionary to see its utility. in this work, we use a less computationally intensive strategy. first, we sort the rule candidates in descending order of frequency of occurrence. we then pick up the first rule that can decrease the complexity value. this strategy worked reasonably well, since the rule candidates that are generated many times decrease the variability value to a greater degree than infrequent ones do.

to further improve the efficiency of the entire process, we do not consider any rule candidates that have failed once to reduce the complexity value. this pruning method is not completely safe, because the terms in the dictionary change as the process proceeds and thus a candidate that has been rejected once could become acceptable at some point. however, we found that the speed-up gain outweighs the demerit when the dictionary is large.

RESULTS
dictionaries
we used two large-scale dictionaries for the experiments to evaluate our rule discovery algorithm. one is a dictionary for human gene/protein names, and the other for disease names.

the gene/protein name dictionary was created from biothesaurus  <cit> , which is a collection of more than two million gene/protein names for various species. we selected only the human genes/proteins by consulting the uniprot database  <cit>  and removed the names that were nonsensical . the resulting dictionary consisted of  <dig>  concept ids and  <dig>  terms.

the disease dictionary was created from umls metathesaurus  <cit> , which is a large multi-lingual vocabulary database that contains biomedical and health related concepts and their various names. we extracted all entries that were associated with the semantic type “disease or syndrome.” the resulting dictionary consisted of  <dig>  concept ids and  <dig>  terms.

evaluation using held-out terms
as discussed in the methods section, we create normalization rules in such a way that they minimize the variability and ambiguity of the terms in the dictionary. we thus know that they are “good” rules for the terms included in the dictionary. it is, however, not clear if those rules are also appropriate for the terms that are not included in the dictionary. in other words, we need to evaluate how the discovered rules will help map unseen terms with their correct concept ids.

one way of evaluating such performance is to use a held-out data set for evaluation. before executing a rule discovery process, we remove some randomly selected terms from the dictionary and keep them as separate data. we then execute the rule discovery process. the mapping performance is then evaluated by applying the discovered rules also to the held-out terms and looking them up in the dictionary, where the lookup system produces, for each heldout term, zero or more concept ids by exact string matching. the overall lookup performance can be evaluated in terms of precision and recall. precision is given by

 =ncnm, 

where nm is the total number of concept ids output by the lookup system, and nc is the total number of correct concept ids output by the system. recall is given by

  = ncnh, 

where nh is the number of heldout terms.

with these performance measures, we carried out several sets of experiments for automatic rule discovery. throughout all experiments reported in this paper, we set the tradeoff parameter α in equation  <dig> to  <dig> . all capital letters in the terms are converted to lower case before applying our rule discovery algorithm.

the table clearly shows that the recall of lookup improved as we applied the discovered rules to the terms. more importantly, the degradation of precision was kept minimal. the discovered rules indicate that some technical words such as ‘protein’, ‘precursor’, ‘variant’ and ‘hypothetical’ are not important in conceptually characterizing a term and thus can be safely removed. the 14th rule is concerned with the acronym ‘il’. the rule effectively converts its long form ‘interleukin’ into the acronym. some of the rules capture synonymous expressions. for example, the 25th rule replaces the word ‘subunit’ with ‘chain’.

evaluation using medline snippets
in the experiments presented in the previous section, we have demonstrated that the normalization rules discovered by our algorithm work well for unseen terms as well. it is, however, still not entirely clear how useful and safe those rules are. although we used heldout data for evaluation, the nature of the heldout terms might be too similar to the remaining terms in the dictionary and thus we cannot rule out the possibility that the rules were actually overfitting the data. moreover, the distribution of the terms in the dictionary is different from that of the terms appearing in real text, so the rules that are harmless within the dictionary might cause a problem of ambiguity when applied to terms in text.

to confirm the effectiveness of our normalization method, we need evaluation data that stem from real text rather than a dictionary. fortunately, the biocreative ii gene normalization task  <cit>  provides data which can be used for our experiments. the data  includes gene/protein name snippets extracted from medline abstracts, and each snippet is assigned an entrezgene id. table  <dig> shows some examples of the snippets. this evaluation setting could be seen as the situation where we have a named entity recognizer that can perfectly identify the regions of gene/protein names in text. we converted the entrezgene ids to uniprot ids so that they can be compared to the ids in our human gene/protein dictionary. the resulting evaluation data consisted of  <dig> gene/protein name snippets and their ids .

examples of the gene/protein name snippets used in the lookup experiments reported in table  <dig> and  <dig>  the snippets are indicated in boldface type.

with this evaluation data, we ran experiments using our gene/protein name dictionary . the result is shown in table  <dig>  again, the discovered rules improved the recall of lookup performance without losing precision. the main reason why the improvement of recall is not as significant as in table  <dig>  is that, unlike heldout terms, many of the snippets are readily mappable to the terms in the dictionary without any normalization. the useful rules were slightly different from the ones in table  <dig>  for example, the 38th rule, in effect, converts ‘receptor’ to ‘r’. the 44th rule converts ‘alpha’ to ‘a’. the roman numeral ‘i’ is converted to the arabic counterpart ‘1’ by the 75th rule.

lookup performance
the greatest advantage of the normalization approach is the speed of looking up a dictionary. once we normalize the terms in the dictionary and the input term, we can use a hashing technique to look it up in a constant time regardless of the dictionary size. the cost required for normalizing the terms in the dictionary is not a problem since it is done prior to processing the text. in contrast, the cost required for normalizing the input term could be an issue because we need to invoke the normalization process every time we come across a term in the course of text processing.

to see the computational overhead of normalization, we carried out experiments using the same dictionary and evaluation data used in the above experiment. we implemented the methods in c++ and ran the experiments on amd opteron  <dig> ghz servers.

this table shows the speed and accuracy of dictionary lookup tasks using the human gene/protein dictionary and gene/protein name snippets. f-score is the harmonic mean of precision and recall. the values in the parentheses are the threshold values in soft string matching.

we should nevertheless emphasize that the purpose of this work is not to claim that our automatic term normalization approach is superior to soft string matching approaches. soft matching methods have a distinct advantage of being able to output similarity scores for matched terms. also, soft matching is in general more robust to various transformations than normalization approaches. the heavy computational cost is not a problem in certain applications. soft matching and normalization are, in fact, complementary.

the table also shows the performance achieved by the heuristic rules given in fang et al.  <cit> . the normalization consists of case normalization, replacement of hyphens with spaces, removal of punctuation, removal of parenthesized materials, and removal of spaces. their normalization gave a better recall than our system at the price of a degradation of precision. among their normalization rules, removal of parenthesized materials is particularly interesting, because this rule can never be produced by our algorithm. this is an instance of “clever” rules that are difficult to discover without the help of human knowledge.

we conducted a brief error analysis on the results of this mapping task to see what types of term variations were yet to be captured by the system. somewhat surprisingly, there were still many terms that could be mappable via character-level replacement rules. this indicates that we could improve the rule discovery process by employing a more sophisticated method to explore the hypothesis space. our rule discovery algorithm has some commonalities with transformation based learning   <cit> , so the approaches proposed to improve the training process in tbl  may also be useful in pursuing this direction. the other types of unresolved variations include different word ordering  and coordination .

CONCLUSIONS
developing good heuristics for term normalization requires extensive knowledge of the terminology in question, and it is the bottleneck of normalization approaches for term-concept mapping tasks. in this paper, we have shown that the automatic development of normalization rules is a viable solution to the problem, by presenting an algorithm that can discover effective normalization rules from a dictionary. the algorithm is easy to implement and efficient enough that it is applicable to large dictionaries. experimental results using a human gene/protein dictionary and a disease dictionary have shown that the automatically discovered rules can improve recall without a significant loss of precision in term-concept mapping tasks. this work should be particularly useful for terminologies for which good normalization rules are not fully known.

in this work, we limited the type of normalization rules to character-level replacement. there are, however, many good heuristics that cannot be captured in this framework. extending the scope of normalization rules to more flexible expressions is certainly an interesting direction of future work.

competing interests
the authors declare that they have no competing interests.

authors' contributions
yt developed the algorithm, carried out the experiments and drafted the manuscript. jm and sa conceived the study and participated in its design and coordination. all authors read and approved the final manuscript.

