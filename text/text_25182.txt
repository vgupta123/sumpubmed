BACKGROUND
trees are commonly used to represent the results of many bioinformatics analyses. in particular, such type of binary graphs are ideal to describe the hierarchical relationships among a variety of biological entities. some common examples are the evolutionary analysis of molecular sequences or the clusterization of genes and proteins according to their properties. besides the information encoded in the topology of trees, branch lengths can also be scaled to provide information on the distances between the different partitions. in phylogenetics, for instance, trees are used to illustrate the evolutionary relationships among species or molecular sequences, considering terminal nodes as extant operational taxonomic units  and internal nodes as their corresponding ancestors. in such phylogenetic trees, branch lengths are usually proportional to the evolutionary distance among sequences. other applications, such as the analysis of gene expression, use hierarchical clustering analysis to group genes or experimental conditions according to the similarity of their expression patterns. likewise, trees are used by many protein classification methods and for the analysis of phylogenetic profiles. thus, the analysis of tree data structures is a common task in many areas of bioinformatics and there is a need for analytical and visualization tools. in this respect, a number of bioinformatic programs do exist that assist in the exploration of hierarchical trees. most of them, however, consist of standalone applications that are focused on visualization and, occasionally, on performing specific tests. some well known examples are treeview  <cit> , a widely used program for inspecting phylogenetic trees; cluster treeview  <cit> , an application for visualizing microarray clustering results; atv  <cit> , a java program used to explore phylogenies which provides also some editing options; mega  <cit> , an evolutionary genetics analysis suite that includes a built-in tree viewer; and many other recent applications  <cit> . while all these programs are very useful to manage single trees, they can hardly be automatized or adapted to specific needs. thus, when the analysis of hundreds or thousands of trees is required, the use of standalone programs becomes restrictive, because a much higher level of automation is required. in such cases, programming toolkits represent a more adequate framework, since they provide tools and methods to handle data at a lower level. using toolkits, bioinformaticians can easily create their own analysis pipelines and program custom tasks over large collections of data  <cit> . several generic bioinformatic toolkits do exist that cover a wide range of programming languages and scopes, with bioperl  <cit>  and biopython  <cit>  being the most extensively developed. together with a broad range of other features, these toolkits allow certain level of interaction with tree data structures. however, only basic actions are currently supported. alternatively, the pycogent  <cit>  and p <dig> http://bmnh.org/~pf/p <dig> html python toolkits can be used to extend this functionality, although they are mostly focused on phylogenetic reconstruction. r  <cit> , a general purpose statistical framework, does include several packages to perform statistical tests on clustering and phylogenetic trees. nevertheless, these packages are focused on performing specific analyses rather than in providing tree handling and manipulation features. finally, in contrast to the great number of standalone tree viewers, programming toolkits offer few, if any, graphical rendering possibilities. an intermediate alternative between standalone viewers and programmatic tree rendering is that of the treedyn program  <cit> , which has support for some scripting options and can be used to create fully annotated tree images.

in response to these limitations, we present here the environment for tree exploration , a python programming toolkit to analyze, manipulate or visualize any kind of hierarchical tree. it extends the functionality in other toolkits and allows a high level of customization. ete's drawing features, although less exhaustive than in standalone editors, rely on the python scripting language, which makes possible to combine advanced tree analyses and tree visualization into a single program. the toolkit includes methods to browse and manipulate tree topologies, provides support for the new hampshire extended  format and allows advanced actions such as node annotation, automatic rooting, cut & paste partitions, tree concatenation, node search, and branch distance related operations. in addition, ete implements two specific modules to work with phylogenetic and clustering trees. the phylogenetic extension allows trees to be linked to their corresponding multiple sequence alignments, includes two orthology and paralogy prediction algorithms, implements the duplication dating method described in  <cit>  and provides access to the phylomedb database  <cit> . similarly, clustering trees can be linked to their source data, which allows tree partitions to be analyzed through several validation techniques. additionally, ete implements a fully programmable drawing engine that can be used to generate, dynamically, custom tree representations in pdf or png formats. this drawing engine is fully integrated with the built-in extensions, thus providing pre-defined visualization layouts for clustering trees and phylogenies. a graphical user interface is also included which allows on the fly interaction with trees.

currently, the ete toolkit is used in diverse projects, including gepas  <cit> , phylemon  <cit>  and phylomedb  <cit> . ete package and documentation can be accessed at http://ete.cgenomics.org

implementation
ete is entirely written in python  <cit> , a programming language that offers a strong support for integration with other languages and tools, and whose popularity is raising among the bioinformatics community  <cit> . ete's philosophy is to facilitate the integration with other toolkits as well as to provide a scalable program architecture. thus, ete tree objects can be easily imported and expanded by incorporating custom methods and properties. the functionality of the ete toolkit is divided into several python modules, which can be imported at convenience. a summary of features of the different modules is shown in table  <dig> 

RESULTS
tree handling module
ete's main module allows to read and render trees using the two most common formats: new hampshire  and new hampshire extended . moreover, it allows to generate random trees or create custom tree structures from scratch. in order to increase compatibility with other tools, several newick format standards are currently supported by ete, both for reading and writing trees . ete's trees are internally encoded as a series of tree node instances connected following a parent-child relationship. each node is encoded as an independent python object, which provides many methods to manipulate its connections  and to easily browse its topology . as a consequence, each internal node is treated as a fully featured subtree, thus allowing to analyze different parts of trees separately. ete's tree object implementation supports multifurcations and can be used to deal with very large structures. as a reference, the ncbi taxonomy newick tree file, with more than  <dig>  nodes, could be loaded as an ete tree object in  <dig> seconds .

one of the main advantages of ete as compared to other toolkits is that nodes can contain additional information other than topology and branch distances. users are free to associate any external data to the different tree nodes and then use such data in the subsequent analyses, integrate them as part of their tree images or save them using the nhx format. this functionality provides the possibility of creating fully annotated trees.

finally, a complete set of operations are available to browse, analyze or modify trees: i.e.) pre- and post-order traversing strategies, search nodes or partitions matching specific criteria, midpoint and species-guided automatic tree rooting, calculate distances between branches, detection of common ancestors, random tree building, topology manipulation, tree pruning, tree concatenation, cut and paste partitions, etc.

tree rendering and visualization
the visualization module provides a programmable drawing system to render hierarchical tree structures as dendrograms. the core of this extension consists of an image drawing algorithm that can be controlled by a set of user-defined rules. such rules can be written as small python functions and are used to determine, dynamically, the aspect of each tree node. this allows, for instance, to vary the aspect of each node according to its internal properties. moreover, the rendering engine allows not only to draw tree topologies but also to incorporate external graphical information to each node. thus, external images, graphs or custom text labels can be added to nodes as part of the general tree image. the programatic use of the tree drawing module allows users to control how trees are rendered and what information is shown for the different nodes. images can be rendered as png or pdf files.

in addition to the drawing engine, trees can be interactively visualized using a built-in graphical user interface , which allows on the fly manipulation of trees. thus, each tree node has its own displaying method that can be used to start the visualization of its specific topology. the gui is fully integrated with other ete's features and allows to interact with tree nodes and their properties in a graphical way. both the gui and the rendering engine use the last qt <dig> programming libraries to increase the performance of large images visualization. qt <dig> is available for gnu/linux, macos and windows, and it is distributed as free software. a complete description of the usage of this module, as well as examples, can be found within the ete tutorial at http://ete.cgenomics.org.

phylogenetic extension
phylogenetic trees are the result of most evolutionary analyses. ete's phylogenetic extension implements a special type of tree instances which are focused on the analysis of evolutionary trees. thus, tree leafs are considered otus, while internal nodes are considered their ancestors. by applying different strategies, ete can automatically assign internal nodes to speciation and duplication events, thereby establishing orthology and paralogy relationships between the otus  <cit> . two built-in methods are available to predict speciation and duplication events: a species-overlap algorithm that is independent of the species tree  <cit>  and the classical gene-tree/species-tree reconciliation algorithm  <cit> . both methods return a list of orthology and paralogy predictions and annotate the original tree nodes according to the detected evolutionary events. additionally, nodes predicted as gene duplication events can be dated using the topology scanning method described in  <cit> . furthermore, molecular phylogenies can be associated with their corresponding multiple sequence alignments, thus establishing a link between each tree leaf and its sequence. this allows the visualization of aligned sequences together with the tree topology, which helps to detect, for instance, linage-specific changes, specific domain composition or conserved regions. as sequences are considered an additional property of tree leafs, they can be combined with the tree browsing capabilities to program analyses such as detecting clades with certain level of sequence conservation or composition. this extension is fully integrated with the drawing module, and includes a pre-defined visualization layout to explore trees together with its predicted evolutionary events and the sequences associated to nodes . other features such as checking the monophyly of nodes, the automatic detection of species names, or the guided selection of outgroups are also available.

phylomedb api
phylomedb  <cit> http://phylomedb.org is a database for complete collections of gene phylogenies . it currently stores more than  <dig>  trees and  <dig>  multiple sequence alignments reconstructed using a high-quality phylogenetic pipeline, which includes maximum likelihood or bayesian tree inference, alignment trimming and evolutionary model testing.

ete provides a complete application user interface  for accessing phylomedb. throughout this api, users can connect to the phylomedb database and search for pre-computed gene phylogenies, download complete phylomes or obtain the orthology and paralogy predictions provided by the database. the phylomedb api is fully integrated with the ete software and trees can be automatically downloaded as phylogenetic tree instances.

microarray clustering trees
microarray expression data are usually encoded as matrices in which rows represent the expression profile of genes across different conditions . a variety of clustering analyses are used to group genes that respond coordinately to a given set of conditions or, conversely, to group conditions according to their gene expression profiles. in such cases, genes are generally represented by the terminal tree nodes whereas internal nodes represent different levels of similarity among the expression profiles of grouped genes.

ete's clustering extension can be used to import microarray clustering results and link them to their corresponding gene expression patterns. thus, the expression profile of any internal tree node  can be calculated as the mean expression pattern of the grouped leaves . this allows, for instance, to automate the detection of co-expressed genes in large datasets or to find nodes matching certain expression patterns. moreover, several clustering validation techniques are implemented that allow to evaluate the goodness of fit of the different tree partitions. currently, inter- and intra-cluster distances, cluster standard deviation, the dunn index  <cit>  and the cluster silhouette index  <cit>  can be calculated. similarly to the phylogenetic extension, several visualization layouts are also provided for displaying clusters together with their associated profiles .

this extension can be further used to handle any other type of trees associated to numerical matrices, such as phylogenetic profiles or protein classification results.

discussion
most current tools for tree analysis are standalone applications focused on the visual inspection of trees. however, genomic studies often require the design of specific tests, or to program custom tasks over large collections of data. the environment for tree exploration provides a programming framework to help in the implementation of specific analyses or visualization tasks. ete's libraries can be imported together with other python toolkits in order to extend the functionality of tree handling operations. furthermore, using the appropriate python modules, ete can be connected to other environments such as r , or bioperl .

to date, ete has been used in the automated phylogenomic pipelines employed to reconstruct and analyze complete phylomes  <cit> . particularly, the use of ete has enabled the application of phylogeny-based methods to predict orthology relationships on a genome wide scale  <cit> . such approach is closer to the original definition of orthology and it is considered more accurate than classical, pair-wise based orthology prediction methods  <cit> . in addition, ete has been used to implement a functional inference pipeline that enabled annotating more than  <dig>  genes of the newly sequenced pea aphid genome  <cit> . this is the first case that such a reliable functional annotation pipeline has been applied to a newly sequenced genome. in addition, as implemented in the phylogenetic extension, ete allows the use of phylogenetic trees to detect and date gene duplication events, a method that overcomes many of the known drawbacks of methods that are only based on sequence comparisons. furthermore, ete is used to provide interactive images of phylogenetic trees in projects such as phylomedb  <cit>  and phylemon  <cit> , and to help in the interpretation of microarray clustering results as implemented in the gene expression pattern analyses suite   <cit> . thus, ete has already proved to be a useful resource in many different applications. by making this tool publicly available we expect that other projects can benefit from it and that ete continues its expansion through the implementation of additional methods and features. ete is under continuous development, with new modules and functionalities planned for future releases. we are also open to the possibility of including extensions from the open source community.

CONCLUSIONS
ete meets the needs of large-scale analyses of hierarchical tree data structures. it has been devised as a highly extensible and programmable toolkit, which has already been used in many different genomic and post-genomic projects. future releases will incorporate novel analytical methods and extensions, some of which may come from the open source community.

a comprehensive tutorial, a programming guide including the main ete package structure, and many basic examples are available from the 'documentation' section at http://ete.cgenomics.org. some practical examples are also available from the 'examples' section at the same web site.

availability and requirements
project name: ete

project home page: http://ete.cgenomics.org

operating system: gnu/linux

programming language: python

other requirements: python-numpy, python-scipy, python-mysqldb, python-qt4

license: gnu gpl 3

authors' contributions
jhc implemented the toolkit and participated in designing the methods and in writing the manuscript. jd participated in designing clustering and visualization modules, and in writing the manuscript. tg participated in designing all phylogenetic methods and the phylomedb api module, and in writing the manuscript.

