BACKGROUND
a single-nucleotide polymorphism  is a dna sequence variation occurring when a single nucleotide--a, t, c, or g--in the genome differs between members of a species . snps are the most common genetic variations in the human genome, and they are very important for understanding the genetic basis of common diseases. millions of snps are present in human genome. the enormous number of snps presents a challenging problem for genome-wide association study. it has been observed that adjacent snps are often highly correlated. to reduce genotyping cost, many algorithms have been developed to select a smallest set of snps such that all the other snps can be inferred from them. the selected snps are called tag snps.

existing tag snp selection methods can be classified into two categories: block based methods  <cit>  and genome-wide approaches  <cit> . block based methods rely on a predefined haplotype block structure. the blocks are separated by recombination hot-spots, and there are few recombinations within a block. thus the haplotypes within a block usually are of low diversity. they then attempt to select a subset of snps that can discriminate all common haplotypes within each block. the genome-wide tag snp selection algorithms do not need to partition the whole chromosome into blocks, and they utilize linkage disequilibrium among nearby snps to find tag snps. among the genome-wide approaches, those based on the r <dig> linkage disequilibrium statistic have gained increasing popularity recently because r <dig> is directly related to statistical power to detect disease associations  <cit> .

algorithm ld-select  <cit>  is the first algorithm using the r <dig> ld statistic to select tag snps, and it employs a greedy approach to find tag snps. following it, several other algorithms based on the r <dig> statistic have been developed. festa  <cit>  breaks down large marker sets into disjoint pieces, where exhaustive searches can replace the greedy algorithm, thus leading to smaller tag snp sets. multipop-tagselect  <cit>  and reaper  <cit>  apply ld-select to multiple populations. lrtag  <cit>  uses a lagrangian relaxation algorithm to find tag snps across multiple populations. all these algorithms use pairwise ld between snps.

recent studies have shown that multi-marker ld can help further reduce the number of tag snps needed  <cit> , and several algorithms have been developed to select tag snps based on multi-marker r <dig> statistics  <cit> . these algorithms find association rules of the form {snp <dig>  ⋯, snpk} → snpx, where k ≤  <dig>  snpx ∉ {snp <dig>  ⋯, snpk} and the r <dig> statistic between the left hand side and the right hand side of the rule is no less than a predefined threshold. their results show that the multi-marker ld model can reduce the number of tag snps significantly compared with pairwise algorithms. however, existing multi-marker based algorithms are both time-consuming and memory-consuming. most of the time is spent on calculating multi-marker r <dig> statistics. furthermore, an excess number of multi-marker association rules may be generated when k ≥  <dig>  which incurs high memory consumption when using these rules to select tag snps. it takes hundreds of hours for the multitag algorithm  <cit>  to finish on chromosomes containing around  <dig> k snps. the mmtagger algorithm  <cit>  needs several hours to finish, but it consumes more than  <dig> gb memory. mmtagger cannot work on chromosomes with more than  <dig> k snps when k ≥  <dig>  in this paper, we propose a multi-marker ld based tag snp selection algorithm called fasttagger. fasttagger employs several techniques to reduce running time and memory consumption:  it merges nearby equivalent snps together to reduce the number of multi-marker association rules to be tested.  fasttagger prunes redundant rules to reduce the number of rules generated.  if there are too many rules, fasttagger uses a heuristics to skip some rules, that is, a rule is skipped if the right hand side of the rule has been covered enough number of times.  if the total size of the rules generated exceeds the memory size, fasttagger divides the chromosome into chunks, and then finds tag snps within each chunk. this technique can make fasttagger work on chromosomes containing more than  <dig> k snps with as less as  <dig> mb memory.

methods
in this section, we first describe how to calculate multi-marker r <dig> statistics, and then present the fasttagger algorithm. the fasttagger algorithm consists of two steps. in the first step, it generates tagging rules, and in the second step, it uses a greedy approach to select tag snps using rules generated in the first step.

multi-marker tagging rules
most snps have only two alleles, so we consider only bi-allelic snps. given a population, the allele with higher frequency in the population is called major allele, and the allele with lower frequency is called minor allele. we use uppercase letters to denote the major alleles of snps, and use lowercase letters to denote the minor alleles. snps that are far apart from each other usually are not linked. here we require that the distance between every pair of snps in a rule must not exceed a predefined distance threshold max_dist.

given k snps s = {snp <dig>  snp <dig>  ⋯, snpk}, there are 2k possible haplotypes over the k loci. to calculate the r <dig> statistic of rule s → snpx, we need to divide the 2k haplotypes into two non-empty groups and map the two groups to the two alleles of snpx. multitag  <cit>  and mmtagger  <cit>  uses different methods to do the mapping.

the one-vs-the-rest model
multitag uses this model. there are totally  -  <dig> possible ways to group the 2k haplotypes into two non-empty groups. multitag considers only 2k ways such that one group contains only one haplotype, and the other group contains all the other haplotypes. it calculates the r <dig> statistics for all the 2k groupings, and then select the one with the highest r <dig> statistic.

the co-occurrence model
mmtagger does the mapping based on the co-occurrences of the alleles of the snps on the left hand side and the alleles of the snp on the right hand side. let h be a haplotype over the snp set s on the left hand side, a and a be the two alleles of snpx on the right hand side, and f be the frequency of h. we use f to denote the frequency of h and snpx = a occurring together, and f to denote the frequency of h and snpx = a occurring together. if f  >f , we map haplotype h to allele a of snpx, otherwise we map haplotype h to allele a of snpx. let ha be the set of haplotypes mapped to allele a, and ha be the set of haplotypes mapped to allele a. we convert snp set s to a bi-allelic marker with two "alleles" ha and ha. then we can calculate the r <dig> statistic between s and snpx as follows.   

where p, p , p , p  and p  are the relative frequencies of ha, ha, a, a and haa respectively.

we implemented both models in the fasttagger algorithm, and let users choose which model they want to use.

if the r <dig> statistic between s and snpx is no less than a predefined threshold min_r <dig>  we say that snpx can be tagged by s, and r : s → snpx is a tagging rule. with the increase of the size of s, the haplotypes of s partition the whole dataset into finer and finer groups. in an extreme case, every haplotype of s occurs at most once. in this case, the association between haplotypes of s and alleles of snpx becomes unreliable. to prevent over-fitting, we put a constraint on the size of s. the size of s should not exceeds a predefined threshold max_size.

the r <dig> statistics can be calculated from phased haplotype data directly. if the snp data are in the form of unphased genotype data, we can use existing haplotype inference algorithms such as phase  <cit>  to convert genotype data into phased haplotype data. we can also estimate k-marker haplotype frequencies directly from genotype data without phasing using the algorithms described in  <cit> . the second approach is used in algorithm ld-select  <cit> .

generating tagging rules
to generate all the tagging rules, we need to enumerate all the snp sets that satisfy the maximum distance constraint and maximum size constraint, and then calculate the r <dig> statistics between these snp sets and their nearby snps. the search space can be enormously large when the number of snps is large. we use several techniques to reduce the number of rules to be tested.

merging equivalent snps
given two snps snpi and snpj, if r <dig> =  <dig>  which means that snpi and snpj can tag each other perfectly, then we say snpi and snpj are equivalent. two equivalent snps always have the same r <dig> statistics with other snps, thus the computation cost of the rules involving them can be shared by merging them together.

for each group of merged equivalent snps, a representative snp is picked to represent this group. fasttagger generates tagging rules between representative snps only. the tagging rules generated in this way are called representative tagging rules. one representative tagging rule can actually represent multiple rules. therefore, by merging equivalent snps, we are not only saving computation cost, but also reducing storage overhead.

note that not every rule represented by a representative tagging rule is valid. some of them may not satisfy the distance constraint. equivalent snps that are separated by more than max_dist bases cannot appear in the same rule, and merging them together can produce many false rules. to reduce the number of false rules, fasttagger only merges equivalent snps that are within a distance of max_dist.

pruning redundant tagging rules
if a snp snpx can be tagged by a snp set s, then any rule s' → snpx such that s' is a proper superset of s is redundant. fasttagger generates only non-redundant tagging rules to reduce running time and memory consumption, and the definition of non-redundant rules is given as follows:

definition  <dig>  given a rule s → snpx such that snpx can be tagged by s, if there does not exist another rule s' → snpx such that s' is a proper subset of s and snpx can be tagged by s', then s → snpx is called a non-redundant tagging rule.

to prune redundant rules, before calculating the r <dig> statistic between s and snpx, fasttagger checks whether there exists a subset s' of s such that snpx can be tagged by s'. fasttagger uses a depth-first strategy to enumerate snp sets. this search strategy is adopted from a frequent generator mining algorithm  <cit> , and it ensures that all the tagging rules whose left hand side is a subset of s are generated before s is processed.

there can be many tagging rules generated. to speed-up the check operation, fasttagger divides the generated tagging rules into groups based on their right hand side snp, that is, rules with the same right hand side snp are in the same group. fasttagger then uses a hash map to index the rules in the same group, and the hashing key is the left hand side of the rules. to check whether s → snpx is redundant, fasttagger searches the hash map of snpx for the subsets of s. if there is a subset of s in the hash map of snpx, the rule is redundant; otherwise, the r <dig> statistic of the rule is calculated.

skipping rules
even though merging equivalent snps and removing redundant tagging rules can reduce the number of tagging rules significantly, it is still possible that a large number of tagging rules are generated in the first step, which incurs high memory consumption in the second step. fasttagger uses heuristics to further reduce the number of tagging rules generated: if a snp snpx occurs at the right hand side of tagging rules enough number of times, then snpx will not be considered as right hand side candidate in future rule generation. the rationale behind this heuristics is that if a snp can be tagged by many other snps, then during the tag snp selection process, the snp has a high probability to be covered by selected tag snps.

selecting tag snps using a greedy approach
finding the smallest set of tag snps is computationally expensive. fasttagger uses a greedy approach similar to the one proposed in  <cit>  to find a near optimal set of tag snps.

let c be the set of candidate tag snps, t be the set of tag snps selected, and v be the set of snps not being covered. a snp is covered if either it is a tag snp or it can be tagged by some snp set s such that s ⊆ t. initially, c and v contain all the snps, and t is empty.

fasttagger first identifies those snps that do not appear at the right hand side of any tagging rules, and these snps must be selected as tag snps. fasttagger puts them into t and remove them from c. these snps are also removed from v. for the remaining snps in v, if they can be tagged by some snp set s such that s ⊆ t, then they are removed from v too.

next, for each snp snpi ∈ c, fasttagger finds the set of snps in v that are covered by snpi. a snp snpj in v is covered by snpi if snpj is not tagged by any subsets of t and there exists a subset s of t such that snpj is tagged by s ∪ {snpi}.

fasttagger then picks a snp from c that covers the largest number of snps in v as a tag snp. this newly picked tag snp is put into t and removed from c. all the snps that are covered by it including itself are removed from v. this process is repeated until v is empty, that is, all the snps have been covered. in each iteration, in order to find the set of snps covered by every candidate tag snp in c, fasttagger needs to keep the tagging rules in memory. however, the number of rules generated can be very large. it is possible that the total size of tagging rules is too large to fit into the main memory. to solve this problem, we can break the whole chromosome into several chunks such that the rules over every chunk can fit into the main memory. we then select tag snps within each chunk.

when selecting tag snps within each chunk, only those tagging rules whose snps all fall into this chunk are used. to also utilize the rules across chunks, we allow two adjacent chunks to have certain overlap. the length of the overlap is determined by the max_dist threshold. the snps in one chunk that are within max_dist bases away from the first snp of the next chunk are included in the next chunk since they can tag or be tagged by snps in the next chunk. fasttagger finds tag snps from each chunk from left to right. the tag snps selected in the current chunk that also belong to the next chunk will be passed on to the next chunk as tag snps. note that if the distance between two adjacent snps is larger than max_dist, then these two snps are used as a breakpoint even if there is enough memory. the reason being that if the distance between two adjacent snps is larger than max_dist, then the two snps cannot tag each other or each other's neighbors.

using the above method, fasttagger can work on chromosomes containing more than  <dig> k snps with as less as  <dig> mb memory, while existing algorithm consumes more than  <dig> gb memory even on chromosomes containing around  <dig> k snps.

RESULTS
in this section, we study the performance of fasttagger. we conducted the experiments on a pc with  <dig>  ghz intel core duo cpu and  <dig>  gb memory running fedora  <dig>  all codes were complied using g++. the source codes and executable of the fasttagger algorithm can be found in additional file  <dig>  we obtained the datasets from hapmap release  <dig> http://hapmap.ncbi.nlm.nih.gov/downloads/phasing/2006-07_phaseii/phased/ and project encode http://hapmap.ncbi.nlm.nih.gov/downloads/phasing/2005-03_phasei/encode/. there are  <dig> populations and  <dig> regions in the encode project. here, we report the overall results on the ten regions for each population. the results on individual regions can be found in additional file  <dig>  from hapmap release  <dig>  we selected  <dig> chromosomes: chr <dig>  chr <dig>  chr <dig>  chr <dig>  chr <dig> and chr <dig>  and used the han chinese plus japanese population. table  <dig> shows the number of snps with maf ≥ 5% on the datasets. in all the experiment, we set max_dist to  <dig> k, and select only those snps with maf ≥ 5%.

the "#rep snps" column is the number of representative snps with merging window size of  <dig> k.

comparison with other algorithms
the first experiment is to compare fasttagger with lrtag  <cit> , mmtagger  <cit>  and multitag  <cit> . lrtag uses only pair-wise ld to find tag snps, and it has been shown to outperform ld-select and festa. hence we choose lrtag as a representative of the pairwise algorithms. mmtagger and multitag both use multi-marker ld to find tag snps. we obtained the programs from their respective authors. fasttagger used all the techniques described previously except the skipping rules technique. lrtag takes pre-computed pairwise r <dig> statistics as input, so the running time of lrtag includes only tag snp selection time. we report the results at min_r <dig> =  <dig>  here, results at min_r <dig> =  <dig>  and min_r <dig> =  <dig>  can be found in supplementary materials. for all the four algorithms, the selected tag snps can cover the whole region of interest.

we first compare fasttagger with lrtag and multitag on using pairwise ld to find tag snps. table  <dig> shows the running time and the number of tag snps selected by the three algorithms. the running time is measured in minutes. fasttagger is several times faster than lrtag even though lrtag only needs to pick tag snps from pre-computed pairwise r <dig> statistics while fasttagger needs to compute pairwise r <dig> statistics as well as selecting tag snps. both algorithms are orders of magnitude faster than multitag. among the three algorithms, lrtag produces the smallest number of tag snps, but the difference is very small. overall, fasttagger generates  <dig> % more tag snps than lrtag when min_r <dig> =  <dig> . multitag generates  <dig> % more tag snps than fasttagger when min_r <dig> =  <dig> . lrtag uses a lagrangian relaxation algorithm to select tag snps instead of a greedy approach used in other algorithms. that is why it generates less tag snps than other algorithms.

the running time of lrtag includes only tag snp selection time, while the running time of fasttagger and multitag includes both rule generation time and tag snp selection time. mmtagger is excluded from this table because the mmtagger program provided by its authors cannot use pairwise ld to find tag snps.

fast-cooc represents the fasttagger algorithm using the co-occurrence model, and fast-1vsr represents the fasttagger algorithm using the one-vs-the-rest model. max_size is the maximum number of snps on the left hand side of a tagging rule. for the mmtagger algorithm, we divided chr <dig>  chr <dig> and chr <dig> into  <dig> chunks when max_size =  <dig>  and ran mmtagger on each chunk, and then combined the results. for the multitag algorithm, we divided chr <dig>  chr <dig> and chr <dig> into  <dig> chunks, chr <dig>  chr <dig> and chr <dig> into  <dig> chunks when max_size =  <dig>  when max_size =  <dig>  multitag took too long to finish on the  <dig> chromosomes, so we did not get its results on the  <dig> chromosomes.

on encode regions, fasttagger and mmtagger take similar time to finish when max_size = 2; when max_size =  <dig>  fasttagger is 2- <dig> times faster than mmtagger. on the  <dig> chromosomes, fasttagger is 2- <dig> times faster than mmtagger. both algorithms are orders of magnitude faster than multitag. the number of tag snps selected by fasttagger under the co-occurrence model is smaller than that selected by mmtagger and multitag.

the co-occurrence model is used in fasttagger. min_r <dig> =  <dig> , max_size =  <dig> 

the effectiveness of the techniques used in fasttagger
this experiment studies the effectiveness of the techniques used by fasttagger in reducing running time and memory consumption. we used the co-occurrence model in this experiment because it generates more rules and is more memory demanding than the one-vs-the-rest model. the baseline fasttagger algorithm in this experiment uses two techniques as in the previous experiment: merging equivalent snps and pruning redundant tagging rules. the running time and memory consumption of the baseline algorithm, and the number of tag snps and tagging rules generated by the baseline algorithm on chr <dig>  chr <dig> and chr <dig> when max_size =  <dig> and min_r <dig> =  <dig>  is shown in table  <dig> 

the co-occurrence model is used. max_size =  <dig>  min_r <dig> =  <dig> .

the "#rep snps" column in table  <dig> shows the number of representative snps after merging equivalent snps using window size of  <dig> k. the number of snps is reduced by around a half. we have tried to use a larger window size to merge equivalent snps, and the results show that larger window sizes do not achieve much further reduction. the reduction in number of snps greatly reduces the number of rules to be tested. table  <dig> shows the performance of fasttagger without merging equivalent snps. without merging equivalent snps, fasttagger generates an excessive number of tagging rules, e.g., around  <dig> times more than that of merging equivalent snps, thus taking much longer time and consuming much more memory. there is also a slight increase in the number of tag snps selected.

 the co-occurrence model is used. max_size =  <dig>  min_r <dig> =  <dig> .

the co-occurrence model is used. max_size =  <dig>  min_r <dig> =  <dig> .

the co-occurrence model is used. max_size =  <dig>  min_r <dig> =  <dig> .

we also tested fasttagger under a memory constraint. the maximum memory can be used by fasttagger is limited to  <dig> mb. we used the three large chromosomes, chr <dig>  chr <dig> and chr <dig>  in this experiment. all the three chromosomes contain more than  <dig> k snps. table  <dig> shows even with as less as  <dig> mb memory, fasttagger can still work on chromosomes with  <dig> k snps. there is only a tiny increase in its running time and the number of tag snps generated.

portability and prediction accuracy
multi-marker models group combinations of the alleles on the left hand side into two groups, and then map these two groups to the two alleles on the right hand side. compared with pairwise model, multi-marker models are more prone to over-fitting. here we use three populations in hapmap--the han chinese population , the japanese population  and the caucasian population--to study the portability and prediction accuracy of tagging rules of different lengths. we use chr <dig> in this experiment. we first generate tagging rules from one population, and then calculate the r <dig> statistics and prediction accuracy of these rules in the other populations. the prediction accuracy of a rule is defined as the proportion of alleles of the snp on the right hand side that are correctly predicted by the alleles of the snps on the left hand side. the results reported below are results when rules are generated from individuals in the han chinese population and are evaluated using individuals in the other two populations. in all three populations, we consider only those snps with maf ≥ 5%.

figures  <dig>   <dig> and  <dig> show the distribution of the r <dig> values of the rules generated from the han chinese population using the two multi-marker models in the three populations. table  <dig> shows average r <dig> of the rules in the three populations. for all the three lengths, the average r <dig> of the rules in the japanese population and the caucasian population is lower than that in the chinese population. the decrease of length- <dig> and length- <dig> rules is more significant than that of length- <dig> rules, which indicates that longer rules are more prone to over-fitting than shorter rules for both models. the r <dig> values of the rules become much lower in the caucasian population than that in the japanese population, which is consistent with the genetic differences between the three populations.

the rules are generated from han chinese population with min_r <dig> =  <dig> . some rules may become invalid in the other two populations because the maf of some snps in the other two populations may be smaller than 5%. when only pairwise ld is used, all algorithms generate the same set of rules. when multi-markers are considered, fasttagger-cooc and mmtagger generate the same set of rules using the co-occurrence model; fasttagger-avsr and multitag generate the same set of rules using the one-vs-the-rest model.

the same trend is observed on prediction accuracy . even though the rules are generated from the chinese population, their accuracy in the japanese population is always above 80%. even for length- <dig> rules, 94% rules generated using the co-occurrence model have an accuracy no less than 90%, and  <dig> % rules generated using the one-vs-the-rest model have an accuracy no less than 90% in the japanese population. the average accuracy of length- <dig> rules is above 96% for both models in the japanese population. the average accuracy of the rules in the caucasian population is lower than that in the japanese population, but it is still above 91% even for length- <dig> rules. we believe that if we use individuals from the same population to do the testing, the average r <dig> and accuracy should be even higher. as for the two models, the number of length- <dig> rules generated by the two models is similar, while the co-occurrence model generates about  <dig>  times more length- <dig> rules than the one-vs-the-rest model. the average r <dig> and accuracy of the length- <dig> rules generated using the one-vs-the-rest model is higher than that generated using the co-occurrence model on both populations. however, since much less rules are generated under the one-vs-the-rest model, the one-vs-the-rest model needs more tag snps to cover all the other snps than the co-occurrence model as shown in table  <dig> 

CONCLUSIONS
in this paper, we have presented an efficient algorithm called fasttagger for genome-wide tag snp selection using multi-marker ld. fasttagger uses several techniques to reduce running time and memory consumption. our experiment results show that fasttagger is several times faster than existing tag snp selection algorithms using multi-marker models, and it consumes much less memory at the same time, which makes fasttagger can work on chromosomes containing more than  <dig> k snps where existing algorithms using multi-marker models usually fail. fasttagger also select less tag snps than existing algorithms using multi-marker ld. our experiment results also show that merging equivalent snps together is the most effective technique in reducing running time and memory consumption.

we implemented two multi-marker models in the fasttagger algorithm. the one-vs-the-rest model generates rules with higher average r <dig> and higher average accuracy than the co-occurrence model under the same parameter settings. however, it generates much less length- <dig> rules than the co-occurrence model, thus requiring more tag snps to cover all the other snps.

we compared the portability and prediction accuracy of rules of different length. the results show that shorter rules have better portability and higher prediction accuracy than longer rules. nevertheless, length- <dig> rules generated from the chinese population can still achieve an average accuracy of 96% on the japanese population for both models.

in our experiments, we calculate prediction accuracy for individual rules. when we use these rules to make predictions on unobserved snps, it is possible that one snp can be predicted by multiple rules, and the prediction of these rules may conflict with one another. in our future work, we will study how to resolve the conflicts and make consensus predictions for unobserved snps.

availability and requirements
• project name: pattern spaces & data mining algorithms for pharmacogenomics

• project home page: http://www.comp.nus.edu.sg/~wongls/projects/snp-analysis/index.html

• grant: a*star serc psf 072-101-0016

• operating system: linux or windows

• programming language: c++

• other requirements: none

• license: freebsd for academic use

• any restrictions to use by non-academics: licence needed

authors' contributions
guimei liu designed and implemented the fasttagger algorithm, and wrote this manuscript. yue wang participated in discussion of the proposed method and conducted the experiments. limsoon wong gave advice on the design of the algorithm and the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
file "fasttagger.zip" contains the source codes and executables of the fasttagger program, both for linux and windows. please read file "fasttagger.readme" on how to use the program.

click here for file

 additional file 2
file "fasttagger-sup.xls" contains additional experiment results, and it is a microsoft excel file.

click here for file

 acknowledgements
this work was supported in part by an a*star grant serc  <dig>  <dig>  <dig>  and an nus ngs scholarship .
