BACKGROUND
today’s bioinformatics faces the practical challenge to analyze massive and diverse data in a well documented and reproducible fashion. the situation is particularly challenging in the area of ngs research where state-of-the-art algorithms are frequently available as standalone tools and where a complete data analysis consists of many individual data processing and analysis steps. the considerations associated with conducting such a data analysis in a research environment have been discussed by w. s. noble  <cit>  and guidelines as well as an example strategy for organizing computational data analysis have been given. according to noble a key principle is to record every operation such that reproducibility is ensured.

in this paper, we present sushi, which does support users for shell-script integration, a new approach to bioinformatics analysis that is centered on reusability, reproducibility and scalability. sushi produces analysis results as directories that are fully self-contained and hold all the information to be reproduced. specifically, we document all parameters, input data, commands executed, as well as the versions of the tools and the reference data used. additionally, we store meta-information on the experimental data together with the result files, so that those can be interpreted and further analyzed by other tools independently from sushi. this holds even if the analysis directory is transferred to collaborators with a different computing environment. sushi is extendable and we have put special emphasis on the simplicity of adding new software applications. a bioinformatician can define them within a single file and does not need special programming skills. sushi natively offers a command line interface as well as a web interface to run data analysis steps. altogether, sushi lets bioinformaticians efficiently build analysis pipelines and ensures that analysis results are ready-to-be-shared and reproducible.

various types of data analysis frameworks have already been implemented. they can be essentially divided into web-based frameworks and scripting frameworks. examples for web-based frameworks are galaxy  <cit> , chipster  <cit> , geneprof  <cit>  or genepattern  <cit> . they let users run individual steps or entire pipelines on a remote compute system with the framework keeping track of the executed analysis. scripting frameworks like bpipe  <cit> , ruffus  <cit> , nestly  <cit> , ngsane  <cit> , makeflow  <cit> , and snakemake  <cit> , let users build bioinformatics pipelines in a command line fashion. given the different types of user interactions, the former solutions are more targeted for the experienced biologists or the application-oriented bioinformaticians while the latter address the needs of bioinformaticians who are more inclined to programming and high-throughput analysis of many datasets. however, there is no system as yet that natively offers both interfaces. additionally, none of the existing frameworks puts an emphasis on having a human-readable and portable file-based representation of the meta-information and associated data.

implementation
sushi data sets and applications
within sushi, the original measured data as well as any derived analysis result is modeled as a data set that is represented as a fully self-sufficient directory on the file system. for the original data this means that it must be accompanied by meta-information on how the data has been measured. the meta-information must include information on the biological samples used as well as information on the measurement process. for analysis results this implies that the analysis result files must have accompanying meta-information that documents the input data, the analysis steps, and the analysis parameters. if these requirements are satisfied, we call this a dataset. figure  <dig> shows schematically how a dataset is generated as the result of running a sushi application. the meta-information associated with a dataset is represented in sushi as a dataset object. on the file system a tabular file called dataset.tsv represents the dataset. examples of meta-information are characteristics like sample name, species, tissue, but also e.g. the genome build that has been used for read alignment. each characteristic is represented as a separate column in the tabular dataset.tsv.fig.  <dig> the use case of dataset generation. by running a sushi application with an input dataset and parameters, a new dataset is generated. initially  only the meta-information, the parameter file, and the job scripts are generated. the actual data files and the log files are generated by executing the static job scripts 



a sushi application requires as input both a set of parameters and a dataset object. this means that applications do not take bare data files as direct input. instead, sushi applications take as input the dataset meta-information object. the dataset object holds, next to the data files, the meta-information necessary to process and interpret the data files. based on its input, a sushi application first generates 1) the necessary job script, 2) a file representation of the parameters, and 3) the dataset for the output data . the actual result data file are generated by the job script . the columns of the output dataset hold again the meta-information, which now include additionally the parameters of the executed analysis if relevant for the further analysis or interpretation. the set of characteristics that is added to the annotation columns is defined and generated by the sushi application. the sushi framework itself does not require any specific annotation columns. thus, the semantics of the dataset columns are determined by the sushi applications .

every column of meta-information has a unique header that identifies the content, and optional tags that characterize the information type in the column. tags are represented as comma-separated strings within square brackets in the column headers. currently supported tags are file, link, factor, and characteristics. depending on the tags, the sushi framework provides appropriate actions for the corresponding columns. the file tag is reserved for actual file paths, and sushi checks if the file actually exists. if a column has a link tag, sushi will automatically add a hyperlink to the data. finally, the factor column data will be used to group samples according to experimental factors, which is typically required in a differential gene expression analysis.

example dataset holding rna-seq reads
we follow the convention that sequencing read files are represented as a dataset with the following columns:name: the name of the sample measured.

read <dig> : path to the file holding the reads; if reads are paired-end, this must be the first read.

adapter1: potentially contaminating adapter sequence at the 3′-end of read  <dig> 

read <dig> : path to the second read for paired-end data .

adapter2: potentially contaminating adapter sequence at the 3′-end of read  <dig> .

species: the species of the sample.

strandmode: specifies whether the library preparation protocol preserved strand information.

enrichment kit: the kit employed to enrich the input material 

read count: the number of reads in the file.



additionally, there can be columns that specify experimental factors. table  <dig> shows an example .table  <dig> a sample dataset

example of a sequencing read dataset where a subset of the meta-information is shown as annotation columns. the dataset includes four samples with four categories of meta-information,  <dig>  name,  <dig>  read,  <dig>  species, and  <dig>  genotype. each column header can have a tag. e.g.  means the column holds file locations, and  means the values represent an experimental factor. the dataset object is implemented as an array of hash objects in the sushi system and it can be imported from or exported to tab-separated-value file



it is important to mention here that the sushi framework does not impose any constraints or semantics on the columns of the dataset table. it is up to the user to identify which meta-information is relevant for his data. in particular, we do not require specific ontologies or controlled vocabularies. users are free to define their own meta-information. the content definition and interpretation is entirely delegated to the user and the sushi applications. figure 2a shows how the above dataset is visualized in the sushi dataset view.fig.  <dig> the screenshots of a dataset and parameter setting view. a dataset view shows basic information of the dataset, sample information, and the compatible sushi applications at the bottom. the sushi application is shown as a button and categorized based on the @analysis_category defined in the sushi application ruby code. b after selecting a sushi application, the parameter setting view lets users modify the analysis parameters. according to the sushi application definition, gui components are auto-generated and placed in the view



example sushi application performing a fastqc report
a common task is to generate a fastqc report  <cit>  for each sample in a read data set. if the fastqc package is installed one would run e.g.

which creates the fastqc report mut1_r1_fastqc.zip for the first sample in the above data set. with the sushi framework this can be turned into a sushi application defined by the following ruby code:

the example code shows the essential features of a sushi application . the @required_columns tells the sushi framework which columns a dataset must have so that fastqcminimal is applicable. in fig. 2a, all applications that are compatible with the example reads data set are shown at the bottom, including the fastqcminimal application. the @params defines the number of cores to be used for multi-threading as a parameter with default value  <dig>  this parameter is automatically turned into an input field in the web interface . the entire data analysis functionality is contained within the shell script. for example, for a read alignment application, the job script contains the call to the aligner. if a sushi application is suitable only for a certain data type, it defines requirements on the input data. the requirements are specified as mandatory dataset columns that an input dataset must have. the sushi framework guarantees that applications are only available for compatible datasets. at run time the sushi application defines the columns of the resulting dataset it will produce. with this meta-process modeling approach, the applications define the semantics of the meta-information without referring to other applications but only to dataset content. finally, from the input data and the parameters provided, the core method of a sushi application builds the command lines as a shell script that will eventually produce the output. the shell script can call other scripts or tools on the execution server. the only constraints for tools aremust be runnable from command line.

must not require interactive input at run time.

result must be representable as a file, or a set of files in a directory.



the framework cares about job execution, data file placement and cleanup of temporary data. technically, a sushi application is implemented in a single ruby file as a single ruby class that takes over the sushi application super class using the template method design pattern .

sushi architecture follows meta-level design
sushi consists of three modules that are implemented in ruby: 1) the sushi application module, as discussed above. 2) a workflow manager that performs job execution either on a local host or on a grid or cloud environment. 3) the sushi server that relies on ruby on rails and provides the web front-end. the sushi server delegates the core function of generating a job script to the sushi application, and the sushi application communicates with the workflow manager for job submission. sushi relies heavily on ruby meta-programming in that the executable code is dynamically generated at run time. during the code execution, all graphical components are dynamically generated based on the sushi application. this process follows the basic principles of ruby on rails: dry  and cvc . namely, sushi application serves as the data source for the generation of the graphical components of the gui. as a consequence every data analysis that is implemented as a sushi application is directly available in the web front-end of the sushi server. the implementation of a sushi application does not need any web development knowledge, so that the bioinformatician can focus on data analysis aspects.

installation
the sushi server is implemented in ruby on rails and can be installed in one step including all dependencies. the default installation uses the webrick web server application and sqlite <dig> database management system. alternatively, sushi can be configured to run using an apache web-server and a mysql backend. for more details, please refer to readme.rdoc in the source repository, https://github.com/uzh/sushi.

RESULTS
use case rna-seq data analysis
a commonly used minimal workflow in rna-seq data analysis consists of the steps:map reads with star aligner  <cit> .

compute expression values with the featurecounts function .

detect differential expressed genes with edger  <cit> .



figure 3a shows a representation of the generated datasets in sushi. the tree at the top indicates the hierarchical relationship and the bottom list shows the timeline of the generated data sets. every data set is derived from its parent by running an application. figure 3b shows visualizations that are generated by the last step, the assessment of differential expression between the wild-type and mutant samples in the data set. the scatter plot and the heat map indicate the significant genes and visualize the expression profiles. as with every sushi dataset, this result including all visualizations is downloadable and ready for offline use.fig.  <dig> the screenshots of dataset list and a part of a result generated by the edger sushi application. a the datasets are listed with a tree view  and table view . in the tree view, each node indicates a dataset and the parental node indicates the input dataset for the child node. b visualizations form the differential expression result the edger sushi application. we show a scatter plot with significantly differential expressed genes red-colored  and clustered heatmap . all calculated data is downloadable from this view



comparison with existing systems
we compare sushi to similar bioinformatics frameworks . a main distinction of the various frameworks is whether they have a graphical user interface  or a command line interface . the majority of cli systems is implemented as an extension of a programming language or implemented in a domain specific language , and targeted for bioinformaticians with programming skills. the gui systems are implemented as web applications with a variety of components and functions. their installation and configuration is more complex relative to cli systems but their usage does not require programming skills, so that they are targeted towards biomedical researchers.table  <dig> various types of workflow management systems are compared

the systems are described by several features. the systems are categorized into two types by the user interface types, either gui or cli. most systems have a proprietary format to save a workflow definition. more details are available in the result section and in additional file 7




chipster  <cit>  is designed as a gui application and it does not have cli or batch process mode, so that a user must run an application one by one manually. genepattern  <cit>  and taverna  <cit> ) provide both gui and cli. these systems are designed for gui usage but provide also command-line access through special clients with an application programming interface . the sushi application model on the other side is designed for command line usage, and the web front-end is auto-generated using the ruby on rails meta-process.

in terms of reproducibility and documentation, cli systems tend to have the entire analysis information in a single text file while gui systems come with a relational database management system  that provides this and additional functionality. generally, the framework itself is required to run an application or workflow again to reproduce results. different from that sushi provides the inherent advantages of gui systems but still generates a set of human-readable shell scripts file that contain all the processing information and can be run independent of sushi . in essence, sushi conveniently ensures full documentation and high reproducibility but is not needed to reproduce the analysis results.

representation of meta information
accurate and high quality meta-information is necessary for the interoperability and integration of different data sources. however even 10 years after the minimal information about microarray experiment   <cit>  guidelines have been established there is no consent how this should be implemented. this can be seen from the fact that different repositories and consortia use different implementations. examples are the geo soft  <cit> , sequence read archive  xml  <cit> , encode  <cit> , modencode  <cit> , and isa-tab  <cit> . given this situation, we decided that sushi should not implement its own constraints on meta-information. it is up to the data providers to decide, for example, which meta-information fields are provided and whether they are filled with free text, controlled vocabularies or terms from an ontology. sushi simply makes sure that the meta-information is preserved and that the analysis results are linked to the source data and accompanying meta-information. it goes without saying that we always encourage to use controlled vocabularies and ontologies wherever possible.

productive use and user acceptance
sushi is in productive use at the functional genomics center zurich and has been used to analyze ngs data in more than  <dig> projects. a publicly available instance is placed at http://fgcz-sushi-demo.uzh.ch. the productive instance is integrated with the project and data management system b-fabric  <cit>  that handles projects, users, generated data, and access control. currently we have implemented applications that support ngs analysis workflows for rna-seq, small rna-seq, chip-seq, de novo assembly, genotyping and variant analysis. the number of submitted jobs using sushi has been constantly increasing. figure  <dig> shows the monthly submitted jobs at the functional genomics center zurich since  <dig> which has reached now up to  <dig> submitted jobs per month.fig.  <dig> the number of submitted jobs using sushi at the functional genomics center zurich. it has been increasing since  <dig> and now more than  <dig> jobs are submitted on sushi at the functional genomics center zurich



we have introduced sushi step-wise at the functional genomics center zurich. initially, we supported only the most frequently used analyses such as rna-seq and snp calling, and subsequently we supported other applications like small rna-seq, chip-seq and de novo assembly. sushi was readily adopted by the bioinformaticians because they had an immediate direct net benefit without a compromise on the flexibility in terms parameter choices. sushi development was driven and shaped by direct user feedback, which also broadened the acceptance.

advanced separation of sushi concerns
the separation of concerns  is a software design principle in computer science  <cit> . it is now widely accepted and adopted in a variety of computer systems and software design such as object oriented programming and modularity of software design. the model-view-controller  design pattern is a typical example of separation of concerns for better software maintainability. the meta-level design is one type of advanced separation of concerns  beyond object-oriented which can be seen in recent software paradigms such as generic programming, generative programming, and meta-programming. for example, the reflection architecture in pattern-oriented software architecture   <cit>  separates a system into meta-level and base-level and by controlling a meta-level it triggers a change at the base-level that actually provides a service to a user.

the current situation of the common ngs data analysis, such that several independent software applications are combined and chained to produce a final result, presents the two following main aspects: 1) which applications are used, and 2) how they are actually used. sushi separates these aspects  into a meta-process with meta-information  and a base-process . this separation of concerns results in the loose coupling of sushi into its system level and user application level. this improves the independence of sushi applications and shell scripts.

CONCLUSIONS
sushi targets both biologists and bioinformaticians as users. analyzing data with sushi does not require programming skills, while adding new sushi applications requires only basic experience in writing scripts using the syntax of shell, r, python, ruby, or similar. sushi is particularly attractive to data analysis experts and bioinformaticians. sushi relieves users from administrative burdens and aids documentation and data organization. the full flexibility of the underlying tools stays untouched and can be directly accessed. additionally, the fact that datasets are fully defined on the file system lets users prototype new workflows without the need to integrate those in the sushi instance. finally, experts can automate data analysis tasks with the command line interface and are not limited to the web interface.

the design of the sushi system is driven by the idea of having analysis results fully defined and self-contained on the file system. in fact, if sushi is shut down, all the results can still be used and interpreted. all the meta-information is available in human readable tabular formats and all job scripts are contained with no back reference to the sushi framework. sushi provides no laboratory information management system  or computing functionality. instead, through its open architecture it readily integrates with existing lims systems and computing resources.

in one solution, sushi provides at the same time fully documented, high level ngs analysis tools to biologists and an easy to administer, reproducible approach for large and complicated ngs data to bioinformaticians. this is mostly obtained by using the meta-level system design. bioinformaticians will be freed from the boring tasks of managing software application and documentation and they can focus more on method development and on data analysis itself. the separation of the workflow manager from the sushi server makes the adaptation to any kind of computing facility easy and leaves the possibility to scale up.

the meta-level system design gives the simple but powerful framework of no data representation: sushi fully delegates the definition of dataset semantics to the user. the sushi system itself only defines how meta-information is used in a sushi application. it yields portability of datasets and lowers the barrier to reuse data and augment human readability of data set meta-information. the meta-level system design produces the decoupling of the meta-process from the base application process, which increases the degrees of freedom on the user side and contributes to the flexibility and scalability of the system.

availability and requirements
project name: sushi.

project homepage: https://github.com/uzh/sushi.



the demo installation is available at http://fgcz-sushi-demo.uzh.ch.operating system: platform independent but we recommend unix-like system such as ubuntu linux and macos x.

programming language: ruby .

other requirements: ruby on rails .

license: mit.



for the rubygems library dependency, please refer to the additional file  <dig>  gemfile.lock, which is also included in the git repository.

abbreviations
api, application programming interface; asoc, advanced separation of concerns; chip-seq, chromatin immunoprecipitation and next-generation dna sequencing; cli, command line interface; cvc, convention over configuration; dry, don’t repeat yourself; dsl, domain specific language; gui, graphical user interface; lims, laboratory information management system; miame, minimum information about a microarray experiment; mvc, model-view-controller; ngs, next generation sequencing; rdbms, relational database management system; rna-seq, rna sequencing; soc, separation of concerns; sra, sequence read archive.

additional files
additional file 1: an example of minimal sushi application to generate fastqc job script. 

additional file 2: the result dataset produced by the fastqc sushi application written as additional file  <dig>  

additional file 3: an example of sushi application to generate tophat job script. 

additional file 4: the result dataset produced by the tophat sushi application written as additional file  <dig>  

additional file 5: list of sushi application. 

additional file 6: class diagram of sushi application. 

additional file 7: comparison of workflow management systems. 

additional file 8: list of required rubygems library. it is bundled in the sushi source code as gemfile.lock. 



