BACKGROUND
the road to ubiquitous and seamless experimental data sharing amongst life science researchers is paved with good intention, yet given the vast effort expended in this endeavour, the reality is still somewhat underwhelming. many experimental studies now involve the generation of various different modalities of experimental data and use the different views that the data modalities provide to construct and inform mathematical models of biological function. these projects often employ a number of researchers with a wide range of backgrounds and expertise, from the laboratory scientist through service providers to the data analysts and mathematical modellers, who require common language to describe the experiment. in addition to describing the experiment between members of the projects, it is also usually a requirement that any data generated during the lifetime of the project be deposited to the public domain with adequate description to allow the data to be re-used. minimum information templates, such as miame and miape  <cit> , and specialised ontologies such as idomal and envo  <cit>  have been developed to describe and define experiments in fine grained detail. there are a number of software tools currently available to browse and utilise ontologies such as bioportal  <cit>  and rightfield  <cit> . to a bench biologist working on such a project, this bewildering array of data standards, the accompanying ontologies, the xml and tabular data representations, each with its own confusing acronym, represent a high barrier to entry with seemingly little to gain. it is therefore not surprising that many publicly available experiments still bear minimal annotation despite the commendable community efforts to enforce minimum data standards. one study looking at affymetrix data in geo and arrayexpress identified that only 38% of the microarray data meets the quality and format standards necessary for further integrative analysis  <cit> . where publication of an experiment to a public data repository is a condition of the accompanying paper being accepted researchers will generally take the path of least resistance. when experimental data have been extensively annotated and put into the public domain, the annotation has often been added by trained data curators  <cit> , a scarce resource which is well beyond the means of many organisations and research teams.

this paper introduces a software tool that has been designed to address these issues and to assist the bench scientist in describing their experiment in line with appropriate data standards. the result of this effort is a software tool called xperimentr, a rich internet application designed to be used alongside the traditional laboratory notebook, which allows the laboratory scientist to track their experimental procedures and adhere to minimum data specifications with minimal effort.

during our consultation phase, we found much confusion amongst biologists about the use and the role of ontologies in the description of the sample preparation process and of the data resulting from experimental assays. there are some limited examples of the successful use of ontologies to infer information from laboratory data and to combine analysis of experiments from different sources using terms from controlled vocabularies to infer semantic information and to integrate data, which is ultimately the justification of the biologist’s efforts. these examples are the exception rather than the norm and often the problem is exacerbated by the inconsistent use of ontologies both within and between different experiments. the authors feel that this inconsistency stems from a lack of direction to biologists about which ontologies are appropriate in which circumstances. curators have previously attempted to re-annotate existing data with new  ontologies or to convert existing annotations between ontologies in a post hoc fashion to achieve data consistency  <cit> .

with these potential problems in mind, xperimentr enables the semi-automatic annotation of experimental data with ontology terms.

implementation
xperimentr design objectives
taking into consideration the observations outlined in the introduction to this paper, the authors drew up a list of design objectives for a user-friendly experimental annotation tool:

• to minimise the amount of time that the biologist needs to comprehensively describe the sample preparation stages of laboratory experiments

• to simplify and facilitate seamless annotation with ontology entries from appropriate and consistent ontologies

• to enable the experimental information to be stored in a structured format suitable for conversion to the appropriate data standards and for export to the public domain

• to collect and store the experimental information in a secure manner and to allow the user to share the information and data with other users

• to be universally available to the user through the internet without requiring any complex installation process for novice users

xperimentr software architecture
xperimentr is a web based software application developed using adobe flex: an open source rich internet application framework. flex enables familiar user interface components to be embedded in a standard web page whilst giving the programmer access to an extensive library of graphical user components. the flex environment gives the developer the convenience of web distribution via any flash enabled internet browser combined with the ability to create interactive and responsive software with a complex graphical user interface. as the future lifetime of flash is now limited due to technological advances, it is highly probable that any future incarnations of xperimentr will be implemented in html <dig> and javascript.

to facilitate fast-paced and intuitive experimental annotation a central feature of xperimentr is the representation of the experimental process as a graph, a conceptualisation first introduced by arrayexpress  <cit> . the flex environment facilitates the seamless inclusion of interactive graphical components by the user, such as the graph component and its nodes and arcs . nodes of the experiment graph represent physical laboratory entities, such as biological sources , laboratory containers  and experimental assays including microarrays, microscopy images and mass spectrometry data. the arcs of the graph represent actions  linking nodes of the graph, usually laboratory protocols.

RESULTS
xperimentr user interface design
the xperimentr user interface was designed to enable the rapid, detailed annotation of experimental processes and procedures. the central feature of the interface is the study graph as shown in figure  <dig>  the graph represents the experimental process as a whole and is laid out as a tree, with its root node representing the study  as a whole. every xperimentr graph has a single, unique root node as it represents a single unique study. other than the root node, the graph can contain only three types of nodes; biosources, containers and assays. arcs in the graph always represent actions taken by the laboratory biologist . the second level nodes represent the biosource, as a biological laboratory experiment will  always involve the use of some raw biological materials as input. a biosource node must have as its child , a container node with the arc between them representing the action of extracting a biomaterial from the biosource and putting it into a container. a container can have as its child, another container or a biological assay with the arc between them typically representing an experimental protocol as the sample gets processed.

the user can zoom in and out of regions of the graph using the controls embedded in the lower left of the graph panel thus enabling larger experiments to be navigated and annotated with ease. to add a node to the xperimentr graph the user simply clicks on the parent node and a popup menu will appear as shown in figure  <dig>  the menu shows the available options  as small icons. as the user moves the mouse over the small icons a tooltip shows the type of entity that the user has moused over. the user can then drag the correct node type onto the graph canvas and a connecting arc to the parent is also added.

annotation to any node or arc in the graph can be performed by clicking on it and using the upper right panel as shown in figure  <dig>  name and value pairs can be added to all graph nodes as annotation and arbitrary files can be added to any node or arc of the graph. this feature allows the biologist to attach notes, output and parameter files to the annotated information. protocol applications are added by clicking on the arc of a graph and attaching the appropriate protocol by choosing from a list via the protocol application panel on the right. there is a field in the protocol application panel  to record any deviations from the experimental protocol or unusual circumstances.

when the construction and annotation of a study graph is complete, the user may add ontology terms to the annotation by using the terminize feature. terminize traverses the study graph, using the ontology web service to check annotation and text fields, presenting the user with any ontology terms it returns. the user can then select the most appropriate to be attached to the annotation.

samples can be split or pooled. a user of xperimentr is able to interactively edit the experimental graph by adding, deleting and editing the nodes and arcs using the mouse and the various features of the application. users can edit the annotations of several graph nodes  at the same time and duplicate and store various entities and configurations.

xperimentr user interface short cuts
xperimentr is designed to aid the quick and painless annotation of laboratory experiments. as identical laboratory procedures are often repeated on different biological samples, which may also have the same attributes, we have designed several timesaving features as a part of xperimentr.

users can duplicate biosource objects and all of the associated annotation. to action this, a user simply presses the appropriate + button in the biosource table and the biosource will be duplicated.

xperimentr allows users to apply annotation to several objects at once by allowing multiple selection of objects in the study graph. this feature is only available for graph objects of the same type. a user can achieve this by either individually selecting the items or by drawing a rectangle around the graph items. the user may then alter the properties of all of the selected items by editing the details panel on the upper right hand side. in a similar way, multiple child objects can be added to the study graph simultaneously. to action this a user selects a group of parent objects and then adds a child node to one of them – child nodes of the same type will be added to all selected nodes. all of these features markedly speed up the annotation process as similar or identical processes are commonly applied to different laboratory samples that have identical  properties.

server side
to enable the rapid development of the backend of the system the authors selected the omixed  <cit>  system to build and interface to the xperimentr data store. omixed is a model driven biosciences data management system with a built in user access control mechanism. in omixed, the developer first can specify an xml data model and use the omixed builder to build the underlying data store . the data store is then accessed via calls to an xml web service provided by a java servlet. omixed also provides various client language interfaces to the data store web service interface. the omixed flex and php libraries are used to arbitrate the data store communication in xperimentr. omixed has user access control built into it at the object level and this mechanism is used to facilitate data privacy and sharing of xperimentr data items.

the xperimentr data model
the xperimentr data model is based on the isa-tab  <cit>   data standard which was designed to allow the annotation and sharing of experiments involving data from several different experimental modalities. isa-tab is essentially a modality neutral dialect of mage-tab  <cit> , an established standard for microarray data, which itself is related to an xml representation of microarray data called mage-ml  <cit> . mage-ml was the original data transport format for the mage object model  <cit>  representation of microarray data and therefore the xperimentr object model bears some similarity to the mage object model.

the decision to adopt this isa-tab / mage approach was taken as it met the design criteria identified in our preliminary meetings with biologists in that the concepts and entities identified in the isa-tab and mage standards coincide with the important concepts and entities within the biologist’s view of the experimental process. xperimentr is designed to allow the annotation of experiments from any  modality, thus also fitting in with the isa-tab rationale. the root item in the xperimentr data model is the investigation, a container for a collection of studies. a study, the isa-tab equivalent of a laboratory experiment, can contain zero, one or more experimental assays . other important items in the data model include biosource, biosample , action, protocol and ontologyterm. the data model is expressed in xml format and this is used to build the entities in the data store. the full xml data model and the associated entity relationship diagram are contained in appendix i of this paper.

minimum information about a biological sample and technology templates
there are a number of details concerning the biological sample which should be captured regardless of the technology being used to generate the data. this includes for example the species, strain and genetic modification. in xperimentr these details are called miabs . xperimentr can also be used to capture the minimum information about the technology used to generate the data. users can create a template for example to capture information about a microarray technology. the user can then save a completed template for a particular technology, such as an affymetrix hgu <dig> array. they can then associate the completed template with multiple data files with a single mouse click. the miabs data can then be compiled together with the appropriate details from the specific technology template to conform to minimum information standards.

xperimentr export
the data model described in the previous section can be used to enable the construction of data output adapters for data export and reporting. so far three output adapters have been built for xperimentr; an isa-tab exporter primarily designed for data sharing and publication, a pdf document giving protocol information  and a pdf representation of a study and the items and actions used in it .

the protocol output information is achieved by using the omixed java interface and the use of a servlet to construct and output the pdf document. the isa-tab and study reporter have been built using the omixed php interface. data about a study or investigation from the omixed data store is read via the omixed php web service interface into a php data model. the php model can then be traversed and relevant data output and sent to the user in the format required. this approach is extensible in that new adapters for other data output formats can be built very cheaply using the existing php data model which accurately reflects the stored data and its structure. isa-tab documents constructed from xperimentr have been checked using the isavalidator tool  <cit>  and found to conform to the isa-tab standard and therefore can be uploaded to the bio investigation index  <cit>  data repository for publication.

xperimentr ontology lookup service
users can annotate the terms and descriptions used to describe the nodes and arcs with ontology terms. a set of pre-determined ontologies is set up for each investigation to enable the consistent and compatible annotation both within and across studies.

xperimentr takes advantage of web services to lookup ontology terms based on the sample annotation entered by the user. in effect a text string is sent to the service, along with the selected ontologies to be searched, and the service returns ontology terms that match the syntactic or semantic content of the string. ontology terms that match are presented to the user who can then select the terms to be associated with the text string and referenced in the xperimentr data store.

in developing this feature, we first looked at the existing ontology web services available, namely ols  <cit> , bioportal  <cit>  and terminizer  <cit>  and integrated first terminizer and then ols into xperimentr. upon experimentation with these resources, the authors found that neither of the services fully matched the requirements of xperimentr. the terminizer service only performed full text matching for search strings against a predefined ontology set and ols lookups suffered from variable and significant latency. neither allowed the addition of supplementary ontologies. therefore we built our own lightweight ontology lookup service specifically to meet the needs of xperimentr. the xperimentr ontology service provides a simple search service and can be populated with ontologies in obo format. ontology information is returned via a web service interface in json format. this component is completely decoupled from the xperimentr client application and can be used as a standalone service by other applications.

xperimentr protocol use and management
when meeting with laboratory biologists to discuss the important features of xperimentr, it quickly became apparent that the inclusion and management of laboratory protocols was a very high priority for those working with biological samples. xperimentr endeavours to simplify the handling of protocols by providing a simple interface for the user to input and search laboratory protocols. salient points are;

• once entered into the xperimentr system the text of a protocol may not be altered. if a user deviates from the defined steps then there is a provision to record the deviations.

• protocols can be viewed, selected and downloaded via a searchable web interface.

• protocols can kept private or be shared with other users of the system

• a user can attach arbitrary comments to a protocol. these are also searchable along with the text of a protocol.

protocols are added via a user interface and are included in experiments by attaching them to actions . an output adapter exists for individual protocols where the information can be downloaded as a pdf document.

xperimentr data security
xperimentr handles security at the individual object level via the built in omixed security layer. the omixed security layer makes each object that is created by a user  automatically private and only accessible and editable by its creator. objects can be made more widely available by adding an access group to the object’s permissions. individual users and groups of users may be added to any access group. access groups can be given read only permissions, or full read, write and delete permissions.

xperimentr builds on this infrastructure by giving each investigation a unique access group when it is created. the creator of an investigation can then add and remove other users from the investigation’s access group and also give the individual users read only access or full access to the data items within an investigation.

xperimentr will automatically log a user out of the system if there is no user action in an xperimentr session for more than  <dig> minutes.

xperimentr integration with underlying data repositories
xperimentr can be used as a standalone tool or can be integrated with underlying data repositories. the current configuration of the biological data management architecture at imperial college is shown in figure  <dig>  as shown, the imperial installation of xperimentr is currently integrated with three underlying data repositories which store raw data and assay metadata from different experimental modalities. these are base  <cit>  for transcriptomic data, omero  <cit>  for imaging data and an in-house data store called metabolomixed that can store data from ms and nmr equipment, thus covering both the proteomic and metabolomics experimental modalities. essentially the integration takes the form of a link between an xperimentr assay object and the corresponding experimental data object in the underlying data store. customised code is then written in the xperimentr interface to retrieve and display  data files and assay metadata from the underlying data repository. the form of this code depends on the api available for the underlying store. where ever possible this link is made seamless to the user and no extra user authentication is required. as an example, figure  <dig> shows the omero integrated user interface.

CONCLUSIONS
there is a clear need to recognise the importance of the detailed annotation of biological experiments and of adherence to the existing data standards for recording experimental information to ensure the future proofing of data generated from today’s experiments. we also recognise that the laboratory biologist will have a different set of priorities and will personally gain very little from the time consuming process of detailed experimental annotation. in developing xperimentr, we have put the needs of the laboratory biologist at the centre of the annotation process and developed a tool which can be used painlessly alongside a laboratory notebook to record the sample preparation steps taken in the laboratory. the tool is user friendly, has several time-saving enhancements and is standards compliant. our focus, in this endeavour, has been on the user experience and how best to capture the relevant information without distracting the scientist from the tasks within the laboratory.

availability and requirements
• project name: xperimentr

• project home page: http://www <dig> imperial.ac.uk/bioinfsupport/resources/data_management/xperimentr

• operating system: platform independent

• programming language: java, php, flex

• other requirements: postgresql

• license: gnu general public license v <dig> 

• any restrictions to use by non-academics: no limitations

xperimentr is freely available from the project website and has no usage restrictions. it is implemented using java, php and flex and tested on centos linux  <dig>  it requires the apache http server, the postgresql database and apache tomcat. optional dependencies are the omero image management system , the base microarray database  and metabolomixed nmr/ms storage system .

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ct responsible for the initial data model design, designing and implementing xperimentr output adapters, some modifications and improvements to xperimentr interface, overall project management. gb conceived xperimentr and implemented several user interface features, liaison with biologists, produced first fully functional xperimentr prototype. mw development of release candidate from xperimentr prototype, ontology service and data silo connectors, construction of xperimentr virtual machine and deployment of production and demonstration systems. sb secured funding for this work and oversaw all aspects of the project. all authors read and approved the final manuscript. 

