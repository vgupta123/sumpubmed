BACKGROUND
new technologies have resulted in the abundance of sequence data that needs to be assigned with functional annotations. for example, the number of completely sequenced genomes in kegg  <cit>  database has more than doubled from  <dig>  to  <dig> . this rapid growth in the sequenced data coupled with the lack of human resources to manually curate these genomes have resulted into the need to develop computational function annotation techniques  <cit> . the automatic function prediction  community is attempting to bridge this gap by developing techniques that predict function annotations for proteins. in addition to conventional homology search methods, e.g. blast  <cit> , fasta  <cit> , ssearch  <cit> , and motif/domain searches, e.g. prints  <cit> , prodom  <cit> , pfam  <cit> , interpro  <cit> , and blocks  <cit> , several advanced methods were developed that extract function information thoroughly from sequence database search results. these methods include pfp  <cit> , esg  <cit> , gotcha  <cit> , gopet  <cit> , ontoblast  <cit> , gofigure  <cit> , and confunc  <cit> . on the other hand, sifter  <cit> , flowerpower  <cit> , and orthostrapper  <cit>  employ phylogenetic trees to transfer functions to target genes in the evolutionary context. there are other function prediction methods considering co-expression patterns of genes  <cit> , 3d structures of proteins  <cit>  as well as interacting proteins in large-scale protein-protein interaction networks  <cit> .

for the advancement of such computational techniques it is very important that there are community wide efforts for objective evaluation of prediction accuracy. community-wide prediction assessments have become popular in several computational prediction areas. such experiments include casp   <cit>  capri   <cit> , and cagi  . for the field of afp, some experiments have been held in the past, which include mousefunc  <dig> , ismb  afp sig   <dig>  <cit> , the  <dig> afp meeting  <cit> , and also the function prediction category in casp <dig>  <cit>  and casp <dig>  <cit> . as a part of recently concluded ismb conference  <dig>  cafa  experiment was conducted to gauge the gene ontology   <cit>  prediction accuracy of various afp methods .

in the cafa experiment in  <dig>  in total of  <dig>  target protein sequences were released for prediction, which consist of seven eukaryotic genomes, eleven prokaryotic genomes, and a supplementary set of additional sequences. the participating predictor groups were expected to submit go annotations for these targets in biological process  and molecular function  domains. out of these set, the organizers selected  <dig> targets in bp domain and  <dig> targets in mf domain that newly obtained experimental annotation in the swiss-prot database from january to may  <dig>  which is after the closing of the submission. submitted predictions were evaluated using different prediction accuracy measures described in methods.

we have submitted predictions using two methods developed in our group, the protein function prediction  method  <cit>  or the extended similarity group  method  <cit> . pfp and esg use psi-blast sequence database search results, from which function information is extracted extensively, even from weakly similar sequences. in this article, we analyze the prediction performance of these two methods in comparison with blast, the prior method, and gotcha  <cit> , whose predictions are provided by the cafa organizers. prediction performance evaluation employed four metrics used by the organizers; the threshold method, the top n method, the weighted threshold method, and the semantic similarity method . besides evaluating original predictions by pfp and esg submitted to cafa, we further investigated the following to have a better understanding of their performance: 1) for pfp predictions, we reranked predicted go terms using a different score from the originally used score and compared the performances; 2) we combined pfp and esg predictions with those from the prior method that simply ranks go term by the background frequency in a database; 3) we evaluated prediction accuracies of each method separately for different functional categories; and 4) we examined successful and unsuccessful predictions by pfp and esg in comparison with blast. the in-depth analysis discussed here will complement the overall assessment by the cafa organizers that will be published elsewhere. since pfp and esg are based on sequence database search results, our analyses are not only useful for pfp and esg users but will also shed light on the relationship of the sequence similarity space and functions that can be inferred from the sequences.

methods
function prediction methods
in this section we briefly describe the afp methods that are compared in this study. first we explain the pfp and esg methods. then blast, the prior method, and gotcha, whose prediction results were provided by cafa organizers, are also described. predictions in the mf and the bp domain were evaluated by comparing them with annotations with experimental evidences  in the uniprot database. for each target, predictions were restricted to  <dig> highest score predictions with the score ranging between  <dig> and  <dig> 

protein function prediction  algorithm
the pfp algorithm  <cit>  uses psi-blast to obtain sequence hits for a target sequence and computes the score to go term fa as follows:

  s=∑i=1n∑j=1nfunc-log)+bp, 

where n is the number of sequence hits considered in the psi-blast hits, nfunc is the number of go annotations for the sequence hit i, e-value is the psi-blast e-value for the sequence hit i, fj is the j-th annotation of the sequence hit i, and constant b takes value  <dig>  to keep the score positive when retrieved sequences up to e-value of  <dig> are used. the conditional probabilities p are to consider co-occurrence of go terms in single sequence annotation, which are computed as the ratio of number of proteins co-annotated with go terms fa and fj as compared with ones annotated only with the term fj. to take into account the hierarchical structure of the go, pfp transfers the raw score to the parental terms by computing the proportion of proteins annotated with fa relative to all proteins that belong to the parental go term in the database. the score of a go term computed as the sum of the directly computed score by eqn.  <dig> and the ones from the parental propagation is called the raw score.

in addition to the raw score, we also compute the p-value and the confidence score for a go term. the purpose of computing the p-value of a go term is to consider the background distribution of the raw scores of the go term. it is computed using a term specific raw score distribution obtained from predictions made for protein sequences in a benchmarking dataset of eleven genomes. then, the confidence score is further computed from the p-value by considering the percentage of correct predictions at each p-value within  <dig>   <dig>  and  <dig> edge distance of the target term on the go structure. in cafa, predicted go terms by pfp were sorted by the confidence score.

extended similarity group  algorithm
esg  <cit>  recursively performs psi-blast searches from sequence hits obtained in the initial search from the target sequence, thereby performing multi-level exploration of the sequence similarity space around the target protein. each sequence hit in a search is assigned a weight that is computed as the proportion of the -log  of the sequence relative to the sum of -log  from all the sequence hits considered in the search of the same level; and this weight is assigned for go terms annotating the sequence hit. the weights for go terms found in the second level search are computed in the same fashion. ultimately the score for a go term is computed as the total weight from the two levels of the searches. the score for each go term ranges from  <dig> to  <dig> .

the prior method
in the prior method, each go term is assigned the frequency of its occurrence in swiss-prot  including a pseudo count of  <dig>  for a given target sequence, top  <dig> go terms with highest frequencies were selected as predictions. thus, all target sequences have the same set of predictions by this method. the prior predictions for each target were provided by the organizers.

we have also combined the prior predictions with predictions by pfp and esg. these predictions are called the enriched pfp/esg or pfp/esg + prior. in pfp + prior, we added go terms to pfp predictions that were not predicted by pfp . the score  for go terms imported from the prior method was rescaled by considering maximum and minimum scores of pfp predictions for that target. go terms originally predicted by pfp and ones imported from the prior method were sorted by the score. similar to the pfp + prior, esg + prior also combined the original esg predictions and go terms from the prior method that were not predicted by esg. since both the esg score and the frequency in the prior method range from  <dig> to  <dig>  go terms from the two methods were sorted by the score without rescaling.

blast
blast search  <cit>  with default parameters was performed for each target sequence. the score for a particular annotation term was the maximum sequence identity with the hit annotated with that term. predictions by blast were provided by the organizers.

gotcha
gotcha  <cit>  incorporates the hierarchical structure of go vocabulary with the idea of homology based annotation transfer to achieve improved coverage. it uses blast  <cit>  to search similar sequence hits and assigns a score, -log, to each go annotation of the sequence hits and its less specific ancestors in the go hierarchy. the scores assigned to each go node from all the sequence hits are summed and then normalized using the score of the root of either mf or bp ontology. the normalized score thus obtained is referred as i-score, which was used for selecting target annotations. predictions by gotcha were provided by the organizers.

assessment methods for prediction accuracy
in cafa, predictions were evaluated using four different methods. the threshold and the top n methods count exact match of predicted and the actual annotations, punishing any predictions that are more or less specific than the actual annotations. on the other hand, the weighted threshold and the semantic similarity take into account the information content of terms being matched on the go hierarchy. please refer to the organizers' paper in the same journal issue for more details. we have used gene ontology version october  <dig> for obtaining ancestors for each go term.

threshold method
for each prediction method we use thresholds ranging from  <dig>  to  <dig>  to calculate the average precision, recall, and specificity for all targets. for each target if a particular prediction has a score above the threshold, the predicted go term is propagated to the root of the ontology. the performances are analyzed in terms of precision-recall curve and the receiver operator characteristic . for the threshold method, when using pfp raw scores that are not scaled between  <dig> and  <dig>  we selected  <dig> to  <dig> go term predictions by the increments of  <dig> and compute average precision, recall and specificity for all targets.

top n
the top n highest scoring predictions for a prediction method are taken into consideration with n varying from  <dig> to  <dig>  for all the predictions within top n, parental annotations until the root of the ontology are included. all predicted annotations with a tie score at a particular ranking are considered for the cutoff.

weighted threshold
as shown in equation  <dig>  frequency of a go term c in the database is computed as the number of gene products annotated by term c and its children h in the go hierarchy.

  freq=annot+∑h∈childfreq, 

where annot is the number of gene products annotated by non iea evidence codes in september  <dig> version of swiss-prot database. probability of a particular term c, p = freq/freq, is computed as the ratio of the frequency of c against the frequency of the root term of the mf or bp ontology. information content of term c is given by ic = -log10). using this information content, weighted precision is calculated as the sum of information content of the terms in the true positive set divided by the sum of information content of the terms in the true and false positive sets. similarly, weighted recall is computed as the sum of information content of the terms in the true positive set divided by the sum of information content of the terms in the true positive and false negative sets. as with the previous methods, if a particular prediction is above the given threshold, then its ancestors till the root of the ontology are included in the prediction set.

semantic similarity
semantic similarity for a pair of go terms is given by the maximum information content of a shared ancestor of both terms and it is averaged between all pairs of true and predicted terms to obtain the semantic similarity for a target. we calculate the semantic precision for a target protein as the average of the difference between the ic of a predicted term and the maximum of the ic of common parental terms between the predicted term and any correct term. similarly, semantic recall is calculated for a target as the average of the difference between the ic of a true term and the maximum of the ic of common parental terms between the true term and any predicted term. here the information content values are based on the prior probabilities for each term provided by the cafa organizers. the average semantic similarity, semantic precision and semantic recall are computed across all targets at each threshold varying from  <dig>  to  <dig> .

RESULTS
pfp with raw scores
in the cafa experiment we submitted pfp predictions sorted by the confidence score. in this section, we ranked predicted go terms by pfp according to the raw score and examined how its performance compared with the confidence score and the other methods. from ranked list of pfp predictions by their raw score, precision, recall, and specificity were calculated at each of the top n predictions taken with an interval of  <dig> 

pfp and esg with enriched priors
next, we combined the pfp and esg predictions with the prior predictions  to see if pfp/esg predictions were missing obvious go terms . we show the performance of the methods is evaluated with the top n method, where n ranges from  <dig> to  <dig> 

esg with enriched priors  shows the best performance among all the methods in bp domain when evaluate by the precision-recall plot . the improvement by esg + prior over esg is also observed in terms of roc . esg + prior also performed better than esg in the mf domain . esg tends to predict fewer go terms than even blast since its algorithm essentially selects terms that are consistently identified by iterative searches. the results in figure  <dig> indicate that obvious go terms in prior were not included in esg predictions. since some go terms may be lost in the iterative process of the esg algorithm, the scoring scheme needs to have a close inspection as a future work. on the other hand, adding prior prediction to pfp did not show any improvement over pfp, which indicates that pfp's predictions already include correct terms from prior.

pfp and esg with semantic similarity
in figure  <dig> the performance of the methods are evaluated in terms of the semantic similarity. the average of the semantic similarity between all pairs of true and predicted go terms for each method is plotted relative to thresholds in figure 3a and 3c for the bp and mf domain, respectively. it is shown that esg's performance is significantly better than the other methods for both bp and mf targets. pfp performance is average among all the teams in this measure. on the other hand, pfp stands out in the semantic precision and recall plots . esg comes second in the bp domain  but shows worst performance among all in the prediction of mf terms .

prediction accuracy for different go terms

in figure  <dig>  we analyze the prediction accuracy for different go terms. only go terms and their child terms that are used for annotating  <dig> or more targets are considered. this results in  <dig> bp terms and  <dig> mf terms for this analysis.

for each go term under consideration, we identified target proteins that are annotated by the go term and counted how many were correctly predicted to have the same annotation by each of the prediction methods. for example, there were  <dig> out of  <dig> bp targets that were annotated by the bp go term go: <dig> transport. the number of targets out of  <dig> that were predicted by a method to have the same annotation were considered as true positives  and the targets that were not predicted were considered as false negatives . the rest of the  <dig> targets that do not have actual annotation  but were predicted to have this annotation were considered as false positives . to take into account of the fact that parental terms of a go term were less specific descriptions of the same function, we have included all the ancestors of each predicted term shortlisted based on the cutoff score used. for each selected term at the cutoffs ranging from  <dig>  to  <dig> , precision, tp/, and recall, tp/, were computed. further, f <dig> measure for the term is calculated as the maximum harmonic mean at each cutoff, which is given by

  f1=2*precision*recallprecision+recall 

we compared pfp  and esg predictions submitted to cafa, blast, priors, gotcha and enriched pfp and enriched esg predictions.

out of the  <dig> bp terms, esg showed the highest f <dig> measure among the seven methods for  <dig> terms. pfp, priors, blast, gotcha, enriched pfp, and enriched esg showed highest f <dig> measure for  <dig>   <dig>   <dig> ,  <dig>  and  <dig>  terms, respectively. the average f <dig> measures across the  <dig> bp terms by pfp, esg, prior, blast, gotcha, enriched pfp, and enriched esg were  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> ,  <dig> , and  <dig> , respectively. in figure 4a a sample of  <dig> bp terms out of  <dig> is shown. for the term go: <dig> response to stress that is used to annotate  <dig> proteins, esg showed the best f <dig> measure value of  <dig>  followed by pfp  and gotcha . on the other hand, for go: <dig> cellular component organization that shares annotations with  <dig> bp targets, all five methods except priors and enriched esg showed comparable performance with f <dig> measure around  <dig> . overall, the enriched pfp method showed almost identical f <dig> scores to pfp whereas the enriched esg showed slightly lower average f <dig> score as compared to esg. enriched esg showed a higher recall than esg but with a lower precision, which overall decreased the f <dig> score than esg.

examples of successful and failed of pfp and esg predictions
finally, we discuss the prediction examples  where pfp, esg, and blast succeeded at different levels that provide insights into the advantages and shortcomings of our methods. each case in table  <dig> shows correct target annotations propagated till the root of the ontology which were predicted by pfp, esg, and blast. since the number of actual and predicted go terms for a target can be very large  when predictions of low scores are included, table  <dig> includes only terms that are relevant to discussion.

t <dig>  e. coli a <dig> protein trba
f <dig> measure
pfp: <dig> 
esg: <dig> 
go:0044238
go:0044237
go:0043170
go:0044260
go:0019538
go:0044267
go:0006457
primary metabolic process
cellular metabolic process
macromolecule metabolic process
cellular macromolecule metabolic process
protein metabolic process
cellular protein metabolic process
protein folding
go:0015804
go:0046483
go:0009110
go:0019538
go:0009110
carboxylic acid metabolic process
cellular macromolecule metabolic process
neutral amino acid transport
heterocycle metabolic process
vitamin biosynthetic process
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
go:0006810
go:0008643
go:0007165
go:0008152
transport
carbohydrate transport
signal transduction
metabolic process
 <dig> 
 <dig> 
 <dig> 
 <dig> 
t <dig>  e. coli rute
f <dig> measure
pfp: <dig> 
esg: <dig> 
go:0008152
go:0034641
go:0006139
go:0006206
go:0019860
go:0006208
metabolic process
cellular nitrogen compound metabolic process
nucleobase, nucleoside, nucleotide and nucleic acid metabolic process
pyrimidine base metabolic process
uracil metabolic process
pyrimidine base catabolic process
t <dig>  e. coli sensor protein cpxa
f <dig> measure
pfp: <dig> 
esg: <dig> 
go:0044237
go:0006796
go:0016310
go:0044260
go:0006464
go:0043687
go:0006468
cellular metabolic process
phosphate metabolic process
phosphorylation
cellular macromolecule metabolic process
protein modification process
post-translational protein modification
protein amino acid phosphorylation
go:0016310
go:0006139
go:0019222
phosphorylation
nucleobase, nucleoside, nucleotide and nucleic acid metabolism
regulation of metabolism
1
1
1
go:0006468
protein amino acid phosphorylation
 <dig> 
go:0007165
go:0018106
go:0016310
go:0009405
signal transduction
peptidyl-histidine phosphorylation
phosphorylation
pathogenesis
1
1
 <dig> 
 <dig> 
go:0006950
go:0009987
go:0009628
go:0006979
go:0044260
go:0043687
go:0006468
response to stress
cellular process
response to abiotic stimulus
response to oxidative stress
cellular macromolecule metabolic process
post-translational protein modification
protein amino acid phosphorylation
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
t <dig>  homo sapiens ribonuclease h <dig> subunit b
f <dig> measure
pfp: <dig> 
esg: <dig> 
go:0006401
go:0006401
go:0044248
go:0034641
go:0044260
rna catabolic process
rna catabolic process
cellular catabolic process
cellular nitrogen compound metabolic process
cellular macromolecule metabolic process
go:0044267
go:0046451
go:0006351
go:0044260
go:0006721
go:0044238
cellular protein metabolism
diaminopimelate metabolism
transcription, dna-dependent
cellular macromolecule metabolism
terpenoid metabolism
primary metabolism
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
go:0006418
trna aminoacylation for protein translation
 <dig> 
go:0006259
go:0006260
go:0006261
go:0006271
go:0006401
dna metabolic process
dna replication
dna-dependent dna replication
dna strand elongation involved in dna replication
rna catabolic process
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
this table shows partial list of go annotations and their ancestors for four targets that have been predicted using pfp, esg, and blast. the first column lists the target ids along with the maximum f <dig> score among predictions at all cutoffs using the predicted terms and their ancestors from each method. for each method we list the predicted go annotations and partial list of their ancestors along with their scores.

the first example is t <dig>  escherichia coli protein trba, which is annotated with go: <dig> protein refolding as per the cafa target annotations. blast search finds only one sequence hit o <dig> that does not have any non-iea annotation in the database resulting in no predictions. as for esg, some of the correct low resolution annotations are extracted from a sequence hit q9uz <dig> retrieved in the first iteration of psi-blast search with very large e-value  and its second level hits, including q8a <dig>  q64ps <dig>  q5l9i <dig>  these predicted annotations are parental terms of actual annotations. for example, a predicted term, go: <dig> metabolic process, is a parental term of go: <dig> protein refolding, and go: <dig> amino acid biosynthetic process shares a common ancestor go: <dig> cellular metabolic process with the target annotation go: <dig> protein refolding. pfp was able to predict some low resolution parental terms of the correct annotation such as go: <dig> cellular macromolecule metabolic process and go: <dig> cellular protein metabolic process, with significantly high confidence scores of  <dig>  and  <dig> . both these terms are not part of annotations of any of the psi-blast hit but received partial scores by considering co-occurrence of go terms  in eq. 1).

the second example, t <dig>  rute from e. coli, is annotated by two leaf terms go: <dig> nitrogen utilization and go: <dig> uracil metabolic process. for this target blast again does not predict anything as there are no search hits with non iea annotations. using iea annotation of highly similar psi-blast hits, esg predicted go: <dig> oxidation-reduction process, which shares a shallow common ancestor go: <dig> metabolic process with a target term go: <dig> uracil catabolic process. similar to the previous example, pfp again predicted low resolution annotations go: <dig> nucleobase, nucleoside, nucleotide and nucleic acid metabolism and go: <dig> pyrimidine ribonucleoside metabolism thereby showing higher sensitivity when no close homologs are available for annotation transfer.

the third target t <dig> is sensor protein cpxa from e. coli with leaf annotation go: <dig> protein amino acid autophosphorylation. esg predicted go: <dig> peptidyl-histidine phosphorylation, which shares an immediate parent go: <dig> protein amino acid phosphorylation with the target term go: <dig> protein amino acid autophosphorylation. also another term go: <dig> phosphorylation, which is an ancestor of the target annotation is predicted by esg with a high score of  <dig> . pfp correctly predicts the ancestors of the target term, go: <dig> phosphorylation, go: <dig> protein modification and go: <dig> protein amino acid phosphorylation with very high scores. blast predicts the target term and its ancestors with lower scores along with a number of unrelated predictions with high scores. overall all the methods are able to predict the target term or its close ancestors, but the total number of terms predicted by blast  and pfp  are significantly higher than esg , resulting into more precise predictions by esg.

the last example, t <dig>  homo sapiens ribonuclease h <dig> subunit b, is annotated by a leaf term go: <dig> rna catabolic process which has been accurately predicted by blast. blast obtains this correct annotation from sequence hits such as q5tbb <dig>  q5xi <dig>  q3zbi <dig>  q80zv <dig>  q28gd <dig>  and q5hzp <dig>  these sequences were also found by esg, however, due to use of an older database that do not have updated annotations for these sequences, no correct annotation was retrieved. there are some shared ancestors, e.g. go: <dig> rna metabolic process, go: <dig> nucleic acid metabolic process, go: <dig> cellular macromolecule metabolic process between the low scoring esg prediction go: <dig> leucyl-trna aminoacylation and the target annotation go: <dig> rna catabolic process. pfp was able to correctly predict low resolution terms, go: <dig> cellular macromolecule metabolism and go: <dig> rna metabolism.

to summarize, the first and the second examples illustrate a situation where pfp predicts low resolution parental terms of actual annotations while blast can only find  <dig> or  <dig> terms. there are pfp's successful prediction which were found indirectly by using the go term co-occurrence. in the second example, iea annotations lead to correct predictions for esg and pfp. the third example is the case that esg made predictions with higher precision with smaller number of false positives than blast and esg. the last example is that esg missed to make correct prediction because the sequence database which was searched was not up-to-date.

discussion
in this work we have analyzed the prediction performance of pfp and esg in the cafa  <dig> experiment. in addition to the original submission of pfp and esg, we have investigated the performance of a different scoring function  for pfp, to examine if quick improvement is possible by considering prior knowledge of frequency of go terms in the database . moreover, we evaluated prediction accuracy at each functional categories and provided illustrative examples to understand successful and failed predictions by pfp and esg.

several points can be concluded from this study: firstly, correct function information can be extracted from blast results more extensively than simply taking go terms from top hits as demonstrated in some of the results that show superior performance by pfp, esg, and gotcha over blast. however, there are situations where pfp and esg's performance compared unfavorably to blast and prior depending on how performance is evaluated. also we observed that esg predictions are improved by simply adding prior. thus, we believe there is still room for improvement by devising techniques for consistently extracting accurate information thoroughly from blast results. it is observed that iea terms provided correct information in several cases, which led to better performance by pfp/esg over blast that only considered non-iea hits. keeping iea information in the database would enlarge areas in the sequence similarity space with functional information, and thus increase the chance to retrieve correct function information, although one should always keep in mind that iea may be incorrect, and moreover, careless applications of computational function prediction methods would increase incorrect iea and propagate erroneous annotation through databases  <cit> .

CONCLUSIONS
we have analyzed function predictions by pfp and esg that were submitted to cafa  <dig>  overall esg and pfp showed better performance than blast and prior, but there are also opposite situations. some of the lessons learned would be generally useful for developers and users of computational function prediction methods.

competing interests
the authors declare that they have no competing interests.

financial competing interests
the authors declare that they have no financial competing interests.

authors' contributions
mc submitted predictions to cafa. in addition, mc participated in design, implementation of evaluation programs for the study, performed the analysis, and drafted the paper. ik coded some of the evaluation programs, performed the analysis, and drafted the paper. dk conceived of the study, participated in its design, and finalized the manuscript. all authors read and approved the final manuscript.

