BACKGROUND
biological sequences, including dna, rna and proteins, contain functionally important motifs, such as transcription factor binding sites , rna splice sites, and protein domains. with the increasing-availability of genome sequences, identification of such functional motifs not only plays important roles in gene finding and function prediction but also is a fundamental step in reconstructing gene regulatory networks and in revealing gene evolutionary mechanisms  <cit> .

a commonly used model for motif identification is the weight matrix model  proposed by staden  <cit> , also called the position weight matrix  or mononucleotide weight matrix . a pwm is usually generated from a set of aligned instances of known motif sequences, using the observed position-specific base frequencies and/or prior information. stormo and fields  <cit>  showed that the pwm score of a motif is proportional to the total binding energy contributed by individual bases. pwm has been used by many motif identification programs, e.g., matlnspector  <cit>  and match  <cit> , and performs reasonably well for motif identification. while a pwm can capture both nucleotide preferences at each position and different levels of position specificity, it does not account for functional dependencies between positions. recent studies  <cit>  indicate that there are often important interactions between positions, adjacent as well as non-adjacent, within a motif. the inability of the pwm to capture such dependencies is a limitation as the pwm model often produces a large number of false positives in a genome-wide scan  <cit> .

many models have been developed to incorporate position dependencies. motif models, such as the dinucleotide weight matrix model   <cit>  and the weight array model   <cit> , can incorporate dependencies between adjacent positions. to incorporate further dependencies of non-adjacent positions, ponomarenko et al.  <cit>  extended dwmm by introducing the oligonucleotide weight matrix model, which includes a comprehensive set of oliogonucleotide matrices classified into  <dig> biological function categories. a wam could also be extended to a high order wam in principle, e.g., windowed 2nd order wam  <cit> . however, the exponentially increased number of parameters of these models makes them impractical due to insufficient training data. to address the weaknesses of wam in incorporating long-range interactions, burge and karlin  <cit>  proposed the maximal dependence decomposition  model, which has a binary tree structure formed by a set of conditional wams. while the mdd model can capture non-adjacent dependencies through the conditional wam models, it still requires a rather large number of training sequences, which are partitioned into smaller subsets to train all conditional wams. to alleviate the requirement of a large training set, cai et al.  <cit>  developed a bayesian tree to model dependencies within rna splice sites; ellrott et al.  <cit>  suggested a position order optimized markov chain model, which reorders motif positions to bring distant but dependent positions into near neighbors. more recently, several other models have been developed, including bayesian networks for modeling protein-dna binding sites  <cit> , maximum entropy model  for splice site identification  <cit> , permuted variable length markov model  for finding transcription factor binding sites and splice sites  <cit> . for a biological motif with position dependencies, these models can show improvement in prediction accuracy over the models that assume independence. incorporating position dependencies can also improve the accuracy of de novo motif discovery  <cit> .

in this paper, we present a new and flexible motif model, the omima, to incorporate position dependencies within a motif. omima can not only adjust model complexity according to motif dependency structures but also minimize model complexity without compromising prediction accuracy. as an integrated part of omima, we also introduce the directed neighbor-joining  method to optimally rearrange positions to minimize markov order. we then describe and discuss the methods for selecting the best model. we implement our model into the omima system that is freely available to the public.

RESULTS
mixed markov models
let xi be the discrete random variable associated with position i in a biological motif x of length w. for dna sequences, xi takes values from set b = {a, c, g, t}; and for protein sequences, xi takes values from  <dig> different amino acids. xi follows a multinomial distribution. let xik
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaieqacqwfybawdaqhaawcbagaemyaakgabagaem4aasgaaaaa@30d2@ = xi-k...xi- <dig> and xik
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaieqacqwf4baedaqhaawcbagaemyaakgabagaem4aasgaaaaa@3112@ = xi-k...xi- <dig>  where k =  <dig> ..., w - 1; upper case x  is a random variable and lower case x  is a particular value. the xi0
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwg4baedaqhaawcbagaemyaakgabagaegimaadaaaaa@309b@ denotes an empty sequence and pr =  <dig>  additionally, let x-j = xw-j, x-j = xw-j, where j =  <dig> ..w -  <dig>  if one uses the kth order markov model , the probability of observing a motif sequence x is just the product of conditional/transition probabilities. let mkl
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaem4aasgabagaemitaweaaaaa@307c@ be a kth order markov model of a linear chain, and mkc
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdaqhaawcbagaem4aasgabagaem4qameaaaaa@306a@ be a kth order markov model of a circular chain. the probability of a motif sequence is given by equation  for a linear chain and equation  for a circular chain, respectively.

pr⁡=pr⁡∏i=k+1wpr⁡     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggqbaucqggybgccqggoaakieqacqwf4baecqgg8bafcqwgnbqtdaqhaawcbagaem4aasgabagaemitaweaaogaeiykakiaeyypa0jagiiuaalaeiocainaeiikagiae8hwag1aa0baasqaaiabdugarjabgucariabigdaxaqaaiabdugarbaakiabg2da9iab=hha4naadaaaleaacqwgrbwacqghrawkcqaixaqmaeaacqwgrbwaaagccqggpaqkdaqewbqaaigbccfaqjabckhayjabcicaoiabdifaynaabaaaleaacqwgpbqaaeqaaogaeyypa0jaemieag3aasbaasqaaiabdmgapbqabagccqgg8bafcqwfybawdaqhaawcbagaemyaakgabagaem4aasgaaogaeyypa0jae8heag3aa0baasqaaiabdmgapbqaaiabdugarbaakiabcmcapawcbagaemyaakmaeyypa0jaem4aasmaey4kasiaegymaedabagaem4dachaniabg+givdgccawljagaaczcamaabmaabagaegymaedacagloagaayzkaaaaaa@6d8e@

pr⁡=∏i=1wpr⁡     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggqbaucqggybgccqggoaakieqacqwf4baecqgg8bafcqwgnbqtdaqhaawcbagaem4aasgabagaem4qameaaogaeiykakiaeyypa0zaaebcaeaacyggqbaucqggybgccqggoaakcqwgybawdawgaawcbagaemyaakgabeaakiabg2da9iabdiha4naabaaaleaacqwgpbqaaeqaaogaeiifawnae8hwag1aa0baasqaaiabdmgapbqaaiabdugarbaakiabg2da9iab=hha4naadaaaleaacqwgpbqaaeaacqwgrbwaaagccqggpaqkasqaaiabdmgapjabg2da9iabigdaxaqaaiabdeha3bqdcqghpis1aogaaczcaiaaxmaadaqadaqaaiabikdayagaayjkaiaawmcaaaaa@59b7@

compared to a linear markov chain, a circular markov chain incorporates additional dependencies that may contain subtle signals that allow the model to distinguish true motifs from false ones, especially when false motifs are similar to true motifs.

suppose a motif x can be divided into m independent sub-motifs, that is x = y <dig> ... ym and each sub-motif is modeled as an independent markov chain, that is mx=my <dig> …,mym
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdawgaawcbagaemiwagfabeaakiabg2da9iabd2eannaabaaaleaacqwgzbqwdawgaaadbagaegymaedabeaaasqabagccqggsaalcqwimayscqggsaalcqwgnbqtdawgaawcbagaemywak1aasbaawqaaiabd2gatbqabaaaleqaaaaa@3b07@, then the probability of the sequence  given the markov models is:

pr⁡=∏i=1mpr⁡
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacyggqbaucqggybgccqggoaakieqacqwfybawcqgh9aqpcqwf4baecqgg8bafcqwgnbqtdawgaawcbagaemiwagfabeaakiabcmcapiabg2da9maarahabagagiiuaalaeiocainaeiikagiae8xwak1aasbaasqaaiabdmgapbqabagccqgh9aqpcqwf5bqedawgaawcbagaemyaakgabeaakiabcyha8jabd2eannaabaaaleaacqwgzbqwdawgaaadbagaemyaakgabeaaasqabagccqggpaqkasqaaiabdmgapjabg2da9iabigdaxaqaaiabd2gatbqdcqghpis1aaaa@5170@

these independent markov models, each of which is position-optimized for its corresponding sub-motif, form an optimized mixture of markov models . an example of omima is illustrated in figure  <dig>  however, for short motifs such as transcription factor binding sites, we can use a simple mixture of markov models consisting of only one 0th order and one kth order chain . for convenience, we refer such a mixture model as 'a 0-k mixture model'. since the kth order markov chain of 'a 0-k mixture model' can be either linear or circular, we also use terms 'a 0-k mixture linear model' and 'a 0-k mixture circular model' to distinguish them. in the following, we describe methods for the general mixture markov model, while we use the simple 0-k mixture model for our testing.

conceivably, the different parts of a motif could have distinct roles in the interaction with their partners. motif positions involved in the same role can be highly dependent, whereas those involved unrelated roles are likely independent. a mixture of markov models seems an ideal fit by modeling different signals with different sub-models. a 0th order markov chain can effectively model strong signals such as those embedded in highly conserved positions where the probability of a certain base occurring is almost one. in addition, positions where base composition contributes little or nothing to motif function need no more complex model than a 0th order markov model. on the other hand, a higher order markov model is necessary for detecting subtle dependency signals that can be essential for distinguishing true motifs from false ones.

motif dissection
to apply the mixture of markov models to a motif, the first step is to dissect the motif into several independent sub-motifs, each of which is modeled as a markov chain. for a given set of sequences of a motif, we employ chi-square tests to find significant pairwise dependencies between positions within the motif . based on pairwise dependencies, motif positions are grouped into independent sets, each forming a markov chain. the outline of our procedure for grouping motif positions is described in the following steps.

 <dig>  calculate base frequencies for each position, and find highly conserved positions where the observed frequency of a certain base  equals  <dig>  these conserved positions then are put into set h as defined below.

h={i:max⁡x∈bf≈1}
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgibascqgh9aqpcqgg7bwecqwgpbqacqgg6agodawfqaqaaigbc2gatjabcggahjabciha4bwcbagaemieagnaeyici4saeeoqaieabeaakiabdagamjabcicaoiabdmgapjabcycasiabdiha4jabcmcapiabgiki7kabigdaxiabc2ha9baa@45ef@

where f is the frequency of base x at position i, and b is the set of bases.

 <dig>  place remaining positions in the set m, and calculate pairwise chi-square values for every pair of positions in m.

χi,j2=∑xi∈bi∑xj∈bj−e)2e     
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwfhpwydaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegomaidaaogaeyypa0zaaabuaeaadaaeqbqaamaalaaabagaeiikagiaem4ta8kaeiikagiaemieag3aasbaasqaaiabdmgapbqabagccqggsaalcqwg4baedawgaawcbagaemoaaogabeaakiabcmcapiabgkhitiabdweafjabcicaoiabdiha4naabaaaleaacqwgpbqaaeqaaogaeiilawiaemieag3aasbaasqaaiabdqgaqbqabagccqggpaqkcqggpaqkdaahaawcbeqaaiabikdayaaaaoqaaiabdweafjabcicaoiabdiha4naabaaaleaacqwgpbqaaeqaaogaeiilawiaemieag3aasbaasqaaiabdqgaqbqabagccqggpaqkaaaaleaacqwg4baedawgaaadbagaemoaaogabeaaliabgigiolabbkeacnaabaaameaacqwgqbgaaeqaaawcbeqdcqghris5aawcbagaemieag3aasbaawqaaiabdmgapbqabawccqghiiizcqqgcbgqdawgaaadbagaemyaakgabeaaasqab0gaeyyeiuoakiaaxmaacawljawaaewaaeaacqaizawmaiaawicacaglpaaaaaa@6bbf@

where bi and bj are the sets of bases observed in positions i and j, respectively; o and e are the observed and expected counts of pair , respectively. e is the product of observed base frequencies xi and xj. the degrees of freedom of this test is  × , where |bi| and |bj| are the number of different bases in sets bi and bj, respectively.

 <dig>  based on the above χ <dig> tests, find all positions that show little dependence on any other positions in m, and move them to the set i, as defined by

i={i=min⁡i≠j;i,j∈mpi,j>α}
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgjbqscqgh9aqpdagadaqaaiabdmgapjabg2da9maaxababagagiyba0maeiyaakmaeioba4galeaacqwgpbqacqghgjsucqwgqbgacqgg7awocqwgpbqacqggsaalcqwgqbgacqghiiizcqwgnbqtaeqaaogaemicaa3aasbaasqaaiabdmgapjabcycasiabdqgaqbqabagccqgh+agpiigacqwfxoqyaiaawuhacagl9baaaaa@4b65@

here pi,j is the p-value corresponding to χi,j2
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaaiigacqwfhpwydaqhaawcbagaemyaakmaeiilawiaemoaaogabagaegomaidaaaaa@3321@, and α is the significance level, e.g.,  <dig> .

 <dig>  the remaining positions in m are further grouped into subsets by iterating the following rules:

 set s =  <dig> 

 calculate θi = ∑j∈m,j≠i δ for each position i in m, where δ is a 0/ <dig> indicator function. find the largest θi, and move position i and all positions j that pi,j <α from m into a new set cs.

 for each remaining position, check if it significantly depends on any position in cs. if it does, then move it from m into cs.

 if m is not empty, update s = s+ <dig> and go back to step .

step  <dig> above essentially groups positions into independent subsets, each potentially forming a functional unit. for the special 0-k mixture model, we simply set m = c <dig> at this step.

markov chain optimization
the next step is to arrange the positions in each subset into a markov chain. since the positions in sets h and i are independent of each other, they can be arranged in their natural order to form a 0th order markov chain. the positions in h can also be treated differently from those in set i in motif identification by requiring a perfect match for a true site. sets cs are different. the position arrangement for each set cs needs to be optimized so that the markov model can account for most dependencies while minimizing the markov order. for a given set cs, we use the median  of θ  as the maximum order of its potential markov model. we then optimize position arrangement for the kth order markov chain  by the directed neighbor-joining  method described below.

the neighbor-joining  method proposed by saitou and nei  <cit>  is a well-known distance method for phylogenetic tree reconstruction. the principle of the nj method is to find pairs of operational taxonomic units that minimize the total branch length at each stage of clustering. our dnj method is based on the exactly same principle. the only major difference is that dnj needs to consider the direction in joining two nearest neighbors to form a new node while nj does not. instead of producing a phylogenetic tree as the nj method does, dnj method creates a chain structure, which arranges closely dependent positions as the nearest neighbors. the dnj method for constructing a kth order markov chain from a given subset  of motif positions is described in the following steps .

 <dig>  for a given set cs, put each position in the set into a different vector. here a vector is represented by a letter, an arrow at the top of the letter may be used to indicate the direction of a vector, e.g., a stands for either a→
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhcaqaaiabdggahbgaay51gaaaaa@2fab@ or a←
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhbaqaaiabdggahbgaayp1gaaaaa@2fa9@. if a→
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhcaqaaiabdggahbgaay51gaaaaa@2fab@ = , then a←
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhbaqaaiabdggahbgaayp1gaaaaa@2fa9@ = , a→
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhcaqaaiabdggahbgaay51gaaaaa@2fab@a←
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhbaqaaiabdggahbgaayp1gaaaaa@2fa9@ = , and a→
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhcaqaaiabdggahbgaay51gaaaaa@2fab@a→
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawhcaqaaiabdggahbgaay51gaaaaa@2fab@ = . initially, each vector has only one position.

 <dig>  create an initial distance matrix  whose elements are d = pi,j, where i is the position in vector u, j is the position in vector v, and pi,j is the p-value of chi-square test described above.

 <dig>  convert the distance matrix d to the transformed distance matrix d, whose elements are d, by the following conversion function :



where v is the number of vectors under consideration, and its value decreases by  <dig> in each iteration.

 <dig>  find the minimum d in d. then a new vector x is formed by joining vector u and v according to algorithm  <dig>  for a kth order markov chain.

 <dig>  update the matrix d by replacing u and v by x. the distance of x to other remaining vector y is defined by:

d =  + d - d)/2

 <dig>  go back to step  <dig> if the number of vectors in cs is larger than  <dig>  otherwise join the last two vectors according to algorithm  <dig> 

the order of positions in the final vector is the optimized linear chain for markov model. joining the first position to the last position in the vector forms a circular chain. a linear chain could be further optimized by forming a circular chain first from the final vector, then breaking the circular chain between positions with the weakest dependency, e.g., between positions i and j where pi,j is the largest or the log-likelihood of the corresponding linear chain model is maximized. dnj not only optimizes position order for linear chain models but also improves circular chain models, particularly when the order of markov model is low, e.g., 1st or 2nd order markov models.

model selection
many different mixtures of markov models can be formed from the combination of different markov chains. it is essential to choose the model that minimizes prediction error. in model selection, we first fit each model using maximum likelihood smoothed by a dirichlet prior , then compute either the akaike information criterion   <cit>  or the bayesian information criterion   <cit> . the model with the minimum value of aic or bic is selected as the potential best model. minimizing aic is the same as choosing the model with the minimum prediction error or loss, while minimizing bic is equivalent to choosing the model with the largest posterior probability. nonetheless, aic and bic have a similar form:

-2·loglik + λ·df

where λ =  <dig> for aic and λ = log for bic ; loglik is the maximized log likelihood of data given the model; df is the degrees of freedom . we replace df with the effective degrees of freedom  in calculating aic or bic of the mixture of markov models, which enables an appropriate model to be selected . there is no clear better choice between aic and bic for model selection. aic tends to choose a model too complex as n → ∞, while bic tends to choose a model too simple when n is small. in our test on  <dig> different tfbs datasets, whose sample sizes range from  <dig> to  <dig>  we preferred aic to bic for picking an appropriate model.

effective degrees of freedom
let b be the set of bases , e.g., for dna sequences b = {a, c, g, t} . for a motif of length w, the df for a k order markov model is  ×  for a linear markov chain; and  × w for a circular chain model. that is, the df increases exponentially as the order of markov chain increases. as a result, aic or bic often pick a simpler mixture model than the best model, especially when |b| is large. tested on  <dig> human regulatory motifs from the transfac database   <cit> , we found that both aic and bic selected the 0th order markov models for all  <dig> dna regulatory motifs when using the df. to avoid picking overly simple models, we used the edf described below to calculate aic and bic.

generally, only a subset of bases from b appears in a particular position of a set of biological motifs. the more conserved a position, the fewer bases are in the subset. the edf for a model is related to the observed bases in training samples. for example, suppose that one would like to estimate nucleotide frequencies occurring in a position in a set of dna training motifs. if only base a is observed in the position, then one needs to estimate only the frequency of a, the remaining parameters, i.e., the frequencies of c, g, t, can be derived from any prior information. therefore, the actual df is one in this case. for our mixture of markov models, the edf is defined as the number of parameters that are direct estimates of the observed bases in a training motif set. let bi be the base set observed in a position i of a training set of motifs. additionally, let hk be the sequence of motif positions in the kth order markov chain, hik
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgobaadaqhaawcbagaemyaakgabagaem4aasgaaaaa@30ec@ be the motif position in the ith element of hk, and ∑|hk| = w , then we define the edf for the kth markov chain as

edfkl=∑i=k+1|hk|max⁡edfkc=∑i=1|hk|max⁡
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakqaabeqaaiabbweafjabbseaejabbaeagnaabaaaleaacqqgrbwadawgaaadbagaeeitaweabeaaasqabagccqgh9aqpdaaewaqaaigbc2gatjabcggahjabciha4jabcicaoiabdkgainaabaaaleaacqwgobaadaqhaaadbagaemyaakmaeyoei0iaem4aasgabagaem4aasgaaawcbeaakiabgena0kabl+uimjabgena0kabdkgainaabaaaleaacqwgobaadaqhaaadbagaemyaakgabagaem4aasgaaawcbeaakiabgkhitiabigdaxiabcycasiabigdaxiabcmcapawcbagaemyaakmaeyypa0jaem4aasmaey4kasiaegymaedabagaeiifawnaemiaag2aawbaawqabeaacqwgrbwaaawccqgg8bafa0gaeyyeiuoaaoqaaiabbweafjabbseaejabbaeagnaabaaaleaacqqgrbwadawgaaadbagaee4qameabeaaasqabagccqgh9aqpdaaewaqaaigbc2gatjabcggahjabciha4jabcicaoiabdkgainaabaaaleaacqwgobaadaqhaaadbagaemyaakmaeyoei0iaem4aasgabagaem4aasgaaawcbeaakiabgena0kabl+uimjabgena0kabdkgainaabaaaleaacqwgobaadaqhaaadbagaemyaakgabagaem4aasgaaawcbeaakiabgkhitiabigdaxiabcycasiabigdaxiabcmcapawcbagaemyaakmaeyypa0jaegymaedabagaeiifawnaemiaag2aawbaawqabeaacqwgrbwaaawccqgg8bafa0gaeyyeiuoaaaaa@8ed0@

where hi−kk=h|hk|−i+kk
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgobaadaqhaawcbagaemyaakmaeyoei0iaem4aasgabagaem4aasgaaogaeyypa0jaemiaag2aa0baasqaaiabcyha8jabdigaonaacaaameqabagaem4aasgaasgaeiifawnaeyoei0iaemyaakmaey4kasiaem4aasgabagaem4aasgaaaaa@41a7@ if i - k ≤ 0; edfkl
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgfbqrcqqgebarcqqggbgrdawgaawcbagaee4aas2aasbaawqaaiabbyeambqabaaaleqaaaaa@32bf@ and edfkc
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqqgfbqrcqqgebarcqqggbgrdawgaawcbagaee4aas2aasbaawqaaiabboeadbqabaaaleqaaaaa@32ad@ are for linear and circular chains, respectively. the total edf for a mixture markov model is just the sum of edfs of all individual chains. for example, the total edf for the special 0-k mixture model equals to the edf sum of the 0th and the kth order chains.

performance assessment
we test the effectiveness of our method on tfbs data and the donor splice sites, where training data for omima are a set of sequences of a motif. for prediction results, we use the following abbreviations for empirical quantities: tp , tn , fp , fn , ac , sn , sp , and mc . sn, sp, ac, and mc are defined as:

sn=tptp+fnsp=tntn+fpac=tp+tntp+fp+tn+fnmc=tp×tn−fp×fn
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqaaeabbaaaaeaacqwgtbwucqwgubgbcqgh9aqpdawcaaqaaiabdsfaujabdcfaqbqaaiabdsfaujabdcfaqjabgucariabdaeagjabd6eaobaaaeaacqwgtbwucqwgwbaccqgh9aqpdawcaaqaaiabdsfaujabd6eaobqaaiabdsfaujabd6eaojabgucariabdaeagjabdcfaqbaaaeaacqwgbbqqcqwgjbwycqgh9aqpdawcaaqaaiabdsfaujabdcfaqjabgucariabdsfaujabd6eaobqaaiabdsfaujabdcfaqjabgucariabdaeagjabdcfaqjabgucariabdsfaujabd6eaojabgucariabdaeagjabd6eaobaaaeaacqwgnbqtcqwgjbwycqgh9aqpdawcaaqaaiabdsfaujabdcfaqjabgena0kabdsfaujabd6eaojabgkhitiabdaeagjabdcfaqjabgena0kabdaeagjabd6eaobqaamaakaaabagaeiikagiaemivaqlaemiuaalaey4kasiaemoraykaemota4kaeiykakiaeiikagiaemivaqlaemiuaalaey4kasiaemoraykaemiuaalaeiykakiaeiikagiaemivaqlaemota4kaey4kasiaemoraykaemiuaalaeiykakiaeiikagiaemivaqlaemota4kaey4kasiaemoraykaemota4kaeiykakcaleqaaaaaaaaaaa@8706@

matthews correlation coefficient  <cit> , also called phi  coefficient, has a value between - <dig> and  <dig>  with  <dig>   <dig>  and <  <dig> indicating a perfect prediction, a random prediction, and a worse than random prediction, respectively.

omima can use two ways to score a motif site x: log-likelihood and log-likelihood ratio, which are defined by

log⁡−likelihood=log⁡pr⁡log⁡−likelihood ratio=log⁡pr⁡pr⁡
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaafaqadegabaaabagagiibawmaei4ba8maei4zacmaeyoei0iaeeibawmaeeyaakmaee4aasmaeeyzaumaeeibawmaeeyaakmaeeiaagmaee4ba8maee4ba8maeeizaqmaeyypa0jagiibawmaei4ba8maei4zacmagiiuaalaeiocainaeiikagccbegae8heagnaeiifawnaemyta00aasbaasqaaiabdohazbqabagccqggpaqkaeaacyggsbabcqggvbwbcqggnbwzcqghsislcqqgsbabcqqgpbqacqqgrbwacqqglbqzcqqgsbabcqqgpbqacqqgobaacqqgvbwbcqqgvbwbcqqgkbazcqqggaaicqqgybgccqqghbqycqqg0badcqqgpbqacqqgvbwbcqgh9aqpcyggsbabcqggvbwbcqggnbwzdawcaaqaaigbccfaqjabckhayjabcicaoiab=hha4jabcyha8jabd2eannaabaaaleaacqwgzbwcaeqaaogaeiykakcabagagiiuaalaeiocainaeiikagiae8heagnaeiifawnaemyta00aasbaasqaaiabdkgaibqabagccqggpaqkaaaaaaaa@81e4@

where ms is the signal model trained by true motif sites, and mb is the background model or false signal model trained by background sequences or false motif sites. a sequence x is predicted as a positive site if the score of x is larger than a certain threshold. we select a cutoff threshold using one of the following three criteria: balanced sensitivity and specificity, the maximum prediction accuracy, and the maximum matthews correlation coefficient. each potential threshold yields an estimated true positive rate and a false positive rate. the plot of true positive rates against false positive rates generates a receiver operating characteristic  curve, which can be used for comparing and selecting the best model.

we used a three-symbol notation 'k-m-s' to distinguish different models, where 'k' stands for a 0-k mixture markov model, 'm' is either 'l' or 'c' to indicate whether the kth order chain is linear  or circular , and 's' is either  <dig> or  <dig> to indicate whether log likelihood score  or log-likelihood ratio score  is used. for example, '1-l-l' stands for a 0– <dig> mixture of linear markov models that uses log-likelihood ratio to score a motif site.

effectiveness of dnj method for optimization
to assess the ability of our dnj method for optimizing a markov chain, we compared the dnj method with random permutation method. in this evaluation, we used a 0-k mixture model   to model transcription factor binding sites from the transfac database. for each tfbs, we first fitted a 0-k mixture model  with its kth order markov chain optimized by the dnj method. we calculated the log-likelihood of the data given the model mdnj ). second, with the same data, we fitted a new 0-k mixture model , which is the same as mdnj except that the positions in its kth order chain are ordered by random permutation, and calculated logpr. this step was repeated  <dig>  times, so we have  <dig>  log-likelihoods of the randomly permuted models 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqggoaakcqwgnbqtdawgaawcbagaemouai1aasbaawqaaiabigdaxaqabaaaleqaaogaeiilawiaesojgskaeiilawiaemyta00aasbaasqaaiabdkfasnaabaaameaacqaixaqmcqaiwaamcqaiwaamcqaiwaamaeqaaawcbeaakiabcmcapaaa@3b66@. we then calculated the empirical p_value of the dnj-optimized model as follows:

p_value=∑i=11000δ<log⁡pr⁡)1000
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgwbaccqghsislcqwg2bgdcqwghbqycqwgsbabcqwg1bqdcqwglbqzcqgh9aqpdawcaaqaamaaqadabaaccigae8htdqmaeiikagiagiibawmaei4ba8maei4zacmagiiuaalaeiocainaeiikagiaemizaqmaemyyaemaemidaqnaemyyaemaeiifawnaemyta00aasbaasqaaiabdseaejabd6eaojabdqeakbqabagccqggpaqkcqgh8aapcyggsbabcqggvbwbcqggnbwzcyggqbaucqggybgccqggoaakcqwgkbazcqwghbqycqwg0badcqwghbqycqgg8bafcqwgnbqtdawgaawcbagaemouai1aasbaawqaaiabdmgapbqabaaaleqaaogaeiykakiaeiykakcaleaacqwgpbqacqgh9aqpcqaixaqmaeaacqaixaqmcqaiwaamcqaiwaamcqaiwaama0gaeyyeiuoaaoqaaiabigdaxiabicdawiabicdawiabicdawaaaaaa@6f73@

where δ is an indicator function with value  <dig> if condition is true, and  <dig> otherwise. the smaller the p_value, the better the dnj optimization is; and p_value =  <dig> means the dnj-optimized model performs better than any one of the  <dig>  randomly permuted models. the p_value approximates the probability of observing log pr larger than .

fifty-three human transcription factors, whose binding sites contain at least four dependent positions by the χ <dig> test given by equation , are selected for this evaluation . the assessment was performed on four 0-k mixture models: 1st order linear chain, 1st order circular chain, 2nd order linear chain, and 2nd order circular chain.

results suggest that dnj method performed remarkably well in optimizing the 1st order linear markov chains, that in  <dig> out  <dig> cases, the dnj optimized models were the best or close to the best . the optimization for the 2nd order linear chains was slightly worse than that for the 1st order linear chains, partially because the dnj method relies only on the pairwise dependencies between two single positions. nevertheless, most of the dnj optimized models were still close to the best . although our dnj method was designed for optimizing linear markov chains, it still worked well in optimizing the 1st order circular markov chains . however, the dnj method did not perform well in optimizing the 2nd order circular markov chains .

we used ap <dig>  transcription factor binding sites  as an example of how dnj optimization can improve performance of a 0– <dig> or 0– <dig> mixture model. we plotted the histogram of the log-likelihood per instance given a model mri
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgnbqtdawgaawcbagaemouai1aasbaawqaaiabdmgapbqabaaaleqaaaaa@30bb@, log pr/n, where n is the number of sequences in the data set, and i =  <dig> ...,  <dig> for  <dig>  mixture models of randomly permuted markov chains. the histogram represents a simulated null-distribution of log-likelihood per instance given a mixture model. then we mapped the location of the likelihood per instance given dnj optimized model, /n, in the histogram. for the transcription factor v$ap1_q4_ <dig>  we found that for the 0– <dig> mixture model of either linear or circular structure, dnj optimized models are better than any models from  <dig>  random permutations .

theoretically, the optimal model can be found by exhaustively searching through all possible models. an exhaustive search is not always possible in practice, however, as the search space can be very large. the number of possible markov chains is the factorial of the length of the markov chain and dramatically increases as the length of chain increases. for example, the computational time for a motif of  <dig> bases  can be practically unacceptable. our dnj method can deal with such long motifs because of its computational efficiency.

tfbs identification
one interesting application of our mixture model is tfbs identification. in this assessment, we used a couple of examples to show how omima can improve prediction accuracy when there are position dependencies within a tfbs. we first tested our method on simulated data where the exact dependency structure of a tfbs is known. we tested whether omima can capture such dependency and optimize the markov model accordingly. next, we tested our method on real motif data for ap <dig>  in both examples, we compared omima performance to pwm, pvlmm, and the 1st order markov model  with its motif positions in the natural order. pvlmm, run on microsoft windows, is based on the variable length markov model   <cit> . except for its order and depth parameters, pvlmm was run under its default settings in all comparisons.

simulated tfbs prediction
many tfbs are palindromic sites bound by heterodimers/homodimers . the sequences in two half sites of a palindromic tfbs are usually not perfectly complementary, and the strong binding to one half site may compensate for weak binding to the other. we simulated two imperfect palindromic tfbs  of length  <dig> bases. for each tfbs, the bases in each position were generated from the uniform distribution . the base in one half site and its reverse complementary base in the other half were generated using the probabilities listed in table  <dig>  therefore, there are only pairwise position dependencies in the simulated tfbs. the position pair 0– <dig> has the strongest dependency, whereas the pair 5– <dig> has the weakest dependency . overall, motif a has stronger position dependencies than motif b. the false sites of tfbs were simulated from the uniform distribution of four nucleotides without any constraints of base pairing between the two half sites. the simulated data of each tfbs consist of a training set with  <dig> true sites, and a testing set with  <dig> true sites and  <dig> false sites. using these simulated training sets, omima found all true dependencies significant at level α =  <dig>  . for both tfbs, omima was also able to arrange the positions of each dependent pair to be the nearest neighbors in their 0– <dig> mixture models: 

in our simulation, the positions  <dig> and  <dig> were generated independently from all other positions, so they should be in the 0th order chains. however, based on omima's pairwise χ <dig> tests for the training data, the position pair 5– <dig>  in tfbs a, and the position pair 6– <dig>  in tfbs b were declared dependent. that is why the positions  <dig> and  <dig> were arranged together in the model for tfbs a, and positions  <dig> and  <dig> were together for tfbs b. we compared the prediction results of omima's 0– <dig> mixture model with those of pwm, 1stmm and the 1st order pvlmm . results  showed that omima outperformed all other models, and pvlmm performed better than istmm and pwm. additionally, we used smaller training sets to access the performance of these methods on the same testing set. smaller training sets, in sizes ranging from  <dig> to  <dig>  were independently sampled  from the original  <dig> sites for training. results suggested that omima performed consistently better than the other methods, regardless the size of a training set  .

ap <dig> tfbs prediction
we chose human ap <dig> tfbs  for this evaluation because of its relatively large number of known sites. in total, we had  <dig> true sites and  <dig> false sites. the true sites were extracted from transfac database , and false sites were randomly sampled from the non-coding regions of the human genome. our χ <dig> tests on the  <dig> true sites suggested that all positions showed some level of dependency with the neighboring pairs 0– <dig>  4– <dig>  5– <dig>  and 4– <dig> showing strong dependencies . noticeably, the positions  <dig>   <dig> and  <dig> are also the most conserved positions, so we expect that pwm would be reasonable good model for the tfbs. we randomly split both the true sites and false sites into  <dig> roughly equal-sized parts, and used a 10-fold cross validation to compare the performance of omima's 0– <dig> mixture model with the others. omima had advantage over the other three models in predicting tfbs that do not have strong long-range dependencies . results also showed the first order pvlmm did not perform better than 1stmm and pwm. we found that the first order pvlmm arranged the position pair 5– <dig>  which showed the strong dependency, differently from omima and 1stmm. in only  <dig> out  <dig> times, pvlmm arranged positions  <dig> and  <dig> as direct neighbors, while omima did in  <dig> out  <dig> times, and 1stmm did naturally all times. this is one possible reason why pvlmm performed slightly worse.

donor splice site recognition
the transcription of most higher eukaryotic genes involves rna splicing, in which primary transcripts become mature mrna by removing introns. the donor or 5' splice sites and the acceptor or 3' splice sites on the boundaries of exons and introns provides critical signals for precise splicing. therefore, splice site recognition has been widely used by gene finding tools such as genescan  <cit>  and genie  <cit>  for gene prediction. the splicing process starts with u <dig> snrnp binding to the donor site via base-pairing of u <dig> snrna. the base pairing between u <dig> snrna and the donor site, however, need not be perfectly complementary in all positions  <cit> . both experimental and computational evidence suggest that there are mutually dependent positions within the donor site: a mis-matched pair of u <dig> snrna and the donor sites at one position can be compensated for by a matching base pair at another position, and vice versa  <cit> . modeling such dependency structure within the donor site has been used to improve donor site prediction  <cit> . we used two independent datasets of human donor sites to assess the performance of omima in comparison with leading competitors.

comparison with nnsplice and pvlmm
the test dataset of human donor splice sites  was from  <cit> . this dataset has  <dig> donor sites  of length  <dig> bases from - <dig> to + <dig> around the conserved 'gt' dinucleotide. the dataset consists of a training set  and a testing set , which were previously used to assess the performance of nnsplice  <cit> . we used the same partitions for training and testing in the following comparisons.

first, we tested whether omima which uses either aic or bic, can correctly pick the best model based on roc analysis. we fitted a set of 0-k mixture models, in which the kth order chains are either linear or circular and k ranges from  <dig> to  <dig>  with the training data. we subsequently applied the fitted models to predict splice sites in testing data. the performances of different models were compared and evaluated by roc analysis . in addition, we compared the maximum accuracy  and the maximum matthews correlation efficient  achieved by each model . the best models were 0– <dig> mixture models . both the linear and circular models performed about the same. the best models picked by roc analysis are consistent with those selected by omima . the selected models were further confirmed by a six-fold cross validation.

using the best model selected above, we then compared omima with nnsplice and pvlmm. nnsplice is based on a complex neural network model and is trained by both true sites and false sites. since both omima and nnsplice used the same training and testing data, their prediction results can be directly compared. we compared omima's 1-l- <dig> and 1-c- <dig> models with the first order pvlmm  as all have similar model complexity. the results of nnsplice were reported at the nnsplice web site  <cit> . we found that omima had comparable prediction accuracy to nnsplice and pvlmm . in addition, omima is much more computationally efficient than nnsplice and pvlmm .

comparison with mem and pvlmm
given enough training data, we can use more complicated models than the 0– <dig> mixture model to improve prediction accuracy. in this evaluation, we test whether 0-k mixture models can compete with the mem on a much larger dataset. this large donor site dataset , used to assess performance of the mem, was from  <cit> . the dataset, extracted from  <dig> non-redundant human transcripts, has  <dig>  real and  <dig>  decoy sites in the training set, and  <dig>  real and  <dig>  in decoy sites in the testing set. each real site has length  <dig> bases from - <dig> to + <dig> around the conserved 'gt' of donor splice sites recognized by u- <dig> type spliceosome. the decoy sites are any other sequence segments in the exons and introns matching the pattern n3gtn <dig>  so a decoy site can have the exactly same sequence as a real site. we applied this original training and testing sets to assess performance of omima, where we used only log-likelihood ratio scoring. in addition, we ran a 3-fold cross-validation, in which the number of sites in new training and testing sets are roughly the same as those in the original ones . the top  <dig> models selected by aic are 3-c- <dig>  3-l- <dig>  2-c- <dig> and 2-l- <dig>  respectively, consistent with the roc analysis. to find the top  <dig> sub-models of pvlmm by roc analysis, we used a series of markov orders and/or depths  to predict the same data sets. for convenience, we use notation "p:k-d" to denote a pvlmm of order k and depth d. we adopt notation in  <cit>  for sub-models of mem.

briefly, the notation has the form "meksd" or "mekxd", where "me" stands for maximum entropy; "k" is a number for the marginal order or the maximum length of an oligomer in consideration; "d" is the skip number or maximum skip number determining which positions the bases of an oligomer are from; "s" stands for skip number and "x" for the maximum skip. for example, model "me5s0" considers all marginal distributions of p, p, p, p, p.

comparison of the top  <dig> performers from each model class suggested that omima performed comparably with mem and better than pvlmm  . one advantage of omima over mem is that, for the models with similar performance, omima's models generally have fewer parameters and thus require fewer training samples. our test showed that omima was able to retain similar performance of mem even when trained by only 60% data of mem's original training sets .

biological explanation
to compare omima's fitted donor site models to biological knowledge about dependencies among positions, we examined the best donor models for the first donor dataset  and for the second donor dataset . for convenience, let us mark the invariant 'gt' nucleotides in the boundary of exon/intron as the positions  <dig> and  <dig> of the donor site, respectively . first, based on  <dig>  real donor sites in the reese original training data, the 0– <dig> mixture model was selected as the best model with the following 1st order chain.

- <dig>  <dig> - <dig>  <dig>  <dig> - <dig> - <dig> - <dig> - <dig> - <dig>  <dig>  <dig> 2

we found that this position arrangement is supported by the following biological evidence of base-pairing between u <dig> snrna and the donor site:  5'/3' compensation effect: a base pair at position - <dig> can prevent an aberrant splicing caused by a mis-matched pair at position  <dig>  <cit> ;  adjacent base-pair effect: a matching base pair at position  <dig> is rare in the absence of a matching base pair at position  <dig>  <cit> ;  a matching base-pair at the non-conserved positions  <dig> and  <dig> can compensate for a mis-matched pair at position  <dig>  <cit> . interestingly, the model also arranged non-conserved positions  together as it did for the other more conserved positions. second, based on  <dig>  real donor sites of the yeo original training sites, the 0– <dig> mixture model was the best model. the optimized position order of its 3rd order chain was:

 <dig>  <dig> - <dig>  <dig> - <dig>  <dig> -3

we can see that this model is consistent with the above evidence  and . in addition, it is well supported by experimentally verified position dependencies of position  <dig> on the positions - <dig>  - <dig>   <dig> and  <dig>  <cit> , and the computationally confirmed dependency of position - <dig> on position - <dig> due to the adjacent base-pair effect  <cit> .

discussion
the prediction accuracy of a probabilistic model is largely determined by the effectiveness of the model in characterizing a biological motif. since there is large variation of the signals embedded in biological motifs, an effective model can be as simple as a consensus sequence or as complex as a fully connected network model. in this paper, we described a mixture of markov models to allow adjustment of model complexity for different motifs. also, we extended the traditional linear chain markov model to the circular chain markov model, which can better represent position dependencies within a motif in some cases. we presented a novel method, dnj, for efficiently optimizing position arrangement of a non 0th order markov chain to incorporate most dependencies. we described methods for calculating the edf and for selecting the best mixture markov model. we implemented these methods in our motif finding omima system, which is freely available. finally, we demonstrated from different aspects in several examples that omima can improve motif prediction accuracy in biological sequences.

the interaction of biological macromolecules, such as transcription factors bound to dna sites, usually involves several highly dependent positions functioning as a unit. many methods including markov chains, bayesian trees, and neutral networks have been used to model dependency structures within a motif. the markov model is the simplest yet can be very powerful when it is optimized. our results showed that the optimized markov models performed better than the neural network model and pvlmm, and comparably with mem for splice site prediction. the optimized markov model can incorporate both local and non-local dependencies into the model, which enables it to compete with tree or network models in predicting short biological motifs. we also showed that the optimized markov model can be an excellent motif predictor. moreover, it is also computationally efficient due to its simplicity.

model complexity, measured by parameter number, is an important issue in motif modeling. the more complex a model, the more data are needed for adequate training. for many biological motifs, however, the number of known  sites is small. this limits the usage of complex models, such as higher order markov models, bayesian trees, network models or mem, even though these models in some cases can perform better than the simpler models given enough training data. for a standard markov model, the number of its parameters increases exponentially as its markov order increases. without sufficient training data, it is difficult to accurately estimate all model parameters, even using more robust methods . as a result, lack of sufficient training data often makes it impractical to train a higher order markov model. on the other hand, a low order markov model may perform poorly by failing to incorporate more distant dependencies. several motif models and methods have been developed to address this issue. one of these models is the variable length markov model , whose markov orders  can vary among different positions. vlmm can effectively reduce markov model complexity when the variation of actual context lengths is large. vlmm, however, is not the best choice to incorporate long-range dependencies. the position optimized markov model   <cit>  is able to incorporate important distant dependencies without increasing markov chain order. however, the effectiveness of this model largely depends on the optimization routine.

more recently, zhao et al.  <cit>  described the pvlmm in an attempt to combine advantages of both vlmm and pomm. the disadvantage of pvlmm is that the number of possible permutations is the factorial of motif length, which makes it more computationally expensive. in addition, the random permutation method used by pvlmm for optimization is more likely to overfit the model, e.g., incorporating non-significant dependencies into the pvlmm model that can reduce its prediction power. the optimized mixture of markov models we presented here tries to inherit advantages of these existing models while avoiding their disadvantages. in omima, we replace vlmm with a mixture of several lower order markov models, which are subsequently optimized to account for long-range dependencies.

in comparison with other leading methods, omima can incorporate more than the nnsplice's pairwise dependencies; omima avoids model over-fitting better than the pvlmm; and omima requires smaller training samples than the mem. these are primarily reasons that omima showed superior performance, in terms of prediction accuracy, required size of training data or computational time, over other leading-methods in our results.

with any model selection procedure, the possibility of choosing a model that drastically over- or underfits is a concern. omima employs aic and bic, two standard criteria, that are widely used because they tend to avoid extreme over- or underfitting. both have theoretical support  <cit> . in our application, neither criterion worked well when using the df ; but both, particularly aic, performed well when using edf. we found that models selected by aic using edf were consistent with models selected by cross-validation and by roc analysis.

our omima approach has two features that can be limitations when the size of the training data is small. first, the chi-square test that partitions motif positions into those with dependencies and those without dependencies will, like any statistical test, make mistakes, and its statistical power to detect dependencies will suffer with small training samples. although the test will not always provide a correct partition, our approach should adapt to strong or weak dependencies overall and improve prediction when dependencies are strong. in addition, weakly dependent positions mistakenly placed in the set with no dependencies are often adequately modeled by a 0th order chain, whereas independent positions mistakenly assigned to the set with dependencies will be placed by the dnj algorithm in locations with the least impact on the kth order chain. second, the edf that we used in model selection is an estimate based on the training data. for degenerate sites, the estimate should be accurate with even small training samples; whereas for conserved sites a larger training sample might reveal additional bases and change the edf. still, such additions should be minimal and would generally induce small changes in the edf, so we expect little impact on model selection. any methods that employ chi-square techniques to test for dependent sites face similar limitations. nevertheless, omima with its relatively small parameter space should adapt to small training datasets better than many competitors. of course, any motif finding algorithm would do better with larger training samples.

omima places no limit on the length of sequences that it can scan, and it could be used to find tfbs in any sequenced organism as long as a training motif set is available. the larger the genome evaluated, the more false positives are likely to be declared. although omima's prediction accuracy will help, other approaches to reducing false positives will be needed. cross-species comparisons and relative location compared to transcription start sites have been used to reduce false positives and could be used with omima too. furthermore, omima's ability to accurately and quickly identify splice sites should be easy to incorporate into probabilistic gene-prediction programs where correct prediction of splice sites is critical.

CONCLUSIONS
our optimized mixture of markov models represents an alternative to the existing methods for modeling dependent structures within a biological motif. unlike existing methods, our model is conceptually simple and effective, which has advantages in a large scale motif prediction. in particular, with its ability to minimize model complexity, our method can work effectively even with limited training data. the optimized mixture of markov models is implemented in our computational tool omima, which can use a variety of mixture models for motif prediction. omima, in which most parameters are configurable, is freely available to all users.

authors' contributions
w. huang provided the principal contributions to the conception and design of this study as well as to its analysis. d. m. umbach and l. li contributed to the design of the study and the interpretation of results. all authors contributed to writing and critically revising the manuscript.

supplementary material
additional file 1
the supplement includes the mathematical formulas for computing the probability of a motif site given a markov model, the algorithmic pseudo-code for the dnj method, and the description of the parameter estimation for our model. it also contains supplemental materials for the main results as well as other additional results, such as the application for protein domain identification, the comparison of computational time, and so on.

click here for file

 acknowledgements
we thank drs bruce weir and jeffrey thorne for critically reading the manuscript, and drs clarice weinberg and joseph nevins for helpful comments. this research was supported by intramural research programs of the nih, national institute of environmental health sciences.

figures and tables
                              d
