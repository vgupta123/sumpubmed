BACKGROUND
the basic local alignment search tool   <cit>  is a widely used algorithm in the bioinformatics field. there are variants of blast programs besides the conventional ncbi blast  <cit> , such as wu-blast  <cit>  and psi-blast  <cit> . various solutions exist for high-efficiency blast searches: examples include mpiblast  <cit> , beoblast  <cit>  and nblast  <cit> , which are based on parallel computing, and some commercial solutions such as the decypher server  <cit> , which utilizes dedicated accelerator hardware. for compatibility, many blast solutions generate search results in the same format as ncbi's blast .

recent developments in sequencing technologies have made studies of sequence data increasingly more convenient. with the tremendous number of sequences being generated from various large-scale projects , studies of functional and comparative genomics are evolving from local pairwise comparisons of a few sequences to global inspections of sequence characteristics over multiple large groupings. a few examples of the typical questions raised in these studies are: what are the major functional categories of a set of sequences; within such a set, how many sequences fall into a category of interest ? how many conserved sequences do two libraries share, and how many are unique to each library? given a set of insertion/deletion mutant sequences, what are their mutation sites in the genome; are these sites randomly distributed over the genome; and do they affect specific genes? to answer these routine questions, it is essential to have not only an efficient blast solution for conducting high-throughput searches, but also an effective approach to managing and analyzing the search results and identifying information of interest.

surprisingly, although many high-efficiency variations of blast exist, generic and effective solutions for managing and analyzing large-scale blast search results are lacking. because of this, downstream analysis remains a task to be solved ad hoc by different users. previously, in order to identify a certain sequence of interest, it was necessary to search for specific terms  in a multi-megabyte result file, or to sort an excel file that contains thousands of lines. either approach is tedious and time-consuming. we are aware of only a few software packages that partially address these needs. for example, the est analysis pipeline   <cit> , written in c++, integrates automatic blast searches and has a web interface for viewing and searching sequence annotations. the x genome initiative  developed by ncgr  <cit> , written in java and perl, is capable of handling distributed blast tasks and provides a web interface for searching the blast results. while both systems are good for large-scale est processing, they have limited post-blast analysis functions except automatic annotation and keyword searching, and lack functions that are essential or much needed in many generic functional and comparative genomics studies.

we developed a platform-independent web application named personal blast navigator  to fill this gap. plan is designed to carry out various generic and routine tasks in different genomic studies. in view of the variety of user needs, instead of attempting to build a system that takes care of every detail of all blast-based tasks, we started with some essential "common factor" functions that are believed to be most needed by the community. currently, plan integrates the decypher hardware-based blast solution provided by active motif inc.  <cit>  for high-throughput blast searches. the system manages the query sequences and blast results in a user-intuitive web interface. it provides a comprehensive set of functions for managing, visualizing, filtering and searching any subset of records. plan also provides flexible data export and publication options for data exchange with other applications. since it is based on an open architecture that is easily customizable and expandable, advanced functions are gradually being added in response to users' requests. after more than  <dig> months of continuous development, plan has expanded to such a scale that it is now difficult to introduce all its functions in a single article. therefore, this paper focuses on some of plan's essential interactive and analytical functions that are most needed by the community. readers are encouraged to read our online user manual and frequently asked questions for a better understanding of the system.

implementation
system workflow
plan adopts project-based data organization. a project contains a set of logically associated data, such as a sequence library to be searched against several target databases, multiple sequence libraries to be annotated using the same criteria, or two sets of sequences to be aligned to each other. a user may have multiple projects. there is no limitation on the size of the project.

in each project, plan manages two types of data from users, i.e. sequence files in fasta format and blast result files in ncbi plain text format. the system workflow  generally consists of two stages, pre-blast and post-blast. in the pre-blast stage, plan helps the user to manage sequences, customize blast search options and conduct blast searches. in the post-blast stage, plan retrieves search results from the blast server, imports optional custom blast results, manages and presents these results in different ways and performs various downstream analyses.

query sequences are initially uploaded by users and archived in the database. sequence id duplication is checked and various options are provided to deal with such duplication â€“ ignore, discard, replace, etc. blast searches are automated with reference to pre-defined search templates. a search template saves all necessary blast settings, such as alignment method , alignment parameters  and target database. the use of templates ensures that the user applies the same set of customized search criteria in different search sessions. the system administrator has a full control of the utilization of templates over all users, according to user grouping. for example, an institute may separate its plan users into public and internal groups, which can perform blast searches against their published or private  sequence databases, respectively.

plan monitors the search process in the background and displays it online upon user request. once the search is complete, the results, in ncbi plain text format by default, are automatically downloaded from the blast server and further imported into plan's database. the original search result files are archived for the user to download and review. a user may also upload custom search result files generated by other systems. there is no limit on the number of blast searches or uploaded search results in each project, and this enables the user to align multiple query sequence sets against multiple target databases for comprehensive studies.

plan converts text-style blast results into well-organized, rational database records. it indexes and hierarchically organizes the results into three levels, namely:  global parameters of the search session, such as search algorithm, version, database name etc.;  sequence level mapping between all search queries and the returned targets , including bit scores and e-values ; and  alignment details of all high scoring pairs . plan offers a wide range of high-level database manipulation functions for various post-blast analytical tasks. some major post-blast functions are introduced in detail below.

multi-angle presentation of 
RESULTS
one of the most direct uses of plan is to review the blast results and find results of interest. plan adopts an intuitive web interface that simulates microsoft outlook. the presentation of results generally follows the three-level data hierarchy mentioned above. in brief, search session statistics are summarized in spreadsheets; sequence-level query-target mappings are displayed in spreadsheets and graphs; and various tables, texts and hyperlinks are utilized to present various alignment details. following this schema, plan organizes and represents the blast results from several angles, summarized as follows.

first, and most intuitively, the results may be viewed according to unique query ids. when the results are presented from this angle, plan summarizes and lists each query's multiple targets/hits returned from all search sessions. this facilitates comprehensive annotation of unknown sequences. figure  <dig> depicts a spreadsheet for the identification of an in-house medicago truncatula  insertion sequence nf0013-insertion- <dig> through searches against five major databases, namely imgag predicted mt genes, mt bac clone genome sequences, and the ncbi protein , ncbi nucleotide  and tigr mt est databases. these results not only identify the insertion site , but also suggest that the insertion potentially affects a predicted gene , the est of which is included in the tigr est database.

similarly, and more importantly, plan provides a novel, global view of blast results by grouping them according to unique target ids. in other words, it helps the user to investigate which multiple queries hit the same target and how they do so. this provides useful information for many purposes. examples include, but are not limited to, checking the redundancy of a library, estimating est expressions in-silico, visualizing sequence assembly results, and investigating insertion/deletion mutation sites on the genome.

besides the above intuitive data hierarchy inherited from typical blast results, plan provides a customizable plug-in mechanism, which encodes a set of translation rules provided by administrators and/or users, enabling the source of in-house sequences to be identified in terms of sequencing plate id and gene line id, and allowing the statistics and results to be viewed further on the basis of these in-house ids. such statistics are of great value in various in-house sequencing studies. examples include, but are not limited to, checking the sequencing quality according to the percentage of "good read" sequences, validating an experiment according to data from biological replicates, and identifying unique insertion/deletion mutants in different gene lines.

lastly, plan can be customized by the administrator to extract and translate certain terms in specific patterns during the presentation of results. for example, the current setup of the plan system on our server automatically highlights all gene ontology   <cit>  and plant ontology   <cit>  terms. when a go or po term is clicked, a window will pop up to show the corresponding ontology tree for a more in-depth study.

searching, filtering and organization of data of interest
plan provides a wide range of search options for identifying records of interest efficiently from large-scale blast results. it allows users to search for one or many query/target ids, with different matching options . it also provides a full-text search engine for matching any search term in the query/target ids, names and descriptions. this is particularly valuable for functional analytical tasks, such as finding query sequences with hits to a specific protein family, or categorizing sequences according to functional descriptions.

in addition to these search functions, plan enables users to filter results on the basis of bit scores and e-value thresholds on the fly. this facilitates the review of results at different homology levels â€“ higher bit scores and lower e-values lead to fewer results at higher homology. in addition, on each query, plan allows users to view a specific number of "top hits" , further reducing the number of returned results for simpler yet more significant investigation. furthermore, queries with no target  may be hidden to obtain a cleaner workspace.

it is important to have a mechanism that archives, organizes and manages records of interest for further studies. plan fully integrates a hierarchical "favorites" management system. a user has full control over the favorite categories  as well as records in each category. while the user browses any portion of the project data , he/she may add the data of interest to either a new or an existing favorite category. subsequently, records in each favorite category may be browsed, removed from the category, or copied/moved to another category. our current users consider this a very useful function. figure  <dig> illustrates how plan assists functional genomics studies by organizing a number of sequences into different user-customized functional categories.

functional annotation and data export
one of the most routine post-blast tasks is the functional annotation of the query sequences. plan provides comprehensive options for this purpose. the sequences to be annotated may be all the queries in a project, or any sequence subsets from the following sources:  an uploaded fasta file,  a blast search session,  a favorite category,  an in-house gene line or plate, or  any user-selected sequences from any plan-displayed spreadsheets. a user may annotate the sequences with either of the following:  the top-hit in terms of either lowest e-value or highest score, or  all targets  that passed the project filters and are visible to the user. if the query sequences have been searched against multiple databases, the user may further customize the annotation to use any one of the databases, or all of them. the output format of the annotation may be either natural language , which follows the format of ncbi genbank, or tab-delimited format for downstream analysis using other software such as microsoft excel. plan may also save the user-uploaded original query sequences in well-annotated fasta format for submission to ncbi genbank. figure  <dig> depicts the annotations of three sequences, with top hits from multiple databases, saved in tab-delimited format and viewed in microsoft excel. figure  <dig> gives an example of a sequence being annotated with the ncbi protein database  and saved in fasta format.

in addition to these flexible annotation functions, plan provides multiple means of data export. any subset of sequences and intermediate blast results can be exported for further analysis. for example, plan may export a well-formatted summary of the overlap between two libraries for venn diagram analysis. it may also export query sequences with no hit in one search session for further searches. more information on data export may be found at the project web site.

control of data publication
on each project, plan provides three levels of data publication, summarized as follows.  at the most private and secure level, all data are hidden from the public. a personal password is required to access the protected data. this security level is most suitable for private, unpublished data.  at the medium level, data are published for read-only access. general site visitors may browse and search the project data but may not make changes. with a personal password, the project owner has a full access and all modification rights to the data. this level is best for data presentation and demonstration.  at the most open level, all the project data are fully accessible to all site visitors. all visitors may read and modify these data. this level is best for team work, with local deployment of the plan system on an institutional network. at the latter two levels, a direct hyperlink of the published project to a specific record  can be made from outside the project scope without visiting the plan home page. this extends plan as a sequence identification reference web site for knowledge sharing.

the project level is editable by the project owner at any time. for example, a user may work on his/her est library as a private project. once the est library is accepted for publication, he/she may further publish the project as a read-only public project. it is worth mentioning that plan also provides a special category of "public projects" to generic users who want to utilize its analytical functions, without caring about data privacy or retention period. manipulating a public project does not require user registration.

system architecture and software implementation
plan is implemented in php and perl languages. it follows a typical three-tier software architecture, comprising a presentation layer, a processing layer and a data layer . the presentation layer, which interacts with users, consists of a versatile web interface written in php. the processing layer consists of various data manipulation and analysis modules written in php and perl. some biophp  <cit>  and bioperl  <cit>  functions are utilized for data processing. the data layer consists of a set of file handling, blast server communication and database-abstraction modules written in php and perl. adodb  <cit>  is adopted for database abstraction, which makes the system independent of the database server. the system supports, by default, the decypher hardware-based blast server provided by active motif inc. software blast solutions may be integrated with no difficulty.

the three tiers are clearly defined while seamlessly interconnected. the platform-independent design makes plan capable of working on various mainstream web servers  and operation systems , and of supporting a large variety of database servers . in practice, we released the system for public use on an apache  <dig> web server running under the fedora core  <dig> linux operation system, using the mysql database and a decypher blast server that contains two accelerator cards.

discussions and 
CONCLUSIONS
we have developed the plan system for managing query sequences, automating high-throughput blast searches, managing, presenting and mining alignment results, and sharing personalized knowledge. unlike the multitude of programs for different, specialized tasks, plan is designed to handle generic and routine analytical tasks based on blast searches. it is platform-independent, versatile, easy to deploy and fully customizable. it has proved a valuable addition to the community for functional and comparative genomics studies.

we have established a plan server for public use at our project web site. with a hardware-based blast solution, the server's search speed is many times higher than that of conventional blast software. as of september  <dig>  the server has been constantly online for over  <dig> months. it hosts over  <dig> projects from multiple institutes, with over  <dig> gigabytes of database records and over  <dig> gigabytes of file resources. more information about this public server, such as the user manual, data retention policy and local deployment instructions, may be found at the project web site.

the development and improvement of the system is continuous. currently, we are implementing the automatic ontology categorization functions, starting with go, and with po and kegg   <cit>  to follow. more annotation and export formats are being studied and implemented. we encourage users to submit new function requirements through our online feedback system at the project web site.

currently, plan is designed as a stand-alone web platform for end users' direct use, with limited functions for data integration and sharing with other software systems. the data exchange protocols for programmable remote call and its potential integration with other systems such as a laboratory information management system  are being investigated and remain as future work.

availability and requirements
project name: personal blast navigator .

project home page: .

operating systems: platform independent.

programming language: php and perl.

other requirements: web server with php support, bioperl, and rational database server that is supported by adodb . a full list of adodb-supported database servers may be found at .

license: open-source and free for academic and non-profit use.

authors' contributions
jh designed, implemented the system and drafted the manuscript. xd developed part of the blast result parser. xz oversaw the system design and supervised the project development. all authors read and approved the final manuscript.

