BACKGROUND
recent advances in high-throughput experimental techniques such as yeast two-hybrid and mass spectrometry have generated a large amount of protein-protein interaction  data  <cit> . these available ppi data have constructed large complex ppi networks for numerous organisms, such as saccharomyces cerevisiae. ppis are of central importance for most biological processes, and thus ppi networks can provides a global picture of cellular mechanisms. a key task of system biology is to reveal cellular organization and function by analyzing the ppi networks. protein complexes are molecular aggregations of two or more proteins assembled by multiple ppis, which play critical roles in many biological processes. most proteins are only functional after assembly into protein complexes. accurate determination of protein complexes in large ppi networks is crucial for understanding principles of cellular organization and function from the networks level  <cit> .

over the past decade, great effort has been made to identify protein complexes in ppi networks. as protein complexes are groups of proteins that interact with each other, they are generally dense subgraph in ppi networks. some computational methods based on graph theory or dense regions finding have been proposed to identify protein complexes from ppi networks. the molecular complex detection  algorithm proposed by bader and hogue was one of the first computational methods reported based on graph theory. markov clustering   <cit>  can also be applied to identify protein complexes by simulating random walks in ppi networks, which manipulates the weighted or unweighted adjacency matrix with two operators called expansion and inflation. qi et al.  <cit>  proposed a supervised-learning framework to predict protein complexes, which can learn topological and biological features from known protein complexes. adamcsek et al.  <cit>  developed the cfinder tool to find functional modules in ppi networks, which use the clique percolation method  <cit>  to detect k-clique percolation clusters. moschopoulos et al. proposed a clustering tool  to detect protein complexes  <cit> , which involves two phases. firstly, giba uses a clustering algorithm such as mcl and rnsc to cluster the given ppi networks. then, giba filters the clustering results to generate the final complexes based on a combination method. liu et al.  <cit>  proposed a clustering method based on maximal cliques  to detect protein complexes. based on core-attachment structural features  <cit> , wu et al.  <cit>  developed the coach algorithm which identifies protein-complex cores and protein-complex attachments respectively. zaki et al. proposed prorank method which uses a protein ranking algorithm to identify essential proteins in a ppi network and predicts complexes based on the essential proteins  <cit> . chin et al. proposed a hub-attachment based method called hunter to detect functional modules and protein complexes from confidence-scored protein interactions  <cit> . since proteins may have multiple functions, they may belong to more than one protein complex. nepusz et al.  <cit>  proposed the clusterone algorithm which detected overlapping protein complexes in ppi networks. high-throughput experimental ppi data always is the high incidence of both false positives and false negatives  <cit> . since the computational methods are highly dependent on the quality of the ppi data, the performance of complex predictive models are clearly limited by the noise of the high-throughput ppi data. some studies have integrated other biomedical resources to improve the performance of protein complex identification. for instance, zhang et al.  <cit>  proposed the coan algorithm based on ontology augmentation networks constructed with high-throughput ppi and gene ontology  annotation data, which can takes into account the topological structure of the ppi network, as well as similarities in go annotations.

so far most studies on protein complex identification only focused on static ppi networks. however, cellular systems are highly dynamic and responsive to cues from the environment  <cit> . ppi network in a cell changes over time, environments and different stages of cell cycle  <cit> . ppis can be classified into permanent or transient ppis based on their lifetime. permanent ppis are usually stable and irreversible. on the contrary, transient ppis mostly dynamical change interaction partners and their lifetime are short. protein complexes are groups of two or more associated polypeptide chains at the same time. one major problem of protein complex identification is the static ppi networks cannot provide temporal information and do not reflect the actual situation in a cell  <cit> . it is very difficult to identify complex accurately from the static ppi networks.

to address this problem, the shift from static ppi networks to dynamic ppi networks is essential for protein complex identification and other similar applications. the gene expression data under different time points and conditions can reveal the dynamic information of protein. some studies have integrated gene expression data to reveal the dynamics of ppi. for example, lin et al.  <cit>  revealed dynamic functional modules under conditions of dilated cardiomyopathy based on co-expression ppi networks. taylor et al.  <cit>  analyzed the human ppi networks and discovered two types of hub proteins: intermodular hubs and intramodular hubs. zhang et al.  <cit>  used the pearson correlation coefficient to calculate the coexpression correlation of gene expression data and built coexpression protein networks at different time points. recently, hanna et al. proposed a framework termed dycluster to detect complexes based on ppi networks and gene expression data  <cit> . firstly, dycluster uses biclustering techniques to model the dynamic aspect of ppi networks by incorporating gene expression data. then, dycluster applies complex-detection algorithms, such as clusterone  <cit>  and cmc  <cit> , to detect the complexes from the dynamic ppi networks.

in general, the inevitable background noise exists in the gene expression data. how to identify the active time point of each protein based on gene expression data is crucial for constructing dynamic ppi networks. in this study, we proposed a novel method to calculate the active probability of proteins at different time points. furthermore, we constructed dynamic probabilistic ppi networks  to integrate gene expression data and ppi data based on attributed graph theory, and proposed a clustering method to identify protein complex from dppn. there are two key differences between our method and dycluster. firstly, the dppn constructed by our method can effectively distinguish the active level of a protein at a time point which is of benefit to the complex identification. secondly, our method doesn’t directly apply other complex-detection algorithms, but proposes a new clustering method for the characteristics of dppn. we demonstrated the utility of the method by applying it to three different yeast ppi datasets and gene expression data. three dppns were constructed and many well-characterized protein complexes were accurately identified. in addition, the method was compared with current protein complexes identification methods. the advantages of the method, potential applications and improvements were discussed.

methods
calculation of active probability for proteins
since a protein has its active periods in the cell  <cit> , the protein and its interactions appear and disappear in the ppi networks in a living cell. gene expression data can reflect the dynamic information of proteins varying with the time points or conditions. in general, the expression level of a protein will be decreased after the protein has completed its function. therefore, a protein is active at the time point, when the related gene expression data is at the high level.

a simple idea is to use a single global threshold for identifying the active time point of each protein. if the gene expression value of a gene is higher than the global threshold at a time point, the gene is considered as expressed at that time point. however, the expression level of genes in activity period is different. wang et al.  <cit>  proposed a three-sigma method to identify active time points of each protein in a cellular cycle. the standard deviation  is a statistical value which can measure how data are dispersed around their average. let x be a real random variable of normal distribution n, which describes for each individual gene its distribution of gene expression values across time. for any k >  <dig>  p{|x − α| < kσ} = 2Φ −  <dig>  where Φ is the distribution function of the standard normal law. in particular, for k =  <dig>   <dig>   <dig> it follows that p{|x ‐ α| < σ} = p{α − σ < x < α + σ} ≈  <dig> , p{|x ‐ α| < 2σ} ≈  <dig>  and p{|x ‐ α| < 3σ} ≈  <dig> . based on the above empirical rules, wang et al.  <cit>  designed an active threshold for each gene by calculating its own characteristic gene expression data, and constructed dynamic ppi networks. then, they tested some complex prediction methods, such as mcl  <cit> , on the dynamic ppi networks. in this paper, we proposed a novel method to construct dppn based on the three-sigma method  <cit> . compared with the three-sigma method  <cit> , our method can effective distinguish the active level of a protein at a time point. furthermore, we also proposed a new clustering method to identify complexes for the characteristics of dppn.

in fact, gene expression data always includes inevitable noise. the active proteins with low expression values are likely to be filtered out even though using an active threshold for each gene. to deal with this problem, we calculate the active probability of each protein at different time points based on three-sigma method. gene expression data often contain expression profiles of n time points. let gi be the gene expression value of gene p at the time point i. let α and σ be the algorithmic mean and sd of gene expression data g, respectively.  <dig> αp=∑i=1ngipn   <dig> σp=∑i=1ngip‐αp2n‐ <dig> 

since different genes correspond to different expression curves, we calculate the active probability of a protein based on the algorithmic mean and sd of the corresponding gene. firstly, the k-sigma  threshold can be calculated based three-sigma method  <cit>  as follows:  <dig> ge_threshkp=αp+k·σp·1−11+σ2p 

ge_thresk is the active threshold of gene p which is determined by the values of α,σ <dig> and k . if σ <dig> is very low, it indicates that the fluctuation of the expression curve of gene p is also very small and the value of gi tends to be very close to α. in this case, the value of ge_threshk is close to α. if σ <dig> is very high, it indicates that the value of gi is spread out over a large range of values. a large σ <dig> generally indicates much noise in the gene expression data of gene p. in this case, the value of ge_threshk is close to α + k · σ. note that the range of k  is in , while  <dig> is the maximum times of sigma. the larger k is, the higher ge_threshk gets. if we choose a larger k, the active proteins filtered by ge_threshk will be with higher confidence. for instance, based on three-sigma rules, when gi> α + 3 · σ, the probability that the protein p  is active at the i time point is  <dig>  %, but when gi > α + σ, the probability that the protein p  is active at the i time point is only  <dig>  %. based on the ge_threshk, we calculate the active probability of a protein in the i time point as follows.  <dig> prip= <dig> ifgip≥ge_thresh3p <dig> .680ifge_thresh3p>gip≥ge_thresh2pifge_thresh2p>gip≥ge_thresh1pifgip<ge_thresh1p 

in the equation , the active probability of a protein contains four levels based on the sigma rules . in particular, if the value of gi is lower than ge_thres <dig>  the active probability is  <dig>  this indicates that the protein p is not active in the i time point. in general, the active probability value of a protein can represent its active level at a time point. thus, we can distinguish the active level of a protein at a time point based on its active probability. neither global threshold method nor active threshold method can effectively distinguish the active level of a protein at a time point based on gene expression data. based on the active probability of a protein, we can not only effectively identify the active time point of the protein, but also distinguish the active level of the protein.

construction of dppn
since the active periods of proteins are different, the real ppi networks are changing over the time in a living cell. we can calculate the active probability of proteins at each time point based on gene expression data. in this section, we construct dppn by integrating the active information of proteins into static ppi networks based on attributed graph theory.

we define a dppn as a 7-tuple g =  where v is the set of protein vertices, e is the set of ppis, a = {t <dig>  t <dig>  … tn} is the set of active time points for protein vertices, and p = {p <dig>  p <dig>  p3} is the set of active probability for protein vertices at each active time point. fv is a function that returns the set of active time attributes of a protein vertex. each protein vertex vi in v has a set of active time attributes fv = {ti <dig>  ti <dig>  …, tim}, where m = |fv| and fv ⊆ a. likewise, fp = pk is a function that returns active probability pk for the protein vertex vi at tij time point. in this study, the active probability set p includes three values p1 =  <dig> , p2 =  <dig> , and p3 =  <dig> , respectively. each ppi e in e also has a set of active time attributes fe) = fv ∩ fv and fe) ≠ ∅.

figure  <dig> shows an example of dppn construction. figure 1a is a static ppi networks based on high-throughput ppi data, which consist of eight proteins. figure 1b shows a part of gene expression value of protein v <dig>  from fig. 1b, it can be seen that the gene expression value at t <dig> and t <dig> protein v <dig> are significantly higher than at t <dig>  t <dig> and t <dig>  according to the equation , ge_thresh2 > gt1 > ge_thresh <dig> at the time point t <dig>  and gt5 > ge_thresh <dig> at the time point t <dig>  therefore, the active probability of protein v <dig> are p <dig>  and p <dig>  at the time point t <dig> and t <dig>  respectively. figure 1c lists the active time attributes and active probability of all protein vertices in fig. 1a. it can be seen that each protein vertex has an active time attribute set. for instance, v <dig> has two active time attributes , and v <dig> has three active time attributes . in particular, each protein vertex has an active probability at an active time attribute. in fig. 1c, the active probability of v <dig> is p <dig>  and p <dig>  at the t <dig> and t <dig> time points, respectively. figure 1d shows a dppn constructed based on fig. 1a and c. each edge in dppn has an active time attributes set. for example, e <dig> represents the ppi between v <dig> and v <dig>  the active time attributes sets of v <dig> and v <dig> are {t <dig> t5} and {t <dig>  t <dig>  t4} based on fig. 1c, respectively. the active time attribute set of e <dig> is {t1} which is calculate by {t <dig>  t5}∩{t <dig>  t <dig>  t4}. if the active time attribute set of an edge is empty, the edge will not appear in dppn.fig.  <dig> illustration of dppn construction. a a static ppi network based on high-throughput ppi data. b the gene expression value of protein v <dig>  c active time attributes and active probability of protein vertices calculated based on gene expression data. d a dppn constructed based on a and c




protein complex identification from dppn
compared to static ppi networks, dppn can effectively represent not only the topological structure but also the dynamic information of ppi networks. since protein complexes are groups of proteins that interact with each other in the same time  <cit> , they are generally dense subgraph associated with the same active time attributes in dppn. the edges in dppn contribute differently for protein complex identification task. given a dppn g, the topology score of edge e is defined as follows:  <dig> topology_scoreevivj=ni∩nj+1maxavg.g,ni+maxavg.g,nj   <dig> avg.g=∑vk∈vnkv 

where ni and nj denote the neighbors of vi and vj respectively. |ni ∩nj | denotes the common neighbors of vi and vj, and avg. calculates the average degree of the dppn g. if vi and vj share more common neighbors, the topology score will be larger. max{avg., |ni|}can penalize protein vi with very few neighbors effectively  <cit> . based on the topology weight, the weight of edge e at the k active time point is given as:  <dig> weightekvivj=topology_scoreevi,vj·pkvi·pkvj 

where pk and pk are the active probability of vi and vj at the k time point, respectively. the equation  can consider not only the topological structure but also the dynamic information of dppn. since the active probability of vi and vj is likely different at different active time point, the weight of edge e dynamically changes during all active time points.

definition  <dig> - active correlated clique. given a protein vertex set c and an edge set ec in dppn g, an active correlated clique is a pair , ac), such that for each protein vertex vi in c, the degree of vi is |c|- <dig>  ac is the common active time attribute set of each protein vertex vi in c and ac ≠ ∅.

in general, we can mine many active correlated cliques in a dppn. figure  <dig> shows two active correlated cliques of the dppn in fig.  <dig> fig.  <dig> examples of active correlated cliques



definition  <dig> – active clique score. given an active correlated clique , ac), the active clique score of , ac) at the k  active time point, is given as:  <dig> clique_scorecec,ac=clique_pr.c,ec,ac·∑eij∈ectoplogy_scoreeij   <dig> clique_pr.cec,ac=max∏vi∈cpkvi,k∈ac 

where pk is the active probability of vi at the k time point. ∏vi ∈ cpk calculates the active probability of clique, ac) at the k time point. clique_pr. , ac) choose the maximum ∏vi ∈ cpk as the active probability for the clique from all the common active time points. therefore, active probability of an active correlated clique is associated with an unique active time point. we can use , tc) to denote an active correlated clique which gets the clique probability at tc active time point. clique score provides a reasonable combination of topology connectivity and the dynamic active attributes of dppn. if an active correlated clique is associated with a large clique score, this indicates that the proteins of the clique are all in dense subgraph structure of dppn as well as highly active at a same time point. therefore, the clique score can effectively evaluate how possible an active correlated clique is the core structure of a protein complex.

gavin et al.  <cit>  revealed the core-attachment structure of protein complex by genome-wide analyzing yeast complexes. based on core-attachment structure assumption, our method for protein complex identification from dppn involved two phases. in the first phases, we identified the core structure of protein complexes from dppn. in the second phases, we augmented the protein complex from the core structure by adding the close neighbor proteins.

in the first phase, we used the cliques mining algorithm  <cit>  to enumerate all maximal cliques which contain three or more proteins from dppn, and calculated the common active time attribute set for each maximal clique. if the common active time attribute set was not empty, the maximal clique was an active correlated clique. the candidate core set candidate_core was comprised of all active correlated cliques, which generally overlapped. we used equation  to calculate the active clique score for all active correlated cliques in candidate_core, and ranked them in descending order of active clique score, denoted as {, tc1), , tc2),…,, tcn)}. the top ranked clique, tc1) was then deleted from candidate_core and inserted into the core set core. to ensure that the active correlated cliques in core were non-overlapping, we used the same method  <cit>  to remove or prune overlapping cliques until the candidate core set candidate_core was empty. in this way, we could generate core structures for most protein complexes. however, some protein complexes are with low density or only contain two proteins  <cit> . to solve this problem, we added some edges with high weight score to the core set core. we used the equation  to calculate the weight for the edges which were not contained in all active correlated cliques. if the weight of an edge was larger than the predefined threshhold core_thresh, we directly added the edge to core set core. therefore, we chose not only active correlated cliques but also the edges associated with high weight score as core structures of protein complexes.

in the second phase, we augmented the core structure by adding each close neighbor protein one by one. we used attached score to measure how closely a protein vk with active time attribute ak was connected to a core structure , tc), where vk ∉ c and tc ∈ ak. the attached score of vk with respect to , tc) is given as:  <dig> attach_scorevkakc,ec,tc=∑vi∈cweightetcvivkc 

if the attach_score was larger than extend_thresh, then vk was added to the core structure , tc). therefore the final identified protein complexes were generated by adding the close neighbor proteins to the core structure. here, extend_thresh was a predefined threshold. the optimal value of extend_thresh and core_thresh can usually be determined in preliminary experiments.

RESULTS
in this section, the datasets and evaluation metrics used in the experiments are described. the impact of the core_thresh and extend_thresh parameters are assessed. finally, our method is compared with current state-of-the-art protein complex identification methods.

datasets and evaluation metrics
the three high-throughput ppi datasets used in our experiment were the krogan dataset  <cit> , dip dataset  <cit>  and mips dataset  <cit> , respectively. the statistics of the three yeast ppi datasets is listed in table  <dig>  the benchmark protein complex datasets are cyc <dig>  <cit>  and mips <dig>  <cit> , which consist of  <dig> and  <dig> protein complexes, respectively.table  <dig> the statistics of high-throughput ppi datasets in experiments



the gene expression data used in our experiment was gse <dig>  <cit>  downloaded from gene expression omnibus , which is an expression profiling of yeast by array affymetrix gene expression data over three successive metabolic cycles. gse <dig> gene expression data is  <dig> time intervals per cycle. therefore, there are  <dig> active time points  for each gene in a cycle. we constructed three dppn networks to integrate high-throughput ppi data and gene expression data as described in the section “construction of dppn”. dppn i, dppn ii and dppn iii were constructed by integrating gene expression data gse <dig> with the krogan dataset, dip dataset and mips dataset, respectively. compared to the static ppi networks, dppns could effectively distinguish the active period of a protein by active time attribute of the protein. in this study, if the active probability of a protein higher than or equal to p <dig>  at a time point, the protein is considered as active at that time point. the distributions of the number of active proteins with different active time attributes on dppn i, dppn ii and dppn iii were given in fig. 3a, b and c, respectively. we could observe that there was an obvious peak at t <dig> in fig. 3a, b and c. there were  <dig>   <dig> and  <dig> active proteins at t <dig> on dppn i, dppn ii and dppn iii, respectively.fig.  <dig> the distribution of the number of active proteins. a, b and c are the distribution of the number of active proteins in dppn i, dppn ii and dppn iii, respectively



let p be an identified complex and b be a known complex. we defined the neighborhood affinity score na between p and b as follows:  <dig> napb=vp∩vb2vp×vb 

if na is  <dig>  it means that the identified complex p has the same proteins as a known complex b. on the contrary, if na is  <dig>  it indicates no shared protein between p and b. we considered p and b to match each other if na was larger than  <dig> , which is the same as most methods for protein complex identification  <cit> .

precision, recall and f-score have been used to evaluate the performance of protein complex identification methods by most previous studies. the definitions of precision, recall and f-score are given as follows:  <dig> precision=ncpidentified_set   <dig> recall=ncbbenchmark_set   <dig> f‐score=2precision⋅recallprecision+recall 

where ncp is the number of identified complexes which match at least one known complex and ncb is the number of known complexes that match at least one identified complex. identified_set denotes the set of complexes identified by a method and benchmark_set denotes the reference benchmark set. precision measures the fidelity of the identified protein complex set. recall quantifies the extent to which a identified complex set captures the known complexes in the benchmark set. f-score provides a reasonable combination of both precision and recall, and can be used to evaluate the overall performance.

recently, sensitivity , positive predictive value  and accuracy  have also been used to evaluate protein complex identification tools. given n benchmark complexes and m identified complexes, let tij denote the number of proteins in common between ith benchmark complex and jth identified complex. sn and ppv are then defined as follows:  <dig> sn=∑i=1nmaxj=imtij∑i=1nni   <dig> ppv=∑j=1mmaxi=1ntij∑j=1m∑i=jntij 

here ni is the number of proteins in the ith benchmark complex. generally, high sn value indicates that the prediction has a good coverage of the proteins in the benchmark complexes, while high ppv value indicates that the predicted complexes are likely to be true positives. accuracy is the geometrical mean of the sn and ppv, which is defined as follows:  <dig> accuracy=snppv 

accuracy represents a tradeoff between sn and ppv value. the advantage of taking the geometric mean is that it yields a low score when either the sn or ppv metric is low. high accuracy values thus require a high performance for both criteria. to keep in line with most previous studies, we chose precision, recall and f-score as the major evaluate measures in this study, and also reported sn, ppv and accuracy.

the effect of threshhold parameters
in this experiment, we evaluated the effect of the threshold parameters of our method on the dppn i. the parameters, extend_thresh and core_thresh, range from  <dig> to  <dig>  we can choose the optimal value of extend_thresh and core_thresh by the experimental approach. firstly, we kept extend_thresh = <dig>  and evaluated the effect of core_thresh. the detailed experimental results on the dppn i with different core_thresh were shown in table  <dig>  the highest value in each row was shown in bold.table  <dig> the effect of “core_thresh” on dppn i


core_thresh
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold



as shown in table  <dig>  when core_thresh was too small, many edges with low weight score would be added to core set. this would lead to identify many false protein complexes and degrade the f-score of our method. on the contrary, when core_thresh was too large, little edges would be added to core set even though some edges with high weight score. overall, our method achieved the highest f-score, when core_thresh = <dig> .

secondly, we kept core_thresh = <dig>  and evaluated the effect of extend_thresh. the detailed experimental results on dppn i with different extend_thresh were shown in table  <dig>  the highest value in each row was shown in bold. it can be seen that our method proved sensitive to extend_thresh between  <dig> and  <dig> . f-score performance ranged from  <dig>  to  <dig> . when extend_thresh =  <dig>  precision, recall and f-score were  <dig> ,  <dig>  and  <dig> , respectively. as extend_thresh was increased, the number of proteins added decreased sharply. when extend_thresh =  <dig> , precision, recall and f-score achieved  <dig> ,  <dig>  and  <dig> , respectively. when extend_thresh was increased from  <dig>  to  <dig> , precision, recall and f-score all decreased.table  <dig> the effect of “extend_thresh” on dppn i


extend_thresh
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold



then we evaluated sn, ppv and acc metrics for extend_thresh on dppn i in table  <dig>  when extend_thresh was changed from  <dig> to  <dig> , ppv increased whereas sn decreased. when extend_thresh ranged between  <dig>  and  <dig> , sn, ppv and acc did not change appreciably. acc was defined as the geometric mean of sn and ppv, which was maximized  when extend_thres =  <dig> . compared with acc, f-score is more effectively and reasonably to evaluate the performance of a method. from table <dig>  it can be seen that our method can achieve highest f-score, when extend_thresh = <dig> .

comparison with other methods
we compared our method on three dppns with the following state-of-the-art protein complex identification methods : clusterone  <cit> , coan  <cit> , coach  <cit> , cmc  <cit> , hunter  <cit>  and mcl  <cit> . to equally compare the performance, we test all comparison methods on the krogan, dip and mips dataset respectively, and use the cyc <dig> as benchmark dataset to choose the optimal parameters. for our method, the parameter core_thresh and extend_thresh is set to  <dig>  and  <dig> , respectively. for clusterone, the “overlap” parameter is set to  <dig> . for coan, the “threshold” parameter is set to  <dig> . for coach, the “omega” parameter is set to  <dig> . for cmc, the “overlap_thres” and “merge_thres” parameters are set to  <dig>  and  <dig> , respectively. for mcl, the “inflation” parameter is set to  <dig> . the highest value in each row was shown in bold.table  <dig> performance comparison with other methods on krogan dataset using cyc <dig> as benchmark

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold



tables  <dig>   <dig> and  <dig> listed the performance comparison results using cyc <dig> as benchmark. firstly, we compared our method using dppn i with clusterone, coach, cmc, hunter and mcl using the krogan ppi network. as shown in table  <dig>  clusterone achieved the highest acc of  <dig> . hunter and mcl achieved the highest precision of  <dig>  and the highest sn of  <dig> , respectively. compared with other methods, our method achieved the highest f-score of  <dig> , the highest recall of  <dig>  and the highest ppv of  <dig> , which was significantly superior to the other methods. secondly, we compared our method using dppn ii with the other methods using the dip ppi network. from table  <dig>  it could be seen that our method achieved both the highest f-score of  <dig>  and the highest acc of  <dig> . hunter and mcl also achieved the highest precision  and the highest sn  in table  <dig>  thirdly, we compared our method using dppn iii with the other methods using the mips ppi network. similarly, our method also achieved both the highest f-score of  <dig>  and the highest acc of  <dig>  in table  <dig> 

table  <dig>   <dig> and  <dig> listed the performance comparison results using mips <dig> as the benchmark. from table  <dig>  our method achieved the highest recall of  <dig>  and the highest ppv of  <dig> , respectively. coan achieved the highest f-score of  <dig>  and the highest acc of  <dig> , respectively. from table  <dig>  our method also achieved the highest ppv of  <dig>  and a high f-score of  <dig> . coan also achieved the highest f-score of  <dig>  and the highest acc of  <dig> , respectively. form table  <dig>  our method achieved the highest recall of  <dig>  and the highest f-score of  <dig> , respectively. clusterone achieved the highest acc of  <dig>  in the table  <dig>  we also noted that the performance results of most comparison methods using mips <dig> as benchmark were inferior to the performance results using cyc <dig> as benchmark in tables  <dig> and  <dig>  for instance, our method achieved a low f-score of  <dig>  in the table  <dig>  which was significantly inferior to the f-score of  <dig>  in the table  <dig>  the main reason was that the comparison methods used cyc <dig> as benchmark to choose the optimal parameters.

next, we compared our method with dycluster  <cit>  in the tables  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig>  dycluster is a framework to detect complexes based on ppi data and gene expression data, which was proposed by hanna et al. dycluster uses biclustering techniques to construct dynamic ppi networks by incorporating gene expression data, and then applies the existing complex-detection algorithms, such as clusterone and cmc, to detect the complexes from the dynamic ppi networks. based on dycluster framework, we can compare our method with existing methods that integrate gene expression data with ppi data. in the tables  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig>  “dycluster + clusterone” denotes using dycluster framework to construct dynamic ppi networks and applying clusterone method to predict complexes from dynamic ppi networks. in tables  <dig>   <dig> and  <dig>  we used cyc <dig> as the benchmark. it can be seen that our method achieved the highest f-score in tables  <dig>   <dig> and  <dig>  and “dycluster + clusterone” achieved the highest acc in tables  <dig> and  <dig>  in tables  <dig>   <dig> and  <dig>  we used mips <dig> as the benchmark. similarly, our method and “dycluster + clusterone” achieved the highest f-score and acc in tables  <dig>   <dig> and  <dig>  respectively.table  <dig> performance comparison with dycluster method on krogan dataset and gene expression data using cyc <dig> as benchmark

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold

 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
f: f-score, p: precision, r: recall. the highest score of each row is shown in bold



finally, we shuffled the gene expression data and tested whether or not the temporal information in the gene expression data can help identify protein complexes. there are expression levels at  <dig> time points for each gene in the gse <dig> gene expression data. in this experiment, we took these expression levels for each gene, and shuffled them between the different time points. each gene retained the same set of gene expression levels, but the order in which these expression level changes happen was now shuffled. we compared the performance of our method on gse <dig> gene expression data with the gene expression data shuffled randomly in the tables  <dig> and  <dig>  form the tables  <dig> and  <dig>  it can be seen that the performance of our method on the gene expression data shuffled randomly was significantly inferior to the gse <dig> gene expression data. this indicated that the temporal information in the gene expression data was important to identify complexes.table  <dig> performance comparison of our method on gene expression data shuffled randomly using cyc <dig> as benchmark

f: f-score, p: precision, r: recall

f: f-score, p: precision, r: recall



in summary, our approach achieved the state-of-the-art performance on three dppns, which was competitive or superior to the existing protein complexes identification methods. compared with the prior works, dppn can not only effectively identify the active time point of the protein, but also distinguish the active level of the protein. the experimental results indicated that dppn could effectively integrate dynamic information of protein into static ppi networks, and improve the performance of protein complex identification.

golgi transport complex identified by our method
figure  <dig> shows the golgi transport complex identified by our method on dppn i. golgi transport complex was first found by whyte et al. through experimental method  <cit> . they firstly identified the key protein, yml071c, that was involved in vesicle targeting to the yeast golgi apparatus, and then found it to be associated with seven other proteins. eventually, whyte et al. found the golgi transport complex was comprised of eight proteins including yml071c, yer157w, ygl223c, ygr120c, ypr105c, ynl051w, ynl041c and ygl005c.fig.  <dig> golgi transport complex identified on dppn i



from fig.  <dig>  our method firstly calculated the protein dynamic information and constructs the dppn i based on the gene expression data and mips dataset. it can be seen that the eight proteins share the common active time point t <dig>  this indicates that all these proteins will be active on the dppn i at the active time point t <dig>  eventually, our method not only considered the topology information of high-throughput ppi dataset but also the dynamic information of gene expression data to identify the golgi transport complex exactly from dppn i. furthermore, this result suggested that the life period of the golgi transport complex is mostly at t <dig> time point. compared with other methods, our method can integrate the dynamic information of gene expression data to improve the performance of protein complex identification, and distinguish the active time point of the identified protein complexes during the cell cycle.

CONCLUSIONS
a challenging task in post-genomic era is to construct dynamic ppi networks and identify protein complex from dynamic ppi networks. in this paper, we first proposed active probability-based method to distinguish the active level of proteins. based on this, we constructed dppn to integrate the dynamic information of gene expression data into static ppi networks. compared with static ppi networks, dppn could effectively represent the dynamic information as well as topological structure of proteins. furthermore, we developed a novel method to identify protein complex on dppn. experimental comparisons on three dppns showed that this approach outperformed established leading protein complex identification tools. the model and the construction method of dppn could not only be applied to identify protein complex, but also provide a framework to integrate dynamic information into static networks for other applications, such as pathway analysis.

using gene expression data to construction dynamic ppi networks is based on the assumption that gene expression and protein expression are well correlated. some studies have suggested that protein levels are not proportional to mrna levels  <cit> , which can be amplified by post-transcriptional processes. in the future work, we will study how to construct dynamic ppi networks more accurately. we will choose several complexes prediction methods which complement each other, and attempt to combine these methods to predict complexes. in addition, other data and models could further improve complexes prediction. for example, protein location data can be further incorporated into the dynamic ppi networks, which could benefit the complexes identification. we will also try using uncertain graph model to identify the complexes on the dynamic ppi networks.

competing interests

the authors declare that they have no competing interests.

authors’ contributions

yz conceived the idea, designed the experiments, and drafted the manuscript. hl, zy and jw guided the whole work. all authors have read and approved the final manuscript.

