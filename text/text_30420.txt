BACKGROUND
since many biological data could be represented as a two-dimensional matrix, it is important to find the hidden structure contained within such a structure. here, the hidden structure can mean the clusters embedded in the subspace in a high-dimensional dataset  <cit> . the problem of finding these structures can be solved using biclustering, which is also known as coclustering or block clustering  <cit> . a bicluster is a submatrix that consists of a subset of the rows  and a subset of columns  in the matrix. the purpose of biclustering is to find the submatrix that consists of homogeneous elements in rows, columns, or both. biclustering has been applied to diverse areas such as frequent itemsets, information retrieval, and gene expression analysis  <cit> .

biclustering has been intensively studied in molecular biology research, as the expression levels of thousands of genes can be measured experimentally using microarrays  <cit> . dna microarray data are represented as a matrix of expression levels of genes under different conditions corresponding to a set of rows and a set of columns. here, the conditions usually include the environment, diseases, and tissues. the biclustering algorithm tries to find a subset of the genes representing similar behavior under multiple conditions. the biclustering problem is known as an np-hard combinatorial problem  <cit> .

biclustering problems are more complex than one-way clustering problems, because of the coupled landscapes of their search space. biclustering problems may reflect the issues encountered in evolving the interdependent subcomponents considered in coevolutionary learning. in biclustering problems, the rows and columns of a matrix can be considered as interdependent subcomponents. if a biclustering algorithm is permitted to interact between these subcomponents, then it can search efficiently in a coupled landscape. for example, potter and de jong suggested the potential problem-solving capability of cooperative coevolutionary systems  <cit>  and following study of zaritsky and sipper presented good results for the shortest common superstring  problem, using a cooperative coevolutionary algorithm  <cit> .

here, we propose a probabilistic coevolutionary biclustering algorithm  to find functional groups of genes and corresponding conditions from microarray datasets. it is based on the concept of coevolutionary learning and probabilistic searching. the most distinctive idea of pcoba is that it decomposes the entire search space into subcomponents to discover hidden patterns in the matrix. in this algorithm, two populations, corresponding to a subset of rows and a subset of columns, are maintained. coevolutionary learning evolves the two different populations within the context of each other  <cit> . pcoba guides these populations towards the minimum of the objective function representing the quality of the biclusters through cooperation between two populations.

when applied to synthetic datasets and the microarray data of yeast, the results demonstrate pcoba incorporating probabilistic searching improves its ability of finding biclusters. the resulting patterns are well enriched to known annotations that are consistent with biological knowledge. our approach for searching important biological patterns could be utilized to find the uncovered relationships between genes and other biological components at a genome-wide level.

methods
biclustering of microarray data
in gene expression data, it is defined as a subset of genes and a subset of the conditions. let g = {g <dig>  g <dig>  ..., gn} be a set of genes and c = {c <dig>  c <dig>  ..., cm} be a set of conditions, such as different tissue samples. the data can be represented as an n × m matrix with real values, denoted as e. here each entry, eij, in e indicates the expression level of a gene, gi, under a specific condition, cj.

let i be the set of row indices belonging to a row cluster, and j be the set of column indices belonging to a column cluster, where i ⊆ { <dig> ...,n} and j ⊆ { <dig> ...,m}. thus, a bicluster is a submatrix, b = , |i|≤n and |j|≤m, where i and j indicate the set of genes  and conditions , respectively. the volume of a bicluster, , is defined as the number of entries, eij, i ∈ i and j ∈ j.

an example of a data matrix, e, and a bicluster, , is shown in figure  <dig>  in this example, the bicluster could be b =  in the expression matrix.

to find a bicluster with the required quality, we first consider the mean squared residue , as proposed by cheng and church  <cit> . this is the squared mean residue of all the elements in a submatrix, ,

 hij=1|i||j|∑i∈i,j∈jhij <dig>  

where hij is the residue of an element eij in the bicluster determined by index sets i and j. the residue of an element eij is defined as

 hij=eij-eij-eij+eij. 

the residue is the difference between the actual value of an entry and the expectation value of an entry. as the residue of an entry decreases, its coherence in its rows and columns gets stronger. here

 eij=∑j∈jeij|j|,eij=∑i∈ieij|i|,eij=∑i∈i,j∈jeij|i||j|, 

where eij indicates the mean of the entries in row i, of which column indices are in j. eij indicates the mean of the entries in column j, of which row indices are in i. eij is the mean of all the entries in the submatrix consisting of i and j.

if only msr is applied to measure the quality of a bicluster, then the trivial biclusters, such as biclusters showing no fluctuation in expression level can be found. the raw variance reject any trivial biclusters as follows,

 vij=1|i||j|∑i∈i,j∈j <dig>  

by adding this term to an objective function, it is possible to detect fluctuations in the gene expression levels under some conditions or samples.

to find a bicluster, we present the objective function to minimize it by employing some characteristics.

• minimizing the mean squared residue, hij. if a mean squared residue of a specific bicluster has lower than a parameter value, δ, then its bicluster is denoted as δ-bicluster.

• maximizing variance, coupled with highly coherent biclusters.

• maximizing volume, which means a large number of genes and conditions.

probabilistic coevolutionary biclustering
various attempts have been made to find biclusters in microarray data  <cit> . several evolutionary algorithms for biclustering have also been proposed. bleuler et al., introduced an evolutionary algorithm coupled with previous biclustering algorithms  <cit> . mitra et al., proposed a multi-objective evolutionary biclustering algorithm incorporating local search strategies  <cit> . they demonstrated that evolutionary algorithms can successfully improve the quality of biclusters. the search strategy of our algorithm is different from those using conventional operators. our algorithm utilizes the global statistical information of two cooperative populations so that its ability to search biclusters is more effective. the key idea is that the algorithm coevolves two populations for a gene set and a condition set, as the one is adapted cooperatively to the other.

the pseudo code of pcoba is shown in figure  <dig>  each individual in the population of the gene  sets is encoded using binary vectors that represent a subset selected from the gene  set. the fitness of each individual is determined by the degree of cooperation between the selected one and individuals of the other population. the two populations are updated using statistical information extracted from the previous populations and mutation operator. after setting the parameters, the initial populations, popg of size μ and popc of size ν, are created randomly from the gene sets and the condition sets. each individual is evaluated by measuring the fitness functions. then, sets of the best individuals, sg and sc are selected from the current populations. next, the probabilities pg and pc are updated using the update rule based on the distribution of the selected individuals. populations of the next generation are generated based on the current updated probability vectors.

coevolutionary optimization
the population of the gene set, popg and that of the condition set, popc consist of {x <dig>  x <dig>  ..., xμ} and {y <dig>  y <dig>  ..., yν}, respectively. here, each individual xi is encoded by a binary string, ∈{ <dig> }n, that represents the presence of several genes among a set of genes, {g <dig>  g <dig>  ..., gn}.

in addition, yj for a given set of conditions is encoded in the same way as xi is. therefore, the total search space is Ω = { <dig>  1}n + { <dig>  1}m. a bicluster, , is an index with a value =  <dig> in  pair, i =  <dig> ...,n and j =  <dig> ...,m.

fitness evaluation
the score function is designed to measure the quality of a bicluster  <cit> . the minimum score denotes the best quality that should have a low mean squared residue, high variance, and large volume. this bicluster may satisfy that the expression patterns of many genes are similar in many different conditions.

it consists of three terms, as follows

 scorexi,yj=resij+varij+volij 

first, res indicates the residue score, and is measured by

 resij=hijδifhij>δ1else. 

if hij is greater than δ, then res reflects the mean squared residue, else it is set as a constant. here δ is predefined by user. when res is a constant, the fitness can concentrate more on the variance and volume terms.

second, the variance term is

 varij=wb∙1vij. 

here, wb is a parameter controlling the variance term among all the terms.

finally, the volume term is

 volij=wv∙wg∙in+wc∙im. 

here, wv is a control parameter used to set an importance to the volume term among the terms. the terms wg and wc are weight parameters used to keep a balance between the genes and conditions.

the fitness of each individual is measured from the scores defined in previous equation, and is obtained when it forms the complete solution  with an individual of the other species. an individual of the other species is referred to as a "collaborator''. the fitness of an individual xi is

 fxi=minscorexi,yi,j= <dig> ...,m. 

and that of yj is

 fyi=minscorexi,yi,i= <dig> ...,n. 

the minimum score determines the fitness of each individual when it is combined with individuals from the other population. in terms of coevolution, individuals are adapted cooperatively to the other population.

here, it may be not necessary to evaluate the fitness to calculate the scores between all the x and y pairs. if the algorithm calculates all the scores of the pairs to select the best collaborator, then the evaluation cost will be high. to reduce the evaluation cost, we applied the following strategy. the algorithm selects the number of r, r≤m, randomly for each yj, and then it calculates their scores. thus, the total number of evaluations is reduced by r⋅ν in each generation. since this strategy can affect performance, appropriate r value  should be carefully chosen.

probabilistic update of a population
the next population is generated by sampling with a probabilistic distribution and mutation operator. while the probabilistic update of populations utilizes statistical information from the previous generation, the mutation operator involves utilizing the location information in the solution space. a strategy related to the combination of an eda and a conventional operator  <cit>  can improve the performance with regards to the optimality and convergence of conventional genetic algorithms.

in probabilistic learning, two populations, pop and pop, maintain probability vectors, pg=pg <dig> pg <dig> ...,pgn for the gene set pop and pc=pc <dig> pc <dig> ...,pcm for the condition set pop, respectively. the initial vector has a uniform distribution. the probabilities are updated using the following equations,

 pgi=⋅pgi+α⋅∑k=1sgxkisgandpcj=⋅pcj+β⋅∑k=1scykjsc, 

where α ∈  and β ∈  are the parameters for controlling the updates. this updating rule is similar to the population-based incremental learning  algorithm  <cit> . in each generation, two sets of best individuals, sg and sc are selected based on the fitness, and each probability is updated based on the fraction of the number, ones in the selected individuals. this probabilistic model for generating the next population is relatively simple.

we applied an additional mutation operator to generate offspring because it could be helpful for increasing the diversity of population. the number of individuals selected for mutation was different from sg and sc, and was set to maintain a sufficient selection pressure. thus, half of the population size was generated by a probability distribution, and the other half was generated by a mutation operator.

other evolutionary algorithms
here, we describe three different types of algorithm for comparison with other evolutionary algorithms.

genetic algorithm 
the genotype of a bicluster is a continuous bit string, . here, reproduction and mutation are used as genetic operators. a crossover operator was not applied in this study, since a crossover operator tends to form biclusters with a high volume, which interrupts to obtain good solutions. in reproduction, individuals were selected using a proportional selection. the population size was  <dig>  and the mutation rate was set to  <dig> .

coevolutionary genetic algorithm 
unlike a conventional genetic algorithm, the genotype of a bicluster is not a continuous bit string. the genotype of a cga is separated into two parts. the genetic operators are the same as the genetic algorithm, and the method of evolution is the same as the pcoba.

estimation of the distribution algorithm 
the encoding of individuals here was the same as in the genetic algorithm. however, the next population was generated from a probability vector based on the pbil algorithm and a mutation, such as the pcoba. the probability vector was .

RESULTS
experimental data preparation and parameter setting
we performed experiments to show the performance of pcoba, including both synthetic datasets and a yeast gene expression dataset. the synthetic datasets are ea, eb, and ec, which were noisy matrices like gene expression datasets. they had embedded homogenous block structures like submatrices coupled between genes and conditions. their matrices were filled with random values ranging from  <dig> to  <dig>  and then a fixed number of clusters were embedded. first, we examined whether the proposed pcoba could find the single homogeneous block structure from ea which embeds only one bicluster. ea is the noisy matrix of  <dig> rows ×  <dig> columns with single structure of .

furthermore, we studied if pcoba were able to find the multiple homogeneous block structures in eb embedding multiple biclusters. although the volumes of datasets were relatively small, it could be difficult to find biclusters if a block is very homogeneous. therefore, to make these kinds of matrices, we designed a block structure embedding more homogeneous blocks. eb contains three different structures  in the noisy matrix of  <dig> ×  <dig>  these structures were less than δ =  <dig>  here, δ is the threshold of residue score and lower score means high quality biclusters.

the ec was used to examine the ability of finding a bicluster from a higher dimensional dataset. real datasets, such as gene expression data, are composed of large dimensional matrices. in general, if the dimension of a matrix gets larger, then the volume of the biclusters is increased. in addition, the matrix contains a higher number of biclusters. we designed the synthetic dataset, ec, considering these conditions. ec is a  <dig>  ×  <dig> matrix that contained three  <dig> ×  <dig> structures. all the block structures were less than δ =  <dig> 

the real datasets were gene expression profiles of yeast microarrays. typically, a microarray experiment assesses the expression of a large number of genes under various conditions. these conditions may be a time series during a biological process, or a collection of different tissue samples, e.g., normal versus tumor tissues. the performance of our proposed algorithm was measured using the cell cycle expression data of a yeast saccharomyces cerevisiae that was obtained from tavazoie et al.,  <cit> . the matrix dataset contains expression levels of  <dig>  genes  under  <dig> conditions . in this matrix, missing values were replaced by sampled random numbers from a uniform distribution between  <dig> and  <dig> 

the experimental parameters are listed in table  <dig> . in the case of a dataset with large dimensions, we gave much weight to the volume term. in addition, we gave much weight to the gene rather than condition of the volume term. the terms sg and sc corresponded to 20% of the population size. the selection ratio of the best individuals for mutation was set to 50%, and the mutation rate was set to  <dig> . these values were chosen empirically as the result of multiple runs. for example, when α and β were small, the algorithm showed a stable performance on the whole.

() corresponds to ec dataset.

searching biclusters using the pcoba
we observed the characteristics on optimization, while pcoba was running with parameter setting of table  <dig>  figure  <dig> shows the simulation results of pcoba using the synthetic dataset, ea. the fitness decreased rapidly during the first  <dig> generations. the score curve was similar to the fitness curve. this means that pcoba concentrated on the mean residue score by about the 20th generation. in figure  <dig>  the variance is seen to increase after about  <dig> generations. although the variance fluctuated over the generation in each run, the general trend is revealed by plotting averages of variants. the volume curve is shown in figure  <dig>  after the algorithm reached a minimum volume, then the volume size increased continually. here, though we demonstrated an optimization process with ea dataset, pcoba also tends to be similar characteristics using other dataset.

comparison with other evolutionary algorithms
in this section, we present a comparison of the performance between pcoba and other evolutionary algorithms. the purpose of this comparison was to analyze the effect of coevolution, an estimation of the distribution, and finally the potential synergy of two different strategies.

we applied four different algorithms, including genetic algorithm , coevolutionary genetic algorithm   <cit> , estimation of the distribution algorithm   <cit>  and the proposed pcoba, to the synthetic datasets. for a fair comparison, the number of evaluations was the same for all algorithms. first, the runs for the ea and eb datasets were terminated after the following iterations. for ga and eda, the number of iterations was set to  <dig> populations ×  <dig>  generations. for cga and pcoba, it was set to  <dig> populations ×  <dig> selected genes ×  <dig> generations. here  <dig> selected genes correspond to r value  to reduce the evaluation cost. second, the number of iterations for the ec dataset was set to  <dig>  populations ×  <dig>  populations for ga and eda. for cga and pcoba, it was set to  <dig>  populations ×  <dig> selected genes ×  <dig> generations.

a comparison of the performance between pcoba and other evolutionary algorithms is shown in table  <dig>  the results contain the averages and standard deviations after  <dig> runs. the fitness was mostly affected by the residue score. for ea and eb datasets, the residue scores of pcoba outperformed the other three algorithms. our algorithm could find a bicluster including coherent elements better than a conventional evolutionary algorithm, such as the simple ga, could, whereas ga often failed to find a homogenous block structure. the higher standard deviation of the scores and fitness was interpreted as an open failure. although cga and eda showed better residue scores than ga did, they were not superior to pcoba. eda tended to improve the volume score, whereas cga tended to focus on the residue score. this result may indicate that pcoba takes advantage of both algorithms. when eb formed multimodal landscapes, our analysis tried to find a single local optimum less than δ. in the eb dataset embedding multiple homogenous blocks, the fitness values of all algorithms were better than those using the ea dataset.

mean and standard deviation values after  <dig> independent runs are shown.

the lower score means the expression values in cluster are more similar.

usually, real datasets, such as gene expression data, have large dimensions and contain multiple homogenous blocks, and it is difficult to obtain good solutions using a real dataset. thus, ec was utilized as an alternative dataset to evaluate the performance considering the scalability in the dataset size. all the algorithms found scores less than δ. the average scores of the three algorithms were little different. however, pcoba had a high value for the volume term.

comparison with other biclustering algorithms
we compared the performance with previous cheng and church  and the order preserving submatrix  biclustering algorithms using the cell cycle expression data of a yeast saccharomyces cerevisiae. the cc algorithm was proposed by cheng and church  <cit>  and employs the heuristic in a relaxed "greedy" search. we set the parameter of the cc algorithm, δ, with the identical value to our parameter. the opsm was introduced by ben-dor et al.,  <cit> . it was designed to discover biclusters exhibiting coherent behavior in the columns. thus, this algorithm focuses on the relative order of the columns.

the performance of the three algorithms is presented in table  <dig>  all the average and standard deviation values are the result of the ten best biclusters after one run. the residue score of our algorithm was similar to that of the cc algorithm. the average of residue score was less than  <dig>  the average variance of pcoba was marginally better than that of the cc algorithm. although the opsm algorithm yielded high-variance results, its residue score was inferior to those of pcoba and the cc algorithm. as the opsm algorithm induces a high variance, then it was easier to show poorer residue scores. this may be due to the characteristic of the opsm algorithm that focuses on coherent behavior to find biclusters. in respect to the volume, the average volumes of the three algorithms were similar. however, the cc and the opsm algorithms tended to find larger gene sets. among all the biclusters they found, the volume of only one bicluster dominated the others. the biclusters found by pcoba were not larger than the volume size,  <dig>  but pcoba balanced suitably the three terms as a whole, in that it outperformed other algorithms.

mean and standard deviation values of the ten best biclusters after single run are shown.

the lower score means the expression values in cluster are more similar.

functional analysis of the discovered clusters by pcoba
to validate the discovered biclusters, we analysed the functional correlations between clustered genes by protein interaction network analysis   <cit>  for yeast dataset. we show two biclusters with more biological significance in this study. table s <dig>  presents the identified two biclusters with most enriched go biological process terms and keeg pathways . in particular, 'cell cycle' is exactly assigned as an enriched pathway in cluster i, of which members are highly modulated by protein interaction. 'metabolic process' related terms are enriched in cluster ii. it has been known that metabolism of methionine has been associated with cell cycle progression  <cit> . these properties confirm the biological relevance of the identified biclusters.

CONCLUSIONS
we have proposed the biclustering algorithm  that can cluster the rows and columns in a two-dimensional matrix simultaneously, based on coevolutionary searching. pcoba can be considered to be a synergistic optimization technique that combines a coevolutionary search with a population-based probabilistic search. in particular, it is a novel algorithm that can obtain highly correlated patterns from variables of a two-way problem in a dataset having a matrix form. in detail, it could be an efficient procedure to discover coherent patterns, since our algorithm tries to decompose a task using coevolutionary searching, and utilizes former global information in a complex problem of a large-scale matrix. the performance of the proposed pcoba was tested using synthetic datasets. our algorithm outperformed conventional evolutionary computing methods including genetic algorithm, coevolutionary genetic algorithm, and estimation of distribution algorithm. in addition, the results from yeast expression datasets showed that our method can offer biclusters of higher quality in regards to coherent patterns. our proposed method provides substantial guidance for the development of algorithms for finding hidden patterns from datasets in a matrix form that are generated in various research fields, including biology.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jgj implemented the method and wrote the manuscript. sjk analyzed the data and wrote the manuscript. sys wrote the manuscript. btz supervised the study.

supplementary material
additional file 1
table s <dig> - enriched interactome modules from yeast modules by pina.

click here for file

 acknowledgements
this work was supported by the national research foundation of korea  grant funded by the korea government   and basic science research program through the national research foundation of korea  funded by the ministry of education, science and technology .

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2012: eleventh international conference on bioinformatics : bioinformatics. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/13/s <dig> 
