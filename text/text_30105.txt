BACKGROUND
phylogenetic networks are graphs used for representing phylogenetic relationships between different taxa, and are usually employed when a tree representation does not suffice. there are many different types of phylogenetic networks and it is useful to distinguish between two main classes: implicit phylogenetic networks that provide tools to visualize and analyze incompatible phylogenetic signals, such as split networks  <cit> , and explicit phylogenetic networks that provide explicit scenarios of reticulate evolution, such as hybridization networks  <cit> , hgt networks  <cit>  and recombination networks  <cit> .

the software currently available for the calculation and analysis of explicit phylogenetic networks consists of a spread of basic implementations of algorithms developed to solve the computational task  <cit> . most of the software is command line driven and an appealing visualization of the results is often lacking. it is essential to have a tool that allows both broad usage of the methods available to biologists, and better and further development of new methods.

splitstree is an application developed in our research group, originally aiming at the phylogenetic analysis of sets of splits. the newest version of splitstree  <cit>  incorporates a variety of methods for the calculation, visualization and interpretation of phylogenetic trees and implicit phylogenetic networks. two main advantages of splitstree are the graphical user interface  and the integration of algorithms via an interface driven class loader . in this article we present an extension to splitstree that enables the program to handle explicit phylogenetic networks. the extension solves two important problems: an efficient integration of explicit phylogenetic networks, and visualizing these networks.

RESULTS
a tree t =  is a connected acyclic graph with vertex set v and edge set e. a vertex of degree one is called a leaf of t and the set of all leaves is called the leaf set of t. a rooted tree t =  is a tree  that has exactly one distinguished vertex called the root, denoted ϱ. a rooted tree t has a natural ordering where v ≤ v', if v lies on the path from the root to v'. if v ≤ v', we say that v is an ancestor of v' and v' is a descendant of v. for any set of vertices v, a vertex v is called minimal with respect to v if for all v' in v, it holds that v ≤ v'. for any edge e, we use α  and β to denote the source and target of e. a rooted phylogenetic x-tree is a pair , where t =  is a rooted tree and ν : x → v is a bijection from x to the leaf set of t. see  <cit>  for more details.

definition  <dig> let x be a set of taxa. a rooted reticulate network n = n  on x is a connected, directed acyclic graph with vertex set v, edge set e and vertex labeling ν : x → v, such that:

 <dig>  there exists precisely one distinguished vertex ϱ called the root;

 <dig>  every vertex v ∈ v is either a tree vertex, v ∈ vt, that has exactly one ancestor, or a reticulation vertex r ∈ vr that has exactly two ancestors;

 <dig>  every edge is either a tree edge leading to a vertex of indegree one or a reticulation edge leading to a vertex of indegree two; and

 <dig>  the set of leaves l  consists only of tree vertices and is labeled by the set of taxa x, i.e. ν maps x bijectively onto l.

it follows from these definitions that each reticulation vertex  r ∈ vr is contained in one or more cycles of the form c = , w <dig>  e <dig>  ..., ek- <dig>  wk, q, r), with wi ∈ v and ei ∈ e\{p, q} for all i.  and q). we say that two reticulations r, r' ∈ vr are dependent if a cycle that contains both r and r' exists.

in graph theory, a two-connected component of a graph g is any maximal subgraph g' with the property that any two vertices v and w of g' are connected by two paths p and p' that share no vertices except for v and w. for any reticulation vertex r, let pr and qr denote the two associated reticulation edges.

furthermore, let vpr and vqr denote the two ancestors of r with respect to pr and qr. the lowest single ancestor lsa of a reticulation r is the minimum of all nodes in v that is connected to r by two paths p and p' that share no vertices except for lsa and r.

algorithm
one important approach to drawing trees is the equal angle algorithm which was developed by meacham . the equal angle algorithm guarantees that no two edges intersect. our algorithm for visualizing recombination networks is based on a generalization of the equal angle algorithm. the algorithms adds an ordering step at each vertex, that chooses an optimal ordering of the descending edges, that minimizes the number of crossings between reticulations edges and other edges. it can easily be altered to be used with any drawing algorithm for trees. we will start out with a description of the equal angle algorithm and will then define some basic properties. finally, we will give solutions to minimize crossing edges in a drawing of a reticulate networks, and the optimal placement of reticulation vertices.

the equal angle algorithm is a recursive algorithm that starts at an internal vertex of a tree. for each subtree connected to the starting vertex, we appoint an angle proportional to the share of leaves it contains. in the next step, we assign to each subtree a sector of the circle of the size of the angle appointed to it and draw the edge to the subtree in the middle of the sector. we place the sector of the subtree in a way that it is centered at the end of the branch and the branch is pointing at the bisector of the angle. we then recurse to the starting vertex of the subtree and assign each newly discovered subtree its proportional share of the angle. each subtree is than placed in the sector of the starting vertex. the recursion is repeated until we have appointed angles to each branch of the tree. the only modifications for rooted trees are the explicit start point  and the use of a fraction of the cycle. for a detailed description of the algorithm, see  <cit> .

the rooted equal angle algorithm is not directly applicable to a reticulate network since for each reticulation, we have to decide which of the reticulation edges we want to use for the drawing algorithm and either choice may be suboptimal. the idea behind our approach is to use neither of them. the influence of a reticulation upon the graph structure is bounded by the reticulation and its lowest single ancestor, therefore we decided to define an auxiliary edge between those two vertices and to use the auxiliary edges for the layout of the graph. when the algorithm reaches a node each descending edge is checked for its status  and only tree- and auxiliary-edges are incorporated into the process.

through these modifications to the rooted equal angle algorithm, it is possible to visualize reticulate networks, but these visualizations are not very satisfying. to obtain an improved method, we will address two key problems. the first problem is the crossing of reticulation edges: even though it can not always be avoided, the number of such events should be minimized. the second problem is that the auxiliary edges are artifical edges and their optimal edge length must be determined. in the following, we will show solutions to these two problems.

minimizing crossing edges
an edge crossing another one is an undesirable event in drawing a graph. it is well known that solving this problem is, in general, computationally hard  <cit> . the equal angle algorithm ensures that we only have to deal with reticulation edges crossing other edges. furthermore, the construction of the auxiliary edges implies that edges that can be crossed by the reticulation edges are descendent edges of the lowest single ancestor of the reticulation. the optimization starts at the root of the networks and optimizes the arrangement of the directly descending vertices. it then continues the optimization iteratively at each directly descending vertex in the order given and keeps going until it has optimized all placements.

let vvt be the set of tree vertices directly below a vertex v and let vvi be the set of reticulation vertices connected to v by auxiliary edges. we say that a tree path p from a vertex v to a vertex v' exists if v' is a descendant of v and every edge in p is either a tree- or auxiliary-edge. furthermore, we say that a reticulation r is easily reachable from a vertex v if a tree path p exists. finally, let rv be the set of all reticulations that are easily reachable from the vertex v.

the set rv can be divided into those reticulations r for which v = lsa, which we will again denote by rvg; v is a descendant of lsa, denoted by rvd; and v is an ancestor of lsa, denoted by rva. if v is the root, rvd is empty. the set rvd can be divided further. since for a reticulation r in rvd, the nodes directly below lsa have been previously sorted, we can denote the set r¯vd as containing those r in rvd for which r is sorted less than the directly descending node of lsa leading via a tree path to v.

the aim of our optimization is to find a linear arrangement of the vertices in vvt∪vvi such that the number of reticulation edges, in the subtrees of the vertices in vvt∪vvi, intersecting with tree edges is minimized. we define the optimal linear arrangement graph olav  of a vertex v as one that contains a vertex representative for any vertex in vvt∪vvi. we add a weighted edge between any two vertices  in v and set the weight wik of the edge to |rvid∩rvkd|. more formally written:

problem  <dig> with

 xik={1if vertex i takes position k,0otherwise,∀i,k 

minimize

 ∑∈ewijxikxjl|k−l|+∑i∈v|rvid∩r¯nd|xik|k|+∑i∈v|rvid∩|xik||v|−k|subject to∑i∈xik=1and∑k∈{ <dig> ...,|v|}xik= <dig> ∀i,k 

the optimal linear arrangement problem is known to be hard  <cit> . nevertheless, this arrangement problem is in general much smaller than the complexity of minimizing all crossing edges at once. interestingly, a couple of additional restrictions exist that we may apply to the ordering, leading to a "greedy" solution that works well in most cases. one restriction that we can place upon the structure is that for any reticulation r, the position in the ordering should be between vpr and vqr. consequently, we should place vpr and vqr before we place r.

another restriction we can place is a consequence from the dependency of the reticulations upon each other. for any pair of reticulation r, r' in rvg we say that r is less than r' if and only if a tree path p exists. to meet the first restriction we have to place r before we can place r'. the graph that can be constructed from the relations between the reticulations must be cycle free, since the reticulation network is cycle free. consequently, we can use a standard topological sorting algorithm to obtain a linear ordering ordl  for the reticulations in rvg.

the optimization algorithm iterates through the ordering and at each reticulation r it first places vpr and vqr, if necessary, and then r. if all reticulation are placed, the algorithm places all descending tree edges that have not yet been placed. at each placement, the algorithm positions the vertex at the position that minimizes the score given in problem  <dig>  after all nodes have been placed in the linear arrangement, the result is returned to the main method. an example of the optimization procedure can be seen in figure  <dig> 

optimal placement for reticulation vertices
having calculated the angle and optimal arrangement for each edge, we have to place the vertices. tree vertices can be placed in the same way as in the standard equal angle algorithm. but since auxiliary edges do not come with a given length, we have to calculate an optimal placement for each of the reticulation vertices. such a placement has to incorporate the conditions of the equal angle algorithm, otherwise we might face unnecessary crossings between edges. note that there are two cases for which we have to consider different placement methods. in the first case, we have a reticulation r where the nodes vpr and vqr are both different from lsa, and in the second case, one of them is equal to lsa.

in both cases, we place the reticulation vertex r on the bisector of the sector assigned to its auxiliary edge. in the first case, the distance between r and lsa should be larger than the minimum distance between lsa and the line l, indicating that r is a descendant of vp and vq. in other words, we assume the angles vqvpr and vpvqr are positive. in the second case, we assume that vq is equal to lsa. we first calculate the point on the bisector rt that has the same distance to lsa as vp and than ensure that the angle between rtvpr is positive. we added an option to the algorithm so that the user can specify the  value of this angle; the standard value is 15°. an example of the drawing algorithm can be seen in figure  <dig> 

implementation
we started to integrate explicit phylogenetic networks into splitstree in our recomb  <dig> article  <cit> . originally, such methods were squeezed into the existing data structures within splitstree. splitstree itself is built around a group of core classes, each one representing a different type of information. the standard file format of splitstree is the nexus  <cit>  file format and each core class has its own nexus representation. consequently, developing a nexus representation of explicit phylogenetic networks is essential for the integration of these into splitstree.

to build a nexus representation for an explicit phylogenetic network, one needs to find an efficient way to present it as a string. we decided to use a version of the extended newick   <cit>  format. in general, the enewick format allows labels to be present up to two times within the network. a label is allowed to appear once as a leaf and once as an internal label. whenever a label occurs twice, the leaf is identified with the internal vertex, thus providing a network with vertices of indegree two. a lot of research has lately been focused on proving some interesting decomposition theorems  <cit>  for explicit phylogenetic networks. the general motivation of these theorems is that the calculation of a reticulate network, with a minimal number of reticulation events, from some given information is hard  <cit> . the idea is to decompose each network into its two-connected components and to calculate the minimal solutions of each two-connected component separately.

following the idea of decomposing explicit phylogenetic networks, each two-connected component may have several solutions and the possible combinations of these solutions grows exponentially, which is a problem if the number of two-connected components is large. consequently, we decided that the nexus representation of the network needs to reflect the two-connected components within it.

note that any reticulate network contains either a two-connected component or a tree like element, that contains the root. we call this particular element the root component. the two-connected components are called netted components, and for each netted component, a number of solutions may exist. any connected component that is not a two-connected component is a tree component. each tree component may appear more than once within the possible configurations. the possible combinations of these three basics elements is left to the user.

we now describe a nexus notation for explicit phylogenetic networks, the schematic of this notation is shown in figure  <dig>  in general, one needs to save the components containing the root in the rootcomponents section. any such string should either be formated in standard enewick, in newick format where any two leaves with the same label are labeled with the name of a tree component, or in newick format where at least one leaf is labeled with the name of a netted component.

the nettedcomponents section contains a list of all two-connected components. each one must be identified by a unique name and there must be at least one string representation given for each. any such string must either be formated in enewick, or in newick format where any two leaves with the same label are labeled with the name of a tree component.

finally, the treecomponents section contains a list of uniquely named strings in newick format, where leaves can be labeled with the name of netted components.

CONCLUSIONS
in this article we presented a new algorithm for the visualization of explicit phylogenetic networks. the algorithm is a generalization of the well known equal angle algorithm and can be used to adapt most known phylogenetic tree drawing algorithm to the task of drawing reticulate networks. moreover, we have described a datastructure and file format for representing reticulate networks in a way that reflects the structural properties of the networks.

our implementation of these results in the popular splitstree software will make them accessible to biologists and other researchers that are interested in using such networks.

availability and requirements
• project name: drawing phylogenetic networks

• project home page: http://www.splitstree.org

• operation system: platform independent

• programming language: java

the extensions to splitstree  <dig> are freely available for users of the application. splitstree  <dig> can be downloaded from the projects home page. using the application is free.

authors' contributions
tk designed the algorithm and the integration into splitstree. tk and dh implemented the algorithm and the integration. tk and dh wrote the manuscript for the article.

