BACKGROUND
the minimal requirement for transcriptional activation is recruitment of an rna polymerase complex to a promoter sequence of dna upstream of an open reading frame . most genes are also potentially under the control of dna-binding regulatory proteins or transcription factors that can activate or silence transcription. in bacteria, activator and repressor proteins bind to operator sequences that are typically found near the promoter, and promoter specificity is typically conferred through the sigma subunit of rna polymerase, which binds the promoter directly  <cit> . eukaryotic transcription factors interact with dna within the promoter, and are responsible for recruitment of the rna polymerase complex  <cit> . regulatory proteins also bind to conserved sites near the promoter region, as well as to enhancers that can be far  upstream or downstream of the promoter. in all domains of life, transcription factors that bind near the promoter are typically involved in either stabilizing or disrupting the initiation of transcription, while distal enhancer sequences are needed to destabilize the nucleosomes that usually prevent the initiation of transcription in eukaryotes  <cit> .

the identity and spacing of these protein binding sites are key contributors to the responsiveness of a gene to changing cellular conditions, and sets of genes or operons that are expressed under similar conditions often have similar sets of regulatory elements in their 5' upstream regions. recent programs such as clusterbuster  <cit>  and promoter <dig>   <cit>  recognize the need to detect combinations of binding sites in order to characterize promoters or whole regulatory regions. an additional challenge is the possibility of multiple cluster types within a class of genes that respond to the same regulatory stimulus. artificial neural networks  are suited to the task of discovering complex interactions within a set of features, and identifying multiple alternative solutions that yield the same type of response. this type of problem is not linearly separable  <cit> , and would apply to classification problems such as the regulatory cascade of genes that is induced by lipopolysaccharide in mammals, where the entire set of genes is upregulated in response to a stimulus, but time or subresponse specificity is conferred by one of a set of regulatory modules  <cit> .

another issue in the detection and modelling of regulatory regions is the assumption of additivity in dna-protein interactions when position-specific scoring matrices  are used to model binding sites. in fact, binding affinity has been shown in some cases to depend on interactions between sites  <cit> , which suggests that more-sophisticated modelling schemes may be necessary to build accurate models of binding site affinity. pssms are a useful and versatile tool and may be adequate for binding site modelling in many cases , but the additional flexibility of anns may be useful in representing non-additive relationships among components of a binding site.

the genetic algorithm  is a powerful tool for combinatorial problems of model optimization and feature selection when the 'model space' is complex and has many local optima. genetic algorithms carry out a number of simultaneous searches in model space, with one or more recombination operators to periodically combine the results of two or more searches, permitting large scale 'jumps' out of locally optimal regions. gas have been applied to several tasks in computational biology, including sequence alignment  and phylogenetic inference . modulesearcher  <cit>  is a recent application of genetic algorithms to the problem of cis-regulatory module detection, with the stochastic ga approach shown to yield similar outcomes to an exact search method in substantially less time. clusterscan  <cit>  is another recent approach that uses genetic algorithms to detect optimal combinations of binding sites from the transfac database  <cit> .

another important question in modelling regulatory regions involves the representation of binding sites. while position-specific scoring matrices  are a popular and effective way of representing conserved sites  <cit> , other strategies such as consensus sequences, sequence composition and structural features  <cit>  can be considered as well. structural features should be of particular interest, since dna deformability appears to play a role in at least some regulatory interactions such as the binding of escherichia coli integration host factor  to its target sequence  <cit> , the correct orientation of both halves of bacterial promoter sequences  <cit>  and the dynamics of histone/dna interactions  <cit> . dna structural properties have been derived from crystal and nuclear magnetic resonance experiments and from theoretical simulations, and different oligonucleotides have different propensities toward unwinding, wrapping around other molecules, and deformation in response to ligand binding . while there is still considerable controversy in the structural field about issues such as a-tract curvature  <cit> , and there have been questions about the role of experimental conditions in determining results  <cit> , carefully selected parameters can permit the testing of specific structural hypotheses pertaining to regulatory protein-dna interactions.

we have developed gann, a software suite that uses machine learning methods to identify combinations of the features listed above that best distinguish between a positive set  and a negative set. gann implements all of the binding site representations described above, allowing examination of models of different complexity as warranted by the type of binding site modelled and the amount of training data that is available.

implementation
gann contains a set of programs for sequence extraction, retrieval and grouping of requested patterns, neural network analysis of these patterns and collection of results. each program in the suite can accept either the output of the previous program, or an appropriate set of data generated from an external method. the components of gann and the flow of data through the system are shown in figure  <dig>  'indices' and the core machine learning component are implemented in c++, while the other programs that read, interpret and combine text files are written in perl.

sequence extraction
the first program  reads in either a genbank file of annotated genome sequence, or raw sequence and a list of open reading frames  of interest generated with the neurogadgets inc. bioinformatics web service  <cit> . getseq identifies and extracts upstream intergenic regions of a specified length and labels them as the positive set, and can also extract negative set sequences from intergenic regions that are not immediately upstream of orfs, or directly from the protein-coding regions.

generation of sequence and structure indices
the indices program takes as input a set of positive and negative set sequences , and can compute various properties of the sequences. the input sequences can be subdivided into overlapping windows of any size prior to the calculation of index values. the following indices can be calculated:

- oligonucleotide frequencies are computed by counting the number of instances of a given k-mer within a window, then dividing by the length of that window. the program can determine the frequency of all k-mers of a specific length, or can assess any user-specified set of k-mers, which may include iupac notation to represent degenerate nucleotides.

- user-specified pssms can be counted for each sequence window. the user provides a set of scores for each type of nucleotide at each position within a pssm, and a threshold score. the program will then count and record the number of sequence instances within each window that yield a pssm score greater than the specified threshold.

- structure and flexibility rules are implemented via a text file, by assigning floating-point values to each k-mer of a given length. the average score for a given sequence window is then computed by adding the scores for each overlapping k-mer within the sequence, and dividing by the total number of k-mers considered. any numeric encoding of a complete set of k-mers can be specified: features sampled from publications such as  <cit>  are available at the gann website .

after the extraction of indices, the combine program merges the different index files into a single large file that is used as the input for the machine-learning software. combine also allows the computation of z-scores, thus representing each index value in terms of the number of standard deviations from the mean, and can identify peak values for a given index across a set of windows. combine randomly subdivides the positive and negative index sets into training and test sets, and can also generate a negative control by randomly reassigning some positive and negative set members to the opposite category, yielding a disruption of patterns that were previously consistent within a single set. this type of control sets a 'baseline' for classification accuracy that can be compared to real experimental results.

pattern classification
the core of gann is the neural network classification system. the indices generated from 'indices' and 'combine' are presented as input to an artificial neural network, which is trained with either backpropagation or a genetic algorithm to maximize the discrimination between the positive and negative sets. since the number of indices associated with each sequence is potentially very large, the outer genetic algorithm  presents random subsets from the pool of indices to a series of neural networks. the unit of selection for the oga is a 'chromosome' that contains a predetermined number of indices sampled from the larger pool, and a set of parameters that define the architecture and connectivity of the ann. the constitution of a population of oga chromosomes is determined randomly in the first generation, with random sampling of indices from the pool and ann parameters sampled randomly from within a set of ranges specified by the user. each oga chromosome is used to construct an ann, which is then trained to yield optimal predictive accuracy on the training set defined by the combine program above. at the end of training, performance on the test set is evaluated, and the fitness of the oga chromosome is equal to its predictive accuracy on the test set samples. the predictive accuracy is defined as follows:



where tp and tn are the number of correctly classified positive and negative test set examples, and ||pos|| and ||neg|| the size of the positive and negative test sets, respectively. this formula assigns equal weight to the positive and negative sets regardless of their size, so the ann cannot achieve an artificially high score by predicting every case as a member of the larger  set.

the oga chromosomes with highest fitness are then permitted to 'recombine', yielding new subsets of indices that are trained in the same manner, while less successful indices are gradually lost from the population. the classification potential of indices can be evaluated by examining the scores of neural networks that include these indices in their input set, and through a 'population genetics' approach that traces the frequency of indices through several rounds of oga recombination and selection.

training of the neural networks is performed using either backpropagation of errors  <cit>  or with an 'inner' genetic algorithm . an iga chromosome consists of a set of floating-point values, each representing a connection weight within the ann that is being trained. the fitness of each iga chromosome within a population is equal to the predictive accuracy of the specified ann as defined in the equation above, but on the training set. iga chromosomes with relatively high fitness are then subjected to stochastic recombination and mutation of parameters to yield a new population of chromosomes that are used in the next round of training. while gradient-descent training methods for anns  can easily get trapped in local optima of the solution space, the recombination option of genetic algorithms permits a search to 'jump' through the solution space and escape local optima. the optimisation of network architecture and connection weights is similar to the 'structure evolution' method of  <cit> , which has been applied to problems of biological pattern detection  <cit> , but our method differs in the partitioning of the connection weight and architecture components of the optimisation.

there are many variables within gann whose values can be specified by the user. while most default settings will be adequate in most situations, parameters such as the number of feature combinations generated by the oga and the number of features in each combination should be chosen carefully. the 'definevars' program provides a set of menus that allow the user to set these parameters and write them to a configuration file that is input to gann.

in addition to reporting the scores of trained artificial neural networks, gann will save information about the topology, connection weights and constituent indices of each neural network instance that achieves a generalization score above a specified minimum threshold. if gann is invoked with any of these saved neural networks as input in addition to a table of indices, then it will use the input neural network to classify the new table. this process can yield functional predictions for sequences whose true classification is unknown.

RESULTS
two sets of detection experiments, both based on dna sequences extracted from the escherichia coli k <dig> genome, are presented to illustrate the performance of gann. both of these experiments included a set of  <dig> nucleotide sequences, each  <dig> nucleotides  in length, which were extracted from between convergently transcribed genes in the e. coli genome using the getseq program. these sequences were chosen because they are intergenic like upstream regulatory regions and not subject to the evolutionary constraints of protein-coding sequences, but are not expected to contain functional transcriptional regulatory features since they are exclusively 'downstream' of one gene in each direction. in the first experiment, we created an artificial positive set by inserting conserved sequences into a subset of the  <dig> sequences, with the remainder constituting the negative set. the entire set of  <dig> sequences was used as the negative set in the second experiment, while the positive set consisted of  <dig> upstream regulatory regions containing experimentally validated binding sites for the σ <dig> protein of e. coli.

several run parameters were consistent across both experiments. each oga chromosome contained a total of  <dig> indices, to allow the simultaneous representation of several sequence and structure properties. the population size  was determined by multiplying the total number of indices by  <dig>  then dividing by the number of indices  per oga chromosome. this formula ensured that indices would be represented  <dig> times each on average in the initial randomly generated population, and  <dig> % of all indices should occur at least  <dig> times in the population according to the poisson distribution. thirty rounds of oga chromosome evaluation and selection were performed in each run. while gann can evolve ann architecture and learning parameters as well as combinations of indices, we chose reasonable ann parameters  and fixed them for the entire run.

the performance of different sets of indices was expressed in terms of the predictive accuracy  described above. differences in predictive accuracy are expected across replicates, because random partitioning of sequences into training and test sets is likely to yield variation in the frequency of some features that do not define the whole set. however, average predictive accuracy can be estimated by taking the mean across replicates. indices that are retained in every replicate of an experimental run are more likely to reflect true characteristics of the sequences under consideration, though the redundancy of many indices  may yield multiple alternative solutions that are equally good. a final indicator of index performance is the composition of oga chromosomes that yield high predictive accuracy: if a set of features is important for characterization of a set of sequences, then each of those features should be represented by at least one index in the best oga chromosomes.

experiment  <dig> – synthetic positive set
in the first experiment, the positive set was constructed by adding conserved features to  <dig> of the  <dig> sequences  described above. each member of the positive set was modified by adding a nucleotide decamer with high conformational mobility . five thousand unique decamers were generated randomly, and each of these was assigned a cm score based on the dinucleotide table in  <cit> . decamers from this set that scored in the top 5% of all cm values were selected at random to be added to members of the positive set. one of two types of conserved binding site was also added to each member of the positive set. the set of experimentally validated binding sites for camp receptor protein  and leucine-responsive regulatory protein  were extracted from regulondb  <cit> , and each positive set sequence gained a binding site randomly selected from one list or the other.

the construction of synthetic conserved regions is summarized in figure  <dig>  'type a' positive set sequences consist of a high cm decamer beginning anywhere between positions  <dig> and  <dig>  and a randomly chosen crp binding site of length  <dig> that starts between positions  <dig> and  <dig>  the order of patterns is inverted in the 'type b' sequences, with the  <dig> nt lrp binding site beginning between positions  <dig> and  <dig>  and the high cm decamer starting anywhere between positions  <dig> and  <dig>  a total of  <dig> type a and  <dig> type b sequences were generated.

once the positive and negative set sequences were obtained and assembled, the indices program was used to extract several different types of information from them, with varying window sizes depending on the features being examined. the overlap between adjacent windows was chosen to be 50% of the window length, so if a window of size  <dig> covered sites 1– <dig> in a sequence, the next window would cover sites 6– <dig> 

- pssms for lrp and crp binding sites were constructed from the set of binding sites in regulondb. frequency matrices for each site were constructed by dividing the number of occurrences of each residue at each site by the total number of sites . these frequencies were then divided by the 'background' frequency of each corresponding nucleotide in the set of intergenic sequences. since the background frequency of each nucleotide was within the range  <dig>  ±  <dig> , background frequencies of  <dig>  were assigned to each nucleotide. the pssm was then obtained by taking the natural logarithm of each value in the corrected frequency matrix. threshold values for pssm predictions were determined by scoring  <dig>  <dig> random sequences of the appropriate length against the pssm, and identifying the scores that corresponded to the 99th, 95th, 90th, and 80th percentiles. the number of sequence matches above each pssm threshold was computed for windows of size  <dig> and  <dig> 

- the conformational mobility of sequence windows of size  <dig> and  <dig> was computed according to the dinucleotide values in  <cit> .

- counts of all k-mers of size  <dig>  and size  <dig>  were computed for windows of size  <dig> and  <dig> 

the computations described above yielded a total of  <dig> indices:  <dig> describing k-mer counts,  <dig> describing the counts of pssm 'hits' at different thresholds, and  <dig> describing the conformational mobility of different windows of sequence. these indices were then combined in four different ways to yield separate tests of different subsets. the k-mer frequencies were included in every set as a 'background' measure of predictive power with no explicit hypothesis. set  <dig>  included only the k-mer frequencies, while set  <dig>  added the indices of conformational mobility, set  <dig>  included the pssm scores, and set  <dig>  included all three types of index. we initially performed runs where index values were not standardized, but found that indices with values that were not close to zero, particularly the cm indices which ranged between  <dig> and  <dig>  did not perform well and were consistently eliminated from the population of oga chromosomes. in response to this, we standardized all indices for the experiments described below and in experiment  <dig> 

set  <dig> , with the full set of  <dig> indices, was used to define the number of oga chromosomes. the formula at the beginning of this section yielded a recommendation of  <dig>  oga chromosomes per generation, which was rounded up to  <dig> and applied to all four sets. 'combine' was used to randomly subdivide the positive and negative set sequences into training and test sets with a ratio of 2: <dig>  this random reassignment was repeated five times, and five corresponding negative control sets were generated as described in generation of sequence and structure indices above.

the mean of the best generalization scores achieved in each replicate over  <dig> rounds of oga evaluation and selection is shown in figure  <dig>  the  <dig> groups of negative control runs corresponding to the four data sets all yielded a mean best score between  <dig>  and  <dig> , and the range of scores in each case did not overlap with the range of the corresponding five experimental replicates. however, the average generalization score of experimental set  <dig>  was only 5– <dig> % higher than the corresponding negative control runs. set  <dig> , which included cm as well as k-mer counts, yielded a mean generalization score of  <dig> , a substantial improvement over set  <dig>  with no overlap in the range of maximum scores between the two sets. set  <dig> , which considered k-mer counts and pssm scores at several thresholds, yielded a mean best generalization score of  <dig> , which was substantially better than set  <dig>  and indistinguishable from set  <dig> . finally, set  <dig>  yielded a small improvement over sets  <dig>  and  <dig>  in generalization score, with a mean of  <dig> . these results suggest that the inclusion of pssms and flexibility indices yielded a substantial increase in predictive accuracy over the background of k-mer counts, with the combination of the two possibly producing a further slight increase.

if sets of indices that yield the best predictive accuracy are preferentially selected for recombination by the oga, then good indices should increase in frequency with successive rounds of testing and recombination. only five indices were present in the final population of all five replicated experimental runs of set  <dig> : one measuring the count of sites scoring in the 99th percentile of the crp matrix between positions  <dig> and  <dig>  another measuring the same quantity for lrp sites between positions  <dig> and  <dig>  an index describing the conformational mobility between sites  <dig> and  <dig>  and two indices representing the count of gc dinucleotides and c mononucleotides between positions  <dig> and  <dig>  the first three indices are easy to understand, as they correspond directly to features  that were deliberately inserted into the positive sequence set. however, the third index is less clear until the lrp sites from regulondb are examined in detail: these sites are g+c poor in general, and of the  <dig> ×  <dig> =  <dig> dinucleotides contained in the full set of lrp binding sites, only  <dig> of these are gc steps. if all  <dig> possible dinucleotides were present with equal frequencies, then the pair would be present  <dig> or  <dig> times, so gc is strongly underrepresented in this data set. thus, it appears that the gc content in this region is included in many oga chromosomes because it is another indicator of the presence or absence of the lrp binding site in this region.

experiment  <dig> – σ <dig> positive set
the second experiment tested the ability of gann to distinguish between the  <dig> unmodified intergenic sequences described earlier, and a set of sequences containing binding sites that are recognized by the 'housekeeping' σ <dig> subunit of rna polymerase in e. coli. the  <dig> promoter-containing sequences in the positive set were extracted from a larger set defined in  <cit> . where multiple promoter sequences were identified in a single upstream region, one of these sequences was chosen at random for inclusion in the positive set. all sequences in this experiment were  <dig> nt in length, and the positive set sequences were aligned at the transcription start sites of the relevant promoters. the - <dig> box  was typically contained between positions  <dig> and  <dig> in the sequence, while the pribnow box  was located approximately between positions  <dig> and  <dig> in the positive sequences.

indices were constructed in a similar manner as in experiment  <dig>  separate pssms for the - <dig> and - <dig> boxes recognized by σ <dig> were constructed from  <dig> promoter sequences in the data set, again with background frequencies of 25% for each nucleotide. as with crp and lrp above, the 99th, 95th, 90th and 80th percentile scores were generated for the - <dig> and - <dig> boxes from a set of random sequences, though only  <dig> random sequences were generated for each case. since the two halves of the σ <dig> consensus sequence are only six bases in length, indices based on pssm matches for a window size of  <dig> nt as well as  <dig> nt and  <dig> nt were calculated. indices of conformational mobility and k-mer frequency were calculated as in experiment  <dig> above. a total of  <dig> standardized indices were generated in this experiment:  <dig> describing k-mer counts,  <dig> describing the counts of matches to the - <dig> and - <dig> pssms at different thresholds, and  <dig> describing the conformational mobility of different windows of sequence. five sets of experiments were performed, with five experimental and five negative control runs in each. all sets  included the k-mer count indices, and these were the only indices considered in set  <dig> . sets  <dig>  and  <dig>  also included the - <dig> and - <dig> pssms respectively, while set  <dig>  included both. all  <dig> indices were considered by set  <dig> .

runs were performed as in experiment  <dig> above, with the exception of the oga chromosome population size. with  <dig> indices in total, the formula described at the beginning of this section yielded a recommendation of  <dig>  oga chromosomes per generation, which was rounded up to  <dig> and applied to all five sets.

the mean of the best generalization scores achieved in each replicate over  <dig> rounds of oga evaluation and selection is shown in figure  <dig>  remarkably, there was no substantial difference between any of the experimental sets, which yielded mean predictive accuracies between  <dig>  for set  <dig>  and  <dig>  for set  <dig> . this range was smaller than that of the predictive accuracies of the five negative control treatments, which ranged from  <dig>  for set  <dig>  to  <dig>  for set  <dig> . no clear trend exists for either the experimental or negative control sets, suggesting that the cm and pssm indices did not yield any improvement in predictive accuracy over the k-mer counts alone, and that the inclusion of the σ <dig> pssms did not yield a more-precise model of the promoter sequence.

while the predictive accuracy did not change across multiple sets of experiments, the type of indices that were selected by the oga varied from set to set. the most successful index overall described the frequency of the dinucleotide 'ta' between positions  <dig> and  <dig>  which corresponded to the position of the pribnow box in the positive set sequences. this index was the only one present in all five replicates of sets  <dig> ,  <dig>  and  <dig>  after  <dig> rounds of oga training, and was one of only three such indices for set  <dig> . the other two indices that were retained by all five replicates of set  <dig>  described the frequency of ta between positions  <dig> and  <dig>  and the frequency of ca between positions  <dig> and  <dig>  no single index was retained in all five replicate runs of set  <dig> . in all sets that included pssm representations, the appropriate pssm component were always retained in four out of five replicated runs. while pssms with a very high score threshold  were favoured in experiment  <dig>  the pssms most commonly retained in the σ <dig> experiments favoured lower percentile thresholds, with a roughly even distribution of indices representing the 95th, 90th and 80th percentiles. this effect may be due to greater degeneracy of σ <dig> sites relative to the crp and lrp sites modelled earlier. finally, four out of five replicate experimental runs of set  <dig>  retained a cm index that covered positions 30– <dig> in the sequence. while no single index was retained in all five replicate runs of set  <dig> , the oga chromosomes with the highest generalization scores all contained at least one instance of a pssm for each of the two halves of the σ <dig> consensus and a flexibility feature. thus, more-selective indices such as those based on pssms were included in the majority of oga chromosomes when they were present in the experimental set, even if the gain in predictive accuracy was marginal.

CONCLUSIONS
we have explored several features of gann, most notably the ability to build classification rules for positive set members that form natural subsets, and the capacity to search through large sets of dna sequence and structural indices to find combinations that yield optimal predictive accuracy. our generalization accuracy of ~84% on the σ <dig> promoter set is similar to the sensitivity of 86% and specificity of 85% reported by  <cit> , though these results may not be directly comparable due to differences in the size of the data set and the definition of 'negative' examples. while our use of pssms in these experiments implies acceptance of the statistical mechanical theory of binding sites  <cit> , gann could also be used to build models that take into account interactions between individual residues within a binding site. the model thus constructed could then be compared against a traditional pssm to see if better predictive accuracy is obtained on a test set of sequences. in focusing on the generation and testing of combinations of indices, we have not examined the performance of gann when ann architectural parameters are optimised alongside index combinations. one approach that avoids dealing with too many interactions at once can be to first use gann to screen a large set of indices and generate a smaller list of indices with predictive power, and to perform a subsequent run where this smaller set of indices are examined in combination with variable ann parameters.

in experiment  <dig>  we found that indices with mean values that are not close to zero should be standardized. a disadvantage of this approach is that standardization of a column of values is entirely sample dependent, since different finite samples from the same population of values will typically have different means and standard deviations, which may limit the accuracy of an ann trained on one sample that is used to classify other subsamples from the same population. if standardization is to be applied, then there should be sufficient values in each index to yield a stable estimate of the population mean, as indicated with a low standard error. this is of particular concern since biological sequence samples often do not represent a random sample of all possible sequences, leading to biased estimates of sample mean and standard deviation.

the two primary goals of gann are to allow multiple alternative representations of dna features, and to permit the discovery of important combinations of these features through the hybrid genetic algorithm / neural network approach. a long-term goal is to use gann to identify important combinations of motifs predicted from programs such as patser  <cit> , which would permit the application of gann to the task of identifying complex regulatory features in multicellular eukaryotes. the software packages are released under the gnu gpl and have been successfully tested and run on win <dig> systems and on several flavours of unix. complete documentation for gann and the key files used in the experiments described in this manuscript are available at the project web site.

availability and requirements
- project name: gann

- project home page: 

- operating systems: win <dig>  unix

- programming language: c++, perl

- other requirements: none

- license: gnu gpl

- any restrictions to use by non-academics: none

abbreviations
cm – conformational mobility

gann – genetic algorithm neural networks

oga – outer genetic algorithm

pssm – position-specific scoring matrix

authors' contributions
rgb was responsible for software design and implementation, and manuscript writing. rlc contributed to the design, and to the implementation of the genetic algorithm classes in c++.

figures and tables
