BACKGROUND
the bioconductor project  <cit> , based on the r language  <cit> , has become a reference for the numerical processing and statistical analysis of data coming from high-throughput biological assays. starting with microarray data, it became an integrated suite of data structures and functions to perform tasks ranging from reading raw data files to processing algorithms and to data analysis. the project soon expanded to data analysis in bioinformatics at large and to other assays, providing a rich selection of methods and algorithms to the research community.

at the same time, the python language  <cit>  has matured as a dependable platform for prototype development and data handling. python is used by many organizations in need of processing or analyzing large volumes of data . python is a very accessible language and is used in introductory courses to programming for non-computer scientists  <cit> . it is also used by professional programmers in need of increased productivity  <cit>  and agile prototyping.

in the context of bioinformatics, the biopython project  <cit>  was one of the first python libraries for bioinformatics, and while a few utilities offered by the bioconductor project were ported to it, both projects grew independently. a collection of other bioinformatics-related python libraries has also appeared during the last few years: pycogent  <cit> , pygr  <cit> , and bx-python  <cit> , to name a few.

we choose the r/bioconductor-python duo in the context of bioinformatics to demonstrate how bridging software libraries in different languages can be performed. there exists other bioinformatics libraries in other languages  <cit>  with which similar principles could be applied, given the relevant tools for bridging the different languages.

RESULTS
communities and translation
whenever a project spans across several communities, the issue of language arises. bioinformatics is an example of that: being at the interface between biology, computer science, information technology, and statistics, it requires translating terms when experts in the different fields communicate. here we are focusing on computer languages but the very same principles apply to disciplines. the analogy is even more appropriate when the practitioners of the different disciplines favor one computer language over another one.

having a bilingual community is a good way to make cross-language barriers fall, but it has the substantial drawback of being relatively difficult and expensive to achieve. when hiring technical specialists, finding experts in a field can be a difficult task, let alone experts in two fields. moreover, requiring a bilingual community to operate could cause insidious problems: the imperfect mastery of at least one of the two computer languages can help create issues and keep them unnoticed.

a smaller community of bilingual individuals, we shall call translators or interpreters, is able to bridge two larger communities and is easier to obtain than a bilingual community even when setting high standards of fluency for both languages. translators can be in charge of exposing written blocks in one language, which are here bioconductor data structures and functions written in r, into meaningful blocks in another language, here python. the result is an interface layer that can be used without knowing much of the original language in which the libraries were developed.

the software package presented here demonstrates that a translation layer can provide python developers access to the bioconductor project, and allow them to develop applications without knowing r.

exposing bioconductor/r structures as native python structures
the role of translators/interpreters can be restricted to wrapping bioconductor libraries as python classes. here we propose to expose bioconductor to a python user, and we rely on the python-to-r bridge rpy <dig> <cit> . this bridge embeds an r interpreter into a python process and allows seamless access to r objects and functions. this bridge removes the need to deal with the technical issues related to accessing r from python and lets us focus on presenting bioconductor libraries to python programmers.

in essence, bioconductor packages contain functions, data structure definitions , and data objects . the task of translators is to represent these in python. this can be done manually, or semi-automatically when relying on the meta-programming tools found in the rpy <dig> package . functions usually do not need much work as they are already automatically exposed by rpy <dig> 

the object system in python is fairly unified, despite the remaining existence of old and new objects in the python  <dig> x series, and is very much central to the language. most, if not all, python programmers will be familiar with it. in contrast, the bioconductor project makes extensive use of the s <dig> class system for r, a system that remains less known to many r users. the s <dig> system is related to the one of common lisp object system   <cit> , and offers multiple dispatch for methods. the s <dig> system is only present in a limited number of languages , and is not available in python. in this context, the difference in object-oriented programming paradigms have to be resolved by translators/interpreters.

rpy <dig> exposes classes and methods from bioconductor are exposed in such a way that differences in programming languages are alleviated. the resulting overall structure matches the canons of python programming, which python programmers refer to as being pythonic. the translation proposed creates python classes corresponding to the bioconductor classes, and creates python methods for the relevant s <dig> methods. the class and method names are kept across the translation, with minor exceptions for methods. suffixes are added to the method name when s <dig> multiple dispatch results in naming conflicts on the python side, and in that case, the type of the arguments in the signature are added to the method names. for example, the biostrings class pairwisealignedxstringset has three static methods fromxstring_xstring(), fromcharacter_character(), fromcharacter_missing() to represent the three corresponding constructors of pairwisealignedxstringset in bioconductor. this approach helps keeping a high ressemblance between python and bioconductor for the functionalities translated.

bioconductor packages can define numerous classes, so it is important that the task of exposing them to python programmers remains as simple and as short as possible. the bioconductor package biostrings alone contains close to  <dig> classes exposed to python, as illustrated figure  <dig>  while the code base for the translation remains of relatively modest size: biostrings is exposed in less than  <dig> lines of code, so less than  <dig> lines of python code per class exposed on average. in our implementation python classes are essentially wrappers for r methods of bioconductor classes, limiting the need for extensive testing.

in addition to the above, the task of the translators/interpreters can go beyond exposing the classes. translating idioms specific to one language into the other language will increase the quality of the translation . translators can also present data structures a different way, and build a new api from the existing bioconductor libraries. this is of interest in the context of different communities with different views on data structures and methods, as one can quickly rewrap the existing libraries. this can also be helpful for hiding sophisticated options and simplifying the interface, or wrapping sequences of function calls.

the implementation presented here covers several bioconductor infrastructure packages, and is sufficient to handle annotation data, genome sequences, microarray data, and next-generation sequencing.

annotationdbi: infrastructure for handling biological annotations.

biobase: infrastructure for handling data from high-throughput assays.

biostrings: infrastructure for handling biological strings 

bsgenome: infrastructure for handling genome sequences

edger: differential digital expression data

geoquery: query data resources from the gene expression omnibus  repository.

ggbase: infrastructure for genetics of gene expression

ggtools: software and data for genetics of gene expression

goseq: gene ontology analysis for rnaseq

gseabase: infrastructure for gene set enrichment analysis  types of methods

iranges: infrastructure for handling interval data

shortread: infrastructure for handling datasets of short reads

case-study: providing a web-based interface to edger
the egder method  <cit>  is a popular statistical method for measuring differential abundance in rna molecule when the measurement technology is based on counts. it is useful for sage and rnaseq data. having the method easily accessible to a community outside the regular bioconductor user-base expands its reach to the scientific community. in this scenario a simple web application is considered, and the application is written in python. one strong advantage of python over r is the presence of many industry-grade solutions for developing web applications, and we choose to demonstrate how to build such a application with edger.

reproducing r code
the bioconductor/r edger library is exposed to python in the module bioc. edger, and following the documentation written for r users is straightforward . as outlined earlier, classes and methods present in the bioconductor package are represented by matching python classes and methods, as the translator/interpreter focused on keeping a high resemblance between r and python code.

building a prototype web server
the code used to perform an edger analysis can be wrapped by the python developer into a python function, and building a web application that calls this function is trivial .

a fully functioning self-sufficient prototype, including a web-server, a web-form to upload data, data processing, computation of results from the data uploaded, and an answer returned to a client web browser, can be implemented in less than  <dig> lines of code.

having the web server implemented in python is deemed better because python has a strong track record of agile web frameworks, the language possesses better error handling mechanisms, and it allows a decoupling of the implementation of data analysis  from the implementation of the application. this separation is important since it allows a programmer specialized in the development of web applications to utilize code developed in r/bioconductor by data analysts. the translation layer ensures that the code in bioconductor is exposed in such a way that it can be integrated into the application while retaining all the benefits of the host language.

this example emphasizes the ease with which applications can be built, and relies on a minimal web development framework. there exist more comprehensive and more complex frameworks, such as django  <cit>  and plone  <cit> . similar implementations have been performed with them. in these cases the development of applications requires highly specialized skills in the corresponding frameworks. in a context where there is specialization of people because of increasingly complex domain-specific knowledge, the availability of a translation layer such as the one proposed is crucial: data analysts can therefore focus on developing algorithms while application developers can focus on the application.

CONCLUSIONS
a relatively small community of people fluent in two languages and disciplines can expose data structure definitions and functions from libraries in one language as code directly usable by practitioners of the other language. we demonstrate here how this can be achieved by creating a bridge from the bioconductor project, a popular set of r libraries for the analysis of bioinformatics data, to the python language. work that requires extensive knowledge of both languages can be restricted to a small community of translators/interpreters, and their code be used by python programmers without the knowledge of r or bioconductor. the implementation presented here shows that the amount of translation work can be minimal, yet enable the development of python applications using bioconductor easily. our implementation covers key infrastructure packages in the bioconductor project and can constitute a basis for extending this to more packages in bioconductor.

as an example we demonstrated how a complete web application computing differential expression for digital gene expression can be implemented.

list of abbreviations
cern: conseil européen pour la recherche nucléaire; clos: common lisp object system; dna: desoxyribonucleic acid; geo: gene expression omnibus; gsea: gene set enrichment analysis; ilm: industrial light and magic; nasa: national aeronautics and space administration; rna: ribonucleic acid; rnaseq: whole transcriptome shotgun sequencing; sage: serial analysis of gene expression

competing interests
the author declares he has no competing interests

