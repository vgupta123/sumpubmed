BACKGROUND
the large number of snps available provides opportunities for detecting dna variations associated with complex traits through gwas using snp markers. this is because an increased number of snps increases the chance that some snps may be dna variations affecting phenotypes  or results in increased linkage disequilibrium  with dna variations that have direct effects on the phenotypes . with high throughput snp genotyping technology, snp genotyping of a large number of individuals is becoming increasingly practical. such large scale snp genotyping increases the effectiveness of snp association studies and provides an unprecedented opportunity to study complex genetic effects such as epistasis. the significance of epistasis  in complex or quantitative traits has been well recognized  <cit> . large epistasis networks showing complex interactions among genes have been reported  <cit> . fisher's partition  <cit>  of the nine genotypic values of two bi-allelic loci into single gene effects  and an epistasis effect assuming hardy-weinberg equilibrium  and linkage equilibrium  laid the foundation of a quantitative genetics approach to study epistasis. also assuming hwe and le, cockerham  <cit>  and kempthorne  <cit>  partitioned fisher's epistasis effect into four components using two different methods: additive × additive , additive × dominance , dominance × additive , and dominance × dominance  epistasis effects with the genetic interpretation of allele × allele, allele × genotype, genotype × allele, and genotype × genotype interactions respectively. this partitioning can be used as a tool for identifying the exact mode of a gene interaction effect. kempthorne's partitioning of genotypic values has been extended to allow hardy-weinberg disequilibrium  and linkage disequilibrium  so that kempthorne's method could be used to test single-locus and epistasis effects in populations where hwd and ld may exist  <cit> . with genome-wide detection of epistasis effects, epistasis networks affecting a quantitative trait could be established. computational difficulty is the main bottleneck for epistasis testing in large scale gwas due to the large number of snp combinations. the number of snp combinations  is m = n/ <dig> for testing two snps at a time, and is m = n/ <dig> for testing three snps at a time, where n = number of snps. the computational difficulty of epistasis testing in large scale gwas can be an open scale computing challenge that could exhaust the capabilities of any supercomputer in existence today. for example, pairwise epistasis testing of  <dig> , <dig> snps would require  <dig> years using our episnp program and a single processor of the  <dig>  ghz sgi altix xe  <dig> linux cluster system at the minnesota supercomputer institute, and this computing time could increase to  <dig>  million years by adding just one snp to the pairwise analysis . with parallel computing, pairwise epistasis testing for any large scale gwas currently in existence is possible. large scale three-snp epistasis testing may not be computationally feasible at this time. the parallel and serial computing software developed in this research is intended to provide computational tools for pairwise epistasis testing in gwas on various parallel and serial computing platforms with the capability of pairwise epistasis testing for any large gwas currently in existence.

methods
the statistical methods implemented by the parallel and serial computing tools for detecting single-locus and epistasis effects include a general linear model for testing the marker effects of each snp and each snp pair, and include the extended kempthorne model for testing additive and dominance effects of each snp and for testing a × a, a × d, d × a, and d × d epistasis effects of each snp pair. a two-step least squares analysis  <cit>  is used to implement the statistical tests. the first step corrects the phenotypic values for systematic effects such as gender and age. this step estimates fixed non-genetic effects and then removes the estimated fixed non-genetic effects from the original phenotypic observations to obtain the corrected phenotypic values . the second step conducts epistasis and single-locus tests using the corrected phenotypic values as the phenotypic observations. this two-step analysis estimates and removes systematic effects only once and hence has considerable computational advantage when the number of snps is large. the single-locus analysis tests three genetic effects: the snp genotypic effect, additive effect, and dominance effect. the statistical model for testing single-locus effects is y = μ + snp + e, where y = corrected phenotypic value, μ = common mean, snp = the single-locus snp genotypic effect, and e = random residual. the single-locus snp genotypic effect was partitioned into additive and dominance effects. the single-locus genotypic effect answers the question whether the snp had an effect on the phenotype whereas additive or dominance effect identifies the mode of the snp effect. the statistical model for testing epistasis effects is y = μ + snp <dig> + snp <dig> + snp1*snp <dig> + e, where snp <dig> and snp <dig> are the two single-locus genotypic effects, and snp1*snp <dig> is the two-locus interaction effect . the two-locus interaction effect was partitioned into four individual epistasis effects using the extended kempthorne model that allows hwd and ld: a × a, a × d, d × a, and d × d epistasis effects. the two-locus interaction effect answers the question whether the two snps had an interaction effect whereas an individual epistasis effect  identifies the mode of the interaction. the significance tests of the single-locus snp effect and the two-locus interaction effect used an f-test. a t-test was used to test the significance of additive, dominance and epistasis effect using the following formula

 t^x=lxvar⁡^=sig^si−1s′is <dig> 

where lx = contrast to estimate the genetic effect, s <dig> = '   = estimated residual variance, ĝ = the least squares estimates of the snp genotypic effects, and si = a function of marginal and conditional allelic and genotypic frequencies for estimating genetic effect i, which is either additive, dominance or an epistasis effect, and where n = number of observations and k = rank of x  <cit> . for testing epistasis effects involving the x chromosome in mammals , only females  can be included in the analysis. for epistasis analysis involving snps in pseudoautosomal regions, the analysis is the same as for autosomal snps. these epistasis testing methods were implemented in a parallel computing program intended for larges scale gwas and in a serial computing program intended for small scale gwas that could be analyzed on commonly available computer hardware.

minimizing the processor memory required is critical to developing an efficient and successful parallel computing program because each individual processor has a limited amount of memory available. for example, each core of the quad-core processor on the sgi altix xe  <dig> linux cluster system with  <dig>  ghz intel clovertown processors  at the minnesota supercomputer institute has a limit of  <dig> gb of memory. therefore, the parallel code should use as little processor memory as possible to achieve scalability for large scale analysis that will otherwise require large processor memory. a two dimensional snp data distribution scheme  among processor cores was designed to minimize the memory requirement of each processor. to assign snps to each processor core, the n snps are evenly divided into m subsets with n snps in each subset such that the total number of processor cores  to be used is p = m/ <dig>  for simplicity, n = n/m is assumed to be an integer. in the case n/m is not an integer, the leftover snps are assigned to an extra core. in table  <dig>  each diagonal processor core receives one subset of n snps and computes  tests, and each off-diagonal processor core receives two subsets of snps  and computes 5n <dig> pairwise tests. therefore, only / = 2/m of the n snps are stored in each off-diagonal processor core, and only 1/m of the n snps are stored in each diagonal processor core defined in table  <dig>  as the number of processor cores  increases, the number of snp subsets  increases and the memory required for each processor core decreases. therefore, the increased memory requirement per processor core for large scale snp analysis can be reduced by increasing the number of processor cores used. the parallel computing code was optimized to minimize inter-processor communications and was crafted for portability to various parallel and serial computing platforms. testing results showed that the parallel computing code achieved excellent speedup and scalability and achieved excellent portability, as to be discussed below.

subset 1:
each diagonal core receives one subset of n snps and computes  tests, and each off-diagonal core receives two subsets of total 2n snps and computes 5n <dig> tests.

RESULTS
a parallel computing program named episnpmpi and a serial computing program named episnp were developed for genome-wide pairwise epistasis testing. three serial computing utility programs were developed to estimate computing time, to produce graphical chromosome view of significant single-locus results, and to produce graphical display of epistasis network.

the episnpmpi and episnp programs
the episnpmpi and episnp programs provide two sets of snp tests: single-locus analysis and pairwise analysis. the single-locus analysis tests three effects of each snp: snp genotypic effect , additive  and dominance  effects. the pairwise analysis tests five effects of each pair of snps: the i-effect, a × a, a × d, d × a, and d × d. three input files in text format are required, the phenotype file, the snp genotype file, and the parameter file. the phenotype file contains observations of the quantitative trait, family id, individual id, individual gender, and non-genetic fixed effects such as smoking status and age of each individual. the snp genotype file contains family id, individual id, individual gender, and snp genotypes, and should be one file for each chromosome. the parameter file with file name parameter.dat provides various user-specified controls for the episnpmpi and episnp programs to have the flexibility to be generally applicable. these controls include the number of quantitative traits to be analyzed, user specified number of chromosomes, code for the sex chromosome, formats for snp genotypes and missing values, and user specified number of fixed non-genetic factors to be included in the statistical model, where a fixed non-genetic factor can be an indicator variable or continuous variable . both episnpmpi and episnp programs are applicable to populations with hwd and ld.

the speedup and scalability  <cit>  of the episnpmpi parallel program were evaluated for two supercomputer systems: a  <dig>  ghz amd opteron ibm bladecenter linux cluster  and the calhoun system. in parallel computing, speedup refers to how much a parallel algorithm is faster than a corresponding sequential algorithm and is defined as sk = t1/tk, where k = number of processors, t <dig> = the execution time of the sequential algorithm with one processor-core, and tk = the execution time of the parallel algorithm with k processor-cores. linear or ideal speedup is achieved when sk = k. scalability refers to the stability of average performance of a parallel program as the number of processors increases. ideal scalability is achieved when the efficiency of k processors  is ek = sk/k =  <dig>  figure  <dig> shows the observed and predicted computing time using 15– <dig> processor cores, where each processor consists of four cores. the predicted computing time was calculated using the following formula assuming an ideal speedup or scalability

  tk = t1/k 

where k = number of processor cores, tk = computing time using k processor cores, and t <dig> = computing time using one processor core. in figure  <dig>  the computing times were normalized to the computing time on  <dig> processor-cores because the minimal number of cores used was  <dig>  results in figure  <dig> showed that the observed computing time and the predicted computing time assuming ideal speedup and scalability matched very well, indicating that the episnpmpi coding achieved excellent speedup and scalability. based on the observed run times of  <dig>  and  <dig>  hours for  <dig>  and  <dig>  snps respectively using  <dig> cores of the calhoun system, the estimated computing time for pairwise epistasis tests is approximately an increasing quadratic function of the number of snps. let n = the number of snps and n <dig> = a smaller number of snps with a known computing time  for running episnpmpi such that n = n <dig> . then, the computing time required for analyzing n snps  is approximately

  tn =  

the run time of  <dig>  hours for  <dig>  snps using  <dig> cores showed that pairwise epistasis testing for gwas with about  <dig>  snps could be completed in one day using about 25% of the  <dig> cores of the calhoun system. based on this computing time and equations , the predicted time for pairwise epistasis testing among  <dig> , <dig> snps using all  <dig> cores of the calhoun system would require about  <dig> hours to complete. this prediction indicates that episnpmpi is capable of completing pairwise epistasis analysis in one day for any large scale gwas currently in existence, noting that the numbers of snps used in current large scale gwas are in the range of  <dig>  ~  <dig> , as represented by nih's gain projects  <cit> . sample size, or the number of individuals, affects the computing time as well, but the increase in computing time due to increased sample size is minor. the episnpmpi code is highly portable to various computing platforms and has been ported to all supercomputer systems at the minnesota supercomputer institute and to several popular serial computing platforms.

the episnp program is designed for epistasis analysis in small-scale gwas on commonly available computer hardware. for example, an analysis of  <dig> snp markers took about  <dig> hours to complete on a pc with a single  <dig>  ghz pentium  <dig> processor.

the episnpmpi and episnp programs each produces two output files of the most significant results of single-locus tests and two output files of the most significant results of pairwise epistasis tests. the output file for significant epistasis results currently displays the names and chromosome locations of the two snps in each snp pair with significant i-effect , a × a, a × d, d × a, or d × d effect, significance level , and ordered estimates of individual effects that are useful for identifying the best and worst gene combinations affecting a phenotype  <cit> . the second output file of single-locus tests is used as the input file of the episnpplot program and the second output file of pairwise epistasis tests is used as the input file of the epinet program.

three serial computing utility programs
the episnpplot program plots the chromosome view figures, where each figure shows the significance of each of the three single snp effects and the sample size for all snps on each chromosome . the program produces chromosome view figures for all chromosomes by one command using an output file from episnpmpi or episnp as the input file. these chromosome views help identify chromosome regions with various degrees of significant effects and markers that did not have sufficient information to yield significant effects. by default, the episnpplot program draws chromosome view figures in the original marker order as in the input file. the user has the option to sort the input data by the marker significance, additive significance, dominance significance, or the number of observations. in figure  <dig>  the figure on the left is an example of a chromosome view based on the original marker order, and the figure on the right is an example of a chromosome view in ascending order of significant dominance effects. the epinet program draws figures of epistasis networks of snps with significant epistasis effects at four user specified p-values. the program requires two input files: the parameter file to specify four significance levels  for selecting loci in the epistasis networks, and the effect file that contains epistasis testing results from episnpmpi or episnp. the default input is to use 'effects.dat' as the input file and to print the  <dig> largest networks . alternatively, the user can specify the file name on the command line. if the input file is specified, the number of networks to print can also be specified. the epinet program uses four user specified node colors to represent the four significance levels defined by the corresponding p-values, and five program defined line colors to denote the five types of epistasis effects . the cpuhd estimates cpu time required to complete the data analysis using the episnp program and the total storage space required to store the output files. this is helpful for planning an epistasis analysis. for example, a potentially excessively long running time can be avoided by running cpuhd first. detailed instructions for using episnpmpi, episnp and the three utility programs described below are available in two user manuals  <cit> .

commodity cluster-based processing of episnpmpi
episnpmpi has been developed and tested on many modern high-performance computers and supercomputer systems. price-to-performance ratio of the computing system can be an important consideration in practice. to utilize commonly available computer hardware for high performance computing, episnpmpi has been implemented to run on commodity cluster or on an inexpensive network of workstations using mpich message passing libraries. mpich is a portable implementation of mpi, a standard for message-passing for distributed-memory applications, and is freely available at .

discussions
computational difficulty is the main bottleneck of epistasis testing in large scale gwas. the computing tools we have developed help address the computational difficulty in epistasis analysis in large scale gwas. the computing speed can be further improved if a more powerful computer system is used. however, serious computational challenges still exist in at least three areas: 1) increased number of snps used in gwas, 2) integration of gwas and a gene expression study, and 3) joint epistasis testing for three or more snps at a time. the human genome has about  <dig> million snps. although an exhaustive analysis of all human snps is not yet a reality, the number of snps used in gwas is clearly rapidly increasing. since the computing time for epistasis testing increases approximately as a quadratic function of the number of snps, computing difficulty will rapidly increase as the number of snps increases. integration of large scale gwas and a gene expression study using the same individuals poses another serious computational challenge. in this case, the computing time required is multiplied by the number of genes, where gene expression intensity of each gene is treated as one phenotype  <cit> . the joint epistasis testing for three or more snps could be the ultimate computing challenge. as shown in table  <dig>  adding just one snp to the pairwise epistasis test for  <dig> , <dig> snps could require 1/ <dig> million times as much computing time. a tempting solution would be to test epistasis effects for a subset of snps with significant single-locus effects. however, this is not a good idea because requiring significant main effects for epistasis testing could miss many or even all significant epistasis effects with stringent p-values to declare significance. for example, the significant epistasis effects with p < 10- <dig> for  <dig> snps covering all  <dig> human chromosomes reported in ma et al.  <cit>  did not involve any snps with significant single-locus at p < 10- <dig>  therefore, requiring significant single-locus effects at p < 10- <dig> would have missed all the ten significant epistasis effects at p < 10- <dig> among the  <dig> snps. the episnpmpi and episnp programs provide capabilities for testing all possible pairwise epistasis effects. however, the use of these programs should be considered as only one step in gwas analysis. considerable work still may be required for digesting the test results.

CONCLUSIONS
the episnpmpi parallel computing program provides a computing tool capable of completing pairwise epistasis tests in large scale gwas in a timely manner using a supercomputer system. the serial computing programs can be useful and convenient tools for epistasis analysis in small scale gwas using commonly available computer hardware. episnpmpi is a portable program which not only exploits the capability of supercomputers but also runs on inexpensive loosely coupled cluster systems.

availability and requirements
project name: parallel and serial computing for genome-wide snp analysis

project homepage: 

operation systems:

 <dig>  episnpmpi :

episnpmpi is the parallel computing program for testing single-locus and pairwise epistasis effects and is available for running on the majority of parallel computer systems. the following are the currently supported processors type, mpi libraries, compilers and corresponding binaries :

 <dig>  episnp :

the episnp package consists of four serial computing programs, episnp, cpuhd, episnpplot, and epinet. episnp is the serial computing program for testing single-locus and pairwise epistasis effects. the following are the currently supported operation systems, processors types, and compilers used to generate binaries :

in the above binaries, episnp_ <dig> _windows.zip contains all the four programs , while each of the other .gz file contains episnp and cpuhd only.

other requirements: none.

license: none.

any restrictions to use by non-academics: none.

abbreviations
gwas: genome-wide association study; snp: single nucleotide polymorphism; le: linkage equilibrium; ld: linkage disequilibrium; hwe: hardy-weinberg equilibrium; hwd: hardy-weinberg disequilibrium; i-effect: two-locus interaction effect; a × a: additive × additive epistasis effect; a × d: additive × dominance epistasis effect; d × a: dominance × additive epistasis effect; d × d: dominance × dominance epistasis effect; blade:  <dig>  ghz ibm bladecenter linux cluster at the minnesota supercomputer institute; calhoun: the sgi altix xe  <dig> linux cluster system with  <dig>  ghz intel clovertown processor at the minnesota supercomputer institute.

authors' contributions
lm is the main author of episnpmpi and is the author of episnp and cpuhd programs. hbr directed the development of the parallel computing coding and directed the work of porting the parallel computing code to various parallel and serial computing platforms including commodity cluster processing, and did a portion of the coding of the episnpmpi program. dd is the author of the episnpplot program. jrg is the author of the epinet program. yd coordinated this research, designed most functions of the computing tools, and is the lead writer of the manuscript. all authors read and approved this manuscript.

