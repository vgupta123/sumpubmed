BACKGROUND
in computational systems biology, genome-scale metabolic network reconstructions are used to build in silico models of cellular metabolism  <cit> . to analyze these models, a large variety of constraint-based methods has been developed over the years  <cit> .

typically, the metabolic network is assumed to be in steady-state, i.e., the production and consumption of the internal metabolites has to be balanced. this leads to a flux space of the form c={v∈ℝrxn∣sv= <dig> l≤v≤u}. here s∈ℝmet×rxn denotes the stoichiometric matrix, given a set of  metabolites met and a set of reactions rxn. the vectors v∈c are called  flux vectors and can be interpreted as steady-state flux distributions of the metabolic network. the vectors l,u∈ℝ±∞rxn define lower and upper bounds on the fluxes, where ℝ±∞:=ℝ∪{±∞}. by irrev⊆rxn we denote the set of irreversible reactions, which can carry flux in only one direction, i.e., v
i≥ <dig>  for all i∈irrev. for simplicity, we assume l
i≥ <dig>  for all i∈irrev. reactions in rev=rxn∖irrev are called reversible.

some constraint-based analysis methods can be applied to genome-scale network reconstructions with several thousands of reactions. others are limited to small or medium-sized models, like the computation of elementary flux modes  <cit>  or minimal cut sets  <cit> . in such situations, a natural question is whether it is possible to reduce the given large network to a meaningful smaller one of practical size.

in  <dig>  erdrich et al.  <cit>  introduced a method called networkreducer, which reduces large metabolic networks to smaller subnetworks, while preserving relevant biological properties of interest. the algorithm in  <cit>  is divided into two parts: network pruning and network compressing. in the compressing step, reactions belonging to the same enzyme subset  <cit>  are lumped together. in the pruning step removable and non-removable reactions are identified such that the reduced network consisting of the non-removable reactions fulfills four requirements, which can be specified by the user: 
set of protected metabolites
p
met: all metabolites in p
met must be retained in the reduced network.

set of protected reactions
p
rxns: all reactions in p
rxns must be retained in the reduced network.

set f of protected functionalities  for the reduced network. we assume that any protected functionality f∈f can be described by a corresponding system of linear inequalities: d
f
v≤d
f.

minimum degrees of freedom: dof≥dof
min. here, the degrees of freedom dof correspond to the dimension of the null space of the stoichiometric matrix s, i.e., dof=|rxn|−rank.




the overall goal of networkreducer is to find a smaller subnetwork such that all requirements  –  can be satisfied by a suitable flux vector. an example is given in fig.  <dig> 
fig.  <dig> solid arcs correspond to active reactions, dotted arcs to inactive reactions. in a, the flux vector satisfies the functionality of carrying flux through the biomass reaction while having oxygen uptake. in b, the functionality is carrying flux through the biomass reaction while there is no oxygen uptake. combining the two flux vectors leads to the network in c, which contains  <dig> active reactions. a minimum subnetwork enabling both functionalities with only  <dig> reactions is given in . the corresponding binary variables for 1d would have the following values: a
1= <dig> a
2= <dig> a
3= <dig> a
4= <dig> a
5= <dig> a
6= <dig> a
7= <dig> a
8= <dig>  where a
i corresponds to reaction r
i





the method of erdrich et al.  <cit>  searches for a suitable subnetwork by iterating over the reactions. in every iteration, the flux rate through one particular reaction is set to zero and a linear program  is solved to check if the remaining reactions still form a feasible subnetwork. feasibility means that there exists non-zero flux vectors satisfying the steady-state condition and the other requirements. to identify the reaction to be eliminated a flux variability analysis   <cit>  is done and a reaction with smallest overall flux range is selected. thus in every iteration, an lp is solved and an fva is performed. each fva involves solving up to 2n lps, where n is the number of reactions.

an important aspect of the method in  <cit>  is that it does not necessarily compute a minimum subnetwork , see fig.  <dig> for an example. the method that we develop here will always find a feasible subnetwork with a minimum number of active reactions. a subnetwork satisfying the requirements  –  can be obtained by solving only one mixed-integer linear program . if this subnetwork does not fulfill the dof-requirement , we exclude this subnetwork and compute a new subnetwork by solving the milp again. this method turns out to be much faster than the algorithm introduced in  <cit> . more importantly, we are guaranteed to obtain a minimum subnetwork regarding the number of active reactions, which is not the case for networkreducer. however, due to the minimality condition, our method cannot preserve flux variability in the same way as networkreducer does.
fig.  <dig> if in the first step of the pruning procedure the flux through reaction  <dig> is set to zero, reaction  <dig> is removable and reactions  <dig> and  <dig> are non-removable. if in the first step reaction  <dig> or  <dig> is set to zero, both of them would be removable and reaction  <dig> would be non-removable. the resulting subnetwork is then smaller than the first one




a second related work is the fastcore algorithm of n. vlassis et al.  <cit> . this method is also based on solving several lps but without performing an fva in between. thus it is a very fast approach. however, the resulting subnetworks are not minimum and only protected reactions can be specified, but no protected metabolites, functionalities, or degrees of freedom.

an early approach for network reduction was introduced by burgard et al.  <cit>  already in  <dig> and later improved in  <dig> by jonnalagadda and srinivasan  <cit> . this method also allows computing minimum subnetworks using an milp approach. however, only one functionality can be formulated and not several ones like in networkreducer. other related work can be found in .

altogether, our method can be seen as a network reduction algorithm that merges features from networkreducer and the method in  <cit> , such that we can specify biological requirements like in  <cit>  and compute all minimum subnetworks using an milp, similar to  <cit> .

the organization of this paper is as follows. in the methods section we develop the underlying milp methods. we start with the basic algorithm and then describe several improvements. in the results and discussion section we compare our milp approach with the existing methods networkreducer and fastcore. furthermore, we apply it to a collection of genome-scale network reconstructions and discuss the results. the last section is conclusion.

a software tool implementing the algorithms described in this paper is available at https://sourceforge.net/projects/minimalnetwork/.

methods
basic milp to compute a minimum subnetwork
we always assume that our network is in steady-state, i.e., sv= <dig>  with bounds on the reaction rates l≤v≤u. each functionality f∈f is described by a system of linear inequalities: d
f
v≤d
f. for example, we may require that the biomass reaction has to carry at least 99% of its maximal rate: v
bio≥ <dig> · max.

we will use binary variables a
i∈{ <dig> } to indicate whether or not reaction i carries flux in the subnetwork. thus we need the relationship a
i= <dig> if and only if v
i= <dig>  for an irreversible reaction i∈irrev, this can be achieved using constraints of the form 
  <dig> δai≤vi≤mai. 


for reversible reactions, we use another binary variable āi and the constraints 
  <dig> δai−māi≤vi≤mai−δāi,ai+āi≤ <dig>  


this type of constraints is called a big m constraint, where m≫ <dig> is a sufficiently large constant, e.g. some upper bound on the flux rates. with δ> <dig> we denote a threshold indicating above which flux rate a reaction is considered to be active. practically δ will be chosen between 1e− <dig> and 1e− <dig> 

to force protected irreversible reactions to carry flux, we use the constraints a
i= <dig> for all i∈p
irr=p
rxns∩irrev. enforcing flux through a protected reversible reaction can be realized in a similar way with the constraints ai+āi= <dig>  for all i∈p
rev=p
rxns∩rev.

for any protected metabolite m∈p
met, let rxnm be the set of reactions involving m. by revm we denote the set of reversible reactions in rxnm. if rxnm contains at least one protected reaction r, metabolite m will be protected by reaction r. however, if rxnm∩p
rxn=∅, further constraints are needed to protect m: 
  <dig> ∑i∈rxnmai+∑i∈revmāi≥ <dig> ∀m∈p0met, 


where p0met=m∈pmet∣rxnm∩prxns=∅.

in  <cit> , an additional requirement is to specify a minimum number of active reactions. here we do not include this restriction for the following reasons. first, we will search for the minimum number of active reactions such that all the other requirements are fulfilled. second, in  <cit>  the minimum number of active reactions is always set to  <dig>  since there exist reactions which are forced to carry flux, this constraint is redundant.

to find a subnetwork which contains the minimum number of active reactions, we minimize over the sum of the binary variables a
i, which indicate whether a reaction carries flux. the resulting milp is the following: 
 min∑i∈rxnai+∑k∈revāksv= <dig> l≤v≤udfv≤df∀f∈fδai≤vi≤mai∀i∈irrevδai−māi≤vi≤mai−δāi∀i∈revai+āi≤1∀i∈revai= <dig> ak+āk=1∀i∈pirr,∀k∈prev∑i∈rxnmai+∑i∈revmāi≥ <dig> ∀m∈p0metvi∈ℝ,ai∈{ <dig> }∀i∈rxnāk∈{ <dig> }∀k∈rev 


conflicting functionalities
in the case study considered in  <cit> , the resulting subnetwork should keep two desired functionalities: under both aerobic and anaerobic conditions at least  <dig> % of the maximal growth rate should be maintained. these two requirements cannot be realized with the same flux vector v because they imply two opposite states of the reaction ro <dig> that transports o
 <dig> into the network. we would need a vector v with vo2≥δ and vo2= <dig> at the same time, which is not possible.


minnw- <dig> computes one feasible flux vector v of the network. but, to get a subnetwork which fulfills the two functionalities we need one flux vector which fulfills the aerobic condition and another one for the anaerobic condition, see fig.  <dig>  to realize this with a single milp we have to modify minnw- <dig>  first, we search for a flux vector v
 <dig> which contains the protected metabolites and protected reactions. additionally, for each functionality j∈f we search for a flux vector v
j satisfying d
j
v
j≤d
j and corresponding binary variables. for example, in fig.  <dig>  we would have a
1= <dig> in case 1a) and a
1= <dig> in case 1b). due to  and , this would imply a
1= <dig> and a
1= <dig> at the same time, which is not possible. thus we have to use different binary variables aij for vij. with this, the eqs.  and  become 
  <dig> δaij≤vij≤maij∀j∈{ <dig> …,|f|},∀i∈irrev, 



  <dig> δaij−māij≤vij≤maij−δāij,∀j∈{ <dig> …,|f|},∀i∈rev, 



  <dig> aij+āij≤1∀j∈{ <dig> …,|f|},∀i∈rev. 


using the new variables ai <dig>  we reformulate the constraints regarding the protected reactions: ai0= <dig>  for all i∈p
irr and ai0+āi0= <dig>  for all i∈p
rev. finally, the constraints regarding the protected metabolites become 
  <dig> ∑i∈rxnmai0+∑i∈revmāi0≥ <dig> ∀m∈p0met. 


to obtain a minimum subnetwork, we have to minimize the total number of active reactions. thus, we need binary variables a
i with the property 
 ai=0if and only ifaij=0for allj∈{ <dig> …,|f|},or equivalentlyai=1if and only ifaij=1for somej∈{ <dig> …,|f|}.  for irreversible reactions, this can be encoded by the constraints 
  <dig> ai≤∑j=0|f|aij≤·ai,∀i∈irrev, 


and for reversible reactions we get 
  <dig> ai≤∑j=0|f|aij+āij≤·ai,∀i∈rev. 


the resulting milp is the following: 
 min∑i∈rxnaisvj= <dig> l≤vj≤u∀j∈{ <dig> …,|f|}djvj≤dj∀j∈{ <dig> …,|f|}δaij≤vij≤maij∀j∈{ <dig> …,|f|},∀i∈irrevδaij−māij≤vij≤maij−δāij∀j∈{ <dig> …,|f|},∀i∈revaij+āij≤1∀j∈{ <dig> …,|f|},∀i∈revai0= <dig> ak0+āk0=1∀i∈pirr,∀k∈prev∑i∈rxnmai0+∑i∈revmāi0≥ <dig> ∀m∈p0metai≤∑j=0|f|aij≤·ai,∀i∈irrevai≤∑j=0|f|aij+āij≤·ai,∀i∈revvij∈ℝ,aij,ai∈{ <dig> },∀j∈{ <dig> …,|f|},∀i∈rxnākj∈{ <dig> }∀j∈{ <dig> …,|f|},∀k∈rev 
minnw computes a subnetwork with a minimum number of active reactions while satisfying all the requirements.

example for minnw
the network in fig. 1
a fulfills the functionality regarding the aerobic condition, while the network in fig. 1
b fulfills the anaerobic condition. the combination of the minimum subnetworks corresponding to each functionality does not lead to a minimum subnetwork for both, see fig.  <dig>  the minimum subnetwork for this example is given in fig. 1
d.

computing all minimum subnetworks
there are scenarios where we have to compute more than one subnetwork. for instance, consider the case where the minimum dof ) is larger than  <dig>  if the subnetwork computed with minnw does not have the required dof, we have to compute a different subnetwork. furthermore, the computed minimum subnetwork need not be unique. thus there may exist different subnetworks which all fulfill the requirements and have the same number of active reactions. so we may be interested in finding all minimum subnetworks. to compute different subnetworks we can use the milp minnw in an iterative way. whenever a minimum subnetwork is found, we formulate a constraint which excludes this subnetwork as a feasible solution and solve the  milp again. for that purpose we formulate the following constraints: 
  <dig> ∑i∈rxn1−zikai+∑i∈rxnzik≥ <dig> k= <dig> ,… 


where zik= <dig> if reaction i carries flux in the subnetwork which was computed in the k-th step, otherwise zik= <dig>  thus  guarantees that at least one inactive reaction will become active, or at least one active reaction will become inactive in the new solution.

solving minnw iteratively and adding the constraints  in each step, we are now able to enumerate all minimum subnetworks.

reducing the number of binary variables
to further improve efficiency, we will make use of flux coupling information . we first recall some basic definitions from flux coupling analysis .

a reaction r∈rxn is called blocked if v
r= <dig> for all v∈c0=v∈ℝrxn∣sv= <dig> vi≥ <dig> ∀i∈irrev. in a pre-processing step, blocked reactions will be removed from the network, which is also done in  <cit> . thus we assume from now on that the network contains only unblocked reactions.

given two unblocked reactions r,s∈rxn, we say r is partially coupled to s, and write r⇔s, if v
r=0⇔v
s= <dig>  for all v∈c
 <dig>  the relation r⇔s is reflexive, transitive and symmetric and therefore defines an equivalence relation on rxn. this means that the set of reactions rxn can be partitioned into equivalence classes ={s∈rxn∣r⇔s }. it follows rxn=⋃∈rxn¯, where rxn¯ denotes the set of all equivalence classes. an equivalence class can be represented by any of its elements. we say that r is a representative of  or that  is the coupling class of r. note that = iff r⇔s. biologically, coupling classes can be interpreted as subsets of reactions that are always active together at steady-state, similarly to the notion of enzyme subsets in  <cit> .

the main advantage of introducing coupling classes is that, if one reaction in a class is not carrying flux, no other reaction in the class does, and vice versa. therefore, in every approach where binary variables are used to indicate if a reaction appears or not, it suffices to consider one reaction from every coupling class instead of considering all of them. depending on the number of reactions and associated coupling classes, this may significantly reduce the number of required variables.

based on the equivalence relation r⇔s, we now use binary variables corresponding to the coupling classes  instead of having binary variables for each individual reaction. thus we can rewrite the algorithm minnw in the following way: 
 repmin∑∈rxn¯|r|asvj= <dig> l≤vj≤u∀j∈{ <dig> …,|f|}djvj≤dj∀j∈{ <dig> …,|f|}δaj≤vsj≤maj∀j∈{ <dig> …,|f|},∈irrev¯,s∈δaj−māj≤vsj≤maj−δāj∀j∈{ <dig> …,|f|},∈rev¯,s∈aj+āj≤1∀j∈{ <dig> …,|f|},∈rev¯a0= <dig> a0+ā0=1∀∈pirrev¯,∈prev¯∑∈rxnm¯a0+∑∈revm¯ā0≥ <dig> ∀m∈p0met¯a≤∑j=0|f|aj≤·a∀∈irrev¯a≤∑j=0|f|aj+āj≤·a∀∈rev¯aj,a∈{ <dig> },vsj∈ℝ∀j∈{ <dig> …,|f|},∀∈rxn¯,s∈rxnāj∈{ <dig> }∀j∈{ <dig> …,|f|},∀∈rev¯ 


here, || denotes the cardinality of the coupling class . thus, we compute the smallest subnetwork with respect to the number of active reactions and not with respect to to the number of active representatives. irrev¯ denotes the representatives of the irreversible reactions, and rev¯ those of the reversible reactions. similarly, pirr¯ resp. prev¯ is the set of representatives of protected irreversible resp. protected reversible reactions. with p0met¯ we denote the representatives which include a protected metabolite.

to exclude previously enumerated subnetworks the constraints  can be adapted in the following way: 
  <dig> ∑∈rxn¯1−zka+∑∈rxn¯zk1−a≥ <dig> k= <dig> ,… 


using representatives we need only |rxn¯| instead of |rxn| binary variables. for many genome-wide networks, this reduces the number of 0- <dig> variables by about 1/ <dig>  see the examples in table  <dig> 

mus musculus













m. barkeri str. fusaro





RESULTS
we implemented our milps in matlab and used cplex  <cit>  as a solver like in  <cit> . for networkreducer resp. fastcore we used the implementation provided by the authors of  <cit>  resp.  <cit> . all computations were done on a desktop machine with two processors intel core i5-2400s, cpu  <dig> ghz, each  <dig> thread. for algorithm minnw
rep, we computed the coupling classes for partially coupled reactions using the software f2c <dig>  <cit> .


indicator variables


we implemented two versions of our algorithms. in one version we used the big m constraints from the original milp formulation in the methods section. we observed that the solutions are highly dependent on the given tolerances in the milp solver. to increase numerical stability, we implemented a second version using indicator variables and some other features of cplex  <cit> . the use of indicator variables is straightforward. for example, the big m constraint δ
a≤v≤m
a is replaced by a=0⇒v= <dig> a=1⇒v≥δ, where a∈{ <dig> } is the indicator variable. milp solvers using indicator variables handle them in two different ways. they may reformulate the given indicator constraints into big m constraints or branch on the indicator variables. cplex chooses one of these two methods depending on m. if m is small, it will formulate big m constraints, otherwise it will use branching. for the results and the running time we only applied the version where indicator variables were used, due to numerical instability of the big m formulation. while indicator variables drastically increase the running time, we still outperform the algorithm in  <cit> .

comparison with networkreducer
in a first experiment, we ran our implementations on the two metabolic network reconstructions and functionalities considered in  <cit> . table  <dig> shows the running time for calculating a subnetwork with the desired properties.
time
reactions
time
reactions

networkreducer

networkreducer: the algorithm introduced in  <cit> . minnw: the milp introduced here, using indicator variables




for synechocystis sp. pcc  <dig>  the subnetwork computed by networkreducer  <cit>  contains  <dig> reactions and thus  <dig> reactions more than the minimum subnetwork with  <dig> reactions obtained by our method. the two subnetworks have  <dig> reactions in common.  <dig> reactions in the larger subnetwork cannot be found in the minimum subnetwork, while  <dig> reactions in the minimum subnetwork do not appear in the larger one.

regarding e. coli iaf <dig> we get similar results. the subnetwork computed by networkreducer contains  <dig> reactions more than the minimum subnetwork obtained by our method. both networks have  <dig> reactions in common. there are  <dig> reactions that can only be found in the subnetwork computed with networkreducer, while there are  <dig> reactions which appear only in the minimum subnetwork.

comparison with fastcore

fastcore  <cit>  is a heuristic algorithm which is much faster than our method. however, the computed subnetworks are not minimum as can be seen from table  <dig>  the subnetwork computed with our method is not contained in the subnetwork computed with fastcore.


h. pylori
rxns fastcore: number of the reactions in the subnetwork computed with fastcore. time fastcore: running time in seconds of fastcore. rxns minnw: number of the reactions in the subnetwork computed with minnw. time minnw: running time in seconds for the algorithm minnw using indicator variables




for h. pylori  <dig> there are  <dig> reactions that appear only in the fastcore subnetwork and  <dig> reactions which can be found only in the minimum subnetwork. similarly, for m. tuberculosis inj <dig>  there are  <dig> reactions that appear only in the fastcore subnetwork and  <dig> reactions which can be found only in our subnetwork. the names of the reactions for both examples are given in the .

network reduction for genome-scale metabolic networks
as a proof of concept we applied our methods to compute minimum subnetworks for  <dig> metabolic network reconstructions taken from bigg models  <cit>  under different scenarios. for each type of organism in bigg we considered one model . an overview of the results is given in table  <dig>  in some cases we had only one minimum subnetwork, while for some models and scenarios we found different ones. for example, in the case of h. pylori  <dig>  we get  <dig> distinct minimum subnetworks, which will be discussed in the section case study: helicobacter pylori  <dig> 
minnw
minnw
rep

mus

musculus

e. coli

s. typhimurium

s. boydii cdc

k. pneumoniae

y. pestis

s. cerevisiae

g. metallireducens

m. tuberculosis

b. subtilis

p. putida

c. ljungdahlii


h. pylori

m. barkeri str.

fusaro

s. aureus

t. maritima
rxns: number of unblocked reactions in the original network. mets: number of metabolites in the original network after removing dead-end-metabolites. ess rxns: number of essential reactions in the original network. rxns in snw: number of reactions in the subnetwork. mets in snw: number of metabolites in the subnetwork. reps in snw: number of representatives remaining in the subnetwork. time minnw: running time in seconds for the algorithm minnw. time minnw
rep: running time in seconds for the algorithm minnw
rep. snws: number of minimum subnetworks which exist and fulfill all the requirements. for detecting the running time, only one subnetwork was computed




following  <cit> , we call a reaction essential if after removing this reaction it is no longer possible to achieve at least p
% of the maximal biomass production rate. like in  <cit> , we choose p= <dig>  a minimum subnetwork where it is possible to achieve a maximal biomass rate constitutes a subnetwork where all essential reactions must be active and so all essential reactions have to be included in the subnetwork. we will present the number of essential reactions for the different models to give an idea how many reactions are additionally needed to have a functional minimum subnetwork including all essential reactions.

the scenarios for the different networks and some conclusions are given next, full details can be found in the . the bounds on the flux rates are those from bigg models.

for the networks mus musculus, e. coli ijo <dig>  s. typhimurium lt <dig>  s. boydii cdc 3083- <dig>  and k. pneumoniae mgh  <dig> the requirements are that at least  <dig> % of the maximal biomass rates for the aerobic and anaerobic case can be realized by the subnetwork. for y. pestis co <dig> the requirements are that at least  <dig> % of the maximal growth rate with glycine uptake and the maximal growth rate without glycine uptake can be realized by the subnetwork. for s. cerevisiae s288c the maximal biomass rate with and without ethanol exchange has to be realized by the reduced subnetwork. for g. metallireducens gs- <dig>  c. ljungdahlii dsm  <dig>  and t. maritima msb <dig> the maximal biomass rate with h2o uptake and without h2o exchange has to be realized by the reduced subnetwork. for m. tuberculosis inj <dig> one requirement is that at least  <dig> % of the maximal growth rate can be achieved. additionally we defined  <dig> protected reactions. for b. subtilis  <dig> the requirements are that at least  <dig> % of the maximal growth rate with hydrogen uptake and the maximal growth rate without hydrogen uptake can be realized by the subnetwork. for p. putida kt <dig> one requirement is that at least  <dig> % of the maximal growth rate can be achieved. additionally we defined protected reactions to keep the tca cycle. for h. pylori  <dig> one requirement is that at least  <dig> % of the maximal growth rate can be achieved. additionally we defined  <dig> protected reactions. a detailed discussion of this test case will be given in the next subsection. for m. barkeri str. fusaro the requirements are that at least  <dig> % of the maximal growth rate with ammonia uptake and the maximal growth rate without ammonia uptake can be realized by the subnetwork. for s. aureus n <dig> at least  <dig> % of the maximal biomass rate with glucose uptake and without glucose uptake has to be realized by the subnetwork.

case study: helicobacter pylori 26695
in this section we discuss the results for computing several minimum subnetworks for the metabolic network h. pylori  <dig> using indicator variables. the requirements are the following: 
there are  <dig> protected reactions.

the maximal biomass yield is  <dig> , and the subnetworks should be able to produce at least  <dig> % of this yield.




in total we computed  <dig> subnetworks each containing  <dig> reactions, which is the minimum number needed to fulfill the requirements. the time needed to compute all these minimum subnetworks was  <dig> seconds with minnw and  <dig> seconds with minnw
rep. altogether the  <dig> minimum subnetworks use  <dig> different reactions, which can be found in the .  <dig> reactions are present in every subnetwork, among them all the  <dig> essential reactions of h. pylori. only  <dig> reactions are not present in every subnetwork: ccp, g3pd <dig>  d-amino acid dehydrogenase, fumt <dig>  glycerol-3-phosphate dehydrogenase , sucfumt, l-alanine dehydrogenase, anthranilate synthase, formate-tetrahydrofolate ligase, d-alanine exchange, d-alanine transport via proton symport, l alanine reversible transport via proton symport, l-alanine exchange, ans <dig>  gar transformylase-t, no3t <dig>  no3t <dig>  catalase. figure  <dig> shows the distributions of these reactions in the  <dig> subnetworks.
fig.  <dig> the two illustrations show the distribution of the reactions which are not present in all subnetworks. in fig. 3
a each reaction  has a bar. the bar indicates in how many subnetworks the reaction can be found. for example, reaction ccp can be found in every subnetwork except  <dig>  and reaction cat can be found in only one subnetwork. fig. 3
b illustrates where the reactions are found. again the x-axis corresponds to the reactions. thus a dot at  means that ccp appears in subnetwork  <dig>  ccp can be found in every subnetwork except in the second one, whereas cat can be found only in the second one




additional insight can be obtained by analyzing co-occurrence patterns of the  <dig> non-essential reactions. some of these reactions are mutually exclusive regarding the minimum subnetworks. for example, all subnetworks that contain reaction ccp do not contain cat and vice versa. the same holds for the pair fthfli and gart, and the pair ans and ans <dig>  regarding the functionalities of these reaction pairs, one can easily check that the two reactions in each pair do basically the same. therefore, it is sufficient if only one of them is present. in opposite to this, we can see that dalat2r and ex_ala__d form a cycle since they always appear in the same subnetworks. the same holds for alat2r and ex_ala__l. both cycles also seem to be mutually exclusive, thus only one of them is present in the subnetworks. similar observations can be made for the cycle formed by no3t <dig> and no3t <dig>  which is mutually exclusive to the cycle formed by sucfumt and fumt <dig> 

one may ask whether the reactions that never appear together in the same subnetwork are also mutually exclusive regarding elementary flux modes , i.e., whether or not there exists an efm involving both reactions  <cit> . while this holds for the reaction pair fthfli and gart and the pair ccp and cat, it is not true for the other reactions.

CONCLUSIONS
we developed an milp approach to compute for a given large metabolic network one or more minimum subnetworks preserving biological requirements that can be specified by the user. compared to previous work  <cit> , our method guarantees minimality of the subnetwork regarding the number of active reactions while preserving all the given requirements. in case there exist several minimum solutions, we are able to enumerate all of them. this may give additional insight how the network is functioning and which reactions are really needed to satisfy the requirements. we applied our algorithms to several genome-scale metabolic networks and we always found all the minimum subnetworks in reasonable time.

once these subnetworks have been computed, further analysis becomes possible by using methods that are not applicable to the original network. for example, one may compute elementary flux modes and minimal cut sets. in addition, one can take a closer look to the reactions involved in one or all minimum subnetworks in order to get a better understanding of their role in the network.

additional file

additional file  <dig> comparison with networkreducer, fastcore and new experiments. detailed description of the requirements on the networks and the bounds on the flux rates. 




abbreviations
efmelementary flux mode

fvaflux variability analysis

fcaflux coupling analysis

lplinear program/programming

milpmixed integer linear program/programming

we would like to thank alexandra reimers and yaron goldstein for constructive discussions.

funding
not applicable.

availability of data and materials
the dataset supporting the conclusions of this article is available in the minimal network repository, project name: minimal network, project home page: https://sourceforge.net/projects/minimalnetwork/, archived version: 2016-07- <dig>  operating system: platform independent, programming language: matlab, other requirements: no, license: gnu gpl, any restrictions to use by non-academics: no.

authors’ contributions
ar developed the theoretical part, implemented the algorithms and drafted the manuscript. ab supervised the study and participated in writing the document. both authors read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

consent for publication
not applicable.

ethics approval and consent to participate
not applicable.
