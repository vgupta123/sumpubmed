BACKGROUND
next generation sequencing  technologies greatly promote genomic research of prokaryotes, generating tens of thousands of prokaryotic genome sequences in recent years. it is cost-effective and produces reliable data of high quality owing to high coverage. however, to achieve complete genome sequences of prokaryotes, the process of assembly and scaffolding are necessary, but always leave unordered assemblies and gaps due to short read length. efficient and reliable scaffolding is a hurdle to investigate the regulatory and evolutionary profile based on linear and even high-dimensional genomic structure of microbial organisms .

algorithms of de novo scaffolding, often build-in assembly software, such as soapdenovo  <cit> , abyss  <cit> , and velvet  <cit> , rely on connections by pair-end  reads and the length of insert size. their performances are dramatically influenced by the length and abundance of repetitive regions of the target genome, such as ribosomal operons, transposases, and is, which, if longer than insert size, are always undistinguishable. these repetitive regions cause conflicts as pe reads link them to non-unique contigs, and finally leaves the assemblies as fragmented draft. therefore, more information is needed to orientate and order the disconnected scaffolds and contigs.

since the prokaryotic genomes often follow phylogenetic relationship, reference genomes would be helpful in such case, and therefore, the reference-assisted algorithms emerge . among them, typically, aligngraph extends and links contigs with pe reads under the guidance of a reference genome of a closely related organism; ragout uses one or multiple references along with the phylogenetic relationship to order the contigs. species with conserved genomic structure fit well with these algorithms. however, the flexibility of genome structures is elusive, different species might have various genomic complexity  <cit> . even draw support from phylogeny, rearrangement might be so intensive that closely related strains may have distinct genome organization, whereas isolates with the same genomic organization may present in remotely relative strains . these studies suggest that genomic rearrangement can be independent of phylogenetic relationship of genomic content, which would cause systemic errors if the algorithm relies deeply on phylogeny to select references for scaffolding.

although prokaryotic genomes can be extensively rearranged within a species, core genes are more stable in term of position than dispensable genes in genomic scale. the core genome of species, defined as cgof  in our previous study, constitutes of those genes that are vertically inherited with conserved order, i.e. keep synteny in generations, in the range of whole genome or a large segment  <cit> . on the contrary, the other genes in a genome, i.e. dispensable genes are subject to horizontal gene transfer, and often change their positions in genome. the discrepancy of position conservation between core and dispensable genes proposes a scaffolding algorithm that orders original assemblies according to the cgof. in this way, we have finished ten self-sequenced genomes of e. coli isolates. in these strains, all neighboring relationship of scaffolds and contigs we predicted based on cgof were verified using pcr if not strongly supported by pe reads  <cit> .

here, we implement the algorithm based on cgof creating a program gaap . rather than starting with a selection of reference genome, we use pangenomic method to extract the order-conserved cgof genes for scaffolding and supplement with pe reads to extend the connections between original assemblies and close gaps. hereto, a draft of a few scaffolds that counts less than the cgof segments of the species can be obtained. further, gaap suggests a permutation of the scaffolds according to the most prevalent and conflict-free segment permutations in the references, and thus achieve a circular assembly. the construction of the pseudo-genome can be further validated by pcr if the strain is available. as the biological feature of genome rearrangement is species-specific, prokaryotic species can be classified into three categories according to their cgof patterns: single-segment, symmetric, and asymmetric multiple-segment cgof  <cit> . here, we compare gaap to three other reference-assisted programs, ragout, medusa and aligngraph, and demonstrate that gaap achieves the paralleled performance using both empirical and simulated data in species with diverse genome size, complexity, and all the three categories of cgof.

methods
test data-set
fifteen genomes in six species of various genome size, complexity, and cgof pattern are used for performance test. all test genomes have complete genome sequences and pe reads data. the genomes are downloaded from ncbi ftp with accession numbers as follows: nc_ <dig>  and nc_ <dig>  for staphylococcus aureus, nc_ <dig>  for escherichia coli, nc_ <dig>  and nc_ <dig>  for streptococcus pyogenes, nc_ <dig> , nc_ <dig>  and nc_ <dig>  for helicobacter pylori, cp <dig> , cp <dig> , cp <dig> , cp <dig>  and cp <dig>  for streptococcus suis, and nz_akgh <dig>  for vibrio cholera. except for the five s. suis strains  <cit>  and the e. coli strain , for which real reads data are available, the reads of all the other strains are simulated by using wgsim package from samtools  <cit>  with base error rate of  <dig> , 2 × 100 bp and physical coverage no less than 100×. all above reads of the genomes are de novo assembled by using soapdenovo to generate original assemblies  <cit> .

the frame of gaap
gaap is schematized into two major steps: cgof identification and scaffolding . before start, we recommend to use pgap   <cit>  to generate the core gene cluster from a set of complete reference genomes. cgof identification is designed to identify the syntenic cgof segments from genomic positions information of each core gene ortholog. it takes the core gene cluster and their genomic position in each reference genome as input, and outputs cgof segments of the species and their permutations in reference genomes. the second step, scaffolding, is to construct a pseudo or draft genome for each target by aligning the original assemblies to cgof segments and then filling gaps by pe reads mapping. it takes the output of the first step , pe reads, and original assemblies as input. additionally, if a draft with a few scaffold “strings” comes out, the gaap suggests their permutation follows the conflict-free and most prevalent one of the references.fig.  <dig> the schematic framework of gaap. seg, segment of cgof. ref, reference; sc, scaffold/contig . head  and tail  vertices of the syntenic seg in each reference are sequentially connected with a dashed line indicating the seg permutation . the sc are indexed with seg and merged into ordered sc “strings”. the graph in the local scaffolding of ordered sc is built by connecting seg-ordered sc and unordered sc, where the pe links are higher than a certain cut-off. the line widths indicate the link count. pseudo-genome of draft-quality assembly is constructed by combining the indexed scaffolds and the closest relevant seg permutaion of references




cgof segment identification
the process of cgof segment identification has been described in kang et al.  <cit> , where only large cgof segments are counted. to recover more original assemblies, we set a cutoff for segment length as the minimal of two consecutive core genes. the shorter the cutoff, more core genes will be identified in cgof segments , and more original assemblies will be recovered. the process of cgof segment identification is as following : we first sort the single-copy core genes according to their order in each reference genome, and then use a self-developed iteration algorithm to obtain all syntenic segments, where the single-copy core genes keep stable linear order. here, we strictly define cgof segments as subsequences composed of cgof genes in consecutive order, and record the permutation of all segments of each reference genome.

scaffolding
scaffolding is implemented by ordering and orientating the original assemblies according to the indexes of cgof genes. additionally, pe reads are used to link the neighboring assemblies, called local scaffolding. further, a pseudo-genome is output if the cgof segments are permutated as the most prevalent references that do not conflict with indexes of the assemblies.

indexing the original assemblies
the original assemblies are searched for cgof genes by using blat, and then indexed by cgof genes for order and orientation of the assemblies. herein, one segment might span multiple assemblies, vice versa, and the mutual overbridges between them assemble the original assemblies into a few scaffold “strings” . the original assemblies that do not contain any cgof genes or not uniquely mapped are not joined in.

local scaffolding
in contrast to scaffolding in the genomic scale, local scaffolding is to use pe reads to: 1) confirm the neighboring relationship of original assemblies predicted based on cgof, and 2) recover assemblies which were not joined in and often represent repetitive regions. pe link pairs between the assemblies are screened to ensure the count greater than a cut-off  to exclude connections caused by systematic errors. for each pair of assemblies, sci and scj, there exists four types of connection between them,  head-to-head,  or ;head-to-tail,  or ;  tail-to-head,  or ;  tail-to-tail,  or ; where positive and negative signs indicate the orientation of assemblies. the graph of local scaffolding is constructed based on a complete evaluation of the confidence of pairwise connection, which is done by combining the permutation of assemblies indexed by the cgof, and the count of pe reads that support the link which might not be effectively used to join contigs solely based on read pairs. the graph consists of head and tail vertices that represent the head and tail of each assembly, and their connected edges. each edge has a weight confidence in the range of 0– <dig> that indicates how confident the connection of the two vertices is. for each edge , by combining the permutation and pair links between two vertices i and j, the weighted confidence c is defined as: cij=a*permutationij+1−a*linkij, 


where a controls the relative contribution of permutation and pair links. confidence of edges between the head and tail vertices of one assembly, and edges representing connections consistent with the cgof order, are designed as one, while those conflict with the cgof order are always zero. other vertices are confidently connected only when their weights are greater than zero or got the highest value when more than one edges compete for one vertice. finally, based on the order and orientation that are inferred from the chains of graph, gaap concatenates the assemblies into a pseudo genome or a draft of a few scaffolds “strings”. see fig.  <dig> “local scaffolding” and additional file 2: figure s <dig> for demonstration of examples. in this process, original assemblies that were not indexed by cgof can be recovered, and even reused when link to multiple other assemblies.

output a pseudo-genome
for all the permutations of cgof segments in references, those conflicting with original assemblies are removed at first, and then the remaining permutations are sorted according to their prevalence in reference genomes. finally, the most prevalent one is chosen to guide the scaffold “strings” into a pseudo-genome. if the indexed assemblies conflict with all the permutations in the references, there will be no output of pseudo-genome, which indicates a novel arrangement pattern in the target genome.

RESULTS
we evaluated gaap performance against three other reference-assisted tools, ragout, medusa and aligngraph by using the same reference sets . for ragout, we run three iterations with minimum synteny block sizes  with refinement, and for gaap, medusa and aligngraph, no extra settings are set except the default parameters. their performances in term of errors and n <dig> metrics was evaluated by gage  <cit> . since gage reports only events, i.e. number of breaks in the alignment, we also tallied coverage, i.e. length of recovered and relocated assemblies for supplement. here, we define coverage as the length ratio of the recovered/relocated assemblies to the reference complete genome in term of percentage, and errors as number of breaks in alignment, including indels, inversions and relocations tallied by gage.

since genomic rearrangement is very challenging to reference-assisted assemblers, we first used three genomes of species s. pyogenes, h.pylori and v.cholerae, which are known for frequent rearrangement. compared with gaap, ragout and medusa, aligngragh generated a draft-quality assembly of much lower coverage and more final scaffolds, while gaap, ragout and medusa produced one final scaffold for each of the testing genome, and exhibited comparable coverage and errors . although aligngraph produced less errors, it might be influenced by its less aggressive algorithm which recovered less assemblies.table  <dig> performance of reference-assisted assembly tools




to further discern the performance of gaap, ragout and medusa, we recruited  <dig> other genomes in five distinct bacterial species characterized by different cgof patterns as single-segment, symmetric, and asymmetric multi-segment, as well as variable genome sizes and complexity.

firstly, for genomes with single-segment cgof, we took two genomes of s. aureus for test, which are  <dig>  mb in length and exhibit stringent synteny in most core genes. the three methods all achieved single pseudo-genome with coverage of over 98%. for species of this cgof pattern, most reference-assisted assemblers can achieve high-quality assembly with high coverage and accuracy. gaap recovered more assemblies, and slightly less errors and longer n <dig> than the other two .table  <dig> performance on species of single-segment cgof




next, we turned to species with symmetrical cgof, and took six genomes in s.pyogenes and s.suis besides the two in table  <dig>  genomes with symmetric cgof contain two or four cgof segments which often rearrange symmetrically around the ori-ter axis of replication. gaap, ragout and medusa produced single pseudo-genome for each target, but with some errors due to the more complex genome organization. since gaap uses stable cgof indexes to order the assemblies instead of specific reference sequences which might be distinct from the target, we suppose the original assembly is correct and keep all the variations including snps, indels and structure variations in the final assembly, while ragout and medusa align assemblies directly against the reference genomes and refine the assemblies. therefore, gaap did not show advantage in errors reported by gage even when it recovered more assemblies with fewer false location .table  <dig> performance on species with symmetrical cgof




in species with symmetric cgof, although genome structure varies somewhat, core genes still keep synteny in long genomic ranges, and the left and right arm segments exchange their position systemically. large misjoined fragments occur only when rare rearrangement are present in the target genomes and the rearranged fragments cannot be joined to neighboring segment by overbridged assemblies. another feature of species with symmetric cgof is that genome organization, or permutation of cgof segment, can be reversely rearranged around the ori-ter axis, and independent of phylogenetic relationship. since phylogenetics is what ragout refers to select reference genomes, it will occasionally misleads assembly, whereas gaap, independent of phylogenetic relationship and specific references, exhibit apparent outperformance in coverage in this suite of cases.

finally, we recruited four genomes in species e. coli and h. pylori with asymmetric cgof. for the strains e.coli mg <dig>  both empirical and simulated pe data were tested. the results showed that the three methods achieved comparable results . although gaap had more errors number in some cases, it still exhibited superior coverage, especially the falsely located assemblies. in species with asymmetric cgof, although there are much more segments that are extensively rearranged, gaap also perform well with the support from cgof indexes and the prevalence information of segment permutation in reference genomes. in contrast to symmetric cgof species, genome rearrangement in species with asymmetric cgof is largely correlated with phylogeny, and thus ragout performed almost as well as gaap in most cases. although gaap does not depend on phylogeny, closely related reference genomes will provide more relevant information on core gene set, composite segments, their permutation and prevalence, and thus provide more accurate guidance for assembly. for species of this cgof pattern, if there is empirical evidence of the references and the target, selection of closely related reference genome will improve performance of these methods.table  <dig> performance on species of asymmetrical cgof

e.coli mg1655a
e.coli mg1655b

aempirical pe reads data downloaded from ncbi sra 


bsimulated pe reads data




CONCLUSIONS
we have presented a new algorithm for generating pseudo-genomes of prokaryotes based on the concept of cgof, that is, the syntenic segments of core genes of a species. we implement this algorithm creating program gaap, which is to our knowledge the first reference-assisted scaffold program that explicitly models the biological feature of cgof and takes advantage of the reliability of core genes on their position information. we compared gaap to three other recently presented programs, and demonstrated that gaap exhibited no inferiority on both empirical and simulated data and diverse suites of test cases, even when the other three also stem from taking advantage of reference refinement.

as genomic data of prokaryotes have been rapidly accumulated since the launch of ngs, it is no longer an obstacle to prepare enough references for gaap . ideally, obtaining complete genomes of all strains is promising for large pangenomic studies, and gaap provides an economic and rapid solution with high accuracy for species with various genome size, complexity, and cgof pattern. as more genomic data are accumulated and there are sufficient alternatives, a possible improvement of gaap is to optimize the selection of references, under the rationale that references with broader diversity and closer phylogenetic relevance can give a more accurate prediction of the target genome.

availability and requirements

project name: gaap


project home page: http://gaap.big.ac.cn



operating system: platform-independent


programming language: python


other requirements: python  <dig>  or higher


license: gnu gpl


availability: gaap, including source code, documentation, and examples, is freely available for non-commercial use with no restrictions at http://gaap.big.ac.cn.

additional files

additional file 1: figure s <dig>  scheme of merging of scaffolds and cgof segments. each column and row indicate a scaffold and cgof segment from start  to end  respectively. cgof segments are consisted of cgof genes in stable order. by sequence alignment, scaffolds will be indexed by cgof genes, and ordered and orientated into scaffold “strings”, vice versa. the mutual overbridges between them assemble the original assemblies into large scaffolds, and construct the cgof skeleton of the target strain. 


additional file 2: figure s <dig>  scenario of conflicting links between contigs. black short lines indicate scaffolds and contigs with a,b,c,d ordered and r, s unordered ones. the widths of curve lines indicate the link count. 


additional file 3: additional text file. the sets of reference genomes for gaap and ragout. 




abbreviations
cgofcore-gene-defined genome organizational framework

gaapgenome-organization-framework-assisted assembly pipeline

ngsnext generation sequencing

pepaired-end

pgappan-genomes analysis pipeline

