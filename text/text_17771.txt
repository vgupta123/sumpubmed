BACKGROUND
genome-wide association studies  are a popular strategy to investigate the genetic structure of complex diseases by identifying the association between single nucleotide polymorphisms  and complex disorders. gwas analysis is mainly focused on testing the effects of individual snps on complex diseases; however, complex diseases are likely to result from the interactions among multiple genes. that is, the presence of specific alleles in different genes can significantly increase the risk of developing a particular disease, such as alzheimer’s disease, type  <dig> diabetes, autism, and schizophrenia . in fact, most of the significant snps identified by gwas can only explain a small proportion of the heritability of a disease. the missing heritability may be explained by gene-gene interactions  <cit> . hence, the development of statistical gene-gene interaction tests based on gwas has become important.

a computationally efficient test is required for a genome-wide interaction analysis that tests an extremely large number of snp-snp interaction pairs in gwas . several approaches, which can finish genome-wide interaction tests in a reasonable time while still maintaining statistical power, have been developed for gwas with unrelated case-control samples. some examples for these approaches include snpharvester  <cit> , snpruler  <cit> , and boost  <cit> . these approaches typically employ a two-stage analysis strategy; in the first stage, a rapid algorithm is used to identify a promising subset of snps with potential interaction effects, and in the second stage, a commonly used test such as the test based on logistic regression is used to identify pairwise interactions from the subset of snps.

current interaction tests for family-based studies are computationally intensive, which prevent the applications of the tests to genome-wide interaction analysis. for example, mdr-pdt  <cit>  and pgmdr  <cit>  are extended from the machine learning-based multifactor dimensionality reduction  test  <cit> , which involves intensive calculations such as cross-validations and permutations. regression-based tests such as conditional logistic regression  and generalized estimating equations   <cit>  can also be used for testing interactions  <cit> ; however, iterative algorithms such as the newton-raphson method are required to estimate the parameters. as many family-based gwas have been conducted , it becomes important to develop a computationally efficient interaction test for family-based gwas.

to overcome the computational challenges in current family-based interaction tests, here we developed an efficient gene-gene interaction test for discordant sib pairs , the gcore-sib, which takes into consideration the correlations in dsps, and implemented the test into an efficient tool for family-based interaction analysis. the gcore-sib is extended from the fast epistasis statistic implemented in plink  <cit> , which is an odds ratio-based interaction test for case-control studies  <cit> . the log odds ratios, which measure the correlations between two snps, are first calculated for affected and unaffected siblings, and the difference in the log odds ratios is compared in the gcore-sib statistic. variance and covariance for the statistic were calculated based on appropriate theoretical models, and the distribution of the statistic was assumed to follow a standard normal distribution. therefore, the statistic and its p-value were rapidly calculated. we used simulation studies to evaluate the type i error rates for the gcore-sib test, and to compare the power of the test with that of gee and mdr-pdt. the gcore-sib software was implemented with posix threads , which allow for parallel computing of the snp pairs. we compared the performance in terms of run time among the gcore-sib, gee, and mdr-pdt. finally, a gwas dataset was used to evaluate the run time of the gcore-sib in the genome-wide scale.

implementation
the gcore-sib statistic
the gcore-sib statistic was developed from the plink interaction statistic  <cit>  and is calculated based on the difference in log odds ratios between cases and controls in families. in the test, we considered discordant sib pair in each nuclear family . affected and unaffected sibs are defined as cases and controls, respectively. assume we have k independent discordant sib pairs. let nij be the number of affected sibs with genotypes i and j at the two snps m <dig> and m <dig>  where i =  <dig>   <dig>   <dig>  and j =  <dig>   <dig>   <dig> . suppose that in the k discordant sib pairs, rij is the number of sibs with genotypes i and j at the two snps . therefore, we can construct the genotype tables for the affected and unaffected sibs, as shown in tables  <dig> and  <dig>  each cell count in table  <dig> represents the total number of affected sibs with a specific genotype in all k discordant sib pairs. that is, nij = ∑s = 1knijs for i =  <dig>   <dig>   <dig> and j =  <dig>   <dig>   <dig>  where nijs represents the number of affected sibs with genotypes i and j in sth discordant sib pair. similar to s-tdt  <cit> , we assumed that the random variables  with the observed values of  follow a multivariate hypergeometric distribution.table  <dig> counts of genotypes in the affected sibs in the k discordant sib pairs

aa
aa
aa

bb
n
11
n
12
n
13

bb
n
21
n
22
n
23

bb
n
31
n
32
n
33
aa
aa
aa

bb
r
11 − n
11
r
12 − n
12
r
13 − n
13

bb
r
21 − n
21
r
22 − n
22
r
23 − n
23

bb
r
31 − n
31
r
32 − n
32
r
33 − n
33


we followed the same procedure in plink to collapse the pair of 3 ×  <dig> genotype tables into a pair of 2 ×  <dig> tables for cases and controls as shown in tables  <dig> and  <dig>  according to tables  <dig> and  <dig>  the odds ratios between snps m <dig> and m <dig> for cases and controls can be calculated as:table  <dig> counts of alleles in the affected sibs


a
a

b
11 + 2n
12 + 2n
21 + n
22
13 + 2n
12 + 2n
23 + n
22

b
31 + 2n
32 + 2n
21 + n
22
33 + 2n
32 + 2n
23 + n
22

a
a

b
4r11−n11+2r12−n12+2r21−n21+r22−n22
4r13−n13+2r12−n12+2r23−n23+r22−n22

b
4r31−n31+2r32−n32+2r21−n21+r22−n22
4r33−n33+2r32−n32+2r23−n23+r22−n22
  <dig> orcase=4n11+2n12+2n21+n224n33+2n32+2n23+n224n13+2n12+2n23+n224n31+2n32+2n21+n <dig>   <dig> orcontrol=4r11−n11+2r12−n12+2r21−n21+r22−n224r13−n13+2r12−n12+2r23−n23+r22−n22×4r33−n33+2r32−n32+2r23−n23+r22−n224r31−n31+2r32−n32+2r21−n21+r22−n <dig> 

similar to the plink approach, under the assumptions of hardy-weinberg equilibrium  and linkage equilibrium  for the two snps, the gcore-sib statistic for the gene-gene interaction test can be constructed based on a z-score as follows.  <dig> gdsp=logor^case−logor^controlvar^logor^case−logor^control where or^case and or^control are the sample estimators for orcase and orcontrol, respectively. the null hypothesis of the gcore-sib test is that the two snps tested do not have interaction effects on the disease.

due to the correlation of genotypes between discordant sibs, the covariance between the two log odds ratios needs to be considered. based on the multivariate hypergeometric distribution assumption, we can calculate the variance and covariance for the two odds ratios. the detailed derivation is shown in additional file  <dig>  based on the derivation, the covariance is calculated as follows  <dig> covlogor^case,logor^control=−varlogor^case=−varlogor^control 

therefore, the gcore-sib statistic can be written as  <dig> gdsp=logor^case−logor^control4var^logor^case 

the calculation of var^logor^case is also shown in additional file  <dig> 

simulations
we used the sequence and phenotype simulator, seqsimla  <cit> , to evaluate the type i error rates for the gcore-sib and to compare the power of the gcore-sib with other methods under different scenarios. seqsimla requires of a population of sequences generated by other programs. therefore, we downloaded the haplotypes for the han chinese population  in the hapmap <dig> project as a reference panel. then we used the hapgen version  <dig>   <cit>  to produce simulated haplotypes based on the reference panel. hapgen <dig> can simulate haplotypes with similar ld structures and allele frequencies to that of the reference panel. we randomly selected two genes that were not linked as the simulated region and generated a total of  <dig>  haplotypes in the two genes. based on the  <dig>  haplotypes, seqsimla first simulated haplotypes in founders and assumed random mating to generate the offspring. we chose the logistic function as the penetrance function in seqsimla: paffected|x=expρ+λ1x1+λ2x2+λ3x1x21+expρ+λ1x1+λ2x2+λ3x1x <dig>  where x =  is a vector of genotype coding based on additive, dominant, or recessive model for the two disease snps; ρ is the parameter used to determine the disease prevalence; λ <dig> and λ <dig> represent the effect sizes of the main effects for the disease snps; and λ <dig> determines the interaction effect for the two disease snps.

for the type i error simulations, we first simulated no interaction effects and no main effects for two snps in the two genes. different minor allele frequencies  at the two snps ) and different numbers of dsps  were considered. we then considered the situation where main effects were present for the two snps under different levels of disease prevalence . we simulated one scenario where only one snp had main effect , λ2 = 0) and three scenarios where both snps had main effects , λ2 = log ; λ1 = log , λ2 = log ; λ1 = log , λ2 = log ). in addition, to investigate whether the gcore-sib is robust to the violation of the assumption of le, we simulated two snps in different levels of ld . all type i error rates in these scenarios were calculated based on  <dig>  replicates of samples. two significance levels  were considered for the type i error calculations.

for the power studies, we simulated interaction effects for two snps in the two genes. we compared the power of our method with the power for gee and mdr-pdt under different scenarios. the “exchangeable” within cluster correlation structure was specified in gee. the regression model based on gee included individual terms for the two snps and one interaction term, where genotypes were coded as the minor allele counts. we considered different numbers of dsps , disease models , mafs , and effect sizes ; λ1 =  <dig>  λ2 =  <dig>  λ3 = log ). the default settings were  <dig> dsps, additive model, mafs of  <dig>  for the two snps, and effect size of ). we changed one parameter at a time for each of the scenarios. table  <dig> shows the parameter values for each of the scenarios. the power was calculated with a significance level of  <dig>  based on  <dig>  replicates of samples.table  <dig> parameter settings for the power simulations


a
nf number of families, dm disease model, maf minor allele frequencies for the two snps, es effect size for the interaction



parallel computing
although the calculation of the gcore-sib statistic is fast for a snp pair, performing a genome-wide interaction analysis by testing tens of billions of tests can still be very time consuming for the gcore-sib. the gcore-sib software was implemented with posix threads  so that the calculations for snp pairs can be performed in parallel on a multi-core computer. moreover, the calculations can be performed for snps between a chromosome pair specified by the user. therefore, the calculations can be distributed across different computers.

performance comparison
we compared the performance of the gcore-sib with gee and mdr-pdt. currently, gee is mostly implemented in r, which is not comparable to the gcore-sib and mdr-pdt implemented in c++. alternatively, we used the interaction test based on a regular logistic regression implemented in plink. the logistic regression based on gee usually first runs the regular logistic regression to obtain initial parameter estimates assuming all samples are independent, and more iterations are performed for the overall parameter estimates including the correlation matrix. therefore, the logistic regression with gee is expected to run longer than the regular logistic regression. a total of  <dig>  dsps were simulated using seqsimla, and the performance was compared based on  <dig> ,  <dig> , and  <dig>  pairs of snps on a computer with xeon  <dig>  ghz cpu and 96 gb of ram.

to evaluate the performance of the gcore-sib for a genome-wide interaction analysis, we downloaded the wellcome trust case control consortium  gwas dataset for hypertension. the dataset consists of  <dig>  unrelated cases for hypertension and  <dig>  unrelated controls, and there are  <dig>  snps in the data. we randomly matched cases and controls, which resulted in  <dig>  case-control pairs. the case-control pairs were analyzed as dsps in the gcore-sib. because the wtccc study is not a family-based study, our analysis was used only for the performance evaluation for the gcore-sib. we also downloaded the gene annotation file from the ucsc genome browser website. all possible pairs of snp interactions between genes were tested in parallel with  <dig> cores by the gcore-sib on the aforementioned computer.

RESULTS
type i error rates
table  <dig> shows the type i error estimates for the gcore-sib under different mafs at the two snps and different numbers of dsps at the significance levels of  <dig>  and  <dig> . the type i error rates were close to the nominal levels under all scenarios. table  <dig> summarizes the results of the type i error rates in the presence of main effects. in the presence of only one main effect , λ2 = 0), the type i error estimates were close to the  <dig>  nominal level across different levels of disease prevalence and disease models. the type i error estimates were inflated by the large effect size , λ2 = log ) when both snps had main effects. when there was ld between the two snps, the type i error rates were  <dig> ,  <dig> , and  <dig>  for ld r <dig> of  <dig> ,  <dig> , and  <dig> , respectively, at the significance level of  <dig> , and the type i error rates were  <dig> ,  <dig> , and  <dig>  for ld r <dig> of  <dig> ,  <dig> , and  <dig> , respectively, at the significance level of  <dig> . therefore, the gcore-sib also maintained proper type i error rates when the assumption of le was violated.table  <dig> type i error rate simulations for two snps with mafs of  and with different numbers of dsps at the significant levels of  <dig>  and  <dig> 


λ
1 = log , λ

λ
1 = log , λ
 <dig> 
a

λ
1 = log , λ
 <dig> 
 <dig> 
 <dig> 

λ
1 = log , λ
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 
 <dig> 

avalues in bold represent that the 95 % confidence intervals of the estimates do not include the expected level of  <dig> 



power
figure  <dig> shows the power comparisons under different scenarios. in scen <dig>  the power for the gcore-sib was similar to the power for gee, while mdr-pdt had the lowest power. for all different methods, the power increased with the increase in the number of dsps. in scen <dig>  for the additive and recessive models, similar power patterns were observed that the power for the gcore-sib and gee was similar, and the power for both tests was higher than the power for mdr-pdt. however, in the dominant model, gee and mdr-pdt can have significantly higher power than that for the gcore-sib. the gcore-sib had the highest power in the additive model, followed by the dominant and recessive models, while the other tests showed the highest power in the dominant model, followed by the additive and recessive models. in scen <dig>  the power for the gcore-sib and gee in maf of  and maf of  was similar, while mdr-pdt showed higher power in maf of  than that in maf of . in the last scenario where the interaction effect size is increased to log, the power for the gcore-sib was still close to the power for gee, and the power for both tests was also higher than the power for mdr-pdt. in summary, the power for the gcore-sib was generally similar to the power for gee and the power for the gcore-sib and gee was generally higher than the power for mdr-pdt under the additive model in our simulations.fig.  <dig> power comparison for gcore-sib, gee, and mdr-pdt under scen1- <dig> described in table  <dig>  the error bars represent the 95 % confidence intervals for the power



performance comparison
table  <dig> shows the run time for the gcore-sib, plink, and mdr-pdt for testing  <dig> ,  <dig> , and  <dig>  pairs of snps in  <dig>  dsps. the gcore-sib finished testing these snp pairs in 2 seconds, while plink implementing the regular logistic regression required more than  <dig> times of the run time for testing the same number of pairs of snps as the gcore-sib. the logistic regression based on gee would require more time than the regular logistic regression. for example, using the gee package in r  function) for the interaction test in logistic regression requires approximately  <dig> times of the run time compared to the regular logistic regression in r  function), based on the same model and the same samples we used for plink. therefore, the gcore-sib can potentially run  <dig> times faster than the logistic regression based on gee when implemented in c++. moreover, mdr-pdt spent significantly more time than the gcore-sib and plink. for example, mdr-pdt required 6 hours and 52 minutes to test the  <dig>  pairs of snps, when compared to 2 seconds and 26 seconds for the gcore-sib and plink, respectively. on the other hand, the gcore-sib spent 5 days and 12 hours on testing  <dig> , <dig>  pairs of snps in the wtccc gwas dataset. therefore, the gcore-sib can finish a genome-wide interaction analysis in a reasonable time frame.table  <dig> performance comparison for the gcore-sib, plink, and mdr-pdt



discussion
we developed an odds ratio-based gene-gene interaction test considering correlations in discordant sib pairs. the hypergeometric distribution for genotype counts was assumed in each discordant sib pair. then the estimates of correlation within families can be calculated based on the model assumption. we demonstrated that the gcore-sib showed appropriate type i error rates under the null hypothesis of no interaction, even in the presence of ld between snps, or when only one snp showed main effect. sharing the same property as the odds ratio-based test for case-control studies, the gcore-sib maintains proper type i error rates when only one snp has main effects. when the two snps both have strong main effects, type i error rates could be inflated for most of the interaction tests  <cit> . therefore, in practice, significant results from interaction tests for two snps should be interpreted along with tests for main effects for the same two snps.

we also compared the power of the gcore-sib with two alternative family-based interaction tests, gee and mdr-pdt. our simulation results suggested that the gcore-sib and gee had similar power, while mdr-pdt had the lowest power under most of the simulation scenarios. under the assumption of hwe, alleles are independent in tables  <dig> and  <dig>  and the gcore-sib tests the allelic correlations between the two snps based on the two tables. hence, an additive model is implicitly assumed in the gcore-sib. moreover, genotypes for gee were also coded based on an additive model in our simulations. as most of our power simulations were conducted under the additive model, it was not surprising to observe higher power for the gcore-sib and gee than the machine learning-based mdr-pdt.

gee and mdr-pdt are not suitable for genome-wide interaction tests, due to the high computational burden. in contrast, the gcore-sib is demonstrated to be able to perform a rapid test for each pair of snp-snp interactions. however, gee is flexible of incorporating covariates in the test. therefore, the gcore-sib can be used as a complementary tool to gee for analyzing dsps. that is, the gcore-sib can be used as a screening tool to identify candidate snp pairs with interactions. then gee can be used to test for interactions for the candidate snp pairs by incorporating appropriate covariates.

CONCLUSIONS
in conclusion, we have developed an efficient gene-gene interaction test for dsps, which is suitable for genome-wide interaction analysis for snp pairs in dsps. we have implemented the method in c++, which can be downloaded for free at http://gcore-sib.sourceforge.net.

additional file
additional file 1: derivation for the variance of the gcore statistic 



