BACKGROUND
single nucleotide polymorphisms  is a common type of dna sequence variations that occur when a single nucleotide base is altered at a specific locus. they are among the most important genetic factors that contribute to human disease and biological functions. however, discovering novel snps is a scientifically challenging task. among others, one valuable approach proposed for snp discovery is based on base-specific cleavage and mass spectrometry  <cit> .

the snp discovery approach based on base-specific cleavage and mass spectrometry usually adopts a data-acquisition procedure as summarized below. first, a target sample dna sequence is pcr-amplified using primers that incorporate the t <dig> promoter sequences. then, the pcr products are in-vitro transcribed and subsequently digested with the endonuclease rnase a in four base-specific cleavage reactions. each reaction can cleave the sample sequence to completion at all loci wherever a specific base is found. finally, the matrix-assisted laser desorption/ionization time-of-flight mass spectrometry  is applied to the cleavage products, resulting in four measured mass spectra, each corresponding to one base-specific cleavage reaction.

since each cleavage product is expected to be made of three non-cleavage bases, it is fairly straightforward to calculate the base composition from its measured mass signal. with all these base compositions in hand, the task of discovering snps in the sample sequence is now left to a computational solution. in principle, this computational solution shall find a way to integrate the four complementary base-specific mass spectra, and then identify those snps that necessarily account for the unanticipated base compositions . see figure  <dig> for schematic outline of the snp discovery approach using base-specific cleavage and mass spectrometry.

the early proof-of-concept studies on the above snp discovery approach using base-specific cleavage and mass spectrometry were presented in  <cit> , where the identification of snps however was done by visual inspection. shortly afterwards, two automated computational solutions were developed  <cit> : one was implemented in the proprietary massarray™ snp discovery software package from sequenom, inc. and the other implemented in the software package called rnasecut which is instead freely available online  <cit> . in particular, the solution in  <cit>  mainly comprises of two separate procedures. it first computes all potential snps that give rise to each unanticipated based composition and then score them by taking into account the mass spectrometry data from the four base-specific cleavage reactions. thus, the integration of the four base-specific cleavage reactions was done only in the second step. apparently, such an integration strategy is far from being optimal, as at least it assumes that the occurrences of potential snps are independent in the first step.

in this paper, we study two new combinatorial optimization problems to exploit the full potential of the above snp discovery approach. while both problems are aimed at reconstructing the sample sequence that would attain the minimum number of snps, they search over different candidate sequence spaces. the first problem, denoted as snp - msp, limits its search to sequences whose in silico predicted mass spectra have all their signals contained in the measured mass spectra. in contrast, the second problem, denoted as snp - msq, limits its search to sequences whose in silico predicted mass spectra instead contain all the signals of the measured mass spectra. then, we present an exact dynamic programming algorithm for solving the snp - msp problem and also show that the snp - msq problem is np-hard by a reduction from the restricted variation of the 3-partition problem  <cit> .

methods
preliminaries
let s ∈ Σ* denote a string over the four-base alphabet ∑={a,c,g,t}. the length of s is denoted by |s|, the i-th base of s by s, and the substring of s from the i-th base to the j-th base by s, for  <dig> ≤ i ≤ j ≤ |s|. we use ∈ to denote the empty string so that |∈| =  <dig>  the concatenation of two strings s and t is denoted by s · t, and the concatenation of l copies of a string s is denoted by sl.

given a string s and a cut base x∈∑, a cleavage fragment refers to a substring of s that does not contain x and that cannot be extended in either side without crossing a base x. formally, the substring s is a cleavage fragment with respect to the cut base x if the following three conditions are satisfied:  s = x if i ≠  <dig>   s = x if j ≠ |s|, and  s ≠ x, ∀k ∈ . in addition, the empty string ε is a cleavage fragment if there exits i ∈  such that s = s = x. given a cleavage fragment, we use aicjgktl to denote its base composition of i as, j cs, k gs, and l ts. in  <cit> , this base composition is termed as a compomer of the string s with respect to the cut base x. the whole set of compomers is hence called the compomer spectrum of the string s with respect to the cut base x, and denoted by finally, let c∑={cx:x∈∑}={ca,cc,cg,ct}, a collection of four compomer spectra of the string s where each is generated with one cut base.

example  <dig> let s := acatgctacatta. then, the string s contains four cleavage fragments with respect to the cut base a: c, tgct, c, and tt. with respect to the cut base t, it instead contains five cleavage fragments: aca, gc, aca, ∈, and a. their respective compomer spectra are cas={a0c1g0t <dig> a0c1g1t <dig> a0c0g0t2} and cts={a2c1g0t <dig> a0c1g1t <dig> a0c0g0t <dig> a1c0g0t0}. note that each compomer appears in a compomer spectrum at most once.

problem formulation
let dh  denote the hamming distance between two strings s and s′ of equal length. it measures the minimum number of substitutions required to transform one string into the other. given a collection of compomer spectra cΣ={cx:x∈Σ} of an unknown string s′  which can in principle be generated from a mass spectrometry experiment, and a string s  which is believed to differ from the unknown string s′ by a number of substitutions only, we formulate below two combinatorial optimization problems for snp discovery.

definition  <dig> given a string s and a collection of compomer spectra cΣ={cx:x∈Σ}, find a string s′such that cx⊆cx, for all x∈∑ and dh is minimized.

definition  <dig> given a string s and a collection of compomer spectra cΣ={cx:x∈Σ}, find a string s′such that cx⊆cx, for all x∈∑and dh is minimized.

the only difference between the above two problem formulations is that one requires cx⊆cx and the other requires cx⊆cx, for all the cut bases. once the string s′ is found, it is easy to identify the snps in s′, i.e., those base substitutions that transform s′ into s.

example  <dig> in this example, we let ∑:={a,t}for simplicity. given the string s:= ataat and the set c={ca,ct}of compomer spectra  where

 ca={a0t <dig> a0t2}andct={a0t <dig> a1t0}. 

the feasible solutions to the snp - mspproblem for the above instance include the strings such as atata, tatat, ttatt, atatt, and attat. their respective hamming distances to the input string s are  <dig>   <dig>   <dig>   <dig>  and  <dig>  the string s′ = ttaat is not a feasible solution because the compomer a2t0∈ct but a2t0∉ct so that ct⊈ct.

the feasible solutions to the snp-msq problem for the above instance include the strings such as ttata, tatta, atatt, and attat. their respective hamming distances to the input string s are  <dig>   <dig>   <dig>  and  <dig>  the string s′ = ttaat is not a feasible solution because the compomer a2t0∈ct but a1t0∉ct so that ct⊈ct.

the measured mass spectra of a sample sequence are rarely perfect in practice. some peaks may actually represent noises, while some true signal peaks are missing. the problem snp - msp is so formulated that its computational solution would be robust against noisy peaks but susceptible to missing peaks . in contrast, the problem snp - msq is so formulated that its computational solution would be robust against missing peaks but susceptible to noisy peaks.

we noticed that several computational problems in the literature that are more or less related to our problems introduced above. in  <cit> , a so-called sequencing from compomers problem was studied which, like the snp - msp problem, also aimed to reconstruct the sample sequence from a given collection of compomer spectra, but without help of a reference sequence. in  <cit> , the spectral alignment problem differs from the snp - msp problem mainly by its exploration on short read sequencing data rather than the mass/compomer spectra data, which may lead to wide implications in the subsequent algorithm design and complexity analysis. moreover, in  <cit> , a so-called snp discovery from mass spectrometry problem was defined in a similar way to the snp - msq problem. however, it has only a single compomer as input, as opposed to a collection of four complementary compomer spectra used in the snp - msq problem.

RESULTS
an exact dynamic programming algorithm for snp - msp
in this subsection, we shall describe an exact dynamic programming algorithm for solving the snp - msp problem. without loss of generality, we may assume in the remaining of this section that every base of Σ will eventually occur in the optimal solution to a given instance of the snp - msp problem. consequently, only those feasible solutions that contains all the bases of Σ need to be considered when we search for the optimal solution. in case some base x would not occur in the optimal solution s′ note that it becomes relatively easy to find s′ since we would have s′∈lx∩rx and |s'| = |s|. see below for definitions of lx and rx.

let us start with some preliminary definitions and notations. for a string s, a cleavage fragment s is called internal if neither i =  <dig> nor j = |s|, left-ended if i =  <dig>  or right-ended if j = |s|. in addition, a cleavage fragment ∈ is always considered internal. given a collection of compomer spectra c∑, we call a string is i-compatible if the compomers of its internal cleavage fragments are all contained in c∑ . a string is called l-compatible  if it is i-compatible and if the compomers of its left-ended  cleavage fragments are all contained in c∑ as well.

example  <dig> consider the string s given in example  <dig>  the four cleavage fragments of s with respect to the cut base a are all internal. among the five cleavage fragments of s with respect to the base t, the first cleavage fragment aca is left-ended, the last cleavage fragment a is right-ended, and the other three cleavage fragments in the middle are all internal.

example  <dig> let c∑={ca,cc,cg,ct}be a collection of compomer spectra where

 ca={a0c1g0t <dig> a0c1g1t <dig> a0c0g0t2},cc={a1c0g0t <dig> a1c0g1t <dig> a1c0g0t <dig> a2c0g0t2},cg={a2c1g0t <dig> a3c2g0t3},andct={a2c1g0t <dig> a0c1g1t <dig> a0c0g0t <dig> a1c0g0t0}. 

we show in table  <dig> whether each of the given strings is i-compatible, l-compatible, or r-compatible with c∑.

this table shows whether each of the given strings is i-compatible, l-compatible, or r-compatible with c∑.

for each compomer aicjgktl∈cx in a given collection of compomer spectra c∑, we use ix to denote the set of strings that  consist of i as, j cs, k gs, l ts,  contain exactly three distinct bases , and  are i-compatible with c∑. it is easy to check that |ix|≤!i!j!k!l!. in particular, if there exists in aicj gktl a non-cut base whose composition value is zero, then we have ix=∅ so that |ix|= <dig>  furthermore, we may define the following set

 ix= ⋃aicjgktl∈cxix,∀x∈Σ. 

then, let iΣ={ia,ic,ig,it}. analogously, we may define lx, rx, lΣ={la,lc,lg,lt} and rΣ={ra,rc,rg,rt}for the l-compatible strings and the r-compatible strings, respectively. clearly, lx⊆ix and rx⊆ix, for all x ∈ Σ.

example  <dig> consider the collection of compomer spectra c∑given in example  <dig>  for the compomer a0c1g1t2∈ca, we have ia ={cgtt,cttg,gctt,gttc,tcgt,tgct,ttcg,ttgc}, and la=ra=∅. for the compomer a0c1g1t0∈ct, we have it=lt=rt=∅.

given a string t which could be a potential cleavage fragment with respect to the cut base x , we say a string s begins with the string t if t · x is a prefix of s · x, or say a string s ends with the string t if x · t is the suffix of x · s. the following lemma is useful to design a dynamic programming algorithm for solving the snp - msp problem. its easy proof is omitted. recall that our discussions in this section are limited only to the feasible solutions containing all the bases of Σ.

lemma  <dig> a string s' of length 
|s| is a feasible solution to the snp - mspproblem if and only if

- all the substrings of s′are i-compatible with c∑,

- s′begins with a string in lx for some x∈∑, and

- s′ends with a string in rx for somex∈∑.

suppose we have an input instance s,c∑ of the snp - msp problem. given a string t∈ix where x∈∑, we define hi, t to be the minimum hamming distance between the prefix of s of length i and a string which is such that

- all its substrings are i-compatible with c∑,

- it begins with a string from ly for some y ∈ Σ, and

- it ends with the given string t.

to compute hi, t, we first find in the string x · t the rightmost position k at which the base  is its first occurrence. formally, we may write

 k=max{j:∀i,1≤i<j≤|x⋅t|,≠}. 

then, let x':= , p := , and q := . note that x' ≠ x and the string p contains all the bases of Σ except x'.

example  <dig> let t := cgtt ∈ ia. then, x · t = acgtt, k =  <dig>  x′=t, p = acg, and q = tt.

to compute h, we now use the following recurrence relation

 h=mint′∈ix′{h+dh}. 

 ∃t″,t′=t″⋅p 

note that the minimization in the above is taken over all those strings t′′ in ix′ which have p as the suffix. if there is no such a string in ix′, then we let h=∞. the initial conditions for the recurrence relation are given as follows:

 h=∞ifi<|t|andt∈ixdhifi=|t|andt∈lx∞ifi=|t|andt∈ix\lx. 

theorem  <dig> let s' be the string that leads to

 dh=min∀t∈rx,x∈Σh, 

then s' would be an optimal solution to the input instance s,c∑of the snp - mspproblem.

proof: for the correctness of the above dynamic programming algorithm, we need to show that  every feasible solution of the snp - msp problem would be essentially evaluated by the dynamic programming algorithm, and  every string evaluated by the dynamic programming algorithm must be a feasible solution of the snp - msp problem.

let the string s' be a feasible solution. consider a cleavage fragment t of s' that contains all the bases of Σ except its corresponding cut base x. clearly, t∈ix and t is the suffix of a substring s' for some integer i. without loss of generality, we can further suppose that t ≠ s'. to show , what we mainly need to show is that there exists a string t′∈ix′ such that p is the suffix of t' and t' is the suffix of the substring s', where x', p, and q are computed for the string t as described earlier. indeed, we can find the string t′ as follows. first, let  be the position of the last occurrence of the base x' in the substring s'; if there is no such occurrence, we let i' =  <dig>  then, we assign t′:=s′. obviously, t′ is the suffix of s'. because s' = x and x ≠ x , we have i' ≤ i - |t|. it then follows from p = s' that p shall be the suffix of t'. since p contains all the bases of  ∑ except x' so, does t'. moreover, t' is a cleavage fragment of s' with respect to the cut base x' because we have either s' = x' or i' =  <dig> on the left end of t' and s' = x' on the right end of t′. by lemma  <dig>  we can see that t′∈ia. for the reader's convenience, we demonstrate in the following example how to find t′ from t. let s' = acatgctacatta, t = s'  <cit>  = tgct, i =  <dig>  x = a, and c∑ be the one as given in example  <dig>  note thatt∈ia. further, for the given string t = tgct, we have x' = c, p = atg, and q = ct. then, we obtain that i' =  <dig> and then t' = s'  = s'  <cit>  = atg. it is easy to check that p is the suffix of t', t' is the suffix of the substring s′, and t′∈ix′.

on the other hand, let s' be a string evaluated by the dynamic programming algorithm. so, the string s' must begin with a string in lx for some x∈∑ and end with a string in ry for some y∈∑. consider a cleavage fragment t of s' that was used to construct the string s' during the backtracking procedure of the algorithm. clearly, the string t contains all the bases of  ∑ except its corresponding cut base x. moreover, t∈ix and t is the suffix of a substring s' for some integer i. without loss of generality, we can further suppose t ≠ s' and i≠|s′|, so that s' = s' = x. let t' be the string considered next to the string t during the backtracking procedure of the algorithm. thus, we have t′∈ix′ such that p is the suffix of t' and t′ is the suffix of the substring s', where x', p, and q are computed for the string t as described earlier. more specifically, there exists i' such that t' = s' and s′ = s'  = x' if i' ≠  <dig>  to show , by lemma  <dig> and also by backward induction, what we mainly need to show is that the extended substring s' is i-compatible with c∑, given that the substring s' is already i-compatible with c∑. to this end, we consider any internal cleavage fragment s' of s'  with respect to the cut base x″ = s' = s'. by definition of the internal cleavage fragment, we have j ≥ i' +  <dig> and k ≤ |s'| −  <dig>  in the following we distinguish four cases:

- if j ≥ i − |t| +  <dig>  then s' is an internal cleavage fragment of s'. since s' is already assumed to be i-compatible with c∑, the base composition of s' shall be also contained in cx″.

- if j = i − |t| +  <dig>  then x″ = x, which further implies that k = i and s'  = t. since t∈ix, the base composition of s' shall be contained in cx″.

- if j ≤ i − |t| and k ≥ i − |q|, then s' is a substring of s'. since s′ contains all the bases of Σ, the string s' can not be a cleavage fragment . therefore, there shall not have the case where j ≤ i − |t| and k ≥ i − |q|.

- if k ≤ i − |q| −  <dig>  then s' is an internal cleavage fragment of t' = s'. since t∈ix′, the base composition of s' shall be contained in cx″.

in conclusion, for every internal cleavage fragment of s', its base composition is contained in c∑ under the respective cut base. therefore, the extended substring s' is still i-compatible with c∑.

note that computing each entry h of the dynamic programming table may take time os ⋅|i∑|, where |i∑|=|ia|+|ic|+|ig|+|it|. hence, the above dynamic programming algorithm can be done in time o. in the worst case, we may have |i∑|=o|s|!, that is, |i∑| is in the factorial order of the input problem size. in practice, however, we would expect |i∑| not too large to be manageable, because cleavage fragments are usually of small size. therefore, the above dynamic programming algorithm could be a practically feasible solution to the problem snp - msp, especially when compared to the brute-force algorithm which needs to examine all the possible strings s'. for the special case where |∑|= <dig>  snp - msp is actually an easy problem, as we can see from the above that |i∑|=o|s|.

corollary  <dig> the above dynamic programming algorithm can solve the snp-msp problem in polynomial time when |∑|= <dig> 

the np-hardness of snp - msq
this subsection is dedicated to prove that the snp - msq problem is np-hard. we begin with a brief introduction of the 3-partition problem.

definition  <dig>  given a multiset of positive integers a={a <dig> a <dig> ⋯,an}where n = 3m and ∑i=1nai=mb, can we partition the multiset a  into m multisets a <dig> a <dig> ⋯,am, such that the sum of each multiset is equal to b?

the 3-partition problem is strongly np-complete  <cit> . therefore, it remains np-complete even when the integers in a  and the integer b are encoded in unary. in this case, the size of a problem instance is Θ. in contrast, it becomes o when using the binary encoding of integers.

definition  <dig>  given a set of positive integers a={a <dig> a <dig> ⋯,an}where n = 3m, ∑i=1nai=mb, and b4<ai<b <dig> ∀1≤i≤n, can we partition the set a into m subsets a <dig> a <dig> ⋯,am, such that the sum of each subset is equal to b?

there are two constraints imposed in the above restricted variation of the 3-partition problem. the first one limits a  to be a set so that all the integers in a  are distinct. the second one limits all the integers in a  strictly between b <dig> and b <dig>  which subsequently enforces every subset ai to consist of exactly three elements. interestingly, this restricted variation of the 3-partition problem remains strongly np-complete  <cit> , just like the general form of the 3-partition problem. note that the second constraint b4<ai<b <dig> was actually not imposed in  <cit> . but, it can be easily done by adding b to each ai and then multiplying b by  <dig> 

theorem  <dig> the snp-msqproblem is np-hard, even when |∑|= <dig> 

proof: we prove it by a reduction from the above restricted variation of the 3-partition problem. as an input for 3-partition, we are given a set of distinct positive integers a={a <dig> a <dig> ⋯,an} where n = 3m, ∑i=1nai=mb, and b4<ai<b <dig> ∀1≤i≤n. then, we construct an instance ⟨s,c∑⟩ of the snp - msq problem as follows:

- let Σ = {g, t}.

- let s be the string such that s · t = m. that is, let s · t be the concatenation of m copies of the fragment gg · · · gt, where each fragment consists of  consecutive base gs followed by one base t. note that |s| = m −  <dig> = mb + 3m −  <dig> 

- let cg={g0t <dig> g0t1} and ct={gait0: 1≤i≤n} so that c∑={cg,ct}.

first, we check whether this construction can be done in polynomial time in the size of the input instance of the 3-partition problem. since the restricted variation of the 3-partition problem is strongly np-complete, we may encode the integers in unary so that the size of the input instance is Θ. in the above reduction, we can easily see that the first step can be done in constant time, the second step in time o, and the third step in time o. therefore, the total time needed for construction is o, no more than time polynomial in the size of the input instance of the 3-partition problem.

next, we show that every feasible solution s″ to the reduced instance s,c∑ of the snp - msq problem is such that  ct=ct,  s″ contains exactly 3m −  <dig> base ts, and  dh  ≥ 2m. for each compomer gait0∈ct⊆ct, there exists at least one cleavage fragment gai in s″ that is obtained with respect to the cut base t. since all the integers ai are distinct, all such cleavage fragments shall be pairwise non-overlapping. thus, the string s′′ contains at least ∑i=1nai=mb base gs and at least n −  <dig> = 3m -  <dig> base ts. on the other hand, since |s| = mb + 3m -  <dig>  the string s″ hence consists of exactly mb + 3m−  <dig> bases. therefore, we can deduce that s″ contains exactly 3m −  <dig> base ts and further that ct cannot have any other compomer than those in ct. by construction, we also know that the string s contains exactly m −  <dig> base ts, which hence implies that dh  ≥ 2m.

now, we are going to show that there exists a valid partition for the input instance of the 3-partition problem if and only if there exists an optimal solution s′ for the reduced instance of the snp - msq problem such that dh  = 2m.

suppose that a  can be partitioned into m subsetsa <dig> a <dig> ⋯,am such that, for each subset ai={ai <dig> ai <dig> ai3}, its size is three and its integer elements adds up to exactly b, that is, |ai=3|and ∑j=13aij=b,∀1≤i≤m. then, we use the following procedure to find the string s':

 <dig>     s′:=∅;

 <dig>     for i =  <dig> to m

 <dig>       for j =  <dig> to 3

 <dig>        s′+=gaijt; // append the string gaijt to s'

 <dig>       end

 <dig>     end

 <dig>     s':= s'; // remove the last base t

as one can easily check, the resulting string s' is such that |s'| = mb + 3m −  <dig>  cg⊆cg, and ct⊆ct. therefore, s' is a feasible solution to the reduced instance s,c∑ of the snp - msq problem. on the other hand, since ∑j=13aij=b,∀1≤i≤m, we can deduce that s' = s if s' = g or s = t; otherwise, s′ ≠ s, ∀k ∈ . therefore, dh  =| ≠ s}| = |s| − |{k : s' = s}| = mb + 3m −  <dig> − |{k : s' = g}| − |{k : s = t}| = mb + 3m −  <dig> − mb − m +  <dig> = 2m. it hence follows that s′ is indeed an optimal solution to the reduced instance s,c∑ of the snp - msq problem.

conversely, suppose that the string s' is an optimal solution to the reduced instance s,c∑ of the snp - msq problem such that dh = 2m. then, we use the following procedure to find a partition a <dig> a <dig> ⋯,am of a:

 <dig>     s := s · t; s':= s' · t;

 <dig>     i := 1; j := 1;

 <dig>     ai:=0̸;aij:=0;

 <dig>     for k =  <dig> to mb + 3m

 <dig>       if s' = t

 <dig>        ai:=ai∪{aij};

 <dig>        j + +;

 <dig>        if s = t

 <dig>         i + +; j := 1;

 <dig>         ai:=0̸;

 <dig>        end

 <dig>        aij:=0;

 <dig>       else

 <dig>        aij++;

 <dig>       end

 <dig>     end

it follows from the earlier discussions that ct=ct={gait0:1≤i≤n} and also that s' contains exactly 3m −  <dig> base ts. furthermore, since dh  = 2m, we can deduce that s' = s if s = t, ∀k ∈ . notice that s = t if and only if k can be written as a multiple of , that is, k = i ∈ , ∀i. therefore, s' = t if k = i ∈ , ∀i, which subsequently implies that ct-1])⊆ct, for each i ∈ . note that s is a substring of s that consists of  base gs; it is located either strictly between two consecutive base ts or strictly between one base t and one end of the string s. since ct +  <dig>  i − 1]) ⊆ ct, we can let ct+ <dig> i-1])={gai1t <dig> gai2t <dig> …,gaijt0} such that ai1+ai2+⋯+aij+j-1=b+ <dig>  since b4<aij<b <dig>  we can deduce that j = 3; hence ai1+ai2+ai3=b. letai={ai <dig> ai <dig> ai3}, for all i ∈ . then, we can see that a <dig> a <dig> ...,am is a partition of a  such that the sum of integers in each subset is equal to b.

extensions to edit distance
naturally we may extend our previous problem formulations to the edit distance . the resulting two new problems are formally defined as follows.

definition  <dig>  given a string s and a collection of compomer spectra c∑={cx:x∈Σ}, find a string s' such that cx∈cx, for all × ∈ Σ and de  is minimized.

definition  <dig>  given a string s and a collection of compomer spectra c∑={cx:x∈Σ}, find a string s' such that cx⊆cx, for all x∈∑and de  is minimized.

these extensions make it possible to detect not only base substitutions but also base insertions and deletions. hence, they would permit the mutation discovery in dna sequences . in the additional file  <dig>  we show that both snp - msp and snp - msq are theoretically np-hard, together with an exact dynamic programming algorithm for solving the snp - msp problem.

CONCLUSIONS
to exploit the full potential of the snp discovery approach using base-specific cleavage and mass spectrometry, in this paper we have studied two new combinatorial optimization problems, called snp - msp and snp - msq, respectively. we believe that any efficient solution to either problem could offer a more seamless integration of information in four complementary base-specific reactions than previously done in  <cit> , thereby improving the capability of the underlying biotechnology  for sensitive and accurate snp discovery.

although we cannot change the inherent complexity of our proposed dynamic programming algorithm for the snp - msp problem, we believe that by improving and optimizing its implementation, the compute runtime can be significantly reduced to the extent suitable for practical use. on the other hand, the np-hardness result indicates that in the most general situation, solving the snp - msq problem exactly in polynomial time is impossible unless p = np. in more realistic situations where only a very few snps  occur in a target sample sequence, however, the problem can be quite easily tackled, e.g., using an exhaustive search approach. in the future work, we shall try to prove that the snp - msp problem is np-hard and develop an efficient heuristic algorithm for the snp - msq problem for practical use.

authors' contributions
xc conceived the study. all authors contributed to the problem analysis, read and approved the final manuscript.

competing interests
the authors declare that they have no competing interests.

supplementary material
additional file 1
extensions to edit distance. the analysis results for the problems snp - mspe and snp - msqe are presented. see "additional file  <dig> pdf".

click here for file

 acknowledgements
we would like to thank yuguang mu and kai tang for introducing us the problem of snp discovery using base-specific cleavage and mass spectrometry. x.c.'s research was supported by the singapore national medical research council grant  and a college of science collaborative research award at ntu. q.w.'s research was supported by national science foundation for young scientists of china . l.z.'s research was supported by the singapore moe acrf tier  <dig> grant .

this article has been published as part of bmc systems biology volume  <dig> supplement  <dig>  2012: proceedings of the 23rd international conference on genome informatics . the full contents of the supplement are available online at http://www.biomedcentral.com/bmcsystbiol/supplements/6/s <dig> 
