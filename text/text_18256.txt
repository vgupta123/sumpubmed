BACKGROUND
the quality and contiguity of genome assemblies, which impacts downstream analysis, varies greatly . initial assembly drafts, whether based on lower coverage sanger or higher coverage next-generation sequencing  reads, are often highly fragmented. physical maps of bacterial artificial chromosome  clones can be used to validate and scaffold sequence assemblies, but the molecular, human, and computational resources required to significantly improve a draft genome are often not available to researchers working on non-model organisms. the bionano irys®;system linearizes and images nicked and fluorescently labeled long dna strands to generate single molecule physical maps. the irys system provides affordable, high throughput physical maps of significantly higher contiguity with which to validate draft assemblies and extend scaffolds  <cit> .

genome assembly and scaffolding algorithms are inherently limited by the length of the dna molecules used as starting material to generate data. specifically, if repetitive, polymorphic or low complexity regions are longer than the single molecules used to generate data, then they cannot be resolved by bioinformatics tools with certainty. the specifications for pacbio p6-c <dig> chemistry  <cit>  indicate that pacbio reads have an n <dig> of  <dig> kb with a maximum length of  <dig> kb. illumina long distance jump libraries can also span  <dig> kb  <cit> . minion nanopore sequence reads have an average read length of < <dig> kb  <cit> . illumina truseq synthetic long-reads can span up to  <dig>  kb; however, they fail to assemble if the sequence has problematic regions longer than the component reads used to assemble the synthetic reads   <cit> . the opgen argus  <cit>  platform produces optical maps that have a length of  <dig> kb to  <dig> mb from up to  <dig> gb data collected per run  <cit> . the irys system from bionano genomics produces single molecule maps that have an average length of  <dig> kb from up to  <dig> gb data collected per run after filtering for molecules <  <dig> kb  <cit> . genomic repeats can be much longer than the 5– <dig> kb that many technologies can span with a single molecule. in fact, a recent study used consensus genome maps  to identify repeats that are hundreds of kb in the human genome  <cit> .

sequence-based assembly methods are fraught with platform-specific error profiles   <cit> . map-based approaches offer an orthogonal genomic resource that complements sequence-based approaches but not their error profiles. for example, map-based error profiles tend to consider errors in estimated molecule or fragment length and errors associated with restriction sites that are too close together, neither of which influence sequence-based approaches  <cit> . both the bionano irys system and opgen argos platform provide single molecule maps from genomic dna. opgen may provide higher resolution maps by using enzymes with a six rather than a seven base pair recognition site, but bionano’s single molecule maps still deliver a more efficient and affordable method for generating whole genome maps.

data formats
the tools described make use of three file formats developed by bionano. the irys system images extremely long molecules of genomic dna that are nick-labeled at seven bp motifs using one or more nicking endonucleases and fluorescently labeled nucleotides. molecules captured in tiff images are converted to bnx format text files that describe the detected label position for each molecule ). the individual molecules described in bnx files are referred to as single molecule maps. consensus map  files include the molecule map lengths and label positions for long genomic regions that are either inferred from assembly of raw single molecule maps ) or in silico from sequence scaffolds ). individual maps in these two types of cmap files are referred to as a consensus genome map or an in silico map, respectively. the alignment between two cmap files is stored as an xmap file that includes alignment coordinates and an alignment confidence score ).
fig.  <dig> data analysis steps.  autodetect analyzes tiff images of molecules and  outputs bnx text files.  sequence scaffolds are digested in silico with fa2cmap_multi producing  in silico maps.  assembleiryscluster uses in silico maps, bnx files and estimated genome size to  normalize molecule stretch and set assembly parameters.  assembler produces  a consensus genome map.  refaligner aligns the consensus genome maps to the in silico maps producing  an xmap alignment file.  xmap, of in silico maps and consensus genome maps  are used by stitch to produce  super scaffolded  sequence scaffolds.  until no more super scaffolds are created the stitched sequence scaffolds are digested in silico with fa2cmap_multi producing  a cmap that is aligned to  the consensus genome maps and steps 10– <dig> are iterated. arrows with dotted rather than dashed lines are used to as input during iterations



other software tools for scaffolding with bionano data
bionano genomics developed the hybrid scaffold tool to create more contiguous consensus genome maps using information from both sequence and bionano genome map data. these more contiguous maps can then be used to create more contiguous sequence assemblies. the hybrid scaffold software first creates hybrid in silico/consensus genome map contigs based on an alignment between the two. the output genome maps are called hybrid scaffolds and are aligned to the original in silico maps. this alignment is used to output a fasta file of sequence super scaffolds. these sequences include seven base pair ambiguous-base motifs to indicate where labels occur within gaps. because they extend into regions with consensus genome maps but without sequence data they may begin or end with gaps. the hybrid scaffold program only generates hybrid in silico/consensus genome map contigs, and therefore super scaffolds, if no conflicts  are indicated in the alignment of in silico and consensus genome maps. in this conservative approach, all conflicting alignments are excluded from the hybrid scaffold genome map and flagged for further evaluation at the sequence level.

motivation
we designed tools and workflows to optimize the use of single molecule maps in the construction of whole genome maps and then use the best resultant consensus genome maps to improve contiguity of draft genome sequence assemblies. single-molecule maps were assembled into bionano genome maps de novo using software tools developed at bionano  <cit> . as with sequence-based assembly algorithms, it was noted that testing a range of assembly parameters can improve final assembly quality for the bionano assembler. additionally, applying error correction to molecule map stretch was found to improve assembly quality. therefore, we created assembleiryscluster to normalize molecule map stretch and automate the writing of assembly scripts that use various parameters. we created the stitch tool to super scaffold sequence-based assemblies using alignments to the optimal bionano genome map. the hybrid scaffold and stitch tools for genome finishing both take alignments from the bionano refaligner as input. both tools were developed simultaneously but were ultimately found to be useful for distinct applications. we validated assembleiryscluster and stitch using the tribolium castaneum genome  <cit>  because this project has genetic map resources  <cit>  that offer independent corroboration. genetic maps were not used as input for stitch. in this case, the super scaffolds created by stitch were compared to the order of scaffolds within chlgs predicted by the genetic map.

implementation
overview
the tools described below take raw molecule maps as input, assemble genome maps, and then use these genome maps to super scaffold draft sequence assemblies. the tool assembleiryscluster generates consensus genome maps for a range of assembly parameters. we developed assembleiryscluster to prepare bnx files for assembly and produce nine customized assembly scripts . next, genome maps from the user-selected best assembly are used by the tool stitch to validate and super scaffold sequence assemblies .
fig.  <dig> assembly workflow for assemble_sge_cluster.pl. a the irys instrument produces tiff files that are converted into bnx text files. b one bnx file is produced for each flowcell on a iryschip. c bnx files are split by scan and aligned to the sequence reference. stretch  is recalculated for each scan from the alignment. d quality check graphs are created for each pre-adjusted flowcell bnx. e adjusted flowcell bnxs are merged. f the first assemblies are run with a variety of p-value thresholds. g the best first assembly  is chosen and a version of this assembly is produced with a variety of minimum molecule length filters

fig.  <dig> steps of the stitch.pl algorithm. consensus genome maps  are shown aligned to in silico maps . alignments are indicated with grey lines. cmap orientation for in silico maps is indicated with a “+” or “-” for positive or negative orientation respectively. a the in silico maps are used as the reference. b the alignment is inverted and used as input for stitch.pl. c the alignments are filtered based on alignment length  relative to total possible alignment length  and confidence. here assuming all alignments have high confidence scores and the minimum percent aligned is  <dig> % two alignments fail for aligning over less than  <dig> % of the potential alignment length for that alignment. d filtering produces an xmap of high quality alignments with short  alignments removed. e high quality scaffolding alignments are filtered for longest and highest confidence alignment for each in silico map. the third alignment  is filtered because the second alignment is the longest alignment for in silico map  <dig>  f passing alignments are used to super scaffold . g stitch is iterated and additional super scaffolding alignments are found using second best scaffolding alignments. h iteration takes advantage of cases where in silico maps scaffold consensus genome maps as in silico map  <dig> does. stitch is run iteratively until all super scaffolding alignments are found



assembleiryscluster: molecule stretch
in the first stage, assembleiryscluster adjusts single molecule map stretch . bionano software operates under the assumption that imaged molecules contain  <dig> bases per pixel . stretch, or bpp, can deviate from  <dig> bpp and this discrepancy can vary from scan to scan within a flowcell . sequence scaffolds are considered to be more accurate than raw bnx molecules in terms of label positions. therefore molecule maps in bnx files are split by scan, and after alignment to the in silico maps, an empirical average bpp value is determined for the molecule maps in each scan. the bpp indicated by this alignment is used by refaligner to adjust molecule map bpp to  <dig>  once stretch has been evaluated and normalized, the split bnx files are merged into a single file .

we observed consistent patterns of empirically determined bpp between flowcells using the same flowcell model and chemistry when signal-to-noise ratios are optimal and the degree of genomic divergence between the samples used for the in silico maps and molecule maps are low . to identify the low quality flowcells, bpp observed in alignments of scans are plotted as a quality control  graph by assembleiryscluster .

assembleiryscluster: customization of bionano assembly scripts
in the next stage, assembleiryscluster creates various assembly scripts to explore a range of parameter sets around the the assembler default parameters with the goal of selecting the optimal assembly for downstream analysis . single molecule maps in the adjusted merged bnx file are aligned to the in silico maps. an alignment error profile generated by refaligner is used with the estimated genome length to calculate default assembly parameters; and the eight other scripts that include variants of these parameters. initially, three assemblies are run, the first with p-valuethresholddefault=1e−5genomelength, the second with p-valuethresholdstrict=p-valuethreshold <dig> and the third with p-valuethresholdrelaxed=p-valuethreshold× <dig> . the minimum molecule length is set to  <dig> kb. if one of these runs does not produce a satisfactory assembly, then two minimum molecule length variants  are tested with the p-valuethreshold of the current best assembly . between three and nine assemblies are run until a satisfactory assembly is produced.

bionano assembly optimization
the ultimate goal is to produce consensus genome maps that can be used to guide sequence-based haploid reference genome assembly. while single molecule maps can be used to reconstruct haplotypes  <cit> , genome assembly involves collapsing polymorphisms arbitrarily into a consensus reference genome. therefore the cumulative length of ideal consensus genome maps should equal the haploid genome length. additionally,  <dig> % of the consensus genome maps would align non-redundantly to  <dig> % of the in silico maps. in practice, the best bionano assembly is selected based on similarity to the estimated haploid genome length and minimal alignment redundancy to the reference in silico maps.

stitch: alignment filters
for each refaligner alignment the user designates a reference file with in silico maps from either a draft or reference quality genome or, if the user is aligning two files that both contain consensus genome maps, then a file of consensus genome maps. additionally, the user specifies a query file with either single molecule maps or consensus genome maps.

we designed the stitch algorithm to use alignments of query consensus genome maps to reference in silico maps in order to predict the higher order arrangement of sequence scaffolds . refaligner assumes the alignment reference has the error profile of in silico maps and the query has the error profile of consensus genome maps. therefore alignments are run with the in silico maps as the reference, and are inverted and sorted by consensus genome map coordinates for efficient parsing by stitch .

before inferring super scaffolds from xmap files, stitch filters low quality alignments by confidence score. alignments of in silico and consensus genome maps are assigned a confidence score that is the −log <dig> of the falsepositivep-value. misaligned labels and sizing error increase the alignment falsepositivep-value and decrease confidence scores  <cit> .

super scaffolds are built from overlapping alignments. overlapping alignments are similar to global alignments, i.e., alignments spanning from end to end for two maps of roughly equal length, but to search for overlap alignment gaps after the ends of either map are not penalized. the refaligner scoring scheme does not currently have a parameter to favor overlapping alignments, e.g., to initialize the dynamic programming matrix with no penalties and take the maximum score of the final row or column in the matrix. refaligner reports local alignments between two maps and applies a fixed penalty based on the user-defined likelihood of unaligned labels at the ends of the alignment. raising or lowering this penalty selects for local or global alignments, respectively, but neither option favors overlapping alignments specifically. stitch filters by the percent of the total possible alignment length that is aligned . to approximate scoring that favors overlapping alignments, stitch uses thresholds for minimum percent of total possible aligned length, the percent aligned threshold .

similar to scoring structures that favor overlapping alignments, pat filters out local alignments. however, unlike a scoring structure, pat is applied after alignment and therefore cannot result in the aligner exploring possible extensions into an overlap but instead favors a shorter local alignment with a higher cumulative score. therefore stitch accepts alignments with less than  <dig> % pat. default values for the pat were determined empirically after reviewing the degree to which filtered alignments agreed with the independently derived genetic maps of t. castaneum and by visual inspection of alignments.

in practice we used two sets of alignment filters and kept alignments that passed one or both sets. the first set had a low pat and a high confidence score threshold. the second set had a higher pat and a lower confidence score and was intended to identify longer overlaps especially in regions of the genome where label density is low.

stitch: super scaffolding
scaffolding alignments are selected from the remaining high quality alignments ). for each in silico map with more than one high quality, scaffolding alignment the longest alignment for the in silico map is selected . if alignment length is identical then the highest confidence alignment is selected. if confidence scores are identical then an alignment is chosen arbitrarily.

gap lengths between in silico maps are inferred from scaffolding alignments and used to create new super scaffolds  in a new genome fasta file and associated agp file. if gap lengths are estimated to be negative, stitch adds a  <dig> bp spacer gap to the sequence file and indicates that the gap is type “u” for unknown in the agp.

stitch only makes use of one alignment per in silico map each iteration. stitch can be run iteratively ) such that each successive output fasta file is converted into in silico maps and aligned to the original consensus genome maps. this alignment is inverted and used as input for the next iteration. subsequent iterations of stitch will make use of any in silico maps that join growing super scaffolds, effectively using both sequence data and genome maps to stitch together the final super scaffolds .

stitch: flagging potential mis-assemblies
this algorithm is meant to be an intermediate refinement of draft genomes prior to further fine scale refinement at the sequence level. inconsistencies between the consensus genome maps and the in silico maps are reported in output logs to facilitate downstream sequence editing. if an alignment passes initial confidence score and pat filtering but has a pat less than  <dig> %, this is reported as a partial alignment. a partial alignment may occur if either the sequence scaffold or the consensus genome map is the result of a chimeric or erroneous assembly. additionally, if a gap length is estimated to be negative, it may indicate that the sequence scaffolds can be joined with a local assembly or that an incorrect assembly needs to be broken within a scaffold. assembly errors in the consensus genome maps or spurious alignments could also result in either of these cases. ideally researchers could make use of the alignment of genomic sequence reads to the genome sequence assembly and the alignment of single molecule maps to the consensus genome maps to determine which assembly is likely to be incorrect.

post analysis: software updates
since completion of the t. castaneum genome update we have released updates for both stitch and assembleiryscluster. stitch  now allows the user to set a minimum negative gap length filter for alignments. in the event that two in silico maps have a negative gap length smaller than this value, which is equivalent to a longer overlap of the sequence scaffolds, stitch will automatically exclude both in silico maps from consideration when super scaffolding. this new feature allows users to further customize the stringency of the stitch output. in addition, bionano genomics has updated assembler to automate per-scan stretch adjustment. finally the ksu k-inbre bioinformatics core has moved to producing assemblies on a xeon phi server with  <dig> threads  and  <dig> gb of host ram + 6× <dig> gb xeon phi ram, and linux centos  <dig> operating system. because of all of these changes we opted to create a new assembly workflow rather than update assembleiryscluster. the most current assembly workflow, assembleirysxeonphi maintains all the functionality of assembleiryscluster  but runs on our new machine with the latest release of the bionano assembler and refaligner.

post analysis: tutorials and complete pipelines
additionally, since completion of the t. castaneum genome update we have created three pipelines for bionano data complete with sample datasets and tutorials. the sewing machine pipeline iteratively super scaffolds genome fasta files with bionano genome maps using stitch.pl and the bionano tool refaligner until no new super scaffolds can be produced. the pipeline runs alignments with both default and relaxed parameters. these alignments are then used by stitch.pl to superscaffold a fragmented genome fasta. the “raw data-to-finished assembly and assembly analysis” pipeline for bionano molecule maps with a sequence-based genome fasta prepares raw molecule maps and writes and runs a series of assemblies for them. then the user selects the best assembly and uses this to super scaffold the reference fasta genome file and summarize the final assembly metrics and alignments. the “raw data-to-finished de novo assembly and assembly analysis” pipeline for bionano molecule maps is for de novo projects. both of the last two pipelines are broken into stages at points were the user must select the best set of parameters from assemblies or alignments that have been run by the pipeline.

RESULTS
dataset generation

high molecular weight dna was isolated from young tribolium castaneum pupae from the ga <dig> line that was inbred  <dig> generations. the ga <dig> line was also used for the genome sequence-based assembly. ethical approval was not sought for the study because the study organism is an insect.

using knickers , an in silico label density calculator, we estimated that the tribolium castaneum genome had  <dig>  and  <dig>  labels per  <dig> kb for the nt.bspqi and nt.bbvci enzymes  respectively. the ideal number of labels per  <dig> kb is between  <dig> and  <dig> therefore we nicked with both enzymes. dna was nicked, labeled with fluorescent nucleotides, and repaired according to bionano protocol; and  <dig> bnx files were produced from the irys genome mapping system . four corrupted files  were excluded from this analysis. all t. castaneum bnx files have been deposited to labarchives .
fig.  <dig> cumulative length per bnx file for t. castaneum data generated over time. cumulative length of single molecule maps >  <dig> kb are plotted on the y-axis , the upgrade to the v <dig> iryschip  is plotted and date is indicated on the x-axis. data was generated from 03- <dig> to 01- <dig>  aborted runs  excluded



the high number of bnx files produced is due to several factors. typically one bnx file is produced per flowcell; however, in certain cases after the initial number of scans, additional scans were run producing an additional bnx file. another reason for the large number of files is that data was originally generated using the iryschip®;v <dig> while the irys system was under beta testing. over time, maximum cumulative length per bnx file increased . after the upgrade to the iryschip v <dig>  an increase was also observed in maximum data per bnx file .

molecule map quality metrics were calculated using bnx_stats . we generated ∼250x coverage of the t. castaneum genome for single molecule maps > <dig> kb, the default minimum molecule map length. the  <dig>  single molecule maps with lengths > <dig> kb had an n <dig> of  <dig>  kb and a cumulative length of  <dig>  gb . histograms of per-molecule quality metrics for maps after applying a minimum length filter of either  <dig>   <dig> and  <dig> kb are reported in additional file  <dig> 


to generate the in silico maps, we used the sequence-based assembly scaffolds from version  <dig>  of the tribolium castaneum genome . version  <dig>   of the t. castaneum genome is an updated version of the sequence assembly that was created by adding  <dig>  mb of sequence to version  <dig>   <cit> . two hundred and twenty-three of the  <dig> scaffolds within tcas <dig>  were longer than  <dig> kb with more than  <dig> labels, the minimum requirements for an in silico map. these longer sequence scaffolds represent the bulk of the sequence assembly,  <dig>  of the  <dig>  mb .t. castaneum assembly summary. assembly metrics for tcas <dig>  , the tcas <dig>  in silico maps, the consensus genome map of assembled molecule maps, the automated output of stitch , the manually curated sequence assembly  and the sequence assembly produced by the bionano hybrid scaffold software for the t. castaneum genome



assembly: selecting the optimal bionano assembly

single molecule maps were assembled de novo into five distinct bionano genome maps for t. castaneum.

molecule maps were prepared for assembly  and noise parameters were estimated  using assembleiryscluster . specifically, assembleiryscluster calculated three “-t” parameters  based on the estimated genome size, and adjusted molecule map stretch and estimated molecule map noise parameters based on alignment to in silico maps. assemblies with these p-value thresholds are named relaxed-t, default-t and strict-t, respectively.

in the first round of selection, the strict-t assembly was the best of these three assemblies because it has a cumulative size close to  <dig> mb , the estimated size of the t. castaneum genome, and a small difference between non-redundant aligned length or breadth of alignment, and total aligned length . thus in the second round of selection, strict-t parameter was used for two further assemblies that had relaxed minimum molecule length  of  <dig> kb rather than the  <dig> kb default or a strict minimum molecule length  of  <dig> kb. the strict-tandstrict-minlen assembly improved alignments by reducing redundancy slightly. however the cumulative length of the assembly was  <dig>  mb smaller than the estimated genome size. the strict-tandrelaxed-minlen assembly had a worse cumulative length and alignment redundancy than the strict-t assembly. because neither of the assemblies using  <dig> or  <dig> kb as the minimum molecule length improved both assembly metrics when compared to the strict-t assembly, generated in the first round of selection with the default minlen of  <dig> kb, the strict-t assembly will be referred to as the t. castaneum consensus genome maps in further analysis.
fig.  <dig> comparison of assemblies from the t. castaneum single molecule maps using five sets of parameters. relaxed, default and strict “-t” parameters were set to 5e- <dig>  5e- <dig> and 5e- <dig>  relaxed, default and strict minimum molecule length were set to  <dig>   <dig> and  <dig> kb



the t. castaneum consensus genome maps have an n <dig> of  <dig>  mb, a cumulative length of  <dig>  mb, and  <dig> genome maps . t. castaneum consensus genome maps aligned to  <dig>  mb of the in silico maps created from the tcas <dig>  assembly validating  <dig> % of the draft sequence assembly . assembly metrics were calculated using the bngcompare script . more detailed assembly metrics for all five assembled consensus genome maps are available in additional file  <dig>  assembled t. castaneum genome maps have been deposited to labarchives .

stitch: automated and manually edited assemblies

tcas <dig>  is the output of stitch  run for five iterations with two sets of alignment filters. to select quality alignments from regions of high and low label density, the first minimum confidence was  <dig> and the pat was  <dig> and the second minimum confidence was  <dig> and the pat was  <dig>  the resulting super scaffolds showed a greater than three-fold increase in n <dig> from  <dig>  to  <dig>  mb .

the tcas <dig>  super scaffolds captured an additional  <dig> gaps between tcas <dig>  sequence scaffolds. sixty-six gaps were estimated to have positive gap lengths and were represented in the sequence assembly with their estimated size . twenty-six gaps were estimated to have negative lengths and were represented with spacers of  <dig> n’s . extremely small negative gap lengths  were flagged for further evaluation at a sequence level. in some cases, extremely small negative gaps lengths suggest that a chimeric sequence scaffold may need to be broken at the sequence level and its fragments incorporated into different chromosome linkage groups . for example, half of scaffold  <dig> from tcas <dig>  aligns between scaffolds  <dig> and  <dig> on chlg <dig>  while the other half aligns between scaffolds  <dig> and  <dig> from chlg <dig> . scaffold  <dig> from tcas <dig>  was placed in chlg <dig> in the t. castaneum genetic map. the arrangement supported by the genetic map was selected for cases like this where manual editing was required. the manually curated assembly is referred to as tcas <dig> . in tcas <dig> , joins were also manually accepted if they agreed with the genetic map but the alignment quality was low. ultimately, tcas <dig>  had a higher n <dig> than the automated stitch output,  <dig>  mb , with  <dig> gaps with positive estimated lengths and  <dig> negative length gaps.
fig.  <dig> histogram of gap lengths in tcas <dig> . positive and negative gaps lengths for tcas <dig>  added to the automated output of stitch.pl based on filtered scaffolding alignments. the majority of gap lengths added by stitch.pl,  <dig>  were positive . the remaining  <dig> gaps had negative lengths 

fig.  <dig> extremely small negative gap length for in silico map of scaffold  <dig>  two xmap alignments for in silico map of sequence scaffold  <dig> are shown. consensus genome maps  align to the in silico maps of scaffolds . sequence scaffolds 79– <dig> were placed within chlg  <dig> and sequence scaffolds 99– <dig> were placed with chlg  <dig> by the t. castaneum genetic map. a half of the in silico map of sequence scaffold  <dig> aligns with its assigned chlg . b the other half aligns with chlg  <dig>  producing a negative gap length smaller than - <dig> kb. the alignment that places sequence scaffold  <dig> with chlg  <dig> disagrees with the genetic map and was manually rejected for tcas <dig> 



nearly every chlg was less fragmented in the tcas <dig>  assembly than in the tcas <dig>  assembly. the number of scaffolds was reduced for each chlg  except for the  <dig> relatively short  and unlocalized scaffolds from chlgy. for example, chlgx was reduced from  <dig> scaffolds  to  <dig> in the final super scaffold or chromosome build . five scaffolds were reoriented in chlgx based on alignment to the consensus genome maps . scaffolds were also reordered based on alignment to consensus genome maps. for example, scaffold  <dig> from chlgx aligned between scaffold  <dig> and  <dig> of chlg  <dig> and was therefore moved in tcas <dig>  . also,  <dig> previously unplaced scaffolds were anchored within a chlg . improvements in tcas <dig>  over tcas <dig>  are shown in alignments of the respective in silico maps to consensus genome maps for all chlgs in additional file  <dig> 
fig.  <dig> chlgx before and after super scaffolding with stitch and hybrid map creation by hybrid scaffold. a alignment of tcas <dig>  in silico maps to consensus genome maps for chlgx. b alignment of tcas <dig>  in silico maps to consensus genome maps for chlgx. c alignment of hybrid genome maps to consensus genome maps for chlgx. consensus genome maps are blue with molecule map coverage shown in dark blue). the in silico maps are green with contigs overlaid as translucent colored squares. only in silico maps that align are displayed in irysview. the single hybrid scaffold created for chlgx is shown . only new “hybridized” maps are shown in irysview. labels and alignments of labels are indicated with grey lines



the tcas <dig>  whole genome shotgun project has been deposited at ddbj/embl/genbank under the accession aajj <dig>  the version described in this paper is version . two scaffolds were removed from the genome assembly because they were identified as contaminants after they blasted to the bos frontalis genome.

assembly: putative haplotypes

evidence of putative haplotypes was found during visual inspection of alignments. although overall alignment redundancy was rare for the strict-t assembly; when observed, it usually consisted of only two consensus genome maps aligning to the same in silico map . this redundancy might indicate collapsed repeats in the sequence-based assembly. on the other hand it could also indicate segmental duplications, assembly of alternative haplotypes, or mis-assembly producing redundant consensus genome maps. in fig. 9a, two consensus genome maps aligned to the same in silico map. one consensus genome map aligned across most of the in silico map while only a small region of the other consensus genome maps aligned to the the in silico map . molecule map coverage decreased for each consensus genome map in the region where only one of them aligned to the in silico map . taken together, the region of lower coverage and the number of consensus genome maps aligning  may indicate the assembly of two haplotypes.
fig.  <dig> putative haplotypes assembled as consensus genome maps. a two consensus genome maps  align to the in silico map of scaffold  <dig> . b and c both consensus genome maps are shown  with single molecule pileups . both consensus genome maps have similar label patterns except within the lower coverage region indicated with a black square



stitch: comparison to other software

we also ran hybrid scaffold  to improve the t. castaneum sequence assembly using the t. castaneum consensus genome maps and the in silico maps from tcas <dig> . although hybrid scaffold improved the scaffold n <dig> of the sequence-based assembly from  <dig>  to  <dig>  mb, the increase in n <dig> was not as great as the increase after running stitch  . the total number of scaffolds in the sequence assembly decreased by  <dig> after running hybrid scaffold; in comparison, stitch reduced the number of scaffolds by  <dig>  stitch increased the length of the assembly by  <dig>  mb while hybrid scaffold increased assembly length by  <dig>  mb. the additional increase in length from hybrid scaffold is likely due to extension of sequence-based scaffolds with end gaps introduced from genome map contigs that overlap the start or end of a sequence-based scaffold.

overall, we found hybrid scaffold to be more conservative than stitch. for example in fig. 8b, the alignment of  <dig> in silico maps to three consensus genome maps was input into both stitch and hybrid scaffold. in this alignment, the order of  <dig> of these in silico maps agreed with the order suggested by the genetic map . the in silico maps  <dig> and  <dig> aligned with a negative gap length between them, suggesting they may be mis-assembled or that local assembly may collapse the assembly in this region. there are several possible approaches when considering this kind of conflicting evidence. the approach of stitch was to record that we have confirmed the relative position of these scaffolds in the larger context of the genome by creating a new super scaffold containing  <dig> bp spacer gaps to indicate that exact overlap or gap length is unclear . stitch also reports the negative gap length to indicate the need for further sequence level evaluation at a later date. alternatively, hybrid scaffold only automates genome improvements that are unambiguously supported by all lines of evidence  and leaves any ambiguous decisions to a human curator. therefore, hybrid scaffold would only report the conflicting alignment. this is why scaffold  <dig>  for example, is not included in the hybrid map produced by hybrid scaffold .

for highly refined genome assemblies, this lack of tolerance for noisy alignments has not hindered improvement of genome projects. however, for less refined genome assemblies this may be too stringent. the hybrid scaffold software, for example, was developed to scaffold the human genome and has been found to work well for this application. genome projects at earlier stages would benefit from staged release of updates . for projects such as t. castaneum, a more aggressive algorithm such as stitch may be preferred in order to release the bulk of the new information about the higher order arrangement of the genome to the community of t. castaneum researchers quickly. further refinement at a sequence level can be released in subsequent genome updates as they are completed.

stitch: assembly and super scaffolding with multiple genera

we examined experiments from  <dig> different genera to determine if the results seen for the tribolium castaneum genome are typical for other genomes as well. the t. castaneum genome map n <dig> was found to be in the high end of the probability density distribution . the same is true for the tcas <dig>  draft sequence assembly n <dig> and percent of n <dig> improvement after super scaffolding compared to the other  <dig> of  <dig> total projects that had draft sequence genomes . however, in no case was the t. castaneum value the highest value recorded, suggesting that a wide range of output quality is possible including values better and worse than the output for t. castaneum.

we checked for evidence of correlations between a range of genomic metrics and map assembly, alignment or fasta super scaffolding results. because many of the genomic metrics had very broad ranges with variance that increased often for higher values the genomic metrics were log transformed to compress the upper tails and stretch the lower tails of the distributions.

overall we found little correlation between either sequence fasta n <dig>  molecule map coverage or molecule map label density and final genome map n <dig>  we did, however, find correlations between finished map and sequence assembly metrics and alignment and super scaffolding quality. there is a positive correlation between high value sequence assembly metrics and in silico map-to-genome map alignment metrics  as well as post super scaffolding n <dig> improvement . there is also a positive correlation between high value genome map assembly metrics and post super scaffolding n <dig> improvement . however, no direct correlation was found between sequence assembly n <dig> and genome map n <dig> . taken together the analysis suggests different factors may determine sequence assembly and genome map assembly quality. although sequence assembly n <dig> may not be useful to predict genome map n <dig>  if both independent assemblies have high n50’s than more of the map lengths may align and super scaffolding may be more productive.

the low degree of correlation found between genome map n <dig> and sequence n <dig> may stem from steps unique to the molecule map imaging process. it might be expected that a genome with sequence that assembles well may have qualities that would also favor molecule map assembly . however molecule map assembly is also influenced by unique factors like frequency of fragile sites , labeling efficiency and ability to extract high molecular weight dna all of which vary for different organisms.

principal component analysis  suggests a negative correlation between labels per  <dig> kb and molecule coverage . the correlation between labels per  <dig> kb and molecule coverage was weakly significant in individual regression . labels per  <dig> kb are monitored as molecules are being imaged. lower than expected label density can occasionally lead to further labeling reactions or other adjustments to data collection and therefore greater depth of coverage.

overall, comparison of the results for the t. castaneum genome and  <dig> additional genome projects suggest that results may vary widely from project to project. many factors may contribute to this effect including the quality of the sequence assembly, degree of divergence between the organism or organisms used to extract dna, success of extraction and labeling of high molecular weight dna, genome size and genome complexity. in fact, the tendency for assemblies from the same genera or species to cluster together on the pca plots suggests that organism-specific qualities may influence assembly, alignment or super scaffolding results . although analysis of more projects is needed to determine if these similarities are meaningful predictors of output quality.

CONCLUSIONS
we introduced new tools to facilitate single molecule map assembly optimization and genome finishing steps using the resultant consensus genome maps. these tools were validated using the medium-sized  t. castaneum beetle genome. the tcas <dig>  genome was assembled using the gold-standard sanger assembly strategy  <cit> . the tcas <dig>  assembly benefitted from the use of longdistance illumina jump libraries to anchor additional scaffolds and fill gaps. despite this, we were able to more than triple the scaffold n <dig> by leveraging the optimal consensus genome maps and stitch. we demonstrated that the assembleiryscluster method of optimization and stitch can be used together to improve the contiguity of a draft genome.

as the variety of genome assembly projects increases, we are discovering that tools appropriate for all projects  do not exist. indeed, the results of assemblation <dig> indicate that no one suite of datatypes or assembly workflow may be sufficient to best assemble even the subcategory of vertebrate genomes  <cit> . here we described two software tools and many shorter scripts to summarize and work with these new data formats. however, we anticipate the development of a variety of bioinformatics tools for extremely long, single molecule map data as more applications for these maps are explored.

some draft assemblies may currently be too fragmented to align to genome maps assembled from single molecule maps. however as ngs genome assemblies improve from longer read advancements existing genome maps may become useful for scaffolding new or updated sequence assemblies.

regions where consensus genome maps disagree with sequence assemblies  are flagged by stitch for investigation at a sequence level. bioinformatics tools that could automate assembly editing based on such discrepancies are needed to fully support genome improvement with consensus genome maps.

availability and requirements
pipelines and tutorials
project name: sewing machine pipelineproject home page: the sewing machine script and tutorial are available at https://github.com/i5k-kinbre-script-share/irys-scaffolding/blob/master/ksu_bioinfo_lab/stitch/sewing_machine_lab.md.operating system: linux .programming language: perl, rscript, bashlicense: pipeline script and tutorial are available free of charge to academic and non-profit institutions.any restrictions to use by non-academics: please contact authors for commercial use.dependencies: sewing machine requires bioperl and bngcompare. refaligner is also required between iterations and can be provided by request by bionano genomics http://www.bionanogenomics.com/.project name: “raw data-to-finished assembly and assembly analysis” pipelineproject home page: the pipeline script and tutorial are available at https://github.com/i5k-kinbre-script-share/irys-scaffolding/blob/master/ksu_bioinfo_lab/assemble_xeonphi/assemble_xeonphi_lab.md.operating system: xeon phi server with  <dig> threads  and  <dig> gb of host ram +6× <dig> gb xeon phi ram, and linux centos  <dig> programming language: perl, rscript, bashlicense: pipeline script and tutorial are available free of charge to academic and non-profit institutions.any restrictions to use by non-academics: please contact authors for commercial use.dependencies: assembleirysxeonphi.pl and assembleiryscluster.pl requires drmaa job submission libraries. refaligner and assembler are also required and can be provided by request by bionano genomics http://www.bionanogenomics.com/.project name: “raw data-to-finished de novo assembly and assembly analysis” pipelineproject home page: the pipeline script and tutorial are available at https://github.com/i5k-kinbre-script-share/irys-scaffolding/blob/master/ksu_bioinfo_lab/assemble_xeonphi/assemble_xeonphi_de_novo_lab.md.operating system: xeon phi server with  <dig> threads  and  <dig> gb of host ram +6× <dig> gb xeon phi ram, and linux centos  <dig> programming language: perl, rscript, bashlicense: pipeline script and tutorial are available free of charge to academic and non-profit institutions.any restrictions to use by non-academics: please contact authors for commercial use.dependencies: assembleirysxeonphi.pl and assembleiryscluster.pl requires drmaa job submission libraries. refaligner and assembler are also required and can be provided by request by bionano genomics http://www.bionanogenomics.com/.

assembly scripts
project name: assembleirysxeonphi.pl/assembleiryscluster.plproject home page: assembleirysxeonphi scripts are available at https://github.com/i5k-kinbre-script-share/irys-scaffolding/blob/master/ksu_bioinfo_lab/assemble_xeonphi/assembleirysxeonphi.pl. the currently unsupported assembleiryscluster scripts are available on github at https://github.com/i5k-kinbre-script-share/irys-scaffolding/tree/master/ksu_bioinfo_lab/assemble_sge_clusteroperating system: xeon phi server with  <dig> threads  and  <dig> gb of host ram +6× <dig> gb xeon phi ram, and linux centos  <dig> and sge linux  cluster respectivelyprogramming language: perl, rscript, bashlicense: assembleirysxeonphi and assembleiryscluster.pl is available free of charge to academic and non-profit institutions.any restrictions to use by non-academics: please contact authors for commercial use.dependencies: assembleirysxeonphi.pl and assembleiryscluster.pl requires drmaa job submission libraries. refaligner and assembler are also required and can be provided by request by bionano genomics http://www.bionanogenomics.com/.

super scaffolding scripts
project name: stitch.plproject home page: stitch scripts are available on github at https://github.com/i5k-kinbre-script-share/irys-scaffolding/tree/master/ksu_bioinfo_lab/stitchoperating system: mac and linux programming language: perl, rscript, bashlicense: stitch.pl is available free of charge to academic and non-profit institutions.any restrictions to use by non-academics: please contact authors for commercial use.dependencies: stitch.pl requires bioperl. refaligner and assembler are also required between iterations and can be provided by request by bionano genomics http://www.bionanogenomics.com/.

map summary scripts
project name: bngcompare.pl, bnx_stats.pl, cmap_stats.pl and xmap_stats.plproject home page: all scripts are available on github at https://github.com/i5k-kinbre-script-share/irys-scaffolding/tree/master/ksu_bioinfo_lab/map_tools and https://github.com/i5k-kinbre-script-share/bngcompareoperating system: mac and linux programming language: perl, rscript, bashlicense: bnx_stats.pl, cmap_stats.pl and xmap_stats.pl are available free of charge to academic and non-profit institutions.any restrictions to use by non-academics: please contact authors for commercial use.dependencies: bnx_stats.pl, cmap_stats.pl and xmap_stats.pl have no dependencies.

additional files
additional file  <dig> 
single molecule map stretch per scan in recent flowcells. bases per pixel  is plotted for scans  <dig> .n for each flowcell of mouse lemur molecules . the first scan of each flowcell is indicated with a grey dashed line. the pre-adjusted molecule map stretch was determined by aligning molecule maps to the in silico maps. data made available by p.a. larsen, j. rogers, a.d. yoder and the duke lemur center. 



additional file  <dig> 
cumulative length and number of single molecule maps per bnx file for
t. castaneum
 data generated over time. detailed metrics for molecule maps per bnx file . columns include cumulative length of molecule maps >  <dig> kb, number of molecule maps >  <dig> kb and date that bnx file was generated. 



additional file  <dig> 
single molecule map metrics and histograms from
t. castaneum
 dna. detailed metrics for molecule maps including map n <dig>  cumulative length and number of maps. figures show histograms of per molecule map quality metrics including length, molecule map snr and intensity, label count, label snr and label intensity. molecule maps are filter for minimum molecule lengths of  <dig>   <dig> or  <dig> kb. 



additional file  <dig> 
assembly of
t. castaneum
 consensus genome maps with range of parameters. detailed assembly metrics for assembled consensus genome maps using strict, default and relaxed “-t” parameter, p-value threshold are named relaxed-t, default-t and strict-t respectively. the best “-t” parameter was used for two additional assemblies with either relaxed minimum molecule map length  of  <dig> kb, rather than the  <dig> kb default, or a strict minimum molecule map length  of  <dig> kb. 



additional file  <dig> 
chlgs before and after super scaffolding. alignments of tcas <dig>  and tcas <dig>  in silico maps to consensus genome maps for all chlgs. consensus genome maps  aligned to the in silico maps . alignment to both tcas <dig>  super scaffolds  and tcas <dig>  scaffolds  are shown. 



additional file  <dig> 
assembly and super scaffolding with multiple genera. we examined experiments from  <dig> different genera to determine if the results seen for the tribolium castaneum genome are typical for other genomes as well. 



abbreviations
ngsnext-generation sequencing

bacbacterial artificial chromosome

qcquality control

patpercent aligned threshold

chlgchromosome linkage groups

pcaprincipal component analysis

competing interests

the jms, mcc, nh, nl, and sjb declare that they have no competing interests. etl, ps and ta are employees at bionano genomics and hold stock options.

authors’ contributions

mcc isolated the high molecular weight dna and generated the image files on the irys. etl and jms developed the assembly workflow. jms wrote most of the code in the irysscaffolding github repo . nh assisted with initial code review of analyze_irys_output  and prepared tcas <dig> . jms and nl manually edited tcas <dig> . jms performed the data analyses. ta contributed to sections discussing bionano refaligner and assembler. ps contributed to interpretation of results. jms and sjb did most of the writing with contributions from all authors. all authors read and approved the final manuscript.

