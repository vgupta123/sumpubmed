BACKGROUND
hidden markov models   <cit>  are probabilistic models utilized in pattern recognition problems. hmms were initially used for speech recognition tasks  <cit> . nowadays, hmms are being applied successfully to several molecular biology problems, including gene finding  <cit> , multiple sequence alignment  <cit> , protein structure prediction  <cit> , and many others. one particularly important application of hmms is in remote homology detection between protein sequences. remote homology detection is the problem of finding homology between sequences, when the actual sequence identity is low . hmms can be used by first training an hmm to represent a group of homologue sequences, and then matching a sequence against this hmm. the hmms used to represents groups of homologues sequences are called profile hidden markov models   <cit> . several studies have shown phmms to perform better than methods based on sequence similarity only  <cit> , such as blast  <cit>  and fasta  <cit> , and than methods based on position-specific scoring matrices   <cit> , such as psi-blast  <cit> .

a phmm is therefore a probabilistic model built from a multiple alignment of related sequences. the two major programs that apply phmm for remote homology detection are hmmer  <cit>  and sam  <cit> . both programs are widely used within the bioinformatics community. namely, hmmer was used to build the pfam database  <cit> , and sam was used to build super-family  <cit> . in these tools, an alignment is represented by creating a sequence of nodes, usually one node per alignment column. each node is composed of three states: match , insert  and delete . match states model conserved regions in the alignment. insert and delete states model indel regions.

profile hmms have probabilities on two events: a transition from a state to another state, and the probability that a specific state will emit a specific character . only match and insert states generate characters. delete states are quiet. therefore, each match and insert state has an emission probability distribution. in the case of proteins, the distribution will have  <dig> entries, one per amino acid.

transitions define the structure of the phmm. systems such as sam  <cit>  allow transitions between all types of states, totaling  <dig> transitions per state, hence  <dig> per node. this is not always the case, the hmmer system relies on the plan <dig> model  <cit> , which disallows i → d and d → i transitions.

performance of a phmm critically depends on the quality of the estimated emission and transition probabilities. emission probabilities are obtained by counting amino-acid frequencies at each match column. unfortunately, the global alignment will usually have too few sequences to estimate all the parameters with sufficient confidence. priors, such as mixtures of dirichlets components  <cit> , are used to compensate for the small sample size and avoid over-fitting. a second major issue when estimating parameters is the relationship between the sequences themselves. clearly, the information that a residue is better conserved across a number of very different sequences should carry more weight than the information the residue is conserved across a large number of very similar sequences. most phmms thus include a sequence weighting step, which may be based on sequence trees, as in hmmer  <cit> , or in entropy, as in sam  <cit> . in all cases, closer sequences carry less weight than more divergent sequences. last, notice that the total weight of the sequences governs how much we trust the sequences versus the prior. increasing the total weight of the sequence counts over the priors reinforces our trust in the sequence data, but may lead to over-fitting.

to the best of our knowledge, madera and gough were the first ones to systematically compare the performance of the two systems  <cit> . their comparison studied the performance of the two tools over two protein families, globins and cupredoxins, using the nrdb <dig> database  <cit> , and in an all-against-all experiment in the scop database  <cit> . several alignment strategies were used, including: manual alignment on globins and cupredoxins, sam-t <dig>  <cit>  seeded from a single protein, wu-blast  <cit>  search from the seed protein followed by clustalw  <cit> . the authors show that the initial multiple alignment can significantly affect performance, and that the t <dig> package generates good quality multiple alignments. their results further suggested that sam had better model quality than hmmer. wistrand and sonnhammer  <cit>  further evaluated the two systems. the experiments relied on scop for a high quality database of labeled hierarchies of protein domains. the authors explicitly avoided conditioning on the use of particular programs to perform the initial multiple alignment. instead, they used the pfam alignment database. the authors concluded that sam's model estimation is superior, due to a better usage of priors, which avoids over-fitting. on the other hand, hmmer's model scoring is more accurate, probably due to a better null model.

madera and gough's work showed the importance of multiple alignment for hmmer performance. it has been observed that protein three-dimensional structures are remarkably stable with respect to amino acids sequences  <cit> . this suggests that alignments derived from structural information should identify motifs and functional residues accurately. in this direction, jones and bateman  <cit>  assessed the performance of phmms derived of structural alignments versus sequence alignments. the benchmark was obtained from the pfam and homstrad  <cit>  databases. homstrad is a curated database of structure-based alignments for homologous protein families and pfam is a large collection of multiple sequence alignments and hidden markov models covering many common protein domains and families. to build up a mapping of homstrad and pfam families, the sequences of each homstrad family were searched against pfam using hmmer. each homstrad family was thus made to correspond to a single pfam family. theses pfam memberships were considered the true positive data set. to provide sequence alignments, the sequences of each homstrad family were realigned using clustalw and tcoffee  <cit> . the authors concluded that the use of structure information to increase alignment accuracy does not aid homologue detection with phmms. however, their experiments considered sequences with different degrees of identity, from 20% up to the 80%, and the author did not applied his experiments to proteins in the twilight zone, where identity between amino-acids sequences is a weaker indicative of the evolutionary relationship.

this study investigates the contribution of using structural alignments to build phmms for remote homology detection. therefore, our experiments consider proteins with identity below 30%. we performed our studies by analyzing the performance of these tools on scop super-families. under these conditions, we show that phmms derived from structural alignments perform significantly better than phmms derived from sequence alignments. we show that accuracy alignment is not directly related to alignment identity. although structural alignments often present smaller identity than sequence alignments, the best quality alignments based on structural information are generally considered to derive from structural superposition. we compare the performance of two hmms packages, hmmer and sam, when the two different kind of alignments were used. our results show that hmmer based on structural alignment to outperform sam for such remote homologues.

methods
we compare sequence-based and structure-based multiple alignment packages on the scop protein database. we evaluated experimentally the performance of the hmmer and sam packages using alignments from four sequence and two structural multiple-alignment packages. all data sets and perl scripts used in this study are freely available from the web site  <cit> .

multiple alignment tools
we used clustalw  <cit> , tcoffee  <cit> , mafft  <cit> , and probcons  <cit>  packages to provide sequence alignments based on primary structure. clustalw is one of the most widely used tools for multiple sequence alignment. tcoffee has been reported to achieve significantly better quality alignments than clustalw  <cit> . mafft is a series of five progressive alignment programs, we used l-ins-i, an algorithm based progressive alignment with iterative refinement. we used the 3dcoffee  <cit>  and mammoth-mult  <cit>  packages to provide structural alignments. 3dcoffee extends tcoffee with structural alignment information. mammoth-mult is a package that seems to achieve good performance by focusing on structural information.

clustalw is a progressive alignment algorithm  <cit> . first, it derives a guide tree and then uses a greedy search over aligned clusters of sequences. although, it perform faster and uses less memory than other programs, arguably it is less accurate or scalable than modern ones.

t-coffee also implements a progressive alignment algorithm. however, it tries to improve the quality of the initial pair-wise sequence alignment by considering the alignment between all the pairs as it executes every step in the progressive alignment algorithm. it presents high accuracy while sacrifices computation time and memory usage.

the mafft package includes five alignment programs. we used the recommended option, in this case, l-ins-i, that uses progressive aligner followed by iterative refinement.

probcons uses a combination of probabilistic modeling and consistency-based alignment techniques. it introduces a novel scoring function, probabilistic consistency, based on paired hidden markov models. alignments are still performed progressively but a post-processing refinement step may apply.

the 3dcoffee aligner is based on tcoffee, but it uses pairwise structure comparison to improve accuracy. pairwise structure comparison is performed by sap if both structures are known  <cit> . if only one structure is known, 3dcoffee uses the fugue threading method  <cit> .

mammoth is a progressive multiple alignment program that uses a sequence independent heuristic to obtain a fully structural alignment. it starts from a cα trace to obtain an alignment. second, it finds an alignment of local structures based on computing a similarity score from the urms metrics. third, it finds similar local structures with their cα close in cartesian space.

profile-hmms
we compare two arguably major profile hidden markov model  packages, hmmer and sam.

the hmmer package was developed at the sean eddy's lab, university of washington saint-louis. it provides an open-source environment based on phmms for protein sequence analysis. besides the pfam database, hmmer is also at the heart of other databases, such as tigrfams  <cit> , and smart  <cit> . in this work we used hmmer version  <dig> . <dig>  updated in  <dig>  hmmer requires at least two stages: model building and scoring. a third, recommended but optional stage, is model calibration: we have used it in this study.

in model building, hmmer distinguishes match alignment columns and insert alignment columns. hmmer assigns columns to match or insert states so as to maximize the posterior probability of the aligned sequences, given the model. by default, hmmer uses a dirichlet mixture with  <dig> components for priors. scoring was performed using the viterbi algorithm. we used hmmbuild procedure to build hmmer models, and the hmmsearch for score. in our experiments we used hmmer default parameters.

the sam package was developed at the university of california santa cruz; it is not open source but is free to academic use. one of the major sam differences with respect to hmmer is the sam-t2k script. this is an iterative procedure to generate multiple alignments and hmms starting from a single sequence  <cit> . moreover, the sam team has worked on improving sam through using information on structure protein  <cit> , and prior probabilities  <cit> . sam uses a standard profile hmm architecture with  <dig> transitions. each alignment column correspond a node . in other words, sam does not distinguish between match and insert columns. sam uses a dirichlet mixture with  <dig> components for priors and by default scores using the forward algorithm. we used modelfromalign to build the models and hmmscore to compute. in our experiments we used sam default parameters.

experimental methodology
our experiments require structure coordinates for protein sets with low sequence identity. therefore we used the scop database  <cit> , version  <dig>  with  <dig> proteins sequences. scop is a manually inspected database of protein folds, and is particularly interesting for our study because it describes structural and evolutionary relationships between proteins, including all entries in the protein data bank  <cit> . scop is thus an excellent data-set for evaluating the performance of remote homology detection methods, and it has been widely used for that purpose  <cit> . scop classifies all protein domains of known structure into a hierarchy with four levels: class, fold, super family, and family. in our study, we work at the super family level, which groups families such that a common evolutionary origin is not obvious from sequence identity, but probable from an analysis of structure and from functional features. we believe that this level best represents remote homologies.

throughout, we used cross-validation  <cit>  to compare the different approaches. first, we divided scop database by super family level. next, from astral pdb <dig>  we choose those super families containing at least two families and at least  <dig> sequences. we eventually tested  <dig> super families, as listed in table  <dig>  this whittled down the number of sequences we use for model building to  <dig>  third, we implemented leave-one-family-out cross-validation. for any super family x having n families, we built n profiles, such that each profile p was built from the sequences in the remaining n -  <dig> families. thus, the n -  <dig> sequences form the training set for profile p. the test set for profile p will be the remaining sequences  plus all other database sequences .

scop super-families used in our experiments. we only consider super-families with at least  <dig> proteins and two or more families.

note that in our experiments, none of the sequences in a test set had >30% sequence identity with any protein in the corresponding training set. results were graphically analyzed by building roc. we experimented with e-values between 10- <dig> and  <dig> to obtain the curves. finally, we have used the paired two tailed t-test to assess significance. we consider a result with p ≤  <dig>   to be significant.

RESULTS
alignment profile
as a first step, we categorize our alignment data set according to both the number of sequences, and the average length of sequences within scop super-family. in our data set, the number of sequences per super-family ranges from  <dig> sequences in the smallest super-family up to  <dig> sequences for the largest super-families. in average, we worked with  <dig> sequences per alignment. comparing with previous work on aligning families  <cit> , we observe that super-families give us much more training examples to construct the phmms. regarding sequence length, the average sequence length within scop super-families is well distributed in the interval between small sequences with less than  <dig> residues to large sequences with up to  <dig> residues. in average, we worked with sequences of  <dig> residues.

next, we discuss alignment profile as measured by sequence identity, by alignment length and by percentage of gaps. table  <dig> shows the average gap percentage and average alignment length in the alignments obtained from the six alignment tools in our study: clustalw, tcoffee, mafft, probcons, 3dcoffee, and mammoth.

first, we assess average alignment length. clustalw seems to generate the smallest alignments, with in average  <dig> residues. mafft and mammoth generate longer alignments, in average around  <dig> residues. the longest alignments are generated by probcons followed by coffee family. notice that 3dcoffee generates somewhat longer alignments than tcoffe. next, we measure the percentage of gaps within alignments. clustalw introduced the smallest gap percentage. mafft produced alignment with less gaps than mammoth. the coffee family and probcons present the longest alignments and have the highest percentage of gaps.

next, we compared sequence identity within alignments. the figure  <dig> shows average identity by alignment for the six alignment tools in our study. the figure shows that sequence identity is low as expected, most often below 30%. in fact, average identity as recognized by probcons is of  <dig> %, with  <dig> % for tcoffee,  <dig> % for mafft,  <dig> % for 3dcoffee, mammoth with 12%, and only  <dig> % for clustalw. figure  <dig> does show that the probcons tool generates alignments with "most identity". indeed, it can recognize a number of alignments with more than 30% identity. probcons also seems to produce alignments well distributed into all identity ranges. tcoffee performs almost as well as probcons. most mafft alignments are below 12% identity, but it can recognize alignments with up to  <dig> % of identity. on the other hand, clustalw seems to perform badly on a large number of cases. most clustalw alignments recognize between  <dig> % and 10% identity and clustaw further shows the lowest identity average. as regards the structural alignment tools 3dcoffee recognizes more identity than mammoth, but the less than the related tool, tcoffee. mammoth recognizes less identity than 3dcoffe.

gap introduction is clearly related with alignment length, and thus with identity. in general, sequence alignment tools need to introduce gaps to preserve identity across sequences. as a case in point, probcons achieves the highest average identity, but 60% of probcons alignments were gaps. we observed a similar pattern in tcoffee alignments. mafft achieves less identity but also introduces few gaps. analogously, clustalw presented the lowest identity average, and also introduced the smallest number of gaps in its alignments. comparing the structural alignments, 3dcoffee achieved higher average identity than mammoth, and also introduces more gaps than mammoth. a pearson test shows the correlation between alignment percentage and gaps to be indeed quite high, at 94%.

hmmer performance
we assessed hmmer performance using multiple alignments generated by clustalw, tcoffee, mafft, probcons, 3dcoffee, and mammoth. for a super-family with n elements, the results indicate whether models trained on n -  <dig> families can predict the sequences in the remaining family. please see the methods section above for further discussion on the experimental methodology.

paired two-tailed test results when comparing performance of hmmer alignments for all the multiple alignment tools.

for better understanding, we further partition our results according to identity ranges. given that our best results were obtained from hmmer-3dcoffee, we rely on 3dcoffee as our measure of sequence identity.

figures 3-a to 3-d show roc curves for sequences interposed in 5% sequence identity intervals . all tools do very badly when identity is below 10%. hmmer-3dcofee and hmmer-mammoth dominate the other tools on the range 10–15%. sequence based aligners perform similarly, except for clustalw: models trained with hmmer-clustalw alignment have very low sensitivity. on the range 15–20% hmmer-3dcoffee alignments perform clearly better than the other tools. the difference is less clear for hmmer-mammoth, especially for low specificity. notice the clear difference between hmmer-3dcoffee and hmmer-tcoffee at this range. models trained from clustalw still have lower sensitivity, but the gap is less clear. last, above 20% the difference between tools is not very clear, tools tend to have similar recalls as we lower specificity. notice that both hmmer-coffee tools now perform quite similarly and that hmmer-clustalw also achieves results similar to the other tools.

sam performance
we assessed sam performance using default parameters. we use the roc curves in figure  <dig> to show overall performance. table  <dig> further shows t-test results. a first observation is that sam recognizes much less true positives than hmmer. sam recognizes around  <dig> true positives for  <dig> false positives, whereas hmmer recognizes more than  <dig> true positives at the same number of false positives.

paired two-tailed results when comparing performance of sam alignments for all the multiple alignment tools.

best results were achieved with sam-3dcoffee, followed by sam-mammoth. difference between the two was not statistically significant. the phmms derived from sequence alignments achieved worse results, but surprisingly sam-clustalw and sam-mafft actually operate significantly better than sam-probcons. the difference between sam-tcoffee and sam-probcons is not significant. on the other hand, there is a clear difference between sam-clustalw, sam-probcons and sam-tcoffee.

figures 5-a to 5-d show roc curves for sequences interposed in 5% sequence identity intervals. the constructed models are simply not sensitive under 10% identity. the range 10–15% shows clear superiority of the structural aligners sam-3dcoffee and sam-mammoth. sam-clustalw and sam-probcons do badly: sam-probcons has particularly low specificity. the picture changes for 15–20% identity: sam-3dcoffee still does well. notice that sam-clustalw actually does quite well at this range, but that sam-probcons performs badly. sam-mammoth, sam-maft and sam-tcoffee perform similarly. last, we observe that most alignments have similar performance at above 20% identity. there is still some difference between sam-tcoffee and sam-3dcoffee. as for other identity ranges, sam-probcons performs badly.

hmmer and sam performance
last, we compare the overall performance of the hmmer and sam packages using the different alignment tools. figure  <dig> shows that best overall results were obtained by hmmer using the structural alignments derived from mammoth and 3dcoffee. these are the only cases where the tools could recognize more than  <dig> sequences. the difference from hmmer-mammoth or hmmer-3dcoffee to sam-mammoth or sam-3dcoffee is statistically significant, the table  <dig> shows t-test results. regarding the phmms derived from sequence alignment, hmmer-tcoffee performed better than sam-tcoffe. the exception are the alignments generated by clustalw: sam-clustalw achieves better results than hmmer-clustalw. all results involving hmmer and sam phmm performances are statistically significant.

paired two tailed results when comparing performance of hmmer and sam for the all the multiple alignment tools.

in order to better understand the difference between models, figure  <dig> shows how the distribution of models sizes for the phmms generated by hmmer and sam. there is a very clear difference in model size with hmmer generating much shorter alignments.

discussion
detecting remote homologue is an important, but hard, problem, as there is high divergence between training sequences. several approaches have been proposed to improve phmms performance in these conditions  <cit> . a natural approach is to use protein structural information to improve model quality  <cit> . in this work, we investigated whether one can leverage preexisting tools, such as sam and hmmer, by applying multiple alignments based on structural information.

the major question we address is therefore whether phmms for remote homology detection will benefit from structure alignments. previous work showed negative results  <cit>  on sequences having identity between 20–80%. to study whether similar results would apply to the twilight zone, we performed experiments comparing performance across scop super-families. we used the scop database, as this is the standard database with structural information being used in most related studies. throughout, we used leave one-family out cross-validation instead of leave one-sequence out, as we believe this most closely represents the problem of finding a novel remote homologue.

our focus was on how hmmer and sam can benefit from structural information. we therefore used the two tools with external alignments. sam is often used together with the t- <dig> aligner .

our results show clear benefit from using structural aligners. the benefit was noticeable for both sam and hmmer. a detailed analysis shows that the improvement was obtained in the 10–20% identity range in both cases. below 10% identity is too low, and the tools do not generate useful models. above 20% identity, both for sam and for hmmer alignments from the sequence based tools start performing comparably to the structural aligners, a results consistent with the literature.

studying the difference between tcoffee and 3dcoffee is particularly enlightening, as the two aligners mostly differ on the use of structural information. there is indeed a significant difference between the two tools in this study, and the difference applies both to sam and hmmer models. moreover, the difference stems from lower identity, in the 10–20% identity range, and disappears as sequences become more conserved.

we found no correlation between alignment size and model performance. probcons consistently generates the longest alignments, but it does not outperform the other tools. mammoth tends to generate relatively short alignments, and performs well in this study. this would suggest that the problem is not just finding conserved regions, but that the aligners might be reporting regions to be conserved when they are not.

although our key results are similar for sam and hmmer, we did observe a number of interesting differences. first, our studies indicate better sensitivity of hmmer-based models than of sam based models. second, some aligners perform quite differently when they are used by sam and by hmmer. namely, probcons generated alignments performs particularly badly with sam. in fact, sam-clustalw actually outperforms sam-probcons.

we believe that the explanation for both phenomena lies in the way that hmmer and sam treat their input alignments. sam is designed to be used together with the t <dig> aligner, and thus each column in the multiple alignment results in a state on the resulting phmm. in contrast, hmmer is designed to be used with external aligners. thus, it implements a map algorithm to estimate the actual number of states. our results do show this map algorithm to significantly reduce the number of states for hmmer.

CONCLUSIONS
finding remote homologue is a hard, but important problem in molecular biology. we study the performance of two phmm based tools, sam and hmmer, when provided with structural and sequential alignments. we reach two main conclusions. first, structural alignments are very important in low-identity regions, below 20%. using structural information can significantly improve performance in this task. on the other hand, our results indicate that alignments are low quality, even in the best case. thus sensitivity is still quite low: we achieved at most  <dig> of about  <dig> sequences in our study.

we believe that there is still much open work in achieving best performance in recognizing remotely related proteins. our results suggest a number of possible directions for improvements in this area. the good results obtained by 3dcoffee, which performs quite well both when compared to a tool such as mammoth-mult, designed from the beginning to perform structural alignments, and when compared with the corresponding sequential aligner, tcoffee, suggests that similar improvements could be considered for other sequence aligners. our results also show that structural identity does provide a good prior on alignment quality. in current approaches, this prior is only used to generate the alignments. it would be interesting to go one step further and to integrate this information with the model construction process itself.

authors' contributions
jsb carried out the studies. amrd, gz and vsc participated in the design and coordination of the study, and in the writing of the manuscript. all authors read and approved the final manuscript.

