BACKGROUND
in recent decades, extraordinary advances in biochemistry and molecular biology have led to an unprecedented level of understanding biological systems at the molecular level. the complexity of cellular pathways and networks often makes it difficult or impossible to reliably predict the behavior of a system from knowledge of its components, and thus there is considerable interest in formulation of quantitative, predictive mathematical models of cellular functions. such efforts, collectively described by such terms as systems biology and in silico biology  <cit> , aim in the long term toward goals such as predicting the effects of drugs or other interventions on the state of diseased cells, and enhancing our fundamental understanding of how cells respond to stimuli and regulate their internal environments.

the internal dynamics of cells are driven by the kinetics of a complex set of biochemical reactions: the state of the cell may be viewed as the numbers and binding states of all species of interest, and the time evolution of that state is defined by how those species react with one another. a central challenge in cellular modelling is to formulate correct biochemical reaction schemes to represent a process of interest, and then to populate the reaction system with appropriate rate constants  <cit> . within this effort, two persistent difficulties arise: populating mathematical models based on incomplete experimental information  <cit> ; and the computational demands of simulating the resulting systems, which can grow large for even moderately complex processes.

we have previously carried out a study aimed at the first of these problems, in which we used bulk expression data from escherichia coli to deduce the numbers of free rna polymerases available to transcribe a target gene of interest  <cit> ; this information is not currently experimentally available, with bulk studies  <cit>  able to provide the average numbers of each enzyme type but not to determine how many are "tied up" in the cell, transcribing other genes, at any given time. when simulating the expression of a gene or network of genes, whether an engineered or "synthetic" system  <cit> , or a natural one  <cit> , the total number of rna polymerases is less relevant than the number that are not currently occupied expressing genes outside the target system of interest. our method for deducing this number involved using bulk measurements  to create an average  behaviour for the set of genes in the bacterial genome; we then tested how many expression enzymes our target gene had available to transcribe it, and generate free enzyme levels as a function of growth rate  <cit> .

we turn now to the second of the challenges mentioned above, that of computational time. having the rest of the genome present in the system, even in our bulk-averaged way, added significantly to the computational demands of the simulations. further investigation shows, however, that there are regimes in which the target system is not significantly affected by the presence of the remainder of the genome, and may thus well approximated by excluding the genome portion and simulating only the target system. the key quantity is the "on rate" of binding between rna polymerase and the promoter of the target gene: for certain ranges of this parameter, the perturbation introduced by the presence of other genes  is small enough to be neglected, saving significant amounts of computational time. we explore the details of these ranges, as a function of other system parameters, below. we view this work as complementary to the various ongoing large-scale cellular simulation projects  <cit> , offering a method of simplifying the system in cases where including genes outside the immediate system of interest does not alter the overall behaviour significantly. although our results are obtained for our particular gene expression model, we anticipate that our promoter on-rates will apply, at least approximately, to other studies of transcription in bacteria, and thus offer guidance to others wishing to simplify their system by omitting the genomic influence.

methods
e. coli gene expression model
our technique relies on the existence of experimental results  <cit>  reporting bulk average assays of the amounts of each species present in the biological system of interest, as a function of growth rate; quantities such as average rna polymerase per cell, average transcript content per cell, and so on, are much more readily obtained than specific rate constants for individual reactions. using the bacterium escherichia coli as a model organism, we have formulated a picture of the biochemical reactions underlying gene expression from an inserted plasmid carrying a promoter controlling the transcription of our target gene. we implemented a "mean-field" modelling approach, generating genome-wide averages for the mean transcript length, mean elongation time, and so on, adjusting the model parameters so that it generated numbers matching the bulk averages that had previously been reported experimentally  <cit> . a full list of the reactions included in the model and the nomenclature used for the species is provided in tables  <dig>   <dig>  and  <dig>  the following sections provide an overview of the processes represented in the model, with further details provided in the appendix and in our previously published work  <cit> .

gene expression model incorporating the host's genome. lists of the biochemical reactions that make up our bacterial gene expression model, for the version of the model that includes an "averaged" version of the host cell's genome. columns left and right represent the left and right sides of chemical reactions, and the forward and backward rate constants are associated with the forward and reverse reactions.

lists of the biochemical reactions that make up our bacterial gene expression model, for the version of the model that excludes the host cell's genome. columns left and right represent the left and right sides of chemical reactions, and the forward and backward rate constants are associated with the forward and reverse reactions.

list of species names used in the two versions of the model.

cell growth and division
the cellular volume grows exponentially until a threshold is reached, at which point it is approximately halved  and exponential growth restarts. a counter species, v, is used to represent volume: v → 2v, with rate constant k = ln/τ, where τ is the doubling time of the cells. at cell division, all species present are divided between two hypothetical daughter cells, and the simulation follows one of these daughters. we treat the system as ergodic, and average over long times for a single cell to obtain ensemble averages across the cellular population.

enzyme binding and isomerization
rna polymerases  are responsible for initiating and catalyzing the transcription of messenger rna  strands. as the model assumes all mrna transcripts reside in operons, rpoly binds to promoter sequences in the dna  and forms a closed complex . this closed complex then must isomerize into an open complex  before transcription can begin.

enzyme clearance
rna polymerases clear the promoters, leaving those sites free to bind additional enzymes while transcription proceeds further down the dna strand. we model this by regenerating the promoter after clearance occurs, forming an enzyme-template complex plus the original site: open_rpoly_prom→rpoly_operon+incom_mrna+operon. we create a nascent transcript  at this step to allow subsequent translation to proceed; this feature will prove very helpful in studying future simulated studies of protein synthesis. conservation of the number of promoters is maintained: when the enzyme-template complex finishes elongation, only the enzyme and the polymerized product are released.

elongation
to avoid the complexity of accounting for each enzyme at different stages of elongation, a single reaction is used to represent the process of completing the mrna chain: rpoly_operon→rpoly+mrna. compliment to this reaction is the disappearance of the nascent transcript made available during transcription: incom_mrna→(), where () is a null placeholder. both the reactions have the same elongation rate constant that can be summarized as kelongation = ρ/λ, where ρ and λ are the polymerization rate and length of template, respectively.

enzyme production
since the kinetics of rna polymerase assembly are not fully known, the model is simplified by treating enzyme production as a zero-order process in which enzymes appear from outside the model at a constant rate: ()→rpoly. the enzymes are partitioned at cell division like all other species. the rate constant for production can be summarized as krep = /τ, where ν and τ are the average number per cell and cellular doubling time, respectively.

dna replication
dna replication in bacteria is a complex process involving multiple replication forks. we represent the coding portion of the genomic dna by the number of operons present , and simplify the replication process as a zero-order process: ()→operon. rate constants for this process are chosen to match the number of genomes per cell at different growth rates.

mrna degradation
rnases act to destroy mrna in e. coli, and we represent the degradation of mrna by these enzymes with first-order reactions: mrna→(), and incom_mrna→(); the latter is an additional rnase-driven degradation, beyond the above-mentioned rate of disappearance of incomplete mrna through conversion to complete mrna strands.

rna production from operons
we assume that all genes in the genome are clustered into operons: groups of genes transcribed from a single promoter, as in the lac operon. the model keeps track of which gene on the mrna operon rpoly is currently transcribing and makes available completed transcripts of the nascent operon : rpoly_operon1→rpoly_operon2+mrna. in response to the genome-wide average of  <dig>  genes per operon  <cit>  the model tracks the  <dig> transcripts representing the average mrna operon .

in addition to messenger rna, other forms of rna collectively known as stable rna  are produced within the cell. since srna is transcribed but not translated the model does not consider nascent srna production.

with-genome and no-genome models
we have constructed two versions of the model, one containing a representation of the host cell genome and the reporter gene, the other neglecting the cellular genome and representing only the reporter gene on the plasmid. the with-genome model incorporates  <dig> reactions involving  <dig> species, while the no-genome version has  <dig> reactions involving  <dig> species; the two versions are shown schematically in figures 1a and 1b. the genome affects a plasmid-borne gene of interest by competing for rna polymerase binding with the plasmid-borne promoter, while in the no-genome version of the model we omit the genomic promoter sites and thus this competition does not occur. the goal, then, is to determine the parameter regimes in which this omission has an acceptably small influence on the behaviour of the system, and to determine how much more quickly the computational simulations will run as a result of the simplification.

computational simulation method
the chemical kinetics of this system were initially simulated using the gillespie monte carlo algorithm  <cit> , and these results were used to validate a deterministic, ordinary differential equation  version of the system, which was shown to yield identical average transcript numbers, allowing us to use the significantly faster ode model to generate larger numbers of points in parameter space. comparing the two models allowed us to determine the point at which the on-rate constant between the target promoter and rna polymerase, k_on, crossed a threshold where the two models  generated average transcript numbers differing by more than a certain percentage; here, we have chosen a five percent difference as an admittedly arbitrary significance threshold.

the original experimental measurements in the literature were carried out over a range of cellular growth rates, each of which yielded different average quantities of biomolecules per cell. stochastic simulations of our system were carried out at each experimentally-examined growth rate  and sampled at discrete points in parameter space, as follows: plasmid copy numbers of  <dig>   <dig>  and 1000; mrna half-lives of  <dig>   <dig>   <dig>  and  <dig> min; and gene lengths of  <dig>   <dig>   <dig>  and  <dig> bp. the relationship between these independent variables and the point at which the promoter-rnap on-rate begins to yield a significant difference between the genome and no-genome models is complex and highly nonlinear, and not amenable to reduction to a single equation. we have instead produced a matlab script  that generates an on-rate threshold given a user's input of plasmid copy number, mrna degradation rate, gene length and cellular doubling time: any promoter on-rate constant larger than this predicted value can exclude the computationally expensive genome from the simulations without creating more than a five-percent error, while any constant smaller than this should include the genome.

stochastic modelling approach and software
deterministic chemical kinetics apply in the regime of large numbers of randomly interacting molecules. inside cells, molecule numbers are often small enough to produce significant fluctuations  <cit> , thus requiring a stochastic simulation of the reaction kinetics. the gillespie algorithm  <cit>  treats chemical reactions as poisson processes, with event  rates given by microscopic rate constants and the current state of the system. for an elementary reaction of the form a+b→c with rate constant k, the poisson rate of the forward reaction is kab/v, where a and b represent the numbers of molecules of species a and b present, and v is the reaction volume . we use the unit "n" to represent the number of molecules present in the system, rather than concentration units such as molarity. to advance the simulation, the timing of the next reaction event is randomly selected using the exponential distribution of inter-event times for the set of poisson processes representing the reactions, and the probability of each reaction being the one that occurs at that instant is given by its fraction of the sum of all reaction rates  <cit> .

bacterial cells have often been approximated as well-stirred reactors: based on their small size, it is assumed that diffusion is sufficiently fast to yield a well-mixed system. early experimental results showed protein mobility in vivo consistent with normal diffusion  <cit> , and though the diffusion coefficients were substantially lower than for the same proteins in water, the diffusion was fast enough to spread the proteins over the volume of a bacterium on a time scale of seconds. recent theoretical treatments  <cit>  have questioned the picture of bacterial cells as well-mixed systems, and recent experimental results  <cit>  have reported subdiffusive behavior in the motion of individual rna molecules, where each rna is rendered visible through binding to multiple fluorescent protein labels. in this paper, we use the well-stirred reactor picture as a first approximation to gain insight, but it should be noted that this is a significant simplification, and that future refinements and extensions are possible. approaches proposed to deal with crowded cellular environments include rate laws obeying fractal-like kinetics  <cit> , and monte carlo simulations wherein two- or three-dimensional spatial information is retained for each molecule  <cit> .

the gene expression model was initially implemented using bionets   <cit> , which provides a convenient interface for specifying reactants, products and kinetic data. the software generates c++ source code implementing the system using the gillespie stochastic simulation algorithm , and this code is then compiled and executed with user-tunable parameters as inputs. some species in the model exist in small numbers while others exist in large numbers; although continuum approximations and hybrid schemes are available through bionets  <cit> , the gillespie algorithm with no approximations yielded the best simulation speed. the data from the bionets-generated code was processed using datatask  and its run manager datatask, which automated the process of sweeping parameter values and analyzing the results. the complete gene expression models used are available as bionets scripts and are provided along with this paper .

derivation of e. coli gene expression parameters
to derive the on-rate constant between rna polymerase and the reporter promoter where there is 5% difference in transcript average between models, we employ bulk cellular averages obtained by bremer and dennis for several different cellular growth rates  <cit> . we implement a "mean-field" approach  <cit>  by considering the production of generic transcripts with properties derived from genome-wide averages: we compute mean transcript lengths, mean elongation rates, and so on. with these quantities in hand, the unknown between models is reduced to the rna polymerase on-rate constant for binding to the reporter promoter, and we find its value by sweeping until the difference in transcript average between models is 5%.

the model has been constructed to be as detailed as possible, using all available information about the biochemical processes underlying gene expression. this leads to a large number of species and reactions, the full details of which are provided in the appendix. for a derivation of average genome parameters, please see iafolla and mcmillen  <cit> .

stochastic model parameter sweeping
the first step in deriving the on-rate constant that determines a 5% difference in transcript averages between models is to obtain steady-state values of all species in the simulations. figure  <dig> shows the time series for one species in the model, the reporter mrna. an initial run of  <dig> cell divisions in length is generated for each simulation, and the final state of this run is used as the initial state for the long-duration run in which statistics are accumulated to determine average species levels; this prevents the initial transient approach to steady state from distorting the averages.

parameter sweeping begins by using on-rates that vary by a factor of  <dig> . when the desired percent difference between models lies between two on-rate constants, another sweep is performed between these new limits incrementing the on-rate by a unit multiple of the smaller limit. the third parameter sweep uses a unit increment of the next significant digit between the new limits; this change in on-rate is small enough to approximate linearity . only r <dig> ≥  <dig>  were accepted for interpolation; the range was narrowed until this level of linearity was achieved.

the duration of the stochastic simulations was varied to obtain linearity with r <dig> ≥  <dig> ; this is achieved by using a minimum of  <dig> cell divisions, although some simulations use more cell divisions to obtain the desired linearity. since the doubling time of the cells is varied, the total duration in real time varies among the simulations; the number of cell divisions explored appears to be the key factor in obtaining well-converged statistics, rather than the absolute duration.

the minimum  <dig> cell division duration was deduced by qualitative analysis of multiple simulations with the same seed but different durations; we examined the effect of duration on the mean values obtained from the reporter mrna histograms. the on-rate constants used in the duration analysis was determined by comparing the histograms between models over a range of on-rate constants ; the range of on-rate constants that bound the percent difference in the above statistical parameters by 5% was investigated for duration analysis . ultimately, longer-duration runs produced averages that were not statistically different from those obtained after  <dig> divisions , implying that longer durations only increase computational expense.

after interpolation, the validity of the on-rate was tested: using a different seed for  <dig> simulations – all employing steady-state initial conditions and the same duration, kinetics and interpolated on-rate – the sample mean difference between models of the  <dig> simulations was statistically compared to the population mean of 5%. the on-rate was accepted if the two means were not proven statistically different using a level of significance α =  <dig> . all simulations, either in parameter sweeping or verification, employ different nucleating random number generator seeds.

additional deterministic simulations
the stochastic simulations are very computationally intensive, and thus we investigated methods of speeding up the calculations. the ordinary differential equations corresponding to the full reaction system for each model  were derived using standard chemical kinetics and solved numerically using the solvers provided by matlab. to take cell growth and division into account, the odes were solved one cell cycle at a time, with the numbers of molecules at the end of the cycle cut in half to simulate division, then used as the initial state for the next cell cycle. within each set of parameter values, each ode was run for ten cell cycles to allow the system to reach a steady state, then for more ten more cell cycles, during which state values were averaged to obtain the average mrna numbers for the reporter gene. as shown in figure  <dig>  the average mrna numbers from the stochastic simulations matched nearly perfectly with those generated by the odes, and on this basis we used the deterministic odes to increase the number of points in the parameter space that could be feasibly sampled.  full-scale stochastic simulations were carried out for the experimentally available doubling times , varying the other parameters as follows: gene lengths of  <dig>   <dig>   <dig>  and  <dig> base pairs ; mrna half-lives of  <dig>   <dig>   <dig>  and  <dig> minutes; and plasmid copy numbers of  <dig>   <dig>  and  <dig> per cell. these were supplemented by deterministic simulations for the same doubling times, at the following parameter values: gene lengths from  <dig> to  <dig> in steps of  <dig> bp, from  <dig> to  <dig> in steps of  <dig> bp, and from  <dig> to  <dig> in steps of  <dig> bp; mrna half-lives from  <dig> to  <dig> minutes in steps of  <dig> minute; and plasmid copy numbers from  <dig> to  <dig> in steps of  <dig>  from  <dig> to  <dig> in steps of  <dig>  and from  <dig> to  <dig> in steps of  <dig> copies per cell.

similar to the parameter sweeping carried out for the stochastic simulations, we used the deterministic simulation results for each parameter set to calculate the rna polymerase-promoter binding on rate, k_on, at which there will be a five percent difference between the models with and without a representation of the host cell genome; for the deterministic results, the 5% threshold was determined using the fzero function in matlab, which searches for a zero-crossing between two given points.

interpolation of on-rate thresholds
the on-rate  threshold above which a 5% deviation between the genome and no-genome models occurred has been calculated explicitly only at the set of parameter values listed above . to allow the k_on threshold to be calculated at values other than those explicitly simulated, we created a matlab script to carry out the necessary interpolation using a local minimization method. in local linear fitting, to find the unknown point at a desired parameter value, one draws a straight line connecting the known points on either side of the desired value, and takes the point on that straight line as the interpolated result at the desired parameter value. note that this process minimizes the total distance between the interpolated point and the two known points, and we use this idea to perform our interpolation in our 5-dimensional space . for any single given 4-dimensional parameter set, the nearest available set of parameter values is determined by finding the two nearest parameter values in each direction on this 4-dimensional mesh; combining all four dimensions yields the  <dig> nearest points on the mesh. since these  <dig> data points do not generally fit well to a linear function, we obtain the interpolated on-rate value for a given parameter set by searching for the k_on value that minimizes the total distance in 5-dimensional space to those nearest  <dig> points, using the matlab fminsearch function to carry out the minimization operation.

the above interpolation has been implemented in matlab script that presents a simple user interface allowing the user to enter the desired parameter values , after which the script will carry out the interpolation for the given point and return the k_on value above which a 5% difference arises between the genome and no-genome models: any promoter on-rate constant larger than this predicted value can exclude the computationally expensive genome from the simulations without creating more than a five-percent error, while any constant smaller than this should include the genome. the user interface is shown in figure  <dig>  and the matlab files required to implement it are provided along with this paper .

RESULTS
percent difference of reporter transcript averages between models
as shown in figure  <dig>  using the stated parameters as a representative example, the percent difference of reporter transcripts between models changes as a function of binding constant between rna polymerase and the target promoter . an excessively small binding constant  prevents the rna polymerase from binding to the promoter, thereby producing an insignificant number of transcripts, usually less than one per cell division, as shown in figure  <dig>  the constant can be so small that noise dominates the system, leading to essentially random results, including some in which more reporter transcripts are produced in simulations that use the genome, relative to the simulations that only use the plasmid-borne reporter genes. eventually the binding constant becomes large enough to produce a considerable quantity of transcripts; at this point the genome's presence competes with the reporter gene for access to rna polymerase and reduces the transcription of the reporter gene, producing a significant percent difference between models. as the binding constant to the reporter promoter further increases, the rna polymerase binding saturates and the promoter generates nearly the same number of transcripts with or without the presence of the competing genome; the difference between models trends towards zero as the binding constant approaches infinity.

accuracy of the interpolated on-rates
to test the accuracy of the interpolated on-rates, the on-rates were entered back into both versions of the model and run for  <dig> different simulations seeds for a duration of  <dig> cell divisions, after creating steady state values for all species within the model. the percent differences were assembled and statistically compared to the population mean of 5% using a level of significance α =  <dig> . this process was repeated for all  <dig> different kinetic situations generated using the stochastic simulations. there was no statistical difference between the population mean and the sample mean obtained from the simulations , thereby ensuring that the interpolated values are the correct ones for producing a percent difference of 5%.

time reduction via genome exclusion
excluding the genome from simulation studies does reduce cpu simulation time in the computationally intensive fully stochastic simulations. to illustrate this, the verification runs were used for comparison between models; these simulations employ the same kinetic parameters and duration, and offer a large population size .

dividing the average run time of the genome by those models excluding it produces a direct measure of the benefit of excluding the host cell genome in the simulations. as figure  <dig> shows, computational time can be reduced by a factor ranging from two to 24-fold. accurate analysis of the time saved between models requires standard cpu power. the verification simulations in this study have been spread out over many computers, most of which have different cpus. to normalize the results,  <dig> replicates of a standard run with the same kinetic parameters, duration and random number seed was run  on each type of cpu, for each version of the model. the simulation duration was set to take approximately  <dig> minutes of cpu time, to average away any aberrations caused by minor fluctuations in cpu availability over time. the run durations for these standard runs were then used to create a scaling factor for each cpu type, and the simulation times reported in figure  <dig> were corrected by these factors.

the simulation spends most of its time on the rna polymerase binding/binding reactions: the reactions operon_ns+rpoly, operon_s+rpoly, and plas+rpoly in the with-genome model, and simply plas+rpoly in the no-genome model. figures 8a and 8b show the number of reaction steps simulated in the with-genome and no-genome versions of the model . as figure 8a shows, the number of reaction steps dedicated to simulating the genomic rna polymerase binding operations falls off more rapidly with growth rate than does the number of steps required to simulate the plasmid-to-rna polymerase binding. figure 8b shows that the number of reaction steps simulated in the no-genome version of the model falls off as a function of growth rate, but less rapidly than in the with-genome case; this is the cause of the reduction in the relative advantage of the no-genome version as the growth rate increases, seen in figure  <dig>  for large plasmid copy numbers, the rna polymerase binding steps are more time-consuming in the no-genome version of the model, and the computational advantage of excluding the genome is correspondingly smaller; again, this is seen in figure  <dig> 

relationship between the parameters
figures  <dig>   <dig>  and  <dig> show the dependence of the k-on value on gene length, plasmid number and mrna half-life, while the doubling time is fixed at  <dig> minutes. these plots are 3d slices through the full 5d space of results . the plots show some of the nonlinearity inherent in the relationship of k_on to the parameters, and help to indicate why it has not proven to be possible to reduce the parameter relationships to a single regression equation.

potential extensions
simulating the translation of mrna to protein, downstream of the transcriptional events discussed here, requires a significantly more elaborate model  <cit>  with correspondingly greater computational demands. one extension of this study would be to investigate the binding on-rates for ribosomes binding to the ribosome-binding-sites  of the mrna binding sites, and once again compare the results when the presence of the genome is modelled to those when it is excluded; presumably there would be a similar possibility of excluding the representation of the genome under some parameter ranges . since translation follows transcription in the gene expression process, the range of parameter values in which one can exclude the genome from studies of the translational output of a target gene should be smaller than the regions found in the current study of transcriptional output: the system will be subject to the constraints imposed by matching the transcriptional results, as well as additional constraints required to match the translational results.

the ability of rna polymerase to produce an approximately equal amount of transcripts at large enough binding constants for both models raises an important question: are there enough rna polymerases left when a large rate law exists for the reporter promoter to transcribe the necessary genomic genes for cell division? the presence of a large rate for the reporter transcript will produce metabolic strain on the cell  <cit> , possibly leading to an increase in doubling time that is not captured within the current model. further studies on modelling the effect of metabolic strain and its feedback with cellular doubling time will help to clarify this issue.

CONCLUSIONS
efforts to create accurate, quantitative models of escherichia coli genomic networks using chemical equations results in large reaction schemes, with reactions potentially proceeding at a wide range of rates. the large computational time required to simulate these reactions is a persistent problem for large-scale cellular simulation. to help address one aspect of this problem, we have investigated the necessity of simulating the presence of the e. coli genome when studying a target gene inserted on a plasmid. the presence of the genome, introduced using our "mean-field" approach, is felt by the target gene through the competition for free rna polymerases available to bind to the target gene's promoter and generate transcripts. however, there are ranges of the parameter space in which the presence of the genome yields a negligible difference in the number of reporter transcripts produced from the target gene, and in these cases is it possible to exclude any explicit representation of the genome and save the computations required to simulate the associated additional reactions. stochastic simulations show speed increases of from two to  <dig> times, when the genome is excluded from our models. we have generated a set of fully stochastic simulations and found the promoter on-rate values for which the genome and no-genome models differ by less than 5%, and augmented these stochastic simulations with cross-validated deterministic runs to increase the number of sampled points in parameter space. within the ranges of our four independent parameters , we have produced a matlab user interface that will allow the user to input any set of parameters and obtain the promoter on-rate value  above which the effect of the genome will fall below our 5%-difference threshold. given the increasing computational demands of cellular simulations, we hope that this approach will aid in the efficiency of other studies, and suggest other methods in which portions of the full cellular system may be excluded without significantly affecting the final results.

authors' contributions
maji conceived of the study, designed molecular simulations, implemented stochastic simulations, compiled data, analyzed results and drafted the manuscript. gqd carried out deterministic simulations, compiled data, analyzed results, implemented networked runs of stochastic simulations, and produced the matlab parameter interpolation routines and user interface. drm participated in design of the study, and helped draft and finalize the manuscript and revisions. all authors participated in the writing and approved of the final form of the manuscript.

appendix
below is a detailed explanation of the gene expression model, expanding on the information presented in the methods section. a full list of kinetic parameters for each reaction is provided in iafolla and mcmillen  <cit> .

nomenclature
the following is a complete list of species names used in the model:

the cellular processes represented in the model are discussed individually, below:

cellular division
to reflect the exponential growth of bacterial cells in a nutrient-rich liquid culture, we include cell growth and division, incorporated as a process that grows to a threshold volume and is then halved. at division, all species have their numbers cut approximately in half: for large numbers, a binomial distribution is used to calculate the new number, while small numbers  have each molecule explicitly checked and randomly assigned to a daughter cell with equal probability  <cit> . the model follows only one cell as a representative of the full population, so the second daughter effectively vanishes after division. tracking such a representative cell over long times yields the same statistics as tracking an ensemble of many cells over shorter times, if we make the reasonable assumption that the system is ergodic.

cell volume is represented by a "counter" species, v, whose exponential growth is governed by the following reaction, with rate constants adjusted to produce various doubling times to match the experimental conditions being examined:

  v → 2v  

for a doubling time τ, the rate constant is set to k = ln/τ. the reaction is initialized at v = v <dig>  and cellular division occurs when v reaches 2v <dig>  our model treats all processes as stochastic, but the resulting degree of variability depends strongly on the number of molecules participating in the reaction. the range of cell division times can thus be tuned by the choice of v0; here we set v <dig> =  <dig>  which yields a very slight degree of variability in the cell division times. this variability arises from two sources: the stochastic rate of reaction r <dig>  and the random assortment of the counter v between daughter cells at division: v is cut only approximately in half at cell division, like all other species, and thus the initial volume after cell division lies in a small range around v <dig> 

enzyme binding, unbinding, isomerization and clearance
since the only enzymes used in this model are rna polymerases only binding to promoters need consideration. the bimolecular reactions for rna polymerase  binding to a promoter on a gene  are shown below:

  rpoly + plas ⇔ closed_rpoly_prom   kr <dig> = /k_off_rpoly 

  closed_rpoly_prom → open_rpoly_prom   kr <dig>  

rna polymerase initially forms a closed-complex with the promoter region, which then undergoes isomerization  into an open-complex. the rate constants for r <dig> and r <dig> are adjacent to the reactions; that for r <dig> is scaled to mimic dilution of cell cycle progression: as the cell grows, the increase in volume decreases the probability of the two species coming into contact and reacting, effecting reducing the rate constant  <cit> ; this effect is incorporated by dividing the rate constants by v/v <dig> 

following binding, the enzyme clears the promoter at a particular rate. the elementary reactions for this process are shown below:

  open_rpoly_prom → rpoly_operon + operon + incom_mrna 

we create a nascent transcript  at this step to allow subsequent translation to proceed; this feature will prove very helpful in studying future simulated studies of protein synthesis. reaction r <dig> also shows an important assumption: the regeneration of a binding site after clearance allows another enzyme to bind to the same gene, creating the multiple simultaneous elongation processes observed in actual bacterial cells.

elongation
to avoid the computational complexity of accounting for all elongating intermediates , the following approximation has been employed: a single intermediate is converted to the final product at a rate corresponding to the average time taken by the complete polymerization process. using average elongation rates for specific cell growth rates as specified by bremer and dennis  <cit> , the elongating species produce only the enzyme and the polymerized product, not the template that is read. this is shown below in reaction r5:

  rpoly_operon → rpoly + mrna 

compliment to this reaction is the disappearance of the nascent transcript made available during transcription: incom_mrna→(), where () is a null placeholder. the elongation rate constant can be summarized as kelongation = ρ/λ, where ρ and λ are the polymerization rate and length of template, respectively.

enzyme and genome production
many processes involved in molecular biology are either too complex to model or not characterized at present. in our model, we use simplified zeroth-order production rates for complicated species involved: although the assembly details of some species are not fully available, there is considerable information on population size of these species. in e. coli, the average number of rna polymerases and genome equivalents per cell are known at several cellular growth rates  <cit> , and their production is represented by the elementary reactions below:

  () → rpoly 

  () → plas 

  () → operon 

the operon species in r <dig> is representative of the genome, since our model employs rna polymerase binding directly to the promoter sequence of the average operon. the rate constant for production can be summarized as krep = /τ, where ν and τ are the average number per cell and cellular doubling time, respectively.

mrna degradation
the presence of rnases in e. coli implies that mrna possess a finite life-span. the following reactions are used to represent mrna degradation:

  mrna_reporter → () 

  incom_mrna_reporter → () 

for a half-life h, the rate constant for r <dig> and r <dig> is set to k = ln/h.

we assume that rnases can degrade nascent transcripts. to account for degrading a transcript while it is being created we propose the following elementary reaction and rate constant:

  rpoly_mrna_reporter → rpoly 

 kr <dig> = incom_mrna_reporter·kmrna_degradation/rpoly_mrna_reporter 

the reaction indicates that an rna polymerase currently producing a transcript becomes an unscathed rna polymerase and a degraded mrna. although this reaction implies that all rna polymerases producing a transcript are subject to degradation, the proportionality to incomplete transcripts is specified in the rate constant. the rpoly_mrna species present in the denominator of the rate constant makes the reaction rate independent of the number of elongating rna polymerases.

modelling rna production from operons
we assume that all genes in our relevant genome are clustered into operons. our model creates a single transcript for the entire operon, mimicking the lac operon  <cit> . to make the elementary reactions simple and accurate for mrna and subsequent peptide production, rna polymerase binds once to the promoter and produces a transcript of average length under corresponding kinetics; the ejection of the mrna occurs simultaneously with rna polymerase transcribing the adjacent gene on the operon, or in the case of the last gene on the operon, being released. this is shown in the following reactions for a hypothetical three gene operon, where the binding , isomerization  and clearance steps  have been omitted:

 rpoly_operon <dig> → rpoly_operon <dig> + mrna   k = ktranscription 

 rpoly_operon <dig> → rpoly_operon <dig> + mrna   k = ktranscription 

 rpoly_operon <dig> → rpoly + mrna   k = ktranscription 

the numeric suffix on the rpoly_operon species represents the gene number adjacent to the promoter. notice that the rate constants for the above reactions are all equivalent. the release of the mrna while the rna polymerase is still elongating the operon allows ribosomes to bind and perform translation without requiring additional species; the act of transcription is conserved since rna polymerase only binds once to the promoter. evidently, the total time to transcribe all three genes is equivalent to the time for transcribing the whole operon.

contrast to mrna production, stable rna is easily produced. since this rna is not translated there is no need to include ribosomes translating complete transcripts before the operon is finished elongation. hence, the length of stable rna in the model is equivalent to the average stable rna operon length.

supplementary material
additional file 1
bionets files for the models. files used to generate the stochastic simulations, using the bionets stochastic simulation tool . the zip file extracts to a directory containing files corresponding to the with-genome and no-genome versions of the model.

click here for file

 additional file 2
matlab user interface. files used to create the matlab user interface, allowing the user to enter four parameters , and get back the k_on rate above which excluding the genome will make less than a five percent difference in the simulated transcription levels of the plasmid-borne gene of interest. the zip file extracts to a directory containing three files that should be placed in the directory where the user interface will be used; the interface may be executed by opening matlab and running the script kon_gui.m.

click here for file

 acknowledgements
this work has been funded by the natural sciences and engineering research council of canada , the ontario research fund , the canada foundation for innovation , the ontario photonics consortium , and the canadian institutes for health research .
