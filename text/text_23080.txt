BACKGROUND
residual dipolar couplings  have emerged within the last two decades as a powerful source of data that can be acquired by nuclear magnetic resonance  spectroscopy. rdcs can be used for several purposes, but the primary impetus in their use is the study of structure and dynamics of biomolecules in solution  <cit> . this is attributed to their ability to provide structural information at atomic resolution, while also containing sensitivity to motions ranging from time scales of picoseconds to milliseconds  <cit> . rdcs have been used in studies of carbohydrates  <cit> , nucleic acids  <cit> , proteins  <cit>  and small molecules  <cit> . their utility has also been demonstrated in various applications including: investigations of protein backbone structure  <cit> , development of powerful assignment strategies  <cit> , and the simultaneous examination of structure and dynamics of target molecules  <cit> . in summary, rdcs can be used as informative, accurate, and economical probes of structure and internal dynamics for both routine and challenging macromolecules  <cit> .

historically, the use of rdcs has been limited by two main factors: sample preparation, and data analysis. the introduction of a variety of alignment media  <cit> , combined with advances in instrumentation  <cit>  and data acquisition, have mitigated the experimental limitations in obtaining rdcs. the major challenge in utilization of rdc data in recent years has been in disentangling the various components which it encapsulates. this task is particularly challenging considering that an individual rdc datum reports valuable information related to the overall tumbling and preferred orientation of a molecule, as well as the relative orientation of each individual interaction vector within the alignment frame. therefore the main limiting factor in full utilization of rdc data has been a lack of powerful, and yet user-friendly, rdc analysis tools capable of extracting the pertinent information that is embedded within this complex source of data.

nearly all of the currently existing nmr data-analysis software packages such as xplor-nih  <cit> , cns  <cit> , cyana  <cit> , dyana  <cit>  or mspin  <cit>  have been modified to include rdc data as additional restraints in their analyses. rdc data have also been incorporated into some popular molecular dynamic simulation packages such as amber  <cit>  and gromacs  <cit> . despite these adaptations, structural refinement of biological macromolecules from rdc data continues to be a non-trivial task. the proper use of rdc data is further hindered by an iterative process that normally consists of three distinct steps. during the first step, an initial structure is evaluated for fitness to rdc data  <cit> . during the second step, structural refinement software is deployed for refinement of an initial structure that may be several angstroms away from the native structure . related to this step, various mechanisms have been introduced  <cit>  for the estimated order parameters or order tensors to prime the search mechanisms of the refinement tools. finally, a third step often consists of visual inspection of the refined structure using programs such as molmol  <cit> , pymol  <cit>  or vmd  <cit> . this entire process, of structure refinement from rdc data, may be manually repeated until convergence to an optimal structure. however, a number of pragmatic and theoretical limitations are normally encountered during the refinement of macromolecular structures from rdc data. these limitations include activities such as the conversion of file formats and the transferring of results from one analysis software to another, which are tedious but important. another category of challenges associated with the study of rdcs is selecting the most optimal mechanism of structure refinement using rdc restraints. examples include: selection of the most representative order tensor/s during the refinement process, selection of region/s that should be subjected to a refinement procedure, or determining the aggressive nature of a refinement process .

here we report advances in the redcat  <cit>  software package, which address several of the aforementioned hindrances in an effort to promote and expedite more effective analyses of rdc data. this latest version of redcat incorporates several new features including combined analyses, inclusion of a flexible selection mechanism, importing/exporting functions, improvement of the core computational engine, and the release of its source code under the gnu open-source licensing. in addition, interfaces have been developed that allow for direct interaction of redcat with vmd  <cit>  and xplor-nih  <cit> . in this report, we describe each new feature and its utility in detail. we also reveal the results obtained in the testing of these features with respect to structure refinement and validation using computed and experimental rdc data. the latest software package is available for download via the www from http://ifestos.cse.sc.edu.

theory
theoretical and experimental aspects of rdcs have been extensively presented in the literature. however, in order to facilitate a more informed discussion, here we include a very brief overview of rdc theory as it relates to the presented work.

residual dipolar couplings  are derived from the interaction of two magnetic dipoles, when in the presence of the external magnetic field of an nmr instrument  <cit> . this interaction yields information regarding the average orientation of two nuclei relative to the magnetic field .

  rdcij=−μ0γiγjh2πrij3·3cos2θijt− <dig> 

in equation  <dig>  rdcij is the rdc between nuclei i and j, μ <dig> is the magnetic permeability of free space, h is planck’s constant, γi and γj are the nuclear specific gyromagnetic ratios for atoms of type i and j, rij is the distance between nuclei i and j , and θ is the time dependent angle between b <dig> and the vector adjoining nuclei i and j. redcat utilizes an expanded form of equation  <dig>  shown in equation  <dig>  and its vector notation .

  dij=dmaxijr3xij2−zij2sxx+yij2−zij2syy+zij2szz+2xijyijsxy+2xijzijsxz+2yijzijsyz 

  dij=dmaxijr3v¯·s·v¯t 

in equation  <dig>  dmaxij is the maximum observable rdc value for a pair of nuclei i and j, when separated by  <dig> Å; x, y and z represent the normalized coordinates of the vector adjoining nuclei i and j; and skl denotes the individual elements of an order tensor matrix. reformulation of rdcs, as shown in equation  <dig>  provides a computationally friendlier form of the rdc interaction. in this equation, s refers to the saupe order tensor matrix  <cit>  and v represents the normalized interacting vector.

available rdc data from multiple sites on a protein can be combined into a single linear algebraic representation, shown in equation  <dig>  this ax=b representation of rdcs enables the use of singular value decomposition   <cit>  to easily obtain the optimal order tensor matrix. in equation  <dig>  the matrix a is computed from the coordinates of the interacting vectors, x corresponds to the vector representation of an order tensor, and b corresponds to the observed values of the rdc data. furthermore, in this equation, the traceless property of the order tensor is utilized to calculate szz from sxx and syy, in order to reduce the six variables of the order tensor vector to five. elimination of the szz term is the reason for the appearance of the z <dig> term in the first two columns of the a matrix in equation  <dig>  other modifications of the system of equations shown in equation  <dig>  with their corresponding adaptations of svd, have also been introduced in order to accommodate conformational rotation of side chain methyl and phenyl groups  <cit> .

  x12−z12y12−z122x1y12x1z12y1z1x22−z12y22−z222x2y22x2z22y2z2⋮⋮⋮⋮⋮xn2−zn2yn2−zn22xnyn2xnzn2ynznn×5·sxxsyysxysxzsyz5×1=d1·r13/dmaxd2·r23/dmax⋮dn·rn3/dmaxn× <dig> 

implementation
in this section we first begin with a detailed list of redcat’s most recent advancements, which illustrate the many improvements in overall usability and functional analyses. this is followed by a disclosure of software engineering strategies incorporated into redcat and its vmd-redcat and xplor-gui modules. finally we conclude this section with a description of our software testing and validation procedure; the purpose of which is to demonstrate some of redcat’s newest features as they pertain to protein structure refinement and validation.

redcat improvements and new features
the redcat software package  <cit>  was designed for evaluation of biomolecular structures using rdc data by comparing experimental rdcs to back-computed rdcs. in addition to providing a measure of structural fitness to the experimental data, redcat provides various visual means of inspecting the results  through an interaction with the gnuplot  <cit>  package. the redcat software package has been updated to incorporate additional analysis features, integrate more visualization tools and reflect modern software engineering principles. in this section we begin by first introducing some of the features that improve the overall software usability, this is followed by features that improve analysis of rdc data. the former set of features is briefly discussed, with corresponding graphical dialogues depicted in the subsection  that follows. the latter set of features have been evaluated using a number of scenarios and are presented in the “improvements in functional analyses” subsection of this section, with related results reported and examined in “results and discussion”. detailed descriptions of each feature, as well as a user’s guide, are available through user documentation at http://ifestos.cse.sc.edu/redcat/documentation and additionally at the following wiki page http://www.nmr <dig> buffalo.edu/nesg.wiki/redcat.

improvement in overall usability
save/load state – based on user requests, we have incorporated a more flexible means of saving and loading redcat analysis sessions. the save and load state feature allows the user to take a snapshot of all internal variables at any given time. this provides the user with the opportunity to return to the exact same session at a later time, or to share the saved state of an analysis with others for further inquiry and/or collaboration.

get solutions and rejection/error analysis – in the previous version of redcat, attainment of the “best solution”  and the collection of all possible solutions were performed in separate steps. furthermore, analysis of residual errors that were generated by each datum was performed in multiple stages. proper analysis and interpretation of the final results is better facilitated by integrating all available information. therefore these analyses have now been combined to provide a single list - with the least squares solution presented as the first entry, followed by any other suboptimal order tensors that satisfy the rdc data to within the indicated errors . similarly, statistics related to the monte carlo sampling of the solution space and error analysis have been combined into a single error analysis feature . the radio buttons shown in figure 1a can be used to select an individual order tensor for use with other functions of redcat, such as back-calculation of rdcs.

generate report – rdc data may be used to scrutinize the fitness of a given structure. although this task can be accomplished by simply observing the rmsd or q-factor scores of a given structure to the experimental rdc data, a more thorough analysis requires observing the residual error contribution of each vector as well as the comparison of order tensors and a number of other informative items. in addition, this process may be repeated for every alignment medium in instances where rdc data are collected in several media. this process of collecting the individual pieces of information from various analyses is both cumbersome and time consuming. therefore, a new feature has been added that combines the results of various analyses into a summary report. this feature allows a user to select error boundary and exclusion criteria, and performs a number of related redcat analyses on the loaded data while displaying all the information in one convenient location. the “full report” window, partially shown in figure  <dig>  summarizes the essential information by providing the following: the optimal saupe order tensor matrix; the number of tensors within error; the decomposed euler rotation and order parameters of the optimal saupe order tensor; the rhombic and axial components of the anisotropy  for c-n, n-h, c-h, h-h; rdc-rmsd and q-factor scores; sf plots showing all possible monte carlo tensors within error; a plot of residual errors and the entries that cause violations; a correlation plot comparing back-computed versus experimental rdc data; and a list of all equations omitted from analysis due to violation of errors. another useful feature is the option of saving this report in html format which can then be incorporated into a word processing document, viewed in common web browsers, or shared directly on the web.

ensemble solutions – rdc data can also be used to select the most suitable structure from an ensemble of available structures. such analysis sessions require examination of every structure in every alignment medium. to facilitate the collection of all relevant information for every structure in every alignment medium, the “ensemble solutions” feature  has been implemented in redcat. this tool can perform automated analysis on multiple redcat files and display a complete report in one convenient html file. an ensemble file, which contains a list of absolute paths to the prepared redcat files, is loaded and the maximum tolerable error is specified in units of hz. the “run” button will perform the analysis and present the integrated results in the message window. the “reset” button clears the two entry boxes in the ensemble solutions window, and the “done” button hides the window. upon execution of the ensemble analysis, the user is presented with the same information presented in the full report window  for each structure. by using several redcat files for the same protein structure, but different alignment media, users are able to quickly compare the fitness of a protein structure to all collected rdc data. in addition, multiple refinements of a single structure can be compared with the same rdc data in order to find the protein structure that best conforms to the data.

selection – the selection feature enables users to include or exclude various entries, or blocks of entries, in the rdc analysis by creating a selection statement based on a predefined syntax. the list of predefined selection commands can be obtained through the help dialogue of this command : the “*” character is used to select all, “!” is used to negate the current selection, “~” is used to exclude any incomplete data sets , “-” is used to indicate a range of entries starting with the first number and ending with the second number , and “,” is used to separate individual commands. using the selection illustrated in figure 4b as an example, the command “*,!,1- <dig> ” first selects all equations, negates the selection , and then selects equations  <dig> through  <dig> and  <dig> 

interaction with the user community and feedback – a help feature has also been included, which opens the user’s default browser to the on-line redcat manual. this manual helps to describe the various features and menus of redcat, and gives several helpful tutorials to aid users in familiarizing themselves with the software. a “contact us” feature, highlighted in figure  <dig>  has also been added to open the user’s default mail client and send a message to a gmail account registered to dr. valafar’s laboratory .

improvements in functional analyses
3d-sf plot – another advantage afforded by rdc data is the ability to assemble fragments and molecular complexes  <cit> . during such exercises, the structure of individual components within a larger complex are determined individually; this is followed by the assembly of all individual fragments into a final complex oriented by using rdc data. this is typically accomplished through the reorientation of each element of a complex, such that the orientational components of the order tensors from each domain overlap as illustrated in figure 6a. however, the underlying principle that enables such an assembly process is the assumption of the rigidity of the individual members of a larger complex with respect to each other . violation of this fundamental assumption can produce erroneous assembly of the individual domains. traditionally, two-dimensional sf plots  have been used for visualization of the orientational components of the anisotropy. while a 2d-sf plot provides the means to examine the orientational components of the anisotropy, it fails to provide any mechanism of confirming the rigidity assumption. a 3d-sf plot has been included within redcat to facilitate a complete comparison of order tensors by including the magnitude of individual order parameters along the z-axis. therefore a top view of the 3d-sf plot will produce the traditional 2d-sf plot, while a side-view of the plot will provide the comparison of the individual order parameters. more complete examples of this feature are included in the “3d-sf plot” section of “results and discussion”.

vmd extension – visual molecular dynamics   <cit>  is a molecular visualization program that also serves as a front end for other protein analysis tools such as namd  <cit> . vmd allows users to visualize and examine a protein structure in many different ways. this can prove useful for finding incorrect structural regions, and allows for a more focused refinement. vmd also has a tool control language  interface, wherein a user may send tcl commands via a script or line-by-line to vmd in order to access and modify data associated with the loaded molecular model. through the tcl interface, it is possible to create extensions that can be registered with vmd in order to take advantage of vmd’s capabilities. some desirable features include: parsing many atomic coordinate file formats, the ability to create three-dimensional annotations on an existing molecular model, properly orienting the molecular model, and saving a molecular model’s atomic coordinates in numerous file formats. using this communication mechanism, vmd-redcat has been developed in order to take advantage of these features. as an extension of vmd, vmd-redcat is designed to include all features of the stand-alone redcat, while also including new features that allow the user to visualize the resulting rdc analyses on the modeled molecular structures. such an extension provides a number of advantages in devising better strategies for analysis of rdc data. for example, violation of structural fitness to the rdc data can be easily justified when the violations occur in regions that contain a loop or are unstructured; this is not the case for violations internal to secondary structural elements. therefore the resulting color display of different interacting vectors can help to appropriately place the violations within a structure. furthermore, due to the nonlinear nature of the rdc interaction, and depending on the orientation of a vector, a large violation may translate into a slight or large reorientation of the vector in order for that vector to satisfy its rdc constraint. it is therefore useful to display all possible orientations that correspond to a given rdc datum and its acceptable error. the vmd-redcat extension provides an interactive mechanism of facilitating both of the above visualizations. various examples of these two features are illustrated in the “visualization of rdc analyses with vmd-redcat” section of “results and discussion”.

interface to xplor-nih – xplor-nih  <cit>  has evolved over the years to become a powerful software suite that allows users to utilize different experimental datasets including: noe, rdc, dihedral, ramachandran, and standard atomic geometric constraints. the combination of constraints with common scripting techniques, such as looping and setting variables, enables the implementation of complex annealing simulations and minimization routines. programs such as xplor-nih play an important role in protein structure calculation and refinement from experimental data using their internal molecular mechanics or molecular dynamics simulation engines.

currently, the common practice in utilization of xplor-nih is to keep template scripts that perform routine tasks and simply change the variables – making modifications to these scripts to customize the refinement of individual proteins. specific to the analysis of orientational restraints, the xplor-nih scripts are often modified to incorporate information regarding the axial/rhombic components of anisotropy for different types of rdc restraints, inclusion of the alignment frames in the form of virtual atoms, and a number of other steps to complete the analysis requisites. information related to the alignment tensors can be obtained from programs such as redcat  <cit> , pales  <cit> , nd-rdc  <cit> , or maximum likelihood fit of powder patterns  <cit> . the information obtained from these programs is then manually converted to a format that is compatible with xplor-nih. therefore, the traditional approach of modifying an existing template is cumbersome and can lead to errors with potentially unwarranted outcomes. a more beneficial solution is to utilize a graphical user interface  to generate template scripts. interaction with xplor-nih through a gui helps to minimize errors and omissions, since the user can either select options from a provided list of variables and constraints, or choose to set them to default values. in this way, common scripts can be generated pseudo-automatically. this provides the user with a more complete understanding of the script being generated and relieves them from the burden of remembering to modify, add, and/or remove lines in a template script. providing these beneficial features has motivated the creation of an interaction between redcat and xplor-nih, which we refer to as xplorgui. xplorgui can be launched from within redcat and easily facilitates refinement of protein structures by xplor-nih. this interaction allows for easy and seamless transfer of the needed information from redcat to xplorgui. a collection of the interacting windows of xplorgui are shown in figure  <dig> 

the interface operates based on a wizard style, with categories pertaining to xplor-nih’s internal variable model . individual windows relate to empirical forces, noe, dihedral, j-coupling, rdc, and powell minimization have been created to aid the user in utilizing and incorporating these constraints. all force terms can be easily turned on and off, and help buttons that provide the user with links to relevant portions of xplor-nih’s on-line manual are included  <cit> . once the xplor-nih parameters are properly configured, the corresponding xplor-nih script is created and executed while saving the output. scripts generated in this manner are useful for common tasks and can be expanded to perform more detailed procedures. the wizard style xplorgui also presents users with an opportunity to insert a preexisting script within the automatically created one, thereby facilitating a more flexible inclusion of customized protocols. examples demonstrating the utility of this feature are discussed in the “structure refinement with xplorgui” section of “results and discussion”.

software engineering
the redcat software package is composed of four distinct parts: the c++ redcat computational engine, the redcat front-end interface , an interface between vmd and redcat , and an interface between xplor-nih and redcat . the software specifications of each are presented in the following subsections.

c++ redcat computational engine
the computational engine of the previous version of redcat consisted of a collection of programs written in c, perl, bash, and tcl/tk languages. this diverse set of languages, consisting of numerous files, significantly increased the time and effort required in further development of the entire package. to reduce this inefficiency, the overall function of the individual programs was separated into front-end and back-end components of the new redcat software model. the computational back-end of the software package has been condensed into an object oriented design paradigm that is more maintainable, easier to read and understand, and more powerful from a scripting stand point. the separate computational engine, combined with its command line flags, allow for direct interaction with redcat from a command line terminal in order to create faster and more scalable rdc batch analyses. figure  <dig> illustrates the uml diagram of redcat’s c++ computational engine. as indicated in figure  <dig>  svdiface facilitates intercommunication between redcat and the eigen <dig> software package  for singular value decomposition   <cit>  and other linear algebraic operations. although the eigen <dig> package is capable of defining and utilizing matrix objects, we have developed our own matrix and tensor objects in order to better customize them for our specific needs. these two objects facilitate handling of their corresponding data objects as shown in equation  <dig>  the redcat object utilizes matrix to maintain its molecular coordinates as defined previously  <cit> .

redcat tcl/tk front-end interface
the front-end interface to the redcat software package has been implemented in the tcl/tk scripting language. in addition to maintaining the look-and-feel of the previous version, the tcl/tk language offers a simple and modular implementation, is available on many platforms, and interfaces to vmd and xplor-nih. redcat’s graphical user interface  utilizes wish  to handle all data parsing, manipulation of input/output, interactions with the back-end computational engine, communication with vmd and xplor-nih, and generation of visual elements. all plotting tasks utilize the gnuplot software package , while creation and conversion of images is performed with use of the imagemagick software package . both of these software packages are open-source and available on a number of operating systems including windows, linux and mac os x.

vmd-redcat interface
the latest version of the redcat software package is distributed with an alternative front-end gui to the redcat computational engine, as an extension of the vmd software package. as mentioned previously, this extension is named vmd-redcat and it replicates redcat.tcl in every way, facilitating a bi-directional communication between the two software packages. vmd-redcat takes advantage of the tcl/tk extension framework presented in vmd  <cit>  and is very similar to the stand-alone redcat.tcl version in terms of its software engineering principles. instructions on how to access vmd-redcat are included in the install-vmdredcat readme file, which is located in the vmd subdirectory of redcat. if the extension is installed correctly, redcat may be accessed from vmd. this is illustrated in figure  <dig>  where redcat is the first entry on the menu bar under extensions → rdc.

xplorgui interface
the front-end interface to the xplor-nih program is designated xplorgui and is engineered as a java swing application utilizing the object oriented design paradigm and a model-view-controller design pattern. a uml class diagram of a representative object from the model portion of the xplorgui is shown in figure  <dig>  the internal variables of xplor-nih are represented in the model classes , view represents the layer presented to the user . the input from the user is communicated to the model classes for storage. finally, the main view class  invokes various controller classes based on the user interaction to create and execute an appropriate script. in this way, the application itself is easily maintained and modular, allowing for inclusion of additional xplor-nih restraints as its internal variable model evolves. this accommodates easy modification of the script generation portion of the program by decoupling it from the interface and model, so that as better techniques become available, the appropriate sections can be substituted or modified to take advantage of these improved methods. once vmd-redcat has been launched , the xplorgui interface may be accessed through redcat as depicted in figure  <dig>  where xplorgui is the first entry on the menu bar under tools → structure refinement.

software testing and validation
our software testing and validation efforts consisted of several hierarchical layers. the core of our testing procedure consisted of comparing results of redcat’s svd calculations with that of matlab’s to within machine-precision. additional tests were performed to ensure proper parsing and handling of data by the front-end of redcat. in this section we outline the mechanisms which demonstrate the utility of redcat’s newest features as they pertain to functional analyses of rdcs. we also highlight the added convenience of linking redcat to both vmd and xplor-nih, where appropriate.

the general overview of our functional testing strategy consists of utilizing computationally generated data from structures obtained from the protein data bank   <cit>  and in some cases by using experimental data obtained from the biological magnetic resonance bank   <cit> . the use of theoretical data helps to establish both the correct function of redcat’s features, and the consistent notation of data transfer to vmd and xplor-nih. the application of experimental data is beneficial in illustrating the utility of redcat’s features under pragmatic conditions. details, with regard to each experiment, are described in the following subsections.

3d-sf plot
the most common misuse of the 2d-sf plot is within the context of structure determination of dynamical proteins. therefore to illustrate the importance of this feature, we resort to a computational model of internal dynamics for the protein pdb:1a1z. here the c-terminal helix of the protein  is subjected to a two-state jump model of motion that was simulated by altering the φ backbone dihedral angle at residue  <dig> by approximately 60°. rdc data have been generated for both domains of the protein using the same order tensors as shown in table  <dig>  the observable rdc data for the dynamical domain of this protein has been calculated by averaging the rdc data in both states of dynamics. because of the existence of internal dynamics, the two domains of this protein  experience different degrees of alignment resulting in two different order tensors. whereas the assembly of the two domains based on traditional approaches  <cit>  is inapplicable and should be avoided, visualization and scrutiny of the results via redcat’s 3d-sf plot will help prevent false use of rdcs.

structure refinement with xplorgui
structure refinement using rdc data is a challenging task, it is for this reason that a generally accepted approach by the community of researchers is lacking. our development of xplorgui has therefore been focused on providing a flexible mechanism that allows importing of any existing refinement routine, in order to simplify configuration of the parameters that accompany analysis of rdcs in xplor-nih. our general approach in establishing the proper interaction between xplor-nih and redcat is to deploy a simple powell minimization as our generic refinement procedure. we will confirm the proper interaction in application to synthetic and experimental rdcs acquired from pdb:1a1z and pdb:1p7e proteins, respectively.

during the refinement exercises we have utilized synthetic rdc data generated from the structure pdb:1a1z  <cit> . two sets of rdc data were generated in two alignment media using the order tensors shown in table  <dig>  the magnitudes of these two order tensors correspond to the typically observed axial and rhombic components of anisotropy from experimentally acquired data for proteins of similar size. rdc data were generated and used for the vector set {ci-1-ni, n-h, ci-1-hi, cα-hα, hα-h, hαi-1-h} .

our experiments also included experimental rdc data for the protein structure pdb:1p7e  <cit> , which were obtained from the bmrb database  <cit> . although rdc data were available from five alignment media, and for a variety of interacting nuclei, we only utilized rdc data from the bicelle and peg alignment media for the rdc vector set {n-h, ci-1-n, ci-1-cα, cα-hα}.

the function of redcat, and its interaction with vmd and xplor-nih, was first demonstrated in application to a perturbed 1a1z structure. this was followed by subjecting the perturbed structure to a simplistic refinement process that is included in our xplor-nih gui. synthetic data without any additional error  was used to validate the minimization by observing an rdc-rmsd that converges to zero, and a refined structure that converges to the known structure. this same process was applied to the 1p7e protein, for which we were able to utilize the available experimentally acquired data.

the original structures of 1a1z and 1p7e were perturbed in two ways to provide a starting point for evaluation of structures and the refinement process. the first structural perturbation consisted of altering a single phi backbone torsion angle at residues  <dig>  and  <dig>  of proteins 1a1z and 1p7e, respectively. the second perturbation consisted of subjecting each of the starting structures to a moderate molecular dynamics simulation at room temperature using namd  <cit> . the altered structures are denoted by the pdbid followed by an extension of .phi or .namd, to reflect the method by which the structural alterations were produced.

structure validation
rdcs can play a critical role in refinement of biomolecular structures. although indispensable, rdcs do present a number of unforeseen challenges that hinder their potential use. one such example arises when different regions of an initial protein structure  exhibit varying degrees of agreement with the actual structure. in such instances, traditional approaches to structure refinement are able to reduce the structural violations of the discrepant regions, but at the cost of altering the accurate regions of the structure. this tradeoff for improvement in structural quality is primarily due to the fact that the common order tensor that is used for structure refinement is influenced by the entire protein, therefore any existing error is equally distributed throughout the entire protein. a more efficient method would attempt to isolate and preserve the accurate regions of a structure, thereby limiting structure refinement procedures to only the discrepant regions. such an approach would allow the most precise estimate of order tensors to be obtained based on the most accurate regions of the protein. this objective can be accomplished through the use of redcat’s error-analysis feature. this feature has been described previously  <cit>  however it was demonstrated in application to perturbation of a single rdc data point. here we perform a molecular dynamics simulation, utilizing the human thymidylate synthase protein⁠⁠, to demonstrate the success of this redcat feature in identifying regions that are in disagreement with the rdc data.

thymidylate synthase  is a dimer of two identical subunits required for dna synthesis in a number of organisms  <cit> . human thymidylate synthase  differs from that of bacterial ts’s in a number of ways. the ability of its active site loop  to exist in two conformations is one notable difference. yet another is related to the eukaryotic insert loop  that displays either a well-defined conformation or multiple conformations, depending on the conformation of the active site loop  <cit> . to generate rdc data that reflect internal dynamics, a simulation utilizing chain a of the pdb:1hvy structure  <cit>  was created by fixing the entire protein, with the exception of the eukaryotic insert and active site loop regions and  <dig> residues before and after each region . the simulation was conducted at  <dig> k using the xplor-nih software package   <cit> . the resulting  <dig> structures embedded within the trajectory were visualized in vmd and individual frames were used to compute rdc data for the {n-h, cα-hα} vector set in two alignment media, utilizing the order tensors listed in table  <dig>  for each residue and vector type, an average was taken across all trajectory files followed by inclusion of ± <dig> hz of uniformly distributed noise. this average value represents the rdc that would be observed by nmr under the assumed model of motion and alignments. this elaborate test case is used to not only demonstrate the ability of redcat in quantifying structural fitness to rdc data, but also to demonstrate the possibility of isolating discrepant regions. identification of regions of poor fitness is very useful in harvesting the correct structural regions, and limiting the extent of structural refinement only to regions with high rdc violations.

RESULTS
here we examine the newest features of redcat with regard to functional analyses of rdcs: 3d-sf plot, structure refinement with xplorgui, and structure validation . in addition to these individual exercises, we have dedicated the first section for visualization of rdc analyses with vmd-redcat, since it recurrently appears during every aspect of rdc analysis.

visualization of rdc analyses with vmd-redcat
conventional approaches to refinement of protein structures from rdc data start by obtaining an order tensor for each alignment medium using an initial structure. refinement of the initial structure proceeds using programs such as xplor-nih, cns, or cyana and the estimated order tensors . although this approach is straight forward to implement, the results may be compromised if either the initial structure or the estimates of the order tensors are poor. a more robust approach to structure refinement can be devised by obtaining an order tensor from more reliable regions of the protein, such as secondary structural elements, that contain acceptable fitness  to the rdc data. during this process rdc data from the loop or unstructured regions of the protein may be excluded, and is justified based on the potential existence of internal dynamics in these regions. once a more accurate descriptor of alignment is obtained, the refinement of structure may proceed in application to regions with poor fitness to the rdc data. the vmd-redcat interaction easily facilitates such an extensive refinement procedure by way of visualization. an example is provided in figure  <dig>  where we utilize a fragment of the protein 1p7e  that has been determined by the software package redcraft  <cit>  using backbone n-h and cα-hα rdc data. figure 14a illustrates redcat-vmd analysis of the structural fitness of this fragment to the rdc data. in this figure the interacting vectors displayed in green, orange and red correspond to vectors that fully satisfy the rdc data, partially satisfy the rdc data, and violate the rdc restraints, respectively. while there are clear violations of the rdc restraints, the visualization of these violations provides the added benefit of interpreting the rdc fitness within the context of the structure. the appearance of rdc violations in the loop region of this fragment therefore mitigates their impact.

another advantage of visual inspection using redcat-vmd is to gain a geometrical perspective of the rdc violations. due to the highly nonlinear nature of the rdc interaction, violation of rdc data by a certain margin may translate to either a very small or quite large orientational violation. redcat-vmd provides the means for this inspection by displaying the acceptable regions of space where a given vector can be oriented. the green bands in figure 14b illustrate the acceptable orientations, which are within ±  <dig>  hz of error, of the n-h vector of residue  <dig>  this vector is illustrated in red based on its residual rdc error of ± <dig>  hz that exceeds the allotted ±  <dig>  hz of experimental error. it is clear from this figure that although the n-h vector is in violation, its current orientation is very close to the acceptable region. an increase in the amount of tolerable error  for this n-h vector expands the plausible orientations, as illustrated by the green bands in figure 14c, and since its orientation is found to be within the acceptable regions it is now displayed in green.

3d-sf plot
the functionality of a 3d-sf plot is instrumental during the assembly of molecular domains by rdc data. this analysis provides all of the information reported by its 2d predecessor, with the added benefit of providing information related to the magnitude of alignment. here we illustrate the importance of the 3d-sf plot in application to the simulated dynamics of pdb:1a1z. our approach consisted of orienting the two domains of this protein  with respect to each other as described previously  <cit> , utilizing the resulting 2d-sf plot illustrated in figure 6a. in the absence of information related to the magnitude of alignments, this figure would falsely confirm the correct assembly of the two domains since the order tensors from both domains overlap. however, side-view of the 3d-sf plot clearly illustrates the differences in the two order tensors  as they are separated by the magnitude of their respective order parameters. figure 6c provides an intermediate view of the 3d-sf plot as it is rotated from top-view to side-view. a successful alignment of the two domains should result in overlap of order tensors from all perspectives of the 3d-sf plot and in all alignment media. in summary, the inclusion of a third dimension within the sf plot provides a more complete visualization tool by including the magnitude of alignment as well as the orientation component of anisotropy.

structure refinement with xplorgui
our examination of the redcat-xplorgui interaction starts by utilizing the computationally generated and ideal  rdcs from the protein 1a1z in two alignment media. although the use of computed and error-free may not fully reflect the challenges in analysis of rdc data, it serves a critical function for debugging purposes since the exact correct answer is always known. the first step in our examination process consisted of evaluating and refining the actual structure of 1a1z without any structural alteration. theoretically, the outcome of this exercise should consist of structural fitness to the rdc data near 0hz, and the refined structure should exhibit a structure that is nearly identical to the starting structure . any outcome other than the theoretically expected one may be attributed to an improper use of the rdc restraints, incompatible notations in transfer of order tensors between redcat and xplorgui, or improper use of the powell minimization. the first entry in table  <dig> lists the results of this exercise and the outcome closely agree with the theoretically expected results. any subtle discrepancies may be attributed to differences between the actual structure and the utilized force field . the second exercise tests the redcat/xplor-gui interaction more thoroughly by refining a structure of 1a1z that has been altered by modification of a single torsion angle. here, the starting structure exhibits approximately  <dig> hz of structural fitness to the rdc data, while the refined structure exhibits a clearly improved fitness to the rdc data  as shown in the second entry of table  <dig>  this level of improvement based on the rdc restraints corresponds to an optimal improvement of the structure from  <dig> Å to nearly 0Å, when measured with respect to the actual structure. the final test related to the protein 1a1z is based on a starting structure that is perturbed by a molecular dynamics simulation. this presents a more challenging case since the structural alterations are distributed throughout the protein. the results of this exercise clearly show an improvement of the structural fitness to the rdc data from ~ <dig> hz error to ~ <dig>  . the structural fitness measured as similarity to the actual structure is limited to  <dig> Å, simply due to entrapment in a local minimum and is the result of utilizing a simplistic  minimization routine.

further testing with experimental data from protein 1p7e revealed similar results listed in table  <dig>  for all three test cases, the fitness to the rdc data was improved for both alignment media following refinement . furthermore, comparisons between bb-rmsd values obtained before and after refinement for all structures reveal improvements in structural fitness , although in some cases not as profoundly as those improvements noted in the case of experiments using 1a1z. this observation can be explained by the impact of experimental noise and may also be due to the difference in the number of rdc sets per residue utilized. the availability of six rdc data per residue, in the case of 1a1z, may simplify the rdc energy landscape of structural conformers and result in identification of the globally optimal structure by a powell minimization. on the other hand, using only four rdcs per residue  may introduce a number of local minima, which may lead to entrapment of any gradient descent based search mechanisms .

structure validation
as described previously, a molecular dynamics simulation was created using the hts protein in an effort to mimic localized structural distortions that may be found during protein structure analyses. normally, examination of such instances with rdcs would indicate a poor structure  and could be remedied by refinement of the entire structure. however, it is clear based on the nature of our simulation that structural variations are localized to only two regions . therefore, examining the localized fitness to rdc data would help to identify regions with high rdc violations and allow a typical refinement procedure to be applied to these regions only - sparing the remainder of the protein structure from any unnecessary distortions. this has motivated the error-analysis feature of redcat, which provides a localized sense of structural violation. here we utilize the simulation exercise to demonstrate redcat’s ability to successfully isolate anomalous regions.

redcat analysis was used to quantify the structural fitness of the hts protein to the simulated rdc data. the original structure of the hts protein  was loaded into redcat along with the averaged rdc data, which resulted from the simulation. a traditional assessment of the structural fitness to the rdc data produced an rdc-rmsd and q-factor of  <dig> hz and  <dig> , respectively for the first alignment medium and  <dig> hz and  <dig> , respectively for the second alignment medium. these measures of fitness correspond to a structure that can benefit from additional refinement, but do not provide any information regarding the regions in need of further refinement.

the results of error-analysis applied to the hts data are shown in figure  <dig>  this figure illustrates the individual residual error for each of the backbone n-h and cαhα vectors for media  <dig> and  <dig>  respectively. based on the results of these analyses it is evident that there are two regions  with little agreement between the structure and the rdc data. redcat analysis identified these two regions as corresponding to residues  <dig> to  <dig> and residues  <dig> to  <dig>  which correlate very well with the mobile domains within the molecular dynamics simulation of hts. additionally, independent identification of the same two regions by n-h and cαhα rdcs from two alignment media provides additional reliability of the analysis. with this information established, subsequent analyses can be conducted to identify individual regions that exhibit acceptable agreement between the structure and corresponding rdc data. for example, results obtained after eliminating individual errors from the identified mobile domains  confirm structural accuracy of the fixed regions, as evidenced by the lower rdc error values. moreover, estimated order tensors from these regions are more meaningful for the purpose of structure refinement. although this appears less evident in figure 16b due to the higher rdc error value  of the cαhα vector of residue  <dig>  our finding is justified by the fact that this residue is after all contained in one of the mobile domains of the hts simulation. therefore, identification of the problematic regions in need of further treatment, combined with a more accurate estimate of order tensors, can lead to more efficient approaches to structure refinement.

CONCLUSIONS
study of structure and dynamics of biological macromolecules from rdc data is a very exciting prospect. however, the challenges and complications in analysis of rdc data often act as impediments in their use. the introduction of new features in redcat, combined with its interactions with vmd and xplor-nih, provide an environment for more extended analyses and utilization of rdcs. for example, the results of redcat’s error-analysis feature combined with visualization of rdc violations in the context of a related structure through interaction with vmd, can aid in determining the severity of violations and help in devising an effective strategy in refinement or treatment of those violations. moreover, the reported interaction between the three software packages will easily assist in proper refinement of the initial structure by using more accurate estimates of order tensors, and effective isolation of the regions in need of refinement. additionally, the visualization of the allowed orientation of the interacting vectors will provide a much more accurate perspective of the rdc violations; allowing a more meaningful inspection of the violations by observing the translated spatial violation, rather than just a numerical value. finally, the newly introduced software engineering of redcat has been developed in the object oriented c++ environment. the culmination of these improvements will be of great interest to the community of researchers and developers, since it hides the complications of software development and permits an average user to engage without a full understanding of the programming details. in summary, our most recent enhancements to redcat serve to provide a more complete rdc analysis suite while also accommodating a more user-friendly experience.

availability and requirements
project name: redcat

project home page:http://ifestos.cse.sc.edu/

operating systems: linux, mac osx

programming language: c++, java, tcl/tk

other requirements: tcl/tk  <dig>  or above, plotting software package gnuplot, and libtk-img library for tcl/tk environment

license: gnu public license version  <dig> 

any restrictions to use by non-academics: none

competing interests
the authors declare that they have no competing interests.

authors’ contributions
cs was involved in implementing the new features and improvements to redcat, performed the experiments and data analysis for structure refinement studies, and drafted the manuscript. si performed the experiments and data analysis for studies involving structure validation, was involved in drafting the manuscript, and formatted the final manuscript. hv is responsible for the design and coordination of the study and helped draft the manuscript. all authors read and approved the final manuscript.

acknowledgments
funding for this work is provided by nsf grant mcb- <dig> to dr. homayoun valafar, sc inbre award p <dig> rr- <dig>  and nsf grant  <dig> to dr. stephanie irausquin.
