BACKGROUND
researchers in many areas of life sciences, from community ecology to genomics to biomedical genetics, use phylogenies to place data in an evolutionary context  <cit> . phylogenies provide the basis for classification, whether of species  or molecular sequences. furthermore, phylogenies are central to rigorous quantitative methods of comparative analysis used throughout biology. evolved things  have features that are highly correlated by virtue of common ancestry, thus they are not independent samples of an underlying process, but require special methods of analysis: evolutionary comparative methods use branching models to separate correlations due to common ancestry from correlations due to functional causes.

inferring a phylogeny is often a challenging task with multiple steps, subject to numerous pitfalls  <cit> . to infer a credible tree, users must collaborate with experts, or commit to learning about phylogenetic methods.

nevertheless, the number of phylogeny publications has been growing at a rate considerably above the baseline growth of scientific publishing . in  <dig>  an estimated  <dig> publications reported new phylogenies  <cit> . these and other phylogenies computed throughout the life sciences collectively represent the sum of expert knowledge of evolutionary relationships. this knowledge is largely scattered and inaccessible, locked inside individual publications. in spite of a community archive that has existed for many years , roughly 96% of phylogenies are not archived, and are available only as pictures in a scientific journal  <cit> .

one possible interpretation of this situation is that, in spite of the effort that goes into generating phylogenies, they generally have a very low value for re-use. one might argue that phylogenies are volatile and must be re-computed constantly from an ever-expanding body of data using ever-improving methods. if so, then the lack of archiving and re-use of phylogenies is neither surprising nor problematic.

however, a recent study of phylogeny re-use  <cit>  suggests that certain types of phylogenies have a high re-use value, under the right conditions. in a small sample of just  <dig> phylogeny-relevant research articles, the authors found that  <dig> of the studies re-used large trees,  <dig> of them using the software called phylomatic <cit>  to perform pruning and grafting operations on the framework tree provided by the angiosperm phylogeny group . the apg tree  <cit>  aims to cover all flowering plants, albeit mostly at the level of higher taxa  rather than of species. in this context, “pruning” means cutting away unwanted terminal nodes , while “grafting” means adding branches to a tree, which phylomatic does taxonomically . phylomatic has been cited in over  <dig> scientific articles since  <dig>  <cit> .

in other words, phylomatic uses simple manipulations to generate a customized tree based on a larger authoritative tree computed by experts, providing the user with a combination of convenience and credibility. the expert trees most useful in such cases will be those that  address the relationships of species  and  cover a large number of species. a single tol covering millions of species does not exist , but there are many trees that provide extensive coverage of a large group, e.g.,  <dig> extant mammal species  <cit> ,  <dig> angiosperms  <cit> ,  <dig> eukaryotic species  <cit> , and  <dig> prokaryotic 16s rdnas in the “greengenes” tree  <cit> . to this list, one may add resources that are not true phylogenies, but taxonomic hierarchies, including the ncbi taxonomy hierarchy of  <dig> species of prokaryotes, eukaryotes, and viruses  <cit> , the downloadable version of the tree from the tree of life web project  <cit>  with  <dig> species, and the apg tree with  <dig> taxa  <cit> . the ncbi hierarchy is widely used as a tol in projects that require a single unifying framework to cover all domains of life .

whereas the lack of a single authoritative tol may be a substantial barrier to the re-use of expert knowledge of species phylogeny, the lack of a convenient delivery system for available tol knowledge is a barrier of equal or greater importance. in particular, the example of phylomatic suggests the potential for a more general system that, in response to a query consisting of a list of species , rapidly supplies a phylogeny for those species based on expert knowledge. ideally such a system would cover the entire tol, be fast enough to provide results while the user waits, and address the particular needs of researchers for reproducibility and provenance. such a system will not replace the time-consuming generation of robust phylogenies by experts, but aims to make those hard-won results conveniently accessible to everyone else.

in this paper, we report initial results of a project, codenamed “phylotastic”, that aims to create such a system. the hip  working group of the national evolutionary synthesis center  gathered a group of programmer-scientists for a one-week “hackathon”  aimed at building a system of loosely coupled components that collectively provide phylotastic access to phylogenies with broad taxonomic coverage. the system was designed and implemented by  <dig> teams: the architecture team was responsible for overall design and controllers; the tnrs team focused on taxonomic name resolution services; the treestore team developed methods to submit, store, and retrieve phylogenetic trees; the branch lengths team implemented a system to assign divergence times to nodes; and team shiny focused on end-user experiences and outreach. project outcomes are accessible via a public code repository , a project web site , and a server image .

our results show that providing on-the-fly phylogenies via web services is possible, although improvements are needed in order to create a robust and flexible system that meets the typical demands of researchers. with further development, phylotastic systems have the potential to create an electronic marketplace for sharing phylogenetic knowledge that, in turn, may be expected to provide the incentives for researchers and technologists to improve data quality, improve technology and standards for annotation of sources and methods, and facilitate third-party methods of quality assessment.

implementation
hackathon planning and execution
the goal of developing a phylotastic system emerged in january  <dig> from brainstorming and evaluation of multiple alternatives at a face-to-face meeting of the hip leadership team , a group of  <dig> scientists with backgrounds in molecular biology, bioinformatics, molecular evolution, genomics, phylogenetics, and comparative biology. hackathon participants were selected from applications submitted in response to an open call for participation. from  <dig> applications—nearly all from qualified individuals—the lt selected  <dig> participants to represent a breadth of expertise and knowledge. a simultaneous satellite hackathon was arranged with a remote group of  <dig> individuals.

in the two-month pre-hackathon planning stage , participants were enrolled in a mailing list and encouraged to raise issues and share ideas. lt members regularly injected ideas and challenges to stimulate discussion and maintain energy and momentum. some participants and organizers developed and shared proof-of-concept software during this period. by the time of the hackathon, nearly all participants had engaged in discussions via telephone conferencing and a shared email list.

the hackathon took place from june  <dig> to  <dig>   <dig> at nescent headquarters in durham, nc, with a satellite hackathon in moscow, idaho composed of a group of interested researchers who could not travel to durham. the first day began with user scenarios ; a two-hour brainstorming session; short technical talks to familiarize participants with certain key technologies ; and an open-space session to form teams. during the open-space session, participants proposed, joined, critiqued, revised and defended “pitches”  in an open room, until unpopular pitches were abandoned and the group settled down to a limited number of teams. the first day ended with  <dig> teams, and the remaining  <dig>  days were spent planning and executing team projects. in the period after the hackathon, organizers and a subset of participants collaborated remotely to improve hackathon products.

general conception of a phylotastic system
in the pre-hackathon stage, and during the first day, participants developed a generalized view of phylotastic systems as a means to deliver tol knowledge to researchers. this view is intended to be practical given present realities of the informatics landscape, yet extensible and adaptable as a long-term community resource.

conditions
there are  <dig> initial conditions of vital importance. the first is that the user has a list of taxa, typically a list of dozens or hundreds of species. rarely the list may be longer; it may contain higher taxa such as genera, families or orders. the input list might be composed manually by the user, or constructed interactively from some data resource, e.g., the user might invoke the global names recognition & discovery service  on the pdf of a scientific paper, resulting in the list of taxa named in that document. the lists of names that emerge from ordinary scientific sources frequently have errors in the specification of names, including typographical errors, misspellings based on ignorance, and deprecated names, with the result that integrating data using names as keys is a major bioinformatics challenge  <cit> .

in case of difficulty resolving a uri to the expected resource, contact the authors or consult the online version of this table .

the second important initial condition is that there are a variety of sources of expert phylogenetic knowledge, in the form of multiple source trees that might satisfy  the user’s query . there is no single authority for such trees. they are available in many formats, although this is not problematic due to the availability of general-purpose libraries that provide tools for format conversion  <cit> . in some cases, the trees that are most useful are taxonomic hierarchies with polytomies, missing branch lengths, and higher taxa as terminals . while truly global phylogenies may appear very soon, we assume that, for years into the future, expert phylogenetic knowledge will reside in a plurality of trees, not a single tree.

requirements
the basic functional requirement is to provide a phylogeny in response to the user’s query, which consists of a list of entities  and optionally, additional conditions . one may conceive of the user’s query as an under-specified version of the resulting phylogeny, i.e., a graph of unconnected leaf nodes that is filled in by the remaining components of the system.

importantly, the utility of such a system depends on its strengths and weaknesses relative to the alternative  of  obtaining specialized training in phylogenetic inference methods,  installing or otherwise accessing specialized software, and  executing a workflow to infer a custom phylogeny from character data— all of which require a considerable expenditure of time to produce a tree that nonetheless may lack credibility. in the system envisioned here, phylogenetic knowledge is returned while the user waits, and ultimately comes from phylogenies produced by experts and presented  in stand-alone publications .

currently, many such source trees  include polytomies and lack branch lengths, yet users typically require a fully resolved tree that includes branch lengths. the reason for this is that branch lengths are required to apply various downstream  methods, such as independent contrasts  <cit> , probabilistic reconstruction of ancestral states  <cit> , or correlation of discrete traits  <cit> . many implementations of these methods require fully resolved trees , even if the method itself does not. branch lengths may be obtained in units of amount of change by using tree inference techniques with character data . inclusion of calibrations or constraints from fossils, biogeographical data, or other sources can be used with a tree to infer branch lengths in time units. a method called bladj, included in the phylomatic package  <cit> , simply assigns lengths so that branchings are evenly spaced.

furthermore, it should be possible to cite the derived tree and provide a description of provenance in a way that will satisfy expectations for writing the “methods” section of a scientific publication. such a description would identify the source tree, describe the manipulations performed on it, and possibly provide a precise means to recover the derived tree.

in this context, one may imagine a system that takes the user’s query, rectifies names, identifies a source tree with the best coverage of the user’s list of species, invokes pruning and grafting operations to provide a phylogeny for the species, and as needed, invokes further services to provide branch lengths and possibly other annotations. the name-rectifier would accept, as input, a list of names, and would return a mapping of the input names to qualified taxonomic identifiers. tree-stores would accept, as input, a query with descriptors or conditions to be satisfied , and would return trees  that satisfy the conditions. pruners  would accept  a list of names and  a tree , and would return a suitably pruned  tree. alternatively, one may imagine topology services that combine information from multiple trees  rather than simple pruning and grafting. scaling operations would accept, as input, a tree with or without branch lengths, and would return a tree with newly scaled branch lengths, or with dates assigned to nodes.

such a system would be useful to a wide variety of users. because most such users are not computing experts, one cannot expect them to navigate the complex series of operations just described. instead, we assume that most users will take advantage of phylotastic systems via client applications or controllers that manage a phylotastic workflow. this raises the question of how to design the overall architecture of the system. we assume that a system that is distributed and based on open collaboratively developed standards has a greater likelihood of becoming a sustainable community resource, relative to a closed, centralized system. openness and collaborative development lower the bar to participation by early adopters and increase the breadth of use-cases being served, and thus are considered important factors favoring sustainability of cyberinfrastructure  <cit> .

therefore, to facilitate the development and maintenance of phylotastic systems as a sustainable community resource, we imagine the system in figure  <dig> as a set of loosely coupled web services. that is, we imagine a step such as taxonomic name resolution, not as a local operation—e.g., based on a local library of taxonomy-related functions that access a local namebank—but as a remote web service maintained by taxonomy experts . furthermore, we imagine that, for each type of service, there are many possibilities, rather than a single authoritative service. thus, one phylotastic client might access tnrs service # <dig>  and another client might access tnrs service # <dig>  this feature will allow the possibility for phylotastic systems to be maintained, without relying on the continuity of any particular service or resource. ultimately, different scientific groups may expose their preferred phylogenies, tnrss, pruners, and so on; likewise, different clients ultimately would be able to choose among multiple services based on quality, reliability, coverage, and so on.

finally, given multiple services of each type, one can imagine each operation in figure  <dig>  not as a single instance of a resource, but as a service broker that accesses a registry of many services, invoking whichever service is most appropriate to process the user’s query, as in the biomoby registry  <cit> . furthermore, these brokers might choose services using indicators of quality or reliability, based on the success of past queries, or based on third-party evaluations .

architecture
the architecture team focused on the high-level design of phylotastic systems, including the definitions and interaction of components, the flow of information through standard interfaces, and the integrated control of operations via controllers and workflow environments.

design considerations
the architecture group set out to identify and formalize the interoperation between different components described in the generalized design above, taking into account  agreement on the minimum workflow to be enabled;  a delimitation of operations into modules with agreed inputs and outputs, in terms of both format and content;  the requirement that all modules can operate both standalone and as part of a workflow; and  the requirement that the system is driven by user events. addressing these requirements ensured that each individual module could be developed independently and treated as a “black box” in the overall architecture, taking input in a specific format, and producing output to be reused by other modules.

the minimum functionality requirement devised by the hackathon participants was the following: when a user submits a list of names through a controller interface, an annotated tree containing all the named species  is returned. to enable this simple workflow, the submission of names  to the controller triggers the tnrs module, which makes use of public services to return a new list of names . the controller submits the clean names to a tree-store service, which will return the matching megatrees and associated metadata. the topology service, in turn, finds and retrieves applicable megatrees by querying the tree-store. optionally, the user may pass  reference trees to be used by the topology service. both megatrees  and phylotastic trees  can be enriched by the annotator, which tags each branch of the selected tree with provenance metadata and branch length. the phylotastic trees are returned to the user through a user interface that may enable the user to visualize and manipulate the tree. note that inputs and outputs may be passed by reference .

implementations
since one of the requirements was that all services were able to interoperate, whereas the hackathon teams used a variety of programming paradigms, the agreed format and protocol for exchanging data was through rest services. figure  <dig> shows the flow of operations for a typical use-case, as the user’s query is processed via various components of a phylotastic system.

to demonstrate the platform-independent and loosely coupled nature of the phylotastic scheme,  <dig> different controllers were implemented, in javascript, perl and the component api for galaxy  <cit> , a workflow environment. the javascript controller  was designed with  <dig> endpoints to match each of the independently developed modules: tnrs, tree store, topology and branch length . the controller both supports the minimum use case, and respects the independence requirement of each module. the perl version of the controller is implemented as a cgi script and provides functionality that is similar to the javascript controller. by default, the perl controller coordinates  <dig> “dummy” implementations of the tnrs, tree store, topology, and branch length modules, but can be configured  to invoke real implementations for each of these modules.

finally, a controller was implemented in the form of a collection of simple clients for the galaxy platform  <cit> . using galaxy’s interactive workflow editor, these clients can be chained together in flexible ways to perform taxonomic name reconciliation, branch length estimation and tree pruning using the previously described restful services, in addition to various file conversion and filtering services to accomodate the tabular data model used in the galaxy environment.

resolving taxonomic names 
the phylotastic system envisioned above integrates data using species names, but errors and lack of specificity in such names can be major sources of ambiguity  <cit> . users attempting to integrate phylogenetic information via names must go through a manual process of reconciling these names to each other. several tnrss  have been created in recent years that may assist in this process by matching user-supplied names against currently valid or accepted names in taxonomic databases . however, each tnrs service uses a different api, has a different number of names in its database, covers different sections of the tol and provides a different set of features  <cit> ; none represents a complete solution for a phylotastic system. we decided to focus on developing a single meta-service that would provide access to multiple existing tnrss, as well as a single api, which could in the future be used by any client software to query any tnrs.

design considerations
our main design goals were to develop a web service and interface which would be  easy for developers to integrate into phylotastic workflows,  simple enough for users to understand, but without shielding the complexity of taxon names from them, and  broad enough to cover multiple nomenclatural codes. with these aims in mind, we developed a dual-purpose api that serves both for core services and for a meta-service that aggregates over multiple core services.

the api, which is documented more fully on the project wiki linked to the project web site , is based on the iplant tnrs api  <cit> , and always returns responses as correctly formatted javascript object notation  objects. it provides only two methods: a submit method which accepts a list of newline-separated names for matching, returning a token, and a retrieve method that accepts a token and returns a report on the results of processing the original query. this asynchronous approach allows the server to carry out computationally intensive processes like fuzzy matching without the risk of the tcp/ip connection timing out.

for each name submitted, every name matched by every service is returned with a match score between  <dig>  and  <dig> , with  <dig> indicating that the name could not be matched and  <dig> indicating a perfect match. this score can be used by tnrss that implement fuzzy or partial matching algorithms to report match scores or degrees of certainty. the meta-service returns all names found across all queried sources, leaving it to the client to decide which names to pick in case of conflicts between sources. a uri uniquely identifies each accepted name and provides credit to its source. details are available in the online api description mentioned above.

implementations
the reference implementation  consists of a handler and a collection of adaptors. the handler is responsible for communicating with the client and the adaptors; it uses a subset of the full api to send the client's queries to each adaptor, and combines and formats the results from each adaptor. the calls to the name-providers are handled by adaptors that are independent from the handler, and which may be written in any programming language. their task is to serve as a translator between the meta-service api and the name provider’s api. the handler itself is modular; for purposes of speed, parts of it might eventually be incorporated into the apache web service. taxosaurus is very similar to the taxonomic search engine of page  <cit> . a key difference is the adoption of a restful approach instead of soap and the use of uris instead of lsids to uniquely identify each accepted name.

a core service that conforms to the api may be aggregated into the meta-service implementation; a tnrs service that does not conform to the api may be wrapped in an adaptor, in principle. we provide access to three core services described below.

ncbi taxonomy. this adaptor, written in python, uses ncbi’s e-utils service  to match names . scores may be '1'  or '0' .

iplant tnrs. since our api design was directly inspired by the iplant api  <cit> , this adaptor consists of a simple perl script that forwards queries to iplant, and renames field names in their result to our schema before returning the results to the handler. the score returned by the iplant tnrs is directly passed on to the user.

msw <dig>  due to the importance of the mammalian supertree from  <cit>  for phylotastic projects involving mammals, we implemented a new core service, called msw <dig>  based on taxonomic data from mammal species of the world, third edition  <cit> . the msw <dig> taxonomy was downloaded as a csv file from the msw <dig> web site , and potential synonym names were extracted by searching for text beginning and ending with "<i>" and "</i>" tags in any column. a new csv file consisting solely of these indexed names was stored as a local database. three techniques are used to match names:  searching for an identical binomial name in the genus and species columns;  searching for names found anywhere in other columns in the csv file, and  searching for names mentioned in different parts of a single row . these techniques identify all but a few percent of the  <dig> names in the mammal supertree.

tree storage 
the focus of the treestore team was to develop a flexible way for phylogeny providers to expose knowledge for use in phylotastic systems.

design considerations
a key feature of the overall architecture  is the capacity to choose a suitable tree from among available source trees, rather than being constrained to one or a few local or “built in” trees. the suitability of a source tree for a given case may be based not only on coverage of a set of species, but on metadata describing the methods, protocols, and data used to construct the tree . such metadata would include the recommended citation by which users can properly credit the source tree in subsequent publications. thus, a phylotastic tree-store should support flexible storing, querying, and retrieval of trees, and also of metadata associated with trees and their component nodes and branches.

implementations
standards and technologies for the semantic web  <cit>  seem well positioned to address the nature of the functional requirements for the tree-store. in particular, we chose to use the resource description framework   <cit>  to design a model for large phylogenies and their metadata; to use virtuoso  as a triple-store  <cit>  that is scalable enough for storing very large phylogenies annotated with rdf; and to use virtuoso’s implementation of sparql  for querying the triple-store.

a critical step in enabling programmers and users alike to query the data in a triple-store is to design an rdf data model that, on the one hand, has the flexibility to accommodate diverse data, metadata and querying needs, and on the other hand, aligns well with controlled vocabularies and ontologies currently in use. we chose to use the comparative data analysis ontology   <cit> . we began by modifying cdao to comply more fully with best practices in ontology engineering  <cit> .

designing the representation for the required metadata capabilities revealed several gaps in cdao and other available vocabularies. as a consequence, we are building owl ontologies and rdf models for tnrs matches of otu labels, bibliographic citation of a tree, and for the various attributes encompassed by the proposed miapa reporting standard  <cit> . for example, the tnrs ontology  defines the classes and properties needed to represent the results from resolving otu labels to taxonomic names.

pruning and grafting
design considerations
the concepts of grafting and pruning are relatively simple, and could be implemented as part of a tree-store, but standalone services are part of the distributed design of a phylotastic system. while there was not a team dedicated to topology services, several hackathon participants developed proof-of-concept pruners, explored compute times for pruning, and refined existing pruning implementations.

implementations
for small trees, pruning is already available for users of some phylogenetic programming platforms and software packages. however, for on-the-fly pruning of very large trees , the algorithms implemented in commonly used programming toolkits ; ncl,  <cit> ) may be too computationally intensive, especially if for each pruning step the tree structure is parsed out of parenthetical-formatted flat-text  <cit> . preliminary tests confirm that this is the case, indicating that pruning using implementations such as dendropy may take several minutes for a trees the size of the 55473-species tree of smith, et al.  <cit> . experiments with relational databases suggested that performing pruning operations using sql might not yield satisfactory performance improvements either. in contrast, a prototype implemented using sparql and the virtuoso triple-store suggested that such an approach could provide excellent performance.

promising results were found using the mapreduce design pattern  <cit> . our implementation, deployed on the development server with a convenient web-forms interface described below , suggested that pre-processing of the input trees into separate terminal taxon-to-root paths that are accessed in a parallelizable way could reduce processing times significantly . most of the performance gains of the prototype implementation are likely due to the pre-computed de-normalization of the tree structure into taxon-to-root paths. because this implementation does not yet take advantage of parallelization, and requires the hadoop mapreduce framework to boot up for each request, further performance gains may be anticipated.

grafting and pruning are the core operations of phylomatic  <cit> , a pre-existing tool mentioned in background. the online version of phylomatic was upgraded  in connection with this hackathon , and is now implemented in gawk, a lightweight pattern-matching utility  <cit> , drawing on no external libraries to parse newick, nexml or cdao rdf phylogenies, and using simple node-to-parent-node arrays as its internal data representation. pruning and grafting in phylomatic are relatively efficient, requiring only  <dig>  seconds to load a tree with  <dig> tips and prune out all but  <dig> taxa . functionality that was added to version  <dig> includes: modifications to enable easier access and incorporation as a web-service; a range of built-in megatrees, not just for plants; and the ability to read and write nexml and cdao rdf, enabling the web-service to act as a format translator without any grafting or pruning.

scaling trees 
the branch lengths group aimed to satisfy the user requirement for phylogenies that are not merely topological frameworks, but have branch lengths that reflect time or amount of divergence, based on incorporating relevant biological data.

design considerations
several possible automated approaches to scaling trees may be imagined, including sampling character data ; assigning branch lengths by simple subdivision of root-to-tip path lengths into equidistant internodes  or using more sophisticated models of expected cladogenesis; calibrating the tree using fossil data; or combinations of these different approaches.

the branch lengths group opted to develop a system that assigns dates to nodes based on a stored library of fossil-calibrated trees . this design was inspired by timetree  <cit> , which takes a pair of species and returns point estimates of the age of their most recent common ancestor from published chronograms. timetree itself could not be used, as the terms of its license prohibit large-scale mining of its data, which are compiled from published work. our initial design includes three elements: an input interface allowing the user to specify a list of taxa , a server that returns estimates of ages for most-recent-common-ancestors, and an interface to the results returned.

implementations
interaction with datelife is primarily done through its website , though all the source code and data can be downloaded to run locally. the website is created using php, which also processes restful requests. this then calls an already-running r daemon, created using the fastrweb  <cit>  interface to rserve  <cit>  as well as functions from ape  <cit>  and new functions. this daemon returns the requested information as a json string, a newick tree, or an html page. internally the r scripts work as follows. upon startup, input trees are pre-processed by converting them into patristic distance matrices for taxa. then, satisfying a query by obtaining the ages for a set of taxa is simply a matter of matching row names and then subsetting the array to the relevant entries . doing this for thousands of trees on a typical server takes under a second. the initial chronograms were placed in the phyloorchard r package as a temporary tree-store while others were being developed.

importantly, rather than returning a single point estimate from a study the new tool allows a range of dates to be returned if there are multiple trees  from a study.

web site and special demonstrations 
the goal of team shiny was to develop demonstrations showing the potential of phylotastic components, and to create a public face for the project.

design considerations
the team considered demonstration projects that would be easy to understand, that would highlight the unique role of phylotastic systems, and that would relate to important research problems. the team sketched out five possible projects, prioritized as follows:  reconcili-o-tastic;  a generalized phylotastic web interface;  mesquite-o-tastic ;  phylo-taxic; and  phylotas-doc. the first  <dig> ideas are explained below; phylo-taxic would provide a phylogeny for a higher taxon such as a family or order; phylotas-doc would supply a phylogeny for the species named in a scientific paper or other document such as a web site.

implementations
team shiny implemented  <dig> demonstration projects, deployed an informational web site , and produced a series of blogs and screencasts. while it was not possible to produce a fully generalized web interface , the team built up the web interface to the mapreduce pruner  with explanations along with sample queries appropriate for each of the source trees.

mesquite-o-tastic is a small demonstration of the utility of integrating phylotastic services into the kinds of workflows often used in evolutionary analysis, which are interactive and manually supervised workflows, often combining several separate pieces of software. mesquite  <cit>  is an extensible workbench for comparative evolutionary analysis written in java, providing tools for uploading and manipulating lists of species , matrices of comparative “character data” and trees. we developed a small java module that extracts a list of taxa from the data matrix loaded into mesquite, and attempts to obtain a phylogeny for those species using the mapreduce pruner described above. mesquite automatically integrates the tree with any character data, allowing phylogeny-based analyses of the character data, as shown in a screencast .

the main product of team shiny is reconcili-o-tastic. as noted in the background, reconciliation of gene trees with species trees  <cit>  is potentially a high-volume use case for phylotastic services. current reconciliation approaches assume that the user will supply a species tree. this requires the user to determine the set of species implicated by a gene or protein tree, then generate or otherwise obtain a tree for those species. in reconcili-o-tastic, these steps are automated. in response to the choice of an initial gene tree , reconcili-o-tastic  reads the input tree;  queries external databases to link identifiers in the input file to species names;  uses these species names to retrieve the species tree phylotastically; and  performs reconciliation.

the operations are implemented as follows. strings that match the pattern of gene identifiers are extracted from the input file using custom code. sequence records are then retrieved from an appropriate database by invoking uniprot web services . species names are obtained from these sequence records. genes  for which a corresponding species name cannot be established, along with those missing from the phylotastic species tree, are removed from the gene tree prior to reconciliation. reconciliation is done using a modified version of the speciation-duplication inference  algorithm described in  <cit> , which allows for non-binary species trees. the result of this reconciliation is a gene tree with speciation or duplication events at each internal node.

reconcili-o-tastic is implemented as a web application in the web2py framework, using javascript for front-end operations, and drawing extensively for back-end operations on the forester library , which includes the sdi reconciliation engine and the archaeopteryx viewer. reconciled trees are represented  in phyloxml format  <cit> . input gene trees, species trees, and reconciled trees are displayed interactively using archaeopteryx  <cit> , an embedded java applet.

RESULTS
the aim of the phylotastic project is to develop a delivery system for expert knowledge of species phylogeny. in response to a user-supplied list of taxa, a phylotastic system identifies suitable source phylogenies, matches species identifiers, prunes away unneeded subtrees, grafts on missing species, and supplies branch lengths and other information, ultimately returning an expert phylogeny for the user’s list of species. ideally such a system would cover all kingdoms of life, be fast enough to provide results while the user waits, and address the particular needs of researchers for reproducibility and provenance. to enhance the potential for such a system to become a sustainable community resource, it could be implemented as a set of loosely coupled components that interact in clearly defined ways, e.g., via web services.

steps toward enabling a phylotastic system
the implementations described above provide a point of reference for considering the potential of a phylotastic system as conceived here, and for identifying weaknesses. with these  <dig> goals in mind, below we discuss in particular,  <dig> demonstration projects: the mapreduce pruner, mesquite-o-tastic, and reconcili-o-tastic.

the mapreduce pruner can be invoked interactively via a convenient web form, which has a text box in which to enter a list of species, and pull-down menus to select a format  and a source tree . a tree is returned typically in  <dig> seconds. the web form is merely the front end to a web service that can be invoked via a uri with arguments for “species”, “tree” and “format”. a simple perl script using this web-services api would be as follows:  

this script could be invoked with a command such as

   and the result will be a file called “out.tre” with the newick tree-string “,mus_musculus)”.

demonstration software based on mesquite  <cit> , an extensible workbench, illustrates how such web services could be integrated into an interactive workflow. in the mesquite-o-tastic screencast , a nexus file from a published scientific study  <cit>  is downloaded from an online archive , and opened in mesquite, which shows that the file contains a character matrix with  <dig> taxa, but not a phylogeny. when the user invokes a custom menu item , mesquite automatically formulates a query uri using the names in the character matrix, executes the query remotely  and incorporates the resulting tree in memory. the tree is then available for graphical display as well as for use in analyses such as reconstructing ancestral states. while we chose to create this demonstration using mesquite, the same thing could be done with a variety of other software systems .

the reconcili-o-tastic demonstration shows how phylotastic services can be integrated into a more automated workflow, as described above . in this case, not only is the query constructed automatically , it is used automatically for a downstream analysis step, which is to generate a reconcile tree.

current limitations
limitations of the tools described above become apparent quickly if one considers a broader set of cases than the sample queries used for illustration. some of these limitations are due to limitations in the current state of expert knowledge, others are due to incomplete implementations of the phylotastic concept, and still others represent design limitations.

these limitations can be clarified relative to an imaginary challenge of  obtaining many sets of names, e.g., by downloading hundreds of nexus files from morphobank  <cit> , or thousands of nexus files from treebase  <cit> , or processing thousands of scientific publications using gnrd  to auto-recognize names, then  using the tools developed here to find phylogenies for implicated taxa, and  attempting to use the resulting phylogenies to carry out some kind of phylogeny-dependent downstream step, such as computing phylogenetic diversity, or reconstructing ancestral character states.

current tools, if subjected to this kind of challenge, would prove unsatisfactory. the first challenge is that source trees available  provide limited coverage of the millions of known biological species. the result is that, in many cases, only a minor fraction of species named in the query would be found in a source tree. this is largely a limitation in the coverage provided by available megatrees . coverage differs dramatically among different taxonomic groups, e.g., the mammal tree  <cit>  covers the vast majority of extant mammals, but there is poor coverage of fungi and protists. comparative studies of morphology often use fossil data, but fossil species are poorly represented in large phylogenies, because the latter typically are constructed from molecular sequences . grafting of missing species onto the corresponding genus or family could improve coverage, but we have not implemented grafting methods here other than via web services supplied by the enhanced version of phylomatic.

currently available strategies for taxonomic name resolution also represent limitations. our tnrs meta-service has not been integrated with other components, so that  the names in a nexus file uploaded by mesquite-o-tastic must be spelled exactly as in a source tree available from the mapreduce pruner, or no match will be found. this may be a desirable behavior in some cases, e.g., when the user  is confident about names and does not want to allow any translation. however, in most cases, presumably, integrating the tnrs meta-service would improve results.

there are a number of current limitations on the potential for improvement, because  sources of taxonomic knowledge referenced by the meta-service  provide limited coverage of names;  spell-checking typically is not available;  there is no automated way to choose among multiple matches ; and  there is no automated way to interpret names from higher taxonomy. with regard to the last-named challenge, for instance, morphobank has many data matrices  that combine data at the genus level or higher, so that the key to a row of data is a higher taxon label  or an anonymized species name . one can imagine a system that resolves such names in an appropriate way depending on the user’s choice, but support for such a system exists only for plant species and only up to the taxonomic rank of family  <cit> .

the general design for a phylotastic system  calls for a tree-store that responds to a user’s query by identifying a source tree that provides the best coverage. however, such a component has not been integrated, thus current tools require the user to specify a source tree in advance.

integrating many source phylogenies, along with a tnrs and a tree-store, would make it possible to respond to a variety of phylotastic queries to identify the best source tree for each one. however, given our current implementations, the resulting trees would lack branch lengths and contain polytomies, making them unsuitable for many kinds of downstream analysis . the lack of branch lengths could be addressed by integrating the datelife service, but currently its store of calibrated phylogenies covers only animals. this situation could be improved, but fossil-based calibrations generally are not available for phylogenies of groups of microscopic organisms, which have a poor fossil record. other methods for scaling trees are possible , but we have not explored those methods. likewise, polytomies could be resolved arbitrarily, or using character-based methods, but we have not explored such options.

finally, whereas we can imagine an enormously useful phylotastic system that efficiently delivers currently available knowledge of phylogeny, taxonomy, and fossil dating, current standards and technology for annotation are insufficient to enable the delivery of this knowledge with enough credibility for scientific research. whereas students and educators may be satisfied to download a tree made by a “black box”, researchers will expect a clear description of sources and methods, including metadata on the source trees used to derive a result, and the phylotastic method of its derivation . yet standards for annotating sources and methods are relatively undeveloped . attribution and licensing present additional challenges for a system that re-uses data.

beyond these narrow technical limitations there is the question of whether a fully developed phylotastic system ultimately would represent a practical alternative to other ways of obtaining phylogenetic information. the most obvious uses of such a system are for cases in which the user’s demand for speed is relatively high compared to the demand for rigor. resources such as wikipedia or the encyclopedia of life, for instance, might benefit from the ability to auto-generate phylogenies to illustrate a taxon for a taxon-specific web page. whether scientists will use a phylotastic system for research purposes will depend on multiple factors that include the user’s demand for rigor, the user’s potential to infer— at a significant cost in terms of time, training, and computation— a more rigorous phylogeny by de novo methods, and the availability of a pre-computed expert phylogeny that covers the query of interest .

such factors are not easy to assess directly, but the examples cited by stoltzfus et al.  <cit>  suggest that, given the opportunity, researchers often will choose to forego the task of inferring a species phylogeny de novo from character data, and instead will choose to apply approximate methods to compute a derived tree from an expert source tree, even when the researcher’s needs are limited to a single tree with a few dozen species .

a phylotastic ecology of informatics resources
the results described above provide a basis for further development of phylotastic systems in hackathons planned for the year  <dig>  this further development will take place within a community with a long history of cyber-infrastructure projects, the oldest being treebase and tolweb, both of which date from the 1990s. more recent phylogeny-related resources include cipres  <cit>  and phylota  <cit> . taxonomic information services also have existed for many years . our datelife service is similar to the widely popular timetree project  <cit> , noted above.

how does phylotastic relate to these other projects? how might the projects inter-relate in the future? above  we explained why we chose to implement a tnrs meta-service , and why we chose to implement a new tree-scaling service similar to timetree. in both cases, the reasons relate to the need for resources that are designed  to support automated data-integration tasks, rather than interactive or ad hoc uses.

currently, although treebase and tolweb are resources that represent expert knowledge of phylogeny, they are not alternatives to a phylotastic system as a convenient source of custom trees for downstream use. treebase  <cit>  provides tools for searching ~ <dig> published phylogenies— a small fraction of all published phylogenies  <cit> —, but it does not include pruning or grafting tools, nor does its store of trees include any of the trees given above  as examples of large species trees.

tolweb is primarily an educational resource whose main feature is a phylogeny divided into branches curated by experts who determine the phylogeny and supply annotations. its downloadable phylogeny of  <dig> taxa covers all kingdoms but includes <1% of named species; as noted in  <cit> , when bioinformatics researchers want a comprehensive tol , they use the ncbi taxonomy tree, which has  <dig> species. educational uses of tolweb predominate over research uses, perhaps because the interfaces focus on graphical presentation: when tolweb is cited in the research literature, in studies such as  <cit> , it appears that knowledge of a small set of relationships is conveyed visually rather than by computation from the tree.

resources such as phylota  <cit>  and the cipres portal  <cit>  clearly provide ways to generate custom species trees for downstream use. however, the trees are generated by the user de novo from sequence alignments. while implementing a phylogenetic inference workflow using cipres or phylota is far easier than implementing an ad hoc workflow on a local computer, it is time-consuming and represents a substantial burden for most users.

by contrast, the phylotastic project aims to facilitate the case in which a user can make a scientifically defensible choice to use a modified  version of an expert phylogeny, rather than attempt to infer a phylogeny de novo. clearly phylomatic  <cit> —the inspiration for the phylotastic project—also addresses this niche. while the original conception of phylomatic was a local tool with a fixed source tree, subsequent developments  expanded its web-services interface and allowed the capacity for a user-supplied tree, allowing phylomatic to become a component in a distributed phylotastic system of components that interoperate to provide on-the-fly access to ever-expanding domains of expert knowledge .

just as phylomatic was designed for a smaller and more static world of data, but has begun to adapt to a larger and dynamic world, the other resources listed above also could play a role in this emerging world. as described above , existing taxonomic name resolution services can be adapted for aggregation into a meta-service. likewise, existing phylogeny resources such as tolweb or treebase could expose their content using the treestore concept envisioned in figure  <dig>  for instance, for this project, we exported the xml version of the tolweb tree, and translated it using bio::phylo  <cit> , so that the content of the tolweb tree is available via the pruner web tool described above. if tolweb were to supply the current version of its tree via a web service, this could be accessed by the pruner; likewise, treebase could expand its current web-services interface to expose its data to phylotastic systems.

the goal of the phylotastic project is to leverage expert knowledge of phylogeny, rather than create de novo trees using tools such as phylota and cipres. yet, there are cases in which a phylotastic system could benefit from rapid methods for making limited phylogenetic inferences from a sample of sequences or other data, including  using phylogenetic placement  <cit>  to place a missing species on a tree, when taxonomic grafting is impossible or undesirable,  resolving a polytomy, or  assigning branch lengths within subtrees of organisms poorly represented in the fossil record .

the design of phylotastic systems allows for perpetual heterogeneity and novelty, thus it does not matter whether or not a central source of authoritative tol knowledge emerges in the next decade through efforts such as the open tree of life project . new phylogenies will augment available tree-stores, and phylotastic systems will allow them to be pruned, grafted and analyzed according to the wishes and needs of the user. because of the open architecture and modularity of the project, researchers can chain the phylotastic components together in various ways, piecemeal or as complete workflows.

finally, if successful, a convenient and comprehensive delivery system for expert phylogenetic knowledge will create a competitive marketplace in which alternative source trees, and alternative phylotastic services, compete to satisfy the demands of users. the existence of such a marketplace may be expected to catalyze broad improvements in related technology and standards. for instance, given that the scale of scientific phylogeny re-use has been— with the exception of apg and phylomatic— unimpressive  <cit> , the delay in developing a “minimal information” standard for annotating phylogenies, first proposed in  <dig>  <cit> , is unsurprising. however, a phylotastic system will require annotations of sources and methods to satisfy the demand of researchers for credible  results and, given the choice, users will prefer those source trees, tree-stores, and client applications that provide them with more fully annotated results. another critical feature missing from the technology landscape of phylogenetics is some scheme for quantifying the accuracy or perceived quality of phylogenies— e.g., an objective scheme based on consistency or metadata density, or a subjective scheme based on social bookmarking—, but one can expect such a scheme to emerge naturally as an aid to users facing choices in a phylotastic marketplace.

CONCLUSIONS
the expanding scope of available species phylogenies, and the increasing demand for custom phylogenies for use in evolutionary analysis, suggests the value of a generalized phylotastic system that, in response to a user’s query consisting of a list of names, would provide name-resolution, tree-finding, pruning, grafting, scaling, and annotation operations necessary to generate a custom phylogeny for the named entities. approximately  <dig> person-months of effort were devoted to a carefully planned hackathon at which  <dig> dozen participants worked to develop such a system. the results of this hackathon demonstrate the feasibility of some aspects of the project, such as rapid pruning and re-scaling, and expose remaining challenges, such as providing an integrated spell-checking system for mapping input names to qualified taxonomic identifiers. the project has demonstrated the feasibility of on-the-fly delivery of expert phylogenetic knowledge under limited conditions. further work is needed to develop a production system that is robust and scalable, and which can be adapted to multiple use-cases. if such a system can be developed, it may be expected to drive improvements in other areas of the worldwide effort to assemble a tol.

availability and requirements
project name: phylotastic;

project home page:http://www.phylotastic.org;

operating systems: linux, macosx;

programming languages: perl, java, r, python, javascript, php, sparql, awk;

other requirements: as described for individual sub-projects;

licenses: gpl <dig>  mit, bsd 3-clause;

any restrictions to use by non-academics: no.

the project website  describes the phylotastic project and provides links to demonstration software , web services produced during the hackathon, the working project wiki, and code hosted on github. the screencasts  are available on youtube and are readily discovered by searching with the keyword “phylotastic”. the requirements differ for the different software products. these products generally are free of dependencies on commercial software.

source code for most products is available at github under an open-source license, with the following project names: phylotastic/tnrastic ; phylotastic/tolomatic ; phylotastic/arch-galaxy ; helenadeus/phylotastic_js ; phylotastic/cgi ; phylotastic/mesquite-o-tastic ; phylotastic/phyloshiny ; phylotastic.github.com ; camwebb/phylomatic-ws . the datelife web site  includes links to its source code .

access to live demonstrations and documentation is as follows. the mapreduce pruner is accessible via a convenient web-forms interface that provides instructions and examples . reconcili-o-tastic is implemented on the nescent development server  and may be installed locally  following the instructions in the readme file on github. mesquite-o-tastic is not implemented on the server, but instead should be evaluated locally: the code available on github  may be added to a local installation of mesquite simply by copying the code into the proper local directory, as explained in the generic instructions for installing modules provided on the mesquite project web site . the mesquite-o-tastic screencast  serves as the documentation. the datelife presentation at the  <dig> ievobio conference  serves as the documentation for datelife.

finally, because some products may require special expertise to install, we have created a stand-alone server image that can be mounted by a computer system administrator without expertise in bioinformatics . a server image is a snapshot of an operating system disk that can be started up inside a host environment as a virtual machine . this server image includes all of the principal working products of the hackathon, including those listed above, as well as the virtuoso tree-store with a web-services interface, and excluding only datelife, phylomatic  <dig>  and mesquite-o-tastic.

abbreviations
apg: angiosperm phylogeny group; api: applications programming interface; cdao: comparative data analysis ontology; cgi: common gateway interface; hip: hackathons, interoperability, phylogenies; itis: integrated taxonomic information service; json: javascript object notation); miapa: minimum information about a phylogenetic analysis; ncbi: national center for biotechnology information; ncl: nexus class library; nescent: national evolutionary synthesis center; lt: leadership team of hip; msw3: mammal species of the world, version 3; obo: open biomedical ontologies; otu: operational taxonomic unit; pdf: portable document format; rdna: ribosomal dna ; rdf: resource description framework; rest: representational state transfer; tnrs: taxonomic name resolution service; uri: uniform resource identifier; us: united states

competing interests
the authors declare that they have no competing financial interests. some authors are key participants in projects mentioned in the text, including nexml , cdao , treebase , mesquite , miapa  and the iplant tnrs .

authors’ contributions
authorship on this work was open to all who participated in the hackathon or its leadership team. the order of authors reflects post-hackathon contributions to the manuscript and to hackathon products. the hip leadership team  conceived and planned the hackathon, with administrative coordination by as, assisted by rv and ep. all authors except bs, mr, and mw participated in the hackathon, with bo, lh, jb, mwp, and ma doing so remotely. with the exception that pm wrote the mesquite code for mesquite-o-tastic, and gj extensively revised reconciliotastic for purposes of this publication, the hackathon teams are responsible for products attributed to them above: datelife ; tnrs ; shiny ; architecture , including pruners ; treestore . most of the authors contributed to initial drafts of implementations; initial drafts of the background and discussion were written by as with help from bs; revisions were done primarily by as, with help from hl, hd, bs and ep. as coordinated work on the manuscript. all authors read and approved the final manuscript.

