BACKGROUND
over the last  <dig> to  <dig> years, biology has changed into a ‘more precise and quantitative science’  <cit> . new high throughput technologies generate data covering different aspects of molecules in an ever increasing pace. as a result, we are now drowning in data when looking for biological stories. accordingly, bioinformatics methods and databases to deal with this flood of information have been developed. whereas in the beginning these computational tools were available mainly to bioinformaticians, many tools and databases are nowadays accessible via the web and can be interrogated also by non-computational trained biologists. but, there are still some challenges to cope with when trying to find biological meaning within this flood of data. first, different types of data are distributed over a wide variety of databases and web-based resources. for example a biologist will have to go to ensembl  <cit>  or the ucsc genome browser  <cit>  when searching for genomic information. next she might look up functional information in the geneontology  <cit>  . if especially interested in disease genes, omim  <cit>  and drugbank  <cit>  might be useful resources. next, to identify functionally related genes, databases like kegg  <cit> , string  <cit> , or in more specific cases mirrbase  <cit>  might be questioned. the challenge of distributed data has been addressed by different higher level tools. these focus mainly on the evaluation of larger datasets generated by high throughput methods and the more or less automated annotation and statistical evaluation of these gene sets. an outstanding example is david  <cit> . it provides a variety of functional annotation tools , gene accession conversion, a genome browser and a stateful web service  <cit> . gene lists can be uploaded in different identifier formats and sub lists can be created during the enrichment analysis. furthermore, the lists can be renamed, removed, combined and downloaded. related functional profiling tools are gepat  <cit> , onto-express  <cit> , onto-tools  <cit> , fact  <cit>  babelomics  <cit> , fatigo +  <cit> , genetrail  <cit> , g:profiler  <cit> , visant  <cit> , reactome  <cit> , mappfinder  <cit> , gfinder  <cit> , golem  <cit> . provides a good overview on enrichment tools  <cit> . the ingenuity system  <cit>  is a commercial software that is widely used to analyze and model complex biological and chemical systems. finally, cytoscape  <cit>  is a generic tool for network analysis and visualization whose network information can be associated with gene expression data.

as mentioned above, the main goal of these tools is the statistical evaluation and functional characterization of given, mostly large, gene sets. thus it is in the nature of these tools, that the user is not allowed to interactively change the gene lists within one analysis. for their application, this makes perfect sense, as these tools provide a reproducible annotation pipeline. but, there is a different type of user who might be more interested in the explorative analysis of smaller gene sets. she might start with a few genes, analyze them under one aspect and find other genes of interest. now she might want to extend the gene sets and analyze the new list under a different aspect. webgestalt  <cit>  did a first step into this direction. here, different sets could be merged, but the manual addition of genes is not possible. however, in the current online version of webgestalt these set operations are missing. complementary, whichgenes  <cit>  enables generating gene sets based on various sources and to combine these sets. thus, sets of genes involved in glycolysis and encoded on a specific chromosome can be generated. still, it does not allow viewing one gene or gene set under different biological aspects or performing analyses on sets. thus, we wanted to create a tool which integrates the main idea of enrichment tools, namely to analyze gene lists under a wide variety of functional aspects, with the ability to manually add and delete sets of interesting genes to enable explorative analyses. as the amount and detail of functional information differs widely between different species, we also wanted to enable cross species analysis. we have implemented these ideas in the web based tool isaac , an acronym for ‘interspecies analysing application using containers’.

implementation
object oriented strategy
traditionally, the selection of gene sets follows a procedural approach. an example might be the biomart interface to the ensembl databases  <cit> . in the most straightforward scenario, the user first selects a species/dataset, then defines filters for the gene sets and chooses which attributes should be reported. finally, the corresponding set is calculated. if the user wants to add other filters, the procedure has to be changed and a new set is calculated. contrasting isaac uses a more object oriented strategy. its central point of view is the information that the biologist wants to analyze and his/her knowledge. the information is represented as sets which can contain genes, transcripts and proteins  which then can be compared and/or modified  . all elements in a set belong to the same species and the following transitive property is satisfied: if a protein belongs to a set, then the coding transcript belongs to the set, and if a transcript belongs to a set, then the coding gene belongs to the set. formally, let p be a protein, t be a transcript and s be a set of genes, transcripts and proteins of a species, then

 p∈s→tp∈st∈s→gt∈s 

where t
p
 is the transcript of the protein p and g
t
 is the gene of the transcript t. the reverse property is not required, i.e. a gene can be part of the set without adding its transcripts or proteins. it is assured that the sets are consistent at all times. biologically, this transitivity is of importance as it enables the integration of information focusing on different biological entities. a user can add a specific splice variant of a gene, i.e. a protein, to a set. automatically, the corresponding transcript as well as the coding gene is added to the set. therefore, information related to the gene like a disease association can be analyzed. still, when going back to the protein level only the specific isoform is considered. complementary, if the user adds a gene to a set no transcript or protein information is added by default as further information might be specific to one or a few of the isoforms of the gene. if desired, all transcripts and proteins encoded by a gene can be added to the set, thus ensuring the consistency of the sets. the basic set comparisons  and operations  are supported. hence, elements can be added using the union operator and removed using the set minus operator. due to the transitivity, the set comparisons and the set minus operation are performed on a selected level, namely genes, transcripts or proteins. additionally, sets can be created, copied, cleared, removed, imported and exported.

a version control system manages the sets in a tree structure that allows biologists to keep track of different versions. furthermore, for each action a history is logged enabling the tracing of changes of sets. in isaac context a set configuration managed by the version control system is called snapshot and a container is a collection of snapshots. each snapshot belongs to exactly one container and all snapshots in a version tree belong to the same container. at any time, a user can go back to an older snapshot and use it as the starting point for a new analysis by generating a new child snapshot. thus, a tree like structure of analyses can be generated. special properties can be defined in a container, such as a description, color and comments.

this core system can now be used from different modules, which mainly perform analyses on sets, modify sets with the given methods and visualize sets and results of analyses. thus, complex biological analyses covering different biological aspects are broken down into independent, interchangeable modules. the resulting non-linear application flow supports the biologist in searching for biological stories in their data.

java ee technology
isaac is implemented in java ee  <dig>  and uses the web component jsf  <dig>   to generate dynamic web pages with ajax support. this technology substantially simplifies the development of an application, since it creates standardized, reusable modular components and enables the tier to handle many aspects of programming automatically like persistence, messaging and security. hence, a java application server is required to run isaac. isaac was developed and tested using jboss application server. the strict client/server architecture allows multiple frontend clients to be developed and integrated in a standard and easy way, since the process logics are performed on the server. in isaac, there is no time out for a client web session. as long the web page is open, its session is held on the web server.

as aforementioned each module contains everything necessary to perform the desired functionality and, therefore, information has to be imported from other sources. however, this information is not tied to specific sources. each module provides well-defined interfaces and any source fulfilling their requirements can be used. the development of new modules and even web services is therefore straightforward.

module processes requiring large computer resources are started in background, which avoids blocking the clients till the processes are finished. as soon as a process is finished, the owner is notified within the web interface or, if desired, also via e-mail. the processes’ results are held in the private pools and can be recovered as needed.

team work capabilities
today, many research groups are embedded in larger teams. frequently, different groups work on related aspects of a biological phenomenon using different model species. therefore, issac as a multi-user system supports teamwork. each user owns private pools of  containers with sets of genes, transcripts and proteins and  results of analysis. furthermore, pools shared within a group of users can be created. access to the pools comes in two authorization levels:  in the normal level a user is only allowed to read the pool data and  in the coordinator level a user is also allowed to update pools and to add/remove users from the group. special groups can be defined, which allow all users to access their pools in a normal level. in addition to sharing containers, coordinators can also place processes in group pools enabling access to all group members.

RESULTS
available modules
an overview of currently implemented modules is given in table  <dig>  obviously, the core of a system to analyze lists of genes has to hold information about genes, transcripts and proteins. this is handled in the genome module. on start the chromosomes of the selected species are displayed. here, regions can be selected and genes within this region are shown. these can either directly be added to a snapshot or further inspected in the ‘gene view’. here, genes, transcripts, proteins, associated diseases, drugs and mirnas are shown, among other information. transcripts and proteins can be selected and added to snapshots. for proteins, interpro annotations are provided, allowing a first functional characterization  <cit> . snapshots can be selected and their contents will be highlighted in the chromosome view using the respective container color. as isaac also provides information about orthologous relations, the user can switch between different species automatically ‘translating’ the gene sets. further genomes and enzyme activities can be imported from ensembl  <cit>  and uniprot  <cit> , respectively, via the administration interface.

in a cell, no protein works on its own. thus, to understand the function of a single or sets of proteins, one always has to consider their interaction partners. to allow analyzing sets in this context, we implemented the protein interaction module. starting with direct interactions, it can be extended to show higher level interactions. although data from any protein interaction database can be integrated, we currently imported data from string  <cit> . thus, interactions are annotated on the gene level, although in the cell proteins are interacting. as isaac ensures consistent sets with gene and transcript automatically added, this distinction is hidden from the user. in the graph, single genes of interest or all genes can be added to a snapshot. again, string data can be imported via the administration interface.

the protein interaction module enables viewing sets in the context of networks. still, the type of interaction is not detailed out. the biological pathway module allows the graphical visualization of enzymes belonging to a snapshots of a species in their pathway context  <cit> . in a pathway diagram the ec-numbers are highlighted in three different ways:  the enzymatic function is covered by the selected snapshots,  the species contains an enzyme with the ec classification but it is not part of the snapshots and  no protein with the ec number is annotated in the species. as usual, genes coding for a given enzymatic function or the whole pathway can be added to snapshots. furthermore, an enzyme can be selected going to the protein’s view of the genome module.

to enable a fast functional characterization of genes, transcripts and proteins in sets, we implemented the go term enrichment module. based on geneontology  <cit> , the biological processes, cellular components and molecular functions of proteins/genes of snapshots can be analyzed and displayed. to improve the tree based presentation of the directed acyclic go graph, nodes with more than one parent are replicated and only sub trees with at least one match are shown. for each node the following information is given:  the go description,  the number of proteins in the selected snapshot belonging to this node,  the total number of proteins in the genome belonging to this node,  the number of proteins of the selected snapshot belonging to the sub tree rooted in this node,  the total number of proteins in the selected snapshot and  the p-value of this node . proteins belonging to a node or its sub tree can be added to snapshots. on the other direction, for each selected protein a list of go identifiers is given. a protein can be selected going to the protein’s view of the genome module. furthermore, a go identifier can be selected which highlights the paths to the root . all go data can be imported via the web based administration interface.

to get insights about possible regulatory mechanisms of genes in a snapshot, the microrna module was implemented. it supports the search for micrornas and lists genes regulated by the specified microrna, which can be added to a snapshot. complementary, all micrornas regulating genes in selected snapshots can be listed. information about microrna was imported from tarbase  <cit> .

finally, we enable to search for genes associated with a disease and genes which are known drug targets in the disease module and the drug module, respectively. again, a user can start with a disease or a drug, get information about involved genes and add them to the snapshot. alternatively she can list all diseases associated with genes in snapshots and drugs affecting these genes. the disease module supports external links to the omim database  <cit>  and the drug module to drugbank  <cit> . tools are provided to import omim information from the ensembl  database and drugs from drugbank.

one of the main ideas behind the development of isaac was to carry out analyses across species boundaries. this is enabled by adding orthology information. here, the user can switch between different species and the actual snapshot is ‘translated’ to the new species. for administration, an interface was implemented to import orthologous data from tsv files created by e.g. biomart  <cit> .

use cases
different aspects of genes/proteins
as isaac includes information from omim, a user can look up a disease, for example ectodermal dysplasia. omim entries and the associated genes are displayed . focusing on the recessive autosomal variant, she creates a snapshot with the three associated genes. in a first attempt to search for drug candidates, she can switch to the drug tab and list all known drugs which interact with proteins encoded by genes in the actual snapshot. here, she will find none. in an attempt to search for further candidate genes, she switches to the protein interaction module. here, she creates an interaction network containing all genes which directly interact with all genes in the current snapshot, i.e. the disease genes . in the example case, this network comprises  <dig> genes, which are added to the snapshot. now, with this expanded gene set, one can go back to the drug tab and check for drug-able genes. indeed, one finds that  <dig> of the directly interacting genes are targets of known drugs . these now identified candidate genes can be added to a new snapshot. to predict side effects, one can go to the pathway tab and check, in which pathways the genes are involved. here, one finds one gene, which is involved in glycolysis . after creating a new snapshot with this gene, one can switch species and identify the mouse ortholog as a candidate mouse model. obviously, this scenario is rather naïve considering the identification of drug candidate genes, but it should exemplify the possibilities to view gene lists under different biological aspects and how a user can interactively adapt the gene/protein sets.

non-model organisms
the increasing pace of genome sequencing results in genomes of experimentally poorly characterized species. as an example, we integrated the genome of the large flying fox  into isaac. again, a researcher might start with a single bat gene of interest, e.g. nufip <dig> . to get a first glimpse of the function of this gene she can switch to a better understood organism like human . here, she can go to the microrna module to check, whether this human ortholog of the bat gene is regulated by a microrna. indeed, she will find that the human nufip <dig> gene is regulated by mir- <dig>  the snapshot can now be enlarged by all other genes which are regulated by this microrna, here  <dig> genes . to see which functions are regulated by this mirna, one can go to the go enrichment module and search for overrepresented go classifications . in the example case, the user might focus on ‘small molecule metabolic process’ . the researcher might switch the focus from mirna to this defined function and add the genes to a new snapshot. an intersection with the previous snapshots enables to home in on genes which are regulated by mir- <dig> and involved in small molecule metabolism . finally, she translates this intersection back into the bat, resulting in  <dig> candidate genes which might be regulated by a microrna and involved in small molecule metabolism. from here on, she could design an experiment to test, whether an ortholog of the human microrna is indeed found in the bat and, if this is the case, whether the orthologous genes are indeed regulated by this microrna.

team work
today, biological research is only rarely performed by a single lab on its own. in most cases, a lab works closely together with others to study different aspects of a gene using a wide range of techniques and organisms. the team working features of isaac might simplify the communication across different labs. as an example assume a consortium of groups working on actin nucleation . as a starting point, one researcher has deposited a manually curated list of human genes involved in actin nucleation. within isaac a user group with all researchers of the consortium was created. now the list can be published such that the whole group  has access to the list. in addition to gene lists, also processes, i.e. results calculated within modules, can be published. for example, a user can publish an interaction network of the actin nucleation genes and all direct neighbors. a researcher of another group, working with a different species can now import the interaction network into her private pool. from here on she can use all features of isaac like mapping the genes into a new model species. again, this result can be published, imported by another user who might manually curate this set and publish the results. thus, the knowledge about gene sets of interest can be easily distributed within the consortium.

CONCLUSIONS
isaac enables non-computer trained researchers to explore gene lists under different biological aspects. from a user’s point of view, the main difference to other related projects is that the gene lists can be changed interactively at any point of an analysis. obviously this inherently carries the danger of losing track about how a set was generated. we therefore implemented an integrated version and logging system which supports the users on the persistence, administration and tracking of these sets. together with the snapshot function, every part of the analysis can be traced and become a starting point for new analyses. thus, isaac indeed enables the explorative mining for genes of interest. as new genomes are sequenced with an increasing pace, analyses crossing the species border become of increasing importance. as isaac includes information about orthologous relationships between genes, users can switch between species, automatically ‘translating’ gene sets from one species to another. finally, isaac is not focused on single users. instead, it offers options to share sets and even results of analyses between users and teams. thus, not only a single user can look at a problem from different biological views, she can also let other researchers look at her genes to get an external view. thereby, isaac supports multi team collaborative efforts getting ever more prominent in biological research.

from a programmer’s point of view, isaac is based on an object oriented approach contrasting more workflow oriented programs, which are usually procedural. sets of proteins, transcripts and genes with a well-defined structure together with comparison and operation methods build the core of this tool. using this core, different modules can be implemented covering different biological aspects. the object oriented strategy and its modularity make this straightforward. especially when performing highly explorative analyses, a user will need some breaks to e.g. gather further information. therefore, there is no time out for a client web session. as long the web page is open, its session is held on the web server. to enable the integration of further modules, the source code is freely available from our web page.

together with the web client, we developed an administration interface. here, not only users and groups can be managed. more importantly, integration of third party data needed by a module can be carried out via the administration interface. this allows for example the straightforward addition of further genomes, as scripts which directly can insert ensembl genomes are implemented and can be administrated via the web interface.

in summary, with its focus on small but highly explorative analyses isaac closes the gap between databases covering only on one or a few aspects of genes and proteins on the one hand and automated analysis tools which do not allow for interactive modifications of gene lists on the other.

availability and requirements
project name: isaac.

project home page: http://isaac.bioapps.biozentrum.uni-wuerzburg.de.

operating systems: platform independent, tested on linux.

web browser: tested with mozilla firefox  <dig> . <dig> and internet explorer  <dig> 

programming language: java ≥  <dig> .

other requirements: java application server .

license: free for academic users under the gnu lesser general public license .

competing interests
the authors declare that they have no competing interests.

authors’ contributions
hb developed and implemented the system. js designed and supervised the project. both authors wrote, read and approved the final version of the manuscript.

acknowledgments
hb was funded by dfg grants schu2352/2- <dig> and the dfg priority programme spp 1464: ‘principles and evolution of actin nucleator complexes’.
