BACKGROUND
less than 1% of environmental microbes are readily culturable using standard methods  <cit> . studies of total microbial diversity must therefore use culture-independent approaches. the breakthrough to these types of studies occurred when woese et al.  <cit>  proposed the domains of bacteria, archaea, and eucarya based on small subunit ribosomal dna sequences . conserved regions within the rdna genes make it possible to clone directly from environmental samples, allowing uncultured microbial diversity to be surveyed  <cit> . sequencing 16s rdnas is now a standard technique for analyzing environmental microbial communities. as the time and costs required for sequencing continue to decrease, researchers are obtaining increasingly large 16s rdna libraries. bioinformatic tools for efficiently and accurately analyzing these data are now essential.

here we present fastgroupii, a web-based platform for the dereplication of large 16s rdna libraries and estimation of community composition and diversity. within a few seconds, fastgroupii can trim and dereplicate a library containing thousands of 16s rdna sequences based on user-defined criteria. this tool provides the user with the option of four different algorithms to group similar sequences together . fastgroupii then calculates standard species richness estimators and biodiversity indices. the output from fastgroupii is a fasta formatted file containing a representative sequence from each user-defined group, which can then be directly input to sequence classification programs.

implementation
software design and computer hardware configuration
fastgroupii is web-based and accessible at fastgroupii homepage  <cit> . the software package was developed in perl <dig>  . the web interface was developed using the cgi module in perl. fastgroupii currently runs on a dex   <dig> mhz pentium <dig> pc server. the web service is supported using apache http server . the source code for fastgroupii is also available at this website.

test 16s rdna library
a library containing bacterial 16s rdna sequences from four species of corals  was used to test fastgroupii . the library was made by pcr amplifying total community dna with 27f  and 1492r  primers. the products were cloned into pcr <dig> -topo vector , and the inserts were sequenced with the 27f primer. all sequences in the test dataset are unedited single pass reads. the test dataset is available on the user's guide page of the fastgroupii website.

RESULTS
overview of fastgroupii online analyses tool
fastgroupii is web-based and accessible at fastgroupii  <cit> . figure 1a is an overview of the typical protocol for obtaining 16s rdna libraries from environmental microbial communities. fastgroupii processes the raw sequence files by trimming, grouping similar sequences together, calculating diversity indices, and preparing an output that is suitable for subsequent sequence classification . briefly, sequences are loaded into fastgroupii as a fasta formatted document and trimmed with user-specified parameters. closely related sequences are grouped together using one of four available dereplication algorithms. the user can easily change the grouping parameters by which sequences are dereplicated into different ribotypes. fastgroupii then outputs a statistical estimation of richness , a diversity index , and a text file of dereplicated sequences that can be used for blast  <cit>  or analyses with the ribosomal database project . rarefaction and rank-abundance curves can also be visualized in graphical format.

importing and trimming sequences
the web interface for fastgroupii is shown in figure  <dig>  to import sequences into fastgroupii, it is necessary that sequences are precompiled and stored in a fasta formatted plain text file. a program, named "converter", for compiling a folder of text files  into one fasta file can be downloaded from the fastgroupii website. sequences can be input to fastgroupii either by pasting into the appropriate window, or by uploading a fasta file via the browse window.

fastgroupii can trim sequences in two ways: 1) sequences with a certain proportion of ambiguous bases  are removed from the ends, and/or 2) bases 5' or 3' of a user-specified site are removed . a detailed analysis of different trimming criteria was presented in  <cit> . several frequently used conserved 16s rdna sites of bacteria and archaea are listed in a pull-down menu at the fastgroupii website. to ensure the quality of the sequences for subsequent analyses, a minimum length requirement for the trimmed sequences can also be specified.

dereplicating sequences
one main feature of fastgroupii is the dereplication process, in which identical or nearly-identical sequences belonging to the same microbial ribotype are grouped together. fastgroupii incorporates four dereplication algorithms: psi   <cit> , psi with gaps, seq-match  <cit> , and a tree-parsing method based on clustalw alignments  <cit> . with the exception of the tree-parsing method, similar sequences are grouped together according to the following steps.

sequences are first trimmed according to the user-specified parameters. after trimming, the first sequence in the library is read into memory and automatically becomes a representative sequence. the next sequence  is then read into memory and compared to the representative sequence. if the query sequence is similar to the representative sequence, according to the user-specified criteria, it is added to the same group as the first representative sequence. if not, the query sequence becomes the representative sequence of a new group. this process is repeated with the next query sequence in the dataset being compared to the representative sequence of each group until all the sequences in the library have been compared. specific details of each grouping algorithm available in fastgroupii are described below.

percentage sequence identity algorithm
the percentage sequence identity  algorithm  <cit>  compares each base in the query sequence to each base in the representative sequence in a pair-wise fashion. the comparison between the query and representative sequence starts at the user-defined end of the sequence , and continues sequentially. one match is counted for each position where the two bases being compared are identical; each position where the bases are different is counted as a mismatch. the comparison stops when the last base in the shorter sequence is reached. the psi is then calculated by dividing the number of matches between the sequences by the number of bases in the shorter sequence. a query sequence is included into a previously established group if the psi between the query sequence and representative sequence of that group is greater than the user-defined threshold value.

psi with gaps algorithm
with the psi algorithm, insertion or deletion of a single base  will cause all the subsequent positions to be mismatches. this can lead to a situation where two sequences only differ by a single base, but the frameshift causes the sequences to have an extremely low psi value, which classifies them into separate groups . these single base gaps may be due to true heterogeneity in the sequences, however, it must be cautioned that single base insertions or deletions are common sequencing errors associated with single-pass sequences.

in order to circumvent this error, the psi with gaps algorithm was developed. the psi with gaps algorithm carries out the comparison in the same manner as the psi algorithm, with the exception that when a mismatch is recorded during comparison, the psi with gaps algorithm attempts to insert a gap into the query sequence or the representative sequence to make a match. if a match is found after a gap adjustment, the comparison continues from the base after the gap. the psi with gaps algorithm implemented in fastgroupii allows a maximum gap adjustment of  <dig> consecutive, base pairs.

using the test 16s rdna library, there were ~23% fewer unique groups obtained using the psi with gaps algorithm compared to the psi method. visual inspection of these sequences showed that sequencing errors were the most likely explanation for this discrepancy. therefore, it is suggested that the psi with gaps algorithm be used for most datasets. however, single base insertions and deletions can represent true heterogeneity in 16s rdna groups . studies of micro-heterogeneity require sequencing to a higher coverage, and should be analyzed using a true pair-wise comparison like the psi algorithm.

seq-match algorithm
the seq-match algorithm was modified from the sequence match function in the rdp project  <cit>  developed at michigan state university. the seq-match method first encodes a sequence into a list of integers by translating each n-oligomer in the sequence into an integer . unique integers are then stored in a list that represents the sequence. if an integer in the list of the query sequence is also found in that of the representative sequence, one match is counted. the seq-match score between the query sequence and the representative sequence is calculated as the number of matching integers divided by the number of integers in the shorter list.

since the seq-match method compares the two lists of integers encoded from the sequences, rather than directly comparing the bases in a pair-wise fashion, a conversion method between the psi and seq-match grouping thresholds was developed. more details of the correlation between psi and seq-match, along with practical examples, can be found in additional file  <dig>  briefly, if an oligomer size of n is used for encoding the list of unique integers from a sequence, a mismatch in one sequence can result in a maximum of n different integers. however when multiple mismatches occur in the comparison, it is not always the case that each of the mismatches causes n different integers. for example, when two mismatches are â‰¥ n bases apart, it results in the maximum number of different integers per mismatch on average. but if two contiguous mismatches occur, it results in n+ <dig> different integers in total, and thus / <dig> different integers for each mismatch on average. the case just described causes the minimal number of different integers per mismatch. any mismatches located less than n bases apart from each other will cause an intermediate number of differences. as a result, there are no accurate criteria for a grouping threshold in the seq-match method. averaging out the maximum and minimum number of differences that can be caused by a mismatch predicts that each mismatch will cause an average of / <dig> different integers.

assuming that microbes with 16s rdna â‰¥ m% in psi are considered the same ribotype, the corresponding percentage identity in the seq-match method is calculated as:

oâˆ’lÃ—Ã—oÂ Â Â Â Â 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaadawcaaqaaiabd+eapjabgkhitiabdyeamjabgena0kabcicaoiabigdaxiabgkhitiabd2gatjabcwcaliabcmcapiabgena0kabcicaomaalaaabagaeg4mamjaemoba4maey4kasiaegymaedabagaeginaqdaaiabcmcapaqaaiabd+eapbaacawljagaaczcamaabmaabagaeeyraukaeeyuaelaegymaedacagloagaayzkaaaaaa@47e4@

where o is the number of unique integers ; l is the length of the shorter sequence; n is the length of the oligomer; and m is the percentage identity of direct comparison. a simplified version of this relationship is:

1âˆ’Ã—aÂ Â Â Â Â 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqaixaqmcqghsisldawcaaqaaiabcicaoiabigdaxiabgkhitiabd2gatjabcwcaliabcmcapiabgena0kabcicaomaalaaabagaeg4mamjaemoba4maey4kasiaegymaedabagaeginaqdaaiabcmcapaqaaiabdgeabbaacawljagaaczcamaabmaabagaeeyraukaeeyuaelaeeomaidacagloagaayzkaaaaaa@4454@

where a = o/l is the average percentage of unique oligomers divided by the length of the sequence. for the test dataset used in this paper, a = 97%. if an oligomer size of  <dig> is used to encode the sequences , given 97% pair-wise psi, a grouping criterion of 83% in the seq-match method is calculated correspondingly.

as shown in table  <dig>  the number of groups obtained in the seq-match method is 13% fewer than that obtained using the psi with gaps method. further analysis showed that some sequences which were grouped by a seq-match threshold of 83% were only 95%-96% identical using the psi with gaps method. the results obtained with this test dataset exemplify the fact that the equations presented above only provide an approximate comparison between the two grouping algorithms.

tree-parsing algorithm
the tree-parsing algorithm implemented in fastgroupii uses a guide tree obtained from clustalw  <cit> . clustalw is a widely used tool for multiple sequence alignments, but has the disadvantage that it does not automatically group sequences based on user-defined criteria. the tree-parsing method is fundamentally different than the other grouping methods because it is based on a global alignment algorithm rather than a pair-wise comparison. the link for the tree-parsing algorithm is located on the main fastgroupii page. first, each sequence in the input list is aligned to each other sequence and a distance matrix reflecting the divergence of each sequence pair is calculated. the scores in the distance matrix are calculated as the number of identities in the best alignment divided by the number of bases compared . second, a guide tree is built from the distance matrix using the neighbor-joining method. finally, the sequences are aligned progressively according to the branching order in the guide tree  <cit> .

in the progressive alignment method, the most closely related sequences are aligned first. the guide tree calculated in the second step is built upon the distance matrix and the branch lengths are proportional to the estimated divergence along each branch. the tree-parsing method implemented in fastgroupii retrieves the branch lengths in the guide tree and uses them to group the closely related nodes together according to the user-specified psi threshold.

results from the tree-parsing method should be similar to the results of a pair-wise alignment, although the similarity scores will vary depending on the substitution matrix specified by the user in the clustalw alignment. there were 25% more groups obtained from dereplication of the test dataset with the tree-parsing method than obtained with the psi with gaps method. table  <dig> shows that this disparity was mainly due to the fact that the number of groups with only one sequence  and the numbers of groups with only two sequences  from the tree-parsing method outnumbered the psi with gaps method. this is due to the fact that the substitution matrix used for the clustalw pair-wise alignment weighs different base substitutions or gaps differently, while the psi with gaps method regards all cases of mismatches/gaps as the same.

comparison of the four dereplication algorithms
the psi method is the fastest method for sequence dereplication, however, single base insertions or deletions can cause overestimations of richness and diversity. the psi with gaps and seq-match methods have a higher tolerance to insertions or deletions. however, it is impossible to directly correlate psi and seq-match similarity thresholds. in addition, the seq-match method can easily be affected by factors such as the sequence length, or a given n-oligomer being present more than once within a sequence. the tree-parsing method was more than  <dig> times slower than the other  <dig> methods  for the analyses of ~ <dig> sequences. most of the computation time was consumed by the dynamic programming alignment method used in clustalw  <cit> . the psi with gaps method can reduce the error caused by sequencing insertions or deletions while maintaining a fast computing performance, and is therefore recommended for most routine analyses.

output from fastgroupii
after trimming and dereplication, fastgroupii generates a fasta formatted file containing a representative sequence for each group. the number of sequences in each group  is also produced as a list. the output from fastgroupii is ready for further analyses using other tools  to reveal specific information of interest.

calculating richness estimators and biodiversity indices
sequencing 16s rdna has extended the study of microbial biodiversity to new levels. it is still impractical, however, to exhaustively sample a whole microbial community. statistical approaches that are traditionally used to study macroorganisms can also be applied to microbial communities  <cit> . these approaches can make predictions about total community diversity based on a subsample of sequences .

fastgroupii implements several of these estimators including chao <dig>  <cit> , the shannon-wiener index  <cit>  and rarefaction analysis  <cit> . chao <dig>  is a simple nonparametric estimator of the minimum richness  in a sample. in fastgroupii, a ribotype is defined as sequences that are grouped together because they are above the user-specified threshold for similarity. chao <dig> is based on the number of rare ribotypes  within a sample.

schao1=sobs+n12/Â Â Â Â Â 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgtbwudawgaawcbagaem4yammaemiaagmaemyyaemaem4ba8maegymaedabeaakiabg2da9iabdofatnaabaaaleaacqwgvbwbcqwgibgycqwgzbwcaeqaaogaey4kasiaemoba42aa0baasqaaiabigdaxaqaaiabikdayaaakiabc+caviabcicaoiabikdayiabd6gaunaabaaaleaacqaiyagmaeqaaogaeiykakiaaczcaiaaxmaadaqadaqaaiabbweafjabbgfarjabiodazagaayjkaiaawmcaaaaa@4b5b@

where sobs is the observed number of ribotypes; and n <dig> and n <dig> are the number of ribotypes observed either once or twice respectively. the chao <dig> prediction will exceed the number of observed ribotypes by an amount that is determined by the number of singletons.

rarefaction measurement  corrects for the effects of sample size on richness predictions by scaling all the samples down to the same size  <cit> . in rarefaction analysis, the information provided by all the ribotypes sampled is used to estimate the richness of a smaller sample, allowing for direct comparisons to be made between communities of different sizes.

e=âˆ‘i=1sÂ Â Â Â Â 
 mathtype@mtef@5@5@+=feaafiart1ev1aaatcvaufkttlearuwrp9mdh5mbpbiqv92aaexatlxbi9gbaebbnrfifhhdyfgasaach8aky=wiffydh8gipec8eeeu0xxdbba9frfj0=oqffea0dxdd9vqai=hguq8kuc9pgc9s8qqaq=dirpe0xb9q8qilsfr0=vr0=vr0dc8meaabaqaciaacagaaeqabaqabegadaaakeaacqwgfbqrcqggoaakcqwgtbwudawgaawcbagaemoba4gabeaakiabcmcapiabg2da9maaqahabawaamwaaeaacqaixaqmcqghsislcqggoaakcqwgobgtcqghsisldawcaaqaaiabd6eaonaabaaaleaacqwgpbqaaeqaaagcbagaemoba4gaaiabcmcapiabc+caviabcicaomaalaaabagaemota4eabagaemoba4gaaiabcmcapagaay5waiaaw2faaawcbagaemyaakmaeyypa0jaegymaedabagaem4camhaniabgghildgccawljagaaczcamaabmaabagaeeyraukaeeyuaelaeginaqdacagloagaayzkaaaaaa@513a@

the shannon-wiener index  is a nonparametric diversity index that combines estimates of richness  and evenness :

h' = -âˆ‘ Â Â Â  

where pi is the proportion of individuals found in the ith ribotype of the community. the shannon-wiener index can be used as an overall indicator of the level of diversity in a sample.

fastgroupii can also display standard rank-abundance curves. in these plots, ribotypes are plotted from most to least abundant along the x-axis, with their abundances displayed on the y-axis. rank-abundance curves reveal differences in patterns of richness and evenness between samples. in addition, the shape of the rank-abundance curve can be used to determine which species-abundance model best fits the data . determining the shape of rank-abundance curves for microbial communities has important implications for predictions of the total number of microbial ribotypes on the planet  <cit> .

effect of sequence order on grouping
one bias that can be caused in the psi, psi with gaps and seq-match grouping methods results from the selection of the representative sequences. in these three grouping algorithms, the first sequence put into a new group is designated as the representative sequence. this random selection process might lead to differences in the results of dereplication.

the effects of sequence order in the input file were evaluated by dereplicating the sample dataset  <dig> times using each method. for each trial, the sequences in the dataset were read into the program in a random order. by doing this, a different sequence was selected as the representative sequence of a new group each time. the average value and standard deviation of the number of groups, species richness  and diversity  were then calculated. as shown in table  <dig>  the deviation of each value was less than 3% for the total number of groups using any of the dereplication methods. the deviation was less than 7% for the shannon-wiener index and prediction of richness using chao <dig>  these results indicated that the method of using the first sequence put into a group as the representative sequence only has a minor effect on community composition predictions.

comparison of fastgroupii with other methods
fastgroupii was compared with two other available programs . fastgroup  <dig>   <cit>  is a java program that trims and dereplicates sequences based on user-defined criteria. dotur  <cit>  is a windows and unix-based program that dereplicates 16s rdna libraries using a distance matrix as input . in addition, dotur calculates various richness and diversity indices.

for comparison, fastgroup  <dig>   <cit>  was downloaded and installed on the same server as fastgroupii. fastgroupii was over  <dig> times faster than fastgroup  <dig>  for analyses on the test dataset presented here. the disparities in the execution time can be caused by the implementation details and the performance differences of the two programming languages. the web-based interface of fastgroupii makes it more accessible than the previous java version.

dotur  <cit>  is another publicly available dereplication program. unlike the fastgroup programs, dotur starts with a distance matrix exported from an alignment program like arb  <cit>  or clustalw  <cit> . the same test dataset was used to compare the grouping results from dotur to those obtained using fastgroupii. for consistency, the sequences in the test dataset were first trimmed in the same manner as they were in fastgroupii. the trimmed sequences were then aligned using clustalw with the default alignment parameters. the phylip  <cit>  distance matrix was exported from the global alignment and input to dotur using the default parameters. the operational taxonomic units  defined with 97% similarity were then read from the relevant files generated by dotur.

as shown in table  <dig>  the total number of unique groups obtained using dotur was fewer than that obtained using the psi with gaps algorithm in fastgroupii. a closer examination of the grouping results showed that the distribution pattern differed in the number of individuals in the most abundant group and the number of singletons . some of the singletons found in the psi with gaps algorithm were combined into larger groups by dotur. the random selection of the representative sequence in the psi with gaps algorithm is one of the factors accounting for the variation. however, the differences in the results are most likely due to variation in the substitution matrix used in the alignment, or differences in the classification of groups based on the guide tree.

CONCLUSIONS
fastgroupii is a web-based bioinformatic tool for rapidly trimming and dereplicating 16s rdna sequences. the user can choose between four different algorithms for dereplicating sequences. fastgroupii allows investigators to determine information about community structure and diversity from 16s rdna sequence data, and easily format the data for other analyses .

availability
the fastgroupii program is available at fastgroupii  <cit> .

abbreviations
rdna â€“ ribosomal dna sequences, rdp â€“ ribosomal database project, psi â€“ percentage sequence identity

authors' contributions
yy wrote the perl scripts, designed the webpage, and performed some of the lab work. mb performed most of the lab work and tested the fastgroupii program. pm set up the fastgroupii server and developed the webpage. fr conceived of the study, coordinated the lab, computer work, and manuscript preparation. all authors read and approved the final manuscript.

supplementary material
additional file 1
examples of different dereplication algorithms.

click here for file

 acknowledgements
we thank scott kelley, peter salamon and olga pantos for helpful discussions. this work was supported by nsf deb-be 04- <dig> to fr. mb was funded by an epa star fellowship.
