BACKGROUND
visualization plays an integral role in scientific investigation; it is useful for viewing large amounts of data simultaneously, observing patterns and outliers amongst data, and communicating findings to others. traditionally, visualization has been the final step in a genomic experiment, used to view the results of a multi-step workflow. however, this approach limits the usefulness of visualization because, should viewing the results reveal something unexpected, the problem must be diagnosed and complete workflow rerun. an alternative and powerful approach is to combine visualization with analysis tools to perform visual analysis. in visual analysis, visualization and tools are blended together to enable seamless—and often integrative use—of both to understand data, try different approaches, and diagnose issues.

visual analysis can simplify the use and creation of analysis pipelines. when using a pipeline with multiple tools, it is often useful to be able to check the data produced by each tool to ensure that it is reasonable. without visual analysis, data must be downloaded, the visualization software opened, and only then can the data be loaded and visualized. if tools and visualization are integrated, however, a single button can be used to view the data; once the data has been validated, the pipeline can be resumed. switching between visualizing data and running analysis tools is useful for more complex tasks as well. for example, in tool parameter space exploration, it’s useful to be able to run a tool with many different settings and use visually compare tool outputs for different settings.

there is growing consensus that visual analysis is needed for high-throughput genomic workflows and experiments  <cit> . integrating a limited set of analysis tools with genome visualizations was the first step taken towards visual analysis. for example, blat searches can be run and then immediately visualized in the ucsc browser  <cit> , the igv genome browser includes filters for dynamically filtering tracks based on metadata attributes  <cit> , the artemis browser includes real-time snp filtering as well as simple calculations  for small datasets  <cit> , the spark tool groups and display similar genomics regions together in real time  <cit> , and the stratomex application supports interactive clustering of genomic data to identify potential relationships amongst clusters  <cit> . this approach is limited, though, as many visualizations are closely coupled with tools, making it difficult to incorporate new tools. the savant platform addresses this limitation by providing a platform that supports analysis plugins. savant includes multiple modes as well as a plugin framework for developing analysis tools such as snp calling algorithms and dynamic  <cit> . similarly, taken together, bioconductor  <cit>  can be considered a visual analysis platform because it includes modules for both analysis and visualization. finally, a challenge with all visual analysis approaches is that many tools run for hours or days to operate on genome-scale data, making them impractical for interactive use.

drawing inspiration from this prior work, we have developed a framework for creating web-based visualizations and visual analysis applications. the web is ideal for visualization/visual analysis because data can be used remotely rather than downloading it, a significant advantage because high-throughput genomics data is very large. in addition, the web is useful for sharing visualizations with colleagues because the only software required is a web browser, which everyone has. our framework for doing visual analysis on the web provides  client-side and server-side components for visualizing genomic data and  integration with the popular online genomics workbench galaxy   <cit> . the framework’s components help manage data flow between web browser and web server, provide methods for indexing and quickly obtaining data from large genomic datasets, integrate visualization and analysis tools, and enable sharing and publication of saved visualizations. by integrating with galaxy, the framework enables any web-based visualization to use galaxy tools and integrate with galaxy’s analysis workspace.

using our framework, we have developed and integrated numerous visual applications into galaxy. these include a circos-style genome-wide viewer, an interactive phylogenetic tree, a generic scatter plot application, a genome browser, and an application for visually finding good parameter values for analysis tools. these applications support visual analysis through the use of analysis tools and user interaction/customization. while all the applications discussed enable some degree of visual analysis, we refer to each of them as a ‘visualization’ or ‘visual application’ for simplicity.

implementation
enabling web-based visual analysis required two implementation efforts. first, we developed a collection of client and server components that provide common, reusable building blocks for creating genomic visualizations on the web. next, we integrated those components into galaxy   <cit>  to take advantage of galaxy’s features and, ultimately, build more powerful visual applications.

components for building web-based visualizations
a library of javascript objects comprise the framework’s client  components. some objects are applicable to all visualizations, such as a base visualization object for easily creating and saving applications and a cache object for storing items, especially data. many objects are specific to visualizations that use genomic data. these objects include:  a genomedatamanager that requests, organizes, and stores data obtained from the server;  track objects that denote genomic datasets;  genome objects that include information such as chromosome lengths; and  bookmark objects for genomic regions with annotations. using only javascript and html to build an application ensures that only a web browser is needed to use it.

the framework’s server components include data converters, indexers, and providers written in python. converters and indexers transform or augment a dataset so that it can be efficiently queried for data. visualizations only need retrieve and display data in the region or area being viewed, so indices are critical because they can help provide data quickly. data providers use indices to return data requested by applications. there are often multiple data providers for a data type so that both summary  and detailed data can be provided. providing both summary and detailed data is important because it is often not feasible to return all the individual data points for a large region. trying to get all mapped reads for a chromosome, for instance, could yield millions of reads, which is too much data to provide to a web visualization. instead, data providers produce coverage data when there are many reads or features in a region, and individual reads/features are produced when a smaller region is queried. our framework includes data providers for many common genomic formats, including sam/bam, bed, interval, gff/gtf, vcf, bedgraph, wiggle, and bigwig/bigbed. there are also data providers for tabular and phylogenetic data. using data providers to query datasets is done through a restful api.

integration with galaxy
we have integrated our framework’s components into galaxy . galaxy is a open, web-based platform that can be used for all facets of genomic analyses, including data retrieval and integration from popular databases, multi-step analysis, repeated analyses via workflows, collaboration, and publication. integration with galaxy amplifies the value of web-based visualizations/visual analysis applications because they can be used together with galaxy’s other features. applications benefit substantially by virtue of access to galaxy’s large collection of analysis tools. integrating our framework’s components extends galaxy to support web-based visualizations. if existing data converters, data providers, and client objects are used, integrating a visualization into galaxy is as simple as writing the application in html and javascript— often using framework javascript components—and registering it with galaxy. galaxy’s visualization framework, then, is flexible enough to accommodate nearly any web-based visual application.

visualizations can be opened in galaxy’s analysis workspace via icons associated with a dataset. because the data is stored in galaxy, no downloading or formatting is necessary to use datasets in galaxy visual applications. visualizations can be saved and shared with individuals or published via url using the galaxy publishing framework, making them ideal for including in supplementary materials. shared or published visualizations are fully functional and can be copied and modified. galaxy visual applications require only a modern web browser to use; no programming skills are needed. our framework enables anyone to create web-based visualizations and integrate them into galaxy.

RESULTS
using our framework, we have integrated both stand-alone visualizations as well as complex visual analysis applications into galaxy. visualizations include a scatter plot, a phylogenetic tree, and a circos-style  <cit> , genome-wide viewer. the visual analysis applications directly incorporate galaxy tools. one application is a genome browser for high-throughput sequencing data in which tools can be run and their output visualized immediately. the other application helps identify good parameter settings for a tool via systematic exploration of a tool’s parameter space. these visualizations and visual analysis applications leverage web technologies to make them highly interactive and customizable, yet they require require no dataset downloads and no software beyond a web browser. customization and interactivity during visual analysis is important because high-throughput sequencing data, due to its low cost and high fidelity, is being used in increasingly diverse biomedical experiments. for visual analysis to be effective in a variety of contexts, it must be able to adapt visual analysis tools as needed.

scatterplot
tabular data is common in genomics experiments, and the scatterplot visualization makes it easy to create interactive scatter plots for columns of numerical data . creating a scatter plot for a dataset can be done in second by clicking on the dataset’s visualize icon and choosing the columns to use for the plot’s data. the plot derives minimum and maximum values for axes from the data and includes grid lines for reference. the plot can be customized on the fly by adding an id value from another column to each datapoint, setting axis labels and datapoint sizes, and plot width and height. hovering over an individual data point shows its label and values, and statistics for the plot’s data are available as well. scatter plots are displayed in the main window of galaxy’s analysis interface, making it possible to do visual analysis by toggling between running analysis tools and generating plots of output datasets. one common use of a scatter plot in genomics is visualizing differential expression data. galaxy includes the tophat-cufflinks pipeline  <cit>  for doing differential expression using rna-seq data, and figure  <dig> shows a scatterplot of transcript expression between two different human tissues.

phylogenetic tree
phyloviz is an interactive viewer for large phylogenetic trees  that provides powerful navigation and editing capabilities . all three popular phylogenetic formats  can be visualized in phyloviz. there are other software packages for creating interactive phylogenetic trees on the web  <cit> , but phyloviz takes advantage of new web technologies to provide unique features. phyloviz uses d <dig>  <cit>  for fast, efficient rendering of large trees in svg format and for leveraging graphical transitions to make tree navigation and editing more intuitive. phyloviz supports panning and zooming to navigate around trees, and subtrees can be expanded or collapsed by clicking on individual nodes. using phyloviz, tree attributes can be edited: nodes can be annotated and node-node distances can be changed; tree display parameters, such as font size and vertical/horizontal spacing can be adjusted in order to customize the tree’s display as needed. finally, nodes can be searched by name, annotation, or distance. once modified, a tree can be saved and revisited later. in figure  <dig>  phyloviz is being used to view and search the bcl <dig> gene phylogenetic tree.

genome-wide circos viewer
circos visualizations  <cit>  have become popular in genomics because they can display large, related datasets in a meaningful and aesthetic way. however, circos plots can be difficult to create, requiring data and software downloads as well as configuration. circster is a circos-style viewer for rendering genome-wide data  on the web. in circster, position-based data  are laid out in concentric circles representing chromosome position; chromosome interaction data  are denoted as arcs on the inside of the position data. creating a circster visualization and adding datasets to it is done via a graphical user interface and requires no programming experience. datasets can be added and removed in real time, and simple animations ensure that context is preserved as changes are made to the visualization. circster is highly interactive, enabling investigation of the data at many different levels of detail. initially, circster shows the complete genome, and all data is visible for all datasets. panning and zooming around the view automatically populates it with more detailed data for visible regions.

circster uses the d <dig> framework to render genomic data as svg. using svg paths to display complex objects such as histograms  and line data  limits the number of objects created and makes the visualization scalable to a large number of datasets. figure  <dig> shows a circster visualization for mapped rna-seq reads from both cancer cell lines and normal tissue, as well as potential chimeric transcripts from chimerdb  <dig>   <cit> . using circster, tissue-specific expression and cancer-normal expression differences are evident near potential chimeric transcripts.

genome browser for high-throughput sequencing data
genome browsers are amongst the most popular genomic visualizations, as evidenced by the large number developed  and the frequent use of browser screenshots in publications discussing genomic experiments. in genome browsers, datasets are displayed linearly along a chromosome as “tracks” and are stacked on top of each other.

our genome browser, trackster , is motivated by the need to enable visual exploration of increasingly large datasets produced from high-throughput sequencing data. trackster supports all major genomic formats, including sam/bam, bed, gff/gtf, vcf, wiggle, bedgraph, and the binary formats bigwig and bigbed. using trackster, even datasets with millions of features or mapped reads can be explored smoothly at any level of detail, from a complete chromosome of data down to individual reads. trackster loads data asynchronously in the background so that the visualization is never refreshed, ensuring that the current viewing window and adjacent data is preserved when panning and zooming. trackster supports smooth navigation amongst many levels of detail by using multiple data indexes, showing coverage data when there are too many features to display individually and showing individual elements when zoomed in.

trackster customization  is done interactively in the web browser and without page refreshes, enabling rapid experimentation so that data display can be adapted to an investigation’s needs. for instance, quantitative tracks  can be grouped together by drag and drop and then collapsed into a single “rainbow track” that displays all tracks in a single, dense display. rainbow tracks are rendered instantaneously and be undone just as quickly, making it easy to try out composite tracks with different groups of tracks and settings and, ultimately, find good compositions.

trackster is also a dedicated visual analysis environment that includes galaxy tools for interactively filtering visualized data and even creating new tracks. the broad goal of this integration is to help users try out and see results from different tool settings, thus helping them find good settings. one common operation is filtering out unwanted data. to help find appropriate filter settings, trackster has dynamic filters that can be used to interactively show and hide data based on feature attribute values—scores for genomic features, feature attribute values , and mapping quality scores for mapped reads.

trackster provides a general framework for using galaxy tools to create new tracks. tracks visualizing data created from an analysis tool include a panel that can be used to change parameter settings and rerun the tool on the visible data to generate a new track. by repeatedly changing settings and running a tool to create new tracks, it is simple to see how particular settings influence the tool’s output and also helps identify good parameter settings. to ensure that visual analysis is fast, filters are tools are run only on visible data by default. once good settings are found, the tool can be run with the chosen settings on complete datasets and the output placed in galaxy’s analysis workspace.

tool parameter space explorer
while trackster is useful for running an analysis tool to obtain data for particular parameter settings, it is not possible to see the tool parameter space or perform parameter sweeps. to address these limitations, we created sweepster, a tool parameter space exploration application . using sweepster, a partial or complete parameter space tree for a tool is created by selecting and sampling from the tool’s inputs. clicking on a node in the tree runs the tool iteratively to perform a systematic parameter sweep over the parameter values defined by the node and children. the tool is run on a dataset for one or more selected genomic regions, and the tool’s output for each region is visualized. sweepster is launched via track icons in trackster, and selected regions can include the current view in trackster as well as bookmarked regions.

sweepster is a combination of three complementary components:  an augmented galaxy tool form;  the tool’s parameter space tree; and  track display of selected regions for each tool run. the augmented galaxy tool form includes icons next to each parameter that add it or remove it from the tree. when a parameter is not in the tree, its value can be set to a single value using the form. for a parameter in the tree, sampling from numerical inputs is done by specifying minimum, maximum, and number of samples in the range. for categorical parameters, all possible values are included in the tree. the tool’s parameter space tree updates automatically as changes to the tool form are made. tree levels are labeled by parameter name, and tree nodes are labeled with parameter values.

when a node is clicked in the parameter space tree, the sets of parameters denoted by the node are used to run the tool repeatedly. the output from each tool run is drawn as a set of track tiles, with each tile denoting a selected region. as in genome browsers, tracks are stacked vertically, allowing for simple comparison between regions within a track and within the same region across tracks. mousing over a track shows its path in the parameter tree, making it easy to see the settings used to generate each track. viewing track tiles together like this makes it simple to visually identify good settings and run the tool using the settings on the complete dataset. finally, a track’s settings can be used to run the tool on the complete dataset.

both trackster and sweepster are visual analysis applications, tightly integrating analysis tools with visualization, using tools to generate new data which is then visualized in real time. this approach works for many, but not all, tools. we have previously discussed the strengths and weaknesses of this approach, as well as applied trackster and sweepster to develop an rna-seq pipeline to characterize expression dynamics of xbp <dig> in humans; xbp <dig> is a highly-conserved gene whose isoform expression is difficult to study because it includes transcripts with multiple overlapping reading frames  <cit> .

using, sharing, and publishing visualizations
icons and links in the galaxy user interface can be used to create visualizations as well as toggle between running analysis tools and visualization/visual analysis. the history panel on the right side of galaxy’s analysis workspace lists the datasets in a user’s current history. for each dataset that can be visualized, a icon and dynamic menu provides access to all suitable visualization applications. some visualizations, such as the scatterplot, display in the analysis workspace, while others display on their own page. all applications include a header that provides a link back to the analysis workspace. visual applications, including its state and preferences, can be saved and viewed or modified later.

visualizations are first-class objects in galaxy, and hence they can be shared, published, and included in galaxy pages. visualizations can be shared with individual colleagues or a unique url can be created for sharing more widely. visualizations can also be published to a publically-searchable list so that they are broadly available. galaxy pages are interactive web pages that include dynamic, embedded galaxy objects—datasets, analysis histories, workflows, and now visualizations—and can be used to describe an entire genomics experiment or act an online supplement to a published manuscript. the page at http://usegalaxy.org/interactive-rnaseq describes a recent rna-seq experiment and includes embedded trackster visualizations.

towards greater coupling of visualization and analysis tools
one way to categorize visualization applications is the degree of coupling between visualization and analysis tools. the visual applications discussed previously use widely varying levels of visualization and tool coupling. scatterplot, phyloviz, and circster are loosely coupled to tools; these applications do not incorporate tools but are connected to galaxy tools via galaxy’s main analysis workspace. trackster represents moderate coupling as tools are optional components of the application. in sweepster, tools and visualization are completely coupled and both are essential for using sweepster.

taken together, these applications demonstrate how our framework supports visual applications regardless of their coupling with tools. however, the most powerful examples of visual analysis arise from tight coupling of visualization and tools. the key technical advance in our framework that enables tight coupling is automatic subsetting of data  and transparently running galaxy tools on data subsets. data subsetting ensures that tools run quickly and that tool output can be used for interactive visual analysis.

looking forward, we plan to apply tight coupling between visualization and analysis tools to galaxy’s main analysis interface and its workflow system. this approach will enable more flexible and more powerful visual analysis. currently, individual tools can be run in visualizations, but it is difficult to switch between tools. providing access to galaxy’s complete set of tools within a visual application would make multi-step visual analyses much easier to do. for instance, the datasets in a galaxy history could be viewed as tracks in trackster, and any tool could be selected and used to generate a new track. similarly, using visual analysis tools within and alongside workflows would significantly increase the usefulness of galaxy visual applications.

galaxy as a platform for visual analysis
by making it possible to create and integrate visual applications into galaxy, we have transformed galaxy into a platform for visual analysis of high-throughput genomic data. galaxy provides a place where analysis tools and web-based visual applications can be integrated and used together for visual analysis. once a tool or visual application is integrated into galaxy, it can be used repeatedly and in any context. providing a single platform for analysis tools and visual applications is advantageous because tools and visual application can be combined in nearly limitless ways, ensuring that galaxy can be used for a wide variety of genomic experiments and adapted to new experiments as well. galaxy, then, amplifies the value of individual tools and visual applications because they can be connected with other tools and applications to create complex analyses. creating new visual analyses is especially important as high-throughput sequencing data is increasingly being used in a wide variety of biomedical experiments, each of which may require a unique analysis pipeline.

CONCLUSIONS
visualization and visual analysis are important tools in high-throughput genomics experiments. web-based visualization/visual analysis is attractive because large datasets do not need to be downloaded and because a web browser provides common software for sharing visualizations. however, building web-based visual applications is difficult and there are few tools to help.

we have created a framework with both client-side and server-side components that simplifies the development of web-based visual applications. we have also integrated this framework into galaxy and transformed galaxy into a visual analysis platform. by enabling visual applications to be integrated into galaxy, it is now possible to use analysis tools and visualizations together—often simultaneously—to do visual analyses of high-throughput genomic data. using our framework, we have created five visual applications—scatterplot, phyloviz, circster, trackster, and sweepster—and integrated them into galaxy. these applications represent a wide variety of visualization paradigms and demonstrate the breadth of tool-visualization integration that can be achieved using our framework. in addition, these applications showcase how highly interactive and scalable web-based visual applications can be built using modern web technologies such as html <dig>  canvas, and d <dig>  every visualization can be saved, shared with colleagues, or published to the web. as is the case for all galaxy functionality, only a modern web browser is required to create, view, and use galaxy visual applications.

availability and requirements
project name: galaxy visualization framework

project home page:http://galaxyproject.org

code home page: all framework code and code for specific visualizations is available in the main galaxy repository at http://bitbucket.org/galaxy/galaxy-central/

operating system: unix , linux , macos 

programming language: python, javascript

license: academic free

any restrictions to use by non-academics: none

competing interests
the authors declare that they have no competing interests.

authors’ contributions
jg, an, and jt conceived the project. jg, ce, tt, an, and jt implemented the visualization framework. ce designed and implemented scatterplot. tt designed and implemented phyloviz. jg and jt designed and implemented trackster, circster, and sweepster. jg, ce, tt, an, and jt wrote the manuscript. all authors read and approved the final manuscript.

