BACKGROUND
next-generation sequencing has become a widespread approach for studying the state and the interactions of bio-macromolecules in response to changing conditions living systems are exposed to. a variety of applications have been developed in the last years that permit studying the locations and the post-translational modifications of proteins bound to dna , the presence of mutations in dna , the expression level of mrnas , the methylation state of dna , the accessibility of chromatin to transcription factors , or the interactions of small rnas and proteins , to name a few. the protocols for these experiments are very different from each other. however, they all share the high-throughput sequencing step that is necessary to read out the signals. thus, next-generation sequencing has become a corner stone of modern life-science laboratories and is generally carried out by specialized facilities.

a sequencing facility is confronted with multiple problems. it must handle sequencing requests, process the samples according to the application specified, combine multiplexed samples to be run on the same lane such that de-multiplexing is not compromised and track the state of the sample while it is passing through the sequencing pipeline. they must ensure quality, keep track of reagent barcodes used for each sample, deliver the results to the proper user following de-multiplexing, archive the results and support the users when troubleshooting becomes necessary. furthermore, the user input at request stage can be erroneous and the facility needs to pinpoint inconsistencies as soon as possible. considering the central importance of sequencing data, a sequencing facility has to meet these demands under constant pressure to produce results as quickly as possible.

from the user's point of view, the time that passes between placing a sequencing request and obtaining interpretable data can be several weeks. to complicate matters further, the user placing a request is generally a biologist without extensive bioinformatics skills. the biologist collaborates with bioinformaticians who process their data to produce browser embedded tracks that the biologist can view and carry out statistical analyses that help interpreting the data, which adds to the lag time. some of the analysis steps to be carried out by bioinformaticians can be standardized, however. for example, alignment of the data to a reference genome and the generation of corresponding browser tracks is a routine task. automation of this step alone frees time for the bioinformaticians who can concentrate on more sophisticated types of analyses, shortens the lag time for the biologist, keeps data organized, and optimizes disk space usage.

all these requirements make a dedicated information management system indispensable. both commercial and non-commercial software solutions are available. commercial solutions come at considerable costs, lack transparency, and will only be briefly discussed here. illumina basespace  <cit>  is a web-based system with easy-to-use interfaces of sample submission, tracking and results monitoring. a plugin-based subsystem of ngs processing tools allows selecting default data analysis pipelines or adding custom ones. yet, the data must be stored on the basespace cloud. genologics clarity lims  <cit>  is a highly customisable lims with a rich set of options and short deployment time.

there is no shortage of non-commercial, open-source solutions. gnomex  <cit>  provides extensive solutions for sample submission, sample tracking, billing, access control, data organization, analysis workflows, and reporting for both ngs and microarray data. openbis  <cit>  is a flexible framework that has been adapted to be used for proteomics, high content screening, and ngs projects. the wasp  <cit>  system has been developed to meet the demands of ngs experiments and clinical tests. it provides embedded pipelines for the analysis of chip-seq, rna-seq, mirna-seq and exome-seq experiments. ng <dig>  <cit>  is based on a compact data model composed of projects, runs, and analyses. the analyses are running in the ergatis  <cit>  workflow management system and can accept different file types produced by roche  <dig> and illumina hiseq platforms. slims  <cit>  is a sample management tool for genotyping laboratories. seqbench  <cit>  has been designed to support management and analysis of exome-sequencing data. the pims sequencing extension  <cit>  is based on the protein information management system  <cit>  and has been adapted to be used with applied biosystems 96-well plate sequencers and two different types of liquid handling robots. there is also an extension with lims functionality to the popular galaxy workflow engine  <cit>  called galaxy lims  <cit> . the system supports request submission, offers assistance during flow cell layout, and automatically launches illumina's casava software  <cit>  to perform de-multiplexing and delivery of the user-specific fastq files. being integrated with galaxy, the data are automatically available to be processed by analysis pipelines stored in galaxy. miso  <cit>  provides a wide set of tools for ngs sample submission, tracking, analysis and visualization and it is distributed as a pre-installed software on a virtual image.

notwithstanding the availability of different open-source lims systems for sequencing applications, finding a solution that meets all the demands of a specific laboratory remains a difficult task. in general, a lims should provide support for request submission, store metadata associated to each sample and make them searchable, allow the role-based access control, track samples at all stages of the sequencing pipeline, keep track of reagents used, facilitate administrative tasks such as invoicing, do quality control, integrate seamlessly with the sequencing technology in use, process raw data and deliver them to the requester, apply different workflows to the data as requested by the user, and report the results in a structured fashion. at all stages, the user wants to have feedback regarding the state of their samples. an open-source lims must be adapted to the specific infrastructure and the project needs of a research institution, which are in constant evolution. therefore, the lims system must be modified accordingly. the effort needed to adapt an existing lims and gain sufficient insight into its code base in order to be able to modify it in a productive fashion must be weighed against the effort of developing an in-house solution. the plethora of available lims systems testifies that the latter option is often favoured. from this perspective, it seems that a simple lims has more chances of being shared than a more complex one. in any case, there is no lims that serves all needs in a simple turn-key solution. here we present smith, an open-source system for sequencing machine information tracking and handling that was developed to meet the demands of the joined sequencing facility of the italian institute of technology and the european institute of oncology. smith is available at  <cit>  .

methods
smith has been developed using java enterprise technology on the netbeans  <dig>  integrated development environment  <cit>  and runs on a java ee application server . apache maven  <cit>  is used as a software management tool.

the smith architecture is divided into a web-tier, a middle-tier, an information system tier, and adheres to the model-view-controller  paradigm. the web interface is provided using java server faces   <cit>  and primefaces  <cit>  technology. the facesservlet, that is part of the jsf framework, plays the role of the controller and coordinates the information exchange between the user and the model via a number of views that are provided as xhtml facelets. the model is composed of jsf managed beans that communicate with the information system tier that relies on the hibernate object/relational mapping  <cit>  to communicate with a mysql database. the messages displayed are organized in a resource bundle for allowing easy internationalization.

smith generates dynamically the scripts that perform the initial data processing . further analysis of fastq files is performed by the workflows of galaxy. finally, smith communicates with the ngs data file system via a mount point in the application server and can launch commands on a high performance computing cluster  to run the various workflows. this design has proven stable and scalable to multiple users.

RESULTS
infrastructure around smith at the center for genomic science
before presenting smith in detail, we briefly describe the infrastructure that smith operates in . the iit genomic unit sequences about  <dig> samples per year on an illumina hiseq <dig> instrument submitted by  <dig> users belonging to  <dig> different research groups. the raw data are first written to a raid <dig> configured set of hard disks on a local workstation running the hiseq <dig> controller software and contemporaneously transferred to a remote isilon mass storage device as the sequencing cycles proceed. this buffering procedure precludes data loss due to temporary network failures in the connection between the workstation and the isilon device and guarantees having the raw data entirely copied to their final destination in near real time. upon finishing the chemistry cycles, the data are de-multiplexed and converted to fastq format using casava software. fastqc software  <cit>  is used for quality control. the fastq files are then distributed to individual users for further analyses. the user directories are organized by group leader's name, user name, file type, and run date to facilitate access to the data. fastq files are stored in the fastq directory, bam files in the bam directory, etc. . each file has two links . the two links permit access to the same data file from two different locations. the first link is located in the user directory as described above. the second link is found in the casava output folder and facilitates access to the data using the flow cell barcode, the run date, or the run number by facility staff. the fastq data are being analysed further either by individual group bioinformaticians or subjected to smith workflows, as requested by the user. all computation intensive tasks are performed on a sun grid engine high performance computing  cluster that has mounted the isilon data directories. analysed data can then be viewed using a local ucsc genome browser mirror or other genome browsers such as the integrative genomics viewer   <cit>  or the integrated genome browser   <cit> . igb users can take advantage of a das/ <dig> server  <cit>  and a quickload directory installation  <cit>  for easy access to a large variety of genomes and annotations.

smith main tasks
smith orchestrates the data flow from the user request up to the fastq/bam/bed data. the main tasks and features are:

• sample submission

• sample annotation

• sample analysis

• sample tracking

• project awareness

• run folder monitoring

• quality control

• reagent storage

• role-based access

• virtual flow cells

• index compatibility testing

• email alerts

the users interact with smith for placing a sequencing request, for choosing sequencing and analysis options, for adding sample descriptions as key value-pairs for later meta-data analysis, and for tracking their samples using the smith web interface. users can also arrange samples into projects and choose collaborators for role-based access to the data. the facility staff interact with smith for assembling flow cells, for inserting reagent barcodes, and for keeping track of reagent stocks.

smith offers assistance in assembling flow cell lanes by choosing samples with compatible barcode index sequences to avoid barcode collisions at the de-multiplexing stage allowing one or two mismatches. from the user point of view, the most important features are sample submission and sample tracking. figure 1b shows the states a sample assumes as it is passing through the sequencing pipeline. submitted samples have sample status "requested". before starting a new run, a virtual flow cell is generated and distributed to the group leaders involved for final approval. samples added to the virtual flow cell change their status from "requested" to "queued". the confirmation by the group leader changes the sample status to "confirmed". once a flow cell is run, a sample sheet needed for de-multiplexing is generated automatically. when a finished run is detected, the processing engine generates and executes all the commands that are necessary to generate fastq data, copy the data to user directories, run fastqc, initiate galaxy workflows for further processing and send an email alert to the user that their data are now available. at this point, the sample status changes to "analysed".

role-based access
the role-based access was implemented in order to minimize data management errors. moreover, the role-based framework allows controlling data visibility. users can access only data of the projects they are involved in.

smith supports the following roles:

• a "user" can add samples, track their state and browse the data. users have access only to data that belong to their group leader.

• a "technician" can modify information related to sequencing runs . technicians have access to all submitted samples.

• a "group leader" has more extended access rights, than a "user". he can access all the data of his group. a group leader confirms assembled flow cells.

• an "admin" has ultimate access. admins have access to all the data and can add new users.

workflow subsystem
after the sequencing run is finished the workflow subsystem performs the data processing steps. the processing is run automatically when the raw data is ready. alternatively, it can be initiated manually by a user. the workflow subsystem includes two levels: the scripts for initial processing from bcl  to fastq files and the backend processing unit that is described below. the scripts perform de-multiplexing and fastq conversion with casava and generate quality control reports with fastqc. the architecture of the main processing unit is shown in the . this architecture is created to meet two requirements: on the one hand - an extendable workflow system that is able to handle any kind of ngs data processing and on the other hand - an un-pluggable core of the computational tools that can be installed in other facilities with minimal effort and can be used for exploratory analysis. galaxy has a highly integrative infrastructure and a friendly graphical user interface. therefore, galaxy is used as a primary workflow management system. galaxy allows extending the pipelines by custom tools and scripts but requires extensive configuration. to circumvent this problem, a subset of the tools of the pipelines was integrated into the ugene workflow designer  <cit> , which is subsequently called by galaxy. because of the simple structure of the ugene workflow designer, it can be easily unplugged from the system and installed to any other server or personal computer. moreover, the way that galaxy processes multiple inputs seems limited to the task of batch processing of ngs data. for instance, there is no direct way to support merging of multiple bam files through the galaxy api. that is why these functions are performed by the ugene workflow designer. the current version of the workflow subsystem includes the pipeline that performs the alignment of fastq data with bwa  <cit>  and converts the resulting data to bam and bigwig formats.

from the technical point of view, the workflow subsystem involves the following steps:

• for each ngs run, smith generates scripts that include all input files and all commands to be executed during the analysis.

• the commands invoke the galaxy runner. this is a python script that uses the galaxy api with the help of the bioblend library <cit> . the scripts provide the input, wait until galaxy analysis has finished, and download the results.

• galaxy partially invokes the ugene workflow designer, as show in figure 1c.

since the workflows used in data processing are in constant change, the flexible workflow subsystem can be quickly adapted to the changes. using the galaxy-ugene combination, the workflow subsystem can be extended by custom pipelines from both management systems.

in addition to data processing, the workflow subsystem manages the data structures: it puts the processed data in proper folders and writes the metadata references back to smith.

data model
the data model of smith was designed for achieving the following goals:

• progressively store all the information produced in the ngs process, from the sample request to the analysis parameters

• manage the access to the information for all the users, depending on a role and a group

• adapt to the existing pipelines and data flows in the research centre

• provide the possibility to add relevant information at any time

in figure  <dig> we show the ieee  model of the database. the structure of the database is described in table  <dig>  to summarize, each step of a sequencing experiment is mapped to the database, from the request to the production of specific files from diverse algorithms. partially, table records are generated manually by users, especially during the early steps. at later stages, table records are generated automatically by the analysis work flows. the attribute-value structure permits enriching each sample, and thus all the connected entities, with a detailed description that can easily be translated to xml or other formats that might be useful for other analysis purposes . the possibility to regroup samples into projects facilitates customizing role-based access to the data.

advantages of using smith
the first version of smith had been deployed in september  <dig>  since then, more than  <dig> samples sequenced on  <dig> flow cells have been processed. the use of smith led to a drastic reduction of the time it takes to carry out primary and secondary data analyses. primary data analysis refers to de-multiplexing and conversion of bcl to fastq format. smith automatically generates and launches the scripts needed for primary data analysis. depending on read length and read mode , primary data analysis is generally finished within a few hours after the last chemistry cycle. secondary data analysis is considerably more complex and our pipelines are in constant evolution. however, the integration with the galaxy system makes the data available to a wide range of custom scripts.

discussion and 
CONCLUSIONS
in this study, we described smith , a system for data management in an illumina sequencing facility that helps to decrease the data-delivery time. smith is designed to orchestrate sequencing and data analyses performed by the genomic unit of the italian institute of technology . utilizing a mysql database, java ee technology and a galaxy workflow subsystem, smith helps to setup a sequencing experiment, track meta-data artefacts, process raw data and manage data folders. smith is a light-weighed, yet effective web-based solution for the management of illumina sequencing data, which covers the entire workflow from the sequencing request to data presentation in a genome browser compatible data format. future developments of smith will be directed towards taking advantage of the attribute-value pair based description of samples for statistical analyses of in-house generated data as well as for meta-analyses using publicly available data.

availability and requirements
the demo version of smith is available at  <cit> . the maintained source code is freely available at  <cit>  under the terms of the mit licence.

smith can be used for the management of ngs experiments derived from the illumina platform. a system administrator will have to install and maintain a mysql server and a javaee application server. management of data produced by other sequencing platforms may be possible, although we do not have first-hand experience. adaptation of smith for use with alternative sequencing platforms likely requires a limited set of changes in the script generator, which is tailor-made for illumina sequencers in the current implementation.

the workflow subsystem can be used independently of smith, as a part of galaxy or ugene packages. it requires preinstalled workflow management systems and workflow schemes, which are employed by smith.

in order to use smith for ngs data-connected operations , the same ngs data and workflow infrastructure  must be provided by a host. the customization of smith should be discussed with authors in that case. the path to the relevant data folders can be specified as context parameters in the web.xml configuration file. for branding purposes, an institute logo can be displayed. furthermore, customization of the rendering styles of the template.xhtml will change the appearance of the entire application, if desired.

competing interests
the authors declare that they have no competing interests.

authors' contributions
fv contributed to the design and testing of the smith core system, including interfaces and database management. yv developed the workflow subsystem. ac contributed to the design and testing of the smith core system. hm oversaw the design of this study, designed and implemented the working prototype of smith and drafted the manuscript. all authors read and approved the final manuscript.

