BACKGROUND
the problem of classifying an object to one of a finite number of classes is a heavily studied problem in machine learning and statistics. there are numerous applications in bioinformatics, such as cancer classification using microarrays  <cit> , prediction of protein localization sites  <cit> , protein fold recognition  <cit> , and identification of the kinase that acts upon a protein phosphorylation site  <cit> .

recently, a novel kernel-based learning algorithm called the classification relevance units machine  for binary classification was introduced  <cit> . the crum addresses some of the concerns in the use of the support vector machine   <cit> , including removing the specification of the error/complexity trade-off parameter by using empirical bayes methods, generation of more parsimonious models, and providing probabilistic outputs through the estimation of the posterior probability density. furthermore, the training algorithm is more efficient than that of the relevance vector machine   <cit>  that similarly addressed the svm concerns. the highly compact model the crum generates significantly reduces the run-time of the prediction system and hence provides further advantages over the svm in conducting large-scale data analyses  <cit> , such as next generation sequencing  data analysis.

in this paper, we extend the crum algorithm into the more general multiclass setting, allowing for applications beyond binary classification. this is achieved by decomposing the multiclass problem into a set of binary classification problems using the error correcting output codes   <cit>  framework. to preserve the probabilistic outputs of the binary crum into the multiclass setting, the algorithm based on the generalized bradley-terry  model  <cit>  is considered. since the optimization problem solved by the gbt algorithm can prohibit its use in large-scale classification settings, we also propose a simple linear-time algorithm as an alternative. the details of the multiclass relevance units machine  construction based on the binary crum are described in the next section.

in this study, the mcrum is evaluated on two sets of experiments. first, the mcrum is applied to a variety of small-scale datasets from the uci repository  <cit>  in order to compare the performance of the mcrum under different settings by using different decompositions of the multiclass problem into a set of binary classification problems and the use of two different decoding algorithms that aggregate the binary predictions into multiclass predictions.

in the second set of experiments, the mcrum is applied to the problem of classifying small noncoding rnas  to validate the use of the method on a problem of a larger scale than that of the first set of experiments. this second set of experiments deal with a three-class classification problem, specifically, the identification of sequences from two classes of post-transcriptional gene regulatory ncrnas - mature microrna  and piwi-interacting rna  - from other ncrnas. this is of interest to small rna sequencing projects  where novel mirnas and pirnas can be found amidst a set of unannotated reads. for the mirnas, it is especially interesting since the mirna precursors may not be sequenced in those small ncrna sequencing project, and thus losing the usual avenue of finding novel mirnas via identification of their precursors  <cit> . furthermore, the predictions with the mcrum are based solely on the rna sequences and no additional genomic information is required, which is ideal for the study of organisms whose genomic information is lacking.

the experimental results on datasets taken from the uci repository together with the preliminary results on small ncrnas show that, under certain settings, the mcrum can achieve comparable or higher accuracy than previous analyses of these problems. thus the results suggest crum's potential in solving multiclass problems in bioinformatics and other fields of study.

methods
classification relevance units machine
the sparse kernel-based binary classification model called the classification relevance units machine  obtains probabilistic predictions  <cit> . let Ψ to be a set of objects; e.g. Ψ ⊆ rd. the crum models the posterior distribution p that an object x ∈ Ψ is a member of the positive class c+ using the following model

  p=σ∑i=1mwik+b 

where σ is the sigmoid function, m is a positive integer, k is a kernel function, the weights wi ∈ r, the bias b ∈ r, and the relevance units  ui ∈ rd. the posterior of the negative class is then p =  <dig> - p.

for a given k, m, an observed dataset x = {x <dig>  x <dig> ..., xn} ⊆ Ψ and the associated class labels {cx <dig> cx <dig> ...,cxn}, the binary crum learning algorithm first estimates the kernel parameter and ui's through unsupervised learning, and then learns the values of the wi's, and b through an iterative approach. the crum learning algorithm minimizes structural risk under log loss  <cit>  and determines the error/complexity trade-off parameter using an empirical bayes method. further details can be found in  <cit> .

the multiclass classification problem and solutions
multiclass classification is the generalization of binary classification to an arbitrary number of classes k >  <dig>  we denote the set of k classes as t = {c <dig>  c <dig> ..., ck}, and want to learn a classifier function g: Ψ → t.

there are two major approaches to converting a binary classifier to a multiclass classifier: the direct approach and through the aggregation of multiple binary classifiers.

direct approach
in the direct approach, the internals of the binary classifier are changed to reflect the k class situation. for crum, this is done by changing the underlying model from the binary sigmoid model to a multiclass softmax model,

  p=exp∑m=1mwmjk+bj∑i=1kexp∑m=1mwmik+bi 

where the m rus um, m·k weights wmi, and k biases bi are to be learned. the rus can be learned using unsupervised learning on the unlabeled data, as done in the binary case  <cit> . the k times increase in parameters lead to a k <dig> increase in the run-time complexity of the crum training algorithm compared to the binary case, due to the inversion of the  ×  hessian matrix. similar to the rvm, this may make this method impractical for large problems  <cit> . furthermore, related work in softmax regression suggests the need for more elaborate and costly methods for matrix inversion due to ill-conditioning  <cit> .

likewise, reformulating the svm for multiclass classification leads to high cost training algorithms  <cit> . therefore the second approach of aggregating multiple binary classifiers, which we will discuss next, has been the more popular and practical way to solve the multiclass classification problem.

decomposition of a multiclass problem into binary classification problems
the idea of the aggregation approach is to decompose the multiclass problem into multiple binary problems that can then be solved with binary classifiers. the most popular framework for this approach is the method of error correcting output codes   <cit> . in this framework, the decomposition of a k-class problem into l binary problems is expressed with a coding matrix,

  m∈{ <dig> ,Δ}k×l 

where each column of m specifies one binary classifier.

for example, the one-versus-rest  matrix for three classes is a  <dig> ×  <dig> identity matrix:

   <dig> 

there are three columns and thus this decomposition will require the training of three binary classifiers. the first binary classifier is trained with the training data belonging to class c <dig> as the positive class set and the data belonging to classes c <dig> and c <dig> as the negative class set. the second binary classifier is trained with the training data belonging to class c <dig> as the positive class set and the data belonging to classes c <dig> and c <dig> as the negative set. the third binary classifier is trained similarly. the name of this decomposition is called one-versus-rest  because each binary classifier is trained with only one class serving as the positive class and all other classes serving as the negative class. in general, the ovr matrix for k classes is the k × k identity matrix.

the all-pairs  matrix for three classes is also a  <dig> ×  <dig> matrix:

  11Δ0Δ1Δ <dig> 

the Δ symbol denotes omission of the class in the training of the binary classifier. therefore in this case, the first binary classifier is trained with the training data belonging to class c <dig> as the positive class set, data from c <dig> as the negative class set, and data from c <dig> is omitted. the next two binary classifiers are trained in a similar way. this decomposition is called one-versus-one or all-pairs  as each binary classifier is trained with only a single class serving as the positive class and another single class as the negative class. since there are k/ <dig> distinct pairs of classes, the general ap matrix for k classes is a k × k/ <dig> matrix.

in general any coding matrix m defined by equation  can be used under the following constraints:

 <dig>  all rows and columns are unique

 <dig>  no row is solely composed of Δ

 <dig>  each column has at least one  <dig> and 0

aggregating the binary outputs
given a coding matrix m and the outputs of the l binary classifiers, how do we compute the probability p? let us first consider the simple case of hard decoding, leading to a hard decision. assume that the binary classifiers gi, corresponding to the binary classifier specified by the i-th column of m, return hard decisions where an output of  <dig> denotes the positive class and  <dig> denotes the negative class. then the collective output of the binary classifiers on x can be collected into a row vector g = . the predicted class that x belongs to is determined by finding the row of m with the smallest distance to g. let y, z ∈ { <dig>   <dig>  Δ} <dig> × l. a commonly used measure of distance is a modified hamming distance  <cit> :

  d= ∑i=1lcost 

where

  cost=0ifa=banda≠Δ1ifa≠banda,b≠Δ1/2ifaorb=Δ 

let m denote the k-th row of m and,

  k*=argmink∈{ <dig> ,...,k}d,g) 

then the predicted class of x is ck*. in the case of the ap coding matrices, this would correspond to choosing the class with the majority vote of the binary classifiers. note that rows of m can be interpreted as the unique codewords representing the k classes and that the predicted g is one of those codewords corrupted by noise. in this context, the above algorithm decodes g into the closest codeword, thus performing error correction on the corrupted bits and giving the name of this approach to classification, ecoc.

unfortunately, computing the posterior probabilities pk = p for all k classes is more difficult. for general coding matrices, the generalized bradley-terry  model is used to estimate the posterior probabilities  <cit> . let ii+ and ii- denote the set of positive and negative classes, respectively, used by gi. then the output gi is the probability of the positive class of the i-th binary classification problem. also let ni denote the number of training data with classes in ii=ii+∪ii-, and the following quantities:

  qi= ∑k∈iipk 

  qi+= ∑k∈ii+pk 

  qi-= ∑k∈ii-pk 

given the probabilistic outputs of the binary classifiers r ^i=gi, the core idea of the gbt model is that

  r ^i≈p=qi+qi 

through these relations the posterior probabilities p = t can be retrieved. this is done by finding the p that minimizes the negative log-likelihood,

  -∑i=1lni+log) 

under the constraints that each pk >  <dig> and that they sum to unity. this optimization can be interpreted as the minimization of the weighted kullback-leibler divergence between r ^iand qi+/qi. huang et al.  <cit>  proposed an iterative algorithm to solve this optimization.

note that the optimization of equation  must be done for every object x that we want to make a prediction on. this could be too expensive in large-scale prediction applications. furthermore, the computational complexity of the algorithm is not completely characterized. while huang et al.  <cit>  provide a proof of convergence under some assumptions, under a general decomposition the algorithm may not converge. in the cases that are known to converge, the speed of convergence is unknown. therefore, a naive approach is proposed.

we make the naive assumption that the output of each binary classifier is independent. under the interpretation of error-correcting codes, the formulation below is a soft-decoding of the observed g to the codewords in m under the assumption that bit errors are independent. then we can compute the class posteriors as simple products of the binary posteriors, as follows

 p= ∏i= <dig> mki≠Δlpmkip1-mki 

  ≈∏i= <dig> mki≠Δlgimki)1-mki 

where the output of classifiers not trained on data from class ck are omitted. for example, from the decomposition given in equation , p = )g <dig>  given the outputs of the binary classifiers, the algorithm is linear in l. in the implementation log of equation  is used for computational stability as shown in step  <dig> of algorithm  <dig> 

the above formulation is a generalization to any valid m of the resemblance model for ap decomposition proposed in  <cit> . again, the key assumption is the independence of the l binary classifiers, which is highly dependent on the decomposition m. thus in general, this method is possibly only a crude approximation.

the following pseudocodes summarize the training and prediction processes of mcrum.

algorithm 1: training mcrum

   input: k × l decomposition matrix m, labeled training data

     1:  for i =  <dig> to l

     2:       positive_data ← initialize as empty

     3:       negative_data ← initialize as empty

     4:      for j =  <dig> to k

     5:         if mij = = 1

     6:             add data from class j to positive_data

     7:        else if mij == 0

     8:          add data from class j to negative_data

     9:        end if

     10:    end for

     11:    set gi to binary crum trained on positive_data and negative_data as described in  <cit> 

     12:    end for

     13:   return g = 

algorithm 2: prediction

   input: k × l decomposition matrix m, l binary crums gi, input x

     1:  set p =  = 

     2:  for i =  <dig> to k

     3:       for j =  <dig> to l

      <dig>           pi=pi+ln{gjmij)}

     5:        end if

     6:  end for

     7:  p=exp∑exp 

     8:  return p

optimal coding matrix
the next question is whether there is any theory that can help guide us to designing the optimal coding matrix that gives the smallest error. there is, but it is not practically useful. these are some of the properties that would achieve a good ecoc-based classifier  <cit> :

 <dig>  the minimum distance ) between rows of m should be maximized

 <dig>  the number of Δ entries should be minimized

 <dig>  the average error of the l binary classifiers should be minimized

all the criteria are at odds with each other. consider ovr decomposition, equation , again. since all but one class is considered to be in the negative class, the training data is likely to be imbalanced. to see why this is a problem, let us consider an extreme case where 99% of the training data is negative and only 1% of the data is positive. then a binary classifier that always predicts the negative class would achieve 1% error. under the framework of empirical or structural risk minimization, classifier training would tend to converge to his solution as it provides low empirical risk under 0- <dig> loss. therefore a large imbalance between the size of the positive and negative sets would bias the classifier against the smaller class. so while ovr does not have any Δ entries, the average error of the binary classifiers could be high.

in the case of the ap decomposition shown in equation , each individual binary classifier only has a single class serving as the positive data and another single class serving as the negative. if the overall training set was balanced between all k classes, then each of the binary classifiers will also be balanced and have good average error. on the other hand, the ap matrix contains many Δ entries, which is a force that increases error. as a side effect, each individual binary classifier will be faster to train compared to ovr, as the amount of data per binary classifier is reduced. this can be overshadowed by the sheer number of classifiers to train if k is large.

therefore knowing which coding matrix is superior to another a priori is not possible and the choice of coding matrix m is application-dependent. so we must experimentally try different matrices to find which one is the best suited to the particular application.

ncrna dataset preparation and features
the ncrna dataset is gathered from mirbase's collection of mirna  <cit> , noncode  <dig> 's collection of pirna  <cit> , and the remaining ncrnas in the noncode  <dig>  database serve as representatives of other ncrnas. each of these three sets is individually reduced using cd-hit  <cit>  to remove sequences with 80% or higher identity. this helps reduce the evolutionary correlations among the data and improves the generalization of the crum model that assumes an independent sample. the resulting dataset contains  <dig>  mirnas,  <dig>  pirnas, and  <dig>  other ncrnas.

in the gathered data, mirnas are observed to be  <dig> ~  <dig> nt long and pirnas are observed to be  <dig> ~  <dig> nt long. for the other ncrnas, the training and evaluation of the mcrum does not necessarily use the entire sequence. we chose to use fragments of length  <dig> nt, which is in the overlapping range of the lengths between mirnas and pirnas, so that the fragment has the possibility of being an mirna or pirna had the identity of the fragment been unknown. if the other ncrna sequence is of length longer than  <dig> nt, we take a random fragment of  <dig> nt from the sequence instead. due to the imbalance of the dataset among the three classes, the training set is a sample of the available data. after holding out 20% of the mirna sequences for an independent test set, we are left with  <dig>  mirnas in the training set. therefore we sample  <dig>  pirnas and other ncrnas each to form a balanced 1:1: <dig> training set. together with the hold out of  <dig>  mirnas, the remaining  <dig>  pirnas and  <dig>  other ncrnas serve as an independent test set.

since mature mirnas and pirnas lack strong secondary structures, internally the mcrum represents each ncrna using k-mers, for k =  <dig>   <dig> ...,  <dig>  for each value of k, the number of occurrences of each type of k-mer is computed and normalized.

performance measures
receiver operating characteristic  curve is a visualization of performance of binary classifiers at various thresholds. on the x-axis is the false positive rate  and on the y-axis is the true positive rate , which is also called sensitivity or recall. these two quantities are calculated as follows,

  fpr=fp/ 

  tpr=tp/ 

where tp is the number of true positives, fp is the number of false positives, tn is the number of true negatives, and fn is the number of false negatives.

for classification of more than two classes, we can compute roc curves by considering one class as the positive class and the remaining classes jointly as the negative class. for the small ncrna experiment, we have three classes. for figures 1) and  <dig>  we consider mirna as the positive class, and pirna and other ncrnas jointly as the negative class. under this setting tp is the count of mirnas correctly classified, while fp is the number of pirnas and other ncrnas classified as mirnas. fn is the sum of the number of mirnas incorrectly classified and the number of mirnas unclassified. lastly, tn is the sum of the number of pirna and other ncrnas correctly classified, the number of pirnas incorrectly classified as other ncrnas, the number of other ncrnas incorrectly classified as pirna, and the number of pirnas and other ncrnas left unclassified. the pirnas incorrectly classified as other ncrnas, and vice versa, are counted as true negatives because they are correctly classified into the negative class and not into the positive class, mirna. similarly, figures  <dig> and  <dig> are computed by considering pirna as the positive class and mirna and other ncrnas jointly as the negative class, while figures  <dig> and  <dig> are computed by considering other ncrnas as the positive class and mirna and pirna jointly as the negative class.

the timing results for the naïve and gbt decoding algorithms in the benchmark experiments were obtained using matlab implementations on a pc with a  <dig>  ghz intel core  <dig> quad processor and  <dig> gb of memory.

RESULTS
in this section we present two sets of experiments: benchmark experiments and small ncrna experiments. the purpose of benchmark experiments is to assess performance of mcrum for four different decomposition settings and the two different decoding algorithms. for the experiments, we use a group of datasets from the uci machine learning repository  <cit> , which is a collection of databases widely used for empirical analysis of algorithms in the machine learning community. the performance of mcrum with different settings is presented in terms of prediction accuracy. the small ncrna experiments are conducted to validate the use of mcrum on a larger scale problem. through the benchmark experiments, naïve decoding algorithm is proven to be much more computationally efficient than the gbt algorithm with its ap and ovr performances being close to the gbt results. therefore, in the ncrna experiments, only the naïve mcrums with ap and ovr settings are tested and the roc analysis is used to illustrate how the performance of selected mcrum models changes at various decision thresholds.

for both sets of experiments, we also run the multiclass svm implemented in libsvm <cit>  to illustrate mcrum's performance relative to svm-based approaches. the libsvm implementation uses the all-pairs decomposition, platt's method to generate probabilities from the individual binary svms, and their own algorithm for aggregating the all-pairs binary results to multiclass posterior probabilities. the multiclass svm implementation is freely available at  <cit> .

benchmark experiments
for the experiments, we try the mcrum on five small datasets from the uci machine learning repository website  <cit>  using the binary crum classifiers with the gaussian kernel. the kernel width γ and model complexity m is chosen via k-means clustering of the unlabeled training dataset  <cit> . for a range of values of m, k-means clustering is applied to group the unlabeled training dataset into m clusters and the akaike information criterion  is computed by giving the clustering results a probabilistic interpretation. the number of clusters with the best aic value is selected for m. furthermore, we set γ = - <dig>  where d is the maximum distance between cluster centers obtained by the k-means clustering with k = m. using k-means clustering to set parameters as described above has clear computational advantages, which can be critical when training is performed on large datasets. the same γ and m are used for all the individual binary classifiers per dataset.

throughout the benchmark experiments, we consider the following decompositions:  all-pairs ,  one-versus-rest ,  random dense, and  random sparse. random coding matrices m are generated with and without using Δ symbols for the random sparse and random dense cases, respectively. for each random type,  <dig> random m are generated and the m with the smallest minimum distance among its rows is chosen. controlling the number of columns in the random sparse matrix, we can aim to create a decomposition that is a compromise between ap and ovr. this is useful should the number of classes k be large and ap impractical, while still retaining some of the reduced training set benefits per binary classifier. the details of the different decompositions are given in the methods section.

the class label is assigned based on which class has the largest posterior probability, as determined by the naïve and generalized bradley-terry  decoding algorithms  <cit> . since the gbt algorithm is not guaranteed to converge, a maximum of  <dig> iterations of the algorithm is imposed. we first examine results using cross-validation.

wine dataset
the three-class wine dataset contains  <dig> instances  <cit> . the objective is to determine the origin of the wines based on  <dig> physicochemical measurements. the number of binary classifiers for ap and ovr are both three and so we set the dense and sparse decompositions to also use three classifiers. the mean accuracy and its standard deviation results in table  <dig> are computed via 10-fold cross-validation. the ap and ovr decompositions give nearly the same results regardless of using the naïve or gbt algorithms. there is a significant reduction in accuracy for the naïve algorithm for the random dense and sparse cases, but the gbt results remain close to the naïve algorithm's ap and ovr performance.

train/test acc is the mean accuracy on the training/test dataset. the standard deviation is shown in the parenthesis. 

the prediction running-times are also measured for the ap and ovr decompositions where the naïve and gbt algorithms show comparable predictive performance. as shown in table  <dig>  naïve algorithm achieves a three orders of magnitude speed-up compared to gbt algorithm for both ap and ovr decomposition.

we provide the prediction time only for ap and ovr cases since their predictive performances are competitive to each other for all benchmark datasets while the performances for random decompositions are much lower than the ap and ovr cases with naïve algorithm. the prediction time is averaged over 10-fold cross-validation for the first three datasets while it is estimated once for the last two datasets as their explicit partitioning of training and test sets were given. included in the parenthesis is the standard deviation of the prediction time. 

we observed the mean accuracies of  <dig> %  and  <dig> %  from gaussian svm for the training and test set, respectively, which is comparable to the ap and ovr mcrum results of  <dig> %  and  <dig> % . in addition, the best mean accuracy reported for a 10-fold cross-validation using a multiclass rvm for this wine dataset is  <dig> %  <cit> , which, considering the standard deviation, is also comparable to the best achieved here using the mcrum.

iris dataset
train/test acc is the mean accuracy on the training/test dataset. the standard deviation is shown in the parenthesis. 

the mean accuracies on the training and test set we observed from gaussian svm are  <dig> %  and  <dig> % . the best mean accuracy reported for a 10-fold cross-validation using a multiclass rvm for this iris dataset is  <dig> %  <cit> . again, both multiclass svm and rvm results are comparable to the best achieved here with mcrum  and  <dig> % ).

yeast dataset
test acc is the mean accuracy on the test dataset. the standard deviation is shown in the parenthesis. note that, due to the large dataset size and the high computational complexity of the gbt algorithm, the mean accuracy on the training partitions cannot be provided. 

for this dataset, gaussian svm shows  <dig> % accuracy with standard deviation of  <dig> . best results from ap mcrum ) and ovr mcrum  are again comparable to the svm results considering the standard deviation. the results from both mcrum and svm are an improvement over the  <dig> % achieved in the dataset's original analysis using psort  <cit>  and are comparable to the  <dig> %  obtained by k-nn with psort ii on this yeast dataset  <cit> .

the prediction running-times in table  <dig> show five orders of magnitude speed-up for the ap and ovr mcrums using the naïve algorithm over the gbt algorithm. this very significant speed-up is achieved with minimal impact to the predictive performance, as discussed above.

thyroid disease dataset
the results in table  <dig> are from the three-class thyroid dataset that has  <dig>  and  <dig>  training and testing instances, respectively. the problem is to determine if a patient has hypothyroid based on  <dig> attributes  <cit> . the number of binary classifiers for ap and ovr are both three and so we set the dense and sparse decompositions to also use three classifiers. regardless of the posterior decoding algorithm, the ap decomposition performs with the best accuracy. the naïve and gbt algorithms perform similarly on all but the sparse decomposition. it appears the independent binary classifiers assumption fails in the sparse case and the naïve algorithm does not approximate the posteriors for class  <dig> and  <dig> as well as the gbt algorithm does. the svm results we obtained for this dataset are  <dig> % and  <dig> % for training and test accuracy, respectively. the ap results from the mcrum  are slightly better.

train/test acc is the accuracy on the training/test dataset. note that an explicit partitioning of the data into training and test sets were provided. therefore, cross-validation experiment was not performed and, as a result, no information on standard deviation is available. 

as shown in table  <dig>  under the ap decomposition, it takes about  <dig>  seconds to compute the predictions for the entire test set using the naïve algorithm. on the other hand, with a maximum of  <dig>  iterations per datapoint, the gbt algorithm takes about  <dig>  seconds, almost four orders of magnitude longer than the naïve algorithm for nearly the same predictive accuracy. in the case of ovr, the predictions times for the test set are  <dig>  and  <dig>  seconds for naïve and gbt algorithms, respectively. the ovr decomposition appears to be an easier problem for the gbt algorithm to solve than the ap decomposition despite using the same number of binary classifiers.

landsat satellite  dataset
train/test acc is the accuracy on the training/test dataset. note that an explicit partitioning of the data into training and test sets was provided. therefore, cross-validation experiment was not performed and, as a result, no information on standard deviation is available. 

small ncrna experiments
to validate the mcrum on a larger scale problem and to explore its use for the task of ngs data analysis, we investigated the classification of mature mirnas and pirnas from other ncrnas. this is a problem of interest in the analysis of small rna sequencing  data. further details of the dataset and sequence features used by the mcrum are given in the methods section. for this experiment, two mcrum models are used for the ap and ovr settings using the naïve decoding algorithm, and their performance is illustrated relative to the gaussian and linear multiclass svms.

cross-validation experiments
figures  <dig> through  <dig> show roc curves under 3-fold cross-validation experiments. note that, because roc curves are defined for binary classification, each roc curve considers one of the three classes as the positive class, while considering the remaining two classes jointly as the negative class. for example, figure  <dig> considers mirna as the positive class and pirna and other ncrna as the negative class. the details of the computation of the roc curves are given in the methods section. the following results are obtained using the best observed model complexity, m =  <dig>  for the underlying binary crum models using the gaussian kernel. the kernel width γ is chosen using k-means clustering of the unlabeled training dataset with the selected m. for multiclass svm, we trained gaussian svms and linear svms where, on average, about  <dig>  support vectors were used in each binary gaussian svm and about  <dig>  for each binary linear svm.

in contrast to mirna, figure  <dig> suggests that the classification of pirna is a much easier problem. the tpr approaches  <dig>  even at a low fpr of  <dig>  for mcrum and  <dig>  for gaussian svm. the roc curves for ap and ovr mcrums are comparable while gaussian svm shows higher performance and linear svm works very poorly. the poor performance of linear svm may be due to the non-linear nature of the problem. although the gaussian svm shows superior performance, both ap and ovr mcrums also achieve similar level of tpr by sacrificing fpr slightly. furthermore, given more compact models and better computational efficiency of binary crum over svm  <cit> , mcrum can still be a favorable choice for large-scale prediction problems.

finally, figure  <dig> shows that discriminating the class consisting of other ncrnas is also difficult, but not as difficult as the mirna case. again, the performance suffers due to the difficulty of discriminating mirna from other ncrnas. while linear svm shows poor performance, in the region of overlapping fprs, the roc curves for gaussian svm and both ovr and ap mcrums are comparable. however, the ovr mcrum has a wider fpr range, allowing it to achieve a high tpr of about  <dig>  at an fpr of about  <dig> , that the ap mcrum and gaussian svm cannot obtain.

in additional file  <dig>  we provide a plot showing the fraction of the validation set left unclassified for the ap and ovr mcrums and the gaussian and linear svms at different posterior probability threshold values. in summary, linear svm is uniformly worse than the others, ap mcrum and gaussian svm have almost the same fraction of unclassified sequences, and ovr mcrum shows the smallest number of unclassified sequences across a wide range of threshold values.

independent test experiments
further evaluation of the mcrum and the multiclass svms on a larger, independent dataset was also conducted and the roc curves are given in figures  <dig> through  <dig>  mcrums are trained with m =  <dig> and svms are trained with about  <dig>  support vectors on average for each binary gaussian svm and about  <dig>  for each binary linear svm using the entire training dataset used in the cross-validation experiment. figure  <dig> reiterates that the mirna case is very difficult, showing results similar to the cross-validation experiment. for the pirna case shown in figure  <dig>  we again see very good performance from gaussian svm and both the ap and ovr mcrums, and extremely poor performance from linear svm. note that the scale of the fpr axis is very small. as described above, ap and ovr mcrums can achieve the similar level of tpr as gaussian svm by sacrificing fpr slightly, about  <dig> . in addition, the mcrums are computationally more efficient than the multiclass svms since the binary crum is less expensive computationally than the binary svm  <cit> . to compute the class posterior probabilities of the entire test dataset, the svms take about  <dig>  to  <dig> times longer than the mcrums even though the svm implementation is in faster compiled c++, whereas mcrum is implemented in matlab, a slower interpreted language.  lastly in figure  <dig>  we see the remaining ncrnas showing good results with gaussian svm and the ovr mcrum that are slightly better than the ap mcrum.

in additional file  <dig>  we provide a plot showing the fraction of the test set left unclassified for the ap and ovr mcrums and the gaussian and linear svms at different posterior probability threshold values. the results are very similar to those obtained for the cross-validation experiments shown in additional file  <dig> 

recently, a fisher linear discriminant  based classifier called pirnapredictior has been proposed for binary pirna classification by zhang et al.  <cit> . we have downloaded the script from their website  <cit>  and trained it with the training dataset used in  <cit>   and also with our own training dataset . then the resulting classifiers were evaluated on our test dataset. for the prediction step, both fld-based classifiers constrain the input sequence being at least  <dig> nt. we removed this constraint in the script as our test dataset contains many ncrnas  shorter than  <dig> nt.

the roc curves generated from observed results of the fld-based classifiers are presented in figures  <dig> and  <dig> along with the roc curves for mcrum and svm results. both ap and ovr mcrums and gaussian svm clearly show superior predictive performance over the fld-based classifiers. one reason for the lower performance of fld-based classifiers can be the possible nonlinear boundary between the classes of ncrnas under the features considered. the nonlinearity of the problem is also evident from the extremely poor performance of linear svm.

note that about 99% of the sequences in the positive training dataset for fld_ <dig> are from noncode  <dig> 's collection of pirna. our positive test dataset is gathered from a later version of noncode database and, as a result,  <dig> % of the sequences in our positive test dataset are already included in the positive training dataset used for fld_ <dig>  therefore the prediction results may be biased in favor of fld_ <dig>  then, fld_ <dig> showing better performance than fld_ <dig> may seem contradictory when the training set used for fld_ <dig> is independent of the test set. it can be because fld_ <dig> is not specifically trained on the ncrnas shorter than  <dig> nt. the training dataset for fld_ <dig> contains about  <dig> % ncrnas shorter than  <dig> nt while our training dataset used for fld_ <dig> contains  <dig> % sequences shorter than  <dig> nt. in the test dataset,  <dig> % of the sequences in the test dataset are shorter than  <dig> nt, for which correct prediction can be hard for fld_ <dig> 

CONCLUSIONS
in this study, the binary crum model is generalized to the multiclass setting via ecoc framework. the probabilistic nature of the binary crum is preserved using either the gbt or the proposed linear-time decoding algorithms. the proposed linear-time algorithm allows for efficient application to large-scale prediction settings, where the gbt algorithm's complexity is prohibitive, while still maintaining comparable predictive performance under certain decompositions of the given multiclass problems, as evidenced by the benchmark experiments. the applicability of the mcrum to larger scale problems is demonstrated by an analysis of small ncrna sequences. the results demonstrate that mcrum can be an advantageous solution to resolve multiclass problems especially when applied to large datasets.

the preliminary results on small ncrna classification presented in this paper demonstrate that the mcrum has potential in addressing the problem of classifying small ncrnas. in this study, we restricted the length of the other ncrna fragments to be maximum of  <dig> nt, but we plan to conduct further experiments with various lengths of fragments. we also plan to include short byproducts of small rna biogenesis, such as mirna*, in the class of other ncrnas. in the future, we will also extend the current study by including other classes of small ncrnas and optimizing the use of the mcrum for large-scale datasets such as those generated by ngs sequencing projects. features other than the simple k-mers will be considered to improve the predictive performance, especially for classifying the mature mirnas. finally, the interesting preliminary results obtained by the multiclass gaussian svm on the problem of small ncrna classification show that it could be an advantageous alternative to mcrum on smaller datasets and thus we intend to develop in tandem both classifiers for further experiments. the resulting small ncrna classifiers will be integrated into a combined prediction tool that will offer both the multiclass svm and mcrum options providing more alternative choices to users.

competing interests
the authors declare that they have no competing interests.

authors' contributions
mm implemented the mcrum and performed the experiments. all authors participated in the design of the study, development of crum and the data analyses. kb and gp supervised and coordinated the whole research work. all authors have read, revised and approved the final manuscript.

