BACKGROUND
the development of genomic and post-genomic technologies is producing a large amount of heterogeneous data for investigating the functions of the genes and their products. biological data are spreaded across an increasing number of databases that differ widely in terms of quality, consistency, diversity and availability  <cit> . the biologists are now faced with the problem of analysing this information and turning it into new knowledge. simple analysis is usually performed directly on a database through a query language  or using a pre-defined set of queries. more sophisticated analyses require to integrate heterogeneous data coming from various sources and rely upon the use of specialized algorithms and data structures, since database models are not suitable for direct algorithmic use.

an efficient way to analyse the functions of the genes/proteins consists in exploring the relationships between various kinds of biological data  <cit> . as a very simple example, it is possible to assign a function to a protein from a given organism knowing that this protein is encoded by a gene which is ortholog to another gene encoding a well-known protein in another organism . in that case, a network of objects  is actually explored using relationships .

more generally, such a network can be modelled as a graph. a graph is defined by two sets  where v is a set of vertices and e is a set of edges. a vertex represents an object in the network . an edge connects two vertices and corresponds to a particular relationship in the network . a graph is said to be directed  if it is exclusively made of oriented  edges. graphs benefit from efficient algorithms and are widely used in computer science. during the past few years, graph theory has been used in biology for data modelling purpose, especially for molecular interaction databases  and metabolic pathway databases . graph-based algorithms have also been used to answer various biological questions, such as in the field of protein-protein interactions networks  or biochemical networks . most of the current solutions are dedicated to restricted set of data and/or particular analyses, and they cannot be easily modified to accommodate new data/methods. another approach to target data graph analysis in a more general way consists in using a graph database. significant systems like good  <cit> , hy+  <cit> , gql  <cit> , hyperlog  <cit>  and the system from butler et al.  <cit>  provide visual interfaces and pattern-oriented query languages allowing the end-user to answer various biological questions through the use of diagram-based queries. this approach is more intuitive and more generic than the previous ones, it can be applied to various data types, and does not require the design of particular algorithms to answer particular questions. however, current graph database systems have a limited data modelling power since they rely on a flat  data model. graph querying approach could greatly benefits from object-oriented data modelling techniques since they provide a higher level of abstraction  that is especially well-suited to represent complex biological data. in this context, the snow system  provides an environment dedicated to the representation and analysis of biological networks which is based on an entity-relationship data model.

this work is concerned with the development of genolink, a generic software application dedicated to the exploration of graphs, where vertices and edges are enriched with data modelled using an entity-relationship model. genolink can be seen either as a generic graph querying and browsing engine or as a dedicated application for biologists. from the first point of view, genolink provides a generic graph data structure, a graph query engine, allowing to retrieve sub-graphs from the entire data graph, and several graphical interfaces to express such queries and to further explore their results. it is important to note that the graph data structure does not rely upon any particular data model but can dynamically accommodate for any user-supplied data model. however, since our primary goal concerns genomic and post-genomic applications, genolink is distributed with a default data model for this particular purpose.

system and methods
overview
the overall architecture of genolink, represented on figure  <dig> is composed of two main components : the core and the data storage system. the core provides the graph representation of the data on the top of which querying and display operations are performed. it interacts with the storage system through an api based on an entity-relationship model . this api basically allows data retrieval, creation or modification. the core relies on a simple and generic graph model made of two entities: vertices and edges. in order to link them to actual data, vertices and edges have two attributes: a data identifier  and a data type. the id is a unique identifier to a piece of data kept in the storage system , and the data type identifies the corresponding type for this data. the api is therefore composed of two parts : one to access the data , and one to access the data model .

accessing the data model has several important consequences to the functionalities of the core. first, the data model can specify that data types are organized into hierarchies . in that case, the core engine will retrieve this information  and can further use it in the querying process. for instance, if, during a query, the user requires that a vertex should be of type 'gene' and if 'proteingene' is a subtype of 'gene', then all data of type 'proteingene' should match this vertex as well. a second aspect relates to data consistency. by querying the model  the core can easily ensure that a user query is consistent with the data model, for instance that types are connected through the proper relationships. finally, a last aspect relates to the content of the data itself. a piece of data in the storage system is described by an identifier  and a set of attributes. for instance a gene may have attributes to describe its name, its description and its length. during a query, some constraints will be ascribed to these attributes . again, by querying the data model, the core is able to control the consistency between the user's constraints and the data model.

in this architecture, any kind of data storage system could, in theory, be used, as long as it can accommodate the api-m and api-d. in practice, we implement genolink by using an object-oriented dbms , based on the arom system  <cit> . the reason for using an oo-dbms is that the mapping between the generic graph model and the object model is greatly simplified.

data connection and data import
there are basically two mechanisms to transfer data sets from external sources into the genolink system: data connection and data import.

data connection is straightforward: when the core is started, it connects trough the api-d to the storage system and constructs a 'shallow graph' representation of this data. we use the term 'shallow graph' to point out that the graph model does only retain in memory the graph topology and the identifiers and data types attached to the vertices and edges, not the whole data set itself. indeed, when a specific part of data is needed  the core will dynamically request it to the storage system through api-d.

the data connection mode is conceptually simple but has the drawback that all the data should be already available in the storage system. this does not allow a great flexibility for the user to add some specific data. to this purpose, genolink provides a data import mechanism. in this mode the data are described in one or more external xml-formatted flat files. such a file contains the description of a data graph in terms of vertices and edges. each xml vertex  should specify a data type and an id. when loading the file, the core first checks that the provided data type is known . then it checks whether the id already exists. if it does not, a new piece of data  will be created in the storage system . the xml vertex  may also contain attributes. again, the core checks that each provided attribute is correct for this type and will assign the provided value to it . this mechanism provides a flexible way of instantiating the data into the storage system since several pieces of information pertaining to the same object can be progressively put together by successively loading external files. for instance, genomic information can be first loaded to instantiate genes together with their relationships to an organism, and additional information, such as their homology relationships or their involvement in metabolic processes, can then be added. of course this integration process relies on using the same identifier to designate the same object in the various files.

in the context of genomic and post-genomic applications, genolink is distributed with a set of parsers and xsl transformation sheets to facilitate the construction of these xml files, as described later.

data exploration
exploring a data graph consists in finding vertices or paths between two vertices or, more generally, sub-graphs of particular interest. with currently available applications, this can be done with dedicated graph algorithms  or constraint programming systems . however, genolink proposes an exploration mechanism based on a graphical 'query/browse' system adapted to data graphs.

in genolink, exploring a data graph is done in two steps. first, the user formulates a query on the data graph. the results of such a query are sub-graphs representing portions of the whole data graph of particular interest. then, the user graphically browses into the whole graph by using these sub-graphs as starting points.

the creation of a query can be achieved in two ways: either using a dedicated graphical user interface, or using a query language . the former does not require any programming skills.

formally, a genolink query is a graph pattern where vertices and edges are made of the data types defined by the data model . these vertices and edges may carry local constraints consisting of algebraic expressions involving the vertex or edge attributes. a query may also define a global constraint consisting in algebraic expressions involving attributes of different vertices or edges. an occurrence of a graph pattern in the data graph is a sub-graph of this data graph where the vertices and the edges fully satisfy the graph pattern constraints: topology, data type  of vertices and edges and constraints on attributes.

in addition to query declaration, genolink is also able to compute union, difference or intersection between sub-graphs. a full description of querying and graph operation capabilities of genolink are provided with the documentation distributed with the software.

the matching algorithm
the search engine of genolink is responsible for searching for all matches of a graph pattern  against the whole data graph. this graph search problem is related to the sub-graph isomorphism problem, which is known to be np-complete  <cit> . one of the most commonly used algorithms to solve that problem is the backtracking algorithm proposed by ullmann  <cit> . the algorithm used by genolink is inspired from the ullmann's one but present some slight differences that mostly come from the fact that, in the sub-graph isomorphism problem, one has to compare two graphs of the same kind whereas, in the graph pattern problem, the nature of the vertices and edges is not strictly the same between the graph pattern and the data graph. nevertheless, due to the close similarities between the two problems we  state that a result sub-graph is 'isomorphic' to the pattern graph.

genolink relies on a depth-first search  approach which is guaranteed to find all the ways a query graph matches the data graph. local and global constraints are used in the algorithm in order to prune the search space. more precisely, the algorithm uses a two-steps process. first, it uses the data types declared in the vertices and edges of the query graph to find out which one returns the smallest number of vertex/edge instances from the data graph. that particular vertex or edge will be used as a seed for the dfs exploration. the dfs proceeds through the data graph, using the query graph as a guide, and will progressively add vertices and edges into the nascent sub-graph. at each step, data types and local constraints are checked to prune the search. finally, each time a sub-graph has been completed, the global constraint is applied.

at the end of the dfs, an additional filtering step may optionally be added in order to discard redundant result graphs . this step is similar to the use of a distinct clause in sql queries.

implementation
default dbms
as mentioned earlier, genolink comes with a default storage system implemented using the arom  java-based system. arom is an entity-relationship knowledge modelling and management system freely available . it provides data management services: formal description of the data model, creation and modification of instances and data persistence. it has a richer metamodel than genolink that makes it easy to connect to the api. on the other hand, it has the drawback of keeping all the instances in memory that limits its usage to the available ram . in the future we plan to extend genolink to other oo-dbms, to xml storage systems or to relational dbms. the later case is the most difficult since the metamodels are quite different and will probably require a simplification and refactoring of the api.

default data model
genolink comes with a default data model  targeted at representing microbial genomics and functional genomic data. the data model comprises  <dig> classes and  <dig> associations. a uml representation of the main classes and associations is depicted on figure  <dig>  there are basically three main categories of classes: one for representing nucleic biological entities ; one for representing proteic biological entities , the later being typically linked to the former by the 'iscodingfor' association. the last category relates to sets of entities like functional classifications. a typical example is a gene orthology classification  or the ec number classification for proteins. additional specific associations allow representing the results of particular experiments. a typical example, depicted on figure  <dig>  is the 'hasphysicalinteractionwith' association between peptidic entities which allows representing the results of protein-protein interaction experiments.

the default data model can be easily modified or, even, completely replaced by another one, in order to accommodate other experiments or different biological problems. this is done by editing the arom model text file. thanks to the api-m, the genolink core will dynamically adapt to the modified or new data model.

default data import
together with the default data model, genolink provides a set of default data parsers for popular data formats: the genomes from the refseq division of genbank  <cit> , the ncbi cog database of pre-computed clusters of orthologous genes and its functional classification  <cit> , the gene ontology  classification  <cit> , the interpro domains database  <cit> , the enzyme commission  classification  <cit> , and protein-protein interactions formatted using hupo psi-mi  <cit> .

the purpose of these parsers is to produce  files coming from the above mentioned data bases into genolink xml-formatted files. these files are then loaded on the fly by the xml import module as previously described. of course these xml files fit to the default data model. if the user changes this model, then the parsers should be modify accordingly.

user interfaces
genolink comes with various viewers/editors, namely the kb rider, the annotator, the query builder, the table rider and the graph rider.

the kb rider is responsible for displaying the data model. by using the api-m it allows to browse the classes and associations that have been defined in the model. in a similar way, the annotator allows to browse and edit the data actually attached to vertices and edges.

the query builder allows to graphically create a query graph . a typical screenshot is displayed on figure  <dig>  as shown in figure 5a, the user can compose the query graph by selecting vertices  in a window . clicking on a vertex  will call the constraint editor as shown on figure 5b, allowing to add an algebraic constraint on the corresponding object.

once a query has been composed, the query engine can be launched and the sub-graph results can be further explored by using the table and the graph riders. the table rider provides a tabular view of all the results. to this purpose, each sub-graph is linearized and associated to a line in the table. the columns correspond to the attributes of vertices and edges . the table rider therefore provides an overall view of the results and allows to select interesting lines . once a line is selected, the graph rider provides a graphic view of the corresponding sub-graph  and allows to browse the whole data graph by exploring the neighbours of displayed vertices.

core api and tasks
besides the graphical user interface, all operations of the genolink core, such as graph creation, data import, graph querying and display, can be executed and controlled programmatically through a java core api. user-provided java code can be dynamically loaded and executed in the system . this allows the user having some programming skills to design her/his own tasks to perform some specialized work. the core api and several tasks examples are distributed with the software's documentation.

implementation
genolink, like all modules of the genostar platform, is written in java. it uses standard java libraries such as xerces  and xalan  engine  <cit> ) from the apache software foundation, castor  from "exolab.org" and gnu regexp  from "castor.org". the arom task interpreter is built upon beanshell  <cit> . all graphical user interfaces are written with the java swing library.

RESULTS
we now illustrate the querying capabilities of the system by investigating the functions of genes and proteins from bacteria escherichia coli and helicobacter pylori. to this purpose, we imported the following data: the complete genomes of the two bacteria  along with the annotations coming from cog  <cit> , interpro  <cit>  and enzyme classification data  <cit> . the resulting data graph contains  <dig> objects  linked together through  <dig> relations. it takes about  <dig> minutes for genolink to read and to integrate the data into a single data graph occupying around  <dig> mo in main memory .

query q <dig> is a very simple example showing how to retrieve all cds from e. coli. the constraint on the organism reads as 'the name attributes matches "coli"' and is indicated in italics below the organism vertex.

query q <dig> illustrates how to search for e. coli 'hypothetical' proteins that are annotated with the enzyme commission database. when this query is run against the complete data graph,  <dig> 'hypothetical' proteins are found that are annotated with an ec number. now, it is worth noting that the same query executed against a data graph containing only the e. coli refseq genome does not return any result. the difference illustrates the data integration process: the refseq e. coli genome has been dynamically augmented with new annotations  when we imported the ec database.

genolink can be used to refine a query, depending upon the results of a previous one. as an example, query q <dig> retrieves all pairs of orthologous genes  between h. pylori and e. coli. query q <dig> refines the previous one by restricting to genes coding for 'hypothetical' proteins.

query q <dig> illustrates how to retrieve all pairs of genes between h. pylori and e. coli encoding for proteins having a common interpro domain.

query q <dig> shows how it is possible to handle negation. in this example we are interested in finding genes with no  orthologs between the two species; by extension, we could suspect this genes are specific to each organism. to this purpose, gql proposes a 'neighbours' operator. this operator explores the immediate neighbourhood of a vertex in a data graph and counts the number of vertices of a given type that are connected to it. in query q <dig> that operator is used as follows: when the query engine examines vertex of type proteingene, it will count how many geneortholog vertices are linked to that proteingene and will retain this vertex only if this number is  <dig> .

query q <dig> gives an example of how some information can be inferred from one organism to the other. in this example we would like to infer unknown protein-protein interactions into e. coli from already known interactions in h. pylori and gene orthology relationships. to this purpose, we first load the complete protein-protein interactions map from h. pylori  <cit> . then, we built up query q <dig> under the assumption that if it exists an interaction between two proteins in h. pylori, and if these proteins are encoded by genes having  orthologs in e. coli, then we may hypothesize that these e. coli proteins could interact as well. in this example, this yields  <dig> different answers, one of them is displayed in figure  <dig>  for this kind of query, the table rider  proved to be very useful since it provides a synthetic view allowing for a quick visual inspection of the  <dig> couples of possibly interacting proteins .

CONCLUSIONS
genolink is a new software platform adding to existing dbms new functionalities dedicated to the querying and exploration of data graphs. genolink handles graphs where vertices and edges are enriched with data modelled using an entity-relationship model. the platform provides the biologists with a rich visual environment to graphically explore genomic and post-genomic data, without prior knowledge of any programming or database querying languages. genolink provides the bioinformaticians with more advanced features such as a generic data graph exploration tool able to accommodate user-provided data models, a query language well-adapted to query graphs and a programming api.

availability and requirements
genolink is distributed either as a standalone application or as a component of the genostar/iogma platform. both distributions are free for academic research and teaching purposes and can be requested at academy@genostar.com. a commercial licence form can be obtained for profit company at info@genostar.com. the distributions have been successfully tested on computers running redhat linux, windows 2000/xp or macos x. the genolink distribution also incorporates a complete user's guide including a beginner's tutorial.

authors' contributions
pd and jw conceived the software architecture, designed the graph query language, the graph pattern matching algorithm and the whole set of graphical interfaces. pd managed the overall project, wrote most of the software code and documentation, and wrote the manuscript. ll and jld participated in coding the graphical interfaces. am and pd encoded the graph library used by genolink. av and jw initiated the project in the genostar consortium. all authors participated in the development of the data model used to investigate the functions of genes and proteins, in testing the software and in editing the manuscript.

supplementary material
additional file 1
genolink query graph examples. each row corresponds to a different query . the query column gives an informal statement of the query, the query-graph column displays the corresponding graph pattern, that has to be constructed in the query builder . the results column indicates the number of distinct results obtained . the time column indicates the execution time . in the sake of clarity, the following code as been used to denote the type of edges: ilo for islocatedon, iro for isrepliconof, icf for iscodingfor, hpa for haspolypeptideannotation, iig for isingeneortholog, cd for containsdomain and hpiw for hasphysicalinteractionwith. when applicable, constraints are displayed in italics under the concerned vertex or edge.

click here for file

 acknowledgements
the development of genolink is a research and development work from the genostar consortium . created by the end of  <dig>  and headed by françois rechenmann , the consortium aims at developing genostar, a bioinformatics platform for exploratory genomics. the consortium brings together four partners: two biotech companies, hybrigenics  and genome express , and two research institutes, the pasteur institute  and the inria rhône-alpes . this work has been supported by the french agency for innovation  and the french ministry of research through the program 'genopole' of the 'direction de la recherche' and the program 'genhomme' of the 'direction de la technologie'. we thank françois rechenmann and jacques nicolas for reading the manuscript and for helpful discussions.

figures and tables
