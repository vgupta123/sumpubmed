BACKGROUND
the post genomic era presents us with an ever increasing amount of dna sequence and sequence-related data. bioinformatics platforms such as those of national center for biotechnology information  provide suites of sequence search and analysis tools. however, new web-based technologies can significantly increase the possibilities for sharing and using sequence data in different contexts. here we present an approach that utilizes the capabilities of conventional web-based search engines such as google for exploring sequence and related information across multiple data sources. we have utilized this approach for sequence searches involving dna barcodes, which are short genomic regions used in biodiversity, ecologic, and taxonomic studies for species-level identification  <cit> .

in order to facilitate the use of a search engine such as google on sequence data, we developed a character-based algorithm for dna sequences, similar to the method recently employed by  <cit> . essentially, we convert the dna sequence into a series of "characters" that can be used to create dichotomous keys for identification. this set of characters is then compared to a library of known dna sequences  that have, themselves, been subdivided in a similar way. since both the query sequence and the library of sequences have been separated into short "words", we can exploit a variety of custom-built and existing word search algorithms, such as google, to perform these searches. here we provide a brief overview of this approach and two implementations using dna barcoding data as an example.

RESULTS
method
we gathered all the cytochrome c oxidase  <dig>  sequences identified by the keyword barcode in genbank and compiled them in a database broken into words. we also assembled all the fungal internal transcribed spacer  sequences that have been generated from representative species of fungi for reconstructing fungal tree of life   <cit> . our user interface is composed of a simple "one box" search window. the user submits a query sequence and the program filters out gaps and breaks the sequence into words that will be piped to a conventional search engine. we have used the freely available google desktop search  engine  <cit>  for searching the sequences broken to words . using a conventional desktop computer as our hardware, a  <dig> base of 5' region of cytochrome c oxidase i gene  as query, and all the ~ <dig>  co <dig> sequences in genbank as our database, the search usually takes 1- <dig> seconds on a typical high speed internet connection. the answer contains the species name and the sequences of  <dig> closest matches to the query sorted by their levels of character  similarity to the query, with the differences in sequence shaded .

we also assembled all the fungal its sequences that have been generated from representative species of fungi for reconstructing fungal tree of life   <cit> . these sequences provide an example for non-coding dna barcodes . its sequences were treated similarly as co <dig> sequences. interestingly, our method was able to provide accurate searches for these non-coding its sequences.

algorithm
there are two components to our algorithm:  the creation of the barcode database; and  the querying of that database.

creation of the database
1) barcode sequences, stored in a standard sequence format , are read in, converted to upper-case characters, and "cleaned" to remove alignment characters or flanking ambiguous characters 

example:

nnnnagcgcg---cggatnnn → agcgcgcggat

2) each sequence is broken up into "words" consisting of a fixed number of characters, starting at the first base. if the final word is incomplete, it is deleted.

example :

gtatcggtaacgaactt → gtatc ggtaa cgaac tt

3) the species and their associated words are stored in a searchable database. this database can be a custom-built hash table, or one can utilize existing search engines such as the google desktop search, google enterprise solutions , apple's spotlight, or microsoft's indexing service.

querying the database
1) the user submits a sequence from an unknown specimen

2) the sequence is converted to upper-case and "cleaned" of non-dna characters--the same operations performed on the sequences in the database

example:

nnnn??agcgcg---cggatnnn → agcgcgcggat

3) the sequence is broken up into words in all possible "frames"

example:

frame 1: gtatcggtaacgaactt → gtatc ggtaa cgaac tt

frame 2: gtatcggtaacgaactt → g tatcg gtaac gaact t

frame 3: gtatcggtaacgaactt → gt atcgg taacg aactt

frame 4: gtatcggtaacgaactt → gta tcggt aacga actt

frame 5: gtatcggtaacgaactt → gtat cggta acgaa ctt

4) each set of words is queried against the database in succession. a score is assigned to each database match based on the number of words in the query sequence that exactly match words in the target sequence. the frame that returns the target sequence with the best score is considered correct.

5) for each target sequence, the species name is returned to the user, along with its full sequence with the words from the query sequence highlighted 

notes

1) creation of the database does not require time-consuming alignments

2) the query sequence can be in any "frame" relative to the sequences in the database and they will still be matched properly

3) the order of the words is immaterial--scores are based on the number of words that match, not the order in which they match--so highly fragmented sequences will still match properly. it is possible that taking the order of words into account might improve accuracy, but this is a fundamental limitation of the underlying search algorithms.

implementation
google gene
we have written a custom indexing plug-in for the google desktop search  that allows the gds to recognize common nucleotide sequence formatted files , read the species names, break the sequences into words, and store the results in the gds index. custom-written software performs most of the steps outlined in the "querying the database" section of the algorithm section above, but the gds query api is used to perform the individual searches described in step  <dig>  our algorithm is highly neutral to the particular search engine used to perform the queries themselves: besides the changing search apis, the same approach could be applied to apple's spotlight search , microsoft's indexing service , or any number of alternatives.

our current database houses over  <dig>  publicly available sequences, and is set up to automatically download new barcode sequences from genbank on a monthly basis. this system uses the ncbi equery api to find sequences that have been uploaded in the past  <dig> days that have the "barcode" keyword. the sequences are then downloaded, processed, and added to the google desktop database. this implementation of our approach is available for public use on a web server  <cit> .

tuning word sizes
our algorithm is highly flexible with respect to the size of the "words" that the sequences are broken into. however, some tuning of word size is necessary to obtain optimal results. if words are too short, they will be present in every sequence and will be uninformative. on the other hand, if words are too long then small, single-nucleotide variations between sequences from the same species will reduce the overall match score as much as great differences between sequences. speed is also a consideration: longer words allow for quicker searches. our choice of a 15-base word size is not arbitrary, but is instead the result of a series of experiments to judge species assignment accuracy at different word lengths. we analyzed a barcode library of butterflies, moths, caddisflies, stoneflies, and mayflies and performed word-based searches of this library using word lengths ranging from  <dig> to  <dig> bases in length . as shown in figure  <dig>  if the words are too large then they become sensitive to small haplotype differences within species and unique assignment cannot be made robustly. conversely, word sizes that are too small lack specificity. our results indicate that 15-base words  provide a high degree of accuracy while maintaining many of the advantages of a longer word size. we cannot claim that this is an optimal word size for every barcode , but our results indicate that for co <dig> at least, accuracy is roughly constant over quite a wide range of word sizes and there is no reason to suspect that co <dig> is unique in this way. therefore, even if the optimal word size for its is slightly shorter or larger than  <dig> bases, the accuracy of species assignment should not be impacted greatly.

discussion and 
CONCLUSIONS
the approach presented here, which is developed cheaply by using freely available web-based tools and conventional hardware, represents how a popular technology such as google can be exploited for specialized genetic information. in the barcode of life frame work, which aims at developing a standard web-based dna barcode library for all species, our approach provides a platform independent, fast, and accurate search for dna barcodes. this capability is a critical element of a robust automated species identification system. in addition to searching dna barcode data in specialized sequence data bases such as genbank or bold our method also allows exploring other sources of sequence information on the web or the users' own private datasets. the user only needs an internet connection and a browser  to make use of sequence information.

software availability
the method described here is available in a publicly-accessible web server: . updates and further development of the approach will be posted on this website. an additional implementation that uses the google mini appliance rather than the google desktop search is available at the dna barcode linker website .

competing interests
the authors have no competing interests to declare. although intellectual property protection was initiated for this algorithm, it was not and will not be further pursued.

authors' contributions
mh co-developed the idea, designed the project, aided bioinformatics analysis and wrote the manuscript. gacs designed and conducted bioinformatics analysis, wrote the code and edited the manuscript. all authors have read and approved the final manuscript.

