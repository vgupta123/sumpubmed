BACKGROUND
technologies for high-throughput measurement of transcriptional gene expression are mainly divided into two categories: those based on hybridization, such as all microarray-related technologies  <cit>  and those based on transcript enumeration, which include sage  <cit> , mpss  <cit> , and digital northern powered by traditional  <cit>  or, recently developed, est sequencing-by-synthesis  technologies  <cit> .

currently, transcript enumeration methods are relatively expensive and more time-consuming than methods based on hybridization. however, recent improvements in sequencing technology, powered by the "$ <dig> genome" effort  <cit> , promises to transform the transcript enumeration approach into a fast and accessible alternative  <cit>  paving the way for a systems-level absolute digital description of individualized samples  <cit> .

methods for finding differentially expressed genes have been developed specifically in the context of enumeration-based techniques of different sequencing scales such as est  <cit> , sage  <cit>  and mpss  <cit> . however, in spite of their differences, hybridization-based and enumeration-based data are typically analyzed using the same pattern recognition techniques, which are generally imported from the microarray analysis field.

in the case of clustering analysis of gene profiles, the simple appropriation of practices from the microarray analysis field has been shown to lead to suboptimal performance  <cit> . cai and co-workers  <cit>  provided an elegant clustering computational solution to group tag  profiles that takes into account the specificities of enumeration-based datasets. however, to the best of our knowledge, a solution for transcript enumeration libraries  is still needed. we report on a novel computational solution, called simcluster, to support clustering analysis of transcript enumeration libraries.

implementation
theory
without loss of generality, we use the term "tag" to refer to the transcripts' representation, as usual in the sage field . the theoretical model used here to describe the transcript enumeration process is the usual uniform sampling of interchangeable colored balls from an infinite urn model. given the total number n of counted tags and the abundance vector π of all transcripts, this model leads to a probabilistic description of the observed result: x|π, n ~ multi, i.e., the counts x follow a multinomial distribution  <cit> . it is also possible to model x as poisson distributed  <cit>  since it is an approximation for the multinomial. regardless of the specificities of the theoretical probabilistic model, it is well known that, as with other counting or voting processes, the natural space for dealing with this kind of data is the simplex space. the unitary simplex space, having d dimensions, is defined as  <cit> :

  sd−1={π|π∈ℝ+d,π1′=1} 

where  <dig> is a vector of ones. in the gene expression context, d is the number of unique tags observed. an example of a simplex vector is p = e and applying a standard bayesian approach, one obtains from x|π, n, using a dirichlet prior density π ~ dir, the posterior density: π|x ~ dir.

it is known that clustering analysis is inherently dependent on the choice of a distance measure between the considered objects. this, in turn, is connected to the structure of the underlying space. a metric Δ, measuring the distance between two objects a and b, must respect the properties:

 Δ = Δ;

 Δ =  <dig> ⇔ a = b;

 Δ ≤ Δ + Δ.

one may also consider additional reasonable properties such as:

 scale invariance Δ = Δ, x, y ∈ ℝ+; and

 translational invariance Δ = Δ.

these commonly required additional properties guarantee that distance measurements are not affected by the definition of arbitrary scale or measurement units and that more importance is given to the actual difference between the objects being measured rather than commonalities .

translations on the simplex space are defined by  <cit> :

  p⊕t=1′ 

where · is the usual hadamard product and the division is vector-evaluated.

well known distances, such as euclidean, manhattan, and correlation-based distances, do not exhibit the properties - if the measured objects belong to the simplex space, as is the case of transcript enumeration data. a possible metric that obeys - on the simplex space is the aitchisonean distance  <cit> :

  Δ=ln−1ln′ 

where i is the identity matrix, × is the kronecker product, -d subscript is a notation for "excluding the dth element", and elementary operations are vector-evaluated.

clustering procedures coherent with this theoretical background are suitable for transcript enumeration data.

software design
in short, simcluster's method can be described as the use of a bayesian inference step  to obtain the expected abundance simplex vectors given the observed counts e, and the use of the aitchisonean distance in the following algorithms: k-means, k-medoids and self-organizing maps  for partition clustering, pca for inferring the number of variability sources present, and common variants of agglomerative hierarchical clustering.

currently, the simcluster package is comprised of: simtree, for hierarchical clustering; simpart, for partition clustering; simpca for principal component analysis ; and several utilities such as treedraw, a program to draw hierarchical clustering dendrograms with user-defined colored leaves. simcluster's modularity allows relatively simple extension and addition of new modules or algorithms. increasing the coverage of algorithms and validity assessment methods  <cit>  are envisioned in future updates. simcluster can be used, modified and distributed under the terms of the gpl license  <cit> . the software was implemented in c for improved performance and memory usage, assuring that even large datasets can be processed on a regular desktop pc .

to increase source code reuse, established libraries were used: cluster  <dig>  <cit>  for clustering, gnu scientific library  <cit>  for pca, cairo  <cit>  and a modification of treedraw x  <cit>  for colored dendrogram drawing. the input data set can be a matrix of transcript counts or general simplex vectors. some auxiliary shell and perl scripts are available to: automatically download data from the geo database  <cit> , convert geo files to simcluster input format, and filter out low-count tags.

the linux-based installation and compilation is facilitated by a configuration script that detects all the prerequisites for simcluster compilation. missing libraries are automatically downloaded from the simcluster website and compiled by the simcluster compilation process.

to broaden usability, a user-friendly web interface was developed and is made available at http://xerad.systemsbiology.net/simcluster_web/. figure  <dig> shows a screenshot of an analysis session using simcluster's web-based interface.

RESULTS
we agree with dougherty and brun  <cit>  that "validation" of clustering results is a heuristic process, even though there are some interesting efforts to objectively incorporate biological knowledge in this process using gene ontology, especially when one is clustering gene expression profiles  <cit> . however, to illustrate the usefulness of our software, we collected several examples in which the performance of simcluster can be considered as qualitatively superior to some traditional approaches imported from the microarray analysis field. these examples include est, sage and mpss datasets, and are available on the project's webpage  <cit> . among these, we describe here a simulated enumeration dataset built from real microarray data, for which we can define the ground truth and check results against it in a relatively objective way. of course, a comprehensive study with simulated data, consisting of comparisons of clustering algorithms, distance metrics, and distributions generating the random point sets, would be necessary to properly evaluate any clustering algorithm. this should be the subject of future work. the objective of this example is to show that simcluster is able to reconstruct the clustering result obtained for an affymetrix microarray dataset when the input is a simulated transcript enumeration dataset, built to mimic the real microarray biological data.

the data used to create the virtual transcript enumeration data was obtained from the innate immunity systems biology project  <cit>  and is provided as an additional file  <dig>  this data is a set of affymetrix experiments of mouse macrophages stimulated by different toll-like receptor agonists  during a time-course . a detailed description and biological significance of this dataset is presented elsewhere  <cit> .

using this data, a clustering analysis result is shown in figure  <dig>  this pattern is obtained using the most common type of clustering analysis in the microarray field: euclidean distance with average linkage agglomerative hierarchical clustering, implemented by r  <cit>  routines, available as additional file  <dig>  this clustering pattern will be considered to be the "gold-standard" for the purpose of this simulation.

the virtual experiment consists of the creation of a transcriptome with the relative abundance between genes defined by the affymetrix data; sampling a random number of tags from it of different magnitudes; enumeration of sampled transcripts; and using some common clustering procedures along with simcluster. it is easier to understand the concept of the virtual transcriptome by following a particular case. for the sample labeled lps- <dig> measured  <dig> minutes after the lps stimulus, for the affymetrix expression levels see table  <dig> 
the virtual total number of available tags is defined as proportional to the measured intensity using  <dig>  as a scaling constant, an arbitrary number large enough to assure that finite population issues are negligible. actual examples are:  <dig>  for bg094499;  <dig>  for bg973910; and so on until  <dig> , <dig> for actin; and  <dig> , <dig> for av <dig>  the total amount of available tags is t =  <dig> , <dig> , which is a number much greater than the typical number of sequenced tags and is in accordance with the "infinite urn" model.

the total of virtually sequenced tags n for each sample is simulated from a poisson distribution, n ~ poisson, to create a realistic virtual sequencing library. all generated data and results are available as additional file  <dig>  for example, the actual simulation for n =  <dig> , <dig> virtually sequenced tags assigned n =  <dig> , <dig> for the lps- <dig> library; n =  <dig>  for the cpg- <dig> library; and so on. the same process is repeated for increasing n from  <dig>  to  <dig> , <dig>  since n ≪ t for all n considered, the multinomial sampling is used and its mean is taken for each library, according to the assumed "infinite urn" model. the results for the largest simulation are shown in figures  <dig>   <dig>   <dig>   <dig> and individual results for all separate increasing n sizes are available as additional file  <dig> 

it is clear that cluster results obtained by simcluster converge to the same structure obtained by analyzing the affymetrix data, as the number of virtually sequenced tags increases. moreover, simcluster's results are not only compatible with the usual microarray analysis for affymetrix data, but also are more biologically meaningful than the results obtained by the usual microarray analysis techniques applied to the virtual sequencing data. as in the original microarray analysis, the simcluster result is able to cluster together the different stimuli, placing consecutive time-points close to each other.

although this kind of analysis certainly does not provide a proof, the above result indicate that the theoretical framework is adequate for enumeration-based data, as expected. additional examples and discussions can be found on the project's website  <cit> .

CONCLUSIONS
we developed a software tool, called simcluster, for clustering libraries of enumeration-based data. it is important to note that simcluster is built in accordance with a well-established mathematical framework for compositional data analysis, which provides principled procedures for dealing with the simplex space, and is thus applicable in contexts other than transcript enumeration.

availability and requirements
• project name: simcluster

• project home page: http://xerad.systemsbiology.net/simcluster

• operating systems: linux for the stand-alone version and platform independent for the web-based tool.

• programming languages: c for the stand-alone version and c, perl and html for the web-based tool.

• other requirements: some gnu/gpl or gnu/lgpl libraries distributed together with the main package.

• license: gnu general public license  <dig> 

list of abbreviations
est – expressed sequence tag

sage – serial analysis of gene expression

mpss – massive parallel signature sequencing

sbs – sequencing-by-synthesis

authors' contributions
rznv proposed and conducted the study. lv wrote the software and helped to interpret the results. cabp indicated the compositional analysis literature and is lv's phd thesis advisor. hb provided biological insight for result interpretation. is supervised the study. rznv and is wrote the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
appendix: aitchisonean distance. contains an appendix with some background on the usage of the aitchisonean distance.

click here for file

 additional file 2
stand-alone command-line simcluster version  <dig> . <dig>  simcluster version used to create results of this work. note that this version is distributed for compatibility issues only and users should always obtain the latest version at the project's website: http://xerad.systemsbiology.net/simcluster.

click here for file

 additional file 3
simulation data, results and scripts. contains the script that generated the virtual transcript enumeration data, the dataset used as the basis for the analysis, the results from it, and the conclusions for all tested samples sizes n from  <dig>  to  <dig> , <dig> 

click here for file

 acknowledgements
we thank dr. jared roach  and dr joão c. barata  for constructive discussions and dr. alistair rust  for help with the web server. lv is supported by capes. cabp is partially supported by cnpq. this work is partially supported by nih/niaid grants u19-ai <dig> and u54-ai <dig> and nih/nigms p50-gmo- <dig> 
