BACKGROUND
molecular bioinformatics was born as a science of comparing individual dna and amino acid sequences with each other. over the past three decades important biological insights have been obtained by establishing unexpected sequence similarity between seemingly unrelated proteins . more recently, modern high-throughput technologies  injected tremendous amounts of sequence data and associated experimental information into the public databases, creating the need for collective comparisons of large sequence groups . the transition from pairwise sequence comparison to comparing large protein datasets against each other is similar to switching from finding differences between individuals to comparing populations of whole countries. is wine consumption in france higher than in england? do germans drive faster than americans? analogous queries applied to biological molecules prevail in post-genomic bioinformatics. in many genome sequencing papers one finds a bar chart contrasting the new sequence with other genomes in terms of sequence motif composition. while analysing gene clusters obtained by expression analysis it is typical to ask whether one gene group is significantly enriched in certain functional categories with respect to another one. are proteins with many interaction partners different from less prolific interactors  <cit> ? are essential genes more evolutionary conserved than non-essential ones  <cit> ? the list of such questions is endless. answering some of them involves a mere counting exercise while others require the application of sophisticated bioinformatics approaches and careful statistical analyses.

mining protein properties at large scale has been especially productive in computational structural genomics where it helped to establish basic facts about structural complements encoded in complete genomes. for example, it was shown that membrane proteins constitute roughly 30% of each proteome  <cit> . the patterns of globular fold occurrence in different organism groups were carefully investigated  <cit> . the mechanisms of protein structure adaptation to extreme environments were revealed by comparing the genomes of thermophilic  <cit> , halophilic  <cit> , psychrophilic  <cit> , and barophilic  <cit>  species with their counterparts living under normal conditions.

a recurrent bioinformatics task in comparative proteomics involves mapping and integrating information from disparate sources. while reporting experimental results as well as theoretical predictions one may refer to proteins using the uniprot  <cit> , genbank  <cit> , or refseq  <cit>  nomenclature, or custom ids for sequences not yet submitted to public databases. the situation is additionally complicated by frequent genome updates which may result in new, previously missed orfs identified, existing sequences corrected, as well as the removal of misannotated orfs. as a result, establishing unambiguous correspondence between protein sequence entries and associated experimental data may represent a difficult, albeit trivial challenge.

countless customized software tools with varying degrees of complexity have been independently written in research labs throughout the world to address protein comparison and mapping tasks, although there are significant commonalities in the technical steps that need to be implemented. the authors of this contribution, too, wrote their share of throw-away perl scripts and quick-shot java programs to compare groel substrates with the rest of the escherichia coli lysate  <cit> , crystallizable and non-crystallizable proteins  <cit> , disease-associated proteins and those without such association  <cit> , abundant and non-abundant proteins , as well as completely sequenced genomes  <cit>  and functional properties of alternatively spliced genes  <cit> . it is precisely the fatigue from re-inventing the wheel over and over again that motivated us to develop a bioinformatics framework for large-scale protein comparisons.

much to our surprise, we realized that general solutions for comparing and analysing large sets of proteins in the space of arbitrary annotation attributes are currently hardly available or limited to certain application areas. we are aware of only two software projects addressing the need for large scale comparative analysis. the comprehensive genome properties resource  <cit>  allows comparing complete prokaryotic genomes based on a multitude of pre-defined property assertions. the system is primarily focused on metabolic information, does not allow user-supplied protein attributes, does not provide statistical tests to validate differences between genomes, and is not available for local installation. genemerge  <cit>  is an excellent tool for detecting over-representation of certain functional or categorical descriptors in a given subset of proteins relative to the general set based on rigorous statistical tests, but it provides neither integration with bioinformatics databases nor a graphical user interface.

here we describe a platform-independent system named prompt  capable of addressing a wide spectrum of routine tasks in comparative proteomics. prompt enables the user to compare arbitrary protein sequence sets, revealing statistically significant differences in their annotation features. protein annotation can be imported from a variety of standard bioinformatics databases as well as from generic xml description files. facilities are provided for linking experimental information obtained from different sources to appropriate genes despite discrepancies in gene identifiers and minor sequence variation. the entire functionality of the system is available via a full-featured server-independent graphical user interface. at the same time, a java api is provided for integration with user applications.

implementation
functional overview
prompt operates with three types of information associated with proteins: database ids, amino acid sequences, and annotation attributes. the latter may be any protein feature manually assigned, experimentally measured, or calculated from sequence; such features may be nominal and/or numeric. examples of numeric features are molecular weight, pi, abundance, and the number of interaction partners. nominal features can be sequence motifs, keywords, functional categories, ec numbers, and so on. sequences are primarily used by prompt to establish the correspondence between proteins imported from different sources and thus having incompatible database ids. this is done by similarity-based mapping and careful handling of exceptions and minor sequence variations. sequence data can be either obtained directly from public databases, or supplied by the user as flat files using one of the commonly accepted formats as well as a custom xml format.

once annotation features have been imported and assigned to appropriate proteins, actual large scale comparisons of protein properties, data interpretation, and statistical analyses can be conducted. the central task consists of comparing two sets of proteins and finding significantly enriched or depleted features in one of the sets. results can be viewed in tabular form, visualized by various types of plots, and exported to other applications.

as seen in figure  <dig>  a general prompt workflow involves three stages: i) data import, ii) data processing which includes mapping, comparison, and statistical tests, and iii) visualization and presentation of results for subsequent analyses. additionally, the data can be exported and saved at each step.

technology
prompt is written in java  <dig> . the graphical user interface  was built with java swing, and the help system utilizes java help extensions. the apache log4j package  <cit>  handles message logging and reporting. all input, test, engine and visualisation classes are loaded dynamically by the gui using java reflections. scripting functionality is realized with the beanshell package  <cit> .

software architecture
prompt is partitioned into three self-contained layers – the input layer, the processing layer, and the visualization layer- which are interconnected via clearly defined interfaces. these interfaces ensure interoperability between a wide variety of input sources, algorithms, visualisation techniques and export methods by defining cross-layer communication in such a way that an algorithm, once developed, will work with any input module that provides the requested input interface. it does not matter, for example, whether the sequence data comes from a local uniprot xml file  <cit> , an sql database or a web service. this approach allows the application of prompt's algorithms to new and currently unknown data formats and sources. conversely, newly added algorithms can immediately reuse all of the available input and output modules. the same applies to new import modules that can be used with all applicable algorithms as soon as the required interfaces have been implemented. similar to the approach adopted in java beans  <cit>  all prompt modules are encapsulated by the troika of init, run, and getresults methods that perform initialization, actual computation and the returning of results, respectively. this design pattern provides a comfortable and uniform handling of all parts of the prompt framework. furthermore, the clear separation between individual layers ensures reproducibility of results as the data can be saved and evaluated at every step.

data retrieval and integration
data import from flat files is predominantly based on biojava  <cit>  which is used to parse multi-fasta, embl  <cit> , genbank  <cit> , and uniprot  <cit>  formats. in particular, the uniprot xml format is supported. additionally, data can be directly imported from two mips databases – pedant  <cit>  and simap  <cit>  – using data access objects provided by these two resources. user extensions can be easily incorporated by creating java classes that implement or extend the java interfaces provided by prompt.

alternatively user-specific data can be loaded in prompt's custom xml format. such an xml file  can contain any number of numeric or nominal attributes for a set of elements that we, for simplicity, assume here to be proteins . a numerical attribute could be e.g. the number of predicted transmembrane segments or molecular weight. examples of nominal attributes are ec numbers or functional categories. annotation properties are represented as xml nodes with the name property. they have an id attribute that serves as a unique reference to the property within the xml file. additionally, the property nodes have an attribute of the name type that can have either the value numeric or symbolic for numeric or nominal data, respectively. within the property elements the annotation data for each protein are stored as xml nodes in the form <input id = "xx" value = "yy"> where yy represents annotation data for the protein with the identifier xx. a numerical attribute can be any number in anglo-saxon notation, e.g.  <dig>   <dig> , or 1e- <dig>  nominal attributes of a protein contain one or many arbitrary strings separated by semicolons, e.g. "energy; metabolism; atp". optionally, xml files can contain a property element of the type setdef which defines a set of elements . a formal document type definition  of the xml structure is given in the supplementary information .

due to the generic xml import capability the system can be fed with arbitrary annotation without considering its semantics, making prompt applicable to data analysis in any knowledge domain, not necessarily limited to molecular bioinformatics. additionally, data in widely used tab-delimited text and weka's arff  <cit>  files can be processed. a full list of available data import options can be found in table  <dig> 

sequences and annotation available in major public databases may be fetched by their identifiers via the seqhound  <cit>  web services . all the user needs to do is to supply a list of uniprot  <cit>  or genbank  <cit>  identifiers and the corresponding information will be downloaded automatically in the background. all actions are tracked by a fully-configurable logging facility; if ambiguous ids or errors are encountered, warnings will be issued. remotely retrieved data are cached locally to avoid repeated re-fetching of the same data items during processing.

similarity-based sequence mapping
if input data contain proteins with incompatible database ids, correspondence between individual entries can be established by sequence comparisons. prompt automates all-against-all blast  <cit>  searches , producing )/ <dig> alignments, where n is the number of proteins in the dataset. the user is then prompted to choose the extent to which sequence differences can be tolerated for specific purposes. the list of typical minor variations between essentially the same gene products includes missing start methionines, different versions of the same genomic orf, and splice isoforms. for example, the brain tumor protein brat_drome in drosophila melanogaster has seven synonymous uniprot  <cit>  accession numbers and  <dig> associated genbank  <cit>  entries; according to uniprot  <cit>  its amino acid sequence has been revised after the primary submission. using the mechanism described above, a given list of genbank  <cit>  identifiers can be instantly mapped onto uniprot  <cit>  accession numbers, pedant  <cit>  protein codes, or embl  <cit>  ids. the prompt software facilitates adding new input data types to the mapping procedure by providing an interface for custom input adapters written in java.

computable sequence features
in addition to annotation features contained in input files a number of selected characteristics can be calculated directly from protein sequences, mainly using biojava  <cit> . these include isoelectric point, the distance of the isoelectric point from neutrality, molecular weight in daltons, sequence length, grand average hydrophobicity  and the total hydrophobicity of all residues. additionally the number of alternating hydrophobic/hydrophilic strands is calculated as described in wong et al.  <cit> . we will be gradually adding additional computable sequence properties driven by our own research needs as well as user requests.

statistical analyses
formally, we are addressing the task of comparing two  datasets in the space of n supplied features. prompt contains a set of generic engines to analyse and compare nominal as well as numerical attributes. in addition to generating basic descriptive statistics such as mean, standard deviation and median for the distribution of each feature, statistical tests are performed to determine whether the input sets differ significantly with respect to a feature of interest. all statistical tests are encapsulated as java classes and predominantly use the free open source statistical software r  <cit>  or its commercial counterpart s-plus  <cit>  as reliable calculation engines. the linkage to r/s is accomplished by prompt automatically, assuming r/s is installed in default locations. alternative and detailed r/s configuration settings can be provided by the user via the gui config dialog, the xml configuration file, environmental parameters or by or by direct api usage. although all tests can be chosen manually, prompt typically applies the appropriate tests automatically depending on the user's type of input and addressed question. basically, prompt distinguishes four different generic cases: i) comparison of the frequencies of categorical annotations between two sets, ii) enrichment of nominal features in one set with respect to another one, iii) comparison of numeric distributions, and iv) correlation of numeric variables. these four types of analyses are described in more detail below and are also exemplified in table  <dig> 

 feature comparison
the questions handled within this use case are: are certain categories  more frequent in one set or in the other? if yes which ones? and are these differences statistically significant based on respective p-values? prompt computes a chi-square test for each categorical value that occurs in both sets. formally, let a = {a <dig>  a <dig>  ..., ai } and b = {b <dig>  b <dig>  ..., bj } be sets with i and j distinct objects and let v be the set of nominal categories that can be attributed to the objects. then each set element can have zero, one or more categorical values assigned. furthermore let na and nb be the number of objects of the set a and b that have at least one category of v assigned. then frqa = na | and frqb = nb | are the relative frequencies of elements with attributes. thus only the objects for which annotation data is available are considered.

for each category v ∈ v that is found attributed to objects of a and b a chi-square test with the following observation and expectation variables is performed:

observation
obsa  = |{a∈ a|v∈ attributes}| and obsb  respectively for the set b, i.e. the number of objects in a and b that have the attribute v assigned.

expectation
expa  = +obsb ))* frqa and expb  = +obsb ))* frqb , i.e. under the assumption that all variables are independent and identically distributed, expa  and expb  are the number of observations that we would expect if the category v is uniformly distributed in a and b.

the calculation of the chi-square test is performed using the jakarta commons math implementation  <cit>  as the pure java implementation is faster than delegating this simple test.

 feature enrichment
the second method requires the same type of nominal data as in the previous case, but with the additional precondition that one set is a true subset of the other e.g. a ⊂ b. typical questions that can be answered with this method are: are up-regulated genes enriched in certain functions? does the groel chaperonin prefer substrates with certain structural folds? do cancer-associated proteins show non-random enrichment of certain functional families or transcription factor binding sites?

analogous to the case  for each category v ∈ v that is found attributed to objects of a and b, the over- or under representation is calculated and an e-score returns the likelihood that the difference would be found by random. the e-score is calculated as described in castillo-davis et al.  <cit>  using a hypergeometric distribution with conservative bonferroni correction.

 comparison of numeric distributions
are proteins of thermophilic organisms shorter than those of mesophilic organisms  <cit> ? with prompt, this question can be answered immediately using its generic method to compare numeric distributions . more generally, the questions that can be answered are: do both sets differ with respect to their means, e.g. are they shifted? are the distribution functions different? additionally, for more detailed analyses the distributions can be compared within freely definable intervals, enabling the user to examine whether the protein sets differ within specific ranges of variable values, even if no global differences can be found.

given two sets of numerical values, prompt applies the mann-whitney test with the null hypothesis of both distribution functions being equal versus the alternative of the two distribution functions being not equal. the test is sensitive towards differences in the mean, but not towards different variances. given a continuous distribution function, the two-sample kolmogorov-smirnov test checks the null hypothesis that both variables are equally distributed. both tests can only be applied under the assumption of the variables being independent. they have the advantage that they do not assume the data to follow any specific statistical distribution. by providing the mann-whitney and the kolomogorov-smirnov test, prompt covers both discrete and continuous input data.

for both datasets the key statistical values  as well as histograms with equal binning are calculated. the relative difference of observed values is computed and its significance tested by a chi-square test. the mann-whitney test is applied to the values of all histogram intervals in order to test whether the distribution functions of the two datasets are identical within each bin.

 correlation of numeric variables
prompt provides a generic method to check for correlation between two numeric variables. first, the pearson correlation coefficient is calculated which is not based on any assumptions about the variables' distributions. secondly, the pearson correlation test is performed which expects samples from two independent, bivariate normally distributed distributions. the null hypothesis is that no correlation either negative or positive exists.

graphical user interface and scripting capabilities
all implemented algorithms can be comfortably run via a stand-alone application with a graphical user interface , as well as from custom scripts or java programs. the gui provides a dynamical workspace where input data and results can be managed, analyses performed, statistical tests executed and the results examined, visualized or further processed . all available input adapters, statistical tests and algorithms can be accessed through a menu bar. the menu bar and the gui itself are fully configurable and extensible by new in-house or third-party modules through xml configuration files or configuration dialogs. the gui workspace allows confident handling of multiple data sources, analyses, and results, and supports saving and loading any of the input or result objects to/from files. moreover, the entire workspace can be stored in a compressed form and restored later so that the work on a particular project can be suspended and resumed by the user at any time. the workspace files are portable and can be transferred to other computer systems and shared between different users.

the prompt gui includes information and message logging panels. the information area displays extensive context-sensitive information about a chosen menu entry or about a selected result entry, providing the user with appropriate hints regarding data integration facilities, available analysis engines, and their results. the message panel shows all logging notes and gives full insight into the analysis progress which is especially useful if longer calculations, such as blast similarity searches, are being run. the level of detail and the scope of the logging facility are fully configurable. the data input and retrieval module dialogs guide the user through the data acquisition process and explain various data import features. likewise, the comparison engines and statistical tests provide context-specific dialogs prompting the user to set or change appropriate parameters. for example, all  <dig> statistical tests provide individual dialogs , tool-tip information, and test specific documentation explaining the meaning of the test and its parameters. these dialogs are rendered automatically from the parameter description of the tests .

furthermore, a fully searchable and browsable documentation is integrated in the gui . the gui provides appropriate actions that match to a chosen result type in a pop-up menu that can be accessed by a right-button mouse click. via this functionality figures can be generated directly out of the gui. the gui checks automatically which of the available plotting classes are applicable to a given data type and allows one to select the desired type of figure.

all of the input, analysis and visualisation functionality is accessible from custom java programs by utilizing the prompt framework classes. additionally, it is possible to use the whole set of features by writing simple beanshell  <cit>  scripts as demonstrated in the accompanying examples. beanshell has the full power of the java language including access to all java libraries, and extends it with common scripting capabilities such as loose types, commands, and method closures similar to those in perl and javascript. in addition to beanshell scripts, prompt can execute conventional java source code files directly, without the need to compile them. the complete prompt framework with all necessary helper classes is provided as one single jar library, eliminating the need to conduct extensive java path configuration.

data visualisation and export
the results of all analyses can be further examined in a graphical spreadsheet view of prompt or exported as tab-delimited-, comma-separated- or microsoft excel document. additionally, for the majority of results customized figures can be generated automatically and either saved in the bitmap-oriented portable network graphic  format or in vector formats such enhanced postscript  or enhanced windows meta-format . this allows seamless import of prompt results into standard office applications. in some cases, figures produced may be further fine-tuned manually. for example, all underlying data and r  <cit>  language commands corresponding to the figures constructed by using r as plotting engine can be saved into files. this allows easy customization without the need to run prompt analyses again. another feature is interactive figures  as illustrated with the enzyme-classification viewer of a swiss-prot property comparison. by clicking on the enzyme classes it is possible to browse through the different hierarchical levels analysing the functions of interest . the hierarchical category browser is currently restricted to the enzyme classification as available in swissprot  <cit> ; further categories will follow in subsequent releases of prompt. all generic graphical views allow for zooming in or out, inspecting numeric values associated with individual items on the plot, and adjusting the figure appearance in various ways.

RESULTS
here, we demonstrate the functionality of prompt based on three well documented test cases. each case study highlights different elementary analysis modes of prompt. all used data can be found on the prompt home page , where we additionally provide detailed step-by-step instructions for all cases along with up-to-date information.

in the first case we have reproduced our own previously published analysis of groel substrates from e.coli  <cit> . in this work, essentially the entire groel-substrate proteome consisting of approximately  <dig> proteins was identified by a combination of biochemical analyses and quantitative proteomics. what protein features determine substrate specificity of groel? to answer this question we imported into prompt  <dig> annotation features for all e.coli proteins directly from the pedant genome database and compared groel substrates with  <dig> e.coli lysate proteins  <cit> . the only significant difference reported between these two protein datasets was in terms of their structural folds. using prompt's nominal comparison method we could easily demonstrate that the groel substrates are significantly enriched in proteins possessing the tim-barrel fold . possible evolutionary implications of this phenomenon are discussed in kerner et al.  <cit> . thus, prompt allows finding significant enrichments and differences of categorical features between two sets of elements. furthermore, the generic solution allows an analysis independent of the feature semantic and problem domain.

in the second example we repeat the analysis of protein expression in yeast from ghaemmaghami et al.  <cit> . this case highlights the ease of using external data with prompt, comparing numerical distributions and performing correlation analyses. absolute protein abundance levels and steady-state mrna expression levels in s.cerevisae were already available as tab-delimited text files associated with the publications by ghaemmaghami et al.  <cit>  and holstege et al.  <cit> , and could be imported easily using prompt's tab-delimited input facility. the first question we addressed was whether protein abundance correlates with mrna expression levels. in addition to calculating the pearson correlation coefficient prompt assesses its statistical significance by performing a correlation test. for visualization of results prompt will suggest appropriate options which in this case include a static scatter plot of abundance versus mrna levels with logarithmic axes and linear- as well as polynomial loess regression lines . besides the statistical test results, descriptive key data such as minimum, maximum, mean, median and standard deviation are always returned by prompt and can be analysed, sorted and further processed within a comfortable spread sheet viewer as seen in figure 8b.

another question investigated by ghaemmaghami et. al.  <cit>  was whether essential proteins are more abundant than non-essential proteins. within a few seconds the results reported by the authors could be reproduced using prompt's generic method to compare numerical distributions. specifically, we compared the abundance distributions of all yeast proteins vs. the essential proteins. applicable statistical tests were automatically performed by prompt. first, the value distributions were compared with the kolmogorov-smirnov and mann-whitney tests based on the complete data set. secondly, we attempted to identify potential local differences between the two distributions by binning the data and comparing individual bins of both groups separately. this demonstrates that essential proteins are significantly underrepresented within the logarithmic abundance ranges  <dig> to  <dig> and significantly overrepresented within the range  <dig> to  <dig>  the bin intervals can be chosen either automatically or manually guided by a user-friendly graphical dialog box . the resulting comparison of the protein abundance levels of essential proteins versus the complete yeast proteome is shown in figure  <dig> 

in the final example we use prompt to automatically retrieve protein sequences by sequence identifiers from public databases and to calculate some of their basic properties such as the isoelectric point. as input we used two lists of genbank  <cit>  identifiers of membrane and globular proteins of e.coli. in this experiment we use only multi-spanning membrane proteins with more than  <dig> membrane spanning regions predicted by tmhmm  <dig>   <cit>  to avoid any noise from false positive predictions or small membrane-coupled proteins. as seen in the supplementary information , longer membrane proteins are less hydrophobic than shorter ones. the observed high correlation between the protein length and its hydrophobicity  of - <dig>  is significant with a p-value of  <dig> e- <dig>  sequence based properties can also be used in any other generic analysis. for example, the additional figures  show a comparison of the automatically derived pi values of membrane and lysate proteins. in addition to the methods based on amino acid sequences, prompt provides statistical analyses and comparisons of symbol frequencies of arbitrary alphabets. thus, in addition to finding over- or under-represented amino acids in a given protein dataset , it is also possible to calculate the enrichment/depletion of other symbols such as those taken from the three-state secondary structure alphabet with helix , strand  and coil  as elements.

discussion and 
CONCLUSIONS
prompt is a platform-independent, multi-purpose stand-alone software system for solving a broad spectrum of standard problems in comparative proteomics. it is implemented as a highly-reusable and extensible framework for analysing biological data. with its rich data integration functionality and built-in statistical tests, prompt facilitates data mining and hypothesis testing.

prompt makes possible incorporation of new algorithms by providing hulls, layers and infrastructure. the availability of both scripting-capability and an intuitive gui with a context-sensitive help system makes prompt equally accessible to both professional bioinformaticians and biologically oriented users. the structure of prompt is well adapted for batch processing and automation.

unlike the multitude of specialized analytical tools, prompt has been designed as a versatile general platform for routine analyses and comparisons in the field of molecular bioinformatics. the current version of prompt includes a large set of generic comparison methods and statistical tests applicable to any nominal and numeric data as shown in table  <dig>  user-specific extensions and custom methods can be seamlessly integrated by providing java classes that implement the interfaces defined in the prompt documentation and by adding additional entries to the application's configuration file. although prompt is easily extensible by third-parties, we encourage members of the scientific community to suggest new prompt features that may be of particular interest to their research. in the long run we hope to make prompt a community resource for comparative proteomics.

availability and requirements
project name: prompt "protein mapping and comparison tool"

project home page: 

operating system: platform independent

programming language: java

other requirements: java  <dig>  or higher, r  <dig>   or higher, ncbi blast  <dig> . <dig> or higher 

license: source code and executables are freely available for academic users from our web site.

any restrictions to use by non-academics: licence required

authors' contributions
ts designed and implemented the software. df conceived and directed the work. both authors wrote the article, read and approved the final manuscript.

supplementary material
additional file 1
document type definition  of prompt's generic xml format

click here for file

 additional file 2
screenshot of the prompt web page. here, we provide the latest news and prompt versions along with useful information. additionally, all case studies shown in this paper including the underlying data are freely available as detailed work-through tutorials.

click here for file

 additional file 3
built-in help system. comprehensive and intelligent online help with example data and a demonstration workspace allows easy usage of prompt without prior knowledge.

click here for file

 additional file 4
binning wizard for setting up interval borders. a. first dialog page. the user can either let prompt automatically estimate the interval borders, of specify a fixed interval width or the number of intervals. the selected options shown create histogram intervals that have a width of  <dig>  no decimal places, and the range from  <dig> to  <dig>  b. optional second dialog page. here the proposed binning can be previewed and altered. note that we used the special keywords -inf and +inf for negative and positive infinity in the first and last interval to specify that all values less than  <dig> or higher than  <dig> fall into these bins.

click here for file

 additional file 5
example of a built-in interactive scatter plot. protein length of e.coli lysate proteins is plotted against their hydrophobicity. the pearson correlation coefficient is - <dig>  with a p-value of  <dig> e- <dig>  by pressing and holding the left mouse button it is possible to zoom in the desired area. clicking on an individual point on the plot leads to numeric values associated with this point being displayed.

click here for file

 additional file 6
usage of derived sequence based properties in a generic analysis of prompt. here the isoelectric point  distributions of the e.coli lysate and membrane proteins are compared using the numeric comparison method. prompt calculates the pi values automatically if protein sequences are available.

click here for file

 additional file 7
screenshots of prompt's visualisations of the sequence based symbol analysis methods. in this example we compared two protein sets with respect of their amino acid composition. the positive and the negative datasets are constituted by the proteins known to crystallize and the proteins whose structure was only resolved by nmr, respectively . a. here the frequencies of each amino acid in both proteins are plotted. for example: a frequency of 5% for threonine in the positive protein dataset means that out of all residues 5% are t's. b. using the same data as in a, here the frequency differences of all sequence elements are shown. for example, the positive value of  <dig> % for y means that this amino acid is about a half percent more frequent is the first dataset. bars with red color have a significant p-value according to the mann-whitney test. c. additionally the frequency distributions of all amino acids can be shown as box plots as exemplified by cysteine here. d. complementary to a box plot depiction prompt provides histogram visualizations.

click here for file

 acknowledgements
we thank antonio j. martín-galiano, axel facius, thomas rattei, jürgen cox, philip wong, volker stümpflen and christina samel for careful reading of the manuscript. björn schrader, christopher rivera and frank hager for technical help. this work was supported by the dfg program "bioinformatics initiative munich".

figures and tables
a extensive description of each method can be found in the context sensitive help integrated in the prompt gui, or in the manual supplied with prompt.

b both groups with categorical data can be independent from each other.

c one group must be drawn from the other group.

d as described in the methods section
