BACKGROUND
numerous experimental methodologies have been developed in the past decade to study 3d configurations of the human genome, including hi-c and chia-pet  <cit> . these “genomic interaction” data have provided key insights into the regulation of gene expression, and suggest that chromatin interactions are driven by discrete, yet spatially-associated, epigenetic features  <cit> . file standards and tool suites have become essential to conduct efficient bioinformatics analyses; for example, single locus information can be encoded in the bed file format and manipulated using bedtools, enabling a wide variety of bioinformatics inquiries  <cit> . however, it is currently challenging to fully interpret the biological impact of genomic interactions as tools do not yet exist to quickly and iteratively interrogate the extent to which both regions of paired loci are conserved across genomic datasets from diverse cell-types and contexts. while paired-genomic-loci data generated from these methodologies are widely available, the bioinformatics field has not yet developed either a file standard or analysis tools for their efficient manipulation.

there are currently several file formats for paired-genomic-loci data, however, none of these file formats were designed to enable efficient annotation and data manipulation. existing file formats include those that encode read count information such as the matrix and the triplet sparse matrix formats  <cit> , and others that encode the locations of paired segments and specialized metadata for particular pipelines, such as the hifive chromatininteraction format  <cit> . although the matrix and triplet sparse matrix formats effectively communicate coverage depth across bins of the genome, they are restricted to fixed locus bin sizes, are not human-readable, and are cumbersome for genomic arithmetic. additionally, while the chromatininteraction format, and the similarly structured bedtools bedpe format  <cit> , may appear to be suitable storage formats for integration into a genomic arithmetic pipeline, as the two loci can be written in any order within the file, programmatic manipulation is unnecessarily complicated. finally, the triplet sparse matrix and chromatininteraction formats are both specialized for the specific programs for which they were designed. thus, to facilitate genomic interaction data manipulation, allow for variable locus bin sizes within a single data set, and allow for flexible metadata important to paired-genomic-loci, a new file standard is needed.

numerous analysis tools exist to process, normalize, or call peaks from raw reads of paired-genomic-loci data , yet there is no software that performs efficient manipulation and genomic arithmetic, analogous to bedtools, for single locus data, hindering the process of annotating and comparing chromatin interactions. for example, bedtools does not provide operations for bedpe that analyze both loci simultaneously, and there are no tools for genomic arithmetic within hifive. furthermore, a tool for converting to the chromatininteraction format, or for converting from the triplet sparse matrix format to visualization formats, does not currently exist. an analysis tool suite that performs efficient manipulation and genomic arithmetic of paired-genomic-loci data would allow for more complete analyses of these datasets, and thus the potential to gain deeper biological insights about the 3d conformation of the human genome.

here we describe a new file standard for paired-genomic-loci data, the pgl format, and an analysis tool suite, pgltools, for genomic interaction data storage and manipulation. the pgl format supports genomic interaction data, allows for appropriate metadata, and enables efficient data manipulation. pgltools performs genomic arithmetic on pgl files such as comparing, merging, and intersecting two sets of paired-genomic-loci, as well as integrates bed files with pgl files. finally, we provide functions to convert other genomic interaction file formats to pgl files, and convert pgl files to multiple different visualization formats. this analysis tool suite will allow for iterative bioinformatics analyses and visualization of genomic interaction data, facilitating discovery and collaboration within the genomic interaction field.

implementation
our goal was to create a file standard that can summarize the output from mapping and peak calling algorithms for chromatin interaction data derived from experiments, such as hi-c or chia-pet, that is easily interpretable, shareable, and can be combined with current genomic annotation formats, such as the bed format. we first established a paired-genomic-loci file standard—the “pgl” file type— which represents each paired-genomic-loci as a single pgl entry in a human readable text file, with space in each entry for annotations, and then implemented an analysis tool suite for working with these files. within “genomic interaction” data, the interactions between two loci  are captured—this “paired” information is preserved through the pgl file standard. pgl files require six columns in the following order: locus a chromosome, locus a start position, locus a end position, locus b chromosome, locus b start position, and locus b end position. beyond the six columns, any user-defined annotations, such as interaction p-value or locus chromatin state, can be written. these annotations can be manipulated and utilized by the operations in pgltools to gain insight into the relationship between multiple paired-genomic-loci. as annotations are unique to a file, headers can be given in files by preceding a line with “#.” furthermore, pgl files are required to have each pgl entry written such that locus a comes before locus b based on chromosome number alphabetically  and chromosome position numerically. this relationship, when combined with file sorting on each column sequentially, gives pgltools the ability to quickly merge and intersect pgl entries from pgl files. operations for sorting pgl files, converting files to pgl files, and formatting pgl files for visualization with established programs, are also included in pgltools.

most pgltools operations utilize the same core overlap function to test for overlapping paired-genomic-loci within or between file. for single locus entries, such as those in sorted bed files, overlapping entries must be sequential: if entries  <dig> and  <dig> overlap, entry  <dig> must overlap both entries  <dig> and  <dig> . this property allows bedtools to limit of the number of features that must be compared for overlap, thus expediting analyses  <cit> . however, in sorted pgl files, while locus a from multiple sequential entries can overlap, locus b may not overlap . the pgltools overlap function allows for this and quickly and efficiently finds consecutive and non-consecutive entries where both locus a and locus b are overlapping. it begins by comparing the first pgls in both files, recording if an overlap occurred in both loci, and then advances to the next pgl in file  <dig>  these comparisons continue until the pgl from file  <dig> does not overlap locus a from the pgl in file  <dig>  at which point the algorithm begins comparing the next pgl from file  <dig> to the first possible overlapping pgl from file  <dig>  this repeats until the ends of both files are reached. an in-depth flow chart of the overlap operation’s control flow, as well as how the first possible overlapping pgl from file  <dig> is determined, is shown in fig. 1c.fig.  <dig> pgltools implementation  an example of sorted, single locus bed file entries from a file sorted by start position. as entry  <dig> overlaps entry  <dig>  entry  <dig> must also overlap entry  <dig>   a pictorial representation of pgl entries in a sorted pgl file where non-sequential pgl entries overlap. loci are shown as blocks, with dashed lines connecting the paired-loci comprising a single entry. both loci a and b in pgl entries  <dig> and  <dig> overlap, and both loci in pgl entries  <dig> and  <dig> overlap.  a flowchart of the overlap function shared between many operations in pgltools. file  <dig> has n- <dig> entries. file  <dig> is iterated by the file2-index i. file <dig> is a pgl entry for any 0 ≤ i < n. throughout the algorithm, pgl entries from file  <dig> must be checked multiple times. therefore, to reduce the number of comparisons performed by pgltools, the recheck index is used to store the index at which the previous overlap iteration began. when the ends of both files are reached, the algorithm ends




pgltools is implemented in python  <dig> , and all operations have been tested with the pypy python compiler. as such, the unix package version of pgltools can be run either with cpython or pypy; the included unix wrapper will run pgltools through pypy if installed, or cpython if pypy is not installed. utilizing pypy reduces memory consumption by approximately 25%, and decreases run times 5– <dig> fold. the pgltools suite can read from unix standard in, useful for stringing multiple pgltools commands together without needing to save the intermediate files, and writes to unix standard out, allowing it to be utilized in complex pipelines to speed up analysis of genomic interaction data. pgltools is also available as a python module, pygltools, for use within pythonic pipelines, and can be installed from pypi. as pgltools is written in python  <dig> , it is easily portable to any platform and poised for collaboration with the community.

RESULTS
table  <dig> includes a full list of pgltools operations and their default behavior. visualizations of these operations are provided in fig.  <dig>  the pgltools intersect operation can be used to identify either the overlap, union, or uniqueness of pgl entries between two pgl files, while preserving or combining annotations during these analyses; for example, the number of overlapping bases at each locus from each pgl entry from two pgl files can be determined. the pgltools merge operation can be utilized to merge overlapping pgl entries, or pgl entries within a specified distance within a single pgl file. summary statistics, such as the number of merged entries, can be obtained through command line arguments to the merge operation. to determine differential pgl entries between two pgl files, the subtract operation has been included to remove the parts of pgl entries present in one pgl file from those present in another. once a set of pgl entries has been determined, it is common to filter these entries to a desired genomic region—the window operation can be used to filter based on either or both end of the pgl entries in a pgl file. to interrogate questions regarding differential coverage depth of genomic interactions, such as genetic association with interaction intensity, we provide the samtopgl operation, which when utilized with the coverage operation, will find the number of reads from a sam file that overlap each pgl entry in a pgl file . the closest operation is provided for finding the closest pgl entries between two pgl files. the expand operation can expand both loci by a given value. in addition, as single locus genomic metadata is often analyzed together with interaction data, such as presence of a coding region, epigenetic annotation, or motif locations, we provide the intersect1d, closest1d, and subtract1d operations for analysis on traditional bed files and pgl files. finally, we include helper operations both for converting files to the pgl format, including formatbedpe to convert a bedpe file and formattripsparse to convert triple sparse matrix files, and for converting from the pgl format to packages for visualization or further analysis, such as the convert operation to convert to a file readable by the genomicinteractions r package  <cit> , browser for visualizing with the ucsc genome browser  <cit> , juicebox for visualizing with juicebox  <cit> , and condense and findloops to create a bed file of either the discrete loci or interior regions of each pgl.table  <dig> summary of operations provided in pgltools


fig.  <dig> the operations of pgltools. pgl entries from file one are shown in various shades of blue, pgl entries from file two are shown in orange, and windows are shown in yellow . all resulting outputs are shown below dashed lines, with novel entries shown in green and original entries shown in their original color.  the intersect operation finds overlapping paired-genomic-loci between two pgl files and returns the overlapping regions.  the merge operation combines overlapping paired-genomic-loci within a single pgl file.  the subtract operation returns the pgl entries from file one with the pgl entries from file two removed.  the window operation returns the pgl entries that fall completely within a specified genomic region.  the coverage operation returns the number of pgl entries from file two that overlap each pgl entry in file one.  the closest operation returns the closest pgl entry from file two for each pgl entry in file one.  the intersect1d operation returns pgl entries from file one that overlap regions in a bed file.  the closest1d operation returns the closest region from a bed file for each pgl entry in file one.  the subtract1d operation returns the pgl entries from file one with the regions from a bed file removed




by combining the operations within pgltools, one can quickly and easily interrogate biological functionality in the context of chromatin interaction data. for example, by combining the intersect1d and merge operations, it is possible to determine the different chromatin annotations for each locus of each pgl entry . additionally, pgltools can be used to find overlaps between chromatin interactions and other types of paired data. for example, one could create a pgl file from a list of expression quantitative trait loci  and their corresponding target genes , and utilize the intersect operation to determine if any pairs of eqtl and egenes fall within a chromatin interaction. example pipelines for these scenarios can be found on the pgltools github.

CONCLUSIONS
pgltools is an open source software analysis tool suite for interacting with the pgl file standard for paired-genomic-loci. pgltools can read from and writes to unix standard in and standard out, and can be run quickly in both cpython and pypy. a python module version, pygltools, is available for use within pythonic pipelines. the cross-platform nature of python poises pgltools for community contribution, and makes it easy to install and utilize.

abbreviations
eqtlsexpression quantitative trait loci

ngsnext-generation sequencing

pglpaired-genomic-loci

