BACKGROUND
copy number variation  is a type of genetic variation that is widely found in human and other mammalian genomes. it includes genomic deletion, duplication, and complex rearrangement that range from  <dig> base pairs to several mega base pairs in size  <cit> . a substantial number of cnvs have significant impact on complex human diseases, such as cancer  <cit> , autism  <cit> , and even susceptibility to hiv  <cit> , due to the fact that they can disrupt gene structure and affect gene regulation  <cit> . therefore, studies on cnvs can further our understanding of the genetic etiology of human diseases.

to date, approximately  <dig>  cnvs have been reported in the database of genomic variants . arising from the completion of the human genome project and the hapmap project, a large number of genetic variations associated with human phenotypes or complex diseases have been identified by snp-based genome-wide association studies   <cit> . cnvs might assist us in finding the missing heritability in gwas. there are many methods available for cnv detection, such as microarray and polymerase chain reaction  based technologies  <cit> . snp array and array-based comparative genomic hybridization  are two of the most frequently used high throughput platforms. the affymetrix  genome-wide human snp array  <dig>  contains more than  <dig> , <dig> probes, including  <dig>  probes to detect snps and  <dig>  probes to detect structural variations. the agilent  <dig> m cgh array contains approximately  <dig> million 60-mer oligonucleotide probes for cnv detection. it remains unclear whether the widely used snp-array-based cnv calling methods can provide sufficient concordance with cgh in cnv detection.

the objective of this paper was to evaluate the performances of publicly available software packages that are used to call cnvs from snp arrays. the cgh-based cnv detection results derived from  <dig> hapmap samples were used as a “gold standard” due to their high signal-to-noise ratio and detection accuracy, which were described in detail by park et al.  <cit> . nowadays, the same  <dig> hapmap samples have also been studied using snp  <dig>  arrays in the phase ii hapmap project  <cit> .

availability and requirements
project name: comparison of four software packages in cnv calling

operating system: xp 64bit windows pc server

web server: apache  <dig> .4

programming language: php  <dig> .1& mysql  <dig> .27

other requirements: zendoptimizer  <dig> . <dig>  phpmyadmin <dig> .4

scripting software—edit plus

in order to evaluate four cnv detecting software packages specifically developed for the affymetrix  <dig>  snp array platform, we should firstly finish parameters setting for each software package. only when following their manuals could we start and continue the software packages, we then follow the manual issued on the official website of each software to finish the default settings . for example, we made all twenty-six snp  <dig>  array datasets pass the quality control  threshold of the software package gtc as a default setting. and since dchip had no parameters setting program, we then used the output information of the genotyping results of gtc as the input data for subsequent analyses for it  <cit> . this was exactly instructed by the manual of dchip. for birdsuite and penncnv-affy, cnv detection was performed according to the manuals on their official websites with default settings.

after parameters setting for each software package, we also set the software running environment. the samples that passed gtc qc were selected as the baseline for the snp array settings. the results obtained by performing the “normalize & model” function were used for the subsequent cnv calling. and the cnv calling should in the following environment settings: 1) hmm was used as the algorithm; 2) 20% of the samples were trimmed; 3) the cnv step-width was set to  <dig> .

implementation
we selected a published cnv dataset generated by cgh with a resolution of  <dig> million probes per sample as the “gold standard ” to evaluate four cnv detecting software packages developed for the affymetrix  <dig>  snp array platform, including gtc , birdsuite , dchip , and penncnv-affy .

compared with the cgh-based dataset, the cnvs identified by the four software packages were then divided into three groups—a matching group, an overlapping group and a non-overlapping group. the success rate, average stability rate, sensitivity, consistence and reproducibility of these four software packages were assessed compared with the “gold standard”. specially, we also compared the efficiency of detecting cnvs simultaneously by two, three and all of the software packages with that by a single software package .

datasets
the cgh-based cnv data for the  <dig> hapmap samples  were obtained from park et al.  <cit> . the original genotype data for the same  <dig> individuals based on the snp  <dig>  array were downloaded from the hapmap project website. another three dna samples from the chinese population were used twice on the snp  <dig>  array platform for reproducibility evaluation of the software packages. in total,  <dig> datasets for  <dig> individuals were involved in this study.

cnv calling
gtc, dchip and penncnv-affy, these three software packages could call cnvs step by step according to their manuals. what worth noticing was that birdsuite provided three algorithms instead of one, but only canary and birdseye algorithms produced cnv information. so especially, the filtration criteria for the obtained raw data was necessary, and it should included the following points: 1) a corresponding confidence value <  <dig>  for canary and a lod value > 5; 2) a marker value ≥ 3; 3) a fragment length ≥ 1 kb for birdseye  <cit> . a combination of the results from the canary and birdseye algorithms was considered to be the final output of birdsuite. generally, we preferred selecting the longer one as the final result when the boundaries of the cnvs were not consistent with each other.

comparison methods
our results suggested that currently available microarray platforms were complementary, and the number and type of cnvs detected might be diverse due to different microarray probe distributions, sample labeling and hybridization chemistries and algorithms  <cit> . for instance, through comparing the cnvs detected by four software packages, we found that the cgh was sensitive to detecting small  cnvs while snp array-based cnv calling algorithms often missed them even though the probe coverage on the snp array were sufficient on these loci. so we ignored cnvs that were smaller than 30 kb in size for better comparability between the two platforms. then the downloaded raw data of the snp  <dig>  array from the hapmap project were respectively analyzed by birdsuite, dchip, gtc and penncnv-affy to obtain putative cnvs. these detected cnvs were then compared with the cnvs identified by the cgh platform reported by park et al.  <cit> . the final results were divided into three groups: a matching group, in which cnvs exhibited ≥ 50% reciprocal overlap between the two platforms; a non-overlapping group, in which cnvs did not have any overlap; and the overlapping group, which included all of the remaining cnvs.

the total cnvs number, the mean and median sizes, and the distribution of the three groups of cnvs were thoroughly investigated to evaluate the success rate, the detecting bias, the sensitivity and the reproducibility of the four software packages designed for the snp  <dig>  platform in the following sections  <cit> .

RESULTS
overview of cnvs detected by snp array-based algorithms and cgh
first of all, a list of the mean size and median size of the cnvs detected by the four software packages from the snp array and the  <dig>  cnvs reported by cgh platform was shown in table  <dig>  we found that cgh was sensitive to detecting small  cnvs, which were often missed by snp array-based cnv calling algorithms . for better comparability between cgh and snp <dig> , we focused only on the detection of cnvs that were larger than or equal to 30 kb in size. birdsuite called the largest number of cnvs ; dchip called  <dig> cnvs, penncnv-affy called  <dig> of them and gtc called  <dig>  the cnvs called by birdsuite, dchip, and penncnv-affy had approximately the same mean  and median  in sizes. however, the mean and median sizes of the cnvs called by gtc were more than two times larger than those called by the other three software packages. though the comparison of the mean size and median size of the cnvs detected by the four software packages, we initially concluded that gtc had certain bias in calling cnvs while the other three software packages had not. further were discussed below.

&the data are from park et al. <cit> .

secondly, the grouping of the cnvs detected by the four software packages was discussed in table  <dig>  compared with the cnvs reported by cgh, gtc detected the most matching cnvs , and penncnv-affy detected a fairly high number ; birdsuite and dchip detected  <dig> % and  <dig> % matching cnvs respectively, which were obviously lower than the results of gtc or penncnv-affy. in the non-overlapping group, the software package that detected the smallest proportion of non-overlapping cnvs was gtc ; and the largest proportion was by penncnv-affy which reached  <dig> %. for the overlapped cnv group, dchip detected the most cnvs  and gtc detected the least cnvs . the grouping of the cnvs detected by the four software packages showed the overlap ratio of them. generally speaking, moderate overlap ratio between the two platforms indicated that such kind of software package was suitable for the detection of both the known cnvs and the unknown cnvs. in our study, penncnv-affy and birdsuite could meet such standard and the former one performed better.

figure  <dig> illustrates a comprehensive comparison of cnvs detected by the four software packages. in figure 2a, the four colors represented the cnvs that were called from four software packages . the numbers of cnvs in the colored rectangles indicated the amount of overlapped cnvs called by two, three or four software packages. overlapping cnvs referred to those who had at least 1 bp but less than 50% of overlapping bp shared by two cnvs. thus, multiple numbers were also generated for overlapped cnvs in two or three software comparisons. two numbers in one rectangle indicated overlapped cnvs in two software packages and three numbers indicated overlapped cnvs in three software packages. we found that each software’s ability in calling cnvs was not all-powerful and had specific advantages and limitations. we therefore proposed that the combined use of multiple software packages could provide us with higher accuracy and reliability as shown in figure 2b. in figure 2b, the entire pie referred to the total quantity of the matching cnvs of each software package. “one suite” meant the percentage of the amount that were detected by itself alone, and “two suite” meant the percentage of the amount that were detected by it and one other software package, and so on. obviously, a large fraction of the matching cnvs were detected by several software packages simultaneously. also, if we used only one method, the calling effect would not certainly be so good as the combined use of multiple software packages. of course, it was not true that the more methods we used, the better the cnv calling effect we would get . the choice of calling methods mostly depended on our actual needs.

performance test
we investigated the cnvs detected by each of the four tested software packages and compared with those reported by the gold standard . the success rate referred to the percentage of the matching and overlapping cnvs called by the tested software packages with the size more than 30 kb versus total cnvs from cgh array in  <dig> hapmap samples.

for one software package, notably, the success rate increased with the enlarged cnv size . for example, the highest success rate for cnvs >150 kb was  <dig> %, which was detected by birdsuite, and penncnv ranked secondly. meanwhile, concerning the total cnvs number, it was easier for four software packages to call cnvs with the size distributed extremely in two tails  . such kind of bias inevitably affects our cnv calling result especially for the unknown cnvs. although birdsuit called the largest amount of cnv, its bias was obvious. and gtc seemed inferior because of the less total cnv number and the notably high mean and median sizes of the detected cnvs. as for dchip, the significant bias of the results was due to a big fraction of the detected cnvs with the size smaller than 30 kb, which was not within the scope of our study. the frequency of cnvs detected by penncnv in all samples distributed most closely to the average one . so we drew a conclusion that penncnv outperformed the other three in the success rate and bias comparison .

consistency of the total quantity of the detected cnvs
the cnvs in the matching group, which were simultaneously detected by two, three or all of the four software packages, had a large bias when compared with the cnvs detected by a single software package alone .

the matching group showed an overall homogeneity of the called cnvs for all of the types of software packages . thus, the observation that the consistency of the detected cnvs between the snp array and cgh array was preferentially limited in the overlapped region rather than in the specific region suggested a possible signal instability and unreliable specific detection due to the snp array.

size and chromosome distribution of cnv
the size distributions of the grouped cnvs for all four software packages were shown in figure  <dig>  in figure 4a, each bin represented a different range of cnv lengths and the bars showed the percentage of cnvs in each size bin. the numbers in the parentheses indicated the total number of cnvs in each column . figure 4a illustrated the sizes of the detection results of comparing cgh-based cnv calling and snp  <dig> -based cnv calling in a total of  <dig> hapmap samples by four software packages.

as described previously, we focused only on the cnvs of ≥ 30 kb in size that were reported by the cgh platform  <cit> . three groups of cnvs were analyzed separately , including matching, overlapping and non-overlapping cnvs.

in figure 4b, each broken line represented the chromosome distribution of the cnv called by different software packages, and the inflection points showed the number of cnvs in each chromosome. figure 4b illustrated the chromosome distribution of the detection results of comparing cgh-based cnv calling and snp  <dig> -based cnv calling in a total of  <dig> hapmap samples by four software packages.

in the matching group, the matching cnvs from birdsuite were distributed mainly on chromosomes  <dig> and  <dig> . chromosome  <dig> also contained peaks of cnvs from dchip and penncnv-affy. relatively fewer cnvs on chromosomes  <dig>   <dig>   <dig>   <dig>   <dig> and  <dig> were called by almost all of the tested four software packages. due to the small number of total matching cnvs from gtc, relatively fewer gtc-called cnvs were observed across all of the chromosomes, with notably less on chromosomes  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig>  in the non-overlapping group, there was a limited proportion of cnvs distributed on the chromosome. only non-overlapping cnvs from birdsuite formed two peaks on chromosome  <dig> and  <dig>  and the other three software packages formed cnv peaks on chromosomes  <dig> and  <dig> 

additionally, many of the matching cnvs were on chromosome  <dig>  except the detection results of gtc. one possible explanation for this distribution was that chromosome  <dig> had the largest number of genes. chromosome  <dig> contained the fewest detected cnvs, even compared with the detected cnvs on other shorter chromosomes. interestingly, the most cnvs identified by birdsuite were distributed on chromosome  <dig> and chromosome  <dig>  although chromosome  <dig> was longer than chromosome  <dig>  very few cnvs were distributed on chromosome  <dig>  specifically, data for chromosome x and y were not shown because penncnv-affy didn’t carry sex chromosome information.

reproducibility test
to analyze the reproducibility of cnv calling for each of the four tested software packages, we performed the same experiment twice on a snp  <dig>  array using three chinese dna samples. the cnvs were considered to be replicated when at least 50% of the sequences in both cnvs overlapped.

table  <dig> showed that there were certain defects in the reproducibility of the data generated by the four software packages, and the sensitivity of the defects to cnvs of different lengths were different, including the overlapping  proportions of all of the cnvs and that of the cnvs larger than 15 kb and the cnvs larger than 30 kb.

our results demonstrated that larger cnvs were better replicated, and only gtc performed consistently in the duplicated experiments. comparing the four software packages, penncnv-affy shown the highest consistency and birdsuite the poorest, which were similar to the results reported by zhang et al.  <cit> .

analysis of the non-overlapping group
in this four-dimensional venn diagram , for the non-overlapping group, the total number of cnvs detected by birdsuite, gtc, dchip and penncnv were  <dig>   <dig>   <dig> and  <dig>  which could be considered to be false-positive cnvs after comparison with the cgh data. the remainder of the 283/1/195/ <dig> cnvs in the non-overlapping group were those that could be detected by only one of snp-array softwares or cgh-array software . we used a receiver operating characteristic  curve to graphically represent the false negative and false positive rates of each of the four tested software packages. statistically, more area under the curve meant that the method could identify more true positive results while minimizing the percentage of false positive results. accordingly, the auc  of the four mentioned software packages were as follows:  <dig>  for birdsuite,  <dig>  for dchip,  <dig>  for gtc, and  <dig>  for penncnv , which indicated that penncnv outperformed the other three packages, and the performances of the other three software packages were similar.

the percentage of cnvs simultaneously called by the different combinations of other software packages was indicated in the pie charts . most cnvs called by gtc could be validated by the other software packages, whereas most cnvs called by birdsuite and dchip could be validated only by themselves.

CONCLUSIONS
the objective of this research was to investigate the publicly available software algorithms for cnv calling from raw data produced by the affymetrix  <dig>  snp array platform. for this purpose, four software packages, e.g., birdsuite, dchip, gtc and penncnv-affy were evaluated. in our study, the total quantity, the mean and median sizes and the grouping of the detected cnvs were thoroughly investigated to evaluate the success rate, the detecting bias, the sensitivity and the reproducibility etc. of the four software packages.

through our study, we found that penncvn-affy outperformed the other three software packages on the whole. first of all, the parameters setting for penncnv-affy could be very easy. it were performed according to the manual on its official websites with default settings which could save time and make it general.

secondly, penncnv performed better than the other three ones in the success rate and bias comparison. although the total quantity of cnvs called by penncnv was not the largest among these four software packages, penncnv showed less bias when calling cnvs, which enabled it to find similar amount of both known and unknown cnvs. we considered this kind of balance also reflected its high sensitivity and high specificity.

in addition, we used a receiver operating characteristic  curve to graphically represent the false negative and false positive rates of each of the four tested software packages. statistically, penncnv outperformed the other three packages, and the performances of the other three software packages were similar.

moreover, in the reproducibility test, cnvs were categorized into three groups, including all cnvs, cnvs larger than 15 kb, and cnvs larger than 30 kb. gtc shown no differences among these groups because all of the cnvs called by gtc were larger than 30 kb. birdsuite, dchip, and gtc had only an approximately 55% consistency if the cnvs shorter than 30 kb were considered. however, penncnv obtained a consistent cnv calling as high as 87% even if it used the same algorithm with dchip and gtc, which indicated that only 13% of the cnvs called by penncnv were not found in the cgh-based cnv dataset.

based on the above reasons, penncnv seemed to be a reasonable and acceptable option when choosing single software package for cnv detection. but it was worth noting that the algorithms themselves might cause differences in the cnv detection  <cit> . meanwhile, software packages also have different emphases when they employed different algorithms. for example, birdsuite had a higher success rate but lower reproducibility. in contrast, gtc obtained high specificity but lower sensitivity and appears to be more conservative than other types of software.

obviously, a large part of the matching cnvs were detected by several software packages by the same time. also, if we used only one method, the calling effect would be certainly not so good as the combined use of multiple software packages. besides, the concordance between the snp  <dig>  and cgh platforms was much lower than 40%, and the different algorithms of each software packages would also make the detecting result diverse.

therefore, we proposed the combined use of multiple software packages, thus could provide us higher accuracy and reliability in the cnv detecting.

urls
the hapmap project website, http://hapmap.ncbi.nlm.nih.gov/;

the official penncnv website, http://www.openbioinformatics.org/penncnv;

database of genomic variants , http://dgvbeta.tcag.ca/dgv/app/home

ucsc genome bioinformatics site, http://genome.ucsc.edu/

competing interests
the authors declare that they have no competing interests.

authors’ contributions
xz performed the cnv calling experiment and statistical analysis, and drafted the manuscript. rd participated in the statistical analysis and manuscript preparing. sl carried out the snp array experiment. hw, lj and fz conceived the study. all authors read and approved the final manuscript.

supplementary material
additional file 1
cnv calls for  <dig> hapmap samples by  <dig> software packages.

click here for file

 additional file 2
comparison of cnv calls of  <dig> software packages.

click here for file

 acknowledgments
we sincerely thank all of the subjects who participated in this study. the authors have declared that no conflicts of interest exist. this work was supported by grants from the  <dig> program , the national science fund for distinguished young scholars , the national natural science foundation of china , the ministry of education of china , the doctoral fund of ministry of education of china , and the commission for science and technology of shanghai municipality  to hyw; the  <dig> program  to lj and fz.
