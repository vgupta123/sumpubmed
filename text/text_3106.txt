BACKGROUND
modeling in systems biology is vital for the system-level understanding of biological processes and predicting the behavior of the system at each level. to obtain high-quality pathway databases, many important databases are built by manual curation sometimes with the aid of computer. a typical curation process is well illustrated in  <cit> . first, biological information resources are collected from literature, background knowledge, and other databases.

to create and evaluate pathway models, the information is organized into the building blocks in pathway databases. after creating the pathways models, the domain experts validate the created pathways and the curators update them based on appropriate feedback. this validation and update are an iterative procedure to obtain the desired specific annotated pathway.

biological pathways are abstract representation of experimental data. ontology-based representations for biological pathways have emerged because such formats provide the advantages of defining and constraining diverse data  <cit> . the pathway format is given in some representational language, while the generation of instance data is usually separated from ontology development. although for the appropriate use of an ontology, formal definitions and informal documentation are given, it is sometimes difficult to avoid misassignment and misuse of ontology concepts. in the hierarchical structure of the ontology format, a more specific subclass should be selected instead of an upper class, such that a dna binding process has at least one dna as its participant. for the biological annotation, a suitable term should be selected from controlled vocabularies, such as cellular location for transcription. in addition, for dynamic models, more information which is usually not described in experimental data is required. dimerization and polymerization need different stoichiometry coefficient. likewise, there are important issues handled with care and they cannot be expressed formally in the ontology format. based on this viewpoint, we are motivated to establish an ontology-based instance data validation tool.

existing tools and inference engines  <cit>  detect the misuse of features and check syntactic validation available in the ontology semantics. ontology validation accomplishes generic ontology evaluation and debugging based on a schema and definitions for relationships in a conceptual model, such as logical consistency of the ontology, cardinality restriction, and subproperty axioms  <cit>  on the other hand, there are some related works to complement knowledgebase by representing dynamics of the system, i.e., how to set relevant logical parameters for petri net components  <cit> , predicting operons and missing enzymes in metabolic databases  <cit> . in such works, the focus is given on representing dynamics of the system by adjusting initial values and parameters for components. another important work is to verify pathway knowledgebase in terms of event relationships  <cit> . racunas et al. in  <cit>  carried out the verification on the level of the logical combinations of events, but without checking the biological meaning of individual events.

as a complement to such efforts, we had proposed a validation method to correctly represent biological semantics and system dynamics for biological pathways.  <cit> . on the basis of the previous work, we developed a rule-based approach for validating ontology-based instance data. as an ontology-based format, cell system ontology   <cit>  is used, which can represent biological pathways for simulation and visualization in owl   <cit> . we have defined  <dig> rules embedding biological semantics to constrain event-specific participants with cardinality, participant types, cellular location, and others properties. in particular,  <dig> biological events are formalized on the basis of shared knowledge underlying biological pathways defined in cso. we believe that our approach extends the expressiveness of the ontology and complements biological pathways with necessary properties, which aims to provide high-quality curated pathway models.

methods
we had defined three criteria for validating pathway models in terms of biological semantics and system dynamics as follows  <cit> :

criterion  <dig> a structurally correct model to be a bipartite graph with two disjoint sets.

criterion  <dig> a biologically correct model to represent the biological meaning of processes.

criterion  <dig> a systematically correct model to capture generic behaviors that govern the system dynamics.

for the three criteria, a rule-based approach is applied for validating biological pathways. a rule in this case is a form of reactive rules, i.e. event-condition-action rules. when the event happens, the corresponding condition is evaluated and the action is executed. some rules are a form of condition-action rules that directly evaluate the specified condition with no event. that is, if the condition is satisfied, then the action is applied. please note that the event part in reactive rules is different from biological events. each rule specifies a variety of relationships on the basis of biological events, and consists of owl constructors and axioms  <cit> . the available constructors and their correspondence with shoiq class expression  <cit>  are summarized in table  <dig>  each letter in shoiq indicates s for smallest propositionally closed description logic with transitive roles, h for role hierarchy, o for nominals, i for inverse roles, and q for qualified number restrictions, respectively.


relations used in rules are in typewriter type and the details are as follows: unary relations are classes; binary relations in all capital letters are properties; and pre-defined terms  in cso and variables for instances are in italics.

criterion 1: validation for structurally correct models
cso uses an advanced petri net named hybrid functional petri net with an extension for the modeling and simulation of biological pathways  <cit> . in petri nets, three elements, including place, transition, and arc, are defined. in order to be more intuitive for biological investigations, the entity, process, and connector classes are used to denote place, transition, and arc element, respectively, in cso. for the details of cso and its schema, please refer to  <cit> . the relationship of the cso classes and the petri net elements is graphically summarized in figure  <dig>  the entity class is used to represent objects, e.g. mrna, protein, and small molecules. the process class is used to represent biological events, e.g. phosphorylation, acetylation, and translocation. the relationship between entity and process is represented by the connector class, i.e. indicating which entity is involved in a process.

in the petri net architecture, an entity reflects the concentration of the substance and a process has a speed that depends on the concentration of the incoming entity. a connector transfers tokens from the input entity to the process or from the process to the output entity. connector has several petri nets related properties for simulation, such as initial value , minimum value, maximum value, and kinetics. because of this reason, connector is defined as a class in cso. there are four types of connectors which imply the role of the involved entity in the process, including substrate, inhibitor, activator, and product.

we define that one entity can participate in a process with only one role. in other words, more than two connectors associated with the same pair of an entity and a process are not allowed. the valid connections among process, entity, and connector are five types as shown in figure  <dig>  process can have multiple connectors and each connector can have only one entity by definition in cso. to constrain the relation among three classes, we defined a rule for detecting any invalid connection in the below.

the condition part checks whether there exist more than two connectors for a given pair of process and entity. if the condition is true, then perform the action. this rule requires user intervention to select a correct connector because it is difficult to decide which connector is correct without understanding the details of the interaction  <cit> .

in the rule description, e, c, and a denote event, condition, and action, respectively.

rule for valid connection

e: process Λ entity

c: ¬ 

a: alert

criterion 2: validation for biologically correct models
biological pathways consist of a series of interactions among entities. as described before, the process class represents biological events each of which has characteristic features such as the type of molecules performing the event, the number of molecules involved, and the location which the event occurs. for example, autophosphorylation is a biological event to add a phosphate to a protein kinase by virtue of its own enzymic activity. hence, autophosphorylation is different from phosphorylation because it occurs without any enzyme. such definition is usually written in the natural language for the human users. to facilitate curation procedure, we defined four types of constraints for biological events which have specific requirements as follows:

cardinality constraint a biological event needs constraints for the number of participating entities.

type constraint a biological event needs a specific type of the entity, such as small molecule and dna.

property constraint an entity involved in a biological event needs to have a specific value for the property such as protein modification, cellular location, and stoichiometric coefficient.

property relationship constraint for two entities involved in the same biological event, there needs a specific relationship between the values of the same property, such that two values should be same.

in this article, we have defined  <dig> rules for the  <dig> biological events. the  <dig> rules are divided into five groups depending on the necessary constraints for convenience. in the following rules, the action part will be different depending on the constraints in the condition part. basically, the action is to show users an error message when the constraints are not satisfied. we use abbreviations as follows: hasinput implies that a process p <dig> has an entity e <dig> which is connected to p <dig> via one of three input connectors inputassociationbiological, inputinhibitorbiological, and inputprocessbiological; hasinputprocess means that e <dig> is connected to p <dig> via inputprocessbiological; and hasoutput means that e <dig> is connected to p <dig> via outputprocessbiological. the types of connectors are already shown in figure  <dig>  for each e <dig>  we called it as an input, inputprocess, output entity, respectively. in addition, for the pre-defined instances in cso, the apostrophe prefix is used, such as ’ft_phosphorylated and ’me_binding. cso provides pre-defined common vocabularies to annotate biological information. it allows to reuse existing structured information from other resources and to guide the allowable values for annotating biological information. due to limitation of space, we list only several rules here. the formal description and full list of the rules are given in additional file  <dig> 

group 1: rules that need cardinality and type constraints
biological events in this group are required to have a specific type of an entity and/or a specific number of the entity. for example, dna binding is defined as binding of a protein to the promoter/enhancer of a gene. the rule for dna binding describes that there needs at least two more inputprocess entities; one of inputprocess entities has the type as dna; and the product of dna binding should have the type as complex. both dna and complex are subclasses of entity in the hierarchy of cso.

rule for dnabinding

e: process Λ biologicalevent

c: ¬ 

group 2: rules that need cardinality and sequencefeature property constraints
this group includes rules for the sequence relevant interaction such as post-translational modification. in the rules, hasfeature means that an entity x <dig> has a feature type as ’x <dig> where ’x <dig> is a predefined term for featuretype.

rule for acetylation

e: process Λ biologicalevent

c: ¬ 

the acetylation event generates a chemically acetylated protein that has its featuretype as ’ft_acetylated. in the condition part, the external references for two entities, i.e, the values of unificationxref  for the input x <dig> and output x <dig> entities, have to be the same because x <dig> is a modified form of x2

rule for autophosphorylation

e: process Λ biologicalevent

c: ¬ 

for autophosphorylation, the condition part describes that the output entity is a phosphorylated form of the inputprocess entity when no enzyme is present. two properties, hasinputprocess and hasinput, imply that x <dig> and x <dig> are the same entity. the process has one output entity whose feature type is defined as ’ft_phosphorylated.

group 3: cardinality and stoichiometry property constraints
there are three events that indicate the chemical union of identical molecules. depending on the definition in cso, the stoichiometric coefficient of an inputprocess entity is  <dig> for dimerization, more than  <dig> and less than  <dig> for oligomerization, and more than  <dig> for polymerization.

in the below, the rule describes that it needs one inputprocess entity whose stoichiometry coefficient is equal to  <dig> and one output entity whose type is complex.

rule for dimerization

e: process Λ biologicalevent

c: ¬ 

group 4: rules that need cardinality and cellcomponent property constraints
in some biological events, cellular location of participating entities is important. for example, the internalization and nuclear export events are the movement of the inputprocess entity from extracellular/plasma membrane to cytosol, and from nucleoplasm to cytoplasm, respectively, while the translocation event requires that the inputprocess and output entities just have different cellular locations.

rule for internalization

e: process Λ biologicalevent

c: ¬ 

it describes that one inputprocess entity should be located in extracellular or plasma membrane; one output entity should be located in cytosol; both entities x <dig> and x <dig> have the same external reference.

group 5: rules that need cardinality, type, and cellcomponent property constraints
this group needs a specific type of an entity located in a specific cellular location. the transcription event is of copying information from dna into new strands of mrna. the constraints are that the type of the output entity is mrna with cardinality 1; the location of the output entity is nucleoplasm. the gene expression, ion transport through ion channel, and translation events are included in this group.

rule for transcription

e: process Λ biologicalevent 

c: ¬ 

criterion 3: validation for systematically correct models
cso can represent the dynamics of biological pathways and is supposed to simulate complex molecular mechanisms at different levels of details. once a mathematical model of biological pathways has been generated, it is necessary to estimate free parameters and unknown rate constants on the basis of the experimental data. in this paper, we limit our consideration to generating a simulatable model to be ready for evaluation and focused on protein turnover.

normally, proteins are synthesized within the cell and over time are gradually broken down into individual amino acids, and this cycle is repeated. to capture this behavior, we define three rules to recognize the entities that are synthesized and degraded. for the entity that is not a product of any process, we add a pre-process that we assume generates the entity. on the other hand, for the entity that will be degraded, a degradation process is added to mimic biological degradation. in the petri net formalism, adding a pre-process for such entity makes the pre-process to be fired without any constraints when the simulation is started, and the degradation process will consume the entity’s concentration. this complementation of the pathway model in cso will help users to intuitively understand the given model and the way in which the model works when using petri net based simulation tools such as cell illustrator   <cit> .

in the following rules, the action part improves the given model by adding new instances  and properties . the variable in braces, e.g. <x2>, denotes a new instance. furthermore, the reverse properties are used, e.g. entity– is equal to entity.

rule for starting entities

c: entity Λ ¬ complex Λ ∀x <dig> {entity– Λ input}

a: add-instance process, outputprocessbiological

add-property biologicalevent, connector, entity

a starting entity is an entity whose type is entity, but not complex which is a subclass of entity, and is connected to a process only via input connectors. hence, if a given entity is a starting entity, then the action is to add a unknown production process <x2> and any necessary properties for it. this rule makes the starting entity be a product of the unknown production process.

rule for starting complexes

c: complex Λ ∀x <dig> {entity– Λ input}

a: add-instance process , outputprocessbiological

add-property biologicalevent, connector– 

for ∀x <dig> entity Λ entity do add-property connector– 

add-instance inputprocessbiological

a starting complex is a starting entity whose type is complex. for a starting complex, we assume that the complex is generated via a binding process. in the action part, a binding process is added and the components of the complex will be the participants of the binding process.

rule for degrading entities

c: {protein v complex v mrna v smallmolecule} Λ ¬ {process Λ biologicalevent Λ hasinputprocess}

a: add-instance process, inputprocessbiological

add-property biologicalevent, connector

add-property entity

for protein, complex, mrna, and smallmolecule, if a degradation process is not presented, a unknown degradation process is added.

RESULTS
in order to implement the proposed rule-based system, we used allegrograph  <dig>   <cit>  for the cso data storage and query engine. allegrograph is an rdf  graph database with support for sparql   <cit>  as a query language. query manipulation and cso data manipulation stored in allegrograph are carried out using protege owl api  <cit>  and jena  <cit> . this system is applied to macrophage models that are manually curated and created by using cell illustrator  which is a tool to graphically model and simulate cellular processes.

scientific publications reflecting the results of biological experiments and including the keywords: lipopolysaccharide , phorbol 12-myristate 13-acetate , macrophage, and signal transduction pathway, were searched from pubmed  <cit> . a total of  <dig> publications were selected and modeled by curators. one model was based on a single publication. basic guidelines on how to create and curate models on ci were provided to the curator. the created model was stored in cell system markup language  as a default format in ci and exported into cso.

types of warnings
our validation method was applied to the  <dig> macrophage models that contained a total of  <dig> processes and  <dig> entities. the warnings appeared if the expected value in the condition part is not correct or not defined. table  <dig> shows the warning description and its frequency in the first and second columns, respectively.


the macrophage models did not violate the rule for structurally correct models in criterion  <dig>  the reason for this is that the macrophage models were generated by ci, which supports the drawing of petri net-based models via graphic tools and has the ability to check the connections between processes and entities. criterion  <dig> is useful for validating translated data from other databases which have different schemata to cso like biopax2cso  <cit> . the warnings related to criteria  <dig> and  <dig> are given in table  <dig> 

as described in methods, the validation rules for criterion  <dig> generate warnings if a process does not satisfy its constraints. among of the four constraints in methods, the cardinality constraint is useful to detect other related problems. if an appropriate entity is not defined, then the related properties of the entity are not satisfied, either. for the property constraint, the featuretype property is needed for all post-translational modified entities. we found that it was not well guided to curators before curation. the value of this property will be given easily because each rule in group  <dig> show one-to-one mapping between two properties, biologicalevent and featuretype. the unificationxref property is used to uniquely identify biological entities. it is important not only for ontology instance data validation, but also for data integration such as model comparison and model merging. currently, a biological entity is identified by external references that give additional information for the entity. in this work, we use transpath  <cit>  as a main reference because it provides a comprehensive hierarchy for molecules and distinguishes between different species of the same molecule and between modified and unmodified forms of a protein, which is not supported by other databases  <cit> . for the new molecules to transpath, especially for modified or complex molecules, it takes time to identify whether the entities have the same basic molecule. we will improve this procedure to reduce the search time.

on the other hand, the rules in criterion  <dig> directly manipulate the models if the condition part is satisfied. the rules include the action part to complement a given model by adding unknown production processes for starting entities, binding processes for starting complexes, and unknown degradation processes for degrading entities.

from the results, it is useful to analyze the relationship between biological events and warnings to know which points demand careful attention. this feedback is used to give guidelines to curators again.

a total of  <dig> biological events are used in the  <dig> macrophage models. rules are not defined for  <dig> biological events such as cleavage and unknown interaction, because they have no specific characteristics to distinguish them from others. such event terms occurred  <dig> times, which accounts for  <dig> % of the processes in the  <dig> models. as described in methods, for criterion  <dig>  the  <dig> rules are divided into the five groups, each of which has same or similar constraints. table  <dig> shows the frequency of each biological event occurred in the  <dig> models, the number of warnings during validation, and the reasons for the warnings. the biological events are listed by the order of rules in the five groups for criterion  <dig>  in the third column, the warnings are counted on the basis of a process and its connected entities. the last column shows the reasons for the warnings per biological event and frequencies in parentheses, except for warnings related to featuretype and unificationxref properties. for example, me_adpribosylation in group  <dig> occurred two times in the given models. among the seven warnings, only one was related to the number of input entities.


the biological events are grouped together along with the rules for criteria  <dig> in methods. the biological events in the last group have no rules and are notified with n/a in the first column.

what is corrected by validation?
we checked each model based on the warnings related to the cardinality constraint and corrected each model by reviewing the literature used to generate the model. two cases are selected to show how our validation approach facilitates to correct the macrophage models. in figures  <dig> and  <dig>  a and b indicate the original model and the corrected model after validation, respectively. the red boxes in the figures reveal the places in which the problem happened and the model is changed.

case 1: misassignment of the connector type. as shown in figure  <dig>  the me_unknownactivation event violates the cardinality constraint of inputprocess entities. this event term is used in case the mechanism by which leads to the activation of a molecule is unknown. in the rule for me_unknownactivation, the condition part describes that only one inputprocess entity is needed to activate. in figure 3a, we found that there are two inputprocess entities and one of those entities plays a role as an enzyme. therefore, the type of the connector between the activated ras and the process is changed into inputassociationbiological, which represents this event as the activated ras-induced raf <dig> activation as shown in figure 3b.

case 2: misassignment of the biological event term. this case shows that one dimerization event also violates the cardinality constraint of inputprocess entities. by the rule, me_dimerization has only one inputprocess entity whose stoichiometric coefficient is  <dig>  as shown in figure 4a, the output entity is a complex m-csf:m-csf-1-r generated by the binding of m-csf:m-csf-1-r to m-csf-1-r. we found that the biological event term is assigned mistakenly. then the term is changed from me_dimerization to me_binding as shown in figure 4b.

discussion and 
CONCLUSIONS
to our knowledge, the validation of ontology-based instance data for biological pathways has not been addressed yet. although the ontology schema is developed with documentation, the use of the ontology is usually separated from the development. the generation of data on the basis of the ontology schema is apt to contain misuse and misunderstanding of the ontology. such errors are not detected by ontology validation carried out on the basis of the ontology schema. the error correction is usually done manually and is time consuming. as shown in results, relatively simple rules can detect the errors in the model, such as misassignment and misuse of ontology concepts and terms and enhance the model to be ready for simulation.

our rule-based validation enables us to provide pathway models that allow computational tools to explore the possible dynamic behavior of pathway components with considering biological meaning. if sophisticated adjustment of quantitative parameters is needed for simulation, the correct assignment of biological concepts and terms are essential for ontology based computational tools. therefore, this approach can serve as a preprocessing step for model integration, exchange and extraction data, and simulation. in future work, we plan to develop this system as a plug-in for ontology editors, and modeling and simulating tools.

competing interests
the authors declare they have no competing interests.

authors' contributions
ej and mn conceived the basic idea. ku and mn created the macrophage models to be evaluated. ej defined the rules for the validation and implemented the rule-based system. ej and mn evaluated the validation result and completed the manuscript. sm supervised the whole study. all authors read and approved of the final manuscript.

supplementary material
additional file 1
the full list of  <dig> rules.

click here for file

 acknowledgements
this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2011: selected articles from the ninth asia pacific bioinformatics conference . the full contents of the supplement are available online at http://www.biomedcentral.com/1471-2105/12?issue=s <dig> 
