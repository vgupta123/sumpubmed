BACKGROUND
the analysis of regulatory mechanisms using boolean formalisms is an important technique  <cit> , and has been successfully applied to systems of moderate size, e.g.  <cit> . furthermore, a tool  has been developed to set up and analyze logical networks  <cit> .

recently, new techniques based on a logical formalism – in combination with graph-theoretical methods applied to the underlying interaction graph – have been proposed for the analysis of large-scale signaling and regulatory networks  <cit> . these methods have been implemented in cellnetanalyzer , allowing structural analysis of large networks within a gui  <cit> .

in cna, the user should provide a graphical map of the network, a mathematical  input of the network structure, and a mapping from the latter to the earlier. however, the procedure for setting up large-scale networks by hand, of both the graph and text, can be a cumbersome and error-prone task. there are many tools available to set up models describing signaling networks as a biochemical reaction network, such as celldesigner, jdesigner, and promot  <cit> . however, to the best of our knowledge, there is currently no tool available that allows the visual setup of large logical networks, and has the ability to export both the mathematical model and the graphical representation together. note that ginsim allows to define visually the elements of a network and their connections, but the detailed logical information must be included via textual rules.

therefore, we have extended the abilities of promot  <cit>  to fill this gap. first, we setup a library of basic logical elements , which also possess properties that contain additional information. subsequently, we developed a visualization component that allows the user to customize the representation of the logical model. finally, we created exports in several formats which provide an input for analysis packages. in the following, we describe briefly these developments and show their applicability via a toy model, as well as using a realistic large model of t-cell signaling recently published  <cit> .

implementation
all aspects of this work are implemented in promot  <cit> . promot itself consists of two main units, the kernel  and the gui , which are interfaced via a corba middleware . the kernel contains the memory-representation of the models and can read and write storage formats. the gui is designed for visually constructing models  and for the interactive exploration and further visual alteration of an existing model . additionally, models can also be setup via promot's modeling language mdl . the modeling elements are organized in a modeling library and can be re-used. promot supports the development of modules as classes in an object-oriented inheritance hierarchy. promot has been used so far for developing structured dynamic models based on differential-algebraic equations in the fields of system biology and process engineering. these models can be simulated in matlab or our own simulation environment diana. additionally for biochemical models an import and export option for the systems biology markup language  is implemented. for the logical networks, a new type of models has been added to promot. the model definition and handling works in the same way as for the dynamic models, only the respective modeling libraries and the output system are specific for logical interaction hypergraphs as defined in  <cit> .

the structure of the promot implementation with the multiple output formats allows to use the features of different analysis and simulation tools without the need of reimplementing the models. also the graphical representation and editing can be applied in almost the same way for the different kinds of models, which makes it easier for the modelers.

the visual explorer is a new feature of promot that provides a versatile visualization. it uses several zui  functionalities of the piccolo toolkit  <cit> . thus, highly interactive and adaptive visualization can be created to represent large and complex logical networks and facilitate their convenient exploration. the visualization is altered applying the concept of visual scenarios . a tutorial with a detailed explanation on how to install promot accompanies this paper , as well as promot'source code .

RESULTS
definition of a library of basic elements
there are two main classes in the modeling library, compound , and gate . applying promot's object-oriented modeling paradigm  <cit> , subclasses of a certain class can be easily defined. for example, we have defined subclasses of the class compound , which are all mathematically equivalent to compound but can be specifically considered in the later visualization process .

to define different logical connections among the elements we subclassed the class gate into activ , and , and not . ar or gate can be implemented by including several activ elements pointing at a certain compound. since any logical connection can be described as a combination of ands, ors, and nots <cit> , the set of basic elements described above allows to set up any logical network of arbitrary size. in addition, to describe cases where the logic is unclear  <cit> , we have also included the class somehow which represents logical gates with partially incomplete truth tables.

finally, the classes input and output allow to define the incoming and outgoing signals of the model, respectively.

properties can be easily added to the different classes. for example, we have defined parameters for the default value and time-scale  <cit> , which are exported with the model. multiple levels  levels) is also implemented using the properties of the gates. inputs and outputs of all gates posses a parameter  encoding the level: the parameter of the input defines which state must reach the start node to activate the target, and the parameter of the output the level the target will reach . additionally, all elements have a documentation, which can also be exported with the model.

exploiting the modularity
promot allows to set up models in a modular manner  <cit> . this unique property can be used to define different submodules, either physically delimited  or comprising a particular submodel . the modules can be reused. for example, a module of the ubiquitous mapk cascade may appear in several models or several times in one model. so, it is only required to set up this module once and then use it several times, facilitating and speeding up the building procedure.

visualization
the elements described above enables a precise setup of a mathematical model, but the representation is certainly not biologically intuitive. since the models are characterized by many components and interactions, visualization aspects are of great importance  <cit> . we tackle this issue with scenario-based visualization techniques  implemented in the visual explorer, a new component to the gui of promot .

a visual scenario describes a set of mapping functions that define the visual properties of elements . in this manner the visualization of the entire network can be adapted towards a more biological meaning and/or user's preferences. the biological intuitiveness is realized by  aggregation of all modules and hierarchies in a single visualization,  hiding of elements that are necessary for the mathematical description but without a clear biological interpretation, and  altering the visual properties of certain elements to achieve a biologically more intuitive representation.

the following examples illustrate the process of designing a biological motivated representation of the model, and the resulting map is depicted in figure  <dig> . elements of the class not are hidden, and the corresponding information  is coded in the color of the line. another class specifically treated is the reservoir. elements of this class are used when several pools of a molecule are considered. this is a common situation, for example, if two subsets of a certain molecule with distinct properties, typically a different localization in the cell or different regulation, are to be modeled. for example, in the toy model there are two pools for the kinase k <dig>  k3p <dig> and k3p <dig>  which are regulated differently. in this case, a 'reservoir' is included which is required for the activation of both pools. this allows simultaneous knock-outs of both pools, but this is also a mathematical entity without a clear biological interpretation. hence, elements of the class reservoir are automatically hidden, and the line connecting them to the corresponding pools is dashed. in this way, the mathematical information  is maintained in the graphical representation, but coded in such a way that it is not confused with other kind of information.

the visual scenario including the visual properties of the elements can be easily edited using a setup dialog. for example, an alternative representation, matching different preferences, is depicted in figure  <dig> 

generation of models for analysis
as mentioned before, promot does not perform the analysis of the models, but instead generates input for analysis packages like cellnetanalyzer , see figure  <dig>  in this process the model classes, generated by the user, get instantiated. since analysis packages usually don't consider modularity and structure, only the flat network of leafnode elements in the model, defined in the modeling library, are extracted. even though for the model setup the user can construct complex classes in a hierarchical manner, for the export only a network based on the basic elements that the analysis tools can handle  can be exported. these leafnode elements and their connections are translated to the input format of the analysis software, based on their mathematical semantics and specific parameters given by the user. additionally, in the case of tools which support a graphical interface, graphics and layout informations can also be generated.

even though there has recently been an initiative to define a xml format for boolean networks – ginml, see  <cit> , – there is currently no established standard for logical networks: sbml only supports kinetic models. therefore, we have first implemented the generation of input for cna  and some other simple formats such as a transition function for the whole boolean network expressed as matlab code . other exports  can be easily added. however, we think that first a well-defined standard for discrete and logical models should be established by finding some common denominator of different tools for discrete analysis of cellular network , to facilitate model exchange.

the table shows the file exported to cna  <cit> , where def means default value, # codes an non-determined value, sh whether an element posses an incomplete truth table   or not , t the time scale, and x and y the positions in the map. in cna an and connection is coded via '+' instead of '·' and the exclamation mark '!' indicates a not.

alternative export of the toy model for simulations in matlab, e.g. as used in  <cit> .

proof of principle for large networks
in order to illustrate the applicability of our modeling environment to real, large networks, we have implemented, in promot, a large model describing the signaling network governing t-cell activation . the model comprises  <dig> species and  <dig> interactions , and is, to the best of our knowledge, currently the largest logical model of a biological system. note that we have used promot's visualization properties described above, e.g. classifying the compounds to the different subclasses , which provides a map with this information visually coded .

discussion
in our group, there are currently several large models under development, including a model for t-cell signaling , a model for the pro- and antiapoptotic signals controlling hepatocyte proliferation, and a detailed model of the cell cycle regulation in mammalian cells.

thanks to promot's modularity, we are developing parallely different submodels , which we will subsequently join into a larger model.

in order to represent the result of analyses of different tools directly in promot's adaptive and interactive gui, we plan to develop a common interface for data exchange.

furthermore, we would like to develop, in agreement with the systems biology community and as part of the sbml initiative, a formalism for boolean networks which facilitates the exchange and storage of models, as currently sbml allows for kinetics descriptions of biochemical networks.

CONCLUSIONS
we have described a new framework to set up models of biochemical networks using a logical formalism. the flexibility of our approach, its consideration of the specific properties of signaling and regulatory processes and their requirements, makes it a useful tool for the systems biology community. its applicability was demonstrated not only by a toy model, but also via the largest current logical model of a signaling network, comprising  <dig> compounds .

availability and requirements
project name: promot

project home page: 

operating system: the downloadable files run on unix-derived operating systems . a windows version is planned.

programming languages: java, lisp

other requirements: java  <dig> . <dig> or higher

license: gnu general public licence 

any restrictions to use by non-academics: none

promot is freely available at 

abbreviations
cna = cellnetanalyzer

corba = common object request broker architecture

ginml = gene interaction networks markup language

gui = graphical user interface

zui = zoomable user interface

mdl = model definition language

sbml = systems biology markup language

authors' contributions
jsr conceived the project, implemented the library with mg, tested it and set up the models. sm implemented the visualization methods. rh contributed to the setup of models  and the documentation. sk contributed to the export functions. edg gave rise to fruitful discussions and coordinated the project. mg implemented the interpretation of the library in promot and export of the models. all authors read and approved the final manuscript.

supplementary material
additional file 1
promot tutorial. a tutorial explaining how to install promot and how to set up and export logical models is attached. for updated versions check promot's web page .

click here for file

 additional file 2
promot's source. the source code of promot is attached. promot binaries, source, and promot binaries plus all additional libraries  can be downloaded from promot's web page .

click here for file

 acknowledgements
the authors thank support of the german ministry of research and education , the german research society , and the ministry of education of saxony-anhalt .
