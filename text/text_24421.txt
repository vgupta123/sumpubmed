BACKGROUND
recent advances in high-throughput interaction detection methods such as yeast two-hybrid and mass spectrometry techniques have led to a rapid expansion of protein-protein interaction data in several organisms. for example, there are about  <dig>   <dig> interactions between  <dig>   <dig> s. cerevisiae proteins, approximately  <dig>   <dig> interactions between  <dig>   <dig> d. melanogaster proteins, and over  <dig>   <dig> interactions between  <dig>   <dig> c. elegans proteins  <cit> . more than  <dig>   <dig> protein interactions and  <dig>   <dig> genetic interactions are also known for six major model organisms  <cit> . several databases have been built for the large amount of protein-protein interaction data, which include bond  <cit> , dip  <cit> , mips  <cit> , hprd  <cit> , hpid  <cit>  and biogrid  <cit> . most of the databases allow the user to retrieve protein-protein interactions that satisfy a condition specified in a query. keyword matching or id matching is one of the most commonly used searching methods. this type of search retrieves all of the records in the database which contain a keyword or id specified in a query. the user can alter retrieval results using boolean operators such as and, or and not.

however, a search method based on keyword matching or id-matching is purely syntactic and does not consider biological relations between the keywords or ids. if the user gets too many protein-protein interactions, selecting the protein-protein interactions to focus on entirely relies on the discretion of the user. if the user gets too few protein-protein interactions or no results at all, the user will probably have to look for other resources. for example, bond returns  <dig>   <dig> protein-protein interactions for a keyword query of 'atp binding' whereas it returns only  <dig> interactions for a keyword query of 'nucleotide binding'. the term 'nucleotide binding' is at a higher level than 'atp binding' in the gene ontology  hierarchy  <cit> , but it returns much fewer search results than 'atp binding'. this search anomaly occurs because the search method of bond does not consider the biological relation between keywords. besides, the user must enter an exact keyword or id in the query since bond and many other protein-protein interaction databases do not support the 'autocomplete' feature when searching the databases.

recently a few ontology-based information retrieval methods have developed for biological literature or databases  <cit> , but little work has been reported on the ontology-based search for protein-protein interactions in databases. we developed a new representation of the gene ontology  and a search engine that finds all the semantically relevant interactions of a query protein using the representation. for a go term, all the go terms at the lower level than the go term in the go hierarchy are automatically considered when searching for protein-protein interactions. for example, when dealing with a query like "for protein p annotated with a go term f, find the interaction partners of p", the search engine considers not only the go annotation f but also all the go annotations below f in the go hierarchy. several computational methods have been developed to elucidate protein function from the analysis of protein-protein interaction data  <cit> , and our search engine will be useful to identify proteins with common function or subcellular localization. this paper presents the development of a new representation method of protein-protein interactions and a search engine for protein-protein interactions using the representation method.

methods
gödel numbers are typically used to uniquely encode any list of positive integers {a <dig>  a <dig>  ..., an} by   

where pk is the kth prime number  <cit> .

however, the original gödel numbers defined by equation  cannot represent the directed acyclic graph  structure of the gene ontology. consider an example shown in table  <dig>  in which a unique natural number represents a term and a gödel number represents the relation between the terms. term <dig> is a kind of term <dig> by relation r <dig>  and term <dig> is a kind of term <dig> by relation r <dig>  but these relations cannot be inferred unambiguously from the representation of table  <dig> 

the following example shows why the original gödel numbers fail to represent the go structure. suppose that we represent terms by unique natural numbers and the relations between them by gödel numbers. in this example, term <dig> is a kind of term <dig> by relation r <dig>  and term <dig> is a kind of term <dig> by relation r <dig>  but these relations cannot be inferred from the representation because the original gödel numbers are not sufficient to represent the dag structure of go.

therefore, we modify the gödel numbers as follows:

 <dig>  assign each term a prime number instead of a natural number using algorithms  <dig> and  <dig> 

 <dig>  represent each relation between the terms by a modified gödel number using algorithm  <dig>  the modified gödel number is the product of the prime numbers representing the terms in the relation and their ancestors, including the root term in the gene ontology hierarchy.

for example, relation r <dig> of table  <dig> is represented by  <dig>  which has prime factors of  <dig> ,  <dig> , and  <dig> . this representation enables us to infer the meaning of r <dig> by unique factorization of r <dig> into prime numbers representing term <dig>  term <dig>  and term <dig> 

each term is assigned a prime number instead of natural number, and each relation is denoted by a modified gödel number, which is a multiplication of prime numbers representing the term and its ancestors in the ontology hierarchy. for example, relation r <dig> is denoted by  <dig>  which has prime factors  <dig> ,  <dig> , and  <dig> . using this representation, relation r <dig> can be easily inferred by unique factorization of it into primes .

using our representation, it is possible to infer protein-protein interactions from domain-domain interactions. suppose that domaina interacts with domainb, proteina has domaina, and that proteinb has domainb. simple arithmetic operations such as integer division and modulo operations are sufficient to infer that proteina interacts with proteinb.

in this example, the relation that domaina interacts with domainb is represented by a modified gödel number  <dig>  which is the product of  <dig>  and  <dig>  . the hypothesis that proteina interacts with proteinb is represented by a modified gödel number  <dig>   <dig> from the multiplication of  <dig>  by  <dig>  . since the remainder after dividing  <dig>   <dig>  by  <dig>  is  <dig> , the hypothesis that proteina interacts with proteinb turns out to be true.

algorithm  <dig> generate modified gödelnumbers

this algorithm assigns prime numbers to go terms, stores the relation of the go terms in a local db by calling algorithm  <dig>  and generates the modified gödel numbers by multiplying the prime numbers.

1: t = {t <dig>  t <dig>  ..., tg} {g is the number of go terms.}

2: p = {p <dig>  p <dig>  ..., pg} {p is an ordered set of prime numbers.}

3: for all i ∈ { <dig>   <dig>  ..., g} do

4:   ti ← pi {assign a prime number to a go term.}

5: end for

6: for all t ∈ {t <dig>  t <dig>  ..., tg} do

7:   algorithm <dig> {store the prime number assignment in a local db.}

8: end for

9: for all t ∈ {t <dig>  t <dig>  ..., tg} do

10:   modified gödel number ← algorithm3

11: end for

algorithm  <dig> storerepresentation

this algorithm stores the prime number assignment of the go term and its parents by a recursive call until the parameter term is a root term of the hierarchy.

1: if term.isroot == false then

2:   for all t ∈ term.parent do

3:      setrelation {store the prime numbers assigned to term and its parents.}

4:      algorithm <dig> {recursive call for the parent of term}

5:   end for

6: end if

algorithm  <dig> modifiedgödelnumber

this algorithm calculates a modified gödel number by multiplying the prime numbers representing the parameter term.key and its ancestor terms in the ontology hierarchy.

1: arraylist list = getrelation {retrieve the prime numbers for term and its ancestors.}

2: var = 1

3: for all t ∈ list do

4:   var = var × t.prime

5: end for

6: return var

RESULTS
user interface of the search engine
a prototype of the ontology-based search engine has been implemented in the c# programming language  <cit> . we generated more than  <dig>   <dig> prime numbers using the sieve of eratosthenes  <cit> , and used the java biginteger class to store the numbers and to perform multiplication and modulo operations on them. when the user specifies a go term or protein superfamily  <cit>  for the query protein, the search engine returns all interactions that involve the protein annotated with the go term or superfamily as well as the proteins annotated with more specific terms than the specified go term. to make the search engine easy to use, it provides autocomplete functionality for go terms or protein superfamilies. so, a partial term entered by the user is expanded into one or more complete go terms or superfamilies that are consistent with the partial term. an example of using the autocomplete functionality for go terms in the search engine is shown in figure  <dig> 

the user can also get protein-protein interactions from the web service of the search engine using the web services description language . wsdl is an xml format for describing network services as a set of endpoints operating on messages containing either document-oriented or procedure-oriented information  <cit> . the interaction data returned by the search engine can be displayed and saved in the psi-mi format  <cit>  or in the psi-mi format with xml style sheets.

comparison of the search methods
we tested the ontology-based search engine on the interaction data of hprd  <cit>  and compared it with the id-matching search method. table  <dig> shows the number of protein-protein interactions found in hprd by the two search methods. hprd release  <dig> contains  <dig>   <dig> interactions between  <dig>   <dig> human proteins, which are annotated with  <dig> go terms. the total number of go terms is more than  <dig>   <dig>  but only  <dig> % of the  <dig>   <dig> go terms are used for annotating human proteins in hprd. our search engine can infer up to  <dig> go terms for human proteins from the  <dig> go terms that were used for annotating human proteins .

the number of protein-protein interactions found in hprd release  <dig> by each search method. the numbers inside parentheses indicate the ratio of the interactions to the total  <dig>   <dig> interactions of hprd. the id-matching search often finds more interactions with a specialized go terms than with a less specialized terms since it does not consider semantic relation between ontology terms.

the go term id of go: <dig> is the root node of the go hierarchy for biological process. with a query of go: <dig>  the ontology-based search engine found  <dig>   <dig> interactions , but the id-matching search retrieved only  <dig> interactions . with a query of go: <dig> for metabolic process, which is the descendent node of go: <dig> in the go hierarchy , the ontology-based search engine found  <dig>   <dig> interactions , but the id-matching search found  <dig>   <dig> interactions . the id-matching search returned more search results with a more specific term than with a less specific one. the id-matching search found no interactions with a query of go: <dig> or go: <dig>  but found  <dig>   <dig> interactions with a query of go: <dig>  which is at a lower level than go: <dig> or go: <dig>  these search anomalies occur because the id-matching search method does a purely syntactic search and does not consider the relation of go terms at all. in contrast, the ontology-based search finds interactions not only by the go term specified in the query but by specialized terms of the term.

in hprd the ontology-based search found  <dig> interactions involving a protein annotated with 'nucleotide binding'. only  <dig> interactions have a protein with an explicit annotation of 'nucleotide binding'. the remaining  <dig> interactions were inferred by finding a protein annotated with a more specialized term such as 'atp binding', 'fad binding' or 'gtp binding'. due to space limit,  <dig> interactions  are not shown here.

networks 7- <dig> of figure  <dig> represent the  <dig> interactions found by the ontology-based search with the query of 'atp binding' . 'atp binding' is at the lower level than 'nucleotide binding' in the ontology hierarchy, and therefore it is quite reasonable that the search results with 'atp binding' are exclusively included in the search results with 'nucleotide binding'. on the contrary, the id-matching search found only  <dig> interactions  with the query of 'nucleotide binding' and missed the remaining  <dig> interactions. but with the query of 'atp binding' the id-matching search found the same  <dig> interactions  as those found by the ontology-based search.

the search engine also allows the user to specify multiple conditions on the query protein. table  <dig> shows the search results by the two search methods when the user specifies two go terms, 'protein metabolic process'  and 'cytoplasm' , as conditions on the query protein. the ontology-based search found more interactions than the id-matching search for all queries in the table.

search results when two go terms are specified on the query protein, one for the biological process and another for the cellular component of the query protein.

the implementation of the ontology-based search engine is not complete yet and being expanded to support various query types. for example, it will allow the user to search interactions by specifying go terms both on the query and interaction partner proteins or by specifying multiple go terms on the interaction partner protein. figure  <dig> shows an interaction network between hepatitis c virus  and human proteins, which was constructed with the interaction data from a literature  <cit> . since the current search engine has the modified gödel number representation for human proteins only, it cannot find interaction partners in other species yet. however, the search engine will be expanded to retrieve interactions between human proteins and other types of proteins. the gene ontology annotations for the hcv proteins and human proteins in the network of figure  <dig> are available at  <cit> .

CONCLUSIONS
we have developed a new method for representing protein-protein interactions and the gene ontology  using modified gödel numbers. this representation is hidden from users but enables a search engine to efficiently find protein-protein interactions in a biologically meaningful way. a prototype of the search engine is available at  <cit> . the search engine can find all interactions involving the query protein in almost real-time since the interaction partners of the query protein can be found unambiguously by prime factorization of the modified gödel numbers representing the query protein and the search conditions.

the owl web ontology language  <cit>  was established, but there have been no databases of protein-protein interactions that can process queries like "find every protein p with function f" or "for every protein p with function f, find the interaction partners of p". to the best of our knowledge, the ontology-based search engine presented in this paper is the first one that can deal with such queries. this paper presented preliminary results of the ontology-based search engine, and it is being expanded into a full-featured search engine.

competing interests
the authors declare that they have no competing interests.

authors' contributions
byungkyu park conceived the idea of using modified gödel numbers, implemented the system and prepared the first draft of the manuscript. kyungsook han supervised the work and rewrote the manuscript.

