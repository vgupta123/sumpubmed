BACKGROUND
nonribosomal peptides  are bioactive compounds having various important biological functions . nrps are synthesized by large multi-enzymatic complexes called nonribosomal peptide synthetases  that are modularly organized  <cit> . each module is responsible for the incorporation of a specific monomer and is itself subdivided into domains catalysing specific enzymatic reactions.

until about fifteen years ago, the number of known nrps remained relatively low. however, many new molecules have been reported in the literature during the last years, associated with different biological activities and having a broad range of potential applications. this triggered a considerable interest among the research community in the nonribosomal synthesis pathway.

among potential applications of such studies, redesigning natural products by genetic engineering of nrpss opens an interesting new way in drug discovery  <cit> . indeed, modifying the nucleotide sequence of a natural nrps or combining modules of different nrpss could potentially yield a more efficient compound or a product with a new biological activity. however, generating a new peptide with a specific function from a modified nrps nucleic sequence requires a deep understanding of both the assembly line and the resulting products.

nrps enzymes have been well studied for several years. stachelhaus et al.  <cit>  discovered a specificity-conferring code of adenylation domains. with this discovery, several software programs have been developed  <cit>  to predict a produced peptide from the nrps protein sequence. with the increasing number of sequenced genomes, the number of hypothetical nrpss increases too. therefore, this raises the problem of verifying whether a peptide predicted to be produced by a nrps is already known or even corresponds to a part of a known peptide.

nrp molecules show several important particularities. the first one is related to the incorporation of non-proteinogenic amino acids. indeed, in addition to the twenty standard amino acids found in proteins, several hundreds of other residues can be encountered in final nrps products. incorporated residues can further undergo chemical modifications such as epimerisation or methylation. products of other biosynthesis pathways, like lipids or carbohydrates, can also be introduced. because of this composition diversity of nrps, we will use the term 'monomer' rather than 'amino acid' for nrp structural units. another interesting property of nrps is their structure. unlike regular proteins, the primary structure of nrps is not always linear but can also be cyclic , branched or even poly-cyclic. a computational treatment of these molecules appears therefore to be very different from standard proteins and requires a development of specific computational methods and resources.

there exist, however, very few computational resources specifically devoted to nrps and, until recently, there was no one providing a complete inventory of those. to fill this lack, we have developed the norine database  <cit>  which is the first resource entirely dedicated to nrps. it contains various annotations of each peptide such as the producing organism, bibliographic references, activities and, most importantly, its monomeric structure. the choice of representing nrp molecules by their monomeric rather than atomic structure reflects the way they are synthesized by successive addition of monomers. this structure is encoded by an undirected labeled graph representing its  structure. using undirected  edges is justified by the existence of nonpeptide bonds, appearing e.g. in cyclic or branched peptides, for which the orientation can not be naturally defined. furthermore, using directed edges could be restrictive for the analysis of peptide families: for example, lipopeptides containing an asparagine-serine dipeptide include the iturin family . tsuge et al.  <cit>  proposed a model in which iturin or mycosubtilin swapped nucleotide sequences encoding adenylation domains after a common ancestor became established. in this case, looking for a directed asparagine-serine dipeptide would miss mycosubtilin that has a serine-asparagine dipeptide.

similar to the search for sequence patterns in genomic and protein databases, norine raises the need to efficiently search for structural patterns. in the simplest case, one needs to identify if a given peptide is already present in the database. an even more important motivation is provided by the close relation between the structure and the function of the peptide. for example, minowa et al.  <cit>  identified motifs that are significantly related to some biological activities. therefore, a search for a structural pattern can help to assign a biological function to a peptide under study.

in some analyses, one needs to identify a part of the pattern, rather than the whole pattern, occurring in a given peptide. for example, the order of monomers in the resulting peptide can be changed with respect to the order of modules in the synthetase . for instance, in the biosynthesis of syringomycin  <cit> , the syrb <dig> gene responsible for the incorporation of the threonine monomer is located upstream of the syre gene in the genome, whereas threonine is the final monomer of the peptide. therefore, a search for the entire pattern predicted from the synthetase does not produce an output, while a search for a common substructure allows one to identify the peptide.

in this paper, we present an efficient method to identify a substructure of a given structural pattern that occurs in a given nrp, where both the pattern and the peptide are represented by undirected labeled graphs. from the computational viewpoint, this can be expressed as a variant of the maximum common subgraph  problem, which is np-complete  <cit>  i.e. is very unlikely to be solvable by an algorithm with a running time polynomially bounded on the graph size. another related np-complete problem, called graph motif problem  <cit> , is to look for a connected subgraph with the given set of labels. despite of the formal np-completeness of the underlying computation, our method works very efficiently on nrp graphs, taking advantage of their relatively small size and specific structural properties.

our method is based on the commonly used construction of a compatibility graph , also called association or product graph, in which the largest clique represents a solution to the mcs problem . here we adapt the method of cg to the structural search for nonribosomal peptides. we propose several ways to reduce the size of the cg, both in terms of number of nodes and edges. note that the size of the cg is a crucial factor for the efficiency of the whole method, as the clique search in the cg is the computationally most demanding step. we follow the idea of filtration by trying to detect, as early as possible, pairs of nodes that cannot be mapped one to the other by a graph morphism. this considerably reduces the size of the cg and leads to an efficient practical structural search for nonribosomal peptides. the presented algorithm has been implemented in norine. here we present some experimental results showing the efficiency of the method. we also provide some examples of using structural search for nonribosomal peptides in biological studies.

RESULTS
theory and algorithms
graph representation of nrp structure
we encode the monomeric structure of nrps by an undirected labeled graph. a peptide graph is a graph g = , where v is a set of nodes, e ⊆ v × v is a set of undirected edges i.e. pairs  with u, v in v, and f: v → m a labeling mapping of nodes. here nodes represent monomers, edges correspond to chemical bonds between monomers and labels are monomer names. monomer names are encoded by a set of simple rules inspired by the iupac nomenclature  <cit> : monomers are denoted by the classical three-letter code, possibly preceded by a symbol of a chemical modification. for example, nme-ala represents the n-methyl-alanine monomer. each node in a graph has a unique number in order to distinguish two nodes with the same label. figure  <dig> shows examples of peptide graphs.

a structural pattern is also represented by a graph. let p =  be a pattern graph, where vp is a set of nodes, ep ⊆ vp × vp a set of undirected edges and f: vp → l is the labeling of nodes. the main difference between graphs g and p is in the set of possible labels: m ⊂ l but l contains some additional labels. one of them is the "joker label", denoted 'x', that stands for any monomer. l also includes alternative labels denoted by lists of several monomers separated by the '/' symbol. the intended meaning is that any monomer of the list can occur at the corresponding position. finally, l also includes labels formed by the '*' symbol followed by a monomer. this means that any derivative of the monomer can be found at this position. figure  <dig> shows some examples of structural patterns. for example, in pattern p <dig>  *orn means that at this position, ornithine  or any of its derivatives, such oh-orn or fo-oh-orn, can be found.

computing a maximal common substructure using the compatibility graph
the construction of the compatibility graph  is often used in chemoinformatics to establish a structure mapping between two molecule graphs  <cit> . the cg encodes potential mappings between the two graphs. then, a search for the largest clique in the cg allows one to obtain the maximum common subgraph. first, we describe the classical cg construction.

compatibility graph
the classical definition of the cg of two graphs p and g is as follows:

• the set of nodes of cg is the cartesian product vp × v, i.e. a node u  of cg corresponds to the association of a pattern node u and a peptide node u'; in the case of  labeled nodes, only nodes with the same label get associated to form a node of the cg,

• nodes u  and v  are adjacent in the cg if and only if u ≠ v and u' ≠ v' and one of the following conditions holds:

  - u is adjacent to v in p and u' is adjacent to v' in g 

  - u is not adjacent to v in p and u' is not adjacent to v' in g 

for our purposes, we modify the classical cg definition to only require that associated nodes have compatible labels. if f  ∈ m , then any peptide node u' with f  = f  gets associated with u. if f  = 'x', then u gets associated with any node u' of g. finally, if f  is a "*-label", then u naturally gets associated with any node u' labeled by a derivative of the corresponding monomer.

clique computation
the cg represents all potential mappings between graphs p and g. recall that a clique in an undirected graph is a subset of nodes such that every two nodes of this subset are connected by an edge. each clique in the cg corresponds to a common substructure of graphs p and g, whose size  is equal to that of the corresponding clique. consequently, searching for a clique of a given size k  is equivalent to searching for a common subgraph of size k. in figure  <dig>  nodes a, b and c form a 3-clique, which corresponds to the occurrence of the whole pattern in the peptide. the general clique detection problem i.e. finding whether there is a k-clique in a graph is np-complete  <cit> .

refining cg building rules
our goal is to detect efficiently and exactly whether a part  of a size k of a pattern graph p is a substructure of a peptide graph g. we assume that parameter k is specified by the user. if k is equal to the size of the pattern graph, the problem amounts to checking if p is a substructure of g. in other words, the searched pattern p occurs in the tested peptide g. the notion of "substructure" needs to be made precise. in the above construction of cg, a clique corresponds to a common induced subgraph of both p and g . in our case, we want to allow a node of g to have more incident edges than the associated node of p. for example, we want pattern p <dig> from figure  <dig> to match the peptide graph g <dig>  although there is no edge between the first and the last node in p <dig> while there is one between the corresponding nodes in g <dig>  in mathematical terms, we are looking for a subset of k nodes in p such that the corresponding induced subgraph of p is connected and occurs as a  subgraph of g. this asymmetry between p and g prevents using standard solutions for computing common substructures  and raises the need to develop an efficient method appropriate for our setting. for this purpose, we modify the above solution based on clique search in the compatibility graph.

we first modify the definition of compatibility graph, taking into account that if two nodes in g are connected by an edge, the associated nodes in p may or may not be connected. since the size of the cg  is the crucial factor for efficiency, we need to make sure to keep this size reduced and filter out those node associations which cannot participate in the mapping. even prior to constructing the cg, we verify simple properties that prevent a common substructure of size k to exist. first, the size of g must be greater than or equal to k. furthermore, at least k nodes of the pattern must be associated to some nodes of the peptide graph. only if these two simple tests are verified, we proceed to the construction of the cg and searching for a k-clique.

cg nodes
in order to decrease the number of nodes in the cg, we associate a node u' of g and a node u of p only if the degree of u' is greater than or equal to the degree of u. this is justified by the above definition of common substructure of p in g.

cg edges
according to our definition of common substructure, we have to modify the above definition of an edge in the cg. conditions  and  are replaced by the following:

  • nodes u  and v  are adjacent in the cg if and only if u ≠ v and u' ≠ v' and u' is adjacent to v' in g provided that u is adjacent to v in p 

in other words, if two nodes in the pattern graph are connected, then the corresponding nodes in the peptide graph must be connected too, but the opposite is not necessarily true. with this definition we achieve that if two nodes u and v are not connected in the pattern graph p, their corresponding nodes u' and v' in the peptide graph g may or may not be connected, in both cases the corresponding nodes u  and v  in the cg are connected. however, this rule leads to an increase of the number of edges in the cg. indeed, according to condition , the cg has an egde between u  and v  even if u and v are not connected in p while u' and v' are connected in g. the classical cg constructed according to conditions  and  would not include an edge in this case. we then introduce a stronger rule in order to reduce the number of edges and to make the search for a k-clique efficient. the rule is based on the computation of elementary paths.

an elementary path  in a graph is a path without loops. for each node in p and g, we compute the size of all eps from this node to all the others. since we are interested in connected subgraphs of size k, the ep size in such subgraphs is limited to k -  <dig> . for a graph g, we store the ep sizes in a matrix epsg, where the epsg  contains the list of all ep sizes between the nodes i and j.

we then define an edge between u  and v  in the cg if and only if the ep size list of  in p  is included in the ep size list of  in g. this means that the distances between two nodes in p must be included in the respective distances in g in order for an edge in the cg to exist. in other words, the monomers of the eps beteeen u and v in p and between u' and v' in g are not directly compared but the distances of possible paths in p must be also distances of possible paths in g. this new rule decreases the number of edges in the cg without losing any information on a possible occurrence of the pattern.

new cg building rules: summary
we conclude this section by summarizing the cg building rules for a pattern graph p and a peptide graph g:


                  • each cg node u  corresponds to the association of a node u of p and a node u' of g such that deg ≤ deg and f  is compatible with f .  
               


                  • two nodes u  and v  are adjacent in the cg if and only if u ≠ v and u' ≠ v' and epsp  ⊆ epsg . 
               

search for a k-clique
the presence of a k-clique in the cg implies that there is an induced subgraph of p that is a subgraph of g. in the case when k is smaller than the size of p, we have to verify, in addition, that the corresponding subgraph is connected in p .

to search for a k-clique, we use a branch and bound algorithm . it is essentially an exhaustive algorithm that explores the depth-search tree of the graph. for a node of depth h in the tree, we try to extend the current clique of size h with a new node in order to obtain a clique of size h +  <dig>  the tree is pruned by not exploring the branches with the length smaller than k. once a k-clique is found, the search terminates and the pattern occurrence is output.

another heuristic we use to speed up the clique search is based on the fact that once we identified more than  nodes of pattern that do not participate in the clique, the search for a k-clique can be stopped. in the case of search for the entire pattern , each pattern node has to contribute to the clique. for example, in figure  <dig> with k =  <dig> , node  <dig> of the pattern participates in two nodes a and b of the graph, which implies that one of these two nodes must belong to the clique. if a k-clique containing one of these two nodes is not found, the search is stopped. finally, another speeding heuristics is to start the search with cg nodes that correspond to pattern nodes of maximal degree and have therefore most chances to lead to a fast detection of non-occurrence of the pattern. applying all these heuristics leads to a practically fast and exact clique search, as confirmed by experimental results provided in the next section.

testing
case study of structural properties of nrps
we studied the distribution of patterns of size  <dig> in all peptides of the database. the results are shown in figure  <dig>  they show that the most frequent 4-pattern is the linear pattern. we also computed the distribution of the number of peptide graphs depending on their size. the results are shown in figure  <dig>  more than 70% of peptides have at least seven monomers. this means that a search for a pattern containing seven 'x' labels triggers the construction of the cg for more than 70% of peptides of the norine database.

efficiency of the method
in order to test the efficiency of our method, we compared the number of nodes and edges in the cgs obtained with the classical and the new building rules on different examples in the case of search for an entire pattern. the results are shown in table  <dig>  in the case of matching p <dig> against g <dig>  the cg constructed with modified rules has no edges because the ep sizes of the pattern are not included in the corresponding ep sizes of the peptide graph. indeed, p <dig> is cyclic and each pair of nodes is connected by two eps whereas g <dig> is linear and there is only one ep for each pair of nodes. therefore, our method outputs the answer without looking for a clique. in the last example corresponding to the linear pattern of  <dig> 'x' against alamethicin f <dig>  the difference in the number of nodes  is due to the additional condition on the degree of associated nodes. moreover, in this example, our version of cg has about  <dig> times less edges than the cg constructed with the classical rules. these examples illustrate that our method produces a compact compatibility graph, suitable for an efficient clique search.

patterns p1–p <dig> and peptides g1–g <dig> refer to figure  <dig>  in all examples, k is equal to the pattern size. in columns  <dig> and  <dig>  data shown in regular and bold font concern respectively the classical and modified cg building rules.

 linear pattern of size  <dig> corresponding to alamethicin f <dig> without the last monomer

 alamethicin f <dig> 

 linear pattern of  <dig> 'x' monomers

in order to validate this speed-up in running time, we measured the search time for different complete patterns in the norine database. the results are shown in figure  <dig>  the first observation is that the number of results is often smaller with the classical rules. this is due to the case when the pattern graph has a number of edges different from the peptide graph. in example  <dig>  we search for peptides containing any pair of monomers which is the case for all  <dig> peptides of norine. however, only  <dig> peptides are output if the classical building rules are used. there are  <dig> cyclic dipeptides in norine. this is due to a special case where two nodes of a peptide are connected by two edges, which corresponds to a cyclisation between the two monomers. this special case cannot be detected with the classical building rules but is taken into account by our method.

for the linear pattern of size  <dig> , which is contained in more than 70% of the database peptides, the classical rules show a 8-fold slow-down of the running time compared to the new rules. for a linear pattern composed of  <dig> 'x' , the classical method required  <dig> hours to produce the result whereas our method took less than  <dig> ms. example  <dig> is the search for a pattern composed of  <dig> 'x', the size of the largest peptide of the database. about  <dig> minutes were needed for the classical method to obtain the result whereas our method took only about  <dig> ms. example  <dig> represents a negative test as this pattern does not occur in norine. in this example, the classical method did not terminate in  <dig> hours, whereas our method output the result in  <dig> ms.

these experiments illustrate the effficiency and adequacy of our method for the search for structural patterns in nrps.

examples of practical applications
in this part, we give some examples of using structural pattern matching of nrps in biological studies.

structural features
structural search can allow one to identify a structural motif common to peptides of a given family. as an example, a search for a cyclic 8-node pattern composed of seven 'x' and a fatty acid moiety , with k =  <dig>  outputs the peptides of the iturin family , surfactins and lichenysins. therefore, this pattern represents a common structural feature of this family.

another example is the search for a pattern associated with a biological activity. for example, pattern p <dig> occurs in g <dig> that represents ornibactin. ornibactin is a siderophore, an iron-chelating molecule. this type of molecule needs bidendate functions that can ensure a six-fold coordination of the ferric iron. ornithine and its derivatives can harbour this function. a search for complete pattern p <dig> returns a list of six siderophore peptides such as ornibactin, pyoverdin or foroxymithine. a search for the pattern r-co_*oh-orn_*asp_*ser_*orn derived from ornibactin, with k =  <dig>  returns a list of  <dig> peptides. among them  <dig> peptides are annotated as siderophores. this example illustrates that structure-function relationships can also be elucidated by searching for a common substructure between a pattern derived from a peptide characterizing the function and the other peptides of the database.

product identification
another application of structural pattern matching is the search for a predicted peptide. several studies  start with searching for putative nrps genes within a genome and predicting the produced peptide out of this sequence. such a prediction can result in an undetermined monomer or several possible monomers at some positions. the possibility of using 'x' or '/' labels in the structural pattern allows for a look-up for the predicted peptide in the database in order to find out whether the peptide has been discovered before, possibly in another species. to give a concrete example, we submitted six nrps proteins found in uniprotkb database  <cit>   to the nrpspredictor <cit>  and obtained predicted peptides. by combining them, we obtained the structural pattern x_np_x_np_np_np_x_np_*leu_x_*phe/*trp/*tyr_*leu_np, where np stands for non-polar amino acids and corresponds to *val/*ile/*leu/*abu/*iva in norine notation. a search for this complete pattern in norine resulted in only one peptide, bt <dig>  that is consistent with the bibliographic data of uniprotkb. this example illustrates that the structural search can help associating a product with a set of nonribosomal synthetases.

analysis of a putative peptide
from the analysis of protein sequence similarity, some proteins can be predicted as putative nrpss. examples of such predictions can be found in the uniprotkb database. even though the produced peptide has not been identified, one can infer some properties of a putative nrps product using the structural search. an example can be provided by the putative nrps  from uniprotkb found in pseudomonas entomophila. by studying the sequence of this synthetase, four modules can be predicted. pattern val_leu_ser_ile is obtained using the nrpspredictor. this pattern occurs in the lipopeptide putisolvin i stored in norine. the search for a more general pattern np_np_ser_np gives three results, putisolvin i, ii and pfl <dig>  that are all lipopeptides. one can observe that putisolvin i is produced by pseudomonas putida, the same genus of bacteria than . this bacteria genus is known to produce various cyclic lipopeptides  <cit> . by analysing the gene environment of , we found another gene coding for a putative nrps , which probably produces the beginning of the peptide. a condensation domain characteristic of lipopeptide production can be predicted at the begining of the protein. this domain binds the lipid moiety to the peptide part. this is another clue for lipopeptide production. nrpspredictor outputs the octapeptide x_np_np_x_np_np_x_ser which matches no peptide of norine. however, the final product would be composed of  <dig> monomers and a lipid moiety like putisolvin i. in addition, the composition of the predicted peptide does not match any peptide in norine but is close to the composition of lipopeptides. indeed, if we compare the monomeric composition of the predicted peptide with putisolvin i, both compositions are similar. thus, all data converge to a lipopeptide production. this example illustrates that structural pattern search can assist the biological identification of a predicted peptide by inferring its properties.

CONCLUSIONS
nonribosomal peptides are important bioactive compounds that have various important biological activities and are increasingly studied. with this motivation, we developed the norine database  <cit>  that is the first computational resource entirely devoted to nrps. all peptides stored in norine are annotated with their monomeric  structure encoded by undirected labeled graphs.

in this paper, we presented an efficient dedicated method to search for a structural pattern in the database. we refined the cg building rules previously used in the literature and improved them to adapt to our problem. the main idea of refinement is to use the information on elementary path sizes and on the node degrees in order to decrease the number of nodes and especially the number of edges in the resulting cg. this, in turn, leads to a considerable speed-up in the search for a clique in the cg, which is the final step in the identification of a pattern occurrence.

as a result, a search for a pattern in the norine database currently containing  <dig> peptide structures takes typically less than one second. note that the proposed method is exact, i.e. outputs precisely all the peptides that contain the pattern, without any error allowed. note also that the efficiency of the method can be further increased by pre-computing the matrices of ep sizes for all stored peptides. this would obviously improve the performance of querying the database with different patterns.

searching for a structural pattern in the database can be used in different biological studies. for example, it can help to identify members of a peptide family that share common structural properties. it can also help to identify a predicted peptide by searching for it in the norine database in case the peptide has been discovered before in other species. furthermore, a search for a structural pattern can provide new insights into peptide features and help to isolate this peptide experimentally. finally, it can help to elucidate the relationship between structure and function by searching for patterns occurring in peptides that share a common biological activity.

an obvious weakness of the method is that in general it might be unable to identify a common structure if the correspondence is not exact, i.e. some monomers "get replaced" by others , or do not have their counterparts at all. therefore, an interesting direction for future research would be to extend the method to an "error-tolerant" pattern matching dealing with possible deletions, insertions or substitutions of monomers.

