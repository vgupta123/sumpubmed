BACKGROUND
reconstruction of population history from genetic data often requires computationally intensive markov chain monte carlo strategies to estimate bayesian posterior or likelihood surfaces . tools that perform this task are sometimes called “genealogy samplers”
 <cit>  because they construct many quasi-independent samples of the genealogy describing the ancestry of the sequences. genealogy samplers have become essential components of modern population genetic analysis, with the most popular tools, mrbayes
 <cit> , beast
 <cit> , ima
 <cit> , and lamarc
 <cit>  accumulating some  <dig>  citations over the last decade. while these tools have rapidly increased in sophistication, with the exception of lamarc they share a common limitation: they cannot be used to accurately analyze sequences with recombination. this restriction means that analyses cannot be carried out on most alignments of nuclear data, and as a result typical investigations are limited to mitochondria and non-recombining viruses. while lamarc can be used on recombining sequences, analyses are impeded by slow performance and single runs may take several days or weeks to complete.

several challenges face population genetics analysis with recombining data. when sequences recombine, their ancestry cannot be described by a simple tree or genealogy, and instead must be represented as an ancestral recombination graph . all but the simplest of args are difficult to visualize, and few resources are available for drawing, reading, and simulating args. additionally, the space of likely args supported by a given alignment is often much larger than the space of trees, hence mcmc algorithms likely will take longer to converge. when satisfactory convergence is reached, few tools exist to extract meaningful information from args.

despite these challenges, the presence of recombination also facilitates some aspects of analysis. because nearby sites may have partially independent histories more power may exist to infer population parameters. similarly, evolutionary forces such as selection may create detectable genealogical features that would be obscured if all sites shared the same tree. for instance, a selective sweep may shorten the time to most recent common ancestor  in a given region, but such a shortening may be obscured if the region is completely linked to regions affected by different forces. inference of complex demography may also be aided – for example, periods of admixture with other populations may cause some regions to have a relatively ancient tmrca, but such features can only exist when recombinations allow some genomic regions to have an alternative history.

acg  is a graphical desktop application that aims to overcome the challenges inherent in arg inference, and to provide rapid and informative coalescent analysis of recombinant genetic data. it takes as input an alignment of homologous nucleotide sequences, and executes a bayesian markov chain monte carlo algorithm to infer the posterior distribution of parameters such as population size, recombination rate, transition to transversion ratio, as well as the history of the sequences represented by an arg. importantly, acg computes the “full” likelihood of the arg using a modified felsenstein pruning algorithm
 <cit> , not an ad-hoc or composite likelihood. as with other genealogy samplers, the raw output of the program is a collection of parameters sampled from the markov chain. acg also contains many data collection tools and utilities designed to simplify the analysis of the sampled states.

implementation
yang & rannala
 <cit>  described a method for estimating the posterior distribution of a phylogenetic tree conditional on an alignment of genetic data using a markov chain monte carlo  approach. the method involves proposing small, successive changes in the structure of the tree and evaluating the likelihood that the tree produced the observed data using a felsenstein pruning algorithm
 <cit> . proposed changes are accepted or rejected according to the metropolis-hastings criterion, which is an increasing function of the ratio of the likelihood of the proposed vs. current state. while originally proposed as a method of tree estimation, minor modifications of the algorithm allow for inference of additional model parameters, such as properties of the nucleotide substitution model, lineage birth and death rates , or population size . the basic approach described has experienced relatively wide adoption, with software tools such as mrbayes
 <cit> , lamarc
 <cit> , and beast
 <cit> , applying, extending, and optimizing the algorithm. acg continues to build upon this fundamental algorithm and, in a manner similar to the tools mentioned above, estimates the probability of an evolutionary model conditional on observation of an alignment of homologous nucleotide sequences. in mathematical terms, acg produces an estimate of

  prm/d=prd/mprm/prd 

where d is the input alignment and m is an evolutionary model containing parameters that are estimated from the data. at minimum, the model includes a description of how nucleotide sequences change over time , a structure describing the ancestral relationships among the samples, and a function describing population size. each of these sub-models may in turn encapsulate one or more parameters that are estimated from the data. for instance, the timura-nei  <dig> model of nucleotide substitution involves two parameters that affect the transition-to-transversion ratio in addition to a vector describing stationary state nucleotide frequencies. as in lamarc, the ancestry of the samples is represented by an ancestral recombination graph , which is estimated from the data simultaneously with other model parameters.

to estimate the probability of the model given the data, acg constructs and executes a markov chain whose stationary state is the desired distribution . generation of new states involves proposing a new value for a selected parameter, calculating the likelihood of the newly proposed state as well as the hastings ratio associated with the proposal, and accepting or rejecting the state based on the metropolis-hastings-green criterion
 <cit> . a typical run involves repeating this procedure for some tens of millions of steps. states are sampled periodically and properties of model parameters are recorded by a variety of data collection utilities. if the chain has reached stationarity, the sampled parameters may be assumed to be correlated draws from the posterior density pr{model | data}.

while the above scheme is similar to that used in other genealogy samplers, several aspects of the implementation are worthy of note. most importantly, acg implements data structures and mcmc proposal kernels that allow args to be sampled from the data, where the probability of a particular arg being sampled is proportional to its full likelihood under the data and some model of nucleotide substitution. currently, the felsenstein ' <dig>  and timura-nei ' <dig>  substitution models are supported. seven different proposal kernels operate on args, these include some previously described and two novel kernels. arg proposal kernels are detailed in the additional file
1: appendix a: arg proposal kernels.

args are a complex and rich source of information regarding the history of populations, and acg provides several novel features that aid in interpreting the collection of args sampled by the markov chain. first, acg by default tracks many of the bulk properties of args, such as the number of recombination breakpoints and height of the deepest accessible nodes. in addition, acg records the locations of all recombination breakpoints as well as the tmrca across the sequence. acg also provides utilities to examine the consensus tree at individual sites. these consensus trees are familiar, non-recombining trees ancestral to a single site only. such trees may be useful when the ancestry in a small region is of particular interest, or when several such regions are to be compared. further, acg provides a companion utility  that is capable of examining a single arg and collecting information from it, such as the positions and heights of all recombination breakpoints, a list of all of the marginal trees contained in the arg, or a plot of the tmrca across the length of the sequence subtended by the arg.

users may interact with acg in several ways. acg features a simple command-line interface suitable for batch processing, but also provides a rich graphical user interface . the gui allows users to both construct an analysis by selecting parameters, proposal kernels, and model priors, as well as to observe selected parameters and likelihoods as they change in real time as the chain progresses. observed parameters and likelihoods can be viewed in trace or histogram form, and allow for rapid assessment of mcmc characteristics and convergence. input files may also be saved and reloaded from within the gui, and saved input can be executed from the command line.

a primary design goal of acg is efficient computational performance and several techniques are used to speed calculations. first, every mcmc state involves calculation of new likelihoods followed by acceptance of rejection of the proposed state. if the state is accepted, the entire proposed proposed state must be moved to the current state before the next step can be initiated. in contrast to some other algorithms, acg does not perform a full copy of the data and instead uses a reference-swapping technique to move the information to the desired location. because the state data may be quite large and must be updated with every mcmc step, reference swapping results in a significant performance increase compared to copying. a second optimization technique involves identification of all identical alignment columns and computation of the data likelihood only once for each unique column. while many implementations involve some degree of alignment column ‘aliasing’, acg performs this aliasing at every node where sites coalesce, again substantially reducing the number of likelihood calculations performed. finally, acg tracks which arg nodes are affected by various proposals, and recomputes likelihoods only for the nodes and sites ranges affected.

RESULTS
resolution of individual recombination breakpoints in space and time
to demonstrate some of the unique features of acg, we present a small analysis based on simulation data. to begin, an arg was simulated with  <dig> sequences of length  <dig>  sites under the standard neutral coalescent model with the population size parameter θ = 2nμ=  <dig>  and recombination parameter ρ = 2nr =  <dig> , using the argutils package included with acg . the resulting arg contained a total of  <dig> recombination breakpoints. all marginal trees were extracted again using argutils, and nucleotide sequences were simulated along each tree using seq-gen <cit> , using the f <dig> model of evolution. these sequences were then used as input to a standard acg run. the run was conducted for  <dig> , <dig> mcmc steps using a single chain, and completed in  <dig> minutes. examination of parameter value traces suggested convergence in fewer than  <dig> , <dig> mcmc steps for all parameters.

a novel feature of acg is the ability to determine the locations of individual recombination breakpoints not only along the length of the sequence, but also in time. as args are sampled from the running chain, recombination breakpoints are collected, and both the site of splitting as well as the height of the node containing the recombination are retained. these values are then added to a two-dimensional histogram, with one axis representing position along the sequence, and the other representing time. figure
 <dig> demonstrates that this method can yield an informative visualization of the locations of recombination breakpoints, with clusters of high density indicating that a high proportion of args sampled bore a recombination near a particular location. the breadth and height of such clusters aid in quantifying the degree of uncertainty, with broad or shallow distributions indicating relatively low confidence. because of the inclusion of the time dimension, this method can resolve multiple locations that occur at or near the same position on the sequence, but at different times, potentially aiding in the investigation of recombination hotspots where multiple recombinations might otherwise obscure one another.

the presence of recombinations may also cause the tmrca to vary across the length of the sequence. by sampling args and assessing the tmrca at multiple positions acg can quantify how tmrca changes across a sequence. figure
 <dig> demonstrates such a plot, indicating substantial variation in tmrca in this data set, as well as very close correspondence in inferred tmrca and the true tmrca obtained from the simulated arg.

to illustrate the ability of acg to infer the sequence positions of recombination breakpoints, we created another dataset using the same procedure as above and collected the sequence positions of all recombinations,  <dig> in total. we again simulated sequence data on the arg and used the sequence data as input to acg. we conducted a single-chain acg run for 10m steps, inferring the arg, the transition-transversion ratio, population size and recombination rate from the data. using the “breakpoint location logger” the sequence positions of all inferred recombination breakpoints were collected . acg correctly identified three recombinations , but found no evidence for the two remaining recombinations . inspection of the arg  reveals that the two undetected recombinations each belong to a different class that are impossible to detect from sequence data alone. the branches created by the recombination at position  <dig>  coalesce with one another before coalescing with any other branch, making the marginal trees on either side of the breakpoint identical. these types of recombinations are “trivial” in the sense that they have no impact on the topology of any tree in the arg. similarly, the recombination at position  <dig>  does not affect any sites ancestral to the sampled sequences. the branch it affects is ancestral to another recombination at site  <dig> , and the branch ‘contains’ only sites from  <dig> - <dig> . thus, the split at position  <dig>  does not affect any data in the sequences that were sampled.

empirical example
to demonstrate acg’s utility on empirical alignments of recombining sequence data we investigate the history of a  <dig> mb portion of the human x chromosome. the data set is composed of  <dig> x chromosome sequences from a worldwide sample of males obtained from the complete genomics diversity panel, and hence is unambiguously phased . summary information for the twelve individuals is listed in table
 <dig>  the region spans chromosomal locations xp <dig>  – xp <dig> , and thus is located on the proximal region of the short arm. refseq annotations indicate  <dig> genes in the region investigated.

 <dig> mb is too large a region for a single run of acg, hence the region was divided into  <dig> kb fragments, with  <dig> kb overlap between adjacent fragments, and acg was run on each fragment independently. initially, runs were conducted for  <dig> , <dig> mcmc steps using  <dig> chains in a metropolis-coupled scheme. the first 50% of steps were discarded as burn-in, and independence was assessed by comparing the means and standard deviations of the data likelihood trace between adjacent quartiles of the non-burn-in portion of the run. some 20% of chains did not reach convergence in the initial run, for these chains acg was run again using the maximally likely arg found during the initial run as the starting arg for the new run. this procedure was repeated until all chains reached convergence. typical run time was 3– <dig> hours on a  <dig>  ghz intel xeon quad-core processor.

figure
 <dig> demonstrates the broad chromosomal features that can be assessed using acg. for instance, the structure of the marginal tmrca  is seen to vary widely, with tracts of relatively recent tmrca  and regions of very deep ancestry, in some cases extending beyond  <dig>  subs./site. this type of analysis may have implications for the study of haplotype structure. for instance, regions of shallow tmrca appear to be relatively broad, suggesting that fewer recombinations have occurred, and thus that haplotype blocks will likely extend over relatively long distances. conversely, in areas with especially deep tmrca the ancestry are likely to contain a greater total number of recombinations, reducing the length of haplotype blocks. studies that utilize haplotype structure to infer recent selection , for instance, may benefit from this additional, relatively fine-grained source of information. overall, both deep and shallow regions may indicate areas of evolutionary interest, such as ancient admixture or recent selective sweeps, respectively.

figure
 <dig> also demonstrates that acg can be used to assess recombination rate and the number of recombination breakpoints in a specified region. currently, acg assumes that recombination rate is constant across sites and over time, although it was estimated independently for each 50kb fragment. this functionality is similar to that provided by tools such as ldhat
 <cit> , but is likely to be more accurate than composite-likelihood based methods for several reasons. first, acg considers the “full” likelihood of the arg, not a composite of pairwise likelihoods. additionally, acg employs more flexible models of nucleotide substitution that co-estimate base frequencies and transition/transversion parameters along with other likelihood features. finally, acg provides not a point estimate of recombination rate but an estimate of the posterior distribution, allowing an appropriate characterization of the degree of uncertainty in the estimated parameter.

performance
a primary design goal of acg is high computational performance. to compare the performance of acg to that of the only other recombination aware genealogy sampler, lamarc
 <cit> ,  <dig> data sets each including  <dig> sequences of length 50kb were generated using the following procedure. first, args were simulated using the argutils package included with acg with θ= <dig>  and ρ= <dig>  args were decomposed into marginal trees also using argutils, from which nucleotide sequences were generated with seq-gen <cit>  using the f <dig> model of evolution. for each of the ten input alignments both acg and lamarc were run for exactly one hour of real time, and both tools estimated θ, ρ, the transition- to-transversion ratio, as well as the structure of the arg. log files of parameter values and the likelihood of the data conditional on the arg were produced for all runs with sampling every  <dig> steps from acg and every  <dig> steps from lamarc. the program tracer  was then used to examine the log files and calculate the effective sample size . to assess convergence we examined the likelihood of the data conditional on the arg .

in several respects acg significantly outperformed lamarc. in raw number of mcmc states processed acg was over 100-fold faster than lamarc, computing on average  <dig> × <dig> total states, while lamarc computed  <dig> × <dig>  in terms of effective sample size  for the data likelihood, the mean for acg was  <dig>  indicating satisfactory convergence, while for lamarc the mean was  <dig> . similarly, esss for the scaled population size parameter θ were on average  <dig>  for acg and  <dig>  for lamarc. in addition, acg's memory requirements are typically modest, and 512mb per chain is sufficient for typical data sets. finally, we note that these results used only a single chain. because acg can execute multiple heated chains simultaneously the performance margin over lamarc is likely to be further increased when multiple cpu cores are available.

validation
algorithms with the complexity and sensitivity of acg are prone to error. here, we present several analyses demonstrating that acg performs as expected. perhaps the most sensitive component of the analysis is ensuring that the distribution of args sampled in the absence of input data matches the theoretical distribution described by neutral coalescent theory. to assess the properties of args sampled by acg in the absence of data to those generated by neutral simulation, we held population size constant at  <dig>  and ran acg for  <dig> × <dig> mcmc steps, recording the height of the root node every  <dig> steps. figure
 <dig> demonstrates that args sampled from the mcmc are very similar to those generated under direct  simulation in terms of both the distribution of the number of recombination breakpoints as well as the distribution of height of the deepest node.

as an additional test of arg correctness we note that the distribution of non-recombining trees sampled from a single site should be identical to standard neutral coalescent trees, because the presence of recombinations elsewhere along the sequence should not affect any property of trees sampled. we therefore examined the distribution of tmrca at trees sampled from a single site by the mcmc, for varying levels of recombination, and compared these distributions to those obtained from direct backward simulation. the distributions show close correspondence, and no deviation associated with increasing levels of recombination  is apparent.

another potential source of error stems from the accuracy of the likelihood computations, in particular the likelihood of the data conditional on the arg . to ensure that acg computes the correct likelihood at every mcmc step, test classes were implemented that emit marginal trees and their associated likelihoods periodically during a run. utility scripts were developed to read these files and input each tree into an external program capable of computing the likelihood of an alignment given a tree, in this case the dnamlk tool distributed with the phylip  package
 <cit> . when acg functions as expected, the sum of the log likelihoods for each marginal tree should be equal to the full log likelihood of the arg. this procedure has been conducted numerous times during development and has been used to identify and correct data likelihood calculation errors.

CONCLUSIONS
bayesian genealogy samplers provide a means of inferring a wide variety of population parameters from genetic data. acg builds upon techniques developed in earlier samplers, and significantly extends the range of input data that can be considered as well as the types of data that can be collected. most importantly, acg’s use of an arg to represent the ancestry of the sequences enables the examination of alignments of nuclear dna, opening new avenues of investigation for common alignments of sequence data . while args present considerable inferential challenges compared to non-recombining trees, acg provides several utilities for ameliorating these difficulties and extracting useful information from the cloud of args sampled. these utilities include estimation of tmrca along the sequence, locations of recombination breakpoints in space and time, and construction of consensus trees at particular sites of interest. in addition to these tools, the argutils utility included with acg provides a number of convenient functions, including breaking an arg into marginal trees, extracting a single tree from a specific site, enumerating recombination positions from an arg, and simulating neutral args.

while acg shares some features with lamarc, including the use of an arg to represent ancestral relationships, several important features distinguish the programs. as demonstrated above, acg is roughly 100-fold faster than lamarc. additionally, acg can estimate the shapes of marginal trees at specific sites, the locations of recombination breakpoints along the sequence as well as in time, and the time to most recent common ancestor along the sequence. acg can also import data from the. vcf file format commonly used in next-generation sequencing projects. lamarc, in contrast, has several features acg does not, most significantly the ability to model multiple populations and the migration rates between them.

finally, acg offers a convenient graphical interface that allows users to not only construct an analysis, but also to observe the evolution of various parameters and likelihoods in trace or histogram form in real time, allowing researchers to monitor many features of the analysis as it unfolds.

availability and requirements
acg is freely available for academic use and will operate on any platform with a java virtual machine version  <dig>  or higher installed.

project name: acg

homepage:
http://arup.utah.edu/acg

operating systems: platform independent

programming language: java 

requirements: java  <dig>  or higher

license: copyright  <dig> brendan o’fallon, freely available for academic use

abbreviation
arg: ancestral recombination graph.

competing interests
the author declares that he have no competing interests.

supplementary material
additional file 1
appendix a. arg proposal kernels.

click here for file

 acknowledgements
i would like to thank the members of the felsenstein/kuhner lab, especially mary kuhner, for help understanding the complexities of recombination. funding was provided by nsf postdoctoral research fellowship dbi- <dig>  an nih genome training grant, and the arup institute for clinical and experimental pathology.
