BACKGROUND
with a rapidly growing database of completed genomes and consequential improvements to the reconstruction of deep and broad phylogenetic relationships, it has become possible to consider the molecular origins of many complex cellular systems. such analyses can reveal deep relationships between cellular functions, identify lineage-specific features and uncover evolutionary mechanisms  <cit> , and are important in the identification of, for example, pathogen-associated gene products, with potential for therapeutic intervention, as well as in attempts to understand how such systems arose. further, falling costs of nucleotide sequencing are providing opportunities to generate genome sequences from even hard to culture organisms, making analysis of function in these taxa possible through comparison with tractable organisms. in short, the need to present comparative data is highly pressing and likely to remain an issue for some time.

while it is now comparatively trivial to generate vast datasets containing 100s to 1000s of query results using blast, hmmer and other sequence-based algorithms  <cit>  these data constitute essentially gene lists, which only have value when processed and presented coherently  <cit> . the major biological added value within such analyses is the ability to rapidly compare the distributions of genes between multiple biological processes, i.e. protein complexes and pathways, and also across many taxa. this is quite challenging as these datasets can contain may hundreds/thousands of gene calls, and unless these data are represented graphically and in an easily comprehended manner, patterns are difficult to observe. in particular, spreadsheets do not lend themselves to browsing and fragmenting datasets into subgroups to reduce data complexity often removes much valuable comparative information. production of comparison figures from developing datasets  are invaluable during dataset production, and even for making decisions and developing hypotheses, but manual production of figures on the fly is unfeasible.

to address these needs we devised the coulson plot, a matrix of colorized pie charts and which displays information in a clustered format, together with hierarchical taxonomic labels and a key to individual gene products. this plot we, and others, have used in multiple publications and which we have found to be highly useful and accessible to readers of these reports  <cit> . however, the manual construction of these plots is time consuming and, with hundreds of elements, error prone, and which precludes on-the-fly plots and possibly wider adoption of the format. hence, to facilitate generic/automated production and adoption of the plot we developed a platform-independent application, the coulson plot generator , to draw coulson plots from structured data that uses standard spreadsheet file formats as input. cpg should be accessible to the vast majority of workers with only rudimentary computing skills and requires minimal post-plot manipulations to generate publication quality plots of considerable complexity.

implementation
graphical concept
we considered many of the formats commonly used in the published literature for the display of comparative genomic data, and found these frequently too complex or inelegant for the presentation of data in a manner that retains as much biological information as possible. specifically, simple spreadsheets or dot plots are either difficult to read or lose information concerning complexes, which is especially critical to understanding evolutionary processes. in many instances dot blots also become very large, with moire effects and other issues emerging. hence we designed a more sophisticated format that retains functional groupings, provides colors as keys to taxonomic relationships and also provides a key to subunit identity . we consider that the coulson format retains more information than dot plots and provides this in an attractive and easy to comprehend manner.

algorithm design
originally, we generated coulson plots using perl with individual data structures for each diagram, with individual programming for each diagram, requiring considerable time and programming expertise to produce a basic figure  <cit> . in addition this is also potentially an error prone process. a coulson plot generator  application was written as an open source, stand alone program developed in java using eclipse  to execute on any machine running a java virtual machine . cpg takes as input a comma separated  text file of binary data recording subunit occupancy in multiple systems . systems, e.g. multi-protein complexes, are labelled in the first column, with subunits in the second. then the data itself  begins in subsequent columns. use of either ‘+’ and ‘-’ or ‘1’ and ‘0’ for data occupancy are supported. only one protein name is required per list of subunits, and column one is occupied only at the position of the first subunit of each group. the input table uses the four top rows and two columns for labeling. kingdom or supergroup names  <cit>  fall in rows one and two, while species names fall on row three, which must all be occupied and no gaps are permitted. the fourth row can be left unused, omitted completely or utilised for additional taxonomic annotation if desired. the input table uses the first two columns for labeling, with a protein/entity name in column one, and subunit names in column two. only one protein name is required per list of subunits, and column one is occupied only at the position of the first subunit.

cpg parses the input file and breaks it up into an array of tab-delimited strings. these are processed and displayed as a table, where diagram settings can then be selected . for creating the figure, the cpg algorithm takes each row, representing the occupancy data across species for one single subunit of a protein and tracks which protein/entity the subunit belongs to. when all the subunits have been collected for a protein/entity, a row of pies is plotted. species can be separated by kingdom or supergroup in the same way, and colors are allocated for each supergroup. pie data are stored in vectors containing  <dig> or  <dig> to show pie occupancy which is converted into a graphic . the collection of graphics for all the pies are laid out with labels. the number of segments for each pie depends on the number of rows associated with a complex: the number of pies depends on the number of species . once plotted, the image is stored in memory and resized by zooming in or out, and may be saved in various image formats as well as editable images .

program operation
the cpg application opens with three tabs . the first allows the user to select an input data file, the second, to choose custom pie colors, and the third tab provides the help/manual and change log . the fourth tab provides a process log, and information to assist with input file formatting . the 'plot' button is not enabled unless the input is correct; clicking on 'plot' generates the figure. by returning to the first, tabbed window, multiple plots may be created from different inputs, and different versions of a figure may be created from the second window and viewed all together. a default color set is supplied  . after selecting an input file, cpg will parse the data and if successful it will convert the data to a table . clicking ‘figure’ will display a coulson plot of the data in a new scrollable window. an example dataset used for testing is shown  from which a small portion was taken for early development. the text file was produced using microsoft excel, with data entry in the table as described . data from excel were exported as comma separated files . the output file is an editable pdf or svg file which can be opened and manipulated with inkscape  or adobe illustrator . we selected this option as more efficient than attempting to build sophisticated editing tools into cpg as the precise choices and requirements of users and datasets are difficult to predict. this follows a similar philosophy to figtree, a popular phylogenetics tree graphics package which also generates editable graphics requiring a small amount of finessing prior to publication . a coulson plot with more than  <dig> pies can be produced satisfactorily.

RESULTS
we developed the coulson plot to display and compare data on gene representation grouped by gene product complex or pathway membership and to display this information across multiple taxa . an array of gene product components from multiple species with each complex is displayed as a pie chart comprising a variable number of components , the number of which matches the number of protein subunits in a functional complex, process  or other functional group. pie charts are arranged by phylogenetic hierarchy to allow evaluation of evolutionary trends and the rapid identification of gene losses, specializations or expansions. several such systems may be compared, so that an array of systems is represented for each species. using colors, it is possible to separate groups of systems with excellent visual clarity.

one of the more flexible aspects of the cgp is that the user can decide quickly how best to group data. for example, complexes or pathways with many components may be difficult to visualize in the individual pie charts, with the result that clarity is lost. however, cpg allows pies to be set up that have only one subunit, for example mimicking the more standard dot blot format, or to subdivide the data into subcomplexes with biological relevance, to improve clarity or increase the amount of data that may be logically compared . a second flexible feature is the ability to manually edit the plot to improve spacing, add additional annotation and change fonts, which allows the user to control the graphic and maintain consistency with additional elements in a figure. overall, we have found that cpg improves workflow and reduces data transcription errors. finally, the program is lightweight, making minimal impact on cpu resources and runs without issue on most major platforms.

CONCLUSIONS
we have found the coulson plot to be highly valuable for presentations of comparative genomic data, and that the lucid display of patterns within datasets more than offset the time required to manually produce these plots. however, we are aware that the skills required and potentially the effort needed acted as a barrier to adoption of a broadly potentially useful graphing format, and which is not available as part of commercial graphing packages as far as we are aware. we therefore developed a plotting tool that manages the vast majority of the plot functionality, leaving the user a format that can be subjected to final editing as appropriate for individual requirements.

a great many datasets have been used to test cpg  <cit> . we find the software is stable on os x , microsoft windows  and multiple versions of linux. creation of .csv output files from microsoft excel, apple numbers or open source office suites that can be read by cpg is routine, and the pdf and svg output successfully imported to adobe illustrator or inkscape as an editable graphic. a diagram with more than  <dig> pies and over  <dig> individual elements can be routinely produced, allowing publication quality figures to be generated in one hour. the ability to rapidly generate plots from dissimilar datasets on-the-fly, allowing hypothesis-driven composition of datasets, is a distinct advantage, and we hope that the coulson plot will become a more generally exploited format, and that the use of this plot beyond comparative genomics will be facilitated with the provision of cpg.

availability and requirements
cpg is a java application and requires java  <dig> . <dig> or higher for the jvm. cpg source code and binaries are available from sourceforge: http://sourceforge.net/projects/coulson as a jar file or disc image for mac os x. project home page: http://dl.dropbox.com/u/6701906/web/sites/labsite/cpg.html and http://sourceforge.net/projects/coulson. the software is licensed under gnu artistic license  <dig> .

competing interests
the authors declare that they have no competing interests.

authors’ contributions
hif created and tested the software. mcf identified the need and had input on software design and features. rmrc designed the original coulson plot graphic format. all authors participated in the writing and approval of the manuscript and β-testing of the software. all authors read and approved the final manuscript.

funding
this work was in part funded through a wellcome trust program grant  to mcf.

acknowledgments
we are grateful to paul manna, ka-fai leung  and joel b. dacks  for beta-testing of the software and andrew jackson  for comments on the manuscript.
