BACKGROUND
unambiguous descriptions of genetic variants are important to prevent mistakes in the clinical diagnosis of disease  <cit> . the human genome variation society  promotes the use of a standard human sequence variant nomenclature, which has gradually evolved as the result of continuous additions and changes  <cit> . the standard nomenclature has been designed mainly for use in tables in the literature and in gene variant databases . due to technological improvements , a growing number of complex variants are now detected at relatively high resolution, bridging the traditional divide between chromosome analysis in cytogenetic diagnostics and single gene analysis in dna diagnostics. this is also reflected in recently proposed extensions of the standard nomenclature  <cit>  and the incorporation of symbols from the international system for human cytogenetics nomenclature   <cit> .

these extensions increase the complexity of the standard nomenclature, which is becoming more difficult for non-experts to understand and use. to assist clinicians and researchers, computational tools, such as the mutalyzer sequence variant nomenclature checker  <cit> , have been developed. lsdb curators using lovd software  <cit>  can improve the quality of newly submitted variant descriptions via the integrated mutalyzer module.

curators contributing the majority of variant data themselves would welcome automated extraction of variant information at the dna, rna and protein levels to cope with increasing amounts of data in the literature. the text mining community has started the biocreative initiative  <cit>  to assess newly developed methods for the efficient extraction of data. several tools have been developed to extract variant data from the literature . current efforts have mainly been focussing on the protein level  <cit> , which reduced the complexity of the search patterns and classifiers needed for these methods. when users have downloaded literature relevant for their genes of interest, stand-alone programs  could be used to extract variant information from selected texts. on-line databases storing variant data obtained by text mining tools  could be queried directly for gene-specific information. this approach would be more convenient for curators, so we compared the contents of these databases with those of the corresponding lsdb for the sdhd gene. this raised the questions whether the complexity of the descriptions at the dna and rna levels prohibited their automated extraction by text mining tools and how this might be solved.

the textual nomenclature recommendations on the hgvs website are spread over different pages with relatively simple examples, making it difficult to get a complete overview of the complexity of sequence variant description constructs up to the genotype level. the hgvs nomenclature can be regarded as a scientific sublanguage  <cit>  using specific typographic and orthographic conventions to communicate information about sequence variants. a formal description that aids in understanding the structure of the nomenclature is currently lacking. here we present two formal descriptions of the syntax in extended backus-naur form   <cit> : one at the dna-rna level and one at the protein level. the dna-rna level ebnf has been used to construct the mutalyzer  <dig> parser and could form the basis for other tools. parts of the ebnf could easily be extended to accommodate the wider variability of descriptions encountered in the general literature or used separately to generate parsers for sequence variant text mining.

methods
standard human sequence variant nomenclature
version  <dig>  of the hgvs standard sequence variant nomenclature  <cit>  was used for the extended backus-naur form. the consistency of the nomenclature was checked, leading to removal of symbol redundancy and clarification of specific rules after communication with the hgvs . these changes and extensions, which have not yet been formally approved by the hgvs, have been incorporated in the formal descriptions presented here. the extensions included the following:

i) the nested change format, which supports descriptions of complex changes such as structural variants  <cit> . in this format, an a to c substitution at position  <dig> within an inverted region  could be described at the genomic dna level as an inversion with the substitution as a sub-allele shown between curly braces, e.g. g.100_200inv{158a>c}. in contrast, the conventional description would describe it as the deletion-insertion g.100_200delinsab <dig>  using the genbank accession number of the sequence of the inverted region with the substitution.

ii) the symbols /  and //  used in the iscn <dig> cytogenetic nomenclature to describe mosaicism and chimerism, respectively  <cit> . these symbols would separate the variants found in the different cell lineages, e.g. g. for two different substitutions found in two different cell lineages of a individual with germline mosaicism.

iii) the description format used with the new locus reference genomic  reference sequences  <cit> . the fixed annotation of lrg sequences might contain information about more than one transcript and protein from the same gene. for descriptions at the rna and protein level, these have to be specified using suffices, e.g. lrg_1t <dig> and lrg_1p <dig>  new symbols pending hgvs approval are explained in table  <dig> 

a see http://www.hgvs.org/mutnomen for a full list of symbols and their use.

development of nomenclature grammar using extended backus-naur form
we have used a top-down approach to manually build a set of syntactic and lexical rules out of the textual nomenclature recommendations on the hgvs website  <cit> . in ebnf, the grammar of a language is defined by a set of rules like the following: sentence → subject verb complement '.' rules are conventionally represented using an arrow separating the head and the body. the rule above says that a sentence is made of a subject, a verb and a complement, and is terminated by a '.' character, in that order. each rule has a nonterminal symbol in its head  and a body defining how terminal and nonterminal symbols link together. sentence and subject are non-terminal symbols, i.e. they must be defined by a rule. '.' is a terminal symbol and requires no further definition. in addition to simple sequences of symbols and characters in the right-hand part, like in the above rule, a few notational conventions enable the description of more complex constructs:

• a set of literals  is described like this: , which defines the set of latin uppercase letters.

• alternatives are denoted by |, as in: nucleotide → 'a' | 'c | 'g' | 't'

• optional constructs are denoted by ?, as in: sentence → subject verb complement? '.' meaning that a correct sentence can have a complement, which is optional.

• zero or more occurrences of a construct are denoted by *. one or more occurrences of a construct are denoted by +:

number →  <cit> + defines numbers as a series of  <dig> or more digits.

the ebnf combines terminal symbols  and nonterminal symbols in a recursive set of rules defining a language. since variation descriptions at the dna and rna levels share many features, both conceptually and syntactically, we have unified them into one set of ebnf rules, while a separate grammar has been derived for the protein level. terminal symbols including all characters used in the hgvs standard sequence variant nomenclature  <cit>  were depicted using bold print in additional files  <dig> and  <dig>  for example, the description of a deletion of amino acids at the protein level was expressed by the following rule:

 
del → aaloc 'del' 

the head, del, was the nonterminal symbol defined by this rule. the body combined another nonterminal, aaloc, which is defined by another rule, and the terminal 'del'. this rule stated that a protein-level deletion must be described as the name of an amino acid along with its position , followed by the three letters 'del', as in glyl23del.

mutalyzer  <dig> parser construction
the mutalyzer  <dig> . <dig> name checker used regular expressions to parse relatively simple variant descriptions before checking their correctness  <cit> . updating and testing these regular expressions containing many escape characters due to all symbols used in the nomenclature was difficult and time consuming, but necessary to include every nomenclature change. reliable recognition of allele and genotype descriptions required designing regular expressions with more complexity. therefore, we decided to simplify parser maintenance using the approach described below. the new nested change format introduced an additional description complexity, which made parsing with regular expressions impossible. the pyparsing package  <cit>  is an object-oriented tool kit for building recursive descent parsers. this type of parsers has a structure resembling that of the grammar recognized and supports a recursive set of rules. we used pyparsing to transform the ebnf of the hgvs standard sequence variant nomenclature at the dna and rna levels into the python code that forms the parser. since no parser generation step is involved, the source code of the parser contained the original description of the nomenclature in a human-readable format. in this ebnf-like python code, we have indicated that a named object must be formed when a particular rule is applied. for example, when a  range is parsed, the rule that defines a range is applied and an object containing two positions must be formed. by selectively assigning objects to rules, we generated a nested object: the mutalyzer  <dig> parse tree.

RESULTS
formal description of dna and rna variant nomenclature
new symbols have been introduced by recent changes and extensions of the sequence variant nomenclature pending formal approval by the hgvs . these symbols and extensions have been included in the dna and rna variant nomenclature grammar represented in ebnf in additional file  <dig>  the top level rule, the starting point from which the highest level of complexity can be processed using the ebnf, is named "var". in principle, this production rule supports detailed descriptions of complete genotypes, even for individuals with mosaicism and chimerism. it also refers to "singlevar", the production rule for the simplest variant form, which handles the format <reference sequence.version_number>:<variant_description> . this format contains the minimal information necessary to reliably generate the variant sequence by hand or with the mutalyzer name checker  <cit> . in the literature and lsdbs, the complete format is rarely used. the reference sequence should be mentioned in the materials and methods section or in the table legends, but is frequently lacking. in lsdbs, it should be mentioned on the gene information page. variants in tables are commonly described using the variant_description part. the mutalyzer module integrated in lovd combines the reference sequence accession number with the variant_description part to generate the complete format to check the description.

for backwards compatibility, rules for several description types used in previous versions have been listed. these "deviation rules" include "ivs"  followed by intron number, which has been used to specify intronic positions. although often causing confusion, the description "ex"  followed by exon number has been included, because of its frequent use in the online mendelian inheritance in man  database  <cit> .

formal description of protein variant nomenclature
although formal experimental proof of changes at protein level are mostly lacking, it is common use to report the predicted effects from the variants detected at the dna level. the protein variant grammar represented in ebnf follows the current version of the standard protein variant nomenclature . the top level rule, the starting point from which the highest level of complexity can be processed using the ebnf, is named "proteinvar". the production rule for the simplest variant form, "singlevar", consists of the reference sequence and the variant description parts. the ebnf includes rules for the preferred three-letter amino acid code as well as the one-letter amino acid code.

variant description handling in the alamut software
the grammars were initially created to help implement the variant parsing and generating capabilities of the alamut mutation interpretation software  <cit> . alamut is a decision-support system dedicated to variant interpretation in human genetics. it integrates several molecular and clinical data sources along with missense and splicing prediction tools inside a graphical gene browser. users can enter variants manually, by selecting affected nucleotides graphically and specifying the type of the change. the software can also import variants from text files holding descriptions based on the nomenclature. variant parsing in alamut uses regular expressions derived from a subset of the dna-level grammar defined here, since the software currently handles only substitutions, insertions, duplications, deletions, and insertion-deletions. the grammar also serves as an implementation guide for generating conformant descriptions out of user-entered variations. the dna and protein-level grammars were also used to implement the text mining tool provided with alamut. however, they had to be extended so as to be able to cope with the numerous lexical variations found in the literature. for instance, almost 10% of dna variant descriptions detected in pubmed abstracts use '/', '->', or '-->' instead of '>' for substitutions.

construction of a context-free nomenclature parser
we successfully incorporated the dna and rna variant nomenclature grammar represented in ebnf into a recursive descent parser in version  <dig>  of the mutalyzer software suite  <cit> . in the syntax checker, which precedes the mutalyzer  <dig> nomenclature checker, the parser is used as an acceptor. if a variant description is not syntactically correct, this interface will return an error message, indicating the position in the variant description where the parser halted. this interface can be used to rapidly check the syntax of many variants  even when a reference sequence is not known or available. the implementation of the mutalyzer  <dig> syntax checker can handle separate descriptions in the standard variant nomenclature. although not intended to support full-text analysis, the batch mode of the syntax checker could be used to recognize  hgvs-compliant descriptions  from a tab delimited text file containing a single word on every line  <cit> . descriptions of single variants without nesting including the reference sequence accession number are recognized or rejected equally well by both mutalyzer versions . more complex allele descriptions with nested changes can only be parsed correctly by mutalyzer  <dig> 

variant data collection and text mining tools
while most lsdbs use specific software  <cit>  for direct submission of new variants data, most data are still manually extracted from the literature and entered manually by lsdb curators. we have investigated if lsdb curators could use the on-line databases gogene  <cit>  and osiris  <cit> , which are filled using text mining tools, as a source of variant data. for an example of the efficiency of these tools, we reviewed variant data for the sdhd gene, for which gogene  lists a maximum of  <dig> publications describing a total of  <dig> nonsense and  <dig> missense variants at the protein level. osiris  contains  <dig> silent,  <dig> missense and  <dig> non-coding variants described at the dna level. in contrast, the sdhd lsdb  <cit>   contains  <dig> variants of which  <dig> have been submitted directly. the other variants were extracted manually by the curators from papers obtained by regular literature searches. the  <dig> unique variants include  <dig> coding region substitutions and  <dig> intronic substitutions at the dna level. at the protein level,  <dig> missense and  <dig> nonsense variants are listed.

discussion
the grammars proposed here have concentrated the lexical items and syntactic constructs which are scattered throughout the hgvs nomenclature web pages in one place. this obviously helps finding potential problems or ambiguities and adding new constructs. this first effort to formalize variant nomenclature may eventually lead to an integrated grammar. the close similarity of the grammar of rna and dna variant descriptions already allowed us to combine these variant nomenclature sublanguages. a separate grammar for the protein variant nomenclature sublanguage had to be designed, since protein variant descriptions are quite different from dna and rna level descriptions. to keep pace with the evolution of the standard nomenclature, updated versions of the ebnfs will be regularly available from the mutalyzer website  <cit> . the ebnfs presented here could serve several purposes: as a reference for reasoning about the nomenclature , for further additions , and for implementation into software . we consider the implementation of dna and rna level ebnf as a step towards the production of correct variant descriptions. the sublanguages defined here are supersets of the actual nomenclature, which are not restricted by the semantic rules of the standard human sequence variant nomenclature  <cit> . the most important semantic rules, which cannot be described in ebnf format, have been recapitulated  <cit> . therefore, implementations based on the grammars should restrict the supersets of otherwise syntactically correct constructs by semantic checking. future work will include the addition of constraints to prevent invalid constructs .

currently, a gap exists between the increasing amounts of variant data generated with next generation sequencing and array technologies and the tools available to extract dna variant descriptions and their functional consequences at the rna and protein levels automatically from textual or tabular formats. traditionally, the focus of text mining tools was on the functional consequences of amino acid substitutions in relation to protein engineering and biotechnology. our sdfid data comparison confirmed that efforts to extract variant data are currently limited to the protein level in gogene and mainly restricted to entries with dbsnp identifiers in osiris. both data sets were smaller than that contained in the corresponding gene variant database, which was manually filled by curators  and submitters . one of the explanations might be that insufficient insight into the complex structure of the sequence variant nomenclature and the format of variant descriptions at the dna and rna level was unclear. another explanation might be that it is difficult for text mining tools to identify the reference sequence in the materials and methods section or in the table legends. both make reliable extraction of variant data more difficult. most lsdb curators would prefer on-line tools which automatically send updates with extracted variants and can be queried on a regular basis, rather than stand-alone programs, which will have to be separately installed and may require it assistance. therefore, a web-based implementation of mutationfinder, mstrap or similar tools for generating gene-specific variant information may help lsdb curation.

the standard nomenclature provides little guidance on descriptions in plain text, so multiple formats may be encountered. in addition, the standard nomenclature was not always used leading to variant descriptions in which, for example, the symbol '>' for substitution is replaced by '/,' '->', or '-->'. to catch these aberrant variant descriptions, the ebnfs presented here could easily be modified to develop parsers for text mining tools. this would not solve the problem of reference sequence identification from the materials and methods section or table legends. a multi-step approach including pre-processing by a lexical analyzer  <cit>  to identify the reference sequence accession number and subsequently connect that to variant descriptions identified by the mutalyzer  <dig> syntax checker might be feasible. the mutalyzer  <dig> sequence variant nomenclature checker could then be used with the format <reference sequence.version_number>:<variant_description> to ground identified variants on a specific reference sequence accession number. validation of the sequence variant mining results could then be carried out using the new lovd query service  <cit> . although the approaches described here may help to improve the extraction of variant descriptions from literature, authors can make a significant contribution by using the standard nomenclature, and journal editors and reviewers by enforcing its use. obviously, listing variant descriptions in the format <reference sequence.version_number>:<variant_description> in manuscripts or in associated computer readable files would solve many of the problems currently experienced by the text mining community.

CONCLUSIONS
we have developed formal descriptions of the standard human sequence variant nomenclature, which can be easily modified and extended after nomenclature updates. the ebnfs can be used in combination with specific software  to generate an automatic nomenclature parser. the freely accessible implementation of such a nomenclature parser, the syntax checker, can be used separately or as part of the mutalyzer  <dig> name checker  <cit> .

the rules in the ebnfs can be extended to accommodate the needs of specific disciplines, including those working with other species. we anticipate that the grammars presented here will help to close this gap by supporting the development of tools which also recognize variant descriptions at the level of dna and rna.

authors' contributions
jl, ab and pt primarily wrote the manuscript. ab created the initial grammars. pt designed hgvs nomenclature extensions, which were discussed with jl and jdd. jl included all proposed changes in the latest version of the grammar and implemented it in the mutalyzer parser. pt and jdd supervised the project. pt finalized the manuscript. all authors read and approved the final manuscript. the authors declare that they have no competing interests.

supplementary material
additional file 1
dna and rna variant nomenclature ebnf v. <dig> . <dig>  this file contains the extended backus-naur form of the human standard dna and rna variant nomenclature v. <dig>  used by the parser of mutalyzer  <dig>  format: pdf.

click here for file

 additional file 2
protein variant nomenclature ebnf v. <dig> . <dig>  this file contains the extended backus-naur form of the human standard protein variant nomenclature v. <dig> . format: pdf.

click here for file

 acknowledgements
the authors wish to thank jean-pierre bayley for critically reading the manuscript and the reviewers for comments and suggestions improving the manuscript. part of the research leading to these results has received funding from the european community's seventh framework programme  under grant agreement n°  <dig> - the gen2phen project.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2011: proceedings of the european conference on computational biology   <dig> workshop: annotation, interpretation and management of mutation . the full contents of the supplement are available online at http://www.biomedcentral.com/1471-2105/12?issue=s <dig> 
