BACKGROUND
a major challenge in computational biology is to reveal the cis-regulatory logics of gene expression through analysis of high-throughput genomic data, for example, genomic sequences and gene expression data. a common practice is to first identify putatively co-regulated genes by clustering gene expression patterns  <cit> , and then search for common motifs from the promoter sequences of the genes in the same cluster  <cit> . such enriched motifs, if identified, are often believed to be the binding motifs of a common transcription factor . this strategy has been successful on small datasets, but is limited by its strong assumptions that co-expression means co-regulation and vice versa  <cit> . furthermore, in higher eukaryotes, genes are typically regulated by combinations of tfs, and tf binding motifs are often organized into modular units  <cit> . although some progress has been made  <cit> , it is still difficult to precisely identify combinatorial motifs. finally, these methods by themselves do not reveal the actual tfs that bind to the sequence motifs.

recently, several studies have attempted to build quantitative or qualitative models to predict gene expression levels from the regulatory motifs on their promoter sequences. bussemaker et al.  <cit>  and others  <cit>  proposed to model gene expression levels as a linear regression of binding motif scores, and applied feature selection techniques to find the most significant motifs. these methods have been shown effective for discovering conserved short motifs related to several biological processes in s. cerevisiae  <cit> . however, they are limited by the assumption of a linear additivity of binding motifs, and therefore is unable to represent complex cis-regulatory logics such as and and or relations  <cit> . furthermore, such linear models are often difficult to interpret.

in order to obtain more realistic models with better interpretability, several classification models have been proposed. decision tree methods have been successfully applied to find motif combinations that best separate two classes of genes  <cit> . other tree-based methods such as multivariate regression trees and bi-dimensional regression trees have been developed to model the transcriptional regulation of gene expressions over several time points simultaneously  <cit> . simonis et al.  <cit>  combined a string-based motif finding method and linear discriminant analysis to identify motif combinations that can separate true regulons from false ones. middendorf et al.  <cit>  used an ensemble of decision trees to model gene expression levels by combining putative binding motifs and the expression levels of putative tfs. segal et al.  <cit>  and beer and tavazoie  <cit>  built bayesian networks to explain gene expression patterns from motifs. in these models, the predictors  are the matching scores of promoter sequences to putative binding motifs, and the predictions  can be continuous or discrete gene expression levels or categorical cluster labels. a common goal of these methods is to derive simple and intuitive rules from the classification models, for example, in the form of "if a gene has motif a and motif b, it will be up-regulated under condition c".

the features used in the above models are usually de novo sequence motifs that are identified from the promoters of the genes under study  <cit> , or existing motifs that are obtained independently  <cit> . one can also enumerate all possible words up to a certain length  <cit> . the problem with these types of features is that they generally have low quality, are incomplete, and may contain many variations for the same motif. to address this issue, chromatin immunoprecipitation microarray  data  <cit> , which represent the relative binding strengths of tfs to the promoter regions of their target genes, have been used as a substitute of motif scores. for example, banerjee and zhang  <cit>  directly applied the method of pilpel et al.  <cit>  to chip-chip data to identify tf combinations; gao et al.  <cit>  replaced the variables in the linear model of bussemaker et al.  <cit>  with chip-chip data and identified significant regulators for many experimental conditions. we have recently compared several types of features using decision tree models and showed that using chip-chip data as features generally result in better classification accuracy that using other types of features, when gene expression and chip-chip data are obtained from similar conditions   <cit> . an additional advantage of using chip-chip data than binding motifs is that the former directly creates a link between a tf and its target genes. while discovering binding motifs of tfs is still important, it can be separated from the learning of transcriptional regulatory networks.

in this paper, we propose a novel approach that combines the strengths of several recent methods in order to learn a highly accurate and reliable transcriptional regulation model, and combine the models learned from different time points and/or different experiments to construct a dynamic transcriptional regulatory network. we use tf binding data rather than binding motifs as predictor variables. we use decision trees as our underlying model, because decision trees are efficient to learn, easy to understand, can capture complex regulatory logics, and have feature selection built in  <cit> . in order to improve the accuracy and robustness of our model, we use an ensemble learning approach to learn multiple decision trees for each training set. from these learned decision trees, we then extract rules in the form of, for example, "if a gene can be bound by tf a and tf b, it will be up-regulated under condition c at time point t". furthermore, we propose a profile approach to reveal the condition-specific or time-dependent effects of tfs. we also propose a spline interpolation method to combine results from multiple time series data. such an integrated approach can substantially eliminate noises in individual data sources and improve modeling accuracy. to validate our approach, we apply it to three sets of yeast cell cycle gene expression data  <cit>  and whole-genome yeast tf binding data  <cit> . it is known that nine tfs – mbp <dig>  swi <dig>  swi <dig>  mcm <dig>  fkh <dig>  fkh <dig>  ndd <dig>  swi <dig> and ace <dig> – regulate a large number of yeast cell cycle dependent genes  <cit> . specifically, mbf  and sbf  control late g <dig> genes; mcm <dig>  together with fkh <dig> or fkh <dig>  recruits ndd <dig> in late g <dig> and controls the transcription of g2/m genes; and swi <dig> and ace <dig> regulate genes at the end of m and early g <dig>  this model was developed using a small set of genes and was recently confirmed by a number of computational studies  <cit> . we thus applied our method to the cell cycle data to verify the accuracy of our method. in addition, by performing a large-scale analysis, we expect to construct a more detailed transcriptional regulatory network as well as capturing new, testable hypotheses for yeast cell cycle regulations.

we demonstrate that our method is able to identify biologically significant time-dependent regulatory rules, and the learned regulatory rules can be used as the basic building elements of a dynamic transcriptional regulatory network. statistical evaluation indicates that the rules are robust and reliable. the transcriptional regulatory network constructed by our method for the yeast cell cycle genes agrees very well with the existing knowledge. many transcriptional regulatory rules for yeast cell cycle genes discovered by our approach have been confirmed by the literature, while the other rules may yield additional insights into the biological process.

RESULTS
overview of the approach
our method takes as input the expression data and tf binding data of a set of genes and proceeds in two stages . in the first stage, we construct a training data set for each experimental condition of the expression data, and obtain a set of regulatory rules using a decision tree ensemble learning approach. in the second stage, we generate profiles for the regulatory rules, integrate results from multiple data sets, and combine rules into a transcriptional regulatory network.

a training set contains a set of instances , each of which is represented by a vector. the vector corresponding to the jth gene is defined as <b1j, b2j,..., bnj, ckj>, where bij is the strength of the ith tf binding to the promoter of the jth gene, and ckj specifies the expression state of the jth gene under condition k. for simplicity, we consider only binary states: "up-regulated" and "not-up-regulated", while it can be easily generalized to any number of states. in this paper, we refer to up-regulated and not-up-regulated genes as positive and negative genes, respectively . the strength of a tf binding to a promoter sequence is represented by the negative logarithm of the binding p-value.

once we have constructed the training set, we then learn a set of decision trees to classify gene expression states based on tf binding data. a decision tree is a rooted tree consisting of internal nodes and leaf nodes. each internal node corresponds to a test of the binding of a selected tf to a gene, for example, "can tf a bind to gene g?". each leaf is a prediction of the state of that gene, for example, "gene g is up-regulated". an internal node has two branches: the right branch is chosen when the test succeeds; and the left branch is chosen when it fails. therefore, a path from the root to a leaf defines a possible regulatory rule, for example, " if a gene can be bound by tf a and tf b, it will be up-regulated at time t".

as decision tree learning algorithms are typically greedy, they are not guaranteed to find the optimal tree  <cit> . furthermore, in many cases, since some features may be highly correlated with some other features and are considered redundant, they may not be selected by the tree even if they are as good as the other features. therefore, a single decision tree may not identify all possible regulatory logics. to address these issues, we use an ensemble learning approach to construct multiple decision trees. this will not only improve the modeling accuracies, but also provides many alternative models, which can then be compared and combined to give a more complete and accurate set of rules.

from decision trees, we extract regulatory rules, and calculate a significance score  for each rule . only significant rules  are retained. for a rule that appears in multiple decision trees corresponding to the same training data, the most significant p-value is taken. furthermore, a regulatory rule may very often be discovered at multiple time points. the negative logarithm of the p-value of a rule at a given time point reflects the regulation strength of the rule at that time. thus it is informative to plot the negative logarithm of the p-value of a rule as a function of time; such a plot is referred to as a rule profile. finally, when two or more microarray time series are available for the same biological process, we combine the rule profiles learned from different time series. as different experiments may have different sampling rates, we approximate each rule profile with a spline interpolation, and combine the profiles for the same rule from different time series to construct a single integrated profile. in the last step, we identify for each rule the most probable experimental conditions under which it functions and the set of genes that it regulates, and organize this information into a transcriptional regulatory network.

regulatory rules learned by the simple decision tree approach
gene expression during the yeast cell cycles has been measured with several different synchronization methods. we applied our method to three data sets obtained from the methods of cdc <dig>  cdc <dig> and α-factor  <cit> . to illustrate the learning of decision trees and regulatory rules, our discussion will first focus on the rules learned from the cdc <dig> data set. in this subsection, we only learned a single decision tree for each time point of the cdc <dig> data set. we will later present results on decision tree ensembles, and combine the results obtained from all three data sets.

we then extracted regulatory rules from the trees by a depth-first search from the root node to all leaf nodes labeled as positive. a node was included in a rule only if its right branch was taken by the path. for example, we extracted the following two rules from the 70-minute tree ):  ∩ , and  ∩ , where n represents logical and. according to the first rule, genes that can be bound by ndd <dig> with a p-value less than e- <dig>  and by mcm <dig> with a p-value less than e- <dig>  are up-regulated at the 70-minute time point. for simplicity, we omit the p-value thresholds of binding data in later discussions, and simplify the two rules as ndd <dig> ∩ mcm <dig> and ndd <dig> ∩ fkh <dig>  respectively. it is worth noting, however, that the thresholds are learned automatically and may be different in different rules.

each rule has some number of supporting genes in the training set, from which a p-value can be calculated. for example, the rule ndd <dig> ∩ mcm <dig> in the 70-minute tree is supported by  <dig> positive and  <dig> negative genes out of a total of  <dig> positive and  <dig> negative genes. this corresponds to a p-value ≈ 10- <dig>  

the most significant rule identified from the 20-minute time point is mbp <dig> ∩ swi <dig> . the other three significant rules are swi <dig> ∩ swi <dig> , mbp <dig> ∩ dot <dig>  and mbp <dig> ∩ ash <dig>  ). ash <dig> is known to accumulate in the daughter cell throughout the g <dig> phase, inhibiting transcription of the ho endonuclease, thereby preventing mating-type switching  <cit> . dot <dig> has been shown to affect pseudohyphal differentiation  <cit> . genes up-regulated at  <dig> minute are described by three significant rules: swi <dig> , fkh <dig> ∩ fkh <dig> , and met <dig> ∩ met <dig>  ). met <dig> and met <dig> cooperate to regulate the sulfur amino acid pathway  <cit> . a cluster of genes involved in the biosynthesis of methionine has previously been reported as being regulated by the yeast cell cycle  <cit> . the two significant rules for 70-minute time point ) are both well-known: ndd <dig> ∩ mcm <dig>  and ndd <dig> ∩ fkh <dig> . rules identified for 100-minute time point include early g <dig> phase tfs, swi <dig> ∩ ace <dig> , as well as late g <dig> phase tfs mbp <dig>  and swi <dig> .

decision trees and regulatory rules learned by an ensemble approach
the above examples illustrated the ability of the single decision tree approach in identifying the known tfs and associating them with appropriate cell cycle phases. however, as there might be other decision trees that explain the data as well, we may have missed some interesting tfs or tf combinations. in this subsection, we show how an ensemble learning approach can be used to extract alternative regulatory rules, thus providing a more complete image of the transcriptional regulation for the yeast cell cycle.

many machine learning approaches have been developed for learning tree ensembles , including bagging  <cit>  and boosting  <cit> . one basic idea in these methods is to repeatedly perturb the original data , and learn a decision tree from each perturbed data set. each decision tree stands for an alternative model. to make a prediction, an instance is passed to individual decision trees and their predictions are combined by voting  <cit> . we adopt the basic idea, while also considering a unique feature of our data set: the number of negative instances is much larger than the number of positive ones. such a skewed class distribution deteriorates the learning ability of most machine learning algorithms  <cit> , including decision trees. to overcome this difficulty, we split negative instances into smaller subsets and combine each subset of negative instances with all positive instances to form a training set, from which a decision tree is learned . we refer to this method as splitting. by this approach, we effectively adjust the class distribution to a preferred value without losing any information in the original data set. the prominent regulatory rules will likely be present in many trees and stand out when the trees are combined. a similar approach has been successfully applied to learn decision trees for detecting credit-card frauds  <cit> . table  <dig> shows a selected list of significant rules discovered by the splitting approach when applying to the 20-, 40-, 70- and 100-minute cdc <dig> data set. a complete list is included in additional file  <dig>  as can be seen, the splitting approach discovered not only all the rules identified by the simple decision tree approach, but also several additional synergetic relationships among the known cell cycle tfs, such as mbp <dig> ∩ swi <dig> and fkh <dig> ∩ ndd <dig>  furthermore, several rules involving additional cell-cycle related tfs were discovered. for example, stb <dig> and ecm <dig> were found in  <dig> minute, cbf <dig>  hsf <dig>  rgm <dig> and mth <dig> in the 40-minute data, nrg <dig> and smp <dig> in 70-minute, ste <dig>  hir <dig> and mss <dig> in 100-minute data. among them, stb <dig> is known to regulate in g <dig>  <cit> ; cbf <dig> binds to centromere and is involved in dna replication and methionine biosynthesis together with met <dig>  <cit> ; nrg <dig> and smp <dig> were recently found to regulate filamentous growth  <cit> .

we repeated the learning method on the cdc <dig> and α-factor data sets, and the resulting regulatory rules are listed in additional files  <dig> and  <dig>  respectively. not unexpected, most of the significant rules involve at least one of the nine well-known tfs. two significant rules identified in the α-factor data set involve novel transcription factors: yap <dig>  and gat <dig> . the roles of these two tfs in g <dig> are still unknown and may deserve further investigation. later, we will introduce a method for combining the rules learned from the three data sets.

estimating the model accuracy
a critical issue of classification algorithms is generalization, i.e., how well a learned model can be applied to new data that has not been seen by the learning algorithm? when the number of features is large, a classifier is often over-fitted, in that it performs very well on training data, while performs poorly on unseen data. therefore, it is important to evaluate the accuracy of a classifier on unseen data, which is typically done by a cross-validation procedure . in this work we used 10-fold cross-validation.

a straightforward measurement of classification accuracy is the percentage of correctly classified instances . however, this tends to underestimate the true error, especially when the ratio of positive and negative instances is skewed. for example, if there are  <dig> negative and  <dig> positive instances, simply predicting everything as negative will achieve 99% accuracy. therefore, we compute the kappa statistic k to measure accuracy. k is a better estimation of the true classification accuracy, and is guaranteed to be no greater than a . furthermore, it has been suggested that k <  <dig>  indicates a poor classifier, k >  <dig>  implies an excellent classifier, and  <dig>  <k <  <dig>  means a reasonably good classifier  <cit> .

obtaining rule profiles and integrating results from multiple experiments
the negative logarithm of the p-value of a rule under a given condition reflects the significance of the rule. we obtained the profile of each rule by plotting its -log p as a function of time. such a plot can be used for several purposes. first, the wave form shows the change of significance score of a regulatory rule over time. therefore it reveals the most probable period of time during which the rule regulates. second, the pattern of rule profiles in a time series reveals certain properties of the biological process . third, comparing the profile of a rule with the expression pattern of the corresponding tfs indicates the direction of the regulation . figure  <dig> illustrates rule profiles of g <dig> and g2/m tfs mbp <dig>  swi <dig>  swi <dig>  ndd <dig>  mcm <dig>  fkh <dig> and fkh <dig> obtained from the cdc <dig> data set. these profiles all showed clear periodicity. their peaks agree very well to cell cycle phases determined by phenotypes and gene expression data  <cit>  ): swi <dig>  swi <dig> and mbp <dig> peak in g <dig>  and ndd <dig>  mcm <dig>  fkh <dig> and fkh <dig> peak in g2/m. the rule profiles also show that there is a significant lag between the peaks of mbp <dig> and swi <dig>  which was also discovered by previous studies  <cit> . we also found a lag between the peaks of fkh <dig> and mcm <dig>  which is different from an antagonistic  relationship suggested by bussemaker et al.  <cit> , but similar to the results reported by lee et al.  <cit> . our results also show a significant lag between fkh <dig> and fkh <dig>  similar to what was reported previously  <cit> .

since all three data sets, cdc <dig>  cdc <dig>  and α-factor, measured gene expression levels during yeast cell cycle, the gene expression patterns in them should be similar; so should the inferred profiles of regulatory rules. therefore, it should be possible to combine the rule profiles learned from them. however, the length of a cell cycle and the sampling rates are different in these three data sets, which makes a direct point-to-point addition invalid. previous studies have shown that it is possible to convert the time scales of the cdc <dig> and α-factor data sets to the time scale in cdc <dig>  <cit> . they found that, after conversion, expression curves in the three data sets can be aligned together very well. we used the same conversion and took the parameters from their results. as we expected, the rule profiles from different data sets can often be aligned together accurately ). we then used spline interpolation in matlab  to convert rule profiles to continuous curves, which were then added together to obtain a combined profile for each rule. figure  <dig> shows the integrated profiles of several rules. as shown, the integrated profiles show prominent cell cycle dependencies . additional file  <dig> contains integrated rule profiles with notable cell cycle dependencies, and additional file  <dig> shows integrated rule profiles that do not show clear cell cycle dependencies.

a model for the yeast cell cycle transcriptional regulatory network
from the cell cycle dependent rule profiles in additional file  <dig>  we constructed a model of yeast cell cycle transcriptional regulatory network . we first determined for each rule the most probable period of time during which the rule functions, and plotted the rule in the corresponding phase of the cell cycle. we then determined the genes that each rule regulates, and created a link from the rule to a gene if the gene also appears in a regulatory rule . we grouped most rules into two large modules , where the rules in each module share a lot of common target genes. one module is in g1/s and has mbp <dig>  swi <dig>  swi <dig> and stb <dig> in the rules. the other module is in g2/m and involves fkh <dig>  fkh <dig>  ndd <dig> and mcm <dig> 

we found that the rules functioning in one phase of the cell cycle regulate tfs functioning in the next phase . this result is consistent with previous studies  <cit> . we identified two new such relations: swi <dig> regulates gat <dig>  and stb <dig> regulates ndd <dig>  we also found that, within each phase, rules that function earlier often regulate tfs that function later . for example, we found that the earliest tf in g <dig>  fkh <dig>  regulates ndd <dig> and fkh <dig>  as to our knowledge, this result has not been reported previously.

in addition, two rules combining g <dig> and g <dig> tfs  function in s phase and regulate ndd <dig>  another such combination, fkh <dig> ∩ mbp <dig>  functions in m phase. we also identified several novel tfs for yeast cell cycle: dot <dig>  yap <dig> and gat <dig> in g <dig>  and met <dig> in s. yap <dig> and gat <dig> may be suspicious since the rules were only learned in the α-factor data sets, although their profiles show very clear cell cycle dependencies. gat <dig> was found to be regulated by swi <dig> in our network.

discussion
reconstructing gene regulatory networks from gene expression data is a promising but challenging task for the post-genomic era. traditional methods typically use a two-phase approach. the first phase groups genes into clusters according to their expression similarities  <cit> . the second phase searches for single or composite motifs that are enriched in the promoter regions of clustered genes  <cit> . these methods, however, are limited by their over-reliance on expression similarities. furthermore, computational motif finding is a difficult task, while the mapping from binding motifs to corresponding tfs still remains an open problem. statistical learning methods consider individual expression experiments separately, and fit linear models to describe the additive effects of motifs on the expression levels of individual genes  <cit> . these methods did not, however, explicitly take combinatorial effects of tfs into account. in this paper we proposed a supervised machine learning approach to discover regulatory rules that can be used for constructing transcriptional regulatory networks. we used decision trees to model the relationship between the expression level of a gene at a particular time point and the tfs that can bind to the promoter region of the gene, and extracted easy-to-interpret regulatory rules from decision trees. we applied an ensemble learning approach to explore alternative models and increase the modeling accuracy. we also proposed a spline interpolation approach for integrating the results obtained from multiple time series expression data sets.

using the cell cycle data sets as examples, we demonstrated that our method is able to identify biologically significant regulatory rules from genome-wide tf binding data and gene expression data. the process of deriving all predictions in our method was unbiased by any computational or experimental knowledge. without pre-clustering genes based on global similarity of expression patterns, we re-discovered all nine known tfs that are relevant to the yeast cell cycle and assigned them into appropriate cell cycle phases. most regulatory rules in our results involve two or more tfs, suggesting synergetic relationships among them. for example, we have identified the collaboration of many well-known tf pairs, such as mbp1-swi <dig>  swi4-swi <dig>  stb1-swi <dig>  fkh1-mcm <dig>  fkh1-ndd <dig>  fkh2-ndd <dig>  ace2-swi <dig> and met4-met <dig>  as well as the recently reported met4-cbf <dig> and nrg1-smp <dig> complexes. the test of other yet unverified rules may yield additional insights to the biological process.

our method has some limitations. although statistically significant rules often reflect biological significance, the opposite is not always true. as a result, our method may miss regulatory rules that regulate only a few genes. for example, our method failed to discover skn <dig>  a tf functioning in s phase, since the number of genes regulated by skn <dig> is small in the given data sets to be considered statistically significant. however, this limitation is probably common to most large-scale analysis methods.

another limitation of our method is that regulatory rules do not specify whether a participating tf contributes inductively or repressively. this is because concentrations of tf proteins are not taken into account. for example, if a rule states that "if gene g can be bound by tf f, then it can be up-regulated at time t", it is possible that g is up-regulated at t due to a reduced concentration of f, which actually implies a repressive role of f. this ambiguity may be resolved by comparing rule profiles with expression patterns of tfs. for example, the rule profile of swi <dig> reaches its peak at  <dig> minute, while expression of swi <dig> peaks at about the same time. this suggests that swi <dig> is a transcriptional activator. however, the correlation does not always hold, since there may be a lag of time between the expression of a tf and its functioning, and many tfs may be modified post-transcriptionally. for example, the mrna level of mbp <dig> is almost constant during the cell cycle  <cit> , although its rule profile peaks at  <dig> minute. we note that the same limitation exists for linear regression approaches  <cit> .

it is also worth noting that there are alternative ways to label genes with expression states. here we labeled a gene according to its expression level under a single condition relative to an initial condition. alternatively, we may label a gene according to its expression level relative to the previous time point, or relative to its mean expression level in a time series. it may also be advisable to consider several consecutive time points simultaneously. we have tested some of these ideas , and the conclusion is that all these labeling methods are valid to a certain extent , and there is no single method that is the best for all data sets. the labeling method we chose has the best cross-validation accuracy on average. the decision trees learned with different labeling methods are often different. nevertheless, when the ensemble approach is used, the most significant regulatory rules tend to be stable regardless of which labeling method was used.

CONCLUSIONS
we have proposed a decision tree ensemble approach for discovering transcriptional regulatory rules. by integrating multiple data sources, we are able to achieve high modeling accuracy. statistical evaluation and literature validation indicate that the results are robust and reliable. we have also shown that the regulatory rules can be used as the basic building elements of a transcriptional regulatory network. as more gene expression data and tf binding data become available, we believe that our method will be useful for reconstructing large-scale transcriptional regulatory networks.

materials and methods
gene expression and tf binding data
we used s. cerevisiae cell cycle data synchronized with cdc <dig>  <cit> , cdc <dig>  <cit>  and α-factor  <cit> . for cdc <dig> data set, we used a 3-fold induction as the threshold for selecting positive genes. that is, a gene is positive at time point t if et/e <dig> =  <dig>  where et is its expression level at time t and e <dig> is its expression level at the starting point of the time series. to have a clear separation of positive and negative genes, we chose a gene as negative only if et/e <dig> =  <dig> . since expression levels in cdc <dig> and α-factor were normalized by a log <dig> ratio, we chose positive genes so that et - e <dig> = log <dig> and negative et - e <dig> = log <dig> . furthermore, in all three data sets, we required the expression levels of positive genes and negative genes to be greater than and less than their average expression values, respectively. we used genome-wide binding data of  <dig> s. cerevisiae tfs from lee et al.  <cit> . we used a less stringent threshold  than the suggested threshold  to reduce false negatives, and depended on the learning algorithm to automatically determine an optimal threshold for each tf.

learning decision trees and tree ensembles
we modified a standard algorithm c <dig>  for learning decision trees  <cit> . the implementation of the algorithm was adapted from the weka machine learning package  <cit> . in our modification, we required that when a feature was selected to split the training data, the presence of the feature must be associated with the positive data, since we think it is not biologically meaningful to attempt to find common motifs/tfs for the negative genes. as a result, a leaf node with a positive label always appears as a right child of its parent. to learn transcriptional regulatory models, we constructed a training data set for each time point using the tf binding data of the positive and negative genes as described above. we first learned a single decision tree for each time point. to improve the model accuracy, we also learned decision tree ensembles using several methods. briefly, a decision tree ensemble is set of decision trees, each of which is learned from a modified version of the original training data set. for prediction, an instance is fed to all decision trees and the results from the individual trees are combined by a simple weighted voting scheme, where the weight is the probability of the prediction made by a tree. we used the bagging  <cit>  and adaboost  <cit>  approaches implemented in weka  <cit> , using our modified version of c <dig>  as the base classifier. as the ratio of negative genes to positive genes is often very large in our case, we also developed a method, called splitting, to learn decision tree ensembles, again using our modified c <dig>  algorithm as the base classifier. the splitting approach works as follows. given the training data, we first separated it into positive set and negative set. instances in the negative set were randomly partitioned into n subsets, where n was chosen so that the size of each negative subset is  <dig> –  <dig> times the size of the positive set. this was then repeated  <dig> times with different random seeds, giving a total of 5n negative subsets. we combined each negative subset with the positive set to form a training set and learned a single decision tree for each training set. we combined these trees and the tree learned from the complete training data set to give a total of 5n+ <dig> trees to form an ensemble. overall, each positive gene was used 5n+ <dig> times and each negative gene was used  <dig> times in training, effectively reducing the ratio of negative to positive genes.

estimating the model accuracy
a 10-fold cross-validation was used to estimate the accuracy of our method. in other words, we randomly partitioned the training data into  <dig> subsets of equal size, and then combined  <dig> subsets for training and the remaining one for testing. the process was repeated  <dig> times so that each subset was used as a test set once. furthermore, we repeated the cross-validation procedure  <dig> times with different random partitioning and calculated the average performance. denote tp, tn, fp, and fn as the numbers of true positive, true negative, false positive and false negative predictions, respectively. the overall accuracy a is defined as a = /. the kappa static k  <cit>  is defined as

   

where c is the expected accuracy that a classifier can achieve by chance, and can be calculated by

   

extracting significant regulatory rules
for each learned decision tree, we extracted rules by following the branches from the root node to leaf nodes labeled as positive. a node was included in a rule only if its right branch was taken to reach the leaf node of the rule. for example, given a path "ndd <dig> ≥  <dig>  ∩ mcm <dig> <  <dig>  ∩ fkh <dig> ≥  <dig>  ⇒ positive", we will omit the second term and extract a rule "ndd <dig> ≥  <dig>  ∩ fkh <dig> ≥  <dig>  ⇒ positive". the reason is that the biological meaning of the second term is ambiguous. we calculated a p-value for each rule with a hypergeometric distribution, and we considered a rule to be significant if its p-value is smaller than 10- <dig>  if there are totally m positive genes and n negative genes, and a rule is supported by m positive and n negative genes , we calculated the p-value for the rule as the probability that we would select at least m positive genes if we randomly pick m + n gene. this can be calculated as:

   

combining rule profiles
we converted the time scale for the three expression data sets to a common scale. we used a linear function t  = a * s + b for the conversion, where s is the actual time in an experiment and t  is its converted time. the coefficients a, b were obtained from  <cit> . using the cell cycle length of cdc <dig> as a reference, the coefficients are a =  <dig>  and b = - <dig>  for cdc <dig>  and a =  <dig>  and b =  <dig>  for α-factor, meaning that the length of a cell cycle in cdc <dig> is  <dig> -fold of the cell cycle length in cdc <dig> and  <dig> -fold of that in α-factor, and the cell cycle in cdc <dig> starts  <dig>  minutes earlier than in cdc <dig>  we then approximated each rule profile with piecewise polynomial functions using the spline function in the matlab software. an integrated profile was obtained for each rule by summing its three splines from cdc <dig>  cdc <dig> and α-factor experiments. a rule was considered cell cycle dependent if its integrated profile has two peaks and the distance between the two peaks is approximately  <dig> –  <dig> minutes.

constructing regulatory networks
the rules with notable cell cycle dependency  were used to construct a regulatory network for the yeast cell cycle. by calculating the average distance between two peaks of all the profiles, we estimated the length of a cell cycle to be  <dig> minutes with cdc <dig> data set as reference. the period that each rule functions was determined by finding the time points left and right to the peak where the y axis values were two thirds that of the peak. we then plotted the rules in their corresponding functional phases. next, a subset of the training data with only the genes that are part of some rules in the network were constructed and passed to the decision tree ensembles. if a gene is predicted to be positive, the rules used for the prediction were extracted, and links were created between the rules and the gene.

competing interests
the authors declare that they have no competing interests.

authors' contributions
jr and wz conceived of the research. jr designed the study and carried out the computational analysis. jr wrote the paper and wz helped with the manuscript preparation. yd and ejp helped to improve the algorithm and the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
this pdf file contains all the significant regulatory rules learned from the cdc <dig> data set using the ensemble approach.

click here for file

 additional file 2
this pdf file contains all the significant regulatory rules learned from the α-factor data set using the ensemble approach.

click here for file

 additional file 3
this pdf file contains all the significant regulatory rules learned from the cdc <dig> data set using the ensemble approach.

click here for file

 additional file 4
this pdf file contains the integrated rule profiles that show a cell-cycle dependency.

click here for file

 additional file 5
this pdf file contains the integrated rule profiles that do not show a clear cell-cycle dependency.

click here for file

 acknowledgements
jr was supported in part by a utsa faculty research award and a nih grant 1sc3gm086305- <dig>  wz was supported in part by nsf grants iis- <dig> and dbi- <dig>  a grant from the alzhemier's association and a grant from monsanto company. the authors wish to thank the anonymous reviewers for their constructive comments and suggestions.

this article has been published as part of bmc genomics volume  <dig> supplement  <dig>  2009: the  <dig> international conference on bioinformatics & computational biology . the full contents of the supplement are available online at .
