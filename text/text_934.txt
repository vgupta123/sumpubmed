BACKGROUND
identification of potential interactions between target proteins and drugs is a difficult task and computer scientists and medicinal chemists alike consider it a challenge before the whole drug discovery field. efficient prediction of target-compound interactions using computational methods accelerates research efforts in this area. there have been two generally accepted approaches to drug discovery, ligand-based and structure-based or docking  <cit> . ligand-based approaches are based on the known ligands of a protein and lack applicability when the target has no known ligands , while structure-based approaches utilize the three dimensional structure of the target, if it is known  <cit> . literature mining, where interacting genes and compounds are extracted from the related articles, can also be used  <cit> . chemogenomics relates the chemical properties of ligands with the sequence properties of proteins, with the final goal of protein-ligand interaction prediction. the underlying assumption is that chemically similar compounds will bind to the same or similar proteins and that targets with similar binding sites should also bind to the same ligands  <cit> . in this work, we combine protein sequence similarity and ligand chemical similarity information for protein-drug interaction prediction using machine learning. our main goal is to evaluate the performance of different ligand similarity functions that utilize their smiles strings for this task.

chemogenomics has three main components:  set of compounds  set of targets  reliable interaction information  <cit> . recent studies have adopted chemogenomics approaches for predicting drug-target interactions  based on genomic similarity of proteins and/or chemical similarity of ligands using different computational models and classification algorithms. one of the first studies utilizing machine learning methods for ligand-based virtual screening tested different target kernels with support vector machines . three different protein data sets were examined to predict drugs even for targets with no known ligands using the similarity between proteins  <cit> . the same year, chemical compound similarity and protein sequence similarity were used to propose three different profile kernel methods by yamanishi et al. for interaction prediction  <cit> . the database of drug-target interactions curated in this work is commonly used as a reference/benchmark data set  <cit> . gaussian interaction profile  kernel, introduced by laarhoven et al., was built on binary vectors named interaction profiles that are defined for each drug and protein in the data set  <cit> . the interaction profile of a drug indicates its interaction status / absent ) with every target in the data set. similarly, the interaction profile of a target is a binary vector representing its interaction status with all the drugs in the data set. the model was later improved using the weighted nearest neighbor algorithm , so that it was possible to make predictions for new drug compounds by predicting their interaction profiles  <cit> .

the chemical similarity of ligands can be based on the 1d, 2d, and 3d representations of molecules  <cit> . the most commonly used descriptors are based on 2d and 3d representations of the compounds . a detailed comparison of different chemical descriptors and 2d graph similarity kernels used in predicting protein-drug interactions was recently reported in  <cit> . a popular 1d representation for molecular structures is the simplified molecular input line entry system  that describes molecular structures in the form of strings  <cit> . smiles strings convey information about molecular structures by using symbols such as c, c, n, o for atoms and =, # for bonds . the smiles representation has been used to obtain molecular similarity for purposes such as toxicity prediction, virtual screening, and quantitative structure-activity relationship  modelling . to the best of our knowledge, smiles strings have not been previously used to represent similarities among compounds for the task of drug-target interaction prediction. most previous studies on drug-target interaction prediction make use of the more complex 2d representations of the compounds such as simcomp.

in this study, we seek to answer whether a smiles representation based compound similarity method can perform as well as the widely used 2d representation based similarity method, simcomp  <cit> , in the drug-target interaction prediction task. the methods we discussed in this paper can be used in any drug-target interaction prediction algorithm that makes use of the compound similarity information. for evaluation purposes, we use one of the state-of-the-art algorithms for drug-target interaction prediction, namely the weighted nearest neighbor-gaussian interaction profile  model proposed in  <cit>  and we use the benchmark data sets curated by yamanishi et al.; gpcrs, enzymes, nuclear receptors, ion channels, and their interacting ligands  <cit> . we adapt and evaluate various string similarity functions, which are based on the smiles representations of the ligands, for the task of drug-target interaction prediction. the string similarity methods that we utilize include edit distance  <cit> , normalized longest common subsequence , and a model that combines three different longest common subsequence   <cit>  algorithms, as well as smiles specialized algorithms such as lingo  <cit> , smiles fingerprint   <cit> , and smiles-based substring kernel  <cit> . we also present two novel models that combine the lingo representation with the term frequency  weighting and term frequency-inverse document frequency  weighting schemes adopted from the information retrieval domain. in addition, two composite kernels are constructed by combining the 2d-based similarity kernel simcomp with tf-idf based cosine similarity kernel and lingosim kernel. our results show that smiles-based similarity kernels perform close to the 2d-based similarity kernel, simcomp, at a fraction of the computational time. the composite kernel comprising the smiles-based tf-idf cosine similarity kernel and 2d-based simcomp kernel obtained the best performance in terms of auc-pr scores for all data sets.

methods
in this section we first describe the data sets that we used for evaluation and the drug-target interaction prediction algorithm   <cit> ), into which we integrated the smiles-based compound similarity functions. next, we present the smiles-based compound similarity functions that we adapted and evaluated for the task of drug-target interaction prediction.

data sets
drug-target interaction data
we used the benchmark drug-target interaction data sets for enzymes, ion channels, gpcrs, and nuclear receptors provided by yamanishi et al.  <cit>  for evaluation. the data sets are publicly available at http://web.kuicr.kyoto-u.ac.jp/supp/yoshi/drugtarget/. yamanishi et al. retrieved the interaction information between target proteins and compounds from the kegg brite  <cit> , brenda  <cit> , supertarget  <cit> , and drugbank  <cit>  databases. the properties of the interaction data sets are provided in table  <dig> 


genomic data
target proteins are retrieved from the kegg genes database  <cit> , and the normalized version of the smith-waterman score is used to calculate the similarity between the amino-acid sequences of the target proteins  <cit> .

chemical data
the drug and compound sections of kegg drug database  <cit>  are used to obtain the chemical structures. simcomp is used to construct the original compound similarity matrix  <cit> . simcomp treats chemical molecules as graphs, then produces a score representing the similarity between two graphs  <cit> . in order to calculate our own compound similarity matrices, we first downloaded the mol files from kegg drug for each of the compounds included in the data sets. then, we used jchem  <dig> . <dig> for.net  to convert the mol files into unique smiles strings  <cit> .

prediction algorithm
we used the wnn-gip drug-target interaction prediction model  <cit>  in order to compare the different smiles string based compound similarity methods.wnn-gip requires a bipartite drug-target interaction network, which is represented as an adjacency matrix in which a cell is set to  <dig> if the drug and the target interact, and to  <dig> otherwise. each row of the adjacency matrix corresponds to the interaction profile of a drug and each column corresponds to the interaction profile of a target. the interaction profiles of the drugs and targets, as well as the chemical similarity information of the compounds and the genomic similarity information of the proteins are provided as inputs to the wnn-gip algorithm. first, the kernels for the drugs and targets are created from the chemical similarity and genomic similarity information, respectively by modifying their similarity matrices so that they become symmetric and positive definite . then, the gaussian kernel is used to construct a kernel from the interaction profiles, which is combined with the chemical kernel and the genomic kernel. finally, the kronecker product is used to merge the kernel for drugs and the kernel for targets into a kernel directly representing drug-target pairs. the regularized least squares  algorithm is employed for the prediction of drug target interactions  <cit> . in the original study, wnn-gip used the simcomp method based on the 2d representation of the compounds to compute the compound chemical similarity scores. in this study, we investigated using the computationally more efficient 1d smiles-based similarity functions to compute the compound similarity scores instead of simcomp in the wnn-gip algorithm.

smiles-based compound similarity functions
in this sub-section we provide the methods that we adopted and evaluated to measure the similarity of compounds using their smiles string representations. the source code comprising the smiles-based similarity algorithms discussed in this section is publicly available at: https://github.com/hkmztrk/smilesbasedsimilaritykernels.

all smiles strings are modified such that atoms represented with two characters such as ‘cl’ and ‘br’ are replaced with single characters. for illustration purposes, we use the imaginary smiles strings smi1: “oc =o” and smi2: “ccccc =c4” to demonstrate the smiles-based similarity methods.

edit distance
edit distance is one of the most widely used measures to make comparisons between strings. given two strings s <dig> and s <dig>  the edit distance between them is defined as the number of minimum edit operations required to convert s <dig> into s <dig>  <cit> . there are three main operations allowed, namely insertion, deletion, and substitution  <cit> . for our samples, edit= <dig>  in order to convert smi <dig> to smi <dig>  we have to perform four insertion operations , and two substitution operations . then, the similarity is calculated as, 
 editsim=1−editmax,length) 

normalized longest common subsequence 
the longest common subsequence  algorithm finds the common subsequence with the maximum possible length of two strings  <cit> . the algorithm does not require the characters in the common subsequence to be consecutive. normalized lcs modifies the algorithm such that the lengths of both strings are considered. given two strings s <dig> and s <dig> the nlcs is  <cit> , 
 nlcs=lengthlcss <dig> s22lengths1×lengths <dig> 

for our sample smiles strings, the longest common subsequence is “c =”. therefore, 
 nlcssmi <dig> smi2= <dig>  

combination of lcs models 
islam and inkpen proposed a method to measure semantic similarity of the texts by combining three algorithms each of which modifies the lcs algorithm in a different way  <cit> . we will refer to this method as clcs throughout the paper. the first algorithm is normalized lcs , described in the previous section. the second algorithm is called maximal consecutive longest common subsequence starting from the character  <dig>  mclcs <dig>  it requires the common subsequences to be consecutive and to start from the first index of the shorter string. the last algorithm is named maximal consecutive longest common subsequence starting from character n, mclcsn  <cit> . similarly to mclcs <dig>  mclcsn requires the common subsequences to be successive. however unlike mclcs <dig>  the consecutive symbols don’t have to start from the first index in the mclcsn, i.e, they can start from any position in the string. mclcs <dig> and mclcsn are also normalized and named as nmclcs <dig> and nmclcsn, respectively. given two strings s <dig> and s <dig>  nmclcs <dig> and nmclcsn are calculated as  <cit> , 
 nmclcs1=lengthmclcs1s <dig> s22lengths1×lengths <dig>  nmclcsn=lengthmclcsns <dig> s22length×length 

in order to compute the similarity between s <dig> and s <dig>  the weighted sum of these three algorithms is taken as follows  <cit> :

k=v1×w1+v2×w2+v3×w <dig>  where w <dig>  w <dig>  w <dig> are the weights and 
 v1=nlcss <dig> s2v2=nmclcs1s <dig> s2v3=nmclcsns <dig> s <dig> 

the original method gives each algorithm the same weight  <cit> .

let us demonstrate this model with our sample smiles strings. for the first algorithm, nlcs= <dig> . nmclcs <dig> requires the longest common subsequence to be consecutive and to start from the first index, which is equal to “o” and therefore, nmclcs1= <dig> . for nmclcsn, the longest common subsequence is “c =”. nmclcsn= <dig> . finally, the similarity score becomes  <dig> .

smiles representation-based string kernel
smiles representation-based string kernel is proposed as a compound similarity kernel and combined with svm to predict in silico toxicity of the compounds in  <cit> . given two smiles texts s <dig> and s <dig>  θ and θ respectively denote the frequencies of all the possible substrings with at least q= <dig> character length. the string similarity kernel is defined as the inner product of these frequencies  <cit> . 
 ks <dig> s2=〈θs <dig> θs2〉 

consider our sample smiles strings smi <dig> and smi <dig>  the frequency of each smi <dig> substring, {oc, c, …, oc, c =,  =o, oc =, c =o, oc =o }, is  <dig>  the frequency of the smi <dig> substrings {c, …,cc =c, cccc =c <dig>  ccccc =c <dig> } is also  <dig> except for the smi <dig> substrings {cc, ccc, cccc } that have frequencies of  <dig>   <dig>  and  <dig>  respectively. the shared substrings from these sets are, {c,) =, c, o) =, c,  =, c = }, all of which have a frequency of  <dig>  therefore, the inner product, k, is  <dig> 

smiles fingerprint 
smiles fingerprint  was introduced by schwartz et al. to perform ligand-based virtual screening  <cit> . smifp is based on representing smiles strings in a 34-dimensional space where each of the dimensions correspond to the frequency of a different symbol such as c, c, n, and #  <cit> . more than  <dig> million compounds in pubchem are analyzed in order to identify the most-frequent symbols in a smiles string to form the best-representative scalar fingerprint and as a result,  <dig> relevant symbols are selected. once smiles strings are converted to scalar fingerprints, city block distance   <cit>  is used to measure similarities. aside from cbd, we use tanimoto coefficient to observe whether the distance metric affects the performance of the model.

cbd treats the common absence or low values of features as an indication of similarity, whereas tanimoto does not  <cit> . on the other hand, unlike cbd, tanimoto considers size normalization. for the chemical domain, tanimoto is recommended to be used to measure the absolute similarity between two molecules, whereas cbd and euclidian distance are useful to measure relative similarity, i.e. the relative similarities of two molecules to the some other molecule  <cit> .

lingo
lingo refers to q-character substrings of a smiles text  <cit> . lingo representation of compounds has been used as input for quantitative structure-property relationships  models as well as for calculation of intermolecular similarities. a smiles string of length n can be represented with ) q-length substrings . the original method requires smiles strings to be canonical, and lingo length is fixed as q= <dig>  before the lingo creation process, all ring numbers in the smiles string are set to ‘0’. then, the lingosim function is used to calculate the similarity between two smiles strings s <dig> and s <dig> with the tanimoto coefficient based on their lingo profiles  <cit> , 
 lingosim=∑i=1m1−ns <dig> i−ns <dig> ins <dig> i+ns <dig> im  where m is the total number of unique lingos created from s <dig> and s <dig>  while ns <dig> i represents the frequency of lingos of type i in compound s <dig> and ns <dig> i represents the frequency of lingos of type i in compound s <dig> 

let us demonstrate how compound similarity is calculated using the lingo model with our sample strings, smi <dig> and smi <dig>  smi1: “oc =o” doesn’t require any modification, whereas for smi2: “ccccc =c4” we have to set ring numbers to  <dig> and the string is converted into the following form, “ccccc =c0”. we then create lingos with the substring length of q= <dig> 

once we extract the lingos from the smiles strings and retrieve their corresponding term frequencies , we calculate lingosim. we have nine unique lingos two of which are shared by both smiles strings. 
 lingosim=∑i=191−nsmi <dig> i−nsmi <dig> insmi <dig> i+nsmi <dig> i9=∑i=161−1−01+0+∑i=781−1−11+1+∑i=991−2−02+09=0+2+09= <dig>  table  <dig> lingos with their corresponding frequencies in the sample smiles strings s
m
i
 <dig> and s
m
i
2



s
m
i
1
s
m
i
2


lingo length q= <dig> , <dig> are tested in this work.

lingo based tf cosine similarity
term-frequency  based cosine similarity is the first of the weighting models that we adopted from the information retrieval domain. tf reflects the number of times a term occurs in a document  <cit> . originally in tf weighting, a weight representing the frequency of a term is assigned to each term in the document. in this domain, we treat each smiles string as a document and four character lingos, which are created from these strings, are denoted as terms. the tf weight of a lingo l in smiles string s is calculated as follows. 
 tfweightl,s=1+log <dig> iftermfrequencyl,s> <dig> otherwise 

in order to compute the similarity between two smiles strings using this method, each string has to be converted into a feature vector vs. the dimensionality of vs is equal to the number of unique terms  in the corpus . each feature contains the tf score of the corresponding term  in the string . the similarity of two smiles strings s <dig> and s <dig> is determined according to the cosine angle between their vectors. 
  cossim=∑i=1mvs <dig> ivs <dig> i∥vs1∥∥vs2∥ 

vs <dig> and vs <dig> are feature vectors and m denotes the lengths  of the vectors in eq.  <dig>  <cit> .

let us demonstrate the computation of lingo based tf cosine similarity using the sample smiles strings smi <dig> and smi <dig>  whose term frequencies are shown in table  <dig>  since we have nine unique lingos, the lengths of the feature vectors are equal to nine, m= <dig>  each dimension in the feature vector represents the term frequency weight of the corresponding lingo in the smiles strings. thus, the feature vectors for smi <dig> and smi <dig> are  <cit>  and , respectively for the following order of the lingos . finally, the cosine similarity is computed as follows: 
 cossim=∑i=19vsmi <dig> ivsmi <dig> i∥vsmi1∥∥vsmi2∥=+∑i=23+++∑i=694×1226×12+ <dig> =2/ <dig> = <dig>  

lingo based tf-idf cosine similarity
term frequency-inverse document frequency  cosine similarity is the second model that we adopt to measure compound similarity by utilizing smiles text. this method combines lingo representation with the tf-idf weighting-scheme. tf-idf has originally been developed in the information retrieval domain for weighting the words in the documents just as tf weighting. this method is especially useful for filtering or assigning low weights to stop words such as ‘the’, ‘a’, and ‘an’. words are the terms of a document corpus and each document is treated as a collection of terms . tf assigns higher weights to those terms that occur frequently in a document, idf on the other hand, assigns higher weights to the rare terms in the document collection. terms that are very common in the document collection are assumed to have little discriminating power. idf is described as, idf=lognd∈d:t∈d where t, d and n denote the term, document corpus, and number of documents in the corpus, respectively  <cit> . tf-idf weighting is equal to the product of term frequency and inverse document frequency.

as shown in eq.  <dig>  the similarity between the feature vectors is computed by using cosine similarity. each feature now contains the tf-idf score of the corresponding term in the string. in this model, we treat each smiles string as a document that comprises a set of lingos, and lingos are the terms of our system. lingo length q is selected as four as it is in the original algorithm.

let us illustrate this model by using samples from the compounds of the enzyme data set, which is one of the benchmark data sets used in this study  <cit> . as shown in table  <dig>  the enzyme data set comprises  <dig> different compounds each represented as unique smiles strings. there are  <dig> unique lingos created from  <dig> different smiles strings. in other words, it is a system of  <dig> documents and  <dig> terms.

for instance, “o)co” and “” are two lingos. “” is a very frequent lingo appearing in  <dig> out of the  <dig> smiles strings. its idf is  <dig>  and therefore, this lingo can be considered as a stop word. “o)co”, on the other hand, is a rather rare lingo, which is included in only  <dig> smiles strings. the idf of this lingo is  <dig> .

the idf weighting-scheme allows the model to assign importance to the rare lingos. smiles strings that share infrequent lingos are favored and selected as more similar in this model. after term frequencies and idfs of all the lingos are calculated, cosine similarity is computed to measure the similarity between two compounds.

let us demonstrate the calculation of tf-idf based cosine similarity by using our sample smiles strings smi <dig> and smi <dig>  the tf weights of the lingos in each string are computed as described in the previous sub-section . the idf scores of the lingos, which are computed by assuming that the imaginary smiles strings smi <dig> and smi <dig> are compounds in the enzyme data set, are shown in table  <dig>  since the enzyme data set contains  <dig> compounds, the numerator in the idf formula is  <dig>  for a lingo l, the denominator in the idf formula is the number of compounds in the enzyme data set that contain the lingo l. thus, the tf-idf weighted feature vectors for smi <dig> and smi <dig> are  and , respectively. the cosine similarity between them is computed as follows. 
 cossim=∑i=19vsmi <dig> ivsmi <dig> i∥vsmi1∥∥vsmi2∥=0+++0+0+0+0+0+ <dig> + <dig> + <dig> + <dig> .52+ <dig> + <dig> + <dig> +12+22+ <dig> = <dig> / <dig> = <dig>  table  <dig> the idf scores for the lingos in the sample imaginary smiles strings s
m
i
 <dig> and s
m
i
 <dig>  the idf scores are computed by assuming that s
m
i
 <dig> and s
m
i
 <dig> are compounds in the enzyme data set consisting of  <dig> compounds in total



composite kernels
composite kernels are created by combining the similarity matrices obtained from two different methods, namely the 2d-based similarity function simcomp and one of our smiles-based similarity functions. scomposite, representing the similarity matrix of the composite kernel, is derived by taking the unweighted average  of the similarity matrix produced by simcomp, ssimcomp, and the similarity matrix sf produced by a smiles-based similarity function f, 
 scomposite=λ∗ssimcomp+∗sf 

to obtain sf, we experimented with our best performing smiles-based similarity functions lingo-based tf-idf cosine similarity and lingosim .

experiment setup
experiments followed the procedure proposed by laarhoven  <cit> . for each interaction data set, five-fold cross validation is performed on the drug compounds. in other words, the data sets are divided into five equal-sized subsets and for each fold, one subset is used for testing while the system is trained with the remaining four subsets. this process is repeated five times.

RESULTS
in this study,  <dig> different similarity kernels that utilize smiles  representation of molecules are evaluated. in order to assess the performances of these drug kernels for the drug-target interaction prediction task, the wnn-gip approach is adopted. we compare the results obtained using the smiles representations of the compounds with the 2d-based similarity method, simcomp, as well as two composite kernels formed by simcomp and a 1d-based similarity method. in the original application of the wnn-gip method, a compound similarity matrix was computed by the 2d representation based similarity method, simcomp  <cit> . in this work, the similarity matrix is computed by simcomp or the smiles-based similarity functions. the compound similarity matrix is then processed by wnn-gip to predict the protein-drug pairs in four different data sets. the enzyme data is the largest data set with more than  <dig> drugs and  <dig> proteins, while the ion channel and gpcr data sets are about half the size in terms of the number of drugs, and the nuclear receptor data set is the smallest with  <dig> drugs and  <dig> proteins.

a summary of the results for five-fold cross validation experiments for enzyme, ion channels, gpcr, and nuclear receptors data sets are presented in table  <dig>  the performances of the methods are compared using the area under the roc curve  and area under the precision-recall curve  metrics. auc-roc presents the relation of true-positive rate to the false-positive rate, whereas auc-pr shows the proportion of precision to recall. auc-pr is favored when dealing with unbalanced data sets with one class domination  <cit> . protein-drug interaction data sets contain small number of interacting pairs making them skewed.the auc-roc and auc-pr results, with standard deviations given in parentheses, and the total time it takes to create a compound similarity matrix for each kernel are tabulated. the p-values for the statistical significance test comparing each method and simcomp are given in additional file 1: table s <dig> 

enzyme
 <dig>   a

ion channels

gpcr
 <dig>   a
 <dig>   a

nuclear receptors
the best auc-roc and auc-pr results for each data set are indicated in bold. the results that are significantly better than simcomp according to the paired t-test  are indicated with a. the p-values range between  <dig>  and  <dig> , and they are provided in the additional file 1: table s <dig> 



an overall comparison of the auc-roc values shows that the 2d-based method simcomp gives the best results for the enzyme and ion channels data sets. the edit distance performs as well as the other smiles-based methods, even though it is one of the most basic approaches to measure similarity between two strings. the smiles-based substring kernel performs significantly worse than the other kernels on the enzyme and gpcr data sets. a detailed investigation of the results obtained with each similarity method is presented below.

the nlcs and clcs kernels perform close to the edit distance. the clcs, which combines three different modifications of the nlcs function, does not significantly improve upon the original nlcs method for this domain. clcs achieves significantly better auc-pr results than nlcs only on the gpcr data set .

the original smiles-based fingerprint approach  converts smiles representation into a 34d fingerprint, where each dimension represents the frequency of a pre-determined character for a given smiles string. in our study, we compared the frequent characters of our compound data sets with the original  <dig> character list of smifp. the comparison revealed that the characters ‘@’, ‘ ∖’, ‘/’, ‘.’ which are ignored in the original smifp approach, were among the most frequent characters in our data sets. in addition, the ‘%’ character, which is listed as frequent, was a rare character in our data set. ‘@’ and ‘@@’ characters give information on the chirality while ‘/’ and ‘ ∖’ are the directional bonds. therefore, we decided to update the smifp design according to this information by adding five more characters, ‘@’, ‘@@’, ‘.’, ‘ ∖’, and ‘/’, and removing ‘%’. as a result, we created a 38d smifp, which was also tested with cbd and tanimoto similarity coefficient. both auc-roc and auc-pr results show that 38d smifp performs significantly better than 34d smifp on the enzyme data set  when used with cbd and on the gpcr data set when used with tanimoto . in addition, for 34d smifp, use of cbd provides a statistically significant advantage over tanimoto on the enzyme and ion channels data sets in terms of auc-roc score with p-values  <dig>  and  <dig> , respectively.

lingosim  produces significantly better auc-pr results than simcomp with p-value  <dig>  on the gpcr data set . auc-roc results show that lingosim with three character lingo setting performs better than with four and five character settings on the enzyme data set, whereas setting substring length to five works better on the nuclear receptors data set, suggesting that the performance of lingosim with different substring lengths depends on the data set. therefore, we may infer that it is better to test and see the best suitable setting for each data set.

both the smiles-based substring kernel and the lingosim kernels are based on partitioning the smiles string into substrings to calculate similarity. while the lingosim method uses fixed length substrings, the other uses all possible lengths of substrings starting with two characters. the results show that use of different substring lengths for lingosim does not drastically change the results. therefore, the success of lingosim over the smiles-based substring kernel may be due to the fact that the smiles-based substring kernel does not perform length normalization.

lingo-based tf-idf cosine similarity kernel produces significantly better auc-pr results than simcomp on the gpcr data set with p-value  <dig> . this approach uses tf-idf weighting and combines it with the lingo representation of smiles. it treats each smiles string as a document and each lingo in the smiles is considered as a term. tf weighting produces comparable auc-roc and auc-pr results with tf-idf weighting for the gpcr and enzyme data sets. in the nuclear receptors data set, the tf-idf based method performs significantly better  than the tf based method in terms of auc-roc scores, whereas in the ion channels data set the tf-based method produces a significantly better  auc-roc score than tf-idf based method. the better performance of tf-idf weighting over tf weighting suggests that, nuclear receptors data set might contain some distinguishable lingos.

the application of the tf-idf weighting also allows us to further investigate the lingo structures of each compound data set based on their idf values. lingos with lower idf values indicate that they are very common in the smiles strings for the given data sets, similar to the stop words of a document corpus. therefore, we list and investigate the top ten lingos with the lowest idf values for each compound data set and provide the number of compounds they appear in table  <dig>  for instance, “”, carboxyl group, is a common lingo in all data sets.

enzyme/445
gpcr/223

ion channels/210
nuclear receptors/54


as shown in table  <dig> more than half of the top-ten lingos in the gpcr, enzyme, and ion channels data sets are shared. on the other hand, the top-ten lingos in the nuclear receptors data set are slightly different from these. we observe that substrings of “” are common lingos in the nuclear receptors data set. these symbols indicate tetrahedral chirality in clockwise direction, for example, at the c α carbon of the peptide bond.

we also tested two composite kernels in which we combine simcomp with tf-idf based cosine similarity and lingosim . combination of simcomp with tf-idf based cosine similarity kernel produces the best auc-pr results on all data sets. it also has better auc-roc scores amongst all other kernels on the gpcr and nuclear receptors data sets.

except for the ion channels data set, the smiles-based similarity methods perform almost as well as simcomp, a 2d-based method using graph representation to measure similarity. in terms of time complexity, all smiles-based methods perform significantly better than simcomp. for instance, on the gpcr data set, while it takes more than an hour to compute the pairwise similarities among the compounds using simcomp, it only takes one second when the lingo kernel is used. furthermore, lingo  manages to achieve a comparable auc-pr score with simcomp, even though it only uses smiles to measure similarity.

the improvement of the tf-idf/simcomp composite kernel over simcomp, especially on the gpcr data set with a statistical significance in terms of both auc-roc and auc-pr values , shows that the tf-idf based cosine kernel might be useful while combining different types of chemical similarity kernels.

in order to illustrate the improvement of the composite kernel over simcomp, let us investigate a case in which an interaction was not predicted when simcomp was used, but was successfully predicted when the composite kernel of simcomp and tf-idf was used: the interaction of adrenoceptor alpha 2a  with phentolamine mesilate  . the smiles string of phentolamine mesilate contains some rare lingos, namely “nccn” and “ =ncc” with idf values  <dig>  and  <dig> , respectively. considering the idf value of  <dig>  for the most frequent lingo  in the gpcr data set, it becomes more apparent that these rare lingos represent some specific features of a compound. further investigation of other drugs that interact with adrenoceptor alpha 2a shows that, brimonidine tartrate , also has the same two rare lingos and the interaction with this drug is successfully predicted by the composite kernel, but not by simcomp alone. similarly, the interactions of adrenoceptor alpha 2a with clonidine  and clonidine hydrochloride , which contain the “nccn” lingo are also predicted successfully by the composite kernel. therefore, we can suggest that these lingos reveal a pattern among the drugs that bind to adrenoceptor alpha 2a. the inclusion of the tf-idf kernel to the composite kernel helps us discover hidden patterns by highlighting such rare lingos.

CONCLUSIONS
this work aims to provide a comparison of the available chemical similarity measurement methods that utilize smiles representation of molecules. the methods presented here can be used in any model that requires the computation of compound similarity. in this study, we evaluated these methods using one of the state-of-the-art approaches in the drug-target interaction prediction task, namely wnn-gip  <cit> . this model makes use of both chemical similarity of compounds and sequence similarity of proteins and is used on four different drug-protein data sets proposed by yamanishi and coworkers  <cit> . in total,  <dig> string similarity functions including two novel drug similarity methods adopted from the information retrieval domain, namely cosine kernel with tf and tf-idf weighting are tested to assess their performances in predicting protein-drug interactions. we also test two composite kernels created from simcomp and two 1d kernels, tf-idf based cosine similarity and lingosim, respectively. the results are compared with those found using the 2d representation based method simcomp.

with the wnn-gip method, an adjacency matrix is built using the bipartite drug-target interaction network. this adjacency matrix and the compound chemical similarity  and protein sequence similarity  are combined to convert drugs and targets into feature vectors. the bipartite drug-target interaction network includes information on pairs that are known to interact, but lacks information to differentiate between inactives  and untested compounds  and the limitation expressed in laarhoven et al.’s work is present in this work as well  <cit> . the adjacency matrix can be enriched by including information about the strengths of the interactions in the form of ic <dig> values to include inactives.

the comparison of the results using 1d-based similarity methods with those found using the commonly used 2d-based similarity kernel simcomp shows that the 1d-based methods of molecular similarity comparison perform almost as well as the 2d-based methods in the protein-drug interaction task. however, when the run times obtained using the two approaches are compared, 2d representation based descriptors, which use graph algorithms to compare similarity amongst molecules, are computationally more complex than the 1d smiles representation, which is a string of characters. the experiments indicate that smiles-based kernels are significantly faster than the 2d-based simcomp. using smiles string as a molecular similarity kernel is not only fast and straightforward, but also more flexible since any string similarity algorithm can be applied to this representation. furthermore, 2d and 3d representation of a molecule can be derived from its smiles string by applying an efficient reconstruction algorithm  <cit> . our study shows that 1d smiles representation based methods perform close to simcomp with significant computational flexibility and time advantage.

in this work inspired by the information retrieval domain, we proposed the application of cosine similarity with tf and tf-idf weighting as novel ligand similarity kernels. for the gpcr data set, auc-pr results show that the lingo-based tf-idf cosine similarity kernel performs slightly better than simcomp in the task of protein-drug interaction prediction and lingosim with q= <dig> has comparable auc-roc results. furthermore, the composition of tf-idf based cosine similarity kernel with simcomp proves to be promising given its auc-pr results are the best amongst all kernels. use of lingo based tf-idf weighting also allows identification of differences in the distribution of lingos in the compound data sets. it is observed that nuclear receptor drugs differ from the other drugs in terms of common lingos.

availability of the supporting information
the source code for the smiles-based similarity algorithms and compound data are provided in the repository and publicly available at: https://github.com/hkmztrk/smilesbasedsimilaritykernels.

additional file
additional file  <dig> 
n. excel file containing the p-values of the paired t-test comparing the auc-roc and auc-pr score of each method and simcomp for the methods that perform better than simcomp. 



competing interests

the authors declare that they have no competing interests.

authors’ contributions

hÖ carried out the computational studies, performed the implementations of the algorithms, and participated in the design of the study, analysis of the results, and drafting of the manuscript. eo and aÖ participated in the design of the study, analysis of the results, and drafting of the manuscript. all authors read and approved the final manuscript.

