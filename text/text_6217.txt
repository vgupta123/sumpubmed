BACKGROUND
researchers are inundated with data with little obvious information readily accessible; this is especially true in the many disciplines of the life sciences. these data may be very confusing and perplexing to biologists when viewed as a whole. to make these data more meaningful and to derive important biological understanding from these data, researchers have access to many different data processing techniques. one popular and meaningful approach is to cluster data into groups, where each group aggregates data with similar biological characteristics.

data clustering is a very powerful technique in many application areas. not only may the clusters have meaning themselves, but clustering allows for efficient data management techniques in that data that is grouped in the same manner will usually be accessed together. access to data within a cluster may predict that other data in that cluster will be accessed soon; this can lead to optimized storage strategies which perform much better than if the data were randomly stored.

an easy abstraction for clustering data is based on multi-dimensional proximity relationships. while there may be other relationships among the data items, we focus on a distance relationship between data so that a meaningful and simple analytical conclusion can be made from simpler comparisons. using proximity relationships, data is clustered in such a way that the squared-error distortion is minimized both globally and locally. the effectiveness of the algorithms analyzed are measured against this criterion. the mean squared-error distortion is defined as

 d =  <dig> + d <dig> + ... + d <dig> + ... + d2)/n 

where x = {x <dig>  x <dig> ..., xk} is the closest cluster center to a point in v = {v <dig>  v <dig> ..., vn} and n is the total number of points  <cit> .

there are various algorithms that exist to implement clustering in terms of proximity measures. depending on the quality of the cluster, the implementation speed of these algorithms can vary. in this article, we focus on two widely used k-means clustering algorithms. a k-means clustering algorithm can be formally defined as a function that receives as input a set of points in multi-dimensional space and a number, k, of desired centers or cluster representatives; one area of active research is the issue of optimally "seeding" the algorithm with the proper value of k and the starting locations of the k cluster centers. with this input, the algorithm produces an output set of point sets such that each point set has a defined center that minimizes the cumulative distance to the center of all points in that set, for all the possible choices of each set.

we have implemented two versions of the k-means clustering algorithm: lloyd's k-means clustering and progressive greedy k-means clustering. the former is a relatively faster algorithm and is fairly straightforward. the latter is a more conservative approach and can run for a much longer time but can sometimes yield better results in terms of distance measures.

we first describe these algorithms, then we examine these algorithms and discuss some experimental results. these results are analyzed based on the running time for the algorithms and the mean squared-error distortion and are compared in terms of complexity and efficiency.

methods
algorithm description: lloyd's k-means clustering algorithm
lloyd's k-means clustering algorithm was designed by s. p. lloyd  <cit> . given a number k, separate all data in a given partition into k separate clusters, each with a center that acts as a representative. there are iterations that reset these centers then reassign each point to the closest center. then the next iteration repeats until the centers do not move. the algorithm is as follows  <cit> :

 <dig>  assign each data point to the cluster ci corresponding to the closest cluster representative xi

 <dig>  after the assignments of all n data points, compute new cluster representatives according to the center of gravity of each cluster.

while the lloyd's algorithm often converges to a local minimum of the squared error distortion rather than the global minimum  <cit> , it is the faster of the two algorithms discussed in this paper.

we used c as the programming language to implement this algorithm using two primary structures for the points: an array of points that is dynamically declared when the user specifies the input points and arrays for each of k centers. these latter arrays for each center themselves have arrays within them – one for each dimensional in a multi-dimensional space – for the points that are assigned to that particular center .

algorithm description: progressive greedy k-means clustering algorithm
the progressive greedy k-means clustering algorithm is similar to lloyd's in that it searches for the best center of gravity for each point, but it assigns points to a center based on a different technique. in each iteration, lloyd's algorithm reassigns a point to a new center and then readjusts the centers accordingly. the progressive greedy approach does not act upon every point in each iteration; rather the point which would most benefit moving to another cluster is reassigned. every iteration in the progressive greedy algorithm calculates the "cost" of every point in terms of a euclidean distance , i.e.,

 √ 

each point p =  has a cost associated with it in terms of the current center ci =  to which it belongs. the point is a candidate to be moved if the eculidean distance cost can be reduced by moving that point from one cluster ci to another cluster cj =  with that cluster having a closer center. in other words, a point is a candidate to be moved from ci to cj if

 √ - √ 

is greater than  <dig>  once all the candidates are calculated, the point with the largest difference is then moved. if no point has a difference value greater than  <dig>  the algorithm is finished.

each iteration in the progressive greedy k-means clustering algorithm does the following:

 <dig>  calculate the cost of moving each point to each of the other cluster centers as well as the cost of its current cluster center. for every point, store the best change if less than the cost of its current cluster center.

 <dig>  if there is a point with a best change, move it. if there is more than one, pick the one point that when moved sees the greatest improvement.

 <dig>  if nothing else can be done, finished.

the progressive greedy k-means clustering is slower, but the sacrifice is an attempt to minimize the squared-error distortion mentioned earlier.

the implementation of progressive k-means clustering uses the same c data structures as was used for lloyd's.

RESULTS
analysis of biological data
m. b. eisen, et. al.  <cit>  were one of the first groups to apply the clustering approach to the analysis the gene expression data.

we applied both clustering algorithms to the analysis of microarray data. the clustering algorithms classified gene expression data into clusters such that functionally-related genes are grouped together. in the following example  <cit> , the expression information of ten genes is recorded at three different times . the distance matrix of the ten genes was calculated based on the euclidean distance in three-dimensional space. the clustering algorithms grouped the gene expression data into clusters satisfying the following two conditions  <cit> :

• within a cluster, any two genes should be highly similar to each other , and

• any two genes from different clusters should be very different from each other .

both algorithms yielded the same three clusters of the ten genes as follows: {g <dig>  g <dig>  g7}, {g <dig>  g <dig>  g8}, and {g <dig>  g <dig>  g <dig>  g10}. tables  <dig> and  <dig>  respectively, are the running time comparisons and mean squared-distance comparisons of the two clustering algorithms applied to these biological data.

analysis of a randomly-generated data set
we used computer-generated random points to test the two clustering algorithms; presumably, this data represents few natural clusters which should present close to a "worst case" for the clustering algorithms. figures  <dig> to  <dig> show the running time comparisons of various runs using different values of k and different numbers of points. each individual value in these figures is a mean time of multiple runs and is expressed in terms of seconds, though what is important here is the relative size of these values.

a comparison of mean square differences are shown in tables  <dig> and  <dig> using different numbers of points and k values of  <dig> and  <dig>  respectively. in these tables, the maximum and minimum local cluster mean squares are shown alongside the general global average msd.

CONCLUSIONS
the advantage of lloyd's k-means clustering algorithm compared to the progressive greedy k-means clustering algorithm is clear from the above comparisons. based on our implementation, not just in processing time, but also in terms of mean squared-difference, lloyd's k-means clustering algorithm is more efficient. for very large data sets, lloyd's algorithm definitely works faster. when the number of points exceeds  <dig>  the progressive greedy k-means clustering algorithm needs optimization to even to be able to handle the very large floating point values associated with finding the mean squared-difference. without optimization, progressive greedy k-means clustering would not even run without generating floating point exception errors. we therefore conclude that lloyd's k-means clustering algorithm seems to be the better algorithm. however, other circumstances may dictate a different choice in some situations.

competing interests
the authors declare that they have no competing interests.

authors' contributions
gaw carried out the k-means clustering algorithm design and implementation. xh participated in the design and applications of the algorithms. both authors have read and approved the final manuscript.

