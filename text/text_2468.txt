BACKGROUND
the field of proteomics has used mass spectrometry  techniques to provide qualitative results that describe the protein complement of complex protein samples  <cit> . researchers also use modifications of these ms technologies for the quantitative analysis of proteins in complex samples  <cit> , and often hundreds to thousands of proteins are quantified per experiment. some quantitative techniques involve peptide isotopic labeling  <cit> . in contrast, label-free techniques have focused on analysis of ms/ms peak heights or observed peptide spectral count information  <cit> . peptides are produced in an enzymatic digestion of the protein mixture, often using trypsin, which generally cleaves the proteins at the c-terminus of lysine or arginine amino acid residues  <cit> .

spectral counting techniques typically infer the relative quantity of a protein by counting the number of ms detected tryptic peptides associated with the protein being quantified as a fraction of all observed peptide counts. however, spectral counting can be confounded by the fact that the likelihood of peptide detection by ms techniques can vary greatly from one peptide to another based on the particular physicochemical properties of the peptide sequences. peptide physicochemical properties can affect final ms detection through several factors such as the ability to recover peptides during the cation exchange and reversed phase lc stages of sample preparation, variation in ionization efficiency of the peptide in the ion source of a particular ms instrument, and can affect mass analysis in ms and ms/ms modes  <cit> . peptide properties such as peptide length, mass, amino acid composition, solubility, net charge, and other properties can impact peptide detection. this variability in peptide detection can lead to errors in assessing the abundance of the parent protein producing the tryptic peptides.

lu et al.  <cit>  have described a novel technique for protein quantitation, absolute protein expression measurements , where machine learning techniques are used to improve quantitation results over basic spectral counting. in the apex technique, a supervised classification algorithm is used to predict the probability of peptide detection by ms based on the peptide's physicochemical properties. for each protein in the sample, the expected number of peptide observations  is computed based on predicted ms detectability of the corresponding tryptic peptides. in other words, the computationally predicted  spectral counts are corrected for the variable peptide detection probabilities related to peptide physicochemical properties and the specific ms technology in use.

more formally, the apex technique, given by equation  <dig>  <cit> , is a modified spectral counting method in which the total observed spectral count for protein i  is normalized by a computationally predicted or expected count  for one molecule of protein i. the computed values are weighted based on the protein identification probability . a relative apex score is obtained by dividing by the sum of the values for all n proteins being quantified. the user-supplied normalization factor c, typically an estimate of total protein concentration, converts the relative abundance values into absolute terms.

  apexi=pi∑k=1npk×c 

apex abundance estimates are absolute in the sense that they are not relative to a second dataset representing a different condition or control, as is done in some relative protein quantitation methods such as silac  <cit> . also, the abundance estimates within a sample are normalized and can be readily compared to estimates from other samples. while a particular protein's abundance is presented relative to all proteins within the sample, multiplication by c puts the abundance values into absolute terms.

this paper describes a new software tool, the apex quantitative proteomics tool, an implementation of the apex technique for the quantitation of proteins based on lc- ms/ms proteomics results. the main role of the tool is to compute apex protein abundance values using equation  <dig>  however the tool also supports preparation of prior information, such as derivation of oi values for proteins under study, as well as post-processing data analysis.

the apex tool supports three primary processing tasks as shown in figure  <dig>  the first task is the construction of a training data set that relates prior peptide ms data to a set of peptide physicochemical properties which is used to predict peptide ms detection probabilities. the peptide ms detection probabilities are needed to estimate expected spectral counts for each protein . the use of prior  ms data insures that the later calculations reflect the specific laboratory protocols, ms instrumentation, instrument settings, and the particular proteins under study and other factors that could influence peptide detection. the training data can be an independent high-quality ms dataset or even an experimental dataset.

the second processing task is the generation of an oi value for each protein under study. this step uses the generated training data, peptide physicochemical properties and peptide ms detection calls, to build a classifier to predict peptide detection probabilities. each protein sequence from a supplied fasta sequence file undergoes an in silico trypsin digestion and each peptide is assigned an ms detection probability. the probabilities for each peptide derived from protein i are summed to produce the protein's oi value. this oi value is the predicted peptide detection  count for one molecule of protein i.

the third processing task uses the previously generated oi values and lc-ms/ms experimental results, which provide ni and pi, to produce protein abundance values according to equation  <dig>  these quantitation results can be piped into several post-processing tools.

implementation
building training data
the construction of training data, diagramed in figure  <dig>  involves an initial in silico trypsin digestion of a selected set of protein sequences, enabling the generation of a species- or condition-specific training dataset. prior ms results are used to provide information on whether the tryptic peptides are observed or not. the input protein set represents a collection of proteins that are most likely to be correctly identified by ms. the particular proteins selected for input are not critical; however, they should be proteins that are present in the input ms result and give rise to tryptic peptides that have physicochemical properties that vary and result in a mix of observed and non-observed peptides. these input proteins are specified by a protein accession list and the corresponding protein sequences are supplied in a standard fasta format file. the selection of a training dataset relies on the fact that even for high abundance proteins with high confidence identifications  some peptides are observed in the ms/ms data, whereas others are not. the observation and non-observation of these peptides is used for training. the types and identities of the training proteins  are independent of the experimental data that is to be analyzed later; however, they should be selected to represent an unbiased representation of peptide detection given the specific ms conditions. some of the peptide sequences derived from in silico digestion of the input proteins may be generated from more than one parent protein. these peptides are termed degenerate peptides and the current implementation insures that peptides within the training set are unique to deal with the possibility that more than one protein may give rise to them during digestion. the observation or lack of observation of these degenerate peptides in prior ms results is dependent on the nature of the peptide. the particular parent protein or proteins giving rise to the peptide is not of consequence to peptide detection by ms.

several peptide physicochemical properties are computed for each of the corresponding tryptic peptides; the apex tool supports the computation of as many as  <dig> different properties. among these properties are peptide mass, length, amino acid composition, and properties related to charge, hydrophobicity measures, and amino acid frequencies within secondary peptide structures. the value of each peptide property, in terms of predicting whether a peptide will be observed by ms, varies based on the ms technology in use  <cit> . the  <dig> peptide properties available in the apex tool are a combination of properties identified in the apex technique paper by lu et al.  <cit>  and of those described in the paper by mallick et al.  <cit> . the list of peptide properties can be found in the apex manual's appendix.

next, prior ms result files in standard protxml format are searched for each tryptic peptide sequence and each tryptic peptide is given a peptide ms detection call which categorizes it as being either observed or not observed within the ms result. the input protxml ms result files are generated by preprocessing standard sequest or mascot files using peptideprophet™ and proteinprophet™ which are part of the trans-proteomic pipeline   <cit> . once the peptide ms detection calls have been determined, the data is output in a matrix format as depicted in figure  <dig>  each row in the matrix captures data related to a single peptide and includes a set of computed peptide physicochemical properties and the peptide ms detection call. the training data is output to a file in the attribute-relation file format . the arff format represents the matrix of training values in a comma delimited format and has a section that identifies the attributes or columns in the data matrix. the arff format is used as input by the weka collection of machine learning data mining tools  <cit> . the generated training data file merges peptide properties and peptide ms detection calls, and will be used to train a classifier to compute peptide detection probabilities based on peptide physicochemical properties.

oi value generation
in the second processing step, the apex tool calculates oi values for all proteins under study using the training arff file created in process  <dig> and sequences of the proteins of interest. the protein sequences are input in a fasta format file. they undergo an in silico trypsin digestion and peptide properties are computed for each peptide. the training data is used to train a classifier which generates individual peptide detection probabilities based on peptide properties. for each particular protein i, the oi value is the summation of all peptide detection probabilities for the peptides derived from protein i. this value estimates the number of peptides derived from one molecule of protein i that will be observed by ms/ms analysis. figure  <dig> illustrates the oi generation process.

the classification algorithms in the apex tool are implementations from the weka data mining software package. weka is an extensive collection of open source machine learning algorithms implemented in java  <cit> . the apex tool allows the user to select from three different weka classifier algorithms: random forest, ridor , and j <dig>  decision trees. the original work on the apex technique  <cit>  showed that averaging classifier models through bootstrap aggregating  improved classifier performance  <cit> . this work also found performance improvements when building the classifier as a cost sensitive classifier to account for the bias in the training data toward non-observed peptides; training data peptides were not evenly split between observed and non-observed such that non-observed peptides are more prevalent. the apex tool provides both the option to perform classifier algorithms using bagging and cost sensitive evaluation. although the apex tool provides three classifier options by default, the tool also includes a classifier configuration file that can be edited to allow one to configure the apex tool to make use of any classifier algorithm implemented in the weka tool set. the classifier configuration file lists the available classifiers and defines the unique parameter attributes for each classifier. random forest is the default classification algorithm within the apex tool since this algorithm had been found to perform best  <cit> . the random forest classifier has worked well in our evaluation. the tool has a utility to permit users to evaluate classifier performance in the context of their own data.

computing apex quantitation values
the third and primary processing task of the apex tool uses the oi values and an ms data file in protxml format as input to generate abundance values for each protein according to equation  <dig>  the ms protxml file supplies protein identification probabilities  and spectral counts . during execution, the input protein set from the protxml file is presented in a list in decreasing pi rank so that protein identifications of highest confidence are displayed first. the pi values are used to compute a false positive rate  for any selected subset of the protein list according to equation  <dig>  <cit>  where k represents the number of selected proteins from the full list of input proteins in the input file sorted by pi.

  fpr=1k∑i=1k 

the fpr can be used to select a subset of high confidence proteins on which to perform apex quantitation. the apex tool thereby provides the user with a choice to determine the cutoff fpr for apex quantitation, typical cutoffs are  <dig> or 5%. following the selection of the protein list, an output file with the apex quantitation results is generated. the output file captures protein identifier or accession, protein descriptive annotation available in the protxml input file, input parameters, input file paths, input ms values , oi values, and the apex abundance values.

apex tool implementation details and architecture overview
the apex tool was coded using java and therefore is operating system independent. the apex tool is compatible with computers running microsoft™ windows®, linux®, and mac® osx. the apex tool software design provides a flexible framework to support future modifications. figure  <dig> provides a schematic overview of the apex tool's architecture and package structure. the primary data structure consists of a three tier system in which a protein list object, apexproteinlist, contains a collection of apexprotein objects, that in turn can contain a collection of apexpeptide objects. this simple structure maintains a connection between peptide objects and their parent proteins. protein and peptide objects serve as container objects for sequence, annotation, and numerical data fields required for apex computation. data loaders populate these structures from fasta or protxml files. worker or utility classes work on apexprotein objects to perform tasks such as in silico digestion to produce child apexpeptide objects and they work on apexpeptides to compute peptide physicochemical properties.

user interface classes are separated from processing classes by the use of a processing event dispatcher that spawns processing threads as needed. developers can easily add new processing tasks by extending an abstract process panel class that presents parameter controls and by adding a new processing class or adding methods to the core processing class. constants such as amino acid level physicochemical properties are contained in a single class that contains numerical constants. unified modeling language  class diagrams that cover several of the key java classes within version  <dig>  of the apex tool are available within the apex tool source code download.

RESULTS
the apex quantitative proteomics tool is a free open source java application for the quantitation of proteins from lc-ms/ms data sets. the apex tool has a graphical user interface  where the parameter controls for each processing task are encapsulated in a different tabbed panel in the interface. the three major processing tasks, training data construction, generation of oi values, and apex abundance computation are each handled on separate panels in the interface . each of these primary processing tasks accepts file and parameter inputs by setting controls on their dedicated parameter panels. the tool has an integrated help system that can be accessed via information buttons on the parameter panels or via the help and information menu. the apex tool includes a tutorial and sample data to help the user become familiar with the basic use of the tool.

in addition to protein quantitation, the apex tool also offers basic utilities for post processing of quantitation results . one utility merges multiple apex result files into a tab delimited matrix that contains protein quantitation results. each data row contains protein annotations and a set of abundance values that represent protein expression over the various conditions under study. results are aligned so that each row represents a vector of abundance values for a particular protein. the tab delimited data matrix can be loaded directly into the multiexperiment viewer   <cit> . mev contains many methods to cluster proteins based on expression profile and can perform statistical analyses to find proteins showing differential expression in accordance with the experimental conditions.

the apex tool also provides a two sample z-score test for differential expression as described in lu et al.  <cit> . this test handles experimental designs with two samples, each representing a condition or state under study. during the test each protein has a z-score computed that reflects differential expression by considering the proportion of spectra in the two samples attributable to the protein being scored. proteins with very different total spectral counts  between the two samples and whose spectral counts are sufficiently large tend to have high z-scores. the formula and underlying assumptions behind the test are given in lu et al.  <cit> . the z-score has an associated a p-value for each protein which reflects the significance of the observed expression change by reporting the probability of having an absolute z-score of the observed magnitude or greater. the apex interface provides a graphical representation of the z-score results from the two files to allow the selection of a significant protein lists based on the user defined p-value cutoff . the test outputs a summary result file that contains a row for each protein listing the protein annotations, apex values for the two conditions under study, apex abundance fold change, ni values, computed z-score and p-value.

the third utility provides classifier cross-validation which reports on the performance of the selected classifier and particular parameter selections. this process requires an input training data file and iteratively uses a randomly selected subset of the data to train the classifier and tests the classifier's ability to predict peptide detection calls on the rest of the data. a number of performance statistics are reported, for example true positive rate, false positive rate, prediction accuracy, and recall, that can be saved to a text file. this feature allows to determine which classifiers, classifier parameters, and peptide properties perform best considering the nature of the data and the ms technology in use.

several potential features are targeted as future enhancements of the apex tool. future versions of the tool will include improved support for selecting proteins for the generation of peptide sequences for classifier training data. the training data should include a set of peptides with sufficient representation of observed and non-observed peptides based on prior ms results. the future apex tool will enable the user to set protein selection criteria such as number of proteins or peptides to include and a minimum pi value. the training data selection enhancement will also include randomized selection of training proteins from a larger pool of proteins that pass the imposed criteria. in addition, we will allow users to exclude degenerate peptides that map to more than one parent protein.

data preprocessing options are another area of future development in the apex tool. apex computation requires a protein identification probability . the original apex methodology paper  <cit>  and this implementation both depend on the trans-proteomic pipeline  to preprocess ms data to compute the required pi values. support for tpp derived input will continue but we will expand input options for users not using the tpp for upstream data processing.

thus far, our data are based on peptide detection and fragmentation in 3d and linear ion trap mass spectrometers . however, the apex tool is not limited to data processing from these mass analyzers. the training data generation uses prior ms results to insure that the training data reflects the peptide detection capabilities of the instrumentation in use. in turn, oi values generated from the training data will adjust based on peptide detection sensitivity tendencies of the instrument in use. the apex protocol site  <cit>  has posted files containing oi values generated from both lcq and ltq-orbitrap™ ms data for three different organisms, e. coli, yeast, and human. the apex tool can be used to construct training data and generate oi values for data derived from any ms instruments, reflecting characteristics of the individual instruments. additional peptide properties can be incorporated as they are identified by users as valuable toward improving peptide detection predictions. future versions of the apex tool will include a new utility to assess the predictive value of each peptide property given a particular training data set, classifier algorithm and associated parameters. the accuracy of estimated protein abundances depends on the quality of peptide detection probabilities. further work in this area will refine understanding of peptide properties that are good predictors of peptide detection by particular ms techniques, as an extension of published work  <cit> .

CONCLUSIONS
the apex quantitative proteomics tool provides researchers with the ability to quantify proteins observed in lc-ms/ms proteomics data. this process requires generation of classifier training data and the computation of oi values, i.e., the expected spectral counts for each protein. both the training data and oi values are based on prior ms results that in turn relate to the specific conditions within the user's protocol, including sample preparation procedures, ms technology, and instrumentation settings. customized oi value generation, facilitated by the apex tool, means that the final quantitation values take into account the user's settings and are thus more accurate.

the apex tool is a free open source tool and has an intuitive user interface that logically subdivides the controls for the various processing tasks and utilities onto separate tabbed panels. the integrated help and information system and the manual describe both the mechanics of processing data as well as the precise details of how the data is handled at each step of the process. the apex tutorial provides a step-by-step introduction for the first time user. source code allows those interested in the computational details to fully explore the inner workings of the tool while the simple software architecture will allow developers to modify or expand on existing utilities.

availability and requirements
• project name: apex quantitative proteomics tool

• project home page: 

• operating systems: platform independent

• programming language: java

• other requirements: java  <dig>  or higher, trans-proteomic pipeline  tools to process mascot dat files or sequest html summary files to produce protxml input files. tpp tools: 

• license: gnu gpl v <dig> 

• any restrictions to use by non-academics: none.

abbreviations
ms: mass spectrometry; lc-ms/ms: liquid chromatography with tandem mass spectrometry; apex: absolute protein expression; arff: attribute relation file format; fpr: false positive rate.

authors' contributions
jcb – software engineering, tool design and development, and primary manuscript author, sk – project conception, provided proteomics domain expertise, researched apex technique, provided training and test data sets, tested software prototypes, software design, scientific consultation, and manuscript review, cv – an original author of the apex technique and protocol papers, provided test data sets, support for computational implementation, prototype testing, manuscript review, emm – an original author of the apex technique and protocol papers, provided test data sets, support for computational implementation, prototype testing, manuscript review, arr – researched technique, drafted original perl implementation, technique evaluation, rw – software design, scientific  consultation, sh – input on software design, proteomics domain consultation, manuscript, esf – support for network upgrades for data preprocessing, software design, ais – software design, manuscript contributions, rdf – manuscript contributions, project oversight, snp – manuscript contributions, project oversight, rp – project conception, provided proteomics domain expertise

