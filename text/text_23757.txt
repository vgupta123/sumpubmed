BACKGROUND
the problem of finding substrings of a text similar to a given pattern has been intensively studied over the past decades, and it is a central problem in a wide range of applications, including signal processing  <cit> , information retrieval  <cit> , searching for similarities among biological sequences  <cit> , file comparison  <cit> , spelling correction  <cit> , and music analysis  <cit> . some examples are recovering the original signals after their transmission over noisy channels, finding dna subsequences after possible mutations, and text searching where there are typing or spelling errors.

approximate string matching, in general, consists in locating all the occurrences of substrings inside a text t that are similar to a pattern x. it consists of producing the positions of the substrings of t that are at distance at most k from x, for a given natural number k. for the rest of this article, we assume that k <|x| ≤ |t|. we focus on online searching--the text cannot be preprocessed to build an index on it. there exist four main approaches to online approximate string matching: algorithms based on dynamic programming; algorithms based on automata; algorithms based on word-level parallelism; and algorithms based on filtering. we focus on algorithms based on dynamic programming. there mainly exist two different distances for measuring the approximation: the edit distance and the hamming distance.

the edit distance between two strings, not necessarily of the same length, is the minimum cost of a sequence of elementary edit operations between these two strings. a restricted notion of this distance is obtained by considering the minimum number of edit operations rather than the sum of their costs. the hamming distance between two strings of the same length is the number of positions where mismatches occur between the two strings.

alignments are a commonly used technique to compare strings and are based on notions of distance  <cit>  or of similarity between strings; for example, similarities among biological sequences  <cit> . alignments are often computed by dynamic programming  <cit> .

a gap is a sequence of consecutive insertions or deletions  of letters in an alignment. the extensive use of alignments on biological sequences has shown that it can be desirable to penalise the formation of long gaps rather than penalising individual insertions or deletions of letters.

the notion of gap in a biological sequence can be described as the absence  of a fragment, which is  present in another sequence  <cit> . gaps occur naturally in biological sequences as part of the diversity between individuals. in many biological applications, a single mutational event can cause the insertion  of a large dna fragment, so the notion of gap in an alignment is an important one. moreover, the creation of gaps can occur in a wide, but bounded, range of sizes with almost equal likelihood.

a number of natural processes can cause gaps in dna sequences: long pieces of dna can be copied and inserted by a single mutational event; slippage during the replication of dna may cause the same area to be repeated multiple times as the replication machinery loses its place on the template; an insertion in one sequence paired with a reciprocal deletion in one other may be caused by unequal cross-over in meiosis; insertion of transposable elements--jumping genes--into a dna sequence; insertion of dna by retroviruses; and translocations of dna between chromosomes  <cit> . the accurate identification of gaps is shown to be fundamental in various studies on disorders; for example, on hajdu-cheney syndrome  <cit> , a disorder of severe and progressive bone loss.

the focus of this work is directly motivated by the well-known and challenging application of re-sequencing--the assembly of a genome directed by a reference sequence. new developments in sequencing technologies  allow whole-genome sequencing to be turned into a routine procedure, creating sequencing data in massive amounts. short sequences  are produced in huge amounts , and in order to determine the part of the genome from which a read was derived, it must be mapped  back to some reference sequence, a few gigabases long.

a wide variety of short-read alignment programmes  were published in the past five years to address the challenge of efficiently mapping tens of millions of short reads to a genome, focusing on different aspects of the procedure: speed, sensitivity, and accuracy. these tools allow for a small number of mismatches in the alignment; however, their ability to allow for gaps varies greatly, with many performing poorly and other not allowing them at all.

most short-read alignment programmes apply the well-known scheme of seed-and-extend  <cit> . after aligning a substring of the reference sequence against the seed  very fast, a short-read alignment programme must compute the best possible alignment between a substring of the reference sequence succeeding and the remaining suffix of the read . this is achieved by allowing a bounded number of mismatches  and gaps .

from figure  <dig>  we observe that a gap might need to be inserted in the leftmost position of the alignment . however, we are not able to know the length of the substring of the reference sequence to be aligned beforehand. due to this observation, it is clear we need an intermediate between the global  and the local alignment , known as semi-global alignment, that allows the insertion of a gap at the end of an alignment with no penalty .

example  <dig>  let t = cgtccgaagt and x = tacgaa. figures 2a, b, and 2c illustrate the global, the local, and the semi-global alignment, respectively.

although gaps may occur in range of lengths, the short length of reads means large gaps can not be confidently detected directly. in figure  <dig>  the distribution of lengths of gaps in homo sapiens exome sequencing is demonstrated. the illustrated distribution agrees with the distribution in other studies on gaps . figure  <dig> represents a gap occurrence frequency of approximately  <dig>  × 10- <dig> across the exome. this frequency is analogous to the ones observed in other studies on exome sequencing, plant genomes, and viruses .

moreover, figure  <dig> shows an exponential decrease in the occurrence of gaps as the length increases and a preference for lengths which are multiples of  <dig>  the presence of many gaps in short reads in the order of 25- <dig> base pairs  is rather unlikely due to the low gap occurrence frequency. hence, applying a traditional dynamic-programming approach, which essentially cannot bound the number of deletions and insertions in the alignment, would greatly affect the mapping confidence.

motivated by the aforementioned observations, in  <cit> , the authors presented gapmis, a tool for pairwise global and semi-global sequence alignment with a single gap. in this article, we present libgapmis, the analogous library implementation. libgapmis also includes two highly optimised versions: one based on streaming simd extensions ; and one based on graphics processing units . proof of concept versions of gapmis and libgapmis were presented in  <cit>  and  <cit> , respectively. millions of pairwise sequence alignments, performed here under realistic conditions based on the properties of real full-length genomes, demonstrate that libgapmis can increase the accuracy of extending short-read alignments end-to-end compared to more traditional approaches. the importance of our contribution is underlined by the fact that the provided open-source library functions can directly be integrated into any short-read alignment programme.

definitions and notation
in this section, we give a few definitions, generally following  <cit>  and  <cit> .

an alphabet ∑ is a finite non-empty set whose elements are called letters. a string on an alphabet ∑ is a finite, possibly empty, sequence of elements of ∑. the zero-letter sequence is called the empty string, and is denoted by ε. the set of all the strings on the alphabet ∑ is denoted by ∑*. the length of a string x is defined as the length of the sequence associated with the string x, and is denoted by |x|. we denote by x, for all  <dig> ≤ i ≤ |x|, the letter at index i of x. each index i, for all  <dig> ≤ i ≤ |x|, is a position in x when x ≠ ε. it follows that the ith letter of x is the letter at position i in x, and that x = x. a string x is a substring of a string y if there exist two strings u and v, such that y = uxv. let x, y, u, and v be strings, such that y = uxv holds. if u = ε, then x is a prefix of y. if v = ε, then x is a suffix of y.

let x be a non-empty string and y be a string. we say that there exists an occurrence of x in y, or, more simply, that x occurs in y, when x is a substring of y. every occurrence of x can be characterised by a position in y. thus we say that x occurs at the starting position i in y when y = x. it is sometimes more suitable to consider the ending position i + |x| -  <dig>  the hamming distance δh for two strings of the same length, is defined as the number of positions where the two strings have different letters. a don't care letter is a special letter that does not belong to alphabet ∑, and matches with itself as well as with any letter of ∑. it is denoted by ★. a gap is a finite sequence of such don't care letters. a gap string is a finite, possibly empty, sequence of elements of the alphabet ∑ ∪ {★}. two letters a and b of alphabet ∑ ∪ {★} are said to correspond  if they are equal, or, if at least one of them is the don't care letter. the g-distance, denoted by δg, for two gap strings of the same length is defined as the number of positions in which the two strings possess letters that do not correspond. a gap string x is called single-gap string if there exist two strings u and v on alphabet ∑ and a gap g, such that x = ugv. let conc be an operation that, given a gap string

 y′=y0g0y1g1…yn-2gn-2yn- <dig> 

where yi ∈ ∑*, for all  <dig> ≤ i < n, and gj ∈ {★}*, for all  <dig> ≤ j < n -  <dig>  returns the string y = y0y <dig> ... yn- <dig>  such that y ∈ ∑*.

the approximate string matching with k-mismatches and a single gap problem can now be formally defined:

problem  <dig>  given a text t of length n, a pattern x of length m ≤ n, an integer k, such that  <dig> ≤ k < m, and integers α and β, such that  <dig> ≤ α ≤ β and β < n, find all prefixes of t, such that for each prefix y

• either there exists a single-gap string y', with a gap g, such that y = conc, δg ≤ k, and α ≤ |g| ≤ β;

• or there exists a single-gap string x', with a gap g, such that x = conc, δg ≤ k, and α ≤ |g| ≤ β;

• or δh  ≤ k and α =  <dig> 

example  <dig>  let t = agcagaggagcaggcgttccgtggt, x = accgt, k =  <dig>  α =  <dig>  and β =  <dig>  a solution to this problem instance is the ending position  <dig>  since there exists a single-gap string x' = acc★★★★★★gt, with a gap g = ★★★★★★, such that x = conc, δg =  <dig>  and |g| =  <dig> 

let g be a matrix, where g contains the minimum number of mismatches of the alignment between substring t of t and substring x of x allowing the insertion of a single gap either in t or in x, for all  <dig> ≤ i ≤ n,  <dig> ≤ j ≤ m. for all  <dig> ≤ j ≤ m and  <dig> ≤ i ≤ n, we say that x matches t with at most k-mismatches and a single gap if and only if g ≤ k. matrix g is defined by the following recurrence  <cit> .

 g=min{g+δh,g}i>jmin{g+δh,g}i<jg+δhi=j. 

in order to compute the exact location of the inserted gap, either in the text or in the pattern, we also need to define a matrix h  <cit> , such that

 h=j-is.tg=gandi<ji-js.tg=gandi>j0otherwise 

example  <dig>  let t = aggtcat, x = gggta, and β =  <dig>  figure 4a and 4b illustrate matrix g and matrix h, respectively.

algorithm gapmis
given the text t of length n, the pattern x of length m, and the threshold β as input, algorithm gapmis, first introduced in  <cit>  , computes matrices g and h. in fact, we only need to compute a diagonal stripe  of width 2β +  <dig> in matrix g and in matrix h. as a result, algorithm gapmis computes a pruned version of matrices g and h, denoted by gp and hp, respectively .

proposition  <dig>  there exist at most 2β +  <dig> cells of matrix g that solve problem  <dig> 

proposition  <dig>  problem  <dig> can be solved by algorithm gapmis in time o.

example  <dig>  let t = aggtcat, x = gggta, k =  <dig>  a =  <dig>  and β =  <dig>  starting the trace-back from cell h <cit>  , yields a solution since g <cit>  ≤  <dig> . trivially, the inserted gap is in the pattern, and its length is  <dig>  finally, we can find the position of the inserted gap  using matrix h. hence, a solution to this problem instance is the ending position  <dig> , since there exists a single-gap string x' = gggt★a, with a gap g = ★, such that x = conc, δg =  <dig>  and |g| =  <dig> 

alternatively, we could compute matrix g and matrix h based on a simple alignment score scheme depending on the application of the algorithm , and compute the maximum score in time Θ by proposition  <dig> 

library libgapmis
in this section, we give a brief description of the library implementation. libgapmis was implemented in the c programming language. first, we start by describing the standard cpu version of the library. thereafter, we discuss some technical issues regarding the sse- and gpu-based implementations. finally, we describe how the provided functions are extended to accommodate a variable, but bounded, number of gaps in the alignment.

algorithm gapmis was implemented as a function computing matrices g and h based on a simple alignment score scheme. the scheme uses the scoring matrix ednafull  <cit>   for dna  sequences to assign scores for every possible nucleotide  match or mismatch. moreover, it uses affine gap penalty to score the insertion of a gap of n > <dig> positions as follows:

 gapopeningpenalty+×gapextensionpenalty. 

finally, the total score for each alignment is obtained by adding these two scores: scoring matrix and affine gap penalty scores. the optimal alignment is the alignment with the highest such total score. the same alignment score scheme is applied in package emboss  <cit> .

we implemented the following functions:

• gapmis_one_to_one: this function finds the optimal semi-global alignment between two sequences. it first implements algorithm gapmis in time o; thereafter, it finds the optimal semi-global alignment in time o. finally, gapmis_one_to_one finds the position of the single gap via backtracking in matrix h in time o. the user can omit computing the position of the single gap and thereby computing matrix h.

• gapmis_one_to_many: this function uses function gapmis_one_to_one as building block. it computes the ℓ optimal semi-global alignments between a query sequence and a set of ℓ target sequences.

• gapmis_many_to_many: this function uses function gapmis_one_to_many as building block. it computes the κ × ℓ optimal semi-global alignments between a set of κ query sequences and a set of ℓ target sequences.

finally, we implemented functions results_one_to_one, results_one_to_many, and results_many_to_many for generating the visualisation of the analogous output in a format similar to the one generated by emboss.

sse-based implementation
the sse-based implementation is a direct application of the inter-sequence vectorisation scheme. it has been used to accelerate the smith-waterman algorithm and analogous dynamic-programming algorithms  <cit> . algorithm gapmis, under this vectorisation scheme, uses sse instructions to simultaneously compute multiple separate matrices  corresponding to alignments of one query sequence against multiple other target sequences.

currently, the vectorisation uses  <dig> bit floating-point arithmetics to represent scores, implying that, on cpus with sse <dig> vector units, a vector width w :=  <dig> is used. by restricting scores to integer values and using  <dig> bit integers, we may increase the vector width to w :=  <dig>  for performance-related reasons, the sse-based version only supports the computation of alignment scores, and, therefore, does not support backtracking. the functions provided are gapmis_one_to_many_opt_sse and gapmis_many_to_many_opt_sse, which make use of the aforementioned vectorisation scheme to compute the scores for each pair of sequences. finally, we make use of the purely sequential function gapmis_one_to_one to find the position of the single gap via backtracking in matrix h. in order to further accelerate the computations, the user may optionally and transparently execute these functions on multi-core architectures by setting the number of threads. more technical details of the sse-based implementation can be found in  <cit> .

gpu-based implementation
the function gapmis_one_to_one was ported to gpus using opencl in order to maintain a vendor-independent gpu version. in analogy to the sse-based implementation, only the computation of alignment scores are offloaded to the gpu. the gpu implementation is also similar to the sse-based implementation in the sense that multiple dynamic-programming matrices are computed simultaneously.

aligning a set of query sequences x¯={x <dig> …,xk} against a set of target sequences t¯={t <dig> …,tℓ} is achieved by launching a total of κ × ℓ threads on the gpu to exploit inter-sequence parallelism--similar to the aforementioned sse vectorisation scheme. gpu threads are grouped such that every thread group aligns one query sequence against all target sequences. each thread in a thread group computes a different dynamic-programming matrix sequentially and independently of all other threads. due to the independence between the individual alignment tasks, we refer to this scheme as inter-task parallelisation. in order to prevent memory-access conflicts and also maximise memory throughput, an inter-sequence device memory organisation scheme is applied .

similar to the sse-based version, the functions provided are gapmis_one_to_many_opt_gpu and gapmis_many_to_many_opt_gpu. finally, we make use of the purely sequential function gapmis_one_to_one to find the position of the single gap via backtracking in matrix h. more technical details of the gpu-based implementation can be found in  <cit> .

accommodating multiple gaps
the presence of multiple gaps is unlikely given the observed gap occurrence frequency in real-life applications:  <dig>  × 10- <dig> in the human exome ,  <dig>  × 10- <dig> in beta vulgaris  <cit> ,  <dig>  × 10- <dig> in arabidopsis thaliana  <cit> , and  <dig>  × 10- <dig> in bacteriophage phix <dig>  <cit> . however, in order to increase the flexibility of our library, we implemented two additional functions, gapmis_one_to_one_f and gapmis_one_to_one_onf, to allow for a variable, but bounded, number of gaps in the alignment.

• gapmis_one_to_one_f: this function provides the user the option to split the query sequence into f fragments, based on the observed gap occurrence frequency and the query length, by taking the number of fragments as input argument. it then uses function gapmis_one_to_one to perform a single-gap alignment for each fragment independently. the total score of the alignment is obtained by adding the f individual scores of the fragments. we denote this function by gm -f <int>, where <int> is the number of fragments f used as input argument.

• gapmis_one_to_one_onf: this function computes the alignment by using the optimal number of fragments. first, it takes the maximum number of fragments as input argument, say fmax, and only computes the total score of the alignments, for each different number  <dig>   <dig>  ..., fmax of fragments. it then uses function gapmis_one_to_one_f to compute the alignment by passing the optimal number of fragments--the one that gives the maximum total score in the previous step--as input argument. we denote this function by gm -onf <int>, where <int> is the maximum number of fragments fmax used as input argument.

experimental 
RESULTS
the experiments were conducted on a desktop pc using up to  <dig> cores of intel i <dig>  <dig> cpu at  <dig>  ghz under linux, and an nvidia geforce  <dig> gpu with  <dig> cuda cores and  <dig> gb ddr <dig> device memory. libgapmis is distributed under the gnu general public license . the library is available at http://www.exelixis-lab.org/gapmis, which is set up for maintaining the source code and the man page documentation.

to the best of our knowledge, lipgapmis is the first library for extending pairwise short-read alignments. the main design goal of lipgapmis is to identify a single gap in the alignment . therefore, in this section, we focus on comparing the performance of function gapmis_one_to_one to the analogous performance of emboss needle. the latter implements needleman-wunsch algorithm for semi-global alignment. the needleman-wunsch algorithm is the traditional approach used for semi-global alignment. needle is, up-to-date, one of the most popular pairwise sequence alignment programmes for global and semi-global alignment.

we generated  <dig>   <dig> pairs of  <dig> bp-long sequences on the dna alphabet. initially, each pair consisted of two identical sequences. subsequently, we inserted:

• a single gap with a uniformly random length that ranged between  <dig> and  <dig> into one of the two sequences;

• a uniformly random number of mismatches that ranged between  <dig> and  <dig> 

since the presence of multiple gaps is unlikely based on the gap occurrence frequency observed in real datasets, this experimental setting aims to demonstrate the suitability of the proposed algorithm compared to more traditional approaches in identifying the simulated inserted gap.

we seamlessly integrated function gapmis_one_to_one into a test programme, denoted by gapmis, for computing the optimal semi-global alignment between a pair of sequences. in each case, for a fair comparison of needle and gapmis, an effort was made to run the programmes under as similar conditions as possible. in gapmis, we additionally used function results_one_to_one to produce the corresponding output. while parsing the output generated by the two programmes, we considered any inserted gap as gap, excluding, however, a gap inserted in the end of the alignment.

we consider as valid those alignments where the number of inserted gaps is less or equal to the ones originally inserted. furthermore, we consider as correct those valid alignments with gaps whose total length is smaller or equal to the length of the ones originally inserted and with number of mismatches being less or equal to the ones originally inserted.

the above experimental procedure was repeated using different gap opening and gap extension penalties. as corroborated by the results in tables  <dig>   <dig>   <dig>  gapmis is more suitable for identifying single alignment gaps in all cases. as it is also shown in  <cit>  and  <cit> , needle cannot--by design--guarantee the insertion of at most one gap into the alignment, even when setting the gap opening penalty to  <dig>  and the gap extension penalty to  <dig> . the correct  alignments of tables  <dig>   <dig>   <dig> are illustrated in figure  <dig>  furthermore, we compared the processing times of gapmis to those of needle by generating  <dig>  pairs of  <dig>   <dig>   <dig>  and  <dig> bp-long dna sequences in analogy to the aforementioned experiment. we used two different versions of gapmis: one with the modifier -m  <dig> to set β = 30; and one with β = n -  <dig>  where β is the maximum allowed length of the single gap, and n is the length of the longest sequence.

the valid and correct alignments of  <dig>   <dig> pairs of  <dig> bp-long generated sequences with gap opening penalty  <dig>  and gap extension penalty  <dig> .

the valid and correct alignments of  <dig>   <dig> pairs of  <dig> bp-long generated sequences with gap opening penalty  <dig>  and gap extension penalty  <dig> .

the valid and correct alignments of  <dig>   <dig> pairs of  <dig> bp-long generated sequences with gap opening penalty  <dig>  and gap extension penalty  <dig> .

the results in figure  <dig> show that gapmis was able to complete the assignment up to 20× faster than needle. although the asymptotic complexity of the two algorithms is the same, the number of arithmetic operations required by algorithm gapmis is substantially lower. this can be easily explained by examining the recurrence relations of the two algorithms. the version with the modifier -m  <dig> was always the fastest confirming our theoretical results. note that, it only computes a narrow band in the dynamic-programming matrices .

we also evaluated the time efficiency of the accelerated sse- and gpu-based versions of libgapmis, by comparing their processing times against the ones of the standard cpu version. in particular, we generated a  <dig> bp-long dna query sequence and  <dig>   <dig>   <dig>  <dig> bp-long dna target sequences. this represents a realistic setting for re-sequencing applications because the seed part of a short read usually occurs in thousands or millions of positions along the reference sequence. hence an important problem in re-sequencing is the efficient and accurate extension of these thousands to millions of potential alignments. we used the following versions of the function gapmis_one_to_many:

• the cpu version;

• the single-core sse version;

• the sse version with  <dig> threads ;

• the gpu version.

the same experiment was repeated with  <dig> and  <dig> bp-long sequences. as shown by the results in figure  <dig>  the single-core sse version accelerates the computations by a factor of  <dig> compared to the cpu version; the sse -t  <dig> version by a factor of  <dig> compared to the cpu version; and the gpu version by a factor of  <dig> compared to the cpu version. the cell updates per second  are  <dig> mcup/s,  <dig>  gcup/s,  <dig>  gcup/s, and  <dig>  gcup/s, for the cpu, the sse, the sse -t  <dig>  and the gpu versions, respectively.

as further experiment, we generated  <dig>   <dig>   <dig>  <dig> bp-long dna query sequences and  <dig>  <dig> bp-long dna target sequences. similar to the above experiment, the four aforementioned versions of function gapmis_many_to_many were used, and the same experimental procedure was repeated with  <dig> and  <dig> bp-long sequences. as shown by the results in figure  <dig>  the single-core sse version accelerates the computations by a factor of  <dig> compared to the cpu version; the sse -t  <dig> version by a factor of  <dig> compared to the cpu version; and the gpu version by a factor of  <dig> compared to the cpu version. the cup/s are  <dig> mcup/s,  <dig>  gcup/s,  <dig> gcup/s, and  <dig>  gcup/s, for the cpu, the sse, the sse -t  <dig>  and the gpu versions, respectively.

as further experiment, in order to evaluate the performance of programme gapmis, function gapmis_one_to_one_f, function gapmis_one_to_one_onf, and needle, under real conditions, we simulated  <dig>   <dig>   <dig>  <dig> bp-long query sequences from the  <dig> mbp chromosome  <dig> of arabidopsis thaliana  obtained from  <cit> , and inserted mismatches and gaps into the reference sequence; then we aligned them back against the original reference sequence. as mismatch occurrence frequency and gap occurrence frequency we used  <dig>  × 10-3and  <dig>  × 10- <dig>  respectively--the ones observed in at  <cit> . since, in practice, insertions occur less frequently than deletions, 42% of the inserted gaps were insertions and 58% deletions--also observed in at  <cit> . for the length of the inserted gaps, we used the distribution of gap lengths shown in figure  <dig>  which is consistent with other studies on gap distributions . since the queries were simulated, we were able to know the exact location of the fragments of the reference sequence they were derived from . hence, we were able to classify each generated alignment as valid/invalid and correct/incorrect. we define accuracy as the proportion of correct alignments in the dataset. thus, we evaluated the accuracy of the aforementioned programmes in extending an alignment end-to-end, assuming that the seed part of the alignment is already performed by using a conventional indexing scheme, that is, a hash-based index  <cit>  or an fm index  <cit> . we repeated the same experiment by simulating  <dig> bp-long query sequences and using other gap occurrence frequencies--observed in beta vulgaris   <cit>  and homo sapiens  exome  <cit> .

the high accuracy of libgapmis is demonstrated by the results shown in table  <dig>  the results show that function gm -onf  <dig> has the highest accuracy in all cases. it can increase the accuracy of extending short-read alignments end-to-end by  <dig> % compared to needle. given the observed gap occurrence frequencies, the increased accuracy of gap identification is significant. for instance, the proportion of pairs of sequences with gaps in the six datasets of table  <dig> ranged from  <dig> % to  <dig> %.

the correct alignments of  <dig>   <dig>   <dig> pairs of simulated sequences with various observed gap occurrence frequencies using gapmis, gapmis_one_to_one_f, gapmis_one_to_one_onf, and needle. each of the datasets consists of  <dig> , <dig> pairs of sequences; the highest number of correct alignments for each dataset is shown in bold.

although the gap opening penalty in needle could be increased by the user, this would have a potentially fatal impact on accuracy because the high number of mismatches opted would be underestimated  <cit> . we checked this assumption by conducting the following last experiment. we obtained  <dig>   <dig>  <dig> bp-long and  <dig>   <dig>  <dig> bp-long query sequences from the  <dig> mbp chromosome  <dig> of at, and inserted mismatches and gaps into the reference sequence; then we aligned them back against the original reference sequence using needle, similar to the previous experiments. the gap opening penalty ranged from  <dig>  to  <dig> , and the gap extension penalty was set to  <dig> . our assumption is confirmed by the results shown in table  <dig>  notice that, increasing the gap opening penalty increases the valid alignments but has a negative impact on the accuracy of needle: the number of correct alignments decreases.

the valid and correct alignments of  <dig>   <dig> pairs of simulated sequences with the gap occurrence frequency observed in arabidopsis thaliana using needle. each of the datasets consists of  <dig>  pairs of sequences; the highest numbers of correct and valid alignments for each dataset are shown in bold.

CONCLUSIONS
in this article, we presented libgapmis, an ultrafast and flexible library for extending pairwise short-read alignments end-to-end. apart from the standard cpu version, it includes ultrafast sse- and gpu-based implementations. libgapmis is based on gapmis, a tool that computes a different version of the traditional dynamic-programming matrix for sequence alignment.

this work is directly motivated by the next-generation re-sequencing application. we demonstrated that libgapmis is more suitable and efficient than more traditional approaches for extending short-read alignments end-to-end. adding the flexibility of bounding the number of gaps inserted in the alignment, strengthens the classical scheme of scoring matrices and affine gap penalty scores. the presented experimental results are very promising, both in terms of identifying gaps and efficiency.

by exploiting the potential of modern cpu and gpu architectures and applying multi-threading, we improved the performance of the purely sequential cpu version by more than one order of magnitude. more importantly, the functions provided in libgapmis can be directly integrated into any short-read alignment programme. our immediate target is to further optimise the code, and also integrate the functions of this library into a short-read alignment pipeline.

competing interests
the authors declare that they have no competing interests.

authors' contributions
spp and as designed the study. na, sb, tf, and spp developed the library. tf and spp conducted the experiments. spp wrote the manuscript with the contribution of all authors. the final version of the manuscript is approved by all authors.

supplementary material
additional file 1
algorithm gapmis. the algorithm gapmis computes matrices g and h. it takes as input the text t of length n, the pattern x of length m, and the threshold β. this algorithm was taken from  <cit> .

click here for file

 acknowledgements
the publication costs for this article were funded by the heidelberg institute for theoretical studies . na, sb, and tf are supported by funding from the dfg . spp is supported by the nsf-funded iplant collaborative . as is supported by institutional funding from hits ggmbh. we thank rajesh kumar gottimukkala from life technologies for valuable comments and useful discussions.

this article has been published as part of bmc bioinformatics volume  <dig> supplement  <dig>  2013: selected articles from the second workshop on data mining of next-generation sequencing in conjunction with the  <dig> ieee international conference on bioinformatics and biomedicine. the full contents of the supplement are available online at http://www.biomedcentral.com/bmcbioinformatics/supplements/14/s <dig> 
