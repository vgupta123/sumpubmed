BACKGROUND
by allowing scientists to rapidly sequence and quantify dna and rna molecules, next-generation sequencing  technology has transformed biology into one of the most data intensive research disciplines. in the past, experiments have been performed on a gene-by-gene basis, while ngs has introduced an age where it is has become a routine to sequence entire transcriptomes, genomes or epigenomes rather than their isolated parts of interest. it will soon be possible to conduct these experiments on large numbers of single cell samples  <cit>  for a wide range of time points, treatments, and genetic backgrounds to study biological systems with greater resolution and precision. sequencing the genetic material of each individual within entire populations of organisms of the same species or genus will enable the study of adaptation processes  <cit> , disease progression, and micro-evolution in real time  <cit> . this technological shift empowers researchers to address questions at a genome-wide scale, for example by profiling the mrna, mirna and dna methylation states of a large set of biological samples in parallel  <cit> .

the success of ngs-driven research has led to a data explosion of increasing size and complexity, making it now more time consuming and challenging for researchers to extract knowledge from their experiments. rapid processing of the results is essential to test, refine, and formulate new hypotheses for designing follow-up experiments. as a result, biologists have to dedicate nowadays substantial time to data analysis tasks while training themselves effectively as genome data scientists rather than focusing on experimentation as they used to in the past.

in recent years, a considerable number of algorithms, statistical methods, and software tools has been developed to perform the individual analysis steps of different ngs applications. these include short read pre-processors, aligners, variant and peak callers, as well as statistical methods for the analysis of genomic regions that are differentially expressed  <cit> , bound  <cit>  or methylated  <cit> . also essential are tools for processing short read alignments  <cit> , genomic intervals  <cit>  and annotations  <cit> . however, most data analysis routines of ngs applications are very complex involving multiple software tools for their many processing steps. as a result, there is a great need for flexible software environments connecting the individual software components to automated workflows in order to perform complex genome-wide analyses in an efficient and reproducible manner. while many workflow management resources exist  for a variety of data analysis programming languages , only insufficient general purpose ngs workflow solutions are currently available for the popular r programming language. r and the affiliated bioconductor environment provide a substantial number of widely used tools with a large user base in this area  <cit> . thus, a workflow framework for federating ngs applications from within r will have many benefits for experimental and computational scientists who use r for ngs data analysis.

to address this need, we designed systempiper as a bioconductor package for building and running workflows for most ngs applications with support for integrating a wide array of command-line and r/bioconductor software.

implementation
environment
systempiper has been implemented as an open-source bioconductor package using the r programming language for statistical computing and graphics. r was chosen as the core development platform for systempiper because of the following reasons.  r is currently one of the most popular statistical data analysis and programming environments in bioinformatics.  its external language bindings support the implementation of computationally time-consuming analysis steps in high-performance languages such as c/c++.  it supports advanced parallel computation on multi-core machines and computer clusters.  a well developed infrastructure interfaces r with several other popular programing languages such as python.  r provides advanced graphical and visualization utilities for scientific computing.  it offers access to a vast landscape of statistical and machine learning tools.  its integration with the bioconductor project promotes reusability of genomics software components, while also making efficient use of a large number of existing ngs packages that are well tested and widely used by the community. to support long-term reproducibility of analysis outcomes, systempiper is also distributed as docker image of bioconductor’s sequencing division. docker containers provide an efficient solution for packaging complex software together with all its system dependencies to ensure it will run the same in the future across different environments, including different operating systems and cloud-based solutions.

workflow design
systempiper workflows  can be run from start-to-finish with a single command, or stepwise in interactive mode from the r console. new workflows are constructed, or existing ones modified, by connecting so-called sysargs workflow control modules . each sysargs module contains instructions needed for processing a set of input files with a specific command-line or r software; as well as the paths to the corresponding outputs generated by a specific ngs tool such as a read preprocessor , aligner , read counter, variant caller , peak caller  or statistical function. typically, the only input the user needs to provide for running workflows is a single tabular targets file containing the paths to the initial sample input files  along with sample labels, and if appropriate biological replicate and contrast information for controlling differential abundance analyses . downstream derivatives of these targets files along with the corresponding sysargs instances  are created automatically within each workflow. the parameters required for running command-line software are provided by parameter  files described below. for r-based workflow steps, param files are not required but can be useful for operations importing and/or exporting sample-level files. this modular design has several advantages. first, it provides a high level of flexibility for designing workflows, such as allowing the user to start workflows from the very beginning or anywhere in-between . second, it is straightforward to add custom workflow steps without requiring computational expert knowledge from users. workflows can also have any number of steps including branch points. lastly, it also minimizes errors as all input and output files are registered, and sample labels specified in the initial targets file will be consistently used throughout all workflow results including plots, tables and workflow reports.
fig.  <dig> workflow steps with input/output file operations are controlled by sysargs objects. each sysargs instance is constructed from a targets and a param file. the only input required from the user is the initial targets file. subsequent instances are created automatically. any number of predefined or custom workflow steps is supported



command-line software support
an important feature of systempiper is support for running command-line software directly from r on both single machines or computer clusters. this offers several advantages such as seamless integration of most command-line software available in the ngs field with the extensive genome analysis resources provided by r/bioconductor. the user interface for running command-line software has been generalized as a single function for ease of use, while only one additional command will run the same tool in parallel mode on a computer cluster . examples of command-line software used by systempiper’s preconfigured workflow templates  include the aligners bwa-mem  <cit> , bowtie <dig>  <cit> , tophat <dig>  <cit> , hisat <dig>  <cit> , as well as the peak/variant callers macs  <cit> , gatk  <cit>  and bcftools  <cit> . support for additional command-line ngs software can be added by simply providing the argument settings of a chosen software in a tabular param file. if appropriate, new param files can be permanently included in the package to share them with the community. functionality for creating param files automatically will be provided in the future. this will allow users to create new param instances simply by providing an example of the command-line syntax of a chosen software tool. major advantages of running command-line software from within systempiper include: a uniform sample management infrastructure within and across workflows; integration of batchjobs’  <cit>  efficient error managment infrastructure for job submissions on computer clusters; the simplicity of restarting failed processes; as well as seamless addition of new samples . in case of a restart, the system will skip the analysis steps of already completed samples and only perform the analysis of the missing ones. if required, any workflow step can be rerun on demand for all or a subset of samples. when submitting command-line software to computer clusters, batchjobs monitors the status of job submissions and alerts users of exceptions, while recording warning and error messages for each process in a log directory with a database-like structure that is accessible from within r or the command-line. this organization helps to diagnose and resolve errors.

parallel evaluation
the processing time for ngs experiments can be greatly reduced by making use of parallel evaluation across several cpu cores on single machines, or multiple nodes of computer clusters and cloud-based systems. systempiper simplifies these parallelization tasks without creating any limitations for users who do not have access to high-performance computer  resources by providing the option to run workflows in serial or parallel mode. the parallelization functionalities available in systempiper are largely based on existing and well maintained r packages, mainly batchjobs and biocparallel  <cit> . by making use of cluster template files, most schedulers and queueing systems are also supported . if required, entire workflows can be executed in parallel mode by issuing a single command, while simultaneously generating a detailed analysis report . if sufficient parallel computer resources are available, systempiper can complete the entire analysis workflow of several complex ngs experiments each containing large numbers of fastq files within hours rather than days or weeks as can be the case for non-parallelized workflows.

automated analysis reports
systempiper generates automated analysis reports with knitr and r markdown  <cit> . these modern reporting environments integrate r code with latex or markdown. during the evaluation of the r code, reports are dynamically generated in pdf or html format. a caching system allows to re-execute selected workflow reporting steps without repeating unnecessary components. this way one can generate reports that resemble a research paper where user generated text is combined with analysis results. this includes support for citations, autogenerated bibliographies, code chunks with syntax highlighting and inline evaluation of variables to update text content. data components in a report such as tables and figures are updated automatically when rebuilding the document and/or rerunning workflows partially or entirely.

RESULTS
overview
systempiper provides utilities for building and running ngs analysis workflows. to adapt to community standards, widely used r/bioconductor packages are integrated where possible. this includes the bioconductor packages shortread, biostrings and rsamtools for processing sequence and alignment files  <cit> ; genomicranges, genomicalignments and genomicfeatures for handling genomic range operations, read counting and annotation data  <cit> ; edger and deseq <dig> for differential abundance analysis  <cit> ; and varianttools and variantannotation for filtering and annotating genome variants  <cit> . if necessary, one can substitute most of these packages with alternative r or command-line tools. because many ngs applications share overlapping analysis needs , certain workflow steps are conceptualized in systempiper by a single generic function with support for application-specific parameter settings . for instance, most ngs applications involve a short read alignment step , but with very distinct mapping requirements, such as splice junction awareness and variant tolerance for rna-seq and var-seq, respectively. to simplify their execution for the user, the different aligners can be run with the same runcommandline function where the software and its parameter settings are specified in the corresponding sysargs instance .
fig.  <dig> workflow steps and graphical features. relevant workflow steps of several ngs applications  are illustrated in form of a simplified flowchart . examples of systempiper’s functionalities are given under  including:  eight different plots for summarizing the quality and diversity of short reads provided as fastq files;  strand-specific read count summaries for all feature types provided by a genome annotation;  summary plots of read depth coverage for any number of transcripts with nucleotide resolution upstream/downstream of their start and stop codons, as well as binned coverage for their coding regions;  enumeration of up- and down-regulated degs for user defined sample comparisons;  similarity clustering of sample profiles;  2-5-way venn diagrams for degs, peak and variant sets;  gene-wise clustering with a wide range of algorithms; and  support for plotting read pileups and variants in the context of genome annotations along with genome browser support


genworkenvir

systemargs

runcommandline

clusterrun

preprocessreads

seefastq/seefastqplot

alignstats

run_edger/run_deseq2

filterdegs

overlapper/vennplot

gocluster_report

variantreport

predorf

featuretypecounts

featurecoverage


workflow templates
systempiper also provides end-to-end workflow templates for rna-seq, ribo-seq, chip-seq and var-seq analysis. a detailed vignette  is provided for each workflow, while an overview vignette introduces the general design concepts. templates for additional ngs applications will be made available in the future. to test workflows quickly or design new ones from existing templates, users can generate with a single command  workflow instances fully populated with sample data and parameter files required for running a chosen workflow. the corresponding sample data are provided by the affiliated data package systempiperdata, also available from bioconductor. to illustrates the utilities of systempiper’s workflow templates, a case study has been included as additional file  <dig> that guides the reader through the most important steps of a sample workflow. a typical gene-level rna-seq analysis was chosen here because it is currently one of the most widely used applications in the ngs field.

add-on tools
in addition to providing a framework for running ngs analysis workflows, systempiper includes many functions and methods that expand and enhance its workflows. the following gives selected examples of these utilities . a read pre-processor function  addresses the often very sophisticated quality filtering and adaptor trimming needs of specialized ngs applications such as ribo-seq or smallrna-seq. the functions seefastq and seefastqplot generate and plot detailed quality reports for fastq files . these reports are easy to generate and designed to facilitate the visual inspection of large numbers of fastq files in a single report. the featuretypecounts function computes and plots the distribution of reads across all features available in a genome annotation rather than just a single one . the featurecoverage function generates from genome-level alignments read depth coverage summaries for all or a subset of transcripts with nucleotide resolution upstream/downstream of their start and stop codons, as well as binned coverage for their coding regions . additional utilities include functions to automate the analysis of differentially expressed genes  with edger or deseq <dig> , to compute venn intersects for large numbers of sample sets  with plotting functionalities for 2- <dig> way venn diagrams , and to run gene set enrichment analyses in batch mode on large numbers of gene sets. the modular design of the systempiper environment allows users to easily substitute any of these built-in tools with alternative r-based or command-line software, such as using fastqc  <cit> , fastx-toolkit  <cit>  or multiqc  <cit>  for quality reporting, read trimming or result aggregation, respectively.

performance and scalability
systempiper has been optimized to run workflows in a time and memory efficient manner even on very large read sets from complex genomes . this is achieved by making heavy use of indexing, file streaming and parallelization functionalities. for instance, users can limit the ram requirements of several workflow steps by specifying the maximum number of reads or alignments to stream into memory at any time. this enables analysis of very large files with tens of gbs of storage space on systems with limited ram resources, making it possible to run systempiper workflows even on laptops or smaller workstations, provided they have the required software installed and enough disk space available for storing large ngs input and result files. the processing time of non-parallelized analysis steps depends on the time performance of a specific software tool chosen for a workflow step. for instance, in the rna-seq workflow described under additional file  <dig> the alignment step will run on a single sample  with the native time performance of the chosen aligner bowtie2/tophat <dig>  using the much faster hisat <dig> aligner instead would accelerate the alignment step proportionally to the time improvements provided by this aligner without the need of additional parallel computer resources  <cit> . on a computer cluster, parallelized systempiper workflows scale nearly linearly in time with the number of sample files  since every step can be parallelized at the sample level. in practice this means, the runtime of an analysis of  <dig> fastq files can be accelerated by  <dig> or  <dig> fold when using instead of a single cpu core  <dig> or  <dig> cpu cores, respectively. for example, the rna-seq workflow in additional file  <dig> can process  <dig> fastq files, each with 30– <dig> million reads from a mammalian genome, in 6– <dig> hours using  <dig> cpu cores  and a maximum ram requirement of less than  <dig> gb per node. since the alignment step with bowtie2/tophat <dig> accounts for most of the compute time of the entire workflow, the use of faster rna-seq aligners, such as rsubread or hisat <dig>  can reduce the compute time to less than  <dig> hours. with comparable parallel computer resources available, one can complete with systempiper the end-to-end analysis of several complex ngs experiments each containing 50– <dig> fastq files in less than a day rather than many days or weeks as is common in non-parallelized workflows.

need for an r-based ngs workflow environment
several related software tools with ngs workflow functionality are available. these include galaxy  <cit> , snakemake  <cit> , taverna  <cit> , bioblend  <cit> , bcbio-nextgen  <cit> , knime  <cit> , ruffus  <cit> , kepler  <cit> , wasp  <cit> , viennangs  <cit> , mercury  <cit> , rap  <cit> , and loni  <cit>  among others. additionally, general purpose utilities for workflow management and design are provided by rabix  <cit>  and wdl  <cit> . these tools provide infrastructure for streamlining the analysis of ngs data in a variety of data analysis environments and computer languages. however, only limited resources are available for designing and running analysis workflows for a wide range of ngs applications directly from within r as is possible with systempiper. one of the few exceptions is quasr  <cit> . this bioconductor package supports the initial analysis steps of several ngs applications, but it lacks an interface to integrate external command-line software and functionalities to build new workflows. other existing r/bioconductor resources for analyzing ngs data address the needs in this area only partially. for instance, many of them are limited to certain ngs applications, or cover only a subset of the processing steps required for complete workflows; do not support command-line software; or lack workflow design functionalities for different ngs applications. systempiper has been designed to address these requirements. however, it is important to mention here that well established community workflow environments like galaxy provide several additional features not available in systempiper. a small subselection of them includes:  a web interface to support non-expert users who are not familiar with data analysis programming environments like r;  support for a wider range of data types outside of the ngs field;  a well-established infrastructure and community for archiving and sharing workflow protocols; or  support for additional reporting technologies such as ipython notebooks. to take advantage of this powerful infrastructure, galaxy compatible versions of systempiper’s ngs workflows will be released in the future. this will allow biologists to run them from an easy-to-use web interface, while also being able to access additional functionalities available in galaxy’s large ecosystem of analysis tools.

CONCLUSIONS
the systempiper package unites r/bioconductor resources with external command-line software to standardize and automate the analysis of a wide range of ngs applications. its functionalities reduce the complexity and time required to translate ngs data into interpretable research results, while a built-in reporting feature improves reproducibility. the environment provides sufficient flexibility to choose the optimal software for each step in complex ngs workflows, customize workflows, and design new workflows. pre-configured workflow templates are included for several ngs applications. templates for additional ngs applications are under development and will be added to the package in the near future.

availability and requirements
project name:systempiper workflow environment

project home page: http://bioconductor.org/

packages/systempiper

archived version:systempiper

operating system: platform independent

programming language: r

other requirements: r version ≥ <dig> , bioconductor version ≥ <dig> 

license: artistic-2-0

any restrictions to use by non-academics: none



additional file
additional file  <dig> rna-seq workflow example. case study to illustrate the utilities of systempiper using an rna-seq workflow as example. 



abbreviations
bambinary version of sequence alignment map format

chip-seqchromatin immunoprecipitation sequencing

degdifferentially expressed genes

fastqshort read sequence file format

ngsnext generation sequencing

ribo-seqngs profiling of mrna populations bound to ribosomes

rna-seqngs profiling of mrna

samsequence alignment map format

var-seqngs-based variant detection

