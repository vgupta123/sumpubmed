BACKGROUND
for instance, protein identification via mdlc combined with tandem mass spectrometry techniques or other shotgun approaches usually generate huge data sets and compels application of software programs such as sequest™  <cit> , profound  <cit>  or mascot™  <cit> . this produces peptide sequences that need to be grouped in order to obtain protein identifications with several peptides per hit, which increases reliability of the results. mascot™ groups the peptide results of a single search run automatically. recombination and merging of search runs is not supported. the data volume limits of mascot™'s result display tool defined by the underlying computing resource are easily reached and exceeded when applied to a shotgun approach, excluding the opportunity to analyze a huge mdlc experiment at once.

generally, scientists require their protein identification results in tabular format in order to visualize, filter or sort them by several criteria. concerning sequest™, some open source tools for extracting data from its result files already exist, such as out2summary from the sashimi project <cit>  or sequest browser™  <cit> . for mascot™, which produces text files in mime format , such a tool is currently not available as open source. tools like the extparser module integrated in phenyx  <cit>  convert the preprocessed html output of mascot™'s result display tool rather than the original result file. the parser mascot2xml of sashimi project <cit>  reads original mascot™ data and converts into pepxml  <cit> . this program is available as open source, but does not export all information contained in the mascot™ file.

for efficient import in spread sheet applications and relational database systems, a straight-forward format is needed, in order to achieve the best performance.

the mime format of mascot™ result files looks as shown in figure  <dig>  obviously, this format cannot be imported into spread sheet applications or database programs because it contains internal references.

here, we present the command line tool mres2x that is capable of converting results from original, unprocessed mime formatted mascot™ output files  into a comprehensive tabular format. extraction of included peak lists into sequest™'s dta format is supported, too. another option allows splitting the original mascot™ output into several files in mascot™'s native format according to the number of series of measurements.

an example of running mres2x on unix/linux producing tab format output in mascot.tab of the file mascotresult.res stored in /tmp is the following command line:

       ./mres2x -d ./mascot.tab -o tab /tmp/mascotresult.res

implementation
mres2x is implemented in c  <cit> , and therefore is portable to several platforms, most notably windows™ and unix™. it offers a command line interface. all functionality is controlled by command line parameters that are shown in table  <dig>  a detailed documentation of all command line switches is given in the file overview.html  included in the source code package.

s_dta sequest™'s dta format. only spectra data will be exported.
m_dat split the input into several output files in mascot™'s output format, one for each query.
the program uses one or more mascot™ result files as input for processing.its output can be directed to the program's standard output or to a file in case of the tabular output format. otherwise, an existing directory must be specified as output destination. the converted tabular format is up to  <dig> percent smaller in size than the original data without any loss of information. it is designed for direct import into relational database management systems, but also can be used with spread sheet applications or other programs for further processing and validation. the tabular format is documented extensively in the file tabformat.html , where the format of the original mascot™ result files is implicitly documented, too.

mres2x can be used to split huge mascot™ result files into single files using the -o s_dat switch, each containing a single query and its corresponding results. this increases performance of reusing the separated results. typical examples of use are display, analysis or validation by standard tools, such as the bundled result browser of mascot™. nevertheless, the main purpose of mres2x is conversion of huge mime formatted files into a more readable and compact format for efficient direct import into database management systems, using their native import tools.

several data analysis steps are performed in order to check the validity of mascot™ files even while processing the input data. values are checked for their range at this stage. the most detailed validation is performed when producing the tabular format. a full cross-reference check is performed here. thereby, it is assured that the output is fully consistent. the cross-referenced structure is shown in figure  <dig> 

in case of errors, a cleanup is performed which removes any result files produced so far and the os is informed by a non-zero return code of the program. it depends on the error whether further analysis of the input file is performed by mres2x. if possible, the algorithm collects errors and prints them out before termination. if included in the input file, mascot™ warnings are printed to standard error and are available by the calling program.

on success, the message "operation ended successfully." is written to the standard output. wrapping programs can easily test for this message or for a return code of zero.

an example of the output in tabular format is displayed in figure  <dig>  the success codes  at the end of a query section  or a file section  allow usage of database transaction rollback in case of errors.

mres2x has thoroughly been tested with several thousands of data sets produced by mascot™ version  <dig> . <dig> and earlier.

RESULTS
we compared the performance of mres2x with the result viewer named master_results.pl that comes with mascot™ version  <dig> . <dig>  using a  <dig>  megabytes large mime formatted mascot™ result file, containing  <dig> , <dig> lines obtained from  <dig>  ms/ms spectra. conversion of this file with mres2x lasts  <dig> minute,  <dig> seconds, whereas display of this file with master_results.pl using the binary library msparser coming with mascot™ takes more than  <dig> minutes on the same computer; the version fully implemented in perl of master_results.pl would be even slower.

CONCLUSIONS
we introduced a tool capable of converting mascot™ result files efficiently into other formats, most notable the one designed for direct database import. mres2x is designed to provide high throughput processing combined with extensive error checking and the possibility to be driven by other computer programs. therefore, mres2x is suitable for integration into computer automated high throughput environments, using direct import into database management systems.

mres2x reads mascot™ result files and extracts all information in order to store it to another file or files. it currently supports three output formats: first, the original mascot™ output file can be split into several files with the same format according to the number of series of measurements. second, the original input peak lists can be extracted into dta format. third, a file in tabular format for direct bulk database upload can be created.

in contrast to other formats, such as pepxml  <cit> , protxml  <cit>  and mzident  <cit> , mres2x avoids the overhead implied by the need of interpreting the intermediate xml format over again. this allows for importing data directly in a relational database system or spread sheet applications. xml is a storage space consuming format <cit>  and parsing and interpretation of xml is a time consuming task, decreasing performance of the whole process  <cit> . same with other intermediate formats, such as sqt  <cit> . the tab output format of mres2x is not intended to meet all requirements of the currently discussed file format standardization  and is not designed as a substitute of either xml format mentioned before. mres2x is designed to be used for direct bulk database uploads of mascot™ results by means of the corresponding database management system, such as sql*loader of oracle™ or bcp of sql server™. however, it creates an easy to parse tabular format which makes the creation of translating software to produce other formats nearly trivial. this allows export to any other industry standard.

storing the results in a database management system allows efficient complex queries on the data such as regrouping of peptide results to protein results without need to research the ms/ms data again and yields time and resource savings as well as increased flexibility.

as the tab output format contains one result record per line, filtering and processing directly after conversion is easily possible, such as for false positives as well as allowing for assembling identifications. the records of protein and peptide results can be distinguished after processing, as the first character of each line indicates the record type.

availability and requirements
for compilation a standard c compiler is needed. mres2x can be compiled and run on windows™ and unix/linux. the program is freely available via  and  for download.

authors' contributions
fgc implemented the program and made a draft of the manuscript. ab initiated the development. ab and as contributed with ideas and proofread the manuscript. ab supervised the final testing. all authors have read and approved the final manuscript.

list of abbreviations used
html hypertext markup language

mdlc multidimensional liquid chromatography

mime multipurpose internet mail extensions

ms mass spectrometry

os operating system of a computer

sql structured query language

xml extended markup language

supplementary material
additional file 1
documentation of mres2x, this document describes mres2x and how to use it.

click here for file

 additional file 2
format of the tab output format, this document describes the output of mres2x when tab format is selected. it implicitly documents the format of mascot™'s result files.

click here for file

 acknowledgements
this work was supported by the deutsche forschungsgemeinschaft .
