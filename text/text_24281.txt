BACKGROUND
the first three rnas identified - messenger rna , ribosomal rna  and transfer rna  were associated with the translation of rna to proteins - protein synthesis. while dna is known to carry genetic information from one generation to the next, and proteins are capable of forming three-dimensional structures that catalyze chemical reactions, the function of rna was perceived as the carrier of the information to code for amino acids in a protein, serve as a scaffold for proteins in the ribosome, and attach amino acids to the growing protein chain during protein synthesis. all three of these rna functions were considered to be labile and passive. however this simple perspective of rna has been undergoing a major transformation. rna is capable of forming complex three-dimensional structure like proteins. and like proteins these higher-order structures catalyze reactions. now hundreds, if not thousands, of different rna families are being identified and characterized. and rna is being associated with many previously known functions in the cell, and equally if not more significant, rna is being associated with many newly identified functions. this major paradigm shift in molecular and cellular biology is dramatically changing our appreciation of the machinery, mechanisms, and regulation within cells, and providing a better understanding for the normal and aberrant physiological conditions in biological organisms  <cit> .

the identification and characterization of macromolecular sequences and their higher-order structures have utilized a very important principle in molecular and evolutionary biology. different primary structures  can form the same higher-order structure for different rnas and proteins  <cit> . this comparative method is now widely used in the study for many rnas, and is the cornerstone for the computational analysis of the deluge of nucleic acid sequences that are determined with next-generation sequencing methodology. and fundamental for many of these comparative studies is an accurate alignment of the rna sequences that juxtapose similar structural and/or functional elements into the same set of columns.

the analysis of these alignments are used to discover patterns of structural variation and conservation, secondary and higher-order structure, phylogenetic relationships and associate function to the rna's structure. a few of the significant discoveries made from this type of analysis include: the determination of the phylogenetic relationships for organisms that encompass all branches of the tree of life and the identification of the third domain of life - the archaea  <cit> , the accurate prediction of rna secondary structures that are present within a collection of rna sequences from the same family  <cit> , the identification of new structural elements  <cit> , the creation of pseudo-energies for many rna structural elements and their utility in improving the accuracy of folding an rna sequence into its secondary structure  <cit> , and the identification of the microbiome - the collection of microbes in different ecological environments, using 16s rrna  <cit> .

the generation of the most accurate sequence alignments is essential for the optimal analysis and interpretation of the topics listed above. the two most widely used alignment strategies are: de novo alignment, and template-based alignment. de novo sequence alignment programs  generate multiple sequence alignments without the guide of using any preexisting alignment .

template-based sequence alignment programs utilize an alignment that is usually manually curated to optimize its accurate juxtaposition of nucleotides. this alignment serves as the reference to facilitate the alignment of new sequences. several automated template-based sequence alignment services for different rnas are available on the web: silva  <cit>  , greengenes  <cit>  , and rdp  <cit>   silva uses sina aligner  which is implemented with a variant of the needleman-wunsch algorithm  <cit> . greengenes aligns a new sequence with the nearest alignment space termination  <cit>   algorithm. blast  <cit>  is used to identify the most closely matching seed sequence and, generate a pairwise alignment. the rdp system uses infernal  <cit>  to align sequences based on a conserved secondary-structure.

other research groups developed the stand-alone template-based alignment programs available for download: infernal, ssu-align  <cit> , and hmmer  <cit>  both infernal and ssu-align creates consensus rna secondary structure profiles for seed alignment, and use them to align new sequences. the program ssu-align implements additional profile hidden markov models  on the secondary structure profiles. hmmer searches for significant sequence identity with profile hmms without using the consensus secondary structure. infernal and hmmer are capable of building profiles and aligning any type of rna that has an rna alignment, while ssu-align currently is developed only for small subunit ribosomal rna.

a variation on this approach uses a seed alignment with the correct secondary structure for that rna family to generate a descriptor that defines the primary and secondary structure constraints. sequences that satisfy the conditions of this descriptor are identified. several programs that use this procedure have been developed. rnamot  <cit> , one of the first in this family of programs, had a simple descriptor language that was easier to manually generate but was limited by the details in the structural constraints that can be identified. rnamotif  <cit>  and locomotif  <cit>  are newer programs that have a richer descriptor language with greater specificity and complexity of the rna constraints that can be identified and distinguished. while these programs are an improvement over rnamot, they don't perform all of the functions needed here. they are unable to describe and identify larger rna molecules . in particular, while the program rnamotif can search a structural model with a maximum of  <dig> structural elements, 16s rrna contains over  <dig> structural elements. second, these programs are also unable to encapsulate all possible variations in the rna molecule and search candidates with acceptable performance. and third, these programs require structural descriptor to be generated manually, a process that requires a substantial amount of effort for rna. while some of these programs have some provisions to align sequences based on similar primary and secondary structure characteristics, their performance are not adequate for aligning large numbers of large rna sequences with great specificity.

when sequences have minimal pairwise identity with one another, de novo alignment algorithms have difficulty placing the nucleotides sharing common structural/functional features within each sequence into the correct columns of the alignment. in contrast, the previously determined seed alignment used in the template-based alignment algorithms has been refined to maximize the correct juxtaposition of structural, functional, and evolutionary relationships of the sequences. thus the template-based alignment algorithms will be more accurate in the generation of new multiple sequence alignments.

here we present two template-based alignment programs: crwalign- <dig>  <cit>  and crwalign- <dig>  as shown below, both achieve very high accuracy, even for collections of sequences that have a lower extent of sequence identity with one another. both programs utilize the gutell lab's rna comparative analysis database  relational database management system that cross-indexes multiple dimensions of information, including sequence alignments, comparative secondary structures, and phylogenetic relationships  <cit> . crwalign- <dig> generates sequence composition profiles for each column in the alignment of different phylogenetic groups. crwalign- <dig> creates a more sophisticated profile or descriptor that contains sequence composition and secondary structure information for specific and generalized phylogenetic groups.

the crwalign- <dig> program automatically generates the structural profiles containing sophisticated constraints, searches for and creates structural models satisfying this profile, and aligns the sequences against the template. the structural information used in crwalign- <dig> is obtained from rcad and the crw site   <cit> . the phylogenetic information in rcad is obtained from the ncbi taxonomy database . both crwalign- <dig> and crwalign- <dig> can be used to align any type of rna molecule that has an existing high quality alignment and for crwalign- <dig> has an accurate secondary structure model. the size of the template alignment is limited only by the number of columns and phylogenetic groups in the alignment and the size of available memory. the gutell lab used crwalign- <dig> and crwalign- <dig> on a 16s rrna bacteria alignment that is  <dig>  columns wide and contains more than  <dig>  sequences.

our primary objective is to measure the performance of crwalign- <dig> and crwalign- <dig>  and compare these performances with the most widely-used template-based alignment programs including three web-based alignment systems  and three stand-alone alignment programs . our analysis also included two de novo alignment programs  in our comparison. for a rigorous assessment across all alignment programs, the bacterial 16s rrna is selected as the test set, which have at least  <dig>  nucleotides per sequence in length. the results reveal that both crwalign- <dig> and crwalign- <dig> align new sequences more accurately than these other methods.

methods
crwalign-1
crwalign- <dig> consists of two steps: 1) generate the alignment statistics of the template alignment sequences for each taxonomic group; and 2) align new sequences iteratively guided by the generated alignment statistics.

alignment statistics generation
the alignment statistics are generated from the template alignment. an example of the process of generating these statistics for a template alignment consisting of  <dig> sequences is shown in figure  <dig>  the template alignment consists of sequences from three taxonomic groups under the root taxon: three bacillales sequences , four additional bacilli sequences , and three other bacterial sequences . all taxons containing the minimum number of sequences  from the template alignment, and their parent taxons will be included in the statistics generation. the statistics will be generated for the following taxons: bacillales , bacilli , and bacteria . the statistics generation of each taxon includes several metrics including the minimum and maximum number of nucleotides in a block, the column, conservation values , nucleotide composition of each column , and a score that is composed of the conservation and composition scores for each sequence followed by an average score for all sequences for each block . for each taxon, the complexity of this calculation is o, where b is the length of a block, n is the number of blocks, and s is the number of sequences in the taxon.

definition 1: for column i, the conservation value  is the number of sequences with a nucleotide in this column divided by the total number of sequences in the taxonomic node. the partial sequence starting after or ending before column i is excluded from the calculation.

the conservation value for each column of the template alignment is first calculated for the root taxonomic node . columns with conservation values greater than 80% are considered highly-conserved. the alignment is then divided into blocks that each contains the same number of highly conserved columns. the last block could have fewer columns that are highly-conserved . while the sequences  <dig>   <dig> and  <dig> in figure 1a are missing nucleotides at their extreme 5' end, the conservation values are not affected for these columns without nucleotides. while the number of conserved columns for each block is five for the example in figure  <dig>  the actual default number to obtain the highest accuracies was determined to be between  <dig> and  <dig>  statistics for the equivalent set of columns within each taxonomic node are determined although the pattern of conservation could vary between these nodes. an example of variation between nodes is shown for block  <dig> . the red bacillales have six conserved columns while the blue bacilli and brown additional bacteria have five conserved columns.

definition 2: the nucleotide composition value is the occurrence of each nucleotide  for each column, measured as the ratio of the number of sequences with each nucleotide divided by the total number of sequences with a nucleotide. this value is calculated with the equation:

  ni=scp∑q∈{a,c,g,u}scq, 

where nip is the nucleotide composition value for the ith column, p∈{a, c, g, u}, and scp is the number of sequences with nucleotide p in column i. an example for the yellow highlighted nucleotides in the conserved column  <dig>  block  <dig> in figure 1a are - {a-0%, c-33%, g-67%, u-0%} for the bacillales node , and {a-14%, c-29%, g-57% and u-0%} for the bacilli node .

in addition to the conservation value  and the composition value , a metric is required that captures both of these measures - the conservation and nucleotide composition values for the columns within each block . an average is computed for the set of scores determined for each sequence within each block.

definition 3: for each block in the specified taxonomic node and subsequence s, y is the number of conserved columns, and z is the number of non-gap conserved columns. the equation for sc - the score for each subsequence within block b is:

  sc=∑i∈zci|y|+ <dig> *∑j∈znj|z|, 

where the conservation value ci is the percentage of sequences with a nucleotide at the ith column in subsequence s , and nj is the nucleotide composition value at non-gapped conserved column j in subsequence s . the value  <dig>  in the second component is the weight that was determined heuristically. the sc values for different blocks in figure 2b and 2f varied from  <dig>  to  <dig> . a value of  <dig>  is the highest possible.

• for the first - conservation value component of the equation:

○ the conservation value for column  <dig> is  <dig>   since six of the seven sequences have a nucleotide in this column.

○ the conservation value for columns  <dig>   <dig>   <dig>  and  <dig> is  <dig>   since all seven of the sequences have a nucleotide in these columns.

○ the y value is the set of highly conserved columns defined operationally as the columns that have a nucleotide in more than 80% of their sequences within a block. as noted earlier a block is usually created with  <dig> -  <dig> highly conserved columns. for the examples in figures  <dig> and  <dig>  blocks have five highly conserved columns.

• for the second composition component of the equation:

○ the composition value for the individual sequences in figure 1b is  <dig>   for columns  <dig>   <dig>   <dig>  and  <dig> for each of the sequences since only one nucleotide type is present in each of the sequences that have a nucleotide at that position.

○ in contrast, column  <dig> has four a's and three g's. those sequences with an a at column  <dig> have 4/ <dig> in the second column of numbers  in figure 1b while the sequences with a g at column  <dig> have a 3/ <dig> in the second column of numbers.

○ the z value - non-gapped conservation values is five for the first six sequences, and four for the seventh sequence.

alignment algorithm
the procedure to align sequences with information from a template alignment utilizes these scores that are determined for each block and for each specific phylogenetic/taxonomic node and its parent's nodes. a description of the general strategy mimics the iterative procedure used by the gutell lab to manually align rrna sequences, starting in the early 1980s  <cit> . this increases the accuracy while minimizes the complexity of the alignment procedure and the compute time required to execute. an example of the alignment procedure is shown in figure  <dig> 

 <dig>  determine the phylogenetic group that the query sequence is most likely a member of.

a. phylogenetic information is known: the first step selects the most closely related phylogenetic/taxonomic group when an exact match occurs between a genus name in the template alignment and the sequence to be aligned the ncbi taxonomic information within rcad is utilized. crwalign- <dig> selects the lowest taxon with existing alignment statistics.

b. phylogenetic information is not known: if no phylogenetic information is known, the crwalign- <dig> will align the new sequence superficially against each taxon at a predefined leaf level, which is six in our experiments. the node that aligns the most nucleotides in the first stage will be used for the remainder of the alignment process for the sequence. since the sequence to be aligned  is within the bacillales taxonomic group, the three aligned bacillales sequences in the initial alignment is selected to be the template . this example uses the same template sequence information in figure  <dig> 

 <dig>  align sequences against the most conserved blocks at the lowest taxonomic nodes :  divide and conquer approach, align the block with the highest sc score for specific taxonomic nodes, then sequentially select blocks with lower scores.

a. with the lowest taxon selected , crwalign- <dig> attempts to align the most highly-conserved blocks with a high average score . to insure the greatest accuracy at this stage, no deletion of conserved columns is allowed, and only a very limited number of insertions between conserved columns are acceptable. aligning the most highly-conserved blocks with stringent criteria at the early stage assures that the aligned block has a high probability of being correct, reduces the complexity of the problem, and increases the speed.

b. the example shown in figure 2b has three highly-conserved blocks in the bacillales alignment, with average scores exceeding  <dig>  . block  <dig> is selected first, since its score of  <dig>  is the highest. the program searches for the subsequence cagcuu or an extremely similar sequence with a score higher than  <dig> . the identified subsequence is aligned with those matching nucleotides in the template . block  <dig> with a score of  <dig>  is aligned next . since both block  <dig> and  <dig> are variable in length, crwalign- <dig> identifies three different subsequences with acceptable sequence identities .

c. the last highly-conserved block aligned in the example is block  <dig> , which is 3' of the previously aligned block  <dig>  the 5' end of block  <dig> - ggguc  does not match the template sequences . since a deletion that is present in all of the sequences to be aligned is not allowed at this stage, block  <dig> might be aligned at the next stage.

 <dig>  align sequences against highly conserved blocks in the parent node:

a. once the alignment against the most conserved blocks at the lowest taxon  is complete, the crwalign- <dig> program will attempt to align sequences to the highly conserved blocks obtained with a set of sequences in the parent taxon . figure 2f reveals only two blocks for the bacilli node with values above  <dig>  - block  <dig>  and block  <dig> . since block  <dig> has been aligned at the lower bacillales taxon, crwalign- <dig> will only attempt to align block  <dig>  and since block  <dig> has five conserved columns at the bacilli node instead of six at the bacillales node, the subsequence ggguc matches the block template without requiring any conserved column deletion .

b. while blocks  <dig>   <dig>  and  <dig> have been aligned , blocks  <dig>   <dig>  and  <dig> have not . this iterative process continues, attempting to identify and then align sub-sequences in the unaligned sequence against the most conserved blocks at the lowest taxonomic level, then the most conserved blocks in the parent taxonomic nodes, then less conserved blocks within the same taxonomic level. the crwalign- <dig> program will again attempt to align sequences to the highly conserved blocks obtained with a set of sequences in the parent taxon. for the example in figures  <dig> and  <dig>  this would be the root taxonomic node . the crwalign- <dig> program will attempt to align sequences against blocks in the bacteria node that have scores above  <dig> . the crwalign- <dig> program continues to the next iteration with a relaxation of the alignment criteria. the minimum block score reduced by 20%  and the allowance of deletions of a conserved column in a potential alignment. while the example in figure  <dig> does not reveal the alignment of blocks  <dig>   <dig>  and  <dig>  it would utilize the same scoring and alignment strategy shown in figures  <dig> and  <dig>  only with relaxed criteria. this process, as noted earlier mimics the process that has been used to successfully manually align the rrna sequences, starting in the early 1980s  <cit> .

crwalign-2
the crwalign- <dig> system is an enhanced and expanded version of the rnamotif program  <cit>  that was developed primarily to identify sequences that satisfy the secondary structure constraints in the descriptor. our new version of this program 1) automatically generates a descriptor, 2) has a richer descriptor syntax that provides for greater specificity, 3) is capable of operating on larger rna molecules, 4) creates secondary structure information for each sequence, 5) automatically aligns sequences based on analogous structural elements, and 6) is written in microsoft c#. the process consists of three stages: 1) computer generate a secondary structural descriptor from an existing sequence alignment and a secondary structure model; 2) use this descriptor to identify secondary structural elements in new sequences and create secondary structure models for each sequence; and 3) use newly created secondary structure model to align sequences based on similar primary and secondary structural elements.

stage 1: computer generated secondary structure descriptor
the structural profile contains information describing various constraints applied to the canonical, regular, or standard rna secondary structure and relevant taxonomy. the syntax of the profile is based on the original rnamotif program  <cit>  but enhanced significantly. the most important enhancements include: a) the structural constraints  are described more accurately and assigned with a weight score indicating its frequency; b) a weight score cutoff section defines the lowest score of an elongating structural model ; and c) a phylogeny section describes the most relevant constraints applying on various phylogenetic groups.

stage 2: identify secondary structural elements and create secondary structure models
the program attempts to identify the structural elements within the descriptor in a sequence. as shown in figure  <dig>  the first step is to read the sequence  and the descriptor that was generated in stage  <dig> 

the next step prioritizes or ranks the structural elements in the descriptor by their stringency, as measured with a probability score for each structural element. the more stringent, the less likely it will occur by chance, and thus has a lower probability score. the identification of the structural model starts with the structural elements with the lowest probability scores, which serve as the initial seed or nucleation points. the program then attempts to identify the structural elements that are adjacent to these initial seeds. a structural element can be either a base paired region  or an unpaired region . when the attempted extension is successful, then this larger extended structure becomes the seed for the next round. this extension of the structural model iterates either to a complete structural model, as defined by the identification of all of the structural elements in the descriptor. or when the extension on the 5' and/or 3' ends of the seeds cannot be extended, and then the process is terminated, resulting in a partial structure model.

consistency checks, an evaluation of the fitness of the constraints for each structural element with the identified structural model, are performed at each round of extension. during the extension, it is possible that a conflict occurs where a putative structural element identified in say round  <dig> conflicts with structural elements identified in round  <dig>  the entire structure model is terminated resulting in a partial solution.

abnormal or aberrant insertions/deletions or nucleotide composition can occur, stopping the continuous elongation. while the original rnamotif would abort, and not report a partial or complete structure model, our newer program allows the user to permit exceptions to the descriptor. the number of exceptions, variances from the canonical or regular structure model can be defined by the user. as expected, the number of complete or partial structure models will increase as the number of allowed exceptions is increased. thus while this number should be minimal, it is extremely useful to have this option to permit the identification of structural models that are truly exceptions to the norm.

the specificity and resolving power for this identification is greatest when the phylogenetic information is known, since the descriptor has more structural constraints . in contrast, the generalized descriptor identifies more sequences and requires more computational time.

it is important to note that this program not only identifies sequences that contain the structure model in the descriptor, but also creates a structure model for those sequences that have one. this feature thus allows a very large number of comparative structure models to be generated. these comparative structure models are used to evaluate the accuracy of rna folding algorithms  <cit> .

stage 3: aligning sequences based on similar primary and secondary structural elements
as noted earlier, our version of the enhanced rnamotif program is capable of aligning sequences based on a common secondary structure. with the complete structural models determined in stage  <dig>  the sequence to be aligned is split into multiple fragments. each fragment represents a specific structural element in the secondary structure. after the fragments are generated, this alignment program identifies the previously aligned template sequence that is most similar to the sequence to be aligned, based on the length of the fragment and the sequence conservation. the alignment of the new sequence against the template will first attempt to juxtapose the pairing regions , regardless of sequence conservation. in contrast, sequence conservation in the unpaired regions is the primary factor in the juxtaposition of sequences.

RESULTS
the accuracy of the alignment results, the running time of the program executions and the scalability for large datasets of both crwalign- <dig> and crwalign- <dig> has been evaluated. the result has been compared to eight existing widely-used alignment programs.

programs compared
there are eight alignment programs included in the comparison with crwalign- <dig> and crwalign-2: ssu-align, infernal, hmmer, mafft, sate, rdp, silva, and greengenes. six are template-based programs: ssu-align, infernal, hmmer, silva, rdp, and greengenes while the other two  align sequences from scratch. among the six template-based programs, ssu-align, innfernal and hmmer are stand-alone and available for download at http://selab.janelia.org/software.html). silva, rdp and greengenes are only available as web-servers and able to only align 16s rrna while the remaining seven programs  are capable of aligning any type of rna sequences. our analysis of these programs and web sites used the default parameters.

calculating the accuracy of an alignment
both test and template data sets are random subsets of the bacterial 16s rrna alignment available at the comparative rna web  site . none of the sequences in the test set are present in the template set . in measuring the template size effect, small template sequence alignments are always subsets of any larger template alignment .

no overlap occurs between sequences tested and sequences in template alignments.

the accuracy of the alignments generated for this analysis is evaluated through pairwise sequence comparisons. given a pair of sequences i and j, the pairwise sequence identity for sequences i and j is defined as:

  psiij=|b||e| 

where b is the set of columns that contain a nucleotide from both sequences i and j, and e is the set of columns that contain a nucleotide from either sequence i or j. the pairwise sequence accuracy is defined as

  accuracy=|s||e| 

where s is the set of columns in sequence i and j that have the identical stack in the test alignment and the correct alignment. for example, if nucleotide  <dig>  of sequence i is stacked with nucleotide  <dig>  of sequence j in the correct alignment, then the test alignment must have nucleotide  <dig>  only stacked with nucleotide  <dig> .

accuracy comparison with other methods
several alignment programs have limitations in the type of sequence to be aligned. since the bacterial 16s rrna is the only rna that can be aligned by all ten programs, it is used in this study. a test set consisting of  <dig> bacterial 16s rrna sequences was aligned by each alignment program. the accuracies of the generated alignments were calculated based upon the pairwise sequence identity ranges . the four programs that accept template alignments  were given three template alignments with different size , and the best results of each are presented in figure  <dig> 

all  <dig> programs achieved high accuracy in the 90-100% pairwise sequence identity range. crwalign- <dig>  crwalign- <dig> and silva outperformed the other programs with ~ <dig> % accuracy, which was  <dig> %  to  <dig> %  higher than the other seven programs. in the 80-90% identity range, crwalign- <dig>  and crwalign- <dig>  were superior to the other eight programs, including silva, by  <dig> %  to  <dig> % . in the 70-80% sequence identity range, crwalign- <dig> achieved ~99% accuracy, 1% above the second best program. crwalign- <dig> and ssu-align followed with  <dig> % accuracy. the other seven programs varied from  <dig> %  to  <dig> %  less than the top three programs. in 60-70% and 50-60% sequence identity ranges, both crwalign- <dig> and crwalign- <dig> beat every other program in accuracy, while crwalign- <dig> achieved higher accuracy scores than crwalign- <dig>  while the de novo programs  were able to align sequences as well as the template-based programs in the high sequence identity range , their accuracies were remarkably lower than the template-based accuracies for sequences with low pairwise identity.

the structure-based alignment program, crwalign- <dig>  identified the complete secondary structural models in the unaligned sequences and used the structural model to align the sequences. this required the unaligned sequence to be "complete": it should contain every structural element  in the reference sequences. a significant percentage of the unaligned sequences are not complete. thus it is anticipated that the crwalign- <dig> will align complete sequences with higher accuracy.

effect of template size on accuracy
to determine the influence of the template size on the accuracy for crwalign- <dig>  crwalign- <dig>  hmmer and infernal, each program was analyzed to align  <dig> bacterial 16s rrna sequences with three different template alignments containing  <dig>   <dig> and  <dig> bacterial 16s rrna sequences. as shown in figure  <dig>  crwalign- <dig>  hmmer, and infernal achieved nearly identical accuracies in all three template alignments, while crwalign- <dig> was always superior to hmmer and infernal.

in contrast, crwalign- <dig> aligned sequences more accurately when the template alignment contained more sequences. in the 50-60% and 60-70% pairwise sequence identity ranges, the large template alignment helped crwalign- <dig> to obtain much higher accuracy. whilecrwalign- <dig> performed best with the large template alignment containing  <dig>  sequences, its results with  <dig> sequence template alignment was still superior or as good as other alignment programs in this study .

comparisons of the run time of programs
the execution time required to align  <dig> bacterial 16s rrna sequences were determined for crwalign- <dig>  crwalign- <dig>  and the three stand-alone programs, hmmer, infernal and ssu-align. there were three data points collected for crwalign- <dig>  crwalign- <dig>  hmmer, and infernal that accept user-defined template alignment, while only one data point for ssu-align since it integrated the profile  into the program. due to platform requirements and software dependencies, crwalign- <dig> and crwalign- <dig> were tested on windows server  <dig> r <dig> enterprise  with an intel xeon x <dig> @  <dig> ghz. hmmer and infernal were run on a linux platform  with an intel core i <dig>  <dig> @ <dig>  ghz. the ssu-align program was run on solaris  <dig>  with an intel xeon processor  <dig>  these three server configurations have very comparable speeds. figure  <dig> showed that crwalign- <dig> ran more than  <dig> times faster than ssu-align, and on average, four times faster than hmmer, and five times faster than infernal. crwalign- <dig> created the complete secondary structure for each sequence to be aligned. the identification of structural models was an iterative process and required significant amount of computational time, which was still faster than ssu-align. while the comparative structural models generated with crwalign- <dig> are essential for the alignment of sequences, these structure models can be used for other applications, e.g. to improve and evaluate rna folding algorithms  <cit> .

scalability of crwalign
crwalign- <dig> consists of two phases: 1) analyzing the template alignment to generate statistics, and 2) aligning sequences. the crwalign- <dig> programconsists of three phases: 1) the generation of structural descriptor, 2) the identification of complete structural models for each sequence, and 3) aligning sequences. the total run time of both crwalign- <dig> and crwalign- <dig> is expected to be sensitive to the template size as well as the number of sequences to be aligned.

the execution time of crwalign- <dig> and crwalign <dig> for aligning two test sets with varying size using three different template alignments  were determined and shown in figure  <dig>  for crwalign- <dig>  the computational cost of generating the statistics increased linearly with the number of sequences in the template alignment, while the execution time of the alignment phase was linear to the number of sequences to be aligned . in addition, crwalign- <dig> was able to align sequences faster as the number of sequences in template alignment increased. this increase in speed was most prominent when the size of template alignment is relatively small, e.g. the template size was increased from  <dig> to  <dig>  there will be a diminishing return as the size of the template alignment grows to a large number.

similar results were observed in crwalign- <dig> . the computational time of generating the structural descriptor was linear to the number of sequences in the template alignment, while the identification of structural models and aligning sequence increased computational cost linearly to the number of sequences to be aligned. the identification of structural models was the most time consuming stage.

discussion and 
CONCLUSIONS
while manual curation has been used to create the optimal juxtaposition of similar structural elements in the sequence alignments available at the comparative rna web  site  <cit> , this process can require a significant amount of time. with the development of next generation sequencing technology that generates exceedingly large amounts of sequence data, manual curation is not feasible. thus it is an essential and challenging task to develop alignment programs that will accurately and quickly facilitate the creation of sequence alignment.

in addition to crwalign- <dig> that aligns sequences  <cit> , we have developed a second template-based alignment program - crwalign- <dig> that utilizes primary and secondary structure constraints. both programs significantly outperform analogous programs in accuracy. the crwalign- <dig> program utilizes multiple dimensions of data including sequence composition, column conservation and phylogenetic information. the crwalign- <dig> program utilizes secondary structural information, sequence composition and phylogenetic information. both programs retrieve the required information from rcad, and use it to generate the statistics and structural descriptor which helps aligning new sequences.

the accuracy of both crwalign- <dig> and crwalign- <dig> is tested on a set of 16s bacterial rrna sequence alignments and compared with various template-based and de novo rna sequence alignment programs . the competing programs get similar accuracy to both crwalign programs when the sequence identity was over 90%. however, for lower sequence identity, the other programs are less accurate than crwalign- <dig> and crwalign- <dig>  even for sequence identity ranges of 50-60%, both crwalign programs are > <dig> % accurate.

while the crwalign- <dig> program creates complete secondary structural models for its alignment process, the secondary structure information for each sequence is valuable for the development of rna secondary structure prediction programs  <cit> , and for the determination of structural statistics . the structure information created from crwalign- <dig> can be converted into different formats, such as bpseq, alden, rnaml, ct, and bracket , further increasing their utility. currently the gutell lab's comparative rna web  site has nearly  <dig>  structure files in these multiple formats. the crwalign- <dig> system has the potential to increase the number of comparative structure model files to more than  <dig> , <dig> 

the execution time of the crwalign- <dig> program is significantly less than the three programs available for download, ssu-align, hmmer, and infernal . crwalign- <dig> creates the comparative structural model for each sequence to be aligned, requiring more computational cost as noted earlier. the performance of both crwalign programs scale linearly with the number of sequences 1) to be aligned and 2) in the template alignment .

since the rate of sequence data generated with next-gen sequencing is increasing faster than moore's law, it is essential that more accurate and fast automatic alignment methods be developed. and given that multiple-dimensions of information are available in systems like rcad  <cit> , we have developed two systems to address this challenge and need.

competing interests
microsoft research provided an external research grant to rrg. although one of the authors, so, is employed by microsoft, no one else at microsoft or microsoft research have any competing interests with any aspect of this manuscript. the other authors have declared that no competing interests exist.

authors' contributions
lei shang:

• project design and contributed to the preparation of the manuscript

• developed computer programs

• analysed the data

david p. gardner:

• project design and contributed to the preparation of the manuscript

• developed computer programs

• analysed the data

weijia xu:

• project design and contributed to the preparation of the manuscript

• analysed the data

jamie j. cannone:

• prepared data for project

• consulted on program development, general comments about the study, and revised the manuscript

daniel p. miranker:

• consulted on program development, general comments about the study, and revised the manuscript

stuart ozer:

• consulted on program development, general comments about the study, and revised the manuscript

robin r. gutell:

• project design and contributed to the preparation of the manuscript

• analysed the data

