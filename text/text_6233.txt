BACKGROUND
computational protein structure prediction has made great progress in the last three decades  <cit> . protein inter-residue contact prediction is one of the problems being actively studied in the structure prediction community. recent casp   <cit>  events have demonstrated that a few true contacts, extracted from template-based models, can provide very important information for protein structure refinement, especially on targets without good templates in pdb  <cit> . for example, misura et al.  <cit>  have revised the widely-used ab initio folding program, rosetta  <cit> , by incorporating inter-residue contact information as a component of rosetta's energy function, and shown that the revised rosetta exhibits not only a better computational efficiency, but also a better prediction accuracy. for some test proteins, the models built by this revised rosetta are more accurate than their template-based counterparts, which is rarely seen before  <cit> . zhang-server  <cit>  and tasser  <cit>  perform very well in both casp <dig> and casp <dig>  one of the major advantages of these two programs over the others is that both depend on contacts and distance restraints, extracted from multiple templates, to refine the template-based models. it has been shown by zhang et al. that ab initio prediction methods can benefit from contact predictions with an accuracy that is higher than 22%  <cit> .

protein inter-residue contact was first studied by  <cit>  to calculate the mean force potential. göbel et al.  <cit>  formally proposed the problem of contact prediction, and showed that correlated mutation  is useful information to predict inter-residue contacts. the fundamental assumption is that if two residues are in contact with each other, during evolution, if one residue mutates, the other one has a high chance to mutate as well. thus, by analyzing residue mutation information from multiple sequence alignments, it can be predicted whether or not two residues are in contact. since then, different correlated mutation statistical methods have been carefully examined  <cit> .

according to whether structural templates information is taken into consideration, contact prediction methods can be classified into two categories: sequence-based methods and template-based methods. among all the sequence-based methods, some rely solely on correlated mutation information calculated by different statistical approaches  <cit> , while others encode the correlated mutation, together with other features such as secondary structure and solvent accessibility, into machine learning models  <cit> . although the correlated mutation performs well on local contact prediction, which is usually defined to be two residues within six amino acids from each other in the protein sequence, it usually fails for non-local contacts. therefore, other information such as evolutionary information and secondary structure information, has been applied to improve the performance of contact prediction methods  <cit> . in  <cit> , fariselli et al. encoded four types of features into a neural network based server : 1) correlated mutation, 2) evolutionary information, 3) sequence conservation, and 4) predicted secondary structure.

they defined that two residues are in contact if the euclidean distance between the coordinates of their cβ atoms  is smaller than 8Å, and the sequence separation between the two residues is at least seven to eliminate the influence of local α-helical contacts. cornet achieves an average accuracy of 21%. other features have been investigated since then  <cit> . profcon  <cit> , one of the best three contact prediction servers in casp <dig>  <cit> , encodes more information into its neural network model, including solvent accessibility and secondary structure over the regions between the two residues, as well as the properties of the entire protein. profcon performs impressively on small proteins or alpha/beta proteins with an accuracy of more than 30%. recently, shackelford and karplus  <cit>  proposed a neural network based method to calculate the correlated mutation by using the statistical significance of the mutual information between the columns of multiple sequence alignment. their sam-t <dig> server outperforms all the other contact prediction servers in casp <dig>  and achieves an average accuracy of 45% for all casp <dig> target proteins, which is higher than that of any previously reported study.

in contrast to these sequence-based methods, which encode correlated mutation information and other sequence-derived information, there are some studies on predicting inter-residue contacts from structural templates  <cit> . the underlying assumption for such methods is that contacts are usually very conserved during evolution. consequently, templates, with structures similar to that of the target protein, usually contain common contacts, such that consensus methods work well. bystroff et al.  <cit>  have considered folding pathways, and predicted contacts by employing hmmstr  <cit> , a hidden markov model for local sequence-structure correlation. lomets  <cit> , a majority voting based consensus method, takes nine state-of-the-art threading programs as inputs. lomets predicts contacts by attempting to select the best input model.

recently, two support vector machines  based contact prediction methods, svm-seq and svm-lomets, have been proposed by wu et al.  <cit> . svm-seq only takes sequence-derived information into consideration, whereas svm-lomets, a consensus method, is based on structural templates. svm-lomets differs from its ancestor, lomets, in that it carefully trains contact frequency, cα distances, and template quality by an svm model. the inputs for svm-lomets are nine state-of-the-art threading programs: fugue  <cit> , hhsearch  <cit> , paint, ppa-i, ppa-ii  <cit> , prospect <dig>  <cit> , sam-t <dig>  <cit> , sp <dig> and sparks <dig>  <cit> . both svm-seq and svm-lomets are tested on a set of  <dig> proteins, on which each achieves an average accuracy of 29% and 53%, respectively. although it is widely acknowledged that a method usually has different performance on different data sets, one can still expect that a consensus contact prediction method will outperform the individual servers. instead of testing on the entire casp <dig> data set, these two programs are further tested on the  <dig> new fold  targets of casp <dig>  the average accuracies are 26% and 11%, respectively. through a comprehensive comparison of sequence-based and structure-based methods, including svm-seq, svmcon  <cit> , svm-lomets, lomets, and sam-t <dig> server, wu et al. have concluded that template-based methods are better than sequence-based methods on template-based modeling  targets, but worse on new fold targets. however, even for new fold targets, where the threading methods fail to identify good templates, the templates discovered by threading usually contain many true contacts. the major challenge is that some true contacts are not contained in a majority of the top templates, resulting in the failure of the traditional majority voting methods. in this paper, we propose a novel consensus contact prediction method to eliminate the effect of server correlation, and to discover true contacts even when they are not commonly found in the top templates. all the contacts, determined by structure prediction servers, are considered to be candidates. our consensus method then assigns a confidence score to each contact candidate, while also taking correlated mutation information into consideration.

RESULTS
data set
server selection
to evaluate the performance of the proposed consensus method, six threading-based protein structure prediction servers are used: foldpro  <cit> , mgenthreader  <cit> , raptor  <cit> , fugue <dig>  <cit> , sam-t <dig>  <cit> , and spark <dig>  <cit> . although there are some servers, such as rosetta and zhang-server, with a better performance than that of the six servers, they are not used because their models are already refined by predicted contacts.

training and test data
the biennial casp competition provides us a comprehensive and objective data set. the casp <dig> targets and models generated by the six servers are adopted as the training and test data. for each server on a target, the five submitted models are considered. all server models are downloaded from the casp <dig> website, except for mgenthreader, which does not participate in casp <dig>  we submitted the casp <dig> targets to the mgenthreader web server, and downloaded models from there before august  <dig>  therefore, all these models are generated before the native structures of the casp <dig> targets are released. eighty nine casp <dig> target proteins are used as valid targets for the casp <dig> evaluation, while  <dig> protein sequences are released as targets. redundancy is removed at the 40% sequence identity level by using cd-hit  <cit> , which results in  <dig> target proteins. only t <dig> is removed, because it shares 71% sequence identity with t <dig>  furthermore, two targets  are removed from the data set due to some errors in the models, generated by some of the six individual servers on these two targets; for example, the models generated by some servers only cover discontinued regions of the target proteins. to conduct a cross-validation, the  <dig> target proteins are randomly divided into four sets of  <dig>   <dig>   <dig>  and  <dig> proteins, respectively. if one target belongs to a certain set, all of its models and contacts are in the same set.

data set statistics
the performance of the six individual servers are compared in terms of prediction accuracy and coverage. in evaluating the performance of a server, only the best models of each target are considered. if the number of contacts in a model is less than l/ <dig>  where l is the target size, both the accuracy and the coverage for this model are set to  <dig>  as shown in table  <dig>  the average accuracy of the six servers ranges from 43% to 53%. the sam-t <dig> server has the highest accuracy but the lowest coverage. the artificial server "overall" in table  <dig> means a server that generates the union set of all contacts contained in the best models. the accuracy of server "overall" is very low , compared to that of any individual server. note that the server "overall" consistently contains many more true contacts than any individual server does. therefore, the low accuracy of the server "overall" implies that the false contacts, generated by these individual servers, differ from each other in most cases, whereas the individual servers tend to generate common true contacts. this means the consensus method can probably be employed to differentiate true contacts from false ones.

all values are percentiles.

as shown in table  <dig>  the average coverage of the six servers ranges from 37% to 52%. however, when they are combined, the coverage for server "overall" is very high . this indicates that some true contacts are predicted by only a small number of individual servers, and the different servers can predict a common subset of the true contacts. on the other hand, this implies that most of the native contacts are contained in the models, generated by threading programs. thus, the challenge is how to identify them.

server correlation and latent servers
this section studies the correlation of the six individual servers and derives the latent servers. table  <dig> lists the pairwise correlation of the six individual servers, which is calculated according to eq. . note that the matrix is not symmetric, because different servers predict different numbers of contacts. as shown in table  <dig>  the correlation between two different servers ranges from  <dig>  to  <dig> , which implies that some servers are more closely correlated than others in terms of contact prediction. therefore, the majority voting based consensus methods, which simply apply majority voting and assume each server is independent, will not always work because some of the common components of these servers are over-expressed.

the relationship between the latent servers and the individual ones is then derived according to eq. . note here that the top five models for each target of each server are considered. the confidence score of a server on a contact candidate is estimated by the number of models in the top five, containing this contact, divided by the total number of models considered . as shown in table  <dig>  different latent servers represent different individual servers. for example, h <dig> represents the common characteristics shared by these individual servers, because the weights of h <dig>  on these individual servers, are about the same; h <dig> differentiates fugue <dig> from the other servers; h <dig> represents foldpro by a large positive weight, and represents mgenthreader by a large negative weight. based on the eigenvalues, h <dig> is eliminated, since the eigenvalue for h <dig> is much smaller than that of the others. thus, h <dig> is considered as random noise.

the optimal weights for the latent servers are derived by the cross-validation of the four sets. correlated mutation is considered to be another independent latent server, because it provides a target sequence-related probability for each contact candidate. correlated mutation is calculated as previously described in  <cit> . each time the ilp model is trained on three of the four sets, and a set of weights is optimized by the ilp model, based on which a new prediction server is derived, named as , and , respectively. in this paper, s* refers to server  on test set i . since the inputs are the six individual servers, after the optimal weights λ* are calculated by the ilp model, each hidden server in eq.  are further replaced by the linear combination of the original individual servers as calculated in eq. . table  <dig> shows the linear combination representation of s* on the individual servers and correlated mutation. it is clear that the four sets of weights are very similar. note that mgenthreader has negative weights. this implies that the contribution of mgenthreader is accounted for by the other individual servers.

cm: correlated mutation.

casp <dig> evaluation
we first assess our consensus server s* by receiver operating characteristic  plots. they provide an intuitive way to examine the trade-off between the ability of a classifier to correctly identify positive cases and to incorrectly classify negative cases. figure  <dig> depicts the performance of server s* and the six individual servers on the four test sets.

as shown in figure  <dig>  server s* performs better than any individual server on all the four test sets. for each server, the performance of this server on test set  <dig> is slightly better than that on the other three test sets, which means test set  <dig> is the easiest among those four. raptor performs better than other individual servers on the first three test sets, and spark <dig> exhibits the best performance on test set  <dig>  there are distinct performance differences between server s* and the best individual server on test set  <dig>   <dig>  and  <dig>  when the false positive rate is below  <dig> . however, the difference is not obvious on those three test sets, when the false positive rate is higher than  <dig> . for test set  <dig>  the most difficult test set, the performance of s* is much better than that of any individual server all the time. it is also noticeable that the curve of s* is much smoother than that of the individual servers.

then, the accuracy of s* is evaluated. table  <dig> summarizes the average accuracy of s* and the majority voting method on the four test sets, where different numbers of top contacts are evaluated. recall s* generates a confidence score for each contact candidate. the top contacts for each target are readily found by sorting the candidates according to their confidence scores. the majority voting method is implemented as follows: for each contact candidate, its confidence score by the majority voting method is calculated as the sum of the confidence scores assigned by the six servers. after the scores of all the contact candidates are calculated and sorted, different numbers of the top candidates are chosen.

the first column shows the number of top contacts being considered. the second to fifth columns show the accuracy of our method on the four test sets respectively. the sixth column shows the overall accuracy of our method on all the four test sets. the last column shows the overall accuracy of the majority voting method on all the four test sets. all values are percentiles.

as shown in table  <dig>  the average accuracy increases when the number of the top contacts decreases, except for server s* on test set  <dig>  in which the accuracy for the top l/ <dig> contacts is slightly lower than that for the top l/ <dig> contacts. this occurs because l/ <dig> is usually a small number , and a few incorrectly predicted top contacts will influence the total accuracy significantly. the overall accuracy of s* on all the four test sets is at least 63%, and is consistently higher than the accuracy of the majority voting method. for the top l/ <dig> contacts, the accuracy of s* is 73%, which is about 5% higher than that of the majority voting method, and much higher than the accuracy of any previously reported study. figure  <dig> reflects the prediction accuracy for the top l/ <dig> contacts of s* on each casp <dig> target. it can be seen that the accuracy is higher than 80% on most targets. in fact, of the total  <dig> targets, s* has an accuracy of 100% on  <dig> targets, higher than 90% on  <dig> targets, higher than 80% on  <dig> targets, and below 40% on only  <dig> targets. note that s* has an accuracy of  <dig> on two targets: t <dig>  and t <dig> . we carefully look into these two cases. both targets are very short. the target sequences, published by casp <dig> for t <dig> and t <dig>  have  <dig> and  <dig> residues, respectively. however, the experimentally determined size used by casp <dig> to evaluate these two targets are only  <dig> and  <dig>  respectively. this conveys that some parts of the targets are not experimentally determinable nor accurate enough. thus, l/ <dig> is only  <dig> and  <dig> for the two targets. additionally, all the six individual servers perform poorly in terms of the contact prediction, which means there are only a few correct candidates among a large number of incorrect ones. this can explain the failure of s* on t <dig> and t <dig> 

to evaluate more carefully how much our consensus method can improve upon individual servers and the simple majority voting method, all the targets are divided into three categories: easy , medium , and hard , according to the casp <dig> assessment . table  <dig> shows the average accuracy and deviation on the top l/ <dig> contacts of s*, the six individual servers, and the majority voting method. as shown in table  <dig>  for easy, medium, and hard targets, the accuracy of s* on the top l/ <dig> contacts is 94%, 76%, and 37%, respectively, and much higher than the best individual server, where the improvement is at least 17% for each case. on the other hand, server s* always performs better than the majority voting method, and the improvements are about 2%, 5%, and 24%, respectively. this exactly verifies the server correlation assumption because, for easy targets, individual servers usually do well, which means for a contact candidate, the more servers that support it, the more likely it is correct. however, the majority voting rule does not always work on medium and hard targets, because it suffers from the over-expressed common components of the input servers due to the server correlation. thus, our consensus method does much better than the majority voting method on harder targets.

accu.: accuracy. dev.: deviation. all values are percentiles.

depending on the sequence separation, contacts can be classified as short-range contacts , medium-range contacts , and long-range contacts   <cit> . the performance of our method is further evaluated on different separation ranges for target protein classes with different difficulty levels. as shown in table  <dig>  the accuracy of a certain separation range decreases clearly when target proteins become harder. for easy targets, the accuracy of long-range contacts is higher than that of short- and medium-range contacts. this makes sense because for an easy target, it is very likely that all the individual servers predict models that have very similar topology to the native structure. thus, these models contain common long-range contacts, which helps to determine the overall topology. for medium targets, our method achieves similar performance on different separation ranges. not surprisingly, when applied on hard targets, the accuracy of long-range contacts is much worse than that of short- and medium-range contacts. this coincides with the fact that the individual servers are usually not able to generate models with correct folds, which causes most long-range contact candidates to be wrong ones. among the three categories of the test proteins, the new fold category is much more important than the other two for fairly evaluating the performance of a contact predictor, especially for template-based consensus methods. in fact, new fold targets are adopted as the assessment data set for the contact predictors by casps. table  <dig> shows the average accuracy on the top l/ <dig> contacts of the six individual servers, the majority voting method, and our method on the  <dig> new fold targets of casp <dig>  note that the classification of the new fold targets comes from the assessors of casp <dig>  according to the criterion that no server could find the correct templates although there might be homologs in the pdb. our method significantly outperforms the best individual server on eight out of the  <dig> targets, and performs worse than the best individual server on five targets. it is noticeable that sam-t <dig> outperforms our method on four of these five targets. the reason is that sam-t <dig> does not generate complete models for these targets. instead, it generates structures only for some very conserved regions of the targets. the contacts predicted by sam-t <dig> thus cover only a small portion of the targets. it can also be seen from table  <dig> that our method performs much better than the majority voting method on new fold targets. more specifically, the accuracy of our method at least doubles that of the majority voting method on  <dig> of the  <dig> targets. on the other hand, only four of these  <dig> new fold targets lacked any homologs during casp <dig> season, i.e., t <dig>  t <dig>  t <dig>  and t <dig>  <cit> . this implies that although other new fold targets have similar structures in the pdb, almost all structure prediction servers fail to detect them. thus, by using our predicted contacts, one may be able to identify the similar structures for these target proteins, especially for the proteins on which our method achieves a high accuracy, such as t0316_d <dig>  t <dig>  t0347_d <dig>  t <dig>  t0356_d <dig>  t0356_d <dig>  and t <dig> 

top l/ <dig> contacts are considered. all values are percentiles.

fdp: foldpro, mgth: mgenthreader, rap: raptor, fug: fugue <dig>  sam: sam-t <dig>  sp3:

spark <dig>  mv: majority voting, s*: our method. all values are percentiles.

we are not able to obtain top-notch contact predictors, such as svm-lomets, the best published consensus method, svm-seq, the best reported study on new fold targets, and sam-t <dig> server, the best evaluated contact predictor on casp <dig>  thus, the performance of these three methods is retrieved from  <cit> . when svm-lomets, svm-seq, and sam-t <dig> server are applied to the  <dig> new fold targets of casp <dig>  each achieves an accuracy of  <dig> %,  <dig> %, and  <dig> % on the top l/ <dig> contact predictions, respectively. on the same data set, the accuracy of our method for the top l/ <dig> contacts is 37%, which indicates that the improvements are significant. recall that among all three methods, svm-lomets is the only template-based consensus method. although the input threading programs of our method are not the same as svm-lomets, both methods contain some common input servers such as fugue and sam-t <dig>  the different input servers are within a similar range of accuracy in terms of structure prediction according to the casp <dig> evaluation; three inputs for svm-lomets, i.e. paint, ppa-i, and ppa-ii, are components of zhang-server, which is ranked the best among all the structure prediction servers on casp <dig>  thus, the huge improvement of our method over svm-lomets demonstrates that by revealing the server correlation and optimizing the gap between the true and false contacts, superior contacts can be predicted than those of other consensus methods.

case study on two casp <dig> new fold targets
as shown in the previous section, our method significantly outperforms the other methods, especially on new fold targets. two casp <dig> new fold targets, t <dig> and t <dig>  are investigated in this section. t <dig>  is a zinc finger protein from the erf <dig> methyltransferase complex  <cit>  with  <dig> residues. t <dig>  is protein yvyc from bacillus subtilis  <cit>  with  <dig> residues. table  <dig> lists the tm-score  <cit> , contact accuracy, and contact coverage of the best model among the five models submitted by each threading server on t <dig> and t <dig>  all the six threading servers fail to detect correct templates. typically, a tm-score lower than  <dig>  indicates a random structure, and a tm-score higher than  <dig>  indicates a meaningful structure  <cit> . consequently, all the models predicted by these six servers are probably not meaningful structures.

atm-score of the best model among the five submitted models for each server.

bcontact accuracy of the best model for each server. all contacts contained in this model are evaluated.

ccontact coverage of the best model for each server. all contacts contained in this model are evaluated.

the hardness of these two targets causes all the six threading servers to fail. thus, the templates selected by the threading servers are almost random and significantly different from each other, which consequently leads to the failure of the majority voting consensus method. as shown in figure  <dig>  the majority voting method is even worse than some individual servers on these two targets, whereas our method performs significantly better than any individual server. in fact, the top l/ <dig> accuracy of our method is  <dig> % and  <dig> % on these two targets, while the majority voting method achieves an accuracy of only  <dig> % and  <dig> %, respectively. one may argue that some of the true contacts picked up by our method are strongly supported by correlated mutation. even when we remove correlated mutation from our method, its accuracy decreases only slightly, to  <dig> % on t <dig> and  <dig> % on t <dig>  the minor difference shows that correlated mutation information is not that important for these two targets. therefore, the case study on these two new fold targets demonstrates that by removing the server correlation and optimizing the best combination of the individual servers, it is possible to select true contacts even if the majority of the individual servers does not support them.

although the goal of this paper is to propose a novel contact prediction method, and thus the modeling of the entire proteins is beyond the scope of this paper, it is still important to demonstrate the potential applications of the proposed method in protein structure prediction methods. one of the major bottlenecks for the state-of-the-art protein structure prediction methods is model ranking. the most widely used method for model ranking is clustering. however, although clustering based methods work well on easy and medium targets because for such targets, most of the models are high-quality ones and very similar to each other, such clustering methods usually fail on hard targets since the models usually have poor quality and are very different from each other. thus, we test how well the contacts predicted by our method can rank the models on t <dig> and t <dig>  we design a simple contact ranking score. given the top l/ <dig> contacts predicted by our method, for each contact, a model scores  <dig> if this model indeed contains this contact, and scores  <dig> otherwise. table  <dig> shows the ranking of the best model, in terms of tm-score, of each individual server by their default model ranking method  and the ranking of the best model by our contact score. it is clear that our contact score has much better ranking of the best models for most cases. additionally, for both t <dig> and t <dig>  the best models generated by all these six individual servers, i.e., model  <dig> of raptor for t <dig> and model  <dig> of raptor for t <dig>  are ranked first among all the models by our contact score. this demonstrates the potential applications of our contact prediction method to select better submitted models or to select good models at each iteration of the refinement process, especially for hard targets.

discussion
the experimental results demonstrate that by accounting for the correlation among different threading programs, our consensus method can successfully identify native contacts, even when these contacts are not contained in the majority of the models. it is worth noticing that the proposed method is quite different from the more direct linear combination or non-linear combination of the original individual servers. the underlying reason is that by detecting correlation among the individual servers and removing the last latent server which corresponds to the random noise, our ilp-based optimization process is able to find an optimal solution without the bias caused by the random noise. in this paper, our method is not directly compared to other consensus contact predictors on exactly the same input servers, since servers used in other studies are not all available. instead, six threading programs are chosen in our method. they have similar or even lower accuracy levels than those used in other consensus contact studies.

one drawback of our method is that it is a selection-only consensus method. if all the individual servers generate models with very few native contacts, our method will fail simply because there is no correct contact to choose. to avoid this drawback, a server independent feature, correlated mutation, is used to introduce some contact candidates which are not predicted by any individual server. however, the signal contained in the correlated mutation is not strong enough to find native contacts. as a result, future work will be to combine more server-independent features to introduce true contact candidates, even if all the individual servers fail to do so. another drawback is that the small data set used in this paper makes the evaluation of the method's performance less reliable compared to more extensive tests. this is mainly due to the availability of the individual servers used in our method. we did not conduct the experiments on both casp <dig> and casp <dig> because some of these individual servers have been improved significantly after casp <dig> and some of these servers were not available at casp <dig>  however, the cross-validation measurement applied in this paper can hopefully reduce the unreliability to the lowest level.

a potential application of our contact prediction method is to provide highly conserved constraints for ab initio folding or protein structure refinement. recent research has shown that by incorporating contacts predicted from template-based methods or sequence-based methods, a structural model generated by comparative modeling can be refined  <cit> . however, if all the individual servers predict the structure for a target protein extremely well or very poorly, our consensus method will probably not help too much. in the former case, since almost all the contact candidates provided by these individual servers are correct ones, our method can only improve the accuracy slightly. in the latter case, since there are very few correct contact candidates for our method to choose from, the refinement process can hardly benefit from our results. however, in any other case, contacts provided by our method should help with the folding simulation. the reason is that our method can generate a small number of highly conserved contacts. considering only a small number of contacts can reduce the conformational search space, and thus increase the speed and reduce the chance of generating wrong models. moreover, experimental results demonstrate that our method can generate contacts with a higher accuracy than both sequence-based and template-based methods. this can reduce the risk of generating models with incorrect contacts, which can reduce the risk of selecting incorrect models from the final decoy set, and thus, greatly increase the overall ab initio folding accuracy.

CONCLUSIONS
we have described a consensus contact prediction method, that is able to reduce the server correlation. experiments on casp <dig> data set show that our method significantly outperforms any previously reported study, especially on new fold targets. therefore, the proposed method can hopefully provide a powerful tool for protein structure refinement and prediction use. the program of the proposed method is available upon request.

