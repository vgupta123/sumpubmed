BACKGROUND
high throughput next-generation sequencing  technologies are very rapidly becoming standard tools in biology. the data generated are large and extremely rich. as such, the sequence read archive  has been set up at ncbi in the united states, embl in europe, and ddbj in japan to capture these data in public repositories in much the same spirit as miame-compliant microarray databases like ncbi gene expression omnibus  and ebi arrayexpress. as these public data resources continue to grow, the opportunities to leverage them for comparison to private data or to generate novel hypotheses will also grow.

searching for and retrieving data from the sra database is becoming a common task for those involved in all aspects of biological research. the sra website offers interactive search functionality that is often adequate to find datasets of interest. sradb is not meant to replace these workflows, but to augment them with additional search capabilities and programmatic access to sra data and metadata. the package has been developed to provide a convenient and integrated framework to query and access sra metadata quickly and powerfully from within r
 <cit>  and bioconductor
 <cit> . in addition, sradb features functionality to determine availability of sequence files and to download files of interest in bulk based on the results of queries on the metadata. the data consumer can then use r, bioconductor, or third- party tools to proceed with analysis. finally, because of our own need to visualize processed data in bulk, particularly in the context of experimental metadata, the package provides functions to let r interacts with a powerful and feature-rich genome browser - the integrative genomics viewer  for data visualization and exploration.

sra does not currently store aligned reads or any other processed data that might rely on alignment to a reference genome. however, the ncbi geo database does often contain aligned reads for sequencing experiments and the sradb package can be used to facilitate access to these data as well. since sra is a continuously growing repository, the sradb sqlite file is updated regularly.

design
submission of sra data includes experimental data  and metadata describing the experiments and biologicals. the metadata are composed of five main data objects: submission, study, sample, experiment and run. each object is defined by an xml schema and an xml submission contains one or more metadata objects that are related to each other. after submission, an unique accession number is issued for each object. the sradb package maps each of the five main data objects to a set of five relational database tables. this mapping then exposes the power and expressivity of sql for querying. additional flexibility is added by abstracting some search operations, particularly full-text-searching, using r functions.

implementation
a parser was developed in hypertext preprocessor  according the xml schemas of the objects to extract essential object elements and attributes from each xml submission file. all data in srametadb are faithfully parsed from sra submissions and no attempt is made to curate, semantically recode, or otherwise clean up sra data. all field names are also taken from sra records except for minor changes to improve usability in sql queries. fields containing multiple records are generally stored as delimited text within the same record; this denormalization significantly reduces complexity and improves efficiency of queries. the rsqlite package
 <cit>  includes an embedded sqlite database engine with full text search  enabled and can interact with any sqlite database and perform full text search. the sqlite version of srametadb is maintained and distributed for local installation and can be used from r as described below in the examples or independently from other clients .

RESULTS
in the following sections, we will give an overview of the functionality of the sradb package starting with installation, then querying of sra metadata, retrieval of sra data based on query results, and finally an example of how to control the igv browser from within r.

installation
installation of sradb can be performed from the r graphical user interface or, more commonly, from the r command line. source bioclite

example usage
after installing the sradb package into r, we load the sradb library. library

the sradb r package is a set of functions meant to interact with a sqlite database, so it is necessary to download the sqlite database file before proceeding. this download process can take quite some time on a slow network connection, but the download itself needs to be done only once . the following code downloads the most recent sradb database file and then connects to it from r. sqlfile = getsradbfile()sra_con = dbconnect, sqlfile)

full text search
before accessing sra data, one must find the appropriate records. sradb supports both regular table and field specific sql commands and a more simplified full-text-searching function. sqlite has a very handy full text search module, fts <dig>  which allow users to do google-like search with terms and operators. the function getsra does full text search against all fields in a fts <dig> table with terms constructed with the standard query syntax and enhanced query syntax . as a simple example, we aim to find all run and study combined records in which any given fields have “breast” and “cancer” words: rs = getsra, sra_con = sra_con)

find study records containing a word beginning with “carcino”: rs <- getsra, sra_con = sra_con)

it is also possible to be more specific to find records containing exact phrase of “breast cancer”, in which “breast” and “cancer” much occur together. in each case, the variable rs will be an r data.frame that can be further processed or filtered in r. the columns in the data.frame are dictated by the “out_types” argument. representative columns of the resulting data.frame are shown in the following code example. rs <- getsra,sra_con = sra_con)head])## run_alias run run_date updated_date spots run_center##  <dig> hmec_ <dig> drr <dig> 2008-12- <dig> 2012-06- <dig>  <dig> kugsps##  <dig> mdamb231_ <dig> drr <dig> 2008-12- <dig> 2012-06- <dig>  <dig> kugsps##  <dig> mcf7_ <dig> drr <dig> 2008-12- <dig> 2012-06- <dig>  <dig> kugsps##  <dig> t47d_i drr <dig> 2008-12- <dig> 2012-06- <dig>  <dig> kugsps##  <dig> mcf7_1_paired drr <dig> 2008-12- <dig> 2012-09- <dig>  <dig> kugsps##  <dig> mdamb231_ <dig> drr <dig> 2008-12- <dig> 2012-09- <dig>  <dig> kugsps

arbitrary sql queries
the getsra function hides most of the detais of the underlying sqlite database and queries. however, one of the strengths of sradb is in exposing the sra metadata via a standard query language, sql. the column descriptions for the sradb sqlite database schema are given in table form in additional file
 <dig> and are also available via the coldescriptions function in the sradb package. as a simple example, we can query sradb for the number of runs for each available library strategy . rs <- dbgetquery as runs from ‘experiment‘", "group by library_strategy order by runs desc",sep = " "))head## library strategy runs##  <dig> <na> 90831##  <dig> wxs 42381##  <dig> wgs 41033##  <dig> other 19021##  <dig> rna-seq 9622##  <dig> amplicon 9298

arbitrarily complex sql queries can be performed with results returned as an r data.frame. further filtering, processing, ane even visualization  can then be performed using standard r functions.

retrieving data file information
searching sra metadata using the sradb full-text-search or arbitrary sql queries results in one or more sra accessions. given these accessions, the sradb package can determine the associated fastq files for download; in some cases, there may be dozens of fastq files for an accession. as an example, we list fastq file names including ftp addresses associated with “srx000122”: rs <- listsrafilenrow##  <cit>  6

the listsrafile function does not check file availability, size and date of the fastq files on the server , but the function getfastqinfo does this, which is good to know if preparing to download a large file set. rs <- getfastqinfo, srctype = "ftp")

the above commands get fastq file information and essential associated meta data from ebi ena web site. the following commands will retrieve ‘lite.sra’ file size information from ncbi sra ftp site: rs <- getsrainfo, sra_con = sra_con, sratype = "litesra")

the getfastqfile and getsrafile functions actually download all available fastq or sra files associated with a set of sra accessions. for example, to download all fastq files for “srr000648” and “srr000657” from ebi ena site ftp site to a new folder in current directory: getfastqfile, destdir = getwd(), srctype = "ftp")

currently both ncbi and ebi support the high-speed fasp protocol for downloading sra data files and sradb has included the functionality for using the protocol. advanced users are encouraged to use the fasp protocol, but it requires third-party software installation prior to use.

interface to igv
once raw sequence data are processed by external programs  or using bioconductor tools in r, there is often a need to visualize the results in genomic context. the igv browser serves this purpose nicely. igv offers an api that allows bidirectional communication between igv and third-party software like r. the sradb package has r functions, summarized in table
 <dig> that can be used to control igv. examplebams = file.path, dir, pattern = "bam$"))sock <- igvsocket()igvgenomeigvloadigvgoto

in the short igv code example, which requires a running igv session, the igv genome is first set to “hg1” and example bam files are then loaded. igvgoto moves the browser position to chr1:1- <dig>  finally, a screen shot is captured to disk for later review. other combinations of r and igv commands allow interactive visualization of data driven by r results.

CONCLUSIONS
the public sra database is the de facto standard location for depositing public sequence data. bioconductor and r comprise a set of tools for the comprehension of genomic data, including sequence data. therefore, it is natural to want to be able to quickly gather sequence datasets of interest, download data, and then visualize the results of an analysis. the sradb package provides this functionality for the r and bioconductor community. furthermore, the sqlite database file can be used by any software with the ability to connect to a sqlite database making for a resource of even broader interest.

availability and requirements
operating systems: windows, mac os, linux, and any other operating systems supporting r.programming language: rlicense: artistic- <dig> restrictions to use by non-academics: nonesource code: the sradb package is available via the bioconductor
 <cit>  website at
http://bioconductor.org. current release version:
http://www.bioconductor.org/packages/release/bioc/html/sradb.html. the sqlite database itself is available for independent download at
http://gbnci.abcc.ncifcrf.gov/backup/srametadb.sqlite.gz.

competing interests
the authors declare that they have no competing interests.

authors’ contributions
yz and sd wrote code and documentation and drafted the manuscript. pm and rs supervised the work. all authors read and approved the final manuscript.

supplementary material
additional file 1
sqlite column descriptions. column descriptions from the sradb sqlite file can be generated with the coldescriptions function in the sradb package. such a reference is quite useful when working in sql directly.

click here for file
