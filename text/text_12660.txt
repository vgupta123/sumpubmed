BACKGROUND
the extraction of information from data generated by high-throughput experiments in genomics and proteomics has been likened to "attempting to drink from a fire hose". we are flooded with information on many levels such as whole genome dna sequences, rna expression, protein-protein interactions, protein modifications, and more. all this information is accessible in very different formats, ranging from well-organized curated gene sequences to unstructured free text in scientific literature. a system that can manage, link and query these heterogeneous types of datasets is therefore extremely valuable. the sequence retrieval system  is such a unified database system in which numerous different scientific databases have already been integrated  <cit> .

of special interest are data from high-throughput rna expression microarrays  <cit> . many of these datasets are freely available and, like information stored in other scientific databases, are from different platforms  <cit> . integrating and mining these databases strongly facilitates the analysis of genes of interest but will also support discovery of disease markers, drug-targets and new knowledge in general  <cit> . one such platform is oncomine, which has integrated many different microarray datasets, focussing on human cancer  <cit> . additionally, standardized microarray depositories such as geo   <cit> , arrayexpress  <cit> , and cibex  <cit>  do or will soon provide options to browse and query the datasets  <cit> . no doubt, other platforms will be developed focussing on the integration of microarray data. if started from scratch, these initiatives will likely be limited in their direct linkage to other heterogeneous biological databases due to the laborious task of making those connections and programming the single and batch-wise query options. the universality and the availability of numerous scientific databases that have already been integrated in srs make it a useful platform for integrating microarray databases. although the srs interface to query databases is quite user friendly, other aspects of working with srs are not. these include  uploading microarray datasets,  database security including setting user access,  linking databases,  generating standard views, and  communication with other programs such as statistical and clustering software. the current srs interface has a major disadvantage in that it is not designed to perform complex calculations on the fly. this means that any microarray dataset to be uploaded must have all ratio and statistical calculations performed upfront. for example, once in srs, one cannot change ratios from log <dig> to log <dig> or add an extra field per gene by dividing expression data of all "normal" by all "cancer" samples. however, software programs that perform calculations, statistical evaluations, clustering, protein domain predictions, homology searches, and more, can communicate with srs. interfaces can be generated that retrieve data from srs, perform the required action and if desired, store the results in srs. alternatively, srs allows direct integration of programs such as the blast and fasta homology searches and the srs-emboss  tools  <cit> .

generating a database in which heterogeneous datasets are integrated is a challenge in itself. however, retrieving statistically meaningful data by comparing datasets from different sources, platforms and designs is particularly difficult  <cit> . there is a fast growing body of publications on microarray cross-platform comparisons, mainly showing how this can be achieved in very many different ways  <cit> . statistical evaluations of data within a dataset of sufficient technical and biological replicates, are better defined and can be implemented per dataset within a database system  <cit> . the strategies and applications we discuss here to link, store and query scientific datasets in srs, do not go beyond processed individual datasets and do not include cross-platform dataset integrations. we assume that each uploaded dataset consists of high-quality data and has been processed correctly.

in this paper we describe strategies to incorporate microarray databases into srs and provide a database upload tool. using the program venn mapper as an example, we show the possibility to automatically retrieve the stored microarray data from srs for external statistical evaluation.

implementation
auto-upload tool
in order to import microarray databases into srs , an auto-upload tool was built . this php-written tool allows one to store databases of a predefined format into a user-owned and password protected directory on a local srs server   <cit> . in this directory, databases can be managed, viewed and uploaded into srs. in the "edit-database" interface, links to other databases can be specified for each field. a standard view can be generated and the location of the dataset in the srs directory determined. finally, permissions can be set to control access to the various datasets in srs. upon uploading, the auto-upload tool will generate the files required for srs:  the srs data file in which the spreadsheet input file is converted into a flat-file database,  an icarus syntax file  which describes the layout of the flat-file database,  a database index file  which describes the way in which the different fields need to be indexed for the srs system,  a database view file  in which a standard view is defined, and  an information file  which can harbour a description of the dataset. these files are automatically placed into the srs directory after which the auto-upload tool updates the srsdb.i, user.i and site.i files. these files describe the name of the database, where the files are located , user permissions , and configuration of the different database groups . the srssection command within the auto-upload tool implements the changes in the configuration files after which srscheck and srsdo perform indexing of new databases and set links. incorporation of a new dataset using this tool generally takes place within minutes. on our local srs server, a dqs  batch-queue is installed to prevent data loss or corruption of datasets in case multiple users are editing datasets at the same time.

external programs accessing srs: venn mapper for srs
an important feature of storing and linking microarray data in srs is the accessibility of the datasets for other programs. as an example, we generated a php web interface for the venn mapper program that retrieves microarray data from srs to calculate the statistical significance of the number of co-occurring differentially expressed genes in any combination of two experiments  <cit> . the functionality of the original venn mapper was enhanced by enabling the use of different ratio cut-offs for different microarray experiments. upon login, the interface displays all microarray databases indexed in srs to which the user has access. after selection of the datasets a second screen shows all fields  of the selected databases. the microarray experiments of interest can be selected for venn mapper analysis after which the requested data is linked and exported from srs into the venn mapper program. the output of the program is available for viewing and downloading. information requests from the interface to srs are made through the srs getz command  <cit> . this powerful feature of srs makes the integrated databases accessible to any external program.

RESULTS
preparing and linking of microarray databases in srs
with respect to the microarray database set-up, there are two important considerations. first, in our experience, microarray data mining often starts with selecting genes based on their differential expression. differential gene expression is best determined using statistical evaluation of the data based on sufficient technical and biological replicates  <cit> . dependent on the statistical test and microarray platform, raw gene expression data and/or ratio calculations can be utilized. second, making changes to a microarray dataset in srs is impractical and datasets should be fully built before they are imported. this means that raw expression data and ratio calculations should be normalised and flagged and represented in a common format . importantly, statistical evaluation should be included. for simplicity in representation, datasets can be summarised in, for example, an average of all "normal" and "cancer" samples and additional fields of log <dig> "normal/cancer" can be included.

linking of databases should be based on invariable and unique indexes. links based on identifiers such as unigene cluster identifiers that are regularly re-assigned, forces one to repeatedly update all databases that include such a denominator. invariable links based on dna sequence assignments such as genbank and probeset identifiers  are therefore more appropriate linking indexes. we recommend including only one of those invariable and unique linking fields in the microarray dataset to avoid the need for a regular update. since many biological databases do not use these hard links, connecting microarray datasets to other databases can be achieved through a coupling file and/or by making use of the web of links provided by the biological databases . a coupling file can be minimal, containing for example only a refseq id with the appropriate array spot number, or can contain a variety of indexes such as genbank, refseq, swissprot, omim, locuslink, kegg, go, genecards, unigene identifiers, that directly link to the different databases. since some of these links are variable and biological databases keep growing with information, coupling files must be regularly renewed to update the various links.

instead of or in combination with a coupling file, one can make use of the links provided in the various biological databases . for example, the genbank accession code in the microarray dataset can be linked to the unigene database. the locuslink database is linked to the unigene database through refseq accession numbers and also contains ids that for example link to embl, omim, and swissprot. in this way, almost all biological databases are linked through a network of direct and indirect connections. in case multiple roads lead to the same databases, srs utilizes only one route. by assigning values to each link, the route taken is the one having the lowest sum of link values, even when this results in a lower number of connected fields . although srs can be forced to take a specified path, one should be careful to be dependent on many different databases. inconsistencies in and incompleteness of databases are accumulated when linking occurs in sequence.

linking to the network of biological databases through a coupling file has various advantages. one can establish directly validated links to each database, including databases outside the network. in addition, errors in links can easily be corrected. platform-specific or overall coupling files can be retrieved from the affymetrix website  <cit>  and from sources such as resourcerer  <cit> , karma  <cit> , genehopper  <cit> , probematchdb  <cit> , david  <cit> , ensmart  <cit> , and source  <cit> . using these resources, microarray datasets from different platforms can be linked. this includes connecting cross-species datasets using ortholog converters such as homgl  <cit>  and homologene  <cit> .

gene linking efficiency of different databases
a high accuracy and comprehensiveness of linking are essential for a successful comparison of microarray data from different platforms. the extent of linkage of various databases in srs was examined . the percentage of fields of scientific databases and microarray datasets that are linked to other databases was assessed. as shown in figure  <dig>  most microarray databases are directly linked to the scientific database network via a single connection. the u133a and u <dig> affymetrix coupling files contain direct links to unigene, swissprot, locuslink, and omim. the linkage of the various microarray platforms to unigene varies between 84% and 96%. on average, 60% of the genes of microarray datasets can be linked to each other via unigene.

auto-upload tool and external programs accessing srs
the availability of many scientific databases in srs, the universality of the system and its free access for academic use, make srs an excellent mining system for heterogeneous microarray datasets. the auto-upload tool facilitates the exchange of microarray datasets between separate srs installations. using a single data file and optional description file, any user can upload the identical data and customize it to their own srs environment. we would urge researchers and microarray data repositories to make their data available in an srs format. in addition, microarray software programmers could make their software available in an srs compatible format or include srs data export options. the commercial srs genespring® connector and public emboss are examples of such microarray-srs integration ventures.

we plan to extend our efforts of integrating more microarray databases into srs. in addition, software tools specific for microarray data analysis, such as go mapper and copub mapper will be rewritten for srs  <cit> . the copub mapper literature mining program contains databases that store, for each gene, all medline records mentioning the gene. this directly links microarray expression data to the published literature and allows for co-publication research of gene-gene and gene-keyword combinations.

CONCLUSIONS
the sequence retrieval system is a versatile and useful database system to store, link and query various scientific databases, including microarray datasets. fully processed datasets can be incorporated and linked to other datasets using the auto-upload tool. this user-friendly program makes srs accessible to users who can themselves add, link and mine databases within minutes. datasets stored in srs can be interrogated by external programs to perform virtually any computation.

availability and requirements
project name: auto-upload tool and venn mapper for srs

project home page: 

operating system: platform independent

programming language: php, javascript, perl

other requirements: local srs installation, dqs batch-queue, mysql database server, php-enabled webserver 

license: srs 

any restrictions to use by non academics: license needed

authors' contributions
av and ddl generated the auto-upload tool. ddl, av and ms generated the venn mapper for srs program. av and vdj installed and managed the servers for the various tools. funding for the project was obtained by jk and gj. av, jk and gj contributed to the intellectual content and gj supervised the project.

supplementary material
additional file 1
describing how to use the auto-upload tool program

click here for file

 acknowledgements
we would like to thank embl/ebi and lion bioscience for making srs available and peter hendriksen for careful reading of the manuscript. this work was supported by erasmus mc breedtestrategie and the urologic research foundation  erasmus mc.
