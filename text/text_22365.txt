BACKGROUND
chromatin immunoprecipitation  coupled with next-generation sequencing  represents a powerful approach to identify genome-wide occupancy of transcription factors  and histone tail modifications  <cit> . the encode and modencode consortia have generated an atlas of tf binding sites and histone modifications for 100+ cell types, including these from human and mouse  <cit> .

chip-seq data processing starts with the mapping of short reads to a genome reference. the mapped reads  are then used to generate signal tracks in a variety of formats  for data visualization. they are further used to identify regions showing significant enrichment over a control library like an igg control generated using a non-specific igg antibody, or an input control without using an antibody  <cit> . chip-seq data shows three types of binding profiles: punctate binding, diffuse binding, and a mixture of both  <cit> . sequence-dependent tfs and some histone modifications  usually exhibit punctate binding sites of a few hundred base pairs in size. comparatively, some other histone modifications display broad binding profiles that could spread over several hundred kilobases, such as h3k9me <dig>  known to be associated with constitutive heterochromatin, and h3k36me <dig> associated with transcribed regions. the signals from rna polymerase ii peak at 5’ end of genes, and can extend over the body of transcribed genes, forming a mixture of sharp and diffuse binding profiles.

there are over thirty publicly available programs for peak calling  <cit> . most of them focus on punctate binding profiles using either window scanning or aggregation of overlapping reads to identify peaks. a subset of these programs has been extensively evaluated on their sensitivity and specificity  <cit> . due to the variation of signal intensity, signal discontinuity within an entire binding domain and insufficient sequencing depth, it has been challenging to define the boundary of diffuse binding domains at high resolution  <cit> . currently, only a few packages have been developed to analyze diffuse binding profiles . among them, sicer and rseg are comparable for experiments with controls  <cit> . sicer is one of the best programs showing high accuracy in detecting broad binding regions from h3k36me <dig>  <cit> .

the encode consortium recommends that chip-seq experiments have two biological replicates in order to assess data reliability. based on the previous guideline, a chip-seq experiment is considered to be reproducible if at least 75% of the peaks overlap between replicates; or top 40% of the peaks show >80% overlap  <cit> . a method called irreproducible discovery rate  has been developed, which measures the consistency between lists of ranked peaks from replicates  <cit> . it represents a more robust and consistent approach to identify highly reproducible peaks.

several packages have been developed for downstream analysis of identified peaks. the most common analyses include the assignment of peaks to gene bodies or gene regulatory domains  <cit> ; the generation of binding profiles over transcription start sites  or other key genomic features ; the coverage of genomic features by peaks  <cit> ; the testing of functional enrichment for peak-associated genes  <cit> ; and motif finding  <cit> . of these, a peak is usually assigned to a nearby gene based on a pre-defined cutoff for the maximal distance from peak center to gene start, which typically ranges from  <dig> to 50 kb but can be as far as 1 mb  <cit> . this assignment introduces bias towards genes in closer vicinity of peaks and impacts subsequent tests for function enrichment.

a few pipelines have been developed to analyze chip-seq data . chippeakanno and seqminer focus on the integration of chip-seq data with genomic features  <cit> . on the other hand, fish the chips   <cit>  and a web server called nebula  <cit>  support read mapping; peak calling for punctate binding events; assignment of peaks to genes and data visualization. however, none of them provide functionality for the filtering of mapped reads; the identification of broad binding domains; the assessment of reproducibility; and the analysis of paired-end data.

to address this shortfall, the highly integrative chromatin immunoprecipitation  pipeline provides comprehensive analysis of chip-seq data. hichip has the following features:  the analysis of both paired-end and single-end data;  filtering of mapped reads based on duplicate level, mapping quality score, genomic uniqueness, insertion size and orientation ;  the selection of an appropriate peak finder based on binding profile, with macs  <cit>  for punctate binding sites and sicer  <cit>  for broad binding domains;  the implementation of the idr package  <cit>  to perform consistency analysis of punctate binding sites between replicates; and  downstream analysis, such as finding motif from tf binding sites using meme suite  <cit> , generating binding profiles over key genomic features and calculating coverage of genomic features by peaks using ceas  <cit> , as well as assigning peaks to genes and testing for gene ontology  enrichment using in-house tools. the integrative analysis allows bioinformaticians and investigators to spend less time on low-level data analysis and instead focus on data integration and interpretation.

implementation
this chip-seq analysis pipeline has been developed by integrating public packages with internally developed tools. it is intended for research purposes only. the core functions include:  read quality assessment and read mapping;  filtering of mapped reads and estimation of library complexity;  peak calling and identification of highly consistent peaks between replicates;  signal intensity estimation, normalization and visualization; and  annotation of peaks and binding profiles .figure  <dig> 
flowchart of hichip. it contains five key functions , developed by using both public tools and in-house scripts.



since researchers may not always have immediate access to cluster resources, this pipeline allows either parallel processing of a large number of samples in a cluster or serial processing of multiple samples on a single machine. detailed instructions about how to run hichip pipeline and how to use individual tools are described in the user manual available at: http://bioinformaticstools.mayo.edu/. website containing license agreements for each of the public tools is also provided in the user manual.

test datasets
to test hichip performance, we used five public datasets in human, including single-end chip-seq datasets targeting tfs nfkb and er and histone mark h3k27me3; a paired-end chip-seq dataset targeting tf runx1; and an er chip-chip dataset. each of the chip-seq datasets includes both ip and control.

the nfkb datasets are from cell lines gm <dig> and gm12891; each with two replicates for both ip and control. the fastq sequence files were downloaded from: http://hgdownload.cse.ucsc.edu/goldenpath/hg18/encodedcc/wgencodeyalechipseq.

the er chip-seq datasets include  <dig> libraries from five cell lines . each cell line had 2– <dig> replicates for ip and a single control. we downloaded the bwa aligned bam files from national center for biotechnology information  gene expression omnibus  under accession gse <dig>  <cit> .

the runx <dig> dataset is from an acute myeloid leukemia patient with the t translocation  <cit> . the fastq files from one ip  and one control  were downloaded from ncbi geo. since the control library had only ~ <dig>  million pairs of reads, we downsized the total  <dig>  million to  <dig> million pairs for the ip library.

the h3k27me <dig> datasets are from cell lines gm <dig>  hela s <dig> and mcf- <dig>  gm <dig> had two replicates in ip and one control library, while the other two cell lines each had two replicates for both ip and control. the fastq sequence files for gm <dig> and hela s <dig> were downloaded from: http://hgdownload.cse.ucsc.edu/goldenpath/hg19/encodedcc/wgencodebroadhistone and these for mcf- <dig> were from: http://hgdownload.cse.ucsc.edu/goldenpath/hg19/encodedcc/wgencodesydhhistone.

the er chip-chip data is generated from the mcf- <dig> cell line using the affymetrix human tiling microarray. the dataset was downloaded from: http://research <dig> dfci.harvard.edu/brownlab//datasets/index.php?dir=er_mcf7_whole_human_genome/.

read quality assessment
fastqc is a fast and flexible package for checking overall sequence quality . for each sample, fastqc reports the distribution of average per-base and per-read quality, as well as the level of duplication and possible sources of contaminations. if there is indication of abnormality in mapping results, such as low mapping rate, user can review read quality in the fastqc reports and try to improve the mapping rate by trimming low-quality bases or adaptor sequences in the reads.

read mapping algorithms
several mapping software packages have been developed to map short reads to the reference genome  <cit> . bwa is a robust and fast short-read aligner, and has been widely used to map chip-seq reads  <cit> . novoalign  is slower than bwa but is known to have higher sensitivity  <cit> . to decide which one to be implemented into the pipeline, we compared mapping rate between novoalign and bwa on both single-end and paired-end chip-seq data, and further assessed how the mapping difference might impact peak calling.

post-processing of mapped reads
after initial alignment, the mapped reads need to be further processed in order to improve peak calling sensitivity and specificity. the post-processing steps below address the issues of poorly mapped reads, duplicate reads and reads mapping to multiple locations.

reads with low mapping quality
it is a common practice to remove reads with low mapping quality. for single-end reads, hichip uses samtools  <cit>  to filter out reads based on a user-defined mapping quality score threshold . mapped paired-end reads have three mapping states: both ends uniquely mapped; one of the ends uniquely mapped; both ends mapping to multiple locations . samtools does not maintain the pairing information when performing mapping quality-based filtering for paired-end reads. therefore, we provide a script to remove pairs of reads that have one or two ends below the mapping quality cutoff set by the user. the user can choose not to apply this filtering to the pairs of reads with the two ends mapping to multiple genomics locations . after the filtering, the proper pairing information will still be maintained.

duplicate reads
for chip experiments, the sequencing library is mostly generated from a much smaller amount of dna compared to standard dna or rna sequencing. duplicate reads that map to the same genomic location and strand are frequently present in chip-seq datasets. for many applications, duplicate reads are removed as they are considered likely represent experimental artifacts. however, in the context of a chip-seq experiment duplicate reads can also occur during the sequencing of identical dna fragments in peak regions. in this case, duplicate reads contribute to peak identification and should not be removed.

chen et al. reported that duplicate removal could improve the specificity of macs peak calling  <cit> . since the level of duplicate reads as artifacts versus as true signals cannot be well defined, picard  is included in hichip to remove duplicate reads by default. a user can specify whether to remove duplicate reads. to reflect the level of duplicate reads, hichip uses a custom script to measure library complexity as the ratio between number of duplicate-filtered reads and the total number of uniquely mapped reads. as a guideline, library complexity needs to reach ~ <dig>  at a sequencing depth of  <dig> million mapped reads  <cit> . low library complexity suggests suboptimal immunoprecipitation efficiency, a lack of sufficient starting material, pcr over-amplification, or a combination of these factors.

reads mapping to multiple genomic locations
in chip-seq analysis, reads mapping to multiple genomic locations are often discarded  <cit> . depending upon the nature of the studied epigenetic mark, this strategy may not be optimal in some cases. for instance, a substantial fraction of the h3k9me <dig> modification occurs in regions containing repetitive dna sequences. in a survey of  <dig> h3k9me <dig> chip-seq datasets from the encode project , between 16% and 28% of the mapped reads have multiple matches in the genome. it has also been shown that some tf binding sites are located in regions with poor mappability  <cit> . in such cases, excluding reads mapping to multiple genomic locations will decrease the sensitivity of peak detection in these less mappable regions.

hichip allows the user to specify whether to filter out reads matching multiple locations. for single-end reads, only uniquely mapped reads are kept by default, with the option to include one random match for reads mapping to multiple locations. for paired-end reads, we developed an in-house script to filter out undesired pairs. only mapped pairs with appropriate insertion sizes and correct orientation are kept. depending on the user’s specification, these reads are further processed to retain pairs belonging to one of the three types:  only uniquely mapped pairs;  pairs with at least one uniquely mapped end; or  pairs with at least one uniquely mapped end, plus a random match if both ends align to multiple locations. no currently available public tool provides equivalent flexibility in the filtering of mapped paired-end chip-seq reads.

peak calling
there are two major chip-seq binding profiles: punctate binding and diffuse binding. for punctate binding sites, peak calling identifies locations with maximum read density. for diffuse binding sites, the main goal is to define the boundary of individual binding domains. therefore, different peak callers need to be used to take into account the differences in binding profile.

we used macs to identify punctuate binding sites because of its high specificity and sensitivity  <cit> . macs scans the genome for candidate regions and merges overlapping regions into peaks. it captures local signal fluctuation by modeling the background level as dynamic poisson distribution.

the consistency of identified peaks can be assessed for punctate binding sites where replicates are available. in hichip, we implemented the idr method to measure the consistency of peaks between replicates  <cit> . to prepare for idr analysis, hichip combines mapped reads from ip replicates and those from control replicates into two merged datasets following the procedure proposed by landt et al.  <cit> . the merged ip dataset is then split into two equally-sized pseudoreplicates after randomization; mapped reads from each ip are also split into two equally-sized pseudoreplicates. the true ip replicates, pseudoreplicates from each ip and merged ip dataset, merged ip and merged control datasets are then used in macs peak calling. the consistency of resulting peaks is analyzed using the idr procedure.

as suggested by landt et al.  <cit> , if a chip-seq experiment has good reproducibility, the number of consistent peaks between true biological replicates and that between pseudoreplicates from merged ip should not differ by more than a factor of two. similarly, the number of consistent peaks between pseudoreplicates from biological replicate  <dig> and that between pseudoreplicates from biological replicate  <dig> should also be within a factor of two. we added the idr values  estimated for shared peaks to the 4th column of the macs output file with the ‘encodepeak’ extension. for replicate-specific peaks, an arbitrary value of ‘1’ is used instead. this will allow an easy extraction of consistent peaks at any user-specified idr cutoff.

to identify diffuse binding sites, hichip leverages a widely used program called sicer  <cit> . sicer uses a clustering approach to define the boundary of diffuse binding sites. it identifies candidate sites of variable lengths based on a poisson background model and links neighboring sites together if they are separated by gaps not exceeding a pre-defined gap size cutoff  and the whole domain is significantly enriched over the control  <cit> . sicer itself only provides filtering of binding regions based on fdr cutoff but not on fold change over the control. hichip further filters out candidate regions if the fold change is less than two.

putative cis-regulated genes
after peak calling, potential cis-regulated genes associated with peaks are identified, which is based on the maximum distance of peaks to the transcriptional start sites  or translational end sites . by default, this distance is set at  <dig> kilobases.

data visualization
to enable visual inspection of discovered binding sites and their association with annotated genes or other genomic features, hichip generates files that can be visualized in a genome browser like the integrative genomics viewer   <cit> . ceas needs a wig file as an input. since macs version  <dig> does not generate a wig file and sicer generates a wig file with a relatively large span size , we designed a module to generate bedgraph, wig and tiled data format  files for data visualization.

to generate the bedgraph file, filtered reads in bam format are first processed into bed format as follows. single-end reads are extended by the average fragment length of the library . for paired-end reads, the hichip pipeline keeps the first end and extends by the fragment length estimated from mapping positions of the two ends, rather than by the average fragment length of the library. given the variability of fragment lengths across a complex genome like human genome, the use of actual coordinates of mapped pairs is expected to achieve better resolution in signal visualization. the bed file is then used to generate a bedgraph file by the genomecoveragebed command from bedtools  <cit> .

the wig file is generated from the bedgraph file, using an in-house script that computes the extended read coverage at a user-defined step size . the extended read coverage is normalized to a library size of one million mapped reads, and converted into the tdf format using the totdf command from the igvtools package . the normalized coverage in tdf format and identified peaks in bed format can be visualized by uploading files to igv, or by opening the provided igv_session.xml file in igv.

peak and binding profile annotation module
hichip includes three tools to annotate peaks and binding profiles. we use meme  <cit>  for identifying the tf binding motif; ceas   <cit>  for generating binding profiles over key genomic features and for predicting possible genes regulated by cis-regulatory elements; and an in-house tool for calculating enrichment in gene ontology  terms for peak-associated genes.

hichip selects top peaks as input for ceas and meme. peaks used by ceas are selected based on the pre-defined –log <dig>   or –log <dig>  cutoff . since the detection of binding motif using meme is dependent upon the set of dna sequences provided, attention needs to be paid to the cutoff for peak selection. by default the top 10% of peaks with the largest –log <dig>  will be used. the hichip pipeline also allows the user to select a certain number of top peaks for motif discovery. ceas uses normalized wig files and peak files  as inputs, and performs binomial test for enrichment of binding over genomic regions such as gene promoters, gene bodies, exons and introns.

an in-house method is implemented to identify go terms that are enriched in peak-associated genes. this method uses a similar approach as great  <cit>  that could not be integrated into our workflow, since the main functionality of great is only available through web services. the lists of human and mouse genes with annotated go terms were downloaded from the great website . for each gene annotated with at least one ontology term, the hichip pipeline first defines its regulatory domain as the region from upstream  bp to downstream  bp around the tss, where the region from upstream u bp  to downstream d bp  represents the proximal regulatory domain, and ue and de denote the maximum upstream and downstream extension, respectively. binomial tests are then performed to identify a list of go terms that are enriched in genes associated with peaks.

RESULTS
performance and output summary
we tested the pipeline performance on a linux platform with an 8-core genuineintel cpu at  <dig>  ghz. for a typical chip-seq dataset containing a single ip and control library, each with 20– <dig> million pairs of reads, hichip takes 6– <dig> hours to complete at ~5- <dig> gb memory usage.

the summary report provides links to the fastqc output files and an igv_session.xml file for data visualization. it also contains an html document that covers sample information, mapping summary, library complexity , peak summary, as well as histograms showing read pileup distribution within peaks. depending on the user’s specification for peak calling, the pipeline will generate a list of peaks from macs, macs combined with idr analysis, or sicer.

if idr function is executed, the hichip pipeline will generate summary tables and a plot showing the number of reproducible peaks at different idr cutoffs . user can also get a conservative list and an optimal list of reproducible peaks at a given idr cutoff . a conservative list represents the number of peaks shared between biological replicates, and an optimal list represents the number of shared peaks either between biological replicates or between pseudoreplicates from merged ip, whichever has more peaks.figure  <dig> 
irreproducible discovery rate between replicates. left panel: number of significant peaks versus number of shared peaks called from both replicates. right panel: number of significant peaks at different idr cutoffs. 1: between biological replicates; 2: between pseudoreplicates from biological replicate  <dig>  generated by randomly splitting the mapped reads into two equal-sized partitions; 3: between pseudoreplicates from biological replicate 2; 4: between pseudoreplicates from mapped reads merged from the two biological replicates. macs called peaks at a p value cutoff of 1e- <dig>  instead of the default 1e- <dig> 



to help with peak interpretation, the hichip pipeline generates a table that reports the closest genes . in addition, ceas provides a report summarizing the percentage of peaks located in different regions such as promoters, gene upstream and downstream, utrs, and provides plots showing binding profiles over selected genomic features . meme creates an html file that contains the most significant motif, and a text file with names of individual sequences from peak regions that contain a motif. finally, the internally-developed go enrichment test identifies the most significant terms enriched for peak-associated genes . we have included a word document to describe individual output files .

comparison of bwa and novoalign mapping
novoalign represents one of the most accurate short-read aligners but is much slower than bwa  <cit> . using two public chip-seq datasets from tfs nfkb and runx <dig>  we compared bwa with novoalign on the mapping rate and its possible impact on macs peak calling. for the 28-bp single-end nfkb dataset, bwa generated  <dig> - <dig> % more uniquely mapped reads than novoalign for six of the eight libraries . in two of the four ip libraries, more peaks containing the nfkb motif were identified from bwa-mapped reads .table  <dig> 
number of nfkb peaks from bwa and novoalign mapped reads


a
b
a
b
a
b
a
b
peaks were identified using macs  and motif finding by meme suite . shown were the number of overlapped peaks between bwa mapped reads  and novoalign mapped reads , and number of aligner-specific peaks with or without nfkb binding motif. chip-seq from each cell line had two biological replicates .



for the 45-bp paired-end runx <dig> dataset, novoalign mapped about 7% more reads uniquely to the genome than bwa . this resulted in the identification of  <dig> unique peaks only from novoalign-mapped reads, versus  <dig> unique peaks only from bwa-mapped reads . however, the number of unique peaks with the runx <dig> binding motif was almost identical:  <dig> peaks for novoalign-mapped read and  <dig> for bwa-mapped reads. since bwa performs better than novoalign on mapping single-end reads, similarly on mapping paired-end reads and bwa is >10x faster, hichip uses bwa as the aligner.table  <dig> 
bwa and novoalign mapping of paired-end reads


a
b
c
a
b
c
the 45-bp paired-end chip-seq data were from tf runx <dig>  raw reads were mapped to hg <dig> by both bwa and novoalign. bwa parameters are: bwa aln -o  <dig> -l  <dig> -t  <dig> -k  <dig> and bwa sampe -n  <dig> -a  <dig> -o  <dig> -n  <dig> -s. novoalign parameters are: novoalign -i pe  <dig>  -r random --hdrhd off -c  <dig> -d reference.nix -f stdfq -f end <dig> fastq end <dig> fastq -o sam, where reference.nix is the reference sequence index file. a: percentage of pairs with at least one uniquely mapped end; b: percentage of pairs with multiple mapping locations; c: others, including unmapped pairs, pairs with only one mapped end and improperly mapped pairs with small insertion size or wrong orientation.
runx <dig> peaks from bwa and novoalign mapped reads


peaks were called by macs , after removal of duplicates by picard. motif was identified by meme suite.



comparison of chip-seq and chip-chip peaks
to check how many chip-seq peaks can be found in chip-chip experiments, we compared er peaks from three chip-seq libraries in mcf- <dig>  <cit>  to a list of  <dig>  chip-chip peaks generated from mcf- <dig> using the affymetrix human tiling microarrays  <cit> . of the  <dig>  chip-chip peaks,  <dig>   occurred in all three chip-seq replicates and  <dig>  occurred in only one or two replicates. this left  <dig> chip-chip peaks not overlapped by any chip-seq peaks . to examine whether the  <dig> peaks are chip-chip specific, or chip-seq peaks but simply missed by the selected three chip-seq libraries, we compiled a total of  <dig>  er peaks from an additional  <dig> chip-seq libraries  <cit> . only  <dig> of the  <dig> chip-chip peaks showed overlap with peaks from these  <dig> libraries, suggesting that the majority of the  <dig> peaks are chip-chip specific or false positives.table  <dig> 
er chip-seq and chip-chip peaks in mcf- <dig> cell line


a list of  <dig>  highly confident  chip-chip peaks was extracted from the file “er_binding_p-value.xls” downloaded from http://research <dig> dfci.harvard.edu/brownlab//datasets/index.php?dir=er_mcf7_whole_human_genome/. chip-seq peaks were identified by macs at the q value cutoff of  <dig> . both chip-seq and chip-chip analysis used hg <dig> reference sequence.



the impact of duplicate removal on tf peak calling
to assess how duplicate removal might impact peak calling, we compared chip-seq peaks identified in the three er libraries before and after duplicate removal  <cit> . between  <dig> and  <dig>  peaks were identified only from reads before duplicate removal, versus  <dig>  to  <dig>  peaks only from reads after duplicate removal . we hypothesized that duplicate reads add noise to the data and duplicate filtered reads are more likely associated with er binding sites. to validate this hypothesis, we first used meme to identify er binding motif from the 100-bp sequences centered on peaks. between  <dig>  and  <dig>   of the unique peaks identified from duplicate-filtered reads contained er binding motif, versus 35– <dig> unique peaks from reads without duplicate removal . also,  <dig> - <dig> % of the unique peaks called after duplicate removal were shared by the  <dig>  er peaks from the other  <dig> libraries  <cit> . these findings indicate that duplicate removal improves the sensitivity of macs peak calling for er chip-seq data and is a critical step in the hichip pipeline  <cit> .table  <dig> 
number of er peaks from mcf- <dig> cell line


peaks were called by macs  from bwa-mapped reads . motif was identified using meme as described above. a: number of er peaks identified by this pipeline, using duplicate-filtered reads ; b: number of peaks from reads without duplicate removal. ip_ <dig> to ip_ <dig> are three replicates, ip_1: gsm <dig>  ip_2: gsm <dig>  ip_3: gsm798425; control : gsm <dig> 



the two approaches differed only in the filtering of duplicates, suggesting that the identification of unique peaks in the three libraries is due to this filtering. to support this inference, we first checked the level of duplication in the three libraries. indeed, library ip_ <dig>  that had the most extra peaks  after duplicate removal contained up to 24% duplicates, versus only 7% in ip_ <dig>  and 13% in ip_ <dig> . to further illustrate the distribution of duplicates from peak versus that from non-peak regions, we extended each peak by  <dig> bp at both sides and defined the remaining regions as non-peak regions. these non-peak regions showed the basal level of duplication, which was  <dig> % in ip_ <dig>  and <6% in the other two libraries . duplicates were heavily biased toward peak regions, as compared to non-peak regions. in all three libraries, peak regions together covered <1% of the mappable genome but harbored >60% of the duplicates .table  <dig> 
duplicate level in three er chip-seq libraries


*the non-peak regions are these after excluding regions from −100 bp to +100 bp of all peaks; the top peaks refer to the top 10% of the peaks with the smallest p values.

**percentage over total duplicates in the library.
peak
p
value versus level of duplicate reads in three er chip-seq libraries. peaks were ranked based on –log <dig>  in descending order and split into  <dig> groups  of equal size. the y-axis represents the level of duplicate reads. the horizontal dashed lines indicate the level of duplication from non-peak regions, which are regions not covered by peaks +/−100 bp.



to test whether the abundance of duplicates is correlated with the confidence level of peaks, for each library we split the p-value-sorted peaks into  <dig> equal-sized groups, with peaks in the first group having the lowest p values. the top 10% of the peaks  had a duplication rate between  <dig> % to 57%, containing roughly half of the total duplicates . in contrast, the bottom 70% of the peaks  had much reduced duplication rate . our analysis suggested that, while filtering of duplicates contributes to the identification of extra peaks, it reduces the signal intensity to a much greater extent for the most significant peaks. the latter will impact the test for differential binding between different ips.

we further used the tf runx <dig> dataset to investigate how duplicate removal might impact peak calling from paired-end data. the runx <dig> ip had up to 67% duplicates identified by the picard markduplicates command. we used macs to call  <dig> peaks  from duplicate-filtered reads and  <dig> times more peaks  from reads prior to duplicate removal. of the  <dig>  peaks not overlapping the  <dig> peaks, only  <dig>  contained the runx <dig> binding motif. this suggests that the vast majority of the  <dig>  unique peaks from reads without duplicate removal represent false positives. this result, together with the er chip-seq results, supports duplicate removal when analyzing tf chip-seq data.

the impact of duplicate removal on h3k27me <dig> peak calling
we next explored whether duplicate removal improves peak calling for chip-seq data showing broad binding profile. we analyzed h3k27me <dig> histone modification dataset. h3k27me <dig> is catalyzed by the polycomb repressive complex  <dig>  and largely associated with transcription repression. fastq files for six single-end h3k27me <dig> chip libraries and five control libraries were downloaded from the encode project, mapped by bwa, and duplicates filtered by picard . these libraries include  <dig> - <dig>  million uniquely mapped reads with 2-8% duplicates. we identified  <dig> - <dig>  binding sites from duplicate-filtered reads and  <dig> - <dig>  binding sites from reads without duplicate filtering . for each library, the lists of peaks with and without duplicate removal overlapped by 89-98%, with roughly the same number of peaks unique to each list. we observed that the unique peaks had much higher fdr than the peaks shared by the two lists , suggesting that these unique peaks represent less confident sites with low h3k27me <dig> occupancies.

to investigate whether duplicates are enriched in highly confident peaks as previously seen in the er chip-seq dataset , we split peaks into  <dig> groups based on ascending order of fdr and checked the level of duplicates per group . strikingly, the h3k27me <dig> chip-seq data had comparable levels of duplicates between peak and non-peak regions; the top peaks generally did not show enrichment of duplicates . unlike in the tf chip-seq data showing narrow binding sites, duplicates are not particularly enriched in broad peaks called in the h3k27me <dig> dataset. these results indicate that duplicate removal appears to have less impact on peak calling for diffuse binding profile.figure  <dig> 
summary of peak calling for h3k27me <dig> chip-seq. h3k27me <dig> chip-seq data were downloaded from the encode project  and duplicates were filtered out by picard. each cell line has two biological replicates . sicer software was used to call peaks using both duplicate-filtered reads and reads without duplicate removal.
box plot of fdr from shared and unique h3k27me <dig> peaks. peaks were called from duplicate-filtered reads and also from reads without duplicate filtering. peaks shared between the two methods were randomly sampled to generate the same number of peaks as the unique peaks and used in the plot. the y-axis represents –log <dig> . the two biological replicates are indicated by r <dig> and r <dig>  respectively.
peak fdr versus level of duplicate reads in six h3k27me <dig> chip-seq libraries. peaks were ranked based on –log <dig>  in descending order and split into  <dig> groups  of equal size. the y-axis represents the level of duplicate reads. the horizontal dashed lines indicate the level of duplication from non-peak regions, as defined in figure  <dig>  the two biological replicates are indicated by r <dig> and r <dig>  respectively.



idr analysis
we tested idr analysis using three er chip-seq libraries, which include two biological replicates for ip  and a single control  <cit>  . to call both significant and insignificant peaks in order to identify an appropriate idr cutoff, we used a less stringent p value cutoff  in macs peak calling. when plotting the number of reproducible peaks over different idr values, a clear transition was observed from highly reproducible peaks to poorly reproducible peaks . at the idr cutoff of  <dig>  , there were  <dig>  and  <dig>  consistent peaks between the two pseudoreplicates of ip_ <dig> and ip_ <dig>  respectively, with a ratio of  <dig>  . we identified  <dig>  consistent peaks between two pseudoreplicates from merged ip and  <dig>  consistent peaks between replicates ip_ <dig> and ip_ <dig>  with a ratio of  <dig> . in both cases, the ratio is less than  <dig>  indicating good reproducibility between ip_ <dig> and ip_ <dig> . if two replicates show poor reproducibility , then it is necessary to generate a third replicate to validate the reliability of identified peaks.

CONCLUSIONS
hichip is a comprehensive chip-seq data analysis pipeline with more than  <dig> functions . it performs read mapping, peak calling for punctate and diffuse binding sites and downstream functional analysis. to enhance the quality of peak calling, hichip includes options for filtering out less reliably mapped reads to reduce noise. it also includes idr analysis to identify a list of reproducible peaks between replicates. it provides a consistent and configurable method to assist the user to run this pipeline.

by applying hichip to publicly available single-end er chip-seq datasets we found that filtering of duplicates increases the sensitivity of macs peak calling but heavily underestimates enrichment levels for the most significant peaks. for the paired-end runx <dig> chip-seq data, the vast majority of the peaks called only from reads without duplicate removal represent false positives. these results suggest the necessity of enabling duplicate filtering for tf peak calling and using all mapped reads for estimating enrichment level and identifying differential binding sites. in contrast, duplicate filtering has less impact on peak calling from marks showing broad binding profile like h3k27me <dig> 

although hichip has combined several methods to enhance the preprocessing and annotation of chip-seq data, several challenges remain that need to be addressed in the future. for example, it is still difficult to define the boundary of diffuse binding sites at high resolution and to identify the direct target genes of tf binding sites and histone modifications. as new or improved methods become available, the modular design of hichip will enable their smooth integration into the existing pipeline.

availability and requirements
project name: hichip: a high-throughput pipeline for integrative analysis of chip-seq data

project home page:http://bioinformaticstools.mayo.edu/

operating system: 64-bit linux 

programming language: shell, perl and r

other requirements:java version  <dig> .0_ <dig> or higher

perl version  <dig> . <dig> or higher

python version  <dig>  or higher

python-dev

cython and numpy python modules

r version  <dig> . <dig> or higher

fastqc version  <dig>  or higher

bwa version  <dig> . <dig> or higher

macs version  <dig> . <dig> or higher

sicer version  <dig> 

igvtools version  <dig> .16

samtools version  <dig> .19

meme version  <dig> .1

ceas version  <dig> .2

picard version  <dig> 

bedtools version  <dig> .0



electronic supplementary material
additional file 1: table s1: complexity of nfkb chip-seq ip and control libraries. table s <dig>  number of consistent peaks at different idr values. er chip-seq datasets from mcf- <dig> cell line were used. table s <dig>  summary of idr analysis of er chip-seq data. table s <dig>  a snapshot of output from go enrichment analysis. er chip-seq library ip_ <dig>  was used. table s <dig>  duplicate level in six h3k27me <dig> chip-seq libraries. 

 additional file 2:
snapshot of output from ceas analysis. reads mapping to chromosome  <dig> from libraries ip_ <dig> and input were used  <cit> . top panel: the distribution of peaks in  <dig> genomic features; bottom panel: average binding profiles around tss +/−2 kb for all the refgene and for two user-provided gene lists. 

 additional file 3: bwa versus novoalign in mapping single-end reads. the 28-bp chip-seq reads from eight libraries of tf nfkb were downloaded from ucsc . reads were mapped to the human genome reference hg <dig> using bwa and novoalign. bwa parameters are: bwa aln -o  <dig> -l  <dig> -t  <dig> -k  <dig> and bwa samse -n  <dig> -f; novoalign parameters are: novoalign -r random --hdrhd off -c  <dig> -d reference.nix -f stdfq -f end <dig> fastq -o sam. bwa mapping: libraries  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and 15; novoalign mapping: libraries  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig>  numbers in parentheses represented number  of total raw reads and uniquely mapped reads, respectively. for six of the eight libraries, bwa increased uniquely mapped reads by  <dig> - <dig> %. 1: gm12878_input_igg_rep <dig>  2: gm12878_input_igg_rep <dig> . 3: gm12878_input_igg_rep <dig>  4: gm12878_input_igg_rep <dig> . 5: gm12878_nfkb_ip_rep <dig>  6: gm12878_nfkb_ip_rep <dig> . 7: gm12878_nfkb_ip_rep <dig>  8: gm12878_nfkb_ip_rep <dig> . 9: gm12891_input_igg_rep <dig>  10: gm12891_input_igg_rep <dig> . 11: gm12891_input_igg_rep <dig>  12: gm12891_input_igg_rep <dig> . 13: gm12891_nfkb_ip_rep <dig>  14: gm12891_nfkb_ip_rep <dig> . 15: gm12891_nfkb_ip_rep <dig>  16: gm12891_nfkb_ip_rep <dig> . 

 competing interests

the authors declare that they have no competing interests.

authors’ contributions

hy, je, sm, lw, zs and jpk designed the workflow. hy, je, mk, rm wrote code and tested tools. sl, xc and yl tested tools. ab and hy performed the validation. mk, rm and hy wrote the user manual. hy and jpk wrote the paper. all authors read and approved the final manuscript.

