BACKGROUND
ongoing genome sequencing and recent developments in cdna sequencing projects have led to an exponential rise in the amount of sequence information. this has increased the need for acquiring knowledge from sequences as to their biological function. annotating a single sequence is the gateway to interpreting its biological relevance. however, the usefulness of these annotations is highly correlated with their quality. accurate annotation has traditionally been maintained manually with the experience of individual experts and the experimental characterisation of sequences. however, the increasing gap between the amount of sequence data available and the time needed for their experimental characterisation demands computational function prediction in complementing manual curation  <cit> . commonly, computational functional assignment is based on homologues identified from database searches  <cit> . such an automated annotation process provides comparable results due to a uniform analysis of all query sequences across the same databases and the possibility of repeating the annotation to updated sequence data  <cit> . however, crucial aspects for consideration in automated annotation are i) the problems associated with the databases themselves: sequence errors, erroneous annotation due to spelling ambiguities, incomplete functional annotation, inconsistent functional annotation across databases, consistent but wrong annotation across databases, and ii) the problems associated with the inference, i.e. false positives, where an assignment is made on the basis of a wrongly inferred homology  <cit> . a number of excellent annotation systems have been developed to tackle these problems, e.g. ricegaas  <cit> , gaia  <cit> , genotator  <cit> , magpie  <cit> , genequiz  <cit> , geneatlas  <cit>  and pedant  <cit> . however, little has been done to quantify the annotation accuracy by defined benchmarks and establish a method to provide a confidence value for each annotation.

the current annotation, written in a rich, non-formalised language also complicates this automated process. we addressed this problem by applying a controlled vocabulary from gene ontology   <cit> . go provides consistent descriptions of gene products in a species-independent manner. the go terms are organised in structured, controlled vocabularies  to describe gene products in terms of their associated biological processes, cellular components and molecular functions. an increasing number of go-mapped sequence databases make it possible to replace traditional database searches with go-related searches. these include databases such as genbank  <cit> , swiss-prot  <cit> , swissprot/trembl  <cit> , the tigr gene index  <cit>  and several other genome databases. many annotation approaches have now been developed based on gene ontology. the uncharacterised sequences are searched across go-mapped protein databases and assigned with go terms of the best hits  <cit> . jensen and co-workers used neural networks to predict specific subsets of go terms  <cit> . furthermore, schung et al predicted go terms by intersecting domain profiles  <cit> . the swissprot/trembl entries were associated with go terms by an automated process coupled with manual verification  <cit> . text mining and similarity searches were combined to annotate swiss-prot and genbank entries with go terms  <cit> . however, these approaches were either applied to specific go subsets or did not provide defined benchmarks and confidence values for their predictions.

we have developed an automated system for large-scale cdna function assignment, designed and optimised to achieve a high-level of prediction accuracy without any manual refinement. our system assigns molecular function go terms to uncharacterised cdna sequences and defines a confidence value for each prediction. the cdna sequences were searched against go-mapped protein databases and the go terms were extracted from the homologues. in the training phase, these go terms were compared to the go annotation of the query sequences and labelled correspondingly. we applied support vector machines  as the machine learning method to classify whether the extracted go terms were appropriate to the cdna sequence or not. in order to classify the go terms we used a broad variety of elaborated features  including sequence similarity measures, go term frequency, go term relationships between homologues, annotation quality of the homologues, and the level of annotation within the go hierarchy. to enhance the reliability of the prediction, we used multiple svms for classification and applied a committee approach to combine the results with a voting scheme  <cit> . the confidence values for the predicted go terms were assigned based on the number of votes i.e. number of svms predicting particular go term as correct. the performance of the system was benchmarked with  <dig>  go-annotated cdna sequences derived from  <dig> organisms. it achieved 80% precision for 74% of the test sequences. we applied our annotation system to predict the function for xenopus laevis, a widely studied model organism in developmental biology. because many researchers are now focussing on the functional genomics of this organism, a demand exists for a quality annotation  <cit> . therefore we applied our system to improve the quality and coverage of the existing annotation. we predicted the function for  <dig>  xenopus laevis contig sequences  yielding annotation with good confidence values for more than half of these sequences.

RESULTS
general workflow of training and classification
the classifier  needs to specify attribute values  for a broad list of samples and a class label for each of these samples. through the training samples it learns the feature patterns and tries to group them according to their class labels. after training, the algorithm assigns class labels to new samples according to the class that they best match.

we selected go-annotated cdna sequences for training the svm classifier. the nucleotide sequences were searched against go-mapped protein databases and go-annotations were extracted from the significant hits. then, each go term obtained was utilized as a sample for the feature table. the sample go terms were then labelled as either correct  or false  by comparing them to the original annotation. note that we applied the relationships of the go terms based on their graph structure: "correct" was assigned not only if they were exact matches but also if the go terms were related as either "parent" or "child" . next, the samples were attached with their features or attributes, calculated from the blast  <cit>  results. with this data, the classifier was trained to distinguish between the attribute patterns that contributed to class + <dig>  and class- <dig> . to predict the function of unknown sequences, the same procedure was applied as for the training sequences in order to obtain their go terms and corresponding attribute values. according to these attribute values, the classifier assigned a class for every go term of the blast hits .

datasets for training and testing svm
for training and testing the svm, we selected  <dig>  go-annotated cdna sequences from the following organisms: saccharomyces cerevisiae , drosophila melanogaster , mus musculus , arabidopsis thaliana , caenorhabditis elegans , rattus norvegicus , danio rerio , leishmania major , bacillus anthracis ame , coxiella burnetii rsa  <dig> , shewanella oneidensis mr- <dig> , vibrio cholerae  and plasmodium falciparum  . from these,  <dig> % of the cdna sequences were contributed by arabidopsis, mouse and fly . prokaryotic bacteria  contributed  <dig> % and the remaining  <dig> % of the sequences came from rat, fish, worm, plasmodium, leishmania and yeast. yeast and fly are purely manually annotated datasets. where as bacillus, coxiella, vibrio, shewanella, leishmania and plasmodium are mostly manually, and the rest mostly automatically annotated datasets. manual annotation tends to be conservative and sparse, since the go terms are assigned only if the annotator is highly confident. therefore, a go term may be missed due to a poor definition of a false negative. to reduce this critical problems, yeast and fly annotations are accompanied by an "unknown molecular function" term for sequences with questionable further functions. to reduce false negatives, we discarded all sequences with these tags for training and testing .

the cdna sequences were searched across the protein databases covering a wide range of organisms from prokaryotes to eukaryotes and swissprot. for  <dig>  sequences we got hits with go terms, contributing to  <dig>  sample go terms and yielding an average of  <dig>  go terms per query sequence . these  <dig>  samples were used to train our classifier. generally, the number of go terms per sequence was less for prokaryotes than for eukaryotes. rat had the maximum number of go terms per sequence , followed by fish  and worm . in contrast, shewanella, coxiella and vibrio sequences had the lowest number of go terms per sequence .

svm training and testing
svm training
we set up multiple classifiers by splitting the whole dataset  into  <dig> equal subsets. note that, amongst these  <dig> subsets,  <dig> contained data from a single organism and the remaining  <dig> from two organisms each. subsequently, we built  <dig> classifiers with these subsets. since the training sets were created organism-wise, the classifiers were trained from different ranges of data, based on purely manual annotation , mostly automated annotation or a mixture of both. for training each of these classifiers, we performed a model selection , which yielded varying accuracy values ranging from  <dig> % to  <dig> %, with an average accuracy of  <dig> %.

svm testing
to test the classifiers performance, we prepared  <dig> test sets  using the same  <dig>  sample go terms. the prediction quality of all  <dig> classifiers were assessed by an organism-wise cross-validation approach, i.e. for each organism , we used all the classifiers for prediction except those that corresponded to the same organism. with this approach, we were able to simulate the annotation of a new organism. the number of classifiers used for predictions varied highly across organisms . the quality of the predictions was estimated by comparing the predicted terms with the original annotation and the results were expressed in terms of precision and accuracy values . the average-accuracy refers to the average of the accuracy values attained by all classifiers used for the prediction. the maximum average-accuracy was achieved for fly , followed by yeast , and the minimum for mouse .

additionally, we compared the classification efficiency of the classifier derived from automatic annotation  with the manually annotated test sequences . the prediction of the yeast and fly sequences with the  <dig> classifiers from the mouse sequences produced an average-accuracy of 79% and 80% respectively. similar results were acquired with the  <dig> classifiers from arabidopsis . likewise, the worm classifiers  yielded the average-accuracy of 82% for yeast and 83% for fly. these values were comparable with the average-accuracy of 81% achieved by both, using yeast as test sequences against fly classifiers  and vice-versa . likewise, we classified the mouse test sequences against yeast classifiers  and fly classifiers yielding 69% and 71% average-accuracy respectively.

combining multiple classification results by the committee approach
though we already achieved a good accuracy with some of the classifiers, our intention was to improve the precision and, furthermore, to obtain confidence values for the predicted go terms. to this end, we combined the predictions of multiple classifiers by the committee approach. if a classifier predicted a particular go term as correct, it contributed a vote. votes were collected from all classifiers and summed up to yield a final score value. if no vote supported a go term as correct, it was assigned with the label "false". otherwise, the number of votes provided a measure of the reliability. figure  <dig> shows precision and accuracy versus the number of votes. if we made predictions with a minimum of one vote, we were able to achieve 43% precision and 59% accuracy. when the stringency was raised to  <dig> votes, a minimum of  <dig> votes was required to classify a go term as correct, yielding an accuracy of 84% and precision of 75%. at a cut-off value of  <dig> votes, we attained 91% precision and 71% accuracy. a cut-off value of  <dig> votes gave 100% precision and 67% accuracy. our accuracy reached a plateau at  <dig> votes. however, it decreased slightly for stringencies of more than  <dig> votes. note, that this was due to the increasing number of false negatives. the relation between the precision and the number of votes  was used as a means of calibrating to assign the confidence values for new predictions.

for each threshold value of the votes, we calculated the sensitivity and the false positive rate to obtain a receiver operating characteristic plot . the graph shows that the classification performance was comparable for different classes of organisms like prokaryotes, single cell eukaryotes and multi-cellular eukaryotes, which reflect the organism-independent performance of our method. note that for fish, worm, plasmodium and leishmania the classification performance was particularly good due to the low number but well characterised test sequences.

we compared the prediction performance for go terms annotated with the evidence code iea  and non-iea . all sequences from bacillus, coxiella, vibrio, shewanella, yeast, leishmania, and plasmodium were non-iea annotated and  <dig> % of the fly go terms were non-iea annotated. in contrast, all sequences from fish and worm were iea annotated. the remaining test organisms were mostly iea annotated . the classification performances revealed by the roc plots were comparable between iea and non-iea annotated test organisms . therefore, the classifier could reproduce the annotation of other automated systems as well as high-quality manual annotation. we were interested in the coverage of sequences with respect to the average precision of the annotations . considering  <dig> vote as the cut-off value, we obtained 52% average precision for 98% coverage. we obtained 80% average precision for 74% coverage , and 90% average precision for 42% coverage . these coverage values varied when regarding the test organisms individually. the coverage for different test organisms at 80% average precision were: fish 97%, coxiella 89%, worm 88%, vibrio 86%, rat 85%, bacillus 83%, plasmodium 81%, mouse 78%, leishmania 76%, shewanella 74%, arabidopsis 69%, fly 66% and yeast 57%.

xenopus annotation
we extracted all xenopus laevis contig sequences from the tigr xenopus laevis gene index   <cit>  and got a total of  <dig>  contig sequences, excluding singletons. we applied our method to predict functional go terms for these contig sequences. we predicted the function for  <dig>  sequences with an average of  <dig>  go terms per sequence. in total,  <dig> % of all the go terms were predicted with less than 50% confidence value,  <dig> % of them were between 50% to 80% confidence and the remaining 25% with a predicted confidence value of above 80%. at 80% stringency , we made predictions for  <dig>  contig sequences including  <dig>  go terms, yielding on average  <dig>  go terms per sequence.

to compare the functional abundance of the expressed genome across the organisms, we mapped the predicted go terms  to the high-level, i.e. more generalised or high-level terms of the molecular function ontology   <cit> . these molecular function go slim nodes were taken from the second level of the molecular function ontology. the distribution of higher-level go terms were compared between xenopus, fly, yeast and mouse . note that some of the deeper-level terms had multiple paths. they were mapped to two or more higher-level nodes, so that the total sum of the higher-level nodes exceeded 100%.

comparison to the tigr xenopus annotation
tigr provides a go mapping for xenopus contigs . we compared our annotation with the tigr go annotation for molecular function. from  <dig>  contig sequences, tigr annotated  <dig>  contigs with a total of  <dig>  molecular function go terms. in contrast, our approach was able to predict function terms for  <dig>  contigs, i.e. more than three times that of tigr sequences. our procedure did not annotate  <dig> contigs from the tigr annotated contigs. for the remaining  <dig>  contigs, 85% of all tigr terms were found to be exact with those using our method;  <dig> % of the tigr terms were at a higher-level of the go tree than our annotation, so in this case we provided annotation at a deeper level; in  <dig> % of the cases our annotation was at a higher-level;  <dig> % of the cases were completely different; and  <dig> % of the tigr terms were obsolete. we compared the quality of tigr and that of our annotations by a raising stringency and found that when we applied a confidence threshold of 80% for our annotation, we lost  <dig> % of the sequences. this included  <dig>  sequences holding equivalent tigr annotation or  <dig> % of the total tigr annotation. with this stringency, our system annotated  <dig>  contig sequences, i.e. twice the tigr annotation at this quality.

we were interested in novel annotated sequences with the highest confidence values and found we could predict go terms for  <dig> contigs with a confidence value of 100% . interestingly,  <dig> of these lacked any go annotation by tigr. out of these,  <dig> had got a descriptive tigr annotation and the rest had not got any. table  <dig> shows the novel annotation for these eight sequences. our novel predictions are as follows: 1) tc <dig> and tc <dig> are predicted to display endopeptidase activity and more specifically serine-type peptidase activity . 2) tc <dig> and tc <dig> are predicted to be aminopeptidases, however for the latter the more specific prediction of prolyl aminopeptidase activity is assigned with 86% confidence. 3) tc <dig> is predicted as glutathione peroxidase at 100% confidence and tc <dig> is annotated as protein kinase with the same confidence. 4) both tc <dig> and tc <dig> are transmembrane receptors but the latter one is classified as frizzled receptor with 82% confidence. in most of these examples the functional assignment and associated confidence were recorded in multiple levels of granularity.

discussion
in this paper, we presented an automatic annotation system that is able to cope with the expanding amount of biological sequence data. our approach efficiently combines the ongoing efforts of gene ontology and the availability of go-mapped sequences with a profound machine learning system. the go-mapped databases provide annotation described in a controlled vocabulary and also a measure of reliability, as these go entries are labelled with their type of origin. furthermore, go terms are structured hierarchically, which allow us a twofold use of the information: i) the level within the tree is taken as a classification criterion to distinguish low from high-level annotations during the learning procedure, and, ii) the hierarchical structure allows us to extend hits by slightly moving up and down within a restricted local area of the tree. this may overcome fluctuations of the annotation levels coming from varying annotation experts.

our annotation system exploits the different combinations of attributes and yields functional transitivity: svm learning and prediction are organism-independent and comparable to manual annotation, which may be supported by the nature of the attributes we utilise. subsets and overlaps are counted in a balanced fashion to avoid biases due to the complexity of an organism and a potentially correlated complexity of its sequences. the committee approach allows us to improve the prediction quality as well as to assign confidence values for the new predictions in a straightforward manner. our classifiers performance is hardly limited by the varying quality of the training data, whether manual or automatic annotated. the prediction results of manually annotated test sets with the classifiers based on automated annotation as well as classifiers based on manual annotation were comparable. regarding the outcome of the overall classifiers, we achieve consistency with existing annotation from automatic annotations. this is the less complex part of our work and shows a comparable efficiency of our system. additionally, our system reproduces annotation of purely manually annotated datasets . however, the performance results for these datasets are low in terms of recall, i.e.  <dig> % recall with 80% precision compared to  <dig> % recall with the same precision of the complete test set. note that manual annotation tends to be conservative and sparse, yielding stringent true positive definitions, whereas automatically annotated sequences may accumulate information to a greater extent.

we were interested in annotating xenopus since it is a familiar model organism. however, the sequences were not very well annotated. our system was applied to annotate the xenopus contig sequences from tigr. through our approach, we annotated  <dig> % of all contig sequences available at present, and associated a confidence value for each prediction, yielding roughly three times more sequences as compared to the currently available go annotation. however, the coverage of annotation to new organism like xenopus is crucial. we were able to attain predictions for  <dig> % of all xenopus contig sequences . this compares to the applied databases that contained 53% satisfactory annotation for their sequences , and better than the organism specific databases . obviously, improving the quality and quantity of annotation within the available databases goes along with the coverage exploit of machine learning algorithms for new organisms. in future we want to extend our method with the information from other sources such as domain databases and protein family databases.

CONCLUSIONS
we developed an automated annotation system to assign functional go terms to an unknown sequence. we used the well-established technique of support vector machines  for the classification of correct and incorrect go terms. our approach benefited from the broad variety of potential attributes used for the functional transitivity and a vast amount of data used for training and validating. the committee scheme exploited in our system provided a means to assign confidence values in a straightforward manner. our system performance was robust, organism-independent and reproduced the high-quality manual annotation. when applying it to xenopus laevis contig sequences, we obtained a remarkably enhanced annotation coverage compared to the existing annotation.

