BACKGROUND
mass spectrometry-based proteomics, particularly liquid chromatography coupled to electrospray ionization, has become the predominant technique for identification and quantification of proteins in biological systems  <cit> . growing demand for improved annotation of primary proteomics data with biological information from various public databases has catalyzed interest in the development of software tools to support integration of these data types. unfortunately, a number of factors, including lack of experimental standardization, rapid introduction of novel mass spectrometry technology, and the evolution of proprietary file formats associated with proteomics platforms represent a significant hurdle to the development of efficient and comprehensive software frameworks.

to accommodate the emergent nature of proteomics-related technologies and the burgeoning number of databases that contain various biological annotations, data analytic systems must emphasize  intuitive and interactive interfaces,  user-accessible coding frameworks to facilitate rapid prototyping of algorithms, and  customizable sets of tools that can be readily integrated to provide pipelines that support a variety of proteomic workflows. task specific windows desktop applications such as msquant  <cit>  and insilicosviewer  <cit>  can access a subset of native mass spectrometry data files directly and provide flexibility through adjustable parameters, but are not readily extended across the full spectrum of data analytic activities required in modern proteomics research. to address the full spectrum of analyses, open source projects such as the openms proteomics pipeline   <cit>  and proteowizard  <cit>  offer a set of modular tools for generation of pipelines. the c++ coding environment of these tools is designed for performance and throughput, although researchers who lack programming experience often struggle to implement novel algorithms or other ad hoc tasks. therefore, software libraries such as insilicospectro  <cit>  and mspire  <cit>  have been developed based on high-level languages such as perl and ruby respectively. these libraries allow scripting of common data analysis tasks but cannot access raw binary data directly, and must rely instead on surrogate text files.

historically the proprietary nature of binary files associated with proteomics technologies represented a significant obstacle to efforts aimed at development of integrated, desktop environments. one solution proposed specifically for mass spectrometry is extraction of native data to a common file format, typically a dialect of xml  <cit> . we  <cit>  and others  <cit>  have challenged the technical merits of this approach. given that mass spectrometry manufacturers implicitly carry the burden of maintaining up-to-date libraries for access to their native data, we recently proposed that a common api  <cit>  is a more rational solution for shared access to proprietary mass spectrometry files.

here we define and implement a minimal api  that provides direct, programmatic interaction with binary raw files and we demonstrate that performance for practical tasks is significantly faster as compared to equivalent operations for access to mzxml files. we implement mzapi in python to maximize accessibility; similarly, mzapi is exposed to users through multiplierz, a python-based desktop environment that combines an intuitive interface with a powerful and flexible high-level scripting platform. together, mzapi and multiplierz support a wide range of data analytic tasks and facilitate rapid prototyping of novel algorithms. in addition, the multiplierz environment is designed with a "zero-infrastructure" philosophy, meaning that it can be deployed by end users who lack system administration experience or support. we demonstrate the capabilities of multiplierz through a variety of proteomics case studies such as  label-free quantitative comparison and interactive validation of datasets from multi-acquisition experiments,  automatic quality control of mass spectrometer performance,  improved peptide sequence assignment via deisotoping of ms/ms spectra, and  assessment of phosphopeptide enrichment efficiency through programmatic fragment ion extraction.

implementation
mzapi: a common api for direct access to proprietary file formats
as described above, direct access to native mass spectrometry data files is a key factor in the assembly of a powerful and flexible framework for proteomics data analysis. towards this end, we define a minimal mzapi as consisting of the following key procedures:

 <dig>  scan → 

 <dig>  scan_list → 

 <dig>  time_range() → 

 <dig>  scan_time_from_scan_name  → time

 <dig>  ric → 

the first two procedures in mzapi return: 1) individual scans in the form of a list of  pairs, and 2) a catalog of all scan descriptions in the form of a list of  pairs in the experiment. in addition, the api provides: 3) 'time_range' that returns the earliest and latest acquisition times in the experiment, and 4) 'scan_time_from_scan_name' for translation of manufacturer-specific scan nomenclature to the mzapi naming convention. we opted to rely on acquisition time as a common naming convention. in the case of lc-ms this is equivalent to chromatographic retention time. finally, a fifth procedure generates a reconstructed ion chromatogram  for a given time and mass-to-charge range, returned as a set of  pairs. while in principle rics can be generated using the first two calls, we believe that ubiquitous use of the ric operation in proteomics data analysis justifies exposure of ric extraction as a primitive in the api. given that ric extraction is provided by all manufacturer libraries, this procedure represents an excellent example of efficient re-use of native data system indexing and software.

we propose that a proprietary file format is considered mzapi compliant when the manufacturer provides a freely available, and preferably redistributable, implementation of the aforementioned  <dig> core procedures, or an extended version that may evolve from a community-driven standardization effort. for example, thermofisher scientific provides a data access library for .raw files through the msfilereader program, freely available for download at:  or . naturally, additional procedure calls, such as charge state or signal-to-noise values for each isotope cluster in ms or ms/ms scans, can be incorporated into the mzapi framework by essentially subclassing the core mzfile class.

as a basic test of file access speed, we compared the time required for random access of scans in an lc-ms acquisition from a thermofisher .raw file using mzapi  versus libraries provided by the manufacturer and included in the native xcalibur file browser . table  <dig> demonstrates that, as expected, random file access via mzapi is slower than that obtained when working directly in the manufacturer's native environment. the performance of the common api could be further improved by implementation in c++ or c#, but we explicitly chose python to maintain maximum flexibility through user defined scripts . interestingly, one consequence of the common api strategy is that it provides a direct measure of manufacturer data system efficiency, as evidenced by the additional time required for random access to scans in .wiff versus .raw files. regardless of native file type, the use of a common api eliminates the need for storage and tracking of surrogate files; based on previous reports, this can be particularly problematic for full profile data files, which can grow significantly in size upon conversion to xml  <cit> .

benchmarks for data access efficiency as determined for random scan access  and generation of rics . three files were used: a raw file acquired in data-dependent mode on an orbitrap  with ms scans in profile mode and ms/ms scans in centroid mode; a wiff file acquired in information dependent mode on a qstar elite  with all scans in profile mode; and a mzxml file generated using tpp  with the aforementioned raw file as the source. for comparison of random access times a common single script was used to access both the raw and wiff file, by selecting  <dig> scan times at random and that uniformly span the acquisition range. an equivalent process was implemented in c++ using the thermofisher xdk. for ric generation in gui mode  a script to animate the insilicosviewer v <dig> . <dig> was compared against a similar .mz script. for the non-gui scenario we compared an r  script using the xcms library as well as a perl script using the insilicospectro library  to another .mz script. the .mz scripts, r script, perl script and c++ program are all available in additional file  <dig>  all measurements were repeated n =  <dig> times.

given the multidimensional nature of mass-spectrometry data, extraction based on specific slices through the data space, rather than random file access, is a more relevant performance metric for mass spectrometry files. generation of rics is perhaps the best example of a data slice procedure supported by all manufacturer data systems. consequently we next sought to test the performance of mzapi for creation of rics directly from a .raw file. as a point of comparison we generated the corresponding mzxml file   <cit>  and extracted rics using both a graphical user interface  based browser tool   <cit>  as well as the perl-based insilicospectro environment   <cit>  and the r-based xcms ,  <cit>  scriptable interface platforms. although the latter two are designed to access a number of third-party file formats, none of the gui- or command-line based tools supports access to specified subsets  of the underlying data. as a result we generated rics by extraction of a specific mass-to-charge range over the full data file, or in the case of insilicospectro, which had no support for ric generation, we simply timed the opening of mzxml files. while the mzxml schema includes a scan index that provides for random access to scans at speeds competitive with, or exceeding, proprietary data system   <cit> , table  <dig> shows that generation of specific data slices, or in this case rics, is 5- to 10-fold faster when leveraging the underlying manufacturer's api compared to gui or command line based access to mzxml . this result supports the notion that pragmatic data access patterns are well supported by existing, albeit proprietary, manufacturer libraries, and more importantly, that these libraries can be efficiently utilized through a common and redistributable api.

multiplierz: an open-source and interactive environment for proteomics data analysis
we extend the functionality of mzapi by integration into multiplierz, an open-source python-based environment that provides a flexible framework for comprehensive analysis of proteomics data. figure  <dig> illustrates our proposed implementation; all associated code and scripts are available for download at: . in the following sections, we provide a detailed description of core multiplierz capabilities.

zero infrastructure integration of peptide identification and associated native mass spectrometry data
regardless of final experimental goals, peptide identification is often the first or default operation performed subsequent to lc-ms data acquisition. we designed multiplierz to serve as a user-friendly, desktop tool for interaction with proteomics database search engines; consistent with our zero-infrastructure philosophy, x!tandem  <cit>  is fully integrated into the multiplierz installation package. similarly we include support for automated retrieval of mascot search results. in this case, the url for a particular search is easily and unambiguously accessed using the mascot job id . the multiplierz module for downloading mascot search results also allows input for mascot-specific export options such as "require bold red" and "maximum number of protein hits." multiple search results are specified using either a comma- or dash-separated list of mascot job ids . users can optionally include mascot ms/ms fragment annotation images  and embed them within a singular multiplierz report; thus multiplierz provides users with comprehensive mascot information, including images, in a convenient and portable report . importantly, none of the above tasks require server level administrative privileges. for example, query of ms/ms peak annotations typically requires logon credentials within the web browser. multiplierz interacts with the browser to "screen scrape" ms/ms images and store them within the default report format. users with full access to the mascot server may parse results directly from the .dat file using .mz scripts . similar support is also provided for protein pilot  <cit>  and omssa  <cit> . for maximum flexibility in conversion of parsed data from other search engines we include modules for generation of multiplierz-compatible spreadsheets.

calculation of a false discovery rate  for peptide sequence identifications is one mechanism to assess the overall quality of search results  <cit> . multiplierz supports calculation of a fdr upon retrieval of peptide identification data from both forward and reverse database searches. the fdr for a given score threshold is calculated as the ratio of reverse database search identifications to that from the forward plus reverse searches, each with a score greater than or equal to the chosen threshold. the fdr thus represents the percentage of identified peptides in the forward search that would also be detected in the reverse database search. multiplierz identifies score thresholds for commonly used fdr  as well as calculates the fdr for each forward peptide score via an .mz script .

correlation of identified peptide sequences with specific features in the source mass spectrometry data, such as chromatographic peak width or maximum precursor intensity, is often complicated by the requirement for users to move between disparate programs and interfaces. the multiplierz desktop environment provides users with a centralized point of interaction with both search results and the underlying mass spectrometry files. for example, high-confidence peptide identifications may be used for direct generation of rics across user-defined time and mass-to-charge ranges. various metrics such as full peak width at half maximum , peak area, and apex precursor intensity for peptide elution profiles are included in the output report. as described below these data are combined, annotated, and made available in portable, user-friendly reports.

generation of portable multi-file reports
consistent with our underlying motivation to combine open-source and commercial software where appropriate, we opted to export multiplierz results into microsoft excel. we take advantage of excel's ability to store images in the worksheet , thereby creating an information-rich, yet portable, report that may be readily formatted to meet specific scientific journal data submission requirements  <cit> . moreover, we note that the tendency towards analysis of increasingly complex mixtures along with continued efforts in relative protein quantification have placed increased emphasis on data reproducibility in proteomics experiments. hence it has become common practice to derive a "proteomics result" from comparison, or other manipulation, of multiple mass spectrometry acquisitions. in support of this experimental paradigm, multiplierz includes "multi-detect" and "multi-filter" tools that provide users tremendous flexibility in filtering and collating  each data file obtained from a multiple acquisition study. this feature provides database-like functionality without the need to install and maintain dedicated database servers. importantly, all multiplierz functions provide spreadsheet-based output with optional embedded images .

interactive and dynamic analysis of native mass spectrometry data files
the highly embedded, spreadsheet-based multiplierz reports provide a very flexible and user-friendly mechanism to query various metrics of the underlying native mass spectrometry data and quickly collate search results based on user-defined filter criteria. however, it is often the case that researchers must go beyond these general characterizations and focus on a small subset of their proteomics data in support of targeted biological questions. to enable this mode of data analysis, multiplierz includes a peak viewer tool  that provides dynamic and interactive plots for precursor rics, and corresponding ms and ms/ms scans. additionally, users can edit and export publication quality images through a built-in scrapbook tool . features of the peak viewer include  visualization of theoretical fragments superimposed on ms/ms spectra,  automatic zoom-in display for itraq and theoretical ions for rapid manual validation, and  comparison of scans and rics via mirror and overlay functions. for added convenience the peak viewer opens multiplierz spreadsheets and users can generate plots by a simple double-click on specific rows or peptide entries.

other desktop tools
researchers are increasingly focused on integration of disparate data types in order to better understand biological phenomena at the so-called network or systems level. as a first step in support of these and similar activities, multiplierz automatically downloads genbank data over the internet based on an identified protein list, parses information such as gene ontology and domain classification, along with the corresponding entrez gene, hprd, hgnc, and omim entries, and then creates hyperlinks directly in the spreadsheet reports. this and other tools including an in silico protein digestion tool and a peptide fragment calculator are described in additional file  <dig> 

scripting capability for user-defined customization
while multiplierz includes many built-in features and tools, we also recognize the difficulty of building a "one size fits all" application given the diversity of ideas and efforts pursued within individual research laboratories. hence multiplierz includes a command line console as well as scripting capability  which together support ad hoc data analysis tasks. the scripting capability is particularly useful for niche experiments or proteomics workflows not otherwise supported by other open-source or proprietary data systems. all multiplierz tools are available through both the desktop gui as well as scriptable procedures. in addition, a pre-launch initialization  script enables full customization of the application and its interfaces without recompiling the underlying code.

finally, we note that programmatic access to mzapi allows incorporation of multiplierz into automated data-analytic pipelines. for example, users can submit jobs through a laboratory information management system . upon completion of lc-ms acquisition and database search, multiplierz executes .mz scripts to access both the search results and underlying .raw or .wiff file, in order to create a spreadsheet-based report. users can be notified by email and access their results via the multiplierz desktop environment. importantly, multiplierz spreadsheet reports, whether generated in low- or high-throughput mode, are portable and readily formatted in accordance with journal-specific requirements for proteomics data.

collectively the features described above facilitate a wide range of data analysis tasks for mass spectrometry-based proteomics activities from technology development and evaluation to prioritization of protein identifications for subsequent biochemical validation. importantly, multiplierz provides these capabilities to individual users at the desktop level.

RESULTS
in the following sections, we demonstrate the functionality of multiplierz through relevant examples based on data and results from work in our laboratory. significantly we note that these examples encompass data generated on mass spectrometers manufactured by thermofisher scientific and ab-sciex.

optimization of lc assemblies and methods
we recently described a novel protocol for fabrication of miniaturized lc-electrospray assemblies that provided significantly improved lc-ms performance  <cit> . not surprisingly, elucidation of relevant analytical figures of merit required in-depth and large scale data analysis. figure  <dig> shows the multiplierz-dependent workflow required to evaluate the relative performance improvement for analysis of tryptic peptides derived from whole cell lysate as a function of column size and flow rate . from approximately  <dig>  ms/ms scans encompassing almost  <dig>  peptide assignments  multiplierz identified  <dig> unique peptide sequences and modifications in common across  <dig> lc-ms acquisitions. in addition, multiplierz used mascot-derived peptide identifications to generate rics, calculate full chromatographic peak width at half-maximum , and determine precursor apex intensity. the entire analysis was performed via the multiplierz gui. finally, the embedded ric images facilitated rapid validation and comparison of chromatographic features.

optimization of phosphopeptide enrichment methods
in the aforementioned study, we leveraged the improved performance of our miniaturized lc-electrospray assemblies to elucidate signaling events in embryonic stem cells  <cit> . our specific choice to focus on tyrosine phosphorylation as a direct probe of the molecular events required for self-renewal and differentiation in these cells required optimization of enrichment protocols for peptides carrying this rare post-translational modification. a typical strategy would be to simply adjust experimental conditions to yield a maximum number of phosphotyrosine sites subsequent to lc-ms/ms and database search. however, given the acutely low levels of tyrosine phosphorylation in embryonic stem cells, we chose instead to gauge enrichment efficiency based on the relative fraction of ms/ms scans that contained a phosphotyrosine immonium ion   <cit> , irrespective of any putative peptide sequence assignment. this strategy allowed us to readily decouple low overall peptide yield from poor enrichment of phosphotyrosine containing peptides in experiments that generally provided modest numbers of peptide identifications . figure 6a shows the .mz script used to probe ms/ms scans for the presence of a diagnostic fragment ion at m/z =  <dig>  note that python's clear and concise syntax is readily accessible, as compared to that encountered with manufacturer libraries and data systems. consistent with our reporting strategy, this script outputs a tab delimited file that we readily filter in excel to generate a histogram view of our phosphotyrosine enrichment efficiency .

in a separate report we described the novel application of niobium oxide  for global enrichment of phosphopeptides from complex, biologically derived mixtures  <cit> . the "multi-detect" and "multi-filter" tools in multiplierz were used to compare phosphopeptides enriched via nb2o <dig> and tio <dig>  , and detected across multiple lc-ms/ms analyses. furthermore, to assess potential bias introduced by the stochastic nature of ms/ms, we compared the precursor peak intensities of unique versus commonly detected phosphopeptides that resulted from each method, and confirmed that nb2o <dig> and tio <dig> exhibited an empirically useful degree of divergence with respect to phosphopeptide enrichment .

improved peptide sequence assignment via de-isotoped ms/ms spectra
in another recent study, we optimized performance of orbitrap hcd ms/ms through systematic exploration of various instrument and post-acquisition parameters  <cit> . in the context of this work, we observed that high charge state  precursors were frequently not assigned to a peptide sequence despite an otherwise high quality fragment ion spectrum. we speculated that the presence of multiple isotope peaks per fragment ion in the high resolution orbitrap ms/ms scans may degrade the sensitivity of the search algorithm, resulting in fewer high-confidence sequence assignments. therefore, we generated an .mz script  that de-isotoped  <cit>  each fragment ion cluster and output a charge state reduced peak list for submission to mascot. a variety of parameters can be used to adjust the stringency of spectrum filtering such as maximum charge state, minimum fragment ion mass-to-charge ratio, as well as an option to remove any precursor signal that may remain in the ms/ms spectrum. overall we realized an approximate 30% gain in the number of high-confidence  peptide sequence assignments for high charge state precursors .

high resolution orbitrap hcd ms/ms spectra of high charge state  precursors were frequently not assigned to a peptide sequence due to the presence of multiple isotope peaks per fragment ion. we processed the peak lists  using an .mz script to only retain mono-isotopic and singly charged fragment ion peaks. subsequent research of these data provided an average increase of 30% in the number of high-confidence  peptide assignments across  <dig> lc-ms runs.

label-free quantitative proteomics
relative protein quantitation can be achieved via a label-free approach whereby tryptic digests of protein samples are analyzed without incorporation of stable isotope labels; the resulting peak intensities  for the constituent peptides are combined and compared across samples as well as within replicates  <cit> . typically 3- <dig> replicates of each sample are required to account for non-systematic errors associated with shifts in chromatographic elution time, temperature, electrospray stability, etc. for very large studies, performed across extended periods of time and multiple labs, complex software is typically required to combine, align and analyze the resulting native mass spectrometry files. in contrast, we demonstrate a strategy similar to the one described by bondarenko et al.  <cit> , which is deployed entirely within multiplierz: extraction of ms/ms peak lists, x!tandem based peptide identification, and the generation of common sequences  are implemented directly from the multiplierz menu-system. finally, feature extraction, quantitation, and report generation is performed via an additional mz script . figure  <dig> shows an excel-based report for label-free analysis of two standard protein mixtures .

automated quality control of mass spectrometer instrument performance
high throughput or other core-type operations designed to run in an unattended manner benefit from automated quality control assessment of platform performance. for example, periodic confirmation of measured peptide mass accuracy is required to ensure the integrity of instrument calibration routines. towards this end, we created a short .mz script , which extracts measured mass-to-charge values for a list of standard peptides from a native data file, and automatically calculates mass errors. the output is a calibration report  that shows a reconstructed ion chromatogram and experimental mass accuracy for each standard peptide. the measured mass errors may be used as input for mass tolerance parameters in subsequent database search algorithms  for peptide sequence identification.

in a second application, we developed a routine for recalibration of ms/ms spectra. it is widely recognized that increased mass accuracy provides for higher stringency searches and yields improved results  <cit> . first, a given set of ms/ms spectra are searched with mass tolerance values based on the most recent mass calibration parameters. under these conditions we typically observe a monotonic increase in mass error as a function of fragment ion mass . a high-confidence peptide is selected from the search output, and the corresponding annotated ms/ms spectrum is used to compute the slope and intercept of the linear mass error function. this equation is then used to recalibrate precursor and product ion masses via an .mz script . finally, we re-search the newly calibrated dataset with a narrower tolerance, reducing the average mass error .

CONCLUSIONS
we recognize that some aspects of our proposal diverge from current efforts to establish community standards in proteomics. for example, the use of mzapi within multiplierz to provide direct access to binary mass spectrometry files does not rely on xml-based surrogate files. we note however, that the two strategies are not mutually exclusive; that is, support for mzxml  <cit> , or the recently described mzml  <cit>  can be readily incorporated into mzapi. similarly, output from multiplierz can be readily formatted in pepxml  <cit> . in addition, recent discussions focused on data sharing in proteomics suggest that standards may evolve beyond xml-based formats  <cit> . equally important, the emergence of translation layers such as cygwin  <cit>  and wine  <cit> , continue to blur inter-platform boundaries, such that software solutions amenable to the widest audience may eclipse those based largely on platform independence. in fact, our use of microsoft excel as the default report output for multiplierz is one such example. similar image-enhanced spreadsheets may be generated in open formats such as openoffice.org xml  <cit>  , but our experience to date indicates that the majority of biomedical researchers still opt for commercial spreadsheet solutions, either out of familiarity or because of existing institutional support.

the multiplierz framework is accessible to a wide range of researchers, and simultaneously provides support for novel algorithm development as well as deployment of automated data pipelines. as a central point of integration for information from publically available databases and native data from proprietary instrument platforms, multiplierz offers compelling addition to the ongoing discourse aimed at identifying an effective means to enable broad access and data exchange in the proteomics community. in particular, incorporation of mzapi into the multiplierz desktop architecture may offer a better impedance match between the rate of proprietary mass spectrometry innovation and researchers' demands for increased autonomy in their data analysis tasks.

availability and requirements
• project name: multiplierz

• project home page: 

• operating system: microsoft windows

• programming language: python

• license: open source under lgpl

authors' contributions
jrp and ma designed multiplierz. jrp developed the python code for multiplierz. ma and jrp defined mzapi. ma and jrp developed the c++/c# and python mzapi code respectively. jtw and ncb developed the x!tandem interface within multiplierz. tc integrated multiplierz within a high-throughput pipeline. sbf generated data, while ma designed and developed scripts for the label-free quantitation analysis. sbf and yz provided the design for de-isotoping and qtof recalibration scripts. jrp drafted the manuscript with input from all-authors. jam conceived of the study, and participated in its design and coordination and helped to draft the manuscript. all authors read and approved the final manuscript.

supplementary material
additional file 1
timing comparison scripts. this compressed file contains the .mz scripts, r script, perl script and c++ program to generate timing measurements for comparing data access methods.

click here for file

 additional file 2
.mz scripts for developing custom algorithms. this compressed file contains all .mz scripts described in the manuscript in addition to a few other useful scripts. descriptions.pdf contains a brief description of each script.

click here for file

 additional file 3
description of multiplierz tools. this document lists and describes the standard tools available within multiplierz.

click here for file

 additional file 5
example multiplierz spreadsheet. this is a microsoft excel spreadsheet report generated by multiplierz. this is the multiplierz report described in figure  <dig>  hover on cell comments to view the embedded images.

click here for file

 additional file 4
openoffice.org xml spreadsheet screenshot. this is a screenshot describing an openoffice.org xml spreadsheet file that is analogous to a multiplierz spreadsheet with images embedded within cell comments.

click here for file

 acknowledgements
this work was supported by the dana-farber cancer institute and the national human genome research institute . jp was supported by national science foundation integrative graduate education and research traineeship  grant dge- <dig>  eric d. smith provided valuable assistance in preparation of figures and critical reading of this manuscript.
