BACKGROUND
the analysis of a newly sequenced bacterial genome often involves comparing the sequence to previously characterized genomes. such comparisons can help to identify novel or rapidly evolving sequences, horizontal sequence transfer events, and interesting functional differences or relationships. tools that can be used to visualize sequence conservation in conjunction with other sequence characteristics, such as functional classifications and nucleotide composition, are particularly popular  <cit> . continual advances in sequencing technology have contributed to the availability of numerous bacterial genome sequences—currently there are thousands of bacterial and archaeal genome sequences available, and undoubtedly many more on the way. given the accessibility of genome sequences there is an increasing need for comparative genomics tools that can handle large numbers of sequences. the cgview comparison tool  is a software package designed for visually comparing bacterial, plasmid, chloroplast, or mitochondrial genomes to thousands of other genomes or sequence collections. cct can also display sequence feature information, cog classifications , sequence analysis results, and base composition plots. maps are highly customizable, both in terms of how comparisons are conducted and how results are presented, and can be generated in several sizes and file formats, suitable for publications, presentations, and posters.

implementation
cct consists of several custom bash and perl scripts that are used to create a local cog sequence database  <cit> , download sequences of interest from ncbi  <cit> , extract and translate orfs, extract cds feature translations, perform blast searches  <cit> , assign cog functional categories to proteins, generate cgview xml files  <cit>  and create graphical maps. additional scripts are included for redrawing maps and for drawing zoomed maps showing regions of interest in more detail. wrapper scripts simplify the use of cct by allowing a single command to run many of the cct components in succession. the usage of these scripts is described in the “commands” section of the cct documentation and demonstrated in the cct tutorials. although a command-line interface can be intimidating, the availability of a linux virtual machine and clear documentation and tutorials should help users with little command-line experience take advantage of cct. furthermore, a few simple commands can be used to create several complex maps, thanks to the included wrapper scripts. command-line tools are widespread and popular in bioinformatics, and offer important advantages related to reproducibility, automation, and remote execution.

RESULTS
creating maps using cct
cct maps typically consist of several rings depicting a reference genome and its features , and the results of blast comparisons between the reference sequence and one or more comparison sequences. a separate blast ring is drawn for each comparison genome. when there is similarity between a portion of the reference sequence and any part of a comparison sequence, a coloured arc is drawn beneath the region of the reference sequence showing similarity, in the appropriate comparison ring. user defined features, analysis results, and base composition plots may also be displayed.

there are three main approaches to drawing maps using cct. one is to run the cgview_comparison_tool.pl script, supplying it with the name of a new map project . the script creates a directory tree named after the project, consisting of a few directories and a configuration file . the user then places the sequence to be drawn and the comparison sequences into the reference_genome and comparison_genomes directories, respectively. several sequence formats are supported, including genbank, embl, and fasta. protein or dna sequence collections in fasta format  can also be placed in the comparison_genomes directory. additional features or analysis results  can be placed in the appropriate directories at this time. the configuration file, which is a simple text file consisting of options and values as well as explanations of the options can be edited to specify, for example, the types of blast comparisons to be performed, the base composition plots to display, and the size of the map to be generated. when the cgview_comparison_tool.pl script is rerun on the same project, it detects the sequence files and initiates the map creation process. all intermediate and output files, including the blast results, cog assignments, cgview xml files, and graphical maps, are written to directories located inside the project directory. a sample map generated using this script is given in figure  <dig>  once the map has been completed the create_zoomed_maps.sh and redraw_maps.sh scripts can be used to draw additional maps showing regions of interest in more detail , or to make changes to the appearance of the map. both scripts make use of the existing blast results in the project directory so that the blast searches are not repeated.

the second and even simpler approach to using cct is to run the build_blast_atlas.sh script , which accepts a genbank file as input and creates several graphical maps comparing the input sequence to all sequences placed in the comparison_genomes directory. the advantage of using this wrapper script is that it automatically creates two map projects, one comparing the sequences at the dna level using blastn searches, and one comparing the cds feature translations using blastp. the two map types are useful for different purposes: conserved non-transcribed or non-translated sequences can be identified using the blastn map, while similar protein coding regions are best visualized using the blastp map. the cds maps also display cog functional categories, which are assigned automatically by cct . both map types also use a modified colour scheme for blast hits . for each map type three images are generated showing differing levels of detail. the largest map includes feature labels for the reference genome. expanded maps showing more detail can be created using the create_zoomed_maps.sh script. examples of larger maps comparing thousands of genomes are available on the cct web site.

the third approach to using cct is to run the build_blast_atlas_all_vs_all.sh script. this script creates a separate map for every sequence in the comparison_genomes directory, depicting the results of blast comparisons with all the other sequences in the directory. the individual maps are then combined into a single montage map . the montage allows more thorough comparisons to be conducted among a group of closely related genomes, by allowing every sequence to serve as the reference sequence. for example, sequences missing from a reference genome relative to the comparison genomes will not be observed using a single map but can be detected using this approach. the separate  map images combined to create the montage are also available in the output directory.

an important and potentially time-consuming step when creating maps, regardless of the mapping software used, is obtaining the reference and comparison genome sequence records to be visualized. to simplify this process cct includes several scripts for downloading sequences of interest directly from ncbi. these scripts make use of the ncbi entrez utilities web service api and can be used to download a single record based on accession number , all the records corresponding to a particular species or genus , or all the records from a particular organelle or domain . options are included for further restricting sequence retrieval according to sequence length. these options allow, for example, plasmid sequences to be avoided when downloading bacterial chromosomes. as with the other cct scripts, the use of these utilities is demonstrated in the tutorials and all script options are described in the “commands” section of the cct documentation.

cct visualization enhancements
several subtle but important enhancements have been made to cct during its development to increase its utility as a genome visualization tool. for example, features parsed from reference sequence file are drawn with partial opacity by default, so that the boundaries of features are apparent even if they overlap. when cct assigns cog functional categories, it is able to appropriately handle cases where a protein appears to fall into multiple categories . in such situations the coloured arrow used to indicate cog class is divided into the appropriate number of smaller arrows, each coloured to represent a single cog category. this behaviour differs from that used to create virtually all existing bacterial maps that colour proteins according to functional class. when blast atlases are built by cct , the reference genome is included automatically as one of the comparison genomes. the inclusion of the reference leads to a seemingly superfluous reference vs. reference blast analysis that actually serves an important purpose—it reveals portions of the reference that are unable to produce blast hits, due to ambiguous bases, blast filtering, or an absence of protein-coding sequences . without the reference vs. reference ring there is the potential for comparison rings to be interpreted incorrectly. unlike the other blast atlas tools we have encountered, cct adjusts the order of the comparison genome rings automatically , so that the most similar genomes tend to be placed closest to the reference sequence ring. similarity is determined using a heuristic that considers the total number of comparison genome bases contributing to hits as well as the scores of the hits. in practice this sorting makes it much easier to visualize sequence divergence trends for the genes or proteins in a reference sequence. for example, the most labile or divergent portions of a reference genome standout as light-coloured regions adjacent to the reference ring, while well-conserved portions of the reference give rise to darkly-coloured arcs that form “spikes” of conservation extending towards the centre of the map. this sorting can also reveal genome segments whose similarity is inconsistent with the general trends revealed by the map. for example, a horizontally transferred segment can appear as a dark red or black arc in a portion of the map consisting of otherwise weakly similar genomes. multiple regions of a comparison genome can be similar to a given region of the reference genome. for this reason cct arranges the arcs within each blast ring so that low-similarity arcs do not obscure higher-similarity arcs. finally, cct has the ability to divide protein-search blast rings into six sub-rings corresponding to the six different reading frames of the reference sequence. this feature, when used with zoomed maps and cct’s orf drawing option, can be used to distinguish which of the orfs or cds features in an overlapping set are conserved.

blast comparison options
cct writes a configuration file to each project when it is initialized. this simple file can be edited to specify, among other things, which types of blast comparisons are performed. in total there are currently  <dig> comparison scenarios available. these are described in detail in the cct documentation, and differ primarily in terms of which regions of the sequences are compared and whether the comparisons are done at the dna or protein level. for example, cct can compare the entire reference sequence to each comparison genome at the nucleotide level using blastn, or it can conduct the comparisons using the 6-frame translations of the sequences, using tblastx. alternatively, cct can identify and translate orfs in each sequence, and compare the translations using blastp. instead of determining orfs, cct can simply extract the cds feature translations from the input files and compare them using blastp. finally, instead of single genomes the comparison sequence files can consist of multiple dna sequences in fasta format  or multiple protein sequences in fasta format . there are options specific to such multi-fasta files for controlling how the comparisons with the reference are performed. cct uses file extensions to determine which sequence files should be used for a given blast comparison. when there are multiple files with the same extension, a separate blast comparison is conducted for each, and the results are shown in separate rings on the resulting map. multiple comparison types can be shown on a single map. in this manner conserved non-translated sequences can be visualized along with conserved coding regions.

adding custom features and analysis results to cct maps
there are numerous data types users may wish to visualize on cct maps, such as gene expression measurements, the positions of horizontally transferred segments revealed by specialized programs, the positions of snps identified by sequencing, and so on. to accommodate user-supplied information, all cct projects include a “features” and an “analysis” directory. simple tab-delimited or comma-delimited text files can be added to these directories. files describing the positions of genes and other regions of interest are generally placed in the features directory, whereas files assigning numerical scores  to genome regions are placed in the analysis directory. cct parses the files and creates a separate ring for each on the final map. the regions obtained from the features directory are drawn much like the features extracted from genbank files, whereas those parsed from analysis files are scaled according to the accompanying score value.

adjusting the appearance of cct maps
the maps generated by cct are designed to be visually appealing and informative. nonetheless the default colours, font sizes, line widths, etc. may not always be appropriate. cct includes functionality that allows maps to be customized without the need to repeat the computationally intensive analysis steps used to assign cog categories and identify sequence similarities. this functionality is implemented using more than  <dig> "customization keys", which can be passed to certain cct commands along with their desired values. for example, the "backgroundcolor = rgb" key-value pair can be supplied to the build_blast_atlas.sh script, to specify that maps should be drawn with a black background. the script can reuse existing blast results if they are available in the relevant project directories . a comprehensive list of the cct customization keys is available on the cct web site, and commands that make use of these keys are included in the cct tutorials.

the cct map creation process generates an xml file for input to the cgview program  <cit> . this intermediate xml file, which uses a simple syntax to fully describe the features and appearance of the map, can be edited as another way of adjusting cct maps. the redraw_maps.sh script can be used to quickly redraw maps directly from the modified xml file.

a final option for customization is to edit the resulting images themselves. cct maps are drawn in png format by default but can instead be saved in a vector-based format . use of svg format allows map elements to be individually adjusted using a vector graphics editor.

discussion
there are many visual comparative genomics tools available, each with different advantages and disadvantages. for bacterial genomes, we previously created the cgview server  <cit> , which can compare a reference genome to up to three comparison genomes, using nucleotide or translated nucleotide blast searches. cct greatly exceeds the capabilities of this server in all regards. for example, far more genomes can be compared, comparisons can be conducted at the level of cds features or orfs, much larger maps can be drawn, maps can be saved in vector or raster-based formats, cog functional categories can be assigned and shown, map appearance  can be customized extensively, comparison genome sets can be prepared much more easily, subsets of genes can be labeled, and multiple maps can be generated automatically for a set of sequences. users also have access to the raw blast results, cgview xml files, and program source code. depending on the reasons for performing the sequence comparison, other tools may be preferred. for example, act  <cit>  and circos  <cit>  use lines to connect regions of sequence similarity between sequence ideograms, and can thus be used to visualize sequence rearrangements. some users may prefer the default colour scheme and appearance of maps produced using the blastatlas service  <cit> , over those generated by cct. the multipipmaker server can compare larger genomes and create linear figures  <cit> . the blast ring image generator   <cit>  uses cgview  <cit>  to render maps and is operated using a graphical user interface. the graphical interface and included functionality for draft genomes and next-generation sequencing data files make brig an excellent alternative to cct for some users and data sets. it is worth noting however that cct has advantages over all of these tools related to its visual enhancements, diversity of included analyses, the number of genomes it can handle, its integrated scripts for downloading genomes, support for map customization, and its command-line interface for rapid creation of complex maps and pipeline integration.

CONCLUSIONS
in summary, the cgview comparison tool  is a package for visually comparing circular sequences of interest to existing genomes or sequence collections. the capacity and capabilities of cct distinguish it from existing sequence visualization tools. the ease with which large and complex maps can be created should make cct appealing to anyone who aims to learn more about bacterial, plasmid, chloroplast, or mitochondrial genome sequences.

availability and requirements
project name: cgview comparison tool

project home page:http://stothard.afns.ualberta.ca/downloads/cct/

operating system: unix/linux

programming language: perl license: gnu gpl

any restrictions to use by non-academics: none

competing interests
the authors declare that they have no competing interests.

authors’ contributions
ps drafted the manuscript with assistance from jrg. ps and jrg wrote the cct software and documentation. asa developed the cct virtual machine, wrote documentation, and assisted with program testing. all authors read and approved the final manuscript.

supplementary material
additional file 1
example cct workflow using the cgview_comparison_tool.pl script.  commands for comparing a bacterial genome of interest, e. coli nrg857c , to all other e. coli genomes available in ncbi’s refseq collection. note that these commands complete the entire map creation process, from downloading the sequence files to generating a regular and zoomed map in png format.  the directory structure of the cct project created using the cgview_comparison_tool.pl command. the bold items are directories and the regular items are files. 

click here for file

 additional file 2
example cct workflow using the build_blast_atlas.sh script. a) commands to create a blast atlas comparing the rattus norvegicus mitochondrial genome to all mitochondrial genomes available in ncbi’s refseq collection. note that by default the  <dig> most similar comparison genomes are selected by cct after blast analysis for inclusion on the final map. b) the directory structure created by the build_blast_atlas.sh command. the bold items are directories and the regular items are files. 

click here for file

 acknowledgements
this work was supported by funds from the alberta livestock and meat agency and the natural sciences and engineering research council of canada to ps.
