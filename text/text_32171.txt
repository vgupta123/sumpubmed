BACKGROUND
recently, new technologies developed by  <dig> life sciences  <cit> , illumina  <cit> , abi/solid  <cit> , helicos  <cit> , and others can sequence large quantities of dna in only hours. instead of approximately  <dig> nucleotide reads common with traditional sanger sequencing, these technologies generate reads of only about 25- <dig> consecutive nucleotides. further, with traditional sequencing techniques, most of the ~  <dig> nt reads come in pairs, separated by an approximately known distance spanning thousands or tens of thousands of nucleotides. these pairs provide long-range information to help order the reads, but such long-range pairing is not yet widely available or is considerably more expensive. the next generation sequencing technologies with paired-end protocols are generally limited to much more closely spaced pairs, typically separated by at most a few hundred or a few thousand nucleotides. nevertheless, these limitations are mitigated by much higher throughput  and the resulting increased redundancy that comes from the ability to cheaply sample the same genome many times over. however, shorter read lengths lead to a much more computationally challenging assembly problem because they provide less information to determine the location and structure of repetitive subsequences. it is therefore important to understand the limits and promise of these technologies.

in this paper, we study an idealized instance of the short-read assembly problem and attempt to estimate the ability of these technologies to reconstruct genomes. in particular, for a given read length k, we assume that we are given all length-k substrings of a genome g as well as the number of times they occur. this is an idealization in many respects. first, in practice not all length-k substrings will be obtained. second, many of the substrings returned by the sequencing technology will contain errors . however, the repetitive sampling possible with the faster and less expensive sequencing reduces these two problems somewhat. furthermore, the topic of error correction on short-read sequences is itself an active area of research . third, sequencing technologies return substrings of both g and the reverse complement of g. here, we assume instead that the reads are all oriented in the forward direction. lastly, sequencing technologies do not directly provide the number of occurrences of each length-k substrings. instead, the number of occurrences must be estimated from statistics computed on the population of redundantly sampled length-k substrings. for example, sequences observed twice as often as expected probably occur twice in the genome.

despite these simplifying assumptions, it is important to conduct an analysis of the fundamental challenge of assembly -- the repeat structure of the genome -- free of the biases or limitations of any particular sequencing technology. these technologies are advancing at a rapid rate, and while the sequencing error rate or read length may improve from one model of sequencer to the next, the repeat structure of a genome is fixed. our analysis shows the fundamental limits of assembly based on just one unavoidable parameter, the length of the reads, which in turn determines the length of confounding repeats. thus we can give an upper bound on how well an assembler could possibly reconstruct a genome given reads of a certain length. in practice, an assembly of real data may fail to reach this limit by a considerable margin, but we can be confident that no assembler could surpass this limit without risking misassemblies. furthermore, our analysis also gives an upper bound on assembly with paired-end sequences, which we can conservatively model as extremely long reads, because reads of length x have strictly more information than paired-end sequences with insert size x.

similar string reconstruction problems have been considered in the past  <cit> . rubinov and gelfand  <cit>  considered the problem of reconstructing a string given the set of k-long substrings and a list of all pairs of k-long subsequences  such that i precedes j at some distance in the string. because they have complete, long-range precedence data, the problem is different than that which we consider here. others  <cit>  have considered the problem of reconstructing a string from its length-k substrings taking their multiplicities {ci} as unknown . the problem of finding the shortest superstring containing a set of strings has also been extensively studied . of course, work in traditional sequence assembly has produced many algorithms and heuristics  for solving similar problems in practice. newer assemblers are also being developed to handle short-read data .

in this paper, we explore the repeat structure of a large collection of prokaryotic genomes at different levels of resolution. we define a measure of the complexity of a genome in terms of the number of possible different reconstructions with the same repeat structure for repeats longer than a given threshold . our measure complements previously proposed complexity measures that estimate the "repetitiveness" of a genome's sequence at a local scale  or global scale  and focuses specifically on the question of how repeats affect the ability to reconstruct a genome from reads of a given length. for example, our method would distinguish between the difficulty of assembling  <dig> repeats each in  <dig> copies  from the difficulty of assembling one repeat with  <dig> copies  while a simple repeat counting method might not. furthermore, global repeat analysis might fail to take into account the relative positioning of the repeats. we reveal that most of the repeat complexity of the majority of organisms is caused by intergenic repeats or mobile genetic elements. we conclude from this analysis that most genes in a prokaryotic organism can, in principle, be reconstructed from reads as short as  <dig> nt. this is in contrast with the difficulty even a small number of repeats poses on the reconstruction of the entire genome.

this study represents a first comprehensive empirical investigation of the limits of the information that can be extracted from short reads encoded within de bruijn graphs. in this context, a de bruijn graph for length-k has a node for each -substring in the read set and an edge connecting two nodes if their -mers are consecutive in some read. the de bruijn graph has become a popular framework for genome assembly of short reads, since the graph structure captures the sequence and repeat composition of the genome, without requiring an expensive explicit overlap computation between reads. here, we quantify how easily prokaryotic genomes can be reconstructed from short-read data by using several previously known combinatorial results to compute the number of strings consistent with length-k substrings extracted from  <dig> organisms. using these exact combinatorial results, we improve upon previous estimates of assembly complexity  <cit>  that relied primarily on the distribution of intra-repeat distances. we also derive another estimate for the complexity of the assembly problem by computing an upper bound on the n <dig> contig size that is achievable, even with mate-pair information.  these more accurate estimates of the complexity of the reconstruction problem permit a more realistic assessment of the challenges of the assembly problem and provide a benchmark against which new assembly methods can be evaluated.

methods
constructing the de bruijn graph
the de bruijn graph derived from length-k reads of a genome g contains a node for each -mer present in the genome, and a directed edge u → v for every instance where the -mer represented by v occurs immediately after the -mer for u. in other words, there is an edge if u occurs at position i and v occurs starting at position i +  <dig>  these edges can be obtained by considering every k-mer present in the genome and connecting the node for its -prefix to the node for its -suffix. crucially, the de bruijn graph can be a multigraph, with parallel edges between nodes. self-loops are also permitted. note that this definition of a de bruijn graph differs from the traditional definition described in the mathematical literature in the 1940s  <cit>  that requires the graph to contain all length-k strings that can be formed from an alphabet . the more general formulation of the de bruijn graph used in this paper, and the closely related string graph, are commonly used in the sequence assembly literature  <cit>  under the same name, and we follow the same convention. throughout this paper, we use s, t, u, v and w to denote both nodes within the de bruijn graph and the dna sequences they represent. the de bruijn graph encodes all the information available from the input of the list of all k-mers of g. because an edge u → v only occurs if v follows u somewhere in the genome g, we must traverse every edge to reconstruct the genome, and thus the correct genome sequence corresponds to an eulerian path through the de brujin graph  <cit> .

we classify the nodes of a de bruijn graph as decision and non-decision nodes. decision nodes--those with more than one predecessor or more than one successor--are the primary complication in reconstructing the correct genome sequence from a de brujin graph as they introduce ambiguity in possible graph traversals. non-decision nodes  correspond to sections of the graph that can be unambiguously reconstructed.

simplification of the de bruijn graphs
we applied the following graph transformations to the idealized de bruijn graph constructed from the genome sequences. each transformation preserves the entire set of paths consistent with the graph. see figure  <dig> for illustrations of the various transformations. successively applied, these transformations simplify the graph towards the smallest equivalent graph possible -- the most parsimonious graph structure that encodes the full information contained in the set of k-mers.

we use the term path to be an ordered sequence of edges. if the path starts and ends at the same node, it is a circuit. a trail is a path that is not a circuit. if the nodes s and t with unequal in- and out-degrees exist then the de bruijn graph admits an eulerian trail starting at s and ending at t, otherwise it contains only eulerian circuits. either is possible for graphs obtained from genomic sequence data: a circular chromosome necessarily yields a graph with circuits, while a linear genome may or may not, depending on whether the 3'-most k -  <dig> nucleotides equal the 5'-most.

compressing paths
if u → v is an edge, we say u is a predecessor of v and v is a successor of u. if a node u has a successor v, and if u is the only predecessor of v, then nodes u and v can be merged into a single node that has the predecessors of u and the successors of v , similar to previous approaches  <cit> . this transformation, called path compression, can be made even if there are multiple, parallel edges from u to v. prior to path compression, there is a node for each -mer that appears in the genome, and the number of edges equals the genome length. following path compression, the graphs dramatically decrease in size as non-branching chains are replaced by single nodes.

path compression is a standard, natural technique, but additional simplifications are also possible for reducing the size of the genome graph even further. decision nodes--those with more than one predecessor or more than one successor--are the complication in extracting the correct genome sequence from a genome graph. we distinguish three types of decision nodes: forward decision nodes have more than one successor, but a single predecessor; backward decision nodes have more than one predecessor, but a single successor; and full decision nodes have both more than one predecessor and more than one successor. we refer to forward and backward decision nodes as half decisions nodes.

compressing tree-like regions
any eulerian graph g can be decomposed into simple, edge-disjoint cycles.  from this decomposition, a cycle graph cycle can be constructed with a vertex for each simple cycle in g and an edge connecting cycles if they share a node in the eulerian graph. if cycle is a tree, then g only has a single eulerian tour  <cit> . more generally, if an induced subgraph of cycle is a tree, then the corresponding region has a unique traversal in any eulerian tour. thus, these tree-like regions can be collapsed into a single node labeled by the sequence constructed from that unique tour .

rather than explicitly constructing the cycle graph, in practice it is more efficient to recursively collapse the tree-like regions, starting with the leaves. leaves can be identified by pairs of nodes u, v for which u is both the only predecessor and only successor of v, and u has only a single in-edge and a single out-edge that are not adjacent to v. in this case, the sequence of v can be appended to u, and v can be eliminated. a node u that has one or more self-loops and has only one in- and one out-edge that are not self-loops is also a leaf, and its self-loops can be collapsed into u. after collapsing a leaf, we perform any newly possible path compressions near the collapsed node.

splitting half decision nodes
the graph can be modified by splitting forward and backward decision nodes into several new nodes without changing the strings represented by the graph . if v is a forward decision node with predecessor u and successors w <dig>  ..., wm  then node v can be replaced by m new nodes v <dig>  ..., vm. edges vi → wi are added with multiplicity equal to the multiplicity of the edge v → wi. backward decision nodes can similarly be split. splitting a forward decision node in this manner may cause its predecessor to become a forward decision node, which can subsequently be split. in this way we can "unzip" a sequence of half decision nodes, thereby shifting the decision point in the direction of the unique predecessor/successor. while this transformation increases the number of nodes, the new nodes vi can often be eliminated by an application of path compression.

exploiting edge multiplicities
if, at each decision node, each incoming edge could be correctly paired with an outgoing edge, there would be no difficulty in reconstructing the correct genome. typically, without additional information, it is not possible to make any such pairings. in some cases, however, the edge multiplicities can be used to identify a predecessor of a node that must be matched with a successor . in particular, let u → v → w be three nodes in a path such that the edge u → v has the highest multiplicity among edges entering v and v → w has the highest multiplicity among edges leaving v. let cu and cw be the multiplicities of the edges u → v and v → w, respectively. if u ≠ w, we can infer that the path u → v → w must be part of any eulerian tour if cu> d+ -cw, where d+ is the number of edges leaving v. in other words, all the incoming edges coming from u cannot be matched without using at least one outgoing edge adjacent to w . this reasoning can be used to reconstruct longer subsequences of dna, but because it generally increased the size of the final graphs due to interactions with the other simplification techniques described here, we do not consider this type of simplification further in this paper.

converting non-decision nodes to edges
repeated application of these transformations typically leads to many three-node paths u → v → w where u is the only predecessor of v and w is the only successor of v but, because there are other edges incident to u and w, the path cannot be collapsed. we can, however, replace node v with an edge u → w labeled with the sequence of v . following path compression and this transformation, the graph contains either just a single node or only decision nodes that have both more than one predecessor and more than one successor.

maximal compression
the simplification procedures aim to:  coalesce multiple adjacent non-decision nodes into single nodes or edges; and  resolve some of the apparent ambiguity represented by the decision nodes. in order to estimate the smallest graph that is equivalent to the input de bruijn graph, we apply each of these transformations in turn. because several of the transformations can lead to opportunities for new applications of other transformations, the order in which we apply them is important. we start by performing path compression. then, all tree-like regions of the graph are collapsed, followed by another round of path compression. we then split all backward decision nodes, then all forward decision nodes, and perform the path compressions that have been newly made possible. finally, we convert non-decision nodes into edges. these techniques reduce, on average, the number of edges in the de bruijn graphs by a further 65% compared with performing only path compression.

counting words consistent with de bruijn graphs
in  <dig>  j.p. hutchinson and h.s. wilf  <cit>  gave an expression that can be used to compute the number of unique words consistent with a de bruijn graph. the following theorem, from  <cit> , gives an expression for the number of possible reconstructions that are consistent with the de bruijn graph. let d- and d+ be, respectively, the in- and out-degrees of vertex u . because the de bruijn graph is eulerian, d+ = d- for all u with the possible exception of two nodes s and t for which d- = d+ -  <dig> and d+ = d- -  <dig> 

theorem  <dig>  let a =  be the adjacency matrix for an n-vertex de bruijn graph g, with both auv >  <dig> and self-loops allowed. if d+ = d- for all v, then choose a vertex t arbitrarily, otherwise pick the unique t such that d+ = d- -  <dig>  finally, let ru = d+ +  <dig> if u = t or ru = d+ otherwise. then the number of words consistent with g that can be spelled ending with node t is given by   

where l is the n × n matrix with ru-auu along the diagonal and -auv in entry .

the values ru in theorem  <dig> are the number of times that the sequence represented by u must appear in the output word, given that path for the word ends at node t and thus that the output word ends with the sequence represented by t. when traversing the graph, we output u when we exit node u, except for the last node on a trail or circuit which must also be output when it is entered for the last time so that the k-mer associated with the last traversed edge is output. see  <cit>  for a proof of the above theorem. briefly, it is proved by an extension of the "best" theorem  <cit>  for counting the number of eulerian circuits modified to correct for multiple edges and for the fact that we allow eulerian trails in addition to only circuits. for example, the sequence q = "sababababab" yields a three node de bruijn graph when k =  <dig>  for this graph, the number of tours is 3!3! =  <dig> but they all yield the same sequence. by increasing the length of q in this example, we can increase the number of eulerian circuits arbitrarily, while maintaining the property that all circuits reconstruct a single word.  is computable in polynomial time.

to correctly apply theorem  <dig> to the short-read assembly problem, we have to consider the cases of linear and circular genomes separately. in the typical circular case, the graph dk will contain eulerian circuits, and any node can be chosen as the final node t. theorem  <dig> will count the number of distinct linear words q ending at t. if t occurs more than once in the genome but there is some unique sequence of dna in the genome, then cycling q to end at each instance of t yields a different word counted by , t), each of which is equivalent to the same cyclic ordering of the nodes. in this case, because there are d+ occurrences of t, the number of cyclically equivalent words starting at t is , t)/d+.

we say a de bruijn graph of a circular genome is periodic if it can be traversed with an eulerian path of the form ct for c >  <dig> and some choice of  paths w <dig>  ..., wm that do not contain t.  in the very special case of periodic, circular genomes the number of solution words does not equal , t)/d+ for each t because many words may be cyclic permutations of each other. we do not encounter this special case in the chromosomes studied here. in particular, if there is any unique sequence of dna of length ≥ k -  <dig> then the graph will not be periodic.

in the less common case of linear genomes, if the graph admits an eulerian trail, there is a single choice of which node to chose as t. if a linear genome yields an eulerian graph with eulerian circuits , then any node can be used as the final node t, but the linearization of the eulerian circuit may produce a chromosome with the wrong start position, a minor misassembly.

extracting idealized contigs and computing the n <dig> size
every edge in the genome graph corresponds to a sequence of dna in the chromosome. initially, these edges correspond to k-mer reads, but after path compression and other simplifications discussed above, these edges can represent long, unambiguous stretches of the chromosome bounded on either end by ambiguities. hence, it is reasonable to use the set of remaining edges to estimate a set of contigs that can be extracted from a genome graph. we create one contig for each edge. if non-decision nodes are collapsed into edges as described above, some edges will be labeled with dna sequences. if edge u → v has been labeled, the contig associated with an edge u → v will contain the sequence represented by node u concatenated with the sequence assigned to edge u → v, otherwise the contig will contain only the sequence represented by node u. if u → v is labeled, then the length of the contig is taken to be length + length -  <dig>  if u → v is unlabeled, the length of the contig is taken to be length - . because the sequences represented by adjacent nodes and edges overlap by k -  <dig> nucleotides, the terms  and  <dig> ensure that overlapping bases are counted only once. hence, the sum of the lengths of the contigs equals the chromosome length. the n <dig> size is the length m of the largest contig such that at least 50% of the genome is covered by contigs of size ≥ m; it is a commonly used measure of the connectedness of the assembly. computing the n <dig> size using the idealized contigs defined above gives an estimate for the achievable n <dig> size. this estimate will probably be much larger than what can actually be obtained from real, noisy data, and thus it provides a reasonable upper bound on that size in practice.

counting reconstructible genes
for many purposes, it is sufficient to reconstruct only the coding regions of the genes of a species. we consider a gene to be reconstructible if the sequence encoding it can be unambiguously inferred from the de bruijn graph to be present in the genome. for example, if a gene contains a repeat, it is less likely to be reconstructible because the repeat will introduce several possible sequences downstream of the start codon.

formally, to test whether a gene is reconstructible, we first find the node s that represents the region of the chromosome containing the start codon of the gene. we then find all paths that start at s and continue until they pass through first a backward decision and then a forward decision. for this purpose, a full decision node counts as simultaneously a backward and forward decision. if the region of the gene is wholly contained within a region represented by such a path, then we say the gene is reconstructible. this is a local definition of reconstructibility, requiring only a neighborhood around the node containing the start codon s to be considered. for the analysis presented here, we test each of the genes for reconstructibility on a graph in which the tree-like regions have been collapsed and path compression has been performed .

forward decisions are not by themselves sufficient to confuse the reconstruction: because every edge must be taken, we can exhaustively follow each path. nodes with more than one predecessor , however, "pollute" the walk and once a subsequent forward decision is encountered it is not possible to locally determine which branch should be taken. it is possible that a gene may not be considered reconstructible when walking from its start codon to its stop codon but would be reconstructible if the definition were changed to consider walking from its stop codon to its start codon. in practice, we expect few genes are reconstructible by walking forward but not reconstructible by walking backward, hence we restrict ourselves to the definition of reconstructibility above.

RESULTS
sequences and annotations
sequence and annotation data for  <dig> completely sequenced bacterial and archaeal genomes were downloaded from genbank. these genomes comprise  <dig> chromosomes and plasmids. our study was focused on the main chromosomes of these organisms, so molecules whose fasta header line included the word "plasmid" were excluded. this left  <dig> molecules, of which  <dig> were linear dna. for simplicity, these  <dig> linear molecules were excluded from subsequent analysis, leaving  <dig> molecules representing the chromosomal dna of  <dig> organisms. the annotation in the .ptt file accompanying the sequence was used when evaluating how many protein-coding genes could be uniquely reconstructed.

simplification of de bruijn graphs from prokaryotic genomes
we constructed de bruijn graphs representing the main chromosomes of  <dig> organisms  from all substrings  of length  <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig>  as described in the methods section. this resulted in representations of the chromosomes at  <dig> different resolutions. this process simulates perfect genome coverage with error-free reads. every path through this graph represents a possible reconstruction of the genome that is consistent with the read information. the initial de bruijn graphs, obtained from the set of length-k substrings, are typically very large and difficult to analyze computationally. therefore, we first simplify the graph as much as possible through a series of graph transformations, as described in the methods section above.

the simplification techniques are extremely effective in reducing the size of the genome graphs without changing the information they encode. after performing an initial round of path compression, compressing tree-like regions of the graph that have a unique traversal further reduced the number of edges in each genome graph by between 8%  and 18%  on average. these averages are somewhat skewed by a number of already small graphs that experienced a near-100% reduction in number of edges. the median reduction in number of edges ranged from  <dig> %  to  <dig> %  and is shown in table  <dig> for various read lengths. splitting half decision nodes  into several parallel paths and compressing any newly compressible paths provides a large further decrease in the size of the graph compared with the number of edges following the compression of tree-like regions. this splitting and compression gives further median reductions of between  <dig> and  <dig> percent. the reduction factor does not strongly depend on the read length. table  <dig> gives the median reduction in the number of edges achieved by this node splitting. finally, some non-decision nodes with only a single predecessor and single successor will remain. converting these nodes to labeled edges causes the number of edges to be reduced by approximately another 50% beyond the already applied reductions. the combined effect of all simplifications was to reduce the number of edges by a median of between  <dig> and  <dig> percent , creating much smaller and more manageable graphs, from which longer contiguous sequences can be extracted.

column  <dig> gives the median percent reduction in number of edges by compressing tree-like regions compared with performing only path compression. column  <dig> gives the median further reduction in number of edges achieved by splitting half-decision nodes, for various read lengths k. column  <dig> gives the median percent reduction in number of edges  achieved by the combination of collapsing tree-like regions, splitting half-decision nodes, and converting non-decision nodes to edges. percentage reduction is computed by /.

as expected, increasing read lengths leads to improved ability to reconstruct a genome: with reads of length  <dig> only  <dig> of the chromosomes have a unique solution, while  <dig> have a unique solution using reads of length  <dig>  and over a quarter  have a unique solution with  <dig> nt reads.

this is an encouraging result and demonstrates how, in the limit, increasing the read length will eventually resolve ambiguities in the genome. however, it also demonstrates the limitations of short-range paired-end protocols. if  <dig> nt reads are not sufficient to fully disambiguate the repeat structure of most genomes, then short-range paired-end reads cannot either if the separation between the endpoints of the reads is less than  <dig> nt. in fact, an assembly of short-range paired-end reads is likely to perform significantly worse than an assembly of long reads with corresponding length, since long reads are a conservative approximation of paired-end data. in particular, paired-end reads have additional sources of uncertainty  and substantial algorithmic challenges . nevertheless, even a conservative approximation is sufficient to maintain our results as a theoretically strong upper bound on the potential for assembly.

number of reconstructions consistent with genome graphs
the number of strings that are consistent with a given de bruijn graph is a reasonable estimation of the complexity of reassembling the genome given the information contained in perfect reads of a particular length. the more strings that are consistent with the graph, the more uncertain we are that a given string is the correct one. the short-read assembly problem can be completely solved, given only reads , if and only if there is only a single string consistent with the de bruijn graph.

the number of strings  consistent with a de bruijn graph g is related, but not equal to, the number of unique eulerian circuits. there may be many more eulerian circuits than solution strings because the distinct orderings of edges that differentiate eulerian circuits can lead to the same ordering of the nodes, and thus the same dna sequence. parallel edges are more than a theoretical issue: across the  <dig>   <dig> graphs considered , on average 18% of the edges had multiplicities ≥  <dig>  therefore, it is important to correct for the common case of parallel edges.

in figure  <dig>  we plot  for the de bruijn graphs g constructed from length- <dig> reads. the number of possible reconstructions is often astronomical. only the  <dig> chromosomes with fewer than  <dig> possible reconstructions are shown. as one would expect, the longer genomes generally have more solution words. however, this is not always the case. for example, yersinia pestis appears much more complicated to reconstruct than escherichia coli, even though both genomes are about the same size . hence, one cannot use genome size as the sole indicator of assembly complexity. in fact, the genome of y. pestis contains a large number of insertion sequences  <cit> , and these insertion sequences complicate its de bruijn graph.

achievable n <dig> contig size
repeats cause ambiguities in the ordering of genome segments. the location and distribution of the repeats affects the quality of the assembly: many repeats localized to a small region  make that region difficult to assemble correctly, but do not disrupt the global organization of the genome. conversely, repeats spread throughout the genome divide the sequence into many, smaller blocks whose order cannot be determined.

to determine what fraction of a typical genome can be assembled without error using reads of a given length, we extract from a simplified genome graph a set of contiguous sequences  that can be unambiguously assembled as discussed in the methods section. from this set of idealized contigs, we compute the n <dig> size, a standard measure used to assess the quality of genome assemblies. here, to facilitate comparison across hundreds of genomes, we divide the n <dig> score by the length of the chromosome to get the n <dig> contig size as a fraction of the total genome length. we we refer to this slightly modified measure as the relative n <dig> 

as expected, longer reads lead to a larger number of long contigs, and a corresponding increase in n <dig> size. figure  <dig> plots the fraction of chromosomes for which the relative n <dig> was at least a given value. with  <dig> or  <dig> nt long reads, 25-35% of the chromosomes can be nearly completely reconstructed in the absence of error. for 1000-nt reads, the median relative n <dig> size is 47% of the genome length, indicating that long contigs are often achievable. with 25-nt reads, however, the median relative n <dig> size is only  <dig> % of the genome length. despite this low n <dig> score, we will see in the next section that one can still reconstruct entire genes from even 25-nt data. median relative n <dig> sizes for other read lengths are given in table  <dig>  these idealized n <dig> sizes are a practical upper bound on what can be achieved with reads of varying sizes and provide a benchmark against which to compare the success of assembly methods.

median n <dig> as a percentage of the chromosome size and median number of genes that are reconstructible for various read lengths k.

possibility of gene reconstruction
surprisingly, most genes in most of the genomes are reconstructible, as defined above, even when using very short reads. figure  <dig> plots, for various read lengths, the percentage of chromosomes for which at least a given number of genes are reconstructible. even with reads as short as  <dig> bases, at least 85% of all genes are reconstructible in almost all chromosomes. the biggest incremental improvement in reconstructibility comes from increasing read lengths from  <dig> nt to  <dig> nt. if  <dig> nt reads are used,  <dig> % of genes are reconstructible in the average chromosome. the median number of reconstructible genes is shown in table  <dig> for various read lengths. this successful gene reconstruction is further evidence that de novo short-read sequencing can yield useful information, even with very short read lengths.

a very large fraction of the genes that are not reconstructible by this definition were made non-reconstructible by mobile genetic elements. the non-reconstructible genes were statistically enriched for annotations related to transposases, insertion sequences , phages, and integrases for read lengths  <dig>   <dig>   <dig>   <dig>   <dig>   <dig>  and  <dig> . for example, at 100-nt reads across all genomes, 49% of the non-hypothetical, non-reconstructible genes have the phrase "transpos" within their description . an additional 18% are tagged as insertion sequences. thus, at least 67% of the difficulty in reconstructing the protein-coding genes using 100-nt reads stems from such mobile genetic elements. for other read lengths, the percentage of the non-reconstructible genes tagged as transposase- or is-related ranges from 25%  to 77% . conversely, most transposase genes are not reconstructible using reads = 50-nt long: at 50-nt reads, 51% of transposase genes and 72% of is-related genes were non-reconstructible.

the remaining non-reconstructible genes may be of interest on their own. repeats within and nearby genes are one of the mechanisms through which prokaryotes achieve phase variation  <cit> , for example, in order to evade the immune system. in addition, this idealized assessment of the ability to assemble coding regions gives us another benchmark against which to compare assemblies constructed from noisy data. given these results, we should expect assemblies to contain the complete sequences of a high fraction of protein-coding genes.

CONCLUSIONS
we present a comprehensive examination of the difficulty of reconstructing prokaryotic genomes from short substrings based on several measures derived from an idealized analysis of the genome reconstruction problem. the resulting simplified genome graphs for  <dig> organisms are publicly available at http://www.cbcb.umd.edu/research/complexity/. these graphs may be a starting point for additional repeat analysis  <cit> .

these graphs provide a strong theoretical upper bound on the performance of short read assembly, and therefore provide a yardstick against which to measure the performance of current and future genome assemblers. in particular, while computational methods and laboratory protocols for minimizing sequencing errors and uneven coverage are improving, our results reveal the unavoidable fundamental limitations of assembly from short reads. even paired-end reads, which have been extremely useful for resolving certain classes of repeats, will not alone solve the assembly problem for most organisms.

finally our analyses show that even though there may be an astronomical number of consistent genome reconstructions assembled from short reads, even extremely short reads  are sufficient to correctly reconstruct the majority of genes in an organism under idealized conditions. for many genome studies, this may be sufficient to satisfy the goals of the project, but caution is prudent if computing a full unambiguous genome reconstruction from short reads is required. if practical results are not as impressive, those results can be attributed to either non-ideal data or deficiencies in the algorithms, rather than inherent limitations. by better understanding these limitations with idealized data, we can also begin to investigate what additional information  is most profitably added to short-read sequencing data to make these new technologies as useful as possible.

authors' contributions
ck, mcs, and mp designed the study and wrote the manuscript. ck and mcs performed the computational experiments. all authors read and approved the final manuscript.

