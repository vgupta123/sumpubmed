BACKGROUND
selection of beneficial mutations may cause the fixation of alleles conferring fitness advantage to the organisms of a population, which ultimately may result in the adaptive evolutionary diversification of life forms. uncovering at the molecular level how this biological process of phenotypic diversity arises and is maintained in nature has long been of interest to the evolutionary biologist. in this regard, the advent of new genome sequencing technologies has remarkably increased the efficiency of contemporary molecular research . in particular, significant progress has been made towards the discovery of protein-coding genes that may underlie adaptive evolution of phenotypes. this has prompted an enormous collection of new genome sequence data requiring fast and efficient specialized bioinformatics software for assisting researchers in downstream analyses  <cit> .

currently most available tests of adaptive evolution are based on maximum likelihood  codon-based models that assess the nonsynonymous  to synonymous  substitution rate ratio , where ω can be greater, equal or less than  <dig>  indicating positive, neutral or negative selection, respectively  <cit> . although a large number of applications integrating this framework and accounting for codon-based likelihood models of evolution are readily available, the codeml program from the phylogenetic analysis by maximum likelihood  package  <cit>  is the most widely used in the literature, statistically robust and accurate in examining selective pressure . henceforth, codeml will only refer to codon substitution models.

the evaluation of selection signatures is processed in two stages. first, codeml executes different model approaches, each of which uses different assumptions about how ω varies across a multiple sequence alignment  and/or phylogeny:  site-specific models   <cit> ,  branch-specific models   <cit> ,  branch-site specific models   <cit>  and  clade-specific models   <cit> . second, for all models, a likelihood ratio test   <cit>  is used to examine the goodness-of-fit between two nested models and determine which fits the dataset better .

we present a brief summary of the models here addressed and the reader is encouraged to see the involved references for further information.

the sm are generally applied to detect the presence of positively selected sites in the msa. it employs different site class specific models:  the alternative classes which includes model  <dig> ,  <dig>  and  <dig>  and,  the null classes which includes model  <dig> ,  <dig> ,  <dig>  and 8a . models are pairwise compared  using lrt. whenever lrts are significant, sites under selection are identified by the bayes empirical bayes  analysis  <cit> , except for the m <dig> vs. m <dig> comparison, since it does not allow detection of positive selection  <cit>  and m <dig> does not provide the beb estimation.

the branch related models  require an a priori partition of the phylogeny by implementing a branch labeling scheme allowing one to examine one or more lineages or even entire clades , usually defined as “foreground” and “background” branches or lineages  <cit> . additional information on technical aspects can be found in paml documentation.

the bm determines signals of divergence among lineages by examining whether changes in ω ratios vary significantly or not between branches . although various model comparisons are possible, this generally involves performing two lrt comparisons among three models  <cit> . the first is accomplished by testing the null m <dig> against an alternative with a two-ratio unconstrained  model . if tru fits the data better, then the second lrt comparison can be tested in order to validate signals of divergence. here, tru is tested against a two-ratio constrained  model . because the beb analysis is not quantified in bm, positively selected sites cannot be inferred.

the bsm arose from the extension of the sm and bm and allows the detection of episodic selection occurring along few lineages  <cit> . here ω is allowed to vary both among sites and lineages, enabling inter-specific comparisons and detection of selection in a subset of sites within a subset of branches of the phylogenetic tree  <cit> . in the phylogeny only two partitions are possible  <cit> ,  one configuring a model that allows positive selection on the foreground branches, the alternative model a , and  the other, a model that allows neutral and negative selection both on the foreground and background lineages, the null model a <dig>   <cit> . in case of a significant lrt in this test , sites under positive selection can be inferred with high posterior probabilities through the beb analysis.

similarly, to the bsm, the cm can test for variation in selection pressures acting among sites and lineages, allowing the detection of divergent selection among clades, whether in the foreground or background branches. under cm, a phylogeny can incorporate more than two partitions  <cit> . here the alternate model c   <cit>  estimates several separate ω ratios for two or more clades and is compared to a null model 2a_rel , by applying a constraint enforcing ω to be fixed among clades  <cit> . the significance of site-specific divergence among clades is established via a lrt comparison between the two models   <cit> . if the cmc is significant, then the beb analysis can be used to identify sites experiencing divergence among clades. to further decide if divergently selected sites among clades are significantly under the action of positive selection, the value ω of the divergent site class is constrained to be equal to  <dig> and compared against an unconstrained cmc  <cit> .

sm, bm, bsm and cm lrt comparisons are respectively summarized in additional file 1: tables s1–s <dig> .

the codeml models constitute a well-defined workflow for analyzing genome-wide data and documenting selection in protein-coding genes. however, it can be highly challenging in practice due to the huge amount of information, as data integration and analysis involves often multiple tasks that need to be manually performed by the researcher, including gathering and organizing input data  <cit> , manipulating software configuration files, and running and analyzing the results. specifically in the codeml workflow, it is necessary to generate  msas,  phylogenetic trees,  edit the parameter files,  organize files in folders,  run codeml,  collect all necessary ml parameter estimates and  estimate all lrt comparisons in spreadsheet documents. moreover, the challenge is even greater when performing these tasks repetitively for multiple datasets , making the whole process very tedious, error-prone and time-consuming.

to overcome such difficulties several bioinformatics resources have been developed. they can be organized in two paradigms: single-task  and multi-task . in the single-task software group, sm executions are possible in all software, while bm and bsm are also possible in armadillo and pamlx. this last one additionally allows cm executions. regarding the multi-task software group, sm executions are possible in idea, potion and vespa, while bsm are possible in both gcodeml and vespa. idea further allows bm executions. in this group, idea, gcodeml and vespa provide parallelized and/or distributed executions by including cluster or grid functionality. despite providing an important advancement in large scale analyses, they are however, too complex to install and configure  <cit> , and usually require unavailable infra-structures or informatics skills. for instance, the gcodeml is mainly intended for production managers  <cit> . such difficulties are minimized by the recent potion software aimed at the more ubiquitous multi-core environment. here a single workstation may currently offer  <dig> or more cores by combining two or more cpus, thus providing a reasonable amount of processing capacity.

in addition to the desktop-based applications described, there are also web-server implementations available, namely psp  <cit> , phyleasprog  <cit>  and selecton version  <dig>   <cit> . all involve sm, but psp and phyleasprog also include bsm analyses.

to our knowledge, from the available literature and from the mentioned multi-task software group, detection of positive selection is performed mainly using sm, while none of them considers the cm approach . despite all these attempts, there is still the need of a software which simplifies the manual manipulation required for evolutionary analyses, while still including all the codeml models.

here we propose lmap , a high-throughput user-friendly software package designed to simplify evolutionary analyses performed with any of the described codon substitution models . lmap package is composed of six command-line and interactive perl  <cit>  applications designed to handle step-by-step the codeml workflow, thus minimizing user intervention. although there are six applications, one of them  further combines all others hereby reducing the codeml workflow to a single execution.

to enable lmap trial and testing, an example dataset consisting of the mitochondrial dna of  <dig> freshwater and terrestrial turtles is provided in the archive.

in the following sections, we present lmap development, devised codeml templates, how input is simplified and how scheduling copes with workstation cpu capacity. finally, we present the functioning of each lmap application, discuss potential future developments and introduce the example dataset with which are performed benchmarking tests.

implementation
lmap development
lmap package was implemented in perl  <cit>  and has been tested in linux/unix and macos. it consists of six command-line and/or interactive applications,  gmap.pl,  cmap.pl,  mmap.pl,  imap.pl,  omap.pl and  lmap.pl. additionally, four specific lmap library modules  support the execution of these applications.

lmap requires the comprehensive perl archive network   <cit>  modules in five cases:  in gmap.pl, for parsing and editing of newick tree files ;  in mmap.pl, for email functionalities and interactive monitoring of codeml parallel executions ;  in gmap.pl and omap.pl, for interactive modes;  in omap.pl, for statistics functions involved in estimation of lrts; and  in all applications, for handling files and directories.

although bioperl modules enable paml results processing, its implementation is limited to users with programming skills. by contrast, our package implements all necessary functions, excluding the cases mentioned above hereby requiring minimal installation efforts. such necessary functions include specific procedures in the imap.pl application to allow the retrieval of ml parameter estimates.

to alleviate the installation of cpan modules and utility programs we have included the install.pl application .

lmap management of codeml parameters and templates
since all codon substitution models  require different codeml control file configurations, we have defined nine templates . two templates are used for sm  , three for bm  , two for bsm  , and two for cm  . some parameters on these templates are automatically adjusted by our software, such as input dataset , translation table code , nssites, kappa  and omega  values. before getting started, the user is encouraged to verify the remaining parameters for each template and make any necessary adjustments, which will remain applicable until new modifications are enforced. in order to detect and avoid local optima  <cit> , several values of k and ω parameters are by default defined in gmap.pl . to this end, any selection of values, can be used to perform independent executions for the same dataset.

lmap choice of selection models and input files
here we describe how lmap simplifies input by asking the researcher to specify the selection models in the dataset, ensuring the correct associations of msa and tree files in the templates.

this is accomplished when naming the msa file and the phylogenetic tree file. in the case of msa file, three key elements are necessary:  any identity or abbreviation of the protein-coding gene,  model identity to be applied, which could be run one or more at a time  and  the appropriate icode parameter value. thus, the msa identity is represented as _.fasta . in the case of the phylogenetic tree, the nomenclature depends on the existence of labeling. tree labeling is necessary when examining brm, but not with sm. therefore, these two procedures require different identities. in the sm case, the user needs to type the same gene name as its correspondent msa file and the sm letter ‘s’, resulting in the format _s.nwk . in the brm case, tree labeling depends on the branch partitions scheme  defined by the researcher. hence, the tree file should be named after the hypothesis reference  and include one or a combination of brm , which is represented as _.nwk . it is worth noting that in the sm case, the msa will only be combined with a similarly named phylogenetic tree, that is, _.fasta with _s.nwk  .

an advantage of this design is that it allows the user to combine in a single step one or more, if not all unique msas, with as many as required phylogenetic tree files  to be run, regardless of the models specified  . to conclude, in order to combine an msa and a tree, the same model letter must be specified in both input files names. please see the manual included in lmap package for more information.

lmap scheduling of codeml executions
in this section, we describe how the mmap.pl application was designed to cope with several codeml executions and its relation with the workstation cpu capacity.

at this stage, the input files together with codeml control files are ready for execution in subfolders within a base folder, which we refer to henceforth as directory structure.

the mmap.pl allows the user to run as many codeml tasks as desired. because the total number of tasks can be very large, most probably surpassing the total number of cpu cores, the application provides the command-line option  -n to define the maximum tasks to be run. this will define the maximum number of cores utilized . when used, a value for this option must be defined, or otherwise the value is automatically estimated. in this case, the application quantifies an approximate number of available cpu cores, which in consequence defines the maximum number of codeml tasks to be run. this is achieved by calculating the difference of total number of cores to the overall cpu load. under these circumstances, the quantification of available cpus by the application makes sense, since it maximizes the performance of the whole scheduling.

it is noteworthy, that the greater the number of cpu cores available, the faster the execution of the mmap.pl application will be. nevertheless, this is highly dependent on the user’s workstation configuration . please see the example dataset and benchmarking section for more information.

RESULTS
lmap applications and functionalities
the lmap software package consists of six applications. the first five are independently applied to accomplish one-by-one the system workflow, which should be accomplished in the following order: gmap.pl, cmap.pl, mmap.pl, imap.pl, omap.pl. the sixth and last application, lmap.pl, automatically combines all others and facilitates the workflow in one step . we describe next the functionality of each application in an orderly fashion and according to several related command-line options.fig.  <dig> lmap workflow. flowchart exhibiting the lmap.pl workflow where five lmap applications are sequentially combined to gather results from each codeml execution prepared and executed in the directory structure



the gmap.pl provides two functions:  generation of the directory structure and  editing and/or labeling of phylogenetic trees. in the first, codeml input files are organized based on input datasets, clos and user definitions . the option -m, enables the selection of which codeml models to run , hereby selecting the input files which have the same indication . moreover, the options -k and -o aid in specifying k and/or ω values for the same dataset to avoid local optima  <cit> , resulting in multiple executions starting from different initial parameter values. the second gmap.pl function is accessed by specifying the clo -t, instead of -t and enables an interactive mode  during which a cladogram character-based layout is displayed with numbers identifying tree nodes. based on the researcher’s a priori hypotheses, specific branches  or clades  of interest may be labeled into foreground or background , where n is the branch partition number .fig.  <dig> tree editing interactive screen of gmap.pl. the phylogenetic tree file  is displayed as a cladogram, allowing the user to make the necessary labeling. this screen shows various information , such as the total number of nodes modified or affected, the total number of nodes labeled, the current selected display mode, which enables alternative display of phylogenetic tree information  and the cladogram branch length. the interactive commands for labeling and other operations can be consulted through an interactive help menu, by entering the “?” character in this screen or through the command-line option “--help” , which will print the help into a specific text file in current directory 



the cmap.pl  is designed to allow users to make additional changes to any parameters of the codeml control files available in the directory structure. these modifications do not affect the lmap templates and any adjustment to the parameters can take place at any time, before the codeml executions.

the mmap.pl  application aims to run the codeml program on the directory structure. during this phase, the user is able to monitor the codeml instances that are currently in execution  , those which will be executed  and those that have finished  . through the monitoring, the user is able to quickly understand whether the codeml instances are running correctly , or otherwise are hanging or waiting for the user reply, which could mean invalid dataset specifications. having found unwanted or problematic instances, these can be terminated by accessing the built-in process manager screen . another useful functionality of mmap.pl, is that it provides a non-mandatory email notification, which occurs as soon as the batch of instances is completed.fig.  <dig> interactive functioning of mmap.pl. a default or main “run status” screen presenting the currently running codeml tasks; by pressing “2”, shows the “task status” screen, showing b the tasks that will be running next  and c the tasks currently finished  ; d when interrupting the execution of mmap.pl , beyond the choice of quitting, the user has also the choice to proceed to the built-in process manager here presented, allowing the termination of specific tasks. in this case, it is possible to terminate a group of tasks by typing “g:mmapid” or a single task “p:procid”. the identifiers for mmapid and procid are shown in the table, in the respective columns



after mmap.pl terminates, the resulting information from all the analyzed models can be extracted using imap.pl . this information is organized in a csv file and will contain each model organized by rows, while its ml parameters estimates  are organized by columns.

following the imap.pl, the csv file can be subsequently organized and summarized using the interactive application omap.pl , to finally estimate the lrts and their statistical significance  . this application comprehends a total of  <dig> interactive commands  and two data containers to let the user conveniently manipulate the input data . for the lrts to be estimated all alternative and null models must be paired in consecutive rows, with the null placed above its alternative model counterpart. once the statistical confidence value is defined and after issuing “plrt”  , five new columns are automatically added to the final table, where the estimated results for each test are only displayed in the alternative model rows .fig.  <dig> interactive functioning of omap.pl - user table. the resulting csv table containing the bm data from imap.pl, where each row contains the absolute path to the corresponding codeml results file in the directory structure. this path is decomposed in columns by omap.pl, whereby each subfolder name constitutes a column. this additional on-screen information complements the codeml maximum likelihood parameter estimates simplifying overall data perception, advantageous for organization processes. at the top, for simpler use across the interactive commands, the column names  are shown as “c + number” , whereas the original csv column names, are revealed, through the command “fh” . it is possible to adjust visible table information, by scrolling and by hiding columns or defining number of visible rows. below the table, from left to right, various information is shown , such as the total number of rows and of columns, the number of selected rows, the number of visible rows and the number of hidden columns. scrolling information is shown below; activate scroll by typing “ctrl-d”, use arrow keys to scroll up or down, “home” key to go to top or “end” key to go to bottom. when finished, deactivate scroll by typing “ctrl-\”, to enable interactive commands processing. below, the table currently shown  is indicated by the letter “u”  in the omap prompt line. the interactive commands are consulted in two ways, either through a help screen, triggered by entering the “?” command, or through the clo “--help” , which will print the help into a text file in the current directory 

fig.  <dig> interactive functioning of omap.pl - final table. the data shown consists of all atp <dig> hypotheses with lrt estimations. all hypotheses were separated and organized from the initial user table  using omap.pl. the five lrt columns delimited by the red square, were appended after entering the “plrt  <dig> ” command . these columns are always defined in the following order,  the lrt comparison , whose parameter estimates define the following columns;  deltalnl , for twice the difference on the lnl scores;  degrees of freedom ;  p-value  and  conclusion , where two acceptance results are possible: h <dig>  or h <dig> . through this command, lrts were performed for all selected m <dig> and tru paired rows. to improve figure readability, five columns  were hidden, with the command “hide c7-11” . remaining aspects of this figure are as explained in fig.  <dig> legend, except for the current table indication  in omap prompt, here showing the letter “f” 



the lmap.pl combines all above described applications in a single action, resembling a computational pipeline . proceeding in this manner, the users need only to specify minimal clos requirements , such that no intervention is needed afterwards and until completion, when the researcher is finally required to estimate lrts. during the lmap.pl execution, the clo -m  has the advantage to produce in one step all output csv files from all the models results indicated, as opposed to imap.pl, which requires several separate executions. the simplicity of lmap.pl is also attained given that it excludes important clos  that are available in the individual applications, such as the clo -x from the mmap.pl  or the clo -t from gmap.pl .

lmap is a straightforward and useful package to anyone seeking to perform high-throughput analyses of multiple genes or datasets. through all its applications dismisses the need of manually creating folders and handling  datasets, editing control files, manual monitoring of codeml program executions and retrieval of various ml parameter estimates. likewise, lmap allows to automatically organize all results and perform lrts in endless consecutive pairs of rows using a single interactive command. additionally, four applications  are not tied to any special constraints of file identity or formats, rather they can be employed in any existing directory structures that have manually been created by the user. in this way, by adjusting the command-line options accordingly, it is possible to use cmap.pl to modify any codeml control files as well as to use mmap.pl and imap.pl to analyze the data and retrieve results, respectively. furthermore, lmap generates csv tables bearing an appropriate format suitable for publication. to conclude, our software solves a variety of difficulties with just a few command-line options and together gives the possibility of receiving an email notification after completion.

here important advantages standout over the potion software. beyond the incorporation of the brm and phylogenetic tree labeling functionality, lmap enables additional executions to avoid local optima and provides improved installation procedures . additionally, lmap makes the terminal more appealing to users, by providing a more structured and informative visualization further enhanced by the use of colors .

presently, lmap has been developed to perform the analyses with the codon substitution models from the codeml program from the paml package. further features to make lmap even more versatile will be incorporated in the near future. nonetheless, lmap is not applicable in windows os due to its main dependency on the screen utility program. this required compatibility feature, could be solved through the development of a graphical user interface . it would be interesting to develop lmap further, by incorporating other kinds of codeml analyses, such as amino acid substitution models, and include other paml programs, such as baseml or others. regardless, the lmap package will be continuously improved and updated towards the researcher’s needs, which has been accomplished by its application in several ongoing research studies in our group.

example dataset and benchmarking
an example dataset is provided in lmap archive to help users explore and experience the workflow of the package. this folder  contains two directories, one for msas and the other for phylogenetic trees, with files properly identified. a total of  <dig> whole mitochondrial genome sequences from turtle species  were retrieved from the online ncbi database. from this survey,  <dig> mitochondrial dna  protein-coding genes  were selected, which additionally compose the concatenated alignment, designated as tmconc <dig> 

to execute lmap, simply type the following in the command-line: “lmap.pl -a ./exampledataset/msas/ -t ./exampledataset/trees/ -d . -j exampledatasetresults -m s,b,c,w -n  <dig> --no-omap”. through clos -a and -t, the input files are retrieved to subsequently run the selected models . likewise, the clo -j identifies the main directory structure , which will contain all results  and is generated in the folder specified by clo -d “.” . to fulfil the workstation cpu capacity, the maximum number of desired tasks was indicated through the clo -n, which in our example was  <dig>  for purposes of benchmarking, through the inclusion of the clo --no-omap, the idle execution time from omap.pl was avoided forcing imap.pl to be executed last.

the output of this command-line originated  <dig> codeml instances that took 11 h, 55 min and 43 s to complete. this was measured in the unix time  <cit>  utility program, by using a single workstation configured with 64 gb of ram and two intel xeon e5-2650v <dig> processors, which together yield a total of  <dig> hyper-threading cores. in contrast, using a single core, the same instances would take about 322 h, 20 min and 18 s . to summarize, our package does not interfere in the execution time required by paml, but instead mitigates how much the researcher spends overseeing each step of the workflow, from the moment the input files are ready to be analyzed, which may be none or minimal.

CONCLUSIONS
we have developed a simple, versatile and highly customizable package named, lightweight multigene/multi-core analyses in paml  that readily enables the employment of different codeml models of molecular adaptive evolution  and makes possible the analyses of a large number of datasets. at minimum, two files with the appropriate identity are required within a single input directory: one for the msa and the other for the phylogenetic tree. from this instant, lmap automatically creates, organizes, executes and extracts all information from the codeml results. thereon, the user is required to manipulate and organize  possibly hundreds or thousands of rows  of his/her dataset in order to accomplish the lrt estimations. despite this mediation, the process is much simpler than if performed with often slow spreadsheets. additionally, lmap allows users to carry out phylogenetic tree labeling; as well as to monitor and control executing codeml tasks; re-run datasets which might not have correctly finished and last but not least, receive an email notification when results are ready. to our knowledge, currently there is no other software that combines in one all the described codeml models. lmap has been developed as an open-source command-line and interactive package of tools, allowing its integration into more complex open-source bioinformatics pipelines.

availability and requirements
project name: lmap

project home page: http://lmapaml.sourceforge.net/

operating system: linux/unix and macos

programming language: perl

other requirements: codeml   <dig> ), cpan modules , screen and sendmail unix command-line utilities.

license: gnu general public license, version  <dig>  

any restrictions to use by non-academics: no restrictions except the ones stated in gplv <dig> 

installation
the lmap package provides two additional applications to easily enable lmap functionality and installation:  the install.pl to enable the installation of all cpan modules and utilities and  the configure.pl to enable the configuration of lmap package. a manual with detailed instructions is included in the archive to allow lmap user-friendly installation and application.

additional files
additional file 1: tables presenting templates definition and summary of models comparison. table s <dig>  sm templates defined by the codeml control file parameters values and summary of lrt comparisons. table s <dig>  bm templates defined by the codeml control file parameters values and summary of lrt comparisons. table s <dig>  bsm templates defined by the codeml control file parameters values and summary of lrt comparisons. table s <dig>  cm templates defined by the codeml control file parameters values and summary of lrt comparisons. 

additional file 2: figures exhibiting lmap applications options. figure s <dig>  command-line options for gmap.pl application. figure s <dig>  interactive commands for gmap.pl application. figure s <dig>  command-line options for cmap.pl application. figure s <dig>  command-line options for mmap.pl application. figure s <dig>  command-line options for imap.pl application. figure s <dig>  command-line options for the omap.pl application. figure s <dig>  interactive commands for omap.pl application. figure s <dig>  command-line options for the main lmap.pl application. 

additional file 3: resulting tables from lmap execution of the included mitochondrial protein-coding genes dataset. table s <dig> 
imap.pl results file from bm. table s <dig> 
imap.pl results file from bsm. table s <dig> 
imap.pl results file from cm. table s <dig> 
imap.pl results file from sm. 



abbreviations
bebbayes empirical bayes

bmbranch models

brmbranch related models 

bsmbranch-site models

clocommand-line option

cmclade models

cmcclade model c

cpancomprehensive perl archive network

cpucentral processing unit

csvcomma-separated values

dnnumber of non-synonymous substitutions

dsnumber of synonymous substitutions

gnugnu’s not unix!

gplv3gnu general public license version  <dig> 

gridglobal resource and information database

guigraphical user interface

hrhypothesis reference

ideainteractive display for evolutionary analyses

impact_sintegrated multiprogram platform to analyze and combine tests of selection

jcodajava codon delimited alignment

lmaplightweight multigene analyses in paml

lnllog-likelihood

lrtlikelihood ratio test

m0model 0

m1amodel 1a

m2amodel 2a

m2a_relmodel 2a_rel

m3model 3

m7model 7

m8model 8

m8amodel 8a

mamodel alternative

ma1model alternative 

mlmaximum likelihood

msamultiple sequence alignment

ncbinational center for biotechnology information

osoperating system

pamlphylogenetic analysis by maximum likelihood

perlpractical extraction and report language

potionpositive selection

pspprokaryotic selection pressure

smsite models

trctwo-ratio constrained model 

trutwo-ratio unconstrained model

vespavery large-scale evolutionary and selective pressure analyses

